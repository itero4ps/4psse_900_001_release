OBJECT Table 11012361 Site Mngmnt. Hours Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               HourPortalSetup@1100528300 : Record 11020454;
             BEGIN
               IF Type <> Type::UnmannedPlant THEN
                 TESTFIELD("Employee No.");
               FillDocNoPostingDate;
               CheckResetOnComponentType();  //*C-027136
               UpdateProjectHourLine(UpdateAction::Insert);
               UpdateHeaderStatus(FALSE); //T005889.n
             END;

    OnModify=VAR
               HourPortalSetup@1100528300 : Record 11020454;
             BEGIN
               IF (HourPortalSetup.READPERMISSION) THEN BEGIN
                 IF (NOT HourPortalSetup.GET) THEN
                   HourPortalSetup.INIT;
                 IF (HourPortalSetup."Hour Portal Active") AND ("Line Template Code" = '') THEN
                   FIELDERROR("Line Template Code");
               END;
               CheckIfChangingLineIsAllowed;
               CheckResetOnComponentType();  //*C-027136
               CheckProjectElement(GUIALLOWED); //T005889.n
               CheckDeleteUnmandPlantHourLine(UpdateAction::Modify);
               UpdateProjectHourLine(UpdateAction::Modify);
               UpdateHeaderStatus(FALSE);
               IF HourAccRec.GET(Year,Week,"Supplying Company","Employee No.") THEN BEGIN
                 HourAccRec."Modified By" := USERID;
                 HourAccRec.Modified := CURRENTDATETIME;
                 HourAccRec.MODIFY;
               END;
             END;

    OnDelete=VAR
               HoursConsentLine@1100528000 : Record 11020437;
             BEGIN
               CheckIfChangingLineIsAllowed;
               CheckDeleteUnmandPlantHourLine(UpdateAction::Delete);
               UpdateProjectHourLine(UpdateAction::Delete);
               UpdateHeaderStatus(TRUE); //T005889.n

               HoursConsentLine.SETRANGE(Year, Year);
               HoursConsentLine.SETRANGE(Week, Week);
               HoursConsentLine.SETRANGE(Employee, "Employee No.");
               HoursConsentLine.SETRANGE(LineType, HoursConsentLine.LineType::Normal);
               HoursConsentLine.SETRANGE("Line No.", "Line No.");
               HoursConsentLine.SETRANGE(Source, HoursConsentLine.Source::"Site Mngmnt. Hours");
               HoursConsentLine.DELETEALL(TRUE);
             END;

    OnRename=BEGIN
               UpdateProjectHourLine(UpdateAction::Rename);
             END;

    CaptionML=ENU=Site Mngmnt. Hours Line;
  }
  FIELDS
  {
    { 20  ;   ;Year                ;Integer       ;CaptionML=ENU=Year;
                                                   MinValue=1 }
    { 30  ;   ;Week                ;Integer       ;CaptionML=ENU=Week;
                                                   MinValue=1;
                                                   MaxValue=53 }
    { 35  ;   ;Object No.          ;Code20        ;OnValidate=VAR
                                                                lvObjectRec@1100485000 : Record 11012359;
                                                                lvCostCodeRec@1100485005 : Record 11012083;
                                                                lvWageComp@1100485004 : Record 11012014;
                                                                lvEmployeeRec@1100525000 : Record 5200;
                                                              BEGIN
                                                                //*27119.so  Move to below, because there "Object No." set be another
                                                                //IF Type = Type::Indirect THEN BEGIN
                                                                //  IF "Object No." <>'' THEN BEGIN
                                                                //    IF lvCostCodeRec.GET("Object No.") THEN BEGIN
                                                                //      SiteMngmntHoursSetup.GET;.GET;
                                                                //      VALIDATE("Wage Component",lvCostCodeRec.Component);
                                                                //      IF NOT SiteMngmntHoursSetup."Fill Wage Comp. By Indirect" THEN
                                                                //        "Wage Component" := '';
                                                                //      IF lvWageComp.GET(lvCostCodeRec.Component) THEN BEGIN
                                                                //        IF lvWageComp."Kilometer Expense" THEN BEGIN
                                                                //          "Component Type" := "Component Type"::Kilometers;
                                                                //          lvEmployeeRec.CHANGECOMPANY("Supplying Company");
                                                                //          lvEmployeeRec.GET("Employee No.");
                                                                //          SetDefaultDriverType(lvEmployeeRec."Driver Type");
                                                                //        END;
                                                                //      END;
                                                                //    END;
                                                                //  END;
                                                                //END;
                                                                //*27119.eo

                                                                IF "Object No." <> xRec."Object No." THEN BEGIN
                                                                  Element := '';
                                                                  "Extension Contract" := '';
                                                                  "Object Name" := '';
                                                                  //"Wage Component" := '';  //*27119.o
                                                                  "Plant Location" := '';
                                                                  IF Type <> Type::Indirect THEN
                                                                    "Shift Code" := '';
                                                                END;

                                                                IF gSetProjHrsValidateMode AND (Type <> Type::Indirect) THEN BEGIN
                                                                  lvObjectRec.GET("Receiving Company", lvObjectRec.Type::Project, "Object No.");
                                                                  "Object Name" := lvObjectRec.Description;
                                                                END ELSE BEGIN
                                                                  lvObjectRec.SETCURRENTKEY(Type,Code);
                                                                  IF "Receiving Company" <>'' THEN
                                                                    lvObjectRec.SETRANGE(Company,"Receiving Company");
                                                                  lvObjectRec.FILTERGROUP(6);
                                                                  CASE Type OF
                                                                    Type::Indirect:
                                                                      lvObjectRec.SETRANGE(Type,lvObjectRec.Type::"Cost Code");
                                                                    Type::Service:
                                                                      lvObjectRec.SETRANGE(Type,lvObjectRec.Type::"Service Order");
                                                                    ELSE
                                                                      lvObjectRec.SETRANGE(Type,lvObjectRec.Type::Project);
                                                                  END;
                                                                  lvObjectRec.FILTERGROUP(0);
                                                                  lvObjectRec.SETRANGE(Code,"Object No.");
                                                                  IF lvObjectRec.COUNT > 1 THEN BEGIN
                                                                    lvObjectRec.Code := "Object No.";
                                                                    lvObjectRec.Company := "Receiving Company";
                                                                    IF PAGE.RUNMODAL(0, lvObjectRec) = ACTION::LookupOK THEN BEGIN
                                                                      "Receiving Company" := lvObjectRec.Company;
                                                                      "Object No." := lvObjectRec.Code;
                                                                      "Object Name" := lvObjectRec.Description;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    lvObjectRec.FINDFIRST;
                                                                    "Receiving Company" := lvObjectRec.Company;
                                                                    "Object No." := lvObjectRec.Code;
                                                                    "Object Name" := lvObjectRec.Description;
                                                                  END;
                                                                  IF Type IN [Type::Plant, Type::UnmannedPlant] THEN BEGIN
                                                                    FillDefaultPlantCompany();  //* Receiving Company can be modified
                                                                    IF "Object No." <> xRec."Object No." THEN
                                                                      "Plant Location" := FillDefaultPlantLoc();
                                                                  END;
                                                                END;

                                                                //*27119.sn
                                                                IF Type = Type::Indirect THEN BEGIN
                                                                  IF "Object No." <> '' THEN BEGIN
                                                                    SiteMngmntHoursSetup.GET;
                                                                    lvCostCodeRec.CHANGECOMPANY("Receiving Company");
                                                                    lvCostCodeRec.GET("Object No.");
                                                                    IF lvCostCodeRec.Component = '' THEN BEGIN
                                                                      "Wage Component" := '';
                                                                      "Component Type" := "Component Type"::Hours;
                                                                    END ELSE BEGIN
                                                                      VALIDATE("Wage Component",lvCostCodeRec.Component);
                                                                      IF (NOT SiteMngmntHoursSetup."Fill Wage Comp. By Indirect") AND ("Component Type" = "Component Type"::Hours) THEN
                                                                        "Wage Component" := '';
                                                                      IF lvWageComp.GET(lvCostCodeRec.Component) THEN BEGIN
                                                                        IF lvWageComp."Kilometer Expense" THEN BEGIN
                                                                          "Component Type" := "Component Type"::Kilometers;
                                                                          lvEmployeeRec.CHANGECOMPANY("Supplying Company");
                                                                          lvEmployeeRec.GET("Employee No.");
                                                                          SetDefaultDriverType(lvEmployeeRec."Driver Type");
                                                                        END;
                                                                      END;
                                                                    END;
                                                                  END;
                                                                END;
                                                                //*27119.en

                                                                FillDepartmentCode;
                                                              END;

                                                   OnLookup=VAR
                                                              ObjectRec@1100485000 : Record 11012359;
                                                              OldObjectNo@1100525000 : Code[20];
                                                            BEGIN
                                                              ObjectRec.RESET;
                                                              ObjectRec.SETCURRENTKEY(Type,Code);

                                                              IF Type =Type::Indirect THEN BEGIN
                                                                ObjectRec.FILTERGROUP(9);
                                                                ObjectRec.SETRANGE(Type,ObjectRec.Type::"Cost Code");
                                                                IF "Receiving Company" <>'' THEN BEGIN
                                                                  ObjectRec.SETRANGE(Company,"Receiving Company");
                                                                  ObjectRec.Company := "Receiving Company";
                                                                END;
                                                                ObjectRec.FILTERGROUP(0);
                                                                ObjectRec.Type := ObjectRec.Type::"Cost Code";
                                                                ObjectRec.Code := ObjectRec.Code;
                                                                IF PAGE.RUNMODAL(0,ObjectRec)= ACTION::LookupOK THEN BEGIN
                                                                  "Receiving Company" := ObjectRec.Company;
                                                                  VALIDATE("Object No.",ObjectRec.Code);
                                                                END;
                                                              END ELSE BEGIN
                                                                OldObjectNo := "Object No.";
                                                                IF "Receiving Company" ='' THEN BEGIN
                                                                  ObjectRec.SETRANGE(Type,ObjectRec.Type::Project);
                                                                  IF (Type = Type::Service) THEN
                                                                    ObjectRec.SETRANGE(Type,ObjectRec.Type::"Service Order");
                                                                  SitemngmntEmployees.RESET;
                                                                  SitemngmntEmployees.SETRANGE("No.","Employee No.");
                                                                  IF SitemngmntEmployees.FINDFIRST THEN
                                                                    IF SitemngmntEmployees.COUNT = 1 THEN
                                                                      ObjectRec.SETRANGE(Company,SitemngmntEmployees.Company);
                                                                  IF ObjectRec.FINDFIRST THEN
                                                                    IF PAGE.RUNMODAL(0,ObjectRec)= ACTION::LookupOK THEN BEGIN
                                                                      "Receiving Company" := ObjectRec.Company;
                                                                      "Object No." := ObjectRec.Code;
                                                                      "Object Name" := ObjectRec.Description;
                                                                    END;
                                                                END ELSE BEGIN
                                                                  ObjectRec.RESET;
                                                                  ObjectRec.FILTERGROUP(9);
                                                                  ObjectRec.SETCURRENTKEY(Type,Code);
                                                                  ObjectRec.SETRANGE(Company,"Receiving Company");
                                                                  ObjectRec.SETRANGE(Type,ObjectRec.Type::Project);
                                                                  IF (Type = Type::Service) THEN
                                                                    ObjectRec.SETRANGE(Type,ObjectRec.Type::"Service Order");
                                                                  ObjectRec.FILTERGROUP(0);
                                                                  IF PAGE.RUNMODAL(0,ObjectRec)= ACTION::LookupOK THEN BEGIN
                                                                    "Object No." := ObjectRec.Code;
                                                                    "Receiving Company" := ObjectRec.Company;
                                                                    "Object Name" := ObjectRec.Description;
                                                                  END;
                                                                END;
                                                                IF "Object No." <> OldObjectNo THEN
                                                                  "Extension Contract" := '';
                                                                IF Type IN [Type::Plant, Type::UnmannedPlant] THEN BEGIN
                                                                  FillDefaultPlantCompany();  //* Receiving Company can be modified
                                                                  IF "Object No." <> OldObjectNo THEN
                                                                    "Plant Location" := FillDefaultPlantLoc();
                                                                END;
                                                              END;

                                                              FillDepartmentCode;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Object No. }
    { 37  ;   ;Object Name         ;Text50        ;CaptionML=ENU=Object Name }
    { 39  ;   ;Supplying Company   ;Text50        ;TableRelation="Site Mngmnt. Hours Companies".Company;
                                                   CaptionML=ENU=Supplying Company }
    { 40  ;   ;Employee No.        ;Code20        ;TableRelation="Site Mngmnt. Hours Employee".No.;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Employee No. }
    { 50  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 55  ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 60  ;   ;Receiving Company   ;Text50        ;TableRelation="Site Mngmnt. Hours Companies".Company;
                                                   OnValidate=VAR
                                                                SiteMngmntHoursCompanies@1100525000 : Record 11012356;
                                                                RelationCode@1100525001 : Code[10];
                                                              BEGIN
                                                                SiteMngmntHoursCompanies.GET(COMPANYNAME);
                                                                RelationCode := SiteMngmntHoursCompanies."Relation Code";
                                                                SiteMngmntHoursCompanies.GET("Receiving Company");
                                                                IF (SiteMngmntHoursCompanies."Relation Code" <> RelationCode) THEN
                                                                  ERROR(Text001, SiteMngmntHoursCompanies.FIELDCAPTION("Relation Code"), RelationCode, SiteMngmntHoursCompanies."Relation Code");

                                                                IF "Receiving Company" <> xRec."Receiving Company" THEN BEGIN
                                                                  "Object No." := '';
                                                                  "Object Name" := '';
                                                                  Element := '';
                                                                  "Extension Contract" := '';
                                                                  "Plant Location" := '';
                                                                  "Plant Type" := '';
                                                                  "Plant No." := '';
                                                                  "Cost Component Plant" := '';
                                                                  "Cost Object" := '';
                                                                  IF Type <> Type::Indirect THEN
                                                                    "Shift Code" := '';
                                                                  FillDepartmentCode;
                                                                END;
                                                                IF Type IN [Type::Plant, Type::UnmannedPlant] THEN
                                                                  FillDefaultPlantCompany();
                                                              END;

                                                   OnLookup=VAR
                                                              SiteMngmntHoursCompanies@1100525000 : Record 11012356;
                                                            BEGIN
                                                              IF (PAGE.RUNMODAL(0, SiteMngmntHoursCompanies) = ACTION::LookupOK) THEN
                                                                VALIDATE("Receiving Company", SiteMngmntHoursCompanies.Company);
                                                            END;

                                                   CaptionML=ENU=Receiving Company }
    { 75  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  "Object No." := '';
                                                                  "Object Name" := '';
                                                                  IF Type = Type::Indirect THEN
                                                                    "Cost Object" := '';
                                                                  Element := '';
                                                                  "Extension Contract" := '';
                                                                  "Plant Company" := '';
                                                                  "Plant Location" := '';
                                                                  "Plant Type" := '';
                                                                  "Plant No." := '';
                                                                  "Cost Component Plant" := '';
                                                                  "Cost Object" := '';
                                                                  "Shift Code" := '';
                                                                  "Department Code" := '';
                                                                END;
                                                                IF Type IN [Type::Plant, Type::UnmannedPlant] THEN
                                                                  FillDefaultPlantCompany();
                                                                IF Type <> Type::UnmannedPlant THEN
                                                                  TESTFIELD("Employee No.")
                                                                ELSE BEGIN
                                                                  TESTFIELD("Employee No.", '');
                                                                  //TESTFIELD("Supplying Company", "Plant Company");  // Can not be check here
                                                                END;
                                                                IF (Type = Type::Indirect) THEN
                                                                  VALIDATE("Receiving Company", COMPANYNAME);

                                                                IF ("Employee No." <> '') AND ("Cost Object" = '') AND (Type <> Type::Indirect) THEN BEGIN
                                                                  IF SitemngmntEmployees.GET("Supplying Company", "Employee No.") THEN BEGIN
                                                                    IF "Cost Object" <> SitemngmntEmployees."Global Dimension 2 Code" THEN
                                                                      VALIDATE("Cost Object", SitemngmntEmployees."Global Dimension 2 Code");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Project,Indirect,Service,Plant,UnmannedPlant;
                                                   OptionString=Project,Indirect,Service,Plant,UnmannedPlant }
    { 80  ;   ;Extension Contract  ;Code10        ;OnValidate=BEGIN
                                                                IF "Extension Contract" = '' THEN
                                                                  EXIT;

                                                                TESTFIELD(Type, Type::Project);
                                                                TESTFIELD("Object No.");

                                                                ExtRec.RESET;
                                                                ExtRec.CHANGECOMPANY("Receiving Company");
                                                                ExtRec.GET("Object No.", "Extension Contract");
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF (Type <> Type::Project) OR ("Object No." = '') THEN
                                                                EXIT;

                                                              ExtRec.RESET;
                                                              ExtRec.CHANGECOMPANY("Receiving Company");
                                                              ExtRec.FILTERGROUP(9);
                                                              ExtRec.SETRANGE("Project No.", "Object No.");
                                                              ExtRec.FILTERGROUP(0);
                                                              ExtRec."Project No." := "Object No.";
                                                              ExtRec."Contract No." := "Extension Contract";
                                                              IF PAGE.RUNMODAL(0, ExtRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Extension Contract", ExtRec."Contract No.");
                                                            END;

                                                   CaptionML=ENU=Extension Contract }
    { 90  ;   ;Cost Object         ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                                                                 Cost Type=FILTER(Labor|Plant|Sundry));
                                                   OnValidate=VAR
                                                                lvWageComp@1100525000 : Record 11012014;
                                                                CostObjectDescription@1210190000 : Text[50];
                                                              BEGIN
                                                                SiteMngmntHoursSetup.GET;

                                                                IF "Cost Object" <> '' THEN BEGIN
                                                                  CostObjectDescription := '';  // 33618.n
                                                                  DimensionValueRec.RESET;
                                                                  DimensionValueRec.CHANGECOMPANY("Receiving Company"); // 33618.n
                                                                  DimensionValueRec.SETRANGE(Code,"Cost Object");
                                                                  DimensionValueRec.SETRANGE("Global Dimension No.",2);
                                                                  //DP01010.sn
                                                                  IF IsExternalEmployee THEN
                                                                    DimensionValueRec.SETFILTER("Cost Type",'%1|%2|%3|%4',DimensionValueRec."Cost Type"::Labor,
                                                                      DimensionValueRec."Cost Type"::Subcontracting,DimensionValueRec."Cost Type"::Plant,DimensionValueRec."Cost Type"::Sundry)
                                                                  ELSE
                                                                  //DP01010.en
                                                                    DimensionValueRec.SETFILTER("Cost Type",'%1|%2|%3',DimensionValueRec."Cost Type"::Labor,
                                                                      DimensionValueRec."Cost Type"::Plant,DimensionValueRec."Cost Type"::Sundry);
                                                                  IF DimensionValueRec.FINDFIRST THEN BEGIN
                                                                    "Cost Object Description" := DimensionValueRec.Name;
                                                                    CostObjectDescription := DimensionValueRec.Name;  // 33618.n
                                                                  END;
                                                                  IF SiteMngmntHoursSetup."Use Job Cost Objects" THEN BEGIN
                                                                    ProjectCostObjectRec.RESET;
                                                                    ProjectCostObjectRec.CHANGECOMPANY("Receiving Company");
                                                                    ProjectCostObjectRec.SETRANGE("Project No.","Object No.");
                                                                    ProjectCostObjectRec.SETRANGE("Cost Object","Cost Object");
                                                                    IF ProjectCostObjectRec.FINDFIRST THEN BEGIN
                                                                      "Cost Object Description" := ProjectCostObjectRec.Name;
                                                                      CostObjectDescription := ProjectCostObjectRec.Name; // 33618.n
                                                                    END;
                                                                  END;
                                                                  // 33618.sn
                                                                  IF CostObjectDescription = '' THEN
                                                                    ERROR(Text010);
                                                                  // 33618.en

                                                                  //*27119.so
                                                                  //IF lvWageComp.GET(DimensionValueRec."Wage Component") THEN BEGIN
                                                                  //  IF Type = Type::Project THEN BEGIN  //ook plant
                                                                  //    CostObjBl := TRUE;
                                                                  //    VALIDATE("Wage Component",DimensionValueRec."Wage Component");
                                                                  //  END;
                                                                  //END ELSE
                                                                  //  "Wage Component" := '';
                                                                  //*27119.eo
                                                                  //*27119.sn
                                                                  IF Type IN [Type::Project, Type::Plant] THEN BEGIN
                                                                    IF (DimensionValueRec."Wage Component" = '') OR (NOT lvWageComp.GET(DimensionValueRec."Wage Component")) THEN BEGIN
                                                                      "Wage Component" := '';
                                                                      "Component Type" := "Component Type"::Hours;
                                                                    END ELSE BEGIN
                                                                      VALIDATE("Wage Component",DimensionValueRec."Wage Component");
                                                                      IF (NOT SiteMngmntHoursSetup."Fill Wage Comp. By Direct") AND ("Component Type" = "Component Type"::Hours) THEN
                                                                        "Wage Component" := '';
                                                                    END;
                                                                  END;
                                                                  //*27119.en
                                                                END ELSE BEGIN
                                                                  IF Type <> Type::Indirect THEN BEGIN  //*27119.n
                                                                    "Wage Component" := '';
                                                                    "Component Type" := "Component Type"::Hours;
                                                                  END;
                                                                END;

                                                                IF "Component Type" <> "Component Type"::Hours THEN
                                                                  IF NOT SiteMngmntHoursSetup."Cost Object By Indirect Lines" THEN
                                                                    IF Type = Type::Indirect THEN
                                                                      "Cost Object" := '';

                                                                CheckCostType;
                                                              END;

                                                   OnLookup=BEGIN
                                                              GetCostObjectWithLookup;  // 33618.n (moved to function)
                                                            END;

                                                   CaptionML=ENU=Cost Object }
    { 95  ;   ;Cost Object Description;Text50     ;CaptionML=ENU=Cost Object Description }
    { 100 ;   ;Element             ;Code10        ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Receiving Company),
                                                                                                        Type=CONST(Element),
                                                                                                        Project No.=FIELD(Object No.),
                                                                                                        Blocked=CONST(No));
                                                   OnValidate=VAR
                                                                lvHoursCodeElementRec@1100525000 : Record 11012358;
                                                                ProjElem@1100525001 : Record 11012010;
                                                              BEGIN
                                                                IF Element = '' THEN
                                                                  EXIT;
                                                                IF (Type = Type::Indirect) THEN
                                                                  TESTFIELD(Element, '')
                                                                ELSE BEGIN
                                                                   ElementFormat.FormatElem(Element, 2, "Receiving Company");
                                                                   lvHoursCodeElementRec.GET("Receiving Company", lvHoursCodeElementRec.Type::Element, "Object No.", Element);
                                                                   ProjElem.CHANGECOMPANY("Receiving Company");
                                                                   ProjElem.GET("Object No.", Element);
                                                                   ProjElem.TESTFIELD(Blocked, FALSE);  //T003806
                                                                END;

                                                                CALCFIELDS("Element Description");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 110 ;   ;Monday              ;Decimal       ;OnValidate=BEGIN
                                                                IF (Monday <> 0) AND ("Component Type" = "Component Type"::Expenses) THEN  //*C-027136
                                                                  FIELDERROR("Component Type");

                                                                SiteMngmntHoursSetup.GET;
                                                                IF NOT SiteMngmntHoursSetup."Kilometers One Way Trip" THEN
                                                                  CheckGrades(1,(Monday/2))
                                                                ELSE
                                                                  CheckGrades(1,Monday);

                                                                TotalHours;

                                                                IF Monday = 0 THEN BEGIN
                                                                  "Overtime Hours Monday" := 0;
                                                                  "Overtime Comp. Monday" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Monday;
                                                   BlankZero=Yes }
    { 115 ;   ;Overtime Comp. Monday;Code20       ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days),
                                                                                                        Overtime=CONST(Yes));
                                                   CaptionML=ENU=Overtime Comp. Monday }
    { 116 ;   ;Overtime Hours Monday;Decimal      ;CaptionML=ENU=Overtime Hours Monday }
    { 117 ;   ;Travel Hours Monday ;Option        ;CaptionML=ENU=Travel Hours Monday;
                                                   OptionCaptionML=ENU=Passenger,Driver without passengers,Driver with passengers,Work to Work;
                                                   OptionString=Passenger,Driver without passengers,Driver with passengers,Work to Work }
    { 120 ;   ;Tuesday             ;Decimal       ;OnValidate=BEGIN
                                                                IF (Tuesday <> 0) AND ("Component Type" = "Component Type"::Expenses) THEN  //*C-027136
                                                                  FIELDERROR("Component Type");

                                                                SiteMngmntHoursSetup.GET;
                                                                IF NOT SiteMngmntHoursSetup."Kilometers One Way Trip" THEN
                                                                  CheckGrades(2,(Tuesday/2))
                                                                ELSE
                                                                  CheckGrades(2,Tuesday);
                                                                TotalHours;

                                                                IF Tuesday = 0 THEN BEGIN
                                                                  "Overtime Hours Tuesday" := 0;
                                                                  "Overtime Comp.Tuesday" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Tuesday;
                                                   BlankZero=Yes }
    { 125 ;   ;Overtime Comp.Tuesday;Code20       ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days),
                                                                                                        Overtime=CONST(Yes));
                                                   CaptionML=ENU=Overtime Comp.Tuesday }
    { 126 ;   ;Overtime Hours Tuesday;Decimal     ;CaptionML=ENU=Overtime Hours Tuesday }
    { 127 ;   ;Travel Hours Tuesday;Option        ;CaptionML=ENU=Travel Hours Tuesday;
                                                   OptionCaptionML=ENU=Passenger,Driver without passengers,Driver with passengers,Work to Work;
                                                   OptionString=Passenger,Driver without passengers,Driver with passengers,Work to work }
    { 130 ;   ;Wednesday           ;Decimal       ;OnValidate=BEGIN
                                                                IF (Wednesday <> 0) AND ("Component Type" = "Component Type"::Expenses) THEN  //*C-027136
                                                                  FIELDERROR("Component Type");

                                                                SiteMngmntHoursSetup.GET;
                                                                IF NOT SiteMngmntHoursSetup."Kilometers One Way Trip" THEN
                                                                  CheckGrades(3,(Wednesday/2))
                                                                ELSE
                                                                  CheckGrades(3,Wednesday);


                                                                TotalHours;
                                                                IF Wednesday = 0 THEN BEGIN
                                                                  "Overtime Hours Wednesday" := 0;
                                                                  "Overtime Comp.Wednesday" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Wednesday;
                                                   BlankZero=Yes }
    { 135 ;   ;Overtime Comp.Wednesday;Code20     ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days),
                                                                                                        Overtime=CONST(Yes));
                                                   CaptionML=ENU=Overtime Comp.Wednesday }
    { 136 ;   ;Overtime Hours Wednesday;Decimal   ;CaptionML=ENU=Overtime Hours Wednesday }
    { 137 ;   ;Travel Hours Wednesday;Option      ;CaptionML=ENU=Travel Hours Wednesday;
                                                   OptionCaptionML=ENU=Passenger,Driver without passengers,Driver with passengers,Work to Work;
                                                   OptionString=Passenger,Driver without passengers,Driver with passengers,Work to Work }
    { 140 ;   ;Thursday            ;Decimal       ;OnValidate=BEGIN
                                                                IF (Thursday <> 0) AND ("Component Type" = "Component Type"::Expenses) THEN  //*C-027136
                                                                  FIELDERROR("Component Type");

                                                                SiteMngmntHoursSetup.GET;
                                                                IF NOT SiteMngmntHoursSetup."Kilometers One Way Trip" THEN
                                                                  CheckGrades(4,(Thursday/2))
                                                                ELSE
                                                                  CheckGrades(4,Thursday);

                                                                TotalHours;
                                                                IF Thursday = 0 THEN BEGIN
                                                                  "Overtime Hours Thursday" := 0;
                                                                  "Overtime Comp.Thursday" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Thursday;
                                                   BlankZero=Yes }
    { 145 ;   ;Overtime Comp.Thursday;Code20      ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days),
                                                                                                        Overtime=CONST(Yes));
                                                   CaptionML=ENU=Overtime Comp.Thursday }
    { 146 ;   ;Overtime Hours Thursday;Decimal    ;CaptionML=ENU=Overtime Hours Thursday }
    { 147 ;   ;Travel Hours Thursday;Option       ;CaptionML=ENU=Travel Hours Thursday;
                                                   OptionCaptionML=ENU=Passenger,Driver without passengers,Driver with passengers,Work to Work;
                                                   OptionString=Passenger,Driver without passengers,Driver with passengers,Work to work }
    { 150 ;   ;Friday              ;Decimal       ;OnValidate=BEGIN
                                                                IF (Friday <> 0) AND ("Component Type" = "Component Type"::Expenses) THEN  //*C-027136
                                                                  FIELDERROR("Component Type");

                                                                SiteMngmntHoursSetup.GET;
                                                                IF NOT SiteMngmntHoursSetup."Kilometers One Way Trip" THEN
                                                                  CheckGrades(5,(Friday/2))
                                                                ELSE
                                                                  CheckGrades(5,Friday);


                                                                TotalHours;
                                                                IF Friday = 0 THEN BEGIN
                                                                  "Overtime Hours Friday" := 0;
                                                                  "Overtime Comp.Friday" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Friday;
                                                   BlankZero=Yes }
    { 155 ;   ;Overtime Comp.Friday;Code20        ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days),
                                                                                                        Overtime=CONST(Yes));
                                                   CaptionML=ENU=Overtime Comp.Friday }
    { 156 ;   ;Overtime Hours Friday;Decimal      ;CaptionML=ENU=Overtime Hours Friday }
    { 157 ;   ;Travel Hours Friday ;Option        ;CaptionML=ENU=Travel Hours Friday;
                                                   OptionCaptionML=ENU=Passenger,Driver without passengers,Driver with passengers,Work to Work;
                                                   OptionString=Passenger,Driver without passengers,Driver with passengers,Work to Work }
    { 160 ;   ;Saturday            ;Decimal       ;OnValidate=BEGIN
                                                                IF (Saturday <> 0) AND ("Component Type" = "Component Type"::Expenses) THEN  //*C-027136
                                                                  FIELDERROR("Component Type");

                                                                SiteMngmntHoursSetup.GET;
                                                                IF NOT SiteMngmntHoursSetup."Kilometers One Way Trip" THEN
                                                                  CheckGrades(6,(Saturday/2))
                                                                ELSE
                                                                  CheckGrades(6,Saturday);

                                                                TotalHours;
                                                                IF Saturday = 0 THEN BEGIN
                                                                  "Overtime Hours Saturday" := 0;
                                                                  "Overtime Comp.Saturday" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Saturday;
                                                   BlankZero=Yes }
    { 165 ;   ;Overtime Comp.Saturday;Code20      ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days),
                                                                                                        Overtime=CONST(Yes));
                                                   CaptionML=ENU=Overtime Comp.Saturday }
    { 166 ;   ;Overtime Hours Saturday;Decimal    ;CaptionML=ENU=Overtime Hours Saturday }
    { 167 ;   ;Travel Hours Saturday;Option       ;CaptionML=ENU=Travel Hours Saturday;
                                                   OptionCaptionML=ENU=Passenger,Driver without passengers,Driver with passengers,Work to Work;
                                                   OptionString=Passenger,Driver without passengers,Driver with passengers,Work to Work }
    { 170 ;   ;Sunday              ;Decimal       ;OnValidate=BEGIN
                                                                IF (Sunday <> 0) AND ("Component Type" = "Component Type"::Expenses) THEN  //*C-027136
                                                                  FIELDERROR("Component Type");

                                                                SiteMngmntHoursSetup.GET;
                                                                IF NOT SiteMngmntHoursSetup."Kilometers One Way Trip" THEN
                                                                  CheckGrades(7,(Sunday/2))
                                                                ELSE
                                                                  CheckGrades(7,Sunday);
                                                                TotalHours;
                                                                IF Sunday = 0 THEN BEGIN
                                                                  "Overtime Hours Sunday" := 0;
                                                                  "Overtime Comp.Sunday" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Sunday;
                                                   BlankZero=Yes }
    { 175 ;   ;Overtime Comp.Sunday;Code20        ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days),
                                                                                                        Overtime=CONST(Yes));
                                                   CaptionML=ENU=Overtime Comp.Sunday }
    { 176 ;   ;Overtime Hours Sunday;Decimal      ;CaptionML=ENU=Overtime Hours Sunday }
    { 177 ;   ;Travel Hours Sunday ;Option        ;CaptionML=ENU=Travel Hours Sunday;
                                                   OptionCaptionML=ENU=Passenger,Driver without passengers,Driver with passengers,Work to Work;
                                                   OptionString=Passenger,Driver without passengers,Driver with passengers,Work to Work }
    { 180 ;   ;Total Line          ;Decimal       ;CaptionML=ENU=Total Line }
    { 190 ;   ;Norm Hours          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Norm Hours" WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=ENU=Norm Hours;
                                                   Editable=No }
    { 200 ;   ;Total Hours         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Site Mngmnt. Hours Line"."Total Line" WHERE (Year=FIELD(Year),
                                                                                                                 Week=FIELD(Week),
                                                                                                                 Supplying Company=FIELD(Supplying Company),
                                                                                                                 Employee No.=FIELD(Employee No.),
                                                                                                                 Component Type=CONST(Hours),
                                                                                                                 Overtime=CONST(No)));
                                                   CaptionML=ENU=Total Hours;
                                                   Editable=No }
    { 210 ;   ;Connection No.      ;Integer       ;CaptionML=ENU=Connection No. }
    { 220 ;   ;Wage Component      ;Code20        ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days));
                                                   OnValidate=VAR
                                                                lvEmployeeRec@1100525000 : Record 5200;
                                                              BEGIN
                                                                //LvCostObjBl := CostObjBl;  //*27119.o
                                                                //CostObjBl := FALSE;    //*27119.o
                                                                "Start Kilometer" := 0;
                                                                "End Kilometer" := 0;
                                                                SiteMngmntHoursSetup.GET;
                                                                IF "Wage Component" <>'' THEN BEGIN
                                                                  IF Type = Type::UnmannedPlant THEN
                                                                    TESTFIELD("Wage Component", '');
                                                                  WageCompRec.GET("Wage Component");
                                                                  IF WageCompRec."Kilometer Expense" THEN BEGIN
                                                                    "Component Type" := "Component Type"::Kilometers;
                                                                    lvEmployeeRec.CHANGECOMPANY("Supplying Company");
                                                                    lvEmployeeRec.GET("Employee No.");
                                                                    SetDefaultDriverType(lvEmployeeRec."Driver Type");
                                                                  END ELSE BEGIN
                                                                    CASE WageCompRec."Component Type" OF
                                                                      WageCompRec."Component Type"::Hours:
                                                                        BEGIN
                                                                          "Component Type" := "Component Type"::Hours;
                                                                          //*27119.so
                                                                          //SiteMngmntHoursSetup.GET;
                                                                          //IF NOT SiteMngmntHoursSetup."Fill Wage Comp. By Indirect" THEN
                                                                          //  "Wage Component" := '';
                                                                          //IF LvCostObjBl THEN
                                                                          //  "Wage Component" := '';
                                                                          //*27119.eo
                                                                        END;
                                                                      WageCompRec."Component Type"::Expenses: "Component Type" := "Component Type"::Expenses;
                                                                      WageCompRec."Component Type"::Days:"Component Type" := "Component Type"::Days;
                                                                    END;
                                                                  END;
                                                                END;
                                                                CheckCostType;

                                                                "Leave Type" := WageCompRec."Leave Type";
                                                                "Leave Factor" := WageCompRec."Leave Factor";
                                                              END;

                                                   CaptionML=ENU=Wage Component }
    { 230 ;   ;Component Type      ;Option        ;CaptionML=ENU=Component Type;
                                                   OptionCaptionML=ENU=Hours,Days,Expenses,Kilometers;
                                                   OptionString=Hours,Days,Expenses,Kilometers;
                                                   Editable=No }
    { 240 ;   ;Overtime            ;Boolean       ;CaptionML=ENU=Overtime;
                                                   Editable=No }
    { 260 ;   ;Comment             ;Text50        ;CaptionML=ENU=Comment }
    { 280 ;   ;Shift Code          ;Code10        ;OnValidate=VAR
                                                                ProjShift@1210190000 : Record 11125538;
                                                                ProjNo@1210190001 : Code[20];
                                                              BEGIN
                                                                //*DP00033
                                                                IF "Shift Code" = '' THEN
                                                                  EXIT;

                                                                ProjNo := GetProjectNoForShift();
                                                                IF ProjNo = '' THEN BEGIN
                                                                  IF (Type <> Type::Indirect) THEN
                                                                    TESTFIELD("Object No.")
                                                                  ELSE
                                                                    FIELDERROR(Type);;
                                                                END;
                                                                ProjShift.CHANGECOMPANY("Receiving Company");
                                                                ProjShift.GET(ProjNo, "Shift Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupShiftCode(TRUE);
                                                            END;

                                                   CaptionML=ENU=Shift Code }
    { 530 ;   ;Department Code     ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                IF GUIALLOWED AND (CurrFieldNo  = FIELDNO("Department Code")) THEN BEGIN
                                                                  IF (Type <> Type::Indirect) OR
                                                                     ( ("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME) ) THEN
                                                                    TESTFIELD("Department Code", xRec."Department Code"); //may not change
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Department Code }
    { 560 ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                DimVal@1210190000 : Record 349;
                                                                DimMgt@1210190001 : Codeunit 408;
                                                              BEGIN
                                                                //*C-027136
                                                                IF Quantity <> 0 THEN BEGIN
                                                                  TESTFIELD("Component Type", "Component Type"::Expenses);
                                                                  IF Type = Type::UnmannedPlant THEN
                                                                    FIELDERROR(Type);;
                                                                END;

                                                                IF (Quantity <> 0) AND (xRec.Quantity = 0) AND (Amount = 0) THEN BEGIN
                                                                  DimMgt.GetDimValueRec(2, "Cost Object", DimVal, FALSE, '');
                                                                  Amount := ROUND(Quantity * DimVal.Price);
                                                                END ELSE BEGIN
                                                                  IF Quantity = 0 THEN
                                                                    Amount := 0
                                                                  ELSE BEGIN
                                                                    IF xRec.Quantity = 0 THEN
                                                                      Amount := Quantity * Amount
                                                                    ELSE
                                                                      Amount := Quantity * (Amount / xRec.Quantity);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   BlankZero=Yes;
                                                   Description=Only for expenses }
    { 570 ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                //*C-027136
                                                                IF Amount <> 0 THEN BEGIN
                                                                  TESTFIELD("Component Type", "Component Type"::Expenses);
                                                                  TESTFIELD(Quantity);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Amount;
                                                   BlankZero=Yes;
                                                   Description=Only for expenses }
    { 580 ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                //*C-027136
                                                                IF "Posting Date" <> 0D THEN BEGIN
                                                                  TESTFIELD("Component Type", "Component Type"::Expenses);
                                                                  IF ("Posting Date" < DWY2DATE(1,Week,Year)) OR ("Posting Date" > DWY2DATE(7,Week,Year)) THEN
                                                                    ERROR(Text009, DWY2DATE(1,Week,Year), DWY2DATE(7,Week,Year));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Posting Date;
                                                   Description=Only for expenses }
    { 700 ;   ;Plant Company       ;Text30        ;TableRelation=Company;
                                                   OnValidate=VAR
                                                                PlantMgtCompRec@1100525001 : Record 11020586;
                                                                TmpPlantMgtCompRec@1100525000 : TEMPORARY Record 11020586;
                                                              BEGIN
                                                                IF "Plant Company" <> '' THEN BEGIN
                                                                  IF NOT PlantMgtCompRec.GET("Plant Company") THEN
                                                                    ERROR(Text005, "Plant Company", PlantMgtCompRec.TABLECAPTION)
                                                                  ELSE BEGIN
                                                                    IF "Object No." <> '' THEN BEGIN
                                                                      PlantMgtCompRec.GetPlantCompaniesForProject("Object No.", TmpPlantMgtCompRec, "Receiving Company");
                                                                      IF NOT TmpPlantMgtCompRec.GET("Plant Company") THEN
                                                                        ERROR(Text006, "Object No.", FIELDCAPTION("Plant Company"), "Plant Company");
                                                                    END;
                                                                  END;
                                                                  IF Type = Type::UnmannedPlant THEN
                                                                    TESTFIELD("Plant Company", "Supplying Company");
                                                                END;

                                                                IF ("Plant Company" = '') OR ("Plant Company" <> xRec."Plant Company") THEN BEGIN
                                                                  "Plant Location" := '';
                                                                  "Plant Type" := '';
                                                                  "Plant No." := '';
                                                                  "Cost Component Plant" := '';
                                                                  "Plant Location" := FillDefaultPlantLoc();
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupPlantCompany();
                                                            END;

                                                   CaptionML=ENU=Plant Company;
                                                   Description=Supplying Plant Company }
    { 705 ;   ;Plant Location      ;Code20        ;OnValidate=VAR
                                                                lvPlantLocRec@1100525000 : Record 11012554;
                                                              BEGIN
                                                                IF "Object No." = '' THEN
                                                                  "Plant Location" := '';
                                                                IF "Plant Location" <> '' THEN BEGIN
                                                                  IF (NOT (Type IN [Type::Plant, Type::UnmannedPlant])) THEN
                                                                    FIELDERROR(Type);

                                                                  TESTFIELD("Plant Company");
                                                                  lvPlantLocRec.CHANGECOMPANY("Plant Company");
                                                                  lvPlantLocRec.GET("Plant Location");
                                                                  CheckPlantLocLinkedToProject(lvPlantLocRec);
                                                                  lvPlantLocRec.CheckBlockFromOtherCompany(1, FALSE, TRUE, "Plant Company");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupPlantLocation();
                                                            END;

                                                   CaptionML=ENU=Plant Location }
    { 710 ;   ;Plant Type          ;Code20        ;OnValidate=VAR
                                                                lvPlantTypeRec@1100525000 : Record 11012551;
                                                              BEGIN
                                                                IF ("Plant Type" = '') OR ("Plant Type" <> xRec."Plant Type") THEN
                                                                  "Plant No." := '';
                                                                IF "Plant Type" <> '' THEN BEGIN
                                                                  IF (NOT (Type IN [Type::Plant, Type::UnmannedPlant])) THEN
                                                                    FIELDERROR(Type);

                                                                  TESTFIELD("Plant Company");
                                                                  lvPlantTypeRec.CHANGECOMPANY("Plant Company");
                                                                  lvPlantTypeRec.GET("Plant Type");
                                                                  IF "Cost Component Plant" = '' THEN
                                                                    FillDefaultCostCompPlant();
                                                                END;
                                                                FillDepartmentCode;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupPlantType();
                                                            END;

                                                   CaptionML=ENU=Plant Type }
    { 720 ;   ;Plant No.           ;Code10        ;OnValidate=VAR
                                                                lvPlantNoRec@1100525000 : Record 11012552;
                                                              BEGIN
                                                                IF "Plant No." <> '' THEN BEGIN
                                                                  IF (NOT (Type IN [Type::Plant, Type::UnmannedPlant])) THEN
                                                                    FIELDERROR(Type);

                                                                  lvPlantNoRec.CHANGECOMPANY("Plant Company");
                                                                  lvPlantNoRec.GET("Plant Type", "Plant No.");
                                                                END;
                                                                FillDepartmentCode;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupPlantNo();
                                                            END;

                                                   CaptionML=ENU=Plant No. }
    { 730 ;   ;Cost Component Plant;Code10        ;OnValidate=VAR
                                                                lvPlantCostCompRec@1100525000 : Record 11012575;
                                                              BEGIN
                                                                IF "Cost Component Plant" <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Plant);

                                                                  lvPlantCostCompRec.CHANGECOMPANY("Plant Company");
                                                                  lvPlantCostCompRec.GET("Cost Component Plant");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupCostCompPlant();
                                                            END;

                                                   CaptionML=ENU=Cost Component Plant }
    { 750 ;   ;Plant Hour Rev. Line No.;Integer   ;CaptionML=ENU=Plant Hour Rev. Line No.;
                                                   Description=Only used for unmanned plant;
                                                   Editable=No }
    { 800 ;   ;Leave Type          ;Code10        ;TableRelation="Leave Type";
                                                   CaptionML=ENU=Leave Type;
                                                   Editable=No }
    { 810 ;   ;Leave Factor        ;Decimal       ;CaptionML=ENU=Leave Factor;
                                                   Editable=No }
    { 820 ;   ;Element Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Site Mngmnt. Hours Codes".Description WHERE (Company=FIELD(Receiving Company),
                                                                                                                    Type=CONST(Element),
                                                                                                                    Project No.=FIELD(Object No.),
                                                                                                                    Code=FIELD(Element)));
                                                   CaptionML=ENU=Element Description;
                                                   Editable=No }
    { 830 ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Open,,,,,Released,,,,,Approved,,,,,Rejected,,,,,Posted;
                                                   OptionString=Open,,,,,Released,,,,,Approved,,,,,Rejected,,,,,Posted;
                                                   Description=DP00530;
                                                   Editable=No }
    { 840 ;   ;Line Template Code  ;Code20        ;TableRelation="Hour Line Template".Code WHERE (Source=CONST(Site Mngmnt. Hours),
                                                                                                  Receiving Company=FIELD(Receiving Company));
                                                   OnValidate=VAR
                                                                HourLineTemplateMgt@1100528300 : Codeunit 11012025;
                                                              BEGIN
                                                                IF ("Receiving Company" <> '') AND ("Employee No." <> '') THEN
                                                                  HourLineTemplateMgt.GetDefaultsSiteMgtLine(Rec);
                                                              END;

                                                   OnLookup=VAR
                                                              HourLineTemplate@1100528300 : TEMPORARY Record 11229799;
                                                              HourLineTemplateMgt@1100528302 : Codeunit 11012025;
                                                            BEGIN
                                                              TESTFIELD("Receiving Company");
                                                              TESTFIELD("Employee No.");

                                                              HourLineTemplateMgt.FillTempHourLineTemplate(HourLineTemplate, 1, "Employee No.",
                                                                "Supplying Company", "Receiving Company");
                                                              HourLineTemplate.SETRANGE(Source, HourLineTemplate.Source::"Site Mngmnt. Hours");
                                                              HourLineTemplate.SETRANGE("Receiving Company", "Receiving Company");
                                                              HourLineTemplate.SETCURRENTKEY(Source, "Receiving Company", "Seq. No.", Code);
                                                              IF (PAGE.RUNMODAL(0, HourLineTemplate) = ACTION::LookupOK) THEN
                                                                VALIDATE("Line Template Code", HourLineTemplate.Code);
                                                            END;

                                                   CaptionML=ENU=Line Template Code;
                                                   Description=DP00530 }
    { 850 ;   ;Hour Portal Link Guid;Text50       ;CaptionML=ENU=Hour Portal Link Guid;
                                                   Description=DP00530;
                                                   Editable=Yes }
    { 860 ;   ;Start Time          ;Time          ;CaptionML=ENU=Start Time;
                                                   Description=DP00530;
                                                   Editable=No }
    { 870 ;   ;End Time            ;Time          ;CaptionML=ENU=End Time;
                                                   Description=DP00530;
                                                   Editable=No }
    { 880 ;   ;Reject Text         ;Text250       ;CaptionML=ENU=Reject Text;
                                                   Description=DP00530;
                                                   Editable=No }
    { 900 ;   ;Start Kilometer     ;Integer       ;CaptionML=ENU=Start kilometer }
    { 910 ;   ;End Kilometer       ;Integer       ;CaptionML=ENU=End Kilometer }
  }
  KEYS
  {
    {    ;Year,Week,Supplying Company,Employee No.,Line No.;
                                                   SumIndexFields=Total Line;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Connection No.                           }
    {    ;Year,Week,Supplying Company,Employee No.,Component Type,Overtime;
                                                   SumIndexFields=Total Line,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday }
    {    ;Year,Week,Employee No.,Object No.        }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HourAccRec@1100485000 : Record 11012360;
      EmployeeRec@1100485003 : Record 5200;
      HoursLineRec@1100485007 : Record 11012361;
      SiteMngmntHoursSetup@1100485014 : Record 11012355;
      SitemngmntEmployees@1100485015 : Record 11012357;
      DimensionValueRec@1100485017 : Record 349;
      WageCompRec@1100485020 : Record 11012014;
      ProjectCostObjectRec@1100525007 : Record 11012065;
      ExtRec@1100525005 : Record 11012004;
      HourPortalSetup@1100528300 : Record 11020454;
      ElementFormat@1100525002 : Codeunit 11012022;
      DimMgt@1100409000 : Codeunit 408;
      UpdateAction@1100525006 : 'Insert,Modify,Delete,Rename';
      gSetProjHrsValidateMode@1100525001 : Boolean;
      gProjHrsLineNo@1100525004 : Integer;
      LineNo@1100485005 : Integer;
      Text000@1100528301 : TextConst 'ENU=Fill 1 Day per Line.\\This is because %1 is set to %2.';
      Text001@1100525010 : TextConst 'ENU=%1 must be ''%2''.\(Current Value: ''%3'')';
      Text003@1100525000 : TextConst 'ENU=No Project Submitted';
      Text004@1100525003 : TextConst 'ENU=''%1'' is not linked to project ''%2'', company ''%3''';
      Text005@1100525009 : TextConst 'ENU="''%1'' is not setup as %2. "';
      Text006@1100525008 : TextConst 'ENU=There is no plant location of project ''%1'' present in %2 ''%3''.';
      Text007@1210190000 : TextConst 'ENU=in combination with %1 %2 may not be of Cost Type %3';
      Text008@1210190001 : TextConst 'ENU=may not be of Cost Type %1';
      Text009@1210190002 : TextConst 'ENU=Posting Date should be within the week (%1..%2).';
      Text010@1210190003 : TextConst 'ENU=Cost Object unknown';
      Text011@1100525011 : TextConst 'ENU=Change not allowed for %1';
      Text012@1100525012 : TextConst 'ENU="%1 %2 must be ''%3'' or ''%4''. Current Value:''%5''.\ In Year=%6, Week=%7, Supplying Company=%8, Employee No.=%9, Line No.=%10."';

    PROCEDURE FillDocNoPostingDate@3();
    BEGIN
      IF HourAccRec.GET(Year,Week,"Supplying Company","Employee No.") THEN BEGIN
        "Document No." := HourAccRec."Document No.";
      END;
    END;

    PROCEDURE TotalHours@1100485010();
    VAR
      FilledFields@1100528300 : Integer;
    BEGIN
      IF (NOT HourPortalSetup.GET) THEN
        HourPortalSetup.INIT;
      IF (HourPortalSetup."Hour Portal Active") THEN BEGIN
        FilledFields := 0;
        IF (Monday <> 0) THEN FilledFields += 1;
        IF (Tuesday <> 0) THEN FilledFields += 1;
        IF (Wednesday <> 0) THEN FilledFields += 1;
        IF (Thursday <> 0) THEN FilledFields += 1;
        IF (Friday <> 0) THEN FilledFields += 1;
        IF (Saturday <> 0) THEN FilledFields += 1;
        IF (Sunday <> 0) THEN FilledFields += 1;
        IF (FilledFields > 1) THEN
          ERROR(Text000, HourPortalSetup.FIELDCAPTION("Hour Portal Active"), HourPortalSetup."Hour Portal Active");
      END;

      IF ("Component Type" = "Component Type"::Hours) OR ("Component Type" = "Component Type"::Expenses) THEN
        "Total Line" := Monday + Tuesday + Wednesday + Thursday + Friday + Saturday + Sunday;
      IF "Component Type" = "Component Type"::Kilometers THEN
        "Total Line" := ROUND(Monday,1) + ROUND(Tuesday,1) + ROUND(Wednesday,1) + ROUND(Thursday,1)
                        + ROUND(Friday,1) + ROUND(Saturday,1) + ROUND(Sunday,1);
    END;

    PROCEDURE UpdateProjectHourLine@1100485009(UpdateAction@1210190001 : 'Insert,Modify,Delete,Rename');
    VAR
      HrAccConnectionNos@1100525000 : Record 11020451;
      HourEmplHead@1100525001 : Record 11012360;
      HourProjHead@1100525002 : Record 11012362;
      HourProjLine@1210190002 : Record 11012363;
      LineNo@1100525003 : Integer;
      ProjNo@1100525004 : Code[20];
    BEGIN
      IF (Type = Type::Service) THEN
        EXIT;

      CASE UpdateAction OF
        UpdateAction::Insert:
          BEGIN
            IF (Type = Type::Indirect) OR ("Object No." = '') THEN BEGIN  //* Indirect (project independant) or project is empty
              "Connection No." := 0;
              EXIT;
            END;
            HourEmplHead.GET(Year, Week, "Supplying Company", "Employee No.");

            //Create Hour Project Header if necessary
            IF NOT HourProjHead.GET(Year, Week, "Receiving Company", "Object No.") THEN BEGIN
              HourProjHead.TRANSFERFIELDS(HourEmplHead);
              HourProjHead."Receiving Company" := "Receiving Company";
              HourProjHead."Project No." := "Object No.";
              HourProjHead.INSERT;
            END;

            //Determine Connection No
            "Connection No." := HrAccConnectionNos.GetConnectionNo();

            //Create Hour Project Line
            HourProjLine.RESET;
            HourProjLine.SETRANGE(Year, Year);
            HourProjLine.SETRANGE(Week, Week);
            HourProjLine.SETRANGE("Receiving Company","Receiving Company");
            HourProjLine.SETRANGE("Project No.", "Object No.");
            IF HourProjLine.FINDLAST THEN
              LineNo := HourProjLine."Line No." + 10000
            ELSE
              LineNo := 10000;

            CLEAR(HourProjLine);
            HourProjLine.TRANSFERFIELDS(Rec);
            HourProjLine."Line No." := LineNo;
            HourProjLine.Type := Type;      //* Not the same fieldno (75/250)
            HourProjLine.Amount := Amount;  //* Not the same fieldno (570/270)
            HourEmplHead.CALCFIELDS("Name Employee");
            HourProjLine."Name Employee" := HourEmplHead."Name Employee";
            HourProjLine.INSERT;
          END;
        UpdateAction::Modify:
          BEGIN
            IF "Connection No." = 0 THEN
              UpdateProjectHourLine(UpdateAction::Insert)
            ELSE BEGIN
              HourProjLine.RESET;
              HourProjLine.SETCURRENTKEY("Connection No.");
              HourProjLine.SETRANGE("Connection No.", "Connection No.");
              IF NOT HourProjLine.FINDFIRST THEN
                UpdateProjectHourLine(UpdateAction::Insert)
              ELSE BEGIN
                IF Type = Type::Indirect THEN
                  ProjNo := HourProjLine."Project No."
                ELSE
                  ProjNo := "Object No.";
                IF (ProjNo = HourProjLine."Project No.") AND (ProjNo <> '') AND
                   ("Receiving Company" = HourProjLine."Receiving Company")
                THEN BEGIN
                  HourProjLine.TRANSFERFIELDS(Rec,FALSE);
                  HourProjLine.Type := Type;      //* Not the same fieldno (75/250)
                  HourProjLine.Amount := Amount;  //* Not the same fieldno (570/270)
                  IF Type = Type::Indirect THEN BEGIN
                    HourProjLine."Cost Code" := "Object No.";
                    HourProjLine."Cost Code Description" := "Object Name";
                  END ELSE BEGIN
                    HourProjLine."Cost Code" := '';
                    HourProjLine."Cost Code Description" := '';
                  END;
                  HourProjLine.MODIFY;
                END ELSE BEGIN
                  UpdateProjectHourLine(UpdateAction::Delete);
                  UpdateProjectHourLine(UpdateAction::Insert);
                END;
              END;
            END;
          END;
        UpdateAction::Delete:
          BEGIN
            IF "Connection No." <> 0 THEN BEGIN
              HourProjLine.RESET;
              HourProjLine.SETCURRENTKEY("Connection No.");
              HourProjLine.SETRANGE("Connection No.", "Connection No.");
              IF HourProjLine.FINDFIRST THEN BEGIN
                HourProjLine.DELETE;
                HourProjLine.RESET;
                HourProjLine.SETRANGE(Year, HourProjLine.Year);
                HourProjLine.SETRANGE(Week, HourProjLine.Week);
                HourProjLine.SETRANGE("Receiving Company", HourProjLine."Receiving Company");
                HourProjLine.SETRANGE("Project No.", HourProjLine."Project No.");
                IF NOT HourProjLine.FINDFIRST THEN BEGIN
                  IF HourProjHead.GET(
                    HourProjLine.Year, HourProjLine.Week, HourProjLine."Receiving Company", HourProjLine."Project No.")
                  THEN
                    HourProjHead.DELETE;
                END;
              END;
            END;
          END;
        UpdateAction::Rename:
          BEGIN
            UpdateProjectHourLine(UpdateAction::Delete);
            UpdateProjectHourLine(UpdateAction::Insert);
          END;
      END;
    END;

    PROCEDURE CheckGrades@1100485000(DayInt@1100485001 : Integer;TempDec@1100485002 : Decimal);
    VAR
      LvSiteMngmntKmGrades@1100485000 : Record 11012442;
      LvSiteMngmntKmGradesRec@1100485006 : Record 11012442;
      CUSiteMngMntHours@1100485003 : Codeunit 11012178;
      lHoursDec@1100485004 : Decimal;
      lCostObjectCode@1100485005 : Code[10];
      lvHourLine@1100525000 : Record 11012361;
    BEGIN
      IF Type = Type::UnmannedPlant THEN
        EXIT;

      IF "Component Type" <> "Component Type"::Kilometers THEN
        EXIT;
      CASE DayInt OF
        1: IF "Travel Hours Monday" = "Travel Hours Monday"::"Work to Work" THEN
             EXIT;
        2: IF "Travel Hours Tuesday" = "Travel Hours Tuesday"::"Work to work" THEN
             EXIT;
        3: IF "Travel Hours Wednesday" = "Travel Hours Wednesday"::"Work to Work" THEN
             EXIT;
        4: IF "Travel Hours Thursday" = "Travel Hours Thursday"::"Work to work" THEN
             EXIT;
        5: IF "Travel Hours Friday" = "Travel Hours Friday"::"Work to Work" THEN
             EXIT;
        6: IF "Travel Hours Saturday" = "Travel Hours Saturday"::"Work to Work" THEN
             EXIT;
        7: IF "Travel Hours Sunday" = "Travel Hours Sunday"::"Work to Work" THEN
             EXIT;
      END;

      EmployeeRec.CHANGECOMPANY("Supplying Company");
      EmployeeRec.GET("Employee No.");
      EmployeeRec.TESTFIELD(CAO);

      LvSiteMngmntKmGrades.SETRANGE(CAO,EmployeeRec.CAO);
      LvSiteMngmntKmGrades.SETRANGE("Extra Expense",FALSE);

      CASE DayInt OF
        1: LvSiteMngmntKmGrades.SETRANGE(Type,"Travel Hours Monday");
        2: LvSiteMngmntKmGrades.SETRANGE(Type,"Travel Hours Tuesday");
        3: LvSiteMngmntKmGrades.SETRANGE(Type,"Travel Hours Wednesday");
        4: LvSiteMngmntKmGrades.SETRANGE(Type,"Travel Hours Thursday");
        5: LvSiteMngmntKmGrades.SETRANGE(Type,"Travel Hours Friday");
        6: LvSiteMngmntKmGrades.SETRANGE(Type,"Travel Hours Saturday");
        7: LvSiteMngmntKmGrades.SETRANGE(Type,"Travel Hours Sunday");
      END;

      LvSiteMngmntKmGrades.SETFILTER(Kilometerstaffel,'>=%1',TempDec);
      IF NOT LvSiteMngmntKmGrades.FINDFIRST THEN BEGIN
        LvSiteMngmntKmGrades.RESET;
        LvSiteMngmntKmGradesRec.SETCURRENTKEY(Type,Kilometerstaffel);
        LvSiteMngmntKmGradesRec.SETRANGE(CAO,EmployeeRec.CAO);
        LvSiteMngmntKmGradesRec.SETFILTER(Kilometerstaffel,'<=%1',TempDec);
        CASE DayInt OF
          1: LvSiteMngmntKmGradesRec.SETRANGE(Type,"Travel Hours Monday");
          2: LvSiteMngmntKmGradesRec.SETRANGE(Type,"Travel Hours Tuesday");
          3: LvSiteMngmntKmGradesRec.SETRANGE(Type,"Travel Hours Wednesday");
          4: LvSiteMngmntKmGradesRec.SETRANGE(Type,"Travel Hours Thursday");
          5: LvSiteMngmntKmGradesRec.SETRANGE(Type,"Travel Hours Friday");
          6: LvSiteMngmntKmGradesRec.SETRANGE(Type,"Travel Hours Saturday");
          7: LvSiteMngmntKmGradesRec.SETRANGE(Type,"Travel Hours Sunday");
        END;
        IF LvSiteMngmntKmGradesRec.FINDLAST THEN
           CUSiteMngMntHours.StartTravelExceptionForm(lHoursDec,lCostObjectCode);
        IF lHoursDec > 0 THEN BEGIN
          HoursLineRec.INIT;
          HoursLineRec.Type := Type;
          HoursLineRec.Year := Year;
          HoursLineRec.Week := Week;
          HoursLineRec."Supplying Company" := "Supplying Company";
          HoursLineRec."Receiving Company" := "Receiving Company";
          HoursLineRec."Employee No." := "Employee No.";
          HoursLineRec.VALIDATE("Object No.","Object No.");
          HoursLineRec.VALIDATE("Cost Object",LvSiteMngmntKmGradesRec."Cost Object");
          HoursLineRec.VALIDATE("Wage Component", LvSiteMngmntKmGradesRec."Wage Component");  // C001173, add validation
          lvHourLine.SETRANGE(Year,Year);
          lvHourLine.SETRANGE(Week,Week);
          lvHourLine.SETRANGE("Supplying Company","Supplying Company");
          lvHourLine.SETRANGE("Employee No.","Employee No.");
          IF lvHourLine.FINDLAST THEN
            HoursLineRec."Line No." := lvHourLine."Line No." + 1000;
          CASE DayInt OF
            1: HoursLineRec.VALIDATE(Monday,lHoursDec);
            2: HoursLineRec.VALIDATE(Tuesday,lHoursDec);
            3: HoursLineRec.VALIDATE(Wednesday,lHoursDec);
            4: HoursLineRec.VALIDATE(Thursday,lHoursDec);
            5: HoursLineRec.VALIDATE(Friday,lHoursDec);
            6: HoursLineRec.VALIDATE(Saturday,lHoursDec);
            7: HoursLineRec.VALIDATE(Sunday,lHoursDec);
          END;
          HoursLineRec.INSERT(TRUE);
        END;
      END;
    END;

    PROCEDURE GetLeaveTypeTotal@1100525000() : Decimal;
    VAR
      LeaveLedgEntry@1100525000 : Record 11020235;
    BEGIN
      //**4PS
      IF "Leave Type" <> '' THEN
      BEGIN
        LeaveLedgEntry.RESET;
        LeaveLedgEntry.SETCURRENTKEY("Employee No.","Leave Type");
        LeaveLedgEntry.SETRANGE("Employee No.", "Employee No.");
        LeaveLedgEntry.SETRANGE("Leave Type", "Leave Type");
        LeaveLedgEntry.CALCSUMS("No. of Hours");
        EXIT(LeaveLedgEntry."No. of Hours");
      END;
      EXIT(0);
    END;

    PROCEDURE SetDefaultDriverType@1100525007(DriverTypeOpt@1100525000 : 'Passenger,Driver without passengers,Driver with passengers');
    BEGIN
      "Travel Hours Monday" := DriverTypeOpt;
      "Travel Hours Tuesday" := DriverTypeOpt;
      "Travel Hours Wednesday" := DriverTypeOpt;
      "Travel Hours Thursday" := DriverTypeOpt;
      "Travel Hours Friday" := DriverTypeOpt;
      "Travel Hours Saturday" := DriverTypeOpt;
      "Travel Hours Sunday" := DriverTypeOpt;
      IF MODIFY THEN;
    END;

    PROCEDURE SetProjHrsValidate@1100525008(ProjHrsLineNo@1100525000 : Integer);
    BEGIN
      gProjHrsLineNo := ProjHrsLineNo;
      gSetProjHrsValidateMode := TRUE;
    END;

    PROCEDURE CheckCostType@1210190008();
    VAR
      ProjSetup@1210190001 : Record 315;
      DimVal@1210190003 : Record 349;
      SiteMgtEmpl@1210190002 : Record 11012357;
      ShowErrorMessage@1210190000 : Boolean;
    BEGIN
      //* Function copied from T11012039.
      //* In 'Hour Acc. Site Manager':
      //* - The field 'Cost Type' is not in this table, so first read 'Cost Object' to determine Cost Type.
      //* - Component Type can be filled if Wage Component is empty (here Wage Component most times is empty,
      //*   so it will be determined according to CAO-rules when posted to normal Hour Acc.). So check on
      //*   Wage Component is empty can not be used here. Here a normal field, so not a flowfield.
      //* - Field external not in this table, so first read employee.

      IF "Cost Object" = '' THEN
        EXIT;

      DimVal.RESET;
      DimVal.SETRANGE(Code,"Cost Object");
      DimVal.SETRANGE("Global Dimension No.",2);
      IF NOT DimVal.FINDFIRST THEN  //* Will be present, is checked on field 'Cost Object'. But if not
        EXIT;                       //* then exit, so then no check on Cost Type (assumed Labor).

      IF ("Receiving Company" <> '') THEN
        ProjSetup.CHANGECOMPANY("Receiving Company");
      ProjSetup.GET;

      //Checks irrespective of Component Type
      CASE DimVal."Cost Type" OF
        DimVal."Cost Type"::Material:
          ShowErrorMessage := TRUE;
        DimVal."Cost Type"::Subcontracting:
          IF NOT IsExternalEmployee THEN //DP01010.n
            ShowErrorMessage := TRUE;
        DimVal."Cost Type"::Subcontracting:
          ShowErrorMessage := TRUE;
        DimVal."Cost Type"::Plant:
          BEGIN
            IF SiteMgtEmpl.GET("Supplying Company", "Employee No.") THEN BEGIN
              IF SiteMgtEmpl.External THEN
                FIELDERROR("Cost Object",
                  STRSUBSTNO(Text007, SiteMgtEmpl.FIELDCAPTION(External), SiteMgtEmpl.External, DimVal."Cost Type"));
            END;
            IF NOT (Type IN [Type::Project, Type::Plant, Type::UnmannedPlant]) THEN
              FIELDERROR("Cost Object", STRSUBSTNO(Text007, FIELDCAPTION(Type), Type, DimVal."Cost Type"));
            ShowErrorMessage := (NOT ProjSetup."Accept Plant Costs Hours");
          END;
      END;
      IF ShowErrorMessage THEN
        FIELDERROR("Cost Object", STRSUBSTNO(Text008, DimVal."Cost Type"));

      //Checks depending on Component Type
      IF "Component Type" = "Component Type"::Hours THEN
        CASE DimVal."Cost Type" OF
          DimVal."Cost Type"::Labor:;
          DimVal."Cost Type"::Subcontracting:; //DP01010
          DimVal."Cost Type"::Plant:
            ShowErrorMessage := (NOT ProjSetup."Accept Plant Costs Hours");
          DimVal."Cost Type"::Sundry:
            ShowErrorMessage := (NOT ProjSetup."Accept Sundry Costs Hours");
          ELSE
            ShowErrorMessage := TRUE;
        END;

      IF ShowErrorMessage THEN
        FIELDERROR("Cost Object", STRSUBSTNO(Text007, FIELDCAPTION("Component Type"), "Component Type", DimVal."Cost Type"));
    END;

    PROCEDURE FillDefaultPlantCompany@1100525004();
    VAR
      PlantMgtCompRec@1100525000 : Record 11020586;
      TmpPlantMgtCompRec@1100525003 : TEMPORARY Record 11020586;
      NoOfPlantComps@1100525001 : Integer;
      NewPlantCompany@1100525002 : Text[30];
    BEGIN
      IF "Receiving Company" = '' THEN BEGIN
        "Plant Company" := '';
        "Plant Location" := '';
        "Plant Type" := '';
        "Plant No." := '';
        "Cost Component Plant" := '';
        EXIT;
      END;

      CASE Type OF
        Type::UnmannedPlant:
          BEGIN
            NewPlantCompany := '';  //*For unmanned plant only the supplying company allowed
            IF ("Object No." <> '') THEN BEGIN
              PlantMgtCompRec.GetPlantCompaniesForProject("Object No.", TmpPlantMgtCompRec, "Receiving Company");
              IF TmpPlantMgtCompRec.GET("Supplying Company") THEN
                NewPlantCompany := "Supplying Company";
            END ELSE BEGIN
              IF PlantMgtCompRec.GET("Supplying Company") THEN
                NewPlantCompany := "Supplying Company";
            END;
          END;
        Type::Plant:
          BEGIN
            NewPlantCompany := "Plant Company";
            PlantMgtCompRec."Plant Company" := PlantMgtCompRec.GetPlantCompany(TRUE, NoOfPlantComps, "Receiving Company");
            IF (PlantMgtCompRec."Plant Company" <> '') AND (NoOfPlantComps = 1) THEN
              NewPlantCompany := PlantMgtCompRec."Plant Company";
            IF (NoOfPlantComps > 1) AND ("Object No." = '') THEN BEGIN
              IF ("Plant Company" = '') OR (NOT PlantMgtCompRec.GET("Plant Company")) THEN BEGIN
                NewPlantCompany := '';
                PlantMgtCompRec.SETRANGE(Default, TRUE);
                IF PlantMgtCompRec.FINDFIRST THEN
                  NewPlantCompany := PlantMgtCompRec."Plant Company";
                PlantMgtCompRec.SETRANGE(Default);  //* Reset filter
              END;
            END;
            IF (NoOfPlantComps > 1) AND ("Object No." <> '') THEN BEGIN
              IF PlantMgtCompRec.GetPlantCompaniesForProject("Object No.", TmpPlantMgtCompRec, "Receiving Company") = 1 THEN BEGIN
                NewPlantCompany := TmpPlantMgtCompRec."Plant Company";
              END ELSE BEGIN
                IF ("Plant Company" = '') OR (NOT TmpPlantMgtCompRec.GET("Plant Company")) THEN BEGIN
                  NewPlantCompany := '';
                  TmpPlantMgtCompRec.SETRANGE(Default, TRUE);
                  IF TmpPlantMgtCompRec.FINDFIRST THEN
                    NewPlantCompany := TmpPlantMgtCompRec."Plant Company";
                  TmpPlantMgtCompRec.SETRANGE(Default);  //* Reset filter
                END;
              END;
            END;
          END;
      END;

      IF "Plant Company" <> NewPlantCompany THEN BEGIN
        "Plant Company" := NewPlantCompany;
        "Plant Location" := '';
        "Plant Type" := '';
        "Plant No." := '';
        "Cost Component Plant" := '';
      END;
    END;

    PROCEDURE FillDefaultPlantLoc@1100525012() : Code[20];
    VAR
      lvPlantLocRec@1100525001 : Record 11012554;
      lvDefPlantLoc@1100525002 : Code[20];
      lvProjCompany@1100525000 : Text[30];
    BEGIN
      //* Default location only when there is only 1 plant location of the project.
      IF "Plant Company" = '' THEN
        EXIT('');
      IF "Object No." <> '' THEN BEGIN
        IF "Plant Company" <> "Receiving Company" THEN
          lvProjCompany := "Receiving Company";
        lvPlantLocRec.CHANGECOMPANY("Plant Company");
        lvPlantLocRec.SETCURRENTKEY("Company Name", "Project No.", "Service Order No.", "Employee No.");
        lvPlantLocRec.SETRANGE("Project No.", "Object No.");
        lvPlantLocRec.SETRANGE("Company Name", lvProjCompany);
        lvPlantLocRec.SETRANGE(Blocked, FALSE);
        IF lvPlantLocRec.FINDFIRST THEN BEGIN
          lvDefPlantLoc := lvPlantLocRec.Code;
          IF lvPlantLocRec.NEXT <> 0 THEN
            lvDefPlantLoc := '';
        END;
      END;
      EXIT(lvDefPlantLoc);
    END;

    PROCEDURE GetPlantDescription@1100525002() : Text[50];
    VAR
      lvPlantTypeRec@1100525000 : Record 11012551;
      lvPlantNoRec@1100525001 : Record 11012552;
    BEGIN
      IF (NOT (Type IN [Type::Plant, Type::UnmannedPlant])) OR ("Plant Type" = '') THEN
        EXIT;
      lvPlantTypeRec.CHANGECOMPANY("Plant Company");
      lvPlantNoRec.CHANGECOMPANY("Plant Company");
      IF ("Plant No." <> '') THEN BEGIN
        IF lvPlantNoRec.GET("Plant Type", "Plant No.") THEN BEGIN
          IF (lvPlantNoRec.Description <> '') THEN
          EXIT(lvPlantNoRec.Description);
        END;
      END;
      IF lvPlantTypeRec.GET("Plant Type") THEN
        EXIT(lvPlantTypeRec.Description);
      EXIT('');
    END;

    PROCEDURE LookupPlantCompany@1100525014();
    VAR
      PlantMgtCompRec@1100525001 : Record 11020586;
      TmpPlantMgtCompRec@1100525002 : TEMPORARY Record 11020586;
      NoOfPlantComps@1100525000 : Integer;
    BEGIN
      IF (NOT (Type IN [Type::Plant, Type::UnmannedPlant])) OR ("Receiving Company" = '') THEN
        EXIT;
      PlantMgtCompRec.GetPlantCompany(TRUE, NoOfPlantComps, "Receiving Company");
      IF ("Object No." <> '') THEN BEGIN
        IF PlantMgtCompRec.GetPlantCompaniesForProject("Object No.", TmpPlantMgtCompRec, "Receiving Company") = 0 THEN BEGIN
          PlantMgtCompRec.CHANGECOMPANY("Receiving Company");
          PlantMgtCompRec."Plant Company" := "Plant Company";
          PAGE.RUNMODAL(0, PlantMgtCompRec);
        END ELSE BEGIN
          TmpPlantMgtCompRec."Plant Company" := "Plant Company";
          IF (NOT CheckUnmannedPlantHourLineOpen()) OR (Type = Type::UnmannedPlant) THEN BEGIN
             PAGE.RUNMODAL(0, TmpPlantMgtCompRec)
          END ELSE BEGIN
            IF PAGE.RUNMODAL(0, TmpPlantMgtCompRec) = ACTION::LookupOK THEN BEGIN
              IF TmpPlantMgtCompRec."Plant Company" <> "Plant Company" THEN BEGIN
                xRec."Plant Company" := "Plant Company";
                VALIDATE("Plant Company", TmpPlantMgtCompRec."Plant Company");
              END;
            END;
          END;
        END;
      END ELSE BEGIN
        PlantMgtCompRec.CHANGECOMPANY("Receiving Company");
        PlantMgtCompRec."Plant Company" := "Plant Company";
        IF (NOT CheckUnmannedPlantHourLineOpen()) OR (Type = Type::UnmannedPlant) THEN
          PAGE.RUNMODAL(0, PlantMgtCompRec)
        ELSE BEGIN
          IF PAGE.RUNMODAL(0, PlantMgtCompRec) = ACTION::LookupOK THEN
            VALIDATE("Plant Company", PlantMgtCompRec."Plant Company");
        END;
      END;
    END;

    PROCEDURE LookupPlantLocation@1100525013();
    VAR
      lvPlantLocRec@1100525001 : Record 11012554;
      lvProjCompany@1100525000 : Text[30];
    BEGIN
      IF (NOT (Type IN [Type::Plant, Type::UnmannedPlant])) OR ("Object No." = '') THEN
        EXIT;
      IF "Plant Company" <> "Receiving Company" THEN
        lvProjCompany := "Receiving Company";

      lvPlantLocRec.CHANGECOMPANY("Plant Company");
      lvPlantLocRec.SETCURRENTKEY("Company Name", "Project No.", "Service Order No.", "Employee No.");
      lvPlantLocRec.FILTERGROUP(9);
      lvPlantLocRec.SETRANGE("Project No.", "Object No.");
      lvPlantLocRec.SETRANGE("Company Name", lvProjCompany);
      lvPlantLocRec.FILTERGROUP(0);
      lvPlantLocRec.Code := "Plant Location";
      lvPlantLocRec."Project No." := "Object No.";
      lvPlantLocRec."Company Name" := lvProjCompany;
      IF NOT CheckUnmannedPlantHourLineOpen() THEN
         PAGE.RUNMODAL(0, lvPlantLocRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, lvPlantLocRec) = ACTION::LookupOK THEN
          VALIDATE("Plant Location", lvPlantLocRec.Code);
      END;
    END;

    PROCEDURE LookupPlantType@1100525001();
    VAR
      lvPlantTypeRec@1100525000 : Record 11012551;
    BEGIN
      IF (NOT (Type IN [Type::Plant, Type::UnmannedPlant])) THEN
        EXIT;
      lvPlantTypeRec.CHANGECOMPANY("Plant Company");
      lvPlantTypeRec.Code := "Plant Type";
      IF NOT CheckUnmannedPlantHourLineOpen() THEN
        PAGE.RUNMODAL(0, lvPlantTypeRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, lvPlantTypeRec) = ACTION::LookupOK THEN
          VALIDATE("Plant Type", lvPlantTypeRec.Code);
      END;
    END;

    PROCEDURE LookupPlantNo@1100525003();
    VAR
      lvPlantNoRec@1100525000 : Record 11012552;
    BEGIN
      IF (NOT (Type IN [Type::Plant, Type::UnmannedPlant])) THEN
        EXIT;
      lvPlantNoRec.CHANGECOMPANY("Plant Company");
      lvPlantNoRec.SETRANGE("Plant Type", "Plant Type");
      lvPlantNoRec."Plant Type" := "Plant Type";
      lvPlantNoRec."No." := "Plant No.";
      IF NOT CheckUnmannedPlantHourLineOpen() THEN
        PAGE.RUNMODAL(0, lvPlantNoRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, lvPlantNoRec) = ACTION::LookupOK THEN
          VALIDATE("Plant No.", lvPlantNoRec."No.");
      END;
    END;

    PROCEDURE LookupCostCompPlant@1100525005();
    VAR
      lvPlantCostCompRec@1100525000 : Record 11012575;
    BEGIN
      IF (Type <> Type::Plant) THEN
        EXIT;
      lvPlantCostCompRec.CHANGECOMPANY("Plant Company");
      lvPlantCostCompRec.Code := "Cost Component Plant";
      IF PAGE.RUNMODAL(0, lvPlantCostCompRec) = ACTION::LookupOK THEN
        VALIDATE("Cost Component Plant", lvPlantCostCompRec.Code);
    END;

    PROCEDURE LookupShiftCode@1210190005(EditableMode@1210190000 : Boolean);
    VAR
      ProjShift@1100525000 : Record 11125538;
      ProjNo@1210190001 : Code[20];
    BEGIN
      //*DP00033
      ProjNo := GetProjectNoForShift();
      IF ProjNo = '' THEN
        EXIT;

      ProjShift.CHANGECOMPANY("Receiving Company");
      ProjShift.FILTERGROUP(9);
      ProjShift.SETRANGE("Project No.", ProjNo);
      ProjShift.SETFILTER("Shift Code", '<>%1', '');  //* Only Shift level
      ProjShift.FILTERGROUP(0);
      ProjShift."Project No." := ProjNo;
      ProjShift."Shift Code" := "Shift Code";
      IF PAGE.RUNMODAL(0, ProjShift) = ACTION::LookupOK THEN BEGIN
        IF EditableMode AND (ProjShift."Shift Code" <> '') THEN
          VALIDATE("Shift Code", ProjShift."Shift Code");
      END;
    END;

    PROCEDURE GetProjectNoForShift@1210190000() : Code[20];
    VAR
      SiteMgtProjHourLine@1210190000 : Record 11012363;
    BEGIN
      //*DP00033
      IF (Type <> Type::Indirect) THEN
        EXIT("Object No.")
      ELSE BEGIN
        IF "Connection No." <> 0 THEN BEGIN
          SiteMgtProjHourLine.SETCURRENTKEY("Connection No.");
          SiteMgtProjHourLine.SETRANGE("Connection No.", "Connection No.");
          IF SiteMgtProjHourLine.FINDFIRST THEN
            EXIT(SiteMgtProjHourLine."Project No.");
        END;
      END;
      EXIT('');
    END;

    PROCEDURE FillDefaultCostCompPlant@1100525006();
    VAR
      lvPlantSetupRec@1100525000 : Record 11012550;
    BEGIN
      IF (Type <> Type::Plant) THEN
        EXIT;

      lvPlantSetupRec.CHANGECOMPANY("Plant Company");
      lvPlantSetupRec.GET;
      IF lvPlantSetupRec."Cost Component Hour Costs" <> '' THEN
        "Cost Component Plant" := lvPlantSetupRec."Cost Component Hour Costs";
    END;

    PROCEDURE CheckPlantLocLinkedToProject@1100525011(IPlantLocRec@1100525001 : Record 11012554);
    VAR
      lvProjHourLineRec@1100525002 : Record 11012363;
      lvProjCompany@1100525000 : Text[30];
    BEGIN
      IF "Plant Company" <> "Receiving Company" THEN
        lvProjCompany := "Receiving Company";
      IF (IPlantLocRec."Project No." = '') OR
         (IPlantLocRec."Project No." <> "Object No.") OR
         (IPlantLocRec."Company Name" <> lvProjCompany)
      THEN BEGIN
        IF NOT gSetProjHrsValidateMode THEN
          FIELDERROR("Plant Location", STRSUBSTNO(Text004, "Plant Location", "Object No.", "Receiving Company"))
        ELSE BEGIN
          lvProjHourLineRec.Year := Year;
          lvProjHourLineRec.Week := Week;
          lvProjHourLineRec."Receiving Company" := "Receiving Company";
          lvProjHourLineRec."Project No." := "Object No.";
          lvProjHourLineRec."Line No." := gProjHrsLineNo;
          lvProjHourLineRec."Plant Location" := "Plant Location";
          lvProjHourLineRec.FIELDERROR("Plant Location", STRSUBSTNO(Text004, "Plant Location", "Object No.", "Receiving Company"));
        END;
      END;
    END;

    PROCEDURE CheckDeleteUnmandPlantHourLine@1100525010(IUpdateAction@1100525000 : Option);
    VAR
      lvXRec@1100525001 : Record 11012361;
      lvSiteMgtHoursCU@1100525002 : Codeunit 11012179;
      lvText001@1100525003 : TextConst 'ENU=Plant hours of the unmanned plant are already posted, modify not allowed.';
    BEGIN
      IF "Plant Hour Rev. Line No." = 0 THEN
        EXIT;
      IF NOT lvXRec.GET(Year, Week, "Supplying Company", "Employee No." , "Line No.") THEN
        EXIT;
      IF (lvXRec.Type <> lvXRec.Type::UnmannedPlant) THEN
        EXIT;

      CASE IUpdateAction OF
        UpdateAction::Modify:
          BEGIN
            IF NOT lvSiteMgtHoursCU.CheckPlantHourRevLineOpen(
              lvXRec.Year, lvXRec.Week, lvXRec."Plant Type", lvXRec."Plant No.",
              lvXRec."Plant Hour Rev. Line No.", lvXRec."Plant Company")
            THEN
              ERROR(lvText001);
            lvSiteMgtHoursCU.DeletePlantHourRevLineOpen(
              lvXRec.Year, lvXRec.Week, lvXRec."Plant Type", lvXRec."Plant No.",
              lvXRec."Plant Hour Rev. Line No.", lvXRec."Plant Company");
            "Plant Hour Rev. Line No." := 0;
          END;
        UpdateAction::Delete:
          BEGIN
            lvSiteMgtHoursCU.DeletePlantHourRevLineOpen(
              lvXRec.Year, lvXRec.Week, lvXRec."Plant Type", lvXRec."Plant No.",
              lvXRec."Plant Hour Rev. Line No.", lvXRec."Plant Company");
          END;
      END;
    END;

    PROCEDURE CheckUnmannedPlantHourLineOpen@1100525009() : Boolean;
    VAR
      lvSiteMgtHoursCU@1100525002 : Codeunit 11012179;
    BEGIN
      IF (Type <> Type::UnmannedPlant) OR ("Plant Hour Rev. Line No." = 0) THEN
        EXIT(TRUE);

      IF NOT lvSiteMgtHoursCU.CheckPlantHourRevLineOpen(
        Year, Week, "Plant Type", "Plant No.", "Plant Hour Rev. Line No.", "Plant Company")
      THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE CheckResetOnComponentType@1210190001();
    BEGIN
      //*C-027136
      IF ("Component Type" = "Component Type"::Expenses) THEN BEGIN
        Monday := 0;
        Tuesday := 0;
        Wednesday := 0;
        Thursday := 0;
        Friday := 0;
        Saturday := 0;
        Sunday := 0;
        TotalHours;
      END ELSE BEGIN
        Quantity := 0;
        Amount := 0;
        "Posting Date" := 0D;
      END;
    END;

    PROCEDURE GetCostObjectWithLookup@1210190003();
    VAR
      DimValRec@1210190000 : Record 349;
    BEGIN
      SiteMngmntHoursSetup.GET;
      CASE Type OF
        Type::Project,
        Type::Plant:
          BEGIN
            IF "Object No." = '' THEN BEGIN
              MESSAGE(Text003);
              EXIT;
            END ELSE BEGIN
              DimValRec.RESET;
              DimValRec.CHANGECOMPANY("Receiving Company"); // 33618.n
              DimValRec.FILTERGROUP(9);
              DimValRec.SETRANGE("Global Dimension No.", 2);
              //DP01010.sn
              IF IsExternalEmployee THEN
                DimValRec.SETFILTER("Cost Type",'%1|%2|%3|%4',
                  DimValRec."Cost Type"::Labor,DimValRec."Cost Type"::Subcontracting,DimValRec."Cost Type"::Plant,DimValRec."Cost Type"::Sundry)
              ELSE
              //DP01010.en
                DimValRec.SETFILTER("Cost Type",'%1|%2|%3',
                  DimValRec."Cost Type"::Labor,DimValRec."Cost Type"::Plant,DimValRec."Cost Type"::Sundry);
              DimValRec.FILTERGROUP(0);
              DimValRec.SETRANGE("Project Filter", "Object No.");
              IF "Receiving Company" = '' THEN
                DimValRec.SETRANGE("Company Filter")
              ELSE
                DimValRec.SETRANGE("Company Filter", "Receiving Company");
              IF DimValRec.FINDSET THEN BEGIN
                IF "Cost Object" <> '' THEN
                  DimValRec.Code := "Cost Object";
                IF PAGE.RUNMODAL(PAGE::"Cost Object List", DimValRec) = ACTION::LookupOK THEN
                  VALIDATE("Cost Object",DimValRec.Code);
              END;
            END;
          END;
        Type::Indirect:
          BEGIN
            IF SiteMngmntHoursSetup."Cost Object By Indirect Lines" THEN BEGIN
              DimValRec.RESET;
              DimValRec.CHANGECOMPANY("Receiving Company"); // 33618.n
              DimValRec.FILTERGROUP(9);
              DimValRec.SETRANGE("Global Dimension No.", 2);
              //DP01010.sn
              IF IsExternalEmployee THEN
                DimValRec.SETFILTER("Cost Type",'%1|%2|%3',
                  DimValRec."Cost Type"::Labor,DimValRec."Cost Type"::Subcontracting,DimValRec."Cost Type"::Sundry)
              ELSE
              //DP01010.en
                DimValRec.SETFILTER("Cost Type",'%1|%2', DimValRec."Cost Type"::Labor,DimValRec."Cost Type"::Sundry);
              DimValRec.FILTERGROUP(0);
              IF DimValRec.FINDSET THEN BEGIN
                IF "Receiving Company" = '' THEN
                  DimValRec.SETRANGE("Company Filter")
                ELSE
                  DimValRec.SETRANGE("Company Filter", "Receiving Company");
                IF "Cost Object" <> '' THEN
                  DimValRec.Code := "Cost Object";
                IF PAGE.RUNMODAL(PAGE::"Cost Object List", DimValRec) = ACTION::LookupOK THEN
                  VALIDATE("Cost Object",DimValRec.Code);
              END;
            END;
          END;
      END;
    END;

    PROCEDURE FillDepartmentCode@1100409000() : Code[20];
    VAR
      TradeAssRec@1100409005 : Record 11012015;
      EmplRec@1100409006 : Record 5200;
      CostCodeRec@1100409007 : Record 11012083;
      TableID@1100409001 : ARRAY [10] OF Integer;
      No@1100409000 : ARRAY [10] OF Code[20];
      GlobalDim1Code@1100409003 : Code[20];
      GlobalDim2Code@1100409002 : Code[20];
      DimensionSet@1100525000 : Integer;
    BEGIN
      IF ("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME) THEN BEGIN
        VALIDATE("Department Code",  '');
        EXIT;
      END;

      CASE Type OF
        Type::Project:
          BEGIN
            TableID[1] := DATABASE::Job;
            No[1] := "Object No.";
            DimensionSet := DimMgt.GetDefaultDimID(TableID,No,'',GlobalDim1Code,GlobalDim2Code,0,0); //** DP00387 changed
          END;
        Type::Plant, Type::UnmannedPlant:
          BEGIN
            TableID[1] := DATABASE::"Plant Number";
            No[1] := DimMgt.MakeCombinedPlantNo("Plant Type", "Plant No.");
            TableID[2] := DATABASE::"Plant Type";
            No[2] := "Plant Type";
            DimensionSet := DimMgt.GetDefaultDimID(TableID,No,'',GlobalDim1Code,GlobalDim2Code,0,0);   //** DP00387 changed
          END;
        Type::Indirect:
          BEGIN
            EmplRec.GET("Employee No.");
            IF (NOT TradeAssRec.GET(EmplRec."Trade Association")) THEN
              TradeAssRec.INIT;
            IF (NOT CostCodeRec.GET("Object No.")) THEN
              CostCodeRec.INIT;
            IF CostCodeRec."Source Global Dim 1 Code" = CostCodeRec."Source Global Dim 1 Code"::Fixed THEN BEGIN
              GlobalDim1Code := CostCodeRec."Global Dimension 1 Code";
            END ELSE BEGIN
              IF CostCodeRec."Source Global Dim 1 Code" = CostCodeRec."Source Global Dim 1 Code"::Employee THEN BEGIN
                GlobalDim1Code := EmplRec."Global Dimension 1 Code";
              END ELSE BEGIN
                IF TradeAssRec."Source Department Code" = TradeAssRec."Source Department Code"::"Trade Association" THEN BEGIN
                  GlobalDim1Code := TradeAssRec."Department Code";
                END ELSE BEGIN
                  GlobalDim1Code := EmplRec."Global Dimension 1 Code";
                END;
              END;
            END;
          END;
      END;

      VALIDATE("Department Code",  GlobalDim1Code);
    END;

    PROCEDURE ValidatePlantNo@1100525031();
    VAR
      PlantType@1100525000 : Record 11012551;
      PurchaseLine@1100525001 : Record 39;
      PlantSetup@1100525002 : Record 11012550;
    BEGIN
      //**4PS
      IF ("Plant Type" <> '') AND ("Plant No." = '') THEN BEGIN
        PlantSetup.GET;
        IF PlantSetup."Posting on Unique Plant No." THEN
          IF PlantType.GET("Plant Type") THEN
            IF NOT PlantType.Bulk THEN
              IF PlantSetup."Cost Component Acquisition" <> "Cost Component Plant" THEN
                TESTFIELD("Plant No.");
      END;
    END;

    LOCAL PROCEDURE CreateHoursConsentLine@1100528400() : Boolean;
    VAR
      HoursConsentLine@1100528400 : Record 11020437;
      Employee@1100528402 : Record 5200;
      SerialNumber@1100528403 : Integer;
      Consenter@1100528404 : Code[50];
      ProjectNo@1100528405 : Code[20];
    BEGIN
      SiteMngmntHoursSetup.GET;
      IF NOT SiteMngmntHoursSetup."Consent Hours" THEN   //test required for license issues on table Hours Consent Setup in method GetHourConsenterInfo.
        EXIT(TRUE);                                      //If exit value is false, then hourlines would not be released.

      IF NOT GetHourConsenterInfo(SerialNumber, Consenter, -2147483647) THEN
        EXIT;

      Employee.GET("Employee No.");

      IF NOT HoursConsentLine.GET(
        Year, Week, "Employee No.", HoursConsentLine.LineType::Normal, SerialNumber,
        DetermineHoursConsentLineType(Rec), DetermineHoursConsentLineNo(Rec), "Line No.",
        Consenter, FALSE, FALSE, HoursConsentLine.Source::"Site Mngmnt. Hours", "Supplying Company")
      THEN BEGIN
        HoursConsentLine.INIT;
        HoursConsentLine.Consenter := Consenter;
        HoursConsentLine.Year := Year;
        HoursConsentLine.Week := Week;
        HoursConsentLine.Employee := "Employee No.";
        HoursConsentLine."Wage Component" := "Wage Component";
        HoursConsentLine."Wage Component Descr" := GetWageComponentDescription;
        HoursConsentLine."Cost Object" := "Cost Object";
        HoursConsentLine."Cost Object Descr" := GetCostObjectDescription;
        HoursConsentLine.LineType := HoursConsentLine.LineType::Normal;
        HoursConsentLine."Serial Number" := SerialNumber;
        HoursConsentLine.Source := HoursConsentLine.Source::"Site Mngmnt. Hours";
        HoursConsentLine."Line No." := "Line No.";
        HoursConsentLine."Hours Quantity" := "Total Line";
        HoursConsentLine.Amount := Amount;
        HoursConsentLine.Type := DetermineHoursConsentLineType(Rec);
        HoursConsentLine."No." := DetermineHoursConsentLineNo(Rec);
        HoursConsentLine."Global Dimension 1 Code" := Employee."Global Dimension 1 Code";
        HoursConsentLine."Supplying Company" := "Supplying Company";
        HoursConsentLine."Receiving Company" := "Receiving Company";
        HoursConsentLine.Element := Element;
        HoursConsentLine."Extension Contract" := "Extension Contract";
        //Call C028290 sn
        HoursConsentLine."Plant Company" := "Plant Company";
        HoursConsentLine."Plant Type" := "Plant Type";
        HoursConsentLine."Plant No." := "Plant No.";
        //Call C028290 en
        HoursConsentLine."Week Day" := GetWeekDay;
        HoursConsentLine."Start Time" := "Start Time"; //Call C024380
        HoursConsentLine."End Time" := "End Time"; //Call C024380
        HoursConsentLine.INSERT(TRUE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE GetHourConsenterInfo@1100528401(VAR SerialNumber@1100528400 : Integer;VAR Consenter@1100528401 : Code[50];MinimumSerialNo@1100528407 : Integer) : Boolean;
    VAR
      HoursConsentSetup@1100528406 : Record 11020436;
      ServiceOrder@1100528302 : Record 11012823;
      ProjectNo@1100528403 : Code[20];
      ServiceContractNo@1100528300 : Code[20];
      ServiceOrderNo@1100528301 : Code[20];
    BEGIN
      IF DetermineHoursConsentLineType(Rec) = HoursConsentSetup.Type::Project THEN
        ProjectNo := "Object No.";
      IF DetermineHoursConsentLineType(Rec) = HoursConsentSetup.Type::Service THEN BEGIN
        ServiceOrderNo := "Object No.";
        IF (ServiceOrder.GET(ServiceOrderNo)) THEN
          ServiceContractNo := ServiceOrder."Service Contract No.";
      END;

      EXIT(HoursConsentSetup.GetHourConsenterInfo(
        SerialNumber, Consenter, HoursConsentSetup.Source::"Site Mngmnt. Hours", DetermineHoursConsentLineType(Rec),
        ProjectNo, ServiceContractNo, ServiceOrderNo, "Employee No.", "Plant Location",
        "Receiving Company", "Supplying Company", MinimumSerialNo));
    END;

    PROCEDURE GetApplicableHoursConsentSetup@1100528405(VAR HoursConsentSetup@1100528400 : Record 11020436;MinimumSerialNo@1100528401 : Integer) : Boolean;
    VAR
      ServiceOrder@1100528300 : Record 11012823;
      ProjectNo@1100528402 : Code[20];
      ServiceOrderNo@1100528301 : Code[20];
      ServiceContractNo@1100528302 : Code[20];
    BEGIN
      IF DetermineHoursConsentLineType(Rec) = HoursConsentSetup.Type::Project THEN
        ProjectNo := "Object No.";
      IF DetermineHoursConsentLineType(Rec) = HoursConsentSetup.Type::Service THEN BEGIN
        ServiceOrderNo := "Object No.";
        IF (ServiceOrder.GET(ServiceOrderNo)) THEN
          ServiceContractNo := ServiceOrder."Service Contract No.";
      END;

      EXIT(HoursConsentSetup.GetApplicableHoursConsentSetup(
        HoursConsentSetup, HoursConsentSetup.Source::"Site Mngmnt. Hours", DetermineHoursConsentLineType(Rec), ProjectNo,
        ServiceContractNo, ServiceOrderNo, "Employee No.", "Plant Location", MinimumSerialNo));
    END;

    LOCAL PROCEDURE DetermineHoursConsentLineType@1100528403(SiteMngmntHoursLine@1100528400 : Record 11012361) : Integer;
    VAR
      HoursConsentLine@1100528401 : Record 11020437;
    BEGIN
      CASE SiteMngmntHoursLine.Type OF
        SiteMngmntHoursLine.Type::Project:
          EXIT(HoursConsentLine.Type::Project);
        SiteMngmntHoursLine.Type::Indirect:
          EXIT(HoursConsentLine.Type::Indirect);
        SiteMngmntHoursLine.Type::Plant, Type::UnmannedPlant:
          EXIT(HoursConsentLine.Type::Plant);
        SiteMngmntHoursLine.Type::Service:
          EXIT(HoursConsentLine.Type::Service);
      END;
    END;

    LOCAL PROCEDURE DetermineHoursConsentLineNo@1100528402(SiteMngmntHoursLine@1100528400 : Record 11012361) : Code[20];
    BEGIN
      CASE SiteMngmntHoursLine.Type OF
        SiteMngmntHoursLine.Type::Project,
        SiteMngmntHoursLine.Type::Service:
          EXIT(SiteMngmntHoursLine."Object No.");
        SiteMngmntHoursLine.Type::Indirect:
          EXIT(SiteMngmntHoursLine."Object No.");
        SiteMngmntHoursLine.Type::Plant, Type::UnmannedPlant:
          EXIT(SiteMngmntHoursLine."Plant Location");
      END;
    END;

    PROCEDURE Release@1100528420();
    VAR
      SiteMngmntHoursSetup@1100528400 : Record 11012355;
    BEGIN
      SiteMngmntHoursSetup.GET;
      IF (FINDSET(TRUE)) THEN BEGIN
        REPEAT
          IF (Status <> Status::Open) AND
             (Status <> Status::Rejected)
          THEN
            FIELDERROR(Status);

          CASE Type OF
            Type::Project,
            Type::Plant,
            Type::UnmannedPlant,
            Type::Service:
              TESTFIELD("Cost Object");
            Type::Indirect: BEGIN
              IF (SiteMngmntHoursSetup."Use Job Cost Objects") THEN
                TESTFIELD("Cost Object");
            END;
          END;

          IF ((SiteMngmntHoursSetup."Consent Hours") AND (CreateHoursConsentLine)) OR
             (NOT SiteMngmntHoursSetup."Consent Hours")
          THEN
            Status := Status::Released
          ELSE
            Status := Status::Approved;
          "Reject Text" := '';
          MODIFY;
          UpdateHeaderStatus(FALSE);
        UNTIL (NEXT = 0);
      END;
    END;

    PROCEDURE Reopen@1100528404();
    VAR
      SiteMngmntHoursSetup@1100528400 : Record 11012355;
    BEGIN
      SiteMngmntHoursSetup.GET;
      IF (FINDSET(TRUE)) THEN BEGIN
        REPEAT
          IF (Status = Status::Posted) AND (SiteMngmntHoursSetup."Consent Hours") THEN
            FIELDERROR(Status);

          DeleteHoursConsentLines;
          VALIDATE(Status, Status::Open);
          "Reject Text" := '';
          MODIFY;
          UpdateHeaderStatus(FALSE);
        UNTIL (NEXT = 0);
      END;
    END;

    PROCEDURE Approve@1100528408();
    BEGIN
      SiteMngmntHoursSetup.GET;
      SiteMngmntHoursSetup.TESTFIELD("Consent Hours");
      TESTFIELD(Status, Status::Released);
      VALIDATE(Status, Status::Approved);
      MODIFY;
      UpdateHeaderStatus(FALSE);
    END;

    PROCEDURE Reject@1100528407();
    VAR
      SiteMngmntHoursSetup@1100528400 : Record 11012355;
    BEGIN
      SiteMngmntHoursSetup.GET;
      SiteMngmntHoursSetup.TESTFIELD("Consent Hours");
      TESTFIELD(Status, Status::Released);
      DeleteHoursConsentLines;
      VALIDATE(Status, Status::Rejected);
      MODIFY;
      UpdateHeaderStatus(FALSE);
    END;

    PROCEDURE Posted@1100528409();
    BEGIN
      SiteMngmntHoursSetup.GET;
      IF (SiteMngmntHoursSetup."Consent Hours") THEN //T005907.n
        TESTFIELD(Status, Status::Approved);
      VALIDATE(Status, Status::Posted);
      MODIFY;
    END;

    LOCAL PROCEDURE UpdateHeaderStatus@1100528305(CalledFromDelete@1100409005 : Boolean);
    VAR
      SiteMngmntHoursHeader@1100528300 : Record 11012360;
      SiteMngmntHoursLine@1100528301 : Record 11012361;
      NewStatus@1100528302 : Option;
      CountAll@1100409000 : Integer;
      CountReleased@1100409001 : Integer;
      CountApproved@1100409002 : Integer;
      CountRejected@1100409003 : Integer;
      CountOpen@1100409004 : Integer;
    BEGIN
      NewStatus := GetLineStatusForHeader(CalledFromDelete);

      SiteMngmntHoursHeader.GET(Year, Week, "Supplying Company", "Employee No.");
      IF (SiteMngmntHoursHeader.Status <> NewStatus) THEN BEGIN
        SiteMngmntHoursHeader.Status := NewStatus;
        SiteMngmntHoursHeader.MODIFY;
      END;
    END;

    PROCEDURE GetLineStatusForHeader@1100409001(CalledFromDelete@1100409005 : Boolean) : Integer;
    VAR
      SiteMngmntHoursHeader@1100528300 : Record 11012360;
      SiteMngmntHoursLine@1100528301 : Record 11012361;
      NewStatus@1100528302 : Option;
      CountAll@1100409000 : Integer;
      CountReleased@1100409001 : Integer;
      CountApproved@1100409002 : Integer;
      CountRejected@1100409003 : Integer;
      CountOpen@1100409004 : Integer;
    BEGIN
      SiteMngmntHoursSetup.GET; //T005907.n
      NewStatus := Status;

      SiteMngmntHoursLine.SETRANGE(Year, Year);
      SiteMngmntHoursLine.SETRANGE(Week, Week);
      SiteMngmntHoursLine.SETRANGE("Supplying Company", "Supplying Company");
      SiteMngmntHoursLine.SETRANGE("Employee No.", "Employee No.");
      IF (CalledFromDelete) THEN
        SiteMngmntHoursLine.SETFILTER("Line No.", '<>%1', "Line No.");
      IF (SiteMngmntHoursSetup."Consent Hours") THEN //T005907.n
        SiteMngmntHoursLine.SETFILTER(Status, '<>%1', SiteMngmntHoursLine.Status::Posted);
      CountAll := SiteMngmntHoursLine.COUNT;
      SiteMngmntHoursLine.SETRANGE(Status, SiteMngmntHoursLine.Status::Released);
      CountReleased := SiteMngmntHoursLine.COUNT;
      SiteMngmntHoursLine.SETRANGE(Status, SiteMngmntHoursLine.Status::Approved);
      CountApproved := SiteMngmntHoursLine.COUNT;
      SiteMngmntHoursLine.SETRANGE(Status, SiteMngmntHoursLine.Status::Rejected);
      CountRejected := SiteMngmntHoursLine.COUNT;
      SiteMngmntHoursLine.SETRANGE(Status, SiteMngmntHoursLine.Status::Open);
      CountOpen := SiteMngmntHoursLine.COUNT;

      IF (NewStatus = SiteMngmntHoursLine.Status::Posted) AND (CountApproved > 0) THEN
        NewStatus := SiteMngmntHoursLine.Status::Approved;  //Downgrade

      IF (CountAll > 0) AND (CountAll = CountApproved) THEN
        NewStatus := SiteMngmntHoursLine.Status::Approved;  //Upgrade

      IF ((NewStatus = SiteMngmntHoursLine.Status::Posted) OR (NewStatus = SiteMngmntHoursLine.Status::Approved)) AND
        (CountReleased > 0)
      THEN
        NewStatus := SiteMngmntHoursLine.Status::Released; //Downgrade

      IF (CountAll > 0) AND (CountAll = CountReleased) THEN
        NewStatus := SiteMngmntHoursLine.Status::Released;   //Upgrade
      IF (CountOpen > 0) THEN
        NewStatus := SiteMngmntHoursLine.Status::Open;     //Downgrade
      IF (CountRejected > 0) THEN
        NewStatus := SiteMngmntHoursLine.Status::Rejected; //Downgrade


      EXIT(NewStatus);
    END;

    LOCAL PROCEDURE DeleteHoursConsentLines@1100485007();
    VAR
      HoursConsentLine@1100485001 : Record 11020437;
    BEGIN
      HoursConsentLine.SETRANGE(Year, Year);
      HoursConsentLine.SETRANGE(Week, Week);
      HoursConsentLine.SETRANGE(Employee, "Employee No.");
      HoursConsentLine.SETRANGE(LineType, HoursConsentLine.LineType::Normal);
      HoursConsentLine.SETRANGE(Source, HoursConsentLine.Source::"Site Mngmnt. Hours");
      HoursConsentLine.SETRANGE("Supplying Company", "Supplying Company");
      HoursConsentLine.SETRANGE("Line No.", "Line No.");
      HoursConsentLine.DELETEALL(TRUE);
    END;

    PROCEDURE HasOpenHoursConsentLines@1100528412() : Boolean;
    VAR
      HoursConsentLine@1100528400 : Record 11020437;
    BEGIN
      HoursConsentLine.SETRANGE(Year, Year);
      HoursConsentLine.SETRANGE(Week, Week);
      HoursConsentLine.SETRANGE(Employee, "Employee No.");
      HoursConsentLine.SETRANGE(LineType, HoursConsentLine.LineType::Normal);
      HoursConsentLine.SETRANGE(Consent, FALSE);
      HoursConsentLine.SETRANGE(Denied, FALSE);
      HoursConsentLine.SETRANGE(Source, HoursConsentLine.Source::"Site Mngmnt. Hours");
      HoursConsentLine.SETRANGE("Supplying Company", "Supplying Company");
      HoursConsentLine.SETRANGE("Line No.", "Line No.");
      EXIT(NOT HoursConsentLine.ISEMPTY);
    END;

    PROCEDURE SuperConsentHoursConsentLines@1100528411();
    VAR
      HoursConsentLine@1100528400 : Record 11020437;
    BEGIN
      HoursConsentLine.SETRANGE(Year, Year);
      HoursConsentLine.SETRANGE(Week, Week);
      HoursConsentLine.SETRANGE(Employee, "Employee No.");
      HoursConsentLine.SETRANGE(LineType, HoursConsentLine.LineType::Normal);
      HoursConsentLine.SETRANGE(Consent, FALSE);
      HoursConsentLine.SETRANGE(Denied, FALSE);
      HoursConsentLine.SETRANGE(Source, HoursConsentLine.Source::"Site Mngmnt. Hours");
      HoursConsentLine.SETRANGE("Supplying Company", "Supplying Company");
      HoursConsentLine.SETRANGE("Line No.", "Line No.");
      IF HoursConsentLine.FINDSET THEN
        REPEAT
          HoursConsentLine.SuperConsentNormalLine;
        UNTIL HoursConsentLine.NEXT = 0;
      GET(Year, Week, "Supplying Company", "Employee No.", "Line No."); //Refresh Rec because status may have been changed.
    END;

    LOCAL PROCEDURE CheckIfChangingLineIsAllowed@1100528406();
    VAR
      lvPlantHourRevLineRec@1100525000 : Record 11012574;
    BEGIN
      //IF (Status = Status::Open) OR
      //   (Status = Status::Released) OR
      //   (Status = Status::Rejected)
      //THEN
      //  EXIT
      //ELSE
      //  FIELDERROR(Status);
      //CALL T006173 so
      //TESTFIELD(Status, Status::Open);
      //CALL T006173 eo

      //Call T006173 sn
      IF NOT CheckUnmannedPlantHourLineOpen() THEN
        ERROR(Text011, lvPlantHourRevLineRec.TABLECAPTION);

      IF (Status <> Status::Open) AND (Status <> Status::Rejected) THEN
        //TESTFIELD(Status, Status::Open); T006583.o
        ERROR(Text012, TABLECAPTION, FIELDCAPTION(Status), Status::Open, Status::Rejected, Status, //T006583.n
              Year,Week,"Supplying Company","Employee No.","Line No.");                            //T006583.n
      //CALL T006173 en
    END;

    LOCAL PROCEDURE GetWageComponentDescription@1100528300() : Text[50];
    VAR
      WageComponent@1100528300 : Record 11012014;
    BEGIN
      IF ("Wage Component" = '') THEN
        EXIT('');
      IF ("Receiving Company" <> '') THEN
        WageComponent.CHANGECOMPANY("Receiving Company");
      IF (WageComponent.GET("Wage Component")) THEN
        EXIT(WageComponent.Description);
      EXIT('');
    END;

    LOCAL PROCEDURE GetCostObjectDescription@1100528301() : Text[50];
    VAR
      DimensionValue@1100528300 : Record 349;
    BEGIN
      IF ("Cost Object" = '') THEN
        EXIT('');
      IF ("Receiving Company" <> '') THEN
        DimensionValue.CHANGECOMPANY("Receiving Company");
      DimensionValue.SETCURRENTKEY(Code,"Global Dimension No.");
      DimensionValue.SETRANGE(Code, "Cost Object");
      DimensionValue.SETRANGE("Global Dimension No.", 2);
      IF (DimensionValue.FINDFIRST) THEN
        EXIT(DimensionValue.Name);
      EXIT('');
    END;

    LOCAL PROCEDURE GetWeekDay@1100528302() : Integer;
    BEGIN
      CASE TRUE OF
        (Monday <> 0) AND (Tuesday+Wednesday+Thursday+Friday+Saturday+Sunday = 0): EXIT(1); //Monday
        (Tuesday <> 0) AND (Monday+Wednesday+Thursday+Friday+Saturday+Sunday = 0): EXIT(2); //Tuesday
        (Wednesday <> 0) AND (Monday+Tuesday+Thursday+Friday+Saturday+Sunday = 0): EXIT(3); //Wednesday
        (Thursday <> 0) AND (Monday+Tuesday+Wednesday+Friday+Saturday+Sunday = 0): EXIT(4); //Thursday
        (Friday <> 0) AND (Monday+Tuesday+Wednesday+Thursday+Saturday+Sunday = 0): EXIT(5); //Friday
        (Saturday <> 0) AND (Monday+Tuesday+Wednesday+Thursday+Friday+Sunday = 0): EXIT(6); //Saturday
        (Sunday <> 0) AND (Monday+Tuesday+Wednesday+Thursday+Friday+Saturday = 0): EXIT(7); //Sunday
      END;
      EXIT(7);
    END;

    PROCEDURE GetLastLineNo@1100528303() : Integer;
    VAR
      SiteMngmntHoursLine@1100528300 : Record 11012361;
    BEGIN
      SiteMngmntHoursLine.SETRANGE(Year, Year);
      SiteMngmntHoursLine.SETRANGE(Week, Week);
      SiteMngmntHoursLine.SETRANGE("Supplying Company", "Supplying Company");
      SiteMngmntHoursLine.SETRANGE("Employee No.", "Employee No.");
      IF (SiteMngmntHoursLine.FINDLAST) THEN
        EXIT(SiteMngmntHoursLine."Line No.");
      EXIT(0);
    END;

    PROCEDURE GetEmployeeName@1100528304() : Text[50];
    VAR
      Employee@1100528300 : Record 5200;
    BEGIN
      IF (Employee.GET("Employee No.")) THEN
        EXIT(Employee."Full Name");
      EXIT('');
    END;

    PROCEDURE CheckProjectElement@1100525016(CheckElementValue@1100525001 : Boolean);
    VAR
      Job@1100525000 : Record 11072003;
    BEGIN
      IF (NOT CheckElementValue) THEN //called from a Web Service
        EXIT;
      IF (Type <> Type::Project) THEN
        EXIT;
      IF (NOT Job.GET("Object No.")) THEN
        EXIT;
      IF (GUIALLOWED) AND (Job."Posting Element Mandatory") AND ("Total Line" <> 0) AND (Element = '') THEN
        FIELDERROR(Element);
    END;

    LOCAL PROCEDURE IsExternalEmployee@1100528507() : Boolean;
    VAR
      Employee@1100528500 : Record 5200;
    BEGIN
      //DP010101
      IF NOT Employee.GET("Employee No.") THEN
        EXIT;

      EXIT(Employee.External);
    END;

    BEGIN
    END.
  }
}

