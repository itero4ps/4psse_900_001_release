OBJECT Table 11012366 Estimate Purchase Action
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    DataCaptionFields=Estimate No.,Estimate Description,Code,Description;
    OnInsert=VAR
               lCopyData@1100525000 : Boolean;
             BEGIN
               PurchSetup.GET;

               "Changed by" := USERID;
               "Changed on" := TODAY;

               IF (NOT (Status IN [Status::Approved, Status::Definitive])) THEN
                 "Approval Date" := 0D
               ELSE
                 "Approval Date" := TODAY;

               IF PurchActionRec.GET(Code) THEN
                 IF SilentInsert THEN
                   lCopyData := TRUE
                 ELSE
                   lCopyData := CONFIRM(Text000);
                 IF lCopyData THEN BEGIN
                   TRANSFERFIELDS(PurchActionRec,FALSE);
                   PurchActTextRec.SETRANGE("Line Type", PurchActTextRec."Line Type"::"Purchase Action");
                   PurchActTextRec.SETRANGE("No.",'');
                   PurchActTextRec.SETRANGE("Purchase Action",Code);
                   IF PurchActTextRec.FIND('-') THEN BEGIN
                     REPEAT
                       PurchActText2Rec.TRANSFERFIELDS(PurchActTextRec,TRUE);
                       PurchActText2Rec."Line Type" := PurchActText2Rec."Line Type"::"Estimate Purchase Action";
                       PurchActText2Rec."No." := "Estimate No.";
                       PurchActText2Rec.INSERT;
                     UNTIL PurchActTextRec.NEXT = 0;
                   END;

                   PurchActFeatRec.SETRANGE("Estimate No.",'');
                   PurchActFeatRec.SETRANGE("Project No.",'');
                   PurchActFeatRec.SETRANGE("Purchase Action",Code);
                   IF PurchActFeatRec.FIND('-') THEN BEGIN
                     REPEAT
                       PurchActFeat2Rec.TRANSFERFIELDS(PurchActFeatRec,TRUE);
                       PurchActFeat2Rec.Source := PurchActFeat2Rec.Source::Estimate;
                       PurchActFeat2Rec."Estimate No." := "Estimate No.";
                       PurchActFeat2Rec.INSERT;
                     UNTIL PurchActFeatRec.NEXT = 0;
                   END;
                 END;

               EstRec.GET("Estimate No.");
               "Requested Quote Receipt Date" := EstRec."Requested Quote Receipt Date";
               "Vendors React before" := EstRec."Vendors React before";

               "Amounts Only" := PurchSetup."Default Only Amounts Orders";
             END;

    OnModify=BEGIN
               "Changed by" := USERID;
               "Changed on" := TODAY;

               IF EstPurchActionRec.GET("Estimate No.", Code) THEN
                 IF (Status <> EstPurchActionRec.Status) THEN BEGIN
                   IF (NOT (Status IN [Status::Approved, Status::Definitive])) THEN
                     "Approval Date" := 0D
                   ELSE BEGIN
                     IF (Status IN [Status::Approved, Status::Definitive]) AND
                        (NOT (EstPurchActionRec.Status IN [Status::Approved, Status::Definitive]))
                     THEN
                       "Approval Date" := TODAY;
                   END;

                   UpdatePurchStatusLines;
                 END;
             END;

    OnDelete=VAR
               lvPAVendRec@1100485000 : Record 11012068;
               lvQuoteCompRec@1210190000 : Record 11012074;
             BEGIN
               EstLineRec.RESET;
               EstLineRec.SETCURRENTKEY("Estimate No.", "Purchase Action Mat.");
               EstLineRec.SETRANGE("Estimate No.","Estimate No.");
               EstLineRec.SETRANGE("Purchase Action Mat.",Code);
               IF EstLineRec.FINDFIRST THEN
                 ERROR(STRSUBSTNO(
                   Text001,
                   TABLECAPTION, EstLineRec.TABLECAPTION));

               PurchActTextRec.SETRANGE("Line Type", PurchActTextRec."Line Type"::"Estimate Purchase Action");
               PurchActTextRec.SETRANGE("No.","Estimate No.");
               PurchActTextRec.SETRANGE("Purchase Action",Code);
               PurchActTextRec.DELETEALL;

               PurchActFeatRec.SETRANGE("Estimate No.","Estimate No.");
               PurchActFeatRec.SETRANGE("Purchase Action",Code);
               PurchActFeatRec.DELETEALL;

               DocRelRec.SETRANGE(Source, DocRelRec.Source::Estimate);
               DocRelRec.SETRANGE("Estimate No.","Estimate No.");
               DocRelRec.SETRANGE("Purchase Action",Code);
               DocRelRec.DELETEALL;

               ParRec.SETRANGE(Type,ParRec.Type::EstPurchAction);
               ParRec.SETRANGE("No.","Estimate No.");
               ParRec.SETRANGE("Purchase Action",Code);
               ParRec.DELETEALL;

               lvPAVendRec.SETRANGE("Estimate No.","Estimate No.");
               lvPAVendRec.SETRANGE("Purchase Action",Code);
               lvPAVendRec.DELETEALL;

               lvQuoteCompRec.SETRANGE("Estimate No.","Estimate No.");
               lvQuoteCompRec.SETRANGE("Purchase Action",Code);
               lvQuoteCompRec.DELETEALL;
             END;

    OnRename=BEGIN
               "Changed by" := USERID;
               "Changed on" := TODAY;
             END;

    CaptionML=ENU=Estimate Purchase Action;
    LookupPageID=Page11072274;
  }
  FIELDS
  {
    { 5   ;   ;Estimate No.        ;Code20        ;TableRelation=Estimate;
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Estimate Description");
                                                              END;

                                                   CaptionML=ENU=Estimate No. }
    { 10  ;   ;Code                ;Code10        ;TableRelation="Purchase Action";
                                                   AltSearchField=Search Name;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Purchase Action;
                                                   NotBlank=Yes;
                                                   Description=Purchase Action }
    { 20  ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                IF ("Search Name" = UPPERCASE(xRec.Description)) OR ("Search Name" = '') THEN
                                                                  "Search Name" := Description;
                                                              END;

                                                   CaptionML=ENU=Description }
    { 30  ;   ;Search Name         ;Code50        ;CaptionML=ENU=Search Name }
    { 40  ;   ;Responsible Employee;Code20        ;TableRelation=Employee.No.;
                                                   CaptionML=ENU=Responsible Employee }
    { 50  ;   ;Text                ;Text250       ;CaptionML=ENU=Text }
    { 60  ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Concept,Applied,Approved,Definitive;
                                                   OptionString=Concept,Applied,Approved,Definitive }
    { 65  ;   ;Approval Date       ;Date          ;CaptionML=ENU=Approval Date;
                                                   Editable=No }
    { 70  ;   ;Changed by          ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Changed by;
                                                   Editable=No }
    { 80  ;   ;Changed on          ;Date          ;CaptionML=ENU=Changed on;
                                                   Editable=No }
    { 90  ;   ;Estimate Description;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Estimate.Description WHERE (No.=FIELD(Estimate No.)));
                                                   CaptionML=ENU=Estimate Description;
                                                   Editable=No }
    { 100 ;   ;Activate for        ;Option        ;CaptionML=ENU=Activate for;
                                                   OptionCaptionML=ENU=" ,Quote,Advice,Purchase";
                                                   OptionString=[ ,Quote,Advice,Purchase] }
    { 105 ;   ;Document Group      ;Code20        ;TableRelation="Document Group".Code;
                                                   CaptionML=ENU=Document Group }
    { 110 ;   ;Document Template   ;Code20        ;TableRelation="Document Template"."Template Code" WHERE (Type=CONST(Purchase Quote));
                                                   CaptionML=ENU=Document Template }
    { 120 ;   ;Requested Quote Receipt Date;Date  ;CaptionML=ENU=Requested Quote Receipt Date }
    { 130 ;   ;Vendors React before;Date          ;CaptionML=ENU=Vendors React before }
    { 140 ;   ;Purchase Budget     ;Decimal       ;OnValidate=BEGIN
                                                                //This was a flowfield with the following formula:
                                                                //  Sum("Estimate Line"."Cumulative Total" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                //  Purchase Action Mat.=FIELD(Code),Purchase Action Status Mat.=FILTER(>=Approved)))
                                                                // But there is a problem with indexes.
                                                                // Per Cost Type a key needed,
                                                                // results in 3 fields, which must be summed
                                                              END;

                                                   CaptionML=ENU=Purchase Budget;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 150 ;   ;Expected No. of Vendors;Integer    ;CaptionML=ENU=Expected No. of Vendors }
    { 160 ;   ;Name Employee       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Responsible Employee)));
                                                   CaptionML=ENU=Name Employee;
                                                   Editable=No }
    { 1000;   ;Document Fysical Template;BLOB     ;CaptionML=ENU=Document Fysical Template }
    { 1010;   ;Amounts Only        ;Boolean       ;CaptionML=ENU=Amounts Only }
    { 1020;   ;Cost Type           ;Option        ;CaptionML=ENU=Cost Type;
                                                   OptionCaptionML=ENU=Labor,Material,Subcontracting,Plant,Sundry;
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry }
  }
  KEYS
  {
    {    ;Estimate No.,Code                       ;Clustered=Yes }
    {    ;Responsible Employee                     }
    {    ;Status                                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@11012002 : TextConst 'ENU=Copy Standard Purchase Action ?';
      Text001@11012003 : TextConst 'ENU=A %1 attached to a %2 cannot be deleted.';
      PurchSetup@1100485009 : Record 312;
      PurchActionRec@11012000 : Record 11012025;
      EstLineRec@11012001 : Record 11072072;
      PurchActTextRec@1210190005 : Record 11012067;
      PurchActText2Rec@1210190004 : Record 11012067;
      PurchActFeatRec@1210190003 : Record 11012069;
      PurchActFeat2Rec@1210190002 : Record 11012069;
      DocRelRec@1210190006 : Record 11012071;
      ParRec@1210190007 : Record 11012072;
      RMSetup@1100485000 : Record 5079;
      Text002@1100485001 : TextConst 'ENU=The Template is empty.';
      Text003@1100485002 : TextConst 'ENU=Attachment is already in use on this machine.';
      Text004@1100485003 : TextConst 'ENU=When you have saved your document, click Yes to import the document.';
      Text005@1100485004 : TextConst 'ENU=Export Attachment';
      Text012@1100485005 : TextConst 'ENU=Doc';
      EstRec@1100485006 : Record 11012151;
      EstPurchActionRec@1100485007 : Record 11012366;
      WordAutomationCU@1100485008 : Codeunit 11012400;
      FileMgt@1100525500 : Codeunit 419;
      SilentInsert@1100525000 : Boolean;

    PROCEDURE UpdatePurchStatusLines@1();
    VAR
      EstLineRec2@11012000 : Record 11072072;
    BEGIN
      EstLineRec.RESET;
      EstLineRec.SETCURRENTKEY("Estimate No.", "Purchase Action Mat.");
      EstLineRec.SETRANGE("Estimate No.", "Estimate No.");
      EstLineRec.SETRANGE("Purchase Action Mat.", Code);
      IF EstLineRec.FINDSET(TRUE, TRUE) THEN
        REPEAT
          IF (EstLineRec."Purchase Action Status Mat." <> Status) OR
             (EstLineRec."Purch. Action Appr. Date Mat." <> "Approval Date") THEN
          BEGIN
            EstLineRec2 := EstLineRec;
            EstLineRec2."Purchase Action Status Mat." := Status;
            EstLineRec2."Purch. Action Appr. Date Mat." := "Approval Date";
            EstLineRec2.MODIFY;
          END;
        UNTIL EstLineRec.NEXT = 0;
    END;

    PROCEDURE ImportDocTemplate@5(ImportFromFile@1000 : Text[260]) : Boolean;
    VAR
      TempBlob@1100525500 : Record 99008535;
      FileName@1005 : Text[260];
      FileExtension@1100485000 : Text[250];
    BEGIN
      RMSetup.GET;

      FileName := ImportFromFile;
      IF FileName <> '' THEN BEGIN
        FileMgt.BLOBImport4PS(TempBlob, FileName, FALSE);
        "Document Fysical Template" := TempBlob.Blob;
        FileExtension := '.' + COPYSTR(UPPERCASE(FileMgt.GetExtension(FileName)),1,250);
        IF NOT WordAutomationCU.ApplicableExtension(FileExtension, FALSE, TRUE) THEN BEGIN
          CLEAR("Document Fysical Template");
          EXIT(FALSE);
        END;
       Text :=  FileExtension;
       IF MODIFY(TRUE) THEN
         EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE OpenDocTemplate@1100485000(Directory@1000 : Text[250]);
    VAR
      FileName@1004 : Text[260];
      ShortFileName@1100525000 : Text[250];
      FileExtension@1100485000 : Text[250];
    BEGIN
      CALCFIELDS("Document Fysical Template");
      IF NOT "Document Fysical Template".HASVALUE THEN
        ERROR(Text002);

      GetUniqueFilename(Directory, FileName, ShortFileName);
      IF FileMgt.ClientFileExists(FileName) THEN
        IF NOT DeleteFile(FileName) THEN
          ERROR(Text003);

      ExportDocTemplate(FileName);
      FileExtension := WordAutomationCU.DocfromDot(Text); //** doc or docx

      EditWordDocument(FileName);

      IF CONFIRM(Text004,TRUE) THEN BEGIN
        ImportDocTemplate(FileName);
        MODIFY(TRUE);
      END;

      DeleteFile(FileName);
    END;

    PROCEDURE ExportDocTemplate@2(ExportToFile@1000 : Text[260]) : Boolean;
    VAR
      TempBlob@1100525500 : Record 99008535;
      FileName@1002 : Text[260];
      FileFilter@1003 : Text[260];
      FileExtension@1100485000 : Text[250];
    BEGIN
      RMSetup.GET;
      FileExtension := WordAutomationCU.DocfromDot(Text);

      CALCFIELDS("Document Fysical Template");
      IF "Document Fysical Template".HASVALUE THEN BEGIN
        IF ExportToFile = '' THEN BEGIN
          FileFilter := FileMgt.GetToFilterText('', FileExtension);
          FileName := FileMgt.SaveFileDialog(Text005, '', FileFilter);
        END ELSE
          FileName := ExportToFile;
        IF FileName <> '' THEN BEGIN
          TempBlob.Blob := "Document Fysical Template";
          FileMgt.BLOBExport4PS(TempBlob, FileName, FALSE, FALSE);
          EXIT(TRUE);
        END ELSE
          EXIT(FALSE)
      END ELSE
        EXIT(FALSE)
    END;

    PROCEDURE GetUniqueFilename@9(Directory@1100525000 : Text[250];VAR FileName@1100525001 : Text[260];VAR ShortFileName@1100525002 : Text[250]);
    VAR
      I@1001 : Integer;
      DocNo@1002 : Text[30];
      FileExtension@1100485000 : Text[250];
    BEGIN
      FileExtension := WordAutomationCU.DocfromDot(Text);

      REPEAT
        IF I <> 0 THEN
          DocNo := FORMAT(I);
        ShortFileName := Text012 + DocNo + FileExtension;
        FileName := DELCHR(Directory, '>', '\') + '\' + ShortFileName;
        IF NOT FileMgt.ClientFileExists(FileName) THEN
          EXIT;
        I := I +1;
      UNTIL I=999;
    END;

    PROCEDURE DeleteFile@10(FileName@1001 : Text[260]) : Boolean;
    VAR
      I@1002 : Integer;
    BEGIN
      IF FileName = '' THEN
        EXIT(FALSE);

      IF NOT FileMgt.ClientFileExists(FileName) THEN
        EXIT(TRUE);

      REPEAT
        SLEEP(250);
        I := I + 1;
      UNTIL FileMgt.DeleteClientFile4PS(FileName, FALSE) OR (I = 25);
      EXIT(NOT FileMgt.ClientFileExists(FileName));
    END;

    PROCEDURE EditWordDocument@1100485001(iFileName@1100485000 : Text[250]);
    VAR
      lCduWord@1210190000 : Codeunit 11012400;
    BEGIN
      IF iFileName = '' THEN EXIT;
      CLEAR(lCduWord);
      lCduWord.Initialise;
      lCduWord.Open(FALSE,iFileName,FALSE);
      lCduWord.Display;
    END;

    PROCEDURE SetSilentInsert@1100525001(lSilentInsert@1100525000 : Boolean);
    BEGIN
      SilentInsert := lSilentInsert;
    END;

    BEGIN
    END.
  }
}

