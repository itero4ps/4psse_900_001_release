OBJECT Table 11012395 Customer Cockpit
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Customer Cockpit;
  }
  FIELDS
  {
    { 10  ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 20  ;   ;No. of Customers    ;Integer       ;FieldClass=Normal;
                                                   CaptionML=ENU=No. of Customers;
                                                   Description=Calculated;
                                                   Editable=No }
    { 30  ;   ;No. of Customers with Balance;Integer;
                                                   CaptionML=ENU=No. of Customers with Balance;
                                                   Description=Calculated;
                                                   Editable=No }
    { 35  ;   ;No. of Cust. with Balance Due;Integer;
                                                   CaptionML=ENU=No. of Customers with Balance Due;
                                                   Description=Calculated;
                                                   Editable=No }
    { 40  ;   ;No. of Open Entries ;Integer       ;FieldClass=Normal;
                                                   CaptionML=ENU=No. of Open Entries;
                                                   Description=Calculated;
                                                   Editable=No }
    { 50  ;   ;Open Balance (LCY)  ;Decimal       ;FieldClass=Normal;
                                                   CaptionML=ENU=Open Balance (LCY);
                                                   Description=Calculated;
                                                   Editable=No }
    { 60  ;   ;Average Balance (LCY);Decimal      ;CaptionML=ENU=Average Balance (LCY);
                                                   Description=Calculated;
                                                   Editable=No }
    { 65  ;   ;Average Balance (LCY) Due;Decimal  ;CaptionML=ENU=Average Balance (LCY) Due;
                                                   Description=Calculated;
                                                   Editable=No }
    { 70  ;   ;Average Days Open   ;Decimal       ;CaptionML=ENU=Average Days Open;
                                                   DecimalPlaces=1:1;
                                                   Description=Calculated;
                                                   Editable=No }
    { 75  ;   ;Average Days Open Due;Decimal      ;CaptionML=ENU=Average Days Open Due;
                                                   DecimalPlaces=1:1;
                                                   Description=Calculated;
                                                   Editable=No }
    { 80  ;   ;No. of Blocked Customers;Integer   ;CaptionML=ENU=No. of Blocked Customers;
                                                   Description=Calculated;
                                                   Editable=No }
    { 90  ;   ;No. of Entries On Hold;Integer     ;FieldClass=Normal;
                                                   CaptionML=ENU=No. of Entries On Hold;
                                                   Description=Calculated;
                                                   Editable=No }
    { 110 ;   ;No. of Open To-dos #1;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count(To-do WHERE (Action No.=CONST(1),
                                                                                  Date=FIELD(Date Filter),
                                                                                  Date Closed=FILTER(''),
                                                                                  Salesperson Code=FIELD(Salesperson Filter),
                                                                                  System To-do Type=CONST(Organizer)));
                                                   CaptionML=ENU=No. of Open To-dos #1;
                                                   Description=Description from Action table;
                                                   Editable=No }
    { 120 ;   ;No. of Open To-dos #2;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count(To-do WHERE (Action No.=CONST(2),
                                                                                  Date=FIELD(Date Filter),
                                                                                  Date Closed=FILTER(''),
                                                                                  Salesperson Code=FIELD(Salesperson Filter),
                                                                                  System To-do Type=CONST(Organizer)));
                                                   CaptionML=ENU=No. of Open To-dos #2;
                                                   Editable=No }
    { 130 ;   ;No. of Open To-dos #3;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count(To-do WHERE (Action No.=CONST(3),
                                                                                  Date=FIELD(Date Filter),
                                                                                  Date Closed=FILTER(''),
                                                                                  Salesperson Code=FIELD(Salesperson Filter),
                                                                                  System To-do Type=CONST(Organizer)));
                                                   CaptionML=ENU=No. of Open To-dos #3;
                                                   Editable=No }
    { 140 ;   ;No. of Open To-dos #4;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count(To-do WHERE (Action No.=CONST(4),
                                                                                  Date=FIELD(Date Filter),
                                                                                  Date Closed=FILTER(''),
                                                                                  Salesperson Code=FIELD(Salesperson Filter),
                                                                                  System To-do Type=CONST(Organizer)));
                                                   CaptionML=ENU=No. of Open To-dos #4;
                                                   Editable=No }
    { 150 ;   ;No. of Open To-dos #5;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count(To-do WHERE (Action No.=CONST(5),
                                                                                  Date=FIELD(Date Filter),
                                                                                  Date Closed=FILTER(''),
                                                                                  Salesperson Code=FIELD(Salesperson Filter),
                                                                                  System To-do Type=CONST(Organizer)));
                                                   CaptionML=ENU=No. of Open To-dos #5;
                                                   Editable=No }
    { 200 ;   ;Global Dimension 1 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Global Dimension 1 Filter;
                                                   CaptionClass='1,3,1' }
    { 210 ;   ;Global Dimension 2 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Global Dimension 2 Filter;
                                                   CaptionClass='1,3,2' }
    { 220 ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 230 ;   ;Salesperson Filter  ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Salesperson Filter }
    { 300 ;   ;Date Last Update    ;Date          ;CaptionML=ENU=Date Last Update;
                                                   Editable=No }
    { 320 ;   ;Update on Form-start;Boolean       ;CaptionML=ENU=Update on Form-start }
    { 330 ;   ;Reminders Updated Until;Date       ;CaptionML=ENU=Reminders updated until;
                                                   Description=Used in function Update Reminder;
                                                   Editable=No }
    { 340 ;   ;Last Reminder No.   ;Code20        ;CaptionML=ENU=Last Reminder No.;
                                                   Description=Used in function Update Reminder;
                                                   Editable=No }
    { 350 ;   ;Close Actions       ;Boolean       ;CaptionML=ENU=Close Actions when entries are closed;
                                                   Description=Actions are closed automatically when Entry is closed }
    { 360 ;   ;No. of Open Entries Due;Integer    ;FieldClass=Normal;
                                                   CaptionML=ENU=No. of Open Entries Due;
                                                   Description=Calculated;
                                                   Editable=No }
    { 370 ;   ;Open Balance Due (LCY);Decimal     ;FieldClass=Normal;
                                                   CaptionML=ENU=Open Balance Due (LCY);
                                                   Description=Calculated;
                                                   Editable=No }
    { 400 ;   ;No. of Open Entries Due Extend;Integer;
                                                   CaptionML=ENU=No. of Open Due Entries Extended;
                                                   Description=Calculated;
                                                   Editable=No }
    { 401 ;   ;Open Balance Due (LCY) Extende;Decimal;
                                                   CaptionML=ENU=Open Balance Due (LCY) Extended;
                                                   Description=Calculated;
                                                   Editable=No }
    { 402 ;   ;Average Days Open Ext.;Decimal     ;CaptionML=ENU=Average Days Open Ext.;
                                                   DecimalPlaces=1:1;
                                                   Description=Calculated;
                                                   Editable=No }
    { 403 ;   ;Average Balance Due Ext.;Decimal   ;CaptionML=ENU=Average Balance Due (LCY) Ext.;
                                                   DecimalPlaces=1:1;
                                                   Description=Calculated;
                                                   Editable=No }
    { 410 ;   ;Average Days Due    ;Decimal       ;CaptionML=ENU=Average Days Due;
                                                   DecimalPlaces=1:1;
                                                   Description=Calculated;
                                                   Editable=No }
    { 420 ;   ;Average Days Due Ext.;Decimal      ;CaptionML=ENU=Average Days Due Ext.;
                                                   DecimalPlaces=1:1;
                                                   Description=Calculated;
                                                   Editable=No }
    { 1001;   ;Use Extra Days Column;Boolean      ;CaptionML=ENU=Use Extra Days Column;
                                                   Description=1.01 }
    { 1002;   ;No. of Extra Days   ;Decimal       ;CaptionML=ENU=No. of Extra Days;
                                                   Description=1.01 }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100495000 : TextConst 'ENU=Issued reminder of level %1 on %2';
      Text002@1100495005 : TextConst 'ENU=Update Customerentries    ############1#';
      Text003@1100495004 : TextConst 'ENU=Update Customers ############1#';
      Text004@1100495003 : TextConst 'ENU=Update reminders ############1#';
      Window@1100495006 : Dialog;
      DPA_Management@1100000999 : Codeunit 11012783;

    PROCEDURE UpdateAmounts@1100528703();
    VAR
      CustLedgerEntry@1100528701 : Record 21;
      Customer@1100528702 : Record 18;
      NoOfDaysOpen@1100528703 : Integer;
      NoOfDaysDue@1100528704 : Integer;
      NoOfDaysOpenDue@1100528705 : Integer;
      NoOfDaysDueExtended@1100528707 : Integer;
      NoOfDaysOpenDueExtended@1100528706 : Integer;
    BEGIN
      Window.OPEN(Text002);

      NoOfDaysOpen := 0;
      NoOfDaysOpenDue := 0;
      NoOfDaysDue := 0;
      NoOfDaysOpenDueExtended := 0;
      NoOfDaysDueExtended := 0;

      "No. of Open Entries" := 0;
      "No. of Open Entries Due" := 0;
      "No. of Open Entries Due Extend" := 0;
      "No. of Entries On Hold" := 0;

      "Open Balance (LCY)" := 0;
      "Open Balance Due (LCY)" := 0;
      "Open Balance Due (LCY) Extende" := 0;

      "Average Balance (LCY)" := 0;
      "Average Balance (LCY) Due" := 0;
      "Average Balance Due Ext." := 0;

      "Average Days Open" := 0;
      "Average Days Open Due" := 0;
      "Average Days Open Ext." := 0;

      "Average Days Due" := 0;
      "Average Days Due Ext." := 0;

      GetCustLedgerEntryFiltered(CustLedgerEntry);
      CustLedgerEntry.DPA_SetFilters('Table 21');
      IF CustLedgerEntry.FINDSET THEN
        REPEAT
          Window.UPDATE(1, CustLedgerEntry."Entry No.");

          CustLedgerEntry.CALCFIELDS("Remaining Amt. (LCY)");

          "No. of Open Entries" := "No. of Open Entries" + 1;
          "Open Balance (LCY)" := "Open Balance (LCY)" + CustLedgerEntry."Remaining Amt. (LCY)";
          NoOfDaysOpen := NoOfDaysOpen + (GetCalcDate - CustLedgerEntry."Document Date");

          IF GetCalcDate >= CustLedgerEntry."Due Date" THEN BEGIN
            "No. of Open Entries Due" := "No. of Open Entries Due" + 1;
            "Open Balance Due (LCY)" := "Open Balance Due (LCY)" + CustLedgerEntry."Remaining Amt. (LCY)";
            NoOfDaysOpenDue := NoOfDaysOpenDue + (GetCalcDate - CustLedgerEntry."Document Date");
            NoOfDaysDue := NoOfDaysDue + (GetCalcDate - CustLedgerEntry."Due Date");
          END;

          IF GetCalcDate >= CustLedgerEntry."Due Date" + "No. of Extra Days" THEN BEGIN
            "No. of Open Entries Due Extend" := "No. of Open Entries Due Extend" + 1;
            "Open Balance Due (LCY) Extende" := "Open Balance Due (LCY) Extende" + CustLedgerEntry."Remaining Amt. (LCY)";
            NoOfDaysOpenDueExtended := NoOfDaysOpenDueExtended + (GetCalcDate - CustLedgerEntry."Document Date");
            NoOfDaysDueExtended := NoOfDaysDueExtended + (GetCalcDate - CustLedgerEntry."Due Date");
          END;

          IF CustLedgerEntry."On Hold" <> '' THEN
            "No. of Entries On Hold" := "No. of Entries On Hold" + 1;

        UNTIL CustLedgerEntry.NEXT = 0;

      IF "No. of Open Entries" <> 0 THEN BEGIN
        "Average Balance (LCY)" := "Open Balance (LCY)" / "No. of Open Entries";
        "Average Days Open" := NoOfDaysOpen / "No. of Open Entries";
      END;

      IF "No. of Open Entries Due" <> 0 THEN BEGIN
        "Average Balance (LCY) Due" := "Open Balance Due (LCY)"  / "No. of Open Entries Due";
        "Average Days Open Due" := NoOfDaysOpenDue / "No. of Open Entries Due";
        "Average Days Due" := NoOfDaysDue / "No. of Open Entries Due";
      END;

      IF "No. of Open Entries Due Extend" <> 0 THEN BEGIN
        "Average Balance Due Ext." := "Open Balance Due (LCY) Extende" / "No. of Open Entries Due Extend";
        "Average Days Open Ext." := NoOfDaysOpenDueExtended / "No. of Open Entries Due Extend";
        "Average Days Due Ext." := NoOfDaysDueExtended / "No. of Open Entries Due Extend";
      END;

      "Date Last Update" := WORKDATE;

      Window.CLOSE;

      Window.OPEN(Text003);

      "No. of Customers" := 0;
      "No. of Customers with Balance" := 0;
      "No. of Cust. with Balance Due" := 0;
      "No. of Blocked Customers" := 0;

      Customer.DPA_SetFilters('Table 18');
      IF Customer.FINDSET THEN BEGIN
        REPEAT
          Window.UPDATE(1, Customer."No.");

          Customer.SETFILTER("Date Filter", '..%1', GetCalcDate);
          Customer.CALCFIELDS("Balance (LCY)", "Balance Due (LCY)");

          "No. of Customers" := "No. of Customers" + 1;
          IF Customer."Balance (LCY)" > 0 THEN
            "No. of Customers with Balance" := "No. of Customers with Balance" + 1;
          IF Customer."Balance Due (LCY)" > 0 THEN
            "No. of Cust. with Balance Due" := "No. of Cust. with Balance Due" + 1;
          IF Customer.Blocked IN [Customer.Blocked::Ship, Customer.Blocked::Invoice, Customer.Blocked::All] THEN
            "No. of Blocked Customers" := "No. of Blocked Customers" + 1;
        UNTIL Customer.NEXT = 0;
      END;

      MODIFY;

      Window.CLOSE;

      UpdateReminders;

      IF "Close Actions" THEN
        CloseActions;

      COMMIT;
    END;

    PROCEDURE UpdateReminders@1100493000();
    VAR
      IssuedReminderHeaderRec@1100495000 : Record 297;
      IssuedReminderLineRec@1100493000 : Record 298;
      SalesCommentRec@1100493001 : Record 44;
      NextCommentline@1100493002 : Integer;
      DocTypeSalComLine@1100525000 : Option;
    BEGIN
      //**4PS.sn; hbk 12670
      Window.OPEN(Text004);
      IssuedReminderHeaderRec.SETCURRENTKEY("Posting Date");
      IF "Reminders Updated Until" <> 0D THEN
        IssuedReminderHeaderRec.SETFILTER("Posting Date",'%1..',"Reminders Updated Until");

      IssuedReminderHeaderRec.DPA_SetFilters('Table 297'); //dbeekman.n: 24058

      IF IssuedReminderHeaderRec.FINDSET THEN BEGIN
        REPEAT
          IssuedReminderLineRec.SETRANGE("Reminder No.",IssuedReminderHeaderRec."No.");
          //**4PS.sn
          //23603.so  Not the right place to do this, 'IssuedReminderLineRec' is not read yet
          //CASE IssuedReminderLineRec."Document Type" OF
          //  IssuedReminderLineRec."Document Type"::Invoice:
          //    DocTypeSalComLine := DocTypeSalComLine::"Posted Invoice";
          //  IssuedReminderLineRec."Document Type"::"Credit Memo":
          //    DocTypeSalComLine := DocTypeSalComLine::"Posted Credit Memo";
          //  IssuedReminderLineRec."Document Type"::Payment:
          //    DocTypeSalComLine := DocTypeSalComLine::Payment;
          //  IssuedReminderLineRec."Document Type"::Refund:
          //    DocTypeSalComLine := DocTypeSalComLine::Refund;
          //  ELSE
          //    EXIT;
          //END;
          //23603.eo
          //**4PS.en
          // IssuedReminderLineRec.SETRANGE("Document Type",IssuedReminderLineRec."Document Type"::Invoice); //**4PS.o
          //IssuedReminderLineRec.SETRANGE("Document Type", DocTypeSalComLine); //**4PS.n  //23603.o
          //**4PS.sn  23603
          IssuedReminderLineRec.SETFILTER("Document Type", '%1|%2|%3|%4',
            IssuedReminderLineRec."Document Type"::Invoice,
            IssuedReminderLineRec."Document Type"::"Credit Memo",
            IssuedReminderLineRec."Document Type"::Payment,
            IssuedReminderLineRec."Document Type"::Refund);
          //**4PS.en  23603
          IF IssuedReminderLineRec.FINDSET THEN BEGIN
            //**4PS.en; hbk 12670

            //**4PS.so; hbk 12670
            //IssuedReminderLineRec.RESET;
            //IF "Last Reminder No." <> '' THEN
            //  IssuedReminderLineRec.SETFILTER("Reminder No.",'%1..',"Last Reminder No.");
            //IssuedReminderLineRec.SETRANGE("Document Type",IssuedReminderLineRec."Document Type"::Invoice);
            //IF NOT IssuedReminderLineRec.FINDSET THEN
            //  EXIT;
            //Window.OPEN(Text004);
            //**4PS.eo; hbk 12670

            REPEAT
              Window.UPDATE(1,IssuedReminderLineRec."Reminder No.");
              //IssuedReminderHeaderRec.GET(IssuedReminderLineRec."Reminder No."); //**4PS.o; hbk 12670
              //**4PS.sn  23603
              CASE IssuedReminderLineRec."Document Type" OF
                IssuedReminderLineRec."Document Type"::Invoice:
                  DocTypeSalComLine := SalesCommentRec."Document Type"::"Posted Invoice";
                IssuedReminderLineRec."Document Type"::"Credit Memo":
                  DocTypeSalComLine := SalesCommentRec."Document Type"::"Posted Credit Memo";
                IssuedReminderLineRec."Document Type"::Payment:
                  DocTypeSalComLine := SalesCommentRec."Document Type"::Payment;
                IssuedReminderLineRec."Document Type"::Refund:
                  DocTypeSalComLine := SalesCommentRec."Document Type"::Refund;
              END;
              //**4PS.en  23603

              SalesCommentRec.RESET;
              //SalesCommentRec.SETRANGE("Document Type",SalesCommentRec."Document Type"::"Posted Invoice"); //**4PS.o
              SalesCommentRec.SETRANGE("Document Type", DocTypeSalComLine); //**4PS.n
              SalesCommentRec.SETRANGE("No.",IssuedReminderLineRec."Document No.");
              SalesCommentRec.SETRANGE(Date,IssuedReminderHeaderRec."Posting Date");
              IF SalesCommentRec.FINDLAST THEN BEGIN
                NextCommentline := SalesCommentRec."Line No." + 100;
                SalesCommentRec.SETFILTER(Code,'=%1',FORMAT(IssuedReminderLineRec."No. of Reminders"));
                IF NOT SalesCommentRec.FINDFIRST THEN BEGIN
                  InsertCommentline(
                    NextCommentline,
                    IssuedReminderLineRec."Document No.",
                    IssuedReminderHeaderRec."Posting Date",
                    IssuedReminderLineRec."No. of Reminders",
                    IssuedReminderHeaderRec."User ID",
                    STRSUBSTNO(Text001,IssuedReminderLineRec."No. of Reminders",IssuedReminderHeaderRec."Posting Date"),
                    DocTypeSalComLine);
                 END;
              END ELSE BEGIN // No Comment line found on the posting date of the Issued reminder
                SalesCommentRec.RESET;
                //SalesCommentRec.SETRANGE("Document Type",SalesCommentRec."Document Type"::"Posted Invoice"); //**4PS.o
                SalesCommentRec.SETRANGE("Document Type", DocTypeSalComLine); //**4PS.n
                SalesCommentRec.SETRANGE("No.",IssuedReminderLineRec."Document No.");
                SalesCommentRec.SETFILTER(Date,'..%1',CALCDATE('<-1D>',IssuedReminderHeaderRec."Posting Date"));  //db, 15-03-11
                IF SalesCommentRec.FINDLAST THEN
                  NextCommentline := SalesCommentRec."Line No." + 100
                ELSE
                  NextCommentline := 100;
                InsertCommentline(
                  NextCommentline,
                  IssuedReminderLineRec."Document No.",
                  IssuedReminderHeaderRec."Posting Date",
                  IssuedReminderLineRec."No. of Reminders",
                  IssuedReminderHeaderRec."User ID",
                  STRSUBSTNO(Text001,IssuedReminderLineRec."No. of Reminders",IssuedReminderHeaderRec."Posting Date"),
                  DocTypeSalComLine);
              END;
            UNTIL IssuedReminderLineRec.NEXT = 0;
            "Last Reminder No." := IssuedReminderHeaderRec."No.";  //**4PS.n
            "Reminders Updated Until" := IssuedReminderHeaderRec."Posting Date";  //**4PS.n
          END;
        UNTIL IssuedReminderHeaderRec.NEXT = 0; //**4PS.n; hbk 12670

        // Update Update-fields
        //"Last Reminder No." := IssuedReminderLineRec."Reminder No.";  //**4PS.o
        //"Reminders Updated Until" := IssuedReminderHeaderRec."Posting Date";  //**4PS.o
        MODIFY;
      END;

      Window.CLOSE;
    END;

    PROCEDURE InsertCommentline@1100493001(NextLineNo@1100493000 : Integer;DocNo@1100493002 : Code[20];ReminderDate@1100493003 : Date;ReminderLevel@1100493004 : Integer;UserID@1100525000 : Code[50];CommentText@1100495000 : Text[80];DocTypeSalComLine@1100525001 : Option);
    VAR
      SalesCommentRec@1100493001 : Record 44;
    BEGIN
      SalesCommentRec.SETRANGE("Document Type", SalesCommentRec."Document Type"::"Posted Invoice");
      SalesCommentRec.SETRANGE("No.", DocNo);
      SalesCommentRec.SETRANGE(Date, ReminderDate);
      IF ReminderLevel > 0 THEN
        SalesCommentRec.SETRANGE(Code, FORMAT(ReminderLevel));
      SalesCommentRec.SETRANGE(Comment, CommentText);
      IF NOT SalesCommentRec.ISEMPTY THEN
        EXIT;  //* Comment already exist
      SalesCommentRec.RESET;

      SalesCommentRec.INIT;
      //SalesCommentRec."Document Type" := SalesCommentRec."Document Type"::"Posted Invoice"; //**4PS.o
      SalesCommentRec."Document Type" := DocTypeSalComLine; //**4PS.n
      SalesCommentRec."No." := DocNo;
      SalesCommentRec."Line No." := NextLineNo;
      SalesCommentRec.Date := ReminderDate;
      IF ReminderLevel > 0 THEN
        SalesCommentRec.Code := FORMAT(ReminderLevel);
      SalesCommentRec.Comment := CommentText;
      WHILE NOT SalesCommentRec.INSERT(TRUE) DO
        SalesCommentRec."Line No." := SalesCommentRec."Line No." + 1;

      SalesCommentRec."Created by" := UserID;
      SalesCommentRec.MODIFY;
    END;

    PROCEDURE CloseActions@1100493002();
    VAR
      Todo@1100525001 : Record 5080;
      Todo2@1100525000 : Record 5080;
      CustLedgerEntry@1100528700 : Record 21;
    BEGIN
      Todo.SETCURRENTKEY("Action No.",Date,"Date Closed","Salesperson Code");
      Todo.SETRANGE("Date Closed", 0D);
      Todo.SETFILTER("Cust. Ledger Entry No.", '<>0');
      IF Todo.FINDSET(TRUE, TRUE) THEN BEGIN
        REPEAT
          CustLedgerEntry.GET(Todo."Cust. Ledger Entry No.");
          IF NOT CustLedgerEntry.Open THEN BEGIN
            Todo2 := Todo;
            Todo2."Date Closed" := WORKDATE;
            Todo2.Status := Todo2.Status::Completed;
            Todo2.Closed := TRUE;
            Todo2.MODIFY(TRUE);
          END;
        UNTIL Todo.NEXT = 0;
      END;
    END;

    PROCEDURE ResetUpdateFields@1100495000();
    BEGIN
      "Reminders Updated Until" := 0D;
      "Last Reminder No." := '';
      "Date Last Update" := 0D;
      MODIFY;
    END;

    PROCEDURE CopyGD1FltrFromCustomerDPA@1100525002();
    VAR
      i@1100525000 : Integer;
      Customer@1100525001 : Record 18;
    BEGIN
      Customer.DPA_SetFilters('Table 18');
      FOR i := 10 DOWNTO 0 DO BEGIN
        FILTERGROUP(i);
        Customer.FILTERGROUP(i);
        SETFILTER("Global Dimension 1 Filter", Customer.GETFILTER(Customer."Global Dimension 1 Code"));
      END;
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Filter"));
    END;

    PROCEDURE GetActionDescription@1100485001(ActionNo@1100528700 : Integer) : Text[80];
    VAR
      CustCockpitActions@1100528701 : Record 11012396;
    BEGIN
      IF CustCockpitActions.GET(ActionNo) THEN
        EXIT(CustCockpitActions.Description);
    END;

    PROCEDURE DrillDownNoOfCust@1100528704();
    VAR
      Customer@1100528700 : Record 18;
    BEGIN
      PAGE.RUNMODAL(22, Customer);
    END;

    PROCEDURE DrillDownNoOfCustWithBalance@1100528700();
    VAR
      Customer@1100528700 : Record 18;
    BEGIN
      Customer.RESET;
      Customer.SETFILTER("Balance (LCY)", '>%1', 0);
      PAGE.RUNMODAL(22, Customer);
    END;

    PROCEDURE DrillDownNoOfCustWithBalDue@1100528702();
    VAR
      Customer@1100528700 : Record 18;
    BEGIN
      Customer.RESET;
      Customer.SETFILTER("Date Filter", '..%1', GetCalcDate);
      Customer.SETFILTER("Balance Due (LCY)", '>%1', 0);
      PAGE.RUNMODAL(22, Customer);
    END;

    PROCEDURE DrillDownNoOfCustBlocked@1100528705();
    VAR
      Customer@1100528700 : Record 18;
    BEGIN
      Customer.SETFILTER(Blocked, '%1|%2|%3', Customer.Blocked::Ship, Customer.Blocked::Invoice, Customer.Blocked::All);
      PAGE.RUNMODAL(22, Customer);
    END;

    PROCEDURE DrillDownOpenBalance@1100485000(DueMode@1100485001 : Boolean;ExtraDueDays@1100485002 : Integer);
    VAR
      CustLedgerEntry@1100528700 : Record 21;
    BEGIN
      GetCustLedgerEntryFiltered(CustLedgerEntry);
      IF DueMode THEN
        CustLedgerEntry.SETFILTER("Due Date", '..%1', (GetCalcDate - ExtraDueDays));
      PAGE.RUNMODAL(0, CustLedgerEntry);
    END;

    PROCEDURE DrillDownNoOfOpenEntries@1100525000(DueMode@1100485001 : Boolean;ExtraDueDays@1100485002 : Integer;OnHold@1100528701 : Boolean);
    VAR
      CustLedgerEntry@1100528700 : Record 21;
      CockpitCustomerLedgerEntry@1100525000 : Page 11020376;
    BEGIN
      GetCustLedgerEntryFiltered(CustLedgerEntry);
      IF DueMode THEN
        CustLedgerEntry.SETFILTER("Due Date", '..%1', (GetCalcDate - ExtraDueDays));
      IF OnHold THEN
        CustLedgerEntry.SETFILTER("On Hold", '<>%1', '');
      CockpitCustomerLedgerEntry.SETTABLEVIEW(CustLedgerEntry);
      CockpitCustomerLedgerEntry.RUNMODAL;
    END;

    PROCEDURE DrillDownTodos@1100528701(ActionNo@1100528700 : Integer);
    VAR
      Todo@1100528701 : Record 5080;
      TodoList@1100528702 : Page 5096;
    BEGIN
      Todo.SETCURRENTKEY("Action No.",Date,"Date Closed","Salesperson Code");
      Todo.SETRANGE("Action No.", ActionNo);
      Todo.SETFILTER(Date, GETFILTER("Date Filter"));
      Todo.SETRANGE("Date Closed", 0D);
      IF GETFILTER("Salesperson Filter") <> '' THEN
        Todo.SETRANGE("Salesperson Code", GETFILTER("Salesperson Filter"));
      Todo.SETRANGE("System To-do Type", Todo."System To-do Type"::Organizer);
      TodoList.SETTABLEVIEW(Todo);
      TodoList.SetCreateTodoAllowed(FALSE);
      TodoList.RUNMODAL;
    END;

    LOCAL PROCEDURE GetCalcDate@1100528706() : Date;
    BEGIN
      IF GETFILTER("Date Filter") <> '' THEN
        EXIT(GETRANGEMAX("Date Filter"))
      ELSE
        EXIT(WORKDATE);
    END;

    LOCAL PROCEDURE GetCustLedgerEntryFiltered@1100528709(VAR CustLedgerEntry@1100528700 : Record 21);
    BEGIN
      CustLedgerEntry.RESET;
      CustLedgerEntry.SETCURRENTKEY(Open,"Due Date");
      CustLedgerEntry.SETRANGE(Open, TRUE);
      CustLedgerEntry.SETFILTER("Posting Date", '..%1', GetCalcDate);
      CustLedgerEntry.SETFILTER("Date Filter", '..%1', GetCalcDate); // Set to calc "Remaining Amt. (LCY)"
      //C008547.sn
      CustLedgerEntry.SETFILTER(
        "Document Type",
        '%1|%2|%3|%4|%5',
        CustLedgerEntry."Document Type"::" ",
        CustLedgerEntry."Document Type"::Invoice,
        CustLedgerEntry."Document Type"::"Credit Memo",
        CustLedgerEntry."Document Type"::"Finance Charge Memo",
        CustLedgerEntry."Document Type"::Reminder);
      //C008547.en
    END;

    BEGIN
    END.
  }
}

