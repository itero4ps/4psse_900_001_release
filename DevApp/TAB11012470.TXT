OBJECT Table 11012470 Tender Paragraph by Principal
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    DataCaptionFields=Project No.,Contract No.,Principal,Principal Name;
    OnInsert=BEGIN
               IF "Contract No." <> '' THEN BEGIN
                 ContractRec.GET("Project No.", "Contract No.");
                 Revision := ContractRec.Revision;
               END ELSE BEGIN
                 ProjRec.GET("Project No.");
                 Revision := ProjRec.Revision;
               END;
               SetCurrencyCode;  //DP00886
             END;

    OnModify=VAR
               TenderElementVATSpec@1100525001 : Record 11012476;
             BEGIN
               TenderElementVATSpec.SETRANGE("Project No.","Project No.");
               TenderElementVATSpec.SETRANGE(Principal,Principal);
               TenderElementVATSpec.SETRANGE("Contract No.","Contract No.");
               TenderElementVATSpec.SETRANGE("Tender Paragraph","No.");
               IF TenderElementVATSpec.FINDFIRST THEN
                 TenderElementVATSpec.CheckTotals();
             END;

    OnDelete=VAR
               lvTendElemTextRec@1100485000 : Record 11012475;
               lvVATSpecRec@1100525000 : Record 11012476;
             BEGIN
               lvTendElemTextRec.SETRANGE("Project No.", "Project No.");
               lvTendElemTextRec.SETRANGE(Principal, Principal);
               lvTendElemTextRec.SETRANGE("Contract No.", "Contract No.");
               lvTendElemTextRec.SETRANGE("Tender Paragraph", "No.");
               lvTendElemTextRec.DELETEALL;

               lvVATSpecRec.SETRANGE("Project No.", "Project No.");
               lvVATSpecRec.SETRANGE(Principal, Principal);
               lvVATSpecRec.SETRANGE("Contract No.", "Contract No.");
               lvVATSpecRec.SETRANGE("Tender Paragraph", "No.");
               lvVATSpecRec.DELETEALL;
             END;

    CaptionML=ENU=Tender Paragraph by Principal;
    LookupPageID=Page11012473;
    DrillDownPageID=Page11012473;
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=ENU=Project No.;
                                                   NotBlank=Yes }
    { 20  ;   ;Principal           ;Code20        ;TableRelation="Project Principal".Principal WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Principal }
    { 25  ;   ;Contract No.        ;Code10        ;TableRelation="Extension Contract"."Contract No." WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Extension Contract No. }
    { 30  ;   ;Tender Paragraph OLD;Code20        ;TableRelation="Tender Paragraph"."Tender Paragraph" WHERE (Type=CONST(Document),
                                                                                                              No.=FILTER(''),
                                                                                                              Purchase Action=FILTER(''),
                                                                                                              Document No.=FILTER(''));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Tender Paragraph (OLD);
                                                   Description=Expired update 4.0-004, can be deleted in 4.0-007 (JD);
                                                   Editable=No }
    { 35  ;   ;No.                 ;Text20        ;OnValidate=VAR
                                                                lvProjRec@1100485000 : Record 11072003;
                                                              BEGIN
                                                                IF ("No." <> xRec."No.") OR (Description = '') THEN BEGIN
                                                                  IF STRLEN("No.") <= MAXSTRLEN(TenderParRec."Tender Paragraph") THEN BEGIN
                                                                    IF TenderParRec.GET(TenderParRec.Type::Job,"Project No.",'','',"No.") THEN
                                                                      Description := TenderParRec.Description
                                                                    ELSE BEGIN
                                                                      IF TenderParRec.GET(TenderParRec.Type::Document,'','','',"No.") THEN
                                                                        Description := TenderParRec.Description;
                                                                    END;
                                                                  END;
                                                                END;
                                                                IF lvProjRec.GET("Project No.") THEN BEGIN
                                                                  IF lvProjRec.RAW THEN BEGIN
                                                                    CASE STRLEN("No.") OF
                                                                      1: Layout := Layout::Chapter;
                                                                      2: Layout := Layout::Paragraph;
                                                                      3: Layout := Layout::"Sub-Paragraph";
                                                                      4: Layout := Layout::"Sub-Sub-Paragraph";
                                                                      ELSE BEGIN
                                                                        Layout := Layout::Detail;
                                                                        CASE COPYSTR("No.", 1, 2) OF
                                                                          '91': Type := Type::OneTime;
                                                                          '92': Type := Type::Execution;
                                                                          '93': Type := Type::Surcharge;
                                                                          '94': Type := Type::Surcharge;
                                                                          '95': Type := Type::Estimate;
                                                                          '96': Type := Type::Contributions;
                                                                          '97', '98', '99': Type := Type::" ";
                                                                          ELSE
                                                                            Type := Type::Normal;
                                                                        END;
                                                                        IF "No." = '919990' THEN
                                                                          ERROR(Text004, "No.", TABLECAPTION);
                                                                      END;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    Type := Type::Normal;
                                                                  END;
                                                                END;
                                                                IF "Settle Excess" AND NOT ((Type = Type::" ") OR (Type = Type::Normal)) THEN
                                                                  VALIDATE("Settle Excess", FALSE);
                                                                IF CurrFieldNo <> 0 THEN
                                                                  VALIDATE(Type);  //don't do this validation during execution of xmlports, takes to much time
                                                              END;

                                                   CaptionML=ENU=Tender Paragraph;
                                                   NotBlank=Yes }
    { 40  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 50  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                RAWValidateEURParagraphs;

                                                                //negative Quantity gives problem in Installement Motivation
                                                                IF (Quantity < 0) THEN
                                                                  FIELDERROR(Quantity,Text003);

                                                                CalcRelatedFields(FIELDNO(Quantity));
                                                              END;

                                                   CaptionML=ENU=Quantity }
    { 60  ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure";
                                                   OnValidate=BEGIN
                                                                RAWValidateEURParagraphs;
                                                              END;

                                                   CaptionML=ENU=Unit of Measure }
    { 70  ;   ;Number of Points/Percentage;Decimal;OnValidate=BEGIN
                                                                CalcRelatedFields(FIELDNO("Number of Points/Percentage"));
                                                              END;

                                                   CaptionML=ENU=Number of Points/Percentage }
    { 80  ;   ;Unit Price (LCY)    ;Decimal       ;OnValidate=BEGIN
                                                                RAWValidateEURParagraphs;
                                                                CalcRelatedFields(FIELDNO("Unit Price (LCY)"));

                                                                IF NOT SkipValidateFCY THEN
                                                                  "Unit Price (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY("Unit Price (LCY)", FALSE, TRUE, "Currency Code", "Project No.", Principal, 0D);  //DP00886
                                                              END;

                                                   CaptionML=ENU=Unit Price (LCY);
                                                   Description=DP00886;
                                                   AutoFormatType=2 }
    { 81  ;   ;Unit Price (FCY)    ;Decimal       ;OnValidate=BEGIN
                                                                //DP00886
                                                                SetSkipValidateFCY(TRUE);
                                                                VALIDATE("Unit Price (LCY)", ProjectCurrencyExchangeRate.ExchangeAmtFCYToLCY("Unit Price (FCY)", FALSE, TRUE, "Currency Code", "Project No.", Principal, 0D));
                                                              END;

                                                   CaptionML=ENU=Unit Price (FCY);
                                                   Description=DP00886;
                                                   AutoFormatType=2 }
    { 90  ;   ;Total Amount (LCY)  ;Decimal       ;OnValidate=BEGIN
                                                                CalcRelatedFields(FIELDNO("Total Amount (LCY)"));
                                                                RAWValidateEURParagraphs;

                                                                IF NOT SkipValidateFCY THEN
                                                                  "Total Amount (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY("Total Amount (LCY)", FALSE, FALSE, "Currency Code", "Project No.", Principal, 0D);  //DP00886
                                                              END;

                                                   CaptionML=ENU=Total Amount (LCY);
                                                   Description=DP00886;
                                                   Editable=No }
    { 91  ;   ;Total Amount (FCY)  ;Decimal       ;OnValidate=BEGIN
                                                                //DP00886
                                                                SetSkipValidateFCY(TRUE);
                                                                VALIDATE("Total Amount (LCY)", ProjectCurrencyExchangeRate.ExchangeAmtFCYToLCY("Total Amount (FCY)", FALSE, FALSE, "Currency Code", "Project No.", Principal, 0D));
                                                              END;

                                                   CaptionML=ENU=Total Amount (FCY);
                                                   Description=DP00886;
                                                   Editable=No }
    { 95  ;   ;Element             ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                ElementFormat.FormatElem(Element,2,'');
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 100 ;   ;Total Points/Percentage;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Tender Paragraph by Principal"."Number of Points/Percentage" WHERE (Project No.=FIELD(Project No.),
                                                                                                                                        Principal=FIELD(Principal),
                                                                                                                                        Contract No.=FIELD(Contract No.)));
                                                   CaptionML=ENU=Total Points/Percentage;
                                                   Editable=No }
    { 110 ;   ;Contract Price (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Principal"."Contract Amount (LCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                         Principal=FIELD(Principal)));
                                                   CaptionML=ENU=Contract Price (LCY);
                                                   Description=DP00886;
                                                   Editable=No }
    { 111 ;   ;Contract Price (FCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Principal"."Contract Amount" WHERE (Project No.=FIELD(Project No.),
                                                                                                                   Principal=FIELD(Principal)));
                                                   CaptionML=ENU=Contract Price (FCY);
                                                   Description=DP00886;
                                                   Editable=No }
    { 120 ;   ;Total Tender Paragraphs (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Tender Paragraph by Principal"."Total Amount (LCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                               Principal=FIELD(Principal),
                                                                                                                               Contract No.=FIELD(Contract No.)));
                                                   CaptionML=ENU=Total Tender Paragraphs (LCY);
                                                   Description=DP00886;
                                                   Editable=No }
    { 121 ;   ;Total Tender Paragraphs (FCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Tender Paragraph by Principal"."Total Amount (FCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                               Principal=FIELD(Principal),
                                                                                                                               Contract No.=FIELD(Contract No.)));
                                                   CaptionML=ENU=Total Tender Paragraphs (FCY);
                                                   Description=DP00886;
                                                   Editable=No }
    { 130 ;   ;Total Quant.Points/Percentage;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Principal"."Number of Points" WHERE (Project No.=FIELD(Project No.),
                                                                                                                    Principal=FIELD(Principal)));
                                                   CaptionML=ENU=Total Quantity Points/Percentage;
                                                   Editable=No }
    { 140 ;   ;Principal Name      ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Principal)));
                                                   CaptionML=ENU=Principal Name;
                                                   Editable=No }
    { 150 ;   ;Ext. Contract Price (LCY);Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Extension Contract"."Contract Amount (LCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                          Contract No.=FIELD(Contract No.)));
                                                   CaptionML=ENU=Extension Contract Price (LCY);
                                                   Description=DP00886;
                                                   Editable=No }
    { 151 ;   ;Ext. Contract Price (FCY);Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Extension Contract"."Contract Amount" WHERE (Project No.=FIELD(Project No.),
                                                                                                                    Contract No.=FIELD(Contract No.)));
                                                   CaptionML=ENU=Extension Contract Price (FCY);
                                                   Description=DP00886;
                                                   Editable=No }
    { 160 ;   ;Ext.Cont.Tot.Quant.Points/Perc;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Extension Contract"."Number of Points" WHERE (Project No.=FIELD(Project No.),
                                                                                                                     Contract No.=FIELD(Contract No.)));
                                                   CaptionML=ENU=Total Quantity Points/Percentage Ext.;
                                                   Editable=No }
    { 170 ;   ;Revision            ;Boolean       ;CaptionML=ENU=Revision }
    { 180 ;   ;Settlement Type     ;Option        ;OnValidate=BEGIN
                                                                //validate unit price to recalculate the settlement price
                                                                VALIDATE("Unit Price (LCY)");
                                                              END;

                                                   CaptionML=ENU=Settlement Type;
                                                   OptionCaptionML=ENU=" ,Non Settling,Settling,Approved,Reduction,Open";
                                                   OptionString=[ ,Non Settling,Settling,Approved,Reduction,Open] }
    { 190 ;   ;Text                ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Tender Paragraph Text" WHERE (Project No.=FIELD(Project No.),
                                                                                                    Principal=FIELD(Principal),
                                                                                                    Contract No.=FIELD(Contract No.),
                                                                                                    Tender Paragraph=FIELD(No.)));
                                                   CaptionML=ENU=Text }
    { 200 ;   ;Settle Excess       ;Boolean       ;OnValidate=BEGIN
                                                                IF "Settle Excess" AND NOT ((Type = Type::" ") OR (Type = Type::Normal)) THEN
                                                                  ERROR(Text005, FIELDCAPTION("Settle Excess"), FIELDCAPTION(Type),  Type);

                                                                //validate unit price to recalculate the settlement price
                                                                VALIDATE("Unit Price (LCY)");
                                                              END;

                                                   CaptionML=ENU=Settle Under-/Overrun }
    { 210 ;   ;Settlement Price (LCY);Decimal     ;OnValidate=VAR
                                                                lvInstallmentMotLineRec@1100485000 : Record 11012472;
                                                                lvPRojRec@1100485002 : Record 11072003;
                                                                lvCURAW@1100485001 : Codeunit 11012164;
                                                              BEGIN
                                                                //when Settlement Price change, recalculate production on installment motivation.
                                                                IF lvPRojRec.GET("Project No.") THEN BEGIN
                                                                  IF lvPRojRec.RAW THEN BEGIN
                                                                    IF ("Settlement Price (LCY)" <> xRec."Settlement Price (LCY)") AND
                                                                       (CurrFieldNo <> 0)THEN BEGIN //last condition is there because if "Settle Excess" is turned on from the
                                                                                                    //Installment Motivation the production should not be calculated
                                                                      //recalculate amounts with new price
                                                                      lvInstallmentMotLineRec.SETRANGE("Project No.", "Project No.");
                                                                      lvInstallmentMotLineRec.SETRANGE(Principal, Principal);
                                                                      lvInstallmentMotLineRec.SETRANGE("Extension Contract", "Contract No.");
                                                                      lvInstallmentMotLineRec.SETRANGE("Tender Paragraph No.", "No.");
                                                                      IF lvInstallmentMotLineRec.FINDFIRST THEN
                                                                        REPEAT
                                                                          lvInstallmentMotLineRec.CALCFIELDS("Settlement Price (LCY)", "Unit Price (LCY)", "Settle Excess");  //DP00886
                                                                          lvCURAW.CalculateProduction(Rec, lvInstallmentMotLineRec);
                                                                          lvInstallmentMotLineRec.MODIFY;
                                                                        UNTIL lvInstallmentMotLineRec.NEXT = 0;
                                                                    END;
                                                                  END;
                                                                END;

                                                                IF NOT SkipValidateFCY THEN
                                                                  "Settlement Price (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY("Settlement Price (LCY)", FALSE, TRUE, "Currency Code", "Project No.", Principal, 0D);  //DP00886
                                                              END;

                                                   CaptionML=ENU=Settlement Price (LCY);
                                                   Description=DP00886 }
    { 211 ;   ;Settlement Price (FCY);Decimal     ;OnValidate=BEGIN
                                                                //DP00886
                                                                SetSkipValidateFCY(TRUE);
                                                                VALIDATE("Settlement Price (LCY)", ProjectCurrencyExchangeRate.ExchangeAmtFCYToLCY("Settlement Price (FCY)", FALSE, TRUE, "Currency Code", "Project No.", Principal, 0D));
                                                              END;

                                                   CaptionML=ENU=Settlement Price (FCY);
                                                   Description=DP00886 }
    { 220 ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                ProjPrinRec.GET("Project No.", Principal);
                                                                IF NOT MODIFY THEN //first write, record will be read below
                                                                  //maybe not inserted yet
                                                                  EXIT;

                                                                CalcAKPerc();
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,Normal,Surcharge,Estimate,One-time Costs,Contributions,Extra-Contract,Execution Costs";
                                                   OptionString=[ ,Normal,Surcharge,Estimate,OneTime,Contributions,Extra-Contract,Execution];
                                                   Editable=No }
    { 230 ;   ;Layout              ;Option        ;CaptionML=ENU=Layout;
                                                   OptionCaptionML=ENU=Chapter,Paragraph,Sub-Paragraph,Sub-Sub-Paragraph,Detail;
                                                   OptionString=Chapter,Paragraph,Sub-Paragraph,Sub-Sub-Paragraph,Detail }
    { 240 ;   ;Finished            ;Boolean       ;OnValidate=VAR
                                                                lvTendElemRec@1100485001 : Record 11012470;
                                                                i@1100485000 : Integer;
                                                              BEGIN
                                                                IF Finished AND NOT ((Type = Type::" ") OR (Type = Type::Normal)) THEN
                                                                  ERROR(Text005, FIELDCAPTION(Finished), FIELDCAPTION(Type),  Type);
                                                                ProjRec.GET("Project No.");
                                                                IF ProjRec.RAW AND Finished AND (Layout = Layout::Detail) THEN BEGIN
                                                                  //if needed, also set accompanying headers to Finished
                                                                  //Check on all 4 levels
                                                                  FOR i := 4 DOWNTO 1 DO BEGIN
                                                                    lvTendElemRec.SETRANGE("Project No.", "Project No.");
                                                                    lvTendElemRec.SETRANGE(Principal, Principal);
                                                                    lvTendElemRec.SETFILTER("No.", '%1&<>%2', COPYSTR("No.",1,i) + '*', "No.");
                                                                    lvTendElemRec.SETRANGE(Finished, FALSE);
                                                                    lvTendElemRec.SETRANGE(Layout, Layout::Detail);
                                                                    IF NOT lvTendElemRec.FINDFIRST THEN BEGIN
                                                                      //on this level no entries anymore not ready, set headers also to finished
                                                                      lvTendElemRec.SETRANGE(Finished);
                                                                      lvTendElemRec.SETFILTER(Layout, '<>%1', Layout::Detail);
                                                                      lvTendElemRec.SETFILTER(Type, '%1|%2', Type::Normal, Type::" ");
                                                                      IF lvTendElemRec.FINDFIRST THEN BEGIN
                                                                        REPEAT
                                                                          lvTendElemRec.Finished := TRUE;
                                                                          lvTendElemRec.MODIFY;
                                                                        UNTIL lvTendElemRec.NEXT = 0;
                                                                      END;
                                                                    END ELSE BEGIN
                                                                      EXIT;
                                                                    END;
                                                                  END;
                                                                END;
                                                                IF ProjRec.RAW AND (Layout <> Layout::Detail) THEN BEGIN
                                                                  IF CONFIRM(Text002, FALSE, "No.", Description, FIELDCAPTION(Finished), Finished) THEN BEGIN
                                                                    //set all below this header to Finished
                                                                    lvTendElemRec.SETRANGE("Project No.", "Project No.");
                                                                    lvTendElemRec.SETRANGE(Principal, Principal);
                                                                    lvTendElemRec.SETFILTER("No.", '%1&<>%2', "No." + '*', "No.");
                                                                    lvTendElemRec.SETFILTER(Type, '%1|%2', Type::Normal, Type::" ");
                                                                    IF lvTendElemRec.FINDFIRST THEN BEGIN
                                                                      REPEAT
                                                                        lvTendElemRec.Finished := Finished;
                                                                        lvTendElemRec.MODIFY;
                                                                      UNTIL lvTendElemRec.NEXT = 0;
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Finished }
    { 250 ;   ;Deviant Settlement Price;Boolean   ;CaptionML=ENU=Deviant Settlement Price }
    { 300 ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                VALIDATE("Unit Price (LCY)");  //DP00886
                                                              END;

                                                   CaptionML=ENU=Currency Code;
                                                   Description=DP00886;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Project No.,Principal,Contract No.,Tender Paragraph OLD,No.;
                                                   SumIndexFields=Total Amount (LCY),Number of Points/Percentage;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Project No.,Principal,Contract No.,Type ;SumIndexFields=Total Amount (LCY) }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ProjSetup@1210190002 : Record 315;
      TenderParRec@1210190000 : Record 11012072;
      ProjPrinRec@1210190001 : Record 11012005;
      Text000@1210190004 : TextConst 'ENU=is not filled';
      ProjRec@1100485002 : Record 11072003;
      ContractRec@1100485003 : Record 11012004;
      ElementFormat@1100485000 : Codeunit 11012022;
      ExtContractRec@1100485001 : Record 11012004;
      Text001@1100485004 : TextConst 'ENU=Standard Tender Paragraphs,Project Tender Paragraphs';
      Text002@1100485005 : TextConst 'ENU=Do you want to set the value of %3 to %4 of al Tender Paragraphs under %1 (%2)?';
      gRAWCU@1100525000 : Codeunit 11012164;
      Text003@1100525001 : TextConst 'ENU=must be positive.';
      Text004@1100525002 : TextConst 'ENU=Paragraph %1 is a subtotal and is not allowed in %2.';
      Text005@1100525003 : TextConst 'ENU=You cannot put lines on %1 if %2 is %3.';
      Text006@1100525004 : TextConst 'ENU="Note: Tender elements with %1 ''%2'' present but %3 not filled yet for %4 ''%5-%6'' "';
      SkipValidateFCY@1100525005 : Boolean;
      ProjectCurrencyExchangeRate@1100525006 : Record 11020628;

    PROCEDURE CalcRelatedFields@1210190003(IFieldNo@1210190000 : Integer);
    BEGIN
      ProjPrinRec.GET("Project No.", Principal);
      IF "Contract No." = '' THEN BEGIN
        IF ProjPrinRec."Installm.Motivation Method" = ProjPrinRec."Installm.Motivation Method"::" " THEN
          ProjPrinRec.FIELDERROR("Installm.Motivation Method",Text000);
        ProjPrinRec.TESTFIELD("Contract Amount (LCY)");
      END ELSE BEGIN
        ExtContractRec.GET("Project No.", "Contract No.");
        IF ExtContractRec."Installm.Motivation Method" = ExtContractRec."Installm.Motivation Method"::" " THEN
          ExtContractRec.FIELDERROR("Installm.Motivation Method",Text000);
        ExtContractRec.TESTFIELD("Contract Amount (LCY)");
      END;

      CASE IFieldNo OF
        FIELDNO(Quantity):
          BEGIN
            IF (Quantity <> 0) AND ("Total Amount (LCY)" <> 0) AND ("Unit Price (LCY)" = 0) AND
               (
                (("Contract No." = '') AND
                 (
                  (ProjPrinRec."Installm.Motivation Method" = ProjPrinRec."Installm.Motivation Method"::Points) OR
                  (ProjPrinRec."Installm.Motivation Method" = ProjPrinRec."Installm.Motivation Method"::Percentages)
                 )
                ) OR
                (("Contract No." <> '') AND
                 (
                  (ExtContractRec."Installm.Motivation Method" = ExtContractRec."Installm.Motivation Method"::Points) OR
                  (ExtContractRec."Installm.Motivation Method" = ExtContractRec."Installm.Motivation Method"::Percentages)
                 )
                )
               ) THEN
              CalcUnitPrice()
            ELSE BEGIN
              CalcTotalAmount1();
              CalcPointsPercentage();
            END;
          END;
        FIELDNO("Unit Price (LCY)"):
          BEGIN
            CalcTotalAmount1();
            CalcPointsPercentage();
            CalcSettlementPrice();
          END;
        FIELDNO("Total Amount (LCY)"):
          BEGIN
            CalcUnitPrice();
            CalcPointsPercentage();
            CalcRaisePerc(TRUE, ProjPrinRec."Fictitious Amount Open (LCY)");  //C001959.c (Parameters added)
            CalcAKPerc();
          END;
        FIELDNO("Number of Points/Percentage"):
          BEGIN
            CalcTotalAmount2();
            CalcUnitPrice();
          END;
      END;
    END;

    PROCEDURE CalcUnitPrice@1210190000();
    BEGIN
      IF Quantity <> 0 THEN
        "Unit Price (LCY)" := ROUND("Total Amount (LCY)" / Quantity)
      ELSE
        "Unit Price (LCY)" := 0;
      "Unit Price (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY("Unit Price (LCY)", FALSE, TRUE, "Currency Code", "Project No.", Principal, 0D);  //DP00886
    END;

    PROCEDURE CalcTotalAmount1@1210190001();
    BEGIN
      IF "Contract No." = '' THEN BEGIN
        CASE ProjPrinRec."Installm.Motivation Method" OF
          ProjPrinRec."Installm.Motivation Method"::Points,
          ProjPrinRec."Installm.Motivation Method"::Percentages:
            BEGIN
              IF Quantity = 0 THEN
                "Unit Price (LCY)" := 0;
              IF (Quantity <> 0) AND ("Unit Price (LCY)" <> 0) THEN
                "Total Amount (LCY)" := ROUND(Quantity * "Unit Price (LCY)");
            END;
          ProjPrinRec."Installm.Motivation Method"::"Element Quantity":
            "Total Amount (LCY)" := ROUND(Quantity * "Unit Price (LCY)");
        END;
      END ELSE BEGIN
        CASE ExtContractRec."Installm.Motivation Method" OF
          ExtContractRec."Installm.Motivation Method"::Points,
          ExtContractRec."Installm.Motivation Method"::Percentages:
            BEGIN
              IF Quantity = 0 THEN
                "Unit Price (LCY)" := 0;
              IF (Quantity <> 0) AND ("Unit Price (LCY)" <> 0) THEN
                "Total Amount (LCY)" := ROUND(Quantity * "Unit Price (LCY)");
            END;
          ExtContractRec."Installm.Motivation Method"::"Element Quantity":
            "Total Amount (LCY)" := ROUND(Quantity * "Unit Price (LCY)");
        END;
      END;
      IF "Unit Price (LCY)" = 0 THEN "Unit Price (FCY)" := 0;  //DP00886
      "Total Amount (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY("Total Amount (LCY)", FALSE, FALSE, "Currency Code", "Project No.", Principal, 0D);  //DP00886
      CalcRaisePerc(TRUE, ProjPrinRec."Fictitious Amount Open (LCY)");  //C001959.c (Parameters added)
      CalcAKPerc();
    END;

    PROCEDURE CalcTotalAmount2@1210190002();
    BEGIN
      IF "Contract No." = '' THEN BEGIN
        CASE ProjPrinRec."Installm.Motivation Method" OF
          ProjPrinRec."Installm.Motivation Method"::Points:
            BEGIN
              ProjPrinRec.TESTFIELD("Number of Points");
              "Total Amount (LCY)" :=
                  ROUND(("Number of Points/Percentage" / ProjPrinRec."Number of Points") * ProjPrinRec."Contract Amount (LCY)");
            END;
          ProjPrinRec."Installm.Motivation Method"::Percentages:
            "Total Amount (LCY)" := ROUND(("Number of Points/Percentage" / 100) * ProjPrinRec."Contract Amount (LCY)");
        END;
      END ELSE BEGIN
        CASE ExtContractRec."Installm.Motivation Method" OF
          ExtContractRec."Installm.Motivation Method"::Points:
            BEGIN
              ExtContractRec.TESTFIELD("Number of Points");
              "Total Amount (LCY)" :=
                  ROUND(("Number of Points/Percentage" / ExtContractRec."Number of Points") * ExtContractRec."Contract Amount (LCY)");
            END;
          ExtContractRec."Installm.Motivation Method"::Percentages:
            "Total Amount (LCY)" := ROUND(("Number of Points/Percentage" / 100) * ExtContractRec."Contract Amount (LCY)");
        END;
      END;
      "Total Amount (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY("Total Amount (LCY)", FALSE, TRUE, "Currency Code", "Project No.", Principal, 0D);  //DP00886
      CalcRaisePerc(TRUE, ProjPrinRec."Fictitious Amount Open (LCY)");  //C001959.c (Parameters added)
      CalcAKPerc();
    END;

    PROCEDURE CalcPointsPercentage@1210190004();
    BEGIN
      IF "Contract No." = '' THEN BEGIN
        CASE ProjPrinRec."Installm.Motivation Method" OF
          ProjPrinRec."Installm.Motivation Method"::Points:
            BEGIN
              ProjPrinRec.TESTFIELD("Contract Amount (LCY)");
              "Number of Points/Percentage" :=
                  ROUND(("Total Amount (LCY)" / ProjPrinRec."Contract Amount (LCY)") * ProjPrinRec."Number of Points");
            END;
          ProjPrinRec."Installm.Motivation Method"::Percentages:
            BEGIN
              ProjPrinRec.TESTFIELD("Contract Amount (LCY)");
              "Number of Points/Percentage" := ROUND(("Total Amount (LCY)" / ProjPrinRec."Contract Amount (LCY)") * 100);
            END;
        END;
      END ELSE BEGIN
        CASE ExtContractRec."Installm.Motivation Method" OF
          ExtContractRec."Installm.Motivation Method"::Points:
            BEGIN
              ExtContractRec.TESTFIELD("Contract Amount (LCY)");
              "Number of Points/Percentage" :=
                  ROUND(("Total Amount (LCY)" / ExtContractRec."Contract Amount (LCY)") * ExtContractRec."Number of Points");
            END;
          ExtContractRec."Installm.Motivation Method"::Percentages:
            BEGIN
              ExtContractRec.TESTFIELD("Contract Amount (LCY)");
              "Number of Points/Percentage" := ROUND(("Total Amount (LCY)" / ExtContractRec."Contract Amount (LCY)") * 100);
            END;
        END;
      END;
    END;

    PROCEDURE CalcSettlementPrice@1100485001();
    VAR
      lvProjPrinRec@1100485000 : Record 11012005;
      lvProjRec@1100485001 : Record 11072003;
    BEGIN
      IF lvProjRec.GET("Project No.") THEN BEGIN
        IF NOT lvProjRec.RAW THEN BEGIN
          EXIT;
        END;
      END;

      //Attention: same calucation exists in CU RAW Calculations (function CalculateSettlementPrices)
      IF "Deviant Settlement Price" THEN
        //do not update manually changed settlement price
        EXIT;
      IF (("Settlement Type" = "Settlement Type"::Settling) OR
          (("Settlement Type" = "Settlement Type"::"Non Settling") AND "Settle Excess")) THEN BEGIN
         //IF (lvTendElemRec."Unit of Measure" = 'EUR') THEN BEGIN  //**4PS.so call C-027200
         //  VALIDATE("Settlement Price", 1);
         //END ELSE BEGIN                                           //**4PS.eo call C-027200
          IF lvProjPrinRec.GET("Project No.", Principal) THEN
            VALIDATE("Settlement Price (LCY)", ROUND("Unit Price (LCY)" * (lvProjPrinRec."Raise % Settlement Price"/100 + 1), 0.01));
         //END;
      END ELSE IF ("Settlement Type" = "Settlement Type"::Open) THEN BEGIN
          VALIDATE("Settlement Price (LCY)", "Unit Price (LCY)");
      END ELSE BEGIN
          VALIDATE("Settlement Price (LCY)", 0);
      END;
    END;

    PROCEDURE CalcRaisePerc@1100485002(WithUpdate@1100525000 : Boolean;FictAmt@1100525001 : Decimal) : Decimal;
    VAR
      lvTenderElemRec@1100485000 : Record 11012470;
      lvProjRec@1100485004 : Record 11072003;
      lvTotalAmountSurcharge@1100485001 : Decimal;
      lvTotalAmount@1100485003 : Decimal;
      lvRaisePerc@1210190000 : Decimal;
    BEGIN
      //Pre: ProjPrinRec already current
      //Update "Raise % Settlement Price", should be equal to percentage of
      //profit and risk part of total. RAW Standard 01.03.03 sub 01

      IF lvProjRec.GET("Project No.") THEN BEGIN
        IF NOT lvProjRec.RAW THEN BEGIN
          EXIT;
        END;
      END;

      //first write, record will be read below and in lvProjPrinRec.VALIDATE("Raise % Settlement Price", updated
      IF NOT MODIFY THEN
        //is maybe not inserted yet
        EXIT;
      lvTotalAmountSurcharge := 0;
      lvTotalAmount := 0;
      //mg.sc, 01-09-11: M28896
      lvTenderElemRec.SETCURRENTKEY("Project No.", Principal, "Contract No.", Type);
      lvTenderElemRec.SETRANGE("Project No.", "Project No.");
      lvTenderElemRec.SETRANGE(Principal, Principal);
      lvTenderElemRec.SETFILTER("Contract No.", "Contract No.");
      lvTenderElemRec.SETFILTER(Type, '%1', lvTenderElemRec.Type::Surcharge);
      //IF lvTenderElemRec.FINDFIRST THEN BEGIN
      //  REPEAT
      //    lvTotalAmountSurcharge += lvTenderElemRec."Total Amount";
      //  UNTIL lvTenderElemRec.NEXT = 0;
      //END;
      lvTenderElemRec.CALCSUMS("Total Amount (LCY)");
      lvTotalAmountSurcharge := lvTenderElemRec."Total Amount (LCY)";
      //mg.ec, 01-09-11: M28896

      lvTenderElemRec.SETFILTER(Type, '%1', lvTenderElemRec.Type::Normal);
      //mg.sc, 01-09-11: M28896
      //IF lvTenderElemRec.FINDFIRST THEN BEGIN
      //  REPEAT
      //    lvTotalAmount += lvTenderElemRec."Total Amount";
      //  UNTIL lvTenderElemRec.NEXT = 0;
        lvTenderElemRec.CALCSUMS("Total Amount (LCY)");
        lvTotalAmount := lvTenderElemRec."Total Amount (LCY)";
        IF "Contract No." = '' THEN  //C001959.n
          lvTotalAmount := lvTotalAmount + FictAmt;  //C001959.n
        IF (lvTotalAmount <> 0) THEN BEGIN
          lvRaisePerc := ROUND(100 * lvTotalAmountSurcharge/lvTotalAmount, 0.1);
          //IF ProjPrinRec."Raise % Settlement Price" <> lvRaisePerc THEN BEGIN  //C001959.o
          IF (ProjPrinRec."Raise % Settlement Price" <> lvRaisePerc) AND WithUpdate THEN BEGIN  //C001959.n
            ProjPrinRec.VALIDATE("Raise % Settlement Price", lvRaisePerc);
            ProjPrinRec.MODIFY;
          END;
        END;
      //END;
      //mg.ec, 01-09-11: M28896

      EXIT(lvRaisePerc);  //C001959.n
    END;

    PROCEDURE CalcAKPerc@1100525000();
    VAR
      lvProjRec@1100525000 : Record 11072003;
    BEGIN
      //Pre: - record is already written in database (in 2 cases in CalcRaisPerc)
      //     - ProjPrinRec already current

      IF lvProjRec.GET("Project No.") THEN BEGIN
        IF NOT lvProjRec.RAW THEN BEGIN
          EXIT;
        END;
      END;

      gRAWCU.CalculateAKPerc("Project No.", Principal,ProjPrinRec."Surcharge %");
      ProjPrinRec.MODIFY;
    END;

    PROCEDURE LookupTenderParagraph@1100485000();
    VAR
      lvParRec@1100485004 : Record 11012072;
      lvProjParRec@1100485003 : Record 11012072;
      lvParFrm@1100485002 : Page 11012132;
      lvProjParFrm@1100485001 : Page 11020346;
      lvProjLevel@1100485000 : Boolean;
    BEGIN
      lvProjLevel := FALSE;
      lvProjParRec.SETRANGE(Type, lvProjParRec.Type::Job);
      lvProjParRec.SETRANGE("No.", "Project No.");
      IF lvProjParRec.FINDFIRST THEN BEGIN
        CASE STRMENU(Text001, 2) OF
          0: EXIT;
          2: lvProjLevel := TRUE;
        END;
      END;

      lvParRec.Type := lvParRec.Type::Document;
      lvParRec."No." := '';
      lvParRec."Purchase Action" := '';
      lvParRec."Document No." := '';
      IF STRLEN("No.") <= MAXSTRLEN(TenderParRec."Tender Paragraph") THEN
        lvParRec."Tender Paragraph" := "No.";
      IF NOT lvProjLevel THEN BEGIN
        lvParFrm.SETRECORD(lvParRec);
        lvParFrm.LOOKUPMODE(TRUE);
        IF lvParFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          lvParFrm.GETRECORD(lvParRec);
          VALIDATE("No.",lvParRec."Tender Paragraph");
        END;
      END ELSE BEGIN
        lvParRec.SETRANGE("No.", "Project No.");
        lvProjParFrm.SETTABLEVIEW(lvParRec);
        lvParRec.Type := lvParRec.Type::Job;
        lvParRec."No." := "Project No.";
        lvProjParFrm.SETRECORD(lvParRec);
        lvProjParFrm.LOOKUPMODE(TRUE);
        IF lvProjParFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          lvProjParFrm.GETRECORD(lvParRec);
          VALIDATE("No.",lvParRec."Tender Paragraph");
        END;
      END;
    END;

    PROCEDURE RAWValidateEURParagraphs@1100525001();
    VAR
      lvProjRec@1100525001 : Record 11072003;
      lvDummyDec@1100525000 : Decimal;
    BEGIN
      IF lvProjRec.GET("Project No.") THEN BEGIN
        IF lvProjRec.RAW THEN BEGIN
          IF ("Unit of Measure" = EUR()) THEN BEGIN
            IF (Quantity = 1) THEN BEGIN
              IF "Unit Price (LCY)" >= 0 THEN  BEGIN
                //1 EUR 20   -> 20 EUR 1
                //1 EUR 0    -> 0  EUR 1
                lvDummyDec := Quantity;
                Quantity := "Unit Price (LCY)";
                "Unit Price (LCY)" := lvDummyDec;
              END ELSE BEGIN;
                //1 EUR -20   -> 20 EUR -1
                lvDummyDec := Quantity;
                Quantity := -1 * "Unit Price (LCY)";
                "Unit Price (LCY)" := -1 * lvDummyDec;
              END;
            END;
            IF (Quantity < 0)  THEN BEGIN
              //-1 EUR 20   -> 20 EUR -1
              //-300 EUR 1 -> 300 EUR 1
              Quantity := -1 * Quantity;
              "Unit Price (LCY)" := -1 * "Unit Price (LCY)";
            END;
          END;
        END;
      END;
    END;

    PROCEDURE EUR@1100525002() : Code[10];
    BEGIN
      //In RAW the euro paragraphs have a special meaning. Therefore this code must be checked
      EXIT('EUR');
    END;

    PROCEDURE FillDefaultSettleExcess@1210190005();
    BEGIN
      //C-026862.n
      IF ProjRec.GET("Project No.") THEN BEGIN
        IF ProjRec.RAW THEN
          EXIT;
      END;
      ProjSetup.GET;
      "Settle Excess" := ProjSetup."Def. Settle Excess(Tender Par)";
    END;

    PROCEDURE CheckFictAmtFilledForOpen@1100525003();
    VAR
      ProjPrin@1100525001 : Record 11012005;
      TenderElem@1100525000 : Record 11012470;
    BEGIN
      //C001959
      IF ProjPrin.GET("Project No.", Principal) THEN BEGIN
        IF ProjPrin."Fictitious Amount Open (LCY)" = 0 THEN BEGIN
          TenderElem.SETRANGE("Project No.", "Project No.");
          TenderElem.SETRANGE(Principal, Principal);
          TenderElem.SETRANGE("Settlement Type", TenderElem."Settlement Type"::Open);
          IF TenderElem.FINDFIRST THEN
            MESSAGE(Text006,
              TenderElem.FIELDCAPTION("Settlement Type"), TenderElem."Settlement Type",
              ProjPrin.FIELDCAPTION("Fictitious Amount Open (LCY)"), ProjPrin.TABLECAPTION, "Project No.", Principal);
        END;
      END;
    END;

    PROCEDURE SetSkipValidateFCY@1100528603(ISkipValidateFCY@1100528600 : Boolean);
    BEGIN
      //DP00886
      SkipValidateFCY := ISkipValidateFCY;
    END;

    LOCAL PROCEDURE SetCurrencyCode@1100525004();
    VAR
      ProjectPrincipal@1100525000 : Record 11012005;
      Job@1100525001 : Record 11072003;
    BEGIN
      //DP00886
      IF ProjectPrincipal.GET("Project No.", Principal) THEN BEGIN
        "Currency Code" := ProjectPrincipal."Currency Code";
      END ELSE BEGIN
        Job.GET("Project No.");
        "Currency Code" := Job."Currency Code";
      END;
    END;

    BEGIN
    END.
  }
}

