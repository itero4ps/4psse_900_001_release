OBJECT Table 11012551 Plant Type
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Description;
    OnInsert=BEGIN
               PlantSetup.GET;
               IF Code = '' THEN BEGIN
                 //PlantSetup.TESTFIELD("Plant Type Nos.");
                 IF PlantSetup."Plant Type Nos." <> '' THEN
                   NoSeriesMgt.InitSeries(PlantSetup."Plant Type Nos.",xRec."No. Series",0D,Code,"No. Series");
               END;
               TESTFIELD(Code);
               "Gen. Prod. Posting Group" := PlantSetup."Default Prod.Posting Gr. Plant";
               "VAT Prod. Posting Group" := PlantSetup."Default VAT-Prod.Post.Gr.Plant";
               "Posting Group Internal" := PlantSetup."Default Posting Group Plant In";
               "Posting Group External" := PlantSetup."Default Posting Group Plant Ex";
               IF "Rental Type" = "Rental Type"::Rental THEN
                 "Integration Fixed Assets" := PlantSetup."Integration Fixed Assets"
               ELSE
                 "Integration Fixed Assets" := FALSE;
               "Minimum Number of Rental Days" := PlantSetup."Minimum Number of Rental Days";  //* 22447

               FillGroupLevels;
               CheckWritePlantUnit();

               IF "Department Code" <> '' THEN BEGIN
                 ValidateShortcutDimCode(1,"Department Code");
               END;
               DimMgt.UpdateDefaultDim(
                 DATABASE::"Plant Type",Code,
                 "Department Code","Cost Object");
               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05
             END;

    OnModify=VAR
               XPlantType@1100529001 : Record 11012551;
             BEGIN
               XPlantType.GET(Code);
               IF ("Unit of Measure" <> XPlantType."Unit of Measure") THEN BEGIN
                 CheckWritePlantUnit();
                 UpdatePlantOrderUnitOfMeasure();  //DP00690
               END;
               UpdDepartmentCodeInspections();  //DP00241.n (26914)
             END;

    OnDelete=VAR
               lvPlantNoRec@11012000 : Record 11012552;
               lvRentalRateRec@1100485007 : Record 11012567;
               lvPlantProfileAnswerRec@1210190000 : Record 11012582;
               PlantCostLinePrice@1100529000 : Record 11072664;
               lvPlantCostLineRec@1100485000 : Record 11012591;
               lvPlantVendRec@1100485001 : Record 11012596;
               lvPlantUnitOfMeasureRec@1100485002 : Record 11012599;
               lvLocRentalRateRec@1100485003 : Record 11012583;
               lvCustRentalRateRec@1100485005 : Record 11012541;
               lvRentDiscRec@1100485009 : Record 11012544;
               RentalQuantityDiscount@1100528800 : Record 11072669;
               lvPlantTransRec@1100485006 : Record 11012542;
               lvPlantStandardItemRec@1100485008 : Record 11020519;
               lvPlantTypeInspTypeRec@1100525000 : Record 11012563;
               lvPlantTypeDeprBookRec@1100530000 : Record 11012658;
               PlantTypeTechSpecTransl@1100528700 : Record 11012660;
               WebsitePerPlantType@1100528701 : Record 11012662;
             BEGIN
               IF Code = '' THEN
                 EXIT;

               lvPlantNoRec.RESET;
               lvPlantNoRec.SETRANGE("Plant Type",Code);
               //lvPlantNoRec.DELETEALL(TRUE);   Not delete, one must first consciously remove all numbers of type.
               IF lvPlantNoRec.FINDFIRST THEN
                 ERROR(Text002);

               CheckDeleteAllowed(Rec);

               lvRentalRateRec.RESET;
               lvRentalRateRec.SETRANGE("Plant Type",Code);
               lvRentalRateRec.DELETEALL(TRUE);

               lvPlantProfileAnswerRec.SETRANGE("Plant Type",Code);
               lvPlantProfileAnswerRec.SETRANGE("Plant No.",'');
               lvPlantProfileAnswerRec.DELETEALL;

               //DP00241 (16930)
               PlantCostLinePrice.SETRANGE("Cost Level", PlantCostLinePrice."Cost Level"::Plant);
               PlantCostLinePrice.SETRANGE(Code, Code);
               PlantCostLinePrice.DELETEALL;

               lvPlantCostLineRec.SETRANGE("Cost Level", lvPlantCostLineRec."Cost Level"::PlantType);  //DP00671
               lvPlantCostLineRec.SETRANGE(Code,Code);
               lvPlantCostLineRec.DELETEALL;

               lvPlantVendRec.SETRANGE("Plant Type",Code);
               lvPlantVendRec.DELETEALL(TRUE);

               lvPlantUnitOfMeasureRec.SETRANGE("Plant Type",Code);
               lvPlantUnitOfMeasureRec.DELETEALL;

               lvLocRentalRateRec.SETRANGE("Plant Type",Code);
               lvLocRentalRateRec.DELETEALL;

               lvCustRentalRateRec.SETRANGE("Plant Type",Code);
               lvCustRentalRateRec.DELETEALL;

               lvRentDiscRec.SETRANGE("Plant Type", Code);
               lvRentDiscRec.DELETEALL;

               RentalQuantityDiscount.SETRANGE("Plant Type", Code);
               RentalQuantityDiscount.DELETEALL;

               //DP00183.sc
               DeleteDocumentLinks();
               DeleteCommentLines();
               //DP00183.ec

               lvPlantTransRec.SETRANGE(Type,lvPlantTransRec.Type::PlantType);  //DP00241.n (27089)
               lvPlantTransRec.SETRANGE(Code,Code);
               lvPlantTransRec.DELETEALL;

               lvPlantStandardItemRec.SETRANGE("Plant Type",Code);
               lvPlantStandardItemRec.DELETEALL;

               lvPlantTypeInspTypeRec.SETRANGE("Plant Type",Code);
               lvPlantTypeInspTypeRec.DELETEALL;

               lvPlantTypeDeprBookRec.SETRANGE("Plant Type",Code);
               lvPlantTypeDeprBookRec.DELETEALL;

               // jhoek.210211.begin
               PlantTypeTechSpecTransl.SETRANGE("Plant Type Code", Code);
               PlantTypeTechSpecTransl.DELETEALL;
               // jhoek.210211.end

               // jhoek.280211.begin
               WebsitePerPlantType.SETRANGE("Plant Type Code", Code);
               WebsitePerPlantType.DELETEALL;
               // jhoek.280211.end

               DimMgt.DeleteDefaultDim(DATABASE::"Plant Type",Code);
             END;

    OnRename=VAR
               lvPlantNoRec@1100525000 : Record 11012552;
               PlantNumber2@1100529000 : Record 11012552;
             BEGIN
               FillGroupLevels;

               //* There is no TableRelation for dimensions on Plant Number level, so must be moved (copy to new/delete old)
               lvPlantNoRec.RESET;
               lvPlantNoRec.SETRANGE("Plant Type",xRec.Code);
               IF lvPlantNoRec.FINDSET THEN BEGIN
                 REPEAT
                   DimMgt.CopyDefaultDim(
                     DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo(xRec.Code,lvPlantNoRec."No."),
                     DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo(Code,lvPlantNoRec."No."));
                   DimMgt.DeleteDefaultDim(DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo(xRec.Code,lvPlantNoRec."No."));
                   //DP00183.sn
                   PlantNumber2 := lvPlantNoRec;
                   PlantNumber2."Plant Type" := Code;
                   lvPlantNoRec.MoveDocumentLinks(lvPlantNoRec, PlantNumber2, FALSE);
                   //DP00183.en
                 UNTIL lvPlantNoRec.NEXT = 0;
               END;
               MoveDocumentLinks(xRec, Rec, FALSE); //DP00183.n
             END;

    CaptionML=ENU=Plant Type;
    LookupPageID=Page11012552;
    DrillDownPageID=Page11012552;
  }
  FIELDS
  {
    { 10  ;   ;Code                ;Code20        ;AltSearchField=Search Name;
                                                   OnValidate=BEGIN
                                                                IF Code <> xRec.Code THEN BEGIN
                                                                  PlantSetup.GET;
                                                                  IF PlantSetup."Plant Type Nos." <> '' THEN
                                                                    NoSeriesMgt.TestManual(PlantSetup."Plant Type Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Code }
    { 15  ;   ;Search Name         ;Code50        ;CaptionML=ENU=Search Name }
    { 20  ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                IF ("Search Name" = UPPERCASE(xRec.Description)) OR ("Search Name" = '') THEN
                                                                  "Search Name" := Description;

                                                                PlantNoRec.RESET;
                                                                PlantNoRec.SETRANGE("Plant Type",Code);
                                                                PlantNoRec.SETRANGE(Description,xRec.Description);
                                                                PlantNoRec.MODIFYALL(Description,Description);
                                                              END;

                                                   CaptionML=ENU=Description }
    { 30  ;   ;Bulk                ;Boolean       ;OnValidate=BEGIN
                                                                ModifyBulkAllowed();
                                                                UpdateExternalOnPlantNoLevel();
                                                                IF Bulk THEN
                                                                  "Meter Reading" := FALSE;
                                                              END;

                                                   CaptionML=ENU=Bulk }
    { 40  ;   ;Weight              ;Decimal       ;CaptionML=ENU=Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 41  ;   ;Count Weight in Load/Unload TO;Boolean;
                                                   OnValidate=BEGIN
                                                                IF "Count Weight in Load/Unload TO" THEN BEGIN
                                                                  PlantSetup.GET;
                                                                  PlantSetup.TESTFIELD("Transport Orders", TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Count Weight in Load/Unload Cost (Transport Order) }
    { 50  ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure";
                                                   OnValidate=BEGIN
                                                                IF PlantUnitRec.GET(Code, "Unit of Measure") THEN
                                                                  PlantUnitRec.TESTFIELD("Qty. per Unit of Measure", 1);
                                                              END;

                                                   CaptionML=ENU=Unit of Measure;
                                                   NotBlank=Yes }
    { 55  ;   ;Rate Unit of Measure;Code10        ;TableRelation="Plant Unit of Measure".Code WHERE (Plant Type=FIELD(Code));
                                                   OnValidate=VAR
                                                                lvRateRec@1100485001 : Record 11012567;
                                                                lvLocRateRec@1100485002 : Record 11012583;
                                                                lvLicensePlantExtendedCU@1100485000 : Codeunit 11012579;
                                                              BEGIN
                                                                //* Only allowed in plant extended. There is no (new) table for this functionality in plant extended,
                                                                //* for that reason a test on a random table of plant extended.
                                                                //* Chosen for table Plant-Items (T11020519), for users that must work with this, the read permission of this table
                                                                //* should be at least 'Indirect'.
                                                                IF ("Rate Unit of Measure" <> '') THEN BEGIN
                                                                  IF NOT lvLicensePlantExtendedCU.LicenseTablePlantItem(FALSE,0) THEN
                                                                    ERROR(Text000);
                                                                END;

                                                                IF ("Rate Unit of Measure" <> xRec."Rate Unit of Measure") THEN BEGIN
                                                                  lvRateRec.SETRANGE("Rental Type", lvRateRec."Rental Type"::Rental);
                                                                  lvRateRec.SETRANGE("Plant Type", Code);
                                                                  IF lvRateRec.FIND('-') THEN
                                                                    MESSAGE(Text001, FIELDCAPTION("Rate Unit of Measure"))
                                                                  ELSE BEGIN
                                                                    lvLocRateRec.SETRANGE("Rental Type", lvLocRateRec."Rental Type"::Rental);
                                                                    lvLocRateRec.SETRANGE("Plant Type", Code);
                                                                    IF lvLocRateRec.FIND('-') THEN
                                                                      MESSAGE(Text001, FIELDCAPTION("Rate Unit of Measure"));
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Rental Rate Unit of Measure }
    { 70  ;   ;Current Price       ;Decimal       ;CaptionML=ENU=Current Price;
                                                   MinValue=0;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 80  ;   ;No. of Depreciation Years;Decimal  ;CaptionML=ENU=No. of Depreciation Years;
                                                   DecimalPlaces=2:8;
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 90  ;   ;Picture             ;BLOB          ;CaptionML=ENU=Picture;
                                                   SubType=Bitmap }
    { 100 ;   ;Technical Specifications;Text250   ;CaptionML=ENU=Technical Specifications }
    { 105 ;   ;Plant Category      ;Code10        ;TableRelation="Plant Category";
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Plant Category Description");
                                                              END;

                                                   CaptionML=ENU=Plant Category }
    { 106 ;   ;Plant Category Description;Text30  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Category".Description WHERE (Code=FIELD(Plant Category)));
                                                   CaptionML=ENU=Plant Category Description;
                                                   Editable=No }
    { 110 ;   ;Rental Type         ;Option        ;OnValidate=BEGIN
                                                                IF "Rental Type" <> "Rental Type"::Rental THEN
                                                                  TESTFIELD("Integration Fixed Assets", FALSE);  //* See also OnValidate of field 310 "Integration Fixed Assets"
                                                              END;

                                                   CaptionML=ENU=Rental Type;
                                                   OptionCaptionML=ENU=Rental,Sales/Buy Back,Both;
                                                   OptionString=Rental,Sales/Buy Back,Both }
    { 120 ;   ;Number of Inspection Types;Integer ;FieldClass=FlowField;
                                                   CalcFormula=Count("Plant Type Inspection Type" WHERE (Plant Type=FIELD(Code)));
                                                   CaptionML=ENU=Number of Inspection Types;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 130 ;   ;Quantity in Stock   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Plant Inventory".Quantity WHERE (Removed=CONST(No),
                                                                                                     Plant Type=FIELD(Code),
                                                                                                     Sold=CONST(No)));
                                                   CaptionML=ENU=Quantity in Stock;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 140 ;   ;Quantity in Depot   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Plant Inventory".Quantity WHERE (Removed=CONST(No),
                                                                                                     Plant Type=FIELD(Code),
                                                                                                     Depot=CONST(Yes)));
                                                   CaptionML=ENU=Quantity in Depot;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 141 ;   ;Minimum Quantity in Depot;Decimal  ;CaptionML=ENU=Minimum Quantity in Depot;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 142 ;   ;Maximum Quantity in Depot;Decimal  ;CaptionML=ENU=Maximum Quantity in Depot;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 150 ;   ;Quantity Rented     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Plant Inventory".Quantity WHERE (Removed=CONST(No),
                                                                                                     Plant Type=FIELD(Code),
                                                                                                     Depot=CONST(No),
                                                                                                     Sold=CONST(No)));
                                                   CaptionML=ENU=Quantity Rented;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 155 ;   ;Quantity External Rented;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Plant Rent Entry".Quantity WHERE (Removed=CONST(No),
                                                                                                      Plant Type=FIELD(Code),
                                                                                                      Present from=FIELD(Date Filter)));
                                                   CaptionML=ENU=Quantity External Rented;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 160 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 170 ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 180 ;   ;Posting Group Internal;Code10      ;TableRelation="Plant Posting Group";
                                                   CaptionML=ENU=Posting Group Internal }
    { 185 ;   ;Posting Group External;Code10      ;TableRelation="Plant Posting Group";
                                                   CaptionML=ENU=Posting Group External }
    { 190 ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGroup.ValidateVatProdPostingGroup(GenProdPostingGroup,"Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGroup."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 195 ;   ;Department Code     ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Department Code");
                                                              END;

                                                   CaptionML=ENU=Department Code }
    { 200 ;   ;Cost Object         ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Cost Object");
                                                              END;

                                                   CaptionML=ENU=Cost Object }
    { 210 ;   ;Group Level 1       ;Code20        ;TableRelation="Grouping Level";
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Group Level 1;
                                                   Editable=No }
    { 211 ;   ;Group Level 1 Description;Text30   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Grouping Level".Description WHERE (Code=FIELD(Group Level 1)));
                                                   CaptionML=ENU=Group Level 1 Description;
                                                   Editable=No }
    { 220 ;   ;Group Level 2       ;Code20        ;TableRelation="Grouping Level";
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Group Level 2;
                                                   Editable=No }
    { 221 ;   ;Group Level 2 Description;Text30   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Grouping Level".Description WHERE (Code=FIELD(Group Level 2)));
                                                   CaptionML=ENU=Group Level 2 Description;
                                                   Editable=No }
    { 230 ;   ;Group Level 3       ;Code20        ;TableRelation="Grouping Level";
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Group Level 3;
                                                   Editable=No }
    { 231 ;   ;Group Level 3 Description;Text30   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Grouping Level".Description WHERE (Code=FIELD(Group Level 3)));
                                                   CaptionML=ENU=Group Level 3 Description;
                                                   Editable=No }
    { 240 ;   ;Scrap Value         ;Decimal       ;CaptionML=ENU=Scrap Value;
                                                   MinValue=0 }
    { 250 ;   ;Expected Occupation Perc.;Decimal  ;CaptionML=ENU=Expected Occupation Perc.;
                                                   MinValue=0 }
    { 260 ;   ;External            ;Boolean       ;OnValidate=BEGIN
                                                                ModifyExternalAllowed();
                                                                UpdateExternalOnPlantNoLevel();
                                                              END;

                                                   CaptionML=ENU=External }
    { 270 ;   ;Return Depot        ;Code20        ;TableRelation="Plant Location".Code WHERE (Depot=CONST(Yes),
                                                                                              Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                //DP00152.n
                                                                IF "Return Depot" <> '' THEN BEGIN
                                                                  TESTFIELD("Deviating Return Depot", TRUE);
                                                                  PlantSetup.GET;
                                                                  PlantSetup.TESTFIELD("Deviating Return Depot base on", PlantSetup."Deviating Return Depot base on"::"One Depot");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Return Depot }
    { 271 ;   ;Return Depot External Plant;Code20 ;TableRelation="Plant Location".Code WHERE (Depot=CONST(Yes),
                                                                                              Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                //DP00152.n
                                                                IF "Return Depot External Plant" <> '' THEN BEGIN
                                                                  TESTFIELD("Deviating Return Depot Ext.Plt", TRUE);
                                                                  PlantSetup.GET;
                                                                  PlantSetup.TESTFIELD("Deviating Return Depot base on", PlantSetup."Deviating Return Depot base on"::"One Depot");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Return Depot External Plant }
    { 272 ;   ;Deviating Return Depot;Boolean     ;CaptionML=ENU=Deviating Return Depot }
    { 273 ;   ;Deviating Return Depot Ext.Plt;Boolean;
                                                   CaptionML=ENU=Deviating Return Depot External Plant }
    { 280 ;   ;Plant Calendar      ;Code10        ;TableRelation="Plant Calendar";
                                                   OnValidate=BEGIN
                                                                //DP00241 (29768)
                                                                IF "Plant Calendar" = '' THEN
                                                                  TESTFIELD("Take into Account Rental Cal.", FALSE);
                                                              END;

                                                   CaptionML=ENU=Plant Calendar }
    { 281 ;   ;Take into Account Rental Cal.;Boolean;
                                                   OnValidate=BEGIN
                                                                //DP00241 (29768)
                                                                IF "Take into Account Rental Cal." THEN
                                                                  TESTFIELD("Plant Calendar");
                                                              END;

                                                   CaptionML=ENU=Take into Account Rental Calalendar }
    { 285 ;   ;Minimum Number of Rental Days;Integer;
                                                   CaptionML=ENU=Minimum Number of Rental Days;
                                                   MinValue=0 }
    { 290 ;   ;Export to Website   ;Boolean       ;CaptionML=ENU=Export to Website }
    { 295 ;   ;Order via Website   ;Boolean       ;CaptionML=ENU=Order via Website }
    { 297 ;   ;Show Price on Website;Boolean      ;CaptionML=ENU=Show Price on Website }
    { 300 ;   ;Default FA Class Code;Code10       ;TableRelation="FA Class";
                                                   OnValidate=BEGIN
                                                                IF "Default FA Class Code" <> '' THEN
                                                                  CheckFADefaultsAllowed();
                                                              END;

                                                   CaptionML=ENU=Default FA Class Code }
    { 302 ;   ;Default FA Subclass Code;Code10    ;TableRelation="FA Subclass";
                                                   OnValidate=BEGIN
                                                                IF "Default FA Subclass Code" <> '' THEN
                                                                  CheckFADefaultsAllowed();
                                                              END;

                                                   CaptionML=ENU=Default FA Subclass Code }
    { 305 ;   ;Default FA Location Code;Code10    ;TableRelation="FA Location";
                                                   OnValidate=BEGIN
                                                                IF "Default FA Location Code" <> '' THEN
                                                                  CheckFADefaultsAllowed();
                                                              END;

                                                   CaptionML=ENU=Default FA Location Code }
    { 310 ;   ;Integration Fixed Assets;Boolean   ;OnValidate=VAR
                                                                PlantTypeDeprBook@1100530000 : Record 11012658;
                                                              BEGIN
                                                                IF "Integration Fixed Assets" THEN BEGIN
                                                                  PlantSetup.GET;
                                                                  PlantSetup.TESTFIELD("Integration Fixed Assets", TRUE);
                                                                  TESTFIELD("Rental Type", "Rental Type"::Rental); //* Only Rental plant, no depreciation on Sales/BuyBack plant!
                                                                                                                   //* Note: Both is Sales/BuyBack plant that sometimes is Rental
                                                                END ELSE BEGIN
                                                                  //Reset on Plant Type level only allowed if no Plant Numbers with a link to a Fixed Asset present
                                                                  PlantNoRec.RESET;
                                                                  PlantNoRec.SETRANGE("Plant Type",Code);
                                                                  PlantNoRec.SETFILTER("Fixed Asset", '<>%1', '');
                                                                  IF PlantNoRec.FINDFIRST THEN
                                                                    PlantNoRec.TESTFIELD("Fixed Asset", '');
                                                                  //
                                                                  PlantTypeDeprBook.SETRANGE("Plant Type", Code);
                                                                  IF NOT PlantTypeDeprBook.ISEMPTY THEN
                                                                    ERROR(Text003);
                                                                  //
                                                                  "Default FA Class Code" := '';
                                                                  "Default FA Subclass Code" := '';
                                                                  "Default FA Location Code" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Integration Fixed Assets }
    { 320 ;   ;Order via Plant Request;Boolean    ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                //DP00898
                                                              END;

                                                   CaptionML=ENU=Order via Plant Request }
    { 400 ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 410 ;   ;Revenues            ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Plant Ledger Entry"."Total Price" WHERE (Plant Type=FIELD(Code),
                                                                                                             Posting Date=FIELD(Date Filter),
                                                                                                             Relate to=FIELD(Revenue Filter),
                                                                                                             Gen. Bus. Posting Group=FIELD(Gen. Bus. Posting Group Filter),
                                                                                                             Plant Posting Group=FIELD(Posting Group Filter)));
                                                   CaptionML=ENU=Revenues;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 420 ;   ;Costs               ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Plant Ledger Entry"."Total Cost" WHERE (Plant Type=FIELD(Code),
                                                                                                            Posting Date=FIELD(Date Filter),
                                                                                                            Cost Component=FIELD(Cost Component Filter),
                                                                                                            Plant Posting Group=FIELD(Posting Group Filter)));
                                                   CaptionML=ENU=Costs;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 430 ;   ;Cost Component Filter;Code10       ;FieldClass=FlowFilter;
                                                   TableRelation="Cost Component Plant";
                                                   CaptionML=ENU=Cost Component Filter }
    { 435 ;   ;Rate Component Filter;Code10       ;FieldClass=FlowFilter;
                                                   TableRelation="Standard Rate Component";
                                                   CaptionML=ENU=Rate Component Filter }
    { 440 ;   ;Revenue Filter      ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Revenue Filter;
                                                   OptionCaptionML=ENU=,Rental,Sales,Missing,Scrap,Buy Back,Hours,Transport,Sundry Costs,Plant Hours,Damage,Job Order,Load/Unload,Item,Item Buy-Back;
                                                   OptionString=,Rental,Sales,Missing,Scrap,Buy Back,Hours,Transport,Sundry Costs,Plant Hours,Damage,Job Order,Load/Unload,Item,ItemBuyBack;
                                                   BlankZero=Yes }
    { 450 ;   ;Gen. Bus. Posting Group Filter;Code10;
                                                   FieldClass=FlowFilter;
                                                   TableRelation="Gen. Business Posting Group";
                                                   CaptionML=ENU=Gen. Bus. Posting Group Filter }
    { 460 ;   ;Posting Group Filter;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Plant Posting Group";
                                                   CaptionML=ENU=Posting Group Filter }
    { 470 ;   ;Settlement Value Exit Order;Decimal;CaptionML=ENU=Basic Settlement Value Exit Order }
    { 480 ;   ;Last Used Plant Number;Code10      ;CaptionML=ENU=Last Used Plant Number }
    { 490 ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
    { 500 ;   ;Meter Reading       ;Boolean       ;OnValidate=BEGIN
                                                                //DP00614
                                                                IF NOT "Meter Reading" THEN
                                                                  TESTFIELD("Meter Reading Type", '')
                                                                ELSE
                                                                  TESTFIELD(Bulk, FALSE);
                                                              END;

                                                   CaptionML=ENU=Meter Reading }
    { 505 ;   ;Meter Reading Type  ;Code10        ;TableRelation="Plant Meter Reading Type";
                                                   OnValidate=BEGIN
                                                                //DP00614
                                                                IF "Meter Reading Type" <> '' THEN
                                                                  TESTFIELD("Meter Reading", TRUE);
                                                              END;

                                                   CaptionML=ENU=Meter Reading Type }
    { 620 ;   ;Use Plant No. in GPP;Boolean       ;InitValue=Yes;
                                                   CaptionML=ENU=Use Plant No. in GPP;
                                                   Description=kkleermaker }
    { 9001;   ;Shelf/Bin No.       ;Code20        ;TableRelation="Shelf per Location".Code;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                //db, 14-01-05: lookup deleted (call 5878): filter in form 11012125.
                                                                CompInfoRec.GET;
                                                                IF "Shelf/Bin No." <> '' THEN
                                                                  ShelfRec.GET(CompInfoRec."Location Code", "Shelf/Bin No.");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Shelf No. }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Group Level 1,Group Level 2,Group Level 3 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PlantSetup@11012000 : Record 11012550;
      PlantRec@11012001 : Record 11012551;
      PlantNoRec@11012002 : Record 11012552;
      GenProdPostingGroup@11012004 : Record 251;
      PlantUnitRec@1100485000 : Record 11012599;
      CompInfoRec@1100485004 : Record 79;
      ShelfRec@1100485005 : Record 11020241;
      NoSeriesMgt@11012005 : Codeunit 396;
      DimMgt@1100485001 : Codeunit 408;
      Text000@1100485002 : TextConst 'ENU=Only available in de granule''Plant Extended''.';
      Text001@1100485003 : TextConst 'ENU=NOTE!\%1 is modified, check/modify all rental rates of the plant type (f.i. also on plantnumber and location level).';
      Text002@1100485007 : TextConst 'ENU=Delete Plant Type not allowed, there are still Plant Nos. present.';
      DPA_Management@1100000999 : Codeunit 11012783;
      Text003@1100530000 : TextConst 'ENU=Not allowed, Depreciation Books present.';

    PROCEDURE AssistEdit@2(OldPlantRec@11012000 : Record 11012551) : Boolean;
    VAR
      lvNewPlantCodeFrm@1100485000 : Page 11072370;
    BEGIN
      WITH PlantRec DO BEGIN
        PlantRec := Rec;
        PlantSetup.GET;
        //PlantSetup.TESTFIELD("Plant Type Nos."); //* Old
        IF PlantSetup."Plant Type Nos." <> '' THEN BEGIN
          IF NoSeriesMgt.SelectSeries(PlantSetup."Plant Type Nos.",OldPlantRec."No. Series","No. Series") THEN BEGIN
            PlantSetup.GET;
            PlantSetup.TESTFIELD("Plant Type Nos.");
            NoSeriesMgt.SetSeries(Code);
            Rec := PlantRec;
            EXIT(TRUE);
          END;
        END ELSE BEGIN
          IF (PlantRec.Code <> '') THEN  //* Only for new plant types
            EXIT(FALSE);
          lvNewPlantCodeFrm.SetDefaultLevels(OldPlantRec."Group Level 1",OldPlantRec."Group Level 2",OldPlantRec."Group Level 3");
          lvNewPlantCodeFrm.LOOKUPMODE(TRUE);
          IF lvNewPlantCodeFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
            lvNewPlantCodeFrm.GetNewPlantTypeCode(PlantRec.Code);
            IF (PlantRec.Code <> '') AND (PlantRec.Code <> Rec.Code) THEN BEGIN
              Rec.Code := PlantRec.Code;
              EXIT(TRUE);
            END;
          END;
        END;
      END;
    END;

    PROCEDURE FillGroupLevels@1210190003();
    BEGIN
      PlantSetup.GET;
      "Group Level 1" := COPYSTR(Code,1,PlantSetup."Level 1 Grouping No. of Char.");
      "Group Level 2" := COPYSTR(Code,1,PlantSetup."Level 2 Grouping No. of Char.");
      "Group Level 3" := COPYSTR(Code,1,PlantSetup."Level 3 Grouping No. of Char.");
    END;

    PROCEDURE PlantPostingGrp@1210190000(PlntNo@1210190000 : Code[10];CompName@1210190002 : Text[50];DoInternalOrExternalMode@1100485000 : Code[1]) : Code[10];
    VAR
      lExternBln@1210190001 : Boolean;
    BEGIN
      IF DoInternalOrExternalMode IN ['I','E'] THEN
        lExternBln := (DoInternalOrExternalMode = 'E')
      ELSE BEGIN
        lExternBln := External;
        IF (PlntNo > '0') THEN BEGIN
          PlantNoRec.CHANGECOMPANY(CompName);
          PlantNoRec.GET(Code, PlntNo);
          lExternBln := PlantNoRec.External;
        END;
      END;

      IF lExternBln THEN BEGIN
        TESTFIELD("Posting Group External");
        EXIT("Posting Group External");
      END ELSE BEGIN
        TESTFIELD("Posting Group Internal");
        EXIT("Posting Group Internal");
      END;
    END;

    PROCEDURE CheckWritePlantUnit@1100485000();
    BEGIN
      IF (Code = '') OR ("Unit of Measure" = '') THEN
        EXIT;

      IF NOT PlantUnitRec.GET(Code, "Unit of Measure") THEN BEGIN
        PlantUnitRec.INIT;
        PlantUnitRec."Plant Type" := Code;
        PlantUnitRec.Code := "Unit of Measure";
        PlantUnitRec."Qty. per Unit of Measure" := 1;
        PlantUnitRec.INSERT;
      END;
    END;

    PROCEDURE ModifyBulkAllowed@1100485003();
    BEGIN
      PlantNoRec.RESET;
      PlantNoRec.SETRANGE("Plant Type",Code);
      PlantNoRec.SETRANGE(Posted, TRUE);
      IF PlantNoRec.FIND('-') THEN
        PlantNoRec.FIELDERROR(Posted);
      IF Bulk AND External THEN BEGIN
        PlantNoRec.SETRANGE(Posted, FALSE);
        PlantNoRec.SETFILTER("Fixed Asset", '<>%1', '');
        IF PlantNoRec.FIND('-') THEN
          PlantNoRec.FIELDERROR("Fixed Asset");
      END;
    END;

    PROCEDURE ModifyExternalAllowed@1100485004();
    BEGIN
      IF NOT Bulk THEN
        EXIT;

      PlantNoRec.RESET;
      PlantNoRec.SETRANGE("Plant Type",Code);
      PlantNoRec.SETRANGE(Posted, TRUE);
      IF PlantNoRec.FIND('-') THEN
        PlantNoRec.FIELDERROR(Posted);

      IF External THEN BEGIN
        PlantNoRec.SETRANGE(Posted, FALSE);
        PlantNoRec.SETFILTER("Fixed Asset", '<>%1', '');
        IF PlantNoRec.FIND('-') THEN
          PlantNoRec.FIELDERROR("Fixed Asset");
      END;
    END;

    PROCEDURE UpdateExternalOnPlantNoLevel@1100485001();
    BEGIN
      IF Bulk THEN BEGIN
        PlantNoRec.RESET;
        PlantNoRec.SETRANGE("Plant Type", Code);
        PlantNoRec.SETRANGE(External, (NOT External));
        PlantNoRec.SETRANGE(Posted, FALSE);
        IF PlantNoRec.FIND('-') THEN
          REPEAT
            PlantNoRec.External := External;  //* Validate via function, because new values not saved yet
            PlantNoRec.DoValidateExternal(Bulk, External);
            PlantNoRec.MODIFY(TRUE);
          UNTIL PlantNoRec.NEXT = 0;
      END;
    END;

    PROCEDURE ValidateShortcutDimCode@8(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.SaveDefaultDim(DATABASE::"Plant Type",Code,FieldNumber,ShortcutDimCode);
      //MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CheckDeleteAllowed@1100485002(IPlantTypeRec@1100485006 : Record 11012551);
    VAR
      lvPlantInventRec@1100485000 : Record 11012555;
      lvText000@1100485005 : TextConst 'ENU=Delete Plant Type ''%1'' not allowed.';
      lvText001@1100485003 : TextConst 'ENU=Plant is not completely invoiced.';
      lvText002@1100485002 : TextConst 'ENU=Invoice Proposals of the plant not posted yet.';
      lvText003@1100485001 : TextConst 'ENU=Sales Invoices of the plant not posted yet.';
    BEGIN
      //* 2008-08-29: Call 2743, addition to call C-011103 (CTB -Alwin Nab):
      //* At deleting a bulk plant type, should be tested if all of plant type is already invoiced.
      //* Agreed only to test this for rental!
      //* We will do this also for unique because if no plant nos. of plant type anymore, then one can put bulk just to unique.
      WITH lvPlantInventRec DO BEGIN
        SETCURRENTKEY("Plant Type");
        SETRANGE("Plant Type", IPlantTypeRec.Code);
        SETRANGE(Sold, FALSE);
        SETRANGE(Depot, FALSE);
        SETRANGE("Employee Location", FALSE);
        SETRANGE("Completely Invoiced", FALSE);
        IF FINDFIRST THEN
          ERROR(STRSUBSTNO(lvText000, "Plant Type") + ' ' + lvText001);
        SETRANGE("Completely Invoiced",TRUE);
        SETRANGE("Invoice Status", "Invoice Status"::Proposal);
        IF FINDFIRST THEN
          ERROR(STRSUBSTNO(lvText000, "Plant Type") + ' ' + lvText002);
        SETRANGE("Invoice Status", "Invoice Status"::"Temporary");
        IF FINDFIRST THEN
          ERROR(STRSUBSTNO(lvText000, "Plant Type") + ' ' + lvText003);
      END;
    END;

    PROCEDURE CheckFADefaultsAllowed@1100525000();
    BEGIN
      TESTFIELD("Integration Fixed Assets", TRUE);
      PlantSetup.GET;
      PlantSetup.TESTFIELD("Integration Fixed Assets", TRUE);
      PlantSetup.TESTFIELD("Connect Grouping to FA", FALSE);
    END;

    PROCEDURE GetDefDeprBooks@1100530000() : Code[20];
    VAR
      PlantTypeDeprBook@1100530000 : Record 11012658;
      Counter@1100530001 : Integer;
    BEGIN
      PlantTypeDeprBook.SETRANGE("Plant Type", Code);
      IF PlantTypeDeprBook.FINDFIRST THEN BEGIN
        Counter := PlantTypeDeprBook.COUNT;
        IF Counter = 1 THEN
          EXIT(PlantTypeDeprBook."Depreciation Book Code")
        ELSE
          EXIT(STRSUBSTNO('[%1]', Counter));
      END;
      EXIT('');
    END;

    PROCEDURE DrillDownRevenuesDetails@1210190001();
    VAR
      PlantLedgerEntry@1210190000 : Record 11012572;
    BEGIN
      PlantLedgerEntry.SETCURRENTKEY("Plant Type", "Relate to", "Gen. Bus. Posting Group", "Plant Posting Group", "Posting Date");
      PlantLedgerEntry.SETRANGE("Plant Type", Code);
      COPYFILTER("Date Filter", PlantLedgerEntry."Posting Date");
      COPYFILTER("Revenue Filter", PlantLedgerEntry."Relate to");
      COPYFILTER("Posting Group Filter", PlantLedgerEntry."Plant Posting Group");
      COPYFILTER("Gen. Bus. Posting Group Filter", PlantLedgerEntry."Gen. Bus. Posting Group");
      FILTERGROUP(0);
      PlantLedgerEntry.SETFILTER("Total Price", '<>%1', 0);  //* Only Revenues (15512)
      PlantLedgerEntry.FILTERGROUP(7);
      PlantLedgerEntry.SETFILTER("Relate to", '<>%1', 0);
      PlantLedgerEntry.FILTERGROUP(0);
      PAGE.RUNMODAL(0, PlantLedgerEntry);
    END;

    PROCEDURE DrillDownCostsDetails@1100525002();
    VAR
      PlantLedgerEntry@1210190000 : Record 11012572;
    BEGIN
      PlantLedgerEntry.SETCURRENTKEY("Plant Type", "Plant Posting Group", "Cost Component", "Posting Date");
      PlantLedgerEntry.SETRANGE("Plant Type", Code);
      COPYFILTER("Date Filter", PlantLedgerEntry."Posting Date");
      COPYFILTER("Cost Component Filter", PlantLedgerEntry."Cost Component");
      COPYFILTER("Posting Group Filter", PlantLedgerEntry."Plant Posting Group");
      PlantLedgerEntry.SETFILTER("Total Cost", '<>%1', 0);  //* Only Revenues (15512)
      //PlantLedgerEntry.FILTERGROUP(7);
      //PlantLedgerEntry.SETRANGE("Relate to", 0);
      //PlantLedgerEntry.FILTERGROUP(0);
      PAGE.RUNMODAL(0, PlantLedgerEntry);
    END;

    PROCEDURE CheckActiveDPA@1100525001() : Boolean;
    BEGIN
      //* DPA_IsActive is a generated LOCAL function. This function is global so it can be used extenal
      EXIT(DPA_IsActive);
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Department Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::"Plant Type");
      IF Dimension1Code <> '' THEN
        "Department Code" := Dimension1Code;

      IF "Department Code" <> '' THEN
        VALIDATE("Department Code");
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012551) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012551');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Plant Type", "Department Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Department Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Department Code");
    END;

    PROCEDURE ShowDocuments@1100529007();
    VAR
      RecRef@1100525000 : RecordRef;
      DocumentFilters@1100525001 : Codeunit 11012432;
    BEGIN
      //DP00183
      TESTFIELD(Code);
      RecRef.GETTABLE(Rec);
      DocumentFilters.CreateTempFilterAndExecute1(RecRef, "Department Code", FALSE, TRUE);
    END;

    PROCEDURE DeleteDocumentLinks@1100529006();
    VAR
      DocumentLinkMgt@1100525000 : Codeunit 11012401;
      RecRef@1100525001 : RecordRef;
    BEGIN
      //DP00183
      RecRef.GETTABLE(Rec);
      DocumentLinkMgt.DeleteDocumentLinksFromObject(RecRef);
    END;

    PROCEDURE MoveDocumentLinks@1100529005(SourceRec@1100529001 : Record 11012551;TargetRec@1100529000 : Record 11012551;CopyMode@1100529003 : Boolean);
    VAR
      DocumentLinkMgt@1100525000 : Codeunit 11012401;
      SourceRecRef@1100525001 : RecordRef;
      TargetRecRef@1100529002 : RecordRef;
    BEGIN
      //DP00183
      SourceRecRef.GETTABLE(SourceRec);
      TargetRecRef.GETTABLE(TargetRec);
      IF NOT CopyMode THEN
        DocumentLinkMgt.ReplaceDocLink(SourceRecRef, TargetRecRef)
      ELSE
        DocumentLinkMgt.CopyDocLinks(SourceRecRef, TargetRecRef);
    END;

    PROCEDURE CommentSheet@1100529004(EditableMode@1100529002 : Boolean);
    VAR
      PlantCommentLine@1100529000 : Record 11072666;
    BEGIN
      //DP00183
      TESTFIELD(Code);
      PlantCommentLine.EditCommentLines(DATABASE::"Plant Type", Code, '', 0, EditableMode);  //C005461.c
    END;

    PROCEDURE HasCommentLines@1100529002() : Boolean;
    VAR
      PlantCommentLine@1100529000 : Record 11072666;
    BEGIN
      //DP00183
      EXIT(PlantCommentLine.HasCommentLines(DATABASE::"Plant Type", Code, '', 0));  //C005461.c
    END;

    PROCEDURE DeleteCommentLines@1100529003();
    VAR
      PlantCommentLine@1100529000 : Record 11072666;
    BEGIN
      //DP00183
      PlantCommentLine.DeleteComments(DATABASE::"Plant Type", Code, '', 0);  //C005461.c
    END;

    PROCEDURE UpdDepartmentCodeInspections@1100529008();
    VAR
      Inspection@1100529000 : Record 11012564;
      PlantNumber@1100529001 : Record 11012552;
    BEGIN
      //DP00241 (26914)
      IF (Code = '') OR ("Department Code" = '') THEN
        EXIT;

      Inspection.SETRANGE("Plant Type", Code);
      IF Inspection.ISEMPTY THEN
        EXIT;

      PlantNumber.SETRANGE("Plant Type", Code);
      PlantNumber.SETRANGE("Department Code", '');
      IF PlantNumber.FINDSET THEN BEGIN
        REPEAT
          Inspection.SETRANGE("Plant No.", PlantNumber."No.");
          Inspection.SETFILTER("Department Code", '<>%1', "Department Code");
          IF NOT Inspection.ISEMPTY THEN
            Inspection.MODIFYALL("Department Code", "Department Code", FALSE);
        UNTIL PlantNumber.NEXT = 0;
      END;
    END;

    PROCEDURE QtySoldSBBPlantOnLocations@1100529000(PlantType@1100529000 : Code[20]) QtySold : Decimal;
    VAR
      PlantInvent@1100529001 : Record 11012555;
      PlantLoc@1100529002 : Record 11012554;
    BEGIN
      //DP00241 (26955)
      // Count Sales-BuyBack Plant that is sold to a location. Only count sold on locations that are not
      // finished yet. Asume that sold plant on finisched(/archived) locations will not be bought back anymore.
      IF PlantType = '' THEN
        EXIT;

      PlantInvent.SETCURRENTKEY(Removed, "Plant Type", Depot, Sold);
      PlantInvent.SETRANGE(Removed, FALSE);
      PlantInvent.SETRANGE("Plant Type", PlantType);
      PlantInvent.SETRANGE(Depot, FALSE);
      PlantInvent.SETRANGE(Sold, TRUE);
      IF PlantInvent.FINDSET THEN BEGIN
        REPEAT
          IF PlantInvent.Location <> PlantLoc.Code THEN BEGIN
            IF (NOT PlantLoc.GET(PlantInvent.Location)) OR (PlantInvent.Location = '') THEN
              PlantLoc.Status := PlantLoc.Status::Archived;  //Deleted
          END;
          IF PlantLoc.Status < PlantLoc.Status::Finished THEN
            QtySold := QtySold + PlantInvent.Quantity;
        UNTIL PlantInvent.NEXT = 0;
      END;
    END;

    PROCEDURE OnDrilldownQtySoldSBBPlant@1100529009(PlantType@1100529001 : Code[20]);
    VAR
      PlantInvent@1100529000 : Record 11012555;
    BEGIN
      //DP00241 (26955)
      PlantInvent.SETCURRENTKEY(Removed, "Plant Type", Depot, Sold);
      PlantInvent.SETRANGE(Removed, FALSE);
      PlantInvent.SETRANGE("Plant Type", PlantType);
      PlantInvent.SETRANGE(Depot, FALSE);
      PlantInvent.SETRANGE(Sold, TRUE);
      PlantInvent.SETFILTER("Location Status", '<%1', PlantInvent."Location Status"::"Administrative Finished");
      PAGE.RUNMODAL(0, PlantInvent);
    END;

    PROCEDURE UpdatePlantOrderUnitOfMeasure@1100529001();
    VAR
      PlantOrderLine@1100529000 : Record 11012557;
    BEGIN
      //DP00690
      IF "Unit of Measure" = '' THEN
        EXIT;
      PlantOrderLine.SETRANGE(Type, PlantOrderLine.Type::Plant);
      PlantOrderLine.SETRANGE("Plant Type", Code);
      PlantOrderLine.MODIFYALL("Unit of Measure", "Unit of Measure");
    END;

    BEGIN
    END.
  }
}

