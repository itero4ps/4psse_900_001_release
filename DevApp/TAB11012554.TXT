OBJECT Table 11012554 Plant Location
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Description;
    OnInsert=BEGIN
               TESTFIELD(Code);
               "Creation Date" := TODAY;
               NormalizePostCodeHouseNo;
             END;

    OnModify=BEGIN
               CheckPlantNoFilled();
               "Last Date Modified" := TODAY;
               IF ("Ending Date" = 0D) AND (Status >= Status::"Technical Finished") THEN
                 "Ending Date" := TODAY;
               IF NOT Depot THEN BEGIN
                 IF "Location Code (Items)" <> '' THEN
                   "Location Code (Items)" := '';
               END;
               NormalizePostCodeHouseNo;
             END;

    OnDelete=VAR
               PlantInventory@1100528000 : Record 11012555;
               lvLocAddressRec@1100485000 : Record 11012590;
               lvLocContRec@1100485001 : Record 11012594;
               lvLocRentalRateRec@1100485004 : Record 11012583;
               lvRentDiscRec@1100485005 : Record 11012544;
               RentalQuantityDiscount@1100528800 : Record 11072669;
               DummyRec@1100485003 : Record 11012051;
               ReturnDepots@1100409000 : Record 11012668;
               PlantCostLine@1100409001 : Record 11012591;
               PlantCostLinePrice@1100409002 : Record 11072664;
             BEGIN
               IF Code = '' THEN
                 EXIT;

               PlantSetupRec.GET;

               IF PlantSetupRec."Finish and Archive Loc. Oblig." THEN BEGIN
                 IF Status < Status::Finished THEN
                   ERROR(Text012);
                 IF Status <> Status::Archived THEN
                   IF NOT CONFIRM(Text013,FALSE) THEN
                     ERROR(Text014);
               END;

               ErrorTxt := CheckFinished(COMPANYNAME, FALSE, DummyRec);
               IF ErrorTxt <> '' THEN
                 ERROR(ErrorTxt);
               //C021870.sn
               IF PlantSetupRec."Ignore Neg. Stock on Close Loc" THEN BEGIN
                 //If check not done in 'CheckFinished'. Delete not allowed if neg. invent on location, must be corrected first!!
                 //Otherwise diference between inventory and possession / Fixed Assets
                 PlantInventory.SETCURRENTKEY(Removed,Location);
                 PlantInventory.SETRANGE(Removed,FALSE);
                 PlantInventory.SETRANGE(Location,Code);
                 PlantInventory.SETRANGE(Sold,FALSE);
                 PlantInventory.SETFILTER(Quantity, '<%1', -0.000005);
                 IF PlantInventory.FINDFIRST THEN
                   ERROR(Text002b, TABLECAPTION, Code);
               END;
               //C021870.sn

               PlantNeedRec.SETRANGE(Location, Code);
               PlantNeedRec.DELETEALL(TRUE);

               PlantInvRec.SETCURRENTKEY(Location);
               PlantInvRec.SETRANGE(Location, Code);
               PlantInvRec.DELETEALL;

               lvLocAddressRec.SETRANGE(Location, Code);
               lvLocAddressRec.DELETEALL;

               lvLocContRec.SETRANGE(Location, Code);
               lvLocContRec.DELETEALL;

               lvLocRentalRateRec.SETRANGE(Location, Code);
               lvLocRentalRateRec.DELETEALL;

               lvRentDiscRec.SETRANGE(Location, Code);
               lvRentDiscRec.DELETEALL;

               RentalQuantityDiscount.SETRANGE(Location, Code);
               RentalQuantityDiscount.DELETEALL;

               PlantLocRateCodeRec.RESET;
               PlantLocRateCodeRec.SETRANGE(Location, Code);
               PlantLocRateCodeRec.DELETEALL;

               //DP00671.sn
               PlantCostLinePrice.SETRANGE("Cost Level", PlantCostLinePrice."Cost Level"::Location);
               PlantCostLinePrice.SETRANGE(Code, Code);
               PlantCostLinePrice.DELETEALL;

               PlantCostLine.SETRANGE("Cost Level", PlantCostLine."Cost Level"::Location);
               PlantCostLine.SETRANGE(Code, Code);
               PlantCostLine.DELETEALL;
               //DP00671.en

               //DP00152
               ReturnDepots.RESET;
               ReturnDepots.SETRANGE(Depot, Code);
               ReturnDepots.DELETEALL;

               //DP00183.sc
               DeleteDocumentLinks();
               DeleteCommentLines();
               //DP00183.ec

               PlantLedgerEntry.SETCURRENTKEY("Plant Location");
               PlantLedgerEntry.SETRANGE("Plant Location", Code);
               IF PlantLedgerEntry.FINDSET(TRUE, TRUE) THEN
                 REPEAT
                   PlantLedgerEntry2 := PlantLedgerEntry;
                   PlantLedgerEntry2."Plant Location" := '';
                   PlantLedgerEntry2.MODIFY;
                 UNTIL PlantLedgerEntry.NEXT = 0;
             END;

    OnRename=BEGIN
               "Last Date Modified" := TODAY;
               MoveDocumentLinks(xRec, Rec, FALSE); //DP00183.n
             END;

    CaptionML=ENU=Plant Location;
    LookupPageID=Page11012558;
    DrillDownPageID=Page11012558;
  }
  FIELDS
  {
    { 10  ;   ;Code                ;Code20        ;AltSearchField=Search Name;
                                                   CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 15  ;   ;Company Name        ;Text30        ;TableRelation=Company;
                                                   OnValidate=VAR
                                                                CompanyData@1100528500 : Record 11020674;
                                                              BEGIN
                                                                VALIDATE("Project No.");
                                                                VALIDATE("Service Order No.");
                                                                VALIDATE("Employee No.");
                                                                IF "Company Name" = COMPANYNAME THEN
                                                                  "Company Name" := '';
                                                                IF "Company Name" <> '' THEN BEGIN
                                                                  TESTFIELD("Plant Type", '');  //DP00815
                                                                  CompanyData.GET("Company Name");
                                                                  CompanyData.TESTFIELD("Customer No.");
                                                                  VALIDATE("Customer No.",CompanyData."Customer No.");
                                                                  "Project Address Code" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Company Name }
    { 20  ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                IF ("Search Name" = UPPERCASE(xRec.Description)) OR ("Search Name" = '') THEN
                                                                  "Search Name" := Description;
                                                              END;

                                                   CaptionML=ENU=Description }
    { 30  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 40  ;   ;Search Name         ;Code50        ;CaptionML=ENU=Search Name }
    { 50  ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                IF "Customer No." <> '' THEN
                                                                  TESTFIELD("Plant Type", '');  //DP00815
                                                                IF "Customer No." <> xRec."Customer No." THEN BEGIN
                                                                  PlantSetupRec.GET;
                                                                  IF "Customer No." = '' THEN BEGIN
                                                                    "VAT Bus. Posting Group" := '';
                                                                    IF PlantSetupRec."Def. Loc. Bus. P.Grp of Cust." THEN
                                                                      "Gen. Bus. Posting Group" := '';
                                                                  END ELSE BEGIN
                                                                    CustRec.GET("Customer No.");
                                                                    "VAT Bus. Posting Group" := CustRec."VAT Bus. Posting Group";
                                                                    IF PlantSetupRec."Def. Loc. Bus. P.Grp of Cust." THEN
                                                                      "Gen. Bus. Posting Group" := CustRec."Gen. Bus. Posting Group";
                                                                  END;
                                                                  "Bill-to Customer No." := '';
                                                                  "Alternative Bill-to Address" := '';
                                                                  "Project Address Code" := '';
                                                                END;

                                                                IF ("Customer No." = '') OR ("Project No." <> '') OR ("Service Order No." <> '') OR ("Company Name" <> '') THEN
                                                                  "Project Address Code" := '';
                                                              END;

                                                   CaptionML=ENU=Customer No. }
    { 55  ;   ;Service Order No.   ;Code20        ;TableRelation=IF (Company Name=CONST()) "Service Order";
                                                   OnValidate=VAR
                                                                ServOrder2@1100525000 : Record 11012823;
                                                              BEGIN
                                                                IF "Service Order No." = '' THEN
                                                                  EXIT;

                                                                TESTFIELD("Project No.", '');
                                                                TESTFIELD("Employee No.", '');
                                                                TESTFIELD("Plant Type", '');  //DP00815

                                                                CheckPlantMgtCompanySetup("Company Name");
                                                                IF "Company Name" = '' THEN
                                                                  ServOrderRec.CHANGECOMPANY(COMPANYNAME)
                                                                ELSE
                                                                  ServOrderRec.CHANGECOMPANY("Company Name");
                                                                ServOrderRec.GET("Service Order No.");
                                                                IF ServOrderRec."Plant Location" = Code THEN
                                                                  ServOrderRec.FIELDERROR("Plant Location");
                                                                ServOrder2.SETRANGE("Plant Location", Code); //Always SO in the current (plant) company, plant fields on SO in same company
                                                                IF ServOrder2.FINDFIRST THEN
                                                                  TESTFIELD("Service Order No.", '');

                                                                IF ("Company Name" = '') OR ("Company Name" = COMPANYNAME) THEN
                                                                  VALIDATE("Customer No.",'')
                                                                ELSE
                                                                  VALIDATE("Customer No.");

                                                                //mg.sn, 09-03-11: M25508
                                                                IF "Customer No." = '' THEN BEGIN
                                                                  PlantSetupRec.GET;
                                                                  VALIDATE("Gen. Bus. Posting Group", PlantSetupRec."Default Gen. Bus.Posting Group");
                                                                  "VAT Bus. Posting Group" := PlantSetupRec."Default VAT Bus.Posting Group";
                                                                END;
                                                                //mg.en, 09-03-11: M25508

                                                                VALIDATE("VAT Bus. Posting Group");
                                                                TransferServOrderData;
                                                              END;

                                                   CaptionML=ENU=Service Order No. }
    { 58  ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   OnValidate=BEGIN
                                                                //DP00815
                                                                IF "Plant Type" = '' THEN
                                                                  "Internal Charge Plant Entry as" := 0;
                                                                IF "Plant Type" <> '' THEN BEGIN
                                                                  PlantSetupRec.GET;
                                                                  PlantSetupRec.TESTFIELD("Cost Component Internal Charge");
                                                                  TESTFIELD("Company Name", '');
                                                                  TESTFIELD("Customer No.", '');
                                                                  TESTFIELD("Project No.", '');
                                                                  TESTFIELD("Service Order No.", '');
                                                                  TESTFIELD("Employee No.", '');
                                                                  IF "Internal Charge Plant Entry as" = 0 THEN BEGIN
                                                                    "Internal Charge Plant Entry as" := PlantSetupRec."Internal Charge Plant Entry as";
                                                                    IF "Internal Charge Plant Entry as" = 0 THEN
                                                                      "Internal Charge Plant Entry as" := "Internal Charge Plant Entry as"::Cost;
                                                                  END;
                                                                END;
                                                                IF "Plant Type" <> xRec."Plant Type" THEN
                                                                  "Plant No." := '';
                                                              END;

                                                   CaptionML=ENU=Plant Type }
    { 59  ;   ;Plant No.           ;Code10        ;TableRelation="Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   CaptionML=ENU=Plant No. }
    { 60  ;   ;Project No.         ;Code20        ;TableRelation=IF (Company Name=FILTER('')) Job;
                                                   OnValidate=BEGIN
                                                                IF "Project No." = '' THEN BEGIN
                                                                  "BB with Sales Rate (L to L.)" := FALSE;  //C022786
                                                                  EXIT;
                                                                END;

                                                                TESTFIELD("Service Order No.", '');
                                                                TESTFIELD("Employee No.", '');
                                                                TESTFIELD("Plant Type", '');  //DP00815

                                                                CheckPlantMgtCompanySetup("Company Name");
                                                                IF "Company Name" = '' THEN
                                                                  ProjRec.CHANGECOMPANY(COMPANYNAME)
                                                                ELSE
                                                                  ProjRec.CHANGECOMPANY("Company Name");
                                                                ProjRec.GET("Project No.");

                                                                IF ("Company Name" = '') OR ("Company Name" = COMPANYNAME) THEN
                                                                  VALIDATE("Customer No.",'')
                                                                ELSE
                                                                  VALIDATE("Customer No.");

                                                                IF "Project No." = '' THEN
                                                                  VALIDATE(Element, '')
                                                                ELSE
                                                                  VALIDATE(Element);

                                                                //mg.sn, 09-03-11: M25508
                                                                PlantSetupRec.GET;  //C022786.n
                                                                IF "Customer No." = '' THEN BEGIN
                                                                  //PlantSetupRec.GET;   //C022786.o
                                                                  VALIDATE("Gen. Bus. Posting Group", PlantSetupRec."Default Gen. Bus.Posting Group");
                                                                  "VAT Bus. Posting Group" := PlantSetupRec."Default VAT Bus.Posting Group";
                                                                END;
                                                                //mg.en, 09-03-11: M25508

                                                                VALIDATE("VAT Bus. Posting Group");
                                                                IF ("Project No." <> '') AND (xRec."Project No." = '') THEN
                                                                  "BB with Sales Rate (L to L.)" := PlantSetupRec."BB with Sales Rate (L to L.)";  //C022786
                                                                TransferProjectData;
                                                              END;

                                                   CaptionML=ENU=Project No. }
    { 65  ;   ;Element             ;Code20        ;TableRelation=IF (Company Name=FILTER('')) "Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=VAR
                                                                lvProjElementRec@1210190000 : Record 11012010;
                                                              BEGIN
                                                                IF Element = '' THEN
                                                                  EXIT;

                                                                TESTFIELD("Project No.");

                                                                ElementFormat.FormatElem(Element,2,"Company Name");

                                                                IF "Company Name" <> '' THEN
                                                                  lvProjElementRec.CHANGECOMPANY("Company Name");
                                                                lvProjElementRec.GET("Project No.", Element);
                                                              END;

                                                   OnLookup=VAR
                                                              lvProjElementRec@1210190000 : Record 11012010;
                                                            BEGIN
                                                              IF "Company Name" <> '' THEN
                                                                lvProjElementRec.CHANGECOMPANY("Company Name");
                                                              lvProjElementRec.SETRANGE("Project No.", "Project No.");
                                                              lvProjElementRec."Project No." := "Project No.";
                                                              lvProjElementRec.Element := Element;
                                                              IF PAGE.RUNMODAL(0,lvProjElementRec) = ACTION::LookupOK THEN
                                                                VALIDATE(Element,lvProjElementRec.Element);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 67  ;   ;Project Address Code;Code10        ;TableRelation=IF (Company Name=CONST(),
                                                                     Project No.=CONST()) "Ship-to Address".Code WHERE (Customer No.=FIELD(Customer No.),
                                                                                                                        Project Address=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                IF ("Project Address Code" <> '') THEN BEGIN
                                                                  TESTFIELD("Project No.", '');
                                                                  TESTFIELD("Service Order No.", '');
                                                                  TESTFIELD("Company Name", '');
                                                                END;

                                                                IF ("Project Address Code" <> '') AND
                                                                   ("Project Address Code" <> xRec."Project Address Code") AND
                                                                   (CurrFieldNo = FIELDNO("Project Address Code"))
                                                                THEN
                                                                  TransferCustJobAddress();
                                                              END;

                                                   CaptionML=ENU=Project Address Code }
    { 68  ;   ;Employee No.        ;Code20        ;TableRelation=IF (Company Name=FILTER('')) Employee;
                                                   OnValidate=VAR
                                                                lvEmplRec@1100485000 : Record 5200;
                                                              BEGIN
                                                                IF "Employee No." = '' THEN BEGIN
                                                                  CALCFIELDS("Employee Location");
                                                                  EXIT;
                                                                END;

                                                                TESTFIELD("Project No.", '');
                                                                TESTFIELD("Service Order No.", '');
                                                                IF "Company Name" = '' THEN
                                                                  TESTFIELD("Customer No.", '');
                                                                TESTFIELD("Plant Type", '');  //DP00815

                                                                IF "Company Name" <> '' THEN
                                                                  lvEmplRec.CHANGECOMPANY("Company Name");

                                                                lvEmplRec.GET("Employee No.");
                                                                CALCFIELDS("Employee Location");

                                                                //mg.sn, 09-03-11: M25508
                                                                IF ("Customer No." = '') AND ("Gen. Bus. Posting Group" = '') AND ("VAT Bus. Posting Group" = '') THEN BEGIN //C027382.c
                                                                  PlantSetupRec.GET;
                                                                  VALIDATE("Gen. Bus. Posting Group", PlantSetupRec."Default Gen. Bus.Posting Group");
                                                                  VALIDATE("VAT Bus. Posting Group", PlantSetupRec."Default VAT Bus.Posting Group");
                                                                END;
                                                                //mg.en, 09-03-11: M25508

                                                                TransferEmployeeData(lvEmplRec);
                                                              END;

                                                   CaptionML=ENU=Employee No. }
    { 70  ;   ;Address             ;Text50        ;CaptionML=ENU=Address;
                                                   Editable=Yes }
    { 80  ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2;
                                                   Editable=Yes }
    { 90  ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City;
                                                   Editable=Yes }
    { 100 ;   ;Contact             ;Text50        ;CaptionML=ENU=Contact;
                                                   Editable=Yes }
    { 110 ;   ;County              ;Text30        ;CaptionML=ENU=County;
                                                   Editable=Yes }
    { 120 ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                NormalizePostCodeHouseNo;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code;
                                                   Editable=Yes }
    { 125 ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region Code }
    { 130 ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 140 ;   ;Fax No.             ;Text30        ;CaptionML=ENU=Fax No. }
    { 150 ;   ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   CaptionML=ENU=Territory Code }
    { 155 ;   ;Department Code     ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1, "Department Code");
                                                              END;

                                                   CaptionML=ENU=Department Code }
    { 170 ;   ;Depot               ;Boolean       ;OnValidate=BEGIN
                                                                IF Depot THEN BEGIN
                                                                  TESTFIELD("Rate Codes by Location", FALSE);
                                                                  "Damage Settlement" := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Depot }
    { 175 ;   ;Employee Location   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Plant Location" WHERE (Code=FIELD(Code),
                                                                                             Employee No.=FILTER(<>'')));
                                                   CaptionML=ENU=Employee Location;
                                                   Editable=No }
    { 180 ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
    { 190 ;   ;Picture             ;BLOB          ;CaptionML=ENU=Picture;
                                                   SubType=Bitmap }
    { 200 ;   ;Starting Date       ;Date          ;CaptionML=ENU=Starting Date }
    { 210 ;   ;Ending Date         ;Date          ;CaptionML=ENU=Ending Date }
    { 220 ;   ;Discount %          ;Decimal       ;OnValidate=BEGIN
                                                                //* Wordt niet meer gebruikt voor huurkorting. Alleen nog voor korting uren, v/t-verkoop en MO-artikelen, afh. mat.instellingen.
                                                                IF "Discount %" <> 0 THEN BEGIN
                                                                  PlantSetupRec.GET;
                                                                  IF (NOT PlantSetupRec."Discount Plant Hours") AND
                                                                     (NOT PlantSetupRec."Discount Sales/Buy Back") AND
                                                                     (NOT PlantSetupRec."Discount Items")
                                                                  THEN
                                                                    ERROR(Text016);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Discount %;
                                                   DecimalPlaces=0:5;
                                                   MaxValue=100 }
    { 230 ;   ;Calendar            ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD("Rate Type", "Rate Type"::Day);
                                                              END;

                                                   CaptionML=ENU=Calendar;
                                                   OptionCaptionML=ENU=Standard,Region,Both,None;
                                                   OptionString=Standard,Region,Both,None }
    { 240 ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=VAR
                                                                lvText@1100525000 : Text[50];
                                                              BEGIN
                                                                //IF ("VAT Bus. Posting Group" <> '') AND ("Customer No." = '') THEN BEGIN
                                                                //* Testcall 4780: Customer is only empty if project or serviceorder filled and company is empty
                                                                //*                Must be no VAT if project or serviceorder filled (so also if in other company)
                                                                IF ("VAT Bus. Posting Group" <> '') AND (("Project No." <> '') OR ("Service Order No." <> '') OR ("Plant Type" <> '')) THEN BEGIN
                                                                  VATPostSetup.SETRANGE("VAT Bus. Posting Group", "VAT Bus. Posting Group");
                                                                  VATPostSetup.SETFILTER("VAT %",'<>0');
                                                                  IF VATPostSetup.FINDFIRST THEN BEGIN
                                                                    IF "Plant Type" <> '' THEN
                                                                      lvText := Text023  //DP00815
                                                                    ELSE BEGIN
                                                                      IF "Service Order No." = '' THEN
                                                                        lvText := ProjRec.TABLECAPTION
                                                                      ELSE
                                                                        lvText := ServOrderRec.TABLECAPTION;
                                                                    END;
                                                                    MESSAGE(
                                                                      Text000,
                                                                      FIELDCAPTION("VAT Bus. Posting Group"), "VAT Bus. Posting Group", lvText);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 250 ;   ;Distance            ;Decimal       ;FieldClass=Normal;
                                                   CaptionML=ENU=Distance;
                                                   DecimalPlaces=2:2;
                                                   MinValue=0 }
    { 260 ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 265 ;   ;Rate Type           ;Option        ;OnValidate=BEGIN
                                                                IF "Rate Type" <> "Rate Type"::Day THEN BEGIN
                                                                  TESTFIELD(Calendar, Calendar::None);
                                                                  PlantSetupRec.GET;
                                                                  PlantSetupRec.TESTFIELD("Type Division of Rate Comp.", PlantSetupRec."Type Division of Rate Comp."::Proportional);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Rate Type;
                                                   OptionCaptionML=ENU=Day,Week,,Month;
                                                   OptionString=Day,Week,,Month }
    { 270 ;   ;Invoice Method      ;Code10        ;TableRelation="Plant Invoice Method";
                                                   OnValidate=BEGIN
                                                                IF "Invoice Method" <> '' THEN BEGIN
                                                                  PlantSetupRec.GET;
                                                                  IF PlantSetupRec."Level One Loc. per Invoice" = PlantSetupRec."Level One Loc. per Invoice"::Setup THEN
                                                                    PlantSetupRec.TESTFIELD("One Location per Invoice");  //* Als op klantniveau, heeft geen zin om dit hier te testen
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Invoice Method }
    { 275 ;   ;Invoice Copies      ;Integer       ;OnValidate=BEGIN
                                                                IF "Invoice Copies" <> 0 THEN BEGIN
                                                                  PlantSetupRec.GET;
                                                                  IF PlantSetupRec."Level One Loc. per Invoice" = PlantSetupRec."Level One Loc. per Invoice"::Setup THEN
                                                                    PlantSetupRec.TESTFIELD("One Location per Invoice");  //* Als op klantniveau, heeft geen zin om dit hier te testen
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Invoice Copies;
                                                   MinValue=0;
                                                   MaxValue=9 }
    { 280 ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                IF "Bill-to Customer No." <> '' THEN
                                                                  TESTFIELD("Customer No.");
                                                                IF "Bill-to Customer No." <> xRec."Bill-to Customer No." THEN
                                                                  "Alternative Bill-to Address" := '';
                                                              END;

                                                   CaptionML=ENU=Bill-to Customer No. }
    { 285 ;   ;Alternative Bill-to Address;Code10 ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Bill-to Customer No.),
                                                                                               Billing Address=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                IF "Alternative Bill-to Address" <> '' THEN BEGIN
                                                                  TESTFIELD("Customer No.");
                                                                  TESTFIELD("Bill-to Customer No.");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Alternative Bill-to Address }
    { 290 ;   ;Rate Codes by Location;Boolean     ;OnValidate=BEGIN
                                                                IF "Rate Codes by Location" THEN BEGIN
                                                                  PlantSetupRec.GET;
                                                                  PlantSetupRec.TESTFIELD("Rate Codes", TRUE);
                                                                  TESTFIELD(Depot, FALSE);
                                                                  InsertDefaultRateCodesByLoc();
                                                                END ELSE BEGIN
                                                                  PlantLocRateCodeRec.RESET;
                                                                  PlantLocRateCodeRec.SETRANGE(Location, Code);
                                                                  IF NOT PlantLocRateCodeRec.ISEMPTY THEN
                                                                    ERROR(Text022);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Rate Codes by Location }
    { 300 ;   ;Creation Date       ;Date          ;CaptionML=ENU=Creation Date;
                                                   Editable=No }
    { 310 ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=No }
    { 320 ;   ;Location Code (Items);Code10       ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                //* DP00183
                                                                IF "Location Code (Items)" <> '' THEN
                                                                  TESTFIELD(Depot, TRUE);
                                                              END;

                                                   CaptionML=ENU=Location Code (Items);
                                                   Description=Default Location Code for Items on Depot }
    { 350 ;   ;No. of Linked Estimates;Integer    ;FieldClass=FlowField;
                                                   CalcFormula=Count(Estimate WHERE (Plant Location=FIELD(Code)));
                                                   CaptionML=ENU=No. of Linked Estimates;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 351 ;   ;Estimate No.        ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Estimate.No. WHERE (Plant Location=FIELD(Code)));
                                                   CaptionML=ENU=Estimate No.;
                                                   Editable=No }
    { 400 ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 405 ;   ;Relate to Filter    ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Relate to Filter;
                                                   OptionCaptionML=ENU=" ,Rental,Sales,Missing,Scrap,Buy Back,Hours,Transport,Sundry Costs,Plant Hours,Damage,Job Order,Load/Unload,Item,Item Buy-Back";
                                                   OptionString=[ ,Rental,Sales,Missing,Scrap,Buy Back,Hours,Transport,Sundry Costs,Plant Hours,Damage,Job Order,Load/Unload,Item,ItemBuyBack];
                                                   Description=Options must be the same in the tables 37, 113, 115, 11012572, 11020501 !!!! But first option must be ' ' (space) io empty }
    { 410 ;   ;Revenues            ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Plant Ledger Entry"."Total Price" WHERE (Plant Location=FIELD(Code),
                                                                                                             Posting Date=FIELD(Date Filter),
                                                                                                             Relate to=FIELD(Relate to Filter)));
                                                   CaptionML=ENU=Revenues;
                                                   Editable=No }
    { 420 ;   ;Kind of Rate        ;Option        ;InitValue=Intern;
                                                   CaptionML=ENU=Kind of Rate;
                                                   OptionCaptionML=ENU=Intern,Extern;
                                                   OptionString=Intern,Extern }
    { 430 ;   ;Damage Settlement   ;Boolean       ;OnValidate=BEGIN
                                                                IF "Damage Settlement" THEN
                                                                  TESTFIELD(Depot, FALSE);
                                                              END;

                                                   CaptionML=ENU=Damage Settlement }
    { 440 ;   ;Status              ;Option        ;OnValidate=VAR
                                                                lvProjRec@1100525000 : Record 11072003;
                                                                lvServOrderRec@1100525001 : Record 11012823;
                                                              BEGIN
                                                                IF Status = xRec.Status THEN
                                                                  EXIT;

                                                                CASE Status OF
                                                                  Status::Finished:
                                                                    IF xRec.Status <> Status::Archive THEN
                                                                      ERROR(Text007);
                                                                  Status::Archive:
                                                                    IF xRec.Status <> Status::Finished THEN
                                                                      ERROR(Text008);
                                                                  Status::Archived:
                                                                    ERROR(Text009);
                                                                END;

                                                                CASE xRec.Status OF
                                                                  xRec.Status::Archived:
                                                                    IF Status < xRec.Status THEN
                                                                      ERROR(Text011);
                                                                END;

                                                                IF (xRec.Status >= Status::Finished) AND (Status < Status::Finished) THEN BEGIN
                                                                  IF "Project No." <> '' THEN BEGIN
                                                                    IF "Company Name" <> '' THEN
                                                                      lvProjRec.CHANGECOMPANY("Company Name");
                                                                    lvProjRec.GET("Project No.");
                                                                    IF lvProjRec."Project Status" >= lvProjRec."Project Status"::Finished THEN BEGIN
                                                                      IF NOT CONFIRM(Text019, FALSE,
                                                                        lvProjRec.FIELDCAPTION("Project Status"), lvProjRec."Project Status", FIELDCAPTION("Project No."), "Project No.")
                                                                      THEN
                                                                        ERROR('');
                                                                    END;
                                                                  END;
                                                                  IF "Service Order No." <> '' THEN BEGIN
                                                                    IF "Company Name" <> '' THEN
                                                                      lvServOrderRec.CHANGECOMPANY("Company Name");
                                                                    lvServOrderRec.GET("Service Order No.");
                                                                    IF lvServOrderRec.Status = lvServOrderRec.Status::Finished THEN BEGIN
                                                                      IF NOT CONFIRM(Text019, FALSE,
                                                                        lvServOrderRec.FIELDCAPTION(Status), lvServOrderRec.Status, FIELDCAPTION("Service Order No."), "Service Order No.")
                                                                      THEN
                                                                        ERROR('');
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Production,Technical Finished,Administrative Finished,Finished,Archive,Archived;
                                                   OptionString=Production,Technical Finished,Administrative Finished,Finished,Archive,Archived }
    { 450 ;   ;VAT Location Code   ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=ENU=VAT Location Code }
    { 460 ;   ;E-Mail              ;Text80        ;CaptionML=ENU=E-Mail }
    { 462 ;   ;E-Mail Status PO Modified;Text80   ;CaptionML=ENU=E-Mail Status PO Modified;
                                                   Description=For Site Manager, only Released and Posted }
    { 470 ;   ;Contact Phone No.   ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Contact Phone No. }
    { 480 ;   ;Travel Distance     ;Decimal       ;CaptionML=ENU=Travel Distance;
                                                   MinValue=0 }
    { 490 ;   ;Travel Time         ;Decimal       ;CaptionML=ENU=Travel Time;
                                                   MinValue=0 }
    { 500 ;   ;Travel Cost Code    ;Code10        ;TableRelation="Travel Cost Code";
                                                   CaptionML=ENU=Travel Cost Code }
    { 510 ;   ;House No.           ;Code20        ;CaptionML=ENU=House No. }
    { 520 ;   ;House No. Ext.      ;Code10        ;CaptionML=ENU=House No. Extension }
    { 530 ;   ;BB with Sales Rate (L to L.);Boolean;
                                                   OnValidate=BEGIN
                                                                //C022786
                                                                IF "BB with Sales Rate (L to L.)" AND ("Project No." = '') THEN
                                                                  TESTFIELD("BB with Sales Rate (L to L.)", FALSE);
                                                              END;

                                                   CaptionML=ENU=Buy Back with Sales Rate (L->L Proj. same Comp.);
                                                   Description=Only for 'Other tranfers' for locations with project in the same company }
    { 540 ;   ;Internal Charge Plant Entry as;Option;
                                                   OnValidate=BEGIN
                                                                //DP00815
                                                                IF "Internal Charge Plant Entry as" <> 0 THEN
                                                                  TESTFIELD("Plant Type")
                                                                ELSE BEGIN
                                                                  IF "Plant Type" <> '' THEN
                                                                    TESTFIELD("Internal Charge Plant Entry as");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Internal Charge Plant Entry as;
                                                   OptionCaptionML=ENU=" ,Cost,Neg. Revenue";
                                                   OptionString=[ ,Cost,NegRevenue] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Customer No.,Project No.,Service Order No. }
    {    ;Company Name,Project No.,Service Order No.,Employee No. }
    {    ;Post Code,House No.,House No. Ext.       }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@11012007 : TextConst 'ENU=Warning! Make sure that in GL Setup for ''%1'' ''%2'' no VAT will be posted on ''%3''.';
      Text001@11012008 : TextConst 'ENU=Copy %1 Data?';
      Text002@11012009 : TextConst 'ENU=%1 %2 still has plant in stock.';
      Text002b@1100529000 : TextConst 'ENU=%1 %2 still has negative plant stock.';
      Text002c@1100525009 : TextConst 'ENU=%1 %2 still has negative stock of sales/buyback plant.';
      Text002d@1100528000 : TextConst 'ENU=Warning:';
      Text002e@1100528001 : TextConst 'ENU=This must be corrected asap!';
      Text003@11012010 : TextConst 'ENU=%1 %2 has plant which is not completely invoiced.';
      Text004@11012011 : TextConst 'ENU=%1 %2 is not posted yet.';
      Text005@11012012 : TextConst 'ENU=%1 %2 is not invoiced yet.';
      Text006@11012013 : TextConst 'ENU=%1 %2 is not invoiced completely.';
      PlantSetupRec@11012000 : Record 11012550;
      ProjSetupRec@1100525003 : Record 315;
      PlantLocRec@11012001 : Record 11012554;
      PostCode@11012002 : Record 225;
      CompRec@11012003 : Record 2000000006;
      ProjRec@11012004 : Record 11072003;
      ServOrderRec@1100525002 : Record 11012823;
      CustRec@11012005 : Record 18;
      VATPostSetup@1210190000 : Record 325;
      PlantInvRec@1210190001 : Record 11012555;
      PlantNeedRec@1210190002 : Record 11012579;
      GenBusPostingGrp@1210190004 : Record 250;
      PlantLedgerEntry@1100485002 : Record 11012572;
      PlantLedgerEntry2@1100485007 : Record 11012572;
      PlantLocRateCodeRec@1100525006 : Record 11020551;
      ElementFormat@1210190003 : Codeunit 11012022;
      DimMgt@1100525008 : Codeunit 408;
      ErrorTxt@11012006 : Text[250];
      Text007@1100485025 : TextConst 'ENU=Status not allowed, will be set by Plant Location Closing session';
      Text008@1100485001 : TextConst 'ENU=Status not allowed, close Plant Location first';
      Text009@1100485024 : TextConst 'ENU=Status not allowed, will be set by Plant Location Archiving session';
      Text011@1100485023 : TextConst 'ENU=Plant Location archived, turning back status not allowed';
      Text012@1100485005 : TextConst 'ENU=You cannot delete a Location if status is order.';
      Text013@1100485004 : TextConst 'ENU=Location is not archived, do you want to continue ?';
      Text014@1100485003 : TextConst 'ENU=Location not removed';
      Text015@1100485006 : TextConst 'ENU=%1 %2 has %3 %4.';
      Text016@1100485008 : TextConst 'ENU=Plant Seup voor use of discounts are all inactive.';
      Text017@1100485009 : TextConst 'ENU=Copy Job Address Data?';
      Text018@1100485012 : TextConst 'ENU=Copy Emplyee Data?';
      gPlantCompany@1100525000 : Text[30];
      Text019@1100525001 : TextConst 'ENU=Note: %1 is ''%2'', posting on %3 ''%4'' is not possible anymore. Are you sure?';
      Text020@1100525004 : TextConst 'ENU=%1 ''%2'' is not setup as %3 in %4 of company ''%5''.';
      Text021@1100525005 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      Text022@1100525007 : TextConst 'ENU=Not allowed, rate codes by location present.';
      DPA_Management@1100000999 : Codeunit 11012783;
      Text023@1100529001 : TextConst 'ENU=Plant - Internal Charge';

    PROCEDURE InitRecord@1100485001();
    BEGIN
      PlantSetupRec.GET;
      "Rate Type" := PlantSetupRec."Rate Type";
      "Damage Settlement" := PlantSetupRec."Default Damage Settlement Loc.";
    END;

    PROCEDURE AssistEdit@2(OldPlantLocRec@11012000 : Record 11012554);
    VAR
      ProjRec@11012001 : Record 11072003;
      PlantMgtCompRec@1100525002 : Record 11020586;
      CompanyData@1100528500 : Record 11020674;
      CurrCompNameMarked@1100525000 : Boolean;
      Counter@1100525001 : Integer;
      PageNo@1100525003 : Integer;
    BEGIN
      PlantSetupRec.GET;
      PlantLocRec := Rec;
      IF OldPlantLocRec."Company Name" = '' THEN
        OldPlantLocRec."Company Name" := COMPANYNAME;

      CompRec.RESET;
      CompRec.FINDSET;
      REPEAT
        PlantMgtCompRec.RESET;
        PlantMgtCompRec.CHANGECOMPANY(CompRec.Name);
        IF PlantMgtCompRec.READPERMISSION THEN BEGIN
          PlantMgtCompRec.SETRANGE("Plant Company", COMPANYNAME);  //* COMPANYNAME is the Plant Company
          IF NOT PlantMgtCompRec.ISEMPTY THEN BEGIN
            CompRec.MARK(TRUE);
            Counter := Counter + 1;
            IF (CompRec.Name = OldPlantLocRec."Company Name") THEN
              CurrCompNameMarked := TRUE;
          END;
        END;
      UNTIL CompRec.NEXT = 0;
      IF Counter = 0 THEN
        EXIT;

      CompRec.MARKEDONLY(TRUE);
      CompRec.FINDFIRST;
      IF Counter > 1 THEN BEGIN
        IF CurrCompNameMarked THEN
          CompRec.Name := OldPlantLocRec."Company Name";
        IF PAGE.RUNMODAL(PAGE::Companies, CompRec) <> ACTION::LookupOK THEN
          EXIT;
      END;
      ProjSetupRec.CHANGECOMPANY(CompRec.Name);
      ProjSetupRec.GET;
      //C025605.so
      //IF CompanyData.GET(CompRec.Name) THEN
      //  IF (PlantLocRec.Code = '') AND (CompanyData."Company No." <> '') AND
      //     (ProjSetupRec."Build Plant Location Code from" = ProjSetupRec."Build Plant Location Code from"::CompNoProjNo)
      //  THEN
      //    PlantLocRec.Code := CompanyData."Company No.";
      //C025605.eo
      //C025605.sn
      ProjSetupRec.TESTFIELD("Build Plant Location Code from");
      IF ProjSetupRec."Build Plant Location Code from" = ProjSetupRec."Build Plant Location Code from"::CompNoProjNo THEN BEGIN
        CompanyData.GET(CompRec.Name);
        CompanyData.TESTFIELD("Company No.");
      END;
      //C025605.en

      ProjRec.CHANGECOMPANY(CompRec.Name);
      IF (CompRec.Name = OldPlantLocRec."Company Name") THEN
        ProjRec."No." := OldPlantLocRec."Project No.";
      IF (CompRec.Name <> COMPANYNAME) THEN
        PageNo := PAGE::"Job List IC";
      IF PAGE.RUNMODAL(PageNo, ProjRec) = ACTION::LookupOK THEN BEGIN
        //PlantLocRec.Code := PlantLocRec.Code + ProjRec."No."  //C025605.o
        //C025605.sn
        IF ProjSetupRec."Build Plant Location Code from" = ProjSetupRec."Build Plant Location Code from"::CompNoProjNo THEN
          PlantLocRec.Code := CompanyData."Company No." + ProjRec."No."
        ELSE
          PlantLocRec.Code := PlantLocRec.Code + ProjRec."No.";
        //C025605.en
        PlantLocRec."Project No." := '';  //* First empty, because of Validate-Project in Validate-Company
        PlantLocRec.VALIDATE("Company Name", CompRec.Name);
        PlantLocRec.VALIDATE("Project No.", ProjRec."No.");
        Rec := PlantLocRec;
      END;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      MODIFY;
    END;

    PROCEDURE TransferProjectData@1();
    VAR
      lvEmplRec@1100525000 : Record 5200;
    BEGIN
      IF Description <> '' THEN
        IF NOT CONFIRM(Text001, FALSE, ProjRec.TABLECAPTION) THEN
          EXIT;

      Description := ProjRec.Description;
      "Description 2" := ProjRec."Description 2";
      "Search Name" :=  ProjRec."Search Description";
      Address := ProjRec.Address;
      "Address 2" := ProjRec."Address 2";
      City := ProjRec.City;
      //Contact := ProjRec.SiteManagerName; // SiteManagerName is a function where EmplRec is read, must be in the project company
      IF ProjRec."Site Manager" <> '' THEN BEGIN
        IF "Company Name" <> '' THEN
          lvEmplRec.CHANGECOMPANY("Company Name");
        IF lvEmplRec.GET(ProjRec."Site Manager") THEN BEGIN
          Contact := COPYSTR(lvEmplRec."Full Name", 1 , MAXSTRLEN(Contact));
          //C023677.so
          //"Contact Phone No." := lvEmplRec."Phone No.";  //C009645
          //"E-Mail" := lvEmplRec."E-Mail";                //C009645
          //C023677.so
          //C023677.sn
          "Contact Phone No." :=
            COPYSTR(lvEmplRec."Company Mobile Phone No." + ' / ' + lvEmplRec."Company Phone No.", 1, MAXSTRLEN("Contact Phone No."));
          "E-Mail" := lvEmplRec."Company E-Mail";
          //C023677.en
        END;
      END;
      County := ProjRec.County;
      "Post Code" := ProjRec."Post Code";
      "Phone No." := ProjRec."Phone No.";
      "Fax No." := ProjRec."Fax No.";
      "Territory Code" := ProjRec."Territory Code";
      Picture := ProjRec.Picture;
      "Starting Date" := ProjRec."Starting Date";
      "Ending Date" := ProjRec."Ending Date";
    END;

    PROCEDURE TransferServOrderData@1100525004();
    BEGIN
      IF Description <> '' THEN
        IF NOT CONFIRM(Text001, FALSE, ServOrderRec.TABLECAPTION) THEN
          EXIT;

      Description := ServOrderRec.Description;
      "Search Name" := Description;
      Address := ServOrderRec.Address;
      "Address 2" := ServOrderRec."Address 2";
      City := ServOrderRec.City;
      "Post Code" := ServOrderRec."Post Code";
      County := ServOrderRec.County;
      "Country/Region Code" := ServOrderRec."Country/Region Code";
      Contact := ServOrderRec."Contact Name";
      "Phone No." := ServOrderRec."Phone No.";
      "Fax No." := ServOrderRec."Fax No.";
      "E-Mail" := ServOrderRec."E-Mail";
      "Territory Code" := ServOrderRec."Territory Code";
      "Starting Date" := ServOrderRec."Starting Date";
      "Ending Date" := ServOrderRec."Ending Date";
    END;

    PROCEDURE CheckPlantPresent@8();
    BEGIN
    END;

    PROCEDURE CheckBlockFromOtherCompany@1100525002(IDocType@1100525002 : Option;IShipment@1100525001 : Boolean;ITransaction@1100525000 : Boolean;IPlantCompany@1100525003 : Text[30]);
    BEGIN
      gPlantCompany := IPlantCompany;
      CheckBlock(IDocType, IShipment, ITransaction);
    END;

    PROCEDURE CheckBlock@3(DocType@1210190002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';Shipment@1210190001 : Boolean;Transaction@1210190000 : Boolean);
    VAR
      lvProjRec@1100525002 : Record 11072003;
      lvProjElemRec@1100485000 : Record 11012010;
      lvServOrderRec@1100525003 : Record 11012823;
      lvCustRec@1100525000 : Record 18;
      lvPlantCompany@1100525001 : Text[30];
    BEGIN
      IF gPlantCompany <> '' THEN BEGIN
        IF gPlantCompany <> COMPANYNAME THEN
          lvPlantCompany := gPlantCompany;
        gPlantCompany := '';
      END;

      TESTFIELD(Blocked,FALSE);

      IF ((DocType <= DocType::Order) AND (Status >= Status::"Technical Finished")) OR
         ((DocType > DocType::Order) AND (Status >= Status::Finished)) THEN
        ERROR(Text015,TABLECAPTION, Code, FIELDCAPTION(Status), Status);

      IF "Project No." <> '' THEN BEGIN
        IF "Company Name" = '' THEN BEGIN
          IF lvPlantCompany <> '' THEN BEGIN
            lvProjRec.CHANGECOMPANY(lvPlantCompany);
            lvProjElemRec.CHANGECOMPANY(lvPlantCompany);
          END;
        END ELSE BEGIN
          lvProjRec.CHANGECOMPANY("Company Name");
          lvProjElemRec.CHANGECOMPANY("Company Name");
        END;
        lvProjRec.GET("Project No.");
        lvProjRec.CheckProjectStatus(1);
        IF Element <> '' THEN BEGIN // Call 6564
          lvProjElemRec.GET("Project No.",Element);
          lvProjElemRec.CheckProjectElementBlocked;
        END;
      END;

      IF "Service Order No." <> '' THEN BEGIN
        IF "Company Name" = '' THEN BEGIN
          IF lvPlantCompany <> '' THEN
            lvServOrderRec.CHANGECOMPANY(lvPlantCompany);
        END ELSE BEGIN
          lvServOrderRec.CHANGECOMPANY("Company Name");
        END;
        lvServOrderRec.GET("Service Order No.");
        lvServOrderRec.CheckStatus(1);
      END;

      IF "Customer No." <> '' THEN BEGIN
        IF lvPlantCompany <> '' THEN
          lvCustRec.CHANGECOMPANY(lvPlantCompany);
        lvCustRec.GET("Customer No.");
        lvCustRec.CheckBlockedCustOnDocs(lvCustRec,DocType,Shipment,Transaction);
      END;
    END;

    PROCEDURE CheckFinished@4(Company@11012000 : Text[30];LogErrors@1100485002 : Boolean;VAR TmpErrorRec@1100485001 : TEMPORARY Record 11012051) ErrorTxt : Text[250];
    VAR
      lvPlantSetupRec@1100485003 : Record 11012550;
      lPlantOrderRec@11012001 : Record 11012556;
      lExitOrderRec@11012002 : Record 11012559;
      ReturnLossOrderRec@1100525000 : Record 11012655;
      lPlantRentalCorrRec@11012003 : Record 11012565;
      lInventRec@11012004 : Record 11012555;
      lvHoursRevLineRec@1210190000 : Record 11012574;
      lvTransOrderRec@1100485005 : Record 11020505;
      lvPostedTransOrderRec@1100485006 : Record 11020507;
      lvPostedTransCostLineRec@1100485007 : Record 11020508;
      lvFound@1100485004 : Boolean;
      lvCheckInvoiced@1100485008 : Boolean;
      lvArgIdentification@1210190001 : Text[100];
      lvText000@1100485000 : TextConst 'ENU=" - Cost"';
      MessTxt@1100525001 : Text[250];
    BEGIN
      IF Company = '' THEN
        Company := COMPANYNAME;

      lvPlantSetupRec.CHANGECOMPANY(Company);
      lvPlantSetupRec.GET;

      IF Depot OR ("Employee No." <> '') THEN
        lvCheckInvoiced := FALSE
      ELSE
        lvCheckInvoiced := TRUE;

      lInventRec.CHANGECOMPANY(Company);

      lInventRec.RESET;
      lInventRec.SETCURRENTKEY(Removed,Location);
      lInventRec.SETRANGE(Removed,FALSE);
      lInventRec.SETRANGE(Location,Code);
      lInventRec.SETRANGE(Sold,FALSE);
      lInventRec.SETFILTER(Quantity, '>%1', 0.000005);  //DP00241.c (16035)
      IF lInventRec.FINDFIRST THEN BEGIN
        ErrorTxt := STRSUBSTNO(Text002,TABLECAPTION,Code);
        IF LogErrors THEN
          AddError(ErrorTxt, TmpErrorRec)
        ELSE
          EXIT(ErrorTxt);
      END;
      //DP00241.sn (16035)
      lInventRec.SETFILTER(Quantity, '<%1', -0.000005);
      IF lInventRec.FINDFIRST THEN BEGIN
        IF NOT lvPlantSetupRec."Ignore Neg. Stock on Close Loc" THEN BEGIN  //C021870
          ErrorTxt := STRSUBSTNO(Text002b,TABLECAPTION,Code);
          IF LogErrors THEN
            AddError(ErrorTxt, TmpErrorRec)
          ELSE
            EXIT(ErrorTxt);
        END ELSE BEGIN  //C021870
          MessTxt := Text002d + ' ' + STRSUBSTNO(Text002b,TABLECAPTION,Code) + ' ' + Text002e;  // Only warning, do not use ErrorTxt
          IF LogErrors THEN
            AddError(MessTxt, TmpErrorRec)
        END;
      END;
      //DP00241.en
      //C004819.sn
      lInventRec.SETRANGE(Sold,TRUE);
      lInventRec.SETFILTER(Quantity, '<%1', -0.000005);
      IF lInventRec.FINDFIRST THEN BEGIN
        MessTxt := Text002d + ' ' + STRSUBSTNO(Text002c,TABLECAPTION,Code);  // Only warning, do not use ErrorTxt
        IF LogErrors THEN
          AddError(MessTxt, TmpErrorRec)
      END;
      //C004819.en

      IF lvCheckInvoiced THEN BEGIN
        lInventRec.RESET;
        lInventRec.SETCURRENTKEY("Completely Invoiced",Location);
        lInventRec.SETRANGE("Completely Invoiced",FALSE);
        lInventRec.SETRANGE(Location,Code);
        lInventRec.SETFILTER(Quantity,'>0');
        lInventRec.SETRANGE(Sold,FALSE);
        IF lInventRec.FINDFIRST THEN BEGIN
          ErrorTxt := STRSUBSTNO(Text003,TABLECAPTION,Code);
          IF LogErrors THEN
            AddError(ErrorTxt, TmpErrorRec)
          ELSE
            EXIT(ErrorTxt);
        END;
        lInventRec.SETRANGE("Completely Invoiced",TRUE);
        lInventRec.SETFILTER("Invoice Status",'%1|%2',lInventRec."Invoice Status"::Proposal,lInventRec."Invoice Status"::"Temporary");
        IF lInventRec.FINDFIRST THEN BEGIN
          ErrorTxt := STRSUBSTNO(Text003,TABLECAPTION,Code);
          IF LogErrors THEN
            AddError(ErrorTxt, TmpErrorRec)
          ELSE
            EXIT(ErrorTxt);
        END;
      END;

      lPlantOrderRec.CHANGECOMPANY(Company);

      //* Plant Order 'From Location' (Sales / BUY BACK)
      lPlantOrderRec.RESET;
      lPlantOrderRec.SETCURRENTKEY(Posted,"From Location Invoiced","From Location");
      lPlantOrderRec.SETRANGE(Posted,FALSE);
      lPlantOrderRec.SETRANGE("From Location",Code);
      IF lPlantOrderRec.FINDFIRST THEN BEGIN
        ErrorTxt := STRSUBSTNO(Text004,lPlantOrderRec.TABLECAPTION,lPlantOrderRec."No.");
        IF LogErrors THEN
          AddError(ErrorTxt, TmpErrorRec)
        ELSE
          EXIT(ErrorTxt);
      END;

      IF lvCheckInvoiced THEN BEGIN
        lPlantOrderRec.SETRANGE(Posted,TRUE);
        lPlantOrderRec.SETRANGE("From Location Invoiced",FALSE);
        lPlantOrderRec.SETFILTER(Type, '<>%1', lPlantOrderRec.Type::"Negative Inventory Correction");
        IF lPlantOrderRec.FINDFIRST THEN BEGIN
          ErrorTxt := STRSUBSTNO(Text005,lPlantOrderRec.TABLECAPTION,lPlantOrderRec."No.");
          IF LogErrors THEN
            AddError(ErrorTxt, TmpErrorRec)
          ELSE
            EXIT(ErrorTxt);
        END;

        lPlantOrderRec.SETRANGE("From Location Invoiced",TRUE);
        lPlantOrderRec.SETFILTER(
          "From Location Invoice Status",'%1|%2',
          lPlantOrderRec."From Location Invoice Status"::Proposal,
          lPlantOrderRec."From Location Invoice Status"::"Temporary");
        IF lPlantOrderRec.FINDSET(FALSE, FALSE) THEN
          REPEAT
            IF OrderSalesBuyBackLinesPresent(lPlantOrderRec, Company) THEN BEGIN
              ErrorTxt := STRSUBSTNO(Text006,lPlantOrderRec.TABLECAPTION,lPlantOrderRec."No.");
              IF LogErrors THEN
                AddError(ErrorTxt, TmpErrorRec)
              ELSE
                EXIT(ErrorTxt);
            END;
          UNTIL lPlantOrderRec.NEXT = 0;
      END;

      //* Plant Order 'To Location' (SALES / Buy Back)
      lPlantOrderRec.RESET;
      lPlantOrderRec.SETCURRENTKEY(Posted,"To Location Invoiced","To Location");
      lPlantOrderRec.SETRANGE(Posted,FALSE);
      lPlantOrderRec.SETRANGE("To Location",Code);
      IF lPlantOrderRec.FINDFIRST THEN BEGIN
        ErrorTxt := STRSUBSTNO(Text004,lPlantOrderRec.TABLECAPTION,lPlantOrderRec."No.");
        IF LogErrors THEN
          AddError(ErrorTxt, TmpErrorRec)
        ELSE
          EXIT(ErrorTxt);
      END;

      IF lvCheckInvoiced THEN BEGIN
        lPlantOrderRec.SETRANGE(Posted,TRUE);
        lPlantOrderRec.SETRANGE("To Location Invoiced",FALSE);
        lPlantOrderRec.SETFILTER(Type, '<>%1', lPlantOrderRec.Type::"Negative Inventory Correction");
        IF lPlantOrderRec.FINDFIRST THEN BEGIN
          ErrorTxt := STRSUBSTNO(Text005,lPlantOrderRec.TABLECAPTION,lPlantOrderRec."No.");
          IF LogErrors THEN
            AddError(ErrorTxt, TmpErrorRec)
          ELSE
            EXIT(ErrorTxt);
        END;

        lPlantOrderRec.SETRANGE("To Location Invoiced",TRUE);
        lPlantOrderRec.SETFILTER(
          "To Location Invoice Status",'%1|%2',
          lPlantOrderRec."To Location Invoice Status"::Proposal,
          lPlantOrderRec."To Location Invoice Status"::"Temporary");
        IF lPlantOrderRec.FINDSET(FALSE, FALSE) THEN
          REPEAT
            IF OrderSalesBuyBackLinesPresent(lPlantOrderRec, Company) THEN BEGIN
              ErrorTxt := STRSUBSTNO(Text006,lPlantOrderRec.TABLECAPTION,lPlantOrderRec."No.");
              IF LogErrors THEN
                AddError(ErrorTxt, TmpErrorRec)
              ELSE
                EXIT(ErrorTxt);
            END;
          UNTIL lPlantOrderRec.NEXT = 0;
      END;

      //* Plant Order 'From Location' (Cost)
      IF lvCheckInvoiced THEN BEGIN
        lPlantOrderRec.RESET;
        lPlantOrderRec.SETCURRENTKEY(Posted,"Order Cost Invoiced","From Location");
        lPlantOrderRec.SETRANGE(Posted,TRUE);
        lPlantOrderRec.SETRANGE("From Location",Code);
        lPlantOrderRec.SETRANGE(Type, lPlantOrderRec.Type::Removal);

        lPlantOrderRec.SETRANGE("Order Cost Invoiced",FALSE);
        IF lPlantOrderRec.FINDSET(FALSE, FALSE) THEN
          REPEAT
            IF OrderCostLinesPresent(lPlantOrderRec, Company) THEN BEGIN
              ErrorTxt := STRSUBSTNO(Text005,lPlantOrderRec.TABLECAPTION+lvText000,lPlantOrderRec."No.");
              IF LogErrors THEN
                AddError(ErrorTxt, TmpErrorRec)
              ELSE
                EXIT(ErrorTxt);
            END;
          UNTIL lPlantOrderRec.NEXT = 0;

        lPlantOrderRec.SETRANGE("Order Cost Invoiced",TRUE);
        lPlantOrderRec.SETFILTER("Order Cost Invoice Status",'%1|%2',
          lPlantOrderRec."Order Cost Invoice Status"::Proposal,lPlantOrderRec."Order Cost Invoice Status"::"Temporary");
        IF lPlantOrderRec.FINDSET(FALSE, FALSE) THEN
          REPEAT
            IF OrderCostLinesPresent(lPlantOrderRec, Company) THEN BEGIN
              ErrorTxt := STRSUBSTNO(Text006,lPlantOrderRec.TABLECAPTION+lvText000,lPlantOrderRec."No.");
              IF LogErrors THEN
                AddError(ErrorTxt, TmpErrorRec)
              ELSE
                EXIT(ErrorTxt);
            END;
          UNTIL lPlantOrderRec.NEXT = 0;
      END;

      //* Plant Order 'To Location' (Cost)
      IF lvCheckInvoiced THEN BEGIN
        lPlantOrderRec.RESET;
        lPlantOrderRec.SETRANGE(Posted,TRUE);
        lPlantOrderRec.SETCURRENTKEY(Posted,"Order Cost Invoiced","To Location");
        lPlantOrderRec.SETRANGE("To Location",Code);
        lPlantOrderRec.SETFILTER(Type, '%1|%2', lPlantOrderRec.Type::Arrival, lPlantOrderRec.Type::"Other Transfers");

        lPlantOrderRec.SETRANGE("Order Cost Invoiced",FALSE);
        IF lPlantOrderRec.FINDSET(FALSE, FALSE) THEN
          REPEAT
            IF OrderCostLinesPresent(lPlantOrderRec, Company) THEN BEGIN
              ErrorTxt := STRSUBSTNO(Text005,lPlantOrderRec.TABLECAPTION+lvText000,lPlantOrderRec."No.");
              IF LogErrors THEN
                AddError(ErrorTxt, TmpErrorRec)
              ELSE
                EXIT(ErrorTxt);
            END;
          UNTIL lPlantOrderRec.NEXT = 0;

        lPlantOrderRec.SETRANGE("Order Cost Invoiced",TRUE);
        lPlantOrderRec.SETFILTER("Order Cost Invoice Status",'%1|%2',
          lPlantOrderRec."Order Cost Invoice Status"::Proposal, lPlantOrderRec."Order Cost Invoice Status"::"Temporary");
        IF lPlantOrderRec.FINDSET(FALSE, FALSE) THEN
          REPEAT
            IF OrderCostLinesPresent(lPlantOrderRec, Company) THEN BEGIN
              ErrorTxt := STRSUBSTNO(Text006,lPlantOrderRec.TABLECAPTION+lvText000,lPlantOrderRec."No.");
              IF LogErrors THEN
                AddError(ErrorTxt, TmpErrorRec)
              ELSE
                EXIT(ErrorTxt);
            END;
          UNTIL lPlantOrderRec.NEXT = 0;
      END;

      lExitOrderRec.CHANGECOMPANY(Company);

      lExitOrderRec.RESET;
      lExitOrderRec.SETCURRENTKEY(Posted,Location,Invoiced);
      lExitOrderRec.SETRANGE(Posted,FALSE);
      lExitOrderRec.SETRANGE(Location,Code);
      IF lExitOrderRec.FINDFIRST THEN BEGIN
        ErrorTxt := STRSUBSTNO(Text004,lExitOrderRec.TABLECAPTION,lExitOrderRec."No.");
        IF LogErrors THEN
          AddError(ErrorTxt, TmpErrorRec)
        ELSE
          EXIT(ErrorTxt);
      END;

      IF lvCheckInvoiced THEN BEGIN
        lExitOrderRec.SETRANGE(Posted,TRUE);
        lExitOrderRec.SETRANGE(Invoiced,TRUE);
        lExitOrderRec.SETFILTER(
          "Invoice Status",'%1|%2',
          lExitOrderRec."Invoice Status"::Proposal,
          lExitOrderRec."Invoice Status"::"Temporary");
        IF lExitOrderRec.FINDSET(FALSE, FALSE) THEN
          REPEAT
            IF ExitOrderLinesPresent(lExitOrderRec, Company) THEN BEGIN
              ErrorTxt := STRSUBSTNO(Text006,lExitOrderRec.TABLECAPTION,lExitOrderRec."No.");
              IF LogErrors THEN
                AddError(ErrorTxt, TmpErrorRec)
              ELSE
                EXIT(ErrorTxt);
            END;
            IF ExitOrderCostLinesPresent(lExitOrderRec, Company) THEN BEGIN
              ErrorTxt := STRSUBSTNO(Text006,lExitOrderRec.TABLECAPTION,lExitOrderRec."No.");
              IF LogErrors THEN
                AddError(ErrorTxt, TmpErrorRec)
              ELSE
                EXIT(ErrorTxt);
            END;
          UNTIL lExitOrderRec.NEXT = 0;
      END;

      ReturnLossOrderRec.CHANGECOMPANY(Company);

      ReturnLossOrderRec.RESET;
      ReturnLossOrderRec.SETCURRENTKEY(Posted,Location,Invoiced);
      ReturnLossOrderRec.SETRANGE(Posted,FALSE);
      ReturnLossOrderRec.SETRANGE(Location,Code);
      IF ReturnLossOrderRec.FINDFIRST THEN BEGIN
        ErrorTxt := STRSUBSTNO(Text004,ReturnLossOrderRec.TABLECAPTION,ReturnLossOrderRec."No.");
        IF LogErrors THEN
          AddError(ErrorTxt, TmpErrorRec)
        ELSE
          EXIT(ErrorTxt);
      END;

      IF lvCheckInvoiced THEN BEGIN
        ReturnLossOrderRec.SETRANGE(Posted,TRUE);
        ReturnLossOrderRec.SETRANGE(Invoiced,TRUE);
        ReturnLossOrderRec.SETFILTER(
          "Invoice Status",'%1|%2',
          ReturnLossOrderRec."Invoice Status"::Proposal,
          ReturnLossOrderRec."Invoice Status"::"Temporary");
        IF ReturnLossOrderRec.FINDSET(FALSE, FALSE) THEN
          REPEAT
            IF ReturnedLossOrderLinesPresent(ReturnLossOrderRec, Company) THEN BEGIN
              ErrorTxt := STRSUBSTNO(Text006,ReturnLossOrderRec.TABLECAPTION,ReturnLossOrderRec."No.");
              IF LogErrors THEN
                AddError(ErrorTxt, TmpErrorRec)
              ELSE
                EXIT(ErrorTxt);
            END;
          UNTIL ReturnLossOrderRec.NEXT = 0;
      END;

      lPlantRentalCorrRec.CHANGECOMPANY(Company);

      lPlantRentalCorrRec.RESET;
      lPlantRentalCorrRec.SETCURRENTKEY(Posted,"Debet Location Invoiced","Debit Location");
      lPlantRentalCorrRec.SETRANGE(Posted,FALSE);
      lPlantRentalCorrRec.SETRANGE("Debit Location",Code);
      IF lPlantRentalCorrRec.FINDFIRST THEN BEGIN
        ErrorTxt := STRSUBSTNO(Text004,lPlantRentalCorrRec.TABLECAPTION,lPlantRentalCorrRec."No.");
        IF LogErrors THEN
          AddError(ErrorTxt, TmpErrorRec)
        ELSE
          EXIT(ErrorTxt);
      END;

      IF lvCheckInvoiced THEN BEGIN
        lPlantRentalCorrRec.SETRANGE(Posted,TRUE);
        lPlantRentalCorrRec.SETRANGE("Debet Location Invoiced",FALSE);
        IF lPlantRentalCorrRec.FINDFIRST THEN BEGIN
          ErrorTxt := STRSUBSTNO(Text005,lPlantRentalCorrRec.TABLECAPTION,lPlantRentalCorrRec."No.");
          IF LogErrors THEN
            AddError(ErrorTxt, TmpErrorRec)
          ELSE
            EXIT(ErrorTxt);
        END;

        lPlantRentalCorrRec.SETRANGE("Debet Location Invoiced",TRUE);
        lPlantRentalCorrRec.SETFILTER(
          "Invoice Status Debit Location",'%1|%2',
          lPlantRentalCorrRec."Invoice Status Debit Location"::Proposal,
          lPlantRentalCorrRec."Invoice Status Debit Location"::"Temporary");
        IF lPlantRentalCorrRec.FINDFIRST THEN BEGIN
          ErrorTxt := STRSUBSTNO(Text006,lPlantRentalCorrRec.TABLECAPTION,lPlantRentalCorrRec."No.");
          IF LogErrors THEN
            AddError(ErrorTxt, TmpErrorRec)
          ELSE
            EXIT(ErrorTxt);
        END;
      END;

      lPlantRentalCorrRec.RESET;
      lPlantRentalCorrRec.SETCURRENTKEY(Posted,"Credit Location Invoiced","Credit Location");
      lPlantRentalCorrRec.SETRANGE(Posted,FALSE);
      lPlantRentalCorrRec.SETRANGE("Credit Location",Code);
      IF lPlantRentalCorrRec.FINDFIRST THEN BEGIN
        ErrorTxt := STRSUBSTNO(Text004,lPlantRentalCorrRec.TABLECAPTION,lPlantRentalCorrRec."No.");
        IF LogErrors THEN
          AddError(ErrorTxt, TmpErrorRec)
        ELSE
          EXIT(ErrorTxt);
      END;

      IF lvCheckInvoiced THEN BEGIN
        lPlantRentalCorrRec.SETRANGE(Posted,TRUE);
        lPlantRentalCorrRec.SETRANGE("Credit Location Invoiced",FALSE);
        IF lPlantRentalCorrRec.FINDFIRST THEN BEGIN
          ErrorTxt := STRSUBSTNO(Text005,lPlantRentalCorrRec.TABLECAPTION,lPlantRentalCorrRec."No.");
          IF LogErrors THEN
            AddError(ErrorTxt, TmpErrorRec)
          ELSE
            EXIT(ErrorTxt);
        END;

        lPlantRentalCorrRec.SETRANGE("Credit Location Invoiced",TRUE);
        lPlantRentalCorrRec.SETFILTER(
          "Invoice Status Credit Location",'%1|%2',
          lPlantRentalCorrRec."Invoice Status Credit Location"::Proposal,
          lPlantRentalCorrRec."Invoice Status Credit Location"::"Temporary");
        IF lPlantRentalCorrRec.FINDFIRST THEN BEGIN
          ErrorTxt := STRSUBSTNO(Text006,lPlantRentalCorrRec.TABLECAPTION,lPlantRentalCorrRec."No.");
          IF LogErrors THEN
            AddError(ErrorTxt, TmpErrorRec)
          ELSE
            EXIT(ErrorTxt);
        END;
      END;

      //Hours Revenues
      lvHoursRevLineRec.CHANGECOMPANY(Company);

      lvHoursRevLineRec.RESET;
      lvHoursRevLineRec.SETCURRENTKEY(Invoiced, Status, "Plant Location", Year, Week, "Plant Type", "Plant No.");
      lvHoursRevLineRec.SETRANGE(Status, lvHoursRevLineRec.Status::Open);
      lvHoursRevLineRec.SETRANGE("Plant Location", Code);
      IF lvHoursRevLineRec.FINDFIRST THEN BEGIN
        lvArgIdentification := STRSUBSTNO('%1', lvHoursRevLineRec.Year) + '-' + STRSUBSTNO('%1', lvHoursRevLineRec.Week) + ', ' +
                               lvHoursRevLineRec."Plant Type" + '-' + lvHoursRevLineRec."Plant No." + ', ' +
                               STRSUBSTNO('%1', lvHoursRevLineRec."Line No.");
        ErrorTxt := STRSUBSTNO(Text004, lvHoursRevLineRec.TABLECAPTION, lvArgIdentification);
        IF LogErrors THEN
          AddError(ErrorTxt, TmpErrorRec)
        ELSE
          EXIT(ErrorTxt);
      END;

      IF lvCheckInvoiced THEN BEGIN
        lvHoursRevLineRec.SETRANGE(Invoiced, FALSE);
        lvHoursRevLineRec.SETRANGE(Status, lvHoursRevLineRec.Status::Posted);
        lvHoursRevLineRec.SETRANGE(Type, lvHoursRevLineRec.Type::Hours); //*C-019470.o
        lvHoursRevLineRec.SETFILTER(Type, '%1|%2',lvHoursRevLineRec.Type::Hours,lvHoursRevLineRec.Type::"Unmanned Hours"); //C-019470
        lvHoursRevLineRec.SETFILTER("Total Line", '<>%1', 0);
        lvHoursRevLineRec.SETRANGE(Amount);
        lvFound := lvHoursRevLineRec.FINDFIRST;
        IF NOT lvFound THEN BEGIN
          lvHoursRevLineRec.SETRANGE(Type, lvHoursRevLineRec.Type::Expenses);
          lvHoursRevLineRec.SETRANGE("Total Line");
          lvHoursRevLineRec.SETFILTER(Amount, '<>%1', 0);
          lvFound := lvHoursRevLineRec.FINDFIRST;
        END;
        IF lvFound THEN BEGIN
          lvArgIdentification := STRSUBSTNO('%1', lvHoursRevLineRec.Year) + '-' + STRSUBSTNO('%1', lvHoursRevLineRec.Week) + ', ' +
                                 lvHoursRevLineRec."Plant Type" + '-' + lvHoursRevLineRec."Plant No." + ', ' +
                                 STRSUBSTNO('%1', lvHoursRevLineRec."Line No.");
          ErrorTxt := STRSUBSTNO(Text005, lvHoursRevLineRec.TABLECAPTION, lvArgIdentification);
          IF LogErrors THEN
            AddError(ErrorTxt, TmpErrorRec)
          ELSE
            EXIT(ErrorTxt);
        END;

        lvHoursRevLineRec.SETRANGE(Invoiced,TRUE);
        lvHoursRevLineRec.SETFILTER("Invoice Status",'%1|%2',
                                    lvHoursRevLineRec."Invoice Status"::Proposal,
                                    lvHoursRevLineRec."Invoice Status"::"Temporary");
        lvHoursRevLineRec.SETRANGE(Type);
        lvHoursRevLineRec.SETRANGE("Total Line");
        lvHoursRevLineRec.SETRANGE(Amount);
        IF lvHoursRevLineRec.FINDFIRST THEN BEGIN
          lvArgIdentification := STRSUBSTNO('%1', lvHoursRevLineRec.Year) + '-' + STRSUBSTNO('%1', lvHoursRevLineRec.Week) + ', ' +
                                 lvHoursRevLineRec."Plant Type" + '-' + lvHoursRevLineRec."Plant No." + ', ' +
                                 STRSUBSTNO('%1', lvHoursRevLineRec."Line No.");
          ErrorTxt := STRSUBSTNO(Text006, lvHoursRevLineRec.TABLECAPTION, lvArgIdentification);
          IF LogErrors THEN
            AddError(ErrorTxt, TmpErrorRec)
          ELSE
            EXIT(ErrorTxt);
        END;
      END;

      IF lvPlantSetupRec."Transport Orders" THEN BEGIN
        lvTransOrderRec.CHANGECOMPANY(Company);
        lvPostedTransOrderRec.CHANGECOMPANY(Company);
        lvPostedTransCostLineRec.CHANGECOMPANY(Company);

        //* Transport Order 'From Location'
        lvTransOrderRec.RESET;
        lvTransOrderRec.SETCURRENTKEY("From Location");
        lvTransOrderRec.SETRANGE("From Location",Code);
        IF lvTransOrderRec.FINDFIRST THEN BEGIN
          ErrorTxt := STRSUBSTNO(Text004,lvTransOrderRec.TABLECAPTION,lvTransOrderRec."No.");
          IF LogErrors THEN
            AddError(ErrorTxt, TmpErrorRec)
          ELSE
            EXIT(ErrorTxt);
        END;

        //* Transport Order 'To Location'
        lvTransOrderRec.RESET;
        lvTransOrderRec.SETCURRENTKEY("To Location");
        lvTransOrderRec.SETRANGE("To Location",Code);
        IF lvTransOrderRec.FINDFIRST THEN BEGIN
          ErrorTxt := STRSUBSTNO(Text004,lvTransOrderRec.TABLECAPTION,lvTransOrderRec."No.");
          IF LogErrors THEN
            AddError(ErrorTxt, TmpErrorRec)
          ELSE
            EXIT(ErrorTxt);
        END;

        IF lvCheckInvoiced THEN BEGIN
          //* Posted Transport Order 'From Location'
          lvPostedTransOrderRec.RESET;
          lvPostedTransOrderRec.SETCURRENTKEY("From Location Invoiced","From Location");
          lvPostedTransOrderRec.SETRANGE("From Location Invoiced",FALSE);
          lvPostedTransOrderRec.SETRANGE("From Location",Code);
          IF lvPostedTransOrderRec.FINDFIRST THEN BEGIN
            REPEAT
              lvPostedTransCostLineRec.RESET;
              lvPostedTransCostLineRec.SETRANGE("Transport Order No.", lvPostedTransOrderRec."No.");
              lvPostedTransCostLineRec.SETFILTER(Type, '<>%1', lvPostedTransCostLineRec.Type::Text);
              IF (lvPostedTransOrderRec."Perc. From Location" <> 0) THEN BEGIN
                lvPostedTransCostLineRec.SETRANGE("Invoice-to", lvPostedTransCostLineRec."Invoice-to"::" ");
                IF lvPostedTransCostLineRec.FINDFIRST THEN BEGIN
                  ErrorTxt := STRSUBSTNO(Text005,lvPostedTransOrderRec.TABLECAPTION,lvPostedTransOrderRec."No.");
                  IF LogErrors THEN
                    AddError(ErrorTxt, TmpErrorRec)
                  ELSE
                    EXIT(ErrorTxt);
                END;
              END;
              lvPostedTransCostLineRec.SETFILTER("Invoice-to", '%1|%2',
                lvPostedTransCostLineRec."Invoice-to"::Location, lvPostedTransCostLineRec."Invoice-to"::"From Location");
              IF lvPostedTransCostLineRec.FINDFIRST THEN BEGIN
                ErrorTxt := STRSUBSTNO(Text005,lvPostedTransOrderRec.TABLECAPTION,lvPostedTransOrderRec."No.");
                IF LogErrors THEN
                  AddError(ErrorTxt, TmpErrorRec)
                ELSE
                  EXIT(ErrorTxt);
              END;
            UNTIL lvPostedTransOrderRec.NEXT = 0;
          END;

          lvPostedTransOrderRec.SETRANGE("From Location Invoiced",TRUE);
          lvPostedTransOrderRec.SETFILTER("From Location Invoice No.", '<>%1', '');
          lvPostedTransOrderRec.SETFILTER(
            "From Location Invoice Status",'%1|%2',
            lvPostedTransOrderRec."From Location Invoice Status"::Proposal,
            lvPostedTransOrderRec."From Location Invoice Status"::"Temporary");
          IF lvPostedTransOrderRec.FINDFIRST THEN BEGIN
            ErrorTxt := STRSUBSTNO(Text006,lvPostedTransOrderRec.TABLECAPTION,lvPostedTransOrderRec."No.");
            IF LogErrors THEN
              AddError(ErrorTxt, TmpErrorRec)
            ELSE
              EXIT(ErrorTxt);
          END;

          //* Posted Transport Order 'To Location'
          lvPostedTransOrderRec.RESET;
          lvPostedTransOrderRec.SETCURRENTKEY("To Location Invoiced","To Location");
          lvPostedTransOrderRec.SETRANGE("To Location Invoiced",FALSE);
          lvPostedTransOrderRec.SETRANGE("To Location",Code);
          IF lvPostedTransOrderRec.FINDFIRST THEN BEGIN
            REPEAT
              lvPostedTransCostLineRec.RESET;
              lvPostedTransCostLineRec.SETRANGE("Transport Order No.", lvPostedTransOrderRec."No.");
              lvPostedTransCostLineRec.SETFILTER(Type, '<>%1', lvPostedTransCostLineRec.Type::Text);
              IF (lvPostedTransOrderRec."Perc. To Location" <> 0) THEN BEGIN
                lvPostedTransCostLineRec.SETRANGE("Invoice-to", lvPostedTransCostLineRec."Invoice-to"::" ");
                IF lvPostedTransCostLineRec.FINDFIRST THEN BEGIN
                  ErrorTxt := STRSUBSTNO(Text005,lvPostedTransOrderRec.TABLECAPTION,lvPostedTransOrderRec."No.");
                  IF LogErrors THEN
                    AddError(ErrorTxt, TmpErrorRec)
                  ELSE
                    EXIT(ErrorTxt);
                END;
              END;
              lvPostedTransCostLineRec.SETFILTER("Invoice-to", '%1|%2',
                lvPostedTransCostLineRec."Invoice-to"::Location, lvPostedTransCostLineRec."Invoice-to"::"To Location");
              IF lvPostedTransCostLineRec.FINDFIRST THEN BEGIN
                ErrorTxt := STRSUBSTNO(Text005,lvPostedTransOrderRec.TABLECAPTION,lvPostedTransOrderRec."No.");
                IF LogErrors THEN
                  AddError(ErrorTxt, TmpErrorRec)
                ELSE
                  EXIT(ErrorTxt);
              END;
            UNTIL lvPostedTransOrderRec.NEXT = 0;
          END;

          lvPostedTransOrderRec.SETRANGE("To Location Invoiced",TRUE);
          lvPostedTransOrderRec.SETFILTER("To Location Invoice No.", '<>%1', '');
          lvPostedTransOrderRec.SETFILTER(
            "To Location Invoice Status",'%1|%2',
            lvPostedTransOrderRec."To Location Invoice Status"::Proposal,
            lvPostedTransOrderRec."To Location Invoice Status"::"Temporary");
          IF lvPostedTransOrderRec.FINDFIRST THEN BEGIN
            ErrorTxt := STRSUBSTNO(Text006,lvPostedTransOrderRec.TABLECAPTION,lvPostedTransOrderRec."No.");
            IF LogErrors THEN
              AddError(ErrorTxt, TmpErrorRec)
            ELSE
              EXIT(ErrorTxt);
          END;
        END;
      END;
    END;

    PROCEDURE CheckFinishedTransProjLevel@1100485005(IProjNo@1100485004 : Code[20]) : Text[250];
    VAR
      lvPlantSetupRec@1100485003 : Record 11012550;
      lvTransOrderRec@1100485000 : Record 11020505;
      lvPostedTransOrderRec@1100485002 : Record 11020507;
      lvPostedTransCostLineRec@1100485001 : Record 11020508;
    BEGIN
      //* Transportkosten kunnen ook direct voor een project zijn. Bij het afsluiten van een project (CU 11012046) moet getest
      //* worden of deze kosten al gefactureerd zijn.
      //* NB: Op dit moment kan op de transportorder geen bedrijf voor het project ingegeven worden, dus project en transportorder
      //* zitten in hetzelfde bedrijf. Daarom zit in deze functie geen 'CHANGECOMPANY'.

      lvPlantSetupRec.GET;

      IF lvPlantSetupRec."Transport Orders" THEN BEGIN

        //* Transport Order 'Project'
        lvTransOrderRec.RESET;
        lvTransOrderRec.SETCURRENTKEY("Project No.");
        lvTransOrderRec.SETRANGE("Project No.",IProjNo);
        IF lvTransOrderRec.FINDFIRST THEN
          EXIT(STRSUBSTNO(Text004,lvTransOrderRec.TABLECAPTION,lvTransOrderRec."No."));

        //* Posted Transport Order 'Project'
        lvPostedTransOrderRec.RESET;
        lvPostedTransOrderRec.SETCURRENTKEY("Project Invoiced","Project No.");
        lvPostedTransOrderRec.SETRANGE("Project Invoiced",FALSE);
        lvPostedTransOrderRec.SETRANGE("Project No.",IProjNo);
        IF lvPostedTransOrderRec.FINDFIRST THEN BEGIN
          REPEAT
            lvPostedTransCostLineRec.RESET;
            lvPostedTransCostLineRec.SETRANGE("Transport Order No.", lvPostedTransOrderRec."No.");
            lvPostedTransCostLineRec.SETFILTER(Type, '<>%1', lvPostedTransCostLineRec.Type::Text);
            IF (lvPostedTransOrderRec."Perc. Project" <> 0) THEN BEGIN
              lvPostedTransCostLineRec.SETRANGE("Invoice-to", lvPostedTransCostLineRec."Invoice-to"::" ");
              IF lvPostedTransCostLineRec.FINDFIRST THEN
                EXIT(STRSUBSTNO(Text005,lvPostedTransOrderRec.TABLECAPTION,lvPostedTransOrderRec."No."));
            END;
            lvPostedTransCostLineRec.SETRANGE("Invoice-to", lvPostedTransCostLineRec."Invoice-to"::Project);
            IF lvPostedTransCostLineRec.FINDFIRST THEN
              EXIT(STRSUBSTNO(Text005,lvPostedTransOrderRec.TABLECAPTION,lvPostedTransOrderRec."No."));
          UNTIL lvPostedTransOrderRec.NEXT = 0;
        END;

        lvPostedTransOrderRec.SETRANGE("Project Invoiced",TRUE);
        lvPostedTransOrderRec.SETFILTER("Project Invoice No.", '<>%1', '');
        lvPostedTransOrderRec.SETFILTER(
          "Project Invoice Status",'%1|%2',
          lvPostedTransOrderRec."Project Invoice Status"::Proposal,
          lvPostedTransOrderRec."Project Invoice Status"::"Temporary");
        IF lvPostedTransOrderRec.FINDFIRST THEN
          EXIT(STRSUBSTNO(Text006,lvPostedTransOrderRec.TABLECAPTION,lvPostedTransOrderRec."No."));
      END;
    END;

    PROCEDURE OrderSalesBuyBackLinesPresent@1100485009(lPlantOrderRec@1100485000 : Record 11012556;lCompany@1100525000 : Text[30]) : Boolean;
    VAR
      lPlantOrderLine@1100485001 : Record 11012557;
    BEGIN
      IF lCompany <> '' THEN
        lPlantOrderLine.CHANGECOMPANY(lCompany);

      lPlantOrderLine.SETRANGE("Plant Order No.", lPlantOrderRec."No.");
      lPlantOrderLine.SETFILTER(Type, '<>%1', lPlantOrderLine.Type::Text);
      lPlantOrderLine.SETFILTER(
        "Rental Type", '%1..%2', lPlantOrderLine."Rental Type"::Sales, lPlantOrderLine."Rental Type"::"Buy Back and Sales");
      EXIT(lPlantOrderLine.FINDFIRST);
    END;

    PROCEDURE OrderCostLinesPresent@1100485000(lPlantOrderRec@1100485000 : Record 11012556;lCompany@1100525000 : Text[30]) : Boolean;
    VAR
      lPlantOrderCostLine@1100485001 : Record 11012558;
    BEGIN
      IF lCompany <> '' THEN
        lPlantOrderCostLine.CHANGECOMPANY(lCompany);

      lPlantOrderCostLine.SETRANGE("Plant Order No.", lPlantOrderRec."No.");
      lPlantOrderCostLine.SETFILTER(Type, '<>%1', lPlantOrderCostLine.Type::Text);
      EXIT(lPlantOrderCostLine.FINDFIRST);
    END;

    PROCEDURE ExitOrderLinesPresent@1100485010(lExitOrderRec@1100485000 : Record 11012559;lCompany@1100525000 : Text[30]) : Boolean;
    VAR
      lExitOrderLine@1100485001 : Record 11012560;
    BEGIN
      IF lCompany <> '' THEN
        lExitOrderLine.CHANGECOMPANY(lCompany);

      lExitOrderLine.SETRANGE("Exit-order No.", lExitOrderRec."No.");
      lExitOrderLine.SETFILTER(Type, '<>%1', lExitOrderLine.Type::Text);
      EXIT(lExitOrderLine.FINDFIRST);
    END;

    PROCEDURE ExitOrderCostLinesPresent@1100485008(lExitOrderRec@1100485000 : Record 11012559;lCompany@1100525000 : Text[30]) : Boolean;
    VAR
      lExitOrderCostLine@1100485001 : Record 11012561;
    BEGIN
      IF lCompany <> '' THEN
        lExitOrderCostLine.CHANGECOMPANY(lCompany);

      lExitOrderCostLine.SETRANGE("Exit-order No.", lExitOrderRec."No.");
      lExitOrderCostLine.SETFILTER(Type, '<>%1', lExitOrderCostLine.Type::Text);
      EXIT(lExitOrderCostLine.FINDFIRST);
    END;

    PROCEDURE ReturnedLossOrderLinesPresent@1100525005(ReturnLossOrder@1100485000 : Record 11012655;Company@1100525000 : Text[30]) : Boolean;
    VAR
      ReturnLossOrderLine@1100485001 : Record 11012656;
    BEGIN
      IF Company <> '' THEN
        ReturnLossOrderLine.CHANGECOMPANY(Company);

      ReturnLossOrderLine.SETRANGE("Returned Loss Order No.", ReturnLossOrder."No.");
      ReturnLossOrderLine.SETFILTER(Type, '<>%1', ReturnLossOrderLine.Type::Text);
      EXIT(ReturnLossOrderLine.FINDFIRST);
    END;

    PROCEDURE AddError@7(lvMess@11012000 : Text[250];VAR TmpErrorRec@11012001 : TEMPORARY Record 11012051);
    BEGIN
      IF (TmpErrorRec."Plant Location Code" = Code) AND (TmpErrorRec."Error message" = lvMess) THEN
        EXIT;

      TmpErrorRec.INIT;
      TmpErrorRec."Line No." := TmpErrorRec."Line No." + 1;
      TmpErrorRec."Error message" := lvMess;
      TmpErrorRec."Plant Location Code" := Code;
      TmpErrorRec.INSERT;
    END;

    PROCEDURE CopyProjLocsToPlantLocAddress@1100485002(IPlantCompany@1100485001 : Text[50]) : Integer;
    VAR
      lvProjLocAddressRec@1100485000 : Record 11012011;
      lvPlantLocAddrRec@1100485002 : Record 11012590;
      lvIsPlantComp@1100485004 : Boolean;
      lvNew@1100485003 : Boolean;
      lvCounter@1100485005 : Integer;
    BEGIN
      IF "Project No." = '' THEN
        EXIT(0);

      IF (IPlantCompany <> '') AND (IPlantCompany <> COMPANYNAME) THEN
        lvPlantLocAddrRec.CHANGECOMPANY(IPlantCompany)
      ELSE
        lvIsPlantComp := TRUE;
      IF ("Company Name" <> '') AND ("Company Name" <> COMPANYNAME) THEN
        lvProjLocAddressRec.CHANGECOMPANY("Company Name");
      lvProjLocAddressRec.SETRANGE("Project No.", "Project No.");
      IF lvProjLocAddressRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          IF NOT lvPlantLocAddrRec.GET(Code, lvProjLocAddressRec.Code) THEN BEGIN
            lvNew := TRUE;
            lvPlantLocAddrRec.INIT;
            lvPlantLocAddrRec.Location := Code;
            lvPlantLocAddrRec."Address Code" := lvProjLocAddressRec.Code;
          END;
          lvPlantLocAddrRec.Address := COPYSTR(lvProjLocAddressRec.Address, 1, MAXSTRLEN(lvPlantLocAddrRec.Address));
          lvPlantLocAddrRec."Address 2" := COPYSTR(lvProjLocAddressRec."Address 2", 1, MAXSTRLEN(lvPlantLocAddrRec."Address 2"));
          lvPlantLocAddrRec."Post Code" := COPYSTR(lvProjLocAddressRec."Post Code", 1, MAXSTRLEN(lvPlantLocAddrRec."Post Code"));
          lvPlantLocAddrRec.City := COPYSTR(lvProjLocAddressRec.City, 1, MAXSTRLEN(lvPlantLocAddrRec.City));
          lvPlantLocAddrRec.Contact := COPYSTR(lvProjLocAddressRec.Contact, 1, MAXSTRLEN(lvPlantLocAddrRec.Contact));
          lvPlantLocAddrRec."Phone No." := COPYSTR(lvProjLocAddressRec."Phone No.", 1, MAXSTRLEN(lvPlantLocAddrRec."Phone No."));
          IF lvNew THEN
            lvPlantLocAddrRec.INSERT(lvIsPlantComp)
          ELSE
            lvPlantLocAddrRec.MODIFY(lvIsPlantComp);
          lvCounter := lvCounter + 1;
        UNTIL lvProjLocAddressRec.NEXT = 0;
      END;

      EXIT(lvCounter);
    END;

    PROCEDURE GetNoOfCustJobAddressesTxt@1100485003() : Text[10];
    VAR
      lvNo@1100485000 : Integer;
    BEGIN
      lvNo := GetNoOfCustJobAddresses();
      IF lvNo = 0 THEN
        EXIT('')
      ELSE
        EXIT('[' + FORMAT(lvNo) + ']');
    END;

    PROCEDURE GetNoOfCustJobAddresses@1100485004() : Integer;
    VAR
      lvAddressRec@1100485000 : Record 222;
    BEGIN
      IF ("Customer No." = '') OR ("Project No." <> '') OR ("Service Order No." <> '') OR ("Company Name" <> '') THEN
        EXIT(0);

      lvAddressRec.SETRANGE("Customer No.", "Customer No.");
      lvAddressRec.SETRANGE("Project Address", TRUE);
      EXIT(lvAddressRec.COUNT);
    END;

    PROCEDURE TransferCustJobAddress@1100485006();
    VAR
      lvAddressRec@1100485000 : Record 222;
    BEGIN
      IF ("Customer No." = '') OR ("Project Address Code" = '') OR
         ("Project No." <> '') OR ("Service Order No." <> '') OR
         ("Company Name" <> '')
      THEN
        EXIT;

      IF NOT lvAddressRec.GET("Customer No.", "Project Address Code") THEN
        EXIT;

      IF Description <> '' THEN
        IF NOT CONFIRM(Text017) THEN
          EXIT;

      "Search Name" := '';
      VALIDATE(Description, lvAddressRec.Name);
      "Description 2" := lvAddressRec."Name 2";
      Address := lvAddressRec.Address;
      "Address 2" := lvAddressRec."Address 2";
      "Post Code" := lvAddressRec."Post Code";
      City := lvAddressRec.City;
      County := lvAddressRec.County;
      "Country/Region Code" := lvAddressRec."Country/Region Code";
      Contact := lvAddressRec.Contact;
      "Phone No." := lvAddressRec."Phone No.";
      "Fax No." := lvAddressRec."Fax No.";
      "E-Mail" := lvAddressRec."E-Mail";
      //DP00195 sn.
      "Travel Distance" := lvAddressRec."Travel Distance";
      "Travel Time" := lvAddressRec."Travel Time";
      "Travel Cost Code" := lvAddressRec."Travel Cost Code";
      //DP00195 en.
    END;

    PROCEDURE TransferEmployeeData@1100485007(IEmplRec@1100485000 : Record 5200);
    BEGIN
      IF Description <> '' THEN
        IF NOT CONFIRM(Text018) THEN
          EXIT;

      Description := COPYSTR(IEmplRec."Full Name",1,MAXSTRLEN(Description));
      "Search Name" :=  IEmplRec."Search Name";
      //C013440.so
      //Address := IEmplRec.Address;
      //"Address 2" := IEmplRec."Address 2";
      //"Post Code" := IEmplRec."Post Code";
      //C013440.eo
      City := IEmplRec.City;
      County := IEmplRec.County;
      "Country/Region Code" := IEmplRec."Country/Region Code";
      //C013440.so
      //"Phone No." := IEmplRec."Phone No.";
      //"Fax No." := IEmplRec."Fax No.";
      //"E-Mail" := IEmplRec."E-Mail";
      //C013440.eo
      //C013440.sn
      "Phone No." := COPYSTR(IEmplRec."Company Mobile Phone No." + ' / ' + IEmplRec."Company Phone No.", 1, MAXSTRLEN("Phone No."));
      "E-Mail" := IEmplRec."Company E-Mail";
      //C013440.en
      "Starting Date" := IEmplRec."Employment Date";
    END;

    PROCEDURE LookupEmployee@1100485011(IEditable@1100485001 : Boolean);
    VAR
      lvEmplRec@1100485000 : Record 5200;
    BEGIN
      IF "Company Name" <> '' THEN
        lvEmplRec.CHANGECOMPANY("Company Name");
      lvEmplRec.SETRANGE(Status, lvEmplRec.Status::Active);
      lvEmplRec."No." := "Employee No.";
      IF NOT IEditable THEN
        PAGE.RUNMODAL(0,lvEmplRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0,lvEmplRec) = ACTION::LookupOK THEN
          VALIDATE("Employee No.",lvEmplRec."No.");
      END;
    END;

    PROCEDURE GetCustomerName@1100525000() : Text[100];
    VAR
      lvProjRec@1100525001 : Record 11072003;
      lvServOrderRec@1100525003 : Record 11012823;
      lvCustRec@1100525002 : Record 18;
      lvCustNo@1100525000 : Code[20];
    BEGIN
      IF ("Project No." = '') AND ("Service Order No." = '')  THEN
        lvCustNo := "Customer No."
      ELSE BEGIN
        IF "Company Name" <> '' THEN BEGIN
          IF "Project No." <> '' THEN
            lvProjRec.CHANGECOMPANY("Company Name")
          ELSE
            lvServOrderRec.CHANGECOMPANY("Company Name");
          lvCustRec.CHANGECOMPANY("Company Name");
        END;
        IF "Project No." <> '' THEN BEGIN
          IF lvProjRec.GET("Project No.") THEN
            lvCustNo := lvProjRec."Bill-to Customer No.";
        END ELSE BEGIN
          IF lvServOrderRec.GET("Service Order No.") THEN
            lvCustNo := lvServOrderRec."Customer No.";
        END;
      END;
      IF lvCustNo <> '' THEN BEGIN
        IF lvCustRec.GET(lvCustNo) THEN
          EXIT(lvCustRec.Name);
      END;

      EXIT('');
    END;

    PROCEDURE DisplayMap@1100525001();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FIND('-') THEN
        MapMgt.MakeSelection(DATABASE::"Plant Location",GETPOSITION)
      ELSE
        MESSAGE(Text021);
    END;

    PROCEDURE InsertDefaultRateCodesByLoc@1100525003();
    VAR
      PlantRateCodeRec@1100525001 : Record 11020502;
      PlantInventRec@1100525002 : Record 11012555;
      TmpPlantRateCodeRec@1100525000 : TEMPORARY Record 11020502;
    BEGIN
      IF (NOT "Rate Codes by Location") OR (Code = '') THEN
        EXIT;

      PlantRateCodeRec.SETRANGE("Copy to Location", TRUE);
      IF PlantRateCodeRec.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          IF NOT PlantLocRateCodeRec.GET(Code, PlantRateCodeRec.Code) THEN BEGIN
            PlantLocRateCodeRec.INIT;
            PlantLocRateCodeRec.TRANSFERFIELDS(PlantRateCodeRec, FALSE);
            PlantLocRateCodeRec.Location := Code;
            PlantLocRateCodeRec."Rate Code" := PlantRateCodeRec.Code;
            PlantLocRateCodeRec.INSERT;
          END;
          TmpPlantRateCodeRec := PlantRateCodeRec;
          TmpPlantRateCodeRec.INSERT;
        UNTIL PlantRateCodeRec.NEXT = 0;
      END;

      //* Also insert rate codes if already plant is/was on location.
      //* Note: Only for inventory, not for other tables with records of 'Location' and 'Rate Code'.
      PlantInventRec.SETCURRENTKEY(Location);
      PlantInventRec.SETRANGE(Location, Code);
      PlantInventRec.SETFILTER("Rate Code", '<>%1', '');
      IF PlantInventRec.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          IF NOT TmpPlantRateCodeRec.GET(PlantInventRec."Rate Code") THEN BEGIN
            IF NOT PlantRateCodeRec.GET(PlantInventRec."Rate Code") THEN BEGIN
              TmpPlantRateCodeRec.INIT;
              TmpPlantRateCodeRec.Code := PlantInventRec."Rate Code";
            END ELSE BEGIN
              IF NOT PlantLocRateCodeRec.GET(Code, PlantInventRec."Rate Code") THEN BEGIN
                PlantLocRateCodeRec.INIT;
                PlantLocRateCodeRec.TRANSFERFIELDS(PlantRateCodeRec, FALSE);
                PlantLocRateCodeRec.Location := Code;
                PlantLocRateCodeRec."Rate Code" := PlantRateCodeRec.Code;
                PlantLocRateCodeRec.INSERT;
              END;
              TmpPlantRateCodeRec := PlantRateCodeRec;
            END;
            TmpPlantRateCodeRec.INSERT;
          END;
        UNTIL PlantInventRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckPlantMgtCompanySetup@1100525007(ProjCompany@1100525001 : Text[30]);
    VAR
      PlantMgtCompRec@1100525000 : Record 11020586;
    BEGIN
      IF ProjCompany = '' THEN   //* Project or Service company
        ProjCompany := COMPANYNAME;
      PlantMgtCompRec.CHANGECOMPANY(ProjCompany);
      IF NOT PlantMgtCompRec.GET(COMPANYNAME) THEN  //COMPANYNAME is the plant company
        ERROR(Text020,
          PlantMgtCompRec.FIELDCAPTION("Plant Company"), COMPANYNAME,
          PlantMgtCompRec.TABLECAPTION, ProjSetupRec.TABLECAPTION, ProjCompany);
    END;

    PROCEDURE DrillDownRevenuesDetails@1210190001(Type@1210190001 : ',Revenue,Costs');
    VAR
      PlantLedgerEntry@1210190000 : Record 11012572;
    BEGIN
      PlantLedgerEntry.FILTERGROUP(2);
      PlantLedgerEntry.SETCURRENTKEY("Plant Location", "Posting Date", "Relate to");

      PlantLedgerEntry.SETRANGE("Plant Location", Code);
      COPYFILTER("Date Filter", PlantLedgerEntry."Posting Date");
      COPYFILTER("Relate to Filter", PlantLedgerEntry."Relate to");

      CASE Type OF
        Type::Revenue:
          PlantLedgerEntry.SETFILTER("Total Price", '<>%1', 0);  //* Only Revenues (15512)
      END;

      PlantLedgerEntry.FILTERGROUP(0);
      PAGE.RUNMODAL(0, PlantLedgerEntry);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012554) THEN BEGIN
        FIND;
        EXIT;
      END;


      DPA_SetFilters('Table 11012554');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Plant Location", "Department Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Department Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Department Code");
    END;

    PROCEDURE GetContact@1100528700(VAR Contact@1100528700 : Record 5050;GiveMessage@1100528703 : Boolean) : Boolean;
    VAR
      Job@1100528701 : Record 11072003;
      ServiceOrder@1100528702 : Record 11012823;
    BEGIN
      IF "Project No." <> '' THEN BEGIN
        Job.GET("Project No.");
        EXIT(Contact.GetContactByCustomer(Job."Bill-to Customer No.", Contact, GiveMessage));
      END ELSE IF "Service Order No." <> '' THEN BEGIN
        ServiceOrder.GET("Service Order No.");
        EXIT(Contact.GetContactByCustomer(ServiceOrder."Customer No.", Contact, GiveMessage));
      END ELSE IF "Customer No." <> '' THEN
        EXIT(Contact.GetContactByCustomer("Customer No.", Contact, GiveMessage));
    END;

    PROCEDURE EditDocuments@1100528702(ContactNo@1210190003 : Code[20];ContactPersonNo@1210190004 : Code[20];SendMail@1210190002 : Boolean;Recipient@1100528700 : Text[120]);
    VAR
      DocumentTemplate@1210190001 : Record 11012401;
      DocumentMailing@1210190000 : Codeunit 11012278;
      RecRef@1100525000 : RecordRef;
      DocumentLinkRIDs@1100525001 : ARRAY [5] OF RecordID;
    BEGIN
      RecRef.GETTABLE(Rec);
      DocumentLinkRIDs[1] := RecRef.RECORDID;

      DocumentMailing.EditDocuments(
        STRSUBSTNO('%1', DocumentTemplate.Type::Plant), DocumentLinkRIDs,
        '', ContactNo, ContactPersonNo, SendMail, Recipient);
    END;

    PROCEDURE ShowDocuments@1100529007();
    VAR
      RecRef@1100525000 : RecordRef;
      DocumentFilters@1100525001 : Codeunit 11012432;
    BEGIN
      //DP00183
      TESTFIELD(Code);
      RecRef.GETTABLE(Rec);
      DocumentFilters.CreateTempFilterAndExecute1(RecRef, "Department Code", FALSE, TRUE);
    END;

    PROCEDURE DeleteDocumentLinks@1100529006();
    VAR
      DocumentLinkMgt@1100525000 : Codeunit 11012401;
      RecRef@1100525001 : RecordRef;
    BEGIN
      //DP00183
      RecRef.GETTABLE(Rec);
      DocumentLinkMgt.DeleteDocumentLinksFromObject(RecRef);
    END;

    PROCEDURE MoveDocumentLinks@1100529005(SourceRec@1100529001 : Record 11012554;TargetRec@1100529000 : Record 11012554;CopyMode@1100529003 : Boolean);
    VAR
      DocumentLinkMgt@1100525000 : Codeunit 11012401;
      SourceRecRef@1100525001 : RecordRef;
      TargetRecRef@1100529002 : RecordRef;
    BEGIN
      //DP00183
      SourceRecRef.GETTABLE(SourceRec);
      TargetRecRef.GETTABLE(TargetRec);
      IF NOT CopyMode THEN
        DocumentLinkMgt.ReplaceDocLink(SourceRecRef, TargetRecRef)
      ELSE
        DocumentLinkMgt.CopyDocLinks(SourceRecRef, TargetRecRef);
    END;

    PROCEDURE CommentSheet@1100529004(EditableMode@1100529002 : Boolean);
    VAR
      PlantCommentLine@1100529000 : Record 11072666;
    BEGIN
      //DP00183
      TESTFIELD(Code);
      PlantCommentLine.EditCommentLines(DATABASE::"Plant Location", Code, '', 0, EditableMode);  //C005461.c
    END;

    PROCEDURE HasCommentLines@1100529002() : Boolean;
    VAR
      PlantCommentLine@1100529000 : Record 11072666;
    BEGIN
      //DP00183
      EXIT(PlantCommentLine.HasCommentLines(DATABASE::"Plant Location", Code, '', 0));  //C005461.c
    END;

    PROCEDURE DeleteCommentLines@1100529003();
    VAR
      PlantCommentLine@1100529000 : Record 11072666;
    BEGIN
      //DP00183
      PlantCommentLine.DeleteComments(DATABASE::"Plant Location", Code, '', 0);  //C005461.c
    END;

    PROCEDURE RefersToOtherCompany@1100525006() : Boolean;
    BEGIN
      EXIT(("Company Name" <> '') AND ("Company Name" <> COMPANYNAME));
    END;

    PROCEDURE TravelTimeUnit@1100529900() : Code[10];
    VAR
      ServSetup@1100525000 : Record 11012800;
      DimValRec@1100525002 : Record 349;
      DimMgt@1100525001 : Codeunit 408;
    BEGIN
      IF NOT ServSetup.READPERMISSION THEN EXIT('');  //db, 26-06-14: C016159
      ServSetup.GET;
      DimMgt.GetDimValueRec(2,ServSetup."Cost Object Travel Time",DimValRec,FALSE,'');
      EXIT(DimValRec."Unit of Measure");
    END;

    PROCEDURE TravelDistanceUnit@1100525116() : Code[10];
    VAR
      ServSetup@1100525000 : Record 11012800;
      DimValRec@1100525002 : Record 349;
      DimMgt@1100525001 : Codeunit 408;
    BEGIN
      IF NOT ServSetup.READPERMISSION THEN EXIT('');  //db, 26-06-14: C016159
      ServSetup.GET;
      DimMgt.GetDimValueRec(2,ServSetup."Cost Object Travel Distance",DimValRec,FALSE,'');
      EXIT(DimValRec."Unit of Measure");
    END;

    PROCEDURE GetTravelCostWithIndexDate@1100528600(IIndexDate@1100528601 : Date) : Decimal;
    VAR
      TravelCostRate@1100528600 : Record 11071802;
    BEGIN
      IF "Travel Cost Code" <> '' THEN BEGIN
        TravelCostRate.SETRANGE("Travel Cost Code", "Travel Cost Code");
        TravelCostRate.SETFILTER("Index Date", '<=%1', IIndexDate);
        IF TravelCostRate.FINDLAST THEN
          EXIT(TravelCostRate.Rate);
      END;
    END;

    PROCEDURE NormalizePostCodeHouseNo@1100526200();
    VAR
      ObjectImpWorkSheetMgt@1100526200 : Codeunit 11012839;
      PostCode@1100526201 : Code[20];
    BEGIN
      IF ObjectImpWorkSheetMgt.NormalizePostCode("Post Code", "Country/Region Code", PostCode) THEN
        "Post Code" := PostCode;
      "House No." := ObjectImpWorkSheetMgt.DetermineHouseNo(Address, "House No. Ext.");
    END;

    PROCEDURE GetNoOfEstimates@1100409000() : Decimal;
    VAR
      EstSetup@1100409000 : Record 11012150;
    BEGIN
      IF NOT EstSetup.READPERMISSION THEN EXIT(0);  //db, 10-07-14: C016159
      CALCFIELDS("No. of Linked Estimates");
      EXIT("No. of Linked Estimates");
    END;

    LOCAL PROCEDURE CheckPlantNoFilled@1100529000();
    VAR
      PlantType@1100529000 : Record 11012551;
    BEGIN
      //DP00815
      IF "Plant Type" = '' THEN
        EXIT;
      PlantType.GET("Plant Type");
      IF NOT PlantType.Bulk THEN
        TESTFIELD("Plant No.");
    END;

    BEGIN
    END.
  }
}

