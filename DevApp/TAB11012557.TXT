OBJECT Table 11012557 Plant Order Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               PlantSetup.GET;
               GetOrderHeader;
               OrderRec.TESTFIELD(Posted,FALSE);
               CheckOrderTypeItemLine();  //*DP00183
               Posted := FALSE;
               "Transfer Date" := OrderRec."Transfer Date";
               "Purchase Order" := '';
               "Purchase Order Line No." := 0;
               "Exit Order No.":= '';  //DP00183
               "Exit Order Line No.":= 0;  //DP00183
               SetBoughtFilter();
               IF (NOT PlantSetup."From Loc. per Plant Order Line") AND ("From Location" <> OrderRec."From Location") THEN
                 "From Location" := OrderRec."From Location";
               PlantOrderCostMgtCU.RunUpdatePOLineLinkedCostLine('I', OrderRec, Rec);
             END;

    OnModify=BEGIN
               GetOrderHeader;
               OrderRec.TESTFIELD(Posted,FALSE);
               "Transfer Date" := OrderRec."Transfer Date";
               SetBoughtFilter();
               xRec.GET("Plant Order No.", "Line No.");
               IF ("Plant Type" <> xRec."Plant Type") OR (Quantity <> xRec.Quantity) THEN
                 PlantOrderCostMgtCU.RunUpdatePOLineLinkedCostLine('M', OrderRec, Rec)
               ELSE BEGIN
                 IF ("No." <> xRec."No.") THEN
                   PlantOrderCostMgtCU.RunUpdatePlantNoInCostLine(OrderRec, Rec);
               END;
             END;

    OnDelete=BEGIN
               GetOrderHeader;
               OrderRec.TESTFIELD(Posted,FALSE);
               PlantOrderCostMgtCU.RunUpdatePOLineLinkedCostLine('D', OrderRec, Rec);
               DeleteDocumentLinks(); //DP00183
               DeleteCommentLines();  //DP00183
             END;

    OnRename=BEGIN
               GetOrderHeader;
               OrderRec.TESTFIELD(Posted,FALSE);
               MoveDocumentLinks(xRec, Rec, FALSE); //DP00183
             END;

    CaptionML=ENU=Plant Order Line;
    LookupPageID=Page11012607;
    DrillDownPageID=Page11012607;
  }
  FIELDS
  {
    { 10  ;   ;Plant Order No.     ;Code20        ;TableRelation="Plant Order".No.;
                                                   CaptionML=ENU=Plant Order No. }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 25  ;   ;Type                ;Option        ;OnValidate=VAR
                                                                LicensePlantExtendedCU@1100529000 : Codeunit 11012579;
                                                              BEGIN
                                                                //DP00690.sn
                                                                CASE Type OF
                                                                  Type::Plant:
                                                                    BEGIN
                                                                      TESTFIELD("Item No.", '');
                                                                    END;
                                                                  Type::Item:
                                                                    BEGIN
                                                                      LicensePlantExtendedCU.LicenseTablePlantItem(TRUE,11012557);  //DP00267
                                                                      TESTFIELD("Plant Type", '');
                                                                      TESTFIELD("Set Code", '');
                                                                      CheckOrderTypeItemLine();  //*DP00183
                                                                    END;
                                                                  Type::Text:
                                                                    BEGIN
                                                                      TESTFIELD("Plant Type", '');
                                                                      TESTFIELD("Set Code", '');
                                                                      TESTFIELD("Item No.", '');
                                                                    END;
                                                                END;
                                                                //DP00690.en

                                                                TempOrderLine := Rec;
                                                                INIT;
                                                                Type := TempOrderLine.Type;
                                                                "Transfer Date" := TempOrderLine."Transfer Date";
                                                                "From Location" := TempOrderLine."From Location";
                                                                VALIDATE("Rental Shift");
                                                                IF Type <> Type::Text THEN
                                                                  FillDefaultToEmployee()
                                                                ELSE BEGIN
                                                                  "To Employee Company" := '';
                                                                  "To Employee No." := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Plant,Text,Item;
                                                   OptionString=Plant,Text,Item }
    { 30  ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   OnValidate=VAR
                                                                lvPlantInventRec@1100485000 : Record 11012555;
                                                                PlantType@1100525000 : Record 11012551;
                                                              BEGIN
                                                                IF "Plant Type" <> '' THEN BEGIN
                                                                  TESTFIELD(Type,Type::Plant);
                                                                  CheckPlantTypeBlocked();  //DP00485.n (C009313)
                                                                END ELSE BEGIN
                                                                  IF ("To Location" <> '') THEN
                                                                    "To Location" := '';
                                                                  IF Type <> Type::Plant THEN
                                                                    EXIT;
                                                                END;

                                                                IF "Plant Type" <> xRec."Plant Type" THEN BEGIN
                                                                  IF PlantOrderCostMgtCU.POLineLinkedCostWithPurchOrder(Rec) THEN
                                                                    FIELDERROR("Plant Type", Text012);
                                                                END;

                                                                CALCFIELDS(Bulk, "Plant Category");  //DP00183.c

                                                                //**4PS.sn DPA Plant
                                                                PlantType.Code := "Plant Type";
                                                                PlantType.DPA_FindRecWithDPAFilterAppld;
                                                                //**4PS.en DPA Plant

                                                                IF ("Plant Type" <> '') AND ("Set Code" <> '') THEN
                                                                  "Set Code" := '';

                                                                IF Bulk THEN BEGIN
                                                                  lvPlantInventRec.SETCURRENTKEY(Removed, "Plant Type", "Plant No.");
                                                                  lvPlantInventRec.SETRANGE(Removed, FALSE);
                                                                  lvPlantInventRec.SETRANGE("Plant Type", "Plant Type");
                                                                  lvPlantInventRec.SETRANGE("Plant No.", '0');
                                                                  IF lvPlantInventRec.FIND('-') THEN
                                                                    "No." := '0'
                                                                  ELSE
                                                                    "No." := ''
                                                                END ELSE BEGIN
                                                                  //IF NOT PlantNoRec.GET("Plant Type","No.") THEN
                                                                  //**4PS.sn DPA Plant
                                                                  PlantNoRec."Plant Type" := "Plant Type";
                                                                  PlantNoRec."No." := "No.";
                                                                  IF NOT PlantNoRec.RecFoundWithDPAFilterApplied THEN
                                                                  //**4PS.en DPA Plant
                                                                    "No." := '';
                                                                END;

                                                                SetDateFilter;
                                                                CALCFIELDS("Stock Plant Type on From Loc.", "Stock Plant No. on From Loc.",  "Stock Rate Code on From Loc.");
                                                                IF "Plant Type" <> xRec."Plant Type" THEN
                                                                  "Description 2" := '';
                                                                GetPlantDescription;
                                                                VALIDATE("Unit of Measure");

                                                                IF "Plant Type" <> '' THEN
                                                                  GetDefaults;
                                                              END;

                                                   CaptionML=ENU=Plant Type }
    { 35  ;   ;Description         ;Text50        ;FieldClass=Normal;
                                                   CaptionML=ENU=Description }
    { 36  ;   ;Description 2       ;Text50        ;OnValidate=BEGIN
                                                                IF "Description 2" <> '' THEN BEGIN
                                                                  CheckTypePlantOrItem(FIELDCAPTION("Description 2"));
                                                                  TESTFIELD("Set Code", '');
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Description 2 }
    { 40  ;   ;No.                 ;Code10        ;TableRelation=IF (Type=CONST(Text)) "Standard Text"
                                                                 ELSE IF (Type=CONST(Plant),
                                                                          Bulk=CONST(No)) "Plant Number".No. WHERE (Plant Type=FIELD(Plant Type))
                                                                          ELSE IF (Type=CONST(Plant),
                                                                                   Bulk=CONST(Yes)) "Plant Inventory"."Plant No." WHERE (Removed=CONST(No),
                                                                                                                                         Plant Type=FIELD(Plant Type));
                                                   OnValidate=VAR
                                                                ExitOrderLine@1100525000 : Record 11012560;
                                                              BEGIN
                                                                VaLidateTableRelationPlantNo();
                                                                SetDateFilter;
                                                                CALCFIELDS(Bulk, "Stock Plant No. on From Loc.", "Stock Rate Code on From Loc.", "Inspection No.");

                                                                CASE Type OF
                                                                  Type::Text:
                                                                    BEGIN
                                                                      IF "No." <> '' THEN BEGIN
                                                                        StandardText.GET("No.");
                                                                        Description := StandardText.Description;
                                                                      END;
                                                                    END;
                                                                  Type::Plant:
                                                                    BEGIN
                                                                      IF "Set Code" <> '' THEN
                                                                        EXIT;
                                                                      IF ("No." > '0') THEN BEGIN
                                                                        //**4PS.sn DPA Plant
                                                                        PlantNoRec."Plant Type" := "Plant Type";
                                                                        PlantNoRec."No." := "No.";
                                                                        PlantNoRec.DPA_FindRecWithDPAFilterAppld;
                                                                        //**4PS.en DPA Plant

                                                                        PlantSetup.GET;
                                                                        GetOrderHeader;
                                                                        IF ("No." <> xRec."No.") AND (CurrFieldNo = FIELDNO("No.")) THEN
                                                                          SuggestionFromLocUniquePlant();
                                                                        IF (NOT Bulk) AND ("No." <> '') AND PlantSetup."Order Picking Procedure" AND (OrderRec.Type = OrderRec.Type::Arrival) AND
                                                                           (OrderRec."Order Picking Status" = OrderRec."Order Picking Status"::"In Process")
                                                                        THEN  //C023118.n
                                                                          OrderPickerCheckUniquePlantNoOnLoc();
                                                                        IF NOT (gCreateFromPlantRequest AND (Quantity = 0)) THEN BEGIN
                                                                          IF NOT (PlantSetup."Extended Picking Procedure" AND (OrderRec.Type = OrderRec.Type::Arrival)) THEN BEGIN
                                                                            IF (Quantity = 0) AND (NOT Bulk) THEN
                                                                              VALIDATE(Quantity,1)
                                                                            ELSE
                                                                              VALIDATE(Quantity);
                                                                          END ELSE BEGIN
                                                                            IF ("Asked Quantity" = 0) AND (NOT Bulk) THEN
                                                                              VALIDATE("Asked Quantity",1)
                                                                            ELSE
                                                                              VALIDATE("Asked Quantity");
                                                                            VALIDATE(Quantity);
                                                                          END;
                                                                          IF PlantSetup."Removal with Qty. to Receive" AND (OrderRec.Type = OrderRec.Type::Removal) AND
                                                                             (NOT Bulk) AND (Quantity = 1) AND ("Qty. to Receive" <> 1)
                                                                           THEN
                                                                             "Qty. to Receive" := 1;
                                                                        END;
                                                                        IF (NOT gCreateFromPlantRequest) AND (NOT Bulk) AND ("Qty. to Receive" <> 0) THEN BEGIN
                                                                          IF PlantSetup."Removal with Qty. to Receive" AND (OrderRec.Type = OrderRec.Type::Removal) THEN
                                                                            TESTFIELD("Qty. to Receive", 1);
                                                                        END;
                                                                        IF CheckPlantNoLossed(ExitOrderLine) AND GUIALLOWED THEN  //* Only message, no error.
                                                                          MESSAGE(Text014, "Plant Type", "No.",
                                                                            ExitOrderLine."Exit-date", ExitOrderLine."From Location", ExitOrderLine."Exit-order No.");
                                                                        WarningPlantOnOtherPO();  //DP00241.n (22321)
                                                                        CheckInspection;
                                                                        FillDefaultFromRateCode();
                                                                      END;
                                                                      GetPlantDescription;
                                                                      FillDefaultToLocation();
                                                                      GetRates;
                                                                    END;
                                                                  ELSE
                                                                    TESTFIELD("No.", '');  //DP00690
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=No.;
                                                   Description=T002986: Platform bug in TableReleation with flowfield (Bulk), so ValidateTableRelation is set to No }
    { 45  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=VAR
                                                                FromLocationRec@1100529000 : Record 11012554;
                                                                UserMgtCU@1100529001 : Codeunit 5700;
                                                                LicensePlantExtendedCU@1100529002 : Codeunit 11012579;
                                                              BEGIN
                                                                //DP00690
                                                                IF "Item No." <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Item);
                                                                  LicensePlantExtendedCU.LicenseTablePlantItem(TRUE,11012557);  //DP00267
                                                                  GetOrderHeader();
                                                                  CheckOrderTypeItemLine();  //*DP00183
                                                                  GetItem();
                                                                  IF ("Item No." <> xRec."Item No.") OR gPlantOrderCalcExternally THEN BEGIN
                                                                    SetNoInventoryWarning(TRUE);  //*19786.n
                                                                    IF NOT FromLocationRec.GET(OrderRec."From Location") THEN
                                                                      FromLocationRec.INIT;
                                                                    IF FromLocationRec."VAT Location Code" <> '' THEN
                                                                      VALIDATE("Location Code",FromLocationRec."VAT Location Code");
                                                                    IF "Location Code" = '' THEN
                                                                      "Location Code" := GetDefaultItemLocFromPlntDepot(FIELDNO("Location Code")); //*DP00183.n
                                                                    IF "Location Code" = '' THEN
                                                                      "Location Code" := UserMgtCU.GetLocation(0,'',UserMgtCU.GetSalesFilter);
                                                                    IF "New Location Code" = '' THEN
                                                                      "New Location Code" := GetDefaultItemLocFromPlntDepot(FIELDNO("New Location Code")); //*DP00183.n
                                                                    IF ("New Location Code" <> '') AND ("New Location Code" = "Location Code") THEN //*DP00183.n
                                                                      "New Location Code" := '';
                                                                    SetNoInventoryWarning(FALSE);  //*19786.n
                                                                    "Variant Code" := '';
                                                                    Description := ItemRec.Description;
                                                                    "Description 2" := ItemRec."Description 2";
                                                                    VALIDATE("Unit of Measure", ItemRec."Sales Unit of Measure");
                                                                    IF ("Reason Code (Exit)" <> '') AND (NOT ItemRec."Sales/Buy-Back Item (Plant)") THEN
                                                                      "Reason Code (Exit)" := '';
                                                                    GetItemUnitPrice(FIELDNO("Item No."));
                                                                    VALIDATE("Sales Rate");
                                                                    CheckItemInventoryWarning(0);  //*19786.n
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Item No.;
                                                   Description=DP00690 (Item) }
    { 47  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=VAR
                                                                lvItemVariantRec@1100485000 : Record 5401;
                                                              BEGIN
                                                                //DP00690
                                                                IF "Variant Code" <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Item);
                                                                  TESTFIELD("Item No.");
                                                                END;
                                                                IF Type <> Type::Item THEN
                                                                  EXIT;

                                                                IF "Variant Code" <> xRec."Variant Code" THEN BEGIN
                                                                  IF "Variant Code" = '' THEN BEGIN
                                                                    GetItem();
                                                                    Description := ItemRec.Description;
                                                                    "Description 2" := ItemRec."Description 2";
                                                                  END ELSE BEGIN
                                                                    lvItemVariantRec.GET("Item No.", "Variant Code");
                                                                    Description := lvItemVariantRec.Description;
                                                                    "Description 2" := lvItemVariantRec."Description 2";
                                                                  END;
                                                                  GetItemUnitPrice(FIELDNO("Variant Code"));
                                                                  VALIDATE("Sales Rate");
                                                                  CheckItemInventoryWarning(0);  //*19786.n
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Variant Code;
                                                   Description=4PS: TableRelation modified  DP00690 (Item) }
    { 50  ;   ;Transfer Date       ;Date          ;OnValidate=BEGIN
                                                                GetRates;
                                                              END;

                                                   CaptionML=ENU=Transfer Date;
                                                   Editable=No }
    { 60  ;   ;Expected return on  ;Date          ;OnValidate=BEGIN
                                                                IF "Expected return on" <> 0D THEN BEGIN
                                                                  TESTFIELD(Type,Type::Plant);
                                                                  GetOrderHeader;
                                                                  IF NOT (OrderRec.Type IN [OrderRec.Type::Arrival, OrderRec.Type::"Other Transfers"]) THEN
                                                                    ERROR(Text011, FIELDCAPTION("Expected return on"), OrderRec.Type);
                                                                  IF ("Expected return on" < "Transfer Date") THEN
                                                                    "Expected return on" := "Transfer Date";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Expected return on }
    { 70  ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure";
                                                   OnValidate=VAR
                                                                PlantType@1100529001 : Record 11012551;
                                                                UOMMgtCU@1100529000 : Codeunit 5402;
                                                              BEGIN
                                                                CASE Type OF
                                                                  Type::Text:
                                                                    "Unit of Measure" := '';
                                                                  Type::Plant:
                                                                    BEGIN
                                                                      IF (NOT PlantType.GET("Plant Type")) OR ("Plant Type" = '') THEN
                                                                        "Unit of Measure" := ''
                                                                      ELSE
                                                                        "Unit of Measure" := PlantType."Unit of Measure";
                                                                    END;
                                                                  Type::Item:
                                                                    BEGIN
                                                                      GetItem();
                                                                      "Qty. per Unit of Measure" := UOMMgtCU.GetQtyPerUnitOfMeasure(ItemRec,"Unit of Measure");
                                                                      SetQtyForItemReservation;
                                                                      IF CurrFieldNo <> FIELDNO("Item No.") THEN BEGIN
                                                                        GetItemUnitPrice(FIELDNO("Unit of Measure"));
                                                                        VALIDATE("Sales Rate");
                                                                      END;
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Unit of Measure;
                                                   Description=DP00690 (Item) Only editable for Item, for Plant always uit of the Plant Type }
    { 80  ;   ;Set Code            ;Code10        ;TableRelation="Plant Set";
                                                   OnValidate=BEGIN
                                                                IF ("Set Code" = '') THEN
                                                                  EXIT;

                                                                TESTFIELD(Type, Type::Plant);
                                                                TESTFIELD("Plant Type", '');

                                                                //SetRec.GET("Set Code");
                                                                //**4PS.sn DPA Plant
                                                                SetRec.Code := "Set Code";
                                                                SetRec.DPA_FindRecWithDPAFilterAppld;
                                                                //**4PS.en DPA Plant

                                                                Description := SetRec.Description;
                                                                "Description 2" := '';

                                                                PlantSetup.GET;
                                                                GetOrderHeader;
                                                                IF NOT (PlantSetup."Extended Picking Procedure" AND (OrderRec.Type = OrderRec.Type::Arrival)) THEN BEGIN
                                                                  IF Quantity = 0 THEN
                                                                    Quantity := 1
                                                                  ELSE BEGIN
                                                                    IF Quantity <> 1 THEN BEGIN
                                                                      IF UniquePlantWithNoFilledOnSet("Set Code") THEN
                                                                        Quantity := 1;
                                                                    END;
                                                                  END;
                                                                END ELSE BEGIN
                                                                  IF "Asked Quantity" = 0 THEN
                                                                    "Asked Quantity" := 1
                                                                  ELSE BEGIN
                                                                    IF "Asked Quantity" <> 1 THEN BEGIN
                                                                      IF UniquePlantWithNoFilledOnSet("Set Code") THEN
                                                                        "Asked Quantity" := 1;
                                                                    END;
                                                                  END;
                                                                END;

                                                                "Sales Rate" := 0;
                                                                "Buy Back Rate" := 0;
                                                              END;

                                                   CaptionML=ENU=Set }
    { 100 ;   ;From Location       ;Code20        ;TableRelation="Plant Location";
                                                   OnValidate=BEGIN
                                                                PlantSetup.GET;
                                                                GetOrderHeader;
                                                                IF NOT PlantSetup."From Loc. per Plant Order Line" THEN BEGIN
                                                                  TESTFIELD("From Location",OrderRec."From Location");
                                                                  VALIDATE("Rental Type");
                                                                END;
                                                                IF (OrderRec.Type = OrderRec.Type::Removal) AND ("From Location" <> '') THEN BEGIN
                                                                  PlantLocRec.GET("From Location");
                                                                  IF PlantLocRec.Depot THEN
                                                                    FIELDERROR("From Location", Text013);
                                                                END;

                                                                SetDateFilter;
                                                                CALCFIELDS("Stock Plant Type on From Loc.", "Stock Plant No. on From Loc.", "Stock Rate Code on From Loc.");
                                                              END;

                                                   CaptionML=ENU=From Location }
    { 110 ;   ;Stock Plant No. on From Loc.;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Plant Inventory".Quantity WHERE (Removed=CONST(No),
                                                                                                     Location=FIELD(From Location),
                                                                                                     Plant Type=FIELD(Plant Type),
                                                                                                     Plant No.=FIELD(No.),
                                                                                                     Sold=FIELD(Sold Filter),
                                                                                                     Present from=FIELD(Date Filter),
                                                                                                     Quantity=FILTER(>0)));
                                                   CaptionML=ENU=Stock Plant No. on From Loc.;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 112 ;   ;Stock Rate Code on From Loc.;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Plant Inventory".Quantity WHERE (Removed=CONST(No),
                                                                                                     Location=FIELD(From Location),
                                                                                                     Plant Type=FIELD(Plant Type),
                                                                                                     Plant No.=FIELD(No.),
                                                                                                     Rate Code=FIELD(From Rate Code),
                                                                                                     Sold=FIELD(Sold Filter),
                                                                                                     Present from=FIELD(Date Filter),
                                                                                                     Quantity=FILTER(>0)));
                                                   CaptionML=ENU=Stock Plant-Rate Code on From Loc.;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 115 ;   ;Stock Plant Type on From Loc.;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Plant Inventory".Quantity WHERE (Removed=CONST(No),
                                                                                                     Location=FIELD(From Location),
                                                                                                     Plant Type=FIELD(Plant Type),
                                                                                                     Sold=FIELD(Sold Filter),
                                                                                                     Present from=FIELD(Date Filter),
                                                                                                     Quantity=FILTER(>0)));
                                                   CaptionML=ENU=Stock Plant Type on From Loc.;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 120 ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                CASE Type OF
                                                                  Type::Text:
                                                                    TESTFIELD(Quantity,0);
                                                                  Type::Plant:
                                                                    BEGIN
                                                                      IF Quantity < 0 THEN
                                                                        FIELDERROR(Quantity);  //DP00690 (property 'MinValue=0' deleted, but only allowed for item)
                                                                      IF ("Plant Type" <> '') THEN BEGIN
                                                                        CALCFIELDS(Bulk);
                                                                        IF (NOT Bulk) AND ("No." <> '') AND (NOT (Quantity IN [0,1])) THEN
                                                                          FIELDERROR(Quantity,Text000);
                                                                        CheckInventory;
                                                                      END ELSE BEGIN
                                                                        IF ("Set Code" <> '') AND UniquePlantWithNoFilledOnSet("Set Code") AND (NOT (Quantity IN [0,1])) THEN
                                                                          FIELDERROR(Quantity,Text005);
                                                                      END;
                                                                    END;
                                                                  Type::Item:
                                                                    BEGIN
                                                                      IF (Quantity < 0) AND ("Direct Delivery" OR IsOtherTransferDepotToDepot) THEN  //*DP00183.c
                                                                        FIELDERROR(Quantity);
                                                                      IF Quantity <> xRec.Quantity THEN
                                                                        GetItemUnitPrice(FIELDNO(Quantity));
                                                                      SetQtyForItemReservation();
                                                                      VALIDATE("Sales Rate");
                                                                      CheckItemInventoryWarning(FIELDNO(Quantity));  //*19786.n  (check moved from Form to Table)
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 125 ;   ;Quantity Plant No.  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Plant Order Line".Quantity WHERE (Plant Order No.=FIELD(Plant Order No.),
                                                                                                      From Location=FIELD(From Location),
                                                                                                      Type=CONST(Plant),
                                                                                                      Plant Type=FIELD(Plant Type),
                                                                                                      No.=FIELD(No.),
                                                                                                      Sold Filter=FIELD(Sold Filter)));
                                                   CaptionML=ENU=Quantity Plant No.;
                                                   Editable=No }
    { 126 ;   ;Quantity Rate Code  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Plant Order Line".Quantity WHERE (Plant Order No.=FIELD(Plant Order No.),
                                                                                                      From Location=FIELD(From Location),
                                                                                                      Type=CONST(Plant),
                                                                                                      Plant Type=FIELD(Plant Type),
                                                                                                      No.=FIELD(No.),
                                                                                                      From Rate Code=FIELD(From Rate Code),
                                                                                                      Sold Filter=FIELD(Sold Filter)));
                                                   CaptionML=ENU=Quantity Plant-Rate Code;
                                                   Editable=No }
    { 127 ;   ;Quantity Plant Type ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Plant Order Line".Quantity WHERE (Plant Order No.=FIELD(Plant Order No.),
                                                                                                      From Location=FIELD(From Location),
                                                                                                      Type=CONST(Plant),
                                                                                                      Plant Type=FIELD(Plant Type),
                                                                                                      Sold Filter=FIELD(Sold Filter)));
                                                   CaptionML=ENU=Quantity Plant Type;
                                                   Editable=No }
    { 130 ;   ;Bulk                ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Type".Bulk WHERE (Code=FIELD(Plant Type)));
                                                   CaptionML=ENU=Bulk;
                                                   Editable=No }
    { 131 ;   ;Plant Category      ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Type"."Plant Category" WHERE (Code=FIELD(Plant Type)));
                                                   TableRelation="Plant Category";
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Plant Category;
                                                   Editable=No }
    { 140 ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 150 ;   ;Present Location    ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Inventory".Location WHERE (Removed=CONST(No),
                                                                                                        Plant Type=FIELD(Plant Type),
                                                                                                        Plant No.=FIELD(No.)));
                                                   CaptionML=ENU=Present Location;
                                                   Editable=No }
    { 160 ;   ;To Location         ;Code20        ;TableRelation="Plant Location".Code WHERE (Depot=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                IF "To Location" <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Plant);
                                                                  GetOrderHeader();
                                                                  OrderRec.TESTFIELD(Type, OrderRec.Type::Removal);
                                                                  CheckLocBlocked("To Location",FALSE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=To Location }
    { 170 ;   ;Posted              ;Boolean       ;CaptionML=ENU=Posted;
                                                   Editable=No }
    { 180 ;   ;Arrival Location    ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Order"."To Location" WHERE (No.=FIELD(Plant Order No.),
                                                                                                         Type=CONST(Arrival)));
                                                   CaptionML=ENU=Arrival Location;
                                                   Editable=No }
    { 190 ;   ;From Rate Code      ;Code10        ;OnValidate=BEGIN
                                                                IF Type <> Type::Plant THEN
                                                                  TESTFIELD("From Rate Code", '')
                                                                ELSE BEGIN
                                                                  IF ("From Rate Code" <> '') THEN BEGIN
                                                                    IF NOT
                                                                     (("Rental Type" = "Rental Type"::Rental) OR ("Rental Type" = "Rental Type"::Sales) OR
                                                                      (IsOtherTransferDepotToDepot))
                                                                    THEN  //C001216.n
                                                                      TESTFIELD("From Rate Code", '');
                                                                    PlantRateCodeRec.CheckPlantRateCode("From Location", "From Rate Code", TRUE, '');
                                                                    IF ("Set Code" = '') THEN
                                                                      CheckInventory();
                                                                  END;
                                                                  CALCFIELDS("Stock Rate Code on From Loc.");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              GetOrderHeader;
                                                              PlantRateCodeRec.Code := PlantRateCodeRec.LookupPlantRateCode("From Location", "From Rate Code", TRUE, '');
                                                              IF (NOT OrderRec.Posted) AND (OrderRec.Status < OrderRec.Status::Released) AND (Type = Type::Plant) AND
                                                                 (("Rental Type" = "Rental Type"::Rental) OR
                                                                  ("Rental Type" = "Rental Type"::Sales) OR  //C001216.n
                                                                  (OrderRec.IsOtherTransferDepotToDepot)) AND  //C001216.n
                                                                 (PlantRateCodeRec.Code <> "From Rate Code")
                                                              THEN
                                                                VALIDATE("From Rate Code", PlantRateCodeRec.Code)
                                                            END;

                                                   CaptionML=ENU=From Rate Code }
    { 195 ;   ;To Rate Code        ;Code10        ;OnValidate=BEGIN
                                                                IF "To Rate Code" <> '' THEN BEGIN
                                                                  PlantSetup.GET;  //C001216.n
                                                                  IF NOT PlantSetup."Rate Codes" THEN  //C001216.n
                                                                    TESTFIELD("To Rate Code", '');
                                                                  TESTFIELD(Type, Type::Plant);
                                                                  IF NOT
                                                                   (("Rental Type" = "Rental Type"::Rental) OR ("Rental Type" = "Rental Type"::"Buy Back") OR
                                                                    (IsOtherTransferDepotToDepot))
                                                                  THEN  //C001216.n
                                                                    TESTFIELD("To Rate Code", '');
                                                                  PlantRateCodeRec.CheckPlantRateCode(GetToLocationCode(), "To Rate Code", TRUE, '');
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              GetOrderHeader;
                                                              PlantRateCodeRec.Code := PlantRateCodeRec.LookupPlantRateCode(GetToLocationCode(), "To Rate Code", TRUE, '');
                                                              IF (NOT OrderRec.Posted) AND (OrderRec.Status < OrderRec.Status::Released) AND (Type = Type::Plant) AND
                                                                 (("Rental Type" = "Rental Type"::Rental) OR
                                                                  ("Rental Type" = "Rental Type"::"Buy Back") OR  //C001216.n
                                                                  (OrderRec.IsOtherTransferDepotToDepot)) AND  //C001216.n
                                                                 (PlantRateCodeRec.Code <> "To Rate Code")
                                                              THEN
                                                                VALIDATE("To Rate Code", PlantRateCodeRec.Code)
                                                            END;

                                                   CaptionML=ENU=To Rate Code }
    { 200 ;   ;Rental Type         ;Option        ;OnValidate=BEGIN
                                                                IF "Rental Type" = "Rental Type"::" " THEN BEGIN
                                                                  IF Type = Type::Plant THEN
                                                                    FIELDERROR("Rental Type");
                                                                END ELSE BEGIN
                                                                  TESTFIELD(Type,Type::Plant);
                                                                  IF "Plant Type" <> '' THEN BEGIN
                                                                    CheckRentalType();
                                                                    CheckPurchOrderTypeForSales(FALSE);
                                                                    FillDefaultFromRateCode();
                                                                    FillDefaultToRateCode();
                                                                    SetBoughtFilter;
                                                                    SetDateFilter;
                                                                    CALCFIELDS("Stock Plant Type on From Loc.", "Stock Plant No. on From Loc.",  "Stock Rate Code on From Loc.");
                                                                    GetRates;
                                                                  END;
                                                                END;
                                                                VALIDATE("Rental Shift");
                                                              END;

                                                   CaptionML=ENU=Rental Type;
                                                   OptionCaptionML=ENU=" ,Rental,Sales,Buy Back,Buy Back and Sales";
                                                   OptionString=[ ,Rental,Sales,Buy Back,Buy Back and Sales];
                                                   BlankZero=Yes }
    { 210 ;   ;Sales Rate          ;Decimal       ;OnValidate=BEGIN
                                                                IF "Sales Rate" <> 0 THEN
                                                                  CheckTypePlantOrItem(FIELDCAPTION("Sales Rate"));

                                                                CASE Type OF
                                                                  Type::Plant:
                                                                    BEGIN
                                                                      IF (("Plant Type" = '') AND ("Set Code" <> ''))  THEN
                                                                        "Sales Rate" := 0;
                                                                      IF ("Sales Rate" <> 0) AND
                                                                         NOT ("Rental Type" IN ["Rental Type"::Sales,"Rental Type"::"Buy Back and Sales"])
                                                                      THEN
                                                                        TESTFIELD("Rental Type","Rental Type"::Sales);
                                                                      GetOrderHeader;  //C022786
                                                                      IF CheckBuyBackRateIsSalesRate(OrderRec) THEN  //C022786
                                                                        "Buy Back Rate" := "Sales Rate";
                                                                    END;
                                                                  Type::Item:
                                                                    BEGIN
                                                                      IF "Sales Rate" <> 0 THEN
                                                                        TESTFIELD("Reason Code (Exit)", '');   //DP00485 (26972)
                                                                      GLSetup.GET;
                                                                      "Item Amount" := ROUND(GetQuantity() * "Sales Rate", GLSetup."Amount Rounding Precision");
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Sales Price;
                                                   BlankZero=Yes;
                                                   Description=DP00690: Also used for item prices (even for item BuyBack);
                                                   AutoFormatType=2 }
    { 220 ;   ;Buy Back Rate       ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Buy Back Rate" <> 0) AND (Type = Type::Item) THEN  // For Item lines always use "Sales Rate" only, also for BuyBack
                                                                  TESTFIELD("Buy Back Rate", 0);

                                                                IF (Type <> Type::Plant) OR (("Plant Type" = '') AND ("Set Code" <> ''))  THEN
                                                                  "Buy Back Rate" := 0;

                                                                IF ("Buy Back Rate" <> 0) AND
                                                                  NOT ("Rental Type" IN ["Rental Type"::"Buy Back","Rental Type"::"Buy Back and Sales"])
                                                                THEN
                                                                  TESTFIELD("Rental Type","Rental Type"::"Buy Back");
                                                              END;

                                                   CaptionML=ENU=Buy Back Rate;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 300 ;   ;Sold Filter         ;Boolean       ;CaptionML=ENU=Sold Filter;
                                                   Editable=No }
    { 310 ;   ;Location Copied Need;Code20        ;TableRelation="Plant Location".Code;
                                                   CaptionML=ENU=Location Copied Need;
                                                   Editable=No }
    { 315 ;   ;Line No. Copied Need;Integer       ;CaptionML=ENU=Line No. Copied Need;
                                                   Editable=No }
    { 320 ;   ;Rental Shift        ;Boolean       ;OnValidate=BEGIN
                                                                IF (Type <> Type::Plant) OR ("Rental Type" <> "Rental Type"::Rental) THEN
                                                                  "Rental Shift" := FALSE;

                                                                VALIDATE("Rental Startdate (To Location)");
                                                                VALIDATE("Rental Enddate (From Location)");
                                                              END;

                                                   CaptionML=ENU=Rental Shift }
    { 330 ;   ;Rental Startdate (To Location);Date;OnValidate=BEGIN
                                                                IF "Rental Shift" THEN BEGIN
                                                                  IF "Rental Startdate (To Location)" = 0D THEN
                                                                     "Rental Startdate (To Location)" := "Transfer Date";
                                                                  IF "Rental Startdate (To Location)" < "Transfer Date" THEN
                                                                     FIELDERROR("Rental Startdate (To Location)");
                                                                END ELSE
                                                                  "Rental Startdate (To Location)" := 0D;
                                                              END;

                                                   CaptionML=ENU=Rental Startdate (To Location) }
    { 340 ;   ;Rental Enddate (From Location);Date;OnValidate=BEGIN
                                                                IF "Rental Shift" THEN BEGIN
                                                                  IF "Rental Enddate (From Location)" = 0D THEN
                                                                     "Rental Enddate (From Location)" := "Transfer Date";
                                                                  IF "Rental Enddate (From Location)" > "Transfer Date" THEN
                                                                    FIELDERROR("Rental Enddate (From Location)");
                                                                END ELSE
                                                                  "Rental Enddate (From Location)" := 0D;
                                                              END;

                                                   CaptionML=ENU=Rental Enddate (From Location) }
    { 350 ;   ;Quantity Inventory  ;Decimal       ;OnValidate=BEGIN
                                                                IF "Quantity Inventory" <> 0 THEN BEGIN
                                                                  GetOrderHeader;
                                                                  OrderRec.TESTFIELD("Advanced Removal");

                                                                  CASE Type OF
                                                                    Type::Item,
                                                                    Type::Text:
                                                                      TESTFIELD("Quantity Inventory",0);
                                                                    Type::Plant:
                                                                      BEGIN
                                                                        TESTFIELD("Rental Type", "Rental Type"::Rental);
                                                                        CALCFIELDS(Bulk);
                                                                        IF NOT Bulk THEN BEGIN
                                                                          TESTFIELD("No.");
                                                                          IF NOT ("Quantity Inventory" IN [0,1]) THEN
                                                                            FIELDERROR("Quantity Inventory",Text000);
                                                                        END;
                                                                      END;
                                                                  END;

                                                                END;
                                                              END;

                                                   CaptionML=ENU=Quantity Inventory;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 351 ;   ;Quantity Damaged    ;Decimal       ;OnValidate=BEGIN
                                                                IF "Quantity Damaged" <> 0 THEN BEGIN
                                                                  GetOrderHeader;
                                                                  OrderRec.TESTFIELD("Advanced Removal");
                                                                  OrderRec.TESTFIELD("To Location Repair");

                                                                  CASE Type OF
                                                                    Type::Item,
                                                                    Type::Text:
                                                                      TESTFIELD("Quantity Damaged",0);
                                                                    Type::Plant:
                                                                      BEGIN
                                                                        TESTFIELD("Rental Type", "Rental Type"::Rental);
                                                                        CALCFIELDS(Bulk);
                                                                        IF NOT Bulk THEN BEGIN
                                                                          TESTFIELD("No.");
                                                                          IF NOT ("Quantity Damaged" IN [0,1]) THEN
                                                                            FIELDERROR("Quantity Damaged",Text000);
                                                                        END;
                                                                      END;
                                                                  END;

                                                                END;
                                                              END;

                                                   CaptionML=ENU=Quantity Damaged;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 352 ;   ;Quantity Exit       ;Decimal       ;OnValidate=BEGIN
                                                                IF "Quantity Exit" <> 0 THEN BEGIN
                                                                  GetOrderHeader;
                                                                  OrderRec.TESTFIELD("Advanced Removal");
                                                                  OrderRec.TESTFIELD("To Location Exit");

                                                                  CASE Type OF
                                                                    Type::Item,
                                                                    Type::Text:
                                                                      TESTFIELD("Quantity Exit",0);
                                                                    Type::Plant:
                                                                      BEGIN
                                                                        TESTFIELD("Plant Type");
                                                                        TESTFIELD("Rental Type", "Rental Type"::Rental);
                                                                        CALCFIELDS(Bulk);
                                                                        IF NOT Bulk THEN BEGIN
                                                                          TESTFIELD("No.");
                                                                          IF NOT ("Quantity Exit" IN [0,1]) THEN
                                                                            FIELDERROR("Quantity Exit",Text000);
                                                                        END;
                                                                        //DP00242.sn (28238)
                                                                        SetDateFilter;
                                                                        CALCFIELDS("Stock Plant No. on From Loc.");
                                                                        IF (Quantity > "Stock Plant No. on From Loc.") AND GUIALLOWED THEN
                                                                          MESSAGE(Text017,
                                                                            FIELDCAPTION(Quantity), Quantity, "Plant Type", "No.",
                                                                            FIELDCAPTION("Stock Plant No. on From Loc."), "Stock Plant No. on From Loc.",
                                                                            FIELDCAPTION("Quantity Exit"), "Quantity Exit");
                                                                        //DP00242.en (28238)
                                                                      END;
                                                                  END;
                                                                END ELSE BEGIN
                                                                  IF NOT ExitSoldSBBOnLoc() THEN  //DP00241.n (26972)
                                                                    "Reason Code (Exit)" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Quantity Exit;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 360 ;   ;Asked Quantity      ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Asked Quantity" = 0) THEN
                                                                  EXIT;

                                                                PlantSetup.GET;
                                                                PlantSetup.TESTFIELD("Extended Picking Procedure", TRUE);

                                                                CASE Type OF
                                                                  Type::Text:
                                                                    TESTFIELD("Asked Quantity",0);
                                                                  Type::Plant:
                                                                    BEGIN
                                                                      GetOrderHeader();
                                                                      IF (OrderRec.Type <> OrderRec.Type::Arrival) THEN
                                                                        TESTFIELD("Asked Quantity",0);
                                                                      IF ("Plant Type" <> '') THEN BEGIN
                                                                        CALCFIELDS(Bulk);
                                                                        IF (NOT Bulk) AND ("No." <> '') AND (NOT ("Asked Quantity" IN [0,1])) THEN
                                                                          FIELDERROR("Asked Quantity",Text000);
                                                                      END ELSE BEGIN
                                                                        IF ("Set Code" <> '') AND UniquePlantWithNoFilledOnSet("Set Code") AND (NOT ("Asked Quantity" IN [0,1])) THEN
                                                                          FIELDERROR("Asked Quantity",Text005);
                                                                      END;
                                                                    END;
                                                                  Type::Item:
                                                                    BEGIN
                                                                      GetOrderHeader();
                                                                      IF (OrderRec.Type <> OrderRec.Type::Arrival) THEN
                                                                        TESTFIELD("Asked Quantity",0);
                                                                      SetQtyForItemReservation();
                                                                      IF "Asked Quantity" <> xRec."Asked Quantity" THEN
                                                                        GetItemUnitPrice(FIELDNO("Asked Quantity"));
                                                                      VALIDATE("Sales Rate");
                                                                      CheckItemInventoryWarning(FIELDNO("Asked Quantity"));  //*19786.n  (check moved from Form to Table)
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Asked Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes;
                                                   Description=Qty. can be negative for items (corrections) but 'Asked Qty' may not be negative (use zero for corr.) so MinValue=0 }
    { 361 ;   ;Qty. to Receive     ;Decimal       ;OnValidate=BEGIN
                                                                //*15833.n
                                                                IF ("Qty. to Receive" = 0) THEN
                                                                  EXIT;

                                                                PlantSetup.GET;
                                                                PlantSetup.TESTFIELD("Removal with Qty. to Receive", TRUE);

                                                                CASE Type OF
                                                                  Type::Text:
                                                                    TESTFIELD("Qty. to Receive",0);
                                                                  Type::Plant:
                                                                    BEGIN
                                                                      GetOrderHeader();
                                                                      IF (OrderRec.Type <> OrderRec.Type::Removal) THEN
                                                                        TESTFIELD("Qty. to Receive",0);
                                                                      IF ("Plant Type" <> '') THEN BEGIN
                                                                        CALCFIELDS(Bulk);
                                                                        IF (NOT Bulk) THEN
                                                                          "Qty. to Receive" := ROUND("Qty. to Receive", 1);
                                                                        IF (NOT Bulk) AND ("No." <> '') AND (NOT ("Qty. to Receive" IN [0,1])) THEN
                                                                          FIELDERROR("Qty. to Receive",Text000);
                                                                      END ELSE BEGIN
                                                                        IF ("Set Code" <> '') AND UniquePlantWithNoFilledOnSet("Set Code") AND (NOT ("Qty. to Receive" IN [0,1])) THEN
                                                                          FIELDERROR("Qty. to Receive",Text005);
                                                                      END;
                                                                      IF PlantSetup."Fill Qty. with Qty. to Receive" AND
                                                                         ("Qty. to Receive" <> Quantity) AND ((Quantity = 0) OR (Quantity = xRec."Qty. to Receive"))
                                                                      THEN
                                                                        VALIDATE(Quantity, "Qty. to Receive");
                                                                    END;
                                                                  Type::Item:
                                                                    BEGIN
                                                                      GetOrderHeader();
                                                                      IF (OrderRec.Type <> OrderRec.Type::Removal) THEN
                                                                        TESTFIELD("Qty. to Receive",0);
                                                                      IF PlantSetup."Fill Qty. with Qty. to Receive" AND
                                                                         ("Qty. to Receive" <> Quantity) AND ((Quantity = 0) OR (Quantity = xRec."Qty. to Receive"))
                                                                      THEN
                                                                        VALIDATE(Quantity, "Qty. to Receive");
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Qty. to Receive;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes;
                                                   Description=Expected }
    { 370 ;   ;Purch. Order Type   ;Option        ;OnValidate=VAR
                                                                PlantVend@1100530000 : Record 11012596;
                                                                ItemVend@1100529000 : Record 99;
                                                              BEGIN
                                                                IF ("Purch. Order Type" <> "Purch. Order Type"::" ") THEN
                                                                  CheckTypePlantOrItem(FIELDCAPTION("Purch. Order Type"));
                                                                IF ("Purch. Order Type" = "Purch. Order Type"::" ") THEN BEGIN
                                                                  IF ("Vendor No." <> '') THEN
                                                                    VALIDATE("Vendor No.", '');  //C017429.c Now fill with Validate
                                                                  IF ("Direct Delivery") THEN
                                                                    "Direct Delivery" := FALSE;
                                                                  EXIT;
                                                                END;

                                                                PlantSetup.GET;
                                                                PlantSetup.TESTFIELD("Extended Picking Procedure", TRUE);

                                                                GetOrderHeader();
                                                                IF (OrderRec.Type <> OrderRec.Type::Arrival) THEN
                                                                  TESTFIELD("Purch. Order Type", "Purch. Order Type"::" ");

                                                                CheckPurchOrderTypeAllowed();

                                                                IF ("Purch. Order Type" <> xRec."Purch. Order Type") THEN BEGIN
                                                                  CASE Type OF
                                                                    Type::Plant:
                                                                      BEGIN
                                                                        PlantVend.Type := PlantVend.Type::Purchase;
                                                                        IF "Purch. Order Type" = "Purch. Order Type"::Rent THEN
                                                                          PlantVend.Type := PlantVend.Type::Rent;
                                                                        VALIDATE("Vendor No.", PlantVend.GetPreferredVendorNo("Plant Type",PlantVend.Type,TRUE)); //C017429.c Now fill with Validate
                                                                      END;
                                                                    Type::Item:
                                                                      VALIDATE("Vendor No.", ItemVend.GetDefaultVendorNo("Item No.", "Variant Code", TRUE));  //C017429.c Now fill with Validate
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Purch. Order Type;
                                                   OptionCaptionML=ENU=" ,Purchase,Rent";
                                                   OptionString=[ ,Purchase,Rent] }
    { 380 ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=BEGIN
                                                                IF "Vendor No." <> xRec."Vendor No." THEN BEGIN  //C017429.n
                                                                  "Order Address Code" := '';
                                                                  IF "Vendor No." <>'' THEN
                                                                    "Order Address Code" := GetOrderAddressCode("Plant Order No.", "Vendor No.", "Line No.");
                                                                END;
                                                                IF ("Vendor No." = '') THEN
                                                                  EXIT;

                                                                IF ("Purch. Order Type" = "Purch. Order Type"::" ") THEN
                                                                  TESTFIELD("Vendor No.", '');
                                                              END;

                                                   CaptionML=ENU=Vendor No. }
    { 381 ;   ;Order Address Code  ;Code10        ;TableRelation="Order Address".Code WHERE (Vendor No.=FIELD(Vendor No.));
                                                   OnValidate=BEGIN
                                                                //C017429.n
                                                                IF "Order Address Code" <> '' THEN
                                                                  TESTFIELD("Vendor No.");
                                                                UpdateOrderAddressCodeInOtherLines("Plant Order No.", "Vendor No.", "Order Address Code", "Line No.");
                                                              END;

                                                   CaptionML=ENU=Order Address Code }
    { 385 ;   ;Direct Delivery     ;Boolean       ;OnValidate=BEGIN
                                                                IF (NOT "Direct Delivery") THEN
                                                                  EXIT;

                                                                IF ("Purch. Order Type" = "Purch. Order Type"::" ") THEN
                                                                  TESTFIELD("Direct Delivery", FALSE);
                                                                IF Quantity < 0 THEN
                                                                  FIELDERROR(Quantity);
                                                              END;

                                                   CaptionML=ENU=Direct Delivery }
    { 390 ;   ;Purchase Order      ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   CaptionML=ENU=Purchase Order;
                                                   Editable=No }
    { 391 ;   ;Purchase Order Line No.;Integer    ;TableRelation="Purchase Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                   Document No.=FIELD(Purchase Order));
                                                   CaptionML=ENU=Purch. Order Line No.;
                                                   Editable=No }
    { 410 ;   ;Comment CP Order    ;Text50        ;OnValidate=BEGIN
                                                                //DP00690.c
                                                                IF "Comment CP Order" <> '' THEN BEGIN
                                                                  PlantSetup.GET;
                                                                  PlantSetup.TESTFIELD("Comment CP Order", TRUE);  //RTC.
                                                                  CheckTypePlantOrItem(FIELDCAPTION("Comment CP Order"));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Comment Website Order;
                                                   Description=Customer specific }
    { 420 ;   ;Plant Request No.   ;Code20        ;TableRelation="Plant Request";
                                                   CaptionML=ENU=Plant Request No.;
                                                   Editable=No }
    { 425 ;   ;Plant Request Line No.;Integer     ;TableRelation="Plant Request Line"."Line No." WHERE (Plant Request No.=FIELD(Plant Request No.));
                                                   CaptionML=ENU=Plant Reques Line No.;
                                                   Editable=No }
    { 430 ;   ;Quantity Exit (Sold);Decimal       ;OnValidate=BEGIN
                                                                IF "Quantity Exit (Sold)" <> 0 THEN BEGIN
                                                                  CASE Type OF
                                                                    Type::Plant:
                                                                      BEGIN
                                                                        GetOrderHeader;
                                                                        OrderRec.TESTFIELD(Type, OrderRec.Type::Arrival);
                                                                        IF "Quantity Exit (Sold)" > Quantity THEN
                                                                          ERROR(Text010, FIELDCAPTION("Quantity Exit (Sold)"), FIELDCAPTION(Quantity));
                                                                        TESTFIELD("Rental Type", "Rental Type"::Rental);
                                                                        CALCFIELDS(Bulk);
                                                                        IF NOT Bulk THEN BEGIN
                                                                          TESTFIELD("No.");
                                                                          IF NOT ("Quantity Exit (Sold)" IN [0,1]) THEN
                                                                            FIELDERROR("Quantity Exit (Sold)",Text000);
                                                                        END;
                                                                      END;
                                                                    ELSE //Text + Item
                                                                      TESTFIELD("Quantity Exit (Sold)",0);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Quantity Exit (Sold);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 440 ;   ;Reason Code (Exit)  ;Code10        ;TableRelation="Exit Reason Code";
                                                   OnValidate=VAR
                                                                ExitReason@1100529000 : Record 11072665;
                                                                Item@1100529002 : Record 27;
                                                                SaveCalcExternally@1100529001 : Boolean;
                                                              BEGIN
                                                                CASE Type OF
                                                                  Type::Plant:
                                                                    BEGIN
                                                                      //TESTFIELD("Quantity Exit");  //DP00241.o (26972)
                                                                      //DP00241.sn (26972)
                                                                      IF "Reason Code (Exit)" <> '' THEN BEGIN
                                                                        IF ("Rental Type" <> "Rental Type"::"Buy Back") THEN
                                                                          TESTFIELD("Quantity Exit")
                                                                        ELSE BEGIN
                                                                          ExitReason.GET("Reason Code (Exit)");
                                                                          ExitReason.TESTFIELD("Exit Sold S/BB Plant on Loc.", TRUE);
                                                                          IF GUIALLOWED THEN
                                                                            MESSAGE(Text018, ExitReason.FIELDCAPTION("Exit Sold S/BB Plant on Loc."));
                                                                        END;
                                                                      END;
                                                                      //DP00241.en (26972)
                                                                    END;
                                                                  Type::Item:
                                                                    BEGIN
                                                                      //DP00485.sn (26972)
                                                                      IF "Reason Code (Exit)" <> '' THEN BEGIN
                                                                        IF NOT GetSalesBuyBack() THEN BEGIN
                                                                          Item."No." := "Item No.";
                                                                          Item.TESTFIELD("Sales/Buy-Back Item (Plant)", TRUE);
                                                                        END;
                                                                        GetOrderHeader;
                                                                        OrderRec.TESTFIELD(Type, OrderRec.Type::Removal);
                                                                        ExitReason.GET("Reason Code (Exit)");
                                                                        ExitReason.TESTFIELD("Exit Sold S/BB Plant on Loc.", TRUE);
                                                                        VALIDATE("Sales Rate", 0) ;
                                                                        IF GUIALLOWED THEN
                                                                          MESSAGE(Text018, ExitReason.FIELDCAPTION("Exit Sold S/BB Plant on Loc."));
                                                                      END ELSE BEGIN
                                                                        IF xRec."Reason Code (Exit)" <> '' THEN BEGIN
                                                                          GetOrderHeader;
                                                                          SaveCalcExternally := gPlantOrderCalcExternally;
                                                                          gPlantOrderCalcExternally := TRUE;
                                                                          VALIDATE("Item No.");  // Determine Rate
                                                                          gPlantOrderCalcExternally := SaveCalcExternally;
                                                                        END;
                                                                      END;
                                                                      //DP00485.en (26972)
                                                                    END;
                                                                  ELSE;
                                                                    TESTFIELD("Reason Code (Exit)", '');
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Reason Code (Exit) }
    { 450 ;   ;Inspection No.      ;Code30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Number"."Inspection No." WHERE (Plant Type=FIELD(Plant Type),
                                                                                                             No.=FIELD(No.)));
                                                   CaptionML=ENU=Inspection No.;
                                                   Editable=No }
    { 470 ;   ;To Employee Company ;Text30        ;TableRelation=Company;
                                                   OnValidate=VAR
                                                                lvPlantLocRec@1100485000 : Record 11012554;
                                                              BEGIN
                                                                IF Type = Type::Text THEN BEGIN
                                                                  "To Employee Company" := '';
                                                                  EXIT;
                                                                END;

                                                                OrderRec.GET("Plant Order No.");
                                                                IF (OrderRec."To Location" <> '') AND lvPlantLocRec.GET(OrderRec."To Location") THEN BEGIN
                                                                  IF (lvPlantLocRec."Employee No." <> '') THEN
                                                                    TESTFIELD("To Employee Company", lvPlantLocRec."Company Name");
                                                                END;

                                                                VALIDATE("To Employee No.");
                                                                IF "To Employee Company" = COMPANYNAME THEN
                                                                  "To Employee Company" := '';
                                                              END;

                                                   CaptionML=ENU=To Employee Company }
    { 471 ;   ;To Employee No.     ;Code20        ;TableRelation=IF (To Employee Company=FILTER('')) Employee;
                                                   OnValidate=VAR
                                                                lvEmplRec@1100485000 : Record 5200;
                                                                lvPlantLocRec@1100485001 : Record 11012554;
                                                              BEGIN
                                                                IF Type = Type::Text THEN BEGIN
                                                                  "To Employee No." := '';
                                                                  EXIT;
                                                                END;

                                                                OrderRec.GET("Plant Order No.");
                                                                IF (OrderRec."To Location" <> '') AND lvPlantLocRec.GET(OrderRec."To Location") THEN BEGIN
                                                                  IF (lvPlantLocRec."Employee No." <> '') THEN
                                                                    TESTFIELD("To Employee No.", lvPlantLocRec."Employee No.");
                                                                END;

                                                                IF "To Employee No." = '' THEN
                                                                  EXIT;

                                                                IF "To Employee Company" <> '' THEN
                                                                  lvEmplRec.CHANGECOMPANY("To Employee Company");

                                                                lvEmplRec.GET("To Employee No.");
                                                              END;

                                                   CaptionML=ENU=To Employee No. }
    { 480 ;   ;Original Arrival Order No.;Code20  ;TableRelation="Plant Order".No.;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Original Arrival Order No. }
    { 490 ;   ;Exit Order No.      ;Code20        ;TableRelation="Exit Order";
                                                   OnLookup=VAR
                                                              ExitOrder@1100525000 : Record 11012559;
                                                            BEGIN
                                                              IF "Exit Order No." <> '' THEN BEGIN
                                                                IF ExitOrder.GET("Exit Order No.") THEN BEGIN
                                                                  IF ExitOrder.Posted THEN BEGIN
                                                                    PAGE.RUNMODAL(PAGE::"Posted Exit Order List", ExitOrder);
                                                                    EXIT;
                                                                  END;
                                                                END;
                                                              END;
                                                              ExitOrder."No." := "Exit Order No.";
                                                              PAGE.RUNMODAL(0, ExitOrder);
                                                            END;

                                                   CaptionML=ENU=Exit Order No.;
                                                   Editable=No }
    { 491 ;   ;Exit Order Line No. ;Integer       ;TableRelation="Exit Order Line"."Line No." WHERE (Exit-order No.=FIELD(Exit Order No.));
                                                   CaptionML=ENU=Exit Order Line No.;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 500 ;   ;Element             ;Code20        ;OnValidate=VAR
                                                                lvLocation@1100525000 : Code[20];
                                                              BEGIN
                                                                IF Element = '' THEN
                                                                  EXIT;
                                                                CheckTypePlantOrItem(FIELDCAPTION(Element));
                                                                GetOrderHeader();
                                                                CASE Type OF
                                                                  Type::Plant:
                                                                    BEGIN
                                                                      IF (NOT (OrderRec.Type IN [OrderRec.Type::Arrival, OrderRec.Type::"Other Transfers"])) AND
                                                                         (NOT ((OrderRec.Type = OrderRec.Type::Removal) AND ("Rental Type"="Rental Type"::"Buy Back")))
                                                                      THEN
                                                                        OrderRec.FIELDERROR(Type);
                                                                      IF OrderRec.Type <> OrderRec.Type::Removal THEN BEGIN
                                                                        lvLocation := OrderRec."To Location";
                                                                        OrderRec.TESTFIELD("To Location");
                                                                      END ELSE BEGIN
                                                                        lvLocation := OrderRec."From Location";
                                                                        OrderRec.TESTFIELD("From Location");
                                                                      END;
                                                                      PlantElementMgtCU.OnValidateElement(lvLocation, Element, '', NOT BlockedElementIsAllowed(OrderRec));
                                                                    END;
                                                                  Type::Item:
                                                                    BEGIN
                                                                      IF OrderRec.Type <> OrderRec.Type::Removal THEN
                                                                        lvLocation := OrderRec."To Location"
                                                                      ELSE
                                                                        lvLocation := OrderRec."From Location";
                                                                      CASE OrderRec.Type OF
                                                                        OrderRec.Type::Arrival:
                                                                          OrderRec.TESTFIELD("To Location");
                                                                        OrderRec.Type::Removal:
                                                                          OrderRec.TESTFIELD("From Location");
                                                                        ELSE
                                                                          OrderRec.FIELDERROR(Type);
                                                                      END;
                                                                      PlantElementMgtCU.OnValidateElement(lvLocation, Element, '', NOT BlockedElementIsAllowed(OrderRec));
                                                                    END;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              lvEditable@1100525001 : Boolean;
                                                              lvNewElement@1100525000 : Code[20];
                                                              lvLocation@1100525002 : Code[20];
                                                            BEGIN
                                                              GetOrderHeader();
                                                              IF OrderRec.Type <> OrderRec.Type::Removal THEN
                                                                lvLocation := OrderRec."To Location"
                                                              ELSE
                                                                lvLocation := OrderRec."From Location";
                                                              CASE Type OF
                                                                Type::Plant:
                                                                  BEGIN
                                                                    IF ((OrderRec.Type IN [OrderRec.Type::Arrival, OrderRec.Type::"Other Transfers"]) OR
                                                                        ((OrderRec.Type = OrderRec.Type::Removal) AND ("Rental Type"="Rental Type"::"Buy Back"))) AND (NOT OrderRec.Posted)
                                                                    THEN
                                                                      lvEditable := TRUE;
                                                                  END;
                                                                Type::Item:
                                                                  BEGIN
                                                                    IF (OrderRec.Type IN [OrderRec.Type::Arrival, OrderRec.Type::Removal]) AND (NOT OrderRec.Posted) THEN
                                                                      lvEditable := TRUE;
                                                                  END;
                                                              END;
                                                              lvNewElement := PlantElementMgtCU.OnLookupElement(lvLocation, Element, '', lvEditable);
                                                              IF (lvNewElement <> '') AND (lvNewElement <> Element) THEN
                                                                VALIDATE(Element, lvNewElement);
                                                            END;

                                                   CaptionML=ENU=Element }
    { 510 ;   ;Plant Order Status  ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Order".Status WHERE (No.=FIELD(Plant Order No.)));
                                                   CaptionML=ENU=Plant Order Status;
                                                   OptionCaptionML=ENU=Open,Printed,Released,Posted;
                                                   OptionString=Open,Printed,Released,Posted;
                                                   Editable=No }
    { 520 ;   ;Plant Order Type    ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Order".Type WHERE (No.=FIELD(Plant Order No.)));
                                                   CaptionML=ENU=Plant Order Type;
                                                   OptionCaptionML=ENU=Arrival,Removal,Other Transfers,Negative Inventory Correction;
                                                   OptionString=Arrival,Removal,Other Transfers,Negative Inventory Correction;
                                                   Editable=No }
    { 600 ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                //DP00690
                                                                IF "Location Code" <> '' THEN
                                                                  TESTFIELD(Type, Type::Item);

                                                                IF "Location Code" <> xRec."Location Code" THEN BEGIN
                                                                  GetItemUnitPrice(FIELDNO("Location Code"));
                                                                  VALIDATE("Sales Rate");
                                                                  CheckItemInventoryWarning(0);  //*19786.n
                                                                  IF ("New Location Code" <> '') AND ("New Location Code" = "Location Code") THEN //*DP00183.n
                                                                    "New Location Code" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Location Code (Item);
                                                   Description=DP00690 (Item) }
    { 605 ;   ;New Location Code   ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                //*DP00183.n  //DP00690
                                                                IF "New Location Code" <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Item);
                                                                  CALCFIELDS("Plant Order Type");
                                                                  TESTFIELD("Plant Order Type", "Plant Order Type"::"Other Transfers");
                                                                  IF NOT IsOtherTransferDepotToDepot() THEN
                                                                    TESTFIELD("New Location Code", '');
                                                                  IF "New Location Code" = "Location Code" THEN
                                                                    FIELDERROR("New Location Code");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=New Location Code (Item);
                                                   Description=DP00690 (Item) }
    { 610 ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Description=DP00690 (Item)  Only used for Item, N.A. for Plant (then 1);
                                                   Editable=No }
    { 620 ;   ;Item Amount         ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Item Amount" <> 0) THEN BEGIN
                                                                  TESTFIELD(Type, Type::Item);
                                                                  TESTFIELD("Reason Code (Exit)", '');  //DP00485 (26972)
                                                                  IF GetQuantity() = 0 THEN
                                                                    TESTFIELD(Quantity);
                                                                END ELSE BEGIN
                                                                  IF Type <> Type::Item THEN
                                                                    EXIT;
                                                                END;

                                                                IF GetQuantity() <> 0 THEN BEGIN
                                                                  "Sales Rate" := "Item Amount" / GetQuantity()
                                                                END ELSE
                                                                  "Sales Rate" := "Item Amount";

                                                                GLSetup.GET;
                                                                "Sales Rate" := ROUND("Sales Rate", GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Item Amount;
                                                   BlankZero=Yes;
                                                   Description=DP00690 (Item);
                                                   AutoFormatType=1 }
    { 625 ;   ;Qty. for Item Reservation;Decimal  ;OnValidate=BEGIN
                                                                SetQtyForItemReservation;
                                                              END;

                                                   CaptionML=ENU=Qty. for Item Reservation;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Description=DP00690 (Item);
                                                   Editable=No }
    { 630 ;   ;Reserved Item Qty. (Base);Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Plant Order No.),
                                                                                                                 Source Ref. No.=FIELD(Line No.),
                                                                                                                 Source Type=CONST(11012557),
                                                                                                                 Reservation Status=CONST(Reservation)));
                                                   CaptionML=ENU=Reserved Item Qty. (Base);
                                                   Description=DP00690 (Item);
                                                   Editable=No }
    { 640 ;   ;Plant Location (Posted Item);Code20;TableRelation="Plant Location";
                                                   CaptionML=ENU=Plant Location;
                                                   Description=DP00690 (Item) Is filled during posting PO-line, with From or To locatie (depending Order Type);
                                                   Editable=No }
    { 650 ;   ;Sales/Buy-Back Item ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Item."Sales/Buy-Back Item (Plant)" WHERE (No.=FIELD(Item No.)));
                                                   OnValidate=VAR
                                                                lvText11012001@1100485003 : TextConst 'ENU=Not allowed, there are still Sales/Buy Back Rates present.';
                                                              BEGIN
                                                              END;

                                                   CaptionML=ENU=Sales/Buy-Back Item;
                                                   Description=Only for Item lines;
                                                   Editable=No }
    { 9000;   ;BarCodeText         ;Text30        ;OnValidate=BEGIN
                                                                IF BarCodeText <> ''THEN
                                                                  CheckTypePlantOrItem(FIELDCAPTION(BarCodeText));
                                                              END;

                                                   CaptionML=ENU=Bar Code;
                                                   Description=BNBM Specific }
    { 9001;   ;Order Picking Status;Option        ;OnValidate=BEGIN
                                                                IF "Order Picking Status" <> 0 THEN BEGIN
                                                                  CheckTypePlantOrItem(FIELDCAPTION("Order Picking Status"));
                                                                  PlantSetup.GET;
                                                                  PlantSetup.TESTFIELD("PO-Picking Bar Code Scanner", TRUE);  //RTC.
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Order Picking Status;
                                                   OptionCaptionML=ENU=" ,No Stock,Ready";
                                                   OptionString=[ ,No Stock,Ready];
                                                   Description=BNBM Specific }
    { 9002;   ;Shelf/Bin No.       ;Code20        ;TableRelation="Shelf per Location".Code;
                                                   OnValidate=VAR
                                                                CompInfoRec@1100528201 : Record 79;
                                                                ShelfRec@1100528200 : Record 11020241;
                                                              BEGIN
                                                                //BNBM Specific
                                                                CompInfoRec.GET;
                                                                IF "Shelf/Bin No." <> '' THEN
                                                                  ShelfRec.GET(CompInfoRec."Location Code", "Shelf/Bin No.");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Shelf No.;
                                                   Description=BNBM Specific }
  }
  KEYS
  {
    {    ;Plant Order No.,Line No.                ;Clustered=Yes }
    {    ;Plant Order No.,From Location,Type,Plant Type,Sold Filter,No.,From Rate Code;
                                                   SumIndexFields=Quantity }
    {    ;Location Copied Need,Line No. Copied Need;
                                                   SumIndexFields=Quantity }
    {    ;Posted,Plant Type                        }
    {    ;Exit Order No.,Exit Order Line No.      ;MaintainSIFTIndex=No }
    {    ;Item No.,Posted,Location Code,Variant Code,Transfer Date;
                                                   SumIndexFields=Qty. for Item Reservation }
    {    ;Plant Location (Posted Item),Item No.,Transfer Date;
                                                   MaintainSIFTIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@11012011 : TextConst 'ENU=must be 0 or 1 for unique Plant';
      Text001@11012012 : TextConst 'ENU=Plant No. %1 %2 is present on location %3. Do you want to transfer plant from this location?';
      Text002@11012013 : TextConst 'ENU=Total %1 (%2) of Plant Type '' %3'' is greater  than %4 (%5).';
      Text003@11012014 : TextConst 'ENU=Total %1 (%2) of Plant No. ''%3-%4'' is greater than the %5 (%6). \%7';
      Text004@11012015 : TextConst 'ENU=Warning!  %1 ''%2-%3'' has to be inspected before %4 (Inspection Type ''%5'').';
      GLSetup@11012000 : Record 98;
      PlantSetup@11012001 : Record 11012550;
      OrderRec@11012002 : Record 11012556;
      OrderLineRec@11012003 : Record 11012557;
      PlantRec@11012004 : Record 11012551;
      PlantNoRec@11012005 : Record 11012552;
      StandardText@11012006 : Record 7;
      InspecTypeRec@1100485009 : Record 11012562;
      PlantInspecTypeRec@1100485008 : Record 11012563;
      InspectionRec@11012007 : Record 11012564;
      TempOrderLine@11012008 : Record 11012557;
      PlantLocRec@11012009 : Record 11012554;
      SetRec@1100485000 : Record 11012587;
      ItemRec@1100485005 : Record 27;
      PlantRateCodeRec@1100525002 : Record 11020502;
      SearchRate@11012010 : Codeunit 11012567;
      Text004b@1100529003 : TextConst 'ENU=Warning!  %1 ''%2-%3'' has to be inspected before %4 %5 (Inspection Type ''%6'', %7 %8).';
      Text005@1100485001 : TextConst 'ENU=must be 1 (or 0) for a set that contains unique Plant with Plant No. filled';
      Text006@1100529004 : TextConst 'ENU=%1 niot allowed for voor %2 ''%3''';
      Text008@1100485004 : TextConst 'ENU=Total %1 (%2) of Plant No. ''%3-%4'', Rate Code ''%5'' is greater than the  %6 (%7). \%8';
      Text009@1100485007 : TextConst 'ENU=NOTE!  %1 ''%2-%3'' is disaproved on %4 for Inspection Type ''%5''.';
      PlantOrderCostMgtCU@1100485014 : Codeunit 11012581;
      PlantElementMgtCU@1100525000 : Codeunit 11012582;
      gCreateFromPlantRequest@1100485010 : Boolean;
      Text010@1100485012 : TextConst 'ENU=%1 may not exceed %2.';
      Text011@1100485013 : TextConst 'ENU=%1 not allowed for Order Type ''%2''.';
      Text012@1100485015 : TextConst 'ENU=may not be modified. Of this Plant Order Line already linked Cost Line(s) present where already a Purchase Order is created';
      Text013@1100525001 : TextConst 'ENU=may not be a Depot';
      Text014@1100525003 : TextConst 'ENU=Plant No. ''%1-%2'' is registered as loss on %3,  location ''%4'', exit order ''%5''.';
      Text015@1210190000 : TextConst 'ENU=Note: Plant No. %1-%2 is present on location %3.';
      Text016@1100529000 : TextConst 'ENU="Note: %1 ''%2-%3'' present on %4 ''%5'', %6 ''%7'', %8 ''%9''. "';
      Text017@1100529001 : TextConst 'ENU=Note: %1 (%2) of Plant No. ''%3-%4'' is greater than %5 (%6) and %7 is %8.';
      Text018@1100529002 : TextConst 'ENU=Note: Concerns ''%1'', so no Buy Back and will also return to Depot.';
      gPlantOrderCalcExternally@1100529005 : Boolean;
      Text021@1100529010 : TextConst 'ENU=Items not allowed for %1 is ''%2''';
      Text022@1100529009 : TextConst 'ENU=No %1 found for Item ''%2''.';
      Text023@1100529008 : TextConst 'ENU=%1 (%2) is greater than inventory (%3), %4 ''%5'' %6%7 ''%8''.';
      Text024@1100529007 : TextConst 'ENU=For %1 is ''%2'' only items allowed for transfer from Depot to Depot.';
      NoInventoryWarning@1100529006 : Boolean;
      Text025@1100529012 : TextConst 'ENU=Modify %1 not allowed, %2 is ''%3''';
      Text026@1100529011 : TextConst 'ENU=Modify %1, attention %2 is ''%3''';
      Text027@1100525004 : TextConst 'ENU=%1 ''%2-%3'' is not present on %4 ''%5''.';
      Text028a@1100525005 : TextConst 'ENU=According to the system not yet present in the %1.';
      Text028b@1100525006 : TextConst 'ENU=According to the system not present in the %1 anymore.';
      Text028c@1100525007 : TextConst 'ENU=According to the system present on %1, ''%2''.';
      Text029@1100525008 : TextConst 'ENU=Consult the Plant Manager.';
      SkipGetOrderHeader@1100525009 : Boolean;

    PROCEDURE InitRecord@6();
    BEGIN
      IF OrderRec.GET("Plant Order No.") THEN BEGIN
        "Transfer Date" := OrderRec."Transfer Date";
        "From Location" := OrderRec."From Location";
        FillDefaultToEmployee();
      END;
    END;

    PROCEDURE PlantOrderTotalWeight@3(IFromLoadUnloadCostLineTO@1100485001 : Boolean) : Decimal;
    VAR
      OrderLineRec@11012000 : Record 11012557;
      PlantRec@11012001 : Record 11012551;
      Item@1100529000 : Record 27;
      CountWeightInLoadUnloadTO@1100529002 : Boolean;
      WeightPlantItem@1100529001 : Decimal;
      TotWeight@11012002 : Decimal;
      QuanLine@1100525000 : Decimal;
    BEGIN
      IF "Plant Order No." = '' THEN
        EXIT(0);
      IF NOT OrderRec.GET("Plant Order No.") THEN
        EXIT(0);

      PlantSetup.GET;

      TotWeight := 0;
      OrderLineRec.RESET;
      OrderLineRec.SETRANGE("Plant Order No.","Plant Order No.");
      OrderLineRec.SETFILTER(Type, '<>%1', OrderLineRec.Type::Text);
      IF OrderLineRec.FINDSET THEN BEGIN
        REPEAT
          IF NOT OrderLineRec.ExitSoldSBBOnLoc() THEN BEGIN //DP00241.n (26972) Is not shipped, does not come back to depot.
            WeightPlantItem := 0;
            CASE OrderLineRec.Type OF
              OrderLineRec.Type::Plant:
                IF PlantRec.GET(OrderLineRec."Plant Type") THEN BEGIN
                  WeightPlantItem := PlantRec.Weight;
                  CountWeightInLoadUnloadTO := PlantRec."Count Weight in Load/Unload TO";
                END;
              OrderLineRec.Type::Item:
                IF Item.GET(OrderLineRec."Item No.") THEN BEGIN
                  WeightPlantItem := Item.Weight;
                  CountWeightInLoadUnloadTO := Item."Count Weight in Load/Unload TO";
                END;
            END;
            IF WeightPlantItem <> 0 THEN BEGIN
              QuanLine := OrderLineRec.Quantity;
              IF (QuanLine = 0) AND PlantSetup."Extended Picking Procedure" AND
                 (OrderRec.Type = OrderRec.Type::Arrival) AND (NOT OrderRec.Posted)
              THEN
                QuanLine := OrderLineRec."Asked Quantity";
              IF OrderLineRec.Type = OrderLineRec.Type::Item THEN
                QuanLine := QuanLine * OrderLineRec."Qty. per Unit of Measure";
              IF (NOT IFromLoadUnloadCostLineTO) OR (IFromLoadUnloadCostLineTO AND CountWeightInLoadUnloadTO) THEN
                TotWeight := ROUND(TotWeight + (WeightPlantItem * QuanLine));
            END;
          END;  //DP00241.n (26972)
        UNTIL OrderLineRec.NEXT = 0;
      END;

      EXIT(TotWeight);
    END;

    PROCEDURE PlantOrderTotalWeightPlantType@1100525000(IPlantType@1100525001 : Code[20];IFromLoadUnloadCostLineTO@1100485001 : Boolean) : Decimal;
    VAR
      OrderLineRec@11012000 : Record 11012557;
      PlantRec@11012001 : Record 11012551;
      TotWeight@11012002 : Decimal;
      QuanLine@1100525000 : Decimal;
    BEGIN
      IF ("Plant Order No." = '') OR (IPlantType = '') THEN
        EXIT(0);

      TotWeight := 0;
      OrderLineRec.RESET;
      OrderLineRec.SETRANGE("Plant Order No.","Plant Order No.");
      OrderLineRec.SETRANGE(Type, OrderLineRec.Type::Plant);
      OrderLineRec.SETRANGE("Plant Type", IPlantType);
      IF OrderLineRec.FIND('-') THEN BEGIN
        REPEAT
          IF NOT OrderLineRec.ExitSoldSBBOnLoc() THEN BEGIN //DP00241.n (26972) Is not shipped, does not come back to depot.
            IF PlantRec.GET(OrderLineRec."Plant Type") THEN BEGIN
              QuanLine := OrderLineRec.Quantity;
              IF (QuanLine = 0) AND (OrderLineRec."Asked Quantity" <> 0) AND
                 (OrderRec.Type = OrderRec.Type::Arrival) AND (NOT OrderRec.Posted)
              THEN
                QuanLine := OrderLineRec."Asked Quantity";
              IF (NOT IFromLoadUnloadCostLineTO) OR (IFromLoadUnloadCostLineTO AND PlantRec."Count Weight in Load/Unload TO") THEN
                TotWeight := ROUND(TotWeight + PlantRec.Weight * QuanLine);
            END;
          END;  //DP00241.n (26972)
        UNTIL OrderLineRec.NEXT = 0;
      END;

      EXIT(TotWeight);
    END;

    PROCEDURE CheckInventory@1();
    VAR
      NumberPLantNotInDB@11012000 : Decimal;
    BEGIN
      IF GUIALLOWED THEN
        EXIT;
      PlantSetup.GET;
      IF NOT PlantSetup."Stockout Warning" THEN
        EXIT;

      NumberPLantNotInDB := Quantity;
      OrderLineRec.RESET;
      OrderLineRec := Rec;
      IF OrderLineRec.FIND('=') THEN
        IF ("Plant Type" = OrderLineRec."Plant Type") AND
           ("No." = OrderLineRec."No.") AND
           ("Rental Type" = OrderLineRec."Rental Type")
        THEN
          NumberPLantNotInDB := Quantity - OrderLineRec.Quantity;

      IF ("No." <> '') AND (("From Rate Code" <> '') OR (PlantSetup."Rate Codes" AND (CurrFieldNo=FIELDNO(Quantity)))) THEN BEGIN
        CALCFIELDS("Stock Rate Code on From Loc.","Quantity Rate Code");
        IF ("Quantity Rate Code" + NumberPLantNotInDB) > "Stock Rate Code on From Loc." THEN
          MESSAGE(Text008,
            FIELDCAPTION(Quantity), ("Quantity Rate Code" + NumberPLantNotInDB), "Plant Type", "No.",
            "From Rate Code", FIELDCAPTION("Stock Rate Code on From Loc."), "Stock Rate Code on From Loc.",
            ExtraInfoPresentLoc());  //*31576.n (extra argument)
      END ELSE BEGIN
        SetDateFilter;
        IF "No." <= '0' THEN BEGIN  //* Plant No. not specified
          CALCFIELDS("Stock Plant Type on From Loc.","Quantity Plant Type");
          IF ("Quantity Plant Type" + NumberPLantNotInDB) > "Stock Plant Type on From Loc." THEN
            MESSAGE(Text002,
              FIELDCAPTION(Quantity), ("Quantity Plant Type"+ NumberPLantNotInDB), "Plant Type",
              FIELDCAPTION("Stock Plant Type on From Loc."), "Stock Plant Type on From Loc.");
        END ELSE BEGIN
          CALCFIELDS("Stock Plant No. on From Loc.","Quantity Plant No.");
          IF ("Quantity Plant No." + NumberPLantNotInDB) > "Stock Plant No. on From Loc." THEN
            MESSAGE(Text003,
              FIELDCAPTION(Quantity), ("Quantity Plant No." + NumberPLantNotInDB), "Plant Type", "No.",
              FIELDCAPTION("Stock Plant No. on From Loc."), "Stock Plant No. on From Loc.",
              ExtraInfoPresentLoc());  //*31576.n (extra argument)
        END;
      END;
    END;

    LOCAL PROCEDURE SuggestionFromLocUniquePlant@1100525008();
    BEGIN
      PlantSetup.GET;

      //Proposal
      IF ("No." > '0') AND PlantSetup."Suggestion Loc. Unique Plant" AND (NOT gCreateFromPlantRequest) AND GUIALLOWED THEN BEGIN
        CALCFIELDS(Bulk);
        IF NOT Bulk THEN BEGIN
          CALCFIELDS("Present Location");
          GetOrderHeader;
          IF OrderRec.Posted OR (OrderRec.Status >= OrderRec.Status::Released) THEN
            EXIT;
          IF PlantSetup."Order Picking Procedure" AND (OrderRec.Type = OrderRec.Type::Arrival) AND
             (OrderRec."Order Picking Status" <> OrderRec."Order Picking Status"::Open)
          THEN
            EXIT;

          IF (OrderRec.Type = OrderRec.Type::Removal) THEN BEGIN
            IF PlantLocRec.GET("Present Location") THEN
              IF PlantLocRec.Depot THEN
                "Present Location" := '';
          END ELSE BEGIN
            IF PlantSetup."Order Picking Procedure" AND (OrderRec.Type = OrderRec.Type::Arrival) AND
               (OrderRec."Order Picking Status" = OrderRec."Order Picking Status"::"In Process")
            THEN  //No suggestion allowed for the order picker (Dp00688)
              "Present Location" := '';
          END;

          IF "Present Location" <> '' THEN BEGIN
            IF ("From Location" <> "Present Location") AND ("Present Location" <> OrderRec."To Location") THEN BEGIN
              IF CONFIRM(Text001, TRUE, "Plant Type", "No.", "Present Location") THEN
                "From Location" := "Present Location";
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE OrderPickerCheckUniquePlantNoOnLoc@1100525009();
    VAR
      PlantInventory@1100525000 : Record 11012555;
      ErrorTxt@1100525001 : Text;
    BEGIN
      //C023118 (If in Arrival Plant Order Form for Order Picker)
      PlantInventory.SETCURRENTKEY(Removed, "Plant Type", "Plant No.", "Rate Code", Location);
      PlantInventory.SETRANGE(Removed, FALSE);
      PlantInventory.SETRANGE("Plant Type", "Plant Type");
      PlantInventory.SETRANGE("Plant No.", "No.");
      IF NOT PlantInventory.FINDFIRST THEN BEGIN
        PlantInventory.SETRANGE(Removed, TRUE);
        IF PlantInventory.ISEMPTY THEN
          ErrorTxt := STRSUBSTNO(Text028a, PlantInventory.TABLECAPTION)
        ELSE
          ErrorTxt := STRSUBSTNO(Text028b, PlantInventory.TABLECAPTION);
      END ELSE BEGIN
        IF PlantInventory.Location <> "From Location" THEN
          ErrorTxt := STRSUBSTNO(Text028c, PlantInventory.FIELDCAPTION(Location), PlantInventory.Location);
      END;
      IF ErrorTxt <> '' THEN
        ERROR(
          STRSUBSTNO(Text027, PlantNoRec.TABLECAPTION, "Plant Type", "No.", PlantInventory.FIELDCAPTION(Location), "From Location") +
          ' ' + ErrorTxt + ' ' + Text029);
    END;

    PROCEDURE ExtraInfoPresentLoc@1210190004() : Text[250];
    BEGIN
      //*31576.n
      CALCFIELDS(Bulk);
      IF NOT Bulk THEN BEGIN
        CALCFIELDS("Present Location");
        IF ("From Location" <> "Present Location") AND ("Present Location" <> '') THEN
          EXIT(STRSUBSTNO(Text015, "Plant Type", "No.", "Present Location"));
      END;
      EXIT('');
    END;

    PROCEDURE CheckInspection@2();
    VAR
      MeterReading@1100529000 : Record 11072671;
      NextMeterReading@1100529001 : Decimal;
      CurrMeterReading@1100529002 : Decimal;
      OServiceOrder@1100409000 : Code[20];
    BEGIN
      CALCFIELDS(Bulk);
      IF Bulk OR (Type <> Type::Plant) THEN
        EXIT;

      GetOrderHeader;
      IF OrderRec.Type = OrderRec.Type::Removal THEN
        EXIT;

      PlantInspecTypeRec.RESET;
      PlantInspecTypeRec.SETRANGE("Plant Type", "Plant Type");
      IF PlantInspecTypeRec.FINDSET THEN BEGIN
        REPEAT
          IF InspecTypeRec.GET(PlantInspecTypeRec."Inspection Type") THEN BEGIN
            IF InspecTypeRec."Inspection Warning" THEN BEGIN  //30102013.c
              InspectionRec.RESET;
              InspectionRec.SETCURRENTKEY("Plant Type","Plant No.","Inspection Type","Inspected on");
              InspectionRec.SETRANGE("Plant Type","Plant Type");
              InspectionRec.SETRANGE("Plant No.","No.");
              InspectionRec.SETRANGE("Inspection Type",InspecTypeRec.Code);
              InspectionRec.SETRANGE("Inspection Result",InspectionRec."Inspection Result"::Disapproved);
              IF InspectionRec.FINDLAST THEN BEGIN
                InspectionRec.SETFILTER("Inspected on", '%1..', InspectionRec."Inspected on");
                InspectionRec.SETFILTER("Line No.", '>%1', InspectionRec."Line No.");
                InspectionRec.SETRANGE("Inspection Result",InspectionRec."Inspection Result"::Approved);
                IF NOT InspectionRec.FINDFIRST THEN BEGIN
                  IF GUIALLOWED THEN
                    MESSAGE(Text009,
                      InspectionRec.FIELDCAPTION("Plant No."), "Plant Type", "No.",
                      InspectionRec."Inspected on", InspecTypeRec.Code);
                END;
              END;
              //IF FORMAT(InspecTypeRec."Time Limit Warning") <> '' THEN BEGIN  //30102013.n  //DP00614.o
              IF (FORMAT(InspecTypeRec."Time Limit Warning") <> '') AND
                 (InspecTypeRec."Inspection Based on" <> InspecTypeRec."Inspection Based on"::Quantity)
              THEN BEGIN  //DP00614.n
                InspectionRec.RESET;
                InspectionRec.SETCURRENTKEY("Plant Type","Plant No.","Inspect before");
                InspectionRec.SETRANGE("Plant Type","Plant Type");
                InspectionRec.SETRANGE("Plant No.","No.");
                InspectionRec.SETRANGE("Inspection Type",InspecTypeRec.Code);
                InspectionRec.SETRANGE("Inspection Result",InspectionRec."Inspection Result"::" ");
                InspectionRec.SETRANGE("Date Filter",0D,CALCDATE(InspecTypeRec."Time Limit Warning","Transfer Date"));
                InspectionRec.SETRANGE("Plant to Inspect",TRUE);
                IF InspectionRec.FINDFIRST THEN BEGIN
                  IF GUIALLOWED THEN
                    MESSAGE(Text004,
                      InspectionRec.FIELDCAPTION("Plant No."), "Plant Type", "No.",
                      InspectionRec."Inspect before", InspecTypeRec.Code);
                END;
              END;
              //DP00614.sn
              IF (InspecTypeRec."Interval Limit Warning" <> 0) AND
                 (InspecTypeRec."Inspection Based on" <> InspecTypeRec."Inspection Based on"::Time)
              THEN BEGIN
                NextMeterReading := MeterReading.NextMeterReadingForInspectType(
                  "Plant Type", "No.", InspecTypeRec.Code, InspecTypeRec."Meter Reading Type");
                CurrMeterReading := MeterReading.GetActualMeterReading("Plant Type", "No.", InspecTypeRec."Meter Reading Type", OServiceOrder);
                IF CurrMeterReading >= NextMeterReading - InspecTypeRec."Interval Limit Warning" THEN BEGIN
                  InspecTypeRec.CALCFIELDS("Unit of Measure");
                  IF GUIALLOWED THEN
                    MESSAGE(Text004b,
                      InspectionRec.FIELDCAPTION("Plant No."), "Plant Type", "No.",
                      NextMeterReading, InspecTypeRec."Unit of Measure", InspecTypeRec.Code,
                      MeterReading.FIELDCAPTION("Meter Reading"), CurrMeterReading);
                  END;
              END;
              //DP00614.en
            END;
          END;
        UNTIL PlantInspecTypeRec.NEXT = 0;
      END;
    END;

    PROCEDURE GetPlantDescription@4();
    BEGIN
      IF Type <> Type::Plant THEN
        EXIT;

      PlantNoRec.GetPlantDescription("Plant Type","No.",Description);
    END;

    PROCEDURE GetOrderHeader@5();
    BEGIN
      IF gPlantOrderCalcExternally THEN
        EXIT;

      TESTFIELD("Plant Order No.");
      //IF ("Plant Order No." <> OrderRec."No.") THEN   Not this test, can be changed in order header
        OrderRec.GET("Plant Order No.");
    END;

    PROCEDURE PriceRoundingPrecision@7() : Decimal;
    BEGIN
      GLSetup.GET;
      GLSetup.TESTFIELD("Unit-Amount Rounding Precision");
      EXIT(GLSetup."Unit-Amount Rounding Precision");
    END;

    PROCEDURE GetDefaults@10();
    BEGIN
      PlantRec.GET(Rec."Plant Type");
      GetOrderHeader();

      CASE PlantRec."Rental Type" OF
        PlantRec."Rental Type"::Rental:
          "Rental Type" := "Rental Type"::Rental;
        PlantRec."Rental Type"::"Sales/Buy Back":
          BEGIN
            CASE OrderRec.Type OF
              OrderRec.Type::Arrival: "Rental Type" := "Rental Type"::Sales;
              OrderRec.Type::Removal: "Rental Type" := "Rental Type"::"Buy Back";
              OrderRec.Type::"Other Transfers",
              OrderRec.Type::"Negative Inventory Correction":
                BEGIN
                  TESTFIELD("From Location");
                  PlantLocRec.GET("From Location");
                  IF PlantLocRec.Depot THEN
                    "Rental Type" := "Rental Type"::Sales
                  ELSE BEGIN
                    PlantLocRec.GET(OrderRec."To Location");
                    IF PlantLocRec.Depot THEN
                      "Rental Type" := "Rental Type"::"Buy Back"
                    ELSE
                      "Rental Type" := "Rental Type"::"Buy Back and Sales";
                  END;
                END;
            END;
          END;
        PlantRec."Rental Type"::Both:
          BEGIN
            "Rental Type" := "Rental Type"::Rental;
          END;
      END;
      CheckPurchOrderTypeForSales(FALSE);

      FillDefaultToLocation();

      FillDefaultFromRateCode();
      FillDefaultToRateCode();
      SetBoughtFilter;
      GetRates;
    END;

    PROCEDURE FillDefaultToLocation@1100485012();
    VAR
      ReturnDepots@1100409000 : Record 11012668;
      ExternalPlant@1100525000 : Boolean;
    BEGIN
      "To Location" := '';
      IF (Type <> Type::Plant) OR ("Plant Type" = '') OR ("No." = '') THEN
        EXIT;

      IF NOT PlantRec.GET("Plant Type") THEN
        EXIT;
      ExternalPlant := PlantRec.External;

      IF ("No." <> '0') THEN BEGIN
        IF PlantNoRec.GET("Plant Type","No.") THEN
          ExternalPlant := PlantNoRec.External;
      END;

      GetOrderHeader();
      IF (OrderRec.Type <> OrderRec.Type::Removal) THEN
        EXIT;

      //DP0152.so
      //IF NOT ExternalPlant THEN BEGIN
      //  IF (PlantRec."Return Depot" <> '') THEN
      //    "To Location" := PlantRec."Return Depot"
      //END ELSE BEGIN
      //  IF (PlantRec."Return Depot External Plant" <> '') THEN
      //    "To Location" := PlantRec."Return Depot External Plant"
      //END;
      //DP0152.eo

      //DP0152.sn
      PlantSetup.GET;
      IF (OrderRec."To Location" = '') AND
         (PlantSetup."Deviating Return Depot base on" = PlantSetup."Deviating Return Depot base on"::"Multiple Depots")
      THEN
        EXIT;

      IF NOT ExternalPlant THEN BEGIN
        IF PlantRec."Deviating Return Depot" THEN BEGIN
          CASE PlantSetup."Deviating Return Depot base on" OF
            PlantSetup."Deviating Return Depot base on"::"One Depot":
              "To Location" := PlantRec."Return Depot";
            PlantSetup."Deviating Return Depot base on"::"Multiple Depots":
              IF ReturnDepots.GET(OrderRec."To Location") THEN
                "To Location" := ReturnDepots."Return Depot";
          END;
        END;
      END ELSE BEGIN
        IF PlantRec."Deviating Return Depot Ext.Plt" THEN BEGIN
          CASE PlantSetup."Deviating Return Depot base on" OF
            PlantSetup."Deviating Return Depot base on"::"One Depot":
              "To Location" := PlantRec."Return Depot External Plant";
            PlantSetup."Deviating Return Depot base on"::"Multiple Depots":
              IF ReturnDepots.GET(OrderRec."To Location") THEN
                "To Location" := ReturnDepots."Return Depot External Plant";
          END;
        END;
        IF "To Location" = '' THEN
          "To Location" := PlantSetup.GetReturnDepotExternalPlant();  //DP00241.n (24932)
      END;
      //DP0152.en
    END;

    PROCEDURE GetToLocationCode@1100525001() : Code[20];
    BEGIN
      GetOrderHeader;
      IF (OrderRec.Type = OrderRec.Type::Removal) AND ("To Location" <> '') THEN
        EXIT("To Location")
      ELSE
        EXIT(OrderRec."To Location");
    END;

    PROCEDURE FillRatesFromUpdatePlantOrder@1100525013(PlantOrder@1100525000 : Record 11012556);
    BEGIN
      // Plant Order record not updated yet in database
      OrderRec := PlantOrder;
      IF Type = Type::Plant THEN BEGIN
        SkipGetOrderHeader :=TRUE;
        GetRates;
        SkipGetOrderHeader :=FALSE;
      END;
    END;

    PROCEDURE GetRates@12();
    VAR
      DummyDec@11012000 : Decimal;
      GiveMessage@11012001 : 'Do Not Report,Report,Error Report';
    BEGIN
      IF Type <> Type::Plant THEN
        EXIT;
      IF SkipGetOrderHeader THEN
        SkipGetOrderHeader := FALSE
      ELSE
        GetOrderHeader;
      Rec."Sales Rate" := 0;
      Rec."Buy Back Rate" := 0;

      PlantSetup.GET;
      IF PlantSetup."Rate Warning" AND GUIALLOWED THEN
        GiveMessage := GiveMessage::Report
      ELSE
        GiveMessage := GiveMessage::"Do Not Report";

      CASE "Rental Type" OF
        "Rental Type"::Rental:
          IF PlantSetup."Rate Warning" THEN
            DummyDec := SearchRate.Rate(OrderRec."To Location",
                       "Plant Type","No.","To Rate Code","Transfer Date",0,GiveMessage,'');
        "Rental Type"::Sales:
          Rec."Sales Rate" := SearchRate.Rate(OrderRec."To Location",
                       "Plant Type","No.",'',"Transfer Date",1,GiveMessage,'');
        "Rental Type"::"Buy Back":
          Rec."Buy Back Rate" := SearchRate.Rate(OrderRec."From Location",
                       "Plant Type","No.",'',"Transfer Date",2,GiveMessage,'');
        "Rental Type"::"Buy Back and Sales":
          BEGIN
            Rec."Sales Rate" := SearchRate.Rate(OrderRec."To Location",
                       "Plant Type","No.",'',"Transfer Date",1,GiveMessage,'');
            IF CheckBuyBackRateIsSalesRate(OrderRec) THEN  //C022786
              "Buy Back Rate" := "Sales Rate"
            ELSE
              Rec."Buy Back Rate" := SearchRate.Rate(OrderRec."From Location",
                       "Plant Type","No.",'',"Transfer Date",2,GiveMessage,'');
          END;
      END;
    END;

    PROCEDURE SetBoughtFilter@15();
    BEGIN
      "Sold Filter" := NOT ("Rental Type" IN ["Rental Type"::Rental, "Rental Type"::Sales]);
    END;

    PROCEDURE UniquePlantWithNoFilledOnSet@1100485003(ISetCode@1100485001 : Code[10]) : Boolean;
    VAR
      lvSetLineRec@1100485000 : Record 11012588;
    BEGIN
      lvSetLineRec.SETRANGE("Set Code", ISetCode);
      lvSetLineRec.SETRANGE(Type, lvSetLineRec.Type::Plant);
      lvSetLineRec.SETRANGE(Bulk, FALSE);
      lvSetLineRec.SETFILTER("Plant No.", '<>%1', '');
      IF lvSetLineRec.FIND('-') THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE CheckLocBlocked@1100485001(ILocation@11012000 : Code[20];Transaction@1210190000 : Boolean);
    BEGIN
      IF (ILocation <> '') THEN BEGIN
        PlantLocRec.GET(ILocation);
        PlantLocRec.CheckBlock(1,TRUE,Transaction);
      END;
    END;

    PROCEDURE FillDefaultFromRateCode@1100485004();
    VAR
      lvInventoryRec@1100485000 : Record 11012555;
      lvDefaultRateCode@1100485001 : Code[10];
    BEGIN
      SetBoughtFilter();
      lvInventoryRec.SETRANGE(Removed, FALSE);
      lvInventoryRec.SETRANGE(Location, "From Location");
      lvInventoryRec.SETRANGE("Plant Type", "Plant Type");
      lvInventoryRec.SETRANGE("Plant No.", "No.");
      lvInventoryRec.SETRANGE(Sold, "Sold Filter");
      lvInventoryRec.SETFILTER(Quantity, '>0');
      IF lvInventoryRec.FIND('-') THEN BEGIN
        IF (NOT Bulk) THEN
          "From Rate Code" := lvInventoryRec."Rate Code"
        ELSE BEGIN
          lvDefaultRateCode := lvInventoryRec."Rate Code";
          lvInventoryRec.SETFILTER("Rate Code", '<>%1', lvInventoryRec."Rate Code");
          IF NOT lvInventoryRec.FIND('-') THEN
            "From Rate Code" := lvDefaultRateCode
          ELSE BEGIN
            IF "From Rate Code" <> '' THEN
              EXIT;
            PlantSetup.GET;
            GetOrderHeader();
            IF OrderRec.Type = OrderRec.Type::Arrival THEN BEGIN
              IF (lvDefaultRateCode = PlantSetup."Default Rate Code") OR
                 (lvInventoryRec."Rate Code" = PlantSetup."Default Rate Code")
              THEN
                "From Rate Code" := PlantSetup."Default Rate Code"
              ELSE BEGIN
                lvInventoryRec.SETRANGE("Rate Code", PlantSetup."Default Rate Code");
                IF lvInventoryRec.FIND('-') THEN
                  "From Rate Code" := PlantSetup."Default Rate Code";
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE FillDefaultToRateCode@1100485006();
    BEGIN
      PlantSetup.GET;
      IF (NOT PlantSetup."Rate Codes") OR
         ((NOT ("Rental Type" IN ["Rental Type"::Rental,"Rental Type"::"Buy Back"])) AND
          (NOT IsOtherTransferDepotToDepot()))
      THEN BEGIN  //C001216.c
        "To Rate Code" := '';
        EXIT;
      END;

      IF ("To Rate Code" = '') THEN BEGIN
        CASE "Rental Type" OF
          "Rental Type"::"Buy Back":
           "To Rate Code" := PlantSetup."Default Rate Code";
          "Rental Type"::Rental:
           BEGIN
             GetOrderHeader();
             CASE OrderRec.Type OF
               OrderRec.Type::Arrival:
                 //"To Rate Code" := PlantSetup."Default Rate Code Rental";  //DP00485.o
                 "To Rate Code" := PlantRateCodeRec.GetDefaultRateCodeRental(OrderRec."To Location", FALSE, ''); //DP00485.n C009408
               OrderRec.Type::Removal:
                 "To Rate Code" := PlantSetup."Default Rate Code";
               OrderRec.Type::"Other Transfers":
                 BEGIN
                   "To Rate Code" := PlantSetup."Default Rate Code Rental";
                   //"To Rate Code" := PlantSetup."Default Rate Code Rental";  //DP00485.o
                   "To Rate Code" := PlantRateCodeRec.GetDefaultRateCodeRental(OrderRec."To Location", FALSE, ''); //DP00485.n C009408
                   IF PlantLocRec.GET(OrderRec."To Location") THEN BEGIN
                     IF PlantLocRec.Depot THEN
                     "To Rate Code" := PlantSetup."Default Rate Code";
                   END;
                 END;
             END;
           END;
          "Rental Type"::Sales,                 //C001216.n
          "Rental Type"::"Buy Back and Sales":  //C001216.n
            IF IsOtherTransferDepotToDepot() THEN
              "To Rate Code" := PlantSetup."Default Rate Code";
        END;
      END;
      IF ("To Rate Code" <> '') THEN BEGIN  //* Must always be check, so not only if filled in this function
        IF NOT PlantRateCodeRec.CheckPlantRateCode(GetToLocationCode(), "To Rate Code", FALSE, '') THEN
          "To Rate Code" := '';
      END;
    END;

    PROCEDURE CheckPurchOrderTypeAllowed@1100485007();
    BEGIN
      CheckPurchOrderTypeForSales(TRUE);
      IF Type = Type::Plant THEN BEGIN
        CALCFIELDS(Bulk);
        IF Bulk THEN BEGIN
          PlantRec.GET("Plant Type");
          IF PlantRec.External THEN
            TESTFIELD("Purch. Order Type", "Purch. Order Type"::Rent)
          ELSE BEGIN
            PlantSetup.GET;
            IF (NOT PlantSetup."Ext Bulk Plant with No. in Inv") THEN
              TESTFIELD("Purch. Order Type", "Purch. Order Type"::Purchase);
          END;
        END;
      END;
    END;

    PROCEDURE CheckPurchOrderTypeForSales@1100485010(IErrorMode@1100485000 : Boolean);
    BEGIN
      //IF (("Rental Type" = "Rental Type"::Sales) OR (Type = Type::Item)) AND ("Purch. Order Type" = "Purch. Order Type"::Rent) THEN BEGIN //C022717.o
      IF (Type = Type::Item) AND ("Purch. Order Type" = "Purch. Order Type"::Rent) THEN BEGIN  //C022717.n
        IF IErrorMode THEN
          FIELDERROR("Purch. Order Type")
        ELSE
          "Purch. Order Type" := "Purch. Order Type"::" ";
      END;
    END;

    PROCEDURE CheckRentalType@1100485011();
    BEGIN
      PlantRec.GET(Rec."Plant Type");
      CASE PlantRec."Rental Type" OF
        PlantRec."Rental Type"::Rental:
          TESTFIELD("Rental Type", "Rental Type"::Rental);
        PlantRec."Rental Type"::"Sales/Buy Back":
          BEGIN
            GetOrderHeader;
            CASE OrderRec.Type OF
              OrderRec.Type::Arrival:
                TESTFIELD("Rental Type", "Rental Type"::Sales);
              OrderRec.Type::Removal:
                TESTFIELD("Rental Type", "Rental Type"::"Buy Back");
              OrderRec.Type::"Other Transfers",
              OrderRec.Type::"Negative Inventory Correction":
                BEGIN
                  TESTFIELD("From Location");
                  PlantLocRec.GET("From Location");
                  IF PlantLocRec.Depot THEN
                    TESTFIELD("Rental Type", "Rental Type"::Sales)
                  ELSE BEGIN
                    PlantLocRec.GET(OrderRec."To Location");
                    IF PlantLocRec.Depot THEN
                      TESTFIELD("Rental Type", "Rental Type"::"Buy Back")
                    ELSE
                      TESTFIELD("Rental Type", "Rental Type"::"Buy Back and Sales");
                  END;
                END;
            END;
          END;
        PlantRec."Rental Type"::Both:
          BEGIN
            GetOrderHeader;
            CASE OrderRec.Type OF
              OrderRec.Type::Arrival:
                IF NOT ("Rental Type" IN ["Rental Type"::Rental,"Rental Type"::Sales]) THEN
                  FIELDERROR("Rental Type");
              OrderRec.Type::Removal:
                IF NOT ("Rental Type" IN ["Rental Type"::Rental,"Rental Type"::"Buy Back"]) THEN
                  FIELDERROR("Rental Type");
              OrderRec.Type::"Other Transfers",
              OrderRec.Type::"Negative Inventory Correction":
                BEGIN
                  TESTFIELD("From Location");
                  PlantLocRec.GET("From Location");
                  IF PlantLocRec.Depot THEN BEGIN
                    IF NOT ("Rental Type" IN ["Rental Type"::Rental,"Rental Type"::Sales]) THEN
                      FIELDERROR("Rental Type");
                  END ELSE BEGIN
                    PlantLocRec.GET(OrderRec."To Location");
                    IF PlantLocRec.Depot THEN BEGIN
                      IF NOT ("Rental Type" IN ["Rental Type"::Rental,"Rental Type"::"Buy Back"]) THEN
                        FIELDERROR("Rental Type");
                    END ELSE BEGIN
                      IF NOT ("Rental Type" IN ["Rental Type"::Rental,"Rental Type"::"Buy Back and Sales"]) THEN
                        FIELDERROR("Rental Type");
                    END;
                  END;
                END;
            END;
          END;
      END;
    END;

    PROCEDURE SetCreateFromPlantRequest@1100485013(ICreateFromPlantRequest@1100485000 : Boolean);
    BEGIN
      //* Now also used for create from RFID Plant Order (import)
      gCreateFromPlantRequest := ICreateFromPlantRequest;
    END;

    PROCEDURE FillDefaultToEmployee@1100485008();
    BEGIN
      IF Type <> Type::Text THEN BEGIN
        IF NOT OrderRec.GET("Plant Order No.") THEN
          EXIT;
        "To Employee Company" := OrderRec."To Employee Company";
        "To Employee No." := OrderRec."To Employee No.";
      END;
    END;

    PROCEDURE LookupToEmployee@1100485000(IEditable@1100485001 : Boolean);
    VAR
      lvEmplRec@1100485000 : Record 5200;
    BEGIN
      IF "To Employee Company" <> '' THEN
        lvEmplRec.CHANGECOMPANY("To Employee Company");
      lvEmplRec.SETRANGE(Status, lvEmplRec.Status::Active);
      lvEmplRec."No." := "To Employee No.";
      IF NOT IEditable THEN
        PAGE.RUNMODAL(0,lvEmplRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0,lvEmplRec) = ACTION::LookupOK THEN
          VALIDATE("To Employee No.",lvEmplRec."No.");
      END;
    END;

    PROCEDURE GetEmployeeName@1210190000() : Text[100];
    VAR
      Employee@1100485000 : Record 5200;
    BEGIN
      IF "To Employee No." = '' THEN
        EXIT('');

      IF "To Employee Company" <> '' THEN
        Employee.CHANGECOMPANY("To Employee Company");

      IF Employee.GET("To Employee No.") THEN
        EXIT(Employee."Full Name");
    END;

    PROCEDURE CheckPlantNoLossed@1100525002(VAR ExitOrderLineRec@1100525002 : Record 11012560) : Boolean;
    VAR
      PlantNoRec@1100525000 : Record 11012552;
      PlantInventRec@1100525001 : Record 11012555;
    BEGIN
      //* IF found then return 'Exit Order Line'. Note function is also used in C11012558 (CreateReturnedLossOrder).
      CLEAR(ExitOrderLineRec);
      IF (Type <> Type::Plant) OR ("Plant Type" = '') OR ("No." = '') OR ("No." = '0') THEN
        EXIT(FALSE);
      IF NOT PlantNoRec.GET("Plant Type","No.") THEN
        EXIT(FALSE);
      PlantNoRec.CALCFIELDS(Bulk);
      IF PlantNoRec.Bulk THEN  //* Returned Loss only for unique plant
        EXIT(FALSE);

      PlantInventRec.SETCURRENTKEY(Removed, "Plant Type", "Plant No.");
      PlantInventRec.SETRANGE(Removed, FALSE);
      PlantInventRec.SETRANGE("Plant Type", "Plant Type");
      PlantInventRec.SETRANGE("Plant No.", "No.");
      IF NOT PlantInventRec.ISEMPTY THEN
        EXIT(FALSE);

      ExitOrderLineRec.SETCURRENTKEY("Plant Type", "No.", "Exit-date");
      ExitOrderLineRec.SETRANGE(Type, ExitOrderLineRec.Type::Plant);
      ExitOrderLineRec.SETRANGE("Plant Type", "Plant Type");
      ExitOrderLineRec.SETRANGE("No.", "No.");
      ExitOrderLineRec.SETRANGE(Returned, ExitOrderLineRec.Returned::No);
      ExitOrderLineRec.SETRANGE(Posted, TRUE);
      ExitOrderLineRec.SETRANGE("Exit Type", ExitOrderLineRec."Exit Type"::Missing);
      IF ExitOrderLineRec.FINDLAST THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE ShowDocuments@1100529000();
    VAR
      RecRef@1100525000 : RecordRef;
      DocumentFilters@1100525001 : Codeunit 11012432;
    BEGIN
      //DP00183
      TESTFIELD("Line No.");
      TESTFIELD("Set Code", '');  //Set lines are only tmp lines to insert the plant/item of the set (explode set)
      GetOrderHeader();
      RecRef.GETTABLE(Rec);
      DocumentFilters.CreateTempFilterAndExecute1(RecRef, OrderRec."Department Code", FALSE, TRUE);
    END;

    PROCEDURE HasDocumentLinks@1100525006() : Boolean;
    VAR
      DocumentLinkMgt@1100525000 : Codeunit 11012401;
      RecRef@1100525001 : RecordRef;
    BEGIN
      //DP00183
      RecRef.GETTABLE(Rec);
      EXIT(DocumentLinkMgt.EntityHasDocumentLinks(RecRef));
    END;

    PROCEDURE DeleteDocumentLinks@1100529004();
    VAR
      DocumentLinkMgt@1100525000 : Codeunit 11012401;
      RecRef@1100525001 : RecordRef;
    BEGIN
      //DP00183
      RecRef.GETTABLE(Rec);
      DocumentLinkMgt.DeleteDocumentLinksFromObject(RecRef);
    END;

    PROCEDURE MoveDocumentLinks@1100529006(SourceRec@1100529001 : Record 11012557;TargetRec@1100529000 : Record 11012557;CopyMode@1100529003 : Boolean);
    VAR
      DocumentLinkMgt@1100525000 : Codeunit 11012401;
      SourceRecRef@1100525001 : RecordRef;
      TargetRecRef@1100529002 : RecordRef;
    BEGIN
      //DP00183
      SourceRecRef.GETTABLE(SourceRec);
      TargetRecRef.GETTABLE(TargetRec);
      IF NOT CopyMode THEN
        DocumentLinkMgt.ReplaceDocLink(SourceRecRef, TargetRecRef)
      ELSE
        DocumentLinkMgt.CopyDocLinks(SourceRecRef, TargetRecRef);
    END;

    PROCEDURE CommentSheet@1100529002(EditableMode@1100529002 : Boolean);
    VAR
      PlantCommentLine@1100529000 : Record 11072666;
    BEGIN
      //DP00183
      TESTFIELD("Line No.");
      TESTFIELD("Set Code", '');  //Set lines are only tmp lines to insert the plant/item of the set (explode set)
      PlantCommentLine.EditCommentLines(DATABASE::"Plant Order Line", "Plant Order No.", '', "Line No.", EditableMode);  //C005461.c
    END;

    PROCEDURE HasCommentLines@1100529001() : Boolean;
    VAR
      PlantCommentLine@1100529000 : Record 11072666;
    BEGIN
      //DP00183
      EXIT(PlantCommentLine.HasCommentLines(DATABASE::"Plant Order Line", "Plant Order No.", '', "Line No."));  //C005461.c
    END;

    PROCEDURE DeleteCommentLines@1100529003();
    VAR
      PlantCommentLine@1100529000 : Record 11072666;
    BEGIN
      //DP00183
      PlantCommentLine.DeleteComments(DATABASE::"Plant Order Line", "Plant Order No.", '', "Line No.");  //C005461.c
    END;

    PROCEDURE WarningPlantOnOtherPO@1100529007();
    VAR
      PlantOrder2@1100529001 : Record 11012556;
      PlantOrderLine2@1100529000 : Record 11012557;
    BEGIN
      //DP00241 (22321)
      IF ("Plant Type" = '') OR ("No." = '') OR (Type <> Type::Plant) OR (NOT GUIALLOWED) THEN
        EXIT;
      CALCFIELDS(Bulk, "Plant Order Type");
      IF Bulk OR ("Plant Order Type" <> "Plant Order Type"::Arrival) THEN
        EXIT;

      PlantOrderLine2.RESET;
      PlantOrderLine2.SETCURRENTKEY(Posted, "Plant Type");
      PlantOrderLine2.SETRANGE(Posted, FALSE);
      PlantOrderLine2.SETRANGE("Plant Type", "Plant Type");
      PlantOrderLine2.SETRANGE("No.", "No.");
      PlantOrderLine2.SETFILTER("Plant Order No.", '<>%1', "Plant Order No.");
      IF PlantOrderLine2.FINDSET THEN BEGIN
        REPEAT
          IF PlantOrder2.GET(PlantOrderLine2."Plant Order No.") THEN BEGIN
            IF (PlantOrder2.Type = PlantOrder2.Type::Arrival) AND (PlantOrder2."Sales Rental Order No." = '') THEN BEGIN
              MESSAGE(Text016,
                InspectionRec.FIELDCAPTION("Plant No."), "Plant Type", "No.",
                FIELDCAPTION("Plant Order No."), PlantOrderLine2."Plant Order No.",
                FIELDCAPTION("Transfer Date"), PlantOrderLine2."Transfer Date",
                FIELDCAPTION("Expected return on"), PlantOrderLine2."Expected return on");
            END;
          END;
        UNTIL PlantOrderLine2.NEXT = 0;
      END;
    END;

    PROCEDURE ExitSoldSBBOnLoc@1100529010() : Boolean;
    VAR
      ExitReason@1100529000 : Record 11072665;
    BEGIN
      //DP00241 (26972)
      IF ("Reason Code (Exit)" = '') OR (Type = Type::Text) THEN
        EXIT(FALSE);
      GetOrderHeader();
      IF OrderRec.Type <> OrderRec.Type::Removal THEN
        EXIT(FALSE);

      CASE Type OF
        Type::Plant:
          BEGIN
            IF "Rental Type" = "Rental Type"::"Buy Back" THEN BEGIN
              IF ExitReason.GET("Reason Code (Exit)") THEN
                EXIT(ExitReason."Exit Sold S/BB Plant on Loc.");
            END;
          END;
        Type::Item:
          BEGIN
            IF GetSalesBuyBack() THEN BEGIN
              IF ExitReason.GET("Reason Code (Exit)") THEN
                EXIT(ExitReason."Exit Sold S/BB Plant on Loc.");
            END;
          END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE VaLidateTableRelationPlantNo@1100525003();
    VAR
      PlantNumber@1100525001 : Record 11012552;
      PlantInvent@1100525000 : Record 11012555;
      StandText@1100525002 : Record 7;
    BEGIN
      IF "No." = '' THEN
        EXIT;
      IF Type = Type::Text THEN BEGIN
        StandText.GET("No.");
        EXIT;
      END;
      IF (Type = Type::Plant) THEN BEGIN
        TESTFIELD("Plant Type");
        CALCFIELDS(Bulk);
        IF "No." <> '0' THEN BEGIN
          PlantNumber.GET("Plant Type", "No.");
          IF Bulk AND (PlantNumber."Stock No." = '0') THEN
            TESTFIELD("No.", PlantNumber."Stock No.");
        END ELSE BEGIN
          IF NOT Bulk THEN
            FIELDERROR("No.");
          PlantInvent.SETCURRENTKEY(Removed, "Plant Type", "Plant No.");
          PlantInvent.SETRANGE(Removed, FALSE);
          PlantInvent.SETRANGE("Plant Type", "Plant Type");
          PlantInvent.SETRANGE("Plant No.", "No.");
          PlantInvent.FINDFIRST;  // Plant No. '0' must be present in PlantInventory (so do not use IF ...)
        END;
      END;
    END;

    PROCEDURE CheckPlantTypeBlocked@1100525004();
    VAR
      PlantType@1100525000 : Record 11012551;
      PlantLoc@1100525001 : Record 11012554;
    BEGIN
      //DP00485. (C009313)  Only check for transfer to a location, return to / transfer to depot is allowed
      PlantType.GET("Plant Type");
      IF NOT PlantType.Blocked THEN
        EXIT;
      GetOrderHeader;
      IF OrderRec.Type = OrderRec.Type::"Other Transfers" THEN BEGIN
        IF NOT PlantLoc.GET(OrderRec."To Location") THEN
          PlantLoc.Depot := FALSE;
      END;
      IF (OrderRec.Type = OrderRec.Type::Arrival) OR
         ((OrderRec.Type = OrderRec.Type::"Other Transfers") AND (NOT PlantLoc.Depot))
      THEN
        PlantType.TESTFIELD(Blocked, FALSE);
    END;

    PROCEDURE CalcPlantTypeAvailable@1100525005() : Decimal;
    VAR
      PlanningFutureDeficit@1100525000 : Codeunit 11012576;
    BEGIN
      EXIT(PlanningFutureDeficit.PlantTypeAvailableOnPOLine(Rec));
    END;

    PROCEDURE ActualMeterReading@1100529005() : Decimal;
    VAR
      MeterReading@1100529000 : Record 11072671;
      OServiceOrder@1100409000 : Code[20];
    BEGIN
      //DP00614
      IF (Type <> Type::Plant) OR ("Plant Type" = '') OR ("No." = '') THEN
        EXIT(0);
      EXIT(MeterReading.GetActualMeterReading("Plant Type", "No.", ActualMeterReadingType, OServiceOrder));
    END;

    PROCEDURE ActualMeterReadingUnit@1100529009() : Code[10];
    VAR
      MeterReadingType@1100529000 : Record 11072670;
    BEGIN
      //DP00614
      IF MeterReadingType.GET(ActualMeterReadingType()) THEN BEGIN
        IF MeterReadingType.Code <> '' THEN
          EXIT(MeterReadingType."Unit of Measure");
      END;
      EXIT('');
    END;

    PROCEDURE ActualMeterReadingType@1100529008() : Code[10];
    VAR
      MeterReading@1100529000 : Record 11072671;
    BEGIN
      //DP00614
      IF (Type <> Type::Plant) OR ("Plant Type" = '') OR ("No." = '') THEN
        EXIT('');
      EXIT(MeterReading.DefaultMeterReadingType("Plant Type", "No."));
    END;

    PROCEDURE DrillDownMeterReading@1100529011();
    VAR
      MeterReading@1100529000 : Record 11072671;
      PlantMeterReading@1100529001 : Page 11125948;
    BEGIN
      //DP00614
      TESTFIELD(Type, Type::Plant);
      TESTFIELD("No.");
      TESTFIELD("Plant Type");
      PlantRec.GET("Plant Type");
      PlantRec.TESTFIELD("Meter Reading", TRUE);

      MeterReading.FILTERGROUP(7);
      MeterReading.SETRANGE("Plant Type", "Plant Type");
      MeterReading.SETRANGE("Plant No.", "No.");
      MeterReading.FILTERGROUP(0);
      MeterReading.SETRANGE("Meter Reading Type", ActualMeterReadingType());
      IF MeterReading.FINDLAST THEN
        PlantMeterReading.SETRECORD(MeterReading);
      MeterReading.SETRANGE("Meter Reading Type");  //Reset filter
      IF MeterReading."Meter Reading Type" = '' THEN
        IF MeterReading.FINDLAST THEN
          PlantMeterReading.SETRECORD(MeterReading);
      PlantMeterReading.SETTABLEVIEW(MeterReading);
      PlantMeterReading.EDITABLE(NOT Posted);
      PlantMeterReading.RUNMODAL;
    END;

    PROCEDURE VendorNoExternalPlant@1100409000() : Code[20];
    VAR
      PlantNumber@1100409000 : Record 11012552;
    BEGIN
      //C017545
      IF (Type = Type::Plant) AND ("Plant Type" <> '') AND ("No." <> '') AND ("No." <> '0') THEN BEGIN
        IF PlantNumber.GET("Plant Type", "No.") THEN BEGIN
          IF PlantNumber.External THEN
            EXIT(PlantNumber.Vendor);
        END;
      END;
    END;

    PROCEDURE VendorNameExternalPlant@1100525007() : Text[100];
    VAR
      Vendor@1100525000 : Record 23;
      VendorNo@1100525001 : Code[20];
    BEGIN
      //C017545
      VendorNo := VendorNoExternalPlant();
      IF VendorNo <> '' THEN BEGIN
        IF Vendor.GET(VendorNo) THEN
          EXIT(Vendor.Name);
      END;
    END;

    PROCEDURE GetItem@1100529025();
    BEGIN
      IF "Item No." <> ItemRec."No." THEN
        ItemRec.GET("Item No.");
    END;

    PROCEDURE GetItemUnitPrice@1100529024(ICurrFieldNo@1100485001 : Integer);
    VAR
      lvItemSalesBuyBackRateRec@1100485002 : Record 11020318;
      lvItemJnlLineRec@1100485000 : Record 83;
      lvPlantLocRec@1100485007 : Record 11012554;
      lvCustRec@1100485008 : Record 18;
      SalesPriceCalcMgtCU@1100529000 : Codeunit 7000;
      lvIsProjectLocation@1100529001 : Boolean;
      lvItemJnlFieldNo@1100485003 : Integer;
      lvPlantLoc@1100485006 : Code[20];
      lvCustNo@1100485005 : Code[20];
      lvCustPriceGrp@1100485004 : Code[10];
    BEGIN
      //DP00485.sn (26972)
      IF "Reason Code (Exit)" <> '' THEN
        EXIT;
      //DP00485.en (26972)

      GetOrderHeader();
      IF OrderRec.Type = OrderRec.Type::"Other Transfers" THEN  //DP00183
        EXIT;

      GetItem();
      PlantSetup.GET;

      //mg.sn, 09-03-11: M26095
      IF OrderRec.Type = OrderRec.Type::Removal THEN
        lvPlantLoc := OrderRec."From Location"
      ELSE
        lvPlantLoc := OrderRec."To Location";
      IF lvPlantLocRec.GET(lvPlantLoc) THEN
        IF lvPlantLocRec."Project No." <> '' THEN
          lvIsProjectLocation := TRUE;
      //mg.en, 09-03-11: M26095

      IF ItemRec."Sales/Buy-Back Item (Plant)" THEN BEGIN
        lvItemSalesBuyBackRateRec.SETRANGE("Item No.", "Item No.");
        lvItemSalesBuyBackRateRec.SETRANGE("Starting Date", 0D, OrderRec."Transfer Date");
        IF NOT lvItemSalesBuyBackRateRec.FINDLAST THEN BEGIN
          lvItemSalesBuyBackRateRec.INIT;
          IF PlantSetup."Rate Warning" AND GUIALLOWED THEN BEGIN
            IF OrderRec.Type = OrderRec.Type::Removal THEN
              MESSAGE(Text022, lvItemSalesBuyBackRateRec.FIELDCAPTION("Buy Back Rate"), "Item No.")
            ELSE
              MESSAGE(Text022, lvItemSalesBuyBackRateRec.FIELDCAPTION("Sales Rate"), "Item No.");
          END;
        END;

        //mg.sc, 09-03-11: M26095
        IF PlantSetup."Item with Cost Price" AND lvIsProjectLocation THEN
          "Sales Rate" := ItemRec."Unit Cost"
        ELSE BEGIN
          IF OrderRec.Type = OrderRec.Type::Removal THEN
            "Sales Rate" := lvItemSalesBuyBackRateRec."Buy Back Rate" * "Qty. per Unit of Measure"
          ELSE
            "Sales Rate" := lvItemSalesBuyBackRateRec."Sales Rate" * "Qty. per Unit of Measure";
        END;
        //mg.ec, 09-03-11: M26095
        EXIT;
      END;

      lvItemJnlLineRec."Item No." := "Item No.";
      lvItemJnlLineRec."Location Code" := "Location Code";
      lvItemJnlLineRec."Posting Date" := OrderRec."Transfer Date";
      lvItemJnlLineRec.Quantity := ABS(GetQuantity());
      lvItemJnlLineRec."Unit Amount" := "Sales Rate";
      lvItemJnlLineRec."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
      lvItemJnlLineRec."Unit of Measure Code" := "Unit of Measure";
      lvItemJnlLineRec."Variant Code" := "Variant Code";

      CASE ICurrFieldNo OF
        FIELDNO("Item No."):
          lvItemJnlFieldNo := lvItemJnlLineRec.FIELDNO("Item No.");
        FIELDNO("Location Code"):
          lvItemJnlFieldNo := lvItemJnlLineRec.FIELDNO("Location Code");
        FIELDNO("Unit of Measure"):
          lvItemJnlFieldNo := lvItemJnlLineRec.FIELDNO("Unit of Measure Code");
        FIELDNO("Asked Quantity"),
        FIELDNO(Quantity):
          lvItemJnlFieldNo := lvItemJnlLineRec.FIELDNO(Quantity);
        FIELDNO("Variant Code"):
          lvItemJnlFieldNo := lvItemJnlLineRec.FIELDNO("Variant Code");
      END;
      IF OrderRec.Type = OrderRec.Type::Removal THEN
        lvPlantLoc := OrderRec."From Location"
      ELSE
        lvPlantLoc := OrderRec."To Location";
      IF lvPlantLocRec.GET(lvPlantLoc) THEN BEGIN
        IF lvPlantLocRec."Customer No." <> '' THEN BEGIN
          lvCustNo := lvPlantLocRec."Customer No.";
          IF lvCustRec.GET(lvCustNo) THEN
            lvCustPriceGrp := lvCustRec."Customer Price Group";
        END;
      END;

      //mg.sc, 04-03-11: M24452
      PlantSetup.GET;
      //SalesPriceCalcMgtCU.FindItemJnlLinePrice(lvItemJnlLineRec, lvItemJnlFieldNo);
      IF PlantSetup."Item with Cost Price" AND lvIsProjectLocation THEN BEGIN
        "Sales Rate" := ItemRec."Unit Cost";
      END ELSE BEGIN
        SalesPriceCalcMgtCU.FindPlantOrderItemLinePrice(lvItemJnlLineRec, lvItemJnlFieldNo, lvCustNo, lvCustPriceGrp);
        "Sales Rate" := lvItemJnlLineRec."Unit Amount";
      END;
      //mg.ec, 04-03-11: M24452
    END;

    PROCEDURE GetQuantity@1100529023() : Decimal;
    BEGIN
      IF (Quantity <> 0) OR ("Asked Quantity" = 0) THEN
        EXIT(Quantity);

      PlantSetup.GET;
      IF NOT PlantSetup."Extended Picking Procedure" THEN
        EXIT(Quantity);

      GetOrderHeader();
      IF (NOT OrderRec.Posted) AND (OrderRec.Status < OrderRec.Status::Released) AND (OrderRec.Type = OrderRec.Type::Arrival) THEN
        EXIT("Asked Quantity");

      EXIT(Quantity);
    END;

    PROCEDURE SetQtyForItemReservation@1100485002();
    BEGIN
      IF Type <> Type::Item THEN
        "Qty. for Item Reservation":= 0;
      GetOrderHeader();
      IF OrderRec.Posted THEN
        "Qty. for Item Reservation":= 0
      ELSE BEGIN
        CASE OrderRec.Type OF
          OrderRec.Type::Arrival: "Qty. for Item Reservation" := ROUND(GetQuantity() * "Qty. per Unit of Measure",0.00001);
          OrderRec.Type::Removal: "Qty. for Item Reservation" := ROUND(-GetQuantity() * "Qty. per Unit of Measure",0.00001);
        ELSE
          "Qty. for Item Reservation" := 0;
        END;
      END;
    END;

    PROCEDURE SetOrderHeader@1100529022(VAR PlantOrder@1100525000 : Record 11012556);
    BEGIN
      OrderRec.COPY(PlantOrder);
      gPlantOrderCalcExternally := TRUE;
    END;

    PROCEDURE GetItemInventory@1100529021(InventByLocation@1100525000 : Boolean) : Decimal;
    VAR
      Item@1100525003 : Record 27;
    BEGIN
      IF ("Item No." = '') OR Posted THEN
        EXIT(0);
      IF NOT Item.GET("Item No.") THEN
        EXIT(0);

      IF "Variant Code" <> '' THEN  //* IF Variant filled then inventory by item/variant(/location)
        Item.SETRANGE("Variant Filter", "Variant Code");
      IF InventByLocation THEN  //* Inventory by item(/variant)/location
        Item.SETRANGE("Location Filter", "Location Code");
      Item.CALCFIELDS(Inventory);
      IF ("Qty. per Unit of Measure" <> 0) THEN
        Item.Inventory := ROUND(Item.Inventory / "Qty. per Unit of Measure", 0.00001);
      EXIT(Item.Inventory);
    END;

    PROCEDURE SetNoInventoryWarning@1210190001(NoInventWarning@1210190000 : Boolean);
    BEGIN
      NoInventoryWarning := NoInventWarning;
    END;

    PROCEDURE CheckItemInventoryWarning@1100529020(CurrentFldNo@1100525002 : Integer);
    VAR
      Quan@1100525003 : Decimal;
      InventQty@1100525000 : Decimal;
      QuanTxt@1100525004 : Text[50];
      VariantTxt@1100525001 : Text[50];
    BEGIN
      //*19786.sn
      IF (Type <> Type::Item) OR ("Item No." = '') OR NoInventoryWarning OR (NOT GUIALLOWED) THEN
        EXIT;
      PlantSetup.GET;
      IF NOT PlantSetup."Item Stockout Warning" THEN
        EXIT;
      //*19786.en
      CALCFIELDS("Plant Order Type");
      IF "Plant Order Type" <> "Plant Order Type"::Arrival THEN
        IF NOT IsOtherTransferDepotToDepot() THEN  //*DP00183.n
          EXIT;

      CASE CurrentFldNo OF
        FIELDNO(Quantity):
          BEGIN
            Quan := Quantity;
            QuanTxt := FIELDCAPTION(Quantity);
          END;
        FIELDNO("Asked Quantity"):
          BEGIN
            Quan := "Asked Quantity";
            QuanTxt := FIELDCAPTION("Asked Quantity");
          END;
        ELSE
          BEGIN
            IF (Quantity <> 0) OR ("Asked Quantity" = 0) THEN BEGIN
              Quan := Quantity;
              QuanTxt := FIELDCAPTION(Quantity);
            END ELSE BEGIN
              Quan := "Asked Quantity";
              QuanTxt := FIELDCAPTION("Asked Quantity");
            END;
          END;
      END;
      IF Quan <= 0 THEN
        EXIT;

      InventQty := GetItemInventory(TRUE);
      IF (Quan > InventQty) THEN BEGIN
        IF "Variant Code" <> '' THEN
          VariantTxt := FIELDCAPTION("Variant Code") + ' ''' + "Variant Code" + ''' ';
        MESSAGE(Text023, QuanTxt, Quan, InventQty,
          FIELDCAPTION("Item No."), "Item No.", VariantTxt,FIELDCAPTION("Location Code"), "Location Code");
      END;
    END;

    PROCEDURE LookupItemNo@1210190002(xRecItemNo@1210190003 : Code[20]) : Code[20];
    VAR
      Item@1210190000 : Record 27;
      ItemList@1210190001 : Page 31;
      Editable@1210190002 : Boolean;
    BEGIN
      TESTFIELD(Type, Type::Item);
      GetOrderHeader();
      IF (NOT OrderRec.Posted) AND (OrderRec.Status < OrderRec.Status::Released) AND
         ((OrderRec.Type IN [OrderRec.Type::Arrival, OrderRec.Type::Removal]) OR OrderRec.IsOtherTransferDepotToDepot()) //*DP00183.c
      THEN
        Editable := TRUE;

      Item."No." := "Item No.";
      IF NOT Editable THEN BEGIN
        ItemList.SETRECORD(Item);
        ItemList.RUNMODAL;
      END ELSE BEGIN
        IF Item."No." = '' THEN
          Item."No." := xRecItemNo;
        ItemList.SETRECORD(Item);
        ItemList.DetermineInterface(
          DATABASE::"Plant Order Line",
          "Plant Order No.",'','','',0,'','',"Line No.",'','');
        ItemList.LOOKUPMODE(TRUE);
        IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ItemList.GETRECORD(Item);
          IF Item."No." <> '' THEN
            EXIT(Item."No.");
        END;
      END;
      EXIT("Item No.");
    END;

    PROCEDURE IsOtherTransferDepotToDepot@1100529018() : Boolean;
    BEGIN
      //*DP00183
      IF "Plant Order No." <> '' THEN BEGIN
        GetOrderHeader();
        EXIT(OrderRec.IsOtherTransferDepotToDepot());
      END;
      EXIT(FALSE);
    END;

    PROCEDURE CheckOrderTypeItemLine@1100529017();
    BEGIN
      //*DP00183
      IF Type <> Type::Item THEN
        EXIT;
      GetOrderHeader();
      IF OrderRec.Type = OrderRec.Type::"Negative Inventory Correction" THEN
        ERROR(Text021, OrderRec.FIELDCAPTION(Type), OrderRec.Type);
      IF OrderRec.Type = OrderRec.Type::"Other Transfers" THEN BEGIN
        IF NOT OrderRec.IsOtherTransferDepotToDepot() THEN
          ERROR(Text024, OrderRec.FIELDCAPTION(Type), OrderRec.Type);
      END;
    END;

    PROCEDURE GetDefaultItemLocFromPlntDepot@1100529016(FieldNumber@1100529000 : Integer) : Code[10];
    VAR
      PlantLoc@1100529001 : Record 11012554;
      PlantLocCode@1100529002 : Code[20];
    BEGIN
      //*DP00183
      GetOrderHeader();
      IF FieldNumber = FIELDNO("Location Code") THEN BEGIN
        CASE OrderRec.Type OF
          OrderRec.Type::Arrival,
          OrderRec.Type::"Other Transfers":
            PlantLocCode := OrderRec."From Location";
          OrderRec.Type::Removal:
            PlantLocCode := OrderRec."To Location";
        END;
      END ELSE BEGIN
        IF (FieldNumber = FIELDNO("New Location Code")) AND (OrderRec.Type = OrderRec.Type::"Other Transfers") THEN BEGIN
          IF OrderRec.IsOtherTransferDepotToDepot() THEN
            PlantLocCode := OrderRec."To Location";
        END;
      END;
      IF (PlantLocCode <> '') AND PlantLoc.GET(PlantLocCode) THEN BEGIN
        IF PlantLoc.Depot THEN
          EXIT(PlantLoc."Location Code (Items)");
      END;
      EXIT('');
    END;

    PROCEDURE FilterLinesWithItemToPlan@69(VAR Item@1000 : Record 27);
    BEGIN
      RESET;
      SETCURRENTKEY("Item No.",Posted,"Location Code","Variant Code","Transfer Date");
      SETRANGE(Type,Type::Item);
      SETRANGE("Item No.",Item."No.");
      SETRANGE(Posted, FALSE);
      SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SETFILTER("Transfer Date",Item.GETFILTER("Date Filter"));
      SETFILTER("Qty. for Item Reservation",'<>0');
    END;

    PROCEDURE FindLinesWithItemToPlan@1100529015(VAR Item@1000 : Record 27) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item);
      EXIT(FINDFIRST);
    END;

    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record 27) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item);
      EXIT(NOT ISEMPTY);
    END;

    PROCEDURE ModifyAllowedOnOrderPickStatus@1100529014(CurrFieldNo@1100525000 : Integer);
    VAR
      PlantOrder@1100529000 : Record 11012556;
      CaptionText@1100525002 : Text[100];
    BEGIN
      //DP00688 (DP00690)
      PlantSetup.GET;
      IF NOT PlantSetup."Order Picking Procedure" THEN
        EXIT;
      IF NOT PlantOrder.GET("Plant Order No.") THEN
        EXIT;
      IF (PlantOrder.Type <> PlantOrder.Type::Arrival) OR
         (PlantOrder.Status >= PlantOrder.Status::Released) OR PlantOrder.Posted OR
         (PlantOrder."Order Picking Status" <> PlantOrder."Order Picking Status"::"In Process")
      THEN
        EXIT;

      CASE CurrFieldNo OF
        0:
          CaptionText := PlantOrder.TABLECAPTION;
        FIELDNO(Type):
          IF Type <> xRec.Type THEN
            CaptionText := FIELDCAPTION(Type);
        FIELDNO("Plant Type"):
          IF "Plant Type" <> xRec."Plant Type" THEN
            CaptionText := FIELDCAPTION("Plant Type");
        FIELDNO("No."):
          IF ("No." <> xRec."No.") AND (Type <> Type::Text) THEN
            CaptionText := FIELDCAPTION("No.");
        FIELDNO("Item No."):
          IF "Item No." <> xRec."Item No." THEN
            CaptionText := FIELDCAPTION("Item No.");
        FIELDNO("Variant Code"):
          IF "Variant Code" <> xRec."Variant Code" THEN
            CaptionText := FIELDCAPTION("Variant Code");
        FIELDNO("Asked Quantity"):
          IF "Asked Quantity" <> xRec."Asked Quantity" THEN
            CaptionText := FIELDCAPTION("Asked Quantity");
        FIELDNO(Quantity):
          IF Quantity <> xRec.Quantity THEN
            CaptionText := FIELDCAPTION(Quantity);
        FIELDNO("Unit of Measure"):
          IF ("Unit of Measure" <> xRec."Unit of Measure") AND (Type = Type::Item) THEN   // Only editable for item lines
            CaptionText := FIELDCAPTION("Unit of Measure");
      END;
      IF CaptionText <> '' THEN BEGIN
        IF (Quantity <> 0) OR (CurrFieldNo = FIELDNO(Quantity)) THEN
          ERROR(Text025, CaptionText, PlantOrder.FIELDCAPTION("Order Picking Status"), PlantOrder."Order Picking Status")
        ELSE BEGIN
          IF GUIALLOWED THEN
            MESSAGE(Text026, CaptionText, PlantOrder.FIELDCAPTION("Order Picking Status"), PlantOrder."Order Picking Status");
        END;
      END;
    END;

    PROCEDURE CheckTypePlantOrItem@1100529012(CurrFieldCaption@1100529000 : Text);
    BEGIN
      //DP00690
      IF NOT (Type IN [Type::Plant, Type::Item]) THEN
        ERROR(Text006, CurrFieldCaption, FIELDCAPTION(Type), Type);
    END;

    PROCEDURE GetSalesBuyBack@1100529029() : Boolean;
    VAR
      PlantType@1100529001 : Record 11012551;
      Item@1100529000 : Record 27;
    BEGIN
      //DP00690
      CASE Type OF
        Type::Plant:
          BEGIN
            IF "Plant Type" <> '' THEN BEGIN
              IF PlantType.GET("Plant Type") THEN
                EXIT(PlantType."Rental Type" IN [PlantType."Rental Type"::"Sales/Buy Back", PlantType."Rental Type"::Both]);
            END;
          END;
        Type::Item:
          BEGIN
            IF "Item No." <> '' THEN BEGIN
              IF Item.GET("Item No.") THEN
                EXIT(Item."Sales/Buy-Back Item (Plant)");
            END;
          END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetShelfNo@1100529013() : Code[20];
    VAR
      PlantType@1100529000 : Record 11012551;
      Item@1100529001 : Record 27;
    BEGIN
      //DP00690
      CASE Type OF
        Type::Plant:
          BEGIN
            IF "Plant Type" <> '' THEN BEGIN
              IF PlantType.GET("Plant Type") THEN
                EXIT(PlantType."Shelf/Bin No.");
            END;
          END;
        Type::Item:
          BEGIN
            IF "Item No." <> '' THEN BEGIN
              IF Item.GET("Item No.") THEN
                EXIT(Item."Shelf No.");
            END;
          END;
      END;
      EXIT('');
    END;

    PROCEDURE AssistEditVendorNo@1100529100();
    VAR
      PlantVendor@1100529100 : Record 11012596;
    BEGIN
      //* C020751 SR
      IF (Type = Type::Plant) AND ("Plant Type" <> '') THEN BEGIN
        PlantVendor.SETRANGE("Plant Type", "Plant Type");
        CASE "Purch. Order Type" OF
          "Purch. Order Type"::Purchase:
            PlantVendor.SETRANGE(Type, PlantVendor.Type::Purchase);
          "Purch. Order Type"::Rent:
            PlantVendor.SETRANGE(Type, PlantVendor.Type::Rent);
        ELSE
          EXIT;
        END;
        IF PAGE.RUNMODAL(PAGE::"Plant Vendors", PlantVendor) = ACTION::LookupOK THEN BEGIN
          IF PlantVendor."Vendor No." <> '' THEN
            VALIDATE("Vendor No.", PlantVendor."Vendor No.");
        END;
      END;
    END;

    LOCAL PROCEDURE BlockedElementIsAllowed@1100409003(IPlantOrder@1100528000 : Record 11012556) : Boolean;
    VAR
      PlantOrder@1100528001 : Record 11012556;
    BEGIN
      IF PlantOrder.GET(IPlantOrder."No.") THEN
        IF (PlantOrder.Type = PlantOrder.Type::Arrival) OR (PlantOrder.Type = PlantOrder.Type::"Other Transfers") THEN
          EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE CheckBuyBackRateIsSalesRate@1100525010(PlantOrder@1100525002 : Record 11012556) : Boolean;
    VAR
      PlantLocFrom@1100525001 : Record 11012554;
      PlantLocTo@1100525000 : Record 11012554;
    BEGIN
      //C022786
      IF (Type <> Type::Plant) OR ("Rental Type" <> "Rental Type"::"Buy Back and Sales") THEN
        EXIT(FALSE);

      IF PlantOrder.Type <> PlantOrder.Type::"Other Transfers" THEN
        EXIT(FALSE);

      IF NOT PlantLocFrom.GET(PlantOrder."From Location") THEN
        EXIT(FALSE);
      IF (PlantLocFrom."Project No." = '') OR PlantLocFrom.Depot OR (NOT PlantLocFrom."BB with Sales Rate (L to L.)") THEN
        EXIT(FALSE);

      IF NOT PlantLocTo.GET(PlantOrder."To Location") THEN
        EXIT(FALSE);
      IF (PlantLocTo."Project No." = '') OR PlantLocTo.Depot OR (PlantLocTo."Company Name" <> PlantLocFrom."Company Name") THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetOrderAddressCode@1100525011(PlantOrderNo@1100525000 : Code[20];VendorNo@1100525004 : Code[20];CurrLineNo@1100525001 : Integer) : Code[10];
    VAR
      PlantOrderLine@1100525002 : Record 11012557;
    BEGIN
      //C017429
      IF (PlantOrderNo = '') OR (VendorNo = '') THEN
        EXIT('');

      PlantOrderLine.SETRANGE("Plant Order No.", PlantOrderNo);
      PlantOrderLine.SETRANGE("Vendor No.", VendorNo);
      PlantOrderLine.SETFILTER("Line No.", '<>%1', CurrLineNo);
      PlantOrderLine.SETFILTER("Order Address Code", '<>%1', '');
      IF PlantOrderLine.FINDFIRST THEN
        EXIT(PlantOrderLine."Order Address Code");

      EXIT('');
    END;

    LOCAL PROCEDURE UpdateOrderAddressCodeInOtherLines@1100525021(PlantOrderNo@1100525000 : Code[20];VendorNo@1100525004 : Code[20];OrderAddressCode@1100525005 : Code[10];CurrLineNo@1100525001 : Integer) : Code[10];
    VAR
      PlantOrderLine@1100525002 : Record 11012557;
    BEGIN
      //C017429
      IF (PlantOrderNo = '') OR (VendorNo = '') THEN
        EXIT('');

      PlantOrderLine.SETRANGE("Plant Order No.", PlantOrderNo);
      PlantOrderLine.SETRANGE("Vendor No.", VendorNo);
      PlantOrderLine.SETFILTER("Line No.", '<>%1', CurrLineNo);
      PlantOrderLine.MODIFYALL("Order Address Code", OrderAddressCode, FALSE);

      EXIT('');
    END;

    PROCEDURE SetDateFilter@1100525012();
    VAR
      PlantOrder@1100525000 : Record 11012556;
    BEGIN
      IF "Transfer Date" <> 0D THEN BEGIN
        SETFILTER("Date Filter",'..%1',"Transfer Date");
        EXIT;
      END;
      IF ("Plant Order No." <> '') AND PlantOrder.GET("Plant Order No.") THEN BEGIN
        IF PlantOrder."Transfer Date" <> 0D THEN BEGIN
          SETFILTER("Date Filter",'..%1',PlantOrder."Transfer Date");
          EXIT;
        END;
      END;
      SETRANGE("Date Filter");  //Reset DateFilter
    END;

    BEGIN
    {
      DP00690: Combine table "Plant Order Item Line" (T11020510) in this table.
    }
    END.
  }
}

