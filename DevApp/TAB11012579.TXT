OBJECT Table 11012579 Plant Need
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CheckPlantLocationStatus;

               Finished := FALSE;
               "Quantity To Copy" := Quantity;
               "Delete Remainder":= FALSE;
             END;

    OnModify=BEGIN
               CheckPlantLocationStatus;
             END;

    OnDelete=BEGIN
               ResetCopiedNeedPlantOrderLines('');
             END;

    CaptionML=ENU=Plant Need;
    LookupPageID=Page11012606;
    DrillDownPageID=Page11012606;
  }
  FIELDS
  {
    { 10  ;   ;Location            ;Code20        ;TableRelation="Plant Location".Code;
                                                   CaptionML=ENU=Location }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 30  ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type".Code WHERE (Rental Type=FILTER(Rental|Both));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Plant Type Description", "Unit of Measure", "Cost Object");
                                                              END;

                                                   CaptionML=ENU=Plant Type;
                                                   NotBlank=Yes }
    { 35  ;   ;Plant Type Description;Text50      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Type".Description WHERE (Code=FIELD(Plant Type)));
                                                   CaptionML=ENU=Plant Description;
                                                   Editable=No }
    { 40  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                IF ("Ending Date" <> 0D) AND ("Starting Date" <> xRec."Starting Date") THEN BEGIN
                                                                  IF CONFIRM(Text001,TRUE) THEN
                                                                    "Ending Date" := "Ending Date" + ("Starting Date" - xRec."Starting Date");
                                                                END;
                                                                VALIDATE("Ending Date")
                                                              END;

                                                   CaptionML=ENU=Starting Date;
                                                   NotBlank=Yes }
    { 50  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                IF ("Ending Date" <> 0D) AND ("Ending Date" < "Starting Date") THEN
                                                                  "Ending Date" := "Starting Date";
                                                              END;

                                                   CaptionML=ENU=Ending Date }
    { 60  ;   ;Quantity            ;Decimal       ;CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 65  ;   ;Unit of Measure     ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Type"."Unit of Measure" WHERE (Code=FIELD(Plant Type)));
                                                   CaptionML=ENU=Unit of Measure;
                                                   Editable=No }
    { 70  ;   ;Copied Quantity     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Plant Order Line".Quantity WHERE (Location Copied Need=FIELD(Location),
                                                                                                      Line No. Copied Need=FIELD(Line No.)));
                                                   CaptionML=ENU=Copied Quantity (PO);
                                                   DecimalPlaces=0:5;
                                                   Description=Quantity copied to Plant Order(s);
                                                   Editable=No }
    { 80  ;   ;Quantity To Copy    ;Decimal       ;CaptionML=ENU=To Copy;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 85  ;   ;Delete Remainder    ;Boolean       ;CaptionML=ENU=Delete Remainder }
    { 90  ;   ;Finished            ;Boolean       ;OnValidate=BEGIN
                                                                IF Finished THEN BEGIN
                                                                  "Quantity To Copy" := 0;
                                                                  "Delete Remainder" := FALSE;
                                                                END ELSE BEGIN
                                                                  "Quantity To Copy" := Quantity - "Copied Quantity";
                                                                  IF "Quantity To Copy" < 0 THEN
                                                                    "Quantity To Copy" := 0;
                                                                  "Delete Remainder" := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Finished }
    { 100 ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=" ,Quote,Order";
                                                   OptionString=[ ,SalesQuote,SalesOrder];
                                                   Description=Only for granule 'Sales Rental Contract';
                                                   Editable=No }
    { 101 ;   ;Document No.        ;Code20        ;TableRelation=IF (Document Type=CONST(SalesQuote)) "Sales Header".No. WHERE (Document Type=CONST(Quote))
                                                                 ELSE IF (Document Type=CONST(SalesOrder)) "Sales Header".No. WHERE (Document Type=CONST(Order));
                                                   CaptionML=ENU=Document No.;
                                                   Description=Only for granule 'Sales Rental Contract';
                                                   Editable=No }
    { 102 ;   ;Document Line No.   ;Integer       ;TableRelation=IF (Document Type=CONST(SalesQuote)) "Sales Line"."Line No." WHERE (Document Type=CONST(Quote),
                                                                                                                                     Document No.=FIELD(Document No.))
                                                                                                                                     ELSE IF (Document Type=CONST(SalesOrder)) "Sales Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                                                                                                                              Document No.=FIELD(Document No.));
                                                   CaptionML=ENU=Document Line No.;
                                                   Description=Only for granule 'Sales Rental Contract';
                                                   Editable=No }
    { 120 ;   ;Transf. from Estimate;Code20       ;TableRelation=Estimate;
                                                   CaptionML=ENU=Transf. from Estimate;
                                                   Editable=No }
    { 130 ;   ;Cost Object         ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Type"."Cost Object" WHERE (Code=FIELD(Plant Type)));
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Cost Object;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Location,Line No.                       ;Clustered=Yes }
    {    ;Finished,Plant Type,Starting Date        }
    {    ;Plant Type,Location                      }
    {    ;Location,Starting Date,Ending Date,Plant Type }
    {    ;Document Type,Document No.,Document Line No. }
    {    ;Transf. from Estimate                    }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1210190000 : TextConst 'ENU=Also shift the End Dat';
      PlantSetupRec@1100525000 : Record 11012550;
      PlantLocRec@1100485000 : Record 11012554;
      NextLino@1100525001 : Integer;

    PROCEDURE CheckPlantLocationStatus@1100485000();
    BEGIN
      PlantLocRec.GET(Location);
      PlantLocRec.CheckBlock(0,FALSE,FALSE);
    END;

    PROCEDURE CopyLinesToPlantOrder@1210190002(VAR PlantNeedRec2@1100525000 : Record 11012579;PlantOrderNo@1100525001 : Code[20]);
    VAR
      PlantNeedRec@1210190004 : Record 11012579;
      PlantOrderRec@1100525002 : Record 11012556;
      PlantOrderLineRec@1100525003 : Record 11012557;
    BEGIN
      // Copy the selected lines to the Plant Order
      PlantNeedRec.COPY(PlantNeedRec2);
      IF NOT PlantNeedRec.FINDSET(TRUE,FALSE) THEN
        EXIT;

      PlantSetupRec.GET;
      PlantOrderRec.GET(PlantOrderNo);

      PlantOrderLineRec.SETRANGE("Plant Order No.", PlantOrderNo);
      IF PlantOrderLineRec.FINDLAST THEN
        NextLino :=  PlantOrderLineRec."Line No." + 10000
      ELSE
        NextLino := 10000;

      REPEAT
        IF PlantNeedRec."Quantity To Copy" > 0 THEN BEGIN
          PlantNeedRec.CALCFIELDS("Plant Type Description");
          PlantOrderLineRec.INIT;
          PlantOrderLineRec."Plant Order No." := PlantOrderNo;
          PlantOrderLineRec.InitRecord();  //* Eerst ordernummer vullen dan pas aanroepen
          PlantOrderLineRec."Line No." := NextLino;
          NextLino :=NextLino + 10000;
          PlantOrderLineRec.Type := PlantOrderLineRec.Type::Plant;
          PlantOrderLineRec."Plant Type" := PlantNeedRec."Plant Type";
          PlantOrderLineRec.CALCFIELDS(Bulk);
          IF PlantOrderLineRec.Bulk THEN
            PlantOrderLineRec."No." := '0';
          PlantOrderLineRec.VALIDATE("Unit of Measure");  // Fill with Plant Unit
          PlantOrderLineRec.Description := PlantNeedRec."Plant Type Description";
          PlantOrderLineRec."Transfer Date" := PlantOrderRec."Transfer Date";
          PlantOrderLineRec."Expected return on" := PlantNeedRec."Ending Date";
          IF (PlantOrderLineRec."Expected return on" <> 0D) AND
             (PlantOrderLineRec."Expected return on" < PlantOrderLineRec."Transfer Date")
          THEN
            PlantOrderLineRec."Expected return on" := PlantOrderLineRec."Transfer Date";
          PlantOrderLineRec."From Location" := PlantOrderRec."From Location";
          PlantOrderLineRec.Quantity := PlantNeedRec."Quantity To Copy";
          IF PlantSetupRec."Extended Picking Procedure" AND (PlantOrderRec.Type = PlantOrderRec.Type::Arrival) THEN
            PlantOrderLineRec."Asked Quantity" := PlantOrderLineRec.Quantity;
          //* Opmerking: Normaal wordt bij "Extended Picking Procedure" bij het opvoeren van een aanvoerorder alleen
          //* het gevraagde aantal gevuld. Hier gelijk maar beide omdat bij wijzigen van het aantal (op MO-regel form)
          //* vraag zit of ook materieelbehoefte gevuld moet worden. Erg lastig om dit ook voor gevraagd aantal moet.
          //* Is ook wel logisch om meteen aantal al te vullen als je bij behoefte al aantal hebt ingegeven, en dan
          //* bovendien nog eens te kopieren aantal.
          PlantOrderLineRec."Rental Type" := PlantOrderLineRec."Rental Type"::Rental;
          PlantOrderLineRec."Location Copied Need" := PlantNeedRec.Location;
          PlantOrderLineRec."Line No. Copied Need" := PlantNeedRec."Line No.";
          PlantOrderLineRec.FillDefaultFromRateCode();
          PlantOrderLineRec.FillDefaultToRateCode();
          PlantOrderLineRec.INSERT;
        END;
        CalculateQuantityToCopy(PlantNeedRec, TRUE, '');
        PlantNeedRec.MODIFY;
      UNTIL (PlantNeedRec.NEXT = 0);
      COMMIT;
    END;

    PROCEDURE CopyLinesToPlantRequest@1100525000(VAR PlantNeedRec2@1100525000 : Record 11012579;PlantRequestNo@1100525001 : Code[20]);
    VAR
      PlantNeedRec@1210190004 : Record 11012579;
      PlantRequestRec@1100525002 : Record 11020520;
      PlantReqLineRec@1100525003 : Record 11020521;
    BEGIN
      // Copy the selected lines to the Plant Request
      PlantNeedRec.COPY(PlantNeedRec2);
      IF NOT PlantNeedRec.FINDSET(FALSE,FALSE) THEN
        EXIT;

      PlantRequestRec.GET(PlantRequestNo);

      PlantReqLineRec.SETRANGE("Plant Request No.", PlantRequestNo);
      IF PlantReqLineRec.FINDLAST THEN
        NextLino :=  PlantReqLineRec."Line No." + 10000
      ELSE
        NextLino := 10000;

      REPEAT
        IF PlantNeedRec."Quantity To Copy" > 0 THEN BEGIN
          PlantNeedRec.CALCFIELDS("Plant Type Description");
          PlantReqLineRec.INIT;
          PlantReqLineRec."Plant Request No." := PlantRequestNo;
          PlantReqLineRec."Line No." := NextLino;
          NextLino :=NextLino + 10000;
          PlantReqLineRec.Type := PlantReqLineRec.Type::Plant;
          PlantReqLineRec."Plant Type" := PlantNeedRec."Plant Type";
          PlantReqLineRec."Plant No." := '';
          PlantReqLineRec."Item No." := '';
          PlantReqLineRec."Set Code" := '';
          PlantReqLineRec.Description := PlantNeedRec."Plant Type Description";
          PlantReqLineRec."Expected return on" := PlantNeedRec."Ending Date";
          IF (PlantReqLineRec."Expected return on" <> 0D) AND
             (PlantReqLineRec."Expected return on" < PlantRequestRec."Transfer Date")
          THEN
            PlantReqLineRec."Expected return on" := PlantRequestRec."Transfer Date";
          PlantReqLineRec.Quantity := PlantNeedRec."Quantity To Copy";
          PlantReqLineRec."Location Copied Need" := PlantNeedRec.Location;
          PlantReqLineRec."Line No. Copied Need" := PlantNeedRec."Line No.";
          PlantReqLineRec.INSERT;
        END;
        CalculateQuantityToCopy(PlantNeedRec, FALSE, '');
        PlantNeedRec.MODIFY;
      UNTIL (PlantNeedRec.NEXT = 0);
      COMMIT;
    END;

    PROCEDURE CalculateQuantityToCopy@1100525005(VAR PlantNeedRec@1100525000 : Record 11012579;Fin@1100525002 : Boolean;PlantCompany@1100409000 : Text[30]);
    VAR
      PlantReqLineRec@1100525001 : Record 11020521;
      PlantOrderLine@1100409001 : Record 11012557;
    BEGIN
      IF PlantNeedRec."Delete Remainder" THEN BEGIN
        PlantNeedRec."Quantity To Copy" := 0;
        PlantNeedRec."Delete Remainder" := FALSE;
      END ELSE BEGIN
        IF (PlantCompany = '') OR (PlantCompany = COMPANYNAME) THEN
          PlantNeedRec.CALCFIELDS("Copied Quantity")
        ELSE BEGIN
          PlantReqLineRec.CHANGECOMPANY(PlantCompany);
          PlantOrderLine.CHANGECOMPANY(PlantCompany);
          PlantOrderLine.SETCURRENTKEY("Location Copied Need", "Line No. Copied Need");
          PlantOrderLine.SETRANGE("Location Copied Need", PlantNeedRec.Location);
          PlantOrderLine.SETRANGE("Line No. Copied Need", PlantNeedRec."Line No.");
          IF PlantOrderLine.FINDSET THEN BEGIN
            REPEAT
              "Copied Quantity" := "Copied Quantity" + PlantOrderLine.Quantity;
            UNTIL PlantOrderLine.NEXT = 0;
          END;
        END;
        PlantNeedRec."Quantity To Copy" := PlantNeedRec.Quantity - PlantNeedRec."Copied Quantity";
        //*19999 Permission problem (if Plant Request not in License), so first check records present before calling the function
        //*      in the Plant Request Line table. If records present but the user has no readpermission then an error.
        //*      Because then the 'Request' must be taken into account for the calculation of PlantNeedRec."Quantity To Copy".
        PlantReqLineRec.SETCURRENTKEY("Location Copied Need", "Line No. Copied Need");
        PlantReqLineRec.SETRANGE("Location Copied Need", PlantNeedRec.Location);
        PlantReqLineRec.SETRANGE("Line No. Copied Need", PlantNeedRec."Line No.");
        IF NOT PlantReqLineRec.ISEMPTY THEN
          PlantNeedRec."Quantity To Copy" := PlantNeedRec."Quantity To Copy" -
            PlantReqLineRec.NotPostedPlantNeedCopiedQuan(PlantNeedRec.Location, PlantNeedRec."Line No.", PlantCompany);
      END;
      IF PlantNeedRec."Quantity To Copy" <= 0 THEN BEGIN
        PlantNeedRec."Quantity To Copy" := 0;
        IF Fin THEN
          PlantNeedRec.Finished := TRUE;
      END;
    END;

    PROCEDURE LookupPlantType@1100525001(xRecPlantTypeCode@1210190000 : Code[20];Editable@1100525004 : Boolean;VAR MultiCopyDone@1100525005 : Boolean) : Code[20];
    VAR
      PlantType@1100525000 : Record 11012551;
      TmpPlantType@1100525002 : TEMPORARY Record 11012551;
      MultiCopyMgt@1100525003 : Codeunit 11012068;
      PlantTypeList@1100525001 : Page 11012552;
    BEGIN
      MultiCopyDone := FALSE;
      TESTFIELD(Location);

      PlantType.Code := "Plant Type";
      IF NOT Editable THEN BEGIN
        PlantTypeList.SETRECORD(PlantType);
        PlantTypeList.RUNMODAL;
      END ELSE BEGIN
        IF PlantType.Code = '' THEN
          PlantType.Code := xRecPlantTypeCode;
        PlantTypeList.SETRECORD(PlantType);
        PlantTypeList.LOOKUPMODE(TRUE);
        PlantTypeList.SetMultiCopyAllowed(TRUE);
        IF PlantTypeList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          PlantTypeList.GETRECORD(PlantType);
          IF PlantType.Code <> '' THEN
            EXIT(PlantType.Code);
        END ELSE BEGIN
          IF PlantTypeList.GetMultiCopyRec(TmpPlantType) THEN BEGIN
            MultiCopyMgt.CopyPlantTypeToPlantNeedLine(TmpPlantType, Location, "Line No.");
            MultiCopyDone := TRUE;
          END;
        END;
      END;
      EXIT("Plant Type");
    END;

    PROCEDURE ResetCopiedNeedPlantOrderLines@1100409002(PlantCompany@1100409002 : Text[30]);
    VAR
      PlantOrderLine@1100409001 : Record 11012557;
      PlantOrderLine2@1100409000 : Record 11012557;
    BEGIN
      IF (PlantCompany <> '') AND (PlantCompany <> COMPANYNAME) THEN BEGIN
        PlantOrderLine.CHANGECOMPANY(PlantCompany);
        PlantOrderLine2.CHANGECOMPANY(PlantCompany);
      END;
      PlantOrderLine.SETCURRENTKEY("Location Copied Need", "Line No. Copied Need");
      PlantOrderLine.SETRANGE("Location Copied Need", Location);
      PlantOrderLine.SETRANGE("Line No. Copied Need", "Line No.");
      IF PlantOrderLine.FINDSET(TRUE, TRUE) THEN BEGIN
        REPEAT
          PlantOrderLine2.GET(PlantOrderLine."Plant Order No.", PlantOrderLine."Line No.");
          PlantOrderLine2."Location Copied Need" := '';
          PlantOrderLine2."Line No. Copied Need" := 0;
          PlantOrderLine2.MODIFY;
        UNTIL (PlantOrderLine.NEXT = 0);
      END;
    END;

    PROCEDURE ShiftSelectedLines@1100409000(VAR SelectedPlantNeed@1100409000 : Record 11012579;FactorLeftRight@1210190002 : Integer;TimeUnits@1210190004 : Integer;PeriodType@1210190005 : 'Day,Week,Month';DateType@1210190003 : 'Both,StartDate,EndDate');
    VAR
      TotalDays@1210190001 : Integer;
      ShiftExpression@1210190006 : Text[30];
      NewDate@1210190007 : Date;
    BEGIN
      //*RTC Function copied from form/page to table
      IF TimeUnits = 0 THEN
        EXIT;
      SelectedPlantNeed.SETRANGE(Finished, FALSE);
      IF NOT SelectedPlantNeed.FINDSET(TRUE, FALSE) THEN
        EXIT;

      ShiftExpression := STRSUBSTNO('%1', (FactorLeftRight * TimeUnits));
      CASE PeriodType OF
        PeriodType::Day:
          ShiftExpression := ShiftExpression + 'D';
        PeriodType::Week:
          ShiftExpression := ShiftExpression + 'W';
        PeriodType::Month:
          ShiftExpression := ShiftExpression + 'M';
        ELSE
          EXIT;
      END;
      ShiftExpression := '<'+ ShiftExpression + '>';

      REPEAT
        CASE DateType OF
          DateType::Both:
            BEGIN
              IF SelectedPlantNeed."Ending Date" <> 0D THEN
                TotalDays := SelectedPlantNeed."Ending Date" - SelectedPlantNeed."Starting Date";
              SelectedPlantNeed."Starting Date" := CALCDATE(ShiftExpression , SelectedPlantNeed."Starting Date");
              IF SelectedPlantNeed."Ending Date" <> 0D THEN
                SelectedPlantNeed."Ending Date" := SelectedPlantNeed."Starting Date" + TotalDays;
            END;
          DateType::StartDate:
            BEGIN
              NewDate := CALCDATE(ShiftExpression , SelectedPlantNeed."Starting Date");
              IF (SelectedPlantNeed."Ending Date" = 0D) OR
                 ((SelectedPlantNeed."Ending Date" <> 0D) AND (NewDate <= SelectedPlantNeed."Ending Date")) THEN
                SelectedPlantNeed."Starting Date" := NewDate;
            END;
          DateType::EndDate:
            BEGIN
              IF SelectedPlantNeed."Ending Date" <> 0D THEN BEGIN
                NewDate := CALCDATE(ShiftExpression , SelectedPlantNeed."Ending Date");
                IF (NewDate >= SelectedPlantNeed."Starting Date") THEN
                  SelectedPlantNeed."Ending Date" := NewDate;
              END;
            END;
        END;
        SelectedPlantNeed.MODIFY;
      UNTIL (SelectedPlantNeed.NEXT = 0);
    END;

    BEGIN
    END.
  }
}

