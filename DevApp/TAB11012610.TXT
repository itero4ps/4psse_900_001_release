OBJECT Table 11012610 UAR Hour Accounting Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CheckSetupWorkedHours();
               HourAccFunctionsCU.CalculateHours(Rec, DummyHourAccPauseRec, 'HourLine');
               CalculateTravelHours();
             END;

    OnModify=BEGIN
               CheckSetupWorkedHours();
               HourAccFunctionsCU.CalculateHours(Rec, DummyHourAccPauseRec, 'HourLine');
               CalculateTravelHours();
             END;

    OnDelete=VAR
               lvBlockHoursRec@1210190000 : Record 11012612;
             BEGIN
               DeletePause();

               lvBlockHoursRec.SETRANGE(Year,Year);
               lvBlockHoursRec.SETRANGE(Week,Week);
               lvBlockHoursRec.SETRANGE("Employee No.","Employee No.");
               lvBlockHoursRec.SETRANGE("Line No.","Line No.");
               lvBlockHoursRec.DELETEALL;
             END;

    CaptionML=ENU=Hour Accounting Line (UAR);
  }
  FIELDS
  {
    { 10  ;   ;Year                ;Integer       ;CaptionML=ENU=Year;
                                                   MinValue=2000;
                                                   NotBlank=Yes }
    { 20  ;   ;Week                ;Integer       ;TableRelation="UAR Week Table".Week WHERE (Year=FIELD(Year));
                                                   CaptionML=ENU=Week;
                                                   MinValue=1;
                                                   MaxValue=53;
                                                   NotBlank=Yes }
    { 30  ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No.;
                                                   NotBlank=Yes }
    { 40  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 50  ;   ;Receiving Company   ;Text30        ;TableRelation=Company;
                                                   OnValidate=BEGIN
                                                                IF "Receiving Company" = COMPANYNAME THEN
                                                                  ERROR(Text001);
                                                              END;

                                                   CaptionML=ENU=Receiving Company }
    { 60  ;   ;Project No.         ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) Job;
                                                   OnValidate=BEGIN
                                                                GetProjectData(TRUE);

                                                                IF "Project No." <> '' THEN BEGIN
                                                                  IF (ICProjSetupRec."Provisions at Closure") THEN
                                                                    ProjRec.CheckProjectStatus(-1)
                                                                  ELSE
                                                                    ProjRec.CheckProjectStatus(1);

                                                                  IF (Element <> '') THEN BEGIN
                                                                    IF NOT ProjElemRec.GET("Project No.",Element) THEN
                                                                      Element := '';
                                                                  END;

                                                                  IF (Element = '') OR ("Cost Component" = '') THEN BEGIN
                                                                    IF EmplRec.GET("Employee No.") THEN BEGIN
                                                                      IF (Element = '') AND (EmplRec.Element <> '') THEN BEGIN
                                                                        Element := EmplRec.Element;
                                                                        GetProjElementData(FALSE);
                                                                        Element := ProjElemRec.Element;
                                                                      END;
                                                                      IF ("Cost Component" = '') AND (EmplRec."Default Cost Component" <> '') THEN BEGIN
                                                                        "Cost Component" := EmplRec."Default Cost Component";
                                                                      END;
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              OnLookupProjectNo();
                                                            END;

                                                   CaptionML=ENU=Project No. }
    { 70  ;   ;Element             ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                ElementFormat.FormatElem(Element,2,"Receiving Company");
                                                                GetProjElementData(TRUE);
                                                              END;

                                                   OnLookup=BEGIN
                                                              OnLookupElement();
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 80  ;   ;Cost Component      ;Code10        ;TableRelation="Cost Components by Employee"."Cost Component" WHERE (Employee No.=FIELD(Employee No.));
                                                   OnValidate=BEGIN
                                                                CheckCostComponentAllowed();

                                                                CALCFIELDS("Cost Component Description");
                                                              END;

                                                   CaptionML=ENU=Cost Component }
    { 81  ;   ;Cost Component Description;Text30  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Cost Component".Description WHERE (Code=FIELD(Cost Component)));
                                                   CaptionML=ENU=Cost Component Description;
                                                   Editable=No }
    { 90  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  CASE Type OF
                                                                    Type::Project:
                                                                      BEGIN
                                                                        "Service Order No." := '';
                                                                        "Service Location No." := '';
                                                                        "Service Contract No." := '';
                                                                      END;
                                                                    Type::Service:
                                                                      BEGIN
                                                                        "Project No." := '';
                                                                        Element := '';
                                                                      END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Project,Service;
                                                   OptionString=Project,Service }
    { 100 ;   ;Service Order No.   ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Service Order".No.;
                                                   OnValidate=BEGIN
                                                                IF "Service Order No." = '' THEN BEGIN
                                                                  "Service Location No." := '';
                                                                  "Service Contract No." := '';
                                                                  "Additional Cost (Service)" := FALSE;
                                                                END ELSE BEGIN
                                                                  TESTFIELD(Type, Type::Service);
                                                                  GetServOrderData(TRUE);

                                                                  ServOrderRec.CheckStatus(1);
                                                                  //ServOrderRec.TESTFIELD("Service Contract No.");  //db, 07-08-15: only relevant for old service module

                                                                  "Service Location No." := ServOrderRec."Service Location No.";
                                                                  "Service Contract No." := ServOrderRec."Service Contract No.";
                                                                  IF CurrFieldNo = FIELDNO("Service Order No.") THEN
                                                                    "Additional Cost (Service)" := ServOrderRec."Additional Cost";  //db, 09-11-07

                                                                  IF ("Cost Component" = '') THEN BEGIN
                                                                    IF EmplRec.GET("Employee No.") THEN BEGIN
                                                                      IF ("Cost Component" = '') AND (EmplRec."Default Cost Component" <> '') THEN
                                                                        "Cost Component" := EmplRec."Default Cost Component";
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              OnLookupServOrder();
                                                            END;

                                                   CaptionML=ENU=Service Order No. }
    { 105 ;   ;Service Location No.;Code20        ;TableRelation="Service Location".No.;
                                                   CaptionML=ENU=Service Location No.;
                                                   Editable=No }
    { 106 ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract.No.;
                                                   CaptionML=ENU=Service Contract No.;
                                                   Editable=No }
    { 130 ;   ;Additional Cost (Service);Boolean  ;OnValidate=BEGIN
                                                                IF "Additional Cost (Service)" THEN BEGIN
                                                                  TESTFIELD(Type, Type::Service);
                                                                  TESTFIELD("Service Order No.");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Additional Cost (Service) }
    { 140 ;   ;ATM                 ;Boolean       ;CaptionML=ENU=WTM;
                                                   Description=NLD=ArbeidsTijd Management }
    { 210 ;   ;Monday Travel To    ;Decimal       ;OnValidate=BEGIN
                                                                CheckTravelTimeAllowed("Monday Travel To");
                                                                HourAccFunctionsCU.CheckOverlap(1, Rec);
                                                                WarningMaxTravelTime(1);
                                                              END;

                                                   CaptionML=ENU=Monday Travel To;
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 211 ;   ;Monday From         ;Time          ;OnValidate=BEGIN
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Monday From");
                                                                HourAccFunctionsCU.CheckOverlapFrom(1, Rec);
                                                              END;

                                                   CaptionML=ENU=Monday From }
    { 212 ;   ;Monday To           ;Time          ;OnValidate=BEGIN
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Monday To");
                                                                HourAccFunctionsCU.CheckOverlap(1, Rec);
                                                              END;

                                                   CaptionML=ENU=Monday To }
    { 213 ;   ;Monday Travel Back  ;Decimal       ;OnValidate=BEGIN
                                                                CheckTravelTimeAllowed("Monday Travel Back");
                                                                HourAccFunctionsCU.CheckOverlap(1, Rec);
                                                                WarningMaxTravelTime(1);
                                                              END;

                                                   CaptionML=ENU=Monday Travel Back;
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 215 ;   ;Hours Monday        ;Decimal       ;CaptionML=ENU=Hours Monday;
                                                   Editable=No }
    { 216 ;   ;Monday Driver Hours ;Boolean       ;CaptionML=ENU=Monday Driver Hours }
    { 217 ;   ;Monday Stand By Hours;Boolean      ;CaptionML=ENU=Monday Stand By Hours }
    { 218 ;   ;Monday Scheduled 12 Hr Shift;Boolean;
                                                   CaptionML=ENU=Monday Scheduled 12 Hour Shift }
    { 220 ;   ;Tuesday Travel To   ;Decimal       ;OnValidate=BEGIN
                                                                CheckTravelTimeAllowed("Tuesday Travel To");
                                                                HourAccFunctionsCU.CheckOverlap(2, Rec);
                                                                WarningMaxTravelTime(2);
                                                              END;

                                                   CaptionML=ENU=Tuesday Travel To;
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 221 ;   ;Tuesday From        ;Time          ;OnValidate=BEGIN
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Tuesday From");
                                                                HourAccFunctionsCU.CheckOverlapFrom(2, Rec);
                                                              END;

                                                   CaptionML=ENU=Tuesday From }
    { 222 ;   ;Tuesday To          ;Time          ;OnValidate=BEGIN
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Tuesday To");
                                                                HourAccFunctionsCU.CheckOverlap(2, Rec);
                                                              END;

                                                   CaptionML=ENU=Tuesday To }
    { 223 ;   ;Tuesday Travel Back ;Decimal       ;OnValidate=BEGIN
                                                                CheckTravelTimeAllowed("Tuesday Travel Back");
                                                                HourAccFunctionsCU.CheckOverlap(2, Rec);
                                                                WarningMaxTravelTime(2);
                                                              END;

                                                   CaptionML=ENU=Tuesday Travel Back;
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 225 ;   ;Hours Tuesday       ;Decimal       ;CaptionML=ENU=Hours Tuesday;
                                                   Editable=No }
    { 226 ;   ;Tuesday Driver Hours;Boolean       ;CaptionML=ENU=Tuesday Driver Hours }
    { 227 ;   ;Tuesday Stand By Hours;Boolean     ;CaptionML=ENU=Tuesday Stand By Hours }
    { 228 ;   ;Tuesday Scheduled 12 Hr Shift;Boolean;
                                                   CaptionML=ENU=Tuesday Scheduled 12 Hour Shift }
    { 230 ;   ;Wednesday Travel To ;Decimal       ;OnValidate=BEGIN
                                                                CheckTravelTimeAllowed("Wednesday Travel To");
                                                                HourAccFunctionsCU.CheckOverlap(3, Rec);
                                                                WarningMaxTravelTime(3);
                                                              END;

                                                   CaptionML=ENU=Wednesday Travel To;
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 231 ;   ;Wednesday From      ;Time          ;OnValidate=BEGIN
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Wednesday From");
                                                                HourAccFunctionsCU.CheckOverlapFrom(3, Rec);
                                                              END;

                                                   CaptionML=ENU=Wednesday From }
    { 232 ;   ;Wednesday To        ;Time          ;OnValidate=BEGIN
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Wednesday To");
                                                                HourAccFunctionsCU.CheckOverlap(3, Rec);
                                                              END;

                                                   CaptionML=ENU=Wednesday To }
    { 233 ;   ;Wednesday Travel Back;Decimal      ;OnValidate=BEGIN
                                                                CheckTravelTimeAllowed("Wednesday Travel Back");
                                                                HourAccFunctionsCU.CheckOverlap(3, Rec);
                                                                WarningMaxTravelTime(3);
                                                              END;

                                                   CaptionML=ENU=Wednesday Travel Back;
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 235 ;   ;Hours Wednesday     ;Decimal       ;CaptionML=ENU=Hours Wednesday;
                                                   Editable=No }
    { 236 ;   ;Wednesday Driver Hours;Boolean     ;CaptionML=ENU=Wednesday Driver Hours }
    { 237 ;   ;Wednesday Stand By Hours;Boolean   ;CaptionML=ENU=Wednesday Stand By Hours }
    { 238 ;   ;Wednesday Scheduled 12 H Shift;Boolean;
                                                   CaptionML=ENU=Wednesday Scheduled 12 Hour Shift }
    { 240 ;   ;Thursday Travel To  ;Decimal       ;OnValidate=BEGIN
                                                                CheckTravelTimeAllowed("Thursday Travel To");
                                                                HourAccFunctionsCU.CheckOverlap(4, Rec);
                                                                WarningMaxTravelTime(4);
                                                              END;

                                                   CaptionML=ENU=Thursday Travel To;
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 241 ;   ;Thursday From       ;Time          ;OnValidate=BEGIN
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Thursday From");
                                                                HourAccFunctionsCU.CheckOverlapFrom(4, Rec);
                                                              END;

                                                   CaptionML=ENU=Thursday From }
    { 242 ;   ;Thursday To         ;Time          ;OnValidate=BEGIN
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Thursday To");
                                                                HourAccFunctionsCU.CheckOverlap(4, Rec);
                                                              END;

                                                   CaptionML=ENU=Thursday To }
    { 243 ;   ;Thursday Travel Back;Decimal       ;OnValidate=BEGIN
                                                                CheckTravelTimeAllowed("Thursday Travel Back");
                                                                HourAccFunctionsCU.CheckOverlap(4, Rec);
                                                                WarningMaxTravelTime(4);
                                                              END;

                                                   CaptionML=ENU=Thursday Travel Back;
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 245 ;   ;Hours Thursday      ;Decimal       ;CaptionML=ENU=Hours Thursday;
                                                   Editable=No }
    { 246 ;   ;Thursday Driver Hours;Boolean      ;CaptionML=ENU=Thursday Driver Hours }
    { 247 ;   ;Thursday Stand By Hours;Boolean    ;CaptionML=ENU=Thursday Stand By Hours }
    { 248 ;   ;Thursday Scheduled 12 Hr Shift;Boolean;
                                                   CaptionML=ENU=Thursday Scheduled 12 Hour Shift }
    { 250 ;   ;Friday Travel To    ;Decimal       ;OnValidate=BEGIN
                                                                CheckTravelTimeAllowed("Friday Travel To");
                                                                HourAccFunctionsCU.CheckOverlap(5, Rec);
                                                                WarningMaxTravelTime(5);
                                                              END;

                                                   CaptionML=ENU=Friday Travel To;
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 251 ;   ;Friday From         ;Time          ;OnValidate=BEGIN
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Friday From");
                                                                HourAccFunctionsCU.CheckOverlapFrom(5, Rec);
                                                              END;

                                                   CaptionML=ENU=Friday From }
    { 252 ;   ;Friday To           ;Time          ;OnValidate=BEGIN
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Friday To");
                                                                HourAccFunctionsCU.CheckOverlap(5, Rec);
                                                              END;

                                                   CaptionML=ENU=Friday To }
    { 253 ;   ;Friday Travel Back  ;Decimal       ;OnValidate=BEGIN
                                                                CheckTravelTimeAllowed("Friday Travel Back");
                                                                HourAccFunctionsCU.CheckOverlap(5, Rec);
                                                                WarningMaxTravelTime(5);
                                                              END;

                                                   CaptionML=ENU=Friday Travel Back;
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 255 ;   ;Hours Friday        ;Decimal       ;CaptionML=ENU=Hours Friday;
                                                   Editable=No }
    { 256 ;   ;Friday Driver Hours ;Boolean       ;CaptionML=ENU=Friday Driver Hours }
    { 257 ;   ;Friday Stand By Hours;Boolean      ;CaptionML=ENU=Friday Stand By Hours }
    { 258 ;   ;Friday Scheduled 12 Hr Shift;Boolean;
                                                   CaptionML=ENU=Friday Scheduled 12 Hour Shift }
    { 260 ;   ;Saterday Travel To  ;Decimal       ;OnValidate=BEGIN
                                                                CheckTravelTimeAllowed("Saterday Travel To");
                                                                HourAccFunctionsCU.CheckOverlap(6, Rec);
                                                                WarningMaxTravelTime(6);
                                                              END;

                                                   CaptionML=ENU=Saturday Travel To;
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 261 ;   ;Saterday From       ;Time          ;OnValidate=BEGIN
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Saterday From");
                                                                HourAccFunctionsCU.CheckOverlapFrom(6, Rec);
                                                              END;

                                                   CaptionML=ENU=Saterday From }
    { 262 ;   ;Saterday To         ;Time          ;OnValidate=BEGIN
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Saterday To");
                                                                HourAccFunctionsCU.CheckOverlap(6, Rec);
                                                              END;

                                                   CaptionML=ENU=Saterday To }
    { 263 ;   ;Saterday Travel Back;Decimal       ;OnValidate=BEGIN
                                                                CheckTravelTimeAllowed("Saterday Travel Back");
                                                                HourAccFunctionsCU.CheckOverlap(6, Rec);
                                                                WarningMaxTravelTime(6);
                                                              END;

                                                   CaptionML=ENU=Saterday Travel Back;
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 265 ;   ;Hours Saterday      ;Decimal       ;CaptionML=ENU=Hours Saterday;
                                                   Editable=No }
    { 266 ;   ;Saturday Driver Hours;Boolean      ;CaptionML=ENU=Saturday Driver Hours }
    { 267 ;   ;Saturday Stand By Hours;Boolean    ;CaptionML=ENU=Saturday Stand By Hours }
    { 268 ;   ;Saturday Scheduled 12 Hr Shift;Boolean;
                                                   CaptionML=ENU=Saturday Scheduled 12 Hour Shift }
    { 270 ;   ;Sunday Travel To    ;Decimal       ;OnValidate=BEGIN
                                                                CheckTravelTimeAllowed("Sunday Travel To");
                                                                HourAccFunctionsCU.CheckOverlap(7, Rec);
                                                                WarningMaxTravelTime(7);
                                                              END;

                                                   CaptionML=ENU=Sunday Travel To;
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 271 ;   ;Sunday From         ;Time          ;OnValidate=BEGIN
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Sunday From");
                                                                HourAccFunctionsCU.CheckOverlapFrom(7, Rec);
                                                              END;

                                                   CaptionML=ENU=Sunday From }
    { 272 ;   ;Sunday To           ;Time          ;OnValidate=BEGIN
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Sunday To");
                                                                HourAccFunctionsCU.CheckOverlap(7, Rec);
                                                              END;

                                                   CaptionML=ENU=Sunday To }
    { 273 ;   ;Sunday Travel Back  ;Decimal       ;OnValidate=BEGIN
                                                                CheckTravelTimeAllowed("Sunday Travel Back");
                                                                HourAccFunctionsCU.CheckOverlap(7, Rec);
                                                                WarningMaxTravelTime(7);
                                                              END;

                                                   CaptionML=ENU=Sunday Travel Back;
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 275 ;   ;Hours Sunday        ;Decimal       ;CaptionML=ENU=Hours Sunday;
                                                   Editable=No }
    { 276 ;   ;Sunday Driver Hours ;Boolean       ;CaptionML=ENU=Sunday Driver Hours }
    { 277 ;   ;Sunday Stand By Hours;Boolean      ;CaptionML=ENU=Sunday Stand By Hours }
    { 278 ;   ;Sunday Scheduled 12 Hr Shift;Boolean;
                                                   CaptionML=ENU=Sunday Scheduled 12 Hour Shift }
    { 300 ;   ;Hours               ;Decimal       ;CaptionML=ENU=Hours;
                                                   Description=Excl. Travel and not yet automatic pause deduction (see documentation trigger);
                                                   Editable=No }
    { 310 ;   ;Travel Hours        ;Decimal       ;CaptionML=ENU=Travel Hours;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Year,Week,Employee No.,Line No.         ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1210190000 : TextConst 'ENU=Fill Receiving Company only when it differs from Supplying Company';
      HrsSetupRec@1210190024 : Record 11012600;
      ICProjSetupRec@1210190007 : Record 315;
      ProjRec@1210190002 : Record 11072003;
      ProjElemRec@1210190001 : Record 11012010;
      EmplRec@1210190005 : Record 5200;
      ServOrderRec@1100485001 : Record 11012823;
      DummyHourAccPauseRec@1210190006 : Record 11012611;
      HourAccFunctionsCU@1210190030 : Codeunit 11012607;
      ElementFormat@1210190003 : Codeunit 11012022;
      Text002@1210190004 : TextConst 'ENU=Travel hours not allowed for UAR Task ''%1'' on project ''%2'', in week %3-%4, employee ''%5'' and line %6.';
      Text003@1210190021 : TextConst 'ENU=may not be %1 ''%2'' from the %3';
      Text004@1210190025 : TextConst 'ENU=Number of travel hours of employee ''%1'' on %2 of week %3-%4 is greater than %5, in line %6.';

    PROCEDURE EmptyLine@1210190009() : Boolean;
    BEGIN
      IF (((Type = Type::Project) AND ("Project No." = '') AND (Element = '')) OR
          ((Type = Type::Service) AND ("Service Order No." = '') )) AND
         ("Cost Component" = '') AND
         ("Monday From" = 0T) AND ("Monday To" = 0T) AND
         ("Tuesday From" = 0T) AND ("Tuesday To" = 0T) AND
         ("Wednesday From" = 0T) AND ("Wednesday To" = 0T) AND
         ("Thursday From" = 0T) AND ("Thursday To" = 0T) AND
         ("Friday From" = 0T) AND ("Friday To" = 0T) AND
         ("Saterday From" = 0T) AND ("Saterday To" = 0T) AND
         ("Sunday From" = 0T) AND ("Sunday To" = 0T)
      THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE CheckSetupWorkedHours@1210190004();
    BEGIN
      IF (Type = Type::Service) AND ("Project No." = '') THEN
        EXIT;

      GetProjectData(FALSE);

      IF (NOT ProjRec."UAR Task Travel Hours Allowed") THEN BEGIN
        "Monday Travel To" := 0;
        "Monday Travel Back" := 0;
        "Tuesday Travel To" := 0;
        "Tuesday Travel Back" := 0;
        "Wednesday Travel To" := 0;
        "Wednesday Travel Back" := 0;
        "Thursday Travel To" := 0;
        "Thursday Travel Back" := 0;
        "Friday Travel To" := 0;
        "Friday Travel Back" := 0;
        "Saterday Travel To" := 0;
        "Saterday Travel Back" := 0;
        "Sunday Travel To" := 0;
        "Sunday Travel Back" := 0;
      END;

      IF (NOT ProjRec."UAR Task Pause Allowed") THEN
        DeletePause();
    END;

    PROCEDURE CalculateTravelHours@1210190007();
    BEGIN
      "Travel Hours" :=
        "Monday Travel To" + "Monday Travel Back" +
        "Tuesday Travel To" + "Tuesday Travel Back" +
        "Wednesday Travel To" + "Wednesday Travel Back" +
        "Thursday Travel To" + "Thursday Travel Back" +
        "Friday Travel To" + "Friday Travel Back" +
        "Saterday Travel To" + "Saterday Travel Back" +
        "Sunday Travel To" + "Sunday Travel Back";
    END;

    PROCEDURE DeletePause@1210190005();
    VAR
      lvHourAccPauseRec@1210190000 : Record 11012611;
    BEGIN
      lvHourAccPauseRec.SETRANGE(Year,Year);
      lvHourAccPauseRec.SETRANGE(Week,Week);
      lvHourAccPauseRec.SETRANGE("Employee No.","Employee No.");
      lvHourAccPauseRec.SETRANGE("Hour Acc. Line No.","Line No.");
      lvHourAccPauseRec.DELETEALL;
    END;

    PROCEDURE CheckCompanyIC@32();
    BEGIN
      IF "Receiving Company" <> '' THEN BEGIN
        ICProjSetupRec.CHANGECOMPANY("Receiving Company");
        ProjRec.CHANGECOMPANY("Receiving Company");
        ProjElemRec.CHANGECOMPANY("Receiving Company");
        ServOrderRec.CHANGECOMPANY("Receiving Company");
      END ELSE BEGIN
        ICProjSetupRec.CHANGECOMPANY(COMPANYNAME);
        ProjRec.CHANGECOMPANY(COMPANYNAME);
        ProjElemRec.CHANGECOMPANY(COMPANYNAME);
        ServOrderRec.CHANGECOMPANY(COMPANYNAME);
      END;
      ICProjSetupRec.GET;
    END;

    PROCEDURE RefersToOtherCompany@1100525008() : Boolean;
    BEGIN
      EXIT(("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME));
    END;

    PROCEDURE GetProjectData@1210190001(ICheckMode@1210190000 : Boolean);
    BEGIN
      CheckCompanyIC;

      IF "Project No." = '' THEN BEGIN
        ProjRec.INIT;
        EXIT;
      END;

      IF ICheckMode THEN
        ProjRec.GET("Project No.")
      ELSE BEGIN
        IF NOT ProjRec.GET("Project No.") THEN
          ProjRec.INIT;
      END;

      ProjRec.CALCFIELDS("UAR Task Pause Allowed", "UAR Task Travel Hours Allowed");
    END;

    PROCEDURE GetProjectDescription@1210190002() : Text[50];
    BEGIN
      GetProjectData(FALSE);

      EXIT(ProjRec.Description);
    END;

    PROCEDURE GetProjElementData@1210190006(ICheckMode@1210190000 : Boolean);
    BEGIN
      CheckCompanyIC;

      IF ("Project No." = '') OR (Element = '') THEN BEGIN
        CLEAR(ProjElemRec);
        EXIT;
      END;

      IF ICheckMode THEN BEGIN
        ProjElemRec.GET("Project No.",Element);
        ProjElemRec.CheckProjectElementBlocked;
      END ELSE BEGIN
        IF NOT ProjElemRec.GET("Project No.",Element) THEN
          CLEAR(ProjElemRec);
      END;
    END;

    PROCEDURE GetProjElementDescription@1210190008() : Text[50];
    BEGIN
      GetProjElementData(FALSE);

      EXIT(ProjElemRec.Description);
    END;

    PROCEDURE GetServOrderData@1100485002(ICheckMode@1210190000 : Boolean);
    BEGIN
      CheckCompanyIC;

      IF "Service Order No." = '' THEN BEGIN
        ServOrderRec.INIT;
        EXIT;
      END;

      IF ICheckMode THEN
        ServOrderRec.GET("Service Order No.")
      ELSE BEGIN
        IF NOT ServOrderRec.GET("Service Order No.") THEN
          ServOrderRec.INIT;
      END;
    END;

    PROCEDURE GetServOrderDescription@1100485001() : Text[50];
    BEGIN
      GetServOrderData(FALSE);

      EXIT(ServOrderRec.Description);
    END;

    PROCEDURE OnLookupProjectNo@1210190000();
    VAR
      PageNo@1100525000 : Integer;
    BEGIN
      CheckCompanyIC;
      ProjRec."No." := "Project No.";
      IF RefersToOtherCompany THEN
        PageNo := PAGE::"Job List IC";
      IF (Type <> Type::Project) THEN
        PAGE.RUNMODAL(PageNo, ProjRec)
      ELSE
        IF PAGE.RUNMODAL(PageNo, ProjRec) = ACTION::LookupOK THEN
          VALIDATE("Project No.", ProjRec."No.");
    END;

    PROCEDURE OnLookupElement@1210190003();
    BEGIN
      CheckCompanyIC;
      ProjElemRec."Project No." := "Project No.";
      ProjElemRec.Element := Element;
      ProjElemRec.SETRANGE("Project No.", "Project No.");
      ProjElemRec.SETRANGE(Blocked, FALSE);
      IF ("Project No." = '') THEN
        PAGE.RUNMODAL(0, ProjElemRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, ProjElemRec) = ACTION::LookupOK THEN
          VALIDATE(Element, ProjElemRec.Element);
      END;
    END;

    PROCEDURE OnLookupServOrder@1100485007();
    BEGIN
      CheckCompanyIC;
      ServOrderRec."No." := "Service Order No.";
      IF (Type <> Type::Service) THEN
        PAGE.RUNMODAL(0, ServOrderRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, ServOrderRec) = ACTION::LookupOK THEN BEGIN
          IF (Type = Type::Service) AND ("Service Order No." <> ServOrderRec."No.") THEN
            VALIDATE("Service Order No.", ServOrderRec."No.");
        END;
      END;
    END;

    PROCEDURE CheckCostComponentAllowed@1210190011();
    BEGIN
      HrsSetupRec.GET;

      IF ("Cost Component" = HrsSetupRec."Cost Component Pause") THEN
        FIELDERROR("Cost Component", STRSUBSTNO(Text003, HrsSetupRec.FIELDCAPTION("Cost Component Pause"),
          HrsSetupRec."Cost Component Pause", HrsSetupRec.TABLECAPTION));
    END;

    PROCEDURE CheckTravelTimeAllowed@1210190012(ITravel@1210190000 : Decimal);
    BEGIN
      IF ITravel = 0 THEN
        EXIT;
      IF (Type = Type::Service) AND ("Project No." = '') THEN
        EXIT;

      GetProjectData(FALSE);
      IF (NOT ProjRec."UAR Task Travel Hours Allowed") THEN
        ERROR(Text002, ProjRec."UAR Task", "Project No.", Year, Week, "Employee No.", "Line No.");
    END;

    PROCEDURE WarningMaxTravelTime@1210190010(IDayNo@1210190000 : Integer);
    VAR
      lvGiveMess@1210190001 : Boolean;
    BEGIN
      HrsSetupRec.GET;
      IF HrsSetupRec."Max. Travel Hours" = 0 THEN
        EXIT;

      lvGiveMess := FALSE;

      CASE CurrFieldNo OF
        FIELDNO("Monday Travel To"):
            IF ("Monday Travel To" > 0) AND ("Monday Travel To" <> xRec."Monday Travel To") AND
               (("Monday Travel To" + "Monday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Monday Travel Back"):
            IF ("Monday Travel Back" > 0) AND ("Monday Travel Back" <> xRec."Monday Travel Back") AND
               (("Monday Travel To" + "Monday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Tuesday Travel To"):
            IF ("Tuesday Travel To" > 0) AND ("Tuesday Travel To" <> xRec."Tuesday Travel To") AND
               (("Tuesday Travel To" + "Tuesday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Tuesday Travel Back"):
            IF ("Tuesday Travel Back" > 0) AND ("Tuesday Travel Back" <> xRec."Tuesday Travel Back") AND
               (("Tuesday Travel To" + "Tuesday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Wednesday Travel To"):
            IF ("Wednesday Travel To" > 0) AND ("Wednesday Travel To" <> xRec."Wednesday Travel To") AND
               (("Wednesday Travel To" + "Wednesday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Wednesday Travel Back"):
            IF ("Wednesday Travel Back" > 0) AND ("Wednesday Travel Back" <> xRec."Wednesday Travel Back") AND
               (("Wednesday Travel To" + "Wednesday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Thursday Travel To"):
            IF ("Thursday Travel To" > 0) AND ("Thursday Travel To" <> xRec."Thursday Travel To") AND
               (("Thursday Travel To" + "Thursday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Thursday Travel Back"):
            IF ("Thursday Travel Back" > 0) AND ("Thursday Travel Back" <> xRec."Thursday Travel Back") AND
               (("Thursday Travel To" + "Thursday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Friday Travel To"):
            IF ("Friday Travel To" > 0) AND ("Friday Travel To" <> xRec."Friday Travel To") AND
               (("Friday Travel To" + "Friday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Friday Travel Back"):
            IF ("Friday Travel Back" > 0) AND ("Friday Travel Back" <> xRec."Friday Travel Back") AND
               (("Friday Travel To" + "Friday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Saterday Travel To"):
            IF ("Saterday Travel To" > 0) AND ("Saterday Travel To" <> xRec."Saterday Travel To") AND
               (("Saterday Travel To" + "Saterday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Saterday Travel Back"):
            IF ("Saterday Travel Back" > 0) AND ("Saterday Travel Back" <> xRec."Saterday Travel Back") AND
               (("Saterday Travel To" + "Saterday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Sunday Travel To"):
            IF ("Sunday Travel To" > 0) AND ("Sunday Travel To" <> xRec."Sunday Travel To") AND
               (("Sunday Travel To" + "Sunday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Sunday Travel Back"):
            IF ("Sunday Travel Back" > 0) AND ("Sunday Travel Back" <> xRec."Sunday Travel Back") AND
               (("Sunday Travel To" + "Sunday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
      END;

      IF lvGiveMess THEN
        MESSAGE(Text004,"Employee No.",HourAccFunctionsCU.GetDayText(IDayNo),Year,Week,HrsSetupRec."Max. Travel Hours","Line No.");
    END;

    BEGIN
    {
      For the amount of hours per day and for the total amount of hours per record, automatic pause dedication is not taken into account yet.
      Only at posting of the hours, the automatic pause deduction will be calculated for the amount of hours.
      With the amount of hours of non posted hour lines, nothing will be done.

      Note: in first instance, this was directly calculated, but at that time it was per line/per day. Now it is calculated for multiple lines.
      Calculating automatic pause dedication during mutations will be difficult then and will slow down the performance.
    }
    END.
  }
}

