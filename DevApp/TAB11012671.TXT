OBJECT Table 11012671 Project Inventory Delivery
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               VALIDATE("Item Composition");
               CheckEntityNo;
             END;

    OnModify=BEGIN
               VALIDATE("Item Composition");
               ProjectInventoryDeliveryReserv.VerifyChange(Rec,xRec); //DP00121
               CheckEntityNo;
             END;

    OnDelete=BEGIN
               //DP00121
               ProjectInventoryDeliveryReserv.DeleteLine(Rec);

               CALCFIELDS("Reserved Qty. (Base)");
               TESTFIELD("Reserved Qty. (Base)",0);
             END;

    CaptionML=ENU=Project Inventory Delivery;
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job;
                                                   CaptionML=ENU=Project No. }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 30  ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                ProjectInventoryDeliveryReserv.VerifyChange(Rec,xRec); //DP00121
                                                              END;

                                                   CaptionML=ENU=Posting Date }
    { 40  ;   ;Entry Type          ;Option        ;InitValue=Delivery;
                                                   OnValidate=BEGIN
                                                                IF "Entry Type" = "Entry Type"::Delivery THEN BEGIN
                                                                  ProjSetupRec.GET;
                                                                  ProjRec.GET("Project No.");
                                                                  IF (ProjSetupRec."Provisions at Closure") THEN
                                                                    ProjRec.CheckProjectStatus(-1)
                                                                  ELSE
                                                                    ProjRec.CheckProjectStatus(1);
                                                                END ELSE BEGIN
                                                                  Deliver := Deliver::" ";
                                                                  "Ship To Location" := '';
                                                                END;

                                                                IF "Entry Type" <> "Entry Type"::Transfer THEN BEGIN
                                                                  "Create Advice Order" := FALSE;
                                                                  "New Project No." := '';
                                                                  "New Location Code" := '';
                                                                  "New Bin Code" := '';  //db, 02-11-10
                                                                  "New Shelf No." := '';
                                                                  "New Element" := '';
                                                                END;

                                                                ProjectInventoryDeliveryReserv.VerifyChange(Rec,xRec); //DP00121
                                                              END;

                                                   CaptionML=ENU=Entry Type;
                                                   OptionCaptionML=ENU=Delivery,Positive Adjmt.,Negative Adjmt.,Transfer;
                                                   OptionString=Delivery,Positive Adjmt.,Negative Adjmt.,Transfer }
    { 50  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF "Item No." <> '' THEN BEGIN
                                                                  Manufacturer := '';
                                                                  "Basic Item" := '';
                                                                  "Vendor (Trade Item)" := '';
                                                                  "Trade Item" := '';

                                                                  GetItem;
                                                                  Description := ItemRec.Description;
                                                                  VALIDATE("Unit of Measure Code", ItemRec."Base Unit of Measure");
                                                                END;
                                                                VALIDATE("Item Composition");

                                                                ProjectInventoryDeliveryReserv.VerifyChange(Rec,xRec); //DP00121
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 55  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                VALIDATE("Item Composition");

                                                                ProjectInventoryDeliveryReserv.VerifyChange(Rec,xRec); //DP00121
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 60  ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=BEGIN
                                                                IF Manufacturer <> '' THEN
                                                                  TESTFIELD("Item No.", '');

                                                                VALIDATE("Item Composition");
                                                              END;

                                                   CaptionML=ENU=Manufacturer }
    { 70  ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                IF ("Basic Item" = '') THEN BEGIN
                                                                  VALIDATE("Item Composition");
                                                                  EXIT;
                                                                END;

                                                                TESTFIELD("Item No.", '');

                                                                IF ("Basic Item" <> xRec."Basic Item") THEN
                                                                  ValidateItem((ItemTypeOpt::"Basic Item"));
                                                                VALIDATE("Item Composition");
                                                              END;

                                                   CaptionML=ENU=Basic Item }
    { 80  ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=VAR
                                                                TradeItemRec@1100525000 : Record 11012317;
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                IF ("Vendor (Trade Item)" = '') THEN BEGIN
                                                                  VALIDATE("Item Composition");
                                                                  EXIT;
                                                                END;

                                                                TESTFIELD("Item No.", '');

                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") THEN BEGIN
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  //db.sn, 17-12-10: M18021
                                                                  IF lvExecValidate THEN BEGIN
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item")
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor");
                                                                  END;
                                                                  //db.en, 17-12-10: M18021
                                                                END;
                                                                VALIDATE("Item Composition");
                                                              END;

                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 90  ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                IF ("Trade Item" = '') THEN BEGIN
                                                                  VALIDATE("Item Composition");
                                                                  EXIT;
                                                                END;

                                                                TESTFIELD("Item No.", '');

                                                                IF ("Trade Item" <> xRec."Trade Item") THEN
                                                                  ValidateItem((ItemTypeOpt::"Trade Item"));
                                                                VALIDATE("Item Composition");
                                                              END;

                                                   CaptionML=ENU=Trade Item }
    { 100 ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 101 ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 110 ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                VALIDATE("Item Composition");
                                                              END;

                                                   CaptionML=ENU=Description }
    { 115 ;   ;Description 2       ;Text50        ;OnValidate=BEGIN
                                                                VALIDATE("Item Composition");
                                                              END;

                                                   CaptionML=ENU=Description 2 }
    { 120 ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Inventory Quantity", "Receipt Quantity");
                                                                IF ("Location Code" <> xRec."Location Code") AND ("Location Code" <> '') THEN
                                                                  "Bin Code" := GetDefaultBin("Location Code");  //db, 02-11-10
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 130 ;   ;Shelf No.           ;Code20        ;TableRelation="Shelf per Location".Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Inventory Quantity", "Receipt Quantity");
                                                              END;

                                                   CaptionML=ENU=Shelf No. }
    { 135 ;   ;Bin Code            ;Code20        ;OnValidate=VAR
                                                                WMSManagement@1001 : Codeunit 7302;
                                                                Location@1100526200 : Record 14;
                                                                PrefBin@1100525000 : Record 11020629;
                                                              BEGIN
                                                                //db, 02-11-10
                                                                WMSManagement.FindBin("Location Code","Bin Code",'');
                                                                TESTFIELD("Location Code");
                                                                IF "Bin Code" <> '' THEN BEGIN
                                                                  Location.GET("Location Code");
                                                                  Location.TESTFIELD("Bin Mandatory");
                                                                END;

                                                                PrefBin.CheckBinLocationBinding("Project No.",'',"Location Code","Bin Code");

                                                                ProjectInventoryDeliveryReserv.VerifyChange(Rec,xRec); //DP00121
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1002 : Codeunit 7302;
                                                              BinCode@1000 : Code[20];
                                                            BEGIN
                                                              //db, 02-11-10
                                                              BinCode := WMSManagement.BinLookUpSpecific("Location Code","Item No.",'','',"Project No.",'',"Bin Code");
                                                              IF BinCode <> '' THEN
                                                                VALIDATE("Bin Code",BinCode);
                                                            END;

                                                   CaptionML=ENU=Bin Code }
    { 140 ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                Item@1100528600 : Record 27;
                                                              BEGIN
                                                                CheckProjectInventory(Rec);
                                                                IF (Quantity = 0) AND ("Employee No." <> '') THEN
                                                                  VALIDATE("Employee No.");

                                                                //DP00121.sn
                                                                IF "Item No." <> '' THEN BEGIN  //C004606.n
                                                                  Item.GET("Item No.");
                                                                  IF Item."Item Tracking Code" <> '' THEN
                                                                    ProjectInventoryDeliveryReserv.VerifyQuantity(Rec,xRec);
                                                                END;  //C004606.n
                                                                //DP00121.en
                                                              END;

                                                   CaptionML=ENU=Delivery Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 150 ;   ;Unit of Measure Code;Code10        ;TableRelation="Unit of Measure";
                                                   OnValidate=VAR
                                                                ItemUnitRec@1100525000 : Record 5404;
                                                              BEGIN
                                                                //db, 28-02-13: C005312 (changed table relation; due to problem with rename base-unit)
                                                                IF "Item No." <> '' THEN
                                                                  ItemUnitRec.GET("Item No.", "Unit of Measure Code");

                                                                CALCFIELDS("Inventory Quantity", "Receipt Quantity");
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 160 ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                IF (Quantity = 0) THEN
                                                                  "Employee No." := '';
                                                              END;

                                                   CaptionML=ENU=Employee No. }
    { 170 ;   ;Deliver             ;Option        ;OnValidate=BEGIN
                                                                IF Deliver <> Deliver::" " THEN
                                                                  TESTFIELD("Entry Type", "Entry Type"::Delivery);

                                                                IF Deliver <> xRec.Deliver THEN
                                                                  "Ship To Location" := '';
                                                              END;

                                                   CaptionML=ENU=Deliver;
                                                   OptionCaptionML=ENU=" ,Project Location,Location";
                                                   OptionString=[ ,Project Location,Location] }
    { 175 ;   ;Ship To Location    ;Code10        ;TableRelation=IF (Deliver=CONST(Project Location)) "Project Location".Code WHERE (Project No.=FIELD(Project No.))
                                                                 ELSE IF (Deliver=CONST(Location)) Location.Code;
                                                   OnValidate=BEGIN
                                                                IF "Ship To Location" <> '' THEN
                                                                  TESTFIELD(Deliver);
                                                              END;

                                                   CaptionML=ENU=Ship To Location }
    { 200 ;   ;New Project No.     ;Code20        ;TableRelation=Job;
                                                   OnValidate=BEGIN
                                                                IF "New Project No." <> '' THEN BEGIN
                                                                  TESTFIELD("Entry Type","Entry Type"::Transfer);
                                                                  ProjSetupRec.GET;
                                                                  ProjRec.GET("New Project No.");
                                                                  IF (ProjSetupRec."Provisions at Closure") THEN
                                                                    ProjRec.CheckProjectStatus(-1)
                                                                  ELSE
                                                                    ProjRec.CheckProjectStatus(1);

                                                                  IF "Create Advice Order" AND ("New Project No." = "Project No.") THEN
                                                                    "Create Advice Order" := FALSE;
                                                                END;

                                                                ProjectInventoryDeliveryReserv.VerifyChange(Rec,xRec); //DP00121
                                                              END;

                                                   CaptionML=ENU=New Project No. }
    { 210 ;   ;New Location Code   ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                IF "New Location Code" = '' THEN BEGIN
                                                                  "New Bin Code" := '';   //db, 14-12-10
                                                                  "New Shelf No." := '';  //db, 14-12-10
                                                                END ELSE
                                                                  TESTFIELD("Entry Type","Entry Type"::Transfer);

                                                                ProjectInventoryDeliveryReserv.VerifyChange(Rec,xRec); //DP00121
                                                              END;

                                                   CaptionML=ENU=New Location Code }
    { 215 ;   ;New Bin Code        ;Code20        ;OnValidate=VAR
                                                                WMSManagement@1001 : Codeunit 7302;
                                                                Location@1100526200 : Record 14;
                                                              BEGIN
                                                                //db, 02-11-10
                                                                IF "New Bin Code" <> '' THEN BEGIN
                                                                  WMSManagement.FindBin("New Location Code","New Bin Code",'');
                                                                  TESTFIELD("New Location Code");
                                                                  IF "New Bin Code" <> '' THEN BEGIN
                                                                    Location.GET("New Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                  END;
                                                                END;

                                                                ProjectInventoryDeliveryReserv.VerifyChange(Rec,xRec); //DP00121
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1002 : Codeunit 7302;
                                                              BinCode@1000 : Code[20];
                                                            BEGIN
                                                              //db, 02-11-10
                                                              BinCode := WMSManagement.BinLookUpSpecific("New Location Code","Item No.",'','',"New Project No.",'',"New Bin Code");  //db, 01-09-11: M26935
                                                              IF BinCode <> '' THEN
                                                                VALIDATE("New Bin Code",BinCode);
                                                            END;

                                                   CaptionML=ENU=New Bin Code }
    { 220 ;   ;New Shelf No.       ;Code20        ;TableRelation="Shelf per Location".Code WHERE (Location Code=FIELD(New Location Code));
                                                   OnValidate=BEGIN
                                                                IF "New Shelf No." = '' THEN
                                                                  EXIT;

                                                                TESTFIELD("Entry Type","Entry Type"::Transfer);
                                                                TESTFIELD("New Location Code");

                                                                GetLocation("New Location Code");
                                                                LocRec.TESTFIELD("Directed Put-away and Pick",FALSE);
                                                              END;

                                                   CaptionML=ENU=New Shelf No. }
    { 221 ;   ;New Element         ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(New Project No.));
                                                   OnValidate=BEGIN
                                                                //hbk,06-05-2010
                                                                IF "New Element" = '' THEN
                                                                  EXIT;

                                                                TESTFIELD("Entry Type","Entry Type"::Transfer);
                                                                FormatMgt.FormatElem("New Element",2,'');
                                                                ProjElemRec.GET("New Project No.", "New Element");
                                                                ProjElemRec.TESTFIELD(Blocked, FALSE);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=New Element }
    { 225 ;   ;Description New Element;Text50     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Element".Description WHERE (Project No.=FIELD(New Project No.),
                                                                                                           Element=FIELD(New Element)));
                                                   CaptionML=ENU=Description New Element;
                                                   Editable=No }
    { 230 ;   ;Create Advice Order ;Boolean       ;OnValidate=BEGIN
                                                                IF "Create Advice Order" THEN BEGIN
                                                                  TESTFIELD("Entry Type", "Entry Type"::Transfer);
                                                                  IF ("New Project No." = "Project No.") THEN
                                                                    "Create Advice Order" := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Create Advice Order (From Project);
                                                   Description=Only for transfer, for the 'From Project' }
    { 300 ;   ;Inventory Quantity  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Project Inventory Entry".Quantity WHERE (Project No.=FIELD(Project No.),
                                                                                                             Item Composition=FIELD(Item Composition),
                                                                                                             Location Code=FIELD(Location Code),
                                                                                                             Bin Code=FIELD(Bin Code),
                                                                                                             Shelf No.=FIELD(Shelf No.),
                                                                                                             Unit of Measure Code=FIELD(Unit of Measure Code),
                                                                                                             Element=FIELD(Element),
                                                                                                             Assembly Yard Number Object=FIELD(Assembly Yard Number Object)));
                                                   CaptionML=ENU=Inventory Quantity;
                                                   Editable=No }
    { 310 ;   ;Receipt Quantity    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Project Inventory Entry".Quantity WHERE (Project No.=FIELD(Project No.),
                                                                                                             Item Composition=FIELD(Item Composition),
                                                                                                             Location Code=FIELD(Location Code),
                                                                                                             Bin Code=FIELD(Bin Code),
                                                                                                             Shelf No.=FIELD(Shelf No.),
                                                                                                             Unit of Measure Code=FIELD(Unit of Measure Code),
                                                                                                             Entry Type=FILTER(Receipt),
                                                                                                             Element=FIELD(Element),
                                                                                                             Assembly Yard Number Object=FIELD(Assembly Yard Number Object)));
                                                   CaptionML=ENU=Receipt Quantity;
                                                   Editable=No }
    { 320 ;   ;Item Composition    ;Code120       ;OnValidate=BEGIN
                                                                FillItemComposition();
                                                                CALCFIELDS("Inventory Quantity", "Receipt Quantity");
                                                              END;

                                                   CaptionML=ENU=Item Composition;
                                                   Editable=No }
    { 330 ;   ;Entity Type         ;Option        ;OnValidate=BEGIN
                                                                VALIDATE("Item Composition");
                                                              END;

                                                   CaptionML=ENU=Entity Type;
                                                   OptionCaptionML=ENU=None,Cable,Device,Extra Need,Cable Transit,,,,,Position;
                                                   OptionString=None,Cable,Device,ExtraNeed,Cable Transit,,,,,Position;
                                                   Editable=No }
    { 331 ;   ;System No.          ;Code20        ;OnValidate=BEGIN
                                                                VALIDATE("Item Composition");
                                                              END;

                                                   CaptionML=ENU=System No.;
                                                   Editable=No }
    { 332 ;   ;Entity No.          ;Code20        ;OnValidate=BEGIN
                                                                VALIDATE("Item Composition");
                                                              END;

                                                   CaptionML=ENU=Entity No.;
                                                   Editable=No }
    { 333 ;   ;Gland Position      ;Option        ;CaptionML=ENU=Cable Gland Postion;
                                                   OptionCaptionML=ENU=" ,From Side,To Side";
                                                   OptionString=[ ,From,To];
                                                   Editable=No }
    { 340 ;   ;Element             ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                FormatMgt.FormatElem(Element,2,''); //hbk,06-05-2010
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 345 ;   ;Description Element ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Element".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                           Element=FIELD(Element)));
                                                   CaptionML=ENU=Description Element;
                                                   Editable=No }
    { 350 ;   ;Anonymous           ;Boolean       ;CaptionML=ENU=Anonymous }
    { 370 ;   ;Purch. Detail No.   ;Code10        ;OnValidate=VAR
                                                                ProjectInventoryEntry@1100529000 : Record 11012670;
                                                              BEGIN
                                                                ProjectInventoryEntry.CheckDetailNoPrjInventDelivery(Rec);
                                                                VALIDATE("Item Composition");
                                                              END;

                                                   OnLookup=VAR
                                                              Text@1100529000 : Text;
                                                            BEGIN
                                                              Text := "Purch. Detail No.";
                                                              IF LookupDetailNo(Text) THEN BEGIN
                                                                IF Text <> "Purch. Detail No." THEN
                                                                  VALIDATE("Purch. Detail No.", Text);
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Purch. Detail No. }
    { 400 ;   ;Yard No.            ;Code20        ;OnValidate=BEGIN
                                                                VALIDATE("Item Composition");
                                                              END;

                                                   CaptionML=ENU=Yard No.;
                                                   NotBlank=Yes }
    { 410 ;   ;Assembly Yard Number Object;Boolean;CaptionML=ENU=Assembly Yard Number Object }
    { 500 ;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("NS Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Project No.),
                                                                                                                   Source Ref. No.=FIELD(Line No.),
                                                                                                                   Source Type=CONST(11012671),
                                                                                                                   Reservation Status=CONST(Reservation)));
                                                   CaptionML=ENU=Reserved Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Project No.,Line No.                    ;Clustered=Yes }
    {    ;Project No.,Deliver,Ship To Location     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ProjSetupRec@1210190009 : Record 315;
      ProjRec@1210190002 : Record 11072003;
      ProjElemRec@1100525001 : Record 11012010;
      ItemRec@1010 : Record 27;
      LocRec@1210190006 : Record 14;
      ProjInventEntryRec@1210190000 : Record 11012670;
      ValidateCu@1210190003 : Codeunit 11012033;
      FormatMgt@1100525000 : Codeunit 11012022;
      ProjectInventoryDeliveryReserv@1100528600 : Codeunit 11012355;
      ItemTypeOpt@1210190001 : 'Item,Basic Item,Trade Item,Trade Vendor';
      Text000@1210190005 : TextConst 'ENU=Quantity is greater than the project inventory (%1) of Project ''%2'', Item ''%3'', Manufacturer ''%4'', Basic Item ''%5'', Vendor ''%6'', Trade Item ''%7'', Element ''%8'', %9';
      Text001@1210190007 : TextConst 'ENU=Location ''%1'', Bin ''%2'', Shelf ''%3'', Unit ''%4'' on the Date %5.';
      Text002@1210190008 : TextConst 'ENU=Location ''%1'',  Bin ''%2, Shelf ''%3'', Unit ''%4''.';

    PROCEDURE EmptyLine@5() : Boolean;
    BEGIN
      IF ("Entry Type" = "Entry Type"::Delivery) AND (Quantity = 0) THEN  // These lines are automatically added,
        EXIT(TRUE);                                                       // if quantity not filled then skip

      EXIT(
        ("Item No." = '') AND ("Basic Item" = '') AND ("Trade Item" = '') AND
        (Description = '') AND (Quantity = 0));
    END;

    LOCAL PROCEDURE GetItem@2();
    BEGIN
      IF ItemRec."No." <> "Item No." THEN
        ItemRec.GET("Item No.");
    END;

    LOCAL PROCEDURE GetLocation@7300(ILocation@1000 : Code[10]);
    BEGIN
      IF (ILocation = '') THEN
        CLEAR(LocRec)
      ELSE
        IF LocRec.Code <> ILocation THEN
          LocRec.GET(ILocation);
    END;

    PROCEDURE ValidateItem@6509(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item,Trade Vendor');
    VAR
      lvDummyDat@11012001 : Date;
      lvDummyDec@1210190001 : Decimal;
      lvDummyCode@11012003 : Code[30];
      lvDummyItem@1210190000 : Code[20];
      lvRefDate@1100485002 : Date;
      lvDiscRef1@1100485001 : Code[20];
      lvDiscRef2@1100485000 : Code[20];
    BEGIN
      IF "Item No." <> '' THEN
        EXIT;

      lvDummyItem := '';

      ProjRec.GET("Project No.");
      lvRefDate := ValidateCu.GetRefDateProject(ProjRec);
      lvDiscRef1 := ProjRec."Purch Discount Term Group 1";
      lvDiscRef2 := ProjRec."Purch Discount Term Group 2";

      ValidateCu.ValidateItem(LTypeArtOpt, "Trade Item", lvDummyItem, Manufacturer, "Vendor (Trade Item)",
                                   "Basic Item", lvDummyCode, Description, "Unit of Measure Code", lvDummyDec,
                                   lvDummyDec, lvDummyDat, lvDummyDec, "Description 2", lvDummyCode,
                                   lvDiscRef1,lvDiscRef2,lvRefDate,'');

      VALIDATE("Item Composition");
    END;

    PROCEDURE CheckProjectInventory@1210190000(ProjInventDeliveryRec@1210190001 : Record 11012671);
    VAR
      lvQuantity@1210190000 : Decimal;
      lvQuantityOnDate@1210190003 : Decimal;
      lvTextStr@1210190002 : Text[250];
    BEGIN
      WITH ProjInventDeliveryRec DO BEGIN
        IF NOT ("Entry Type" IN ["Entry Type"::Delivery, "Entry Type"::"Negative Adjmt.", "Entry Type"::Transfer]) THEN
          EXIT;

        lvQuantity := 0;
        lvQuantityOnDate := 0;

        ProjInventEntryRec.RESET;
        ProjInventEntryRec.SETCURRENTKEY("Project No.", "Item Composition");  //db, 02-11-10
        ProjInventEntryRec.SETRANGE("Project No.", "Project No.");
        ProjInventEntryRec.SETRANGE("Item Composition", "Item Composition");
      //ProjInventEntryRec.SETRANGE(Manufacturer, Manufacturer); //hbk,10-06-2010,TM4870-1
      //ProjInventEntryRec.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");  //db, 02-11-10
        ProjInventEntryRec.SETRANGE("Location Code", "Location Code");
        ProjInventEntryRec.SETRANGE("Bin Code", "Bin Code");  //db, 02-11-10
        ProjInventEntryRec.SETRANGE("Shelf No.", "Shelf No.");
        ProjInventEntryRec.SETRANGE("Unit of Measure Code", "Unit of Measure Code");
        ProjInventEntryRec.SETRANGE(Element,Element); //hbk,10-06-2010,TM4870-1
        ProjInventEntryRec.SETRANGE("Assembly Yard Number Object","Assembly Yard Number Object");
        IF ProjInventEntryRec.FIND('-') THEN BEGIN
          REPEAT
            lvQuantity := lvQuantity + ProjInventEntryRec.Quantity;
            IF ProjInventEntryRec."Posting Date" <= "Posting Date" THEN
              lvQuantityOnDate  := lvQuantityOnDate + ProjInventEntryRec.Quantity;
          UNTIL ProjInventEntryRec.NEXT = 0;
        END;

        IF "Purch. Detail No." <> '' THEN
          lvTextStr := STRSUBSTNO('%1 %2, ', FIELDCAPTION("Purch. Detail No."), "Purch. Detail No.");
        IF (Quantity > lvQuantityOnDate) THEN BEGIN
          lvTextStr := lvTextStr + STRSUBSTNO(Text001, "Location Code", "Bin Code", "Shelf No.", "Unit of Measure Code", "Posting Date");
          ERROR(Text000, lvQuantity, "Project No.", "Item No.", Manufacturer, "Basic Item", "Vendor (Trade Item)",
            "Trade Item", Element, lvTextStr); //hbk,10-06-10,TM4871: added element
        END;
        IF (Quantity > lvQuantity) THEN BEGIN
          lvTextStr := lvTextStr + STRSUBSTNO(Text002, "Location Code", "Bin Code", "Shelf No.", "Unit of Measure Code");
          ERROR(Text000, lvQuantity, "Project No.", "Item No.", Manufacturer, "Basic Item", "Vendor (Trade Item)",
            "Trade Item", Element, lvTextStr); //hbk,10-06-10,TM4871: added element
        END;
      END;
    END;

    PROCEDURE GetDefaultBin@1100526200(iLoc@1100526202 : Code[20]) : Code[20];
    VAR
      Location@1100526204 : Record 14;
      WMSManagement@1100526203 : Codeunit 7302;
      BinCode@1100526205 : Code[20];
    BEGIN
      //db, 02-11-10
      Location.GET(iLoc);
      IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN BEGIN
        BinCode := WMSManagement.GetDefaultBinLocation(
          "Project No.",'',"Location Code","Item No.",'',TRUE);  //db, 30-03-11
      END;

      EXIT(BinCode);
    END;

    PROCEDURE FillQtyWithInventoryQty@1210190001();
    BEGIN
      //kkleermaker, 110909, M29027
      IF FINDSET THEN
        REPEAT
          CALCFIELDS("Inventory Quantity");
          IF "Inventory Quantity" > 0 THEN BEGIN
            VALIDATE(Quantity, "Inventory Quantity");
            MODIFY;
          END;
        UNTIL NEXT = 0;
    END;

    PROCEDURE UpdateDeliveryLines@1100528800(iProjNo@1100528800 : Code[20]);
    VAR
      lvProjInventDeliveryRec@1210190002 : Record 11012671;
      lvProjInventEntryRec@1210190001 : Record 11012670;
      lvProjInventEntryRec2@1210190000 : Record 11012670;
      lvTmpProjInventDeliveryRec@1100525000 : TEMPORARY Record 11012671;
      NextLineNo@1100528801 : Integer;
    BEGIN
      WITH lvProjInventDeliveryRec DO BEGIN
        LOCKTABLE;
        RESET;
        SETRANGE("Project No.", iProjNo);
        SETRANGE("Entry Type", "Entry Type"::Delivery);
        SETRANGE(Quantity, 0);
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF Deliver <> Deliver::" " THEN BEGIN
              lvTmpProjInventDeliveryRec := lvProjInventDeliveryRec;
              lvTmpProjInventDeliveryRec.INSERT;
            END;
            DELETE;
          UNTIL NEXT = 0;
        END;

        RESET;
        SETRANGE("Project No.", iProjNo);
        IF NOT FINDLAST THEN
          NextLineNo := 10000
        ELSE
          NextLineNo := "Line No." + 10000;
      END;

      WITH lvProjInventEntryRec DO BEGIN
        CLEAR(lvProjInventEntryRec2);
        RESET;
        SETCURRENTKEY("Project No.", "Item Composition");  //db, 02-11-10
        SETRANGE("Project No.", iProjNo);
        IF FIND('-') THEN BEGIN
          REPEAT
            IF (lvProjInventEntryRec2."Project No." <> "Project No.") OR
               (lvProjInventEntryRec2."Item Composition" <> "Item Composition") OR
               (lvProjInventEntryRec2."Location Code" <> "Location Code") OR
               (lvProjInventEntryRec2."Bin Code" <> "Bin Code") OR  //db, 02-11-10
               (lvProjInventEntryRec2."Shelf No." <> "Shelf No.") OR
               (lvProjInventEntryRec2."Unit of Measure Code" <> "Unit of Measure Code") OR
               (lvProjInventEntryRec2.Element <> Element) OR //hbk,10-06-10,TM4870
               (lvProjInventEntryRec2."Assembly Yard Number Object" <> "Assembly Yard Number Object")
            THEN BEGIN
              CALCFIELDS("Inventory Quantity");
      //        IF ("Inventory Quantity" > 0) THEN BEGIN
              // Negative inventories are created, i.a. because for all items empty and same 'Desc. 1' and different
              // 'Descr. 2' the 2nd description was not taken into account (call 5936 dd 7-12-2004, O2 already from 2004-Q1).
              // These were not visible anymore after 2nd description was added to index (via "Item Composition").
              // Therefore test changed into '<> 0'. One can correct inventory via pos./neg. corrections.
              IF ("Inventory Quantity" <> 0) THEN
                IF AddLine(
                     lvProjInventEntryRec,
                     lvTmpProjInventDeliveryRec,
                     lvProjInventDeliveryRec,
                     NextLineNo) THEN
                  NextLineNo := NextLineNo + 10000;
            END;
            lvProjInventEntryRec2 := lvProjInventEntryRec;
          UNTIL NEXT = 0;
        END;
      END;
      COMMIT;
    END;

    PROCEDURE OpenItemTrackingLines@1100528600();
    VAR
      ProjectInventoryDelivReserve@1100528600 : Codeunit 11012355;
    BEGIN
      //DP00121
      TESTFIELD("Item No.");
      TESTFIELD(Quantity);
      ProjectInventoryDelivReserve.CallItemTracking(Rec);
    END;

    PROCEDURE AddLine@1100409000(ProjectInventoryEntry@1100409000 : Record 11012670;VAR TmpStoredProjInventoryDelivery@1100409003 : TEMPORARY Record 11012671;VAR ProjectInventoryDelivery@1100409005 : Record 11012671;NextLineNo@1100409002 : Integer) : Boolean;
    BEGIN
      //DP00121
      WITH ProjectInventoryEntry DO BEGIN
        IF GetProjInventoryDeliveryLine(ProjectInventoryDelivery) THEN
          EXIT(FALSE);

        IF NextLineNo = 0 THEN BEGIN
          ProjectInventoryDelivery.RESET;
          ProjectInventoryDelivery.SETRANGE("Project No.", "Project No.");
          IF NOT ProjectInventoryDelivery.FINDLAST THEN
            NextLineNo := 10000
          ELSE
            NextLineNo := ProjectInventoryDelivery."Line No." + 10000;
        END;

        ProjectInventoryDelivery.INIT;
        ProjectInventoryDelivery."Project No." := "Project No.";
        ProjectInventoryDelivery."Line No." := NextLineNo;
        ProjectInventoryDelivery."Posting Date" := TODAY;
        ProjectInventoryDelivery."Entry Type" := ProjectInventoryDelivery."Entry Type"::Delivery;
        ProjectInventoryDelivery."Entity Type" := "Entity Type";
        ProjectInventoryDelivery."System No." := "System No.";
        ProjectInventoryDelivery."Entity No." := "Entity No.";
        ProjectInventoryDelivery."Gland Position" := "Gland Position";
        ProjectInventoryDelivery."Item No." := "Item No.";
        ProjectInventoryDelivery.Manufacturer := Manufacturer;
        ProjectInventoryDelivery."Basic Item" := "Basic Item";
        ProjectInventoryDelivery."Vendor (Trade Item)" := "Vendor (Trade Item)";
        ProjectInventoryDelivery."Trade Item" := "Trade Item";
        ProjectInventoryDelivery.Description := Description;
        ProjectInventoryDelivery."Description 2" := "Description 2";
        ProjectInventoryDelivery."Location Code" := "Location Code";
        ProjectInventoryDelivery."Bin Code" := "Bin Code";  //db, 02-11-10
        ProjectInventoryDelivery."Shelf No." := "Shelf No.";
        ProjectInventoryDelivery.Quantity := 0;
        ProjectInventoryDelivery."Unit of Measure Code" := "Unit of Measure Code";
        ProjectInventoryDelivery.Element := Element; //hbk,10-06-10,TM4870
        ProjectInventoryDelivery."Variant Code" := "Variant Code"; // X0.71
        ProjectInventoryDelivery."Purch. Detail No." := "Purch. Detail No.";  //DP00749
        ProjectInventoryDelivery."Global Dimension 1 Code" := '';
        ProjectInventoryDelivery."Global Dimension 2 Code" := "Cost Object";
        ProjectInventoryDelivery."Yard No." := "Yard No."; //**4PS.n
        ProjectInventoryDelivery."Assembly Yard Number Object" := "Assembly Yard Number Object";

        TmpStoredProjInventoryDelivery.SETRANGE("Project No.", "Project No.");
        TmpStoredProjInventoryDelivery.SETRANGE("Item Composition", "Item Composition");
        TmpStoredProjInventoryDelivery.SETRANGE("Location Code", "Location Code");
        TmpStoredProjInventoryDelivery.SETRANGE("Bin Code", "Bin Code");  //db, 02-11-10
        TmpStoredProjInventoryDelivery.SETRANGE("Shelf No.", "Shelf No.");
        TmpStoredProjInventoryDelivery.SETRANGE("Unit of Measure Code", "Unit of Measure Code");
        TmpStoredProjInventoryDelivery.SETRANGE("Entry Type", ProjectInventoryDelivery."Entry Type"::Delivery);
        TmpStoredProjInventoryDelivery.SETRANGE(Element,Element); //hbk,10-06-10,TM4870
        TmpStoredProjInventoryDelivery.SETRANGE("Assembly Yard Number Object", "Assembly Yard Number Object");
        IF TmpStoredProjInventoryDelivery.FINDFIRST THEN BEGIN
          ProjectInventoryDelivery.Deliver := TmpStoredProjInventoryDelivery.Deliver;
          ProjectInventoryDelivery."Ship To Location" := TmpStoredProjInventoryDelivery."Ship To Location";
        END;

        ProjectInventoryDelivery.INSERT(TRUE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckEntityNo@1100528401();
    VAR
      JobsSetup@1100528400 : Record 315;
    BEGIN
      IF "Entity Type" = "Entity Type"::None THEN
        EXIT;

      IF JobsSetup.GET AND
         JobsSetup."Entity No. Mandatory"
      THEN
        TESTFIELD("Entity No.");
    END;

    PROCEDURE FillItemComposition@1100529003();
    BEGIN
      "Item Composition" := ProjInventEntryRec.ProjInvItemComposition(
        "Item No.","Trade Item","Basic Item",Description,"Description 2","Yard No.",
        "Entity Type","System No.","Entity No.",Manufacturer,"Vendor (Trade Item)","Variant Code","Purch. Detail No.");
    END;

    PROCEDURE PurchaseDetailDescription@1100529000() : Text;
    VAR
      PurchaseLineDetail@1100529000 : Record 11020660;
    BEGIN
      EXIT(PurchaseLineDetail.PurchaseDetailDescription("Purch. Detail No."));
    END;

    PROCEDURE ShowDetailCard@1100529001();
    VAR
      PurchaseLineDetail@1100529000 : Record 11020660;
    BEGIN
      TESTFIELD("Purch. Detail No.");
      PurchaseLineDetail.ShowDetailCardOfDetailNo("Purch. Detail No.");
    END;

    PROCEDURE LookupDetailNo@1100529002(VAR Text@1100529002 : Text) : Boolean;
    VAR
      ProjectInventoryDelivery@1100529000 : Record 11012671;
      ProjectInventoryEntry@1100529001 : Record 11012670;
    BEGIN
      ProjectInventoryDelivery := Rec;
      ProjectInventoryDelivery."Purch. Detail No." := '*';
      ProjectInventoryDelivery.FillItemComposition();

      ProjectInventoryEntry.FILTERGROUP(9);
      ProjectInventoryEntry.SETRANGE("Project No.", "Project No.");
      ProjectInventoryEntry.SETFILTER("Purch. Detail No.", '<>%1', '');
      ProjectInventoryEntry.FILTERGROUP(0);
      ProjectInventoryEntry.SETFILTER("Item Composition", ProjectInventoryDelivery."Item Composition");
      ProjectInventoryEntry."Item Composition" := "Item Composition";
      IF PAGE.RUNMODAL(PAGE::"Project Inventory List", ProjectInventoryEntry) = ACTION::LookupOK THEN BEGIN
        Text := ProjectInventoryEntry."Purch. Detail No.";
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE ShowPurchaseOrder@1100529004();
    VAR
      ProjectInventEntry@1100529001 : Record 11012670;
    BEGIN
      ProjectInventEntry."Project No." := "Project No.";
      ProjectInventEntry."Item Composition" := "Item Composition";
      ProjectInventEntry.Manufacturer := Manufacturer;
      ProjectInventEntry."Vendor (Trade Item)" := "Vendor (Trade Item)";
      ProjectInventEntry."Location Code" := "Location Code";
      ProjectInventEntry."Bin Code" := "Bin Code";
      ProjectInventEntry."Shelf No." := "Shelf No.";
      ProjectInventEntry."Unit of Measure Code" := "Unit of Measure Code";
      ProjectInventEntry.Element := Element;
      ProjectInventEntry."Assembly Yard Number Object" := "Assembly Yard Number Object";
      ProjectInventEntry.ShowPurchaseOrderOfInventoryLine();
    END;

    BEGIN
    {
      4PS01 HBK 06-05-2010 Added field Element
    }
    END.
  }
}

