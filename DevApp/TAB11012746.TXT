OBJECT Table 11012746 Document Properties
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    DataCaptionFields=No.,Description;
    OnInsert=VAR
               UserSetup@1100528700 : Record 91;
               RID@1100409001 : RecordID;
             BEGIN
               IF "No." = '' THEN BEGIN
                 ContactSetup.GET;
                 IF "External Document" THEN BEGIN
                   ContactSetup.TESTFIELD("External Document Nos.");
                   NoSeriesMgt.InitSeries(ContactSetup."External Document Nos.",xRec."No. Series",0D,"No.","No. Series");
                 END ELSE BEGIN
                   ContactSetup.TESTFIELD("Document Nos.");
                   NoSeriesMgt.InitSeries(ContactSetup."Document Nos.",xRec."No. Series",0D,"No.","No. Series");
                 END;
               END;
               "Creation Date" := TODAY;
               "Creation Time" := TIME;
               "User ID" := USERID;
               "Internal Company" := COMPANYNAME;

               IF ("External Document") AND (Status = Rec.Status::" ") THEN
                 VALIDATE(Status, Status::Concept);

               IF NOT "External Document" THEN BEGIN
                 IF UserSetup.GET(USERID) THEN
                   VALIDATE(Sender, UserSetup."Employee No.");
               END;

               "SharePoint Status" := "SharePoint Status"::New;

               // T000916.sn
               FILTERGROUP(2);
               IF GETFILTER("RID Filter") <> '''''' THEN BEGIN
                 IF EVALUATE(RID, GETFILTER("RID Filter")) THEN BEGIN
                   IF GETFILTER("Department Code Filter") <> '''''' THEN
                     "Department Code" := GETFILTER("Department Code Filter");
                   CreateDocumentLink(RID);
                 END;
               END;
               FILTERGROUP(0);
               // T000916.en

               FillReference;    //**4PS07.n

               IF "Department Code" = '' THEN
                 DPA_OnInsert;

               FillModificationData;

               ProjectSiteMgt.LogDocumentProperties(1, Rec); //**4PS.n
             END;

    OnModify=BEGIN
               IF ("SharePoint Status" = "SharePoint Status"::Updated) AND (NOT "External Document") THEN
                 "SharePoint Status" := "SharePoint Status"::Modified;

               FillModificationData;

               UpdateProjectPortal;
               ProjectSiteMgt.LogDocumentProperties(2, Rec); //**4PS.n
             END;

    OnDelete=VAR
               lvExtension@1100525001 : Text[30];
               DocumentLinkMgt@1100525002 : Codeunit 11012401;
               DocumentRelation@1210190000 : Record 11012407;
               CommentLine@1210190001 : Record 97;
               DocumentVersions@1100525000 : Record 11229809;
               InstallationMgt@1100525003 : Codeunit 11012268;
             BEGIN
               IF ("Document Sharepoint ID" <> 0) AND ("Final Printed") THEN
                 ERROR(Text016);

               IF (File <> '') AND NOT("External Document") THEN BEGIN
                 IF WordAutomation.ExistingFileName(File, TRUE, FALSE, lvExtension) THEN BEGIN
                   IF NOT FileMgt.DeleteClientFile4PS(File + lvExtension, FALSE) THEN
                     MESSAGE(Text001, File + lvExtension);
                 END;
               END;

               DocumentLinkMgt.DeleteDocumentLink(Rec);

               DocumentRelation.SETRANGE("Related Document No.", "No.");
               DocumentRelation.DELETEALL(TRUE);

               DocumentRelation.SETRANGE("Related Document No.");
               DocumentRelation.SETRANGE("Document Type", DocumentRelation."Document Type"::Document);
               DocumentRelation.SETRANGE("No.", "No."); //mg.c, 26-04-11
               DocumentRelation.DELETEALL(TRUE);

               //mg.sn, 12-04-11
               CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::"Document Properties");
               CommentLine.SETRANGE("No.", "No.");
               CommentLine.DELETEALL(TRUE);
               //mg.sn, 12-04-11

               //kzwerver, 131112, sn
               IF (NOT InstallationMgt.NoLicensePermissionForTableData(DATABASE::"Document Versions (PPT)")) THEN BEGIN
                 DocumentVersions.SETRANGE("Document No.", "No.");
                 DocumentVersions.DELETEALL(TRUE);
               END;
               //kzwerver, 131112, en

               ProjectSiteMgt.LogDocumentProperties(3, Rec); //**4PS.n
             END;

    OnRename=BEGIN
               FillModificationData;
             END;

    CaptionML=ENU=Document Properties;
    LookupPageID=Page11012407;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                //IF "Person Name 2" <> xRec."Person Name 2" THEN BEGIN  // **4PS MVOS 28157.o
                                                                IF "No." <> xRec."No." THEN BEGIN  // **4PS MVOS 28157.n
                                                                  ContactSetup.GET;
                                                                  NoSeriesMgt.TestManual(ContactSetup."Document Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                                FillReference;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Document Group      ;Code10        ;TableRelation="Document Group";
                                                   OnValidate=BEGIN
                                                                IF ("Document Group" <> xRec."Document Group") AND
                                                                   (xRec."Document Group" <> '') THEN BEGIN
                                                                  "Document Template" := '';
                                                                  "Document Type" := '';
                                                                END;

                                                                CALCFIELDS("Description Document Group");
                                                                CALCFIELDS("Description Document Template");
                                                                CALCFIELDS("Document Type Description");
                                                              END;

                                                   CaptionML=ENU=Document Group }
    { 3   ;   ;Document Template   ;Code20        ;TableRelation="Document Template"."Template Code" WHERE (Document Group=FIELD(Document Group));
                                                   OnValidate=VAR
                                                                DocumentTemplate@1100525000 : Record 11012401;
                                                                DocumentMgt@1100485000 : Codeunit 11012406;
                                                                DocumentLinkMgt@1199198000 : Codeunit 11012401;
                                                              BEGIN
                                                                IF "Document Template" <> '' THEN BEGIN
                                                                  DocumentMgt.CheckUserPermission("Document Group", "Document Template");  //**4PS05.n
                                                                  DocumentTemplate.GET("Document Group","Document Template");
                                                                  IF (CurrFieldNo = FIELDNO("Document Template")) THEN
                                                                    DocumentTemplate.TESTFIELD(Type, DocumentTemplate.Type::Miscellaneous);
                                                                  IF xRec."Document Template" <> "Document Template" THEN //mg.c, 05-07-11: M28016
                                                                    VALIDATE("Document Type", DocumentTemplate."Document Type");
                                                                  IF DocumentTemplate."Secured Document" = DocumentTemplate."Secured Document"::Always THEN
                                                                    Secure := TRUE;
                                                                END;
                                                                CALCFIELDS("Description Document Template");

                                                                DocumentLinkMgt.FillDefaultDocumentLink(Rec, FALSE); // DocMgt
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupDocumentTemplate(FALSE);
                                                            END;

                                                   CaptionML=ENU=Document Template }
    { 4   ;   ;Creation Date       ;Date          ;CaptionML=ENU=Creation Date }
    { 5   ;   ;Creation Time       ;Time          ;CaptionML=ENU=Creation Time }
    { 6   ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=User ID }
    { 8   ;   ;Document No.        ;Code20        ;OnValidate=BEGIN
                                                                FillReference;
                                                              END;

                                                   CaptionML=ENU=Document No. }
    { 9   ;   ;File                ;Text250       ;OnValidate=VAR
                                                                RegExpManagement@1100528600 : Codeunit 11012262;
                                                              BEGIN
                                                                IF RegExpManagement.RegExpFindMatches(File, '\.([^\.]*$)') THEN
                                                                  IF RegExpManagement.GetSubMatchCountFirstMatch > 0 THEN
                                                                    VALIDATE("File Extension", LOWERCASE(RegExpManagement.GetSubMatchFirstMatch(0)));
                                                              END;

                                                   CaptionML=ENU=File }
    { 10  ;   ;Version             ;Integer       ;CaptionML=ENU=Version }
    { 11  ;   ;Contact No.         ;Code20        ;TableRelation=Contact WHERE (Person No.=FILTER(''));
                                                   OnValidate=BEGIN
                                                                IF (NOT IsPPTDocumentChangeAllowed) THEN
                                                                  ERROR(Text025);

                                                                IF Contact.GET("Contact No.") THEN BEGIN
                                                                  IF Contact.IsContactPerson THEN
                                                                     ERROR(Text008, Contact."Company No.", FIELDCAPTION("Contact Person No."));

                                                                  IF (NOT "External Document") THEN
                                                                    Contact.TESTFIELD(Blocked, FALSE);

                                                                  "Contact Name" := Contact.Name;
                                                                  "Contact Name 2" := Contact."Name 2";
                                                                  IF File = '' THEN
                                                                    VALIDATE("Document Group", Contact."Document Group");
                                                                END;
                                                                IF "Contact No." <> xRec."Contact No." THEN BEGIN
                                                                  IF "Contact No." = '' THEN BEGIN
                                                                    "Contact Name" := '';
                                                                    "Contact Name 2" := '';
                                                                  END;
                                                                  IF xRec."Contact No." <> '' THEN // T001106.n
                                                                    VALIDATE("Contact Person No.", '');
                                                                END;

                                                                CopyPostAddress();

                                                                CopySalutation("Contact No.");
                                                              END;

                                                   CaptionML=ENU=Contact No. }
    { 12  ;   ;Doc. Action         ;Code50        ;CaptionML=ENU=Action }
    { 13  ;   ;Contact Person No.  ;Code20        ;TableRelation=Contact.No. WHERE (Type=CONST(Person),
                                                                                    Company No.=FIELD(Contact No.));
                                                   OnValidate=BEGIN
                                                                IF (NOT IsPPTDocumentChangeAllowed) THEN
                                                                  ERROR(Text025);

                                                                "Contact Person Name" := '';
                                                                "Contact Person Name 2" := '';

                                                                IF "Contact Person No." = '' THEN
                                                                  EXIT;

                                                                IF Contact.GET("Contact Person No.") THEN BEGIN
                                                                  IF (NOT "External Document") THEN
                                                                    Contact.TESTFIELD(Blocked, FALSE);
                                                                  "Contact Person Name" := Contact.Name;
                                                                  "Contact Person Name 2" := Contact."Name 2";
                                                                  IF (Contact."Company No." = '') AND (File = '') THEN
                                                                    VALIDATE("Document Group", Contact."Document Group");

                                                                  CopyPostAddress();

                                                                  IF Contact."Salutation Code" <> '' THEN
                                                                    CopySalutation("Contact Person No.");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Contact Person No. }
    { 14  ;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 15  ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 16  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code }
    { 17  ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City }
    { 18  ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 19  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region Code }
    { 20  ;   ;Template            ;Text30        ;CaptionML=ENU=Template }
    { 21  ;   ;Subject             ;Text100       ;CaptionML=ENU=Subject }
    { 22  ;   ;Confidential        ;Boolean       ;CaptionML=ENU=Confidential }
    { 23  ;   ;Internal Company    ;Text50        ;TableRelation=Company;
                                                   CaptionML=ENU=Company }
    { 24  ;   ;Sender              ;Code20        ;TableRelation=Employee.No.;
                                                   OnValidate=BEGIN
                                                                FillEditor;  //**4PS02
                                                              END;

                                                   CaptionML=ENU=Sender }
    { 25  ;   ;Editor              ;Code20        ;TableRelation=Employee.No.;
                                                   OnValidate=BEGIN
                                                                FillReference;
                                                              END;

                                                   CaptionML=ENU=Editor }
    { 26  ;   ;Contact Name        ;Text50        ;CaptionML=ENU=Contact Name }
    { 27  ;   ;Contact Person Name ;Text50        ;CaptionML=ENU=Contact Person Name }
    { 28  ;   ;Description Document Group;Text50  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Document Group".Description WHERE (Code=FIELD(Document Group)));
                                                   CaptionML=ENU=Description Document Group;
                                                   Editable=No }
    { 29  ;   ;Description Document Template;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Document Template".Description WHERE (Document Group=FIELD(Document Group),
                                                                                                             Template Code=FIELD(Document Template)));
                                                   CaptionML=ENU=Description Document Template;
                                                   Editable=No }
    { 30  ;   ;Final Printed       ;Boolean       ;OnValidate=BEGIN
                                                                IF "Final Printed" = TRUE THEN
                                                                  Status := Status::Definite;

                                                                IF xRec."Final Printed" AND (NOT "Final Printed") THEN BEGIN
                                                                  ContactSetup.GET;
                                                                  IF ContactSetup."Documentation System" =ContactSetup."Documentation System"::Sharepoint THEN
                                                                    ERROR(Text017);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Final Printed }
    { 31  ;   ;Final Printed Date  ;Date          ;CaptionML=ENU=Final Printed Date }
    { 32  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 33  ;   ;Reference           ;Text80        ;CaptionML=ENU=Reference }
    { 34  ;   ;Salutation (Formal) ;Text100       ;CaptionML=ENU=Salutation (Formal) }
    { 35  ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 36  ;   ;Fax No.             ;Text30        ;CaptionML=ENU=Fax No. }
    { 37  ;   ;Phone No. 2         ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. 2 }
    { 38  ;   ;Mobile Phone No.    ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Mobile Phone No. }
    { 39  ;   ;Contact Name 2      ;Text50        ;CaptionML=ENU=Contact Name 2 }
    { 40  ;   ;Contact Person Name 2;Text50       ;CaptionML=ENU=Contact Person Name 2 }
    { 41  ;   ;External Document   ;Boolean       ;CaptionML=ENU=External Document }
    { 42  ;   ;Scale               ;Text20        ;CaptionML=ENU=Scale }
    { 43  ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=" ,Concept,Provisional,Definite,Expired";
                                                   OptionString=[ ,Concept,Provisional,Definite,Expired] }
    { 44  ;   ;Modification Date   ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Max("Document Modification Date".Date WHERE (Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Modification Date;
                                                   Editable=No }
    { 45  ;   ;Expired On          ;Date          ;CaptionML=ENU=Expired On }
    { 46  ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date }
    { 47  ;   ;Addressed To        ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Addressed To }
    { 48  ;   ;Addressed To Name   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Addressed To)));
                                                   CaptionML=ENU=Addressed To Name;
                                                   Editable=No }
    { 49  ;   ;Document Type       ;Code10        ;TableRelation=IF (Project Portal Subsite=FILTER(<>'')) "Subsite-Doc Type (PPT)"."Document Type" WHERE (Project Portal Subsite=FIELD(Project Portal Subsite))
                                                                 ELSE "Document Type";
                                                   OnValidate=VAR
                                                                DocumentLinkMgt@1199198000 : Codeunit 11012401;
                                                                FileMgt@1100525000 : Codeunit 419;
                                                              BEGIN
                                                                IF NOT DocumentType.GET("Document Type") THEN
                                                                  DocumentType.INIT;
                                                                IF "External Document" AND (File <> '') THEN BEGIN
                                                                  ContactSetup.GET;
                                                                  ContactSetup.TESTFIELD("Default Ext. Doc. Directory");

                                                                  IF xRec."Document Type" <> '' THEN BEGIN
                                                                    IF DocumentType2.GET(xRec."Document Type") THEN BEGIN
                                                                      IF DocumentType2."Storage Directory Attachment" <> '' THEN
                                                                        SourceDirectory := LOWERCASE(DocumentType2."Storage Directory Attachment")
                                                                      ELSE
                                                                        SourceDirectory := LOWERCASE(ContactSetup."Default Ext. Doc. Directory");
                                                                    END;
                                                                  END ELSE
                                                                    SourceDirectory := LOWERCASE(ContactSetup."Default Ext. Doc. Directory");

                                                                  IF "Document Type" <> '' THEN BEGIN
                                                                    IF DocumentType."Storage Directory Attachment" <> '' THEN
                                                                      TargetDirectory := LOWERCASE(DocumentType."Storage Directory Attachment")
                                                                    ELSE
                                                                      TargetDirectory := LOWERCASE(ContactSetup."Default Ext. Doc. Directory");
                                                                  END ELSE
                                                                    TargetDirectory := LOWERCASE(ContactSetup."Default Ext. Doc. Directory");

                                                                  IF TargetDirectory <> SourceDirectory THEN
                                                                    IF FileMgt.ClientFileExists(TargetDirectory + File) THEN
                                                                      ERROR(STRSUBSTNO(Text013, TargetDirectory + File))
                                                                    ELSE
                                                                      ExtDocManagement.MoveCopyFile(TargetDirectory,File, SourceDirectory, File, FALSE);
                                                                END;

                                                                IF DocumentType."Available in Field Service" AND
                                                                   (File <> '')
                                                                THEN
                                                                  "Available for Field Service" := TRUE;

                                                                DocumentLinkMgt.FillDefaultDocumentLink(Rec, TRUE); // DocMgt

                                                                CALCFIELDS("Document Type Description");
                                                              END;

                                                   CaptionML=ENU=Document Type }
    { 50  ;   ;Description         ;Text50        ;CaptionML=ENU=Description;
                                                   NotBlank=Yes }
    { 51  ;   ;Original To         ;Code20        ;TableRelation=Employee.No.;
                                                   CaptionML=ENU=Original To }
    { 52  ;   ;Intended For        ;Text100       ;CaptionML=ENU=Intended For }
    { 53  ;   ;Salutation (Informal);Text100      ;CaptionML=ENU=Salutation (Informal) }
    { 54  ;   ;Interaction Entry No.;Integer      ;TableRelation="Interaction Log Entry"."Entry No.";
                                                   CaptionML=ENU=Interaction Entry No.;
                                                   Editable=No }
    { 55  ;   ;Salutation 2 (Formal);Text100      ;CaptionML=ENU=Salutation (Formal) Second Buyer }
    { 56  ;   ;Salutation 2 (Informal);Text100    ;CaptionML=ENU=Salutation (Informal) Second Buyer }
    { 57  ;   ;Secure              ;Boolean       ;CaptionML=ENU=Secure }
    { 58  ;   ;Intended for 2      ;Text100       ;CaptionML=ENU=Intended for 2 }
    { 59  ;   ;Web link            ;Text250       ;OnValidate=BEGIN
                                                                IF (NOT IsPPTDocumentChangeAllowed) THEN
                                                                  ERROR(Text025);
                                                              END;

                                                   ExtendedDatatype=URL;
                                                   CaptionML=ENU=Web Link;
                                                   Description=jhoek.090511, C-028133 }
    { 60  ;   ;Name Sender         ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Sender)));
                                                   CaptionML=ENU=Name Sender;
                                                   Editable=No }
    { 61  ;   ;Name Editor         ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Editor)));
                                                   CaptionML=ENU=Name Editor;
                                                   Editable=No }
    { 62  ;   ;Department Code     ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Department Code }
    { 63  ;   ;Handled By          ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Handled By }
    { 64  ;   ;Name Handled By     ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Handled By)));
                                                   CaptionML=ENU=Name Handled By;
                                                   Editable=No }
    { 65  ;   ;React Before        ;Date          ;CaptionML=ENU=React Before }
    { 66  ;   ;SharePoint Status   ;Option        ;CaptionML=ENU=SharePoint Status;
                                                   OptionCaptionML=ENU=New,Modified,Updated;
                                                   OptionString=New,Modified,Updated;
                                                   Editable=Yes }
    { 67  ;   ;Archive Location    ;Code20        ;CaptionML=ENU=Archive Location }
    { 68  ;   ;Modified            ;DateTime      ;CaptionML=ENU=Modified }
    { 69  ;   ;Modified By         ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserCode@1210190001 : Code[50];
                                                              LoginManagement@1210190000 : Codeunit 418;
                                                            BEGIN
                                                              UserCode := "Modified By";
                                                              LoginManagement.LookupUserID(UserCode);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Modified By }
    { 70  ;   ;Document Type Description;Text50   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Document Type".Description WHERE (Type=FIELD(Document Type)));
                                                   CaptionML=ENU=Document Type Description }
    { 71  ;   ;Sender Function     ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Job Title" WHERE (No.=FIELD(Sender)));
                                                   CaptionML=ENU=Sender Function }
    { 72  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Document Properties),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 75  ;   ;Showing Result Document Filter;Boolean;
                                                   FieldClass=FlowFilter;
                                                   CaptionML=ENU=Showing Result Document Filter }
    { 76  ;   ;From Filter Form    ;Boolean       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=From Filter Form }
    { 147 ;   ;nog verwijderen     ;Option        ;CaptionML=ENU=Remove OLD;
                                                   OptionString=1,2,3,4,5;
                                                   Description=MUST BE DELETED }
    { 150 ;   ;Link Field 1        ;Text50        ;CaptionML=ENU=Link Field 1;
                                                   Editable=No }
    { 160 ;   ;Link Field 2        ;Text50        ;CaptionML=ENU=Link Field 2;
                                                   Editable=No }
    { 170 ;   ;Link Field 3        ;Text50        ;CaptionML=ENU=Link Field 3;
                                                   Editable=No }
    { 180 ;   ;Link Field 4        ;Text50        ;CaptionML=ENU=Link Field 4;
                                                   Editable=No }
    { 190 ;   ;Link Field 5        ;Text50        ;CaptionML=ENU=Link Field 5;
                                                   Editable=No }
    { 200 ;   ;E-Mail Sent On      ;DateTime      ;CaptionML=ENU=E-Mail Sent On;
                                                   Editable=No }
    { 210 ;   ;E-Mail Sent By      ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserCode@1210190001 : Code[50];
                                                              LoginManagement@1210190000 : Codeunit 418;
                                                            BEGIN
                                                              UserCode := "E-Mail Sent By";
                                                              LoginManagement.LookupUserID(UserCode);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=E-Mail Sent By;
                                                   Editable=No }
    { 220 ;   ;E-Mail Sent To      ;Text30        ;CaptionML=ENU=E-Mail Sent To;
                                                   Editable=No }
    { 300 ;   ;Publish on Service Portal;Boolean  ;CaptionML=ENU=Publish on Service Portal }
    { 310 ;   ;Publish on Subcont.Portal;Boolean  ;CaptionML=ENU=Publish on Subcontractor Portal }
    { 320 ;   ;Available for Field Service;Boolean;OnValidate=BEGIN
                                                                IF "Available for Field Service" THEN
                                                                  TESTFIELD(File);
                                                              END;

                                                   CaptionML=ENU=Available in Field Service }
    { 330 ;   ;Created by Field Service;Boolean   ;CaptionML=ENU=Created by Field Service;
                                                   Editable=No }
    { 400 ;   ;RID Filter          ;Text250       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=RID Filter;
                                                   Description=used in RTC Pages like 11012407/11012406 }
    { 410 ;   ;Department Code Filter;Code20      ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Department Code Filter;
                                                   Description=used in RTC Pages like 11012407/11012406 }
    { 500 ;   ;D3 Document Type    ;Text30        ;CaptionML=ENU=D3 Document Type }
    { 510 ;   ;D3 Document ID      ;Text30        ;CaptionML=ENU=D3 Document ID }
    { 520 ;   ;File Extension      ;Text250       ;CaptionML=ENU=File Extension }
    { 550 ;   ;Sent to Dispatch on ;DateTime      ;CaptionML=ENU=Sent to Dispatch on;
                                                   Editable=No }
    { 560 ;   ;Send to Dispatch    ;Boolean       ;OnValidate=VAR
                                                                DispatchInterface@1100528600 : Codeunit 11071685;
                                                              BEGIN
                                                                IF "Send to Dispatch" THEN BEGIN
                                                                  DispatchInterface.TestDispatchWoonActive;
                                                                  TESTFIELD("External Document");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Send to Dispatch }
    { 570 ;   ;Dispatch Attachment Type;Code20    ;TableRelation="Dispatch Attachment Type";
                                                   OnValidate=VAR
                                                                DispatchInterface@1100528600 : Codeunit 11071685;
                                                              BEGIN
                                                                IF "Dispatch Attachment Type" <> '' THEN BEGIN
                                                                  DispatchInterface.TestDispatchWoonActive;
                                                                  TESTFIELD("External Document");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Dispatch Attachment Type }
    { 11012874;;SharePoint Phase   ;Option        ;CaptionML=ENU=SharePoint Phase;
                                                   OptionCaptionML=ENU=" ,Development,Design and Preparation,Production";
                                                   OptionString=[ ,Development,Design and Preparation,Production] }
    { 11012875;;Document Category  ;Code5         ;TableRelation="Document Category";
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Document Category Description")
                                                              END;

                                                   CaptionML=ENU=Document Category }
    { 11012876;;Version External Doc.;Text10      ;CaptionML=ENU=Document Version }
    { 11012877;;Document Sharepoint ID;Integer    ;CaptionML=ENU=Document Sharepoint ID }
    { 11012878;;Document Category Description;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Document Category".Description WHERE (Code=FIELD(Document Category)));
                                                   CaptionML=ENU=Document Category Description;
                                                   Editable=No }
    { 11012879;;OLD Sharepoint Library;Code10     ;TableRelation="SharePoint Library" WHERE (OLD Used in Extended SP Portal=CONST(Yes));
                                                   CaptionML=ENU=Sharepoint Library;
                                                   Editable=No }
    { 11012880;;OLD Sharepoint Library Descr;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("SharePoint Library".Name WHERE (Code=FIELD(OLD Sharepoint Library)));
                                                   CaptionML=ENU=Sharepoint Library Description;
                                                   Editable=No }
    { 11012890;;Project Element    ;Code20        ;OnValidate=VAR
                                                                ProjectNo@1100409000 : Code[20];
                                                                BaseElement@1100409001 : Record 11012060;
                                                                ProjectElement@1100409002 : Record 11012010;
                                                              BEGIN
                                                                //kzwerver.c #C016690
                                                                IF ("Project Element" <> '') THEN BEGIN
                                                                  ProjectNo := GetFirstProjectNo("No.");
                                                                  IF (ProjectNo <> '') THEN
                                                                    ProjectElement.GET(ProjectNo, "Project Element")
                                                                  ELSE
                                                                    BaseElement.GET("Project Element");
                                                                END;
                                                                CALCFIELDS("Project Element Description");
                                                              END;

                                                   OnLookup=VAR
                                                              BaseElement@1100409000 : Record 11012060;
                                                              ProjectElement@1100409002 : Record 11012010;
                                                              Elements@1100409001 : Page 11012118;
                                                              ProjectElements@1100409003 : Page 11012028;
                                                              ProjectNo@1100409004 : Code[20];
                                                            BEGIN
                                                              //kzwerver.c #C016690
                                                              ProjectNo := GetFirstProjectNo("No.");
                                                              IF (ProjectNo <> '') THEN BEGIN
                                                                ProjectElement.SETRANGE("Project No.", ProjectNo);
                                                                ProjectElement."Project No." := ProjectNo;
                                                                ProjectElement.Element := "Project Element";
                                                                ProjectElements.LOOKUPMODE := TRUE;
                                                                ProjectElements.SETTABLEVIEW(ProjectElement);
                                                                ProjectElements.SETRECORD(ProjectElement);
                                                                IF (ProjectElements.RUNMODAL = ACTION::LookupOK) THEN
                                                                  ProjectElements.GETRECORD(ProjectElement);
                                                                VALIDATE("Project Element", ProjectElement.Element);
                                                              END ELSE BEGIN
                                                                BaseElement.Code := "Project Element";
                                                                Elements.LOOKUPMODE := TRUE;
                                                                Elements.SETRECORD(BaseElement);
                                                                IF (Elements.RUNMODAL = ACTION::LookupOK) THEN
                                                                  Elements.GETRECORD(BaseElement);
                                                                VALIDATE("Project Element", BaseElement.Code);
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Project Element }
    { 11012891;;Project Element Description;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Base Element".Description WHERE (Code=FIELD(Project Element)));
                                                   CaptionML=ENU=Project Element Description;
                                                   Editable=No }
    { 11012900;;Project Portal Subsite;Code20     ;TableRelation="Project Portal Subsite".Code WHERE (Quote Request Subsite=CONST(No));
                                                   OnValidate=BEGIN
                                                                IF (NOT IsPPTDocumentChangeAllowed) THEN
                                                                  ERROR(Text025);
                                                              END;

                                                   CaptionML=ENU=Document Portal Subsite }
    { 11012901;;Project Portal Subsite Descr;Text30;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Portal Subsite".Description WHERE (Code=FIELD(Project Portal Subsite)));
                                                   CaptionML=ENU=Document Portal Subsite Description;
                                                   Editable=No }
    { 11012910;;Private Company Document;Boolean  ;OnValidate=BEGIN
                                                                IF (NOT IsPPTDocumentChangeAllowed) THEN
                                                                  ERROR(Text025);
                                                              END;

                                                   CaptionML=ENU=Private Company Document }
    { 11012920;;Project Portal Publish Date;DateTime;
                                                   CaptionML=ENU=Document Portal Publish Date;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Document Group,Document Template,Contact No.,Doc. Action,Version }
    {    ;Document Group,Document Template,Contact No.,Document No. }
    {    ;Document No.,Creation Date,Creation Time }
    {    ;Contact No.,Contact Person No.           }
    {    ;Document Sharepoint ID                   }
    {    ;External Document                        }
    {    ;Document Type,Document No.               }
    {    ;Document Type,Contact No.                }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ContactSetup@1100525000 : Record 5079;
      Contact@1100525001 : Record 5050;
      Text000@1100409000 : TextConst 'ENU=Table%1 (%2) is not implemented for this Function.\Please try this from the Project Card.';
      Text001@1100525022 : TextConst 'ENU=Word Document %1 not found';
      Text004@1199198000 : TextConst 'ENU=Document %1 present for %2';
      Text008@1100525002 : TextConst 'ENU=Enter contact %1 here, and enter contact person in field %2.';
      PostCode@1100525003 : Record 225;
      Employee@1100525005 : Record 5200;
      DocumentType@1100525011 : Record 11012405;
      DocumentType2@1100525012 : Record 11012405;
      NoSeriesMgt@1100525010 : Codeunit 396;
      ExtDocManagement@1100525016 : Codeunit 11012403;
      WordAutomation@1100525017 : Codeunit 11012400;
      FileMgt@1100525500 : Codeunit 419;
      Text009@1199198002 : TextConst 'ENU=Unable to change relation because filename document is getting too long. Document %1';
      Text013@1100525015 : TextConst 'ENU="File %1 exists, type change not allowed "';
      Text014@1199198004 : TextConst 'ENU=Path %1 does not exist';
      Text015@1199198005 : TextConst 'ENU=Folder %1 is not empty, cannot remove it.';
      Text016@1100525021 : TextConst 'ENU=Cannot delete Sharepoint Document.';
      Text017@1100525009 : TextConst 'ENU=Cannot change Sharepoint Document.';
      TargetDirectory@1100525014 : Text[250];
      SourceDirectory@1100525013 : Text[250];
      Text020@1199198006 : TextConst 'ENU=%1 link(s) have no document link!\Are you sure you want to exit?';
      DocLink@1199198001 : Record 11012747;
      DPA_Management@1100525026 : Codeunit 11012783;
      Text023@1100525027 : TextConst 'ENU=%1 link(s) of document %2 have no document link!';
      DocumentFilters@1100528700 : Codeunit 11012432;
      Text024@1210190000 : TextConst 'ENU=File %1 is in use.';
      ProjectSiteMgt@1100528300 : Codeunit 11012282;
      Text025@1100525006 : TextConst 'ENU=Document already in Project Portal. Change not allowed.';

    PROCEDURE AssistEdit@5(OldDoc@11012000 : Record 11012746) : Boolean;
    VAR
      DocumentProperties@1100525000 : Record 11012746;
    BEGIN
      WITH DocumentProperties DO BEGIN
        DocumentProperties := Rec;
        ContactSetup.GET;
        //Document Nos.
        CASE DocumentProperties."External Document" OF
          TRUE:
            BEGIN
              ContactSetup.TESTFIELD("External Document Nos.");
              IF NoSeriesMgt.SelectSeries(ContactSetup."External Document Nos.", OldDoc."No. Series","No. Series") THEN BEGIN
                ContactSetup.GET;
                ContactSetup.TESTFIELD("External Document Nos.");     //Document Nos.
                NoSeriesMgt.SetSeries("No.");
                Rec := DocumentProperties;
                EXIT(TRUE);
              END;
            END;
          FALSE:
            BEGIN
              ContactSetup.TESTFIELD("Document Nos.");
              IF NoSeriesMgt.SelectSeries(ContactSetup."Document Nos.", OldDoc."No. Series","No. Series") THEN BEGIN
                ContactSetup.GET;
                ContactSetup.TESTFIELD("Document Nos.");     //Document Nos.
                NoSeriesMgt.SetSeries("No.");
                Rec := DocumentProperties;
                EXIT(TRUE);
              END;
            END;
        END;
      END;
    END;

    PROCEDURE CheckDefaultDocumentLink@1199198000(DocumentProperties@1199198000 : Record 11012746;OnlyWarn@1100525000 : Boolean) : Boolean;
    VAR
      DocumentLink@1199198001 : Record 11012747;
      DefaultDocumentLink@1199198002 : Record 11012749;
      i@1199198003 : Integer;
      IsDefault@1100528700 : Boolean;
    BEGIN
      i := 0;

      DocumentLink.SETRANGE("Document No.", DocumentProperties."No.");
      DocumentLink.SETRANGE("Internal Company", DocumentProperties."Internal Company");
      IF DocumentLink.FINDSET THEN BEGIN
        REPEAT
          IF FORMAT(DocumentLink."Record ID") = '' THEN BEGIN
            IsDefault := FALSE;
            IF DocumentProperties."Document Type" <> '' THEN BEGIN
              DefaultDocumentLink.RESET;
              DefaultDocumentLink.SETRANGE("Related To", DefaultDocumentLink."Related To"::"Document Type");
              DefaultDocumentLink.SETRANGE("Document Type", DocumentProperties."Document Type");
              DefaultDocumentLink.SETRANGE("Table No.", DocumentLink."Table No.");
              DefaultDocumentLink.SETRANGE("Filter Expression", DocumentLink."Filter Expression");
              IF DefaultDocumentLink.FINDFIRST THEN
                IsDefault := TRUE;
            END;
            IF (DocumentProperties."Document Template" <> '') AND (NOT IsDefault) THEN BEGIN
              DefaultDocumentLink.RESET;
              DefaultDocumentLink.SETRANGE("Related To", DefaultDocumentLink."Related To"::"Document Template");
              DefaultDocumentLink.SETRANGE("Document Group", DocumentProperties."Document Group");
              DefaultDocumentLink.SETRANGE("Template Code", DocumentProperties."Document Template");
              DefaultDocumentLink.SETRANGE("Table No.", DocumentLink."Table No.");
              DefaultDocumentLink.SETRANGE("Filter Expression", DocumentLink."Filter Expression");
              IF DefaultDocumentLink.FINDFIRST THEN
                IsDefault := TRUE;
            END;
            IF IsDefault THEN
              i := i + 1;
          END;
        UNTIL DocumentLink.NEXT = 0;
      END;

      IF i > 0 THEN
        IF OnlyWarn THEN BEGIN
          MESSAGE(Text023, i, DocumentProperties."No.");
        END ELSE BEGIN
          IF CONFIRM(STRSUBSTNO(Text020, i), TRUE) THEN
            EXIT(TRUE) // Close form
          ELSE
            EXIT(FALSE);
        END;
      EXIT(TRUE); // Close form or open next record
    END;

    PROCEDURE CopyAddress@1100525002();
    VAR
      TempAddressFrom@1100525000 : TEMPORARY Record 11125737;
      i@1100525007 : Integer;
      ActionResult@1100525001 : Action;
    BEGIN
      FOR i := 0 TO 7 DO
        GetAddress(i, TempAddressFrom);

      ActionResult := PAGE.RUNMODAL(0, TempAddressFrom);

      IF ActionResult = ACTION::LookupOK THEN BEGIN
        Address := TempAddressFrom.Address;
        "Address 2" := TempAddressFrom."Address 2";
        "Post Code" := TempAddressFrom."Post Code";
        City := TempAddressFrom.City;
        County := TempAddressFrom.County;
        "Country/Region Code" := TempAddressFrom."Country/Region Code";
        "Phone No." := TempAddressFrom."Phone No.";
        "Fax No." := TempAddressFrom."Fax No.";
        "Phone No. 2" := TempAddressFrom."Phone No. 2";
        "Mobile Phone No." := TempAddressFrom."Mobile Phone No.";

        MODIFY(TRUE);
      END;
    END;

    PROCEDURE CopyPostAddress@1210190001();
    BEGIN
      Address := Contact.Address;
      "Address 2" := Contact."Address 2";
      "Post Code" := Contact."Post Code";
      City := Contact.City;
      County := Contact.County;
      "Country/Region Code" := Contact."Country/Region Code";
      "Phone No." := Contact."Phone No.";
      "Fax No." := Contact."Fax No.";
      "Phone No. 2" := Contact."Phone No. 2";
      "Mobile Phone No." := Contact."Mobile Phone No.";
    END;

    PROCEDURE CopySalutation@1210190000(ContactNo@1100525000 : Code[20]);
    VAR
      lvSalutFormulaRec@1210190000 : Record 5069;
    BEGIN
      // Doc Mgt
      Contact.GET(ContactNo);

      //**4PS03.sn
      "Salutation (Formal)" :=
        Contact.GetSalutationSpecial(lvSalutFormulaRec."Salutation Type"::Formal, Contact."Language Code", FALSE);
      "Salutation (Informal)" :=
        Contact.GetSalutationSpecial(lvSalutFormulaRec."Salutation Type"::Informal, Contact."Language Code", FALSE);
      "Intended For" :=
        Contact.GetSalutationSpecial(lvSalutFormulaRec."Salutation Type"::"Intended For", Contact."Language Code", FALSE);
      "Intended for 2" :=
        Contact.GetSalutationSpecial(lvSalutFormulaRec."Salutation Type"::"Intended For 2", Contact."Language Code", FALSE);
      //**4PS03.en
    END;

    PROCEDURE FillReference@1210190017();
    VAR
      Employee@11012000 : Record 5200;
      InitSender@11012001 : Text[30];
      InitEditor@11012002 : Text[30];
      DocumentLinkMgt@1199198002 : Codeunit 11012401;
      DocumentDescription@1199198003 : Text[30];
    BEGIN
      IF "External Document" THEN
        EXIT;

      IF Employee.GET(Editor) THEN
        InitEditor := Employee."Name Abbreviation";

      IF Employee.GET(Sender) THEN
        InitSender := Employee."Name Abbreviation";

      ContactSetup.GET;
      IF ContactSetup."Custom Reference Format" = '' THEN BEGIN
        // Get source link
        DocumentDescription := DocumentLinkMgt.GetShortDescription(Rec);

        //IF CurrFieldNo IN [FIELDNO(Editor),FIELDNO(Sender)] THEN BEGIN                                //**4PS08.n
        IF (CurrFieldNo IN [FIELDNO(Editor),FIELDNO(Sender)]) OR (CurrFieldNo = 0) THEN BEGIN           //**4PS09.n
          Reference := DocumentDescription;

          IF InitSender <> '' THEN BEGIN
            IF Reference <> '' THEN
              Reference := Reference + '.';
            Reference := Reference + InitSender;
          END;
          IF InitEditor <> '' THEN BEGIN
            IF Reference <> '' THEN
              Reference := Reference + '.';
            Reference := Reference + InitEditor;
          END;
        END;
      END ELSE BEGIN
        CASE TRUE OF
          //((CurrFieldNo = FIELDNO("Document No.")) AND (STRPOS(ContactSetup."Custom Reference Format", '%1') <>0)),
          STRPOS(ContactSetup."Custom Reference Format", '%1') <> 0,
          ((CurrFieldNo = FIELDNO(Sender)) AND (STRPOS(ContactSetup."Custom Reference Format", '%2') <> 0)),
          ((CurrFieldNo = FIELDNO(Editor)) AND (STRPOS(ContactSetup."Custom Reference Format", '%3') <> 0)),
          //((CurrFieldNo = FIELDNO("Project No.")) AND (STRPOS(ContactSetup."Custom Reference Format", '%4') <>0)),
          STRPOS(ContactSetup."Custom Reference Format", '%4') <> 0,
          ((CurrFieldNo = FIELDNO("No.")) AND (STRPOS(ContactSetup."Custom Reference Format", '%5') <> 0)),
          (CurrFieldNo = 0):
            Reference := STRSUBSTNO(ContactSetup."Custom Reference Format",
                                    DocumentLinkMgt.GetShortDescription(Rec),
                                    UPPERCASE(InitSender),
                                    UPPERCASE(InitEditor),
                                    DocumentLinkMgt.GetProjectNo("No."),
                                    "No.");
        END;
      END;
    END;

    PROCEDURE FillEditor@4();
    VAR
      EmplRec@11012000 : Record 5200;
    BEGIN
      IF EmplRec.GET(Sender) THEN BEGIN
        IF EmplRec."Document Editor" <> '' THEN BEGIN
          VALIDATE(Editor,EmplRec."Document Editor")
        END ELSE BEGIN
          FillReference;
        END
      END ELSE BEGIN
        FillReference;
      END;
    END;

    PROCEDURE FillModificationData@1100485012();
    BEGIN
      Modified := CURRENTDATETIME;
      "Modified By" := USERID;
    END;

    PROCEDURE GetAddress@1100525003(AddressSource@1100525000 : 'Company Post Address,Company Visit Address,Person Post Address,Person Visit Address,Project Address,Project Location Address,Service Location Address,Order Address';VAR TempAddressFrom@1100525003 : Record 11125737);
    VAR
      DocumentLink@1100525006 : Record 11012747;
      Job@1100525009 : Record 11072003;
      ProjectLocation@1100525005 : Record 11012011;
      ServiceLocation@1100525008 : Record 11012801;
      ContBusRel@1100525002 : Record 5054;
      Vendor@1100525013 : Record 23;
      OrderAddress@1100525012 : Record 224;
      RID@1100525010 : RecordID;
      RecRef@1100525011 : RecordRef;
      LineNo@1100525004 : Integer;
    BEGIN
      IF TempAddressFrom.FINDLAST THEN
        LineNo := TempAddressFrom."Line No." + 1
      ELSE
        LineNo := 1;

      CASE AddressSource OF
        AddressSource::"Company Post Address":
          BEGIN
            IF Contact.GET("Contact No.") THEN BEGIN
              GetPostAddress(AddressSource, TempAddressFrom, LineNo);
              LineNo += 1;
              GetAltAddress(AddressSource, TempAddressFrom, LineNo);
            END;
          END;
        AddressSource::"Company Visit Address":
          BEGIN
            IF Contact.GET("Contact No.") THEN BEGIN
              GetVisitAddress(AddressSource, TempAddressFrom, LineNo);
              LineNo += 1;
              GetAltAddress(AddressSource, TempAddressFrom, LineNo);
            END;
          END;

        AddressSource::"Person Post Address":
          BEGIN
            IF Contact.GET("Contact Person No.") THEN BEGIN
              GetPostAddress(AddressSource, TempAddressFrom, LineNo);
              LineNo += 1;
              GetAltAddress(AddressSource, TempAddressFrom, LineNo);
            END;
          END;
        AddressSource::"Person Visit Address":
          BEGIN
            IF Contact.GET("Contact Person No.") THEN BEGIN
              GetVisitAddress(AddressSource, TempAddressFrom, LineNo);
              LineNo += 1;
              GetAltAddress(AddressSource, TempAddressFrom, LineNo);
            END;
          END;
        AddressSource::"Project Address":
          BEGIN
            DocumentLink.SETRANGE("Document No.", "No.");
            DocumentLink.SETRANGE("Table No.", DATABASE::Job);
            DocumentLink.SETRANGE("Internal Company", "Internal Company");
            IF DocumentLink.FINDSET THEN BEGIN
              REPEAT
                IF FORMAT(DocumentLink."Record ID") <> '' THEN BEGIN
                  RID := DocumentLink."Record ID";
                  RecRef := RID.GETRECORD();
                  RecRef.SETTABLE(Job);
                  Job.FIND('=');
                  TempAddressFrom.INIT;
                  TempAddressFrom."Line No." := LineNo;
                  TempAddressFrom."Address Source" := AddressSource;
                  TempAddressFrom."Code 1" := Job."No.";
                  TempAddressFrom."Code 2" := '';
                  TempAddressFrom.Address := Job.Address;
                  TempAddressFrom."Address 2" := Job."Address 2";
                  TempAddressFrom."Post Code" := Job."Post Code";
                  TempAddressFrom.City := Job.City;
                  TempAddressFrom.County := Job.County;
                  TempAddressFrom."Country/Region Code" := Job."Country/Region Code";
                  TempAddressFrom."Phone No." := Job."Phone No.";
                  TempAddressFrom."Fax No." := Job."Fax No.";
                  TempAddressFrom."Phone No. 2" := '';
                  TempAddressFrom."Mobile Phone No." := Job."Mobile Phone No.";
                  TempAddressFrom.INSERT;

                  LineNo += 1;

                  ProjectLocation.SETRANGE("Project No.", Job."No.");
                  IF ProjectLocation.FINDSET THEN BEGIN
                    REPEAT
                      TempAddressFrom.INIT;
                      TempAddressFrom."Line No." := LineNo;
                      TempAddressFrom."Address Source" := AddressSource::"Project Location Address";
                      TempAddressFrom."Code 1" := ProjectLocation."Project No.";
                      TempAddressFrom."Code 2" := ProjectLocation.Code;
                      TempAddressFrom.Address := ProjectLocation.Address;
                      TempAddressFrom."Address 2" := ProjectLocation."Address 2";
                      TempAddressFrom."Post Code" := ProjectLocation."Post Code";
                      TempAddressFrom.City := ProjectLocation.City;
                      TempAddressFrom.County := '';
                      TempAddressFrom."Country/Region Code" := ProjectLocation."Country/Region Code";
                      TempAddressFrom."Phone No." := ProjectLocation."Phone No.";
                      TempAddressFrom."Fax No." := ProjectLocation."Fax No.";
                      TempAddressFrom."Phone No. 2" := '';
                      TempAddressFrom."Mobile Phone No." := '';
                      TempAddressFrom.INSERT;

                      LineNo += 1;

                    UNTIL ProjectLocation.NEXT = 0;
                  END;
                END;
              UNTIL DocumentLink.NEXT = 0;
            END;
          END;
        AddressSource::"Service Location Address":
          BEGIN
            DocumentLink.SETRANGE("Document No.", "No.");
            DocumentLink.SETRANGE("Table No.", DATABASE::"Service Location");
            DocumentLink.SETRANGE("Internal Company", "Internal Company");
            IF DocumentLink.FINDSET THEN BEGIN
              REPEAT
                IF FORMAT(DocumentLink."Record ID") <> '' THEN BEGIN
                  RID := DocumentLink."Record ID";
                  RecRef := RID.GETRECORD();
                  RecRef.SETTABLE(ServiceLocation);
                  ServiceLocation.FIND('=');
                  TempAddressFrom.INIT;
                  TempAddressFrom."Line No." := LineNo;
                  TempAddressFrom."Address Source" := AddressSource;
                  TempAddressFrom."Code 1" := ServiceLocation."No.";
                  TempAddressFrom.Address := ServiceLocation.Address;
                  TempAddressFrom."Address 2" := ServiceLocation."Address 2";
                  TempAddressFrom."Post Code" := ServiceLocation."Post Code";
                  TempAddressFrom.City := ServiceLocation.City;
                  TempAddressFrom.County := ServiceLocation.County;
                  TempAddressFrom."Country/Region Code" := ServiceLocation."Country/Region Code";
                  TempAddressFrom."Phone No." := ServiceLocation."Phone No.";
                  TempAddressFrom."Fax No." := ServiceLocation."Fax No.";
                  TempAddressFrom."Phone No. 2" := ServiceLocation."Phone No. 2";
                  TempAddressFrom."Mobile Phone No." := ServiceLocation."Mobile Phone No.";

                  TempAddressFrom.INSERT;

                  LineNo += 1;
                END;
              UNTIL DocumentLink.NEXT = 0;
            END;
          END;
        AddressSource::"Order Address":
          BEGIN
            ContBusRel.SETRANGE("Contact No.","Contact No.");
            ContBusRel.SETFILTER("No.",'<>''''');
            ContBusRel.SETRANGE("Link to Table", ContBusRel."Link to Table"::Vendor);
            IF ContBusRel.FINDFIRST THEN BEGIN
              IF Vendor.GET(ContBusRel."No.") THEN BEGIN
                OrderAddress.SETRANGE("Vendor No.", Vendor."No.");
                IF OrderAddress.FINDSET THEN BEGIN
                  REPEAT
                    TempAddressFrom.INIT;
                    TempAddressFrom."Line No." := LineNo;
                    TempAddressFrom."Address Source" := AddressSource;
                    TempAddressFrom."Code 1" := OrderAddress."Vendor No.";
                    TempAddressFrom."Code 2" := OrderAddress.Code;
                    TempAddressFrom.Address := OrderAddress.Address;
                    TempAddressFrom."Address 2" := OrderAddress."Address 2";
                    TempAddressFrom."Post Code" := OrderAddress."Post Code";
                    TempAddressFrom.City := OrderAddress.City;
                    TempAddressFrom.County := OrderAddress.County;
                    TempAddressFrom."Country/Region Code" := OrderAddress."Country/Region Code";
                    TempAddressFrom."Phone No." := OrderAddress."Phone No.";
                    TempAddressFrom."Fax No." := OrderAddress."Fax No.";
                    TempAddressFrom."Phone No. 2" := '';
                    TempAddressFrom."Mobile Phone No." := '';

                    TempAddressFrom.INSERT;

                    LineNo += 1;
                  UNTIL OrderAddress.NEXT = 0;
                END;
              END;
            END;
          END;
      END;
    END;

    PROCEDURE GetContact@1210190002(lVendorCde@1210190001 : Code[20]) RelationCde : Code[20];
    VAR
      ContBusRelRec@1210190000 : Record 5054;
    BEGIN
      ContBusRelRec.SETCURRENTKEY("Link to Table","No.");
      ContBusRelRec.SETRANGE("No.",lVendorCde);
      ContBusRelRec.SETRANGE("Link to Table",ContBusRelRec."Link to Table"::Vendor);
      IF ContBusRelRec.FIND('-') THEN
        EXIT(ContBusRelRec."Contact No.")
      ELSE
        EXIT('');
    END;

    PROCEDURE GetPostAddress@1100525012(AddressSource@1100525003 : 'Company Post Address,Company Visit Address,Person Post Address,Person Visit Address,Project Address,Project Location Address,Service Location Address,Order Address';VAR TempAddressFrom@1100525002 : Record 11125737;LineNo@1100525001 : Integer);
    BEGIN
      TempAddressFrom.INIT;
      TempAddressFrom."Line No." := LineNo;
      TempAddressFrom."Address Source" := AddressSource;
      TempAddressFrom."Code 1" := Contact."No.";
      TempAddressFrom.Address := Contact.Address;
      TempAddressFrom."Address 2" := Contact."Address 2";
      TempAddressFrom."Post Code" := Contact."Post Code";
      TempAddressFrom.City := Contact.City;
      TempAddressFrom.County := Contact.County;
      TempAddressFrom."Country/Region Code" := Contact."Country/Region Code";
      TempAddressFrom."Phone No." := Contact."Phone No.";
      TempAddressFrom."Fax No." := Contact."Fax No.";
      TempAddressFrom."Phone No. 2" := Contact."Phone No. 2";
      TempAddressFrom."Mobile Phone No." := Contact."Mobile Phone No.";
      TempAddressFrom.INSERT;
    END;

    PROCEDURE GetVisitAddress@1100525013(AddressSource@1100525002 : 'Company Post Address,Company Visit Address,Person Post Address,Person Visit Address,Project Address,Project Location Address,Service Location Address,Order Address';VAR TempAddressFrom@1100525001 : Record 11125737;LineNo@1100525000 : Integer);
    BEGIN
      TempAddressFrom.INIT;
      TempAddressFrom."Line No." := LineNo;
      TempAddressFrom."Address Source" := AddressSource;
      TempAddressFrom."Code 1" := Contact."No.";
      TempAddressFrom.Address := Contact."Visit Address";
      TempAddressFrom."Address 2" := Contact."Visit Address 2";
      TempAddressFrom."Post Code" := Contact."Visit Address Post Code";
      TempAddressFrom.City := Contact."Visit Address City";
      TempAddressFrom.County := Contact."Visit Address County";
      TempAddressFrom."Country/Region Code" := Contact."Visit Address Country/Region";
      TempAddressFrom."Phone No." := Contact."Phone No.";
      TempAddressFrom."Fax No." := Contact."Fax No.";
      TempAddressFrom."Phone No. 2" := Contact."Phone No. 2";
      TempAddressFrom."Mobile Phone No." := Contact."Mobile Phone No.";
      TempAddressFrom.INSERT;
    END;

    PROCEDURE GetAltAddress@1100525015(AddressSource@1100525002 : 'Company Post Address,Company Visit Address,Person Post Address,Person Visit Address,Project Address,Project Location Address,Service Location Address,Order Address';VAR TempAddressFrom@1100525001 : Record 11125737;LineNo@1100525000 : Integer);
    VAR
      ContactAltAddress@1100525003 : Record 5051;
    BEGIN
      ContactAltAddress.SETRANGE("Contact No.", Contact."No.");
      IF ContactAltAddress.FINDSET THEN BEGIN
        REPEAT
          TempAddressFrom.INIT;
          TempAddressFrom."Line No." := LineNo;
          TempAddressFrom."Address Source" := AddressSource;
          TempAddressFrom."Code 1" := ContactAltAddress."Contact No.";
          TempAddressFrom."Code 2" := ContactAltAddress.Code;
          TempAddressFrom.Address := ContactAltAddress.Address;
          TempAddressFrom."Address 2" := ContactAltAddress."Address 2";
          TempAddressFrom."Post Code" := ContactAltAddress."Post Code";
          TempAddressFrom.City := ContactAltAddress.City;
          TempAddressFrom.County := ContactAltAddress.County;
          TempAddressFrom."Country/Region Code" := ContactAltAddress."Country/Region Code";
          TempAddressFrom."Phone No." := ContactAltAddress."Phone No.";
          TempAddressFrom."Fax No." := ContactAltAddress."Fax No.";
          TempAddressFrom."Phone No. 2" := '';
          TempAddressFrom."Mobile Phone No." := ContactAltAddress."Mobile Phone No.";
          TempAddressFrom.INSERT;

          LineNo += 1;
        UNTIL ContactAltAddress.NEXT = 0;
      END;
    END;

    PROCEDURE GetEmployerNo@1100485007() EmployerNo : Code[20];
    VAR
      ContBusRel@1100485000 : Record 5054;
    BEGIN
      ContBusRel.RESET;
      ContBusRel.SETRANGE("Contact No.", "Contact No.");
      ContBusRel.SETRANGE("Link to Table", ContBusRel."Link to Table"::Employer);
      IF ContBusRel.FINDFIRST THEN
        EmployerNo := ContBusRel."No."
      ELSE
        EmployerNo := '';
    END;

    PROCEDURE GetLastVersion@1100485013() lvVersion : Integer;
    VAR
      DocumentProperties@1100485000 : Record 11012746;
    BEGIN
      //DocumentProperties.SETCURRENTKEY("Document Group", "Document Template", Type, "Contact No.", "Document No.");
      DocumentProperties.SETCURRENTKEY("Document Group", "Document Template", "Contact No.", "Document No.");
      DocumentProperties.SETRANGE("Document Group", "Document Group");
      DocumentProperties.SETRANGE("Document Template", "Document Template");
      DocumentProperties.SETRANGE("Contact No.", "Contact No.");
      DocumentProperties.SETRANGE("Document No.", "Document No.");
      DocumentProperties.SETRANGE("Internal Company", "Internal Company");

      //**4PS 23172
      //lvVersion := 1;
      lvVersion := 0;
      //**4PS 23172

      IF DocumentProperties.FINDSET(FALSE,FALSE) THEN
        REPEAT
          IF DocumentProperties.Version > lvVersion THEN
            lvVersion := DocumentProperties.Version;
        UNTIL DocumentProperties.NEXT = 0;
    END;

    PROCEDURE HandleRenameofContact@1210190007(lvCompanyname@1210190000 : Text[50];OldContactNo@1210190001 : Code[20];NewContactNo@1210190002 : Code[20];lvContactDocGroup@1210190008 : Code[10];lvMoveToOtherContact@1100485002 : Boolean);
    VAR
      lDocGroupRec@1210190006 : Record 11012400;
      OldContact@1210190010 : Record 5050;
      NewContact@1100525000 : Record 5050;
      DocumentProperties@1210190007 : Record 11012746;
      lTxtPath_old@1210190004 : Text[132];
      lTxtPath_new@1210190009 : Text[132];
      lUCFile@1210190003 : Text[132];
      lUCPath@1210190005 : Text[132];
      lvExtension@1100485001 : Text[30];
      DocumentLink@1100528700 : Record 11012747;
      RecRef1@1100528701 : RecordRef;
      RecRef2@1100528702 : RecordRef;
    BEGIN
      //When the Contact No. field is renamed we need to move the collection of documents to a new directory.
      //Function can also be used for moving documents from one contact to another: lvMoveToOtherContact
      //NOTE: THis function doesn't work for Secured documents because this function asumes that al documenten for 1 contact are in the
      //same folder.

      RESET;

      lDocGroupRec.Code := lvContactDocGroup;
      lDocGroupRec.FIND('=');

      OldContact.GET(OldContactNo);
      IF OldContact.IsCompany OR OldContact.IsPerson THEN BEGIN
        lTxtPath_old :=  lDocGroupRec."Document Directory" + 'R' + OldContactNo;
        SETRANGE("Contact No.", OldContactNo);
      END ELSE BEGIN
        lTxtPath_old :=  lDocGroupRec."Document Directory" + 'R' + Contact."Company No.";
        SETRANGE("Contact No.", Contact."Company No.");
        SETRANGE("Contact Person No.", OldContactNo);
      END;
      SETRANGE("External Document", FALSE);
      SETRANGE("Internal Company", lvCompanyname);

      NewContact.GET(NewContactNo);
      SETCURRENTKEY("Contact No.");
      //first modify the document records.
      DocumentProperties.COPY(Rec); //because we change "Contact No.", the order changes, therefore use different variable for loop
      IF DocumentProperties.FINDSET(TRUE,FALSE) THEN
        REPEAT
          Rec := DocumentProperties;
          IF lvMoveToOtherContact THEN BEGIN
            IF NewContact.IsCompany OR NewContact.IsPerson THEN BEGIN
              lTxtPath_new := lDocGroupRec."Document Directory" + 'R' + NewContactNo;
              VALIDATE("Contact No.", NewContactNo);
              VALIDATE("Contact Person No.", '');
            END ELSE BEGIN
              lTxtPath_new := lDocGroupRec."Document Directory" + 'R' + NewContact."Company No.";
              VALIDATE("Contact No.", NewContact."Company No.");
              VALIDATE("Contact Person No.", NewContactNo);
            END;
          END ELSE BEGIN
            IF NewContact.IsCompany OR NewContact.IsPerson THEN BEGIN
              lTxtPath_new := lDocGroupRec."Document Directory" + 'R' + NewContactNo;
              "Contact No." := NewContactNo
            END ELSE BEGIN
              lTxtPath_new := lDocGroupRec."Document Directory" + 'R' + NewContact."Company No.";
              "Contact Person No." := NewContactNo;
            END;
          END;

          IF File <> '' THEN BEGIN
            lUCFile := UPPERCASE(File);
            lUCPath := UPPERCASE(lTxtPath_old);
            IF STRPOS(lUCFile, lUCPath) = 1 THEN BEGIN
              VALIDATE(File, DELSTR(File, 1, STRLEN(lTxtPath_old)));
              IF STRLEN(lTxtPath_new + File) <= 127 THEN BEGIN
                VALIDATE(File, lTxtPath_new + File);
                IF lTxtPath_new <> lTxtPath_old THEN
                  IF WordAutomation.ExistingFileName(File, TRUE, FALSE, lvExtension) THEN
                    ERROR(Text004, File + lvExtension, NewContactNo);
              END ELSE BEGIN
                ERROR(Text009,"No.");
              END;
            END;
          END;
          MODIFY(TRUE);
          MARK(TRUE);
        UNTIL DocumentProperties.NEXT = 0;

      RecRef1.GETTABLE(OldContact);
      RecRef2.GETTABLE(NewContact);
      DocumentLink.HandleRenameOfDocumentLink(RecRef1.RECORDID, RecRef2.RECORDID);

      //If the above went fine then we can move the word-files to the new directory
      SETRANGE("Contact No.");
      SETRANGE("Contact Person No.");
      MARKEDONLY(TRUE);
      IF FINDFIRST THEN
        IF (lTxtPath_new <> lTxtPath_old) THEN BEGIN
          IF lDocGroupRec."Document Directory" <> '' THEN BEGIN
            IF NOT FileMgt.ClientDirectoryExists(lTxtPath_new) THEN BEGIN
              IF FileMgt.ClientDirectoryExists(lDocGroupRec."Document Directory") THEN
                FileMgt.CreateClientFolder(lTxtPath_new, TRUE)
              ELSE
                ERROR(Text014,lDocGroupRec."Document Directory");
            END;

            HandleMoveWordFiles(Rec,lTxtPath_old,lTxtPath_new);

            IF NOT lvMoveToOtherContact THEN
              HandleDeleteFolder(lTxtPath_old);

          END;
        END;
      MARKEDONLY(FALSE);

      SETRANGE("External Document", TRUE);
      IF OldContact.IsCompany OR OldContact.IsPerson THEN
        SETRANGE("Contact No.", OldContactNo)
      ELSE BEGIN
        SETRANGE("Contact No.", OldContact."Company No.");
        SETRANGE("Contact Person No.", OldContactNo);
      END;
      {
      IF FINDSET(TRUE,FALSE) THEN
        REPEAT
          "Contact No." := lvContact_new;
          MODIFY(TRUE);
        UNTIL NEXT = 0;
      }
      WHILE FINDFIRST DO BEGIN
        IF lvMoveToOtherContact THEN BEGIN
          IF NewContact.IsCompany OR NewContact.IsPerson THEN BEGIN
            VALIDATE("Contact No.", NewContactNo);
            VALIDATE("Contact Person No.", '');
          END ELSE BEGIN
            VALIDATE("Contact No.", NewContact."Company No.");
            VALIDATE("Contact Person No.", NewContactNo);
          END;
        END ELSE BEGIN
          IF NewContact.IsCompany OR NewContact.IsPerson THEN
            "Contact No." := NewContactNo
          ELSE
            "Contact Person No." := NewContactNo;
        END;
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE HandleRenameofCountry@1210190010(lvCompanyname@1210190000 : Text[30];lvCountry_old@1210190001 : Code[10];lvCountry_new@1210190002 : Code[10]);
    BEGIN
      RESET;
      SETRANGE("Country/Region Code",lvCountry_old);
      SETRANGE("Internal Company",lvCompanyname);
      IF FINDSET(TRUE,FALSE) THEN
        REPEAT
          "Country/Region Code" := lvCountry_new;
          MODIFY(TRUE);
        UNTIL NEXT = 0;
    END;

    PROCEDURE HandleRenameofDocumentGroup@1210190005(lvCompanyname@1210190000 : Text[30];lvDocGroup_old@1210190001 : Code[10];lvDocGroup_new@1210190002 : Code[10]);
    BEGIN
      RESET;
      SETCURRENTKEY("Document Group");
      SETRANGE("Document Group",lvDocGroup_old);
      SETRANGE("Internal Company",lvCompanyname);
      IF FINDSET(TRUE,FALSE) THEN
        REPEAT
          "Document Group" := lvDocGroup_new;
          MODIFY(TRUE);
        UNTIL NEXT = 0;
    END;

    PROCEDURE HandleRenameofDocumentTemplate@1210190006(lvCompanyname@1210190000 : Text[30];lvDocGroup_old@1210190001 : Code[10];lvDocTemplate_old@1210190003 : Code[20];lvDocGroup_new@1210190002 : Code[10];lvDocTemplate_new@1210190005 : Code[20]);
    BEGIN
      RESET;
      SETCURRENTKEY("Document Group", "Document Template");
      SETRANGE("Document Group",lvDocGroup_old);
      SETRANGE("Document Template",lvDocTemplate_old);
      SETRANGE("Internal Company",lvCompanyname);
      IF FINDSET(TRUE,FALSE) THEN
        REPEAT
          "Document Group" := lvDocGroup_new;
          "Document Template" := lvDocTemplate_new;
          MODIFY(TRUE);
        UNTIL NEXT = 0;
    END;

    PROCEDURE HandleRenameofDocumentType@1210190009(lvCompanyname@1210190000 : Text[30];lvDocType_old@1210190001 : Code[10];lvDocType_new@1210190002 : Code[10]);
    BEGIN
      RESET;
      SETRANGE("Document Type",lvDocType_old);
      SETRANGE("Internal Company",lvCompanyname);
      IF FINDSET(TRUE,FALSE) THEN
        REPEAT
          "Document Type" := lvDocType_new;
          MODIFY(TRUE);
        UNTIL NEXT = 0;
    END;

    PROCEDURE HandleRenameofEmployee@1210190011(lvCompanyname@1210190000 : Text[30];lvEmployee_old@1210190001 : Code[20];lvEmployee_new@1210190002 : Code[20]);
    BEGIN
      //The Fields Sender, Editor, 'Adressed to' and 'Original to' all refer to the employee table.
      RESET;
      SETRANGE(Sender,lvEmployee_old);
      SETRANGE("Internal Company",lvCompanyname);
      IF FINDSET(TRUE,FALSE) THEN
        REPEAT
          Sender := lvEmployee_new;
          MODIFY(TRUE);
        UNTIL NEXT = 0;

      SETRANGE(Editor,lvEmployee_old);
      IF FINDSET(TRUE,FALSE) THEN
        REPEAT
          Editor := lvEmployee_new;
          MODIFY(TRUE);
        UNTIL NEXT = 0;
      SETRANGE(Editor); //call C-029598

      SETRANGE("Addressed To",lvEmployee_old);
      IF FINDSET(TRUE,FALSE) THEN
        REPEAT
          "Addressed To" := lvEmployee_new;
          MODIFY(TRUE);
        UNTIL NEXT = 0;
      SETRANGE("Addressed To"); //call C-029598

      SETRANGE("Original To",lvEmployee_old);
      IF FINDSET(TRUE,FALSE) THEN
        REPEAT
          "Original To" := lvEmployee_new;
          MODIFY(TRUE);
        UNTIL NEXT = 0;
      SETRANGE("Original To"); //call C-029598
    END;

    LOCAL PROCEDURE HandleMoveWordFiles@1100485011(VAR DocumentProperties@1100485000 : Record 11012746;lTxtPath_old@1100485005 : Text[132];lTxtPath_new@1100485004 : Text[132]);
    VAR
      lUCFile@1100485002 : Text[132];
      lUCPath@1100485001 : Text[132];
      lOldFile@1100485006 : Text[132];
      lNewFile@1100485003 : Text[132];
      lvExtension@1100485007 : Text[30];
      lTestLength@1100485008 : Integer;
    BEGIN
      IF DocumentProperties.FINDSET THEN
        REPEAT
          IF File <> '' THEN BEGIN
            lUCFile := UPPERCASE(File);
            lUCPath := UPPERCASE(lTxtPath_new);
            IF STRPOS(lUCFile, lUCPath) = 1 THEN BEGIN
              VALIDATE(File, DELSTR(File, 1, STRLEN(lTxtPath_new)));
              lOldFile := lTxtPath_old + File;
              IF WordAutomation.ExistingFileName(lOldFile, TRUE, FALSE, lvExtension) THEN BEGIN
                lNewFile := lTxtPath_new + File + lvExtension;
                lOldFile := lOldFile + lvExtension;
                lTestLength := STRLEN(('move ' + lOldFile + ' ' + lNewFile));
                FileMgt.RenameClientFile(lOldFile, lNewFile, TRUE);
              END;
            END;
          END;
        UNTIL DocumentProperties.NEXT = 0;
    END;

    PROCEDURE HandleDeleteFolder@1100485010(lTxtPath@1100485000 : Text[132]);
    VAR
      FileMgt@1100525000 : Codeunit 419;
      lCanDelete@1100485001 : Boolean;
    BEGIN
      IF NOT FileMgt.ClientDirectoryExists(lTxtPath) THEN
        EXIT;

      lCanDelete := FileMgt.ClientFolderIsEmpty(lTxtPath, '');
      IF lCanDelete THEN
        FileMgt.DeleteClientFolder(lTxtPath)
      ELSE
        MESSAGE(Text015, lTxtPath);
    END;

    PROCEDURE LookupDocumentTemplate@1100525001(IsEditable@1100525000 : Boolean);
    VAR
      DocumentTemplate@1100525004 : Record 11012401;
      DocumentTemplate2@1199198000 : Record 11012401;
      TempDocumentTemplate@1100525003 : TEMPORARY Record 11012401;
      DocumentPermission@1100525002 : Record 11012404;
      AddTemplate@1100525001 : Boolean;
    BEGIN
      DocumentTemplate.SETRANGE("Document Group", "Document Group");
      IF "Document Template" = '' THEN
        DocumentTemplate.SETRANGE(Type, DocumentTemplate.Type::Miscellaneous)
      ELSE
        IF DocumentTemplate2.GET("Document Group", "Document Template") THEN
          DocumentTemplate.SETRANGE(Type, DocumentTemplate2.Type);

      IF DocumentTemplate.FINDSET THEN BEGIN
        REPEAT
          AddTemplate := FALSE;
          DocumentPermission.SETRANGE("Document Group", DocumentTemplate."Document Group");
          DocumentPermission.SETRANGE("Template Code", DocumentTemplate."Template Code");
          DocumentPermission.SETRANGE("User ID");
          IF NOT DocumentPermission.FINDFIRST THEN BEGIN
            //no permissions defined for any user, this means all have permissions
            AddTemplate := TRUE;
          END ELSE BEGIN
            //there are permissions defined, check whether they are defined for the current user
            DocumentPermission.SETRANGE("User ID", USERID);
            IF DocumentPermission.FINDFIRST THEN
              AddTemplate := TRUE;
          END;

          IF AddTemplate THEN BEGIN
            TempDocumentTemplate.TRANSFERFIELDS(DocumentTemplate, TRUE);
            TempDocumentTemplate.INSERT;
          END;
        UNTIL DocumentTemplate.NEXT = 0;
      END;

      IF PAGE.RUNMODAL(PAGE::"Document Template List", TempDocumentTemplate) = ACTION::LookupOK THEN
        IF IsEditable THEN BEGIN
          VALIDATE("Document Template", TempDocumentTemplate."Template Code");
          IF (TempDocumentTemplate."Project Portal Subsite" <> '') THEN BEGIN
            "Project Portal Subsite" := TempDocumentTemplate."Project Portal Subsite";
            "Document Type" := TempDocumentTemplate."Document Type";
            "Private Company Document" := TempDocumentTemplate."Private Company Document";
          END;
        END;
    END;

    PROCEDURE OpenDocument@1210190004();
    VAR
      CUDocumentManagement@1100525000 : Codeunit 11012406;
      InterActRec@1210190000 : Record 11072027;
    BEGIN
      IF ("D3 Document ID" <> '') THEN BEGIN
        CUDocumentManagement.OpenD3Document(Rec);
        EXIT;
      END;

      IF File <> '' THEN BEGIN
        IF "External Document" THEN
          ExtDocManagement.OpenExternalDocument("Document Type", File, "Internal Company")
        ELSE BEGIN
          CLEAR(WordAutomation);
          WordAutomation.Initialise;
          WordAutomation.Open(FALSE, File, "Final Printed");
          WordAutomation.Display;
        END;
      END ELSE BEGIN
        IF "Web link" <> '' THEN
          HYPERLINK("Web link")
        ELSE
          IF "Interaction Entry No." <> 0 THEN BEGIN
            IF InterActRec.GET("Interaction Entry No.") THEN
              IF InterActRec."Attachment No." <> 0 THEN
                InterActRec.OpenAttachment
              ELSE
                InterActRec.ShowDocument;
          END ELSE BEGIN
            TESTFIELD(File);
          END;
      END;
    END;

    PROCEDURE IsConfidentialOwner@1100525004() : Boolean;
    VAR
      UserSetup@1100525001 : Record 91;
    BEGIN
      IF "Internal Company" <> '' THEN
        UserSetup.CHANGECOMPANY("Internal Company");

      IF NOT UserSetup.GET(USERID) THEN UserSetup.INIT;
      IF "External Document" THEN BEGIN
        IF (UserSetup."Employee No." <> "Addressed To") AND
           (UserSetup."Employee No." <> "Original To") AND
           Confidential THEN
          EXIT(FALSE);
      END ELSE BEGIN
        IF (UserSetup."Employee No." <> Editor) AND
           (UserSetup."Employee No." <> Sender) AND
           Confidential THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE PrintDocument@1100525006();
    VAR
      ExtrenalDocMgt@1100525003 : Codeunit 11012403;
      lCduWord@1100525000 : Codeunit 11012400;
      FilePath@1100525002 : Text[1024];
      DocumentMgt@1100525001 : Codeunit 11012406;
      Extension@1100528700 : Text[30];
    BEGIN
      IF ("D3 Document Type" <> '' ) AND ("D3 Document ID" <> '') THEN BEGIN
        FilePath := DocumentMgt.D3DocumentURL(Rec);
      END ELSE BEGIN
        FilePath := File;
      END;

      IF FilePath <> '' THEN BEGIN
        IF "External Document" THEN BEGIN
          Extension := FileMgt.GetExtension(FilePath);
          IF (LOWERCASE(Extension) = 'doc') OR (LOWERCASE(Extension) = 'docx') THEN
            PrintWordDocument(FilePath, "Final Printed")
          ELSE
            ExtrenalDocMgt.PrintExternalDocument("Document Type", File, "Internal Company");
        END ELSE
          PrintWordDocument(FilePath, "Final Printed");
      END;
    END;

    LOCAL PROCEDURE PrintWordDocument@1100528701(FilePath@1100528701 : Text;ReadOnly@1100528700 : Boolean);
    VAR
      WordAutomation@1100528702 : Codeunit 11012400;
    BEGIN
      WordAutomation.Initialise;
      WordAutomation.Open(FALSE, FilePath, ReadOnly);
      WordAutomation.Display; //TEST
      WordAutomation.PrintWithPrinterSelection;
      IF "D3 Document ID" <> '' THEN
        WordAutomation.Close2(FALSE)
      ELSE
        WordAutomation.Close2(TRUE);
      WordAutomation.Terminate;
    END;

    PROCEDURE CreateDocumentLink@1100525005(RID@1100525001 : RecordID) : Boolean;
    VAR
      DocumentLink@1100525000 : Record 11012747;
      SeqNo@1199198000 : Integer;
      DocumentLinkMgt@1100528400 : Codeunit 11012401;
    BEGIN
      IF (FORMAT(RID) <> '') AND ("No." <> '') THEN BEGIN
        DocumentLink.RESET;
        DocumentLink.SETRANGE("Document No.", "No.");
        IF DocumentLink.FINDLAST THEN
          SeqNo := DocumentLink."Seq. No." + 10000
        ELSE
          SeqNo := 10000;

        DocumentLink.INIT;
        DocumentLink."Document No." := "No.";
        DocumentLink."Seq. No." := SeqNo;
        DocumentLink."Table No." := RID.TABLENO;
        DocumentLink."Filter Expression" := DocumentLinkMgt.GetFilterExpression(RID);
        DocumentLink."Internal Company" := "Internal Company";
        DocumentLink."Record ID" := RID;
        DocumentLink.INSERT;

        EXIT(TRUE); // Give true back to the form and update form
      END;

      EXIT(FALSE); // form is not updated
    END;

    PROCEDURE GetType@1199198001() : Text[80];
    VAR
      DocumentTemplate@1199198000 : Record 11012401;
    BEGIN
      IF NOT DocumentTemplate.GET("Document Group", "Document Template") THEN
        DocumentTemplate.Type := DocumentTemplate.Type::Miscellaneous;
      EXIT(FORMAT(DocumentTemplate.Type));
    END;

    PROCEDURE TypeIsMisc@1100525008() : Boolean;
    VAR
      DocumentTemplate@1100525000 : Record 11012401;
    BEGIN
      IF NOT DocumentTemplate.GET("Document Group", "Document Template") THEN
        DocumentTemplate.Type := DocumentTemplate.Type::Miscellaneous;
      EXIT(DocumentTemplate.Type = DocumentTemplate.Type::Miscellaneous);
    END;

    PROCEDURE SetVar@1199198002(DocumentLink@1199198000 : Record 11012747);
    BEGIN
      DocLink := DocumentLink;
    END;

    PROCEDURE FullFileName@1100485002() : Text[250];
    VAR
      ExtDocMgt@1100485000 : Codeunit 11012403;
      lvExtension@1100485001 : Text[30];
    BEGIN
      IF File = '' THEN
        EXIT(File);

      IF "External Document" THEN
        EXIT(ExtDocMgt.TotalFileName("Document Type", File, "Internal Company"))
      ELSE BEGIN
        IF IsFileExisting(File, TRUE, FALSE, lvExtension) THEN
          EXIT(File + lvExtension)
        ELSE
          EXIT(File);
      END;
    END;

    PROCEDURE FileName@1100528100() : Text[250];
    VAR
      FileName@1100528100 : Text[250];
      Directory@1100528102 : Text[250];
    BEGIN
      FileMgt.SplitFileAbsPathName(FullFileName(), Directory, FileName);
      EXIT(FileName);
    END;

    PROCEDURE IsFileExisting@1100485006(lvFileName@1100485000 : Text[1000];lvDoc@1100485001 : Boolean;lvDot@1100485002 : Boolean;VAR lvExtension@1100485004 : Text[5]) : Boolean;
    BEGIN
      lvExtension := '';

      IF lvDot THEN BEGIN
        IF FileMgt.ClientFileExists(lvFileName) THEN BEGIN
          IF STRPOS(lvFileName, '.dotx') > 0 THEN BEGIN
            lvExtension := '.dotx';
            EXIT(TRUE);
          END;
          IF STRPOS(lvFileName, '.dot') > 0 THEN BEGIN
            lvExtension := '.dot';
            EXIT(TRUE);
          END;
        END;

        EXIT(FALSE);
      END;

      IF FileMgt.ClientFileExists(lvFileName + '.doc') THEN BEGIN
        lvExtension := '.doc';
        EXIT(TRUE);
      END;
      IF FileMgt.ClientFileExists(lvFileName + '.docx') THEN BEGIN
        lvExtension := '.docx';
        EXIT(TRUE);
      END;

      EXIT(FALSE);
      //**4PS
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Department Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::"Document Properties");
      IF Dimension1Code <> '' THEN
        "Department Code" := Dimension1Code;

      IF "Department Code" <> '' THEN
        VALIDATE("Department Code");
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012746) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012746');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Document Properties", "Department Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Department Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Department Code");
    END;

    PROCEDURE GetCaptionClass@1100528700(Index@1100528700 : Integer) : Text[80];
    BEGIN
      EXIT(DocumentFilters.GetLinkFieldCaption(Index));
    END;

    PROCEDURE CheckFileIsInUse@1210190003();
    VAR
      WordAutomation@1210190000 : Codeunit 11012400;
      FileMgt@1100525000 : Codeunit 419;
      Extension@1210190002 : Text[30];
    BEGIN
      IF WordAutomation.ExistingFileName(Rec.File, TRUE, FALSE, Extension) THEN
        IF FileMgt.ClientFileIsInUse(File + Extension) THEN
          ERROR(Text024, File + Extension);
    END;

    PROCEDURE OpenDocumentD3@1100409000();
    VAR
      CUDocumentManagement@1100409000 : Codeunit 11012409;
    BEGIN
      IF ("D3 Document ID" <> '') THEN
        CUDocumentManagement.OpenD3Card("D3 Document ID");
    END;

    PROCEDURE UpdateProjectPortal@1100528300();
    VAR
      DocumentLink@1100528301 : Record 11012747;
      Job@1100528302 : Record 11072003;
      SharePointIntegration@1100528300 : Codeunit 11020210;
      DocumentPortalProject@1100528305 : Codeunit 11012948;
      RecRef@1100528303 : RecordRef;
      RecId@1100528304 : RecordID;
    BEGIN
      IF (NOT SharePointIntegration.IsProjectPortalActive) THEN
        EXIT;

      DocumentLink.SETRANGE("Document No.", "No.");
      DocumentLink.SETRANGE("Table No.", DATABASE::Job);
      IF (NOT DocumentLink.FINDSET) THEN
        EXIT;

      REPEAT
        RecId := DocumentLink."Record ID";
        IF (RecRef.GET(RecId)) THEN BEGIN
          RecRef.SETTABLE(Job);
          IF (Job.IsJobInProjectPortal) AND
             (File = '') AND ("Web link" <> '')
          THEN
            DocumentPortalProject.ModifyDocument(Job, Rec, TRUE);
        END;
      UNTIL (DocumentLink.NEXT = 0);
    END;

    PROCEDURE AddAllProjectDocsToPPT@1100528301(RecId@1100528300 : RecordID);
    VAR
      Job@1100528302 : Record 11072003;
      DocumentPortalProject@1100528301 : Codeunit 11012948;
      RecRef@1100528303 : RecordRef;
    BEGIN
      RecRef.GET(RecId);
      IF (RecId.TABLENO <> DATABASE::Job) THEN
        ERROR(Text000, RecRef.CAPTION, RecId.TABLENO);

      RecRef.GET(RecId);
      RecRef.SETTABLE(Job);
      DocumentPortalProject.AddDocuments(Job);
    END;

    PROCEDURE OpenCommentSheet@1100528302();
    VAR
      CommentLine@1100528301 : Record 97;
      CommentSheet@1100528300 : Page 124;
    BEGIN
      CommentLine.FILTERGROUP(9);
      CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::"Document Properties");
      CommentLine.FILTERGROUP(0);
      CommentLine.SETRANGE("No.", "No.");
      CommentSheet.SETTABLEVIEW(CommentLine);
      CommentSheet.RUNMODAL;
      IF (CommentSheet.IsUpdated) THEN
        UpdateProjectPortal;
    END;

    LOCAL PROCEDURE IsPPTDocumentChangeAllowed@1100525000() : Boolean;
    VAR
      DocumentProperties@1100525003 : Record 11012746;
      DocumentLink@1100525000 : Record 11012747;
      Job@1100525001 : Record 11072003;
      RecRef@1100525002 : RecordRef;
    BEGIN
      IF ("Web link" = '') THEN
        EXIT(TRUE);
      DocumentProperties.GET("No."); //get old record
      IF (Description = DocumentProperties.Description) AND
         ("Project Portal Subsite" = DocumentProperties."Project Portal Subsite") AND
         ("Document Type" = DocumentProperties."Document Type") AND
         ("Private Company Document" = DocumentProperties."Private Company Document") AND
         ("Contact No." = DocumentProperties."Contact No.") AND
         ("Contact Person No." = DocumentProperties."Contact Person No.")
      THEN
        EXIT(TRUE);
      DocumentLink.SETRANGE("Document No.", "No.");
      DocumentLink.SETRANGE("Table No.", DATABASE::Job);
      IF (NOT DocumentLink.FINDSET) THEN
        EXIT(TRUE);
      REPEAT
        RecRef.GET(DocumentLink."Record ID");
        RecRef.SETTABLE(Job);
        IF (Job.IsJobInProjectPortal) THEN
          EXIT(FALSE);
      UNTIL (DocumentLink.NEXT = 0);
      EXIT(TRUE);
    END;

    PROCEDURE GetFirstProjectNo@1100409001(DocumentNo@1100409000 : Code[20]) : Code[20];
    VAR
      DocumentLink@1100409001 : Record 11012747;
      Job@1100409002 : Record 11072003;
      RecRef@1100409003 : RecordRef;
    BEGIN
      //kzwerver.n #C016690
      DocumentLink.SETRANGE("Document No.", DocumentNo);
      DocumentLink.SETRANGE("Table No.", DATABASE::Job);
      DocumentLink.SETRANGE("Internal Company", COMPANYNAME);
      IF (DocumentLink.FINDFIRST) THEN BEGIN
        RecRef.GET(DocumentLink."Record ID");
        RecRef.SETTABLE(Job);
        EXIT(Job."No.");
      END;
      EXIT('');
    END;

    PROCEDURE SetFilterOnlyPictures@1100528600();
    BEGIN
      SETRANGE("External Document", TRUE);
      SETFILTER("File Extension", 'bmp|jpe|jpeg|jpg|gif|png|tif|tiff');
    END;

    PROCEDURE IsDocumentPicture@1100525009() : Boolean;
    BEGIN
      IF NOT "External Document" THEN
        EXIT(FALSE);
      CASE "File Extension" OF
        'bmp', 'jpe', 'jpeg', 'jpg', 'gif', 'png', 'tif', 'tiff':
          EXIT(TRUE);
      END;
    END;

    PROCEDURE FileCanBeConvertedToPDF@1100528400() : Boolean;
    VAR
      PDFFileManagement@1100525000 : Codeunit 11020228;
    BEGIN
      EXIT(PDFFileManagement.FileCanBeConvertedToPDF(FullFileName));
    END;

    BEGIN
    {
      4PS MVOS 20101005 23172 : Changed function GetLastVersion
      4PS 08-12-11 call 31421: Key Document Type,Document No. added to accomodate loss of functionality
    }
    END.
  }
}

