OBJECT Table 11012750 Try-out
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11012750=d;
    DataCaptionFields=Code,Description;
    OnInsert=BEGIN
               IF Code = '' THEN BEGIN
                 ContMgtSetup.GET;
                 ContMgtSetup.TESTFIELD(ContMgtSetup."Try-out Nos.");
                 NoSeriesMgt.InitSeries(ContMgtSetup."Try-out Nos.",xRec."No. Series",0D,Code,"No. Series");
               END;
               "Creation Date" := TODAY;
               "Inserted By" := USERID;

               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05

               FillModificationData;

               IF "Single/Main/Sub Tryout" = "Single/Main/Sub Tryout"::Single THEN
                 "Main Try-out" := Code
               ELSE
                 "Main Try-out" := '';

               CreateFeatures;
               ProjectSiteMgt.LogTryOut(1, Rec); //**4PS.n
             END;

    OnModify=BEGIN
               FillModificationData;
               ProjectSiteMgt.LogTryOut(2, Rec); //**4PS.n
             END;

    OnDelete=VAR
               CommLineRec@1210190000 : Record 97;
               TryFeatRec@1210190005 : Record 11012753;
               TryLineRec@1210190001 : Record 11012755;
               TryRespRec@1210190002 : Record 11012756;
               TrySuccRec@1210190004 : Record 11012761;
               TryQuoteRec@1210190003 : Record 11012758;
               ActRec@1210190006 : Record 5080;
               CRMPortRelation@1100525000 : Record 11128540;
             BEGIN
               TryQuoteRec.SETRANGE("Try-out No.",Code);
               TryQuoteRec.DELETEALL(TRUE);

               IF TryQuoteRec.FIND('-') THEN
                 ERROR(Text000, TABLECAPTION, Code);

               TryFeatRec.SETRANGE("Relation Type",TryFeatRec."Relation Type"::"Try-out");
               TryFeatRec.SETRANGE(Code,Code);
               TryFeatRec.DELETEALL;

               TryLineRec.SETRANGE("Try-out No.",Code);
               TryLineRec.DELETEALL; //Do not use TRUE, Tryout is updated here, which can not be handled by SQL without an error message

               TryRespRec.SETRANGE("Try-out",Code);
               TryRespRec.DELETEALL(TRUE);

               TrySuccRec.SETRANGE("Try-out No.",Code);
               TrySuccRec.DELETEALL(TRUE);

               ActRec.SETRANGE("Try-out No.",Code);
               ActRec.DELETEALL(TRUE);

               CommLineRec.SETRANGE("Table Name",CommLineRec."Table Name"::"Try-out");
               CommLineRec.SETRANGE("No.",Code);
               CommLineRec.DELETEALL;

               //**4PS.sn
               IF CRMPortRelation.GET(CRMPortRelation."Relation Type"::"Try-out", Code) THEN
                 CRMPortRelation.DELETE(TRUE);

               ProjectSiteMgt.LogTryOut(3, Rec);
               //**4PS.en
             END;

    OnRename=VAR
               DocumentLinkMgt@1100525000 : Codeunit 11012401;
               RecRef@1100525001 : RecordRef;
               OldRID@1100525002 : RecordID;
               NewRID@1100525003 : RecordID;
             BEGIN
               // Get old recordid of xRec
               RecRef.GETTABLE(xRec);
               OldRID := RecRef.RECORDID();

               // Get new record id
               RecRef.GETTABLE(Rec);
               NewRID := RecRef.RECORDID();

               DocumentLinkMgt.HandleRenameDocumentLink(COMPANYNAME, OldRID, NewRID)
             END;

    CaptionML=ENU=Try-out;
    LookupPageID=Page11012751;
    DrillDownPageID=Page11012751;
  }
  FIELDS
  {
    { 10  ;   ;Code                ;Code20        ;OnValidate=BEGIN
                                                                IF Code <> xRec.Code THEN BEGIN
                                                                  ContMgtSetup.GET;
                                                                  NoSeriesMgt.TestManual(ContMgtSetup."Try-out Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Code }
    { 20  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 25  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 30  ;   ;Address             ;Text50        ;OnValidate=VAR
                                                                lDummy@1210190000 : Text[30];
                                                              BEGIN
                                                              END;

                                                   CaptionML=ENU=Address;
                                                   Editable=Yes }
    { 40  ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2;
                                                   Editable=Yes }
    { 50  ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City;
                                                   Editable=Yes }
    { 60  ;   ;County              ;Text30        ;CaptionML=ENU=County;
                                                   Editable=Yes }
    { 65  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region Code }
    { 70  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code;
                                                   Editable=Yes }
    { 75  ;   ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   CaptionML=ENU=Territory Code }
    { 80  ;   ;Salesperson Code    ;Code20        ;TableRelation=Salesperson/Purchaser.Code;
                                                   CaptionML=ENU=Salesperson/Purchaser Code }
    { 85  ;   ;Salesperson Name    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Salesperson Code)));
                                                   CaptionML=ENU=Salesperson Name }
    { 90  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Try-out),
                                                                                           No.=FIELD(Code)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 100 ;   ;Creation Date       ;Date          ;CaptionML=ENU=Creation Date }
    { 110 ;   ;Expected Starting Date;Date        ;CaptionML=ENU=Expected Starting Date }
    { 120 ;   ;Expected End Date   ;Date          ;CaptionML=ENU=Expected End Date }
    { 140 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 150 ;   ;No. of Lines        ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Try-out Line" WHERE (Try-out No.=FIELD(Code)));
                                                   CaptionML=ENU=No. of Lines;
                                                   Editable=No }
    { 210 ;   ;Order               ;Boolean       ;OnValidate=BEGIN
                                                                IF Order = TRUE THEN
                                                                  IF "Order Date" = 0D THEN
                                                                    "Order Date" := TODAY;
                                                              END;

                                                   CaptionML=ENU=Order }
    { 220 ;   ;Order Date          ;Date          ;CaptionML=ENU=Order Date }
    { 230 ;   ;Status              ;Code20        ;TableRelation="Try-out Status".Code WHERE (Type=CONST(Try-out));
                                                   OnValidate=BEGIN
                                                                IF (Status <> '') AND (Status <> xRec.Status) THEN
                                                                  CheckFixEstimateStatus;  //X007
                                                              END;

                                                   CaptionML=ENU=Status }
    { 240 ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");  //db, 19-08-09
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 245 ;   ;Global Dimension 1 Name;Text50     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Dimension Value".Name WHERE (Global Dimension No.=CONST(1),
                                                                                                    Code=FIELD(Global Dimension 1 Code)));
                                                   CaptionML=ENU=Global Dimension 1 Name;
                                                   CaptionClass='1,11012000,1' }
    { 250 ;   ;Order Amount (LCY)  ;Decimal       ;OnValidate=BEGIN
                                                                ValidateOrderAmountLCY;
                                                              END;

                                                   CaptionML=ENU=(Expected) Order Amount (LCY) }
    { 251 ;   ;Order Amount (FCY)  ;Decimal       ;OnValidate=VAR
                                                                CurrencyExchangeRateRec@1100528202 : Record 330;
                                                                Currency2@1100528200 : Record 4;
                                                                CurrencyDate@1100528201 : Date;
                                                              BEGIN
                                                                Currency2.InitRoundingPrecision;

                                                                IF "Currency Code" <> '' THEN BEGIN

                                                                  CurrencyDate := "Creation Date";
                                                                  IF (CurrencyDate = 0D) THEN
                                                                    CurrencyDate := TODAY;

                                                                  "Order Amount (LCY)" := ROUND(
                                                                    CurrencyExchangeRateRec.ExchangeAmtFCYToLCY(
                                                                      1, '', CurrencyDate, "Currency Code","Order Amount (FCY)",
                                                                       CurrencyExchangeRateRec.ExchangeRate(1, '', CurrencyDate, "Currency Code",TRUE),TRUE),
                                                                       Currency2."Amount Rounding Precision");

                                                                END ELSE BEGIN
                                                                  "Order Amount (LCY)" := ROUND("Order Amount (FCY)",Currency2."Amount Rounding Precision");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=(Expected) Order Amount;
                                                   AutoFormatType=1 }
    { 252 ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                VALIDATE("Order Amount (FCY)");
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 260 ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 270 ;   ;Expected Order Date ;Date          ;CaptionML=ENU=Expected Order Date }
    { 280 ;   ;Hours               ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line"."Total Line" WHERE (Try-out No.=FIELD(Code)));
                                                   CaptionML=ENU=Hours;
                                                   Editable=No }
    { 285 ;   ;Posted Hours        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Posted Hour Line"."Total Line" WHERE (Try-out No.=FIELD(Code)));
                                                   CaptionML=ENU=Posted Hours;
                                                   Editable=No }
    { 290 ;   ;Changed By          ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Changed By;
                                                   Editable=No }
    { 295 ;   ;Change Date         ;Date          ;CaptionML=ENU=Change Date;
                                                   Editable=No }
    { 300 ;   ;Inserted By         ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Inserted By;
                                                   Editable=No }
    { 310 ;   ;Single/Main/Sub Tryout;Option      ;OnValidate=BEGIN
                                                                CASE "Single/Main/Sub Tryout" OF
                                                                  "Single/Main/Sub Tryout"::Single: VALIDATE("Main Try-out",Code);
                                                                  "Single/Main/Sub Tryout"::Main: VALIDATE("Main Try-out",Code);
                                                                  "Single/Main/Sub Tryout"::"Sub Try-out": VALIDATE("Main Try-out",'');
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Single/Main/Sub Tryout;
                                                   OptionCaptionML=ENU=Single,Main Try-out,Sub Try-out;
                                                   OptionString=Single,Main,Sub Try-out }
    { 320 ;   ;Main Try-out        ;Code20        ;TableRelation=IF (Single/Main/Sub Tryout=CONST(Sub Try-out)) Try-out.Code WHERE (Single/Main/Sub Tryout=CONST(Main))
                                                                 ELSE Try-out.Code WHERE (Code=FIELD(Main Try-out));
                                                   OnValidate=BEGIN
                                                                IF "Single/Main/Sub Tryout" = "Single/Main/Sub Tryout"::Main THEN BEGIN
                                                                  IF "Main Try-out" <> Code THEN
                                                                    "Main Try-out" := xRec."Main Try-out";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Main Try-out }
    { 330 ;   ;Try-out Folder      ;Text150       ;CaptionML=ENU=Try-out Folder }
    { 335 ;   ;Cost Estimate       ;Decimal       ;CaptionML=ENU=Cost Estimate }
    { 340 ;   ;Scoring Percentage  ;Decimal       ;CaptionML=ENU=Scoring Percentage;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 350 ;   ;SharePoint Site URL ;Text100       ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=SharePoint Site URL }
    { 1000;   ;No. of Features     ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Contact Feature Type" WHERE (Relation Type=FILTER(Try-out),
                                                                                                   Code=FIELD(Code)));
                                                   CaptionML=ENU=No. of Features;
                                                   Editable=No }
    { 1010;   ;Try-Out Not Active  ;Boolean       ;FieldClass=FlowField;
                                                   InitValue=Yes;
                                                   CalcFormula=Lookup("Try-out Status"."Not Active" WHERE (Type=FILTER(Try-out),
                                                                                                           Code=FIELD(Status)));
                                                   CaptionML=ENU=Try-Out Not Active;
                                                   Description=RTC;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;City,Address                             }
    {    ;Single/Main/Sub Tryout,Code              }
    {    ;Expected Order Date                      }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ContMgtSetup@11012000 : Record 5079;
      TryRec@11012002 : Record 11012750;
      PostCode@1210190006 : Record 225;
      NoSeriesMgt@1210190005 : Codeunit 396;
      Text000@1210190003 : TextConst 'ENU=%1 %2 can not be deleted because one or more Try-Out Quotes are present';
      Text001@1100525000 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      DPA_Management@1100000999 : Codeunit 11012783;
      ProjectSiteMgt@1100528300 : Codeunit 11012282;

    PROCEDURE AssistEdit@2(OldTry@11012000 : Record 11012750) : Boolean;
    BEGIN
      WITH TryRec DO BEGIN
        TryRec := Rec;
        ContMgtSetup.GET;
        ContMgtSetup.TESTFIELD("Try-out Nos.");
        IF NoSeriesMgt.SelectSeries(ContMgtSetup."Try-out Nos.",OldTry."No. Series","No. Series") THEN BEGIN
          ContMgtSetup.GET;
          ContMgtSetup.TESTFIELD("Try-out Nos.");
          NoSeriesMgt.SetSeries(Code);
          Rec := TryRec;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimMgt@1100525000 : Codeunit 408;
      DimValRec@1100525001 : Record 349;
    BEGIN
      //db, 19-08-09: M15896
      IF ShortcutDimCode = '' THEN EXIT;
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.GetDimValueRec(FieldNumber, ShortcutDimCode, DimValRec, TRUE,'');
      IF NOT DimMgt.CheckDimValue(DimValRec."Dimension Code",ShortcutDimCode) THEN
        ERROR(DimMgt.GetDimErr);
    END;

    PROCEDURE AddressLookup@1100485000();
    VAR
      ShiptoAddress@1100485000 : Record 222;
      AddressList@1100525000 : Page 301;
    BEGIN
      //db, 16-08-05
      ShiptoAddress.SETRANGE("Project Address", TRUE);
      AddressList.LOOKUPMODE := TRUE;
      AddressList.SETTABLEVIEW(ShiptoAddress);
      IF AddressList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        AddressList.GETRECORD(ShiptoAddress);
        Address := ShiptoAddress.Address;
        "Address 2" := ShiptoAddress."Address 2";
        City := ShiptoAddress.City;
        "Post Code" := ShiptoAddress."Post Code";
        County := ShiptoAddress.County;
        "Country/Region Code" := ShiptoAddress."Country/Region Code";
        //"Territory Code" := ShiptoAddress."Territory Code";
      END;
    END;

    PROCEDURE FillModificationData@1100485001();
    BEGIN
      "Change Date" := TODAY;
      "Changed By" := USERID;
    END;

    PROCEDURE CreateFeatures@1100525000();
    VAR
      ContactFeatRec@1100525000 : Record 11012753;
    BEGIN
      ContactFeatRec.SETRANGE(Code, Code);
      ContactFeatRec.Code := Code;
      ContactFeatRec.SETRANGE("Relation Type", ContactFeatRec."Relation Type"::"Try-out");
      ContactFeatRec."Relation Type" := ContactFeatRec."Relation Type"::"Try-out";
      IF ContactFeatRec.ISEMPTY THEN
        ContactFeatRec.CreateFeatureTypes;
    END;

    PROCEDURE DisplayMap@8();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FIND('-') THEN
        MapMgt.MakeSelection(DATABASE::"Try-out",GETPOSITION)
      ELSE
        MESSAGE(Text001);
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Global Dimension 1 Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::"Try-out");
      IF Dimension1Code <> '' THEN
        "Global Dimension 1 Code" := Dimension1Code;

      IF "Global Dimension 1 Code" <> '' THEN
        VALIDATE("Global Dimension 1 Code");
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012750) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012750');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Try-out", "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    PROCEDURE CheckFixEstimateStatus@1210190002();
    VAR
      TryOutStatusRec@1210190000 : Record 11012759;
      TryOutSuccessorRec@1210190002 : Record 11012761;
      EstRec@1210190001 : Record 11012151;
    BEGIN
      //X007
      IF NOT TryOutStatusRec.GET(TryOutStatusRec.Type::"Try-out", Status) THEN EXIT;
      IF TryOutStatusRec."Fix Estimate" = FALSE THEN EXIT;

      TryOutSuccessorRec.SETRANGE("Try-out No.", Code);
      TryOutSuccessorRec.SETFILTER("Estimate No.", '<>%1', '');
      IF TryOutSuccessorRec.FINDSET THEN BEGIN
        REPEAT
          IF EstRec.GET(TryOutSuccessorRec."Estimate No.") THEN BEGIN
            EstRec.Fixed := TryOutStatusRec."Fix Estimate";
            EstRec.MODIFY;
          END;
        UNTIL TryOutSuccessorRec.NEXT = 0;
      END;
    END;

    PROCEDURE ShowTodos@1100485006();
    VAR
      Todo@1100528700 : Record 5080;
    BEGIN
      Todo.SETCURRENTKEY("Try-out No.",Date,Closed);
      Todo.SETRANGE("Try-out No.", Code);
      Todo.SETRANGE("System To-do Type", Todo."System To-do Type"::Organizer);
      PAGE.RUNMODAL(PAGE::"To-do List", Todo);
    END;

    PROCEDURE TogglePublishCRMPort@1100528100();
    VAR
      CRMPortRelation@1100528100 : Record 11128540;
    BEGIN
      //**4PS
      IF NOT CRMPortRelation.READPERMISSION THEN
        EXIT;

      IF CRMPortRelation.GET(CRMPortRelation."Relation Type"::"Try-out", Code) THEN
        CRMPortRelation.DELETE(TRUE)
      ELSE
        SetPublishCRMPort;
    END;

    PROCEDURE GetPublishCRMPort@1100528101() : Boolean;
    VAR
      CRMPortRelation@1100525001 : Record 11128540;
    BEGIN
      //**4PS
      IF NOT CRMPortRelation.READPERMISSION THEN
        EXIT(FALSE);

      EXIT(CRMPortRelation.GET(CRMPortRelation."Relation Type"::"Try-out", Code));
    END;

    PROCEDURE SetPublishCRMPort@1100528102();
    VAR
      CRMPortRelation@1100525000 : Record 11128540;
    BEGIN
      //**4PS
      IF NOT CRMPortRelation.READPERMISSION THEN
        EXIT;

      CRMPortRelation."Relation Type" := CRMPortRelation."Relation Type"::"Try-out";
      CRMPortRelation."Relation Code" :=  Code;
      CRMPortRelation.INSERT(TRUE);
    END;

    PROCEDURE TrySetPublishCRMPort@1100528103();
    VAR
      CRMPortRelation@1100525000 : Record 11128540;
    BEGIN
      //**4PS
      IF NOT CRMPortRelation.READPERMISSION THEN
        EXIT;

      SetPublishCRMPort;
    END;

    PROCEDURE ValidateOrderAmountLCY@1100530000();
    VAR
      CurrencyExchangeRateRec@1100528200 : Record 330;
      Currency2@1100530000 : Record 4;
      CurrencyDate@1100528201 : Date;
    BEGIN
      Currency2.InitRoundingPrecision;

      IF "Currency Code" <> '' THEN BEGIN
        CurrencyDate := "Creation Date";
        IF (CurrencyDate = 0D) THEN
          CurrencyDate := TODAY;

        "Order Amount (FCY)" :=
        ROUND(
          CurrencyExchangeRateRec.ExchangeAmtLCYToFCY(
            1, '', CurrencyDate, "Currency Code", "Order Amount (LCY)",
            CurrencyExchangeRateRec.ExchangeRate(1, '', CurrencyDate, "Currency Code",TRUE),TRUE),
            Currency2."Amount Rounding Precision");
      END ELSE
        "Order Amount (FCY)" := ROUND("Order Amount (LCY)",Currency2."Amount Rounding Precision");
    END;

    BEGIN
    {
      **4PS01 Jan ter Harmsel, Call 2094  At Rename also update references in documents.
      That table is on database level and will not be handled automatically.
    }
    END.
  }
}

