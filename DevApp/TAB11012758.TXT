OBJECT Table 11012758 Try-out Quote
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11012758=d;
    DataCaptionFields=Code,Description;
    OnInsert=BEGIN
               IF Code = '' THEN BEGIN
                 ContMgtSetup.GET;
                 ContMgtSetup.TESTFIELD(ContMgtSetup."Try-out Quote Nos.");
                 NoSeriesMgt.InitSeries(ContMgtSetup."Try-out Quote Nos.",xRec."No. Series",0D,Code,"No. Series");
               END;
               "Creation Date" := TODAY;
               "Inserted By" := USERID;

               CreateFeatures;

               UpdateHistory;

               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05
             END;

    OnModify=BEGIN
               FillModificationData;

               UpdateHistory;
             END;

    OnDelete=VAR
               CommLineRec@1210190001 : Record 97;
               TryQuoteLineRec@1210190003 : Record 11125864;
               TrySuccRec@1210190000 : Record 11012761;
               ActRec@1210190002 : Record 5080;
               VersRec@1210190004 : Record 11012763;
               CompRec@1210190005 : Record 11012762;
               lvDocRelRec@1210190006 : Record 11012407;
               ContactFeatureType@1100525000 : Record 11012753;
               TryoutQuoteHistory@1210190007 : Record 11125865;
               PrognosisDetail@1100528700 : Record 11012884;
               CRMPortRelation@1100525001 : Record 11128540;
               TryoutQuoteResponsPerson@1100525002 : Record 11125867;
             BEGIN
               ContactFeatureType.RESET;
               ContactFeatureType.SETRANGE("Relation Type", ContactFeatureType."Relation Type"::"Try-out Quote");
               ContactFeatureType.SETRANGE(Code,Code);
               ContactFeatureType.DELETEALL;

               TryQuoteLineRec.SETRANGE("Try-out Quote", Code);
               TryQuoteLineRec.DELETEALL; //Do not use TRUE, Tryout is updated here, which can not be handled by SQL without an error message

               TrySuccRec.SETRANGE("Try-out Quote",Code);
               TrySuccRec.DELETEALL(TRUE);

               CompRec.SETRANGE("Try-out Quote", Code);
               CompRec.DELETEALL(TRUE);

               VersRec.SETRANGE("Try-out Quote", Code);
               VersRec.DELETEALL(TRUE);

               ActRec.SETRANGE("Try-out Quote No.",Code);
               ActRec.DELETEALL(TRUE);

               CommLineRec.SETRANGE("Table Name",CommLineRec."Table Name"::"Try-out Quote");
               CommLineRec.SETRANGE("No.",Code);
               CommLineRec.DELETEALL;

               lvDocRelRec.SETRANGE("Document Type",lvDocRelRec."Document Type"::"Try-out Quote");
               lvDocRelRec.SETRANGE("No.",Code);
               lvDocRelRec.DELETEALL;

               TryoutQuoteHistory.SETRANGE("Try-out Quote No.", Code);
               TryoutQuoteHistory.DELETEALL;

               PrognosisDetail.SETCURRENTKEY("Source Code");
               PrognosisDetail.SETRANGE("Source Code", Code);
               PrognosisDetail.DELETEALL;

               IF CRMPortRelation.GET(CRMPortRelation."Relation Type"::"Try-out Quote", Code) THEN
                 CRMPortRelation.DELETE(TRUE);

               TryoutQuoteResponsPerson.SETRANGE("Try-out Quote No.", Code);
               TryoutQuoteResponsPerson.DELETEALL;
             END;

    CaptionML=ENU=Try-out Quote;
    LookupPageID=Page11012765;
    DrillDownPageID=Page11012765;
  }
  FIELDS
  {
    { 10  ;   ;Code                ;Code20        ;OnValidate=BEGIN
                                                                IF Code <> xRec.Code THEN BEGIN
                                                                  ContMgtSetup.GET;
                                                                  NoSeriesMgt.TestManual(ContMgtSetup."Try-out Quote Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Code }
    { 20  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 25  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 30  ;   ;Address             ;Text50        ;OnValidate=VAR
                                                                lDummy@1210190000 : Text[30];
                                                              BEGIN
                                                              END;

                                                   CaptionML=ENU=Address;
                                                   Editable=Yes }
    { 40  ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2;
                                                   Editable=Yes }
    { 50  ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                Postcode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City;
                                                   Editable=Yes }
    { 60  ;   ;County              ;Text30        ;CaptionML=ENU=County;
                                                   Editable=Yes }
    { 65  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region Code }
    { 70  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=VAR
                                                                PostCode@11012000 : Record 225;
                                                              BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code;
                                                   Editable=Yes }
    { 75  ;   ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   CaptionML=ENU=Territory Code }
    { 80  ;   ;Salesperson Code    ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Salesperson Name");
                                                              END;

                                                   CaptionML=ENU=Salesperson Code }
    { 90  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Try-out Quote),
                                                                                           No.=FIELD(Code)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 100 ;   ;Creation Date       ;Date          ;CaptionML=ENU=Creation Date }
    { 110 ;   ;Expected Starting Date;Date        ;CaptionML=ENU=Expected Starting Date }
    { 120 ;   ;Expected End Date   ;Date          ;CaptionML=ENU=Expected End Date }
    { 130 ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");  //db, 19-08-09
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 135 ;   ;Global Dimension 1 Name;Text50     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Dimension Value".Name WHERE (Global Dimension No.=CONST(1),
                                                                                                    Code=FIELD(Global Dimension 1 Code)));
                                                   CaptionML=ENU=Global Dimension 1 Name;
                                                   CaptionClass='1,11012000,1' }
    { 140 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 150 ;   ;Send Date           ;Date          ;CaptionML=ENU=Send Date }
    { 160 ;   ;Status              ;Code20        ;TableRelation="Try-out Status".Code WHERE (Type=CONST(Try-out Quote));
                                                   OnValidate=BEGIN
                                                                IF (Status <> '') AND (Status <> xRec.Status) THEN BEGIN
                                                                  "Status changed on" := TODAY;
                                                                  CheckFixEstimateStatus;  //X007
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Status }
    { 170 ;   ;Offered Amount (LCY);Decimal       ;OnValidate=BEGIN
                                                                ValidateOfferedAmountLCY;
                                                              END;

                                                   CaptionML=ENU=Offered Amount (LCY);
                                                   AutoFormatType=1 }
    { 171 ;   ;Offered Amount (FCY);Decimal       ;OnValidate=VAR
                                                                CurrencyExchangeRateRec@1100528202 : Record 330;
                                                                Currency2@1100528200 : Record 4;
                                                                CurrencyDate@1100528201 : Date;
                                                              BEGIN
                                                                Currency2.InitRoundingPrecision;

                                                                IF "Currency Code" <> '' THEN BEGIN

                                                                  CurrencyDate := "Creation Date";
                                                                  IF (CurrencyDate = 0D) THEN
                                                                    CurrencyDate := TODAY;

                                                                  "Offered Amount (LCY)" := ROUND(
                                                                    CurrencyExchangeRateRec.ExchangeAmtFCYToLCY(
                                                                      1, '', CurrencyDate, "Currency Code","Offered Amount (FCY)",
                                                                       CurrencyExchangeRateRec.ExchangeRate(1, '', CurrencyDate, "Currency Code",TRUE),TRUE),
                                                                       Currency2."Amount Rounding Precision");

                                                                END ELSE BEGIN
                                                                  "Offered Amount (LCY)" := ROUND("Offered Amount (FCY)",Currency2."Amount Rounding Precision");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Offered Amount;
                                                   AutoFormatType=1 }
    { 172 ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                VALIDATE("Offered Amount (FCY)");
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 175 ;   ;Cost Price          ;Decimal       ;CaptionML=ENU=Cost Price;
                                                   AutoFormatType=1 }
    { 180 ;   ;Quote Text          ;Text250       ;CaptionML=ENU=Quote Text }
    { 190 ;   ;Contact No.         ;Code20        ;TableRelation=Contact.No.;
                                                   OnValidate=VAR
                                                                ContactBusinessRel@1100525000 : Record 5054;
                                                              BEGIN
                                                                IF "Copy Address from" IN ["Copy Address from"::Company, "Copy Address from"::CompanyVisit,
                                                                                           "Copy Address from"::CompanyAlternative] THEN
                                                                  VALIDATE("Copy Address from");

                                                                IF "Contact No." <> xRec."Contact No." THEN BEGIN
                                                                  "Contact Person No." := '';
                                                                  "Salesperson Code" := '';

                                                                  IF "Contact No." <> '' THEN BEGIN
                                                                    ProspectRec.ValidateIsContact("Contact No.");
                                                                    ProspectRec.GET("Contact No.");

                                                                    IF "Salesperson Code" = '' THEN
                                                                      IF ProspectRec."Salesperson Code" <> '' THEN BEGIN
                                                                        CheckContactSalesRelation(ProspectRec."Company No.", ProspectRec."Salesperson Code");
                                                                        VALIDATE("Salesperson Code", ProspectRec."Salesperson Code");
                                                                      END ELSE
                                                                        IF TryRec.GET("Try-out No.") THEN
                                                                          VALIDATE("Salesperson Code", TryRec."Salesperson Code");

                                                                    "Bill-to Customer No." := '';
                                                                    ContactBusinessRel.RESET;
                                                                    ContactBusinessRel.SETCURRENTKEY("Link to Table","Contact No.");
                                                                    ContactBusinessRel.SETRANGE("Link to Table", ContactBusinessRel."Link to Table"::Customer);
                                                                    ContactBusinessRel.SETRANGE("Contact No.", "Contact No.");
                                                                    IF ContactBusinessRel.FINDFIRST THEN BEGIN
                                                                      CustRec.GET(ContactBusinessRel."No.");
                                                                      "Bill-to Customer No." := CustRec."Bill-to Customer No.";
                                                                      "Service Warranty Code" := CustRec."Service Warranty Code"; //DP00121
                                                                    END;
                                                                    VALIDATE("Bill-to Customer No.");
                                                                  END;
                                                                END;

                                                                ModifyTryOutQuoteLine;
                                                                CALCFIELDS("Contact Name", "Contact Name 2");
                                                              END;

                                                   CaptionML=ENU=Contact No. }
    { 200 ;   ;Contact Person No.  ;Code20        ;TableRelation=Contact.No. WHERE (Company No.=FIELD(Contact No.),
                                                                                    Type=CONST(Person));
                                                   OnValidate=BEGIN
                                                                IF "Contact Person No." <> '' THEN BEGIN
                                                                  IF "Copy Address from" IN ["Copy Address from"::Person, "Copy Address from"::PersonVisit,
                                                                                             "Copy Address from"::PersonAlternative  ] THEN
                                                                    VALIDATE("Copy Address from");

                                                                  TESTFIELD("Contact No.");
                                                                  ContactRec.GET("Contact Person No.");
                                                                  ContactRec.TESTFIELD(Blocked, FALSE);
                                                                  ProspectRec.GET("Contact No.");
                                                                  IF ContactRec."Salesperson Code" <> '' THEN BEGIN
                                                                    CheckContactSalesRelation(ContactRec."Company No.", ContactRec."Salesperson Code");
                                                                    VALIDATE("Salesperson Code",ContactRec."Salesperson Code");
                                                                  END ELSE
                                                                    IF ProspectRec."Salesperson Code" <> '' THEN
                                                                      VALIDATE("Salesperson Code",ProspectRec."Salesperson Code")
                                                                    ELSE
                                                                      IF TryRec.GET("Try-out No.") THEN
                                                                        VALIDATE("Salesperson Code",TryRec."Salesperson Code");
                                                                END ELSE
                                                                  VALIDATE("Contact No.");

                                                                ModifyTryOutQuoteLine;
                                                              END;

                                                   CaptionML=ENU=Contact Person No. }
    { 210 ;   ;Try-out No.         ;Code20        ;TableRelation=Try-out.Code;
                                                   OnValidate=BEGIN
                                                                IF "Copy Address from" = "Copy Address from"::"Try Out" THEN
                                                                  VALIDATE("Copy Address from");

                                                                IF ("Try-out No." <> xRec."Try-out No.") AND ("Try-out No." <> '') THEN BEGIN  //db, 17-12-12: C001977
                                                                  TryRec.GET("Try-out No.");
                                                                  "Expected Order Date" := TryRec."Expected Order Date";
                                                                  "Expected Starting Date" := TryRec."Expected Starting Date";
                                                                  "Expected End Date" := TryRec."Expected End Date";
                                                                  IF "Offered Amount (FCY)" = 0 THEN
                                                                    VALIDATE("Currency Code", TryRec."Currency Code");
                                                                END;

                                                                IF Code <> '' THEN BEGIN  //*T001109 .n
                                                                  SuccRec.SETFILTER("Try-out No.", '<>%1', "Try-out No.");
                                                                  SuccRec.SETRANGE("Try-out Quote", Code);
                                                                  IF SuccRec.FIND('-') THEN BEGIN
                                                                    REPEAT
                                                                      SuccRec2.COPY(SuccRec);
                                                                      SuccRec2.SETRANGE("Try-out No.", "Try-out No.");
                                                                      IF NOT SuccRec2.FIND('+') THEN SuccRec2.INIT;
                                                                      LastLino := SuccRec2."Line No.";

                                                                      SuccRec2.COPY(SuccRec);
                                                                      SuccRec2."Try-out No." := "Try-out No.";
                                                                      SuccRec2."Line No." := LastLino + 10000;
                                                                      SuccRec2.INSERT;
                                                                      SuccRec.DELETE;
                                                                    UNTIL SuccRec.NEXT = 0;
                                                                  END;
                                                                END;  //*T001109 .n
                                                              END;

                                                   CaptionML=ENU=Try-out No. }
    { 220 ;   ;Contact Name        ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Contact No.)));
                                                   CaptionML=ENU=Contact Name;
                                                   Editable=No }
    { 221 ;   ;Contact Name 2      ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Name 2" WHERE (No.=FIELD(Contact No.)));
                                                   CaptionML=ENU=Contact Name 2;
                                                   Editable=No }
    { 230 ;   ;Contact Person Name ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Contact Person No.)));
                                                   CaptionML=ENU=Contact Person Name;
                                                   Editable=No }
    { 240 ;   ;Try-out Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Try-out.Description WHERE (Code=FIELD(Try-out No.)));
                                                   CaptionML=ENU=Try-out Description;
                                                   Editable=No }
    { 250 ;   ;Salesperson Name    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Salesperson Code)));
                                                   CaptionML=ENU=Salesperson Name;
                                                   Editable=No }
    { 260 ;   ;Apply Date          ;Date          ;CaptionML=ENU=Apply Date }
    { 270 ;   ;Assign Date         ;Date          ;CaptionML=ENU=Assign Date }
    { 275 ;   ;Assign Time         ;Time          ;CaptionML=ENU=Assign Time }
    { 280 ;   ;Register Date       ;Date          ;CaptionML=ENU=Register Date }
    { 285 ;   ;Order Date          ;Date          ;CaptionML=ENU=Order Date }
    { 286 ;   ;Expected Order Date ;Date          ;CaptionML=ENU=Expected Order Date }
    { 290 ;   ;Tender Date         ;Date          ;CaptionML=ENU=Tender Date }
    { 295 ;   ;Tender Time         ;Time          ;CaptionML=ENU=Tender Time }
    { 300 ;   ;Lost To             ;Code20        ;TableRelation=Contact;
                                                   CaptionML=ENU=Lost To }
    { 310 ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 700 ;   ;Discipline          ;Code10        ;TableRelation=Discipline;
                                                   CaptionML=ENU=Discipline }
    { 705 ;   ;Discipline Description;Text30      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Discipline.Description WHERE (Code=FIELD(Discipline)));
                                                   CaptionML=ENU=Discipline Description;
                                                   Editable=No }
    { 710 ;   ;Try Out City        ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Try-out.City WHERE (Code=FIELD(Try-out No.)));
                                                   CaptionML=ENU=Try Out City;
                                                   Editable=No }
    { 715 ;   ;Installment Scheme Project;Code10  ;TableRelation="Installment Scheme".Code WHERE (Type=CONST(Project));
                                                   CaptionML=ENU=Installment Scheme Project }
    { 716 ;   ;Installment Scheme Service;Code10  ;TableRelation="Installment Scheme".Code WHERE (Type=CONST(Service Order));
                                                   CaptionML=ENU=Installment Scheme Service }
    { 720 ;   ;Copy Address from   ;Option        ;InitValue=Company;
                                                   OnValidate=VAR
                                                                lvAddressFoundBln@1100525000 : Boolean;
                                                              BEGIN
                                                                IF "Copy Address from" <> "Copy Address from"::"Service Location" THEN
                                                                  "Service Location" := '';

                                                                CASE "Copy Address from" OF
                                                                  "Copy Address from"::"Try Out":
                                                                    BEGIN
                                                                      "Alternative Address" := '';
                                                                      IF TryRec.GET("Try-out No.") THEN BEGIN
                                                                        Address := TryRec.Address;
                                                                        "Address 2" := TryRec."Address 2";
                                                                        City := TryRec.City;
                                                                        County := TryRec.County;
                                                                        "Country/Region Code":= TryRec."Country/Region Code";
                                                                        "Post Code" := TryRec."Post Code";
                                                                        "Territory Code":= TryRec."Territory Code";
                                                                      END;
                                                                    END;
                                                                  "Copy Address from"::Company:
                                                                    BEGIN
                                                                      "Alternative Address" := '';
                                                                      IF ContactRec.GET("Contact No.") THEN BEGIN
                                                                        Address := ContactRec.Address;
                                                                        "Address 2" := ContactRec."Address 2";
                                                                        City := ContactRec.City;
                                                                        County := ContactRec.County;
                                                                        "Country/Region Code":= ContactRec."Country/Region Code";
                                                                        "Post Code" := ContactRec."Post Code";
                                                                        "Territory Code":= ContactRec."Territory Code";
                                                                      END;
                                                                   END;

                                                                  //20061009/4PS.e
                                                                  "Copy Address from"::CompanyVisit:
                                                                    BEGIN
                                                                      "Alternative Address" := '';
                                                                      IF ContactRec.GET("Contact No.") THEN BEGIN
                                                                        Address := ContactRec."Visit Address";
                                                                        "Address 2" := ContactRec."Visit Address 2";
                                                                        City := ContactRec."Visit Address City";
                                                                        County := ContactRec."Visit Address County";
                                                                        "Country/Region Code" := ContactRec."Visit Address Country/Region";
                                                                        "Post Code" := ContactRec."Visit Address Post Code";
                                                                //        "Territory Code":= ContactRec."Territory Code";
                                                                      END;
                                                                   END;

                                                                  "Copy Address from"::CompanyAlternative:
                                                                    BEGIN
                                                                      "Alternative Address" := '';
                                                                      Address := '';
                                                                      "Address 2" := '';
                                                                      City := '';
                                                                      County := '';
                                                                      "Country/Region Code" := '';
                                                                      "Post Code" := '';
                                                                      "Territory Code":= '';
                                                                   END;

                                                                  "Copy Address from"::Person:
                                                                    BEGIN
                                                                     "Alternative Address" := '';
                                                                      IF ContactRec.GET("Contact Person No.") THEN BEGIN
                                                                        Address := ContactRec.Address;
                                                                        "Address 2" := ContactRec."Address 2";
                                                                        City := ContactRec.City;
                                                                        County := ContactRec.County;
                                                                        "Country/Region Code":= ContactRec."Country/Region Code";
                                                                        "Post Code" := ContactRec."Post Code";
                                                                        "Territory Code":= ContactRec."Territory Code";
                                                                      END;
                                                                    END;
                                                                  "Copy Address from"::PersonVisit:
                                                                    BEGIN
                                                                      "Alternative Address" := '';
                                                                      IF ContactRec.GET("Contact Person No.") THEN BEGIN
                                                                        Address := ContactRec."Visit Address";
                                                                        "Address 2" := ContactRec."Visit Address 2";
                                                                        City := ContactRec."Visit Address City";
                                                                        County := ContactRec."Visit Address County";
                                                                        "Country/Region Code" := ContactRec."Visit Address Country/Region";
                                                                        "Post Code" := ContactRec."Visit Address Post Code";
                                                                //        "Territory Code":= ContactRec."Territory Code";
                                                                      END;
                                                                   END;

                                                                  "Copy Address from"::PersonAlternative:
                                                                    BEGIN
                                                                      "Alternative Address" := '';
                                                                      Address := '';
                                                                      "Address 2" := '';
                                                                      City := '';
                                                                      County := '';
                                                                      "Country/Region Code" := '';
                                                                      "Post Code" := '';
                                                                      "Territory Code":= '';
                                                                   END;

                                                                  //20061009/4PS.e

                                                                  //WWB.sn - 14 okt 2008
                                                                  "Copy Address from"::"Bill-to":
                                                                    BEGIN
                                                                      lvAddressFoundBln := FALSE;
                                                                      //First find the linked Service Order
                                                                      SuccRec3.SETRANGE("Try-out Quote", Code);
                                                                      IF SuccRec3.FINDFIRST THEN BEGIN
                                                                        IF ServiceOrderRec.GET(SuccRec3."Service Order No.") THEN BEGIN
                                                                          IF ServiceOrderRec."Bill-to Customer No." <> '' THEN BEGIN
                                                                            IF CustRec.GET(ServiceOrderRec."Bill-to Customer No.") THEN BEGIN
                                                                              Address := CustRec.Address;
                                                                              "Address 2" := CustRec."Address 2";
                                                                              City := CustRec.City;
                                                                              County := CustRec.County;
                                                                              "Country/Region Code" := CustRec."Country/Region Code";
                                                                              "Post Code" := CustRec."Post Code";
                                                                              "Territory Code":= CustRec."Territory Code";
                                                                              lvAddressFoundBln := TRUE;
                                                                            END;
                                                                          END
                                                                        END;
                                                                      END;

                                                                      IF NOT lvAddressFoundBln THEN BEGIN
                                                                        "Alternative Address" := '';
                                                                        Address := '';
                                                                        "Address 2" := '';
                                                                        City := '';
                                                                        County := '';
                                                                        "Country/Region Code" := '';
                                                                        "Post Code" := '';
                                                                        "Territory Code":= '';
                                                                      END;
                                                                    END;
                                                                  //WWB.en

                                                                  "Copy Address from"::"Service Location":
                                                                    BEGIN
                                                                      "Alternative Address" := '';
                                                                      VALIDATE("Service Location");
                                                                    END;

                                                                END;
                                                              END;

                                                   CaptionML=ENU=Copy Address from;
                                                   OptionCaptionML=ENU=Try Out,Company,Company Visit Address,Company Alternative Address,Contact,Contact Visit Address,Contact Alternative Address,Bill To,Service Location;
                                                   OptionString=Try Out,Company,CompanyVisit,CompanyAlternative,Person,PersonVisit,PersonAlternative,Bill-to,Service Location }
    { 721 ;   ;Alternative Address ;Code20        ;TableRelation=IF (Copy Address from=CONST(CompanyAlternative)) "Contact Alt. Address".Code WHERE (Contact No.=FIELD(Contact No.))
                                                                 ELSE IF (Copy Address from=CONST(PersonAlternative)) "Contact Alt. Address".Code WHERE (Contact No.=FIELD(Contact Person No.));
                                                   OnValidate=BEGIN
                                                                CASE "Copy Address from" OF
                                                                  "Copy Address from"::CompanyAlternative:
                                                                    IF ContactalternativeRec.GET("Contact No.", "Alternative Address") THEN BEGIN
                                                                      Address := ContactalternativeRec.Address;
                                                                      "Address 2" := ContactalternativeRec."Address 2";
                                                                      City := ContactalternativeRec.City;
                                                                      County := ContactalternativeRec.County;
                                                                      "Country/Region Code" := ContactalternativeRec."Country/Region Code";
                                                                      "Post Code" := ContactalternativeRec."Post Code";
                                                                      //"Territory Code":= ;
                                                                    END;
                                                                  "Copy Address from"::PersonAlternative:
                                                                    IF ContactalternativeRec.GET("Contact Person No.", "Alternative Address") THEN BEGIN
                                                                      Address := ContactalternativeRec.Address;
                                                                      "Address 2" := ContactalternativeRec."Address 2";
                                                                      City := ContactalternativeRec.City;
                                                                      County := ContactalternativeRec.County;
                                                                      "Country/Region Code" := ContactalternativeRec."Country/Region Code";
                                                                      "Post Code" := ContactalternativeRec."Post Code";
                                                                      //"Territory Code":= ;
                                                                    END;

                                                                END;
                                                              END;

                                                   CaptionML=ENU=Alternative Address }
    { 722 ;   ;Service Location    ;Code20        ;TableRelation="Service Location";
                                                   OnValidate=BEGIN
                                                                IF ServiceLocationRec.GET("Service Location") THEN BEGIN
                                                                  Address := ServiceLocationRec.Address;
                                                                  "Address 2" := ServiceLocationRec."Address 2";
                                                                  City := ServiceLocationRec.City;
                                                                  County := ServiceLocationRec.County;
                                                                //  "Country/Region Code" := ServiceLocationRec."Territory Code";
                                                                  "Country/Region Code" := ServiceLocationRec."Country/Region Code";
                                                                  "Post Code" := ServiceLocationRec."Post Code";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Service Location }
    { 725 ;   ;Contact Filter      ;Code20        ;FieldClass=Normal;
                                                   CaptionML=ENU=Contact Filter;
                                                   Editable=No }
    { 730 ;   ;Contact Phone       ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Phone No." WHERE (No.=FIELD(Contact Filter)));
                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Contact Phone;
                                                   Editable=No }
    { 731 ;   ;Contact Phone 2     ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Phone No. 2" WHERE (No.=FIELD(Contact Filter)));
                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Contact Phone 2;
                                                   Editable=No }
    { 732 ;   ;Contact Mobile Phone;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Mobile Phone No." WHERE (No.=FIELD(Contact Filter)));
                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Contact Mobile Phone;
                                                   Editable=No }
    { 733 ;   ;Contact Fax         ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Fax No." WHERE (No.=FIELD(Contact Filter)));
                                                   CaptionML=ENU=Contact Fax;
                                                   Editable=No }
    { 734 ;   ;Contact E-Mail      ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.E-Mail WHERE (No.=FIELD(Contact Filter)));
                                                   CaptionML=ENU=Contact E-Mail;
                                                   Editable=No }
    { 740 ;   ;Estimate No.        ;Code20        ;TableRelation=Estimate.No.;
                                                   CaptionML=ENU=Estimate No. }
    { 741 ;   ;Estimator           ;Code20        ;TableRelation=Employee.No.;
                                                   OnValidate=BEGIN
                                                                UpdateResponsibility(FIELDNO(Estimator), xRec.Estimator, Estimator);
                                                                CALCFIELDS("Name Estimator");
                                                              END;

                                                   CaptionML=ENU=Estimator }
    { 742 ;   ;Name Estimator      ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Estimator)));
                                                   CaptionML=ENU=Name Estimator;
                                                   Editable=No }
    { 745 ;   ;Estimate Description;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Estimate.Description WHERE (No.=FIELD(Estimate No.)));
                                                   CaptionML=ENU=Estimate Description;
                                                   Editable=No }
    { 747 ;   ;Estimate Total      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line OLD"."Cumulative Total" WHERE (Estimate No.=FIELD(Estimate No.)));
                                                   CaptionML=ENU=Estimate Total;
                                                   Editable=No }
    { 748 ;   ;Status changed on   ;Date          ;CaptionML=ENU=Status changed on;
                                                   Editable=No }
    { 750 ;   ;Tender No.          ;Code20        ;CaptionML=ENU=Tender No. }
    { 770 ;   ;Your reference      ;Text30        ;CaptionML=ENU=Your reference }
    { 780 ;   ;Change Date         ;Date          ;CaptionML=ENU=Changed on;
                                                   Editable=No }
    { 790 ;   ;Changed By          ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Changed By;
                                                   Editable=No }
    { 800 ;   ;Inserted By         ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Inserted By;
                                                   Editable=No }
    { 810 ;   ;Valid Until         ;Date          ;CaptionML=ENU=Valid Until }
    { 820 ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=VAR
                                                                Customer@1100525000 : Record 18;
                                                              BEGIN
                                                                CALCFIELDS("Bill-to Name", "Bill-to Name 2", "Bill-to Address",
                                                                           "Bill-to Address 2", "Bill-to Post Code", "Bill-to City");

                                                                IF Customer.GET("Bill-to Customer No.") THEN BEGIN
                                                                 IF (Customer."Currency Code" <> "Currency Code") THEN
                                                                   IF  (CONFIRM(Text003, FALSE, Customer."Currency Code") = TRUE) THEN
                                                                     VALIDATE("Currency Code", Customer."Currency Code");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Bill-to Customer No. }
    { 830 ;   ;Bill-to Name        ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Bill-to Name;
                                                   Editable=No }
    { 840 ;   ;Bill-to Name 2      ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Name 2" WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Bill-to Name 2;
                                                   Editable=No }
    { 850 ;   ;Bill-to Address     ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Address WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Bill-to Address;
                                                   Editable=No }
    { 860 ;   ;Bill-to Address 2   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Address 2" WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Bill-to Address 2;
                                                   Editable=No }
    { 870 ;   ;Bill-to Post Code   ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Post Code" WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Bill-to Post Code;
                                                   Editable=No }
    { 880 ;   ;Bill-to City        ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.City WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Bill-to City;
                                                   Editable=No }
    { 890 ;   ;Scoring Percentage  ;Decimal       ;CaptionML=ENU=Scoring Percentage;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 900 ;   ;Leading             ;Boolean       ;CaptionML=ENU=Leading }
    { 910 ;   ;Planning Informed   ;Date          ;CaptionML=ENU=Planning Informed }
    { 920 ;   ;Bill-to Contact No (Person);Code20 ;TableRelation=IF (Bill-to Contact No.=FILTER(<>'')) Contact WHERE (Company No.=FIELD(Bill-to Contact No.))
                                                                 ELSE IF (Bill-to Contact No.=FILTER('')) Contact WHERE (Type=CONST(Person));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Bill-to Contact Name");
                                                              END;

                                                   CaptionML=ENU=Bill-to Contact No (Person) }
    { 930 ;   ;Bill-to Contact Name;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD("Bill-to Contact No (Person)")));
                                                   CaptionML=ENU=Bill-to Contact Name;
                                                   Editable=No }
    { 940 ;   ;Bill-to Contact No. ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Contact Business Relation"."Contact No." WHERE (Link to Table=CONST(Customer),
                                                                                                                       No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Bill-to Contact No.;
                                                   Editable=No }
    { 950 ;   ;SharePoint Site URL ;Text100       ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=SharePoint Site URL }
    { 960 ;   ;Service Warranty Code;Code10       ;TableRelation="Service Warranty";
                                                   CaptionML=ENU=Service Warranty Code }
    { 1010;   ;Try-Out Quote Not Active;Boolean   ;FieldClass=FlowField;
                                                   InitValue=Yes;
                                                   CalcFormula=Lookup("Try-out Status"."Not Active" WHERE (Type=FILTER(Try-out Quote),
                                                                                                           Code=FIELD(Status)));
                                                   CaptionML=ENU=Try-Out Quote Not Active;
                                                   Description=RTC;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Contact No.,Contact Person No.           }
    {    ;Register Date                            }
    {    ;City,Address                             }
    {    ;Try-out No.                              }
    {    ;Expected Order Date                      }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ContMgtSetup@11012000 : Record 5079;
      ProspectRec@1210190001 : Record 5050;
      ContactRec@1210190000 : Record 5050;
      ContactalternativeRec@1100485000 : Record 5051;
      QuoteRec@11012002 : Record 11012758;
      TryRec@1210190003 : Record 11012750;
      SuccRec@1210190009 : Record 11012761;
      SuccRec2@1210190008 : Record 11012761;
      SuccRec3@1100525000 : Record 11012761;
      CustRec@1100525001 : Record 18;
      ServiceOrderRec@1100525002 : Record 11012823;
      Postcode@1210190006 : Record 225;
      NoSeriesMgt@1210190011 : Codeunit 396;
      LastLino@1210190007 : Integer;
      ServiceLocationRec@1100525004 : Record 11012801;
      Text002@1100525005 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      DPA_Management@1100000999 : Codeunit 11012783;
      SkipAddLine@1100525003 : Boolean;
      Text003@1100525006 : TextConst 'ENU=Copy Currency %1 from the Customer?';

    PROCEDURE AssistEdit@2(OldQuote@11012000 : Record 11012758) : Boolean;
    BEGIN
      WITH QuoteRec DO BEGIN
        QuoteRec := Rec;
        ContMgtSetup.GET;
        ContMgtSetup.TESTFIELD("Try-out Quote Nos.");
        IF NoSeriesMgt.SelectSeries(ContMgtSetup."Try-out Quote Nos.",OldQuote."No. Series","No. Series") THEN BEGIN
          ContMgtSetup.GET;
          ContMgtSetup.TESTFIELD("Try-out Quote Nos.");
          NoSeriesMgt.SetSeries(Code);
          Rec := QuoteRec;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimMgt@1100525000 : Codeunit 408;
      DimValRec@1100525001 : Record 349;
    BEGIN
      //db, 19-08-09: M15896
      IF ShortcutDimCode = '' THEN EXIT;
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.GetDimValueRec(FieldNumber, ShortcutDimCode, DimValRec, TRUE,'');
      IF NOT DimMgt.CheckDimValue(DimValRec."Dimension Code",ShortcutDimCode) THEN
        ERROR(DimMgt.GetDimErr);
    END;

    PROCEDURE CheckContactSalesRelation@1210190000(lvContact@1210190001 : Code[20];lvSalesPerson@1210190002 : Code[20]);
    VAR
      ContSalesRec@1210190000 : Record 11012760;
    BEGIN
      IF NOT ContSalesRec.GET(lvContact, lvSalesPerson) THEN BEGIN
        ContSalesRec.INIT;
        ContSalesRec."Contact No." := lvContact;
        ContSalesRec."Salesperson Code" := lvSalesPerson;
        ContSalesRec.INSERT(TRUE);
      END;
    END;

    PROCEDURE FillModificationData@1100485000();
    BEGIN
      "Change Date" := TODAY;
      "Changed By" := USERID;
    END;

    PROCEDURE DisplayMap@8();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FIND('-') THEN
        MapMgt.MakeSelection(DATABASE::"Try-out Quote",GETPOSITION)
      ELSE
        MESSAGE(Text002);
    END;

    PROCEDURE ShowEstimates@1100525000(lvAction@1210190001 : 'Display,Lookup') : Code[20];
    VAR
      lvTryOutSucRec@1210190000 : Record 11012761;
      lvCount@1210190002 : Integer;
    BEGIN
      lvTryOutSucRec.SETRANGE("Try-out Quote",Code);
      lvTryOutSucRec.SETRANGE("Leading Estimate",TRUE);
      lvCount := lvTryOutSucRec.COUNT;
      IF lvCount = 0 THEN EXIT('');

      IF lvAction = lvAction::Display THEN BEGIN
        IF lvCount = 1 THEN BEGIN
          lvTryOutSucRec.FINDFIRST;
          EXIT(lvTryOutSucRec."Estimate No.");
        END ELSE BEGIN
          EXIT(STRSUBSTNO('[%1]', lvCount));
        END;
      END ELSE BEGIN
        lvTryOutSucRec.FINDFIRST;
        REPEAT
          lvTryOutSucRec.MARK := TRUE;
        UNTIL lvTryOutSucRec.NEXT = 0;
        lvTryOutSucRec.MARKEDONLY(TRUE);
        PAGE.RUNMODAL(PAGE::"Try-out Successor", lvTryOutSucRec);
      END;
    END;

    PROCEDURE CreateFeatures@1100525001();
    VAR
      ContactFeatureType@1100525002 : Record 11012753;
    BEGIN
      ContactFeatureType.SETRANGE("Relation Type", ContactFeatureType."Relation Type"::"Try-out Quote");
      ContactFeatureType.SETRANGE(Code, Code);
      ContactFeatureType."Relation Type" := ContactFeatureType."Relation Type"::"Try-out Quote";
      ContactFeatureType.Code := Code;
      IF ContactFeatureType.ISEMPTY THEN
        ContactFeatureType.CreateFeatureTypes;

      IF "Try-out No." <> '' THEN
        ContactFeatureType.CopyFeaturesFromOtherType(
          ContactFeatureType."Relation Type"::"Try-out", "Try-out No.",
          ContactFeatureType."Relation Type"::"Try-out Quote", Code);
    END;

    LOCAL PROCEDURE ModifyTryOutQuoteLine@1210190001();
    VAR
      TryOutQuoteLine@1210190000 : Record 11125864;
      ContactType@1210190001 : Record 11012757;
      LineNo@1210190002 : Integer;
    BEGIN
      IF SkipAddLine THEN //Skip this function on page 11012759
        EXIT;

      TryOutQuoteLine.SETRANGE("Try-out Quote", Code);
      IF TryOutQuoteLine.FINDLAST THEN
        LineNo := TryOutQuoteLine."Line No."
      ELSE
        LineNo := 0;

      ContactType.SETRANGE(Principal, TRUE);
      IF NOT ContactType.FINDFIRST THEN
        EXIT;
      TryOutQuoteLine.SETRANGE("Contact Type", ContactType.Code);

      IF TryOutQuoteLine.ISEMPTY THEN BEGIN
        IF "Contact No." <> '' THEN BEGIN
          TryOutQuoteLine.INIT;
          TryOutQuoteLine."Try-out Quote" := Code;
          LineNo += 10000;
          TryOutQuoteLine."Line No." := LineNo;
          IF "Contact No." <> '' THEN
            TryOutQuoteLine.VALIDATE("Contact No.", "Contact No.");
          IF "Contact Person No." <> '' THEN
            TryOutQuoteLine.VALIDATE("Contact Person No.", "Contact Person No.");
          TryOutQuoteLine.VALIDATE("Contact Type", ContactType.Code);
          TryOutQuoteLine.INSERT;
        END;
      END ELSE BEGIN
        IF xRec."Contact No." <> '' THEN
          TryOutQuoteLine.SETRANGE("Contact No.", xRec."Contact No.");
        IF xRec."Contact Person No." <> '' THEN
          TryOutQuoteLine.SETRANGE("Contact Person No.", xRec."Contact Person No.");
        IF NOT TryOutQuoteLine.FINDFIRST THEN
          EXIT;

        IF "Contact No." = '' THEN
          TryOutQuoteLine.DELETE
        ELSE BEGIN
          TryOutQuoteLine.VALIDATE("Contact No.", "Contact No.");
          TryOutQuoteLine.VALIDATE("Contact Person No.", "Contact Person No.");
          TryOutQuoteLine.VALIDATE("Contact Type", ContactType.Code);
          TryOutQuoteLine.MODIFY;
        END;
      END;
    END;

    PROCEDURE TryOutQuoteMargin@1100528700() : Decimal;
    BEGIN
      EXIT("Offered Amount (LCY)" - "Cost Price");
    END;

    PROCEDURE TryOutQuoteMarginPerc@1100528701() : Decimal;
    BEGIN
      IF "Offered Amount (LCY)" <> 0 THEN
        EXIT((TryOutQuoteMargin / "Offered Amount (LCY)") * 100);
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Global Dimension 1 Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::"Try-out Quote");
      IF Dimension1Code <> '' THEN
        "Global Dimension 1 Code" := Dimension1Code;

      IF "Global Dimension 1 Code" <> '' THEN
        VALIDATE("Global Dimension 1 Code");
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012758) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012758');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Try-out Quote", "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    PROCEDURE CheckFixEstimateStatus@1210190002();
    VAR
      TryOutStatusRec@1210190000 : Record 11012759;
      TryOutSuccessorRec@1210190002 : Record 11012761;
      EstRec@1210190001 : Record 11012151;
    BEGIN
      //X007
      IF NOT TryOutStatusRec.GET(TryOutStatusRec.Type::"Try-out Quote", Status) THEN EXIT;
      IF TryOutStatusRec."Fix Estimate" = FALSE THEN EXIT;

      TryOutSuccessorRec.SETRANGE("Try-out Quote", Code);
      TryOutSuccessorRec.SETFILTER("Estimate No.", '<>%1', '');
      IF TryOutSuccessorRec.FINDSET THEN BEGIN
        REPEAT
          IF EstRec.GET(TryOutSuccessorRec."Estimate No.") THEN BEGIN
            EstRec.Fixed := TryOutStatusRec."Fix Estimate";
            EstRec.MODIFY;
          END;
        UNTIL TryOutSuccessorRec.NEXT = 0;
      END;
    END;

    PROCEDURE EditDocuments@1100528702(ContactNo@1210190004 : Code[20];ContactPersonNo@1210190006 : Code[20];SendMail@1210190002 : Boolean;Recipient@1100528700 : Text[120]);
    VAR
      Tryout@1210190003 : Record 11012750;
      DocumentTemplate@1210190001 : Record 11012401;
      DocumentMailing@1210190000 : Codeunit 11012278;
      RecRef@1100525000 : RecordRef;
      DocumentLinkRIDs@1100525001 : ARRAY [5] OF RecordID;
    BEGIN
      RecRef.GETTABLE(Rec);
      DocumentLinkRIDs[1] := RecRef.RECORDID;

      IF Tryout.GET("Try-out No.") THEN BEGIN
        RecRef.GETTABLE(Tryout);
        DocumentLinkRIDs[2] := RecRef.RECORDID;
      END;

      DocumentMailing.EditDocuments(
        STRSUBSTNO('%1', DocumentTemplate.Type::"Try-out Quote"), DocumentLinkRIDs,
        "Global Dimension 1 Code", ContactNo, ContactPersonNo, SendMail, Recipient);
    END;

    PROCEDURE ShowTodos@1100485006();
    VAR
      Contact@1100528701 : Record 5050;
      Todo@1100528700 : Record 5080;
      Todo2@1100528704 : Record 5080;
      RecRef@1100528702 : RecordRef;
      TodoList@1100528703 : Page 5096;
    BEGIN
      Contact.INIT;
      IF "Contact Person No." <> '' THEN
        Contact.GET("Contact Person No.")
      ELSE IF "Contact No." <> '' THEN
        Contact.GET("Contact No.");

      RecRef.GETTABLE(Todo2);
      Contact.SetContactFilterOnNAVTable(
        RecRef, Todo2.FIELDNAME("Contact No."), Todo2.FIELDNAME("Contact Company No."));
      Todo2.SETVIEW(RecRef.GETVIEW(FALSE));

      Todo.SETCURRENTKEY("Try-out Quote No.",Date,Closed);
      Todo.SETRANGE("Try-out Quote No.", Code);
      IF "Try-out No." <> '' THEN
        Todo.SETRANGE("Try-out No.", "Try-out No.");
      Todo.SETRANGE("System To-do Type", Todo."System To-do Type"::Organizer);

      TodoList.SetContactNoWizard(Todo2.GETFILTER("Contact No."));
      TodoList.SetContactCompanyNoWizard(Todo2.GETFILTER("Contact Company No."));
      TodoList.SETTABLEVIEW(Todo);
      TodoList.RUNMODAL;
    END;

    PROCEDURE UpdateHistory@1210190003();
    VAR
      TryoutQuoteHistory@1210190000 : Record 11125865;
      Update@1210190001 : Boolean;
    BEGIN
      IF ("Offered Amount (LCY)" <> xRec."Offered Amount (LCY)") OR
         ("Cost Price" <> xRec."Cost Price") OR
         ("Scoring Percentage" <> xRec."Scoring Percentage") THEN BEGIN
        TryoutQuoteHistory.INIT;
        TryoutQuoteHistory."Try-out Quote No." := Code;
        TryoutQuoteHistory.Date := TODAY;
        IF TryoutQuoteHistory.FIND('=') THEN
          Update := TRUE;
        TryoutQuoteHistory."Offered Amount" := "Offered Amount (LCY)";
        TryoutQuoteHistory."Cost Price" := "Cost Price";
        TryoutQuoteHistory."Scoring Percentage" := "Scoring Percentage";
        IF Update THEN
          TryoutQuoteHistory.MODIFY
        ELSE
          TryoutQuoteHistory.INSERT;
      END;
    END;

    PROCEDURE LookupSalesPerson@1100525002();
    VAR
      SalespersonByContact@1100525002 : Record 11012760;
      SalespersonPurchaser@1100525001 : Record 13;
      Marked@1100525000 : Integer;
    BEGIN
      //db, 12-03-13: C006126
      IF ("Contact No." <> '') OR ("Contact Person No." <> '') THEN BEGIN
        IF "Contact Person No." <> '' THEN
          SalespersonByContact.SETRANGE("Contact No.", "Contact Person No.")
        ELSE
          SalespersonByContact.SETRANGE("Contact No.", "Contact No.");
        IF SalespersonByContact.FINDSET THEN
          REPEAT
            SalespersonPurchaser.Code := SalespersonByContact."Salesperson Code";
            SalespersonPurchaser.MARK(TRUE);
            Marked := Marked + 1;
          UNTIL SalespersonByContact.NEXT = 0;
        IF Marked > 0 THEN
          SalespersonPurchaser.MARKEDONLY(TRUE);
      END;

      IF PAGE.RUNMODAL(0, SalespersonPurchaser) = ACTION::LookupOK THEN
        VALIDATE("Salesperson Code", SalespersonPurchaser.Code);
    END;

    PROCEDURE TogglePublishCRMPort@1100528100();
    VAR
      CRMPortRelation@1100528100 : Record 11128540;
    BEGIN
      //**4PS
      IF NOT CRMPortRelation.READPERMISSION THEN
        EXIT;

      IF CRMPortRelation.GET(CRMPortRelation."Relation Type"::"Try-out Quote", Code) THEN
        CRMPortRelation.DELETE(TRUE)
      ELSE
        SetPublishCRMPort;
    END;

    PROCEDURE GetPublishCRMPort@1100528101() : Boolean;
    VAR
      CRMPortRelation@1100525001 : Record 11128540;
    BEGIN
      //**4PS
      IF NOT CRMPortRelation.READPERMISSION THEN
        EXIT(FALSE);

      EXIT(CRMPortRelation.GET(CRMPortRelation."Relation Type"::"Try-out Quote", Code));
    END;

    PROCEDURE SetPublishCRMPort@1100528102();
    VAR
      CRMPortRelation@1100525000 : Record 11128540;
    BEGIN
      //**4PS
      IF NOT CRMPortRelation.READPERMISSION THEN
        EXIT;

      CRMPortRelation."Relation Type" := CRMPortRelation."Relation Type"::"Try-out Quote";
      CRMPortRelation."Relation Code" :=  Code;
      CRMPortRelation.INSERT(TRUE);
    END;

    PROCEDURE TrySetPublishCRMPort@1100528103();
    VAR
      CRMPortRelation@1100525000 : Record 11128540;
    BEGIN
      //**4PS
      IF NOT CRMPortRelation.READPERMISSION THEN
        EXIT;

      SetPublishCRMPort;
    END;

    PROCEDURE SetSkipAddLine@1100525003();
    BEGIN
      //**4PS
      SkipAddLine := TRUE;
    END;

    PROCEDURE ValidateOfferedAmountLCY@1100530000();
    VAR
      CurrencyExchangeRateRec@1100528200 : Record 330;
      Currency2@1100530000 : Record 4;
      CurrencyDate@1100528201 : Date;
    BEGIN
      Currency2.InitRoundingPrecision;

      IF "Currency Code" <> '' THEN BEGIN
        CurrencyDate := "Creation Date";
        IF (CurrencyDate = 0D) THEN
          CurrencyDate := TODAY;

        "Offered Amount (FCY)" :=
        ROUND(
          CurrencyExchangeRateRec.ExchangeAmtLCYToFCY(
            1, '', CurrencyDate, "Currency Code", "Offered Amount (LCY)",
            CurrencyExchangeRateRec.ExchangeRate(1, '', CurrencyDate, "Currency Code",TRUE),TRUE),
            Currency2."Amount Rounding Precision");
      END ELSE
        "Offered Amount (FCY)" := ROUND("Offered Amount (LCY)",Currency2."Amount Rounding Precision");
    END;

    PROCEDURE UpdateResponsibility@1100525004(FieldNumber@1100525000 : Integer;EmplNoOld@1100525001 : Code[20];EmplNoNew@1100525002 : Code[20]);
    VAR
      JobsSetup@1100525005 : Record 315;
      TryoutQuoteResponsPerson@1100525004 : Record 11125867;
      TryoutQuoteResponsPerson2@1100525006 : Record 11125867;
      RespCode@1100525003 : Code[10];
    BEGIN
      //C026971
      IF EmplNoNew = EmplNoOld THEN
        EXIT;

      JobsSetup.GET;
      CASE FieldNumber OF
        FIELDNO(Estimator):
          RespCode := JobsSetup."Responsibility Estimator";
      END;
      IF RespCode = '' THEN
        EXIT;

      TryoutQuoteResponsPerson.SETRANGE("Try-out Quote No.", Code);
      TryoutQuoteResponsPerson.SETRANGE(Responsibility, RespCode);
      TryoutQuoteResponsPerson2.SETRANGE("Try-out Quote No.", Code);
      TryoutQuoteResponsPerson2.SETRANGE(Responsibility, RespCode);
      IF EmplNoOld <> '' THEN BEGIN
        TryoutQuoteResponsPerson.SETRANGE("Employee No.", EmplNoOld);
        IF TryoutQuoteResponsPerson.FINDFIRST THEN BEGIN
          TryoutQuoteResponsPerson2.SETRANGE("Employee No.", EmplNoNew);
          IF TryoutQuoteResponsPerson2.FINDFIRST OR (EmplNoNew = '') THEN BEGIN
            TryoutQuoteResponsPerson.DELETE(FALSE);
          END ELSE BEGIN
            TryoutQuoteResponsPerson."Employee No." := EmplNoNew;
            TryoutQuoteResponsPerson.MODIFY(FALSE);
          END;
          EXIT;
        END;
      END;

      IF EmplNoNew <> '' THEN BEGIN
        TryoutQuoteResponsPerson.SETRANGE("Employee No.", EmplNoNew);
        IF NOT TryoutQuoteResponsPerson.FINDFIRST THEN BEGIN
          TryoutQuoteResponsPerson2.RESET;
          TryoutQuoteResponsPerson2.SETRANGE("Try-out Quote No.", Code);
          IF NOT TryoutQuoteResponsPerson2.FINDLAST THEN
            TryoutQuoteResponsPerson2."Line No." := 0;
          TryoutQuoteResponsPerson.RESET;
          TryoutQuoteResponsPerson.INIT;
          TryoutQuoteResponsPerson."Try-out Quote No." := Code;
          TryoutQuoteResponsPerson."Line No." := TryoutQuoteResponsPerson2."Line No." + 10000;
          TryoutQuoteResponsPerson.Responsibility := RespCode;
          TryoutQuoteResponsPerson."Employee No." := EmplNoNew;
          TryoutQuoteResponsPerson.INSERT(FALSE);
        END;
      END;
    END;

    BEGIN
    {
      //20061009/4PS : Modified field ["Copy Address from"] added option [CompanyVisit,Person,PersonVisit]
    }
    END.
  }
}

