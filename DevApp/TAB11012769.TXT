OBJECT Table 11012769 E-Mail Body Text
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=E-Mail Body Text;
  }
  FIELDS
  {
    { 1   ;   ;Usage               ;Option        ;CaptionML=ENU=Usage;
                                                   OptionCaptionML=ENU=" ,Sales Invoice,Sales Credit Memo,Sales Quote,Sales Order,,,,,,,Purchase Quote,Purchase Order,Purchase Quote Thanks Letter,,,,,,,,Service Order Status,Service Order Worksheet,Work Order Subcontractor,Subcontractor not Finished,Subcontractor Invoice not Received,Subcontractor shifted Expected Dates,,,,,PlantOrderStatus,Plant Transport Order,Plant Exit Order,Plant Order,Reminder,Sales Shipment,,,,,Maintenance Appointment Proposal,Maintenance Appointment,Work Order Worksheet,,,,DPT Login (FBA),DPT Login (AD),DPT Login (Quote Request),DPT Quote Reminder,Confirm Reset SPT Password,Receive Temporary SPT Password,Receive New SPT Password,Confirm Reset SCPT Password,Receive Temporary SCPT Password,Receive New SCPT Password";
                                                   OptionString=[ ,Sales Invoice,Sales Credit Memo,Sales Quote,Sales Order,,,,,,,Purchase Quote,Purchase Order,Purchase Quote Thanks Letter,,,,,,,,Service Order Status,Service Order Worksheet,Work Order Subcontractor,Subcontractor not Finished,Subcontractor Invoice not Received,Subcontractor shifted Expected Dates,,,,,PlantOrderStatus,Plant Transport Order,Plant Exit Order,Plant Order,Reminder,Sales Shipment,,,,,Maintenance Appointment Proposal,Maintenance Appointment,Work Order Worksheet,,,,PPT Login (FBA),PPT Login (AD),PPT Login (Quote Request),PPT Quote Reminder,Confirm Reset SPT Password,Receive Temporary SPT Password,Receive New SPT Password,Confirm Reset SCPT Password,Receive Temporary SCPT Password,Receive New SCPT Password];
                                                   NotBlank=Yes }
    { 2   ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 9   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 10  ;   ;Text                ;Text250       ;CaptionML=ENU=Text }
    { 100 ;   ;Table No.           ;Option        ;OnValidate=BEGIN
                                                                IF "Table No." <> xRec."Table No." THEN
                                                                  "Table Function" := "Table Function"::" ";
                                                              END;

                                                   CaptionML=ENU=Table;
                                                   OptionCaptionML=ENU=" ,Company Info,,,,,Sales Invoice,Sales Credit Memo,Sales Quote,Sales Order,Sales Shipment,Purchase Order,Purchase Quote,Option Quote,Plot,,Service Order,Service Order Extension,Planning Agreement,Plant Transport Order,Plant Exit Order,Plant Order,Reminder,Vendor,,,,,SharePoint Setup,Project Portal Login,Contact,Employee,Project,Project Purchase Action,,,,,Work Order,Service Portal Login,Subcontrator Portal Login,Extension Contract,,,,Consenter,Salesperson/Purchaser,Problem Text,Internal Text,Resolve Text,Cause Text,Debrief Text,,,,Paym. Hist. Line";
                                                   OptionString=[ ,CompInfo,,,,,SalesInvoice,SalesCreditMemo,SalesQuote,SalesOrder,Sales Shipment,PurchOrder,PurchQuote,OptionQuote,Plot,,ServOrder,ServOrderExtension,Planning Agreement,PlantTransportOrder,PlantExitOrder,PlantOrder,Reminder,Vendor,,,,,SharePoint Setup,Project Portal Login,Contact,Employee,Project,Project Purchase Action,,,,,Work Order,Service Portal Login,Subcontrator Portal Login,Extension Contract,,,,Consenter,Salesperson/Purchaser,ProblemText,InternalText,ResolveText,CauseText,DebriefText,,,,Paym. Hist. Line] }
    { 101 ;   ;Field No.           ;Integer       ;OnValidate=BEGIN
                                                                IF "Field No." > 0 THEN
                                                                  TESTFIELD("Table Function", "Table Function"::" ");
                                                                SetrangeTableNo;

                                                                gvRecField.SETRANGE("No.", "Field No.");
                                                                IF NOT gvRecField.FINDFIRST THEN BEGIN
                                                                  "Field Name" := '';
                                                                  IF "Field No." <> 0 THEN
                                                                    MESSAGE(Text001, "Field No.", "Table No.");
                                                                END ELSE BEGIN
                                                                  "Field Name" := COPYSTR(gvRecField."Field Caption", 1, MAXSTRLEN("Field Name"));
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SetrangeTableNo;

                                                              gvFrmTableFields.SETTABLEVIEW(gvRecField);
                                                              gvFrmTableFields.EDITABLE   := FALSE;
                                                              gvFrmTableFields.LOOKUPMODE := TRUE;
                                                              IF gvFrmTableFields.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                gvFrmTableFields.GETRECORD(gvRecField);
                                                                "Field No." := gvRecField."No.";
                                                                "Field Name" := COPYSTR(gvRecField."Field Caption", 1, MAXSTRLEN("Field Name"));
                                                                IF "Field No." > 0 THEN
                                                                  TESTFIELD("Table Function", "Table Function"::" ");
                                                              END;
                                                              CLEAR(gvFrmTableFields);
                                                            END;

                                                   CaptionML=ENU=Field No. }
    { 102 ;   ;Field Name          ;Text30        ;CaptionML=ENU=Field Name;
                                                   Editable=No }
    { 110 ;   ;Table Function      ;Option        ;OnValidate=BEGIN
                                                                ValidateTableFunction;
                                                              END;

                                                   CaptionML=ENU=Table Function;
                                                   OptionCaptionML=ENU=" ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Consenter.GetNoOfOpenConsentLines,Consenter.GetConsentHyperlink";
                                                   OptionString=[ ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Consenter.GetNoOfOpenConsentLines,Consenter.GetConsentHyperlink] }
  }
  KEYS
  {
    {    ;Usage,Language Code,Line No.            ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100526200 : TextConst 'ENU=Field %1 not present in Table %2';
      gvRecField@1100526202 : Record 2000000041;
      gvFrmTableFields@1100526201 : Page 11012403;
      Text002@1100526203 : TextConst 'ENU=******************************';
      LanguageID@1100525000 : Integer;
      UseLongDateFormat@1100409000 : Boolean;

    PROCEDURE SetrangeTableNo@4();
    BEGIN
      gvRecField.RESET;
      gvRecField.SETRANGE(TableNo, GetDatabaseTableID);
    END;

    LOCAL PROCEDURE GetDatabaseTableID@1100528423() TableID : Integer;
    BEGIN
      gvRecField.RESET;
      CASE "Table No." OF
        "Table No."::CompInfo: TableID := DATABASE::"Company Information";
        "Table No."::SalesInvoice: TableID := DATABASE::"Sales Invoice Header";
        "Table No."::SalesCreditMemo: TableID := DATABASE::"Sales Cr.Memo Header";
        "Table No."::SalesQuote: TableID := DATABASE::"Sales Header";
        "Table No."::SalesOrder: TableID := DATABASE::"Sales Header";
        "Table No."::"Sales Shipment": TableID := DATABASE::"Sales Shipment Header";
        "Table No."::PurchOrder: TableID := DATABASE::"Purchase Header";
        "Table No."::PurchQuote: TableID := DATABASE::"Purchase Header";
        "Table No."::OptionQuote: TableID := DATABASE::"Option Quote Header";
        "Table No."::Plot: TableID := DATABASE::Plot;
        "Table No."::ServOrder: TableID := DATABASE::"Service Order";
        "Table No."::ServOrderExtension: TableID := DATABASE::"Service Order Extension";
        "Table No."::"Planning Agreement": TableID := DATABASE::"Planning Agreement";
        "Table No."::PlantTransportOrder: TableID := DATABASE::"Plant Transport Order";
        "Table No."::PlantExitOrder: TableID := DATABASE::"Exit Order";
        "Table No."::PlantOrder: TableID := DATABASE::"Plant Order";
        "Table No."::Reminder: TableID := DATABASE::"Issued Reminder Header";
        "Table No."::Vendor: TableID := DATABASE::Vendor;
        "Table No."::"SharePoint Setup": TableID := DATABASE::"SharePoint Setup 4PS";
        "Table No."::"Project Portal Login": TableID := DATABASE::"Project Portal Login";
        "Table No."::Contact: TableID := DATABASE::Contact;
        "Table No."::Employee: TableID := DATABASE::Employee;
        "Table No."::Project: TableID := DATABASE::Job;
        "Table No."::"Project Purchase Action": TableID := DATABASE::"Project Purchase Action";
        "Table No."::"Work Order": TableID := DATABASE::"Work Order";
        "Table No."::"Service Portal Login": TableID := DATABASE::"Serv.Port. User";
        "Table No."::"Subcontrator Portal Login": TableID := DATABASE::"Subcont.Port. User";
        "Table No."::"Extension Contract": TableID := DATABASE::"Extension Contract";
        "Table No."::Consenter: TableID := DATABASE::Consenter;
        "Table No."::"Salesperson/Purchaser": TableID := DATABASE::"Salesperson/Purchaser";
        "Table No."::ProblemText,
        "Table No."::InternalText,
        "Table No."::ResolveText,
        "Table No."::CauseText: TableID := DATABASE::"Service Text";
        "Table No."::DebriefText: TableID := DATABASE::"Debrief Text";
      END;
    END;

    PROCEDURE GetSubstituteResultTextLine@1100525000(DocType@1100525001 : Integer;DocNo@1100525000 : Code[20]) SubstituteResultTextLine : Text[250];
    BEGIN
      //Try to avoid calling this function. Use function GetBodyText.
      EXIT(COPYSTR(GetSubstituteResultFullTextLine(DocType, DocNo), 1, MAXSTRLEN(SubstituteResultTextLine)));
    END;

    PROCEDURE GetSubstituteResultFullTextLine@1100528603(DocType@1100525001 : Integer;DocNo@1100525000 : Code[20]) SubstituteResultTextLine : Text;
    VAR
      Pos@1100525002 : Integer;
      Substitute@1100525003 : Text;
    BEGIN
      //Try to avoid calling this function. Use function GetBodyText.
      Pos := STRPOS(Text, '%1');
      IF Pos <> 0 THEN BEGIN
        Substitute := GetSubstituteFull(DocType, DocNo);
        SubstituteResultTextLine := STRSUBSTNO(Text, Substitute);
      END ELSE
        SubstituteResultTextLine := Text;
    END;

    PROCEDURE GetSubstituteResultTextLine2@1100525001(DocType@1100525000 : Integer;DocNo@1100525001 : Code[20];Code1@1100528300 : Code[20];Text1@1100525004 : Text[100];Text2@1100525005 : Text[100];Text3@1100525006 : Text[100];Text4@1100525007 : Text[100]) SubstituteResultTextLine : Text[250];
    VAR
      Pos@1100525008 : Integer;
      Substitute@1100525009 : Text[250];
      LenSubstitute@1100525010 : Integer;
    BEGIN
      //This function is called by Project Portal functionality only.
      Pos := STRPOS(Text, '%1');
      IF Pos <> 0 THEN BEGIN
        CASE "Table No." OF
          "Table No."::"Project Portal Login": BEGIN
            Substitute := GetSubstitute2('', Text1, Text2, Text3, Text4);
            LenSubstitute := STRLEN(Substitute);
            SubstituteResultTextLine :=
              COPYSTR(Text, 1, Pos - 1) + Substitute + COPYSTR(Text, Pos + 2, 250 - LenSubstitute - Pos + 1);
          END;
          "Table No."::Project: BEGIN
            Substitute := GetSubstitute2(Code1, '', '', '', '');
            LenSubstitute := STRLEN(Substitute);
            SubstituteResultTextLine :=
              COPYSTR(Text, 1, Pos - 1) + Substitute + COPYSTR(Text, Pos + 2, 250 - LenSubstitute - Pos + 1);
          END;
          ELSE
            SubstituteResultTextLine := GetSubstituteResultTextLine(DocType, DocNo);
        END;
      END ELSE
        SubstituteResultTextLine := Text;
    END;

    PROCEDURE GetSubstituteResultTextLine3@1100528300(DocType@1100525000 : Integer;DocNo@1100525001 : Code[20];Code1@1100528300 : Code[20];Code2@1100528301 : Code[20];Text1@1100525004 : Text[100];Text2@1100525005 : Text[100];Text3@1100525006 : Text[100];Text4@1100525007 : Text[100]) SubstituteResultTextLine : Text[250];
    VAR
      Pos@1100525008 : Integer;
      Substitute@1100525009 : Text[250];
      LenSubstitute@1100525010 : Integer;
    BEGIN
      //This function is called by Project Portal functionality only.
      Pos := STRPOS(Text, '%1');
      IF Pos <> 0 THEN BEGIN
        CASE "Table No." OF
          "Table No."::"Project Purchase Action": BEGIN
            Substitute := GetSubstitute3(Code1, Code2, Text1, Text2, Text3, Text4);
            LenSubstitute := STRLEN(Substitute);
            SubstituteResultTextLine :=
              COPYSTR(Text, 1, Pos - 1) + Substitute + COPYSTR(Text, Pos + 2, 250 - LenSubstitute - Pos + 1);
          END;
          ELSE
            SubstituteResultTextLine := GetSubstituteResultTextLine2(DocType, DocNo, Code1, Text1, Text2, Text3, Text4);
        END;
      END ELSE
        SubstituteResultTextLine := Text;
    END;

    PROCEDURE GetSubstituteResultTextLine4@1100528000(DocType@1100525000 : Integer;DocNo@1100525001 : Code[20];Code1@1100528300 : Code[20];Code2@1100528301 : Code[20];Text1@1100525004 : Text[100];Text2@1100525005 : Text[100];Text3@1100525006 : Text[100];Text4@1100525007 : Text[100]) SubstituteResultTextLine : Text[250];
    VAR
      Pos@1100525008 : Integer;
      Substitute@1100525009 : Text[250];
      LenSubstitute@1100525010 : Integer;
    BEGIN
      //This function is called by Service Portal functionality only.
      Pos := STRPOS(Text, '%1');
      IF Pos <> 0 THEN BEGIN
        CASE "Table No." OF
          "Table No."::"Service Portal Login": BEGIN
            Substitute := GetSubstitute4(0, DocNo, Code1, Code2, Text1, Text2, Text3, Text4);
            LenSubstitute := STRLEN(Substitute);
            SubstituteResultTextLine :=
              COPYSTR(Text, 1, Pos - 1) + Substitute + COPYSTR(Text, Pos + 2, 250 - LenSubstitute - Pos + 1);
          END;
          ELSE
            SubstituteResultTextLine := GetSubstituteResultTextLine3(DocType, DocNo, Code1, Code2, Text1, Text2, Text3, Text4);
        END;
      END ELSE
        SubstituteResultTextLine := Text;
    END;

    PROCEDURE GetSubstituteResultTextLine5@1100528001(DocType@1100525000 : Integer;DocNo@1100525001 : Code[20];Code1@1100528300 : Code[20];Code2@1100528301 : Code[20];Text1@1100525004 : Text[100];Text2@1100525005 : Text[100];Text3@1100525006 : Text[100];Text4@1100525007 : Text[100]) SubstituteResultTextLine : Text[250];
    VAR
      Pos@1100525008 : Integer;
      Substitute@1100525009 : Text[250];
      LenSubstitute@1100525010 : Integer;
    BEGIN
      //This function is called by Subcontractor Portal functionality only.
      Pos := STRPOS(Text, '%1');
      IF Pos <> 0 THEN BEGIN
        CASE "Table No." OF
          "Table No."::"Subcontrator Portal Login": BEGIN
            Substitute := GetSubstitute5(0, DocNo, Code1, Code2, Text1, Text2, Text3, Text4);
            LenSubstitute := STRLEN(Substitute);
            SubstituteResultTextLine :=
              COPYSTR(Text, 1, Pos - 1) + Substitute + COPYSTR(Text, Pos + 2, 250 - LenSubstitute - Pos + 1);
          END;
          ELSE
            SubstituteResultTextLine := GetSubstituteResultTextLine4(DocType, DocNo, Code1, Code2, Text1, Text2, Text3, Text4);
        END;
      END ELSE
        SubstituteResultTextLine := Text;
    END;

    PROCEDURE GetSubstitute@1210190004(DocType@1210190001 : Integer;DocNo@1100526201 : Code[20]) rTxtContent@11012000 : Text[250];
    BEGIN
      //Try to avoid calling this function. Use function GetBodyText.
      EXIT(COPYSTR(GetSubstituteFull(DocType, DocNo), 1, MAXSTRLEN(rTxtContent)));
    END;

    PROCEDURE GetSubstituteFull@1100528604(DocType@1210190001 : Integer;DocNo@1100526201 : Code[20]) rTxtContent@11012000 : Text;
    VAR
      lvCompInfoRec@1210190002 : Record 79;
      lvServOrderRec@1100526200 : Record 11012823;
      lvServOrderExtensionRec@1100528900 : Record 11071727;
      lvWorkOrderRec@1100528604 : Record 11229279;
      lvSalesInvoiceRec@1210190003 : Record 112;
      lvSalesCreditMemoRec@1210190004 : Record 114;
      SalesHeader@1100528802 : Record 36;
      lvPurchHeaderRec@1210190000 : Record 38;
      PlantTransOrder@1100409000 : Record 11020505;
      PlantExitOrder@1100409001 : Record 11012559;
      lvPlantOrderRec@1210190005 : Record 11012556;
      lvReminderRec@1100528800 : Record 297;
      lvVendorRec@1100528600 : Record 23;
      SalesShipmentHeader@1100528700 : Record 110;
      PlanningAgreement@1100528601 : Record 11071729;
      SharePointSetup4PS@1100525000 : Record 11012730;
      Contact@1100528300 : Record 5050;
      Employee@1100525001 : Record 5200;
      DebriefText@1100525002 : Record 11012886;
      SalespersonPurchaser@1100528400 : Record 13;
      ServiceText@1100528605 : Record 11012882;
      OptionQuoteHeader@1100528401 : Record 11012513;
      Job@1100528402 : Record 11072003;
      AppointmentManagement@1100528603 : Codeunit 11012865;
      PlanningAgreementCode@1100528602 : Code[10];
    BEGIN
      //Try to avoid calling this function. Use function GetBodyText.
      CASE "Table No." OF
        "Table No."::CompInfo:
          BEGIN
            lvCompInfoRec.GET;
            rTxtContent := GetSubstituteFromSourceTable(lvCompInfoRec);
          END;
        "Table No."::SalesInvoice:  //db, 25-08-11: M28634
          BEGIN
            lvSalesInvoiceRec.GET(DocNo);
            rTxtContent := GetSubstituteFromSourceTable(lvSalesInvoiceRec);
          END;
        "Table No."::SalesCreditMemo:  //db, 25-08-11: M28634
          BEGIN
            lvSalesCreditMemoRec.GET(DocNo);
            rTxtContent := GetSubstituteFromSourceTable(lvSalesCreditMemoRec);
          END;
        "Table No."::SalesOrder,"Table No."::SalesQuote:  // RFC dp00113
          BEGIN
            SalesHeader.GET(DocType, DocNo);
            rTxtContent := GetSubstituteFromSourceTable(SalesHeader);
          END;
        "Table No."::"Sales Shipment":
          BEGIN
            SalesShipmentHeader.GET(DocNo);
            rTxtContent := GetSubstituteFromSourceTable(SalesShipmentHeader);
          END;
        "Table No."::PurchOrder, "Table No."::PurchQuote:
          BEGIN
            lvPurchHeaderRec.GET(DocType, DocNo);
            rTxtContent := GetSubstituteFromSourceTable(lvPurchHeaderRec);
          END;
        "Table No."::OptionQuote:
          BEGIN
            IF OptionQuoteHeader.GET(DocNo) THEN;
            rTxtContent := GetSubstituteFromSourceTable(OptionQuoteHeader);
          END;
        "Table No."::Plot:    //More than 1 primary key field,
          rTxtContent := '';  //not possible to get with DocNo.
        "Table No."::ServOrder:
          BEGIN
            lvServOrderRec.GET(DocNo);
            rTxtContent := GetSubstituteFromSourceTable(lvServOrderRec);
          END;
        "Table No."::ServOrderExtension:  //db, 23-08-12: W012386
          BEGIN
            IF NOT lvServOrderExtensionRec.GET(DocNo) THEN lvServOrderExtensionRec.INIT;  //db, 25-09-12
            rTxtContent := GetSubstituteFromSourceTable(lvServOrderExtensionRec);
          END;
        "Table No."::"Planning Agreement":
          BEGIN
            lvServOrderRec.GET(DocNo);
            rTxtContent := GetSubstituteFromSourceTable(lvServOrderRec);
          END;
        "Table No."::PlantTransportOrder:
          BEGIN
            PlantTransOrder.GET(DocNo);
            rTxtContent := GetSubstituteFromSourceTable(PlantTransOrder);
          END;
        "Table No."::PlantExitOrder:
          BEGIN
            PlantExitOrder.GET(DocNo);
            rTxtContent := GetSubstituteFromSourceTable(PlantExitOrder);
          END;
        "Table No."::PlantOrder:  //db, 25-08-11: M28634
          BEGIN
            lvPlantOrderRec.GET(DocNo);
            rTxtContent := GetSubstituteFromSourceTable(lvPlantOrderRec);
          END;
        "Table No."::Reminder:  // RFC dp00054
          BEGIN
            lvReminderRec.GET(DocNo);
            rTxtContent := GetSubstituteFromSourceTable(lvReminderRec);
          END;
        "Table No."::Vendor:
          BEGIN
            lvVendorRec.GET(DocNo);
            rTxtContent := GetSubstituteFromSourceTable(lvVendorRec);
          END;
        "Table No."::"SharePoint Setup":
          BEGIN
            SharePointSetup4PS.GET;
            rTxtContent := GetSubstituteFromSourceTable(SharePointSetup4PS);
          END;
        "Table No."::"Project Portal Login": //More than 1 primary key field,
          rTxtContent := '';                 //not possible to get with DocNo.
        "Table No."::Contact:
          BEGIN
            IF (Contact.GET(DocNo)) THEN; //DocNo can be empty
            rTxtContent := GetSubstituteFromSourceTable(Contact);
          END;
        "Table No."::Employee:
          BEGIN
            IF (Employee.GET(DocNo)) THEN; //DocNo can be empty
            rTxtContent := GetSubstituteFromSourceTable(Employee);
          END;
        "Table No."::Project:
          BEGIN
            IF Job.GET(DocNo) THEN;
            rTxtContent := GetSubstituteFromSourceTable(Job);
          END;
        "Table No."::"Project Purchase Action": //More than 1 primary key field,
          rTxtContent := '';                    //not possible to get with DocNo.
        "Table No."::"Work Order":
          BEGIN
            lvWorkOrderRec.GET(DocNo);
            rTxtContent := GetSubstituteFromSourceTable(lvWorkOrderRec);
          END;
        "Table No."::"Service Portal Login": //More than 1 primary key field,
          rTxtContent := '';                 //not possible to get with DocNo.
        "Table No."::"Subcontrator Portal Login": //More than 1 primary key field,
          rTxtContent := '';                      //not possible to get with DocNo.
        "Table No."::"Extension Contract": //More than 1 primary key field,
          rTxtContent := '';               //not possible to get with DocNo.
        "Table No."::Consenter: //Primary key field User ID Code 50,
          rTxtContent := '';    //not possible to get with DocNo Code 20.
        "Table No."::"Salesperson/Purchaser":
          BEGIN
            IF (SalespersonPurchaser.GET(DocNo)) THEN; //DocNo can be empty
            rTxtContent := GetSubstituteFromSourceTable(SalespersonPurchaser);
          END;
        "Table No."::ProblemText,
        "Table No."::InternalText,
        "Table No."::ResolveText,
        "Table No."::CauseText:
          BEGIN
            lvServOrderRec.GET(DocNo);
            rTxtContent := GetSubstituteFromSourceTable(lvServOrderRec);
          END;
        "Table No."::DebriefText:
          BEGIN
            lvServOrderRec.GET(DocNo);
            rTxtContent := GetSubstituteFromSourceTable(lvServOrderRec);
          END;
        "Table No."::"Paym. Hist. Line": //More than 1 primary key field,
          rTxtContent := '';             //not possible to get with DocNo.
      END;
    END;

    PROCEDURE GetSubstitute2@1100525002(Code1@1100528301 : Code[20];Text1@1100525002 : Text[100];Text2@1100525003 : Text[100];Text3@1100525007 : Text[100];Text4@1100525006 : Text[100]) rTxtContent : Text[250];
    VAR
      ProjectPortalLogin@1100525004 : Record 11229816;
      Job@1100528300 : Record 11072003;
    BEGIN
      //This function is called by Project Portal functionality only.
      CASE "Table No." OF
        "Table No."::"Project Portal Login":
          BEGIN
            ProjectPortalLogin.GET(Text1, Text2, Text3, Text4);
            rTxtContent := GetSubstituteFromSourceTable(ProjectPortalLogin);
          END;
        "Table No."::Project:
          BEGIN
            IF (Job.GET(Code1)) THEN; //Code1 can be empty
            rTxtContent := GetSubstituteFromSourceTable(Job);
          END;
      END;
    END;

    PROCEDURE GetSubstitute3@1100528301(Code1@1100528301 : Code[20];Code2@1100528303 : Code[20];Text1@1100525002 : Text[100];Text2@1100525003 : Text[100];Text3@1100525007 : Text[100];Text4@1100525006 : Text[100]) rTxtContent : Text[250];
    VAR
      ProjectPurchaseAction@1100528302 : Record 11012026;
    BEGIN
      //This function is called by Project Portal functionality only.
      CASE "Table No." OF
        "Table No."::"Project Purchase Action":
          BEGIN
            ProjectPurchaseAction.GET(Code1, Code2);
            rTxtContent := GetSubstituteFromSourceTable(ProjectPurchaseAction);
          END;
      END;
    END;

    PROCEDURE GetSubstitute4@1100528002(DocType@1100528007 : Integer;DocNo@1100528006 : Code[20];Code1@1100528005 : Code[20];Code2@1100528004 : Code[20];Text1@1100528003 : Text[100];Text2@1100528002 : Text[100];Text3@1100528001 : Text[100];Text4@1100528000 : Text[100]) rTxtContent : Text[250];
    VAR
      ServPortUser@1100528302 : Record 11126063;
    BEGIN
      //This function is called by Service Portal functionality only.
      CASE "Table No." OF
        "Table No."::"Service Portal Login":
          BEGIN
            ServPortUser.GET(DocNo, Text1);
            IF "Field No." = 30 THEN
              rTxtContent := Text2
            ELSE
              rTxtContent := GetSubstituteFromSourceTable(ServPortUser);
          END;
      END;
    END;

    PROCEDURE GetSubstitute5@1100528003(DocType@1100528007 : Integer;DocNo@1100528006 : Code[20];Code1@1100528005 : Code[20];Code2@1100528004 : Code[20];Text1@1100528003 : Text[100];Text2@1100528002 : Text[100];Text3@1100528001 : Text[100];Text4@1100528000 : Text[100]) rTxtContent : Text[250];
    VAR
      SubcontPortUser@1100528302 : Record 11126401;
    BEGIN
      //This function is called by Subcontractor Portal functionality only.
      CASE "Table No." OF
        "Table No."::"Subcontrator Portal Login":
          BEGIN
            SubcontPortUser.GET(DocNo, Text1);
            IF "Field No." = 30 THEN
              rTxtContent := Text2
            ELSE
              rTxtContent := GetSubstituteFromSourceTable(SubcontPortUser);
          END;
      END;
    END;

    PROCEDURE GetSubstituteFromSourceTable@1100528502(SourceVariant@1100528500 : Variant) TxtContent : Text;
    VAR
      CompanyInformation@1100528403 : Record 79;
      WorkOrder@1100528400 : Record 11229279;
      ServiceOrder@1100528401 : Record 11012823;
      RecRef@1100528402 : RecordRef;
    BEGIN
      IF SourceVariant.ISRECORD THEN BEGIN
        RecRef.GETTABLE(SourceVariant);
        IF (RecRef.NUMBER = GetDatabaseTableID) AND
           ("Table Function" = "Table Function"::" ")
        THEN
          TxtContent := AnyTableFieldValue(RecRef.NUMBER, "Field No.", RecRef)
        ELSE
          CASE "Table No." OF
            "Table No."::CompInfo:
              BEGIN
                IF CompanyInformation.GET THEN
                  TxtContent := GetSubstituteFromSourceTable(CompanyInformation);
              END;
            "Table No."::ServOrder:
              CASE RecRef.NUMBER OF
                DATABASE::"Work Order":
                  TxtContent := GetSubstituteFromServiceOrderViaWorkOrder(RecRef);
              END;
            "Table No."::ServOrderExtension:
              CASE RecRef.NUMBER OF
                DATABASE::"Service Order":
                  TxtContent := GetSubstituteFromServiceOrderExtensionViaServiceOrder(RecRef);
                DATABASE::"Work Order":
                  TxtContent := GetSubstituteFromServiceOrderExtensionViaWorkOrder(RecRef);
              END;
            "Table No."::"Planning Agreement":
              CASE RecRef.NUMBER OF
                DATABASE::"Service Order":
                  TxtContent := GetSubstituteFromPlanningAgreementViaServiceOrder(RecRef);
                DATABASE::"Work Order":
                  TxtContent := GetSubstituteFromPlanningAgreementViaWorkOrder(RecRef);
              END;
            "Table No."::Employee:
              CASE RecRef.NUMBER OF
                DATABASE::"User Setup":
                  TxtContent := GetSubstituteFromEmployeeViaUserSetup(RecRef);
                DATABASE::Consenter:
                  TxtContent := GetSubstituteFromEmployeeViaConsenter(RecRef);
              END;
            "Table No."::"Project Purchase Action":
              CASE RecRef.NUMBER OF
                DATABASE::"Purchase Header":
                  TxtContent := GetSubstituteFromProjectPurchaseActionViaPurchaseHeader(RecRef);
              END;
            "Table No."::Consenter:
              IF (RecRef.NUMBER = DATABASE::Consenter) AND
                 ("Table Function" <> "Table Function"::" ")
              THEN
                TxtContent := GetConsenterFunctionValue(SourceVariant);
            "Table No."::"Salesperson/Purchaser":
              CASE RecRef.NUMBER OF
                DATABASE::"User Setup":
                  TxtContent := GetSubstituteFromSalespersonPurchaserViaUserSetup(RecRef);
                DATABASE::Consenter:
                  TxtContent := GetSubstituteFromSalespersonPurchaserViaConsenter(RecRef);
                DATABASE::"Purchase Header":
                  TxtContent := GetSubstituteFromSalespersonPurchaserViaPurchaseHeader(RecRef);
              END;
            "Table No."::ProblemText,
            "Table No."::InternalText,
            "Table No."::ResolveText,
            "Table No."::CauseText:
              CASE RecRef.NUMBER OF
                DATABASE::"Service Order":
                  TxtContent := GetSubstituteFromServiceTextViaServiceOrder(RecRef);
                DATABASE::"Work Order":
                  TxtContent := GetSubstituteFromServiceTextViaWorkOrder(RecRef);
              END;
            "Table No."::DebriefText:
              CASE RecRef.NUMBER OF
                DATABASE::"Service Order":
                  TxtContent := GetSubstituteFromDebriefTextViaServiceOrder(RecRef);
                DATABASE::"Work Order":
                  TxtContent := GetSubstituteFromDebriefTextViaWorkOrder(RecRef);
              END;
          END;
      END;
    END;

    LOCAL PROCEDURE GetSubstituteFromServiceOrderViaWorkOrder@1100528402(WorkOrderRecRef@1100528403 : RecordRef) TxtContent : Text;
    VAR
      WorkOrder@1100528402 : Record 11229279;
      ServiceOrder@1100528401 : Record 11012823;
      ServiceOrderRecRef@1100528404 : RecordRef;
    BEGIN
      IF WorkOrderRecRef.NUMBER <> DATABASE::"Work Order" THEN
        EXIT;

      WorkOrderRecRef.SETTABLE(WorkOrder);
      IF WorkOrder."Source Type" = WorkOrder."Source Type"::ServiceOrder THEN BEGIN
        IF ServiceOrder.GET(WorkOrder."Source No.") THEN BEGIN
          ServiceOrderRecRef.GETTABLE(ServiceOrder);
          TxtContent := AnyTableFieldValue(
            ServiceOrderRecRef.NUMBER, "Field No.", ServiceOrderRecRef);
        END;
      END;
    END;

    LOCAL PROCEDURE GetSubstituteFromServiceOrderExtensionViaServiceOrder@1100528406(ServiceOrderRecRef@1100528403 : RecordRef) TxtContent : Text;
    VAR
      ServiceOrder@1100528402 : Record 11012823;
      ServiceOrderExtension@1100528401 : Record 11071727;
      ServiceOrderExtensionRecRef@1100528404 : RecordRef;
    BEGIN
      IF ServiceOrderRecRef.NUMBER <> DATABASE::"Service Order" THEN
        EXIT;

      ServiceOrderRecRef.SETTABLE(ServiceOrder);
      ServiceOrderExtension.GetServOrderExtension(ServiceOrder."No.");
      ServiceOrderExtensionRecRef.GETTABLE(ServiceOrderExtension);
      TxtContent := AnyTableFieldValue(
        ServiceOrderExtensionRecRef.NUMBER, "Field No.", ServiceOrderExtensionRecRef);
    END;

    LOCAL PROCEDURE GetSubstituteFromServiceOrderExtensionViaWorkOrder@1100528414(WorkOrderRecRef@1100528404 : RecordRef) TxtContent : Text;
    VAR
      WorkOrder@1100528402 : Record 11229279;
      ServiceOrder@1100528401 : Record 11012823;
      ServiceOrderRecRef@1100528400 : RecordRef;
    BEGIN
      IF WorkOrderRecRef.NUMBER <> DATABASE::"Work Order" THEN
        EXIT;

      WorkOrderRecRef.SETTABLE(WorkOrder);
      IF WorkOrder."Source Type" = WorkOrder."Source Type"::ServiceOrder THEN BEGIN
        IF ServiceOrder.GET(WorkOrder."Source No.") THEN BEGIN
          ServiceOrderRecRef.GETTABLE(ServiceOrder);
          TxtContent := GetSubstituteFromServiceOrderExtensionViaServiceOrder(ServiceOrderRecRef);
        END;
      END;
    END;

    LOCAL PROCEDURE GetSubstituteFromPlanningAgreementViaServiceOrder@1100528443(ServiceOrderRecRef@1100528403 : RecordRef) TxtContent : Text;
    VAR
      ServiceOrder@1100528402 : Record 11012823;
      PlanningAgreement@1100528401 : Record 11071729;
      PlanningAgreementRecRef@1100528404 : RecordRef;
      AppointmentManagement@1100528400 : Codeunit 11012865;
      PlanningAgreementCode@1100528405 : Code[10];
    BEGIN
      IF ServiceOrderRecRef.NUMBER <> DATABASE::"Service Order" THEN
        EXIT;

      ServiceOrderRecRef.SETTABLE(ServiceOrder);
      PlanningAgreementCode := AppointmentManagement.GetPlanningAgreementCode(ServiceOrder."No.");
      IF PlanningAgreementCode <> '' THEN
        IF PlanningAgreement.GET(PlanningAgreementCode) THEN BEGIN
          PlanningAgreementRecRef.GETTABLE(PlanningAgreement);
          TxtContent := AnyTableFieldValue(
            PlanningAgreementRecRef.NUMBER, "Field No.", PlanningAgreementRecRef);
        END;
    END;

    LOCAL PROCEDURE GetSubstituteFromPlanningAgreementViaWorkOrder@1100528415(WorkOrderRecRef@1100528404 : RecordRef) TxtContent : Text;
    VAR
      WorkOrder@1100528402 : Record 11229279;
      ServiceOrder@1100528401 : Record 11012823;
      ServiceOrderRecRef@1100528400 : RecordRef;
    BEGIN
      IF WorkOrderRecRef.NUMBER <> DATABASE::"Work Order" THEN
        EXIT;

      WorkOrderRecRef.SETTABLE(WorkOrder);
      IF WorkOrder."Source Type" = WorkOrder."Source Type"::ServiceOrder THEN BEGIN
        IF ServiceOrder.GET(WorkOrder."Source No.") THEN BEGIN
          ServiceOrderRecRef.GETTABLE(ServiceOrder);
          TxtContent := GetSubstituteFromPlanningAgreementViaServiceOrder(ServiceOrderRecRef);
        END;
      END;
    END;

    LOCAL PROCEDURE GetSubstituteFromEmployeeViaUserSetup@1100528404(UserSetupRecRef@1100528403 : RecordRef) TxtContent : Text;
    VAR
      UserSetup@1100528402 : Record 91;
      Employee@1100528401 : Record 5200;
      EmployeeRecRef@1100528404 : RecordRef;
    BEGIN
      IF UserSetupRecRef.NUMBER <> DATABASE::"User Setup" THEN
        EXIT;

      UserSetupRecRef.SETTABLE(UserSetup);
      IF Employee.GET(UserSetup."Employee No.") THEN BEGIN
        EmployeeRecRef.GETTABLE(Employee);
        TxtContent := AnyTableFieldValue(
          EmployeeRecRef.NUMBER, "Field No.", EmployeeRecRef);
      END;
    END;

    LOCAL PROCEDURE GetSubstituteFromEmployeeViaConsenter@1100528405(ConsenterRecRef@1100528403 : RecordRef) TxtContent : Text;
    VAR
      Consenter@1100528402 : Record 11012229;
      UserSetup@1100528401 : Record 91;
      UserSetupRecRef@1100528404 : RecordRef;
    BEGIN
      IF ConsenterRecRef.NUMBER <> DATABASE::Consenter THEN
        EXIT;

      ConsenterRecRef.SETTABLE(Consenter);
      IF UserSetup.GET(Consenter."User ID") THEN BEGIN
        UserSetupRecRef.GETTABLE(UserSetup);
        TxtContent := GetSubstituteFromEmployeeViaUserSetup(UserSetupRecRef);
      END;
    END;

    LOCAL PROCEDURE GetSubstituteFromProjectPurchaseActionViaPurchaseHeader@1100528409(PurchaseHeaderRecRef@1100528403 : RecordRef) TxtContent : Text;
    VAR
      PurchaseHeader@1100528402 : Record 38;
      ProjectPurchaseAction@1100528401 : Record 11012026;
      ProjectPurchaseActionRecRef@1100528404 : RecordRef;
    BEGIN
      IF PurchaseHeaderRecRef.NUMBER <> DATABASE::"Purchase Header" THEN
        EXIT;

      PurchaseHeaderRecRef.SETTABLE(PurchaseHeader);
      IF ProjectPurchaseAction.GET(PurchaseHeader."Job No.", PurchaseHeader."Purchase Action") THEN BEGIN
        ProjectPurchaseActionRecRef.GETTABLE(ProjectPurchaseAction);
        TxtContent := AnyTableFieldValue(
          ProjectPurchaseActionRecRef.NUMBER, "Field No.", ProjectPurchaseActionRecRef);
      END;
    END;

    LOCAL PROCEDURE GetSubstituteFromSalespersonPurchaserViaConsenter@1100528407(ConsenterRecRef@1100528403 : RecordRef) TxtContent : Text;
    VAR
      Consenter@1100528402 : Record 11012229;
      UserSetup@1100528401 : Record 91;
      UserSetupRecRef@1100528404 : RecordRef;
    BEGIN
      IF ConsenterRecRef.NUMBER <> DATABASE::Consenter THEN
        EXIT;

      ConsenterRecRef.SETTABLE(Consenter);
      IF UserSetup.GET(Consenter."User ID") THEN BEGIN
        UserSetupRecRef.GETTABLE(UserSetup);
        TxtContent := GetSubstituteFromSalespersonPurchaserViaUserSetup(UserSetupRecRef);
      END;
    END;

    LOCAL PROCEDURE GetSubstituteFromSalespersonPurchaserViaUserSetup@1100528408(UserSetupRecRef@1100528403 : RecordRef) TxtContent : Text;
    VAR
      UserSetup@1100528402 : Record 91;
      SalespersonPurchaser@1100528401 : Record 13;
      SalespersonPurchaserRecRef@1100528404 : RecordRef;
    BEGIN
      IF UserSetupRecRef.NUMBER <> DATABASE::"User Setup" THEN
        EXIT;

      UserSetupRecRef.SETTABLE(UserSetup);
      IF SalespersonPurchaser.GET(UserSetup."Salespers./Purch. Code") THEN BEGIN
        SalespersonPurchaserRecRef.GETTABLE(SalespersonPurchaser);
        TxtContent := AnyTableFieldValue(
          SalespersonPurchaserRecRef.NUMBER, "Field No.", SalespersonPurchaserRecRef);
      END;
    END;

    LOCAL PROCEDURE GetSubstituteFromSalespersonPurchaserViaPurchaseHeader@1100529103(PurchaseHeaderRecRef@1100529100 : RecordRef) TxtContent : Text;
    VAR
      PurchaseHeader@1100529103 : Record 38;
      SalespersonPurchaser@1100529102 : Record 13;
      SalespersonPurchaserRecRef@1100529101 : RecordRef;
    BEGIN
      IF PurchaseHeaderRecRef.NUMBER <> DATABASE::"Purchase Header" THEN
        EXIT;

      PurchaseHeaderRecRef.SETTABLE(PurchaseHeader);
      IF SalespersonPurchaser.GET(PurchaseHeader."Purchaser Code") THEN BEGIN
        SalespersonPurchaserRecRef.GETTABLE(SalespersonPurchaser);
        TxtContent := AnyTableFieldValue(
          SalespersonPurchaserRecRef.NUMBER, "Field No.", SalespersonPurchaserRecRef);
      END;
    END;

    LOCAL PROCEDURE GetSubstituteFromServiceTextViaServiceOrder@1100528412(ServiceOrderRecRef@1100528403 : RecordRef) TxtContent : Text;
    VAR
      ServiceOrder@1100528402 : Record 11012823;
      ServiceText@1100528401 : Record 11012882;
      ServiceTextRecRef@1100528404 : RecordRef;
    BEGIN
      IF ServiceOrderRecRef.NUMBER <> DATABASE::"Service Order" THEN
        EXIT;

      ServiceOrderRecRef.SETTABLE(ServiceOrder);
      ServiceText.SETRANGE("Table Name", ServiceText."Table Name"::"Service Order");
      ServiceText.SETRANGE("No.", ServiceOrder."No.");
      CASE "Table No." OF
        "Table No."::ProblemText:
          ServiceText.SETRANGE("Table Field", 90);
        "Table No."::InternalText:
          ServiceText.SETRANGE("Table Field", 91);
        "Table No."::ResolveText:
          ServiceText.SETRANGE("Table Field", 92);
        "Table No."::CauseText:
          ServiceText.SETRANGE("Table Field", 94);
      END;

      IF ServiceText.FINDSET THEN
        REPEAT
          ServiceTextRecRef.GETTABLE(ServiceText);
          IF TxtContent <> '' THEN
            TxtContent += ' ';
          TxtContent += AnyTableFieldValue(DATABASE::"Service Text", "Field No.", ServiceTextRecRef);
        UNTIL ServiceText.NEXT = 0;
    END;

    LOCAL PROCEDURE GetSubstituteFromServiceTextViaWorkOrder@1100528413(WorkOrderRecRef@1100528404 : RecordRef) TxtContent : Text;
    VAR
      WorkOrder@1100528402 : Record 11229279;
      ServiceOrder@1100528401 : Record 11012823;
      ServiceOrderRecRef@1100528405 : RecordRef;
    BEGIN
      IF WorkOrderRecRef.NUMBER <> DATABASE::"Work Order" THEN
        EXIT;

      WorkOrderRecRef.SETTABLE(WorkOrder);
      IF WorkOrder."Source Type" = WorkOrder."Source Type"::ServiceOrder THEN BEGIN
        IF ServiceOrder.GET(WorkOrder."Source No.") THEN BEGIN
          ServiceOrderRecRef.GETTABLE(ServiceOrder);
          TxtContent := GetSubstituteFromServiceTextViaServiceOrder(ServiceOrderRecRef);
        END;
      END;
    END;

    LOCAL PROCEDURE GetSubstituteFromDebriefTextViaServiceOrder@1100528417(ServiceOrderRecRef@1100528403 : RecordRef) TxtContent : Text;
    VAR
      ServiceOrder@1100528402 : Record 11012823;
      DebriefText@1100528401 : Record 11012886;
      DebriefTextRecRef@1100528404 : RecordRef;
    BEGIN
      IF ServiceOrderRecRef.NUMBER <> DATABASE::"Service Order" THEN
        EXIT;

      ServiceOrderRecRef.SETTABLE(ServiceOrder);
      DebriefText.SETRANGE(Type, DebriefText.Type::ServiceOrder);
      DebriefText.SETRANGE("No.", ServiceOrder."No.");

      IF DebriefText.FINDSET THEN
        REPEAT
          DebriefTextRecRef.GETTABLE(DebriefText);
          IF TxtContent <> '' THEN
            TxtContent += ' ';
          TxtContent += AnyTableFieldValue(DATABASE::"Debrief Text", "Field No.", DebriefTextRecRef);
        UNTIL DebriefText.NEXT = 0;
    END;

    LOCAL PROCEDURE GetSubstituteFromDebriefTextViaWorkOrder@1100528416(WorkOrderRecRef@1100528404 : RecordRef) TxtContent : Text;
    VAR
      WorkOrder@1100528402 : Record 11229279;
      ServiceOrder@1100528401 : Record 11012823;
      ServiceOrderRecRef@1100528405 : RecordRef;
    BEGIN
      IF WorkOrderRecRef.NUMBER <> DATABASE::"Work Order" THEN
        EXIT;

      WorkOrderRecRef.SETTABLE(WorkOrder);
      IF WorkOrder."Source Type" = WorkOrder."Source Type"::ServiceOrder THEN BEGIN
        IF ServiceOrder.GET(WorkOrder."Source No.") THEN BEGIN
          ServiceOrderRecRef.GETTABLE(ServiceOrder);
          TxtContent := GetSubstituteFromDebriefTextViaServiceOrder(ServiceOrderRecRef);
        END;
      END;
    END;

    PROCEDURE AnyTableFieldValue@1210190010(TableNo@1210190000 : Integer;FieldNo@1210190001 : Integer;RecRef@1100528400 : RecordRef) : Text[250];
    VAR
      DecimalValue@1210190002 : Decimal;
      FldRef@1100526200 : FieldRef;
      FieldRec@1100526202 : Record 2000000041;
      DateValue@1100525000 : Date;
      TimeValue@1100525001 : Time;
    BEGIN
      //overgenomen uit codeunit 110120401
      FldRef := RecRef.FIELD(FieldNo);
      IF NOT FieldRec.GET(TableNo,FieldNo) THEN
        EXIT(Text002);

      IF FieldRec.Class = FieldRec.Class::FlowField THEN
        FldRef.CALCFIELD;

      //mg.sc, C008172: 16-09-13
      CASE FieldRec.Type OF
        FieldRec.Type::Decimal:
          BEGIN
            EVALUATE(DecimalValue, FORMAT(FldRef.VALUE));
            EXIT(FormatDecimal(DecimalValue));
          END;
        FieldRec.Type::Date:
          BEGIN
            DateValue := FldRef.VALUE;
            EXIT(FormatDate(DateValue));
          END;
        FieldRec.Type::Time:
          BEGIN
            TimeValue := FldRef.VALUE;
            EXIT(FormatTime(TimeValue));
          END;
      END;
      //mg.ec, C008172: 16-09-13

      EXIT(FORMAT(FldRef));
    END;

    LOCAL PROCEDURE GetConsenterFunctionValue@1100528400(Consenter@1100528400 : Record 11012229) Value : Text;
    BEGIN
      CASE "Table Function" OF
        "Table Function"::"Consenter.GetNoOfOpenConsentLines":
          Value := FORMAT(Consenter.GetNoOfOpenConsentLines);
        "Table Function"::"Consenter.GetConsentHyperlink":
          Value := FORMAT(Consenter.GetConsentHyperlink);
      END;
    END;

    PROCEDURE FormatDecimal@1210190009(DecimalValue@1210190000 : Decimal) : Text[30];
    BEGIN
      //overgenomen uit codeunit 110120401
      EXIT(FORMAT(DecimalValue,0,'<Precision,2:><Standard format,0>'));
    END;

    PROCEDURE FormatDate@1100528601(DateValue@1100528600 : Date) FormattedDateValue : Text[30];
    VAR
      Language@1100409001 : Record 8;
      OldGlobalLanguage@1100409000 : Integer;
    BEGIN
      IF UseLongDateFormat THEN BEGIN
        IF "Language Code" <> '' THEN BEGIN
          OldGlobalLanguage := GLOBALLANGUAGE;
          GLOBALLANGUAGE(Language.GetLanguageID("Language Code"));
        END;
        FormattedDateValue := DELCHR(FORMAT(DateValue,0,4),'=','.');
        IF "Language Code" <> '' THEN
          GLOBALLANGUAGE(OldGlobalLanguage);
        EXIT;
      END;

      //mg, C008172: 16-09-13
      CASE LanguageID OF
        1043: EXIT(FORMAT(DateValue, 0, '<Day,2>-<Month,2>-<Year>'));
      ELSE
        EXIT(FORMAT(DateValue));
      END;
    END;

    PROCEDURE FormatTime@1100528602(TimeValue@1100528600 : Time) : Text[30];
    BEGIN
      //mg, C008172: 16-09-13
      CASE LanguageID OF
        1043: EXIT(FORMAT(TimeValue, 0, '<Hours24>:<Minutes,2>:<Seconds,2>'));
      ELSE
        EXIT(FORMAT(TimeValue));
      END;
    END;

    PROCEDURE SetLanguageID@1100528600(ILanguageID@1100528600 : Integer);
    BEGIN
      LanguageID := ILanguageID;
    END;

    PROCEDURE SetUseLongDateFormat@1100409000();
    BEGIN
      UseLongDateFormat := TRUE;
    END;

    LOCAL PROCEDURE ValidateTableFunction@1100528403();
    BEGIN
      IF "Table Function" = "Table Function"::" " THEN
        EXIT;

      CASE "Table Function" OF
        "Table Function"::"Consenter.GetNoOfOpenConsentLines":
          TESTFIELD("Table No.", "Table No."::Consenter);
        "Table Function"::"Consenter.GetConsentHyperlink":
          TESTFIELD("Table No.", "Table No."::Consenter);
        ELSE
          TESTFIELD("Table Function", "Table Function"::" ");
      END;

      TESTFIELD("Field No.", 0);
    END;

    PROCEDURE NewRecord@1100528401();
    BEGIN
      FILTERGROUP(2);
      IF GETFILTER(Usage) <> '' THEN
        IF EVALUATE(Usage, GETFILTER(Usage)) THEN;
      FILTERGROUP(0);
    END;

    PROCEDURE GetUsageNoFromSalesHeader@1100528500(SalesHeader@1100528500 : Record 36) UsageNo : Integer;
    BEGIN
      CASE SalesHeader."Document Type" OF
        SalesHeader."Document Type"::Quote:
         UsageNo := Usage::"Sales Quote";
        SalesHeader."Document Type"::Order:
         UsageNo := Usage::"Sales Order";
        SalesHeader."Document Type"::Invoice:
         UsageNo := Usage::"Sales Invoice";
        SalesHeader."Document Type"::"Credit Memo":
         UsageNo := Usage::"Sales Credit Memo";
      END;
    END;

    PROCEDURE GetUsageNoFromPurchHeader@1100528501(PurchaseHeader@1100528500 : Record 38;SendQuoteThanksLetter@1100528400 : Boolean) UsageNo : Integer;
    BEGIN
      CASE PurchaseHeader."Document Type" OF
        PurchaseHeader."Document Type"::Quote:
          IF SendQuoteThanksLetter THEN
            UsageNo := Usage::"Purchase Quote Thanks Letter"
          ELSE
            UsageNo := Usage::"Purchase Quote";
        PurchaseHeader."Document Type"::Order:
          UsageNo := Usage::"Purchase Order";
      END;
    END;

    PROCEDURE GetApplicableBodyText@1100528503(VAR BodyText@1100528502 : Text;VAR SourceVariant@1100528505 : Variant;UsageNo@1100525000 : Integer;LanguageCode@1100525002 : Code[10];UseHTMLFormat@1100528506 : Boolean);
    BEGIN
      IF GetBodyText(BodyText, SourceVariant, UsageNo, LanguageCode, UseHTMLFormat) THEN
        EXIT;

      IF UsageNo IN [
        Usage::PlantOrderStatus,
        Usage::"Plant Transport Order",
        Usage::"Plant Exit Order",
        Usage::"Plant Order"]
      THEN
        GetBodyText(BodyText, SourceVariant, Usage::"120", LanguageCode, UseHTMLFormat);
    END;

    LOCAL PROCEDURE GetBodyText@1100528410(VAR BodyText@1100528502 : Text;VAR SourceVariant@1100528505 : Variant;UsageNo@1100525000 : Integer;LanguageCode@1100525002 : Code[10];UseHTMLFormat@1100528506 : Boolean) BodyTextFound : Boolean;
    VAR
      EMailBodyText@1100525001 : Record 11012769;
      PosNo@1100525003 : Integer;
      SubstituteText@1100525004 : Text;
      FullText@1100528400 : Text;
    BEGIN
      IF LanguageID <> 0 THEN
        EMailBodyText.SetLanguageID(LanguageID);

      EMailBodyText.SETRANGE(Usage,UsageNo);
      EMailBodyText.SETRANGE("Language Code",LanguageCode);
      IF EMailBodyText.ISEMPTY THEN
        EMailBodyText.SETRANGE("Language Code", '');

      IF EMailBodyText.FINDSET THEN BEGIN
        BodyTextFound := TRUE;
        REPEAT
          PosNo := STRPOS(EMailBodyText.Text, '%1');
          IF PosNo <> 0 THEN BEGIN
            SubstituteText := EMailBodyText.GetSubstituteFromSourceTable(SourceVariant);
            FullText := STRSUBSTNO(EMailBodyText.Text, SubstituteText);
          END ELSE
            FullText := EMailBodyText.Text;
          IF EndsWithBackSlash(FullText) THEN
            BodyText := BodyText + COPYSTR(FullText, 1, STRLEN(FullText) -1)
          ELSE
            IF UseHTMLFormat THEN
              BodyText := BodyText + (STRSUBSTNO(FullText + '<br/>'))
            ELSE
              BodyText := BodyText + (STRSUBSTNO(FullText + CrLf));
        UNTIL EMailBodyText.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CrLf@1100528504() Result : Text[2];
    BEGIN
      Result[1] := 13;
      Result[2] := 10;
    END;

    LOCAL PROCEDURE EndsWithBackSlash@1100528506(Text@1100528500 : Text) : Boolean;
    BEGIN
      IF Text = '' THEN
        EXIT(FALSE);

      IF COPYSTR(Text, STRLEN(Text), 1) = '\' THEN
        EXIT(TRUE);
    END;

    BEGIN
    {
      Option values field Usage expanded.

      Due to limitations new options are only added as a number.
      In order to keep overview use and maintain the documentation in this table.

       80: Extension Contract
       81: Option Quote
       82: Plot

       90: WKA Request

      100: Consent Notification
      101: Consented Documents

      110: Hours by Employee

      120: Plant Reports

      130: Docket
    }
    END.
  }
}

