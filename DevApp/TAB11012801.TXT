OBJECT Table 11012801 Service Location
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11012801=d;
    DataCaptionFields=No.,Description;
    OnInsert=VAR
               "4PSMobileSetup"@1210190000 : Record 11012676;
               ServPortSetup@1100525000 : Record 11126065;
             BEGIN
               ServSetup.GET;

               IF "No." = '' THEN BEGIN
                 ServSetup.TESTFIELD("Service Location Nos.");
                 NoSeriesMgt.InitSeries(ServSetup."Service Location Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;
               TESTFIELD("No.");

               "Creation Date" := TODAY;
               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;
               "Modified by" := USERID;

               //db.sn, 18-12-12: C000433
               ProjSetupRec.GET;
               Deliver := ProjSetupRec.Deliver;
               IF (Deliver = Deliver::Location) THEN
                 "Ship To Location" := ProjSetupRec."Ship To Location";
               //db.en, 18-12-12: C000433

               VALIDATE("Location Structure Format", ServSetup."Def. Location Structure Format");

               IF Check4PSMobileActive THEN BEGIN
                 "4PSMobileSetup".GET;
                 "Initial Minutes Working Hours" := "4PSMobileSetup"."Def. Init. Minutes Work. Hours";
                 "Round Working Hours on Minutes" := "4PSMobileSetup"."Def. Round Work. Hours on Min.";
                 "Round Travel Hours on Minutes" := "4PSMobileSetup"."Def. Round Trav. Hours on Min.";
               END;

               ServPortSetup.SETRANGE("Primary Key", '1');
               IF ServPortSetup.FINDFIRST THEN
                 IF ServPortSetup."Location Publ. on Serv. Portal" THEN
                   VALIDATE("Publish on Service Portal", ServPortSetup."Location Publ. on Serv. Portal");

               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05

               ExchangeFSA('I');
               ExchangeMOB('I');
               NormalizePostCodeHouseNo;

               IF "Post Code Group" = '' THEN
                 EvaluatePostCodeGroup
               ELSE
                 DetermineTravelCostCode;

               "Postal Address App. Letter" := "Postal Address App. Letter"::"Service Location";
             END;

    OnModify=BEGIN
               IF Blocked = xRec.Blocked THEN
                 TESTFIELD(Blocked,FALSE);

               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;
               "Modified by" := USERID;

               ExchangeFSA('M');
               ExchangeMOB('M');

               NormalizePostCodeHouseNo;
             END;

    OnDelete=VAR
               RespRec@11012007 : Record 11012808;
               ContactRec@1100485002 : Record 11012841;
               CommLineRec@1210190002 : Record 97;
               ServTextRec@1100485003 : Record 11012882;
               TryOutRec@1210190004 : Record 11012761;
               RefNormRec@1100485005 : Record 11012856;
               ServCallRec@1100485008 : Record 11012822;
               ServOrderRec@1100485009 : Record 11012823;
               LocStructure@1100526200 : Record 11071719;
               ServiceObject@1100528600 : Record 11071691;
               SubcontrPortLocation@1100528100 : Record 11126403;
               RentalUnit@1100528700 : Record 11012940;
               DeleteObjectsConfirmed@1100525000 : Boolean;
             BEGIN
               ServCallRec.SETCURRENTKEY("Service Location No.");
               ServCallRec.SETRANGE("Service Location No.", "No.");
               ServCallRec.SETFILTER(Status, '<>%1', ServCallRec.Status::Finished);
               IF ServCallRec.FINDFIRST THEN
                 ServCallRec.TESTFIELD(Status, ServCallRec.Status::Finished);

               ServOrderRec.SETCURRENTKEY("Service Location No.");
               ServOrderRec.SETRANGE("Service Location No.", "No.");
               ServOrderRec.SETFILTER(Status, '<>%1', ServOrderRec.Status::Finished);
               IF ServOrderRec.FINDFIRST THEN
                 ServOrderRec.TESTFIELD(Status, ServOrderRec.Status::Finished);


               RespRec.SETRANGE("Service Location No.", "No.");
               RespRec.DELETEALL;

               ContactRec.SETRANGE("Service Location No.", "No.");
               ContactRec.DELETEALL;

               PrefEmplRec.SETRANGE("Service Location No.", "No.");
               PrefEmplRec.DELETEALL(TRUE);

               CommLineRec.SETRANGE("Table Name",CommLineRec."Table Name"::"Service Location");
               CommLineRec.SETRANGE("No.","No.");
               CommLineRec.DELETEALL;

               ServTextRec.SETRANGE("Table Name",ServTextRec."Table Name"::"Service Location");
               ServTextRec.SETRANGE("No.","No.");
               ServTextRec.DELETEALL;

               IF TryOutRec.READPERMISSION THEN BEGIN
                 TryOutRec.SETCURRENTKEY("Service Location No.");
                 TryOutRec.SETRANGE("Service Location No.", "No.");
                 IF TryOutRec.FINDSET(TRUE,FALSE) THEN BEGIN
                   REPEAT
                     IF (TryOutRec."Project No." = '') AND
                        (TryOutRec."Estimate No." = '') AND
                        (TryOutRec."Service Contract No." = '') AND
                        (TryOutRec."Service Order No." = '') THEN BEGIN
                       TryOutRec.DELETE(TRUE);
                     END ELSE BEGIN
                       TryOutRec."Service Location No." := '';
                       TryOutRec.MODIFY(TRUE);
                     END;
                   UNTIL TryOutRec.NEXT = 0;
                 END;
               END;

               RefNormRec.SETCURRENTKEY("Service Location No.");
               RefNormRec.SETRANGE("Service Location No.", "No.");
               RefNormRec.DELETEALL;

               LocStructure.SETRANGE("Service Location No.","No.");
               LocStructure.DELETEALL(TRUE);

               ServiceObject.SETCURRENTKEY("Service Location No.");
               ServiceObject.SETRANGE("Service Location No.", "No.");
               IF GUIALLOWED THEN
                 IF NOT ServiceObject.ISEMPTY THEN
                   IF NOT CONFIRM(Text022) THEN
                     ERROR('');
               ServiceObject.DELETEALL(TRUE);

               SubcontrPortLocation.SETCURRENTKEY("Service Location No.");
               SubcontrPortLocation.SETRANGE("Service Location No.", "No.");
               SubcontrPortLocation.DELETEALL(TRUE);

               IF RentalUnit.READPERMISSION THEN BEGIN
                 RentalUnit.SETRANGE("Service Location No.", "No.");
                 IF RentalUnit.FINDFIRST THEN BEGIN
                   RentalUnit."Service Location No." := '';
                   RentalUnit.MODIFY;
                 END;
               END;

               ExchangeFSA('D');
               ExchangeMOB('D');
             END;

    OnRename=BEGIN
               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;
               "Modified by" := USERID;

               ExchangeFSA('R');
               ExchangeMOB('R');
             END;

    CaptionML=ENU=Service Location;
    LookupPageID=Page11012802;
    DrillDownPageID=Page11012802;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  ServSetup.GET;
                                                                  NoSeriesMgt.TestManual(ServSetup."Service Location Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Search Name         ;Code50        ;CaptionML=ENU=Search Name }
    { 3   ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                IF ("Search Name" = UPPERCASE(xRec.Description)) OR ("Search Name" = '') THEN
                                                                  "Search Name" := Description;
                                                              END;

                                                   CaptionML=ENU=Description }
    { 4   ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 12  ;   ;Creation Date       ;Date          ;CaptionML=ENU=Creation Date;
                                                   Editable=No }
    { 13  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                IF ("Starting Date" > "Ending Date") AND ("Ending Date" <> 0D) THEN
                                                                  FIELDERROR("Starting Date",STRSUBSTNO(Text000,FIELDCAPTION("Ending Date")));
                                                              END;

                                                   CaptionML=ENU=Starting Date }
    { 14  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                IF ("Starting Date" > "Ending Date") AND ("Ending Date" <> 0D) THEN
                                                                  FIELDERROR("Ending Date",STRSUBSTNO(Text001,FIELDCAPTION("Starting Date")));
                                                              END;

                                                   CaptionML=ENU=Ending Date }
    { 20  ;   ;Responsible Employee;Code20        ;TableRelation=Resource;
                                                   CaptionML=ENU=Responsible Employee }
    { 28  ;   ;Modified by         ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1210190001 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("Modified by");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Modified by;
                                                   Editable=No }
    { 29  ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=No }
    { 30  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Service Location),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 40  ;   ;Travel Distance     ;Decimal       ;CaptionML=ENU=Travel Distance;
                                                   MinValue=0 }
    { 41  ;   ;Travel Time         ;Decimal       ;CaptionML=ENU=Travel Time;
                                                   MinValue=0 }
    { 42  ;   ;Travel Cost         ;Decimal       ;CaptionML=ENU=Travel Cost;
                                                   MinValue=0 }
    { 50  ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                TestLinkedToRentalUnit(FIELDCAPTION("Customer No."));

                                                                IF "Customer No." <> xRec."Customer No." THEN BEGIN   //db.sn, 21-03-11
                                                                  "Contact Person No." := '';
                                                                  "Contact Person Name" := '';
                                                                END;                                                  //db.en, 21-03-11

                                                                ValidateAddressData(1);
                                                                DetermineTravelCostCode;
                                                              END;

                                                   CaptionML=ENU=Customer No. }
    { 51  ;   ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   CaptionML=ENU=Territory Code }
    { 52  ;   ;Type                ;Code10        ;TableRelation=Type;
                                                   CaptionML=ENU=Type }
    { 53  ;   ;Customer Name       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Customer No.)));
                                                   CaptionML=ENU=Customer Name;
                                                   Editable=No }
    { 58  ;   ;Name                ;Text50        ;CaptionML=ENU=Name;
                                                   Editable=Yes }
    { 59  ;   ;Address             ;Text50        ;OnValidate=BEGIN
                                                                TestLinkedToRentalUnit(FIELDCAPTION(Address));

                                                                VALIDATE("Post Code");
                                                              END;

                                                   CaptionML=ENU=Address;
                                                   Editable=Yes }
    { 60  ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2;
                                                   Editable=Yes }
    { 61  ;   ;City                ;Text30        ;FieldClass=Normal;
                                                   TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                TestLinkedToRentalUnit(FIELDCAPTION(City));
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City;
                                                   Editable=Yes }
    { 62  ;   ;Contact Name        ;Text50        ;FieldClass=Normal;
                                                   CaptionML=ENU=Contact Name;
                                                   Editable=Yes }
    { 63  ;   ;County              ;Text30        ;FieldClass=Normal;
                                                   CaptionML=ENU=County;
                                                   Editable=Yes }
    { 64  ;   ;Post Code           ;Code20        ;FieldClass=Normal;
                                                   TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=VAR
                                                                ExistingLocationNo@1100409000 : Code[20];
                                                              BEGIN
                                                                TestLinkedToRentalUnit(FIELDCAPTION("Post Code"));

                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);

                                                                NormalizePostCodeHouseNo();
                                                                IF GUIALLOWED AND
                                                                   (CurrFieldNo = FIELDNO("Post Code")) AND
                                                                   ("Post Code" <> '') AND
                                                                   (NOT PostCode.GET("Post Code", City))
                                                                THEN
                                                                  MESSAGE(Text009, PostCode.TABLECAPTION, "Post Code");
                                                                IF CurrFieldNo <> 0 THEN
                                                                  IF LocationExists(ExistingLocationNo) THEN
                                                                    MESSAGE(Text012, ExistingLocationNo);
                                                                EvaluatePostCodeGroup;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code;
                                                   Editable=Yes }
    { 65  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region Code }
    { 66  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 67  ;   ;Phone No.           ;Text30        ;CaptionML=ENU=Phone No. }
    { 68  ;   ;Fax No.             ;Text30        ;CaptionML=ENU=Fax No. }
    { 69  ;   ;E-Mail              ;Text80        ;CaptionML=ENU=E-Mail }
    { 160 ;   ;Location Manager    ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Location Manager }
    { 161 ;   ;Location Manager Name;Text50       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Location Manager)));
                                                   CaptionML=ENU=Location Manager Name;
                                                   Editable=No }
    { 170 ;   ;Project No.         ;Code20        ;TableRelation=IF (Supplying Company=FILTER('')) Job;
                                                   OnValidate=BEGIN
                                                                CheckCompanyIC;
                                                                IF "Project No." <> '' THEN
                                                                  ProjRec.GET("Project No.");
                                                              END;

                                                   OnLookup=VAR
                                                              PageNo@1100525000 : Integer;
                                                            BEGIN
                                                              CheckCompanyIC;
                                                              ProjRec."No." := "Project No.";
                                                              IF RefersToOtherCompany THEN
                                                                PageNo := PAGE::"Job List IC";
                                                              IF PAGE.RUNMODAL(PageNo, ProjRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Project No.", ProjRec."No.");
                                                            END;

                                                   CaptionML=ENU=Project No. }
    { 171 ;   ;Supplying Company   ;Text30        ;TableRelation=Company;
                                                   OnValidate=BEGIN
                                                                IF "Supplying Company" = COMPANYNAME THEN
                                                                  ERROR(Text003);
                                                              END;

                                                   CaptionML=ENU=Supplying Company }
    { 175 ;   ;Plot No.            ;Code10        ;TableRelation=IF (Supplying Company=FILTER('')) Plot."Plot No." WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                CheckCompanyIC;
                                                                IF "Plot No." <> '' THEN
                                                                  PlotRec.GET("Project No.", "Plot No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckCompanyIC;
                                                              PlotRec."Project No." := "Project No.";
                                                              PlotRec."Plot No." := "Plot No.";
                                                              IF PAGE.RUNMODAL(0, PlotRec) = ACTION::LookupOK THEN BEGIN
                                                                VALIDATE("Project No.", PlotRec."Project No.");
                                                                VALIDATE("Plot No.", PlotRec."Plot No.");
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Plot No.;
                                                   NotBlank=Yes }
    { 180 ;   ;Estimator           ;Code20        ;TableRelation=Employee.No.;
                                                   CaptionML=ENU=Estimator }
    { 220 ;   ;Text                ;Text250       ;CaptionML=ENU=Text }
    { 230 ;   ;Service Location Folder;Text250    ;CaptionML=ENU=Service Location Folder }
    { 240 ;   ;Mobile Phone No.    ;Text30        ;CaptionML=ENU=Mobile Phone No. }
    { 250 ;   ;Phone No. 2         ;Text30        ;CaptionML=ENU=Phone No. 2 }
    { 260 ;   ;Collect Cost Plus Entry;Boolean    ;CaptionML=ENU=Collect Cost Plus Entry }
    { 275 ;   ;Remote Control      ;Boolean       ;CaptionML=ENU=Remote Control }
    { 280 ;   ;Address Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Customer No.),
                                                                                               Project Address=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                ValidateAddressData(2);
                                                              END;

                                                   CaptionML=ENU=Address Code }
    { 281 ;   ;Address Name        ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Ship-to Address".Name WHERE (Customer No.=FIELD(Customer No.),
                                                                                                    Code=FIELD(Address Code)));
                                                   CaptionML=ENU=Address Name;
                                                   Editable=No }
    { 290 ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
    { 309 ;   ;Last Time Modified  ;Time          ;CaptionML=ENU=Last Time Modified }
    { 320 ;   ;Preferred Employee OBS;Code20      ;TableRelation="Resource (WOP)" WHERE (Type=CONST(Employee));
                                                   CaptionML=ENU=Preferred Employee OBSOLETE;
                                                   Description=OBSOLETE;
                                                   Editable=No }
    { 380 ;   ;Name Estimator      ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Estimator)));
                                                   CaptionML=ENU=Name Estimator;
                                                   Editable=No }
    { 391 ;   ;Reference Date (Item);Date         ;CaptionML=ENU=Reference Date Item Prices }
    { 395 ;   ;Purch Discount Term Group 1;Code20 ;TableRelation="Discount Term Group".Code WHERE (Level=CONST(Customer),
                                                                                                   Type=FILTER(Common|Purchase));
                                                   CaptionML=ENU=Purchase Discount Term Group (Customer) }
    { 396 ;   ;Purch Discount Term Group 2;Code20 ;TableRelation="Discount Term Group".Code WHERE (Level=CONST(Job),
                                                                                                   Type=FILTER(Common|Purchase));
                                                   CaptionML=ENU=Purchase Discount Term Group (Job) }
    { 397 ;   ;Sales Discount Term Group 1;Code20 ;TableRelation="Discount Term Group".Code WHERE (Level=CONST(Customer),
                                                                                                   Type=FILTER(Common|Sales));
                                                   CaptionML=ENU=Sales Discount Term Group (Customer) }
    { 398 ;   ;Sales Discount Term Group 2;Code20 ;TableRelation="Discount Term Group".Code WHERE (Level=CONST(Job),
                                                                                                   Type=FILTER(Common|Sales));
                                                   CaptionML=ENU=Sales Discount Term Group (Job) }
    { 430 ;   ;Parent No.          ;Code20        ;TableRelation="Service Location";
                                                   OnValidate=BEGIN
                                                                IF "Parent No." = "No." THEN
                                                                  ERROR(Text004);
                                                                IF "Parent No." <> '' THEN  //db, 12-08-09: M16168
                                                                  CheckMainSubLocationStructure(Rec."No.", "Parent No.");
                                                              END;

                                                   CaptionML=ENU=Main Location }
    { 440 ;   ;Picture             ;BLOB          ;CaptionML=ENU=Picture;
                                                   SubType=Bitmap }
    { 450 ;   ;Condition           ;Code10        ;TableRelation=Condition.Code;
                                                   CaptionML=ENU=Condition }
    { 460 ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                                UpdatePrefLocations;  //db, 23-02-15: C013902
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 470 ;   ;Watch               ;Code10        ;TableRelation=Watch;
                                                   OnValidate=BEGIN
                                                                IF Watch <> '' THEN
                                                                  LookupCheckWatch(FALSE);
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupCheckWatch(TRUE);
                                                            END;

                                                   CaptionML=ENU=Watch }
    { 480 ;   ;Estimate No.        ;Code20        ;TableRelation=Estimate.No.;
                                                   CaptionML=ENU=Estimate No.;
                                                   Editable=No }
    { 531 ;   ;Date Out of Use     ;Date          ;CaptionML=ENU=Date Out of Use }
    { 540 ;   ;Initial Minutes Working Hours;Integer;
                                                   OnValidate=BEGIN
                                                                IF "Initial Minutes Working Hours" <> 0 THEN BEGIN
                                                                  IF NOT Check4PSMobileActive() THEN
                                                                    ProjSetupRec.TESTFIELD("4PS-Mobile Active", TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Initial Minutes Working Hours;
                                                   MinValue=0 }
    { 541 ;   ;Round Working Hours on Minutes;Integer;
                                                   OnValidate=BEGIN
                                                                IF "Round Working Hours on Minutes" <> 0 THEN BEGIN
                                                                  IF NOT Check4PSMobileActive() THEN
                                                                    ProjSetupRec.TESTFIELD("4PS-Mobile Active", TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Round Working Hours on Minutes;
                                                   MinValue=0 }
    { 542 ;   ;Round Travel Hours on Minutes;Integer;
                                                   OnValidate=BEGIN
                                                                IF "Round Travel Hours on Minutes" <> 0 THEN BEGIN
                                                                  IF NOT Check4PSMobileActive() THEN
                                                                    ProjSetupRec.TESTFIELD("4PS-Mobile Active", TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Round Travel Hours on Minutes;
                                                   MinValue=0 }
    { 550 ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 560 ;   ;Location Customer   ;Code20        ;CaptionML=ENU=Location Customer }
    { 570 ;   ;Post Code Group     ;Code20        ;TableRelation="Post Code Group".Code;
                                                   OnValidate=BEGIN
                                                                PostCode.GetTerritoryByPostCodeGroup(City,"Post Code","Territory Code");  //db, 11-02-13: C005566
                                                              END;

                                                   CaptionML=ENU=Post Code Group;
                                                   Description=SERV_CONS }
    { 580 ;   ;Customer Feature    ;Text30        ;CaptionML=ENU=Customer Feature;
                                                   Description=SERV_CONS }
    { 585 ;   ;Location Structure Format;Code20   ;OnValidate=VAR
                                                                pos@1100528600 : Integer;
                                                                Level@1100528601 : Integer;
                                                              BEGIN
                                                                IF "Location Structure Format" = '' THEN
                                                                  EXIT;

                                                                Level := 1;
                                                                REPEAT
                                                                  pos += 1;
                                                                  IF COPYSTR("Location Structure Format", pos, 1) = '.' THEN
                                                                    Level += 1;
                                                                UNTIL pos = STRLEN("Location Structure Format");
                                                                IF Level > 3 THEN
                                                                  ERROR(Text008);
                                                              END;

                                                   CaptionML=ENU=Location Structure Format;
                                                   Description=SERV_CONS }
    { 590 ;   ;Contact No.         ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Contact Business Relation"."Contact No." WHERE (Link to Table=CONST(Customer),
                                                                                                                       No.=FIELD(Customer No.)));
                                                   CaptionML=ENU=Contact No.;
                                                   Editable=No }
    { 595 ;   ;Contact Person No.  ;Code20        ;TableRelation=Contact.No. WHERE (Type=CONST(Person),
                                                                                    Company No.=FIELD(Contact No.),
                                                                                    Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Contact Person Name");
                                                                "Contact Name" := "Contact Person Name";
                                                              END;

                                                   CaptionML=ENU=Contact Person No. }
    { 596 ;   ;Contact Person Name ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Contact Person No.)));
                                                   CaptionML=ENU=Contact Person Name;
                                                   Editable=No }
    { 600 ;   ;Complex Code        ;Code10        ;TableRelation=Complex;
                                                   CaptionML=ENU=Complex Code }
    { 610 ;   ;Default Tender Code System (VE;Code10;
                                                   TableRelation="Coding System"."Coding System";
                                                   CaptionML=ENU=Default Tender Code System (OBSOLETE);
                                                   Description=OBSOLETE }
    { 620 ;   ;House No.           ;Code20        ;CaptionML=ENU=House No.;
                                                   Description=SERV_CONS }
    { 630 ;   ;House No. Ext.      ;Code10        ;CaptionML=ENU=House No. Extension;
                                                   Description=SERV_CONS }
    { 640 ;   ;Travel Cost Code    ;Code10        ;TableRelation="Travel Cost Code";
                                                   CaptionML=ENU=Travel Cost Code }
    { 650 ;   ;Building Code       ;Code20        ;TableRelation=Building;
                                                   CaptionML=ENU=Building }
    { 660 ;   ;Building Description;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Building.Description WHERE (Code=FIELD(Building Code)));
                                                   CaptionML=ENU=Building Description;
                                                   Editable=No }
    { 670 ;   ;Publish on Service Portal;Boolean  ;CaptionML=ENU=Publish on Service Portal }
    { 680 ;   ;Maintenance Day     ;Option        ;CaptionML=ENU=Maintenance Day;
                                                   OptionCaptionML=ENU=" ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday,Weekday,Weekend";
                                                   OptionString=[ ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday,Weekday,Weekend] }
    { 690 ;   ;Starting Time Maint. Window;Time   ;OnValidate=BEGIN
                                                                TestMaintenanceTimes;
                                                              END;

                                                   CaptionML=ENU=Starting Time Maintenance Window }
    { 700 ;   ;Ending Time Maint. Window;Time     ;OnValidate=BEGIN
                                                                TestMaintenanceTimes;
                                                              END;

                                                   CaptionML=ENU=Ending Time Maintenance Window }
    { 710 ;   ;Deliver             ;Option        ;OnValidate=BEGIN
                                                                //db, 18-12-12: C000433
                                                                IF Deliver <> xRec.Deliver THEN
                                                                  "Ship To Location" := '';
                                                              END;

                                                   CaptionML=ENU=Deliver;
                                                   OptionCaptionML=ENU=" ,Location";
                                                   OptionString=[ ,Location] }
    { 720 ;   ;Ship To Location    ;Code20        ;TableRelation=IF (Deliver=CONST(Location)) Location.Code;
                                                   OnValidate=BEGIN
                                                                //db, 18-12-12: C000433
                                                                IF ("Ship To Location" <> '') THEN
                                                                  TESTFIELD(Deliver);
                                                              END;

                                                   CaptionML=ENU=Ship To Location }
    { 800 ;   ;Make Location Portal  Site;Boolean ;CaptionML=ENU=Make Location Portal  Site }
    { 810 ;   ;Location Portal Site Generated;Boolean;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                CheckIfChangingSiteURLAllowed;
                                                              END;

                                                   CaptionML=ENU=Location Portal Site Generated }
    { 820 ;   ;Location Portal URL ;Text100       ;OnValidate=BEGIN
                                                                //**4PS
                                                                CheckIfChangingSiteURLAllowed;
                                                              END;

                                                   ExtendedDatatype=URL;
                                                   CaptionML=ENU=Location Portal URL }
    { 830 ;   ;Warranty Project No.;Code20        ;TableRelation=Job WHERE (Internal Project=CONST(No));
                                                   OnValidate=VAR
                                                                Job@1100528600 : Record 11072003;
                                                                ProjectElement@1100528601 : Record 11012010;
                                                              BEGIN
                                                                IF "Warranty Project No." <> xRec."Warranty Project No." THEN BEGIN
                                                                  VALIDATE("Warranty Element No", '');
                                                                  IF "Warranty Project No." <> '' THEN BEGIN
                                                                    Job.GET("Warranty Project No.");
                                                                    IF NOT (Job."Project Status" IN [Job."Project Status"::Production, Job."Project Status"::"Technical Finished"]) THEN
                                                                      Job.FIELDERROR("Project Status");
                                                                  END ELSE
                                                                    "Warranty Expires On" := 0D;
                                                                  IF NOT ProjectElement.GET("Warranty Project No.", "Warranty Element No") THEN
                                                                    "Warranty Element No" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Warranty Project No. }
    { 840 ;   ;Warranty Element No ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Warranty Project No.));
                                                   CaptionML=ENU=Warranty Element No }
    { 850 ;   ;Warranty Expires On ;Date          ;OnValidate=BEGIN
                                                                IF "Warranty Expires On" <> 0D THEN
                                                                  TESTFIELD("Warranty Project No.");
                                                              END;

                                                   CaptionML=ENU=Warranty Expires On }
    { 11012000;;LT. Maint. Plan Location;Boolean  ;OnValidate=BEGIN
                                                                IF "LT. Maint. Plan Location" THEN BEGIN
                                                                  CALCFIELDS("Def. LTMP Loc. Structure No.");
                                                                  IF "Def. LTMP Loc. Structure No." = 0 THEN
                                                                    ERROR(Text013, "No.");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=LT. Maint. Plan Location }
    { 11012010;;Def. LTMP Loc. Structure No.;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location Structure".No. WHERE (Service Location No.=FIELD(No.),
                                                                                                              Default for LTMP=CONST(Yes)));
                                                   CaptionML=ENU=Default LTMP Location Structure No.;
                                                   Editable=No }
    { 11012020;;Total Cost Amount  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Cost (LCY)" WHERE (Service Location No.=FIELD(No.),
                                                                                                                    Cost Present=CONST(Yes),
                                                                                                                    Posting Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Total Cost Amount;
                                                   Editable=No }
    { 11012030;;Period Filter      ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Period Filter }
    { 11012040;;No. of Service Calls;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Service Call" WHERE (Service Location No.=FIELD(No.),
                                                                                           Receiving Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=No. of Service Calls;
                                                   Editable=No }
    { 11012050;;Postal Address App. Letter;Option ;OnValidate=BEGIN
                                                                IF "Postal Address App. Letter" <> "Postal Address App. Letter"::"Customer Address" THEN
                                                                  VALIDATE("Customer Address Code", '');
                                                              END;

                                                   CaptionML=ENU=Postal Address App. Letter;
                                                   OptionCaptionML=ENU=Customer,Customer Address,Service Location;
                                                   OptionString=Customer,Customer Address,Service Location }
    { 11012060;;Customer Address Code;Code10      ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Customer No.));
                                                   OnValidate=BEGIN
                                                                IF "Customer Address Code" <> '' THEN
                                                                  TESTFIELD("Postal Address App. Letter", "Postal Address App. Letter"::"Customer Address");
                                                              END;

                                                   CaptionML=ENU=Customer Address Code }
    { 11012070;;Post Code Type     ;Option        ;CaptionML=ENU=Post Code Type;
                                                   OptionCaptionML=ENU=" ,Odd,Even,House Boat,House Trailer";
                                                   OptionString=[ ,Odd,Even,House Boat,House Trailer];
                                                   Editable=No }
    { 11012990;;Export to FSA      ;Boolean       ;CaptionML=ENU=Export to Field Service;
                                                   Description=Indication new/changed. BDA= Buitendienstadmin. (Field Service Admin.) }
    { 11012991;;Date/Time Export to FSA;DateTime  ;CaptionML=ENU=Date/Time Export to Field Service }
    { 11125625;;VAT Prod. Posting Group;Code10    ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                CheckVATReverse(TRUE,FALSE);
                                                              END;

                                                   CaptionML=ENU=VAT Prod. Posting Group;
                                                   Description=4PS-BE }
    { 11125626;;Percentage Labor   ;Decimal       ;OnValidate=BEGIN
                                                                CheckVATReverse(TRUE,FALSE);
                                                              END;

                                                   CaptionML=ENU=% Labor;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Description=4PS-BE;
                                                   AutoFormatType=1 }
    { 11125627;;Percentage to B Account;Decimal   ;OnValidate=BEGIN
                                                                CheckVATReverse(TRUE,FALSE);
                                                              END;

                                                   CaptionML=ENU=% to B Account;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Description=4PS-BE }
    { 11125630;;Service Location Type;Code10      ;TableRelation="Service Location Type";
                                                   CaptionML=ENU=Service Location Type }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Customer No.                             }
    {    ;Post Code                                }
    {    ;Search Name                              }
    {    ;City,Address                             }
    {    ;Supplying Company,Project No.            }
    {    ;Post Code,House No.,House No. Ext.       }
    {    ;Building Code                            }
    {    ;Complex Code                             }
    {    ;LT. Maint. Plan Location                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@11012009 : TextConst 'ENU=must occur before %1';
      Text001@11012010 : TextConst 'ENU=Must occur after  %1';
      ServSetup@11012000 : Record 11012800;
      ProjSetupRec@1100525001 : Record 315;
      PrefEmplRec@1100485002 : Record 11012843;
      CustRec@1210190000 : Record 18;
      AdrsRec@11012004 : Record 222;
      PostCode@1210190001 : Record 225;
      ProjRec@1210190006 : Record 11072003;
      PlotRec@1210190007 : Record 11012500;
      NoSeriesMgt@1210190002 : Codeunit 396;
      Text003@1210190003 : TextConst 'ENU=Fill Supplying Company only when it differs from current Company';
      Text004@1100485000 : TextConst 'ENU=The Service Location cannot be linked to itself.';
      Text005@1100485001 : TextConst 'ENU=The Service Location %1 is already a Sub Location of Service Location %2';
      Text006@1100485004 : TextConst 'ENU=%1 %2 created';
      Text007@1100525002 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      DPA_Management@1100000999 : Codeunit 11012783;
      Text008@1100528600 : TextConst 'ENU=Only 3 levels allowed';
      Text009@1100528300 : TextConst 'ENU=%1 %2 is not a valid %1.';
      Text010@1210190008 : TextConst 'ENU=%1 Objects Created';
      Text011@1100528700 : TextConst 'ENU=%1 cannot be changed. %2 is linked to %3.';
      Text012@1100409000 : TextConst 'ENU=Location already exists at No. %1';
      Text013@1100525005 : TextConst 'ENU=Service Location %1 has no standard LTMP Location Structure';
      Text020@1100525003 : TextConst 'ENU=Do you want to change Address Data: \\Old: \%1 \%2 \%3 \%4 \%5 \\New: \%6 \%7 \%8 \%9 \%10';
      Text021@1100525004 : TextConst 'ENU=Update changed Customer No.';
      Text022@1100525000 : TextConst 'ENU=This will delete all linked objects, continue?';
      Text999a@1100530000 : TextConst 'ENU=Change Data';
      Text999b@1100530001 : TextConst 'ENU=Old';
      Text999c@1100530002 : TextConst 'ENU=New';
      Text11012040@1100409001 : TextConst 'ENU=Do you want to replace existing preferred locations?';

    PROCEDURE AssistEdit@2(OldServLoc@11012000 : Record 11012801) : Boolean;
    VAR
      ServLoc@1100525000 : Record 11012801;
    BEGIN
      WITH ServLoc DO BEGIN
        ServLoc := Rec;
        ServSetup.GET;
        ServSetup.TESTFIELD("Service Location Nos.");
        IF NoSeriesMgt.SelectSeries(ServSetup."Service Location Nos.",OldServLoc."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := ServLoc;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimMgt@1100525000 : Codeunit 408;
      DimValRec@1100525001 : Record 349;
    BEGIN
      //db, 19-08-09: M15896
      IF ShortcutDimCode = '' THEN EXIT;
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.GetDimValueRec(FieldNumber, ShortcutDimCode, DimValRec, TRUE,'');
      IF NOT DimMgt.CheckDimValue(DimValRec."Dimension Code",ShortcutDimCode) THEN
        ERROR(DimMgt.GetDimErr);
    END;

    PROCEDURE EstimatorName@3() : Text[100];
    VAR
      EmplRec@11012000 : Record 5200;
      EstNameTxt@11012001 : Text[100];
    BEGIN
      IF EmplRec.GET(Estimator) THEN
        EstNameTxt := EmplRec.FullName
      ELSE
        EstNameTxt := '';
      EXIT(EstNameTxt);
    END;

    PROCEDURE UpdateLogbook@1000000000(lvServLocNo@1000000000 : Code[20]);
    VAR
      lvServLocRec@1000000001 : Record 11012801;
    BEGIN
      lvServLocRec.GET(lvServLocNo);
      lvServLocRec.TESTFIELD(Blocked, FALSE);
      lvServLocRec."Last Date Modified" := TODAY;
      lvServLocRec."Last Time Modified" := TIME;
      lvServLocRec."Modified by" := USERID;
      lvServLocRec.MODIFY;
    END;

    PROCEDURE ShowContact@1210190000(lvCust@1210190001 : Code[20]);
    VAR
      CustRec@1210190000 : Record 18;
      ContRec@1210190006 : Record 5050;
      OldRec@1100530000 : Record 11012801;
      Txt1@1100530001 : Text[250];
      Txt2@1100530002 : Text[250];
    BEGIN
      OldRec := Rec;

      CustRec.ShowContactName(lvCust, ContRec);

      IF ContRec.Name <> '' THEN BEGIN
        VALIDATE("Contact Person No.", ContRec."No.");  //db, 25-05-11
        "Contact Name" := ContRec.Name;
        "Phone No." := ContRec."Phone No. Work";
        "Phone No. 2" := ContRec."Phone No. Work 2";
        IF "Phone No." = '' THEN
          "Phone No." := ContRec."Phone No.";
        IF "Phone No. 2" = '' THEN
          "Phone No. 2" := ContRec."Phone No. 2";
        "Mobile Phone No." := ContRec."Mobile Phone No.";
        "Fax No." := ContRec."Fax No.";
        "E-Mail" := ContRec."E-Mail";

        //M24165 sn
        IF ("No." <> '') THEN BEGIN
          IF ((OldRec."Contact Name" + OldRec."Phone No." + OldRec."Phone No. 2"  +
               OldRec."E-Mail" + OldRec."Mobile Phone No." ) <>
              ("Contact Name" + "Phone No." + "Phone No. 2"  +
               "E-Mail" + "Mobile Phone No." )) AND
             ((OldRec."Contact Name" + OldRec."Phone No." + OldRec."Phone No. 2" +
               OldRec."E-Mail" + OldRec."Mobile Phone No.") <> '') THEN
          BEGIN
            Txt1 := STRSUBSTNO('%1: \%2: \%3 \%4 \%5 \%6 \%7 \\',
              Text999a, Text999b,
              OldRec."Contact Name", OldRec."Phone No.", OldRec."Phone No. 2",
              OldRec."E-Mail", OldRec."Mobile Phone No.");
            Txt2 := STRSUBSTNO('%1: \%2 \%3 \%4 \%5 \%6 \\',
              Text999c,
              "Contact Name", "Phone No.", "Phone No. 2",
              "E-Mail", "Mobile Phone No.");

            IF CONFIRM(Txt1 + Txt2, TRUE) = FALSE THEN BEGIN
              "Phone No." := OldRec."Phone No.";
              "Phone No. 2" := OldRec."Phone No. 2";
              "Mobile Phone No." := OldRec."Mobile Phone No.";
              "Fax No." := OldRec."Fax No.";
              "E-Mail" := OldRec."E-Mail";
            END ELSE BEGIN
              OldRec."Phone No." := "Phone No.";
              OldRec."Phone No. 2" := "Phone No. 2";
              OldRec."Mobile Phone No." := "Mobile Phone No.";
              OldRec."Fax No." := "Fax No.";
              OldRec."E-Mail" := "E-Mail";
            END;
          END;
        END;
        //M24165 en
      END;
    END;

    PROCEDURE ValidateAddressData@1210190001(lvAction@1210190002 : Integer);
    VAR
      Contact@1100525000 : Record 5050;
    BEGIN
      IF lvAction = 1 THEN BEGIN
        IF "Customer No." <> xRec."Customer No." THEN BEGIN
          IF AdrsRec.GET("Customer No.","Address Code") THEN BEGIN
            Name := AdrsRec.Name;
            Address := AdrsRec.Address;
            "Address 2" := AdrsRec."Address 2";
            City := AdrsRec.City;
            "Contact Name":= AdrsRec.Contact;
            County := AdrsRec.County;
            "Country/Region Code":= AdrsRec."Country/Region Code";
            "Post Code" := AdrsRec."Post Code";
            "Phone No." := AdrsRec."Phone No.";
            "Mobile Phone No." := AdrsRec."Mobile Phone No.";
            "Fax No." := AdrsRec."Fax No.";
            "E-Mail" := AdrsRec."E-Mail";
            IF NOT CustRec.GET("Customer No.") THEN CustRec.INIT;
            "Territory Code" := CustRec."Territory Code";
            EvaluatePostCodeGroup;  //db, 11-02-13: C005566
            //db.sn, 28-09-10
            "Travel Distance" := AdrsRec."Travel Distance";
            "Travel Time" := AdrsRec."Travel Time";
            "Travel Cost" := AdrsRec."Travel Cost";
            //db.en, 28-09-10
          END ELSE BEGIN
            "Address Code" := '';
            IF Contact.GetContactByCustomer("Customer No.", Contact, FALSE) AND (Contact."Visit Address" <> '')
            THEN BEGIN
              Name := Contact.Name;
              Address := Contact."Visit Address";;
              "Address 2" := Contact."Visit Address 2";
              City := Contact."Visit Address City";
              "Contact Name" := '';
              County := Contact."Visit Address County";
              "Country/Region Code" := Contact."Visit Address Country/Region";
              "Post Code" := Contact."Visit Address Post Code";
              "Phone No." := Contact."Phone No.";
              "Phone No. 2" := Contact."Phone No. 2";
              "Mobile Phone No." := Contact."Mobile Phone No.";
              "Fax No." := Contact."Fax No.";
              "E-Mail" := Contact."E-Mail";
              "Territory Code" := Contact."Territory Code";
              EvaluatePostCodeGroup;
            END ELSE BEGIN
              IF CustRec.GET("Customer No.") THEN BEGIN
                Name := CustRec.Name;
                Address := CustRec.Address;
                "Address 2" := CustRec."Address 2";
                City := CustRec.City;
                "Contact Name" := CustRec.Contact;
                County := CustRec.County;
                "Country/Region Code":= CustRec."Country/Region Code";
                "Post Code" := CustRec."Post Code";
                "Phone No." := CustRec."Phone No.";
                "Phone No. 2" := CustRec."Phone No. 2";
                "Mobile Phone No." := CustRec."Mobile Phone No.";
                "Fax No." := CustRec."Fax No.";
                "E-Mail" := CustRec."E-Mail";
                "Territory Code" := CustRec."Territory Code";
                EvaluatePostCodeGroup;  //db, 11-02-13: C005566
              END;
            END;
          END;
        END;
      END;

      IF lvAction = 2 THEN BEGIN
        IF ("Address Code" <> '') AND
           (("Address Code" <> xRec."Address Code") OR ("Customer No." <> xRec."Customer No."))
        THEN BEGIN
          AdrsRec.GET("Customer No.","Address Code");
          Name := AdrsRec.Name;
          Address := AdrsRec.Address;
          "Address 2" := AdrsRec."Address 2";
          City := AdrsRec.City;
          "Contact Name":= AdrsRec.Contact;
          County := AdrsRec.County;
          "Country/Region Code":= AdrsRec."Country/Region Code";
          "Post Code" := AdrsRec."Post Code";
          "Phone No." := AdrsRec."Phone No.";
          "Mobile Phone No." := AdrsRec."Mobile Phone No.";
          "Fax No." := AdrsRec."Fax No.";
          "E-Mail" := AdrsRec."E-Mail";
          IF NOT CustRec.GET("Customer No.") THEN CustRec.INIT;
          "Territory Code" := CustRec."Territory Code";
          EvaluatePostCodeGroup;  //db, 11-02-13: C005566
          //DP00195 sn.
          "Travel Distance" := AdrsRec."Travel Distance";
          "Travel Time" := AdrsRec."Travel Time";
          "Travel Cost Code" := AdrsRec."Travel Cost Code";
          //DP00195 en.
        END ELSE BEGIN
          IF Contact.GetContactByCustomer("Customer No.", Contact, FALSE) AND (Contact."Visit Address" <> '')
          THEN BEGIN
            Name := Contact.Name;
            Address := Contact."Visit Address";;
            "Address 2" := Contact."Visit Address 2";
            City := Contact."Visit Address City";
            "Contact Name" := '';
            County := Contact."Visit Address County";
            "Country/Region Code" := Contact."Visit Address Country/Region";
            "Post Code" := Contact."Visit Address Post Code";
            "Phone No." := Contact."Phone No.";
            "Phone No. 2" := Contact."Phone No. 2";
            "Mobile Phone No." := Contact."Mobile Phone No.";
            "Fax No." := Contact."Fax No.";
            "E-Mail" := Contact."E-Mail";
            "Territory Code" := Contact."Territory Code";
            EvaluatePostCodeGroup;
          END ELSE BEGIN
            IF CustRec.GET("Customer No.") THEN BEGIN
              Name := CustRec.Name;
              Address := CustRec.Address;
              "Address 2" := CustRec."Address 2";
              City := CustRec.City;
              "Contact Name" := CustRec.Contact;
              County := CustRec.County;
              "Country/Region Code":= CustRec."Country/Region Code";
              "Post Code" := CustRec."Post Code";
              "Phone No." := CustRec."Phone No.";
              "Phone No. 2" := CustRec."Phone No. 2";
              "Mobile Phone No." := CustRec."Mobile Phone No.";
              "Fax No." := CustRec."Fax No.";
              "E-Mail" := CustRec."E-Mail";
              "Territory Code" := CustRec."Territory Code";
              EvaluatePostCodeGroup;  //db, 11-02-13: C005566
            END;
          END;
        END;
      END;

      IF (CurrFieldNo <> 0) AND ("No." <> '') THEN BEGIN
        IF ((xRec.Name + xRec.Address + xRec.City) <> (Name + Address + City)) AND
           ((xRec.Name + xRec.Address + xRec.City) <> '') THEN BEGIN
          IF CONFIRM(Text020, TRUE,
            xRec.Name, xRec.Address, (xRec."Post Code" + '  ' + xRec.City), xRec."Contact Name", xRec."Phone No.",
            Name, Address, ("Post Code" + '  ' + City), "Contact Name", "Phone No.") = FALSE THEN
          BEGIN
            IF CONFIRM(Text021) = FALSE THEN ERROR('');
            Name := xRec.Name;
            Address := xRec.Address;
            "Address 2" := xRec."Address 2";
            City := xRec.City;
            County := xRec.County;
            "Country/Region Code":= xRec."Country/Region Code";
            "Post Code" := xRec."Post Code";
            "Contact Name" := xRec."Contact Name";
            "Phone No." := xRec."Phone No.";
            "Phone No. 2" := xRec."Phone No. 2";
            "Mobile Phone No." := xRec."Mobile Phone No.";
            "Fax No." := xRec."Fax No.";
            "E-Mail" := xRec."E-Mail";
            "Territory Code" := xRec."Territory Code";  //db, 02-01-15: C020094
          END ELSE BEGIN
            xRec.Name := Name;
            xRec.Address := Address;
            xRec."Address 2" := "Address 2";
            xRec.City := City;
            xRec.County := County;
            xRec."Country/Region Code":= "Country/Region Code";
            xRec."Post Code" := "Post Code";
            xRec."Contact Name" := "Contact Name";
            xRec."Phone No." := "Phone No.";
            xRec."Phone No. 2" := "Phone No. 2";
            xRec."Mobile Phone No." := "Mobile Phone No.";
            xRec."Fax No." := "Fax No.";
            xRec."E-Mail" := "E-Mail";
            xRec."Territory Code" := "Territory Code";  //db, 02-01-15: C020094
          END;
        END;
      END;
    END;

    PROCEDURE CheckCompanyIC@32();
    VAR
      lvCompName@1210190000 : Text[50];
    BEGIN
      IF "Supplying Company" <> '' THEN
        lvCompName := "Supplying Company"
      ELSE
        lvCompName := COMPANYNAME;

      ProjRec.CHANGECOMPANY(lvCompName);
      PlotRec.CHANGECOMPANY(lvCompName);
    END;

    PROCEDURE RefersToOtherCompany@1100525000() : Boolean;
    BEGIN
      EXIT(("Supplying Company" <> '') AND ("Supplying Company" <> COMPANYNAME));
    END;

    PROCEDURE GetProjectDesc@1210190002() : Text[50];
    BEGIN
      CheckCompanyIC;

      IF NOT ProjRec.GET("Project No.") THEN ProjRec.INIT;
      EXIT(ProjRec.Description);
    END;

    PROCEDURE GetProjectDesc2@1210190003(lvServLoc@1210190000 : Code[20]) : Text[50];
    BEGIN
      IF NOT GET(lvServLoc) THEN INIT;
      EXIT( GetProjectDesc );
    END;

    PROCEDURE CheckMainSubLocationStructure@1100485000(iCodServiceLocationNo@1100485000 : Code[20];iCodNewServiceLocationNo@1100485002 : Code[20]);
    VAR
      lRecServiceLocation@1100485001 : Record 11012801;
    BEGIN
      lRecServiceLocation.SETRANGE("Parent No.", iCodServiceLocationNo);
      IF lRecServiceLocation.FINDSET THEN
        REPEAT
          IF lRecServiceLocation."No." = iCodNewServiceLocationNo THEN
            ERROR(Text005, lRecServiceLocation."No.", iCodServiceLocationNo);
          CheckMainSubLocationStructure(lRecServiceLocation."No.", iCodNewServiceLocationNo);
        UNTIL lRecServiceLocation.NEXT = 0;
    END;

    PROCEDURE CreateProject@1100485001(gvServLocRec@1100485004 : Record 11012801;gvProjRec@1100485003 : Record 11072003);
    VAR
      lvProjRec@1100485000 : Record 11072003;
      lvProjCustRec@1100485001 : Record 11012005;
    BEGIN
      WITH gvServLocRec DO BEGIN
        lvProjRec.INIT;
        lvProjRec."No." := gvProjRec."No.";
        lvProjRec."No. Series" := gvProjRec."No. Series";
        lvProjRec.VALIDATE(Description, gvProjRec.Description);
        lvProjRec.INSERT(TRUE);

        lvProjRec."Project Type" := lvProjRec.DetProjectTypeSeriesSimple(COMPANYNAME);  //db, 22-09-09: M16533

        IF "Customer No." <> '' THEN BEGIN
          lvProjCustRec.INIT;
          lvProjCustRec."Project No." := lvProjRec."No.";
          lvProjCustRec.VALIDATE(Principal, "Customer No.");
          lvProjCustRec.INSERT(TRUE);
          lvProjRec.VALIDATE("Bill-to Customer No.", "Customer No.");
        END;

        lvProjRec."Project Address Code" := "Address Code";
        lvProjRec."Created from Service Loc. No." := "No.";

        lvProjRec.Address := Address;
        lvProjRec."Address 2" := "Address 2";
        lvProjRec.City := City;
        lvProjRec."Post Code" := "Post Code";
        lvProjRec.County := County;
        lvProjRec."Country/Region Code":= "Country/Region Code";
        lvProjRec."Territory Code":= "Territory Code";

        lvProjRec.Contact := "Contact Name";
        lvProjRec."Phone No." := "Phone No.";
      //lvProjRec."Phone No. 2" := "Phone No. 2";
        lvProjRec."Mobile Phone No." := "Mobile Phone No.";
        lvProjRec."Fax No." := "Fax No.";
      //lvProjRec."E-Mail" := "E-Mail";

        IF "Global Dimension 1 Code" <> '' THEN
          lvProjRec.VALIDATE("Global Dimension 1 Code", "Global Dimension 1 Code");

        lvProjRec."Starting Date" := "Starting Date";
        lvProjRec."Ending Date" := "Ending Date";
        lvProjRec.MODIFY;

        MESSAGE(Text006, lvProjRec.TABLECAPTION, lvProjRec."No.");
      END;
    END;

    PROCEDURE CreateServContract@1100485008(gvServLocRec@1100485004 : Record 11012801;gvServContrRec@1100485005 : Record 11012812);
    VAR
      lvContrRec@1100485000 : Record 11012812;
    BEGIN
      WITH gvServLocRec DO BEGIN
        lvContrRec.INIT;
        lvContrRec."No." := gvServContrRec."No.";
        lvContrRec."No. Series" := gvServContrRec."No. Series";
        lvContrRec.VALIDATE(Description, gvServContrRec.Description);
        lvContrRec.INSERT(TRUE);

        lvContrRec."Service Type" := lvContrRec.DetServiceTypeSeriesSimple;  //db, 22-09-09: M16533

        lvContrRec.VALIDATE("Customer No.", "Customer No.");
        lvContrRec."Contact Name" := "Contact Name";
        lvContrRec."Phone No." := "Phone No.";
        lvContrRec."Phone No. 2" := "Phone No. 2";
        lvContrRec."Mobile Phone No." := "Mobile Phone No.";
        lvContrRec."Fax No." := "Fax No.";
        lvContrRec."E-Mail" := "E-Mail";
        IF "Global Dimension 1 Code" <> '' THEN
          lvContrRec.VALIDATE("Global Dimension 1 Code", "Global Dimension 1 Code");
        lvContrRec.MODIFY;

        MESSAGE(Text006, lvContrRec.TABLECAPTION, lvContrRec."No.");
      END;
    END;

    PROCEDURE GenerateServLocations@1100485002();
    VAR
      ImexRec@1210190007 : Record 11012056;
      PlotRec@1210190006 : Record 11012500;
      ProjRec@1210190005 : Record 11072003;
      CompRec@1210190004 : Record 2000000006;
      ServLocRec@1210190003 : Record 11012801;
      lvJobListFrm@1210190011 : Page 11072004;
      lvPlotListFrm@1210190008 : Page 11012506;
      lvProj@1210190002 : Code[20];
      lvPlot@1210190001 : Code[20];
      lvCompName@1210190000 : Text[50];
      sep_pos@1210190009 : Integer;
      Selection@1210190010 : Integer;
      AskQues@1210190012 : Integer;
      lvText001@1100485001 : TextConst 'ENU=Job,Plot';
      lvText002@1100485000 : TextConst 'ENU=Skip,Update';
      LocationAdded@1100485002 : Boolean;
      RecRef@1100525000 : RecordRef;
    BEGIN
      Selection := STRMENU(lvText001, 2);  //1=Project; 2=Plot
      IF Selection = 0 THEN EXIT;

      ImexRec.SETRANGE("User ID", USERID);
      ImexRec.SETFILTER("Process ID", 'GENSERVLOC*');
      ImexRec.SETRANGE(Type, ImexRec.Type::Export);
      ImexRec.DELETEALL;
      COMMIT;

      lvCompName := COMPANYNAME;
      IF PAGE.RUNMODAL(PAGE::Companies, CompRec) = ACTION::LookupOK THEN
        lvCompName := CompRec.Name;

      IF Selection = 1 THEN BEGIN
        ProjRec.CHANGECOMPANY(lvCompName);
        lvJobListFrm.InitSelectionCopyServLoc(lvCompName);
        lvJobListFrm.RUNMODAL;
      END;

      IF Selection = 2 THEN BEGIN
        PlotRec.CHANGECOMPANY(lvCompName);
        lvPlotListFrm.InitSelectionCopyServLoc(lvCompName);
        lvPlotListFrm.RUNMODAL;
      END;

      ImexRec.SETRANGE("User ID", USERID);
      ImexRec.SETFILTER("Process ID", 'GENSERVLOC*');
      ImexRec.SETRANGE(Type, ImexRec.Type::Export);
      IF ImexRec.FINDSET THEN BEGIN
        REPEAT
          IF ImexRec.Description = 'Job' THEN BEGIN
            lvProj := ImexRec.Condition;
            ProjRec.GET(lvProj);

            ServLocRec.RESET;
            ServLocRec.SETRANGE("Project No." , lvProj);
            ServLocRec.SETFILTER("Plot No.", '%1', '');
            IF NOT ServLocRec.FINDFIRST THEN BEGIN
              ServLocRec.RESET;
              ServLocRec.INIT;
              ServLocRec."No." := '';
              IF lvCompName <> COMPANYNAME THEN
                ServLocRec."Supplying Company" := lvCompName;
              ServLocRec."Project No." := lvProj;
              ServLocRec.INSERT(TRUE);
            END ELSE BEGIN
              IF AskQues = 0 THEN
                AskQues := STRMENU(lvText002, 1);  //1=skip; 2=update
            END;
            IF AskQues <> 1 THEN BEGIN
              ServLocRec.VALIDATE(Description, ProjRec.Description);
              ServLocRec.Address := ProjRec.Address;
              ServLocRec."Address 2" := ProjRec."Address 2";
              ServLocRec.City := ProjRec.City;
              ServLocRec."Post Code" := ProjRec."Post Code";
              ServLocRec.County := ProjRec.County;
              ServLocRec."Country/Region Code":= ProjRec."Country/Region Code";
              ServLocRec."Territory Code" := ProjRec."Territory Code";
              ServLocRec.Type := ProjRec.Type;
              ServLocRec.MODIFY;

              RecRef.GETTABLE(ProjRec);

              CreateDocumentLink(ServLocRec, RecRef, lvCompName);
            END;
          END;

          IF ImexRec.Description = 'Plot' THEN BEGIN
            sep_pos := STRPOS(ImexRec.Condition, '~');
            IF sep_pos <> 0 THEN BEGIN
              lvProj := COPYSTR(ImexRec.Condition, 1, sep_pos - 1);
              lvPlot := COPYSTR(ImexRec.Condition, sep_pos + 1, MAXSTRLEN(lvPlot));
              PlotRec.GET(lvProj, lvPlot);
              PlotRec.CALCFIELDS("Buyer Name", "Buyer Phone", "Buyer Phone 2",
                 "Buyer Mobile Phone", "Buyer E-Mail");

              ServLocRec.RESET;
              ServLocRec.SETRANGE("Project No." , lvProj);
              ServLocRec.SETRANGE("Plot No.", lvPlot);
              IF NOT ServLocRec.FINDFIRST THEN BEGIN
                ServLocRec.RESET;
                ServLocRec.INIT;
                ServLocRec."No." := '';
                IF lvCompName <> COMPANYNAME THEN
                  ServLocRec."Supplying Company" := lvCompName;
                ServLocRec."Project No." := lvProj;
                ServLocRec."Plot No." := lvPlot;
                ServLocRec.INSERT(TRUE);
                LocationAdded := TRUE;
              END ELSE BEGIN
                LocationAdded := FALSE;
                IF AskQues = 0 THEN
                  AskQues := STRMENU(lvText002, 1);  //1=skip; 2=update
              END;
              IF LocationAdded OR (AskQues <> 1) THEN BEGIN
                ServLocRec.VALIDATE(Description, PlotRec."Buyer Name");
                ServLocRec.Address := PlotRec.Address;
                ServLocRec.City := PlotRec.City;
                ServLocRec."Post Code" := PlotRec."Post Code";
                ServLocRec."Contact Name" := PlotRec.Buyer;
                ServLocRec."Phone No." := PlotRec."Buyer Phone";
                ServLocRec."Phone No. 2" := PlotRec."Buyer Phone 2";
                ServLocRec."Mobile Phone No." := PlotRec."Buyer Mobile Phone";
                ServLocRec."E-Mail" := PlotRec."Buyer E-Mail";
                ServLocRec.MODIFY;

                RecRef.GETTABLE(PlotRec);

                CreateDocumentLink(ServLocRec, RecRef, lvCompName);
              END;
            END;
          END;
        UNTIL ImexRec.NEXT = 0;
      END;
      ImexRec.DELETEALL;
    END;

    PROCEDURE LookupCheckWatch@1100485004(Lookup@1100485000 : Boolean);
    VAR
      WatchRec@1100485002 : Record 11012861;
      lvText000@1100485001 : TextConst 'ENU=%1 is not a valid %2.';
    BEGIN
      WatchRec.SETRANGE("Location Watch", TRUE);  //db, 16-05-11
      IF WatchRec.FINDSET(FALSE, FALSE) THEN
        REPEAT
          WatchRec.MARK := WatchRec.CheckFilters("Territory Code", "Global Dimension 1 Code", '', '');
        UNTIL WatchRec.NEXT = 0;

      WatchRec.MARKEDONLY := TRUE;
      IF Lookup THEN BEGIN
        IF WatchRec.GET(Watch) THEN;
        IF PAGE.RUNMODAL(0, WatchRec) = ACTION::LookupOK THEN BEGIN
          Watch := WatchRec.Code;
        END;
      END ELSE BEGIN
        WatchRec.SETFILTER(Code, Watch);  //db, 16-05-11
        IF WatchRec.FINDFIRST THEN BEGIN
          Watch := WatchRec.Code;
        END ELSE BEGIN
          ERROR(lvText000, Watch, FIELDCAPTION(Watch));
        END;
      END;
    END;

    PROCEDURE UpdateOrderAddressFromLocation@1100485005(lvServLoc@1100485002 : Code[20]);
    VAR
      ServLocRec@1100485000 : Record 11012801;
      lvText000@1100485003 : TextConst 'ENU="Do you want to update related Service Orders with Address Data ? "';
      ServOrderRec@1100485001 : Record 11012823;
    BEGIN
      IF NOT CONFIRM(lvText000, FALSE) THEN EXIT;

      ServLocRec.SETRANGE("No.", lvServLoc);
      IF ServLocRec.FINDSET THEN BEGIN
        REPEAT
          ServOrderRec.SETCURRENTKEY("Service Location No.");
          ServOrderRec.SETRANGE("Service Location No.", ServLocRec."No.");
          ServOrderRec.SETFILTER(Status, '<%1', ServOrderRec.Status::"In Process");
          IF ServOrderRec.FINDSET(TRUE, FALSE) THEN BEGIN
            REPEAT
              ServOrderRec.ValidateAddressData(1);
              ServOrderRec.MODIFY;
            UNTIL ServOrderRec.NEXT = 0;
          END;
        UNTIL ServLocRec.NEXT = 0;
      END;
    END;

    PROCEDURE ExchangeFSA@1100485006(IMode@1100485003 : Code[1]);
    VAR
      lvFieldVisionExchangeMgtCU@1100485000 : Codeunit 11012091;
    BEGIN
      //**4PS.n
      IF IMode = 'I' THEN BEGIN
        "Export to FSA" := FALSE;
        "Date/Time Export to FSA" := 0DT;
      END;
      ProjSetupRec.GET;
      IF ProjSetupRec."Field Service Active" THEN BEGIN
        IF IMode <> 'D' THEN BEGIN
          IF IMode = 'I' THEN BEGIN  //* Call 14574.sn
            "Last Date Modified" := TODAY;
            "Last Time Modified" := TIME;
          END;                       //* Call 14574.en
          "Export to FSA" := TRUE;
          IF IMode = 'R' THEN
            lvFieldVisionExchangeMgtCU.StoreDeletedServLocation(xRec);
        END ELSE BEGIN
          lvFieldVisionExchangeMgtCU.StoreDeletedServLocation(Rec);
        END;
      END;
    END;

    LOCAL PROCEDURE ExchangeMOB@1100528703(Mode@1100528702 : Code[1]);
    VAR
      JobsSetup@1100528700 : Record 315;
      DeletedDataMgtMobile@1100528701 : Codeunit 11012440;
    BEGIN
      JobsSetup.GET;
      IF NOT JobsSetup."4PS-Mobile Active" THEN
        EXIT;

      IF (Mode = 'D') THEN
        DeletedDataMgtMobile.StoreDeletedServiceLocation(Rec);

      IF (Mode = 'R') THEN
        DeletedDataMgtMobile.StoreDeletedServiceLocation(xRec);
    END;

    PROCEDURE CheckSeries@1100485007(lvSeries@1100485000 : Code[20]) : Boolean;
    VAR
      SerieRel@1210190000 : Record 310;
    BEGIN
      SerieRel.SETRANGE(Code, lvSeries);

      EXIT(SerieRel.FINDFIRST);
    END;

    LOCAL PROCEDURE CheckLocationDiscipline@1100485009(iServLoc@1100485001 : Code[20];iDisc@1100485002 : Code[20];iTradeSpec@1100485003 : Code[20]);
    VAR
      LocDiscRec@1100485000 : Record 11012844;
      DiscRec@1100525001 : Record 11020204;
      TradeSpecRec@1100525000 : Record 11020285;
    BEGIN
      //db, 20-02-13: C005107 (local function)
      WITH LocDiscRec DO BEGIN
        IF iDisc <> '' THEN BEGIN
          IF NOT GET(iServLoc, iDisc, '') THEN BEGIN
            INIT;
            "Service Location No." := iServLoc;
            Discipline := iDisc;
            IF DiscRec.GET(iDisc) THEN
              INSERT;
          END;
        END;
        IF iTradeSpec <> '' THEN BEGIN
          IF NOT GET(iServLoc, iDisc, iTradeSpec) THEN BEGIN
            INIT;
            "Service Location No." := iServLoc;
            Discipline := iDisc;
            "Trade Speciality" := iTradeSpec;
            IF TradeSpecRec.GET(iDisc, iTradeSpec) THEN
              INSERT;
          END;
        END;
      END;
    END;

    PROCEDURE Check4PSMobileActive@1100525001() : Boolean;
    BEGIN
      ProjSetupRec.GET;
      EXIT(ProjSetupRec."4PS-Mobile Active");
    END;

    PROCEDURE CheckVATReverse@1100525002(lvFieldValidate@1100485002 : Boolean;lvFieldEntry@1100525000 : Boolean) : Boolean;
    VAR
      VATPostingSetup@1100485000 : Record 325;
      CustRec@1100485001 : Record 18;
    BEGIN
      IF NOT CustRec.GET("Customer No.") THEN
        CustRec.INIT;
      IF NOT VATPostingSetup.GET(CustRec."VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
        VATPostingSetup.INIT;
      IF VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT" THEN BEGIN
        IF lvFieldEntry = TRUE THEN EXIT(TRUE);
        //default based on contract or customer not yet implemented
      END ELSE BEGIN
        IF lvFieldEntry = TRUE THEN EXIT(FALSE);
        IF lvFieldValidate = TRUE THEN BEGIN
          TESTFIELD("Percentage Labor", 0);
          TESTFIELD("Percentage to B Account", 0);
        END ELSE BEGIN
          "Percentage Labor" := 0;
          "Percentage to B Account" := 0;
        END;
      END;
    END;

    PROCEDURE DisplayMap@1100525004();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FIND('-') THEN
        MapMgt.MakeSelection(DATABASE::"Service Location",GETPOSITION)
      ELSE
        MESSAGE(Text007);
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Global Dimension 1 Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::"Service Location");
      IF Dimension1Code <> '' THEN
        "Global Dimension 1 Code" := Dimension1Code;

      IF "Global Dimension 1 Code" <> '' THEN
        VALIDATE("Global Dimension 1 Code");
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012801) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012801');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Service Location", "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    PROCEDURE CreateDocumentLink@1100525005(ServiceLocation@1100525007 : Record 11012801;RecRef@1100525006 : RecordRef;CompName@1100525008 : Text[50]);
    VAR
      DocumentProperties@1100525005 : Record 11012746;
      DocumentLink@1100525004 : Record 11012747;
      DocumentLinkMgt@1100525002 : Codeunit 11012401;
      DocLinkRID@1100525000 : ARRAY [5] OF RecordID;
    BEGIN
      DocumentLink.RESET;
      DocumentLink.SETCURRENTKEY("Record ID"); //mg, 05-07-11: M27801
      DocumentLink.SETRANGE("Table No.", RecRef.NUMBER);
      DocumentLink.SETFILTER("Record ID", STRSUBSTNO('''%1''', RecRef.RECORDID()));
      DocumentLink.SETRANGE("Internal Company", CompName);
      IF DocumentLink.FINDSET THEN BEGIN
        REPEAT
          DocumentProperties.SETRANGE("No.", DocumentLink."Document No.");
          IF DocumentProperties.FINDFIRST THEN BEGIN
            RecRef.GETTABLE(ServiceLocation);
            DocLinkRID[2] := RecRef.RECORDID();

            DocumentLinkMgt.CreateDocumentLink(DocumentProperties, DocLinkRID);
            DocumentProperties.MODIFY(TRUE);
          END;
        UNTIL DocumentLink.NEXT = 0;
      END;
    END;

    PROCEDURE TravelTimeUnit@1100525007() : Code[10];
    VAR
      ServSetup@1100525000 : Record 11012800;
      DimValRec@1100525002 : Record 349;
      DimMgt@1100525001 : Codeunit 408;
    BEGIN
      ServSetup.GET;
      DimMgt.GetDimValueRec(2,ServSetup."Cost Object Travel Time",DimValRec,FALSE,'');
      EXIT(DimValRec."Unit of Measure");
    END;

    PROCEDURE TravelDistanceUnit@1100525006() : Code[10];
    VAR
      ServSetup@1100525000 : Record 11012800;
      DimValRec@1100525002 : Record 349;
      DimMgt@1100525001 : Codeunit 408;
    BEGIN
      ServSetup.GET;
      DimMgt.GetDimValueRec(2,ServSetup."Cost Object Travel Distance",DimValRec,FALSE,'');
      EXIT(DimValRec."Unit of Measure");
    END;

    PROCEDURE GetTryOut@1210190005(iAction@1210190000 : Integer) Result : Text[30];
    VAR
      TryOutRelationRec@1210190001 : Record 11012761;
    BEGIN
      //db, 05-05-11
      IF TryOutRelationRec.READPERMISSION THEN
        Result := TryOutRelationRec.GetTryOut('', '', "No.", '', '', '', '', iAction);

      EXIT(Result);
    END;

    PROCEDURE ShowTryOut@1210190004(iAction@1210190000 : Integer);
    VAR
      TryOutRelationRec@1210190001 : Record 11012761;
    BEGIN
      //db, 05-05-11
      TryOutRelationRec.ShowTryOut('', '', "No.", '', '', '', '', iAction);
    END;

    PROCEDURE EvaluatePostCodeGroup@1100525008();
    VAR
      PostCodeGroup@1100528600 : Record 11020599;
    BEGIN
      //db, 11-02-13: C005566
      IF PostCode.GET("Post Code",City) THEN
        "Post Code Group" := PostCode.Group;
      DetermineTravelCostCode;
      PostCode.GetTerritoryByPostCodeGroup(City,"Post Code","Territory Code");
    END;

    PROCEDURE NormalizePostCodeHouseNo@1100526200();
    VAR
      ObjectImpWorkSheetMgt@1100526200 : Codeunit 11012839;
      PostCode@1100526201 : Code[20];
    BEGIN
      IF ObjectImpWorkSheetMgt.NormalizePostCode("Post Code", "Country/Region Code", PostCode) THEN
        "Post Code" := PostCode;
      "House No." := ObjectImpWorkSheetMgt.DetermineHouseNo(Address, "House No. Ext.");
    END;

    PROCEDURE GetTravelCostWithIndexDate@1100528600(IIndexDate@1100528601 : Date) : Decimal;
    VAR
      TravelCostRate@1100528600 : Record 11071802;
    BEGIN
      IF "Travel Cost Code" <> '' THEN BEGIN
        TravelCostRate.SETRANGE("Travel Cost Code", "Travel Cost Code");
        TravelCostRate.SETFILTER("Index Date", '<=%1', IIndexDate);
        IF TravelCostRate.FINDLAST THEN
          EXIT(TravelCostRate.Rate);
      END;
    END;

    PROCEDURE GetTravelCost@1100528601() : Decimal;
    BEGIN
      EXIT(GetTravelCostWithIndexDate(TODAY));
    END;

    PROCEDURE EditDocuments@1100528702(ContactNo@1210190003 : Code[20];ContactPersonNo@1210190004 : Code[20];SendMail@1210190002 : Boolean;Recipient@1100528700 : Text[120]);
    VAR
      DocumentTemplate@1210190001 : Record 11012401;
      DocumentMailing@1210190000 : Codeunit 11012278;
      RecRef@1100525000 : RecordRef;
      DocumentLinkRIDs@1100525001 : ARRAY [5] OF RecordID;
    BEGIN
      RecRef.GETTABLE(Rec);
      DocumentLinkRIDs[1] := RecRef.RECORDID;

      DocumentMailing.EditDocuments(
        STRSUBSTNO('%1', DocumentTemplate.Type::"Service Location"), DocumentLinkRIDs,
        "Global Dimension 1 Code", ContactNo, ContactPersonNo, SendMail, Recipient);
    END;

    PROCEDURE GetRelatedObjects@1100528300(VAR OServiceObject@1100528300 : Record 11071691);
    VAR
      BuildingObjectRelation@1100528302 : Record 11071820;
    BEGIN
      OServiceObject.RESET;
      OServiceObject.SETCURRENTKEY("Service Location No.");
      OServiceObject.SETRANGE("Service Location No.", "No.");
      IF "Building Code" <> '' THEN BEGIN
        IF OServiceObject.FINDSET THEN
          REPEAT
            OServiceObject.MARK(TRUE);
          UNTIL OServiceObject.NEXT = 0;
        OServiceObject.SETCURRENTKEY("No.");
        OServiceObject.SETRANGE("Service Location No.");
        BuildingObjectRelation.SETRANGE("Building Code", "Building Code");
        IF BuildingObjectRelation.FINDSET THEN
          REPEAT
            OServiceObject."No." := BuildingObjectRelation."Object No.";
            OServiceObject.MARK(TRUE);
          UNTIL BuildingObjectRelation.NEXT = 0;
        OServiceObject.MARKEDONLY(TRUE);
      END;
    END;

    PROCEDURE ShowRelatedObjects@1100528301();
    VAR
      ServiceObject@1100528300 : Record 11071691;
    BEGIN
      GetRelatedObjects(ServiceObject);
      PAGE.RUNMODAL(0, ServiceObject);
    END;

    PROCEDURE ShowTodos@1100528700();
    VAR
      Todo@1100528700 : Record 5080;
    BEGIN
      Todo.SETRANGE("Service Location No.", "No.");
      Todo.SETRANGE("System To-do Type", Todo."System To-do Type"::Organizer);
      PAGE.RUNMODAL(PAGE::"To-do List", Todo);
    END;

    PROCEDURE CreateLocationObjects@1210190007(VAR ITmpContractConsObjWizardLine@1210190000 : TEMPORARY Record 11071698);
    VAR
      ServiceObject@1210190001 : Record 11071691;
      ServiceSetup@1210190002 : Record 11012800;
      ObjectSpecificationMgt@1210190003 : Codeunit 11012848;
    BEGIN
      ITmpContractConsObjWizardLine.SETFILTER("Standard Object No.", '<>%1', '');
      IF NOT ITmpContractConsObjWizardLine.FINDSET THEN EXIT;
      REPEAT
        ServiceObject.INIT;
        ServiceObject."No." := '';
        ServiceObject.INSERT(TRUE);
        ServiceObject.VALIDATE("Standard Object No.", ITmpContractConsObjWizardLine."Standard Object No.");
        ServiceObject.VALIDATE(Description, ITmpContractConsObjWizardLine.Description);
        ServiceObject.VALIDATE("Description 2", ITmpContractConsObjWizardLine."Description 2");
        ServiceObject.VALIDATE("Service Location No.", "No.");
        ServiceObject.VALIDATE("In use since", ITmpContractConsObjWizardLine."In use since");
        ServiceObject.VALIDATE(Building, ITmpContractConsObjWizardLine.Building);
        ServiceObject.VALIDATE(Floor, ITmpContractConsObjWizardLine.Floor);
        ServiceObject.VALIDATE(Room, ITmpContractConsObjWizardLine.Room);
        ServiceObject.VALIDATE(Text, ITmpContractConsObjWizardLine.Comment);
        ServiceObject.VALIDATE("Warranty Start Date Customer", ITmpContractConsObjWizardLine."Warranty Starting Date");
        ServiceObject.VALIDATE("Customer Feature", ITmpContractConsObjWizardLine."Customer Feature");
        ServiceObject.MODIFY(TRUE);

        ServiceSetup.GET;
        IF ITmpContractConsObjWizardLine."Year of Manufacture" <> 0 THEN BEGIN
          ServiceSetup.TESTFIELD("Spec. Code Year of Manufact.");
          ObjectSpecificationMgt.SetObjectSpecValue(ServiceObject."No.", ServiceSetup."Spec. Code Year of Manufact.",
            FORMAT(ITmpContractConsObjWizardLine."Year of Manufacture"));
        END;
        IF ITmpContractConsObjWizardLine."Serial No." <> '' THEN BEGIN
          ServiceSetup.TESTFIELD("Spec. Code Serial No.");
          ObjectSpecificationMgt.SetObjectSpecValue(ServiceObject."No.", ServiceSetup."Spec. Code Serial No.",
            ITmpContractConsObjWizardLine."Serial No.");
        END;
      UNTIL ITmpContractConsObjWizardLine.NEXT = 0;
      IF GUIALLOWED THEN
        MESSAGE(Text010, ITmpContractConsObjWizardLine.COUNT);
    END;

    LOCAL PROCEDURE TestMaintenanceTimes@1100528602();
    BEGIN
      IF ("Starting Time Maint. Window" = 0T) OR ("Ending Time Maint. Window" = 0T) THEN
        EXIT;
      IF "Ending Time Maint. Window" <= "Starting Time Maint. Window" THEN
        FIELDERROR("Ending Time Maint. Window", STRSUBSTNO(Text001, FIELDCAPTION("Starting Time Maint. Window")));
    END;

    PROCEDURE ShowCard@1100409000();
    BEGIN
      PAGE.RUN(PAGE::"Service Location", Rec);
    END;

    LOCAL PROCEDURE LinkedToRentalUnit@1100528701() : Boolean;
    VAR
      RentalUnit@1100528700 : Record 11012940;
    BEGIN
      IF RentalUnit.READPERMISSION THEN BEGIN
        RentalUnit.SETCURRENTKEY("Service Location No.");
        RentalUnit.SETRANGE("Service Location No.", "No.");
        EXIT(RentalUnit.FINDFIRST);
      END;
    END;

    LOCAL PROCEDURE TestLinkedToRentalUnit@1100528707(FieldCaption@1100528700 : Text[250]);
    VAR
      RentalUnit@1100528701 : Record 11012940;
    BEGIN
      IF CurrFieldNo <> 0 THEN
        IF LinkedToRentalUnit THEN
          ERROR(Text011, FieldCaption, TABLECAPTION, RentalUnit.TABLECAPTION);
    END;

    PROCEDURE LocationExists@1100409001(VAR OExistingLocationNo@1100409000 : Code[20]) : Boolean;
    VAR
      ServiceLocation@1100528603 : Record 11012801;
    BEGIN
      IF ("Post Code" = '') OR ("House No." = '') THEN
        EXIT;
      ServiceLocation.SETCURRENTKEY("Post Code", "House No.", "House No. Ext.");
      ServiceLocation.SETRANGE("Post Code", "Post Code");
      ServiceLocation.SETRANGE("House No.", "House No.");
      ServiceLocation.SETRANGE("House No. Ext.", "House No. Ext.");
      ServiceLocation.SETFILTER("No.", '<>%1', "No.");
      IF ServiceLocation.FINDFIRST THEN BEGIN
        OExistingLocationNo := ServiceLocation."No.";
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetComplexCode@1100528603() : Code[20];
    VAR
      Building@1100528600 : Record 11071819;
    BEGIN
      IF "Complex Code" <> '' THEN
        EXIT("Complex Code");
      IF "Building Code" <> '' THEN BEGIN
        IF Building.GET("Building Code") THEN
          EXIT(Building."Complex Code");
      END;
    END;

    PROCEDURE UpdatePrefLocations@1100525009();
    VAR
      GeneralLedgerSetup@1100525002 : Record 98;
      DimensionValueLocation@1100525000 : Record 11020352;
      PrefServLoc@1100525003 : Record 11020391;
    BEGIN
      //db, 23-02-15: C013902
      GeneralLedgerSetup.GET;
      DimensionValueLocation.SETRANGE("Dimension Code",GeneralLedgerSetup."Global Dimension 1 Code");
      DimensionValueLocation.SETRANGE("Dimension Value Code","Global Dimension 1 Code");
      IF DimensionValueLocation.ISEMPTY THEN
        EXIT;

      PrefServLoc.SETRANGE("Service Location No.","No.");
      IF NOT PrefServLoc.ISEMPTY THEN
        IF "Global Dimension 1 Code" = xRec."Global Dimension 1 Code" THEN
          EXIT
        ELSE
          IF NOT CONFIRM(Text11012040) THEN
            EXIT;
      PrefServLoc.DELETEALL;
      IF DimensionValueLocation.FINDSET THEN BEGIN
        REPEAT
          PrefServLoc."Service Location No." := "No.";
          PrefServLoc."Location Code" := DimensionValueLocation."Location Code";
          PrefServLoc.Priority := DimensionValueLocation.Priority;
          PrefServLoc.INSERT;
        UNTIL DimensionValueLocation.NEXT = 0;
      END;
    END;

    PROCEDURE DetermineTravelCostCode@1100528604();
    VAR
      PostCodeGroup@1100528600 : Record 11020599;
      Customer@1100528601 : Record 18;
    BEGIN
      IF Customer.GET("Customer No.") AND (Customer."Travel Cost Code (Service)" <> '') THEN
        VALIDATE("Travel Cost Code", Customer."Travel Cost Code (Service)")
      ELSE
        IF PostCodeGroup.GET("Post Code Group") THEN
          IF PostCodeGroup."Travel Cost Code (Service)" <> '' THEN  //db, 18-09-15: C022427
            VALIDATE("Travel Cost Code", PostCodeGroup."Travel Cost Code (Service)");
    END;

    PROCEDURE AssistEditServLocFolder@1100528000();
    VAR
      FileMgt@1100525002 : Codeunit 419;
      ExplorerPath@1100525000 : Text[250];
      lvRelManSetup@1100525001 : Record 5079;
      OperatingSystemMgt@1100528000 : Codeunit 11012364;
    BEGIN
      lvRelManSetup.GET;
      IF NOT lvRelManSetup."Use Citrix Client" THEN
        ExplorerPath := OperatingSystemMgt.ClientEnviron('SYSTEMROOT') + '\Explorer.exe'
      ELSE
        ExplorerPath := OperatingSystemMgt.ClientEnviron('SYSTEMROOT') + '\Pexplorer.exe';
      IF "Service Location Folder" = '' THEN
        FileMgt.SelectDirectoryNameWithBackSlash("Service Location Folder")
      ELSE BEGIN
        OperatingSystemMgt.ClientShell(
          STRSUBSTNO('"%1"', ExplorerPath),
          STRSUBSTNO('"%1"', "Service Location Folder"),
          FALSE);
      END;
    END;

    LOCAL PROCEDURE CheckIfChangingSiteURLAllowed@1100528302();
    VAR
      SharePointSetup4PS@1100528300 : Record 11012730;
    BEGIN
      SharePointSetup4PS.GET;
      SharePointSetup4PS.TESTFIELD("Changing Site URL Allowed");
    END;

    PROCEDURE CheckWebServiceLocationPortal@1100528303();
    VAR
      ProjectPortalManagement@1100528300 : Codeunit 11012203;
    BEGIN
      //fixme kz
      //ProjectPortalManagement.CheckWebserviceConnection(Rec);
    END;

    PROCEDURE DeleteLocationPortalPermissions@1100528304();
    VAR
      SharePointIntegration@1100528300 : Codeunit 11020210;
    BEGIN
      IF (NOT SharePointIntegration.IsProjectPortalActive) THEN
        EXIT;

      {
      //fixme kz
      RespPersPermPPT.setrange("Subsite Type", RespPersPermPPT."Subsite Type"::ServLocation);
      RespPersPermPPT.SETRANGE("Project No.", ProjectResponsiblePerson."Project No.");
      RespPersPermPPT.SETRANGE("Line No.", ProjectResponsiblePerson."Line No.");
      RespPersPermPPT.DELETEALL(TRUE);
      }
    END;

    PROCEDURE IsServLocInLocationPortal@1100528305() : Boolean;
    VAR
      SharePointIntegration@1100528300 : Codeunit 11020210;
    BEGIN
      IF (NOT SharePointIntegration.IsProjectPortalActive) THEN
        EXIT(FALSE);
      EXIT(("Location Portal Site Generated") AND ("Location Portal URL" <> ''));
    END;

    BEGIN
    {
      4PS01 HBK 06-08-09: Field added "Language Code"
    }
    END.
  }
}

