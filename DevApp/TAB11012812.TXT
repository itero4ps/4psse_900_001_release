OBJECT Table 11012812 Service-Contract
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11012812=md,
                TableData 11012819=r;
    DataCaptionFields=No.,Description;
    OnInsert=VAR
               ServPortSetup@1100525000 : Record 11126065;
               ServiceSurchargeManagement@1100528600 : Codeunit 11012834;
             BEGIN
               ServSetup.GET;

               "Preclosure Result" := ServSetup."Preclosure Result";
               "Progress Preclosure Result" := ServSetup."Progress Preclosure Result";
               "Contract Prognosis Level 1" := ServSetup."Contract Prognosis Level 1";
               "Contract Prognosis Level 2" := ServSetup."Contract Prognosis Level 2";
               "Contract Prognosis based on" := ServSetup."Contract Prognosis based on";
               IF "VAT Prod. Posting Group" = '' THEN
                 "VAT Prod. Posting Group" := ServSetup."VAT Prod. Posting Group";
               "Use Bill-to as Sell-to (CP)" := ServSetup."Use Bill-to as Sell-to Custom."; //call 29646
               "Use Bill-to as Sell-to (Contr)" := ServSetup."Use Bill-to as Sell-to Custom.";

               IF "No." = '' THEN BEGIN
                 IF "No. Series" = '' THEN BEGIN
                   ServSetup.TESTFIELD("Service Contract Nos.");
                   "No. Series" := ServSetup."Service Contract Nos.";
                 END;
                 NoSeriesMgt.InitSeries("No. Series", xRec."No. Series", 0D, "No.", "No. Series");
                 IF "Service Type" = '' THEN
                   "Service Type" := DetermineServiceTypeSeries(ServSetup."Service Contract Nos.");
               END;

               TESTFIELD("No.");
               "Version Date" := TODAY;
               "Input by" := USERID;
               "Input Date" := TODAY;
               "Maintenance Planning based on" := ServSetup."Maintenance Planning based on";
               IF "Starting Date Maintenance" = 0D THEN BEGIN
                 IF "Renewal Date" <> 0D THEN
                   "Starting Date Maintenance" := "Renewal Date"
                 ELSE
                   "Starting Date Maintenance" := "Starting Date";
               END;
               //mg.sn, 06-06-12: M34063
               IF "Global Dimension 1 Code" <> '' THEN
                 VALIDATE("Global Dimension 1 Code");
               //mg.en, 06-06-12: M34063

               ServPortSetup.SETRANGE("Primary Key", '1');
               IF ServPortSetup.FINDFIRST THEN
                 IF ServPortSetup."Contract Publ. on Serv. Portal" THEN
                   VALIDATE("Publish on Service Portal", ServPortSetup."Contract Publ. on Serv. Portal");

               RefLimitRec.CopyReferenceToServiceContract("No.");
               MailRec.CopyToContract("No.", "Customer No.");  //db, 21-03-11

               ServiceSurchargeManagement.CopySurchargeLinesToSC(Rec);
               CopySCSourceTypeSetup;
               CopySCTemplateCategories;
               CopySCTemplateSalesDiscount;
               CheckAndResetInstallmBasedOn;

               CopySCBudgetCallsRelease;

               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05
             END;

    OnModify=BEGIN
               CheckAndResetInstallmBasedOn;
               CheckAndResetContractInstallm;

               "Modified by" := USERID;
               "Last Date Modified" := TODAY;
               IF "Internal Contract" THEN BEGIN  //db, 15-04-11
                 ServSetup.GET;
                 TESTFIELD("Customer No.", ServSetup."Customer Internal Charge");
               END;
             END;

    OnDelete=VAR
               CommLineRec@1100485000 : Record 97;
               ServTextRec@1100485003 : Record 11012882;
               RespRec@1100485002 : Record 11012808;
               ContactRec@1100485001 : Record 11012841;
               ServPrioRec@1100485004 : Record 11012880;
               ServDiscRec@1100485005 : Record 11012881;
               lServContEmplCostPriceRec@1100485009 : Record 11020322;
               lServTradeAssCostPriceRec@1100485008 : Record 11020323;
               lServCostObjCostPriceRec@1100485007 : Record 11020324;
               lServTradeWageCCostPriceRec@1100485006 : Record 11020325;
               ServContFeatureType@1210190000 : Record 11012753;
               ContractInstallment@1210190001 : Record 11071707;
               SCInstallmentAmountbyDate@1210190002 : Record 11071708;
               SubcontractorService@1210190003 : Record 11071789;
               ServiceContractCtrlPeriod@1210190004 : Record 11071746;
               SCCustSourceTypeSetup@1100528600 : Record 11071800;
               ContractObject@1210190005 : Record 11071702;
               ServiceSurchargeVersion@1100525000 : Record 11071783;
               ServiceContractControl@1100525001 : Record 11071762;
               ServiceCluster@1100525002 : Record 11071742;
               ServiceContractControlMsg@1100525003 : Record 11071956;
               ConsumptionRate@1100528800 : Record 11071970;
               ServiceCategory@1100528601 : Record 11071985;
               SCRevenueDivision@1100528602 : Record 11071986;
               SCBudgetVersion@1100528603 : Record 11071990;
               ServiceContractVATBreakdown@1100525004 : Record 11071995;
               ServSurvLocationObject@1100525005 : Record 11071813;
             BEGIN
               VALIDATE(Status, Status::Expired);  //db, 19-09-06: includes check WIP

               MoveEntries.RemoveServContractEntries(Rec);

               ContrDiscRec.SETRANGE("Service Contract No.", "No.");
               ContrDiscRec.DELETEALL(TRUE);

               ContrDepRec.SETRANGE("Service Contract No.", "No.");
               ContrDepRec.DELETEALL(TRUE);

               ContrHourRec.SETRANGE("Service Contract No.", "No.");
               ContrHourRec.DELETEALL;

               CostCompRec.SETRANGE("Service Contract No.", "No.");
               CostCompRec.DELETEALL(TRUE);

               ServActRec.SETRANGE("Service Contract No.", "No.");
               ServActRec.DELETEALL(TRUE);

               TimeTableRec.SETRANGE(Code, "No.");
               TimeTableRec.DELETEALL(TRUE);

               ServPrioRec.SETRANGE("Service Contract No.", "No.");
               ServPrioRec.DELETEALL(TRUE);

               ServDiscRec.SETRANGE("Service Contract No.", "No.");
               ServDiscRec.DELETEALL(TRUE);

               RefLimitRec.SETRANGE("Service Contract No.", "No.");
               RefLimitRec.DELETEALL(TRUE);

               RespRec.SETRANGE("Service Contract No.", "No.");
               RespRec.DELETEALL;

               ContactRec.SETRANGE("Service Contract No.", "No.");
               ContactRec.DELETEALL;

               PrefEmplRec.SETRANGE("Service Contract No.", "No.");
               PrefEmplRec.DELETEALL(TRUE);

               CommLineRec.SETRANGE("Table Name",CommLineRec."Table Name"::"Service Contract");
               CommLineRec.SETRANGE("No.","No.");
               CommLineRec.DELETEALL;

               ServTextRec.SETRANGE("Table Name",ServTextRec."Table Name"::"Service Contract");
               ServTextRec.SETRANGE("No.","No.");
               ServTextRec.DELETEALL;

               CustSurchRec.RESET;
               CustSurchRec.SETRANGE("Record Type", CustSurchRec."Record Type"::ServContr);
               CustSurchRec.SETFILTER("Customer No.", '%1', '');
               CustSurchRec.SETRANGE(Code, "No.");
               CustSurchRec.DELETEALL;

               lServContEmplCostPriceRec.SETRANGE("Service Contract No.", "No.");
               lServContEmplCostPriceRec.DELETEALL;

               lServTradeAssCostPriceRec.SETRANGE("Service Contract No.", "No.");
               lServTradeAssCostPriceRec.DELETEALL;

               lServCostObjCostPriceRec.SETRANGE("Service Contract No.", "No.");
               lServCostObjCostPriceRec.DELETEALL;

               lServTradeWageCCostPriceRec.SETRANGE("Service Contract No.", "No.");
               lServTradeWageCCostPriceRec.DELETEALL;

               MailRec.SETRANGE("Service Contract No.", "No.");
               MailRec.DELETEALL(TRUE);  //db, 31-05-11

               ServContFeatureType.SETRANGE("Relation Type", ServContFeatureType."Relation Type"::ServiceContract);
               ServContFeatureType.SETRANGE(Code , "No.");
               ServContFeatureType.DELETEALL;

               ContractInstallment.SETRANGE("Service Contract No.","No.");
               ContractInstallment.DELETEALL(TRUE);

               ContractObject.SETRANGE("Service Contract No.", "No.");
               ContractObject.DELETEALL(TRUE);

               SCInstallmentAmountbyDate.SETRANGE(Type, SCInstallmentAmountbyDate.Type::"Service Contract");
               SCInstallmentAmountbyDate.SETRANGE("Service Contract No.", "No.");
               SCInstallmentAmountbyDate.DELETEALL(TRUE);

               SubcontractorService.SETRANGE("Service Contract No.", "No.");
               SubcontractorService.DELETEALL(TRUE);

               ServiceSurchargeVersion.SETRANGE(Type, ServiceSurchargeVersion.Type::Contract);
               ServiceSurchargeVersion.SETRANGE(Code, "No.");
               ServiceSurchargeVersion.DELETEALL(TRUE);

               ServiceContractControl.SETCURRENTKEY("Service Contract No.");
               ServiceContractControl.SETRANGE("Service Contract No.", "No.");
               ServiceContractControl.DELETEALL(TRUE);

               ServiceContractCtrlPeriod.SETRANGE("Service Contract No.", "No.");
               ServiceContractCtrlPeriod.DELETEALL(TRUE);

               SCCustSourceTypeSetup.SETRANGE(Type, SCCustSourceTypeSetup.Type::Contract);
               SCCustSourceTypeSetup.SETRANGE(Code, "No.");
               SCCustSourceTypeSetup.DELETEALL(TRUE);

               ServiceCluster.SETRANGE("Service Contract No.", "No.");
               ServiceCluster.DELETEALL(TRUE);

               ServiceContractControlMsg.SETRANGE("Service Contract No.", "No.");
               ServiceContractControlMsg.DELETEALL(TRUE);

               ConsumptionRate.SETRANGE("Service Contract", "No.");
               ConsumptionRate.DELETEALL(TRUE);

               SCRevenueDivision.SETRANGE("Service Contract No.", "No.");
               SCRevenueDivision.DELETEALL(TRUE);

               ServiceCategory.SETRANGE("Service Contract No.", "No.");
               ServiceCategory.DELETEALL(TRUE);

               SCBudgetVersion.SETRANGE("Service Contract No.", "No.");
               SCBudgetVersion.DELETEALL(TRUE);

               //DP00628
               ServiceContractVATBreakdown.SETRANGE("Service Contract No.", "No.");
               ServiceContractVATBreakdown.DELETEALL(TRUE);
               //

               ServSurvLocationObject.SETRANGE("Service Contract No.", "No.");
               ServSurvLocationObject.MODIFYALL("Service Contract No.", '', FALSE);

               DimMgt.DeleteDefaultDim(DATABASE::"Service-Contract", "No.");   //** 09-06-2010
             END;

    OnRename=BEGIN
               DimMgt.CopyDefaultDim(                                             //** 09-06-2010 sn
                 DATABASE::"Service-Contract", xRec."No.",
                 DATABASE::"Service-Contract", "No.");
               DimMgt.DeleteDefaultDim(DATABASE::"Service-Contract", xRec."No."); //** 09-06-2010 en
             END;

    CaptionML=ENU=Service Contract;
    LookupPageID=Page11012825;
    DrillDownPageID=Page11012825;
  }
  FIELDS
  {
    { 10  ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  ServSetup.GET;
                                                                  NoSeriesMgt.TestManual(ServSetup."Service Contract Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 20  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 30  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 40  ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                IF Status = Status::Expired THEN BEGIN
                                                                  CheckStatusExpired;
                                                                  Blocked := TRUE;
                                                                END;
                                                                IF Status IN [Status::Order, Status::"Invoicing Allowed"] THEN BEGIN
                                                                  TESTFIELD("Starting Date");
                                                                  TESTFIELD("Starting Date Control Period");
                                                                  TESTFIELD("Control Period Interval");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Applied,Offered,Order,Invoicing Allowed,Expired;
                                                   OptionString=Applied,Offered,Order,Invoicing Allowed,Expired }
    { 45  ;   ;Blocked             ;Boolean       ;OnValidate=BEGIN
                                                                IF Status = Status::Expired THEN
                                                                  ERROR(Text002);
                                                              END;

                                                   CaptionML=ENU=Blocked }
    { 50  ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                IF ("No." = '') AND (xRec."Customer No." <> "Customer No.") THEN
                                                                  EXIT; //mg, 20-03-2014: T004481 Platform bug

                                                                ServEntryRec.SETCURRENTKEY("Service Contract No.");
                                                                ServEntryRec.SETRANGE("Service Contract No.", "No.");
                                                                IF ServEntryRec.FINDFIRST THEN
                                                                  MESSAGE(Text007);

                                                                IF "Customer No." <> '' THEN BEGIN
                                                                  CustRec.GET("Customer No.");
                                                                  CustRec.CheckCustomerStatus("Customer No.");
                                                                  "Contact Name" := CustRec.Contact;
                                                                  "Phone No.":= CustRec."Phone No.";
                                                                  "Phone No. 2" := CustRec."Phone No. 2";
                                                                  "Mobile Phone No." := CustRec."Mobile Phone No.";
                                                                  "Fax No." := CustRec."Fax No.";
                                                                  "E-Mail" := CustRec."E-Mail";
                                                                  "Payment Terms Code" := CustRec."Payment Terms Code";  //db, 18-04-14: C014687
                                                                  "Use Bill-to as Sell-to (CP)" := CustRec."Use Bill-to as Sell-to Custom.";

                                                                  IF "Bill-to Customer No. (CP)" = '' THEN
                                                                    VALIDATE("Bill-to Customer No. (CP)", CustRec."Bill-to Customer No.")
                                                                  ELSE
                                                                    IF (CurrFieldNo = FIELDNO("Customer No.")) AND (CustRec."Bill-to Customer No." <> "Bill-to Customer No. (CP)") THEN
                                                                      IF CONFIRM(Text006,FALSE,FIELDCAPTION("Bill-to Customer No. (CP)")) THEN BEGIN
                                                                        VALIDATE("Bill-to Customer No. (CP)",CustRec."Bill-to Customer No.");
                                                                        "Alt. Bill-to Address (CP)" := '';
                                                                      END;

                                                                  IF "Bill-to Customer No. (Contr.)" = '' THEN
                                                                    VALIDATE("Bill-to Customer No. (Contr.)", CustRec."Bill-to Customer No.")
                                                                  ELSE
                                                                    IF (CurrFieldNo = FIELDNO("Customer No.")) AND (CustRec."Bill-to Customer No." <> "Bill-to Customer No. (Contr.)") THEN
                                                                      IF CONFIRM(Text006,FALSE,FIELDCAPTION("Bill-to Customer No. (Contr.)")) THEN BEGIN
                                                                        VALIDATE("Bill-to Customer No. (Contr.)",CustRec."Bill-to Customer No.");
                                                                        "Alt. Bill-to Address (Contr.)" := '';
                                                                      END;

                                                                  "Price Book Type" := CustRec."Price Book Type";
                                                                  "Price Book Code" := CustRec."Price Book Code";
                                                                  "Price Book Index Date" := CustRec."Price Book Index Date";
                                                                  "Unit Price Set" := CustRec."Unit Price Set";
                                                                  "Unit Price Status" := CustRec."Unit Price Status";
                                                                END ELSE BEGIN
                                                                  "Contact Name" := '';
                                                                  "Phone No.":= '';
                                                                  "Phone No. 2" := '';
                                                                  "Mobile Phone No." := '';
                                                                  "Fax No." := '';
                                                                  "E-Mail" := '';
                                                                END;

                                                                IF "Customer No." <> xRec."Customer No." THEN BEGIN
                                                                  CALCFIELDS(
                                                                    Name,"Name 2",Address,"Address 2",
                                                                    "Post Code",City,County,"Country/Region Code",
                                                                    "Bill-to Name (Cost Plus)","Bill-to Name 2 (Cost Plus)","Bill-to Address (Cost Plus)","Bill-to Address 2 (Cost Plus)",
                                                                    "Bill-to Post Code (Cost Plus)","Bill-to City (Cost Plus)",
                                                                    "Bill-to Name (Contract)","Bill-to Name 2 (Contract)","Bill-to Address (Contract)","Bill-to Address 2 (Contract)",
                                                                    "Bill-to Post Code (Contract)","Bill-to City (Contract)");
                                                                  MailRec.CopyToContract("No.", "Customer No.");  //mg, 09-01-12: M32065
                                                                  CopyCustomerNotGlobalDims();  //*24651.n
                                                                END;

                                                                "Currency Code" := DetermineCurrencyCode;  // dp00116.n
                                                              END;

                                                   CaptionML=ENU=Customer No. }
    { 60  ;   ;Name                ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Customer No.)));
                                                   CaptionML=ENU=Name;
                                                   Editable=No }
    { 65  ;   ;Name 2              ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Name 2" WHERE (No.=FIELD(Customer No.)));
                                                   CaptionML=ENU=Name 2;
                                                   Editable=No }
    { 70  ;   ;Address             ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Address WHERE (No.=FIELD(Customer No.)));
                                                   CaptionML=ENU=Address;
                                                   Editable=No }
    { 80  ;   ;Address 2           ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Address 2" WHERE (No.=FIELD(Customer No.)));
                                                   CaptionML=ENU=Address 2;
                                                   Editable=No }
    { 90  ;   ;Post Code           ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Post Code" WHERE (No.=FIELD(Customer No.)));
                                                   CaptionML=ENU=Post Code;
                                                   Editable=No }
    { 95  ;   ;County              ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.County WHERE (No.=FIELD(Customer No.)));
                                                   CaptionML=ENU=County;
                                                   Editable=No }
    { 100 ;   ;City                ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.City WHERE (No.=FIELD(Customer No.)));
                                                   CaptionML=ENU=City;
                                                   Editable=No }
    { 105 ;   ;Country/Region Code ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Country/Region Code" WHERE (No.=FIELD(Customer No.)));
                                                   CaptionML=ENU=Country/Region Code;
                                                   Editable=No }
    { 110 ;   ;Contact Name        ;Text50        ;CaptionML=ENU=Contact Name }
    { 120 ;   ;Your Reference      ;Text50        ;CaptionML=ENU=Your Reference }
    { 130 ;   ;Contract Manager    ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Contract Manager }
    { 131 ;   ;Contract Manager Name;Text50       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Contract Manager)));
                                                   CaptionML=ENU=Contract Manager Name;
                                                   Editable=No }
    { 140 ;   ;Bill-to Customer No. (CP);Code20   ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                IF "Bill-to Customer No. (CP)" <> xRec."Bill-to Customer No. (CP)" THEN BEGIN
                                                                  IF "Bill-to Customer No. (CP)" <> '' THEN BEGIN
                                                                    CustRec.GET("Bill-to Customer No. (CP)");
                                                                    CustRec.CheckCustomerStatus("Bill-to Customer No. (CP)");
                                                                  END;
                                                                  IF "Invoicing via Collective List" THEN
                                                                    TESTFIELD("Bill-to Customer No. (Contr.)", "Bill-to Customer No. (CP)");
                                                                END;

                                                                IF "Customer No." <> '' THEN BEGIN
                                                                  CustRec.GET("Customer No.");
                                                                  IF CustRec."Bill-to Customer No." <> '' THEN
                                                                    IF "Bill-to Customer No. (CP)" = '' THEN
                                                                      "Bill-to Customer No. (CP)" := CustRec."Bill-to Customer No.";
                                                                END;
                                                                IF "Bill-to Customer No. (CP)" = '' THEN
                                                                  "Bill-to Customer No. (CP)" := "Customer No.";
                                                                IF CustRec.GET("Bill-to Customer No. (CP)") THEN BEGIN
                                                                  GetDefaultSalesSurcharges;
                                                                  VALIDATE("Sales Discount Term Group 1", CustRec."Sales Discount Term Group");
                                                                END;

                                                                CheckInvoiceAddress;
                                                              END;

                                                   CaptionML=ENU=Bill-to Customer No. (Cost Plus) }
    { 150 ;   ;Bill-to Name (Cost Plus);Text50    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD("Bill-to Customer No. (CP)")));
                                                   CaptionML=ENU=Bill-to Name  (Cost Plus);
                                                   Editable=No }
    { 155 ;   ;Bill-to Name 2 (Cost Plus);Text50  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Name 2" WHERE (No.=FIELD("Bill-to Customer No. (CP)")));
                                                   CaptionML=ENU=Bill-to Name 2 (Cost Plus);
                                                   Editable=No }
    { 160 ;   ;Bill-to Address (Cost Plus);Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Address WHERE (No.=FIELD("Bill-to Customer No. (CP)")));
                                                   CaptionML=ENU=Bill-to Address (Cost Plus);
                                                   Editable=No }
    { 170 ;   ;Bill-to Address 2 (Cost Plus);Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Address 2" WHERE (No.=FIELD("Bill-to Customer No. (CP)")));
                                                   CaptionML=ENU=Bill-to Address 2 (Cost Plus);
                                                   Editable=No }
    { 180 ;   ;Bill-to Post Code (Cost Plus);Code20;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Post Code" WHERE (No.=FIELD("Bill-to Customer No. (CP)")));
                                                   CaptionML=ENU=Bill-to Post Code (Cost Plus);
                                                   Editable=No }
    { 190 ;   ;Bill-to City (Cost Plus);Text30    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.City WHERE (No.=FIELD("Bill-to Customer No. (CP)")));
                                                   CaptionML=ENU=Bill-to City (Cost Plus);
                                                   Editable=No }
    { 200 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 210 ;   ;Version Date        ;Date          ;CaptionML=ENU=Version Date }
    { 220 ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 230 ;   ;Fax No.             ;Text30        ;CaptionML=ENU=Fax No. }
    { 240 ;   ;E-Mail              ;Text80        ;CaptionML=ENU=E-Mail }
    { 250 ;   ;Contract Group      ;Code20        ;TableRelation="Service Contract Group".Code;
                                                   OnValidate=BEGIN
                                                                IF "Contract Group" <> xRec."Contract Group" THEN
                                                                  CopySCBudgetCallsRelease;
                                                              END;

                                                   CaptionML=ENU=Contract Group }
    { 259 ;   ;Service Type (Other);Code20        ;TableRelation="Service Type";
                                                   OnValidate=BEGIN
                                                                ServSetup.GET;
                                                                IF ServSetup."Copy Additional Cost Setup" THEN BEGIN
                                                                   TESTFIELD("Service Type (Other)", "Service Type");
                                                                   VALIDATE("Department Code (Other)", "Global Dimension 1 Code");
                                                                END ELSE BEGIN
                                                                  IF ServTypeRec.GET("Service Type (Other)") THEN
                                                                    IF ServTypeRec."Department Code" <> '' THEN
                                                                      VALIDATE("Department Code (Other)", ServTypeRec."Department Code");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Service Type (Additional Cost) }
    { 260 ;   ;Service Type        ;Code20        ;TableRelation="Service Type".Code;
                                                   OnValidate=BEGIN
                                                                ServSetup.GET;
                                                                IF ServSetup."Copy Additional Cost Setup" THEN
                                                                   VALIDATE("Service Type (Other)", "Service Type");
                                                                IF ServTypeRec.GET("Service Type") THEN
                                                                  IF ServTypeRec."Department Code" <> '' THEN
                                                                    VALIDATE("Global Dimension 1 Code", ServTypeRec."Department Code");
                                                              END;

                                                   CaptionML=ENU=Service Type }
    { 270 ;   ;Offered Amount      ;Decimal       ;CaptionML=ENU=Offered Amount;
                                                   AutoFormatType=1 }
    { 280 ;   ;Offering Date       ;Date          ;OnValidate=BEGIN
                                                                IF "Offering Date" <> 0D THEN
                                                                  CheckStatus(1);
                                                                IF ("Offering Date" > "Accept before") AND ("Accept before" <> 0D) THEN
                                                                  MESSAGE(Text004a, FIELDCAPTION("Offering Date"), FIELDCAPTION("Accept before"));
                                                              END;

                                                   CaptionML=ENU=Offering Date }
    { 290 ;   ;Accept before       ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Offering Date");
                                                                IF ("Accept before" > "Order Date") AND ("Order Date" <> 0D) THEN
                                                                  MESSAGE(Text004a, FIELDCAPTION("Accept before"), FIELDCAPTION("Order Date"));
                                                              END;

                                                   CaptionML=ENU=Accept before }
    { 295 ;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Accept before");
                                                                IF "Order Date" <> 0D THEN
                                                                  CheckStatus(2);
                                                              END;

                                                   CaptionML=ENU=Order Date }
    { 300 ;   ;Starting Date       ;Date          ;OnValidate=VAR
                                                                ServiceContractTemplate@1100528300 : Record 11071754;
                                                                YearNo@1100528301 : Integer;
                                                              BEGIN
                                                                IF "Ending Date" = xRec."Ending Date" THEN
                                                                  VALIDATE("Contract Duration");
                                                                IF ("Starting Date" > "Ending Date") AND ("Ending Date" <> 0D) THEN
                                                                  FIELDERROR("Starting Date",STRSUBSTNO(Text004,FIELDCAPTION("Ending Date")));
                                                                IF ("Starting Date Maintenance" = 0D) OR ("Starting Date Maintenance" = xRec."Starting Date") THEN
                                                                  "Starting Date Maintenance" := "Starting Date";
                                                                UpdateServPackage;
                                                                IF "Starting Date Control Period" = 0D THEN BEGIN
                                                                  IF (ServiceContractTemplate.GET("Contract Template Code")) AND
                                                                     (ServiceContractTemplate."Start Date Cntrl Period on 1/1")
                                                                  THEN BEGIN
                                                                    YearNo := DATE2DMY("Starting Date", 3);
                                                                    VALIDATE("Starting Date Control Period", DMY2DATE(1, 1, YearNo));
                                                                  END ELSE
                                                                    VALIDATE("Starting Date Control Period", "Starting Date");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Starting Date }
    { 310 ;   ;Contract Duration   ;DateFormula   ;OnValidate=BEGIN
                                                                TESTFIELD("Starting Date");
                                                                IF FORMAT("Contract Duration") <> '' THEN
                                                                  IF "Renewal Date" = 0D THEN
                                                                    VALIDATE("Ending Date", CALCDATE("Contract Duration", "Starting Date") - 1)
                                                                  ELSE
                                                                    VALIDATE("Ending Date", CALCDATE("Contract Duration", "Renewal Date") - 1);
                                                              END;

                                                   CaptionML=ENU=Contract Duration }
    { 320 ;   ;Ending Date         ;Date          ;OnValidate=VAR
                                                                ServiceContractArrangement@1100528600 : Record 11071705;
                                                                SalesHeader@1100528601 : Record 36;
                                                              BEGIN
                                                                IF ("Renewal Date" = 0D) AND (CurrFieldNo = FIELDNO("Ending Date")) THEN  //db, 09-07-13: C006596
                                                                  VALIDATE("Starting Date");

                                                                IF "Ending Date" <> 0D THEN BEGIN
                                                                  ServiceContractArrangement.SETRANGE("Service Contract No.", "No.");
                                                                  ServiceContractArrangement.SETFILTER("Theoretical Maintenance Date", '>%1', "Ending Date");
                                                                  IF ServiceContractArrangement.FINDSET THEN BEGIN
                                                                    REPEAT
                                                                      ServiceContractArrangement.CALCFIELDS("Maintenance Proposal No.", "Service Order No.", Finished);
                                                                      IF (ServiceContractArrangement."Maintenance Proposal No." <> '') AND
                                                                         (ServiceContractArrangement."Service Order No." = '') THEN
                                                                        ERROR(Text104);
                                                                      IF (ServiceContractArrangement."Service Order No." <> '') AND NOT ServiceContractArrangement.Finished THEN
                                                                        ERROR(Text105);
                                                                    UNTIL ServiceContractArrangement.NEXT = 0;
                                                                  END;

                                                                  SalesHeader.SETRANGE("Document Type", SalesHeader."Document Type"::"Invoice Proposal");
                                                                  SalesHeader.SETRANGE("Service Invoice", TRUE);
                                                                  SalesHeader.SETRANGE("Service Contract No.", "No.");
                                                                  IF NOT SalesHeader.ISEMPTY THEN
                                                                    ERROR(Text106);
                                                                END;
                                                                UpdateEndingDateSCObjects;
                                                              END;

                                                   CaptionML=ENU=Ending Date }
    { 330 ;   ;Termination Period  ;DateFormula   ;OnValidate=BEGIN
                                                                IF FORMAT("Termination Period") <> '' THEN BEGIN
                                                                  IF "Termination Date" <> 0D THEN
                                                                    VALIDATE("Expiring Date", CALCDATE("Termination Period", "Termination Date") - 1);
                                                                  IF ("Expiring Date" < "Ending Date") AND ("Termination Date" <> 0D) THEN
                                                                    "Expiring Date" := "Ending Date";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Termination Period }
    { 335 ;   ;Termination Date    ;Date          ;OnValidate=BEGIN
                                                                IF "Expiring Date" = xRec."Expiring Date" THEN
                                                                  VALIDATE("Termination Period");
                                                              END;

                                                   CaptionML=ENU=Termination Date }
    { 340 ;   ;Expiring Date       ;Date          ;CaptionML=ENU=Expiring Date }
    { 350 ;   ;Contract Amount OLD ;Decimal       ;CaptionML=ENU=Contract Amount OLD;
                                                   Description=OBSOLETE;
                                                   AutoFormatType=1 }
    { 370 ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                CheckVATReverse(TRUE,FALSE);
                                                              END;

                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 380 ;   ;Generate Installments;Boolean      ;CaptionML=ENU=Generate Installments }
    { 390 ;   ;Installment Scheme  ;Code10        ;TableRelation="Installment Scheme".Code WHERE (Type=CONST(Service Order));
                                                   CaptionML=ENU=Installment Scheme }
    { 400 ;   ;Installments Generated;Boolean     ;InitValue=No;
                                                   CaptionML=ENU=Installments Generated }
    { 410 ;   ;Generation Date     ;Date          ;CaptionML=ENU=Generation Date;
                                                   Editable=No }
    { 420 ;   ;Modified by         ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1210190001 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("Modified by");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Modified by;
                                                   Editable=No }
    { 430 ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=No }
    { 440 ;   ;Input by            ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Input by;
                                                   Editable=No }
    { 450 ;   ;Input Date          ;Date          ;CaptionML=ENU=Input Date;
                                                   Editable=No }
    { 460 ;   ;Text                ;Text250       ;CaptionML=ENU=Text }
    { 470 ;   ;Surcharge % Labor   ;Decimal       ;CaptionML=ENU=Surcharge % Labor }
    { 480 ;   ;Surcharge % Material;Decimal       ;CaptionML=ENU=Surcharge % Material }
    { 490 ;   ;Surcharge % Subcontr.;Decimal      ;CaptionML=ENU=Surcharge % Subcontracting }
    { 500 ;   ;Surcharge % Plant   ;Decimal       ;CaptionML=ENU=Surcharge % Plant }
    { 600 ;   ;Surcharge % Sundry  ;Decimal       ;CaptionML=ENU=Surcharge % Sundry }
    { 610 ;   ;Renewal Date        ;Date          ;CaptionML=ENU=Renewal Date }
    { 620 ;   ;Invoice Period      ;Option        ;OnValidate=BEGIN
                                                                IF "Invoice Period" <> "Invoice Period"::Forehand THEN
                                                                  CLEAR("Invoice Postpone Period");
                                                                IF xRec."Invoice Period" <> "Invoice Period" THEN
                                                                  MessageIfInstallmentsExists;
                                                              END;

                                                   CaptionML=ENU=Invoice Period;
                                                   OptionCaptionML=ENU=Forehand,Afterwards;
                                                   OptionString=Forehand,Afterwards }
    { 630 ;   ;Invoice Text Installments;Text250  ;CaptionML=ENU=Invoice Text Installments }
    { 640 ;   ;Service Package Contract;Code10    ;TableRelation="Service Package" WHERE (Source Type=CONST(Contract));
                                                   OnValidate=BEGIN
                                                                CheckContractDiscount("Service Package Contract", xRec."Service Package Contract", FIELDNO("Service Package Contract"));
                                                              END;

                                                   CaptionML=ENU=Service Package Contract }
    { 641 ;   ;Service Package Call;Code10        ;TableRelation="Service Package" WHERE (Source Type=CONST(Call));
                                                   OnValidate=BEGIN
                                                                CheckContractDiscount("Service Package Call", xRec."Service Package Call", FIELDNO("Service Package Call"));
                                                              END;

                                                   CaptionML=ENU=Service Package Call }
    { 642 ;   ;Service Package Other;Code10       ;TableRelation="Service Package" WHERE (Source Type=CONST(Direct));
                                                   OnValidate=BEGIN
                                                                CheckContractDiscount("Service Package Other", xRec."Service Package Other", FIELDNO("Service Package Other"));
                                                              END;

                                                   CaptionML=ENU=Service Package Other }
    { 643 ;   ;Service Package Estimate;Code10    ;TableRelation="Service Package" WHERE (Source Type=CONST(Estimate));
                                                   OnValidate=BEGIN
                                                                CheckContractDiscount("Service Package Estimate", xRec."Service Package Estimate", FIELDNO("Service Package Estimate"));
                                                              END;

                                                   CaptionML=ENU=Service Package Estimate }
    { 649 ;   ;Service Package     ;Code10        ;TableRelation="Service Package" WHERE (Source Type=CONST(None));
                                                   OnValidate=VAR
                                                                ServPackRec@1100525000 : Record 11012806;
                                                              BEGIN
                                                                IF ServPackRec.GET("Service Package") THEN BEGIN
                                                                  VALIDATE("Service Package Call", ServPackRec."Service Package Call");
                                                                  VALIDATE("Service Package Contract", ServPackRec."Service Package Contract");
                                                                  VALIDATE("Service Package Other", ServPackRec."Service Package Direct");
                                                                  VALIDATE("Service Package Estimate", ServPackRec."Service Package Estimate");
                                                                END;
                                                                CheckContractDiscount("Service Package", xRec."Service Package", FIELDNO("Service Package"));
                                                              END;

                                                   CaptionML=ENU=Service Package }
    { 650 ;   ;Alt. Bill-to Address (CP);Code10   ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD("Bill-to Customer No. (CP)"),
                                                                                               Billing Address=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                CheckInvoiceAddress;
                                                                CALCFIELDS("Derived from Cust. No. (CP)");
                                                              END;

                                                   CaptionML=ENU=Alternative Bill-to Address (CP) }
    { 655 ;   ;Derived from Cust. No. (CP);Code20 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Ship-to Address"."Derived from Customer No." WHERE (Customer No.=FIELD("Bill-to Customer No. (CP)"),
                                                                                                                           Code=FIELD("Alt. Bill-to Address (CP)")));
                                                   CaptionML=ENU=Derived from Customer No. (Cost Plus);
                                                   Editable=No }
    { 669 ;   ;Cost Component Filter;Code10       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Cost Component Filter }
    { 670 ;   ;Period Filter       ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Period Filter }
    { 672 ;   ;Period Type Filter  ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Period Type Filter;
                                                   OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                                                   OptionString=Day,Week,Month,Quarter,Year,Accounting Period }
    { 673 ;   ;Source Type Filter  ;Option        ;FieldClass=FlowFilter;
                                                   InitValue=Other;
                                                   CaptionML=ENU=Source Type Filter;
                                                   OptionCaptionML=ENU=Call,Contract,Other,Estimate;
                                                   OptionString=Call,Contract,Other,Estimate }
    { 674 ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 675 ;   ;Prognosis Filter    ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Prognosis Filter }
    { 676 ;   ;PrevPrognosisFilter ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=PrevPrognosisFilter }
    { 678 ;   ;Budget Ovh. Surch. (Contract);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line"."Overhead Surcharge" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                           Index Date=FIELD(Period Filter),
                                                                                                                           Source Type=FIELD(Source Type Filter),
                                                                                                                           Cost Component=FIELD(Cost Component Filter),
                                                                                                                           Budget Type=CONST(Contract)));
                                                   CaptionML=ENU=Budget Overhead Surcharge (Contract);
                                                   Editable=No }
    { 679 ;   ;Budget Ovh. Surch. (ServOrder);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line"."Overhead Surcharge" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                           Index Date=FIELD(Period Filter),
                                                                                                                           Source Type=FIELD(Source Type Filter),
                                                                                                                           Cost Component=FIELD(Cost Component Filter),
                                                                                                                           Budget Type=CONST(Order)));
                                                   CaptionML=ENU=Budget Overhead Surcharge (Service Order);
                                                   Editable=No }
    { 680 ;   ;Budget Amount (ServOrder);Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line".Amount WHERE (Service Contract No.=FIELD(No.),
                                                                                                             Index Date=FIELD(Period Filter),
                                                                                                             Source Type=FIELD(Source Type Filter),
                                                                                                             Cost Component=FIELD(Cost Component Filter),
                                                                                                             Budget Type=CONST(Order)));
                                                   CaptionML=ENU=Budget Amount (Service Order);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 681 ;   ;Budget Hours (ServOrder);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line".Hours WHERE (Service Contract No.=FIELD(No.),
                                                                                                            Index Date=FIELD(Period Filter),
                                                                                                            Source Type=FIELD(Source Type Filter),
                                                                                                            Cost Component=FIELD(Cost Component Filter),
                                                                                                            Budget Type=CONST(Order),
                                                                                                            Cost Type=CONST(Labor)));
                                                   CaptionML=ENU=Budget Hours (Service Order);
                                                   Editable=No }
    { 683 ;   ;Budget Amount (Contract);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line".Amount WHERE (Service Contract No.=FIELD(No.),
                                                                                                             Index Date=FIELD(Period Filter),
                                                                                                             Source Type=FIELD(Source Type Filter),
                                                                                                             Cost Component=FIELD(Cost Component Filter),
                                                                                                             Budget Type=CONST(Contract)));
                                                   CaptionML=ENU=Budget Amount (Contract);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 684 ;   ;Budget Hours (Contract);Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line".Hours WHERE (Service Contract No.=FIELD(No.),
                                                                                                            Index Date=FIELD(Period Filter),
                                                                                                            Source Type=FIELD(Source Type Filter),
                                                                                                            Cost Component=FIELD(Cost Component Filter),
                                                                                                            Budget Type=CONST(Contract),
                                                                                                            Cost Type=CONST(Labor)));
                                                   CaptionML=ENU=Budget Hours (Contract);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 685 ;   ;Actual Costs (Additional);Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Cost (LCY)" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                    Posting Date=FIELD(Period Filter),
                                                                                                                    Source Type=FIELD(Source Type Filter),
                                                                                                                    Cost Component=FIELD(Cost Component Filter),
                                                                                                                    Additional Cost=CONST(Yes),
                                                                                                                    Cost Present=CONST(Yes)));
                                                   CaptionML=ENU=Actual Costs (Additional);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 686 ;   ;Actual Costs (Contract);Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Cost (LCY)" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                    Posting Date=FIELD(Period Filter),
                                                                                                                    Source Type=FIELD(Source Type Filter),
                                                                                                                    Cost Component=FIELD(Cost Component Filter),
                                                                                                                    Additional Cost=CONST(No),
                                                                                                                    Cost Present=CONST(Yes)));
                                                   CaptionML=ENU=Actual Costs (Contract);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 687 ;   ;Actual Hours (Additional);Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry".Quantity WHERE (Service Contract No.=FIELD(No.),
                                                                                                          Posting Date=FIELD(Period Filter),
                                                                                                          Source Type=FIELD(Source Type Filter),
                                                                                                          Cost Component=FIELD(Cost Component Filter),
                                                                                                          Cost Type=CONST(Labor),
                                                                                                          Additional Cost=CONST(Yes),
                                                                                                          Cost Present=CONST(Yes)));
                                                   CaptionML=ENU=Actual Hours (Additional);
                                                   Editable=No }
    { 688 ;   ;Actual Hours (Contract);Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry".Quantity WHERE (Service Contract No.=FIELD(No.),
                                                                                                          Posting Date=FIELD(Period Filter),
                                                                                                          Source Type=FIELD(Source Type Filter),
                                                                                                          Cost Component=FIELD(Cost Component Filter),
                                                                                                          Cost Type=CONST(Labor),
                                                                                                          Additional Cost=CONST(No),
                                                                                                          Cost Present=CONST(Yes)));
                                                   CaptionML=ENU=Actual Hours (Contract);
                                                   Editable=No }
    { 690 ;   ;Actual Costs        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Cost (LCY)" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                    Posting Date=FIELD(Period Filter),
                                                                                                                    Source Type=FIELD(Source Type Filter),
                                                                                                                    Cost Component=FIELD(Cost Component Filter),
                                                                                                                    Cost Present=CONST(Yes)));
                                                   CaptionML=ENU=Actual Costs;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 691 ;   ;Actual Hours        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry".Quantity WHERE (Service Contract No.=FIELD(No.),
                                                                                                          Posting Date=FIELD(Period Filter),
                                                                                                          Source Type=FIELD(Source Type Filter),
                                                                                                          Cost Component=FIELD(Cost Component Filter),
                                                                                                          Cost Type=CONST(Labor),
                                                                                                          Cost Present=CONST(Yes)));
                                                   CaptionML=ENU=Actual Hours;
                                                   Editable=No }
    { 692 ;   ;Revenues            ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Revenue (LCY)" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                       Posting Date=FIELD(Period Filter),
                                                                                                                       Source Type=FIELD(Source Type Filter),
                                                                                                                       Cost Component=FIELD(Cost Component Filter),
                                                                                                                       Revenue Present=CONST(Yes)));
                                                   CaptionML=ENU=Revenues;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 693 ;   ;Revenues (Additional);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Revenue (LCY)" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                       Posting Date=FIELD(Period Filter),
                                                                                                                       Source Type=FIELD(Source Type Filter),
                                                                                                                       Cost Component=FIELD(Cost Component Filter),
                                                                                                                       Additional Cost=CONST(Yes),
                                                                                                                       Revenue Present=CONST(Yes)));
                                                   CaptionML=ENU=Revenues (Additional);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 694 ;   ;Revenues (Contract) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Revenue (LCY)" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                       Posting Date=FIELD(Period Filter),
                                                                                                                       Source Type=FIELD(Source Type Filter),
                                                                                                                       Cost Component=FIELD(Cost Component Filter),
                                                                                                                       Additional Cost=CONST(No),
                                                                                                                       Revenue Present=CONST(Yes)));
                                                   CaptionML=ENU=Revenues (Contract);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 695 ;   ;Open (Purchase)     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Order Control Line"."Outstanding Amount" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                             Service Source Type=FIELD(Source Type Filter),
                                                                                                                             Cost Component=FIELD(Cost Component Filter),
                                                                                                                             Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Open (Purchase);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 696 ;   ;Received/Not Invoiced;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Order Control Line"."Amt. Rcd. Not Invoiced" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                                 Service Source Type=FIELD(Source Type Filter),
                                                                                                                                 Cost Component=FIELD(Cost Component Filter),
                                                                                                                                 Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Received/Not Invoiced;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 697 ;   ;Open Ovh. Surch. Firm (Purch.);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Order Control Line"."Overhead Surcharge Firm" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                                  Service Source Type=FIELD(Source Type Filter),
                                                                                                                                  Cost Component=FIELD(Cost Component Filter),
                                                                                                                                  Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Open Ovh. Surch. Firm Commitments (Purchase);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 698 ;   ;Open Ovh. Surch. (Inventory);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Journal Surcharge"."Overhead Surcharge Service" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                                Posting Date=FIELD(Period Filter),
                                                                                                                                Service Source Type=FIELD(Source Type Filter),
                                                                                                                                Cost Component=FIELD(Cost Component Filter)));
                                                   CaptionML=ENU=Open Ovh. Surch. (Inventory);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 699 ;   ;Open (Inventory)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Journal Line".Amount WHERE (Service Contract No.=FIELD(No.),
                                                                                                     Posting Date=FIELD(Period Filter),
                                                                                                     Service Source Type=FIELD(Source Type Filter),
                                                                                                     Cost Component=FIELD(Cost Component Filter)));
                                                   CaptionML=ENU=Open (Inventory);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 700 ;   ;Mobile Phone No.    ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Mobile Phone No. }
    { 710 ;   ;Phone No. 2         ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. 2 }
    { 720 ;   ;Collect Cost Plus Entry;Boolean    ;CaptionML=ENU=Collect Cost Plus Entry }
    { 730 ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Service Contract),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 740 ;   ;Limit Budget Labor  ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Limit Budget Total", "Limit Budget Labor" + "Limit Budget Material");
                                                              END;

                                                   CaptionML=ENU=Limit Budget Labor;
                                                   AutoFormatType=1 }
    { 741 ;   ;Limit Budget Hours  ;Decimal       ;CaptionML=ENU=Limit Budget Hours;
                                                   DecimalPlaces=2:5 }
    { 742 ;   ;Limit Budget Material;Decimal      ;OnValidate=BEGIN
                                                                VALIDATE("Limit Budget Total", "Limit Budget Labor" + "Limit Budget Material");
                                                              END;

                                                   CaptionML=ENU=Limit Budget Material;
                                                   AutoFormatType=1 }
    { 745 ;   ;Limit Budget Total  ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Limit Budget Labor" <> 0) OR ("Limit Budget Material" <> 0) THEN
                                                                  TESTFIELD("Limit Budget Total", "Limit Budget Labor" + "Limit Budget Material");
                                                              END;

                                                   CaptionML=ENU=Limit Budget Total;
                                                   AutoFormatType=1 }
    { 750 ;   ;Invoice Base Amount Labor;Decimal  ;OnValidate=BEGIN
                                                                VALIDATE("Invoice Base Amount Total", "Invoice Base Amount Labor" + "Invoice Base Amount Material");
                                                              END;

                                                   CaptionML=ENU=Invoice Base Amount Labor;
                                                   AutoFormatType=1 }
    { 751 ;   ;Invoice Base Hours  ;Decimal       ;CaptionML=ENU=Invoice Base Hours;
                                                   DecimalPlaces=2:5 }
    { 752 ;   ;Invoice Base Amount Material;Decimal;
                                                   OnValidate=BEGIN
                                                                VALIDATE("Invoice Base Amount Total", "Invoice Base Amount Labor" + "Invoice Base Amount Material");
                                                              END;

                                                   CaptionML=ENU=Invoice Base Amount Material;
                                                   AutoFormatType=1 }
    { 755 ;   ;Invoice Base Amount Total;Decimal  ;OnValidate=BEGIN
                                                                IF ("Invoice Base Amount Labor" <> 0) OR ("Invoice Base Amount Material" <> 0) THEN
                                                                  TESTFIELD("Invoice Base Amount Total", "Invoice Base Amount Labor" + "Invoice Base Amount Material");
                                                              END;

                                                   CaptionML=ENU=Invoice Base Amount Total;
                                                   AutoFormatType=1 }
    { 760 ;   ;Invoice Base Method ;Option        ;OnValidate=BEGIN
                                                                IF "Invoice Base Method" = "Invoice Base Method"::" " THEN BEGIN
                                                                  "Invoice Base Amount Labor" := 0;
                                                                  "Invoice Base Hours" := 0;
                                                                  "Invoice Base Amount Material" := 0;
                                                                  "Invoice Base Amount Total" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Invoice Base Method;
                                                   OptionCaptionML=ENU=" ,Total Service Order - Invoice Base Amount,Total Service Order if exceeding Invoice Base Amount";
                                                   OptionString=[ ,total-base,total>base] }
    { 769 ;   ;Department Code (Other);Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ServSetup.GET;
                                                                IF ServSetup."Copy Additional Cost Setup" THEN
                                                                   TESTFIELD("Department Code (Other)", "Global Dimension 1 Code");

                                                                ValidateShortcutDimCode(1,"Department Code (Other)", FALSE);  //db, 14-09-11: M28816
                                                              END;

                                                   CaptionML=ENU=Department (Additional Cost) }
    { 770 ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ServSetup.GET;
                                                                IF ServSetup."Copy Additional Cost Setup" THEN
                                                                   VALIDATE("Department Code (Other)", "Global Dimension 1 Code");

                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code", TRUE);  //db, 14-09-11: M28816
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 780 ;   ;Open Amount (Hours) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line"."Amount (LCY)" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                Service Source Type=FIELD(Source Type Filter),
                                                                                                                Cost Component=FIELD(Cost Component Filter),
                                                                                                                Posting Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Open Amount (Hours);
                                                   Editable=No }
    { 790 ;   ;Open Hours          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line"."Total Line" WHERE (Service Contract No.=FIELD(No.),
                                                                                                              Service Source Type=FIELD(Source Type Filter),
                                                                                                              Cost Component=FIELD(Cost Component Filter),
                                                                                                              Posting Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Open Hours;
                                                   Editable=No }
    { 800 ;   ;Open Ovh. Surch. (Hours);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Surcharge"."Overhead Surcharge Service" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                                   Source Type=FIELD(Source Type Filter),
                                                                                                                                   Cost Component=FIELD(Cost Component Filter),
                                                                                                                                   Posting Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Open Ovh. Surch. (Hours);
                                                   Editable=No }
    { 805 ;   ;Open Ovh. Surch. Soft (Purch.);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Order Control Line"."Overhead Surcharge Soft" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                                  Service Source Type=FIELD(Source Type Filter),
                                                                                                                                  Cost Component=FIELD(Cost Component Filter),
                                                                                                                                  Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Open Ovh. Surch. Soft Commitments (Purchase);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 810 ;   ;Preferred Employee OBS;Code20      ;TableRelation="Resource (WOP)" WHERE (Type=CONST(Employee));
                                                   CaptionML=ENU=Preferred Employee OBSOLETE;
                                                   Description=OBSOLETE;
                                                   Editable=No }
    { 820 ;   ;% Labor             ;Decimal       ;OnValidate=BEGIN
                                                                CheckVATReverse(TRUE,FALSE);
                                                              END;

                                                   CaptionML=ENU=% Labor;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   AutoFormatType=1 }
    { 830 ;   ;% to B Account      ;Decimal       ;OnValidate=BEGIN
                                                                CheckVATReverse(TRUE,FALSE);
                                                              END;

                                                   CaptionML=ENU=% to B Account;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 835 ;   ;Purchase            ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Amount (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                         Service Contract No.=FIELD(No.),
                                                                                                         Service Source Type=FIELD(Source Type Filter),
                                                                                                         Cost Component=FIELD(Cost Component Filter),
                                                                                                         Order Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Purchase;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 840 ;   ;Order Amount        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order"."Order Amount (LCY)" WHERE (Service Contract No.=FIELD(No.),
                                                                                                               Order Date=FIELD(Period Filter),
                                                                                                               Source Type=FIELD(Source Type Filter)));
                                                   CaptionML=ENU=Service Order Amount;
                                                   Editable=No }
    { 850 ;   ;Closed Costs        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Closed Costs" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                Posting Date=FIELD(Period Filter),
                                                                                                                Source Type=FIELD(Source Type Filter),
                                                                                                                Cost Component=FIELD(Cost Component Filter)));
                                                   CaptionML=ENU=Closed Costs;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 860 ;   ;Closed Revenues     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Closed Revenues" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                   Posting Date=FIELD(Period Filter),
                                                                                                                   Source Type=FIELD(Source Type Filter),
                                                                                                                   Cost Component=FIELD(Cost Component Filter)));
                                                   CaptionML=ENU=Closed Revenues;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 880 ;   ;Received/Not Inv. Hours;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Order Control Line"."Hours Rcd. Not Invoiced" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                                  Service Source Type=FIELD(Source Type Filter),
                                                                                                                                  Cost Component=FIELD(Cost Component Filter),
                                                                                                                                  Cost Type=CONST(Labor)));
                                                   CaptionML=ENU=Received/Not Inv. Hours;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 890 ;   ;Maintenance Planning based on;Option;
                                                   CaptionML=ENU=Maintenance Planning based on;
                                                   OptionCaptionML=ENU=Date,Cluster;
                                                   OptionString=Date,Cluster }
    { 910 ;   ;Service Time Table OBS;Code20      ;TableRelation="Service Time Table OBS".Code;
                                                   CaptionML=ENU=Service Time Table OBSOLETE;
                                                   Description=OBSOLETE }
    { 930 ;   ;Allowed Costs       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line".Amount WHERE (Service Contract No.=FIELD(No.),
                                                                                                             Finished=CONST(Yes),
                                                                                                             Source Type=FIELD(Source Type Filter),
                                                                                                             Cost Component=FIELD(Cost Component Filter),
                                                                                                             Index Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Allowed Costs;
                                                   Editable=No }
    { 931 ;   ;Allowed Costs (Ovh. Surch.);Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line"."Overhead Surcharge" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                           Finished=CONST(Yes),
                                                                                                                           Source Type=FIELD(Source Type Filter),
                                                                                                                           Cost Component=FIELD(Cost Component Filter),
                                                                                                                           Index Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Allowed Costs (Overhead Surcharge);
                                                   Editable=No }
    { 932 ;   ;Allowed Hours       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line".Hours WHERE (Service Contract No.=FIELD(No.),
                                                                                                            Finished=CONST(Yes),
                                                                                                            Source Type=FIELD(Source Type Filter),
                                                                                                            Cost Component=FIELD(Cost Component Filter),
                                                                                                            Index Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Allowed Hours;
                                                   Editable=No }
    { 940 ;   ;Collect Installment Invoice By;Option;
                                                   CaptionML=ENU=Collect Installment Invoice By;
                                                   OptionCaptionML=ENU=Contract,Customer;
                                                   OptionString=Contract,Customer }
    { 950 ;   ;Cost Control Up to Date;Boolean    ;CaptionML=ENU=Cost Control Up to Date }
    { 960 ;   ;Fixed               ;Boolean       ;CaptionML=ENU=Fixed }
    { 970 ;   ;Preclosure Result   ;Option        ;InitValue=No;
                                                   CaptionML=ENU=Preclosure Result;
                                                   OptionCaptionML=ENU=No,Yes;
                                                   OptionString=No,Yes }
    { 980 ;   ;Actual Preclosure Result;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Actual Preclosure Result" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                            Source Type=FIELD(Source Type Filter),
                                                                                                                            Cost Component=FIELD(Cost Component Filter),
                                                                                                                            Posting Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Actual Preclosure Result;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 981 ;   ;Actual Preclosure Cost;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Actual Preclosure Cost" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                          Source Type=FIELD(Source Type Filter),
                                                                                                                          Cost Component=FIELD(Cost Component Filter),
                                                                                                                          Posting Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Actual Preclosure Cost;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 982 ;   ;Actual Preclosure Revenue;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Actual Preclosure Revenue" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                             Source Type=FIELD(Source Type Filter),
                                                                                                                             Cost Component=FIELD(Cost Component Filter),
                                                                                                                             Posting Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Actual Preclosure Revenue;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 990 ;   ;Act. Preclosure Result Period;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Actual Preclosure Result" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                            Source Type=FIELD(Source Type Filter),
                                                                                                                            Cost Component=FIELD(Cost Component Filter),
                                                                                                                            Posting Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Actual Preclosure Result Period;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1000;   ;Contract Prognosis Level 1;Option  ;CaptionML=ENU=Contract Prognosis (Level 1);
                                                   OptionCaptionML=ENU=Source Type,Cost Component;
                                                   OptionString=SourceType,CostComponent;
                                                   Description=OBSOLETE? }
    { 1001;   ;Contract Prognosis Level 2;Option  ;CaptionML=ENU=Contract Prognosis (Level 2);
                                                   OptionCaptionML=ENU=Cost Object,Cost Type;
                                                   OptionString=CostObject,CostType;
                                                   Description=OBSOLETE? }
    { 1010;   ;Contract Prognosis based on;Option ;CaptionML=ENU=Contract Prognosis (Labor) based on;
                                                   OptionCaptionML=ENU=Available,Extrapolation,Allowed;
                                                   OptionString=Available,Extrapolation,Allowed;
                                                   Description=OBSOLETE? }
    { 1020;   ;Budget Amount (ST Contract);Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line".Amount WHERE (Service Contract No.=FIELD(No.),
                                                                                                             Index Date=FIELD(Period Filter),
                                                                                                             Source Type=CONST(Contract),
                                                                                                             Cost Component=FIELD(Cost Component Filter),
                                                                                                             Budget Type=CONST(Order)));
                                                   CaptionML=ENU=Budget Amount (Source Type Contract);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1021;   ;Budget Ovh. Surch. (ST Contr);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line"."Overhead Surcharge" WHERE (Service Contract No.=FIELD(No.),
                                                                                                                           Index Date=FIELD(Period Filter),
                                                                                                                           Source Type=CONST(Contract),
                                                                                                                           Cost Component=FIELD(Cost Component Filter),
                                                                                                                           Budget Type=CONST(Order)));
                                                   CaptionML=ENU=Budget Overhead Surcharge (Source Type Contract);
                                                   Editable=No }
    { 1025;   ;Budget Hours (ST Contract);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line".Hours WHERE (Service Contract No.=FIELD(No.),
                                                                                                            Index Date=FIELD(Period Filter),
                                                                                                            Source Type=CONST(Contract),
                                                                                                            Cost Component=FIELD(Cost Component Filter),
                                                                                                            Budget Type=CONST(Order),
                                                                                                            Cost Type=CONST(Labor)));
                                                   CaptionML=ENU=Budget Hours (Source Type Contract);
                                                   Editable=No }
    { 1040;   ;Reference Date (Item);Date         ;CaptionML=ENU=Reference Date Item Prices }
    { 1041;   ;Reference Date (Company);Date      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Inventory Setup"."Reference Date (Item)");
                                                   CaptionML=ENU=Reference Date Item Prices (Company);
                                                   Editable=No }
    { 1042;   ;Reference Date (Customer);Date     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Reference Date (Item)" WHERE (No.=FIELD("Bill-to Customer No. (CP)")));
                                                   CaptionML=ENU=Reference Date Item Prices (Customer);
                                                   Editable=No }
    { 1050;   ;Purch Discount Term Group 1;Code20 ;TableRelation="Discount Term Group".Code WHERE (Level=CONST(Customer),
                                                                                                   Type=FILTER(Common|Purchase));
                                                   OnValidate=BEGIN
                                                                IF "Purch Discount Term Group 1" = '' THEN BEGIN
                                                                  "Priority Purch Disc Term Grp 1" := '';
                                                                END ELSE BEGIN
                                                                  "Priority Purch Disc Term Grp 0" := '0';
                                                                  "Priority Purch Disc Term Grp 1" := '1';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Purchase Discount Term Group (Customer) }
    { 1051;   ;Purch Discount Term Group 2;Code20 ;TableRelation="Discount Term Group".Code WHERE (Level=CONST(Job),
                                                                                                   Type=FILTER(Common|Purchase));
                                                   OnValidate=BEGIN
                                                                IF "Purch Discount Term Group 2" = '' THEN BEGIN
                                                                  "Priority Purch Disc Term Grp 2" := '';
                                                                END ELSE BEGIN
                                                                  "Priority Purch Disc Term Grp 0" := '0';
                                                                  "Priority Purch Disc Term Grp 2" := '2';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Purchase Discount Term Group (Job) }
    { 1052;   ;Priority Purch Disc Term Grp 0;Code1;
                                                   CaptionML=ENU=Priority Purchase Discount Term Group (Company);
                                                   SQL Data Type=Variant;
                                                   Numeric=Yes }
    { 1053;   ;Priority Purch Disc Term Grp 1;Code1;
                                                   CaptionML=ENU=Priority Purchase Discount Term Group (Customer);
                                                   SQL Data Type=Variant;
                                                   Numeric=Yes }
    { 1054;   ;Priority Purch Disc Term Grp 2;Code1;
                                                   CaptionML=ENU=Priority Purchase Discount Term Group (Job);
                                                   SQL Data Type=Variant;
                                                   Numeric=Yes }
    { 1055;   ;Sales Discount Term Group 1;Code20 ;TableRelation="Discount Term Group".Code WHERE (Level=CONST(Customer),
                                                                                                   Type=FILTER(Common|Sales));
                                                   OnValidate=BEGIN
                                                                IF "Sales Discount Term Group 1" = '' THEN BEGIN
                                                                  "Priority Sales Disc Term Grp 1" := '';
                                                                END ELSE BEGIN
                                                                  "Priority Sales Disc Term Grp 0" := '0';
                                                                  "Priority Sales Disc Term Grp 1" := '1';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Sales Discount Term Group (Customer) }
    { 1056;   ;Sales Discount Term Group 2;Code20 ;TableRelation="Discount Term Group".Code WHERE (Level=CONST(Job),
                                                                                                   Type=FILTER(Common|Sales));
                                                   OnValidate=BEGIN
                                                                IF "Sales Discount Term Group 2" = '' THEN BEGIN
                                                                  "Priority Sales Disc Term Grp 2" := '';
                                                                END ELSE BEGIN
                                                                  "Priority Sales Disc Term Grp 0" := '0';
                                                                  "Priority Sales Disc Term Grp 2" := '2';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Sales Discount Term Group (Job) }
    { 1057;   ;Priority Sales Disc Term Grp 0;Code1;
                                                   CaptionML=ENU=Priority Sales Discount Term Group (Company);
                                                   SQL Data Type=Variant;
                                                   Numeric=Yes }
    { 1058;   ;Priority Sales Disc Term Grp 1;Code1;
                                                   CaptionML=ENU=Priority Sales Discount Term Group (Customer);
                                                   SQL Data Type=Variant;
                                                   Numeric=Yes }
    { 1059;   ;Priority Sales Disc Term Grp 2;Code1;
                                                   CaptionML=ENU=Priority Sales Discount Term Group (Job);
                                                   SQL Data Type=Variant;
                                                   Numeric=Yes }
    { 1080;   ;Adviser             ;Code20        ;TableRelation=Contact;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo > 0 THEN
                                                                  CALCFIELDS("Name Adviser");
                                                              END;

                                                   CaptionML=ENU=Adviser }
    { 1085;   ;Name Adviser        ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Adviser)));
                                                   CaptionML=ENU=Name Adviser;
                                                   Editable=No }
    { 1090;   ;Send Mail Status Update;Boolean    ;CaptionML=ENU=Send Mail at Status update }
    { 1095;   ;Send Mail Work Sheet;Boolean       ;CaptionML=ENU=Send Mail Work Sheet }
    { 1100;   ;Transaction Mode Installments;Code20;
                                                   CaptionML=ENU=Transaction Mode Installments }
    { 1110;   ;Starting Date Maintenance;Date     ;CaptionML=ENU=Starting Date Maintenance }
    { 1115;   ;Starting Date Invoice;Date         ;OnValidate=BEGIN
                                                                IF "Starting Date Invoice" <> 0D THEN
                                                                  CheckStartDateInvoice;  //db, 05-12-11
                                                              END;

                                                   CaptionML=ENU=Starting Date Invoice }
    { 1120;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 1125;   ;Liquidity Prognosis ;Option        ;OnValidate=BEGIN
                                                                IF (("Starting Date" = 0D) OR ("Ending Date" = 0D)) AND
                                                                ("Liquidity Prognosis" <> "Liquidity Prognosis"::"Not") THEN
                                                                  ERROR(Text011);
                                                              END;

                                                   CaptionML=ENU=Liquidity Prognosis;
                                                   OptionCaptionML=ENU=Not,Equable Division,Specific Division;
                                                   OptionString=Not,Equable Division,Specific Division }
    { 1130;   ;Progress Preclosure Result;Option  ;CaptionML=ENU=Progress Preclosure Result;
                                                   OptionCaptionML=ENU=Contract Prognosis,Financial Period;
                                                   OptionString=Prognosis,FinPeriod }
    { 1135;   ;Contact Person      ;Code20        ;TableRelation=Contact.No. WHERE (Type=CONST(Person),
                                                                                    Company No.=FIELD(Contact No.),
                                                                                    Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Contact Person Name");
                                                                "Contact Name" := "Contact Person Name";
                                                              END;

                                                   CaptionML=ENU=Contact Person }
    { 1140;   ;Contact Person Name ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Contact Person)));
                                                   CaptionML=ENU=Contact Person Name;
                                                   Editable=No }
    { 1150;   ;Bill-to Contact Person (CP);Code20 ;TableRelation=Contact.No. WHERE (Company No.=FIELD("Bill-to Contact No. (CP)"),
                                                                                    Type=CONST(Person));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Bill-to Cont. Person Name (CP)");
                                                              END;

                                                   CaptionML=ENU=Bill-to Contact Person (Cost Plus) }
    { 1160;   ;Bill-to Cont. Person Name (CP);Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD("Bill-to Contact Person (CP)")));
                                                   CaptionML=ENU=Bill-to Contact Person Name (Cost Plus);
                                                   Editable=No }
    { 1170;   ;Contact No.         ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Contact Business Relation"."Contact No." WHERE (Link to Table=CONST(Customer),
                                                                                                                       No.=FIELD(Customer No.)));
                                                   CaptionML=ENU=Contact No.;
                                                   Editable=No }
    { 1180;   ;Bill-to Contact No. (CP);Code20    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Contact Business Relation"."Contact No." WHERE (Link to Table=CONST(Customer),
                                                                                                                       No.=FIELD("Bill-to Customer No. (CP)")));
                                                   CaptionML=ENU=Bill-to Contact No. (Cost Plus);
                                                   Editable=No }
    { 1190;   ;Internal Contract   ;Boolean       ;CaptionML=ENU=Internal Contract }
    { 1200;   ;Direct Debit Mandate ID;Code35     ;TableRelation="SEPA Direct Debit Mandate" WHERE (Customer No.=FIELD("Bill-to Customer No. (Contr.)"),
                                                                                                    Closed=CONST(No),
                                                                                                    Blocked=CONST(No),
                                                                                                    Mandate for Filter=CONST(ServiceContract),
                                                                                                    No. Mandate for Filter=FIELD(No.));
                                                   OnValidate=BEGIN
                                                                IF "Direct Debit Mandate ID" <> '' THEN
                                                                  TESTFIELD("Bill-to Customer No. (Contr.)");
                                                              END;

                                                   CaptionML=ENU=Direct Debit Mandate ID }
    { 1215;   ;Starting Date Control Period;Date  ;OnValidate=BEGIN
                                                                CreateControlPeriod;
                                                              END;

                                                   CaptionML=ENU=Starting Date Control Period }
    { 1220;   ;Budget Amount Objects;Decimal      ;CaptionML=ENU=Budget Amount Objects;
                                                   Editable=No }
    { 1225;   ;Budget Hours Objects;Decimal       ;CaptionML=ENU=Budget Hours Objects;
                                                   Editable=No }
    { 1230;   ;Contract Amount Objects;Decimal    ;CaptionML=ENU=Contract Amount Objects;
                                                   Editable=No }
    { 1235;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                // dp00116.n
                                                                IF "Currency Code" <> xRec."Currency Code" THEN BEGIN
                                                                  RecreateContractAmountsByDate;
                                                                  UpdateServiceSalesDiscount;
                                                                END
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 1240;   ;Invoice Type        ;Option        ;OnValidate=VAR
                                                                ContractInstallment@1100528600 : Record 11071707;
                                                              BEGIN
                                                                IF xRec."Invoice Type" <> "Invoice Type" THEN BEGIN
                                                                  CASE "Invoice Type" OF
                                                                    "Invoice Type"::Dynamic: BEGIN
                                                                      ContractInstallment.SETRANGE("Service Contract No.", "No.");
                                                                      IF NOT ContractInstallment.ISEMPTY THEN
                                                                        ERROR(Text100);
                                                                      CLEAR("Installments based on Progress");
                                                                      "Dynamic Invoice Type" := "Dynamic Invoice Type"::Days;
                                                                      CLEAR("Installment Type");
                                                                    END;
                                                                    "Invoice Type"::Installments: BEGIN
                                                                      CLEAR("Invoice Interval");
                                                                      CLEAR("Invoice Postpone Period");
                                                                      CLEAR("Dynamic Invoice Type");
                                                                      VALIDATE("Installment Type", "Installment Type"::Contract);
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Invoice Type;
                                                   OptionCaptionML=ENU=Dynamic,Installments;
                                                   OptionString=Dynamic,Installments }
    { 1241;   ;Installments based on Progress;Boolean;
                                                   CaptionML=ENU=Installments based on Progress }
    { 1250;   ;Contract Limit      ;Option        ;OnValidate=BEGIN
                                                                IF (xRec."Contract Limit" <> "Contract Limit") AND ("Contract Limit" = "Contract Limit"::Unlimited) THEN BEGIN
                                                                  CLEAR("Contract Duration");
                                                                  "Ending Date" := 0D;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Contract Limit;
                                                   OptionCaptionML=ENU=Limited,Unlimited;
                                                   OptionString=Limited,Unlimited }
    { 1260;   ;Service Contract Folder;Text250    ;CaptionML=ENU=Service Contract Folder }
    { 1270;   ;Available as Reference;Option      ;CaptionML=ENU=Available as Reference;
                                                   OptionCaptionML=ENU=Always,On Request,Never;
                                                   OptionString=Always,On Request,Never }
    { 1280;   ;Invoice Interval    ;DateFormula   ;OnValidate=BEGIN
                                                                IF FORMAT("Invoice Interval") = '' THEN BEGIN
                                                                  TESTFIELD("Invoicing via Collective List", FALSE);
                                                                  IF "Invoice Type" = "Invoice Type"::Dynamic THEN
                                                                    VALIDATE("Dynamic Invoice Type", "Dynamic Invoice Type"::Days);
                                                                END ELSE
                                                                  VALIDATE("Invoice Postpone Period");
                                                              END;

                                                   CaptionML=ENU=Invoice Interval }
    { 1290;   ;Invoiced Until      ;Date          ;CaptionML=ENU=Invoiced Until }
    { 1300;   ;Last Invoiced Until ;Date          ;CaptionML=ENU=Invoiced Until;
                                                   Editable=No }
    { 1310;   ;Control Period Interval;DateFormula;OnValidate=BEGIN
                                                                CreateControlPeriod;
                                                              END;

                                                   CaptionML=ENU=Control Period Interval }
    { 1400;   ;Use Bill-to as Sell-to (CP);Boolean;CaptionML=ENU=Use Bill-to Customer as Sell-to Customer on Sales Invoice (Cost Plus) }
    { 1410;   ;Contract Group Description;Text50  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Contract Group".Description WHERE (Code=FIELD(Contract Group)));
                                                   CaptionML=ENU=Contract Group Description;
                                                   Editable=No }
    { 1420;   ;Contract Template Code;Code20      ;CaptionML=ENU=Contract Template Code }
    { 1430;   ;Publish on Service Portal;Boolean  ;CaptionML=ENU=Publish on Service Portal }
    { 1440;   ;Invoicing via Collective List;Boolean;
                                                   OnValidate=BEGIN
                                                                IF "Invoicing via Collective List" THEN BEGIN
                                                                  IF "Invoice Type" = "Invoice Type"::Dynamic THEN
                                                                    TESTFIELD("Invoice Interval");
                                                                  CLEAR("Invoice Postpone Period");
                                                                  IF "Bill-to Customer No. (CP)" <> "Bill-to Customer No. (Contr.)" THEN
                                                                    ERROR(Text127, FIELDCAPTION("Bill-to Customer No. (CP)"), FIELDCAPTION("Bill-to Customer No. (Contr.)"));
                                                                END;
                                                                IF xRec."Invoicing via Collective List" <> "Invoicing via Collective List" THEN
                                                                  MessageIfInstallmentsExists;
                                                              END;

                                                   CaptionML=ENU=Invoicing via Collective List }
    { 1450;   ;Service Index Method;Code10        ;TableRelation="Service Index Method";
                                                   CaptionML=ENU=Index Method }
    { 1460;   ;Plan Method         ;Option        ;CaptionML=ENU=Plan Method;
                                                   OptionCaptionML=ENU=Theoretical Maintenance Date,Last Execution Date;
                                                   OptionString=Theoretical Maintenance Date,Last Execution Date }
    { 1470;   ;Contract Type       ;Code10        ;TableRelation="Contract Type";
                                                   CaptionML=ENU=Contract Type }
    { 1480;   ;Invoice Postpone Period;DateFormula;OnValidate=VAR
                                                                ContractInstallment@1100528600 : Record 11071707;
                                                              BEGIN
                                                                IF FORMAT("Invoice Postpone Period") <> '' THEN BEGIN
                                                                  TESTFIELD("Invoicing via Collective List", FALSE);
                                                                  CASE "Invoice Type" OF
                                                                    "Invoice Type"::Dynamic:
                                                                      BEGIN
                                                                        TESTFIELD("Invoice Interval");
                                                                        IF (TODAY > CALCDATE("Invoice Postpone Period", TODAY)) OR
                                                                           (CALCDATE("Invoice Interval", TODAY) <= CALCDATE("Invoice Postpone Period", TODAY))
                                                                        THEN
                                                                          FIELDERROR("Invoice Postpone Period", STRSUBSTNO(Text112, FIELDCAPTION("Invoice Period")));
                                                                      END;
                                                                    "Invoice Type"::Installments:
                                                                      BEGIN
                                                                        ContractInstallment.SETRANGE("Service Contract No.", "No.");
                                                                        IF ContractInstallment.FINDSET THEN
                                                                          REPEAT
                                                                            IF (CALCDATE(ContractInstallment."Invoice Interval", TODAY) <= CALCDATE("Invoice Postpone Period", TODAY)) THEN
                                                                              FIELDERROR("Invoice Postpone Period", STRSUBSTNO(Text112, ContractInstallment.FIELDCAPTION("Invoice Interval")));
                                                                          UNTIL ContractInstallment.NEXT = 0;
                                                                      END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Invoice Postpone Period }
    { 1490;   ;Contract Form       ;Option        ;OnValidate=VAR
                                                                ContractObjectMaintenance@1100528600 : Record 11071692;
                                                                ContractInstallment@1100528601 : Record 11071707;
                                                              BEGIN
                                                                IF "Contract Form" = "Contract Form"::"Framework Contract" THEN BEGIN
                                                                  ContractObjectMaintenance.SETRANGE("Service Contract No.", "No.");
                                                                  IF NOT ContractObjectMaintenance.ISEMPTY THEN
                                                                    ERROR(Text113, ContractObjectMaintenance.TABLECAPTION, FIELDCAPTION("Contract Form"));
                                                                  ContractInstallment.SETRANGE("Service Contract No.", "No.");
                                                                  IF NOT ContractInstallment.ISEMPTY THEN
                                                                    ERROR(Text113, ContractInstallment.TABLECAPTION, FIELDCAPTION("Contract Form"));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Contract Form;
                                                   OptionCaptionML=ENU=" ,Framework Contract,Rental Contract";
                                                   OptionString=[ ,Framework Contract,Rental Contract] }
    { 1500;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   CaptionML=ENU=Payment Terms Code }
    { 1510;   ;Invoice Period (Coll. List);DateFormula;
                                                   CaptionML=ENU=Invoice Period (Collective List) }
    { 1520;   ;Min. Inv. Amount (Coll. List);Decimal;
                                                   CaptionML=ENU=Minimal Invoice Amount (Collective List) }
    { 1530;   ;Use Contract Clusters;Boolean      ;OnValidate=VAR
                                                                ServiceCluster@1100528600 : Record 11071742;
                                                                ContractObjectMaintenance@1100528601 : Record 11071692;
                                                                ServiceContractArrangement@1100528602 : Record 11071705;
                                                                MaintenanceProposalLine@1100528603 : Record 11071696;
                                                              BEGIN
                                                                IF xRec."Use Contract Clusters" <> "Use Contract Clusters" THEN BEGIN
                                                                  IF NOT "Use Contract Clusters" THEN BEGIN
                                                                    ServiceCluster.SETRANGE("Service Contract No.", "No.");
                                                                    IF NOT ServiceCluster.ISEMPTY THEN
                                                                      ERROR(Text114);
                                                                  END;
                                                                  ContractObjectMaintenance.SETRANGE("Service Contract No.", "No.");
                                                                  ContractObjectMaintenance.SETFILTER(Cluster, '<>%1', '');
                                                                  IF NOT ContractObjectMaintenance.ISEMPTY THEN
                                                                    ERROR(Text115, ContractObjectMaintenance.TABLECAPTION);
                                                                  ServiceContractArrangement.SETRANGE("Service Contract No.", "No.");
                                                                  ServiceContractArrangement.SETFILTER(Cluster, '<>%1', '');
                                                                  IF NOT ServiceContractArrangement.ISEMPTY THEN
                                                                    ERROR(Text115, ServiceContractArrangement.TABLECAPTION);
                                                                  MaintenanceProposalLine.SETRANGE("Service Contract No.", "No.");
                                                                  MaintenanceProposalLine.SETFILTER(Cluster, '<>%1', '');
                                                                  IF NOT MaintenanceProposalLine.ISEMPTY THEN
                                                                    ERROR(Text115, MaintenanceProposalLine.TABLECAPTION);
                                                                  Cluster := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Use Contract Clusters }
    { 1540;   ;Cluster             ;Code10        ;TableRelation="Service Cluster".Code;
                                                   OnValidate=VAR
                                                                ContractObjectMaintenance@1100528600 : Record 11071692;
                                                              BEGIN
                                                                ValidateServiceCluster;

                                                                ContractObjectMaintenance.SETRANGE("Service Contract No.", "No.");
                                                                IF NOT ContractObjectMaintenance.ISEMPTY THEN
                                                                  MESSAGE(Text116, FIELDCAPTION(Cluster));
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupServiceCluster;
                                                            END;

                                                   CaptionML=ENU=Cluster }
    { 1550;   ;Installment Type    ;Option        ;OnValidate=BEGIN
                                                                CASE "Installment Type" OF
                                                                  "Installment Type"::" ":
                                                                    TESTFIELD("Invoice Type", "Invoice Type"::Dynamic);
                                                                  "Installment Type"::Object:
                                                                    "Installments based on Progress" := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Installment Type;
                                                   OptionCaptionML=ENU=" ,Contract,Object,Consumption";
                                                   OptionString=[ ,Contract,Object,Consumption] }
    { 1560;   ;No. of Control Messages;Integer    ;FieldClass=FlowField;
                                                   CalcFormula=Count("Service Contract Control Msg." WHERE (Service Contract No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Control Messages;
                                                   Editable=No }
    { 1570;   ;Control Build Date  ;Date          ;CaptionML=ENU=Control Build Date;
                                                   Editable=No }
    { 1580;   ;Control Build Time  ;Time          ;CaptionML=ENU=Control Build Time;
                                                   Editable=No }
    { 1590;   ;Dynamic Invoice Type;Option        ;OnValidate=VAR
                                                                ServiceSalesDiscount@1100528600 : Record 11072237;
                                                              BEGIN
                                                                IF "Dynamic Invoice Type" <> "Dynamic Invoice Type"::" " THEN
                                                                  TESTFIELD("Invoice Type", "Invoice Type"::Dynamic)
                                                                ELSE
                                                                  FIELDERROR("Dynamic Invoice Type");
                                                                IF "Dynamic Invoice Type" = "Dynamic Invoice Type"::"Invoice Interval" THEN
                                                                  TESTFIELD("Invoice Interval")
                                                                ELSE BEGIN
                                                                  ServiceSalesDiscount.SETRANGE(Type, ServiceSalesDiscount.Type::Contract);
                                                                  ServiceSalesDiscount.SETRANGE(Code, "No.");
                                                                  ServiceSalesDiscount.SETFILTER(Amount, '<>%1', 0);
                                                                  IF NOT ServiceSalesDiscount.ISEMPTY THEN
                                                                    ERROR(Text126);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Dynamic Invoice Type;
                                                   OptionCaptionML=ENU=" ,Days,Invoice Interval";
                                                   OptionString=[ ,Days,Invoice Interval] }
    { 1600;   ;OLD Always Allow Close Orders;Boolean;
                                                   OnValidate=BEGIN
                                                                CheckServiceAuthorization(FIELDCAPTION("OLD Always Allow Close Orders"));
                                                              END;

                                                   CaptionML=ENU=OLD Always Allow Close Orders }
    { 1601;   ;Always Allow Cls Ord. (Maint.);Boolean;
                                                   OnValidate=BEGIN
                                                                CheckServiceAuthorization(FIELDCAPTION("Always Allow Cls Ord. (Maint.)"));
                                                              END;

                                                   CaptionML=ENU=Always Allow Close Orders (Maint.) }
    { 1602;   ;Always Allow Cls Ord. (Call);Boolean;
                                                   OnValidate=BEGIN
                                                                CheckServiceAuthorization(FIELDCAPTION("Always Allow Cls Ord. (Call)"));
                                                              END;

                                                   CaptionML=ENU=Always Allow Close Orders (Call) }
    { 1603;   ;Always Allow Cls Ord. (Ext.);Boolean;
                                                   OnValidate=BEGIN
                                                                CheckServiceAuthorization(FIELDCAPTION("Always Allow Cls Ord. (Ext.)"));
                                                              END;

                                                   CaptionML=ENU=Always Allow Close Orders (Ext.) }
    { 1610;   ;Progress % Calculation (Precl);Option;
                                                   OnValidate=BEGIN
                                                                CheckServiceAuthorization(FIELDCAPTION("Progress % Calculation (Precl)"));
                                                                IF "Progress % Calculation (Precl)" = "Progress % Calculation (Precl)"::"Allowed Hours" THEN
                                                                  TESTFIELD("Budget Based on", "Budget Based on"::"Maintenance Scheme");
                                                              END;

                                                   CaptionML=ENU=Progress % Calculation (Preclosure Result);
                                                   OptionCaptionML=ENU=Allowed Hours,,,Actual Cost,Elapsed Time;
                                                   OptionString=Allowed Hours,,,Actual Cost,Elapsed Time }
    { 1620;   ;Payment Method Code (Con.Inv.);Code10;
                                                   TableRelation="Payment Method";
                                                   CaptionML=ENU=Payment Method Code (Contract Invoicing) }
    { 1630;   ;Travel Cost Code    ;Code10        ;TableRelation="Travel Cost Code";
                                                   CaptionML=ENU=Travel Cost Code }
    { 1640;   ;Budget Based on     ;Option        ;OnValidate=VAR
                                                                ServiceCategory@1100528600 : Record 11071985;
                                                                SCBudgetVersion@1100528601 : Record 11071928;
                                                                SCBudgetRelease@1100528602 : Record 11071699;
                                                              BEGIN
                                                                IF xRec."Budget Based on" <> "Budget Based on" THEN BEGIN
                                                                  CASE "Budget Based on" OF
                                                                    "Budget Based on"::"Maintenance Scheme":
                                                                      BEGIN
                                                                        ServiceCategory.SETRANGE("Service Contract No.", "No.");
                                                                        IF NOT ServiceCategory.ISEMPTY THEN
                                                                          FIELDERROR("Budget Based on", STRSUBSTNO(Text120, ServiceCategory.TABLECAPTION));
                                                                        TESTFIELD("Service Category (Calls)", '');
                                                                        TESTFIELD("Service Category (Extension)", '');
                                                                      END;
                                                                    "Budget Based on"::Contract:
                                                                      BEGIN
                                                                        "Progress % Calculation (Precl)" := "Progress % Calculation (Precl)"::"Actual Cost";
                                                                        SCBudgetVersion.SETRANGE("Service Contract No.", "No.");
                                                                        IF NOT SCBudgetVersion.ISEMPTY THEN
                                                                          FIELDERROR("Budget Based on", STRSUBSTNO(Text120, SCBudgetVersion.TABLECAPTION));

                                                                        SCBudgetRelease.SETRANGE(Type, SCBudgetRelease.Type::Contract);
                                                                        SCBudgetRelease.SETRANGE(Code, "No.");
                                                                        IF NOT SCBudgetRelease.ISEMPTY THEN
                                                                          FIELDERROR("Budget Based on", STRSUBSTNO(Text120, SCBudgetRelease.TABLECAPTION));
                                                                      END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Budget Based on;
                                                   OptionCaptionML=ENU=Maintenance Scheme,Contract;
                                                   OptionString=Maintenance Scheme,Contract }
    { 1650;   ;Service Category (Calls);Code10    ;TableRelation="Service Category".Code WHERE (Service Contract No.=FIELD(No.));
                                                   CaptionML=ENU=Service Category (Calls) }
    { 1660;   ;Service Category (Extension);Code10;TableRelation="Service Category".Code WHERE (Service Contract No.=FIELD(No.));
                                                   CaptionML=ENU=Service Category (Extension) }
    { 1670;   ;No. of Batch Logs   ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Inv. Proposal Batch Message" WHERE (Invoice Proposal Type=CONST(Service Contract),
                                                                                                          Source Code=FIELD(No.),
                                                                                                          Batch Finished=CONST(No)));
                                                   CaptionML=ENU=No. of Batch Logs;
                                                   Editable=No }
    { 1680;   ;Compress Dyn. Inv. Prop. Lines;Boolean;
                                                   CaptionML=ENU=Compress Dyn. Inv. Prop. Lines }
    { 1690;   ;Create Adv./Purch. Subc. Call;Option;
                                                   CaptionML=ENU=Create Advice/Purchase Order with Subcontracting (Call);
                                                   OptionCaptionML=ENU=User Setup,Yes,No;
                                                   OptionString=Setup,Yes,No }
    { 1691;   ;Create Adv./Purch. Subc. Con.;Option;
                                                   CaptionML=ENU=Create Advice/Purchase Order with Subcontracting (Contract);
                                                   OptionCaptionML=ENU=User Setup,Yes,No;
                                                   OptionString=Setup,Yes,No }
    { 1692;   ;Create Adv./Purch. Subc. Dir.;Option;
                                                   CaptionML=ENU=Create Advice/Purchase Order with Subcontracting (Direct);
                                                   OptionCaptionML=ENU=User Setup,Yes,No;
                                                   OptionString=Setup,Yes,No }
    { 1700;   ;Last Index Date     ;Date          ;CaptionML=ENU=Last Index Date }
    { 1710;   ;Bill-to Customer No. (Contr.);Code20;
                                                   TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                IF "Bill-to Customer No. (Contr.)" <> xRec."Bill-to Customer No. (Contr.)" THEN BEGIN
                                                                  IF "Bill-to Customer No. (Contr.)" <> '' THEN BEGIN
                                                                    CustRec.GET("Bill-to Customer No. (Contr.)");
                                                                    CustRec.CheckCustomerStatus("Bill-to Customer No. (Contr.)");
                                                                  END;
                                                                  IF "Invoicing via Collective List" THEN
                                                                    TESTFIELD("Bill-to Customer No. (CP)", "Bill-to Customer No. (Contr.)");
                                                                END;

                                                                IF "Customer No." <> '' THEN BEGIN
                                                                  CustRec.GET("Customer No.");
                                                                  IF CustRec."Bill-to Customer No." <> '' THEN
                                                                    IF "Bill-to Customer No. (Contr.)" = '' THEN
                                                                      "Bill-to Customer No. (Contr.)" := CustRec."Bill-to Customer No.";
                                                                END;
                                                                IF "Bill-to Customer No. (Contr.)" = '' THEN
                                                                  "Bill-to Customer No. (Contr.)" := "Customer No.";
                                                                IF CustRec.GET("Bill-to Customer No. (Contr.)") THEN BEGIN
                                                                  GetDefaultContractManager;
                                                                  GetDefaultInvoiceText;
                                                                  IF "Contract Form" <> "Contract Form"::"Rental Contract" THEN BEGIN
                                                                    IF CustRec."VAT Prod. Posting Group" <> '' THEN
                                                                      "VAT Prod. Posting Group" := CustRec."VAT Prod. Posting Group";
                                                                    CheckVATReverse(FALSE,FALSE);
                                                                  END;
                                                                END;

                                                                CheckInvoiceAddress;
                                                              END;

                                                   CaptionML=ENU=Bill-to Customer No. (Contract) }
    { 1720;   ;Bill-to Name (Contract);Text50     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD("Bill-to Customer No. (Contr.)")));
                                                   CaptionML=ENU=Bill-to Name (Contract);
                                                   Editable=No }
    { 1730;   ;Bill-to Name 2 (Contract);Text50   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Name 2" WHERE (No.=FIELD("Bill-to Customer No. (Contr.)")));
                                                   CaptionML=ENU=Bill-to Name 2 (Contract);
                                                   Editable=No }
    { 1740;   ;Bill-to Address (Contract);Text50  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Address WHERE (No.=FIELD("Bill-to Customer No. (Contr.)")));
                                                   CaptionML=ENU=Bill-to Address (Contract);
                                                   Editable=No }
    { 1750;   ;Bill-to Address 2 (Contract);Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Address 2" WHERE (No.=FIELD("Bill-to Customer No. (Contr.)")));
                                                   CaptionML=ENU=Bill-to Address 2 (Contract);
                                                   Editable=No }
    { 1760;   ;Bill-to Post Code (Contract);Code20;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Post Code" WHERE (No.=FIELD("Bill-to Customer No. (Contr.)")));
                                                   CaptionML=ENU=Bill-to Post Code (Contract);
                                                   Editable=No }
    { 1770;   ;Bill-to City (Contract);Text30     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.City WHERE (No.=FIELD("Bill-to Customer No. (Contr.)")));
                                                   CaptionML=ENU=Bill-to City (Contract);
                                                   Editable=No }
    { 1780;   ;Alt. Bill-to Address (Contr.);Code10;
                                                   TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD("Bill-to Customer No. (Contr.)"),
                                                                                               Billing Address=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                CheckInvoiceAddress;
                                                                CALCFIELDS("Derived from Cust. No. (Contr)");
                                                              END;

                                                   CaptionML=ENU=Alternative Bill-to Address (Contract) }
    { 1790;   ;Derived from Cust. No. (Contr);Code20;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Ship-to Address"."Derived from Customer No." WHERE (Customer No.=FIELD("Bill-to Customer No. (Contr.)"),
                                                                                                                           Code=FIELD("Alt. Bill-to Address (Contr.)")));
                                                   CaptionML=ENU=Derived from Customer No. (Contract);
                                                   Editable=No }
    { 1800;   ;Use Bill-to as Sell-to (Contr);Boolean;
                                                   CaptionML=ENU=Use Bill-to Customer as Sell-to Customer on Sales Invoice (Contract) }
    { 1810;   ;Price Book Type     ;Option        ;OnValidate=VAR
                                                                ServiceUnitPriceManagement@1100528600 : Codeunit 11012846;
                                                              BEGIN
                                                                CASE "Price Book Type" OF
                                                                  "Price Book Type"::None:
                                                                    VALIDATE("Price Book Code", '');
                                                                  "Price Book Type"::Customer:
                                                                    BEGIN
                                                                      "Price Book Code" := "No.";
                                                                      "Price Book Index Date" :=
                                                                        ServiceUnitPriceManagement.GetLatestPriceBookIndexDate("Price Book Type", "Price Book Code");
                                                                      IF "Price Book Index Date" = 0D THEN
                                                                        "Price Book Code" := '';
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Price Book Type;
                                                   OptionCaptionML=ENU=None,Internal,Customer;
                                                   OptionString=None,Internal,Customer }
    { 1820;   ;Price Book Code     ;Code20        ;TableRelation="Service Price Book".Code WHERE (Type=FIELD(Price Book Type));
                                                   OnValidate=BEGIN
                                                                IF ("Price Book Code" = '') OR ("Price Book Code" <> xRec."Price Book Code") THEN BEGIN
                                                                  VALIDATE("Price Book Index Date", 0D);
                                                                  VALIDATE("Unit Price Set", '');
                                                                  VALIDATE("Unit Price Status", "Unit Price Status"::" ");
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ServicePriceBook@1100528600 : Record 11071768;
                                                              ServicePriceBookList@1100528601 : Page 11125269;
                                                            BEGIN
                                                              ServicePriceBook.SETRANGE(Type, "Price Book Type");
                                                              ServicePriceBookList.LOOKUPMODE(TRUE);
                                                              ServicePriceBookList.SETTABLEVIEW(ServicePriceBook);
                                                              IF ServicePriceBookList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                ServicePriceBookList.GETRECORD(ServicePriceBook);
                                                                "Price Book Code" := ServicePriceBook.Code;
                                                                "Price Book Index Date" := ServicePriceBook."Index Date";
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Price Book Code }
    { 1830;   ;Price Book Index Date;Date         ;OnValidate=BEGIN
                                                                IF "Price Book Index Date" <> 0D THEN
                                                                  IF "Price Book Type" = "Price Book Type"::None THEN
                                                                    FIELDERROR("Price Book Index Date");
                                                              END;

                                                   CaptionML=ENU=Price Book Index Date }
    { 1840;   ;Unit Price Set      ;Code20        ;TableRelation="Service Unit Price Set".Code WHERE (Price Book Type=FIELD(Price Book Type),
                                                                                                      Price Book Code=FIELD(Price Book Code),
                                                                                                      Price Book Index Date=FIELD(Price Book Index Date));
                                                   CaptionML=ENU=Unit Price Set }
    { 1850;   ;Unit Price Status   ;Option        ;OnValidate=BEGIN
                                                                IF "Unit Price Status" <> "Unit Price Status"::" " THEN
                                                                  IF "Price Book Type" = "Price Book Type"::None THEN
                                                                    FIELDERROR("Unit Price Status");
                                                              END;

                                                   CaptionML=ENU=Unit Price Status;
                                                   OptionCaptionML=ENU=" ,Pre-Recording,Recording,Production Recording";
                                                   OptionString=[ ,Pre-Recording,Recording,Production Recording] }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Customer No.                             }
    {    ;Global Dimension 1 Code                  }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ServSetup@1210190000 : Record 11012800;
      Text001@1100525002 : TextConst 'ENU=Copy Sales Surcharges from Customer ?';
      Text002@1100485019 : TextConst 'ENU=Contract Status is Expired';
      Text003@1210190007 : TextConst 'ENU=Change Cntract Status to %1 ?';
      ServTypeRec@1210190009 : Record 11012814;
      ContrDiscRec@1210190015 : Record 11012828;
      ServEntryRec@1210190021 : Record 11012819;
      ServActRec@1210190018 : Record 5080;
      PrefEmplRec@1100485001 : Record 11012843;
      TimeTableRec@1100485003 : Record 11012867;
      ContrDepRec@1100485004 : Record 11012809;
      ContrHourRec@1100485006 : Record 11012815;
      CustRec@1210190002 : Record 18;
      CustSurchRec@1100485018 : Record 11020367;
      NoSeriesMgt@1210190001 : Codeunit 396;
      Text003a@1210190025 : TextConst 'ENU=Block Contract ?';
      Text004@1210190011 : TextConst 'ENU=must occur before %1';
      Text004a@1100485020 : TextConst 'ENU=%1 should occur before %2';
      Text004b@1210190013 : TextConst 'ENU=%1 not in period between %2 and %3.';
      Text006@1210190019 : TextConst 'ENU=Do you want to change %1?';
      Text007@1210190020 : TextConst 'ENU=Service Entry present.';
      MoveEntries@1100485007 : Codeunit 361;
      DimMgt@1100525004 : Codeunit 408;
      RefLimitRec@1100485002 : Record 11012856;
      MailRec@1210190003 : Record 11071711;
      CostCompRec@1100485009 : Record 11012859;
      Text011@1100525003 : TextConst 'ENU=Start Date and/or Ending Date of the contract has to be filled';
      DPA_Management@1100000999 : Codeunit 11012783;
      Text999a@1210190012 : TextConst 'ENU=Change Data';
      Text999b@1210190008 : TextConst 'ENU=Old';
      Text999c@1210190006 : TextConst 'ENU=New';
      Text100@1100528600 : TextConst 'ENU=Contract Installments present.';
      Text104@1100528602 : TextConst 'ENU=There are unfinished Maintenance Proposal Lines present after Ending Date';
      Text105@1100528605 : TextConst 'ENU=There are unfinished Service Orders present after Ending Date';
      Text106@1100528606 : TextConst 'ENU=There are Invoice Proposals for this Contract present.';
      Text107@1100528607 : TextConst 'ENU=may not be %1';
      Text108@1100528608 : TextConst 'ENU=Do you want to create a Service Contact using a Service Contract Template?';
      Text109@1100528609 : TextConst 'ENU=Service-Contract Control Periods already exist, delete first?';
      Text110@1100528800 : TextConst 'ENU=Do you want to change the Currency Code ?';
      Text111@1100409000 : TextConst 'ENU=Surcharges already exist, overwrite?';
      Text112@1100528610 : TextConst 'ENU=must be positive and within %1';
      Text113@1100528611 : TextConst 'ENU=%1 lines exist, changing %2 not allowed';
      Text114@1100525005 : TextConst 'ENU=Contract contains Clusters';
      Text115@1100525001 : TextConst 'ENU=Clusters used in %1';
      Text116@1100525000 : TextConst 'ENU=You have changed %1 on the service contract header, but it has not been changed on the existing maintenance lines.';
      Text117@1100525007 : TextConst 'ENU=Service Object %1 is not part of Service Contract %2';
      Text118@1100525006 : TextConst 'ENU=Service Object %1 is part of Service Contract %2 but is not active';
      Text119@1100528601 : TextConst 'ENU=%1 can not be changed by user %2, because cost and/or revenues are registrated.';
      Text120@1100528603 : TextConst 'ENU=%1 lines exist';
      Text121@1100528604 : TextConst 'ENU=There are open WIP Service Entries present. Use ''%1'' and Close Service Orders to Close.';
      Text122@1100528613 : TextConst 'ENU=Status of Service Call %1 must be Closed';
      Text123@1100528612 : TextConst 'ENU=Status of Service Order %1 must be Finished. Use ''%2'' to Close.';
      Text124@1100528614 : TextConst 'ENU=Warnings exist, continue?';
      Text125@1100525008 : TextConst 'ENU=You must update the existing installments manually.';
      Text126@1100528615 : TextConst 'ENU=Service Sales Discount Lines exists with amounts which is not allowed with Dynamisch Invoicing by days.';
      Text127@1100528616 : TextConst 'ENU=%1 must be equal to %2';

    PROCEDURE AssistEdit@2(OldServContr@11012000 : Record 11012812) : Boolean;
    VAR
      ServContr@1100525000 : Record 11012812;
    BEGIN
      WITH ServContr DO BEGIN
        ServContr := Rec;
        ServSetup.GET;
        ServSetup.TESTFIELD("Service Contract Nos.");
        IF NoSeriesMgt.SelectSeries(ServSetup."Service Contract Nos.",OldServContr."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          "Service Type" := DetermineServiceTypeSeries(ServSetup."Service Contract Nos.");
          Rec := ServContr;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20];SaveDefaultDim@1210190000 : Boolean);
    VAR
      DimMgt@1100525000 : Codeunit 408;
      DimValRec@1100525001 : Record 349;
    BEGIN
      //db, 19-08-09: M15896
      IF ShortcutDimCode = '' THEN EXIT;
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.GetDimValueRec(FieldNumber, ShortcutDimCode, DimValRec, TRUE,'');
      IF NOT DimMgt.CheckDimValue(DimValRec."Dimension Code",ShortcutDimCode) THEN
        ERROR(DimMgt.GetDimErr);
      IF SaveDefaultDim THEN  //db, 14-09-11: M28816
        DimMgt.SaveDefaultDim(DATABASE::"Service-Contract", "No.", FieldNumber, ShortcutDimCode); //mg, 17-05-11: M27041
    END;

    PROCEDURE DetermineServiceTypeSeries@4(iContractNos@1100526200 : Code[10]) : Code[20];
    VAR
      SeriesTypeRec@11012000 : Record 308;
      SeriesSeqRec@11012001 : Record 309;
      SeriesRelationRec@11012002 : Record 310;
    BEGIN
      ServSetup.GET;
      IF NOT SeriesTypeRec.GET(iContractNos) THEN EXIT('');   //db, 12-10-10

      // search No. Series derived from main series as set in service setup
      SeriesRelationRec.SETRANGE(Code, iContractNos);
      IF SeriesRelationRec.FINDSET THEN BEGIN
        REPEAT
          SeriesSeqRec.SETRANGE("Series Code", SeriesRelationRec."Series Code");
          SeriesSeqRec.SETRANGE("Last No. Used", "No.");
          IF SeriesSeqRec.FINDFIRST THEN BEGIN
            SeriesTypeRec.GET(SeriesRelationRec."Series Code");
            IF ServTypeRec.GET(SeriesTypeRec."Service Type") THEN BEGIN
              VALIDATE("Global Dimension 1 Code", ServTypeRec."Department Code");  //db, 14-09-11: M28816
              "Service Type" := SeriesTypeRec."Service Type";
            END;
            IF ServTypeRec.GET(SeriesTypeRec."Service Type (Other)") THEN BEGIN
              "Department Code (Other)" := ServTypeRec."Department Code";
              "Service Type (Other)" := SeriesTypeRec."Service Type (Other)";
            END;
            CheckAdditonalCostSetup;
            EXIT(SeriesTypeRec."Service Type");
          END;
        UNTIL SeriesRelationRec.NEXT = 0;
      END;

      // Search series defined in service setup
      SeriesSeqRec.SETRANGE("Series Code", iContractNos);
      SeriesSeqRec.SETRANGE("Last No. Used", "No.");
      IF SeriesSeqRec.FINDFIRST THEN BEGIN
        SeriesTypeRec.GET(iContractNos);
        IF ServTypeRec.GET(SeriesTypeRec."Service Type") THEN BEGIN
          VALIDATE("Global Dimension 1 Code", ServTypeRec."Department Code");  //db, 14-09-11: M28816
          "Service Type" := SeriesTypeRec."Service Type";
        END;
        IF ServTypeRec.GET(SeriesTypeRec."Service Type (Other)") THEN BEGIN
          "Department Code (Other)" := ServTypeRec."Department Code";
          "Service Type (Other)" := SeriesTypeRec."Service Type (Other)";
        END;
        CheckAdditonalCostSetup;
        EXIT(SeriesTypeRec."Service Type");
      END;

      // If nothing found, return initial value
      EXIT('');
    END;

    PROCEDURE DetServiceTypeSeriesSimple@1100485010() : Code[20];
    VAR
      SeriesTypeRec@11012000 : Record 308;
    BEGIN
      ServSetup.GET;
      IF NOT SeriesTypeRec.GET("No. Series") THEN EXIT('');
      IF ServTypeRec.GET(SeriesTypeRec."Service Type") THEN BEGIN
        VALIDATE("Global Dimension 1 Code", ServTypeRec."Department Code");  //db, 14-09-11: M28816
        "Service Type" := SeriesTypeRec."Service Type";
      END;
      IF ServTypeRec.GET(SeriesTypeRec."Service Type (Other)") THEN BEGIN
        "Department Code (Other)" := ServTypeRec."Department Code";
        "Service Type (Other)" := SeriesTypeRec."Service Type (Other)";
      END;
      CheckAdditonalCostSetup;

      EXIT(SeriesTypeRec."Service Type");
    END;

    PROCEDURE CheckContractDiscount@1210190000(ServPackNew@1210190000 : Code[10];ServPackOld@1210190003 : Code[10];CalledBy@1100525000 : Integer);
    VAR
      ContrDiscRec1@1210190001 : Record 11012828;
      ContrDiscRec2@1210190002 : Record 11012828;
    BEGIN
      ContrDiscRec2.SETFILTER("Service Contract No.", '%1', '');
      ContrDiscRec2.SETRANGE("Service Package", ServPackNew);
      IF ContrDiscRec2.FINDSET THEN BEGIN
        REPEAT
          ContrDiscRec1.COPY(ContrDiscRec2);
          ContrDiscRec1."Service Contract No." := "No.";
          ContrDiscRec1."Starting Date Discount" := "Starting Date";
          IF ContrDiscRec1.INSERT THEN;  //db, 31-12-10: M24761
        UNTIL ContrDiscRec2.NEXT = 0;
      END;
    END;

    PROCEDURE CheckStatus@1210190001(lvStatus@1210190000 : Integer);
    BEGIN
      IF Status < lvStatus THEN BEGIN
        IF (lvStatus = 1) OR (lvStatus = 2) THEN BEGIN  //1=offered, 2=order
          Status := lvStatus;
          IF CONFIRM(Text003, FALSE, Status) THEN
            VALIDATE(Status)
          ELSE
            Status := xRec.Status;
        END;
        IF lvStatus = 4 THEN BEGIN  //4=expired
          IF Blocked = FALSE THEN
            IF CONFIRM(Text003a, FALSE) THEN
              Blocked := TRUE;
        END;
      END;
    END;

    PROCEDURE CheckInvoiceAddress@1210190002();
    VAR
      AdrsRec@1210190000 : Record 222;
    BEGIN
      IF AdrsRec.GET("Bill-to Customer No. (CP)", "Alt. Bill-to Address (CP)") THEN BEGIN
        "Bill-to Name (Cost Plus)" := AdrsRec.Name;
        "Bill-to Name 2 (Cost Plus)" := AdrsRec."Name 2";
        "Bill-to Address (Cost Plus)" := AdrsRec.Address;
        "Bill-to Address 2 (Cost Plus)" := AdrsRec."Address 2";
        "Bill-to Post Code (Cost Plus)" := AdrsRec."Post Code";
        "Bill-to City (Cost Plus)" := AdrsRec.City;
      END ELSE BEGIN
        CALCFIELDS("Bill-to Name (Cost Plus)","Bill-to Name 2 (Cost Plus)","Bill-to Address (Cost Plus)","Bill-to Address 2 (Cost Plus)","Bill-to Post Code (Cost Plus)","Bill-to City (Cost Plus)");
      END;

      IF AdrsRec.GET("Bill-to Customer No. (Contr.)", "Alt. Bill-to Address (Contr.)") THEN BEGIN
        "Bill-to Name (Contract)" := AdrsRec.Name;
        "Bill-to Name 2 (Contract)" := AdrsRec."Name 2";
        "Bill-to Address (Contract)" := AdrsRec.Address;
        "Bill-to Address 2 (Contract)" := AdrsRec."Address 2";
        "Bill-to Post Code (Contract)" := AdrsRec."Post Code";
        "Bill-to City (Contract)" := AdrsRec.City;
      END ELSE BEGIN
        CALCFIELDS("Bill-to Name (Contract)", "Bill-to Name 2 (Contract)", "Bill-to Address (Contract)", "Bill-to Address 2 (Contract)",
          "Bill-to Post Code (Contract)", "Bill-to City (Contract)");
      END;
    END;

    PROCEDURE ShowContact@1210190004(lvCust@1210190001 : Code[20]);
    VAR
      CustRec@1210190000 : Record 18;
      ContRec@1210190006 : Record 5050;
      OldRec@1210190004 : Record 11012812;
      Txt1@1210190003 : Text[250];
      Txt2@1210190002 : Text[250];
    BEGIN
      OldRec := Rec;

      CustRec.ShowContactName(lvCust, ContRec);
      IF ContRec.Name <> '' THEN BEGIN
        VALIDATE("Contact Person", ContRec."No.");  //db, 25-05-11
        "Contact Name" := ContRec.Name;
        "Phone No." := ContRec."Phone No. Work";
        "Phone No. 2" := ContRec."Phone No. Work 2";
        IF "Phone No." = '' THEN
          "Phone No." := ContRec."Phone No.";
        IF "Phone No. 2" = '' THEN
          "Phone No. 2" := ContRec."Phone No. 2";
        "Mobile Phone No." := ContRec."Mobile Phone No.";
        "Fax No." := ContRec."Fax No.";
        "E-Mail" := ContRec."E-Mail";

        //M24165 sn
        IF ("No." <> '') THEN BEGIN
          IF ((OldRec."Contact Name" + OldRec."Phone No." + OldRec."Phone No. 2"  +
               OldRec."E-Mail" + OldRec."Mobile Phone No." ) <>
              ("Contact Name" + "Phone No." + "Phone No. 2"  +
               "E-Mail" + "Mobile Phone No." )) AND
             ((OldRec."Contact Name" + OldRec."Phone No." + OldRec."Phone No. 2" +
               OldRec."E-Mail" + OldRec."Mobile Phone No.") <> '') THEN
          BEGIN
            Txt1 := STRSUBSTNO('%1: \%2: \%3 \%4 \%5 \%6 \%7 \\',
              Text999a, Text999b,
              OldRec."Contact Name", OldRec."Phone No.", OldRec."Phone No. 2",
              OldRec."E-Mail", OldRec."Mobile Phone No.");
            Txt2 := STRSUBSTNO('%1: \%2 \%3 \%4 \%5 \%6 \\',
              Text999c,
              "Contact Name", "Phone No.", "Phone No. 2",
              "E-Mail", "Mobile Phone No.");

            IF CONFIRM(Txt1 + Txt2, TRUE) = FALSE THEN BEGIN
              "Phone No." := OldRec."Phone No.";
              "Phone No. 2" := OldRec."Phone No. 2";
              "Mobile Phone No." := OldRec."Mobile Phone No.";
              "Fax No." := OldRec."Fax No.";
              "E-Mail" := OldRec."E-Mail";
            END ELSE BEGIN
              OldRec."Phone No." := "Phone No.";
              OldRec."Phone No. 2" := "Phone No. 2";
              OldRec."Mobile Phone No." := "Mobile Phone No.";
              OldRec."Fax No." := "Fax No.";
              OldRec."E-Mail" := "E-Mail";
            END;
          END;
        END;
        //M24165 en
      END;
    END;

    PROCEDURE GetDefaultSalesSurcharges@1();
    VAR
      lvCustRec@1100485000 : Record 18;
      lvCustSurchRec@1100485002 : Record 11020367;
      lvCustSurchRec2@1100485003 : Record 11020367;
      lvSkipUpdate@1100525000 : Boolean;
    BEGIN
      IF lvCustRec.GET("Bill-to Customer No. (CP)") THEN BEGIN
        IF "Bill-to Customer No. (CP)" <> xRec."Bill-to Customer No. (CP)" THEN BEGIN
          lvSkipUpdate := FALSE;
          IF CurrFieldNo <> 0 THEN BEGIN
            IF NOT CONFIRM(Text001,TRUE) THEN
              lvSkipUpdate := TRUE;
            IF NOT lvSkipUpdate THEN   //db, 22-03-10: M18366
              IF (CurrFieldNo <> 0) AND
                 (xRec."Bill-to Customer No. (CP)" = '') AND
                 (("Surcharge % Labor" <> 0) OR
                  ("Surcharge % Material" <> 0) OR
                  ("Surcharge % Subcontr." <> 0) OR
                  ("Surcharge % Plant" <> 0) OR
                  ("Surcharge % Sundry" <> 0))
              THEN
                lvSkipUpdate := NOT CONFIRM(Text111);
          END;
          IF NOT lvSkipUpdate THEN BEGIN
            "Surcharge % Labor" := lvCustRec."Surcharge % Labor";
            "Surcharge % Material" := lvCustRec."Surcharge % Material";
            "Surcharge % Subcontr." := lvCustRec."Surcharge % Subcontr.";
            "Surcharge % Plant" := lvCustRec."Surcharge % Plant";
            "Surcharge % Sundry" := lvCustRec."Surcharge % Sundry";

            lvCustSurchRec2.SETRANGE("Record Type", lvCustSurchRec2."Record Type"::ServContr);
            lvCustSurchRec2.SETRANGE(Code, "No.");
            lvCustSurchRec2.DELETEALL;

            lvCustSurchRec.SETRANGE("Record Type", lvCustSurchRec."Record Type"::Customer);
            lvCustSurchRec.SETRANGE("Customer No.", "Bill-to Customer No. (CP)");
            IF lvCustSurchRec.FINDSET(FALSE,FALSE) THEN BEGIN
              REPEAT
                lvCustSurchRec2 := lvCustSurchRec;
                lvCustSurchRec2."Record Type" := lvCustSurchRec2."Record Type"::ServContr;
                lvCustSurchRec2."Customer No." := '';
                lvCustSurchRec2.Code := "No.";
                lvCustSurchRec2.INSERT;
              UNTIL lvCustSurchRec.NEXT = 0;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE GetDefaultContractManager@1100525009();
    VAR
      lvSkipUpdate@1100525000 : Boolean;
    BEGIN
      IF "Contract Manager" = '' THEN BEGIN
        "Contract Manager" := CustRec."Salesperson Code";
      END ELSE BEGIN
        IF ("Contract Manager" <> CustRec."Salesperson Code") AND
           (CustRec."Salesperson Code" <> '') THEN BEGIN
          lvSkipUpdate := FALSE;
          IF CurrFieldNo <> 0 THEN
            IF NOT CONFIRM(Text006,FALSE,FIELDCAPTION("Contract Manager")) THEN
              lvSkipUpdate := TRUE;
          IF NOT lvSkipUpdate THEN  //db, 22-03-10: M18366
            "Contract Manager" := CustRec."Salesperson Code";
        END;
      END;
    END;

    PROCEDURE GetDefaultInvoiceText@1100525010();
    VAR
      lvSkipUpdate@1100525000 : Boolean;
    BEGIN
      IF "Invoice Text Installments" = '' THEN BEGIN
        "Invoice Text Installments" := CustRec."Invoice Text Installments";
      END ELSE BEGIN
        IF ("Invoice Text Installments" <> CustRec."Invoice Text Installments") AND
           (CustRec."Invoice Text Installments" <> '') THEN BEGIN
          lvSkipUpdate := FALSE;
          IF CurrFieldNo <> 0 THEN
            IF NOT CONFIRM(Text006,FALSE,FIELDCAPTION("Invoice Text Installments")) THEN
              lvSkipUpdate := TRUE;
          IF NOT lvSkipUpdate THEN  //db, 22-03-10: M18366
            "Invoice Text Installments" := CustRec."Invoice Text Installments";
        END;
      END;
    END;

    PROCEDURE CheckWIP@1100485001();
    VAR
      ServiceLedgerEntry@1100485000 : Record 11012819;
      ServiceOrder@1100485001 : Record 11012823;
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY("Service Contract No.");
      ServiceLedgerEntry.SETRANGE("Service Contract No.", "No.");
      ServiceLedgerEntry.SETRANGE("Service Order No.", '');
      ServiceLedgerEntry.SETRANGE("Service Contract WIP processed", FALSE);
      IF ServiceLedgerEntry.FINDFIRST THEN
        ServiceLedgerEntry.TESTFIELD("Service Contract WIP processed", TRUE);

      ServiceLedgerEntry.RESET;
      ServiceLedgerEntry.SETCURRENTKEY("Service Order No.");
      ServiceOrder.SETCURRENTKEY("Service Contract No.");
      ServiceOrder.SETRANGE("Service Contract No.", "No.");
      IF ServiceOrder.FINDSET THEN BEGIN
        REPEAT
          ServiceLedgerEntry.SETRANGE("Service Order No.", ServiceOrder."No.");
          ServiceLedgerEntry.SETRANGE("Service Order WIP processed", FALSE);
          IF ServiceLedgerEntry.FINDFIRST THEN
            ServiceLedgerEntry.TESTFIELD("Service Order WIP processed", TRUE);
        UNTIL ServiceOrder.NEXT = 0;
      END;
    END;

    PROCEDURE WIPEntriesExists@1100528612() : Boolean;
    VAR
      ServiceLedgerEntry@1100528600 : Record 11012819;
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY("Service Contract No.");
      ServiceLedgerEntry.SETRANGE("Service Contract No.", "No.");
      ServiceLedgerEntry.SETRANGE("Service Order No.", '');
      ServiceLedgerEntry.SETRANGE("Service Contract WIP processed", FALSE);
      IF NOT ServiceLedgerEntry.ISEMPTY THEN
        EXIT(TRUE);
      ServiceLedgerEntry.SETFILTER("Service Order No.", '<>%1', '');
      ServiceLedgerEntry.SETRANGE("Service Order WIP processed", FALSE);
      IF NOT ServiceLedgerEntry.ISEMPTY THEN
        EXIT(TRUE);
    END;

    PROCEDURE CheckVATReverse@1100485003(lvFieldValidate@1100485002 : Boolean;lvFieldEntry@1100525000 : Boolean) : Boolean;
    VAR
      VATPostingSetup@1100485000 : Record 325;
      CustRec@1100485001 : Record 18;
    BEGIN
      IF NOT CustRec.GET("Bill-to Customer No. (Contr.)") THEN
        CustRec.INIT;
      IF NOT VATPostingSetup.GET(CustRec."VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
        VATPostingSetup.INIT;
      IF VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT" THEN BEGIN
        IF lvFieldEntry = TRUE THEN EXIT(TRUE);
        IF lvFieldValidate = FALSE THEN BEGIN
          IF NOT CustRec.GET("Bill-to Customer No. (Contr.)") THEN CustRec.INIT;
          "% Labor" := CustRec."% Labor";
          "% to B Account" := CustRec."% to B Account";
        END;
      END ELSE BEGIN
        IF lvFieldEntry = TRUE THEN EXIT(FALSE);
        IF lvFieldValidate = TRUE THEN BEGIN
          TESTFIELD("% Labor", 0);
          TESTFIELD("% to B Account", 0);
        END ELSE BEGIN
          "% Labor" := 0;
          "% to B Account" := 0;
        END;
      END;
    END;

    PROCEDURE CheckAdditonalCostSetup@1100485006();
    BEGIN
      IF ServSetup."Copy Additional Cost Setup" THEN BEGIN
        "Department Code (Other)" := "Global Dimension 1 Code";
        "Service Type (Other)" := "Service Type";
      END;
    END;

    PROCEDURE UpdateServPackage@1100485007();
    VAR
      lvContrDiscRec@1100485000 : Record 11012828;
    BEGIN
      lvContrDiscRec.SETRANGE("Service Contract No.", "No.");
      IF lvContrDiscRec.FINDSET THEN BEGIN
        REPEAT
          IF (lvContrDiscRec."Starting Date Discount" = 0D) OR
             (lvContrDiscRec."Starting Date Discount" = xRec."Starting Date") THEN BEGIN
            lvContrDiscRec."Starting Date Discount" := "Starting Date";
            lvContrDiscRec.MODIFY;
          END;
        UNTIL lvContrDiscRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckServiceControlYear@1100485012(lvContract@1100485001 : Code[20];lvYear@1100485000 : Integer);
    VAR
      lvServContrRec@1100485002 : Record 11012812;
      lvText000@1100485003 : TextConst 'ENU=Service Control Year %1 not between Start Date (%2) and Ending Date (%3) of Service Contract (%4).';
      lvStartYear@1100485004 : Integer;
      lvEndYear@1100485005 : Integer;
    BEGIN
      IF NOT lvServContrRec.GET(lvContract) THEN EXIT;

      IF lvServContrRec."Starting Date" <> 0D THEN
        lvStartYear := DATE2DMY(lvServContrRec."Starting Date",3);
      IF lvServContrRec."Ending Date" <> 0D THEN
        lvEndYear := DATE2DMY(lvServContrRec."Ending Date",3);
      IF (lvYear < lvStartYear) OR (lvYear > lvEndYear) THEN
        ERROR(lvText000, lvYear, lvServContrRec."Starting Date", lvServContrRec."Ending Date", lvContract);
    END;

    PROCEDURE CheckContractDiscipline@1100485013(lvServContr@1100485001 : Code[20];lvDisc@1100485002 : Code[20];lvTradeSpec@1100485003 : Code[20]);
    VAR
      lvContrDiscRec@1100485000 : Record 11012881;
    BEGIN
      WITH lvContrDiscRec DO BEGIN
        IF lvDisc <> '' THEN BEGIN
          IF NOT GET(lvServContr, lvDisc, '') THEN BEGIN
            INIT;
            "Service Contract No." := lvServContr;
            Discipline := lvDisc;
            INSERT;
          END;
        END;
        IF lvTradeSpec <> '' THEN BEGIN
          IF NOT GET(lvServContr, lvDisc, lvTradeSpec) THEN BEGIN
            INIT;
            "Service Contract No." := lvServContr;
            Discipline := lvDisc;
            "Trade Speciality" := lvTradeSpec;
            INSERT;
          END;
        END;
      END;
    END;

    PROCEDURE DisplayMap@1100525004();
    BEGIN
      CustRec.GET("Customer No.");
      CustRec.DisplayMap;
    END;

    PROCEDURE LookupServicePackage@1100525011(CalledBy@1100525001 : Integer);
    VAR
      ServPackFrm@1100525000 : Page 11012857;
      ServPackRec@1100525002 : Record 11012806;
      ServPackCode@1100525003 : Code[20];
    BEGIN
      //db, 17-03-10: T4627
      xRec := Rec; //mg, 21-06-11: M27287
      CASE CalledBy OF
        FIELDNO("Service Package Call"):
          BEGIN
            ServPackCode := "Service Package Call";
            ServPackRec.SETRANGE("Source Type", ServPackRec."Source Type"::Call);
          END;
        FIELDNO("Service Package Contract"):
          BEGIN
            ServPackCode := "Service Package Contract";
            ServPackRec.SETRANGE("Source Type", ServPackRec."Source Type"::Contract);
          END;
        FIELDNO("Service Package Other"):
          BEGIN
            ServPackCode := "Service Package Other";
            ServPackRec.SETRANGE("Source Type", ServPackRec."Source Type"::Direct);
          END;
        FIELDNO("Service Package Estimate"):
          BEGIN
            ServPackCode := "Service Package Estimate";
            ServPackRec.SETRANGE("Source Type", ServPackRec."Source Type"::Estimate);
          END;
        FIELDNO("Service Package"):
          BEGIN
            ServPackCode := "Service Package";
            ServPackRec.SETRANGE("Source Type", ServPackRec."Source Type"::None);
          END;
      END;
      ServPackFrm.SETTABLEVIEW(ServPackRec);
      IF ServPackRec.GET(ServPackCode) THEN
        ServPackFrm.SETRECORD(ServPackRec);
      ServPackFrm.SetSelection("No.");
      ServPackFrm.LOOKUPMODE(TRUE);
      IF ServPackFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ServPackFrm.GETRECORD(ServPackRec);
        CASE CalledBy OF
           FIELDNO("Service Package Call"): VALIDATE("Service Package Call", ServPackRec.Code);
           FIELDNO("Service Package Contract"): VALIDATE("Service Package Contract", ServPackRec.Code);
           FIELDNO("Service Package Other"): VALIDATE("Service Package Other", ServPackRec.Code);
           FIELDNO("Service Package Estimate"): VALIDATE("Service Package Estimate", ServPackRec.Code);
           FIELDNO("Service Package"): VALIDATE("Service Package", ServPackRec.Code);
        END;
      END;
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Global Dimension 1 Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::"Service-Contract");
      IF Dimension1Code <> '' THEN
        "Global Dimension 1 Code" := Dimension1Code;

      IF "Global Dimension 1 Code" <> '' THEN
        VALIDATE("Global Dimension 1 Code");
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012812) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012812');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Service-Contract", "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    PROCEDURE GetTryOut@1210190005(iAction@1210190000 : Integer) Result : Text[30];
    VAR
      TryOutRelationRec@1210190001 : Record 11012761;
    BEGIN
      //db, 05-05-11
      IF TryOutRelationRec.READPERMISSION THEN
        Result := TryOutRelationRec.GetTryOut('', '', '', "No.", '', '', '', iAction);

      EXIT(Result);
    END;

    PROCEDURE ShowTryOut@1210190003(iAction@1210190000 : Integer);
    VAR
      TryOutRelationRec@1210190001 : Record 11012761;
    BEGIN
      //db, 05-05-11
      TryOutRelationRec.ShowTryOut('', '', '', "No.", '', '', '', iAction);
    END;

    PROCEDURE ShowFeatures@1210190007();
    VAR
      ContFeatureType@1100485000 : Record 11012753;
    BEGIN
      TESTFIELD("No.");
      ContFeatureType."Relation Type" := ContFeatureType."Relation Type"::ServiceContract;
      ContFeatureType.Code := "No.";
      ContFeatureType.SETRANGE("Relation Type", ContFeatureType."Relation Type"::ServiceContract);
      ContFeatureType.SETRANGE(Code, "No.");
      PAGE.RUNMODAL(PAGE::"Contact Feature Type", ContFeatureType);
    END;

    PROCEDURE UseServiceContractTemplate@1100528600();
    VAR
      ServiceContractTemplate@1100528600 : Record 11071754;
    BEGIN
      IF NOT ServiceContractTemplate.ISEMPTY THEN
        IF CONFIRM(Text108, TRUE) THEN
          IF PAGE.RUNMODAL(0, ServiceContractTemplate) = ACTION::LookupOK THEN BEGIN
            "Contract Template Code" := ServiceContractTemplate.Code;
            TRANSFERFIELDS(ServiceContractTemplate);
          END;
    END;

    PROCEDURE CreateControlPeriod@1100528601();
    VAR
      ServiceContractCtrlPeriod@1100528600 : Record 11071746;
    BEGIN
      IF ("Starting Date Control Period" <> 0D) AND (FORMAT("Control Period Interval") <> '') THEN BEGIN
        ServiceContractCtrlPeriod.SETRANGE("Service Contract No.", "No.");
        IF NOT ServiceContractCtrlPeriod.ISEMPTY THEN
          IF CONFIRM(Text109, TRUE) THEN BEGIN
            ServiceContractCtrlPeriod.SETRANGE("Date Finished", 0D);
            ServiceContractCtrlPeriod.DELETEALL(TRUE)
          END ELSE
            EXIT;
        MODIFY;
        ServiceContractCtrlPeriod.UpdateControlPeriodsUntil("No.", TODAY);
      END;
    END;

    PROCEDURE CheckStartDateInvoice@1210190008();
    VAR
      InstallmentRec@1210190001 : Record 11012017;
      NumInst@1210190000 : Integer;
      DateFormulaDF@1210190002 : DateFormula;
      StartDate@1210190003 : Date;
      EndDate@1210190004 : Date;
    BEGIN
      //db, 05-12-11: M31340
      TESTFIELD("Installment Scheme");  //db, 18-01-12: M31878
      InstallmentRec.SETRANGE(Scheme, "Installment Scheme");
      NumInst := InstallmentRec.COUNT;

      CASE NumInst OF
        0 :DateFormulaDF := "Contract Duration";  //db, 18-01-12: M31878
        1 :EVALUATE(DateFormulaDF,'<+12M>');
        2 :EVALUATE(DateFormulaDF,'<+6M>');
        3 :EVALUATE(DateFormulaDF,'<+4M>');
        4 :EVALUATE(DateFormulaDF,'<+3M>');
        6 :EVALUATE(DateFormulaDF,'<+2M>');
        12:EVALUATE(DateFormulaDF,'<+1M>');
        NumInst:EVALUATE(DateFormulaDF,STRSUBSTNO('<+%1D>',ROUND(365/NumInst,1)));
      END;

      IF "Renewal Date" <> 0D THEN
        StartDate := "Renewal Date"
      ELSE
        StartDate := "Starting Date";
      EndDate := CALCDATE(DateFormulaDF, StartDate);
      IF ("Starting Date Invoice" < StartDate) OR  ("Starting Date Invoice" > EndDate) THEN
        ERROR(Text004b, FIELDCAPTION("Starting Date Invoice"), StartDate, EndDate);
    END;

    PROCEDURE CopySCSourceTypeSetup@1100528602();
    VAR
      FromSCCustSourceTypeSetup@1100528600 : Record 11071800;
      ToSCCustSourceTypeSetup@1100528601 : Record 11071800;
    BEGIN
      IF "Contract Template Code" = '' THEN
        EXIT;

      FromSCCustSourceTypeSetup.SETRANGE(Type, FromSCCustSourceTypeSetup.Type::"Contract Template");
      FromSCCustSourceTypeSetup.SETRANGE(Code, "Contract Template Code");
      IF FromSCCustSourceTypeSetup.FINDSET THEN
        REPEAT
          ToSCCustSourceTypeSetup := FromSCCustSourceTypeSetup;
          ToSCCustSourceTypeSetup.Type := ToSCCustSourceTypeSetup.Type::Contract;
          ToSCCustSourceTypeSetup.Code := "No.";
          ToSCCustSourceTypeSetup.INSERT(TRUE);
        UNTIL FromSCCustSourceTypeSetup.NEXT = 0;
    END;

    PROCEDURE EditDocuments@1100528702(ContactNo@1210190003 : Code[20];ContactPersonNo@1210190004 : Code[20];SendMail@1210190002 : Boolean;Recipient@1100528700 : Text[120]);
    VAR
      DocumentTemplate@1210190001 : Record 11012401;
      DocumentMailing@1210190000 : Codeunit 11012278;
      RecRef@1100525000 : RecordRef;
      DocumentLinkRIDs@1100525001 : ARRAY [5] OF RecordID;
    BEGIN
      RecRef.GETTABLE(Rec);
      DocumentLinkRIDs[1] := RecRef.RECORDID;

      DocumentMailing.EditDocuments(
        STRSUBSTNO('%1', DocumentTemplate.Type::"Service Contract"), DocumentLinkRIDs,
        "Global Dimension 1 Code", ContactNo, ContactPersonNo, SendMail, Recipient);
    END;

    PROCEDURE UpdateEndingDateSCObjects@1100528603();
    VAR
      ContractObject@1100528600 : Record 11071702;
    BEGIN
      ContractObject.SETRANGE("Service Contract No.", "No.");
      IF "Ending Date" > 0D THEN
        ContractObject.SETFILTER("Ending Date", '%1|%2|>%3', 0D, xRec."Ending Date", "Ending Date")
      ELSE
        ContractObject.SETFILTER("Ending Date", '%1|%2', 0D, xRec."Ending Date");
      IF ContractObject.FINDSET(TRUE) THEN
        REPEAT
          MODIFY;
          ContractObject.VALIDATE("Ending Date", "Ending Date");
          ContractObject.MODIFY(TRUE);
        UNTIL ContractObject.NEXT = 0;
    END;

    PROCEDURE ShowSCInvoices@1210190009();
    VAR
      SalesInvoiceLine@1210190000 : Record 113;
      SalesInvoiceHeader@1210190001 : Record 112;
    BEGIN
      SalesInvoiceLine.SETCURRENTKEY("Service Contract No.", "Service Order No.");
      SalesInvoiceLine.SETRANGE("Service Contract No.", "No.");
      SalesInvoiceLine.SETFILTER("Service Order No.", '%1', '');
      IF SalesInvoiceLine.FINDSET THEN
        REPEAT
          IF SalesInvoiceHeader.GET(SalesInvoiceLine."Document No.") THEN
            SalesInvoiceHeader.MARK(TRUE);
        UNTIL SalesInvoiceLine.NEXT = 0;

      SalesInvoiceHeader.MARKEDONLY(TRUE);

      PAGE.RUNMODAL(PAGE::"Posted Sales Invoices", SalesInvoiceHeader);
    END;

    PROCEDURE ShowSCCreditMemos@1210190010();
    VAR
      SalesCrMemoLine@1210190000 : Record 115;
      SalesCrMemoHeader@1210190001 : Record 114;
    BEGIN
      SalesCrMemoLine.SETCURRENTKEY("Service Contract No.", "Service Order No.");
      SalesCrMemoLine.SETRANGE("Service Contract No.", "No.");
      SalesCrMemoLine.SETFILTER("Service Order No.", '%1', '');
      IF SalesCrMemoLine.FINDSET THEN
        REPEAT
          IF SalesCrMemoHeader.GET(SalesCrMemoLine."Document No.") THEN
            SalesCrMemoHeader.MARK(TRUE);
        UNTIL SalesCrMemoLine.NEXT = 0;

      SalesCrMemoHeader.MARKEDONLY(TRUE);

      PAGE.RUNMODAL(PAGE::"Posted Sales Credit Memos", SalesCrMemoHeader);
    END;

    PROCEDURE ShowTodos@1100528700();
    VAR
      Todo@1100528700 : Record 5080;
    BEGIN
      Todo.SETRANGE("Service Contract No.", "No.");
      Todo.SETRANGE("System To-do Type", Todo."System To-do Type"::Organizer);
      PAGE.RUNMODAL(PAGE::"To-do List", Todo);
    END;

    PROCEDURE DetermineCurrencyCode@1100528800() : Code[10];
    VAR
      Customer@1100485000 : Record 18;
    BEGIN
      // dp00116.n
      IF Customer.GET("Customer No.") THEN
        EXIT(Customer."Currency Code");
    END;

    PROCEDURE ContractAmountsExist@3() : Boolean;
    VAR
      ContractAmountsByDate@1100528800 : Record 11071708;
    BEGIN
      // dp00116.n
      ContractAmountsByDate.SETCURRENTKEY("Service Contract No.");
      ContractAmountsByDate.SETRANGE(ContractAmountsByDate."Service Contract No.","No.");
      EXIT(ContractAmountsByDate.FINDFIRST);
    END;

    PROCEDURE RecreateContractAmountsByDate@1100528801();
    VAR
      ContractAmountsByDate@1100528802 : Record 11071708;
      Confirmed@1100409000 : Boolean;
    BEGIN
      // dp00116.n
      IF ContractAmountsExist THEN BEGIN
        IF (NOT GUIALLOWED) THEN
          Confirmed := TRUE
        ELSE
          Confirmed :=
            CONFIRM(Text110, FALSE);
        IF Confirmed THEN BEGIN
          ContractAmountsByDate.SETCURRENTKEY("Service Contract No.");
          ContractAmountsByDate.SETRANGE(ContractAmountsByDate."Service Contract No.","No.");
          IF ContractAmountsByDate.FINDSET THEN BEGIN
            REPEAT
              //ContractAmountsByDate.CALCFIELDS("Currency Code");
              ContractAmountsByDate.Amount := CalcContractAmountsFromLCY(ContractAmountsByDate."Amount (LCY)",
                ContractAmountsByDate."Index Date");
              ContractAmountsByDate.MODIFY;
            UNTIL ContractAmountsByDate.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE CalcContractAmountsFromLCY@1100528802(ContractAmountLCY@1100528803 : Decimal;IndexDate@1100528804 : Date) ContractAmount : Decimal;
    VAR
      CurrencyDate@1100528802 : Date;
      CurrencyExchangeRate@1100528801 : Record 330;
      Currency2@1100528800 : Record 4;
    BEGIN
      // dp00116.n
      Currency2.InitRoundingPrecision;
      IF "Currency Code" <> '' THEN BEGIN
        CurrencyDate := IndexDate;
        ContractAmount :=
        ROUND(
          CurrencyExchangeRate.ExchangeAmtLCYToFCY(
            0, '', CurrencyDate, "Currency Code", ContractAmountLCY,
             CurrencyExchangeRate.ExchangeRate(0, '', CurrencyDate, "Currency Code",TRUE),TRUE),
             Currency2."Amount Rounding Precision");
      END ELSE BEGIN
        ContractAmount := ROUND(ContractAmountLCY,Currency2."Amount Rounding Precision");
      END;
    END;

    PROCEDURE CheckAndResetInstallmBasedOn@1100528300();
    BEGIN
      IF ("Invoice Period" <> "Invoice Period"::Afterwards) OR
         ("Invoice Type" <> "Invoice Type"::Installments)
      THEN
        "Installments based on Progress" := FALSE;
    END;

    PROCEDURE CheckAndResetContractInstallm@1100528301();
    VAR
      ContractInstallment@1100528300 : Record 11071707;
    BEGIN
      ContractInstallment.SETRANGE("Service Contract No.", "No.");
      IF (NOT ContractInstallment.FINDSET) THEN
        EXIT;

      REPEAT
        IF ("Installments based on Progress") THEN BEGIN
          CLEAR(ContractInstallment."Invoice Interval");
        END ELSE BEGIN
          ContractInstallment."Progress %" := 0;
          ContractInstallment."Invoice Directly" := FALSE;
        END;
        ContractInstallment.MODIFY(TRUE);
      UNTIL (ContractInstallment.NEXT = 0);
    END;

    PROCEDURE GetPercentageShareCalls@1100528619(IIndexDate@1100528600 : Date) : Decimal;
    VAR
      PercentageShareCallsbyDate@1100528601 : Record 11071815;
    BEGIN
      PercentageShareCallsbyDate.SETRANGE("Service Contract No.", "No.");
      PercentageShareCallsbyDate.SETFILTER("Index Date", '<=%1', IIndexDate);
      IF PercentageShareCallsbyDate.FINDLAST THEN
        EXIT(PercentageShareCallsbyDate."Percentage Share");
    END;

    PROCEDURE ShowPercentageShareCalls@1100528621();
    VAR
      PercentageShareCallsbyDate@1100528600 : Record 11071815;
    BEGIN
      PercentageShareCallsbyDate.SETRANGE("Service Contract No.", "No.");
      PAGE.RUNMODAL(0, PercentageShareCallsbyDate);
    END;

    PROCEDURE CopyCustomerNotGlobalDims@1100525006();
    VAR
      GLSetup@1210190002 : Record 98;
      DefDimCust@1210190000 : Record 352;
      DefDimServContr@1210190001 : Record 352;
    BEGIN
      //*24651.n
      IF "Customer No." = '' THEN
        EXIT;
      GLSetup.GET;

      DefDimCust.SETRANGE("Table ID", DATABASE::Customer);
      DefDimCust.SETRANGE("No.", "Customer No.");
      DefDimCust.SETFILTER("Dimension Code", '<>%1&<>%2', GLSetup."Global Dimension 1 Code", GLSetup."Global Dimension 2 Code");
      IF DefDimCust.FINDSET THEN BEGIN
        REPEAT
          IF NOT DefDimServContr.GET(DATABASE::"Service-Contract", "No.", DefDimCust."Dimension Code") THEN BEGIN
            DefDimServContr := DefDimCust;
            DefDimServContr."Table ID" := DATABASE::"Service-Contract";
            DefDimServContr."No." := "No.";
            DefDimServContr.INSERT;
          END ELSE BEGIN
            IF DefDimServContr."Dimension Value Code" <> DefDimCust."Dimension Value Code" THEN BEGIN
              DefDimServContr."Dimension Value Code" := DefDimCust."Dimension Value Code";
              DefDimServContr."Value Posting" := DefDimCust."Value Posting";
              DefDimServContr.MODIFY;
            END;
          END;
        UNTIL DefDimCust.NEXT = 0;
      END;
    END;

    PROCEDURE CopySCBudgetCallsRelease@1100409000();
    VAR
      SCBudgetCallsRelease@1100409000 : Record 11071699;
      ToSCBudgetCallsRelease@1100409001 : Record 11071699;
    BEGIN
      IF "Contract Group" = '' THEN
        EXIT;
      IF "Budget Based on" <> "Budget Based on"::"Maintenance Scheme" THEN
        EXIT;
      ToSCBudgetCallsRelease.SETRANGE(Type, SCBudgetCallsRelease.Type::Contract);
      ToSCBudgetCallsRelease.SETRANGE(Code, "No.");
      ToSCBudgetCallsRelease.DELETEALL(TRUE);

      SCBudgetCallsRelease.SETRANGE(Type, SCBudgetCallsRelease.Type::"Contract Group");
      SCBudgetCallsRelease.SETRANGE(Code, "Contract Group");
      IF SCBudgetCallsRelease.FINDSET THEN
        REPEAT
          ToSCBudgetCallsRelease := SCBudgetCallsRelease;
          ToSCBudgetCallsRelease.Type := ToSCBudgetCallsRelease.Type::Contract;
          ToSCBudgetCallsRelease.Code := "No.";
          ToSCBudgetCallsRelease.INSERT(TRUE);
        UNTIL SCBudgetCallsRelease.NEXT = 0;
    END;

    PROCEDURE RemoveUnusedContractDiscountTerms@1100528604(IServiceObjectNo@1100528604 : Code[20];IServiceMaintAgreementLineNo@1100528607 : Integer;IAction@1100528605 : 'Insert,Modify,Delete');
    VAR
      ServiceContractDiscountTerm@1100528600 : Record 11012828;
      ServicePackage@1100528603 : Record 11012806;
      TmpServicePackage@1100528601 : TEMPORARY Record 11012806;
      ContractObject@1100528602 : Record 11071702;
      ServiceMaintAgreement@1100528606 : Record 11071973;
    BEGIN
      ContractObject.SETRANGE("Service Contract No.", "No.");
      IF IAction = IAction::Delete THEN
        ContractObject.SETFILTER("Service Object No.", '<>%1', IServiceObjectNo);
      IF ContractObject.FINDSET THEN
        REPEAT
          IF ServicePackage.GET(ContractObject."Service Package") THEN BEGIN
            IF NOT TmpServicePackage.GET(ContractObject."Service Package") THEN BEGIN
              TmpServicePackage.Code := ContractObject."Service Package";
              TmpServicePackage.INSERT;
            END;
            IF ServicePackage."Service Package Contract" <> '' THEN
              IF NOT TmpServicePackage.GET(ServicePackage."Service Package Contract") THEN BEGIN
                TmpServicePackage.Code := ServicePackage."Service Package Contract";
                TmpServicePackage.INSERT;
              END;
            IF ServicePackage."Service Package Call" <> '' THEN
              IF NOT TmpServicePackage.GET(ServicePackage."Service Package Call") THEN BEGIN
                TmpServicePackage.Code := ServicePackage."Service Package Call";
                TmpServicePackage.INSERT;
              END;
            IF ServicePackage."Service Package Direct" <> '' THEN
              IF NOT TmpServicePackage.GET(ServicePackage."Service Package Direct") THEN BEGIN
                TmpServicePackage.Code := ServicePackage."Service Package Direct";
                TmpServicePackage.INSERT;
              END;
            IF ServicePackage."Service Package Estimate" <> '' THEN
              IF NOT TmpServicePackage.GET(ServicePackage."Service Package Estimate") THEN BEGIN
                TmpServicePackage.Code := ServicePackage."Service Package Estimate";
                TmpServicePackage.INSERT;
              END;
          END;
        UNTIL ContractObject.NEXT = 0;

      ServiceMaintAgreement.SETRANGE(Type, ServiceMaintAgreement.Type::Contract);
      ServiceMaintAgreement.SETRANGE(Code, "No.");
      IF IAction = IAction::Delete THEN
        ServiceMaintAgreement.SETFILTER("Line No.", '<>%1', IServiceMaintAgreementLineNo);
      IF ServiceMaintAgreement.FINDSET THEN
        REPEAT
          IF ServicePackage.GET(ServiceMaintAgreement."Service Package") THEN BEGIN
            IF NOT TmpServicePackage.GET(ServiceMaintAgreement."Service Package") THEN BEGIN
              TmpServicePackage.Code := ServiceMaintAgreement."Service Package";
              TmpServicePackage.INSERT;
            END;
            IF ServicePackage."Service Package Contract" <> '' THEN
              IF NOT TmpServicePackage.GET(ServicePackage."Service Package Contract") THEN BEGIN
                TmpServicePackage.Code := ServicePackage."Service Package Contract";
                TmpServicePackage.INSERT;
              END;
            IF ServicePackage."Service Package Call" <> '' THEN
              IF NOT TmpServicePackage.GET(ServicePackage."Service Package Call") THEN BEGIN
                TmpServicePackage.Code := ServicePackage."Service Package Call";
                TmpServicePackage.INSERT;
              END;
            IF ServicePackage."Service Package Direct" <> '' THEN
              IF NOT TmpServicePackage.GET(ServicePackage."Service Package Direct") THEN BEGIN
                TmpServicePackage.Code := ServicePackage."Service Package Direct";
                TmpServicePackage.INSERT;
              END;
            IF ServicePackage."Service Package Estimate" <> '' THEN
              IF NOT TmpServicePackage.GET(ServicePackage."Service Package Estimate") THEN BEGIN
                TmpServicePackage.Code := ServicePackage."Service Package Estimate";
                TmpServicePackage.INSERT;
              END;
          END;
        UNTIL ServiceMaintAgreement.NEXT = 0;

      ServiceContractDiscountTerm.SETRANGE("Service Contract No.", "No.");
      IF ServiceContractDiscountTerm.FINDSET THEN
        REPEAT
          IF NOT TmpServicePackage.GET(ServiceContractDiscountTerm."Service Package") THEN
            ServiceContractDiscountTerm.DELETE(TRUE);
        UNTIL ServiceContractDiscountTerm.NEXT = 0;
    END;

    PROCEDURE ValidateServiceCluster@1100528606();
    VAR
      ServiceCluster@1100528600 : Record 11071742;
    BEGIN
      IF Cluster <> '' THEN BEGIN
        IF "Use Contract Clusters" THEN
          ServiceCluster.GET("No.", Cluster)
        ELSE
          ServiceCluster.GET('', Cluster);
      END;
    END;

    PROCEDURE LookupServiceCluster@1100528605();
    VAR
      ServiceCluster@1100528601 : Record 11071742;
    BEGIN
      IF "Use Contract Clusters" THEN BEGIN
        ServiceCluster.SETRANGE("Service Contract No.", "No.");
        IF Cluster <> '' THEN
          ServiceCluster.GET("No.", Cluster);
      END ELSE BEGIN
        ServiceCluster.SETRANGE("Service Contract No.", '');
        IF Cluster <> '' THEN
          ServiceCluster.GET('', Cluster);
      END;
      IF PAGE.RUNMODAL(0, ServiceCluster) = ACTION::LookupOK THEN
        VALIDATE(Cluster, ServiceCluster.Code);
    END;

    PROCEDURE CheckObjectPartOfContract@1100525000(IServiceObjectNo@1210190001 : Code[20];IReferenceDate@1210190003 : Date);
    VAR
      ContractObject@1210190002 : Record 11071702;
    BEGIN
      IF IServiceObjectNo = '' THEN
        EXIT;

      IF NOT ContractObject.GET("No.", IServiceObjectNo) THEN
        ERROR(Text117, IServiceObjectNo, "No.");

      IF (ContractObject."Starting Date" > IReferenceDate) OR
        ((ContractObject."Ending Date" > 0D) AND (ContractObject."Ending Date" < IReferenceDate)) THEN
        ERROR(Text118, IServiceObjectNo, "No.");
    END;

    PROCEDURE TestObjectBelongtoContract@1100525007(IServiceObjectNo@1100525000 : Code[20];IReferenceDate@1100525002 : Date) : Boolean;
    VAR
      ContractObject@1100525001 : Record 11071702;
    BEGIN
      IF IServiceObjectNo = '' THEN
        EXIT;

      IF "No." <> '' THEN BEGIN
        IF NOT ContractObject.GET("No.", IServiceObjectNo) THEN
          ERROR(Text117, IServiceObjectNo, "No.");

        IF (ContractObject."Starting Date" > IReferenceDate) OR
          ((ContractObject."Ending Date" > 0D) AND (ContractObject."Ending Date" < IReferenceDate)) THEN
          ERROR(Text118, IServiceObjectNo, "No.");
      END;
    END;

    PROCEDURE GetTravelCostWithIndexDate@1100528608(IIndexDate@1100528601 : Date) : Decimal;
    VAR
      TravelCostRate@1100528600 : Record 11071802;
    BEGIN
      IF "Travel Cost Code" <> '' THEN BEGIN
        TravelCostRate.SETRANGE("Travel Cost Code", "Travel Cost Code");
        TravelCostRate.SETFILTER("Index Date", '<=%1', IIndexDate);
        IF TravelCostRate.FINDLAST THEN
          EXIT(TravelCostRate.Rate);
      END;
    END;

    PROCEDURE GetTravelCost@1100528607() : Decimal;
    BEGIN
      EXIT(GetTravelCostWithIndexDate(TODAY));
    END;

    PROCEDURE CheckServiceAuthorization@1100485028(FieldCap@1100485000 : Text[100]);
    VAR
      ServiceSetup@1100528600 : Record 11012800;
      UserSetup@1100528601 : Record 91;
    BEGIN
      IF "No." = '' THEN EXIT;
      IF CurrFieldNo = 0 THEN EXIT;

      ServiceSetup.GET;
      IF NOT ServiceSetup."Service Authorization" THEN
        EXIT;

      IF CheckCostsAndRevenuesZero THEN
        EXIT;

      //Check now if user is authorized for changes
      IF UserSetup.GET(USERID) THEN
        IF UserSetup."Service Authorization Active" THEN
          EXIT;

      ERROR(Text119, FieldCap, USERID);
    END;

    PROCEDURE CheckCostsAndRevenuesZero@1100485031() : Boolean;
    BEGIN
      CALCFIELDS(Revenues);
      IF Revenues <> 0  THEN
        EXIT(FALSE);
      CALCFIELDS("Actual Costs");
      EXIT("Actual Costs" = 0);
    END;

    PROCEDURE GetCategoryDivisionPercentage@1100528609(IServiceCategory@1100528601 : Code[10];ISeekDate@1100528603 : Date) : Decimal;
    VAR
      SCRevenueDivision@1100528602 : Record 11071986;
      SCRevenueDivisionLine@1100528600 : Record 11071987;
      ServiceCategory@1100528604 : Record 11071985;
    BEGIN
      IF IServiceCategory = '' THEN
        EXIT(100);
      SCRevenueDivision.SETRANGE("Service Contract No.", "No.");
      SCRevenueDivision.SETFILTER("Index Date", '<=%1', ISeekDate);
      IF NOT SCRevenueDivision.FINDLAST THEN BEGIN
        ServiceCategory.SETRANGE("Service Contract No.", "No.");
        IF ServiceCategory.ISEMPTY THEN
          EXIT(100)
        ELSE
          EXIT(100 / ServiceCategory.COUNT);
      END;
      SCRevenueDivisionLine.SETRANGE("Service Contract No.", SCRevenueDivision."Service Contract No.");
      SCRevenueDivisionLine.SETRANGE("Index Date", SCRevenueDivision."Index Date");
      SCRevenueDivisionLine.SETRANGE("Service Category", IServiceCategory);
      IF SCRevenueDivisionLine.FINDFIRST THEN
        EXIT(SCRevenueDivisionLine.Percentage);
    END;

    PROCEDURE CopySCTemplateCategories@1100528610();
    VAR
      ServiceCategoryTemplate@1100528600 : Record 11071997;
      ServiceCategory@1100528601 : Record 11071985;
    BEGIN
      IF "Contract Template Code" = '' THEN
        EXIT;
      ServiceCategoryTemplate.SETRANGE("Service Contract Template Code", "Contract Template Code");
      IF ServiceCategoryTemplate.FINDSET THEN
        REPEAT
          ServiceCategory."Service Contract No." := "No.";
          ServiceCategory.Code := ServiceCategoryTemplate.Code;
          ServiceCategory.Description := ServiceCategoryTemplate.Description;
          ServiceCategory.INSERT(TRUE);
        UNTIL ServiceCategoryTemplate.NEXT = 0;
    END;

    LOCAL PROCEDURE CopySCTemplateSalesDiscount@1100525002();
    VAR
      ServiceSalesDiscSurch@1100528600 : Record 11072237;
      ToServiceSalesDiscSurch@1100528601 : Record 11072237;
    BEGIN
      IF "Contract Template Code" = '' THEN
        EXIT;
      ServiceSalesDiscSurch.SETRANGE(Type, ServiceSalesDiscSurch.Type::"Contract Template");
      ServiceSalesDiscSurch.SETRANGE(Code, "Contract Template Code");
      IF ServiceSalesDiscSurch.FINDSET THEN
        REPEAT
          ToServiceSalesDiscSurch := ServiceSalesDiscSurch;
          ToServiceSalesDiscSurch.Type := ToServiceSalesDiscSurch.Type::Contract;
          ToServiceSalesDiscSurch.Code := "No.";
          ToServiceSalesDiscSurch.INSERT(TRUE)
        UNTIL ServiceSalesDiscSurch.NEXT = 0;
    END;

    PROCEDURE CheckStatusExpired@1100528611();
    VAR
      ServiceCall@1100528600 : Record 11012822;
      ServiceOrder@1100528601 : Record 11012823;
      TmpError@1100528602 : Record 11012051;
      LineNo@1100528603 : Integer;
      Object@1100528604 : Record 2000000001;
    BEGIN
      IF WIPEntriesExists THEN BEGIN
        LineNo += 10000;
        TmpError."User ID" := USERID;
        TmpError."Source Type" := TmpError."Source Type"::"Finish Service-Project";
        TmpError."Line No." := LineNo;
        TmpError."Service Contract No." := "No.";
        Object.GET(Object.Type::Report, '', REPORT::"Close Open Entries Expired SC");
        Object.CALCFIELDS(Caption);
        TmpError."Error message" := COPYSTR(STRSUBSTNO(Text121, Object.Caption), 1, MAXSTRLEN(TmpError."Error message"));
        TmpError.INSERT;
      END;

      ServiceCall.SETCURRENTKEY("Service Contract No.");
      ServiceCall.SETRANGE("Service Contract No.", "No.");
      ServiceCall.SETFILTER(Status, '<%1', ServiceCall.Status::Finished);
      IF ServiceCall.FINDFIRST THEN
        REPEAT
          LineNo += 10000;
          TmpError."User ID" := USERID;
          TmpError."Source Type" := TmpError."Source Type"::"Finish Service-Project";
          TmpError."Line No." := LineNo;
          TmpError."Error message" := STRSUBSTNO(Text122, ServiceCall."No.");
          TmpError.INSERT;
        UNTIL ServiceCall.NEXT = 0;

      ServiceOrder.SETCURRENTKEY("Service Contract No.");
      ServiceOrder.SETRANGE("Service Contract No.", "No.");
      ServiceOrder.SETFILTER(Status, '<%1', ServiceOrder.Status::Finished);
      IF ServiceOrder.FINDSET THEN
        REPEAT
          LineNo += 10000;
          TmpError."User ID" := USERID;
          TmpError."Source Type" := TmpError."Source Type"::"Finish Service-Project";
          TmpError."Line No." := LineNo;
          TmpError."Service Order No." := ServiceOrder."No.";
          Object.GET(Object.Type::Report, '', REPORT::"Close Service Orders");
          Object.CALCFIELDS(Caption);
          TmpError."Error message" := STRSUBSTNO(Text123, ServiceOrder."No.", Object.Caption);
          TmpError.INSERT;
        UNTIL ServiceOrder.NEXT = 0;

      IF NOT TmpError.ISEMPTY THEN BEGIN
        COMMIT;
        PAGE.RUNMODAL(PAGE::Errors, TmpError);
        IF NOT CONFIRM(Text124) THEN
          ERROR('');
      END;
    END;

    LOCAL PROCEDURE MessageIfInstallmentsExists@1100525001();
    VAR
      ContractInstallment@1100525000 : Record 11071707;
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT;
      IF "Invoice Type" <> "Invoice Type"::Installments THEN
        EXIT;
      ContractInstallment.SETRANGE("Service Contract No.", "No.");
      IF NOT ContractInstallment.ISEMPTY THEN
        MESSAGE(Text125);
    END;

    LOCAL PROCEDURE UpdateServiceSalesDiscount@1100525003();
    VAR
      ServiceSalesDiscSurch@1100528600 : Record 11072237;
    BEGIN
      ServiceSalesDiscSurch.SETRANGE(Type, ServiceSalesDiscSurch.Type::Contract);
      ServiceSalesDiscSurch.SETRANGE(Code, "No.");
      IF ServiceSalesDiscSurch.FINDSET THEN
        REPEAT
          ServiceSalesDiscSurch.VALIDATE("Currency Code", "Currency Code");
          ServiceSalesDiscSurch.MODIFY(TRUE);
        UNTIL ServiceSalesDiscSurch.NEXT = 0;
    END;

    PROCEDURE IsAlwaysCloseOrdersAllowed@1100528803(ServiceContractNo@1100528800 : Code[20];ISourceType@1100528801 : 'Call,Contract,Direct,Estimate,,,Modification,Replacement') : Boolean;
    VAR
      ServiceContract@1100528802 : Record 11012812;
    BEGIN
      IF ServiceContract.GET(ServiceContractNo) THEN
        CASE ISourceType OF
          ISourceType::Call:
            EXIT(ServiceContract."Always Allow Cls Ord. (Call)");
          ISourceType::Direct:
            EXIT(ServiceContract."Always Allow Cls Ord. (Ext.)");
          ISourceType::Contract:
            EXIT(ServiceContract."Always Allow Cls Ord. (Maint.)");
        END;
    END;

    PROCEDURE AssistEditServContractFolder@1100528000();
    VAR
      FileMgt@1100525002 : Codeunit 419;
      ExplorerPath@1100525000 : Text[250];
      lvRelManSetup@1100525001 : Record 5079;
      OperatingSystemMgt@1100528000 : Codeunit 11012364;
    BEGIN
      lvRelManSetup.GET;
      IF NOT lvRelManSetup."Use Citrix Client" THEN
        ExplorerPath := OperatingSystemMgt.ClientEnviron('SYSTEMROOT') + '\Explorer.exe'
      ELSE
        ExplorerPath := OperatingSystemMgt.ClientEnviron('SYSTEMROOT') + '\Pexplorer.exe';
      IF "Service Contract Folder" = '' THEN
        FileMgt.SelectDirectoryNameWithBackSlash("Service Contract Folder")
      ELSE BEGIN
        OperatingSystemMgt.ClientShell(
          STRSUBSTNO('"%1"', ExplorerPath),
          STRSUBSTNO('"%1"', "Service Contract Folder"),
          FALSE);
      END;
    END;

    BEGIN
    {
      4PS01 HBK 06-08-09: Field added "Language Code"
    }
    END.
  }
}

