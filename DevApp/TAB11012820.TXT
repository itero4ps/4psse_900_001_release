OBJECT Table 11012820 Service Journal Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               DPA_OnInsert;
             END;

    CaptionML=ENU=Service and Maintenance Journal Line;
    LookupPageID=Page5912;
    DrillDownPageID=Page5912;
  }
  FIELDS
  {
    { 10  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 20  ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract.No.;
                                                   CaptionML=ENU=Service Contract No. }
    { 30  ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=" ,Purchase Invoice,Purchase Credit Memo,Sales Invoice,Sales Credit Memo";
                                                   OptionString=[ ,Purchase Invoice,Purchase Credit Memo,Sales Invoice,Sales Credit Memo] }
    { 40  ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 50  ;   ;G/L Account         ;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=ENU=G/L Account }
    { 55  ;   ;WIP Account Costs   ;Code20        ;TableRelation="G/L Account".No.;
                                                   CaptionML=ENU=WIP Account Costs }
    { 56  ;   ;WIP Balance Account ;Code20        ;TableRelation="G/L Account".No.;
                                                   CaptionML=ENU=WIP Balance Account }
    { 60  ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 61  ;   ;Entry Type          ;Option        ;CaptionML=ENU=Entry Type;
                                                   OptionCaptionML=ENU=Usage,Sale;
                                                   OptionString=Usage,Sale;
                                                   Editable=No }
    { 80  ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   CaptionML=ENU=Customer }
    { 85  ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Vendor }
    { 100 ;   ;Service Invoice     ;Boolean       ;CaptionML=ENU=Service Invoice }
    { 110 ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 120 ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 125 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=No }
    { 130 ;   ;Installment No.     ;Code10        ;CaptionML=ENU=Installment No.;
                                                   NotBlank=Yes;
                                                   Numeric=Yes }
    { 135 ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code;
                                                   Editable=No }
    { 140 ;   ;Unit Cost (LCY)     ;Decimal       ;OnValidate=VAR
                                                                CurrencyDate@1100528802 : Date;
                                                                CurrencyExchangeRate@1100528801 : Record 330;
                                                                Currency2@1100525000 : Record 4;
                                                              BEGIN
                                                                // dp00116.n
                                                                UseSalesExchange := GetUseSalesExchange;
                                                                Currency2.InitRoundingPrecision;
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  CurrencyDate := "Posting Date";
                                                                  "Unit Cost" :=
                                                                  ROUND(
                                                                    CurrencyExchangeRate.ExchangeAmtLCYToFCY(
                                                                      0, '', CurrencyDate, "Currency Code", "Unit Cost (LCY)",
                                                                       CurrencyExchangeRate.ExchangeRate(0, '', CurrencyDate, "Currency Code",UseSalesExchange),UseSalesExchange),
                                                                       Currency2."Unit-Amount Rounding Precision")
                                                                END ELSE BEGIN
                                                                  "Unit Cost" := ROUND("Unit Cost (LCY)", Currency2."Unit-Amount Rounding Precision");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Unit Cost (LCY);
                                                   AutoFormatType=2 }
    { 141 ;   ;Unit Cost           ;Decimal       ;CaptionML=ENU=Unit Cost;
                                                   AutoFormatType=2 }
    { 150 ;   ;Quantity            ;Decimal       ;CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 170 ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 180 ;   ;Unit of Measure Code;Code10        ;TableRelation="Unit of Measure";
                                                   CaptionML=ENU=Unit of Measure Code }
    { 185 ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 190 ;   ;Sales Price (LCY)   ;Decimal       ;OnValidate=VAR
                                                                CurrencyDate@1100528802 : Date;
                                                                CurrencyExchangeRate@1100528801 : Record 330;
                                                                Currency2@1100525000 : Record 4;
                                                              BEGIN
                                                                // dp00116.n
                                                                Currency2.InitRoundingPrecision;
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  CurrencyDate := "Posting Date";
                                                                  "Sales Price" :=
                                                                  ROUND(
                                                                    CurrencyExchangeRate.ExchangeAmtLCYToFCY(
                                                                      0, '', CurrencyDate, "Currency Code", "Sales Price (LCY)",
                                                                       CurrencyExchangeRate.ExchangeRate(0, '', CurrencyDate, "Currency Code",TRUE),TRUE),
                                                                       Currency2."Unit-Amount Rounding Precision")
                                                                END ELSE BEGIN
                                                                  "Sales Price" := ROUND("Sales Price (LCY)",Currency2."Unit-Amount Rounding Precision");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Sales Price (LCY) }
    { 191 ;   ;Sales Price         ;Decimal       ;CaptionML=ENU=Sales Price }
    { 200 ;   ;Total Cost (LCY)    ;Decimal       ;OnValidate=VAR
                                                                CurrencyDate@1100528802 : Date;
                                                                CurrencyExchangeRate@1100528801 : Record 330;
                                                                Currency2@1100525000 : Record 4;
                                                              BEGIN
                                                                // dp00116.n
                                                                UseSalesExchange := GetUseSalesExchange;
                                                                Currency2.InitRoundingPrecision;
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  CurrencyDate := "Posting Date";
                                                                  "Total Cost" :=
                                                                  ROUND(
                                                                    CurrencyExchangeRate.ExchangeAmtLCYToFCY(
                                                                      0, '', CurrencyDate, "Currency Code", "Total Cost (LCY)",
                                                                       CurrencyExchangeRate.ExchangeRate(0, '', CurrencyDate, "Currency Code",UseSalesExchange),UseSalesExchange),
                                                                       Currency2."Unit-Amount Rounding Precision")
                                                                END ELSE BEGIN
                                                                  "Total Cost" := ROUND("Total Cost (LCY)", Currency2."Amount Rounding Precision");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Total Cost (LCY) }
    { 201 ;   ;Total Cost          ;Decimal       ;CaptionML=ENU=Total Cost }
    { 210 ;   ;Total Revenue (LCY) ;Decimal       ;OnValidate=VAR
                                                                CurrencyDate@1100528802 : Date;
                                                                CurrencyExchangeRate@1100528801 : Record 330;
                                                                Currency2@1100525000 : Record 4;
                                                              BEGIN
                                                                // dp00116.n
                                                                Currency2.InitRoundingPrecision;
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  CurrencyDate := "Posting Date";
                                                                  "Total Revenue" :=
                                                                  ROUND(
                                                                    CurrencyExchangeRate.ExchangeAmtLCYToFCY(
                                                                      0, '', CurrencyDate, "Currency Code", "Total Revenue (LCY)",
                                                                       CurrencyExchangeRate.ExchangeRate(0, '', CurrencyDate, "Currency Code",TRUE),TRUE),
                                                                       Currency2."Unit-Amount Rounding Precision")
                                                                END ELSE BEGIN
                                                                  "Total Revenue" := ROUND("Total Revenue (LCY)", Currency2."Amount Rounding Precision");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Total Revenue (LCY) }
    { 211 ;   ;Total Revenue       ;Decimal       ;CaptionML=ENU=Total Revenue }
    { 220 ;   ;Service Order No.   ;Code20        ;TableRelation="Service Order";
                                                   CaptionML=ENU=Service Order No. }
    { 225 ;   ;Service Location No.;Code20        ;TableRelation="Service Location".No.;
                                                   CaptionML=ENU=Service Location No. }
    { 240 ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=ENU=Source Code }
    { 245 ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 250 ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No. }
    { 255 ;   ;Wage Component      ;Code10        ;TableRelation="Wage Component";
                                                   CaptionML=ENU=Wage Component }
    { 260 ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=ENU=Item No.;
                                                   Editable=No }
    { 261 ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   CaptionML=ENU=Basic Item;
                                                   Editable=No }
    { 262 ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   CaptionML=ENU=Trade Item;
                                                   Editable=No }
    { 264 ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Vendor (Trade Item);
                                                   Editable=No }
    { 265 ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Manufacturer;
                                                   Editable=No }
    { 270 ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=ENU=Project No. }
    { 280 ;   ;Cost Plus Line No.  ;Integer       ;CaptionML=ENU=Cost Plus Line No. }
    { 285 ;   ;Cost Plus Entry Created;Boolean    ;CaptionML=ENU=Cost Plus Entry Created }
    { 290 ;   ;Surcharge           ;Boolean       ;CaptionML=ENU=Surcharge }
    { 300 ;   ;Closed Costs        ;Decimal       ;CaptionML=ENU=Closed Costs }
    { 310 ;   ;Closed Revenues     ;Decimal       ;CaptionML=ENU=Closed Revenues }
    { 320 ;   ;Cost Type Closing Procedure;Option ;CaptionML=ENU=Cost Type Closing Procedure;
                                                   OptionCaptionML=ENU=Labor,Material,Subcontracting,Plant,Sundry,Revenues;
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry,Revenues }
    { 330 ;   ;Document Line No.   ;Integer       ;CaptionML=ENU=Document Line No. }
    { 350 ;   ;Additional Cost     ;Boolean       ;CaptionML=ENU=Additional Cost }
    { 360 ;   ;Supplying Company   ;Text30        ;TableRelation=Company;
                                                   CaptionML=ENU=Supplying Company }
    { 375 ;   ;Actual Preclosure Result;Decimal   ;CaptionML=ENU=Actual Preclosure Result }
    { 376 ;   ;Actual Preclosure Cost;Decimal     ;CaptionML=ENU=Actual Preclosure Cost }
    { 377 ;   ;Actual Preclosure Revenue;Decimal  ;CaptionML=ENU=Actual Preclosure Revenue }
    { 430 ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   CaptionML=ENU=Cost Component;
                                                   NotBlank=Yes }
    { 440 ;   ;Original Cost Type  ;Option        ;CaptionML=ENU=Original Cost Type;
                                                   OptionCaptionML=ENU=" ,Labor,Material,Subcontracting,Plant,Sundry,Revenues";
                                                   OptionString=[ ,Labor,Material,Subcontracting,Plant,Sundry,Revenues] }
    { 450 ;   ;Removal Contribution;Boolean       ;CaptionML=ENU=Removal Contribution }
    { 460 ;   ;Closing Procedure   ;Boolean       ;CaptionML=ENU=Closing Procedure }
    { 470 ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=ENU=Location Code }
    { 480 ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 490 ;   ;Precl. Service Control Year;Integer;CaptionML=ENU=Precl. Service Control Year;
                                                   Editable=No }
    { 495 ;   ;Source Type Closing Procedure;Option;
                                                   CaptionML=ENU=Source Type Closing Procedure;
                                                   OptionCaptionML=ENU=Not Used,Call,Contract,Other,Estimate;
                                                   OptionString=Not Used,Call,Contract,Other,Estimate }
    { 500 ;   ;Plant Invoice       ;Boolean       ;CaptionML=ENU=Plant Invoice }
    { 505 ;   ;Rental Period       ;Text30        ;CaptionML=ENU=Rental Period }
    { 550 ;   ;Sales Price Purch. Order;Decimal   ;CaptionML=ENU=Sales Price Purchase Order;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 560 ;   ;Cost Entry No. Service Ledger;Integer;
                                                   TableRelation="Service-Ledger Entry";
                                                   CaptionML=ENU=Cost Entry No. Service Ledger }
    { 570 ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region Code }
    { 575 ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=ENU=Transaction Type }
    { 576 ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=ENU=Transport Method }
    { 577 ;   ;Entry/Exit Point    ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=ENU=Entry/Exit Point }
    { 578 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=ENU=Area }
    { 579 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=ENU=Transaction Specification }
    { 580 ;   ;Country/Region of Origin/Dest.;Code10;
                                                   TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region of Origin/Destination }
    { 590 ;   ;Tariff No.          ;Code20        ;TableRelation="Tariff Number";
                                                   CaptionML=ENU=Tariff No. }
    { 600 ;   ;Net Weight          ;Decimal       ;CaptionML=ENU=Net Weight;
                                                   DecimalPlaces=0:5 }
    { 650 ;   ;Text                ;Text250       ;CaptionML=ENU=Text;
                                                   Editable=No }
    { 750 ;   ;Execution Date      ;Date          ;CaptionML=ENU=Execution Date }
    { 760 ;   ;Coll.-List SC Inv. Line No.;Integer;CaptionML=ENU=Collective-List Service Contract Invoicng Line No.;
                                                   Editable=No }
    { 770 ;   ;Collective List No. ;Code20        ;TableRelation="Service Collective-List";
                                                   CaptionML=ENU=Collective List No.;
                                                   Editable=No }
    { 780 ;   ;Service Control Period Date;Date   ;CaptionML=ENU=Service Control Period Date }
    { 790 ;   ;Installment Line No.;Integer       ;CaptionML=ENU=Installment Line No.;
                                                   Editable=No }
    { 880 ;   ;Intercompany Ledger Entry No.;Integer;
                                                   TableRelation="Intercompany Ledger Entry";
                                                   CaptionML=ENU=Intercompany Ledger Entry No.;
                                                   BlankZero=Yes;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Line No.                                ;Clustered=Yes }
    {    ;Document Type,Document No.               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text11012000@1210190000 : TextConst 'ENU=Surcharge %1';
      DPA_Management@1100000999 : Codeunit 11012783;
      UseSalesExchange@1100528500 : Boolean;

    PROCEDURE EmptyLine@8() : Boolean;
    BEGIN
      EXIT(("Service Contract No." = '') AND ("Service Order No." = '') AND (Quantity = 0));
    END;

    PROCEDURE InitSurcharge@1210190000(VAR ServJnlLine@1210190002 : Record 11012820;OrigDimRec@1210190000 : Record 349;SurchDimRec@1210190001 : Record 349;SurchargeRec@1210190004 : Record 11020208;Dim1@1210190005 : Code[20];ServType@1210190006 : Code[20];VAR vTotSurchAmount@1100485001 : Decimal;VendorPostingGroup@1100525000 : Code[20]);
    VAR
      ServTypeRec@1210190003 : Record 11012814;
      lEmployeeRec@1100485000 : Record 5200;
      DimMgt@1100525002 : Codeunit 408;
      lvICHoursPosting@1100525001 : 'NotApplicable,ReceiverSide,Supplierside';
    BEGIN
      WITH ServJnlLine DO BEGIN

        IF (OrigDimRec."Cost Type" = OrigDimRec."Cost Type"::Labor) AND
           ("Employee No." <> '') THEN
        BEGIN
          IF lEmployeeRec.GET("Employee No.") THEN BEGIN
            IF (lEmployeeRec.External) AND
               (lEmployeeRec."External Post No Surcharge") THEN
              EXIT;
          END;
        END;

        IF OrigDimRec."Cost Type" = OrigDimRec."Cost Type"::Revenue THEN BEGIN
          IF SurchargeRec.Percentage <> 0 THEN
            IF SurchargeRec."Surcharge over Surcharge" THEN
              "Total Cost (LCY)" := ROUND(("Total Revenue (LCY)" + vTotSurchAmount) * SurchargeRec.Percentage/100)
            ELSE
              "Total Cost (LCY)" := ROUND("Total Revenue (LCY)" * SurchargeRec.Percentage/100)
          ELSE
            "Total Cost (LCY)" := ROUND(SurchargeRec.Amount * Quantity);
        END ELSE BEGIN
          IF SurchargeRec.Percentage <> 0 THEN
            IF SurchargeRec."Surcharge over Surcharge" THEN
              "Total Cost (LCY)" := ROUND(("Total Cost (LCY)" + vTotSurchAmount) * SurchargeRec.Percentage/100)
            ELSE
              "Total Cost (LCY)" := ROUND("Total Cost (LCY)" * SurchargeRec.Percentage/100)
          ELSE
            "Total Cost (LCY)" := ROUND(SurchargeRec.Amount * Quantity);
        END;
        "Unit Cost (LCY)" := "Total Cost (LCY)";
        //db.sn, 25-09-12: C002490
        "Unit Cost" := "Unit Cost (LCY)";
        "Total Cost" := "Total Cost (LCY)";
        //db.en, 25-09-12: C002490
        "Sales Price" := 0;
        "Sales Price (LCY)" := 0;
        "Total Revenue" := 0;
        "Total Revenue (LCY)" := 0;

        Quantity := 0;
        "Unit of Measure Code" := SurchDimRec."Unit of Measure";
        "Shortcut Dimension 1 Code" := Dim1;
        "Shortcut Dimension 2 Code" := SurchDimRec.Code;
        DimMgt.ValidateShortcutDimValues(1,"Shortcut Dimension 1 Code","Dimension Set ID");
        DimMgt.ValidateShortcutDimValues(2,"Shortcut Dimension 2 Code","Dimension Set ID");
        SurchargeRec.CheckServiceOrderIndication("Service Order No.", "Cost Component", SurchDimRec."Cost Component");  //db, 05-03-10
        IF SurchDimRec."Cost Component" <> '' THEN
          "Cost Component" := SurchDimRec."Cost Component";

        Description := STRSUBSTNO(Text11012000, SurchargeRec.Description);
        "G/L Account" := ServTypeRec.GetWipAccByVendorPostingGrp(ServType,
                                                                 SurchDimRec."Cost Type",
                                                                 COMPANYNAME,
                                                                 SurchDimRec."Cost Type",
                                                                 "Vendor No.",
                                                                 lvICHoursPosting::ReceiverSide,
                                                                 VendorPostingGroup);

        "WIP Balance Account" := SurchargeRec."Coverage Account";
        Surcharge := TRUE;
        "Removal Contribution" := FALSE;

        vTotSurchAmount := vTotSurchAmount + "Total Cost (LCY)";
      END;
    END;

    PROCEDURE InitSurchargeIC@1100525000(VAR ServJnlLine@1210190002 : Record 11012820;OrigDimRec@1210190000 : Record 349;SurchDimRec@1210190001 : Record 349;SurchargeRec@1210190004 : Record 11020208;Dim1@1210190005 : Code[20];ServType@1210190006 : Code[20];VAR vTotSurchAmount@1100485001 : Decimal;lCompanyName@1100525000 : Text[50]);
    VAR
      GLSetup@1100525003 : Record 98;
      ServTypeRec@1210190003 : Record 11012814;
      lEmployeeRec@1100485000 : Record 5200;
      lvPostingSetup@1100525007 : Record 11020565;
      ICRec@1100525006 : Record 11012057;
      DimMgt@1100409000 : Codeunit 408;
      lvVendorPostingGroup@1100525005 : Code[20];
      lvICHoursPosting@1100525004 : 'NotApplicable,ReceiverSide,Supplierside';
    BEGIN
      WITH ServJnlLine DO BEGIN
        GLSetup.GET;

        IF (lCompanyName <> COMPANYNAME) AND (lCompanyName <> '') THEN
        BEGIN
          ICRec.GET(COMPANYNAME, lCompanyName);
          IF lvPostingSetup.GET("Source Code", COMPANYNAME, lCompanyName) THEN
          BEGIN;
            IF (lvPostingSetup."Prod. Account Credit" <> '') AND
               (lvPostingSetup."Prod. Account Debit" <> '') THEN
            BEGIN
              lvVendorPostingGroup := ICRec."Vendor Posting Group";
            END;
          END;
        END;

        IF (OrigDimRec."Cost Type" = OrigDimRec."Cost Type"::Labor) AND
           ("Employee No." <> '') THEN
        BEGIN
          IF lEmployeeRec.GET("Employee No.") THEN BEGIN
            IF (lEmployeeRec.External) AND
               (lEmployeeRec."External Post No Surcharge") THEN
              EXIT;
          END;
        END;

        IF OrigDimRec."Cost Type" = OrigDimRec."Cost Type"::Revenue THEN BEGIN
          IF SurchargeRec.Percentage <> 0 THEN
            IF SurchargeRec."Surcharge over Surcharge" THEN
              "Total Cost (LCY)" := ROUND(("Total Revenue (LCY)" + vTotSurchAmount) * SurchargeRec.Percentage/100)
            ELSE
              "Total Cost (LCY)" := ROUND("Total Revenue (LCY)" * SurchargeRec.Percentage/100)
          ELSE
            "Total Cost (LCY)" := ROUND(SurchargeRec.Amount * Quantity);
        END ELSE BEGIN
          IF SurchargeRec.Percentage <> 0 THEN
            IF SurchargeRec."Surcharge over Surcharge" THEN
              "Total Cost (LCY)" := ROUND(("Total Cost (LCY)" + vTotSurchAmount) * SurchargeRec.Percentage/100)
            ELSE
              "Total Cost (LCY)" := ROUND("Total Cost (LCY)" * SurchargeRec.Percentage/100)
          ELSE
            "Total Cost (LCY)" := ROUND(SurchargeRec.Amount * Quantity);
        END;

        "Unit Cost (LCY)" := "Total Cost (LCY)";
        "Sales Price (LCY)" := 0;
        "Total Revenue (LCY)" := 0;
        Quantity := 0;
        "Unit of Measure Code" := SurchDimRec."Unit of Measure";
        "Shortcut Dimension 1 Code" := Dim1;
        "Shortcut Dimension 2 Code" := SurchDimRec.Code;
        //** DP00387 Company should be receiving company sn
        DimMgt.SetCompany(lCompanyName);
        //** DP00387 Company should be receiving company en
        DimMgt.ValidateShortcutDimValues(1,"Shortcut Dimension 1 Code","Dimension Set ID");
        DimMgt.ValidateShortcutDimValues(2,"Shortcut Dimension 2 Code","Dimension Set ID");

        IF SurchDimRec."Cost Component" <> '' THEN
          "Cost Component" := SurchDimRec."Cost Component";

        Description := STRSUBSTNO(Text11012000, SurchargeRec.Description);
        "G/L Account" := ServTypeRec.GetWipAccByVendorPostingGrp(ServType,
                                               SurchDimRec."Cost Type",
                                               lCompanyName,
                                               SurchDimRec."Cost Type",
                                               "Vendor No.",
                                               lvICHoursPosting::ReceiverSide,
                                               lvVendorPostingGroup);

        "WIP Balance Account" := SurchargeRec."Coverage Account";
        Surcharge := TRUE;
        "Removal Contribution" := FALSE;

        vTotSurchAmount := vTotSurchAmount + "Total Cost (LCY)";
      END;
    END;

    PROCEDURE GetUseSalesExchange@1100528800() : Boolean;
    BEGIN
      // dp00116.n
      IF ("Document Type" = "Document Type"::"Purchase Invoice") OR ("Document Type" = "Document Type"::"Purchase Credit Memo") THEN
        EXIT(FALSE);
      IF ("Document Type" = "Document Type"::"Sales Invoice") OR ("Document Type" = "Document Type"::"Sales Credit Memo") THEN
        EXIT(TRUE);
    END;

    PROCEDURE ValidateShortcutDimCode@10(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimMgt@1100409000 : Codeunit 408;
    BEGIN
      IF FieldNumber = 1 THEN
        DimMgt.CheckDepartmentAuthorization(DATABASE::"Service Journal Line", ShortcutDimCode);
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE ShowDimensions@2();
    VAR
      DimMgt@1100409000 : Codeunit 408;
    BEGIN
      DimMgt.SetTableID(DATABASE::"Service Journal Line");
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Document Type","Document No.","Line No."));
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    BEGIN
      IF NOT DPA_IsActive THEN
        EXIT;

      IF "Shortcut Dimension 1 Code" <> '' THEN
        VALIDATE("Shortcut Dimension 1 Code");
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012820) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012820');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Service Journal Line", "Shortcut Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Shortcut Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Shortcut Dimension 1 Code");
    END;

    BEGIN
    END.
  }
}

