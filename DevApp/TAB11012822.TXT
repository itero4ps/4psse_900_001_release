OBJECT Table 11012822 Service Call
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11012055=i,
                TableData 11012822=d,
                TableData 11012823=i,
                TableData 11012824=i,
                TableData 11012826=i;
    DataCaptionFields=No.,Description;
    OnInsert=BEGIN
               ServSetup.GET;

               IF "No." = '' THEN BEGIN
                 ServSetup.TESTFIELD("Call Nos.");
                 NoSeriesMgt.InitSeries(ServSetup."Call Nos.",xRec."No. Series",0D,"No.","No. Series");
                 //IF ServSetup."Assign To" = ServSetup."Assign To"::User THEN
                 //  IF UserSetup.GET(USERID) THEN
                 //    "Assigned to" := UserSetup."Employee No.";
               END;

               //C019333.sn
               IF "Assigned to" = '' THEN
                 IF ServSetup."Assign To" = ServSetup."Assign To"::User THEN
                   IF UserSetup.GET(USERID) THEN
                     VALIDATE("Assigned to", UserSetup."Employee No.");
               IF "Order Manager" = '' THEN
                 IF ServSetup."Order Manager based on" = ServSetup."Order Manager based on"::User THEN
                   IF UserSetup.GET(USERID) THEN
                     VALIDATE("Order Manager", UserSetup.Salesperson);
               //C019333.en

               IF (NOT gUseFilledOrderDateTime) THEN BEGIN
                 IF NOT GUIALLOWED THEN BEGIN
                   "Receiving Date":= TODAY;
                 END ELSE BEGIN
                   "Receiving Date":= WORKDATE;
                 END;
                 "Receiving Time":= TIME;
               END;
               "Received by" := USERID;
               "Next Step" := "Next Step"::" ";
               "Service Order No." := '';
               "Sales Document No." := '';
               "Project (Dest)" := '';
               "Previous Call No." := '';
               Status := Status::Received;
               CheckUpdateDocRefPoint('I');
               VALIDATE("Progress Scheme", ProgSchemeRec.DetermineProgrScheme("No. Series","No."));
               ProgPhaseRec.CheckProgressScheme(ProgPhaseRec.Type::ServCall, "Progress Scheme", "No.", Status, TODAY, TIME);
               UpdateNextDeadline;
               CheckConsignment;

               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05

               NormalizePostCodeHouseNo;
             END;

    OnModify=BEGIN
               "Modified on" := TODAY;
               "Modified by" := USERID;

               CheckUpdateDocRefPoint('M');
               UpdateNextDeadline;
               NormalizePostCodeHouseNo;
             END;

    OnDelete=VAR
               CommentLine@1100485000 : Record 97;
               lvDocRefPointRec@1100485001 : Record 11020296;
               ServiceText@1210190000 : Record 11012882;
               UpdateAction@1100525000 : 'Insert,Modify,Delete,Rename';
             BEGIN
               DisconnectChain;

               ServActRec.SETRANGE("Service Call No.", "No.");
               ServActRec.DELETEALL(TRUE);

               ServLogRec.SETRANGE("Document Type", ServLogRec."Document Type"::ServCall);
               ServLogRec.SETRANGE("Document No.", "No.");
               ServLogRec.DELETEALL(TRUE);

               ProgPhaseRec.SETRANGE(Type, ProgPhaseRec.Type::ServCall);
               ProgPhaseRec.SETRANGE("Document No.", "No.");
               ProgPhaseRec.DELETEALL(TRUE);

               RefPeriodRec.SETCURRENTKEY(Type, "Document No.");
               RefPeriodRec.SETRANGE(Type, RefPeriodRec.Type::ServCall);
               RefPeriodRec.SETRANGE("Document No.", "No.");
               RefPeriodRec.DELETEALL(TRUE);

               lvDocRefPointRec.SETRANGE(Type, lvDocRefPointRec.Type::ServCall);
               lvDocRefPointRec.SETRANGE("Document No.", "No.");
               IF lvDocRefPointRec.FINDSET() THEN
                 REPEAT
                   lvDocRefPointRec.InsertDocRefPointQueueEntry(UpdateAction::Delete);
                 UNTIL lvDocRefPointRec.NEXT = 0;
               lvDocRefPointRec.DELETEALL;

               CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::"Service Call");
               CommentLine.SETRANGE("No.","No.");
               CommentLine.DELETEALL;

               ServiceText.SETRANGE("Table Name", ServiceText."Table Name"::"Service Call");
               ServiceText.SETRANGE("No.","No.");
               ServiceText.DELETEALL;
             END;

    OnRename=BEGIN
               ERROR(Text999);  //db, 07-01-10: MC-018112
             END;

    CaptionML=ENU=Service Call;
    LookupPageID=Page11012828;
    DrillDownPageID=Page11012828;
  }
  FIELDS
  {
    { 10  ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  ServSetup.GET;
                                                                  NoSeriesMgt.TestManual(ServSetup."Call Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 20  ;   ;Customer No.        ;Code20        ;TableRelation=Customer.No.;
                                                   OnValidate=VAR
                                                                ServiceContract@1100528600 : Record 11012812;
                                                                lvBillToCust@1100485000 : Code[20];
                                                              BEGIN
                                                                IF CurrFieldNo = FIELDNO("Customer No.") THEN BEGIN
                                                                  IF "Service Location No." <> '' THEN BEGIN
                                                                    ServLocRec.GET("Service Location No.");
                                                                    IF ("Service Contract No." = '') AND (ServLocRec."Customer No." <> '') THEN BEGIN
                                                                      TESTFIELD("Customer No.", ServLocRec."Customer No.")
                                                                    END ELSE
                                                                      IF "Service Contract No." <> '' THEN
                                                                        IF ServiceContract.GET("Service Contract No.") THEN
                                                                          IF ServiceContract."Customer No." <> '' THEN
                                                                            TESTFIELD("Customer No.", ServiceContract."Customer No.");
                                                                  END;
                                                                  CheckOrderNoCustomer;  //db, 16-11-09: M13354
                                                                END;
                                                                IF "Customer No." <> xRec."Customer No." THEN
                                                                  ValidateAddressData(1);

                                                                IF NOT CustRec.GET("Customer No.") THEN CustRec.INIT;
                                                                IF CustRec."Bill-to Customer No." <> '' THEN
                                                                  lvBillToCust := CustRec."Bill-to Customer No."
                                                                ELSE
                                                                  lvBillToCust := "Customer No.";
                                                                IF ("Bill-to Customer No." = '') OR ("Customer No." = '') THEN BEGIN  //db, 23-02-09: M13533
                                                                  VALIDATE("Bill-to Customer No.",lvBillToCust);
                                                                  CheckInvoiceAddress;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Customer No. }
    { 21  ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                SyncServiceLocationData(CurrFieldNo);
                                                              END;

                                                   CaptionML=ENU=Name }
    { 22  ;   ;Address             ;Text50        ;OnValidate=VAR
                                                                lDummy@1210190000 : Text[30];
                                                              BEGIN
                                                              END;

                                                   CaptionML=ENU=Address }
    { 23  ;   ;City                ;Text30        ;FieldClass=Normal;
                                                   TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                Postcode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City }
    { 24  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=VAR
                                                                PostCode@1210190001 : Record 225;
                                                              BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                PostCode.GetTerritoryByPostCodeGroup(City,"Post Code","Territory Code");  //db, 11-02-13: C005566
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code;
                                                   Editable=Yes }
    { 25  ;   ;Customer Name       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Customer No.)));
                                                   CaptionML=ENU=Customer Name;
                                                   Editable=No }
    { 26  ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 27  ;   ;Address 2           ;Text50        ;OnValidate=VAR
                                                                lDummy@1210190000 : Text[30];
                                                              BEGIN
                                                              END;

                                                   CaptionML=ENU=Address 2 }
    { 28  ;   ;County              ;Text30        ;CaptionML=ENU=County;
                                                   Editable=Yes }
    { 29  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region Code }
    { 30  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 40  ;   ;Contact Name        ;Text50        ;OnValidate=BEGIN
                                                                SyncServiceLocationData(CurrFieldNo);
                                                              END;

                                                   CaptionML=ENU=Contact Name }
    { 45  ;   ;Phone No.           ;Text30        ;OnValidate=BEGIN
                                                                SyncServiceLocationData(CurrFieldNo);
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 50  ;   ;Priority            ;Code10        ;TableRelation="Service Priority" WHERE (Contract Filter=FIELD(Service Contract No.));
                                                   OnValidate=BEGIN
                                                                ServLogRec.StoreChange(1, "No.", ServLogRec.FormatDescription(FIELDCAPTION(Priority), FORMAT(xRec.Priority), FORMAT(Priority)));
                                                                CheckDeactivateConsignment;
                                                              END;

                                                   CaptionML=ENU=Priority }
    { 55  ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO(Status) THEN
                                                                  IF MODIFY(TRUE) THEN
                                                                    ProgPhaseRec.CheckProgressScheme(ProgPhaseRec.Type::ServCall, "Progress Scheme", "No.", Status, TODAY, TIME);

                                                                ServLogRec.StoreChange(1, "No.", ServLogRec.FormatDescription(FIELDCAPTION(Status), FORMAT(xRec.Status), FORMAT(Status)));


                                                                IF xRec.Status <> Status THEN
                                                                  IF (Status = Status::Finished) OR (Status = Status::Cancelled) THEN BEGIN
                                                                    IF "Date Closed" = 0D THEN BEGIN
                                                                      "Date Closed" := TODAY;
                                                                    END;
                                                                  END ELSE
                                                                     "Date Closed" := 0D;
                                                              END;

                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Received,In Process,Finished,Cancelled;
                                                   OptionString=Received,In Process,Finished,Cancelled;
                                                   BlankZero=No }
    { 60  ;   ;Problem Text OLD    ;Text250       ;OnValidate=BEGIN
                                                                TESTFIELD("Problem Text OLD", '');
                                                              END;

                                                   CaptionML=ENU=Problem Text OLD }
    { 70  ;   ;Internal Text OLD   ;Text250       ;OnValidate=BEGIN
                                                                TESTFIELD("Internal Text OLD", '');
                                                              END;

                                                   CaptionML=ENU=Internal Text OLD }
    { 75  ;   ;Solution Text OLD   ;Text250       ;OnValidate=BEGIN
                                                                TESTFIELD("Solution Text OLD", '');
                                                              END;

                                                   CaptionML=ENU=Solution Text OLD }
    { 80  ;   ;Your Reference      ;Text50        ;CaptionML=ENU=Your Reference }
    { 85  ;   ;E-Mail              ;Text80        ;OnValidate=BEGIN
                                                                SyncServiceLocationData(CurrFieldNo);
                                                              END;

                                                   CaptionML=ENU=E-Mail }
    { 90  ;   ;Assigned to         ;Code20        ;TableRelation=Employee.No.;
                                                   CaptionML=ENU=Assigned to }
    { 95  ;   ;Next Step           ;Option        ;OnValidate=VAR
                                                                ServiceOrder@1100528600 : Record 11012823;
                                                              BEGIN
                                                                IF ("Service Order No." <> '') OR ("Sales Document No." <> '') OR ("Project (Dest)" <> '') THEN
                                                                  ERROR(Text001, FIELDCAPTION("Next Step"), TransferDocument);

                                                                IF "Next Step" = "Next Step"::ServiceOrder THEN BEGIN
                                                                  IF CustRec.GET("Customer No.") THEN
                                                                    CustRec.CheckBlockedCustomerByTableNo(DATABASE::"Service Order", ServiceOrder.FIELDNO("Customer No."));
                                                                  IF "Customer No." <> "Bill-to Customer No." THEN
                                                                    IF CustRec.GET("Bill-to Customer No.") THEN
                                                                      CustRec.CheckBlockedCustomerByTableNo(DATABASE::"Service Order", ServiceOrder.FIELDNO("Bill-to Customer No."));
                                                                  IF ServContrRec.GET("Service Contract No.") THEN
                                                                    ServContrRec.TESTFIELD(Blocked, FALSE);
                                                                  CheckCreditLimit;
                                                                END;

                                                                IF "Next Step" <> "Next Step"::" " THEN  BEGIN
                                                                  IF CustRec.GET("Customer No.") THEN BEGIN
                                                                    CustRec.CheckCustomerStatus("Customer No.");
                                                                    IF "Customer No." <> "Bill-to Customer No." THEN
                                                                      CustRec.CheckCustomerStatus("Bill-to Customer No.");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Next Step;
                                                   OptionCaptionML=ENU=" ,Create Service Order,Create Sales Quote,Create Sales Order,Create Project,Create Small Project";
                                                   OptionString=[ ,ServiceOrder,SalesQuote,SalesOrder,Project,SmallProject] }
    { 100 ;   ;Receiving Date      ;Date          ;CaptionML=ENU=Receiving Date;
                                                   Editable=No }
    { 105 ;   ;Receiving Time      ;Time          ;CaptionML=ENU=Receiving Time;
                                                   Editable=No }
    { 110 ;   ;Received by         ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserCode@1210190000 : Code[50];
                                                              UserMgt@1210190001 : Codeunit 418;
                                                            BEGIN
                                                              UserCode := "Received by";
                                                              UserMgt.LookupUserID(UserCode);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Received by;
                                                   Editable=No }
    { 120 ;   ;Modified on         ;Date          ;CaptionML=ENU=Modified on;
                                                   Editable=No }
    { 130 ;   ;Modified by         ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserCode@1210190000 : Code[50];
                                                              UserMgt@1210190001 : Codeunit 418;
                                                            BEGIN
                                                              UserCode := "Modified by";
                                                              UserMgt.LookupUserID(UserCode);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Modified by;
                                                   Editable=No }
    { 140 ;   ;Service Order No.   ;Code20        ;TableRelation="Service Order";
                                                   CaptionML=ENU=Service Order No.;
                                                   Editable=No }
    { 141 ;   ;Service Order Description;Text50   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order".Description WHERE (No.=FIELD(Service Order No.)));
                                                   CaptionML=ENU=Service Order Description;
                                                   Editable=No }
    { 142 ;   ;Service Order Status;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order".Status WHERE (No.=FIELD(Service Order No.)));
                                                   CaptionML=ENU=Service Order Status;
                                                   OptionCaptionML=ENU=Open,,In Process,Technical Finished,Administrative Finished,Finished,Cancelled;
                                                   OptionString=Open,,In Process,Technical Finished,Administrative Finished,Finished,Cancelled;
                                                   Editable=No }
    { 150 ;   ;Service Location No.;Code20        ;TableRelation="Service Location";
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Plant Location",''); //DP00195
                                                                ValidateAddressData(1);
                                                                ValidateOtherData;
                                                                DetermineBilltoCustomerbySC;
                                                                DetermineLimitBudget;
                                                                CheckDimension;
                                                                CheckConsignment;

                                                                UpdateVessel; //kkleermaker.n, 110817, M28697
                                                                FillSubcontractor;
                                                                FillPreferredEmployee;
                                                                IF (CurrFieldNo <> 0) AND (CurrFieldNo <> FIELDNO("Service Contract No.")) THEN BEGIN
                                                                  IF "Service Contract No." = '' THEN
                                                                    DetermineContractNo;
                                                                  IF "Object No." = '' THEN
                                                                    DetermineObjectNo;
                                                                END;
                                                                DetermineMasterProject;
                                                              END;

                                                   CaptionML=ENU=Service Location No. }
    { 151 ;   ;Service Location Description;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location".Description WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=ENU=Service Location Description;
                                                   Editable=No }
    { 152 ;   ;Remote Control      ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location"."Remote Control" WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=ENU=Remote Control;
                                                   Editable=No }
    { 153 ;   ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   OnValidate=BEGIN
                                                                CheckConsignment;
                                                              END;

                                                   CaptionML=ENU=Territory Code }
    { 176 ;   ;Plan during Clock Time;Boolean     ;CaptionML=ENU=Plan during Clock Time }
    { 180 ;   ;Expected Date       ;Date          ;CaptionML=ENU=Expected Date }
    { 181 ;   ;Expected Time       ;Time          ;CaptionML=ENU=Expected Time }
    { 182 ;   ;Expected Hours      ;Decimal       ;OnValidate=BEGIN
                                                                DetermineLimitBudgetExceeded;
                                                              END;

                                                   CaptionML=ENU=Expected Hours }
    { 190 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 191 ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Service Call),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 192 ;   ;Comment (Problem Text);Boolean     ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Service Text" WHERE (Table Name=CONST(Service Call),
                                                                                           No.=FIELD(No.),
                                                                                           Table Field=CONST(60)));
                                                   CaptionML=ENU=Comment Comment (Problem Text);
                                                   Editable=No }
    { 193 ;   ;Comment (Internal Text);Boolean    ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Service Text" WHERE (Table Name=CONST(Service Call),
                                                                                           No.=FIELD(No.),
                                                                                           Table Field=CONST(70)));
                                                   CaptionML=ENU=Comment (Internal Text);
                                                   Editable=No }
    { 194 ;   ;Comment (Solution Text);Boolean    ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Service Text" WHERE (Table Name=CONST(Service Call),
                                                                                           No.=FIELD(No.),
                                                                                           Table Field=CONST(75)));
                                                   CaptionML=ENU=Comment (Solution Text);
                                                   Editable=No }
    { 200 ;   ;Project (Orig)      ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location"."Project No." WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=ENU=Project (Origin);
                                                   Editable=No }
    { 202 ;   ;Project (Dest)      ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=ENU=Project (Destination);
                                                   Editable=No }
    { 210 ;   ;Calling Contact     ;Text100       ;CaptionML=ENU=Calling Contact }
    { 211 ;   ;Calling Account     ;Text100       ;CaptionML=ENU=Calling Account }
    { 212 ;   ;Calling Phone No.   ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Calling Phone No. }
    { 220 ;   ;Object No.          ;Code20        ;TableRelation=Service-Object;
                                                   OnValidate=VAR
                                                                ServiceObject@1100528600 : Record 11071691;
                                                                ServiceContract@1100528603 : Record 11012812;
                                                                MaintenanceManagementCU@1100528601 : Codeunit 11012829;
                                                                ServiceContractNo@1100528602 : Code[20];
                                                              BEGIN
                                                                IF "Object No." <> '' THEN BEGIN
                                                                  ServiceObject.GET("Object No.");
                                                                  ServiceObject.TESTFIELD(Blocked, FALSE);
                                                                  ServiceObject.CALCFIELDS(Discipline, "Trade Speciality");
                                                                  VALIDATE(Discipline, ServiceObject.Discipline);
                                                                  VALIDATE("Trade Speciality", ServiceObject."Trade Speciality");

                                                                  IF (("Service Location No." <> '') AND NOT ServiceObject.BelongsToServiceLocation("Service Location No.")) OR
                                                                     ("Service Location No." = '')
                                                                  THEN
                                                                    VALIDATE("Service Location No.", ServiceObject.GetPrefServiceLocationNo(FALSE));

                                                                  IF "Service Contract No." = '' THEN BEGIN
                                                                    IF MaintenanceManagementCU.GetNoOfActualContractsForObj("Object No.", TODAY, ServiceContractNo) = 1 THEN
                                                                      VALIDATE("Service Contract No.", ServiceContractNo)
                                                                  END ELSE BEGIN
                                                                    ServiceContract.GET("Service Contract No.");
                                                                    ServiceContract.TestObjectBelongtoContract("Object No.", TODAY);
                                                                  END;
                                                                  FillSubcontractor;
                                                                END ELSE BEGIN
                                                                  VALIDATE(Discipline, '');
                                                                  VALIDATE("Trade Speciality", '');
                                                                END;
                                                                FillPreferredEmployee;
                                                                DetermineLimitBudgetExceeded;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Object No. }
    { 221 ;   ;Object Description  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Object.Description WHERE (No.=FIELD(Object No.)));
                                                   CaptionML=ENU=Object Description;
                                                   Editable=No }
    { 222 ;   ;Object Description 2;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Object."Description 2" WHERE (No.=FIELD(Object No.)));
                                                   CaptionML=ENU=Object Description 2;
                                                   Editable=No }
    { 225 ;   ;Object Customer     ;Code20        ;CaptionML=ENU=Object Customer }
    { 230 ;   ;Sales Document No.  ;Code20        ;CaptionML=ENU=Sales Document No.;
                                                   Editable=No }
    { 260 ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract.No.;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Plant Location",''); //DP00195
                                                                IF ServContrRec.GET("Service Contract No.") THEN BEGIN
                                                                  ServSetup.GET;
                                                                  //db.sn, 18-12-07
                                                                  VALIDATE("Customer No.", ServContrRec."Customer No.");
                                                                //C022970.so
                                                                //IF ServContrRec."Bill-to Customer No." <> '' THEN  //db, 29-01-08: M13786
                                                                //  VALIDATE("Bill-to Customer No.", ServContrRec."Bill-to Customer No.");  //db, 22-05-08: M11126
                                                                //IF ServContrRec."Alternative Bill-to Address" <> '' THEN
                                                                //  VALIDATE("Alternative Bill-to Address", ServContrRec."Alternative Bill-to Address")
                                                                //ELSE
                                                                //  CheckInvoiceAddress;  //db, 22-05-08: M11126
                                                                //C022970.eo
                                                                //C022970.sn
                                                                   DetermineBilltoCustomerbySC;
                                                                //C022970.en
                                                                  //db.en, 18-12-07
                                                                  CheckContractStatus(ServContrRec);  //db, 10-06-10: M19645
                                                                  "Service Type" := ServContrRec."Service Type";
                                                                  "Global Dimension 1 Code" := ServContrRec."Global Dimension 1 Code";
                                                                  CheckDimension;
                                                                  IF "Your Reference" = '' THEN //mg, 20-12-11: M31690
                                                                    "Your Reference" := ServContrRec."Your Reference";
                                                                  IF ServSetup."Order Manager based on" = ServSetup."Order Manager based on"::ContractMgt THEN
                                                                    "Order Manager" := ServContrRec."Contract Manager";  //C019333
                                                                  IF ServSetup."Assign To" = ServSetup."Assign To"::ContractMgt THEN
                                                                    "Assigned to" := ServContrRec."Contract Manager";
                                                                  CALCFIELDS("Service Contract Description");
                                                                  DetermineLimitBudget;
                                                                  IF "Object No." = '' THEN
                                                                    DetermineObjectNo;
                                                                END ELSE
                                                                  IF "Service Contract No." = '' THEN
                                                                    VALIDATE("Service Location No.");

                                                                CheckContrDiscPrio;
                                                                FillSubcontractor;
                                                                FillPreferredEmployee;
                                                                DetermineLimitBudgetExceeded;
                                                              END;

                                                   CaptionML=ENU=Service Contract No. }
    { 261 ;   ;Service Contract Description;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Contract.Description WHERE (No.=FIELD(Service Contract No.)));
                                                   CaptionML=ENU=Service Contract Description;
                                                   Editable=No }
    { 265 ;   ;Service Type        ;Code20        ;TableRelation="Service Type".Code;
                                                   OnValidate=BEGIN
                                                                IF ServTypeRec.GET("Service Type") THEN
                                                                  IF ServTypeRec."Department Code" <> '' THEN
                                                                    VALIDATE("Global Dimension 1 Code", ServTypeRec."Department Code");
                                                              END;

                                                   CaptionML=ENU=Service Type }
    { 270 ;   ;Order Kind          ;Code10        ;TableRelation="Service Order Indication".Code WHERE (Indication=CONST(Kind));
                                                   OnValidate=BEGIN
                                                                CheckExpectedHours(0, "Order Kind");
                                                              END;

                                                   CaptionML=ENU=Order Kind }
    { 275 ;   ;Order Type          ;Code10        ;TableRelation="Service Order Indication".Code WHERE (Indication=CONST(Type));
                                                   OnValidate=BEGIN
                                                                CheckExpectedHours(1, "Order Type");
                                                              END;

                                                   CaptionML=ENU=Order Type }
    { 290 ;   ;Mobile Phone No.    ;Text30        ;OnValidate=BEGIN
                                                                SyncServiceLocationData(CurrFieldNo);
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Mobile Phone No. }
    { 300 ;   ;Phone No. 2         ;Text30        ;OnValidate=BEGIN
                                                                SyncServiceLocationData(CurrFieldNo);
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. 2 }
    { 310 ;   ;Fax No.             ;Text30        ;OnValidate=BEGIN
                                                                SyncServiceLocationData(CurrFieldNo);
                                                              END;

                                                   CaptionML=ENU=Fax No. }
    { 320 ;   ;Limit Budget Labor  ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Limit Budget Total", "Limit Budget Labor" + "Limit Budget Material");
                                                              END;

                                                   CaptionML=ENU=Limit Budget Labor;
                                                   AutoFormatType=1 }
    { 321 ;   ;Limit Budget Hours  ;Decimal       ;OnValidate=BEGIN
                                                                DetermineLimitBudgetExceeded
                                                              END;

                                                   CaptionML=ENU=Limit Budget Hours;
                                                   DecimalPlaces=2:5 }
    { 322 ;   ;Limit Budget Material;Decimal      ;OnValidate=BEGIN
                                                                VALIDATE("Limit Budget Total", "Limit Budget Labor" + "Limit Budget Material");
                                                              END;

                                                   CaptionML=ENU=Limit Budget Material;
                                                   AutoFormatType=1 }
    { 325 ;   ;Limit Budget Total  ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Limit Budget Labor" <> 0) OR ("Limit Budget Material" <> 0) THEN
                                                                  TESTFIELD("Limit Budget Total", "Limit Budget Labor" + "Limit Budget Material");
                                                                DetermineLimitBudgetExceeded;
                                                              END;

                                                   CaptionML=ENU=Limit Budget Total;
                                                   AutoFormatType=1 }
    { 330 ;   ;Name Assigned to    ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Assigned to)));
                                                   CaptionML=ENU=Name Assigned to;
                                                   Editable=No }
    { 360 ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                CheckDepartment;
                                                                CheckConsignment;
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");  //db, 19-08-09
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 370 ;   ;Previous Call No.   ;Code20        ;TableRelation="Service Call".No. WHERE (No.=FIELD(Previous Call No.));
                                                   OnValidate=BEGIN
                                                                CheckParentChildCall;
                                                              END;

                                                   CaptionML=ENU=Previous Call No. }
    { 380 ;   ;Progress Scheme     ;Code10        ;TableRelation="Progress Scheme".Code;
                                                   OnValidate=BEGIN
                                                                ProgPhaseRec.EditProgressScheme(ProgPhaseRec.Type::ServCall, "Progress Scheme", "No.");
                                                              END;

                                                   CaptionML=ENU=Progress Scheme }
    { 400 ;   ;Discipline          ;Code10        ;TableRelation=Discipline;
                                                   OnValidate=BEGIN
                                                                IF NOT TradeSpecRec.GET(Discipline, "Trade Speciality") THEN
                                                                  TradeSpecRec.INIT;
                                                                IF TradeSpecRec.Discipline <> Discipline THEN
                                                                  "Trade Speciality" := '';

                                                                CheckConsignment;
                                                              END;

                                                   CaptionML=ENU=Discipline }
    { 401 ;   ;Trade Speciality    ;Code10        ;TableRelation="Trade Speciality".Code WHERE (Discipline=FIELD(Discipline));
                                                   OnValidate=BEGIN
                                                                CheckConsignment;  //db, 15-05-11
                                                              END;

                                                   CaptionML=ENU=Trade Speciality }
    { 410 ;   ;Employee No.        ;Code20        ;TableRelation="Resource (WOP)" WHERE (Type=CONST(Employee));
                                                   OnValidate=VAR
                                                                ResourceMgtWorkOrderPlan@1100528600 : Codeunit 11229277;
                                                              BEGIN
                                                                //AssistEditEmployee(0);  //DP00465.o

                                                                IF (Watch = '') AND ("Employee No." = '') THEN BEGIN
                                                                  "Export to FSA" := FALSE;  //db, 07-07-08: M12269
                                                                  "Plan during Clock Time" := FALSE;  //db, 15-06-11: M24526
                                                                END;
                                                                ResourceMgtWorkOrderPlan.TestResourceWithinCompanyPlanGroup("Employee No.");
                                                                DetermineLimitBudgetExceeded;
                                                                CALCFIELDS("Employee Name");
                                                              END;

                                                   CaptionML=ENU=Employee No.;
                                                   Description=DP00465, based on Resource }
    { 415 ;   ;Employee Name       ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Resource (WOP)".Name WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=ENU=Employee Name;
                                                   Editable=No }
    { 420 ;   ;Subcontractor       ;Code20        ;TableRelation="Resource (WOP)" WHERE (Type=CONST(Subcontractor));
                                                   OnValidate=VAR
                                                                ResourceMgtWorkOrderPlan@1100528600 : Codeunit 11229277;
                                                              BEGIN
                                                                ResourceMgtWorkOrderPlan.TestResourceWithinCompanyPlanGroup(Subcontractor);
                                                                CALCFIELDS("Subcontractor Name");
                                                              END;

                                                   CaptionML=ENU=Subcontractor }
    { 425 ;   ;Subcontractor Name  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Resource (WOP)".Name WHERE (No.=FIELD(Subcontractor)));
                                                   CaptionML=ENU=Subcontractor Name;
                                                   Editable=No }
    { 431 ;   ;Next Deadline       ;DateTime      ;CaptionML=ENU=Next Deadline;
                                                   Description=W014185;
                                                   Editable=No }
    { 435 ;   ;Next Reference Period;Code10       ;TableRelation="Reference Period".Code WHERE (Type=CONST(ServCall),
                                                                                                Document No.=FIELD(No.));
                                                   CaptionML=ENU=Next Reference Period;
                                                   Editable=No }
    { 440 ;   ;Watch               ;Code10        ;TableRelation=Watch;
                                                   OnValidate=VAR
                                                                lvConsTimeRec@1100485000 : Record 11012864;
                                                                lvText000@1100485001 : TextConst 'ENU=Time exceeds %1';
                                                                lvConsRosterRec@1100485002 : Record 11012865;
                                                                lvSkipCheck@1100485003 : Boolean;
                                                              BEGIN
                                                                IF NOT CheckConsignmentTime(lvConsTimeRec) THEN BEGIN
                                                                  IF Watch = '' THEN
                                                                    lvSkipCheck := TRUE
                                                                  ELSE
                                                                    MESSAGE(lvText000, lvConsRosterRec.TABLECAPTION);
                                                                END;

                                                                IF lvSkipCheck = FALSE THEN BEGIN
                                                                  IF NOT ServLocRec.GET("Service Location No.") THEN ServLocRec.INIT;
                                                                  IF ServLocRec.Watch <> '' THEN BEGIN
                                                                    //TESTFIELD(Watch, ServLocRec.Watch);  //db, 09-05-07 (default, not required)
                                                                  END ELSE BEGIN
                                                                    IF Watch <> '' THEN
                                                                      AssistEditWatch(FALSE);
                                                                  END;
                                                                END;

                                                                IF (Watch = '') AND ("Employee No." = '') THEN BEGIN
                                                                  "Export to FSA" := FALSE;  //db, 07-07-08: M12269
                                                                  "Plan during Clock Time" := FALSE;  //db, 15-06-11: M24526
                                                                END;

                                                                CALCFIELDS("Watch Description");
                                                              END;

                                                   CaptionML=ENU=Watch }
    { 441 ;   ;Watch Description   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Watch.Description WHERE (Code=FIELD(Watch)));
                                                   CaptionML=ENU=Watch Description;
                                                   Editable=No }
    { 450 ;   ;Order No. Customer  ;Text50        ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Order No. Customer") THEN BEGIN
                                                                  IF Origin = Origin::Dispatch THEN
                                                                    FIELDERROR(Origin);
                                                                  CheckOrderNoCustomer;  //db, 16-11-09: M13354
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Order No. Customer }
    { 460 ;   ;Export to FSA       ;Boolean       ;OnValidate=VAR
                                                                lvProjSetup@1100485000 : Record 315;
                                                                Resource@1100529000 : Record 11229278;
                                                              BEGIN
                                                                IF NOT "Export to FSA" THEN EXIT;

                                                                lvProjSetup.GET;
                                                                IF (NOT lvProjSetup."Field Service Active") AND (NOT lvProjSetup."4PS-Mobile Active") THEN BEGIN
                                                                  "Export to FSA" := FALSE;  //* No (error)message, just switch off
                                                                  EXIT;
                                                                END;

                                                                //DP00465.sc (Resource io EmplRec)
                                                                IF "Employee No." <> '' THEN BEGIN
                                                                  Resource.GET("Employee No.");
                                                                  Resource.TESTFIELD("Active in FSA");
                                                                END;
                                                                //DP00465.ec
                                                              END;

                                                   CaptionML=ENU=Export to Field Service }
    { 465 ;   ;Publish on Subcontr. Portal;Boolean;OnValidate=VAR
                                                                SubcontPortSetup@1100528600 : Record 11126402;
                                                                ResourceWOP@1100528601 : Record 11229278;
                                                                WorkOrderReferencePoint@1100528602 : Record 11229282;
                                                                SubcontrPortLocation@1100528603 : Record 11126403;
                                                                ServiceOrder@1100528604 : Record 11012823;
                                                                SubcontPortVendor@1100528605 : Record 11126400;
                                                              BEGIN
                                                                IF NOT "Publish on Subcontr. Portal" THEN
                                                                  EXIT;

                                                                IF NOT SubcontPortSetup.READPERMISSION THEN
                                                                  EXIT;
                                                                SubcontPortSetup.GET('1');
                                                                SubcontPortSetup.TESTFIELD("Subcontracting Portal Active");

                                                                TESTFIELD(Subcontractor);
                                                                ResourceWOP.GET(Subcontractor);
                                                                ResourceWOP.TESTFIELD(Type, ResourceWOP.Type::Subcontractor);
                                                                ResourceWOP.TESTFIELD(Company, COMPANYNAME);
                                                              END;

                                                   CaptionML=ENU=Publish on Subcontractor Portal }
    { 470 ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                ValidateAddressData(2);
                                                              END;

                                                   CaptionML=ENU=Bill-to Customer No. }
    { 480 ;   ;Alternative Bill-to Address;Code10 ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Bill-to Customer No.),
                                                                                               Billing Address=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                CheckInvoiceAddress;
                                                              END;

                                                   CaptionML=ENU=Alternative Bill-to Address }
    { 481 ;   ;Bill-to Name        ;Text50        ;CaptionML=ENU=Bill-to Name;
                                                   Editable=No }
    { 482 ;   ;Bill-to Name 2      ;Text50        ;CaptionML=ENU=Bill-to Name 2;
                                                   Editable=No }
    { 483 ;   ;Bill-to Address     ;Text50        ;CaptionML=ENU=Bill-to Address;
                                                   Editable=No }
    { 484 ;   ;Bill-to Address 2   ;Text50        ;CaptionML=ENU=Bill-to Address 2;
                                                   Editable=No }
    { 485 ;   ;Bill-to Post Code   ;Code20        ;CaptionML=ENU=Bill-to Post Code;
                                                   Editable=No }
    { 486 ;   ;Bill-to City        ;Text30        ;CaptionML=ENU=Bill-to City;
                                                   Editable=No }
    { 500 ;   ;Latest Reference Period;Code10     ;FieldClass=FlowField;
                                                   CalcFormula=Max("Reference Period".Code WHERE (Type=CONST(ServCall),
                                                                                                  Document No.=FIELD(No.),
                                                                                                  Ending Date-Time=FILTER(<>'')));
                                                   CaptionML=ENU=Latest Reference Period;
                                                   Editable=No }
    { 501 ;   ;Latest Reference Period Time;DateTime;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Max("Reference Period"."Ending Date-Time" WHERE (Type=CONST(ServCall),
                                                                                                                Document No.=FIELD(No.),
                                                                                                                Ending Date-Time=FILTER(<>'')));
                                                   CaptionML=ENU=Latest Reference Period Time;
                                                   Editable=No }
    { 505 ;   ;Actual Reference Point;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Document Reference Point"."Reference Point" WHERE (Type=CONST(ServCall),
                                                                                                                          Document No.=FIELD(No.),
                                                                                                                          Actual=CONST(Yes)));
                                                   CaptionML=ENU=Actual Reference Point;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 506 ;   ;Actual Reference Point Desc;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Reference Point".Description WHERE (No.=FIELD(Actual Reference Point)));
                                                   CaptionML=ENU=Actual Reference Point Description;
                                                   Editable=No }
    { 507 ;   ;Actual Reference Point Time;DateTime;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Document Reference Point"."Date-Time (modified)" WHERE (Type=CONST(ServCall),
                                                                                                                               Document No.=FIELD(No.),
                                                                                                                               Actual=CONST(Yes)));
                                                   CaptionML=ENU=Acutal Reference Point Time;
                                                   Editable=No }
    { 520 ;   ;Prospect            ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Contact Business Relation"."Contact No." WHERE (No.=FIELD(Customer No.),
                                                                                                                       Link to Table=CONST(Customer)));
                                                   CaptionML=ENU=Prospect;
                                                   Editable=No }
    { 530 ;   ;Call Kind           ;Code10        ;TableRelation="Service Call Indication".Code WHERE (Indication=CONST(Kind));
                                                   CaptionML=ENU=Call Kind }
    { 540 ;   ;Call Type           ;Code10        ;TableRelation="Service Call Indication".Code WHERE (Indication=CONST(Type));
                                                   CaptionML=ENU=Call Type }
    { 550 ;   ;Problem Text Code OLD;Code10       ;TableRelation="Standard Service Text".Code WHERE (Type=CONST(Problem));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Problem Text Code OLD", '');
                                                              END;

                                                   CaptionML=ENU=Problem Text Code OLD }
    { 560 ;   ;Internal Text Code OLD;Code10      ;TableRelation="Standard Service Text".Code WHERE (Type=CONST(Internal));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Internal Text Code OLD", '');
                                                              END;

                                                   CaptionML=ENU=Internal Text Code OLD }
    { 570 ;   ;Solution Text Code OLD;Code10      ;TableRelation="Standard Service Text".Code WHERE (Type=CONST(Solution));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Solution Text Code OLD", '');
                                                              END;

                                                   CaptionML=ENU=Solution Text Code OLD }
    { 580 ;   ;Problem             ;Code10        ;TableRelation="Service Analysis".Code WHERE (Analysis Type=CONST(Problem));
                                                   OnValidate=VAR
                                                                ServiceSetup@1100528600 : Record 11012800;
                                                              BEGIN
                                                                UpdateCustomerProblem;
                                                                ServiceSetup.GET;
                                                                IF ServiceSetup."Problem Desc. as Call Descr." THEN BEGIN
                                                                  CALCFIELDS("Description Problem");
                                                                  VALIDATE(Description, "Description Problem");
                                                                END;
                                                                ApplyProblemCodeAdditionalInfo;
                                                                InsertServiceText(0, Problem, 60);
                                                              END;

                                                   OnLookup=VAR
                                                              ServiceAnalysis@1100525000 : Record 11012842;
                                                            BEGIN
                                                              GetFilteredProblemsOnDisciplines(ServiceAnalysis);
                                                              GetFilteredProblemsOnSUP(ServiceAnalysis);
                                                              IF PAGE.RUNMODAL(PAGE::"Service Analysis (Problem)", ServiceAnalysis) = ACTION::LookupOK THEN
                                                                VALIDATE(Problem, ServiceAnalysis.Code);
                                                            END;

                                                   CaptionML=ENU=Problem }
    { 581 ;   ;Description Problem ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Analysis".Description WHERE (Analysis Type=CONST(Problem),
                                                                                                            Code=FIELD(Problem)));
                                                   CaptionML=ENU=Description Problem;
                                                   Editable=No }
    { 582 ;   ;Customer Problem    ;Code10        ;TableRelation="Customer Service Analysis".Code WHERE (Analysis Type=CONST(Problem),
                                                                                                         Customer No.=FIELD(Customer No.));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Description Customer Problem");
                                                              END;

                                                   CaptionML=ENU=Customer Problem }
    { 583 ;   ;Description Customer Problem;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Customer Service Analysis".Description WHERE (Analysis Type=CONST(Problem),
                                                                                                                     Customer No.=FIELD(Customer No.),
                                                                                                                     Code=FIELD(Customer Problem)));
                                                   CaptionML=ENU=Description Customer Problem;
                                                   Editable=No }
    { 590 ;   ;Cause               ;Code10        ;TableRelation="Service Analysis".Code WHERE (Analysis Type=CONST(Cause));
                                                   OnLookup=VAR
                                                              ServiceAnalysis@1100525000 : Record 11012842;
                                                            BEGIN
                                                              GetFilteredAnalysisOnProblem(Problem, ServiceAnalysis."Analysis Type"::Cause, ServiceAnalysis);
                                                              IF PAGE.RUNMODAL(PAGE::"Service Analysis (Cause)", ServiceAnalysis) = ACTION::LookupOK THEN
                                                                Cause := ServiceAnalysis.Code;
                                                            END;

                                                   CaptionML=ENU=Cause }
    { 591 ;   ;Description Cause   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Analysis".Description WHERE (Analysis Type=CONST(Cause),
                                                                                                            Code=FIELD(Cause)));
                                                   CaptionML=ENU=Description Cause;
                                                   Editable=No }
    { 600 ;   ;Solution            ;Code10        ;TableRelation="Service Analysis".Code WHERE (Analysis Type=CONST(Solution));
                                                   OnLookup=VAR
                                                              ServiceAnalysis@1100525000 : Record 11012842;
                                                            BEGIN
                                                              GetFilteredAnalysisOnProblem(Problem, ServiceAnalysis."Analysis Type"::Solution, ServiceAnalysis);
                                                              IF PAGE.RUNMODAL(PAGE::"Service Analysis (Solution)", ServiceAnalysis) = ACTION::LookupOK THEN
                                                                Solution := ServiceAnalysis.Code;
                                                            END;

                                                   CaptionML=ENU=Solution }
    { 601 ;   ;Description Solution;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Analysis".Description WHERE (Analysis Type=CONST(Solution),
                                                                                                            Code=FIELD(Solution)));
                                                   CaptionML=ENU=Description Solution;
                                                   Editable=No }
    { 610 ;   ;Warranty found at   ;Text50        ;CaptionML=ENU=Warranty found at;
                                                   Editable=No }
    { 620 ;   ;House No.           ;Code20        ;CaptionML=ENU=House No.;
                                                   Description=SERV_CONS }
    { 630 ;   ;House No. Ext.      ;Code10        ;CaptionML=ENU=House No. Extension;
                                                   Description=SERV_CONS }
    { 650 ;   ;Vessel No.          ;Code20        ;TableRelation=Vessel.No.;
                                                   CaptionML=ENU=Vessel No.;
                                                   Editable=No }
    { 660 ;   ;Vessel Name         ;Text30        ;FieldClass=Normal;
                                                   CaptionML=ENU=Vessel Name;
                                                   Editable=No }
    { 670 ;   ;Agent No.           ;Code20        ;TableRelation=Agent;
                                                   CaptionML=ENU=Agent No. }
    { 680 ;   ;Port                ;Code10        ;TableRelation=Port.Code;
                                                   CaptionML=ENU=Port }
    { 690 ;   ;Quay Berth          ;Text30        ;CaptionML=ENU=Quay Berth }
    { 700 ;   ;First Possible Starting Time;Time  ;OnValidate=BEGIN
                                                                CheckPlanLimitDateTime;
                                                              END;

                                                   CaptionML=ENU=First Possible Starting Time }
    { 710 ;   ;Last Possible Ending Time;Time     ;OnValidate=BEGIN
                                                                CheckPlanLimitDateTime;
                                                              END;

                                                   CaptionML=ENU=Last Possible Ending Time }
    { 720 ;   ;First Possible Starting Date;Date  ;OnValidate=BEGIN
                                                                IF ("First Possible Starting Date" > "Last Possible Ending Date") AND ("Last Possible Ending Date" <> 0D) THEN
                                                                  FIELDERROR("First Possible Starting Date",STRSUBSTNO(Text000,FIELDCAPTION("Last Possible Ending Date")));
                                                                IF "First Possible Starting Date" = 0D THEN
                                                                  "Last Possible Ending Date" := 0D;
                                                                //IF "Starting Date" < "First Possible Starting Date" THEN
                                                                //  "Starting Date" := "First Possible Starting Date";
                                                                //IF "Ending Date" > "Last Possible Ending Date" THEN
                                                                //  IF ("Ending Date" <> 0D) AND ("Last Possible Ending Date" <> 0D) THEN
                                                                //   "Ending Date" := "Last Possible Ending Date";

                                                                CheckPlanLimitDateTime;
                                                                //CheckPlanDataFSA;
                                                              END;

                                                   CaptionML=ENU=First Possible Starting Date }
    { 730 ;   ;Last Possible Ending Date;Date     ;OnValidate=BEGIN
                                                                VALIDATE("First Possible Starting Date");
                                                                CheckPlanLimitDateTime;
                                                                //CheckPlanDataFSA;
                                                              END;

                                                   CaptionML=ENU=Last Possible Ending Date }
    { 740 ;   ;Planning Agreement Code;Code10     ;TableRelation="Planning Agreement".Code WHERE (Type=CONST(Plan));
                                                   CaptionML=ENU=Planning Agreement Code;
                                                   Description=SERV_CONS }
    { 750 ;   ;Vessel Service Call ;Boolean       ;CaptionML=ENU=Vessel Service Call }
    { 760 ;   ;Decentral Created   ;Boolean       ;CaptionML=ENU=Decentral Created;
                                                   Description=Mobile;
                                                   Editable=No }
    { 770 ;   ;Plant Location      ;Code20        ;TableRelation="Plant Location".Code;
                                                   OnValidate=VAR
                                                                PlantLocRec@1100525000 : Record 11012554;
                                                              BEGIN
                                                                TESTFIELD("Service Location No.",''); //DP00195
                                                                TESTFIELD("Service Contract No.",''); //DP00195

                                                                IF PlantLocRec.GET("Plant Location") THEN
                                                                  IF PlantLocRec."Service Order No." <>'' THEN
                                                                      ERROR(Text016);

                                                                ValidateAddressData(3);
                                                                ValidateOtherData;
                                                                CheckDimension;
                                                                CheckConsignment;
                                                                UpdateVessel; //kkleermaker.n, 110817, M28697
                                                                FillSubcontractor;
                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Plant Location }
    { 775 ;   ;Plant Location Description;Text50  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Location".Description WHERE (Code=FIELD(Plant Location)));
                                                   CaptionML=ENU=Plant Location Description;
                                                   Editable=No }
    { 780 ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type".Code;
                                                   CaptionML=ENU=Plant Type }
    { 785 ;   ;Plant Type Description;Text50      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Type".Description WHERE (Code=FIELD(Plant Type)));
                                                   CaptionML=ENU=Plant Type Description;
                                                   Editable=No }
    { 790 ;   ;Plant Number        ;Code10        ;TableRelation="Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   OnValidate=VAR
                                                                PlantInventory@1100528801 : Record 11012555;
                                                                OPlantLocation@1100528800 : Code[20];
                                                              BEGIN
                                                                IF ("Plant Number" <> '') AND (xRec."Plant Number" <> "Plant Number") THEN BEGIN
                                                                "Plant Location" := '';
                                                                  IF PlantInventory.GetPlantLocationByPlantNumber("Plant Type", "Plant Number", OPlantLocation) THEN
                                                                    VALIDATE("Plant Location", OPlantLocation);
                                                                END ELSE
                                                                  VALIDATE("Plant Location", '');
                                                              END;

                                                   CaptionML=ENU=Plant Number }
    { 795 ;   ;Plant Number Description;Text50    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Number".Description WHERE (Plant Type=FIELD(Plant Type),
                                                                                                        No.=FIELD(Plant Number)));
                                                   CaptionML=ENU=Plant Number Description;
                                                   Editable=No }
    { 800 ;   ;Cost Component Plant;Code10        ;TableRelation="Cost Component Plant".Code;
                                                   CaptionML=ENU=Cost Component Plant }
    { 810 ;   ;Alternative Plant Loc Address;Code10;
                                                   TableRelation="Plant Location Address"."Address Code" WHERE (Location=FIELD(Plant Location));
                                                   OnValidate=BEGIN
                                                                ValidateAddressData(3);
                                                              END;

                                                   OnLookup=VAR
                                                              PlantLocationAddressesFrm@1100529901 : Page 11012625;
                                                              PlantLocationAddressRec@1100529900 : Record 11012590;
                                                            BEGIN
                                                              PlantLocationAddressRec.SETRANGE(Location,"Plant Location");
                                                              PlantLocationAddressesFrm.SETTABLEVIEW(PlantLocationAddressRec);
                                                              PlantLocationAddressesFrm.LOOKUPMODE := TRUE;
                                                              IF PlantLocationAddressesFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                PlantLocationAddressesFrm.GETRECORD(PlantLocationAddressRec);
                                                                "Alternative Plant Loc Address" := PlantLocationAddressRec."Address Code";
                                                                ValidateAddressData(3);
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Alternative Plant Location Address }
    { 820 ;   ;Firm Planned        ;Boolean       ;CaptionML=ENU=Firm Planned }
    { 830 ;   ;Communication Text Changed;Boolean ;CaptionML=ENU=Communication Text Changed;
                                                   Editable=No }
    { 840 ;   ;Preferred Employee No.;Code20      ;TableRelation="Resource (WOP)";
                                                   OnValidate=VAR
                                                                ServiceSetup@1100528600 : Record 11012800;
                                                                ResourceMgtWorkOrderPlan@1100528601 : Codeunit 11229277;
                                                              BEGIN
                                                                ServiceSetup.GET;
                                                                ResourceMgtWorkOrderPlan.TestResourceWithinCompanyPlanGroup("Preferred Employee No.");
                                                                IF ("Preferred Employee No." <> '') AND (ServiceSetup."Use Pref. Employee as Employee") THEN
                                                                  VALIDATE("Employee No.", "Preferred Employee No.");
                                                              END;

                                                   CaptionML=ENU=Preferred Employee;
                                                   Editable=No }
    { 850 ;   ;Preferred Employee Name;Text50     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Resource (WOP)".Name WHERE (No.=FIELD(Preferred Employee No.)));
                                                   CaptionML=ENU=Name Preferred Employee;
                                                   Editable=No }
    { 860 ;   ;Date Closed         ;Date          ;CaptionML=ENU=Date Closed;
                                                   Description=SCA }
    { 870 ;   ;Service Location Type;Code20       ;TableRelation="Service Location Type";
                                                   OnValidate=VAR
                                                                ServiceLocation@1100528600 : Record 11012801;
                                                              BEGIN
                                                                IF "Service Location No." <> '' THEN
                                                                  IF ServiceLocation.GET("Service Location No.") THEN
                                                                    IF ServiceLocation."Service Location Type" <> '' THEN
                                                                      TESTFIELD("Service Location Type", ServiceLocation."Service Location Type");
                                                              END;

                                                   CaptionML=ENU=Service Location Type }
    { 880 ;   ;Room (SUP)          ;Code20        ;TableRelation="SUP Room".Code;
                                                   OnValidate=VAR
                                                                ServiceUnitPriceManagement@1100525000 : Codeunit 11012846;
                                                              BEGIN
                                                                IF "Room (SUP)" <> xRec."Room (SUP)" THEN BEGIN
                                                                  ServiceUnitPriceManagement.ValidateRoom("Customer No.", "Room (SUP)");
                                                                  VALIDATE("Part (SUP)", '');
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ServiceUnitPriceManagement@1100525000 : Codeunit 11012846;
                                                            BEGIN
                                                              ServiceUnitPriceManagement.LookupRoom("Customer No.", "Service Location Type", "Room (SUP)");
                                                              VALIDATE("Room (SUP)");
                                                            END;

                                                   CaptionML=ENU=Room }
    { 890 ;   ;Part (SUP)          ;Code20        ;TableRelation="SUP Part".Code;
                                                   OnValidate=VAR
                                                                ServiceUnitPriceManagement@1100525000 : Codeunit 11012846;
                                                              BEGIN
                                                                ServiceUnitPriceManagement.ValidatePart("Customer No.", "Part (SUP)");
                                                              END;

                                                   OnLookup=VAR
                                                              ServiceUnitPriceManagement@1100525000 : Codeunit 11012846;
                                                            BEGIN
                                                              ServiceUnitPriceManagement.LookupPart("Customer No.", "Room (SUP)", "Part (SUP)");
                                                              VALIDATE("Part (SUP)");
                                                            END;

                                                   CaptionML=ENU=Part }
    { 900 ;   ;Order Manager       ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Order Manager }
    { 901 ;   ;Order Manager Name  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Order Manager)));
                                                   CaptionML=ENU=Order Manager Name;
                                                   Editable=No }
    { 910 ;   ;Do not show on Service Portal;Boolean;
                                                   CaptionML=ENU=Do not show on Service Portal }
    { 920 ;   ;Origin              ;Option        ;CaptionML=ENU=Origin;
                                                   OptionCaptionML=ENU=Navision,Mobile,Service Portal,Service Call App.,Dispatch,FSA,,,,,,,,Other";
                                                   OptionString=Navision,Mobile,Service Portal,Service Call App.,Dispatch,FSA,,,,,,,,Other;
                                                   Description=Same as T11012823:11012710;
                                                   Editable=No }
    { 930 ;   ;Master Project      ;Code20        ;TableRelation=Job WHERE (Internal Project=CONST(No));
                                                   OnValidate=VAR
                                                                Job@1100528600 : Record 11072003;
                                                                ProjectElement@1100528601 : Record 11012010;
                                                              BEGIN
                                                                IF "Master Project" <> xRec."Master Project" THEN BEGIN
                                                                  VALIDATE("Master Element", '');
                                                                  IF "Master Project" <> '' THEN BEGIN
                                                                    Job.GET("Master Project");
                                                                    IF NOT (Job."Project Status" IN [Job."Project Status"::Production, Job."Project Status"::"Technical Finished"]) THEN
                                                                      Job.FIELDERROR("Project Status");
                                                                  END;
                                                                  IF NOT ProjectElement.GET("Master Project", "Master Element") THEN
                                                                    "Master Element" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Master Project }
    { 940 ;   ;Master Element      ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Master Project));
                                                   CaptionML=ENU=Master Element }
    { 950 ;   ;Limit Budget Exceedance;Boolean    ;CaptionML=ENU=Limit Budget Exceedance;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Customer No.                             }
    {    ;Service Contract No.                     }
    {    ;Service Location No.                     }
    {    ;Previous Call No.                        }
    {    ;City,Address                             }
    {    ;Receiving Date,Receiving Time            }
    {    ;Expected Date,Expected Time              }
    {    ;Next Deadline                            }
    {    ;Global Dimension 1 Code                  }
    {    ;Vessel No.                               }
    {    ;Object No.                               }
    {    ;Post Code,House No.                      }
    {    ;Status,Assigned to                       }
    {    ;Status,Receiving Date                    }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ServSetup@1210190001 : Record 11012800;
      UserSetup@1100485002 : Record 91;
      ServLogRec@1100485009 : Record 11012855;
      ServLocRec@1210190006 : Record 11012801;
      ServContrRec@1210190003 : Record 11012812;
      ServDepRec@1100485007 : Record 11012809;
      ServActRec@1210190008 : Record 5080;
      ServTypeRec@1100485000 : Record 11012814;
      ProgSchemeRec@1100485008 : Record 11020250;
      ProgPhaseRec@1100485010 : Record 11020251;
      RefPeriodRec@1100485011 : Record 11020272;
      ProjRec@1210190004 : Record 11072003;
      CustRec@1210190010 : Record 18;
      EmplRec@1210190005 : Record 5200;
      DimValRec@1210190012 : Record 349;
      Postcode@1210190016 : Record 225;
      TradeSpecRec@1100485003 : Record 11020285;
      ContrPrioRec@1100525001 : Record 11012880;
      DimMgt@1210190011 : Codeunit 408;
      NoSeriesMgt@1210190000 : Codeunit 396;
      Text000@1210190007 : TextConst 'ENU=must occur before %1';
      Text001@1100485017 : TextConst 'ENU=Change %1 not allowed: %2 exist.';
      Text002@1100485012 : TextConst 'ENU=%1 %2 transfered to %3 %4.';
      Text003@1100485019 : TextConst 'ENU=No team leader selected.';
      Text004@1100525005 : TextConst 'ENU=Service Contract %1 expires on %2';
      Text004a@1100525004 : TextConst 'ENU=%3 before Starting Date %2 of Service Contract %1';
      Text004b@1100525006 : TextConst 'ENU=Service Contract %1 with Status %1';
      Text007@1100485005 : TextConst 'ENU=Assignment not accepted: the result would be a never ending chain of Service Calls.';
      Text010@1100485004 : TextConst 'ENU=Do you want to change Address Data: \\Old: \%1 \%2 \%3 \%4 \%5 \\New: \%6 \%7 \%8 \%9 \%10';
      Text011@1100485014 : TextConst 'ENU=%1 is not a valid %2.';
      gUseFilledOrderDateTime@1100485001 : Boolean;
      CheckValidateWatch@1100485016 : Boolean;
      Text013@1100525003 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      Text016@1100525007 : TextConst 'ENU=Plant Location cannot be assigned to a service order';
      Text017@1100528600 : TextConst 'ENU=New Service Portal Call %1 created';
      Text999@1100525002 : TextConst 'ENU=Rename not allowed due to external applications';
      DPA_Management@1100000999 : Codeunit 11012783;
      CurrentGlobalLanguage@1100525000 : Integer;

    PROCEDURE ValidateAddressData@1210190000(lvAction@1100485000 : Integer);
    VAR
      lvText001@1100485002 : TextConst 'ENU=Do you want to change %1?';
      Customer@1100528600 : Record 18;
    BEGIN
      ServSetup.GET;
      CASE lvAction OF
        1: BEGIN
            IF "Service Location No."  <> '' THEN
              ValidateServiceLocAddressData
            ELSE
              ValidateCustomerAddressData;
        END;
        2: BEGIN
          IF "Bill-to Customer No." <> '' THEN BEGIN
            Customer.GET("Bill-to Customer No.");
            IF "Bill-to Customer No." <> "Customer No." THEN
              Customer.CheckBlockedCustomerByTableNo(DATABASE::"Service Call", FIELDNO("Bill-to Customer No."));
            CheckInvoiceAddress;
          END;
        END;
        3: BEGIN
           IF "Plant Location" <> '' THEN
             ValidatePlantLocAddressData
           ELSE BEGIN
             "Plant Location" := '';
             "Plant Type" := '';
             "Plant Number" := '';
             "Cost Component Plant" := '';
             "Alternative Plant Loc Address" := '';
             ValidateCustomerAddressData;
           END;
        END;
      END;

      IF CurrFieldNo <> 0 THEN BEGIN
        IF ((xRec.Name + xRec.Address + xRec.City + xRec."Post Code" + xRec."Contact Name" + xRec."Phone No.") <>
            (Name + Address + City + "Post Code" + "Contact Name" + "Phone No.")) AND
           ((xRec.Name + xRec.Address + xRec.City + xRec."Post Code" + xRec."Contact Name" + xRec."Phone No." <> '')) THEN BEGIN
          IF CONFIRM(Text010, TRUE,
            xRec.Name, xRec.Address, (xRec."Post Code" + '  ' + xRec.City), xRec."Contact Name", xRec."Phone No.",
            Name, Address, ("Post Code" + '  ' + City), "Contact Name", "Phone No.") = FALSE THEN
          BEGIN
            Name := xRec.Name;
            "Name 2" := xRec."Name 2";
            Address := xRec.Address;
            "Address 2" := xRec."Address 2";
            VALIDATE("Post Code", xRec."Post Code");
            City := xRec.City;
            "Country/Region Code" := xRec."Country/Region Code";
            "Contact Name" := xRec."Contact Name";
            "Phone No." := xRec."Phone No.";
            "Phone No. 2" := xRec."Phone No. 2";
            "Mobile Phone No." := xRec."Mobile Phone No.";
            "Fax No." := xRec."Fax No.";
            "E-Mail" := xRec."E-Mail";
            "Territory Code" := xRec."Territory Code";
          END ELSE BEGIN
            xRec.Name := Name;
            xRec."Name 2" := "Name 2";
            xRec.Address := Address;
            xRec."Address 2" := "Address 2";
            xRec.City := City;
            xRec."Country/Region Code" := "Country/Region Code";
            xRec."Post Code" := "Post Code";
            xRec."Contact Name" := "Contact Name";
            xRec."Phone No." := "Phone No.";
            xRec."Phone No. 2" := "Phone No. 2";
            xRec."Mobile Phone No." := "Mobile Phone No.";
            xRec."Fax No." := "Fax No.";
            xRec."E-Mail" := "E-Mail";
            xRec."Territory Code" := "Territory Code";
          END;
        END;
      END;

      CALCFIELDS("Project (Orig)");
    END;

    PROCEDURE ValidateServiceLocAddressData@1100529900();
    VAR
      ServLocRec@1100529901 : Record 11012801;
      CustRec@1100529900 : Record 18;
    BEGIN
      ServLocRec.GET("Service Location No.");
      ServLocRec.TESTFIELD(Blocked, FALSE);
      Name := COPYSTR(ServLocRec.Description, 1, MAXSTRLEN(Name));
      "Name 2" := COPYSTR(ServLocRec."Description 2", 1, MAXSTRLEN("Name 2"));
      Address := ServLocRec.Address;
      "Address 2" := ServLocRec."Address 2";
      City := ServLocRec.City;
      "Country/Region Code" := ServLocRec."Country/Region Code";
      "Post Code" := ServLocRec."Post Code";
      "Contact Name" := ServLocRec."Contact Name";
      "Phone No." := ServLocRec."Phone No.";
      "Phone No. 2" := ServLocRec."Phone No. 2";
      "Mobile Phone No." := ServLocRec."Mobile Phone No.";
      "Fax No." := ServLocRec."Fax No.";
      "E-Mail" := ServLocRec."E-Mail";
      "Territory Code" := ServLocRec."Territory Code";
      Postcode.GetTerritoryByPostCodeGroup(City,"Post Code","Territory Code");  //db, 11-02-13: C005566
      IF ServSetup."Order Manager based on" = ServSetup."Order Manager based on"::LocationMgt THEN
        "Order Manager" := ServLocRec."Location Manager";  //C019333
      IF ServSetup."Assign To" = ServSetup."Assign To"::LocationMgt THEN
        "Assigned to" := ServLocRec."Location Manager";

      //DP00195 sn.
      "Plant Location" := '';
      "Plant Type" := '';
      "Plant Number" := '';
      "Cost Component Plant" := '';
      "Alternative Plant Loc Address" := '';
      //en.
    END;

    PROCEDURE ValidatePlantLocAddressData@1100529906();
    VAR
      PlantLocation@1100529901 : Record 11012554;
      CustRec@1100529900 : Record 18;
      PlantLocationAddress@1100529902 : Record 11012590;
    BEGIN
      PlantLocation.GET("Plant Location");
      PlantLocation.TESTFIELD(Blocked, FALSE);
      "Service Location No." := '';//DP00195
      Name := COPYSTR(PlantLocation.Description, 1, MAXSTRLEN(Name));
      "Name 2" := COPYSTR(PlantLocation."Description 2", 1, MAXSTRLEN("Name 2"));

      IF "Alternative Plant Loc Address" = '' THEN BEGIN
        Address := PlantLocation.Address;
        "Address 2" := PlantLocation."Address 2";
        City := PlantLocation.City;
        "Country/Region Code" := PlantLocation."Country/Region Code";
        "Post Code" := PlantLocation."Post Code";
        "Contact Name" := PlantLocation.Contact;
        "Phone No." := PlantLocation."Phone No.";
        "Phone No. 2" := PlantLocation."Contact Phone No.";
        "Fax No." := PlantLocation."Fax No.";
        "E-Mail" := PlantLocation."E-Mail";
        "Territory Code" := PlantLocation."Territory Code";
      END ELSE BEGIN
        IF PlantLocationAddress.GET("Plant Location","Alternative Plant Loc Address") THEN BEGIN
          Address := PlantLocationAddress.Address;
          "Address 2" := PlantLocationAddress."Address 2";
          City := PlantLocationAddress.City;
          "Country/Region Code" := '';
          "Post Code" := PlantLocationAddress."Post Code";
          "Contact Name" := PlantLocationAddress.Contact;
          "Phone No." := PlantLocationAddress."Phone No.";
          "Phone No. 2" := '';
          "Fax No." := '';
          "E-Mail" := '';
          "Territory Code" := '';
        END;
      END;
      "Mobile Phone No." := '';
      Postcode.GetTerritoryByPostCodeGroup(City,"Post Code","Territory Code");  //db, 11-02-13: C005566
    END;

    PROCEDURE ValidateCustomerAddressData@1100529902();
    VAR
      lvBillToCust@1100529900 : Code[20];
      lvText001@1100529901 : TextConst 'ENU=Do you want to change %1?';
    BEGIN
      IF "Customer No."  <> '' THEN BEGIN
        CustRec.GET("Customer No.");
        CustRec.CheckBlockedCustomerByTableNo(DATABASE::"Service Call", FIELDNO("Customer No."));
        Name := CustRec.Name;
        "Name 2" := CustRec."Name 2";
        Address := CustRec.Address;
        "Address 2" := CustRec."Address 2";
        City := CustRec.City;
        "Country/Region Code" := CustRec."Country/Region Code";
        "Post Code" := CustRec."Post Code";
        "Contact Name" := CustRec.Contact;
        "Phone No." := CustRec."Phone No.";
        "Phone No. 2" := CustRec."Phone No. 2";
        "Mobile Phone No." := CustRec."Mobile Phone No.";
        "Fax No." := CustRec."Fax No.";
        "E-Mail" := CustRec."E-Mail";
        "Territory Code" := CustRec."Territory Code";
        Postcode.GetTerritoryByPostCodeGroup(City,"Post Code","Territory Code");  //db, 11-02-13: C005566
        IF CustRec."Bill-to Customer No." <> '' THEN
          lvBillToCust := CustRec."Bill-to Customer No."
        ELSE
          lvBillToCust := "Customer No.";
        IF "Bill-to Customer No." = '' THEN
          VALIDATE("Bill-to Customer No.",lvBillToCust)
        ELSE BEGIN
          IF (CurrFieldNo = FIELDNO("Customer No.")) AND (lvBillToCust <> "Bill-to Customer No.") THEN
            IF CONFIRM(lvText001,FALSE,FIELDCAPTION("Bill-to Customer No.")) THEN BEGIN
              VALIDATE("Bill-to Customer No.",lvBillToCust);
             "Alternative Bill-to Address" := '';
            END;
        END;
      END;
      IF "Service Contract No."  <> '' THEN BEGIN
        ServContrRec.GET("Service Contract No.");
        ServContrRec.TESTFIELD(Blocked, FALSE);
        ServContrRec.CALCFIELDS(Name, Address, City, "Post Code");
        IF ServContrRec."Customer No." <> '' THEN BEGIN  //db, 23-11-06 (dummy contract)
          Name := ServContrRec.Name;
          "Name 2" := ServContrRec."Name 2";
          Address := ServContrRec.Address;
          "Address 2":= ServContrRec."Address 2";
          City := ServContrRec.City;
          "Country/Region Code" := ServContrRec."Country/Region Code";
          VALIDATE("Post Code", ServContrRec."Post Code");
          "Contact Name" := ServContrRec."Contact Name";
          "Phone No." := ServContrRec."Phone No.";
          "Phone No. 2" := ServContrRec."Phone No. 2";
          "Mobile Phone No." := ServContrRec."Mobile Phone No.";
          "Fax No." := ServContrRec."Fax No.";
          "E-Mail" := ServContrRec."E-Mail";
          //"Territory Code" := ServContrRec."Territory Code";
        END;
        IF ServSetup."Order Manager based on" = ServSetup."Order Manager based on"::ContractMgt THEN
          "Order Manager" := ServContrRec."Contract Manager";  //C019333
        IF ServSetup."Assign To" = ServSetup."Assign To"::ContractMgt THEN
          "Assigned to" := ServContrRec."Contract Manager";
      END;
    END;

    PROCEDURE ValidateOtherData@1210190008();
    VAR
      PlantLocRec@1100529300 : Record 11012554;
      Job@1100528600 : Record 11072003;
    BEGIN
      IF ServLocRec.GET("Service Location No.") THEN BEGIN
        IF ("Service Contract No." = '') OR (ServContrRec."Customer No." = '') THEN BEGIN
          "Bill-to Customer No." := '';  //db, 07-02-12: M32854
          VALIDATE("Customer No.", ServLocRec."Customer No.");
        END ELSE
          VALIDATE("Service Contract No.");
        "Service Location Type" := ServLocRec."Service Location Type";
      END;

      //DP00195 sn.
      IF PlantLocRec.GET("Plant Location") THEN BEGIN
        "Bill-to Customer No." := '';
        IF (PlantLocRec."Company Name" = '') AND (PlantLocRec."Customer No." <> '') THEN
          VALIDATE("Customer No.", PlantLocRec."Customer No.")
        ELSE
          IF (PlantLocRec."Company Name" = '') AND (PlantLocRec."Project No." <> '') THEN BEGIN
            IF NOT Job.GET(PlantLocRec."Project No.") THEN
              Job.INIT;
           IF (Job."Bill-to Customer No." = '') AND (Job."Single/Main/Sub Project" = Job."Single/Main/Sub Project"::"Sub Project") THEN
             IF NOT Job.GET(Job."Main Project") THEN
               Job.INIT;
            IF Job."Bill-to Customer No." <> '' THEN
              VALIDATE("Customer No.", Job."Bill-to Customer No.")
          END ELSE
            VALIDATE("Customer No.", ServSetup."Customer Internal Charge");
      END;
      //DP00195 en.

      IF "Bill-to Customer No." <> "Customer No." THEN
        VALIDATE("Bill-to Customer No.");

      CheckInvoiceAddress;
    END;

    PROCEDURE CheckInvoiceAddress@1100485030();
    VAR
      AdrsRec@1210190000 : Record 222;
    BEGIN
      IF AdrsRec.GET("Bill-to Customer No.", "Alternative Bill-to Address") THEN BEGIN
        "Bill-to Name" := AdrsRec.Name;
        "Bill-to Name 2" := AdrsRec."Name 2";
        "Bill-to Address" := AdrsRec.Address;
        "Bill-to Address 2" := AdrsRec."Address 2";
        "Bill-to Post Code" := AdrsRec."Post Code";
        "Bill-to City" := AdrsRec.City;
      END ELSE BEGIN
        "Alternative Bill-to Address" := '';
        IF NOT CustRec.GET("Bill-to Customer No.") THEN CustRec.INIT;  //db, 23-02-09: M13533
        "Bill-to Name" := CustRec.Name;
        "Bill-to Name 2" := CustRec."Name 2";
        "Bill-to Address" := CustRec.Address;
        "Bill-to Address 2" := CustRec."Address 2";
        "Bill-to Post Code" := CustRec."Post Code";
        "Bill-to City" := CustRec.City;
      END;
    END;

    PROCEDURE NameEmployee@9() : Text[100];
    VAR
      EmplRec@11012000 : Record 5200;
    BEGIN
      //DP00465.o
      //IF EmplRec.GET("Employee No.") THEN
      //  EXIT(EmplRec.FullName)
      //ELSE
      //  EXIT('');

      //DP00465.n
      CALCFIELDS("Employee Name");
      EXIT("Employee Name");
    END;

    PROCEDURE TransferDocument@1210190001() : Code[20];
    VAR
      ServOrderRec@1100485000 : Record 11012823;
      lvCount@1100485001 : Integer;
    BEGIN
      IF "Sales Document No." <> '' THEN
        EXIT("Sales Document No.");

      IF "Project (Dest)" <> '' THEN
        EXIT("Project (Dest)");

      IF "Service Order No." <> '' THEN BEGIN
        ServOrderRec.SETCURRENTKEY("Call No.");
        ServOrderRec.SETRANGE("Call No.", "No.");
        lvCount := ServOrderRec.COUNT;
        IF lvCount = 1 THEN
          EXIT("Service Order No.")
        ELSE
          EXIT(STRSUBSTNO('[%1]', lvCount));
      END;

      EXIT('');
    END;

    PROCEDURE LookupServiceLocation@1210190002();
    VAR
      ContractObject@1100528600 : Record 11071702;
      BuildingObjectRelation@1100528601 : Record 11071820;
      ServiceLocation@1100528603 : Record 11012801;
      ServiceLocation2@1100528602 : Record 11012801;
      ServiceContract@1100525000 : Record 11012812;
    BEGIN
      IF "Service Contract No." <> '' THEN
        ServiceContract.GET("Service Contract No.");
      IF ("Service Contract No." <> '') AND
         (ServiceContract."Contract Form" <> ServiceContract."Contract Form"::"Framework Contract")
      THEN BEGIN
        ContractObject.SETRANGE("Service Contract No.", "Service Contract No.");
        IF "Object No." <> '' THEN
          ContractObject.SETRANGE("Service Object No.", "Object No.");
        IF ContractObject.FINDSET THEN
          REPEAT
            IF ContractObject."Service Location No." <> '' THEN BEGIN
              ServiceLocation."No." := ContractObject."Service Location No.";
              ServiceLocation.MARK(TRUE);
            END ELSE BEGIN
              BuildingObjectRelation.SETCURRENTKEY("Object No.");
              BuildingObjectRelation.SETRANGE("Object No.", ContractObject."Service Object No.");
              BuildingObjectRelation.SETFILTER("Building Code", '<>%1', '');
              IF BuildingObjectRelation.FINDSET THEN BEGIN
                ServiceLocation2.SETCURRENTKEY("Building Code");
                REPEAT
                  ServiceLocation2.SETRANGE("Building Code", BuildingObjectRelation."Building Code");
                  IF ServiceLocation2.FINDSET THEN
                    REPEAT
                      ServiceLocation."No." := ServiceLocation2."No.";
                      ServiceLocation.MARK(TRUE);
                    UNTIL ServiceLocation2.NEXT = 0;
                UNTIL BuildingObjectRelation.NEXT = 0;
              END;
            END;
          UNTIL ContractObject.NEXT = 0;
        ServiceLocation.MARKEDONLY(TRUE);
      END ELSE BEGIN
        IF "Customer No." <> '' THEN BEGIN
          ServiceLocation.SETCURRENTKEY("Customer No.");
          ServiceLocation.SETRANGE("Customer No.", "Customer No.");
        END;
      END;

      ServiceLocation."No." := "Service Location No.";
      IF PAGE.RUNMODAL(PAGE::"Service Location List", ServiceLocation) = ACTION::LookupOK THEN BEGIN
        VALIDATE("Customer No.", ServiceLocation."Customer No.");
        CurrFieldNo := FIELDNO("Service Location No.");  //C026188; force check object-relation (location-contract)
        VALIDATE("Service Location No.", ServiceLocation."No.");
      END;
    END;

    PROCEDURE LookupServiceContract@1210190004();
    VAR
      ContractObject@1100528600 : Record 11071702;
      ServiceObject@1100528601 : Record 11071691;
      ServContrRec2@1100525000 : Record 11012812;
      MaintenanceManagementCU@1100528603 : Codeunit 11012829;
      ServiceContractNo@1100528602 : Code[20];
    BEGIN
      ServContrRec.RESET;
      IF "Object No." <> '' THEN BEGIN
        ServiceContractNo := MaintenanceManagementCU.ShowActualContractsForObject("Object No.", "Customer No.", TODAY, TRUE, "Service Contract No.");
        IF ServiceContractNo <> '' THEN
          VALIDATE("Service Contract No.", ServiceContractNo);
      END ELSE BEGIN
        IF "Service Location No." <> '' THEN BEGIN
          ContractObject.SETCURRENTKEY("Service Object No.");

          ServiceObject.SETCURRENTKEY("Service Location No.");
          ServiceObject.SETRANGE("Service Location No.", "Service Location No.");
          IF ServiceObject.FINDSET THEN
            REPEAT
              ContractObject.SETRANGE("Service Object No.", ServiceObject."No.");
              IF ContractObject.FINDSET THEN
                REPEAT
                  ServContrRec."No." := ContractObject."Service Contract No.";
                  ServContrRec.MARK(TRUE);
                UNTIL ContractObject.NEXT = 0;
            UNTIL ServiceObject.NEXT = 0;

          ServContrRec2.SETCURRENTKEY("Customer No.");
          ServContrRec2.SETRANGE("Customer No.", "Customer No.");
          ServContrRec2.SETRANGE("Contract Form", ServContrRec2."Contract Form"::"Framework Contract");
          IF ServContrRec2.FINDSET THEN
            REPEAT
              ServContrRec."No." := ServContrRec2."No.";
              ServContrRec.MARK(TRUE);
            UNTIL ServContrRec2.NEXT = 0;

          ServContrRec.MARKEDONLY(TRUE);
        END;

        IF NOT ServContrRec.GET("Service Contract No.") THEN ServContrRec.INIT;
        IF NOT ServContrRec.Blocked THEN
          ServContrRec.SETRANGE(Blocked, FALSE);
        ServContrRec.SETFILTER("Customer No.", "Customer No.");
        IF PAGE.RUNMODAL(PAGE::"Service Contracts List", ServContrRec) = ACTION::LookupOK THEN
          VALIDATE("Service Contract No.", ServContrRec."No.");
      END;
    END;

    PROCEDURE ShowContact@1210190003(lvCust@1210190001 : Code[20]);
    VAR
      ContRec@1210190006 : Record 5050;
      ServContRec@1100485000 : Record 11012841;
    BEGIN
      IF "Service Location No." <> '' THEN BEGIN
        ServContRec.SETRANGE("Service Location No.", "Service Location No.");
      END ELSE BEGIN
        IF "Service Contract No." <> '' THEN BEGIN
          ServContRec.SETRANGE("Service Contract No.", "Service Contract No.");
        END ELSE BEGIN
          ServContRec.SETRANGE("Service Location No.", '%1', '');
          ServContRec.SETRANGE("Service Contract No.", '%1', '');
        END;
      END;
      IF ServContRec.FINDFIRST THEN BEGIN
        IF PAGE.RUNMODAL(PAGE::"Service Contacts", ServContRec) = ACTION::LookupOK THEN BEGIN
          "Contact Name" := ServContRec."Contact Name";
          "Phone No." := ServContRec."Phone No.";
          "E-Mail" := ServContRec."E-Mail";
          "Phone No. 2" := ServContRec."Phone No. 2";
          "Mobile Phone No." := ServContRec."Mobile Phone No.";
          "Fax No." := ServContRec."Fax No.";
        END;
      END ELSE BEGIN
        CustRec.ShowContactName(lvCust, ContRec);
        IF ContRec.Name <> '' THEN BEGIN
          "Contact Name" := ContRec.Name;
          "Phone No." := ContRec."Phone No. Work";
          "Phone No. 2" := ContRec."Phone No. Work 2";
          IF "Phone No." = '' THEN
            "Phone No." := ContRec."Phone No.";
          IF "Phone No. 2" = '' THEN
            "Phone No. 2" := ContRec."Phone No. 2";
          "E-Mail" := ContRec."E-Mail";
          "Mobile Phone No." := ContRec."Mobile Phone No.";
          "Fax No." := ContRec."Fax No.";
        END;
      END;
    END;

    PROCEDURE AssistEdit@2(OldServCall@11012000 : Record 11012822) : Boolean;
    VAR
      ServCall@1210190000 : Record 11012822;
    BEGIN
      WITH ServCall DO BEGIN
        ServCall := Rec;
        ServSetup.GET;
        ServSetup.TESTFIELD("Call Nos.");
        IF NoSeriesMgt.SelectSeries(ServSetup."Call Nos.",OldServCall."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          IF ServSetup."Assign To" = ServSetup."Assign To"::User THEN
            IF UserSetup.GET(USERID) THEN
              "Assigned to" := UserSetup."Employee No.";
          Rec := ServCall;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimMgt@1100525000 : Codeunit 408;
      DimValRec@1100525001 : Record 349;
    BEGIN
      //db, 19-08-09: M15896
      IF ShortcutDimCode = '' THEN EXIT;
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.GetDimValueRec(FieldNumber, ShortcutDimCode, DimValRec, TRUE,'');
      IF NOT DimMgt.CheckDimValue(DimValRec."Dimension Code",ShortcutDimCode) THEN
        ERROR(DimMgt.GetDimErr);
    END;

    PROCEDURE GenerateServiceOrder@1100528601(IOrderKind@1100528601 : Code[10];IOrderType@1100528605 : Code[10];IDiscipline@1100528602 : Code[10];ITradeSpeciality@1100528603 : Code[10]);
    VAR
      lvProjSetup@1100485003 : Record 315;
      ServOrder@1210190002 : Record 11012823;
      ServOrderExtension@1100528900 : Record 11071727;
      ServiceOrderObject@1100528600 : Record 11071724;
      WorkOrder@1100485002 : Record 11229279;
      Resource@1100529000 : Record 11229278;
      lvHumanResSetupRec@1100525000 : Record 5218;
      PlanningAgreement@1100528604 : Record 11071729;
      ContractObject@1210190000 : Record 11071702;
      ServicePackage@1210190001 : Record 11012806;
      ServiceSourceTypeSetup@1100525001 : Record 11071726;
      ServiceOrderPlantNumber@1100528800 : Record 11072210;
      DocumentReferencePoint@1100525002 : Record 11020296;
      Customer@1100528606 : Record 18;
    BEGIN
      IF Customer.GET("Customer No.") THEN
        Customer.CheckBlockedCustomerByTableNo(DATABASE::"Service Order", ServOrder.FIELDNO("Customer No."));
      IF "Customer No." <> "Bill-to Customer No." THEN
        IF Customer.GET("Bill-to Customer No.") THEN
          Customer.CheckBlockedCustomerByTableNo(DATABASE::"Service Order", ServOrder.FIELDNO("Bill-to Customer No."));

      ServSetup.GET;

      ServOrder.INIT;
      CLEAR(ServOrder);
      ServOrder.Origin := Origin;
      ServOrder."Source Type" := ServOrder."Source Type"::Call;
      IF ServiceSourceTypeSetup.GET(ServOrder."Source Type") THEN
        ServOrder."No. Series" := ServiceSourceTypeSetup."No. Series";
      IF CheckSeries(ServOrder."No. Series") THEN BEGIN
        ServOrder.AssistEdit(ServOrder);
        IF ServOrder."No." = '' THEN EXIT;
      END ELSE BEGIN
        NoSeriesMgt.InitSeries(ServOrder."No. Series",'',0D,ServOrder."No.",ServOrder."No. Series");
      END;
      ServOrder.Priority := Priority;
      ServOrder.INSERT(TRUE);

      // ServOrderExtension.GetServOrderExtension(ServOrder."No.");
      // ServOrderExtension."Warranty found at" := "Warranty found at";
      // IF "Master Project" <> '' THEN
      //  ServOrderExtension.VALIDATE("Master Project", "Master Project");
      // IF "Master Element" <> '' THEN
      //  ServOrderExtension.VALIDATE("Master Element", "Master Element");
      // ServOrderExtension.UpdateServOrderExtension(ServOrder."No.");

      ServOrder."Call No." := "No.";
      ServOrder.Description := Description;
      IF "Service Contract No." = ''  THEN
        ServOrder.VALIDATE("Customer No.", "Customer No.");
      IF ServLocRec.GET("Service Location No.") THEN
        ServOrder.VALIDATE("Service Location No.", "Service Location No.");
      IF "Service Contract No." <> '' THEN //mg, 09-01-13: C004583
        ServOrder.VALIDATE("Service Contract No.", "Service Contract No.");
      IF "Bill-to Customer No." <> '' THEN
        ServOrder.VALIDATE("Bill-to Customer No.", "Bill-to Customer No.");
      IF ServOrder."Customer No." = '' THEN
        ServOrder.VALIDATE("Customer No.", "Customer No.");
      IF "Alternative Bill-to Address" <> '' THEN
        ServOrder.VALIDATE("Alternative Bill-to Address", "Alternative Bill-to Address");
      ServOrder.Name := Name;
      ServOrder."Name 2":= "Name 2";
      ServOrder.Address := Address;
      ServOrder."Address 2" := "Address 2";
      ServOrder.City := City;
      ServOrder."Territory Code" := "Territory Code";
      ServOrder."Post Code" := "Post Code";
      ServOrder.County := County;
      ServOrder."Country/Region Code" := "Country/Region Code";
      ServOrder."Contact Name" := "Contact Name";
      ServOrder."Phone No." := "Phone No.";
      ServOrder."Phone No. 2" := "Phone No. 2";
      ServOrder."Mobile Phone No." := "Mobile Phone No.";
      ServOrder."Fax No." := "Fax No.";
      ServOrder."E-Mail" := "E-Mail";
      ServOrder."Territory Code" := "Territory Code";
      ServOrder."Your Reference" := "Your Reference";

      IF IOrderKind <> '' THEN
        ServOrder.VALIDATE("Order Kind", IOrderKind);
      IF IOrderType <> '' THEN
        ServOrder.VALIDATE("Order Type", IOrderType);
      IF "Order Manager" <> '' THEN
        ServOrder."Order Manager" := "Order Manager";  //C019333
      ServOrder."Assigned to" := "Assigned to";
      ServOrder.Watch := Watch;
      ServOrder."Employee No." := "Employee No.";
      IF "Expected Hours" <> 0 THEN BEGIN  //db, 27-08-13: C008975 (default can be set by Order Kind/Type)
        ServOrder."Expected Hours" := "Expected Hours";
        ServOrder."Duration Time":= ServOrder."Expected Hours";  //db, 02-03-15: C020552
      END;
      ServOrder."First Possible Starting Date" := "First Possible Starting Date";
      ServOrder."First Possible Starting Time" := "First Possible Starting Time";
      ServOrder."Last Possible Ending Date" := "Last Possible Ending Date";
      ServOrder."Last Possible Ending Time" := "Last Possible Ending Time";
      ServOrder."Starting Date" := "Expected Date";
      ServOrder."Starting Time" := "Expected Time";
      ServOrder."Firm Planned" := "Firm Planned";

      ServOrder."Plant Location" := "Plant Location";
      ServOrder."Plant Type" := "Plant Type";
      ServOrder."Plant Number" := "Plant Number";
      ServOrder."Cost Component Plant" := "Cost Component Plant";
      ServOrder."Alternative Plant Loc Address" := "Alternative Plant Loc Address";

      //db, 11-12-06: concession to Imtech because of transfer message-serv.order without filling planning dates
      IF ServOrder."Starting Date" = 0D THEN
        IF NOT "Vessel Service Call" THEN
          ServOrder."Starting Date" := ServOrder."Order Date"
        ELSE
          ServOrder."Starting Date" := ServOrder."First Possible Starting Date";

      IF ServOrder."Starting Time" = 0T THEN
        IF PlanningAgreement.GET("Planning Agreement Code") THEN
          ServOrder."Starting Time" := PlanningAgreement."Starting Time"
        ELSE
          ServOrder."Starting Time" := ServOrder."First Possible Starting Time";

      lvHumanResSetupRec.GET;

      IF ServOrder."First Possible Starting Date" = 0D THEN
        IF PlanningAgreement.GET("Planning Agreement Code") THEN BEGIN
          ServOrder."First Possible Starting Date" := ServOrder."Starting Date";
          ServOrder."First Possible Starting Time" := PlanningAgreement."Starting Time";

          ServOrder."Last Possible Ending Date" := ServOrder."Starting Date";
          ServOrder."Last Possible Ending Time" := PlanningAgreement."Ending Time";
        END;

      ServOrder."Limit Budget Labor" := "Limit Budget Labor";
      ServOrder."Limit Budget Hours" := "Limit Budget Hours";
      ServOrder."Limit Budget Material" := "Limit Budget Material";
      ServOrder."Limit Budget Total" := "Limit Budget Total";
      IF "Global Dimension 1 Code" <> '' THEN
        ServOrder.VALIDATE("Global Dimension 1 Code", "Global Dimension 1 Code");
      ServOrder.VALIDATE(Discipline, IDiscipline);
      ServOrder.VALIDATE("Trade Speciality", ITradeSpeciality);
      ServOrder."Order No. Customer" := "Order No. Customer";
      ServOrder.Problem := Problem; // don't use validate, this will add another line to problem text lines
      ServOrder.UpdateServAnalysisNotGlobDims;
      ServOrder."Customer Problem" := "Customer Problem";
      ServOrder.Cause := Cause;
      ServOrder.Solution := Solution;
      IF ("Service Contract No." <> '') AND ("Object No." <> '') THEN BEGIN
        ContractObject.GET("Service Contract No.", "Object No.");
        IF ServicePackage.GET(ContractObject."Service Package") THEN BEGIN
          IF ServicePackage."Service Package Call" <> '' THEN
            ServOrder.VALIDATE("Service Package", ServicePackage."Service Package Call")
          ELSE
            ServOrder.VALIDATE("Service Package", ServicePackage.Code);
        END;
      END;
      IF Subcontractor <> '' THEN
        ServOrder.VALIDATE(Subcontractor, Subcontractor);
      FillVesselFieldsOfServiceOrder(ServOrder);
      ServOrder.CheckDurationOnInitServOrder;  //db, 08-08-13: C007836
      IF ("Service Location Type" <> '') OR ("Room (SUP)" <> '') OR ("Part (SUP)" <> '') THEN BEGIN
        ServOrder.VALIDATE("Price Book Type", ServOrder."Price Book Type"::Customer);
        ServOrder."Service Location Type" := "Service Location Type";
        ServOrder."Room (SUP)" := "Room (SUP)";
        ServOrder."Part (SUP)" := "Part (SUP)";
      END;
      ServOrder.MODIFY(TRUE);

      ServOrder.UpdateWorkOrder(FALSE);
      WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.", ServOrder."No.");
      WorkOrder.MODIFYALL("Plan during Clock Time", "Plan during Clock Time", FALSE);

      IF "Export to FSA" THEN BEGIN
        ServOrder.VALIDATE("Export to FSA", "Export to FSA");
        ServOrder.MODIFY(TRUE);
      END;

      DocumentReferencePoint.InsertDocRefPointSOCallIntake(ServOrder."No.");  //db, 13-08-15: C023471
      RefPeriodRec.UpdateNorm(RefPeriodRec.Type::ServOrder, ServOrder."No.");

      GET("No.");  //db, 15-08-06 (after change in serv.order message status can be updated)

      "Next Step" := "Next Step"::ServiceOrder;
      "Service Order No." := ServOrder."No.";
      Status := Status::"In Process";
      MODIFY;

      ServOrderExtension.GetServOrderExtension(ServOrder."No.");
      ServOrderExtension."Warranty found at" := "Warranty found at";
      IF "Master Project" <> '' THEN
        ServOrderExtension.VALIDATE("Master Project", "Master Project");
      IF "Master Element" <> '' THEN
        ServOrderExtension.VALIDATE("Master Element", "Master Element");
      ServOrderExtension.UpdateServOrderExtension(ServOrder."No.");

      CopyServText;

      IF "Object No." <> '' THEN BEGIN
        ServiceOrderObject.INIT;
        ServiceOrderObject.VALIDATE("Service Order No.", ServOrder."No.");
        ServiceOrderObject.VALIDATE("Object No.", "Object No.");
        ServiceOrderObject.VALIDATE("Service Contract No.", ServOrder."Service Contract No.");
        ServiceOrderObject.Source := ServiceOrderObject.Source::Calls;
        ServiceOrderObject.INSERT(TRUE);
      END;

      IF "Publish on Subcontr. Portal" THEN BEGIN
        WorkOrder.SETRANGE("Resource Type", WorkOrder."Resource Type"::Subcontractor);
        WorkOrder.SETRANGE("Resource No.", Subcontractor);
        IF WorkOrder.FINDFIRST THEN BEGIN
          WorkOrder.VALIDATE("Publish on Subcontr. Portal", "Publish on Subcontr. Portal");
          WorkOrder.MODIFY(TRUE);
        END;
      END;

      ServLogRec.StoreChange(
        1, "No.", STRSUBSTNO(Text002, TABLECAPTION, "No.", FIELDCAPTION("Service Order No."), "Service Order No."));

      LinkDocumentsToServiceOrder(ServOrder);
    END;

    PROCEDURE InsertSalesHeader@1(DocType@1210190001 : 'Quote,Order');
    VAR
      SalesHeaderRec@1210190000 : Record 36;
    BEGIN
      SalesHeaderRec.INIT;
      SalesHeaderRec."Document Type" := DocType;  //** Quote or Order
      SalesHeaderRec."No." := '';
      SalesHeaderRec.INSERT(TRUE);

      SalesHeaderRec.VALIDATE("Sell-to Customer No.", "Customer No.");
      IF "Bill-to Customer No." <> '' THEN
        SalesHeaderRec.VALIDATE("Bill-to Customer No.", "Bill-to Customer No.");
      IF "Alternative Bill-to Address" <> '' THEN
        SalesHeaderRec.VALIDATE("Alternative Bill-to Address", "Alternative Bill-to Address");
      SalesHeaderRec."Posting Description" := Description;
      SalesHeaderRec."Ship-to Name" := Name;
      SalesHeaderRec."Ship-to Address" := Address;
      SalesHeaderRec."Ship-to Post Code" := "Post Code";
      SalesHeaderRec."Ship-to City" := City;
      SalesHeaderRec."Ship-to County" := County;
      SalesHeaderRec."Ship-to Country/Region Code" := "Country/Region Code";

      SalesHeaderRec."Ship-to Contact" := "Contact Name";
      SalesHeaderRec.VALIDATE("Salesperson Code", "Assigned to");
      SalesHeaderRec."Service Call No." := "No.";
      SalesHeaderRec.MODIFY;

      TESTFIELD("Customer No.");
      "Sales Document No." := SalesHeaderRec."No.";
      Status := Status::"In Process";
      MODIFY;

      ServLogRec.StoreChange(
        1,"No.",STRSUBSTNO(Text002, TABLECAPTION, "No.", FIELDCAPTION("Sales Document No."), "Sales Document No."));
    END;

    PROCEDURE CreateProject@1100485000();
    VAR
      ProjSetup@1100485002 : Record 315;
      ProjRec@1100485000 : Record 11072003;
      ProjCustRec@1100485001 : Record 11012005;
    BEGIN
      ProjSetup.GET;

      ProjRec.INIT;
      ProjRec."No." := '';
      ProjRec."Small Project" := ("Next Step" = "Next Step"::SmallProject);
      IF ProjRec."Small Project" THEN
        ProjRec."No. Series" := ProjSetup."Small Project Nos."
      ELSE
        ProjRec."No. Series" := ProjSetup."Job Nos.";
      IF CheckSeries(ProjRec."No. Series") THEN BEGIN
        ProjRec.AssistEdit(ProjRec);
        IF ProjRec."No." = '' THEN EXIT;
      END;
      ProjRec.VALIDATE(Description, Description);
      ProjRec.INSERT(TRUE);

      IF "Customer No." <> '' THEN BEGIN
        ProjCustRec.INIT;
        ProjCustRec."Project No." := ProjRec."No.";
        ProjCustRec.VALIDATE(Principal, "Customer No.");
        IF "Bill-to Customer No." = "Customer No." THEN
          IF "Alternative Bill-to Address" <> '' THEN
            ProjCustRec.VALIDATE("Alternative Bill-to Address", "Alternative Bill-to Address");
        ProjCustRec.INSERT(TRUE);
        ProjRec.VALIDATE("Bill-to Customer No.", "Customer No.");
      END;

      ProjRec.Address := Address;
      //ProjRec."Address 2" := "Address 2";
      ProjRec.City := City;
      ProjRec."Post Code" := "Post Code";
      //ProjRec.County := County;
      //ProjRec."Country Code":= "Country Code";
      ProjRec.Contact := "Contact Name";
      ProjRec."Phone No." := "Phone No.";
      //ProjRec."Phone No. 2" := "Phone No. 2";
      ProjRec."Mobile Phone No." := "Mobile Phone No.";
      ProjRec."Fax No." := "Fax No.";
      //ProjRec."E-Mail" := "E-Mail";
      ProjRec."Territory Code" := "Territory Code";
      ProjRec.MODIFY;

      "Project (Dest)" := ProjRec."No.";
      Status := Status::"In Process";
      MODIFY;

      ServLogRec.StoreChange(1, "No.", STRSUBSTNO(Text002, TABLECAPTION, "No.", ProjRec.TABLECAPTION, "Project (Dest)"));
    END;

    PROCEDURE DetermineLimitBudget@1210190012();
    BEGIN
      ServSetup.GET;
      IF NOT ServContrRec.GET("Service Contract No.") THEN ServContrRec.INIT;
      IF NOT ServLocRec.GET("Service Location No.") THEN ServLocRec.INIT;

      "Limit Budget Hours" := ServContrRec."Limit Budget Hours";
      "Limit Budget Labor" := ServContrRec."Limit Budget Labor";
      "Limit Budget Material" := ServContrRec."Limit Budget Material";
      "Limit Budget Total" := ServContrRec."Limit Budget Total";

      IF "Limit Budget Labor" < 0 THEN "Limit Budget Labor" := 0;
      IF "Limit Budget Hours" < 0 THEN "Limit Budget Hours" := 0;
      IF "Limit Budget Material" < 0 THEN "Limit Budget Material" := 0;

      IF (ServContrRec."Limit Budget Labor" + ServContrRec."Limit Budget Material" = ServContrRec."Limit Budget Total") THEN
        "Limit Budget Total" := "Limit Budget Labor" + "Limit Budget Material";
      VALIDATE("Limit Budget Total");
    END;

    LOCAL PROCEDURE DetermineLimitBudgetExceeded@1100528606();
    VAR
      LimitBudgetManagement@1100528600 : Codeunit 11012878;
    BEGIN
      LimitBudgetManagement.UpdateServiceCallLimitBudgetExceeded(Rec);
    END;

    PROCEDURE CheckParentChildCall@1210190011();
    VAR
      lvCallRec@1210190000 : Record 11012822;
      lvCall@1210190002 : Code[20];
    BEGIN
      lvCall := "Previous Call No.";
      WHILE lvCall <> '' DO BEGIN
        IF "No." = lvCall THEN
          ERROR(Text007);
        IF NOT lvCallRec.GET(lvCall) THEN EXIT;
        lvCall := lvCallRec."Previous Call No.";
      END;
    END;

    PROCEDURE DisconnectChain@1100485003();
    VAR
      lvCallRec@1100485000 : Record 11012822;
      lvCallRec2@1100485001 : Record 11012822;
    BEGIN
      lvCallRec.SETCURRENTKEY("Previous Call No.");
      lvCallRec.SETRANGE("Previous Call No.", "No.");
      IF lvCallRec.FINDSET THEN BEGIN
        REPEAT
          lvCallRec2 := lvCallRec;
          lvCallRec2."Previous Call No." := "Previous Call No.";
          lvCallRec2.MODIFY;
        UNTIL lvCallRec.NEXT = 0;
      END;
    END;

    PROCEDURE ShowNextCall@1210190015(lvAction@1210190001 : Integer) : Text[30];
    VAR
      lvCallRec@1210190000 : Record 11012822;
      lvCount@1210190002 : Integer;
    BEGIN
      //0=display; 1=lookup

      lvCallRec.SETCURRENTKEY("Previous Call No.");
      IF "No." <> '' THEN BEGIN
        lvCallRec.SETRANGE("Previous Call No.", "No.");
        lvCount := lvCallRec.COUNT;
      END;
      IF lvCount = 0 THEN EXIT('');

      IF lvAction = 0 THEN BEGIN
        IF lvCount = 1 THEN BEGIN
          lvCallRec.FINDFIRST;
          EXIT(lvCallRec."No.");
        END ELSE BEGIN
          EXIT(STRSUBSTNO('[%1]', lvCount));
        END;
      END ELSE BEGIN
        lvCallRec.FINDFIRST;
        REPEAT
          lvCallRec.MARK := TRUE;
        UNTIL lvCallRec.NEXT = 0;
        lvCallRec.MARKEDONLY(TRUE);
        PAGE.RUNMODAL(PAGE::"Service Call List", lvCallRec);
      END;
    END;

    PROCEDURE CheckDimension@1100485015();
    BEGIN
      IF ServLocRec.GET("Service Location No.") THEN
        IF ServLocRec."Global Dimension 1 Code" <> '' THEN
          VALIDATE("Global Dimension 1 Code", ServLocRec."Global Dimension 1 Code");
    END;

    PROCEDURE CheckDepartment@1100485002();
    VAR
      lvDepFound@1100485000 : Boolean;
      lvText000@1100525000 : TextConst 'ENU=%1 %2 not allowed.';
    BEGIN
      //db, 22-09-09: M16458
      IF "Global Dimension 1 Code" = '' THEN
        EXIT;

      IF "Service Contract No." = '' THEN
        EXIT;

      lvDepFound := FALSE;
      IF "Service Contract No." <> '' THEN BEGIN
        ServContrRec.GET("Service Contract No.");
        IF ("Global Dimension 1 Code" = ServContrRec."Global Dimension 1 Code") THEN BEGIN
          lvDepFound := TRUE;
        END ELSE BEGIN
          ServDepRec.SETRANGE("Service Contract No.", "Service Contract No.");
          IF ServDepRec.FINDSET THEN BEGIN
            REPEAT
              IF "Global Dimension 1 Code" = ServDepRec."Global Dimension 1 Code" THEN
                lvDepFound := TRUE;
            UNTIL ServDepRec.NEXT = 0;
          END;
        END;
      END;
      IF lvDepFound = FALSE THEN BEGIN
        IF "Service Location No." <> '' THEN BEGIN
          ServLocRec.GET("Service Location No.");
          IF ("Global Dimension 1 Code" = ServLocRec."Global Dimension 1 Code") THEN
            lvDepFound := TRUE;
        END;
      END;
      IF lvDepFound = FALSE THEN BEGIN
        IF "Customer No." <> '' THEN BEGIN
          CustRec.GET("Customer No.");
          IF "Global Dimension 1 Code" = CustRec."Global Dimension 1 Code" THEN
            lvDepFound := TRUE;
        END;
      END;

      IF lvDepFound = FALSE THEN ERROR(lvText000, FIELDCAPTION("Global Dimension 1 Code"), "Global Dimension 1 Code");
    END;

    PROCEDURE CheckConsignment@1100485006();
    VAR
      lvConsTimeRec@1100485000 : Record 11012864;
      lvConsRosterRec@1100485002 : Record 11012865;
      Resource@1100529000 : Record 11229278;
      ActiveWatch@1100485003 : Text[30];
    BEGIN
      CheckValidateWatch := TRUE;
      ActiveWatch := CheckAvailableWatches;
      CheckValidateWatch := FALSE;

      IF ActiveWatch <> '[1]' THEN BEGIN
        Watch := '';  //db: first empty watch; otherwise will be determined again from Consignment Roster at validation of employee
        IF ActiveWatch <> '' THEN  //db: watch already determined in CheckAvailableWatches
          VALIDATE("Employee No.", '');   //db, 30-08-10: M22460
        EXIT;
      END;

      IF CheckConsignmentTime(lvConsTimeRec) THEN BEGIN
          lvConsRosterRec.SETRANGE("Watch Code", Watch);  //db: watch already determined in CheckAvailableWatches
          lvConsRosterRec.SETRANGE("Consignment Code", lvConsTimeRec."Consignment Code");
          lvConsRosterRec.SETRANGE("Start Date", lvConsTimeRec."Start Date");
          lvConsRosterRec.SETRANGE("Start Time", lvConsTimeRec."Start Time");
          IF lvConsRosterRec.FINDFIRST THEN BEGIN
            //VALIDATE("Employee No.", lvConsRosterRec."Employee No.");  //db, 30-08-10: M22460   //DP00465.o
            //DP00465.sn
            Resource.SETCURRENTKEY(Type, Company, "Source No.");
            Resource.SETRANGE(Type, Resource.Type::Employee);
            Resource.SETRANGE(Company, COMPANYNAME);
            Resource.SETRANGE("Source No.", lvConsRosterRec."Employee No.");
            IF Resource.FINDFIRST THEN BEGIN
              VALIDATE("Employee No.", Resource."No.");
            //DP00465.en
              VALIDATE("Export to FSA", TRUE);  //db, 11-03-08: M11327
              "Plan during Clock Time" := TRUE;  //db, 15-06-11: M24526
            END;
          END;
      //END;
      END;
    END;

    PROCEDURE CheckConsignmentTime@1100485004(VAR VarConsTimeRec@1100485006 : Record 11012864) : Boolean;
    VAR
      lvConsRec@1100485004 : Record 11012863;
      lvConsTimeRec@1100485000 : Record 11012864;
      CheckDT@1100485001 : DateTime;
      StartDT@1100485002 : DateTime;
      EndDT@1100485003 : DateTime;
    BEGIN
      IF "Receiving Date" = 0D THEN BEGIN
        "Receiving Date":= WORKDATE;
        "Receiving Time":= TIME;
      END;

      CheckDT := CREATEDATETIME("Receiving Date", "Receiving Time");
      lvConsTimeRec.SETFILTER("Start Date", '..%1', "Receiving Date");
      lvConsTimeRec.SETFILTER("End Date", '%1..', "Receiving Date");
      IF lvConsTimeRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          StartDT := CREATEDATETIME(lvConsTimeRec."Start Date", lvConsTimeRec."Start Time");
          EndDT := CREATEDATETIME(lvConsTimeRec."End Date", lvConsTimeRec."End Time");
          IF (CheckDT > StartDT) AND (CheckDT < EndDT) THEN BEGIN
            IF lvConsRec.GET(lvConsTimeRec."Consignment Code") THEN BEGIN
              IF lvConsRec.CheckTerritoryAndDepartment("Territory Code", "Global Dimension 1 Code") THEN BEGIN
                VarConsTimeRec := lvConsTimeRec;
                EXIT(TRUE);
              END;
            END;
          END;
        UNTIL lvConsTimeRec.NEXT = 0;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE CheckSeries@1100485007(lvSeries@1100485000 : Code[20]) : Boolean;
    VAR
      SerieRel@1210190000 : Record 310;
    BEGIN
      SerieRel.SETRANGE(Code, lvSeries);

      EXIT(SerieRel.FINDFIRST);
    END;

    PROCEDURE AssistEditWatch@1100485014(Lookup@1100485000 : Boolean);
    VAR
      TmpWatchRec@1210190000 : TEMPORARY Record 11012861;
      WatchRec@1100485002 : Record 11012861;
      WatchFrm@1100485003 : Page 11020352;
    BEGIN
      IF WatchRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          WatchRec.MARK := WatchRec.CheckFilters("Territory Code", "Global Dimension 1 Code", Discipline, "Trade Speciality");
          CheckMarkLocationWatch(WatchRec,TmpWatchRec);
        UNTIL WatchRec.NEXT = 0;
      END;

      IF ContrPrioRec.GET("Service Contract No.", Priority) THEN
        IF ContrPrioRec."Deactivate Consignment" THEN
          WatchRec.CLEARMARKS;  //db, 12-10-09: M16190

      CheckTmpWatch(WatchRec,TmpWatchRec);

      WatchRec.MARKEDONLY := TRUE;
      IF Lookup THEN BEGIN
        CurrFieldNo := FIELDNO(Watch);  //db, 28-06-11 (needed for validate Watch to activate AssisEditEmployee)
        CLEAR(WatchFrm);
        WatchFrm.LOOKUPMODE(TRUE);
        WatchFrm.EDITABLE(FALSE);
        WatchFrm.SETTABLEVIEW(WatchRec);
        IF WatchRec.GET(Watch) THEN
          WatchFrm.SETRECORD(WatchRec);
        IF WatchFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          WatchFrm.GETRECORD(WatchRec);
          VALIDATE(Watch, WatchRec.Code);
        END;
      END ELSE BEGIN
        WatchRec.SETFILTER(Code, Watch);  //db, 16-05-11
        IF WatchRec.FINDFIRST THEN BEGIN
          Watch := WatchRec.Code;
        END ELSE BEGIN
          ERROR(Text011, Watch, FIELDCAPTION(Watch));
        END;
      END;
    END;

    PROCEDURE AssistEditPriority@1100485010();
    VAR
      ServicePriority@1100528800 : Record 11012829;
      ServiceCallInfoMgt@1100528801 : Codeunit 11012855;
    BEGIN
      ServiceCallInfoMgt.GetServicePriorityDS(
        "Service Contract No.",
        "Customer No.",
        Discipline,
        "Trade Speciality",
        Priority,
        ServicePriority);

      IF PAGE.RUNMODAL(0, ServicePriority) = ACTION::LookupOK THEN
        VALIDATE(Priority, ServicePriority.Code);
    END;

    PROCEDURE AssistEditDiscipline@1100485009();
    VAR
      ContrDiscRec@1100485002 : Record 11012881;
      LocDiscRec@1100485005 : Record 11012844;
      DiscRec@1100485001 : Record 11020204;
      ContrRec@1100525000 : Record 11012812;
    BEGIN
      IF "Service Contract No." <> '' THEN BEGIN
        ContrDiscRec.SETRANGE("Service Contract No.", "Service Contract No.");
        ContrDiscRec.SETFILTER(Discipline, '<>%1', '');
        IF ContrDiscRec.FINDSET THEN BEGIN
          REPEAT
            IF NOT ContrRec.GET(ContrDiscRec."Service Contract No.") THEN ContrRec.INIT;  //db, 24-10-13: C008633
            IF (ContrRec.Blocked = FALSE) AND (ContrRec.Status <> ContrRec.Status::Expired) THEN BEGIN
              IF DiscRec.GET(ContrDiscRec.Discipline) THEN
                DiscRec.MARK := TRUE;
            END;
          UNTIL ContrDiscRec.NEXT = 0;
          DiscRec.MARKEDONLY(TRUE);
        END;
      END;

      IF "Service Location No." <> '' THEN BEGIN
        LocDiscRec.SETRANGE("Service Location No.", "Service Location No.");
        LocDiscRec.SETFILTER(Discipline, '<>%1', '');
        IF LocDiscRec.FINDSET THEN BEGIN
          REPEAT
            IF DiscRec.GET(LocDiscRec.Discipline) THEN
              DiscRec.MARK := TRUE;
          UNTIL LocDiscRec.NEXT = 0;
          DiscRec.MARKEDONLY(TRUE);
        END;
      END;

      IF Discipline <> '' THEN
        DiscRec.GET(Discipline);

      IF PAGE.RUNMODAL(0, DiscRec) = ACTION::LookupOK THEN
        VALIDATE(Discipline, DiscRec.Code);
    END;

    PROCEDURE AssistEditTradeSpeciality@1100485028();
    VAR
      TradeSpecRec@1100485003 : Record 11020285;
      ContrDiscRec@1100485004 : Record 11012881;
      LocDiscRec@1100485005 : Record 11012844;
      ContrRec@1100525000 : Record 11012812;
    BEGIN
      IF "Service Contract No." <> '' THEN BEGIN
        ContrDiscRec.SETRANGE("Service Contract No.", "Service Contract No.");
        IF Discipline <> '' THEN  //db, 27-03-09: M13480
          ContrDiscRec.SETRANGE(Discipline, Discipline);
        ContrDiscRec.SETFILTER("Trade Speciality", '<>%1', '');
        IF ContrDiscRec.FINDSET THEN BEGIN
          REPEAT
            IF NOT ContrRec.GET(ContrDiscRec."Service Contract No.") THEN ContrRec.INIT; //db, 24-10-13: C008633
            IF (ContrRec.Blocked = FALSE) AND (ContrRec.Status <> ContrRec.Status::Expired) THEN BEGIN
              IF TradeSpecRec.GET(ContrDiscRec.Discipline, ContrDiscRec."Trade Speciality") THEN
                TradeSpecRec.MARK := TRUE;
            END;
          UNTIL ContrDiscRec.NEXT = 0;
          TradeSpecRec.MARKEDONLY(TRUE);
        END;
      END;

      IF "Service Location No." <> '' THEN BEGIN
        LocDiscRec.SETRANGE("Service Location No.", "Service Location No.");
        IF Discipline <> '' THEN  //db, 27-03-09: M13480
          LocDiscRec.SETRANGE(Discipline, Discipline);
        LocDiscRec.SETFILTER("Trade Speciality", '<>%1', '');
        IF LocDiscRec.FINDSET THEN BEGIN
          REPEAT
            IF TradeSpecRec.GET(LocDiscRec.Discipline, LocDiscRec."Trade Speciality") THEN
              TradeSpecRec.MARK := TRUE;
          UNTIL LocDiscRec.NEXT = 0;
          TradeSpecRec.MARKEDONLY(TRUE);
        END;
      END;

      IF "Trade Speciality" <> '' THEN
        TradeSpecRec.GET(Discipline, "Trade Speciality");

      IF Discipline <> '' THEN  //db, 27-03-09: M13480
        TradeSpecRec.SETRANGE(Discipline, Discipline);

      IF PAGE.RUNMODAL(0, TradeSpecRec) = ACTION::LookupOK THEN
        VALIDATE("Trade Speciality", TradeSpecRec.Code);
    END;

    PROCEDURE AssistEditDimension1@1100485021();
    VAR
      ContrDimRec@1100485002 : Record 11012809;
      DimValRec@1100485001 : Record 349;
    BEGIN
      DimValRec.SETRANGE("Global Dimension No.", 1);

      IF "Service Contract No." <> '' THEN BEGIN
        ServContrRec.GET("Service Contract No.");
        DimValRec.SETFILTER(Code, '%1|%2', ServContrRec."Global Dimension 1 Code", ServContrRec."Department Code (Other)");
        IF DimValRec.FINDSET THEN BEGIN
          REPEAT
            DimValRec.MARK := TRUE;
          UNTIL DimValRec.NEXT = 0;
        END;

        ContrDimRec.SETRANGE("Service Contract No.", "Service Contract No.");
        ContrDimRec.SETFILTER("Global Dimension 1 Code", '<>%1', '');
        IF ContrDimRec.FINDSET THEN BEGIN
          REPEAT
            DimValRec.SETRANGE(Code, ContrDimRec."Global Dimension 1 Code");
            IF DimValRec.FINDSET THEN
              DimValRec.MARK := TRUE;
          UNTIL ContrDimRec.NEXT = 0;
          DimValRec.MARKEDONLY(TRUE);
        END;
        DimValRec.SETRANGE(Code);
      END;

      IF "Global Dimension 1 Code" <> '' THEN
        DimMgt.GetDimValueRec(1, "Global Dimension 1 Code", DimValRec, TRUE,'');

      IF PAGE.RUNMODAL(0, DimValRec) = ACTION::LookupOK THEN
        VALIDATE("Global Dimension 1 Code", DimValRec.Code);
    END;

    PROCEDURE CheckContrDiscPrio@1100485011();
    VAR
      ContrDiscRec@1100485009 : Record 11012881;
      ContrPrioRec@1100485010 : Record 11012880;
    BEGIN
      //db, 04-06-08: M11937
      IF "Service Contract No." = '' THEN EXIT;

      ContrDiscRec.SETRANGE("Service Contract No.", "Service Contract No.");
      IF ContrDiscRec.COUNT = 1 THEN BEGIN
        ContrDiscRec.FINDFIRST;
        VALIDATE(Discipline, ContrDiscRec.Discipline);
      END;

      ContrPrioRec.SETRANGE("Service Contract No.", "Service Contract No.");
      IF ContrPrioRec.COUNT = 1 THEN BEGIN
        ContrPrioRec.FINDFIRST;
        VALIDATE(Priority, ContrPrioRec.Priority);
      END;
    END;

    PROCEDURE CheckUpdateDocRefPoint@1100485016(IUpdateMode@1100485000 : Code[1]);
    VAR
      lvDocRefPointRec@1100485001 : Record 11020296;
      lvServCallxRec@1100485002 : Record 11012822;
    BEGIN
      CASE IUpdateMode OF
        'I':
          lvDocRefPointRec.InsertDocRefPoint(lvDocRefPointRec.Type::ServCall,"No.",Status,TODAY,TIME);
        'M':
          BEGIN
            IF lvServCallxRec.GET("No.") THEN BEGIN  //* Get old (so always call before change is saved!)
              IF (lvServCallxRec.Status <> Status) THEN
                lvDocRefPointRec.InsertDocRefPoint(lvDocRefPointRec.Type::ServCall,"No.",Status,TODAY,TIME);
            END;
          END;
      END;
    END;

    PROCEDURE UpdateNextDeadline@1100485012();
    VAR
      DateTimeMgt@1100485000 : Codeunit 11020218;
      RefLimit@1100485001 : Text[50];
      CurrDeadline@1100485002 : DateTime;
    BEGIN
      "Next Reference Period" := '';
      "Next Deadline" := 0DT;

      RefPeriodRec.SETRANGE(Type, RefPeriodRec.Type::ServCall);
      RefPeriodRec.SETRANGE("Document No.", "No.");
      IF RefPeriodRec.FINDSET THEN BEGIN
        REPEAT
          IF (RefPeriodRec.Norm <> 0) AND
             (RefPeriodRec."Starting Date" <> 0D) AND
             (RefPeriodRec."Starting Time" <> 0T) AND
             (RefPeriodRec."Ending Date" = 0D) AND
             (RefPeriodRec."Ending Time" = 0T) THEN BEGIN
            RefLimit := RefPeriodRec.CheckRefPeriod(1,RefPeriodRec.Type::ServCall,"No.",RefPeriodRec.Code,0);
            IF RefLimit <> '' THEN BEGIN
              CurrDeadline := DateTimeMgt.Text2Datetime(RefLimit);
              IF ("Next Deadline" = 0DT) OR (CurrDeadline <= "Next Deadline") THEN BEGIN
                "Next Deadline" := CurrDeadline;
                "Next Reference Period" := RefPeriodRec.Code;
              END;
            END;
          END;
        UNTIL RefPeriodRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckExpectedHours@1100485017(lvType@1100485000 : Integer;lvIndication@1100485001 : Code[10]);
    VAR
      ServIndicationRec@1100485002 : Record 11012837;
    BEGIN
      IF ServIndicationRec.GET(lvType, lvIndication) THEN
        IF ServIndicationRec."Expected Hours" <> 0 THEN
          VALIDATE("Expected Hours", ServIndicationRec."Expected Hours");
    END;

    PROCEDURE CheckAvailableWatches@1100485018() : Text[30];
    VAR
      TmpWatchRec@1210190000 : TEMPORARY Record 11012861;
      lvWatchRec@1100485001 : Record 11012861;
      lvConsTimeRec@1100485002 : Record 11012864;
      lvNumWatch@1100485000 : Integer;
      lvNumDefault@1100525000 : Integer;
    BEGIN
      //db, 12-05-09: M14956
      IF "No." = '' THEN EXIT('');
      IF ContrPrioRec.GET("Service Contract No.", Priority) THEN
        IF ContrPrioRec."Deactivate Consignment" THEN EXIT('');  //db, 12-10-09: M16190
      IF NOT CheckConsignmentTime(lvConsTimeRec) THEN EXIT('');

      IF NOT ServLocRec.GET("Service Location No.") THEN ServLocRec.INIT;  //db, 30-05-11

      lvWatchRec.RESET;
      IF lvWatchRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          IF lvWatchRec.Code = ServLocRec.Watch THEN BEGIN
            lvWatchRec.MARK := TRUE;
            //db.sn (23-06-11: M28003-attachment2)
            lvWatchRec.Default := TRUE;
            CheckMarkLocationWatch(lvWatchRec,TmpWatchRec);
            //db.en (23-06-11: M28003-attachment2)
          END ELSE BEGIN
            lvWatchRec.MARK := lvWatchRec.CheckFilters("Territory Code", "Global Dimension 1 Code", Discipline, "Trade Speciality");
            CheckMarkLocationWatch(lvWatchRec,TmpWatchRec);
          END;
        UNTIL lvWatchRec.NEXT = 0;
      END;

      CheckTmpWatch(lvWatchRec,TmpWatchRec);

      lvWatchRec.MARKEDONLY(TRUE);
      lvNumWatch := lvWatchRec.COUNT;
      //db.sn (23-06-11: M28003-attachment2)
      IF CheckValidateWatch = TRUE THEN BEGIN
        lvWatchRec.SETRANGE(Default, TRUE);
        lvNumDefault := lvWatchRec.COUNT;
        IF lvNumDefault = 1 THEN
          lvNumWatch := 1
        ELSE
          lvWatchRec.SETRANGE(Default);
        IF ServLocRec.Watch <> '' THEN BEGIN
          lvWatchRec.SETRANGE(Code, ServLocRec.Watch);
          lvWatchRec.SETRANGE(Default);
          lvNumWatch := 1;  //available watch reset by CheckValidateWatch=false
        END;
        IF lvWatchRec.FINDFIRST THEN BEGIN
          Watch := lvWatchRec.Code;
        END;
      END;
      //db.en (23-06-11: M28003-attachment2)

      IF lvNumWatch = 0 THEN
        EXIT('')
      ELSE
        EXIT(STRSUBSTNO('[%1]', lvNumWatch));
    END;

    PROCEDURE LookupPreviousCall@1100485013();
    VAR
      ServCallRec@1100485000 : Record 11012822;
    BEGIN
      IF "Previous Call No." <> '' THEN
        ServCallRec.GET("Previous Call No.");
      ServCallRec.SETFILTER("No.", '<>%1', "No.");
      IF "Customer No." <> '' THEN
        ServCallRec.SETRANGE("Customer No.", "Customer No.");
      IF "Service Contract No." <> '' THEN
        ServCallRec.SETRANGE("Service Contract No.", "Service Contract No.");
      IF "Service Location No." <> '' THEN
        ServCallRec.SETRANGE("Service Location No.", "Service Location No.");
      IF PAGE.RUNMODAL(PAGE::"Service Call List", ServCallRec) = ACTION::LookupOK THEN BEGIN
        VALIDATE("Previous Call No.", ServCallRec."No.");
      END;
    END;

    PROCEDURE CheckDeactivateConsignment@1100485022();
    VAR
      lvPrioRec@1100485003 : Record 11012829;
      lvContrPrioRec@1100485001 : Record 11012880;
      lvConsTimeRec@1100485000 : Record 11012864;
      lvDeactivate@1100485002 : Boolean;
    BEGIN
      IF CheckConsignmentTime(lvConsTimeRec) THEN BEGIN
        IF lvContrPrioRec.GET("Service Contract No.", Priority) THEN BEGIN
          lvDeactivate := lvContrPrioRec."Deactivate Consignment";
        END ELSE BEGIN
          IF lvPrioRec.GET(Priority) THEN  //db, 05-12-12: allow clear field
            lvDeactivate := lvPrioRec."Deactivate Consignment";
        END;
        IF lvDeactivate THEN BEGIN
          IF Watch <> '' THEN BEGIN
            Watch := '';
            VALIDATE("Employee No.", '');   //db, 30-08-10: M22460
          END;
        END ELSE BEGIN
          IF Watch = '' THEN
            CheckConsignment;
        END;
      END;
    END;

    PROCEDURE CopyServText@1100485026();
    VAR
      TextRec@1100485000 : Record 11012882;
      TextRec2@1100485001 : Record 11012882;
    BEGIN
      TextRec.SETRANGE("Table Name", TextRec."Table Name"::"Service Call");
      TextRec.SETRANGE("No.", "No.");
      IF TextRec.FINDSET THEN BEGIN
        REPEAT
          TextRec2.COPY(TextRec);
          TextRec2."Table Name" := TextRec."Table Name"::"Service Order";
          IF TextRec."Table Field" = 60 THEN
            TextRec2."Table Field" := 90;
          IF TextRec."Table Field" = 70 THEN
            TextRec2."Table Field" := 91;
          IF TextRec."Table Field" = 75 THEN
            TextRec2."Table Field" := 92;
          TextRec2."No." := "Service Order No.";
          TextRec2.INSERT;
        UNTIL TextRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckDateOutOfUse@1100485024() StartDate : Date;
    BEGIN
      IF "Expected Date" <> 0D THEN
        StartDate := "Expected Date"
      ELSE
        StartDate := "Receiving Date";

      IF StartDate = 0D THEN
        StartDate := TODAY;  //db, 16-11-09: M16603

      EXIT(StartDate);
    END;

    PROCEDURE CheckAvailableDim1@1100485027() : Text[30];
    VAR
      ContrDimRec@1100485001 : Record 11012809;
      DimValRec@1100485000 : Record 349;
      NumDim1@1100485002 : Integer;
    BEGIN
      DimValRec.SETRANGE("Global Dimension No.", 1);

      IF "Service Contract No." <> '' THEN BEGIN
        ServContrRec.GET("Service Contract No.");
        DimValRec.SETFILTER(Code, '%1|%2', ServContrRec."Global Dimension 1 Code", ServContrRec."Department Code (Other)");
        IF DimValRec.FINDSET THEN BEGIN
          REPEAT
            DimValRec.MARK := TRUE;
          UNTIL DimValRec.NEXT = 0;
        END;

        ContrDimRec.SETRANGE("Service Contract No.", "Service Contract No.");
        ContrDimRec.SETFILTER("Global Dimension 1 Code", '<>%1', '');
        IF ContrDimRec.FINDSET THEN BEGIN
          REPEAT
            DimValRec.SETRANGE(Code, ContrDimRec."Global Dimension 1 Code");
            IF DimValRec.FINDSET THEN
              DimValRec.MARK := TRUE;
          UNTIL ContrDimRec.NEXT = 0;
        END;
        DimValRec.SETRANGE(Code);
        DimValRec.MARKEDONLY(TRUE);
        NumDim1 := DimValRec.COUNT;
      END;

      IF NumDim1 = 0 THEN
        EXIT('')
      ELSE
        EXIT(STRSUBSTNO('[%1]', NumDim1));
    END;

    PROCEDURE DrillDownActualRefPoint@1100525000();
    VAR
      DocumentReferencePointsFRM@1100485000 : Page 11020345;
    BEGIN
      DocumentReferencePointsFRM.SetServiceCallNo("No.");
      DocumentReferencePointsFRM.EDITABLE(FALSE);
      DocumentReferencePointsFRM.RUNMODAL;
    END;

    PROCEDURE CheckCreditLimit@1100525001();
    VAR
      SalesSetup@1100525000 : Record 311;
    BEGIN
      //db, 31-10-08: M13190
      SalesSetup.GET;
      IF SalesSetup."Credit Warnings" = SalesSetup."Credit Warnings"::"No Warning" THEN
        EXIT;
    END;

    PROCEDURE ActivateCreditLimit@1100525033(lvAction@1100525001 : Integer) ShowWarning : Boolean;
    VAR
      CreditLimitFrm@1100525000 : Page 343;
    BEGIN
      //db, 16-12-10: M23068
      ShowWarning := CreditLimitFrm.ServiceOrderShowWarning("Bill-to Customer No.");
      IF lvAction = 1 THEN
        CreditLimitFrm.RUNMODAL;
      EXIT(ShowWarning);
    END;

    PROCEDURE CheckOrderNoCustomer@1100525004();
    VAR
      lvCallRec@1100525000 : Record 11012822;
      lvText000@1100525001 : TextConst 'ENU=%1 %2 of %3 %4 also assigned to %5 %6';
    BEGIN
      //db, 16-11-09: M13354
      IF ("Order No. Customer" = '') OR ("Customer No." = '') THEN EXIT;

      lvCallRec.SETCURRENTKEY("Customer No.");
      lvCallRec.SETRANGE("Customer No.", "Customer No.");
      lvCallRec.SETRANGE("Order No. Customer", "Order No. Customer");
      lvCallRec.SETFILTER("No.", '<>%1', "No.");
      IF lvCallRec.FINDFIRST THEN BEGIN
        IF "Previous Call No." = '' THEN
          MESSAGE(lvText000,  //db, 11-03-11: M25256 (error->message)
            FIELDCAPTION("Order No. Customer"), "Order No. Customer",
            FIELDCAPTION("Customer No."), "Customer No.",
            lvCallRec.TABLECAPTION, lvCallRec."No.");
      END;
    END;

    PROCEDURE CopyServCall@1100525005();
    VAR
      lvText000@1100525002 : TextConst 'ENU="Service Contract is expired; continue ?"';
      lvText001@1100525001 : TextConst 'ENU="Customer is blocked; continue ?"';
      lvText002@1100525000 : TextConst 'ENU="%1 is out of use; continue ?"';
      CallRec@1100525008 : Record 11012822;
      ServContrRec@1100525007 : Record 11012812;
      ServLocRec@1100525006 : Record 11012801;
      CustRec@1100525003 : Record 18;
      CommLineRec@1100525012 : Record 97;
      CommLineRec2@1100525011 : Record 97;
      ServTextRec@1100525010 : Record 11012882;
      ServTextRec2@1100525009 : Record 11012882;
    BEGIN
      //db, 18-12-09
      IF ServContrRec.GET("Service Contract No.") THEN
        IF ServContrRec.Status = ServContrRec.Status::Expired THEN
          IF CONFIRM(lvText000, FALSE) = FALSE THEN EXIT;

      IF CustRec.GET("Bill-to Customer No.") THEN
        IF CustRec.Blocked <> CustRec.Blocked::" " THEN
          IF CONFIRM(lvText001, FALSE) = FALSE THEN EXIT;

      IF ServLocRec.GET("Service Location No.") THEN
        IF (ServLocRec."Date Out of Use" <> 0D) THEN
          IF CONFIRM(lvText002, FALSE, ServLocRec.TABLECAPTION) = FALSE THEN EXIT;

      CallRec.COPY(Rec);
      CallRec."No." := '';
      CallRec.INSERT(TRUE);
      CallRec.VALIDATE("Global Dimension 1 Code", "Global Dimension 1 Code");  //db, 27-03-09: M12680
      CallRec."Previous Call No." := "No.";
      CallRec.MODIFY;

      CommLineRec.SETRANGE("Table Name", CommLineRec."Table Name"::"Service Call");  //db, 18-12-09: M16647
      CommLineRec.SETRANGE("No.", "No.");
      IF CommLineRec.FINDSET THEN BEGIN
        REPEAT
          CommLineRec2.COPY(CommLineRec);
          CommLineRec2."No." := CallRec."No.";
          CommLineRec2.INSERT;
        UNTIL CommLineRec.NEXT = 0;
      END;

      ServTextRec.SETRANGE("Table Name", ServTextRec."Table Name"::"Service Call");  //db, 18-12-09: M16647
      ServTextRec.SETRANGE("No.", "No.");
      IF ServTextRec.FINDSET THEN BEGIN
        REPEAT
          ServTextRec2.COPY(ServTextRec);
          ServTextRec2."No." := CallRec."No.";
          ServTextRec2.INSERT;
        UNTIL ServTextRec.NEXT = 0;
      END;


      //db.sn, 01-08-13: C007416
      //DP00465.so  No employee by call anymore (also now no resource by call)
      //EmployeeRec.SETRANGE(Type, EmployeeRec.Type::Call);
      //EmployeeRec.SETRANGE("No.", "No.");
      //IF EmployeeRec.FINDSET THEN BEGIN
      //  REPEAT
      //    EmployeeRec2.COPY(EmployeeRec);
      //    EmployeeRec2."No." := CallRec."No.";
      //    EmployeeRec2."Date/Time Export to FSA" := 0DT;
      //    EmployeeRec2."Export to FSA" := FALSE;
      //    EmployeeRec2."Actual Service Status" := '';
      //    EmployeeRec2."Actual Reference Point" := 0;
      //    EmployeeRec2."Starting Date" := 0D;
      //    EmployeeRec2."Starting Time" := 0T;
      //    EmployeeRec2."Ending Date" := 0D;
      //    EmployeeRec2."Ending Time" := 0T;
      //    EmployeeRec2.INSERT;
      //  UNTIL EmployeeRec.NEXT = 0;
      //END;
      //db.en, 01-08-13: C007416

      Rec := CallRec;
    END;

    PROCEDURE CheckWarrantyDiscount@1210190009(lvCode@1210190000 : Code[10];lvStartDate@1210190001 : Date;lvEndDate@1210190002 : Date) : Boolean;
    VAR
      ServWarrantyRec@1100525000 : Record 11012827;
    BEGIN
      //db, 04-02-10
      IF ServWarrantyRec.GET(lvCode) THEN
        IF ("Receiving Date" >= lvStartDate) AND ("Receiving Date" <= lvEndDate) THEN
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE DisplayMap@1100525007();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FIND('-') THEN
        MapMgt.MakeSelection(DATABASE::"Service Call",GETPOSITION)
      ELSE
        MESSAGE(Text013);
    END;

    PROCEDURE CheckContractStatus@1100525024(ServContrRec@1100525001 : Record 11012812);
    VAR
      OrderDate@1100525000 : Date;
    BEGIN
      //db, 10-06-10: M19644, M19645
      ServContrRec.TESTFIELD(Blocked, FALSE);
      IF ServContrRec.Status < ServContrRec.Status::Order THEN
        ERROR(Text004b, ServContrRec."No.", ServContrRec.Status);
      IF "Receiving Date" = 0D THEN
        OrderDate:= WORKDATE
      ELSE
        OrderDate := "Receiving Date";
      IF OrderDate < ServContrRec."Starting Date" THEN
        MESSAGE(Text004a, ServContrRec."No.", ServContrRec."Starting Date", FIELDCAPTION("Receiving Date"));
      IF ServContrRec."Expiring Date" <> 0D THEN BEGIN
        IF ServContrRec."Expiring Date" < OrderDate THEN
          ERROR(Text004, ServContrRec."No.", ServContrRec."Expiring Date");
        //IF ServContrRec."Ending Date" >= ServContrRec."Expiring Date" THEN
        //  MESSAGE(Text004, ServContrRec."No.", ServContrRec."Expiring Date");  //db, 30-12-10: M21843
      END;
    END;

    PROCEDURE CheckMarkLocationWatch@1210190006(VAR WatchRec@1210190000 : Record 11012861;VAR TmpWatchRec@1210190001 : TEMPORARY Record 11012861);
    BEGIN
      IF (WatchRec.MARK) AND (WatchRec."Location Watch") THEN BEGIN
        IF NOT ServLocRec.GET("Service Location No.") THEN ServLocRec.INIT;
        IF ServLocRec.Watch <> WatchRec.Code THEN
          //IF ServLocRec.Watch <> '' THEN  //??
          WatchRec.MARK := FALSE;
      END;

      //check if match discipline+Trade Speciality is compleet
      IF (WatchRec.MARK) THEN BEGIN
        IF (Discipline <> '') AND (WatchRec."Discipline Filter" <> '') AND
           ("Trade Speciality" <> '') AND (WatchRec."Trade Speciality Filter" <> '') THEN BEGIN
           TmpWatchRec := WatchRec;
           IF TmpWatchRec.INSERT THEN;
        END;
      END;
    END;

    PROCEDURE CheckTmpWatch@1210190013(VAR WatchRec@1210190000 : Record 11012861;VAR TmpWatchRec@1210190001 : TEMPORARY Record 11012861);
    BEGIN
      IF TmpWatchRec.FINDSET THEN BEGIN
        WatchRec.CLEARMARKS;
        REPEAT
          WatchRec := TmpWatchRec;
          WatchRec.MARK := TRUE;
        UNTIL TmpWatchRec.NEXT = 0;
        TmpWatchRec.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE FillVesselFieldsOfServiceOrder@1210190010(VAR ServiceOrder@1210190000 : Record 11012823);
    VAR
      ServiceOrderExtension@1210190001 : Record 11071727;
    BEGIN
      //kkleermaker, 110816, m28689
      IF ("Vessel No." = '') AND
         ("Vessel Name" = '') AND
         ("Agent No." = '') AND
         (Port = '') AND
         ("Quay Berth" = '')
      THEN EXIT;

      ServiceOrder."Vessel No." := "Vessel No.";
      ServiceOrder."First Possible Starting Date" := "First Possible Starting Date"; //kkleermaker.n, 110816, m28691
      ServiceOrder."First Possible Starting Time" := "First Possible Starting Time"; //kkleermaker.n, 110816, m28691
      ServiceOrder."Last Possible Ending Date" := "Last Possible Ending Date";
      ServiceOrder."Last Possible Ending Time" := "Last Possible Ending Time";

      IF NOT ServiceOrderExtension.GET(ServiceOrder."No.") THEN ServiceOrderExtension.INIT;
      ServiceOrderExtension."Vessel Name" := "Vessel Name";
      ServiceOrderExtension."Agent No." := "Agent No.";
      ServiceOrderExtension.Port := Port;
      ServiceOrderExtension."Quay Berth" := "Quay Berth";
      ServiceOrderExtension.UpdateServOrderExtension(ServiceOrder."No.");
    END;

    LOCAL PROCEDURE UpdateVessel@1210190019();
    VAR
      Vessel@1210190000 : Record 11071737;
    BEGIN
      //kkleermaker, 110817, M28697
      IF "Service Location No." <> xRec."Service Location No." THEN
        IF Vessel.GET("Service Location No.") THEN BEGIN
          "Vessel No." := Vessel."No.";
          "Vessel Name" := Vessel.Name;
        END ELSE BEGIN
          "Vessel No." := '';
          "Vessel Name" := '';
        END
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Global Dimension 1 Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::"Service Call");
      IF Dimension1Code <> '' THEN
        "Global Dimension 1 Code" := Dimension1Code;

      IF "Global Dimension 1 Code" <> '' THEN
        VALIDATE("Global Dimension 1 Code");
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012822) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012822');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Service Call", "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    PROCEDURE CheckPlanLimitDateTime@1100525021();
    BEGIN
      //db, 19-03-10: M18520
       IF ("First Possible Starting Date" = "Last Possible Ending Date") THEN
        IF ("First Possible Starting Time" <> 0T) AND ("Last Possible Ending Time" <> 0T) THEN
          IF ("First Possible Starting Time" > "Last Possible Ending Time") THEN
            FIELDERROR("First Possible Starting Time",STRSUBSTNO(Text000,FIELDCAPTION("Last Possible Ending Time")));
    END;

    PROCEDURE NormalizePostCodeHouseNo@1100526200();
    VAR
      ObjectImpWorkSheetMgt@1100526200 : Codeunit 11012839;
      PostCode@1100526201 : Code[20];
    BEGIN
      IF ObjectImpWorkSheetMgt.NormalizePostCode("Post Code", "Country/Region Code", PostCode) THEN
        "Post Code" := PostCode;
      "House No." := ObjectImpWorkSheetMgt.DetermineHouseNo(Address, "House No. Ext.");
    END;

    PROCEDURE GetObjectDescriptions@1100528600(VAR ODescription@1100528600 : Text[50];VAR ODescription2@1100528602 : Text[50]);
    VAR
      ServiceObject@1100528601 : Record 11071691;
    BEGIN
      ODescription := '';
      ODescription2 := '';
      IF "Object No." = '' THEN
        EXIT;

      IF ServiceObject.GET("Object No.") THEN BEGIN
        ODescription := ServiceObject.Description;
        ODescription2 := ServiceObject."Description 2";
      END;
    END;

    PROCEDURE SearchPlantLocation@1100529300() : Boolean;
    VAR
      PlantLocation@1100529300 : Record 11012554;
    BEGIN
      PlantLocation.SETCURRENTKEY("Post Code", "House No.", "House No. Ext.");
      IF PAGE.RUNMODAL(PAGE::"Plant Location Search", PlantLocation) = ACTION::LookupOK THEN BEGIN
        VALIDATE("Plant Location", PlantLocation.Code);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE SearchServiceLocation@1100528602() : Boolean;
    VAR
      ServiceLocation@1100528601 : Record 11012801;
    BEGIN
      ServiceLocation.SETCURRENTKEY("Post Code", "House No.", "House No. Ext.");
      IF PAGE.RUNMODAL(PAGE::"Find Service Location", ServiceLocation) = ACTION::LookupOK THEN BEGIN
      //  xRec := Rec;
      //  CurrFieldNo := FIELDNO("Service Location No.");
        VALIDATE("Service Location No.", ServiceLocation."No.");
        EXIT(TRUE);
      END;
    END;

    PROCEDURE ActivateServCallCard@1210190014();
    VAR
      ServiceSetup@1100525000 : Record 11012800;
      ServiceCall@1100409000 : Record 11012822;
    BEGIN
      ServiceSetup.GET;
      ServiceCall := Rec;  //db, 28-09-12: C002699
      IF ServiceSetup."Page ID Call" <> 0 THEN
        PAGE.RUN(ServiceSetup."Page ID Call", ServiceCall)
      ELSE
        PAGE.RUN(PAGE::"Service Call", ServiceCall);
    END;

    PROCEDURE ActivateVesselServCallCard@1100525002();
    VAR
      ServiceCall@1100409000 : Record 11012822;
    BEGIN
      //kzwerver, 140212, n, #C011037
      ServiceCall := Rec;
      PAGE.RUN(PAGE::"Vessel Service Call", ServiceCall);
    END;

    PROCEDURE UpdateCustomerProblem@1210190016();
    VAR
      CustomerServiceAnalysis@1210190000 : Record 11071728;
    BEGIN
      IF ("Customer No." = '') OR (Problem = '') THEN
        EXIT;
      CustomerServiceAnalysis.SETRANGE("Analysis Type", CustomerServiceAnalysis."Analysis Type"::Problem);
      CustomerServiceAnalysis.SETRANGE("Customer No.", "Customer No.");
      CustomerServiceAnalysis.SETRANGE("Standard Analysis Code", Problem);
      IF CustomerServiceAnalysis.COUNT = 1 THEN BEGIN
        CustomerServiceAnalysis.FINDFIRST;
        VALIDATE("Customer Problem", CustomerServiceAnalysis.Code);
      END;
    END;

    PROCEDURE EditDocuments@1100528702(ContactNo@1210190003 : Code[20];ContactPersonNo@1210190004 : Code[20];SendMail@1210190002 : Boolean;Recipient@1100528700 : Text[120]);
    VAR
      DocumentTemplate@1210190001 : Record 11012401;
      DocumentMailing@1210190000 : Codeunit 11012278;
      RecRef@1100525000 : RecordRef;
      DocumentLinkRIDs@1100525001 : ARRAY [5] OF RecordID;
    BEGIN
      RecRef.GETTABLE(Rec);
      DocumentLinkRIDs[1] := RecRef.RECORDID;

      DocumentMailing.EditDocuments(
        STRSUBSTNO('%1', DocumentTemplate.Type::"Service Order"), DocumentLinkRIDs,
        "Global Dimension 1 Code", ContactNo, ContactPersonNo, SendMail, Recipient);
    END;

    PROCEDURE ShowTodos@1100528700();
    VAR
      To_do@1100528700 : Record 5080;
    BEGIN
      To_do.SETRANGE("Service Call No.", "No.");
      To_do.SETRANGE("System To-do Type", To_do."System To-do Type"::Organizer);
      PAGE.RUNMODAL(PAGE::"To-do List", To_do);
    END;

    PROCEDURE FillSubcontractor@1100409000();
    VAR
      SubcontractorService@1100409000 : Record 11071789;
      Vendor@1100528600 : Record 23;
    BEGIN
      VALIDATE(Subcontractor, SubcontractorService.GetSubcontractorResourceNo(
        "Service Contract No.", "Service Location No.", "Object No.", '', Discipline, "Trade Speciality"));
    END;

    PROCEDURE StartServCalls@1100409002(lvAction@1100485000 : Integer;lvCount@1100485001 : Boolean) : Integer;
    VAR
      lvServCallRec@1100485002 : Record 11012822;
      lvServOrderRec@1100525000 : Record 11012823;
    BEGIN
      //db, 31-12-12: moved from form to table, not yet integrated with same function of codeunit 11012825
      IF lvCount AND ("No." = '') THEN EXIT(0);  //C026680

      lvServCallRec.SETFILTER("No.", '<>%1', "No.");
      CASE lvAction OF
        0:
          BEGIN
            lvServCallRec.SETCURRENTKEY("Service Contract No.");
            lvServCallRec.SETRANGE("Service Contract No.", "Service Contract No.");
            IF (lvCount = TRUE) AND ("Service Contract No." = '') THEN EXIT(0);
          END;
        1:
          BEGIN
            lvServCallRec.SETCURRENTKEY("Service Location No.");
            lvServCallRec.SETRANGE("Service Location No.", "Service Location No.");
            IF (lvCount = TRUE) AND ("Service Location No." = '') THEN EXIT(0);
          END;
        2:
          BEGIN
            lvServOrderRec.SETCURRENTKEY("Call No.");
            lvServOrderRec.SETRANGE("Call No.", "No.");
            IF lvCount = FALSE THEN BEGIN
              PAGE.RUNMODAL(0, lvServOrderRec);
              EXIT;
            END ELSE BEGIN
              IF "Service Order No." = '' THEN
                EXIT(0)
              ELSE
                EXIT(lvServOrderRec.COUNT);
            END;
          END;
        3:
          BEGIN
            lvServCallRec.SETCURRENTKEY("Customer No.");
            lvServCallRec.SETRANGE("Customer No.", "Customer No.");
            IF (lvCount = TRUE) AND ("Customer No." = '') THEN EXIT(0);
          END;
        4:
          BEGIN
            lvServCallRec.SETCURRENTKEY("Object No.");
            lvServCallRec.SETRANGE("Object No.", "Object No.");
            IF (lvCount = TRUE) AND ("Object No." = '') THEN EXIT(0);
          END;

      END;

      IF lvCount = FALSE THEN BEGIN
        PAGE.RUNMODAL(0, lvServCallRec);
      END ELSE BEGIN
        EXIT(lvServCallRec.COUNT);
      END;
    END;

    LOCAL PROCEDURE LinkDocumentsToServiceOrder@1100409006(IServiceOrder@1100409001 : Record 11012823);
    VAR
      DocumentProperties@1100409004 : Record 11012746;
      DocumentLinkManagement@1100409002 : Codeunit 11012401;
      ServiceCallRecRef@1100409006 : RecordRef;
      ServiceOrderRecRef@1100409005 : RecordRef;
      DocLinkRID@1100409003 : ARRAY [5] OF RecordID;
    BEGIN
      IF NOT DocumentProperties.READPERMISSION THEN
        EXIT;
      ServiceCallRecRef.GETTABLE(Rec);
      ServiceOrderRecRef.GETTABLE(IServiceOrder);
      DocLinkRID[2] := ServiceOrderRecRef.RECORDID; // Don't use as Source (> 1)
      DocumentLinkManagement.GetDocuments(DocumentProperties, ServiceCallRecRef);
      DocumentProperties.MARKEDONLY(TRUE);
      IF DocumentProperties.FINDSET THEN
        REPEAT
          DocumentLinkManagement.CreateDocumentLink(DocumentProperties, DocLinkRID);
        UNTIL DocumentProperties.NEXT = 0;
    END;

    LOCAL PROCEDURE DetermineContractNo@1100528603();
    VAR
      ServiceLocationInfoMgt@1100528600 : Codeunit 11012856;
      ActualServiceContractNo@1100528601 : Code[20];
    BEGIN
      IF "Service Location No." <> '' THEN BEGIN
        ActualServiceContractNo := ServiceLocationInfoMgt.GetActualContractFromLocation("Service Location No.", "Object No.", TODAY);
        IF ActualServiceContractNo <> '' THEN
          VALIDATE("Service Contract No.", ActualServiceContractNo);
      END;
    END;

    PROCEDURE DetermineObjectNo@1100525009();
    VAR
      LocationServiceObject@1100525003 : Record 11071691;
      ServiceObject@1100525001 : Record 11071691;
      ServiceLocation@1100525000 : Record 11012801;
      ServiceContractObject@1100525002 : Record 11071702;
      ServiceContract@1100525005 : Record 11012812;
      FoundServiceObjectNo@1100525004 : Code[20];
    BEGIN
      IF "Service Contract No." <> '' THEN BEGIN
        ServiceContract.GET("Service Contract No.");
        ServiceContractObject.SETRANGE("Service Contract No.", "Service Contract No.");
        ServiceContractObject.SETRANGE(Blocked, FALSE);
        IF "Service Location No." <> '' THEN
          ServiceContractObject.SETRANGE("Service Location No.", "Service Location No.");
        IF ServiceContractObject.FINDFIRST THEN BEGIN
          IF ServiceContractObject.NEXT = 0 THEN
            FoundServiceObjectNo := ServiceContractObject."Service Object No."
          ELSE BEGIN
            IF ServiceLocation.GET("Service Location No.") THEN BEGIN
              ServiceLocation.GetRelatedObjects(LocationServiceObject);
              LocationServiceObject.SETRANGE(Blocked, FALSE);
              ServiceContractObject.FINDSET;
              ServiceObject.MARKEDONLY(TRUE);
              REPEAT
                LocationServiceObject.SETRANGE("No.", ServiceContractObject."Service Object No.");
                IF NOT LocationServiceObject.ISEMPTY THEN BEGIN
                  ServiceObject."No." := ServiceContractObject."Service Object No.";
                  ServiceObject.MARK(TRUE);
                END;
              UNTIL (ServiceObject.COUNT > 1) OR (ServiceContractObject.NEXT = 0);
              IF ServiceObject.FINDFIRST AND (ServiceObject.NEXT = 0) THEN
                FoundServiceObjectNo := ServiceObject."No.";
            END;
          END;
        END;
      END;
      IF (ServiceContract."Contract Form" <> ServiceContract."Contract Form"::"Framework Contract") AND
         (FoundServiceObjectNo = '') AND ("Service Location No." <> '')
      THEN BEGIN
        IF ServiceLocation.GET("Service Location No.") THEN BEGIN
          ServiceLocation.GetRelatedObjects(LocationServiceObject);
          LocationServiceObject.SETRANGE(Blocked, FALSE);
          IF LocationServiceObject.FINDFIRST AND (LocationServiceObject.NEXT = 0) THEN
            FoundServiceObjectNo := LocationServiceObject."No.";
        END;
      END;

      IF (FoundServiceObjectNo <> '') OR
         (ServiceContract."Contract Form" = ServiceContract."Contract Form"::"Framework Contract")
      THEN BEGIN
        CurrFieldNo := 0;
        VALIDATE("Object No.", FoundServiceObjectNo);
      END;
    END;

    PROCEDURE GetComplexCode@1100528629() : Code[20];
    VAR
      ServiceLocation@1100528600 : Record 11012801;
    BEGIN
      IF ServiceLocation.GET("Service Location No.") THEN
        EXIT(ServiceLocation.GetComplexCode);
    END;

    PROCEDURE SyncServiceLocationData@1100528637(IFieldNo@1100528600 : Integer);
    VAR
      ServiceSetup@1100528601 : Record 11012800;
      ServiceLocation@1100528602 : Record 11012801;
    BEGIN
      ServiceSetup.GET;
      IF NOT ServiceSetup."Sync. Location by Order/Call" THEN
        EXIT;
      IF NOT ServiceLocation.GET("Service Location No.") THEN
        EXIT;
      CASE IFieldNo OF
        FIELDNO(Name):
          ServiceLocation.VALIDATE(Description, Name);
        FIELDNO("Contact Name"):
          ServiceLocation.VALIDATE("Contact Name", "Contact Name");
        FIELDNO("Phone No."):
          ServiceLocation.VALIDATE("Phone No.", "Phone No.");
        FIELDNO("Phone No. 2"):
          ServiceLocation.VALIDATE("Phone No. 2", "Phone No. 2");
        FIELDNO("Mobile Phone No."):
          ServiceLocation.VALIDATE("Mobile Phone No.", "Mobile Phone No.");
        FIELDNO("E-Mail"):
          ServiceLocation.VALIDATE("E-Mail", "E-Mail");
        FIELDNO("Fax No."):
          ServiceLocation.VALIDATE("Fax No.", "Fax No.");
      ELSE
        EXIT;
      END;
      ServiceLocation.MODIFY(TRUE);
    END;

    PROCEDURE GetFilteredAnalysisOnProblem@1100409008(Problem@1100409000 : Code[10];AnalysisType@1100409003 : Option;VAR ServiceAnalysis@1100409001 : Record 11012842);
    VAR
      ServiceAnalysisRelation@1100409002 : Record 11072199;
    BEGIN
      // dp00662
      ServiceAnalysisRelation.SETRANGE("Problem Code", Problem);
      ServiceAnalysisRelation.SETRANGE("Analysis Type", AnalysisType);
      IF ServiceAnalysisRelation.FINDSET THEN BEGIN
        REPEAT
          ServiceAnalysis."Analysis Type" := ServiceAnalysisRelation."Analysis Type";
          ServiceAnalysis.Code := ServiceAnalysisRelation."Analysis Code";
          ServiceAnalysis.MARK(TRUE);
        UNTIL ServiceAnalysisRelation.NEXT = 0;
        ServiceAnalysis.MARKEDONLY(TRUE);
      END;
    END;

    PROCEDURE GetFilteredProblemsOnDisciplines@1100409009(VAR ServiceAnalysis@1100409001 : Record 11012842);
    VAR
      Resource@1100409000 : Record 11229278;
      ServiceContractDiscipline@1100409004 : Record 11012881;
      ServiceLocationDiscipline@1100409003 : Record 11012844;
      ServiceAnalysisDiscipline@1100409002 : Record 11072198;
      DisciplineFilter@1100525000 : Text;
    BEGIN
      // dp00662
      IF NOT Resource.GET("Employee No.") THEN
        Resource.INIT;
      Resource.CALCFIELDS("Disciplines Exist");
      IF (Discipline <> '') OR Resource."Disciplines Exist" THEN BEGIN
         ServiceAnalysisDiscipline.SETRANGE("Analysis Type", ServiceAnalysisDiscipline."Analysis Type"::Problem);
         DisciplineFilter := Resource.GetDisciplineFilter;
         IF DisciplineFilter <> '' THEN
           DisciplineFilter += '|';
         IF Discipline <> '' THEN
           DisciplineFilter += Discipline
         ELSE
           DisciplineFilter += '''''';
         ServiceAnalysisDiscipline.SETFILTER(Discipline, DisciplineFilter);
         IF ServiceAnalysisDiscipline.FINDSET THEN BEGIN
           REPEAT
             IF ServiceAnalysis.GET(ServiceAnalysisDiscipline."Analysis Type", ServiceAnalysisDiscipline."Analysis Code") THEN BEGIN
               ServiceAnalysis.MARK(TRUE);
               ServiceAnalysis.MARKEDONLY(TRUE);
             END;
           UNTIL ServiceAnalysisDiscipline.NEXT = 0;
         END;
      END ELSE BEGIN
        IF "Service Contract No." <> '' THEN BEGIN
          ServiceContractDiscipline.SETRANGE("Service Contract No.", "Service Contract No.");
          IF ServiceContractDiscipline.FINDSET THEN BEGIN
            REPEAT
              ServiceAnalysisDiscipline.SETRANGE("Analysis Type", ServiceAnalysisDiscipline."Analysis Type"::Problem);
              ServiceAnalysisDiscipline.SETRANGE(Discipline, ServiceContractDiscipline.Discipline);
              IF ServiceAnalysisDiscipline.FINDSET THEN BEGIN
                REPEAT
                  IF ServiceAnalysis.GET(ServiceAnalysisDiscipline."Analysis Type", ServiceAnalysisDiscipline."Analysis Code") THEN BEGIN
                    ServiceAnalysis.MARK(TRUE);
                    ServiceAnalysis.MARKEDONLY(TRUE);
                  END;
                UNTIL ServiceAnalysisDiscipline.NEXT = 0;
              END;
            UNTIL ServiceContractDiscipline.NEXT = 0;
          END;
        END;

        IF "Service Location No." <> '' THEN BEGIN
          ServiceLocationDiscipline.SETRANGE("Service Location No.", "Service Location No.");
          IF ServiceLocationDiscipline.FINDSET THEN BEGIN
            REPEAT
              ServiceAnalysisDiscipline.SETRANGE("Analysis Type", ServiceAnalysisDiscipline."Analysis Type"::Problem);
              ServiceAnalysisDiscipline.SETRANGE(Discipline, ServiceLocationDiscipline.Discipline);
              IF ServiceAnalysisDiscipline.FINDSET THEN BEGIN
                REPEAT
                  IF ServiceAnalysis.GET(ServiceAnalysisDiscipline."Analysis Type", ServiceAnalysisDiscipline."Analysis Code") THEN BEGIN
                    ServiceAnalysis.MARK(TRUE);
                    ServiceAnalysis.MARKEDONLY(TRUE);
                  END;
                UNTIL ServiceAnalysisDiscipline.NEXT = 0;
              END;
            UNTIL ServiceLocationDiscipline.NEXT = 0;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetFilteredProblemsOnSUP@1100528653(VAR ServiceAnalysis@1100528600 : Record 11012842);
    VAR
      ServiceLocationTypeRoom@1100528601 : Record 11072281;
      SUPRoomPart@1100528602 : Record 11072282;
      SUPPartServiceAnalysis@1100528603 : Record 11072283;
      ServiceAnalysis2@1100525003 : Record 11012842;
      ServiceUnitPriceManagement@1100525001 : Codeunit 11012846;
      CustomerNo@1100525000 : Code[20];
      Skip@1100525002 : Boolean;
    BEGIN
      IF ("Room (SUP)" = '') AND ("Part (SUP)" = '') THEN
        EXIT;
      CustomerNo := "Customer No.";
      IF NOT ServiceUnitPriceManagement.CustomerHasCustomizations(CustomerNo) THEN
        CustomerNo := '';

      ServiceLocationTypeRoom.SETRANGE("Customer No.", CustomerNo);
      IF "Service Location Type" <> '' THEN
        ServiceLocationTypeRoom.SETRANGE("Service Location Type", "Service Location Type");
      SUPRoomPart.SETRANGE("Customer No.", CustomerNo);
      IF "Room (SUP)" <> '' THEN
        SUPRoomPart.SETRANGE("Room (SUP)", "Room (SUP)");
      IF "Part (SUP)" <> '' THEN
        SUPRoomPart.SETRANGE("Part (SUP)", "Part (SUP)");
      IF SUPRoomPart.FINDSET THEN
        REPEAT
          Skip := FALSE;
          IF "Service Location Type" <> '' THEN BEGIN
            ServiceLocationTypeRoom.SETRANGE("Room (SUP)", SUPRoomPart."Room (SUP)");
            Skip := ServiceLocationTypeRoom.ISEMPTY;
          END;
          IF NOT Skip THEN BEGIN
            SUPPartServiceAnalysis.SETRANGE("Customer No.", CustomerNo);
            SUPPartServiceAnalysis.SETRANGE("Part (SUP)", SUPRoomPart."Part (SUP)");
            IF SUPPartServiceAnalysis.FINDSET THEN
              REPEAT
                ServiceAnalysis.SETRANGE("Analysis Type", SUPPartServiceAnalysis."Analysis Type");
                ServiceAnalysis.SETRANGE(Code, SUPPartServiceAnalysis."Analysis Code");
                IF NOT ServiceAnalysis.ISEMPTY THEN BEGIN // Already marked, mark also in second record
                  ServiceAnalysis2."Analysis Type" := SUPPartServiceAnalysis."Analysis Type";
                  ServiceAnalysis2.Code := SUPPartServiceAnalysis."Analysis Code";
                  ServiceAnalysis2.MARK(TRUE);
                END;
                ServiceAnalysis.SETRANGE("Analysis Type");
                ServiceAnalysis.SETRANGE(Code);
              UNTIL SUPPartServiceAnalysis.NEXT = 0;
          END;
        UNTIL SUPRoomPart.NEXT = 0;
      ServiceAnalysis.COPY(ServiceAnalysis2);
      ServiceAnalysis.MARKEDONLY(TRUE);
    END;

    PROCEDURE SetUseFilledOrderDateTime@1100525003(IUseOrderDateTime@1100485000 : Boolean);
    BEGIN
      //C022644
      gUseFilledOrderDateTime := IUseOrderDateTime;
    END;

    PROCEDURE DetermineBilltoCustomerbySC@1100528623();
    VAR
      SCCustSourceTypeSetup@1100528600 : Record 11071800;
      ServiceContract@1100528601 : Record 11012812;
      ServiceLocation@1100528602 : Record 11012801;
    BEGIN
      //C022970
      IF "Service Contract No." = '' THEN
        EXIT;
      IF NOT ServiceContract.GET("Service Contract No.") THEN
        EXIT;
      IF ("Service Location No." <> '') AND
         SCCustSourceTypeSetup.GET(SCCustSourceTypeSetup.Type::Contract, "Service Contract No.", SCCustSourceTypeSetup."Source Type"::Call) AND
         (SCCustSourceTypeSetup."Bill-to" = SCCustSourceTypeSetup."Bill-to"::"Service Location")
      THEN BEGIN
        IF ServiceLocation.GET("Service Location No.") THEN BEGIN
          IF ServiceLocation."Customer No." <> '' THEN
            VALIDATE("Bill-to Customer No.", ServiceLocation."Customer No.");
          IF ServiceLocation."Address Code" <> '' THEN
            VALIDATE("Alternative Bill-to Address", ServiceLocation."Address Code");
        END;
      END ELSE BEGIN
        IF ServiceContract."Bill-to Customer No. (CP)" <> '' THEN
          VALIDATE("Bill-to Customer No.", ServiceContract."Bill-to Customer No. (CP)");
        IF ServiceContract."Alt. Bill-to Address (CP)" <> '' THEN
          VALIDATE("Alternative Bill-to Address", ServiceContract."Alt. Bill-to Address (CP)");
      END;
      CheckInvoiceAddress;
    END;

    PROCEDURE FillPreferredEmployee@1100528650();
    VAR
      PreferredEmployee@1100528600 : Record 11012843;
      DummyOption@1100528602 : Option;
      Origin@1100528601 : ' ,Call,Service Order';
    BEGIN
      VALIDATE("Preferred Employee No.",
        PreferredEmployee.GetPreferredEmployee(
          "Service Contract No.", "Service Location No.", "Object No.", '', '', Discipline, "Trade Speciality", "Expected Date", DummyOption, Origin::Call));
    END;

    LOCAL PROCEDURE ApplyProblemCodeAdditionalInfo@1100528652();
    VAR
      ServiceAnalysis@1100528600 : Record 11012842;
      ServiceAnalysisDiscipline@1100528601 : Record 11072198;
    BEGIN
      IF ServiceAnalysis.GET(ServiceAnalysis."Analysis Type"::Problem, Problem) THEN BEGIN
        IF ServiceAnalysis.Priority <> '' THEN
          VALIDATE(Priority, ServiceAnalysis.Priority);
        IF ServiceAnalysis."Expected Hours" <> 0 THEN
          VALIDATE("Expected Hours", ServiceAnalysis."Expected Hours");
        ServiceAnalysisDiscipline.SETRANGE("Analysis Type", ServiceAnalysisDiscipline."Analysis Type"::Problem);
        ServiceAnalysisDiscipline.SETRANGE("Analysis Code", Problem);
        IF ServiceAnalysisDiscipline.FINDSET THEN
          IF ServiceAnalysisDiscipline.NEXT = 0 THEN
            VALIDATE(Discipline, ServiceAnalysisDiscipline.Discipline);
      END;
    END;

    PROCEDURE InsertServiceText@1100528608(IAnalysisType@1100528600 : 'Problem,Cause,Solution';IAnalysisCode@1100528601 : Code[10];ITableFieldNo@1100528602 : Integer);
    VAR
      ServiceText@1100528603 : Record 11012882;
      ServiceAnalysis@1100528606 : Record 11012842;
    BEGIN
      //IF SkipUpdateServiceText THEN EXIT;

      IF IAnalysisCode = '' THEN EXIT;

      ServiceText.SETRANGE("Table Name", ServiceText."Table Name"::"Service Call");
      ServiceText.SETRANGE("No.", "No.");
      ServiceText.SETRANGE("Table Field", ITableFieldNo);
      IF NOT ServiceText.ISEMPTY THEN
        EXIT;

      IF ServiceAnalysis.GET(IAnalysisType, IAnalysisCode) THEN BEGIN
        ServiceText."Table Name" := ServiceText."Table Name"::"Service Call";
        ServiceText."No." := "No.";
        ServiceText."Table Field" := ITableFieldNo;
        ServiceText."Line No." := 10000;
        ServiceText.Date := TODAY;
        ServiceText."Time Created" := TIME;
        ServiceText.Comment := ServiceAnalysis.Description;
        ServiceText.INSERT(TRUE);
      END;
    END;

    PROCEDURE GetRoomDescription@1100525047() : Text[50];
    VAR
      SUPRoom@1100525000 : Record 11071950;
      ServiceUnitPriceManagement@1100528600 : Codeunit 11012846;
      CustomerNo@1100528601 : Code[20];
    BEGIN
      IF ServiceUnitPriceManagement.CustomerHasCustomizations("Customer No.") THEN
        CustomerNo := "Customer No.";
      IF SUPRoom.GET(CustomerNo, "Room (SUP)") THEN
        EXIT(SUPRoom.Description);
    END;

    PROCEDURE GetPartDescription@1100525048() : Text[50];
    VAR
      SUPPart@1100525000 : Record 11071951;
      ServiceUnitPriceManagement@1100528600 : Codeunit 11012846;
      CustomerNo@1100528601 : Code[20];
    BEGIN
      IF ServiceUnitPriceManagement.CustomerHasCustomizations("Customer No.") THEN
        CustomerNo := "Customer No.";
      IF SUPPart.GET(CustomerNo, "Part (SUP)") THEN
        EXIT(SUPPart.Description);
    END;

    PROCEDURE NotifyUsersOnNewServPortCall@1100528604();
    VAR
      ServPortUserstoNotify@1100528600 : Record 11126068;
      RecordLinkManagement@1100528603 : Codeunit 447;
      ServiceCallPage@1100528604 : Page 11125208;
      RecRef@1100528602 : RecordRef;
    BEGIN
      IF Origin <> Origin::"Service Portal" THEN
        EXIT;
      IF "No." = '' THEN
        EXIT;
      IF "Customer No." = '' THEN
        EXIT;
      ServPortUserstoNotify.SETRANGE("Customer No.", "Customer No.");
      IF ServPortUserstoNotify.FINDSET THEN BEGIN
        SetLanguage;
        REPEAT
          RecRef.GETTABLE(Rec);
          IF UserSetup.GET(ServPortUserstoNotify."User ID") THEN
            RecordLinkManagement.CreateNote(RecRef, ServiceCallPage.OBJECTID(FALSE), STRSUBSTNO(Text017, "No."), UserSetup."User ID");
        UNTIL ServPortUserstoNotify.NEXT = 0;
        RestoreLanguage;
      END;
    END;

    LOCAL PROCEDURE SetLanguage@1100525006();
    VAR
      UserPersonalization@1100525000 : Record 2000000073;
    BEGIN
      CurrentGlobalLanguage := GLOBALLANGUAGE;
      IF UserPersonalization.GET(USERSECURITYID) THEN
        IF UserPersonalization."Language ID" <> 0 THEN
          GLOBALLANGUAGE(UserPersonalization."Language ID");
    END;

    LOCAL PROCEDURE RestoreLanguage@1100525012();
    BEGIN
      IF CurrentGlobalLanguage <> 0 THEN
        GLOBALLANGUAGE(CurrentGlobalLanguage);
    END;

    LOCAL PROCEDURE DetermineMasterProject@1100528605();
    VAR
      ServiceLocation@1100528600 : Record 11012801;
    BEGIN
      IF "Service Location No." = '' THEN
        EXIT;
      IF ServiceLocation.GET("Service Location No.") THEN BEGIN
        IF (ServiceLocation."Warranty Expires On" = 0D) OR (ServiceLocation."Warranty Expires On" > TODAY) THEN
          IF ServiceLocation."Warranty Project No." <> '' THEN BEGIN
            VALIDATE("Master Project", ServiceLocation."Warranty Project No.");
            IF ServiceLocation."Warranty Element No" <> '' THEN
              VALIDATE("Master Element", ServiceLocation."Warranty Element No");
        END;
      END;
    END;

    BEGIN
    {
      4PS, 15-11-13, DP00483, Performance tuning: Key Status,Receiving Date added
    }
    END.
  }
}

