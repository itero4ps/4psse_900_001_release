OBJECT Table 11012823 Service Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 37=m,
                TableData 39=m,
                TableData 83=m,
                TableData 11012039=rm,
                TableData 11012055=m,
                TableData 11012819=m,
                TableData 11012823=md,
                TableData 11012825=m,
                TableData 11012886=m,
                TableData 11020221=m,
                TableData 11020308=m,
                TableData 11020335=m;
    DataCaptionFields=No.,Description;
    OnInsert=VAR
               ServiceSourceTypeSetup@1100528600 : Record 11071726;
               ServiceSurchargeManagement@1100528601 : Codeunit 11012834;
               SymbrioFunctions@11128200 : Codeunit 11127975;
             BEGIN
               ServSetup.GET;

               IF "VAT Prod. Posting Group" = '' THEN
                 "VAT Prod. Posting Group" := ServSetup."VAT Prod. Posting Group";

               ServiceSourceTypeSetup.GET("Source Type");

               IF "No." = '' THEN BEGIN
                 ServiceSourceTypeSetup.TESTFIELD("No. Series");
                 NoSeriesMgt.InitSeries(ServiceSourceTypeSetup."No. Series", xRec."No. Series", 0D, "No.", "No. Series");
               END;

               //db.sn, 28-08-14: C016922
               IF "Assigned to" = '' THEN
                 IF ServSetup."Assign To" = ServSetup."Assign To"::User THEN
                   IF UserSetup.GET(USERID) THEN
                     VALIDATE("Assigned to", UserSetup."Employee No.");
               IF "Order Manager" = '' THEN
                 IF ServSetup."Order Manager based on" = ServSetup."Order Manager based on"::User THEN
                   IF UserSetup.GET(USERID) THEN
                     VALIDATE("Order Manager", UserSetup.Salesperson);
               //db.en, 28-08-14:C016922

               IF (NOT gUseFilledOrderDateTime) THEN BEGIN
                 "Order Date":= WORKDATE;
                 "Order Time":= TIME;
               END;

               DetermineServiceType(TRUE);
               IF ("Order Kind" = '') AND (ServiceSourceTypeSetup."Order Kind" <> '') THEN
                 VALIDATE("Order Kind", ServiceSourceTypeSetup."Order Kind");
               IF ("Order Type" = '') AND (ServiceSourceTypeSetup."Order Type" <> '') THEN
                 VALIDATE("Order Type", ServiceSourceTypeSetup."Order Type");

               "Created on":= TODAY;
               "Created by" := USERID;
               "Modified by" := USERID;
               "Modified on":= TODAY;
               "Previous Service Order No." := '';
               "Base Service Order No." := "No.";
               "Base Service Order" := TRUE;
               Status := Status::Open;
               "Export to FSA" := FALSE;
               "Date/Time Export to FSA" := 0DT;
               "Decentral Created" := FALSE;
               "Service Order Cost Activated" := FALSE;
               IF "Starting Date" = 0D THEN
                 "Starting Date" := WORKDATE;
               //mg.sc, 12-04-11: M18535
               IF "Expected Hours" = 0 THEN BEGIN
                 "Expected Hours" := ServSetup."Expected Hours";
                 CheckExpectedHours(0, "Order Kind");
                 CheckExpectedHours(1, "Order Type");
               END;
               IF "Duration Time" < "Expected Hours" THEN
                 "Duration Time" := "Expected Hours";
               //mg.ec, 12-04-11: M18535
               IF "Source Type" <> "Source Type"::Contract THEN
                 "Service Control Period Date" := "Order Date";
               CheckUpdateDocRefPoint('I');
               VALIDATE("Progress Scheme", ProgSchemeRec.DetermineProgrScheme("No. Series","No."));
               IF (NOT gUseFilledOrderDateTime) THEN
                 ProgPhaseRec.CheckProgressScheme(ProgPhaseRec.Type::ServOrder, "Progress Scheme", "No.", Status, TODAY, TIME)
               ELSE
                 ProgPhaseRec.CheckProgressScheme(ProgPhaseRec.Type::ServOrder,"Progress Scheme","No.",Status,"Order Date","Order Time");
               UpdateNextDeadline;
               CheckSendReport;  //db, 21-06-11: M26634
               "Additional Cost" := DetermineAdditionalCost;  //db, 08-11-07 (call 9622)
               ValidateShortcutDimCode(1,"Global Dimension 1 Code", TRUE);  //db, 30-11-11: M28816

               BuildRelationalStructure('INSERT');
               ServiceSurchargeManagement.CopySurchargeLinesToSO(Rec);
               UpdateSurchargeFields; //mg, 15-04-13: C006849

               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05

               //>>160408 ITERO.SB RAD-206 Added field "Tactics Agreement"
               "Tactics Agreement":=ServSetup."Tactics Agreement";
               //<<

               // 150504 Symbrio Integration
               SymbrioFunctions.fnMarkSOForExportToSymbrio(Rec, xRec);
             END;

    OnModify=VAR
               SymbrioFunctions@11128200 : Codeunit 11127975;
             BEGIN
               "Modified by" := USERID;
               "Modified on":= TODAY;
               "Modified on (Time)" := TIME;

               UpdateServiceCall;
               UpdateFinishedBudgetLines();
               CheckUpdateDocRefPoint('M');
               UpdateNextDeadline;
               CheckSendReport;  //db, 21-06-11: M26634

               BuildRelationalStructure('MODIFY');

               VALIDATE("Collective List No.");
               UpdateServiceOrderFinished;
               // 150504 Symbrio Integration
               SymbrioFunctions.fnMarkSOForExportToSymbrio(Rec, xRec);
             END;

    OnDelete=VAR
               lShippingDetailsRec@1210190000 : Record 11012120;
               CommentLine@1100485000 : Record 97;
               lvDebriefTextRec@1100485001 : Record 11012886;
               lvDocRefPointRec@1100525004 : Record 11020296;
               ServBudgetRec@1100485003 : Record 11012875;
               PreferenceLocation@1100525000 : Record 11020353;
               SignatureRec@1100525002 : Record 11020349;
               ServOrderExtensionRec@1210190001 : Record 11071727;
               ServiceText@1210190002 : Record 11012882;
               ServiceOrderObject@1100528600 : Record 11071724;
               UnitPriceServiceOrder@1100528601 : Record 11071772;
               UnitPriceProdRecording@1100528602 : Record 11071773;
               ServiceResponsiblePerson@1100528603 : Record 11012808;
               FPSMobileItemUsage@1100528101 : Record 11125647;
               WorkOrder@1100529000 : Record 11229279;
               ServiceCall@1100528604 : Record 11012822;
               SOPlantMaintenanceScheme@1100528800 : Record 11072210;
               PlantOrderLineServiceOrder@1100528801 : Record 11072211;
               SymbrioFunctions@11128200 : Codeunit 11127975;
               ServiceLocContactDebrief@1100528605 : Record 11072288;
               UpdateAction@1100525001 : 'Insert,Modify,Delete,Rename';
             BEGIN
               DisconnectChain;

               IF Status = Status::Cancelled THEN BEGIN  //db, 10-12-09: M15683
                 CheckCommitments;
                 CheckWIP;
               END ELSE BEGIN
                 TESTFIELD(Status, Status::Finished);
               END;

               IF SignatureRec.GET("No.") THEN
                 SignatureRec.DELETE;  //db, 21-05-10

               IF ServOrderExtensionRec.GET("No.") THEN
                 ServOrderExtensionRec.DELETE;  //db, 20-05-11

               ServBudgetRec.SETRANGE("Budget Type", ServBudgetRec."Budget Type"::Order);
               ServBudgetRec.SETRANGE("Service Order No.", "No.");
               ServBudgetRec.DELETEALL; //kkleermaker, 110706, M27202 (with TRUE: SQL-problem)

               ServAdviceRec.SETRANGE("Record Type", ServAdviceRec."Record Type"::ServOrder);
               ServAdviceRec.SETRANGE("Service Order No.", "No.");
               ServAdviceRec.DELETEALL(TRUE);

               ServCostPlusRec.SETRANGE("Service Order No.", "No.");
               ServCostPlusRec.DELETEALL(TRUE);

               ServActRec.SETRANGE("Service Order No.", "No.");
               ServActRec.DELETEALL(TRUE);

               ServLogRec.SETRANGE("Document Type", ServLogRec."Document Type"::ServOrder);
               ServLogRec.SETRANGE("Document No.", "No.");
               ServLogRec.DELETEALL(TRUE);

               ProgPhaseRec.SETRANGE(Type, ProgPhaseRec.Type::ServOrder);
               ProgPhaseRec.SETRANGE("Document No.", "No.");
               ProgPhaseRec.DELETEALL(TRUE);

               RefPeriodRec.RESET;
               RefPeriodRec.SETCURRENTKEY(Type, "Document No.");
               RefPeriodRec.SETRANGE(Type, RefPeriodRec.Type::ServOrder);
               RefPeriodRec.SETRANGE("Document No.", "No.");
               RefPeriodRec.DELETEALL(TRUE);

               lvDocRefPointRec.SETRANGE(Type, lvDocRefPointRec.Type::ServOrder);
               lvDocRefPointRec.SETRANGE("Document No.", "No.");
               IF lvDocRefPointRec.FINDSET() THEN
                 REPEAT
                   lvDocRefPointRec.InsertDocRefPointQueueEntry(UpdateAction::Delete);
                 UNTIL lvDocRefPointRec.NEXT = 0;
               lvDocRefPointRec.DELETEALL;

               IF lShippingDetailsRec.READPERMISSION THEN BEGIN
                 lShippingDetailsRec.SETRANGE(Source, lShippingDetailsRec.Source::AdviceOrder);
                 lShippingDetailsRec.SETRANGE("Order No.", "No.");
                 lShippingDetailsRec.DELETEALL(TRUE);
               END;

               CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::"Service Order");
               CommentLine.SETRANGE("No.","No.");
               CommentLine.DELETEALL;

               lvDebriefTextRec.SETRANGE(Type,lvDebriefTextRec.Type::ServiceOrder);
               lvDebriefTextRec.SETRANGE("No.","No.");
               lvDebriefTextRec.DELETEALL;

               ServiceText.SETRANGE("Table Name", ServiceText."Table Name"::"Service Order");
               ServiceText.SETRANGE("No.","No.");
               ServiceText.DELETEALL;

               MoveEntries.RemoveServOrderEntries(Rec);

               PreferenceLocation.SETRANGE(Type,PreferenceLocation.Type::"Service Order");
               PreferenceLocation.SETRANGE("No.","No.");
               PreferenceLocation.DELETEALL(TRUE);

               ServiceOrderObject.SETRANGE("Service Order No.", "No.");
               ServiceOrderObject.DELETEALL(TRUE);

               //kzwerver, 111003, sn, #RfC Unit Price
               UnitPriceServiceOrder.SETRANGE("Service Order No.", "No.");
               UnitPriceServiceOrder.DELETEALL;

               UnitPriceProdRecording.SETRANGE("Service Order No.", "No.");
               UnitPriceProdRecording.DELETEALL(TRUE);
               //kzwerver, 111003, en, #RfC Unit Price

               ServiceResponsiblePerson.SETRANGE("Service Order No.", "No.");
               ServiceResponsiblePerson.DELETEALL(TRUE);

               ServiceLocContactDebrief.SETRANGE("Service Order No.", "No.");
               ServiceLocContactDebrief.DELETEALL(TRUE);

               //DP00465
               WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
               WorkOrder.SETRANGE("Source Company", COMPANYNAME);
               WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
               WorkOrder.SETRANGE("Source No.", "No.");
               WorkOrder.SetOnDeleteSource();
               WorkOrder.DELETEALL(TRUE);

               SOPlantMaintenanceScheme.SETRANGE("Service Order No.", "No.");
               SOPlantMaintenanceScheme.DELETEALL(TRUE);

               PlantOrderLineServiceOrder.SETRANGE("Service Order", "No.");
               IF PlantOrderLineServiceOrder.FINDSET THEN
                 REPEAT
                   PlantOrderLineServiceOrder."Service Order" := '';
                   PlantOrderLineServiceOrder.Processed := FALSE;
                   PlantOrderLineServiceOrder."Process Date" := 0DT;
                   PlantOrderLineServiceOrder."Processed By" := '' ;
                   PlantOrderLineServiceOrder.MODIFY;
                 UNTIL PlantOrderLineServiceOrder.NEXT = 0;

               IF "Call No." <> '' THEN
                 IF ServiceCall.GET("Call No.") THEN
                   IF ServiceCall."Service Order No." = "No." THEN BEGIN
                     ServiceCall."Service Order No." := '';
                     ServiceCall.MODIFY(TRUE);
                   END;

               FIND('=');

               DimMgt.DeleteDefaultDim(DATABASE::"Service Order", "No."); //** 09-06-2010

               BuildRelationalStructure('DELETE');

               FPSMobileItemUsage.SETRANGE("Service Order No.", "No.");
               FPSMobileItemUsage.DELETEALL(TRUE);
               CommunicateOrderToFLS(3); //DP00703.n
               // 150504 Symbrio Integration
               SymbrioFunctions.fnDeleteServiceOrderInSymbrio(Rec);
             END;

    OnRename=BEGIN
               ERROR(Text999);
             END;

    CaptionML=ENU=Service Order;
    LookupPageID=Page11012830;
    DrillDownPageID=Page11012830;
  }
  FIELDS
  {
    { 10  ;   ;No.                 ;Code20        ;OnValidate=VAR
                                                                ServiceSourceTypeSetup@1100528600 : Record 11071726;
                                                              BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  ServiceSourceTypeSetup.GET("Source Type");
                                                                  NoSeriesMgt.TestManual(ServiceSourceTypeSetup."No. Series");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 15  ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                UpdateWorkOrderInfo(CurrFieldNo);
                                                              END;

                                                   CaptionML=ENU=Description }
    { 17  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 20  ;   ;Customer No.        ;Code20        ;TableRelation=Customer.No.;
                                                   OnValidate=VAR
                                                                ServiceCollectiveList@1100528600 : Record 11071730;
                                                                lvBillToCust@1100485000 : Code[20];
                                                              BEGIN
                                                                IF NOT CustRec.GET("Customer No.") THEN CustRec.INIT;
                                                                CustRec.CheckBlockedCustomerByTableNo(DATABASE::"Service Order", FIELDNO("Customer No."));

                                                                IF "Customer No." <> xRec."Customer No." THEN BEGIN   //evdb.sn
                                                                  "Contact Person No." := '';
                                                                  "Contact Person Name" := '';
                                                                  TESTFIELD("Collective List No.", '');
                                                                END;                                                  //evdb.en

                                                                IF CurrFieldNo = FIELDNO("Customer No.") THEN
                                                                  IF "Service Contract No." <> '' THEN
                                                                    TestCustomerContract;

                                                                IF "Customer No." <> xRec."Customer No." THEN BEGIN //mg, 28-12-10: M23158
                                                                  ValidateAddressData(1);
                                                                  CopyCustomerNotGlobalDims();  //*24651.n
                                                                  IF "Service Contract No." = '' THEN //mg, 03-10-12: C001213
                                                                    CopyExtraCost;
                                                                END;
                                                                DetermineInvoiceMethod;
                                                                CheckVATServOrder;

                                                                IF CustRec."Bill-to Customer No." <> '' THEN
                                                                  lvBillToCust := CustRec."Bill-to Customer No."
                                                                ELSE
                                                                  lvBillToCust := "Customer No.";
                                                                IF ("Bill-to Customer No." = '') OR ("Customer No." = '') THEN BEGIN  //db, 23-02-09: M13533
                                                                  VALIDATE("Bill-to Customer No.",lvBillToCust);
                                                                  CheckInvoiceAddress;
                                                                END;

                                                                IF "Service Contract No." = '' THEN BEGIN  //db, 09-04-10: M18890
                                                                  "VAT Prod. Posting Group" := CustRec."VAT Prod. Posting Group";
                                                                  "% Labor" := CustRec."% Labor";
                                                                  "% to B Account" := CustRec."% to B Account";
                                                                END;

                                                                DetermineDiscountGroups;

                                                                UpdateCostPlus(FIELDNO("Customer No."));  //db, 08-12-10: M23704
                                                                UpdateSurchargeFields;

                                                                IF "Collective List No." <> '' THEN BEGIN
                                                                  ServiceCollectiveList.GET("Collective List No.");
                                                                  ServiceCollectiveList.TESTFIELD("Customer No.", "Customer No.");
                                                                END;

                                                                UpdateConfirmationLetter;
                                                                CheckTravelData;
                                                                DeterminePriceBookFields;
                                                              END;

                                                   CaptionML=ENU=Customer No. }
    { 21  ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                SyncServiceLocationData(CurrFieldNo);
                                                              END;

                                                   CaptionML=ENU=Name }
    { 22  ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 23  ;   ;Address             ;Text50        ;OnValidate=VAR
                                                                lDummy@1210190000 : Text[30];
                                                              BEGIN
                                                              END;

                                                   CaptionML=ENU=Address }
    { 24  ;   ;Address 2           ;Text50        ;OnValidate=VAR
                                                                lDummy@1210190000 : Text[30];
                                                              BEGIN
                                                              END;

                                                   CaptionML=ENU=Address 2 }
    { 25  ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                IF ("Employee No." = '') AND (Subcontractor = '') THEN
                                                                  UpdateWorkOrderAnonymous;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City }
    { 26  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=VAR
                                                                PostCode@1210190000 : Record 225;
                                                                HouseNo@1100525001 : Code[30];
                                                                HouseNoExt@1100525002 : Code[10];
                                                              BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                PostCode.GetTerritoryByPostCodeGroup(City,"Post Code","Territory Code");  //db, 11-02-13: C005566
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code }
    { 27  ;   ;Phone No.           ;Text30        ;OnValidate=BEGIN
                                                                SyncServiceLocationData(CurrFieldNo);
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 28  ;   ;Customer Name       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Customer No.)));
                                                   CaptionML=ENU=Customer Name;
                                                   Editable=No }
    { 30  ;   ;Your Reference      ;Text50        ;CaptionML=ENU=Your Reference }
    { 31  ;   ;E-Mail              ;Text80        ;OnValidate=BEGIN
                                                                SyncServiceLocationData(CurrFieldNo);
                                                              END;

                                                   CaptionML=ENU=E-Mail }
    { 32  ;   ;Contact Name        ;Text50        ;OnValidate=BEGIN
                                                                SyncServiceLocationData(CurrFieldNo);
                                                              END;

                                                   CaptionML=ENU=Contact Name }
    { 33  ;   ;County              ;Text30        ;CaptionML=ENU=County;
                                                   Editable=Yes }
    { 34  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region Code }
    { 40  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=VAR
                                                                Customer@1100528600 : Record 18;
                                                              BEGIN
                                                                IF "Bill-to Customer No." <> xRec."Bill-to Customer No." THEN BEGIN     //evdb.sn
                                                                  IF "Bill-to Customer No." <> "Customer No." THEN
                                                                    IF Customer.GET("Bill-to Customer No.") THEN
                                                                      Customer.CheckBlockedCustomerByTableNo(DATABASE::"Service Order", FIELDNO("Bill-to Customer No."));
                                                                  "Bill-to Contact Person" := '';
                                                                  TESTFIELD("Collective List No.", '');
                                                                  CreateInvoiceText;
                                                                END;                                                                    //evdb.en

                                                                ValidateAddressData(2);
                                                                ValidateBilltoContactPerson;
                                                                DetermineServiceType(FALSE);
                                                                DetermineInvoiceMethod;
                                                                "Currency Code" := DetermineCurrencyCode;
                                                                CheckVATServOrder;
                                                                UpdateCostPlus(FIELDNO("Bill-to Customer No."));  //db, 08-12-10: M23704

                                                                IF ("Source Type" = "Source Type"::Direct) AND (CurrFieldNo <> 0) THEN BEGIN
                                                                  IF TempServOrderRec.GET("No.") THEN BEGIN
                                                                    IF ("Bill-to Customer No." <> TempServOrderRec."Bill-to Customer No.") THEN
                                                                      CheckCreditLimit;
                                                                  END ELSE BEGIN
                                                                    CheckCreditLimit;
                                                                  END;
                                                                  TempServOrderRec.DELETEALL;
                                                                  TempServOrderRec := Rec;
                                                                  TempServOrderRec.INSERT;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Bill-to Customer No. }
    { 41  ;   ;Bill-to Name        ;Text50        ;CaptionML=ENU=Bill-to Name;
                                                   Editable=No }
    { 42  ;   ;Bill-to Name 2      ;Text50        ;CaptionML=ENU=Bill-to Name 2;
                                                   Editable=No }
    { 43  ;   ;Bill-to Address     ;Text50        ;CaptionML=ENU=Bill-to Address;
                                                   Editable=No }
    { 44  ;   ;Bill-to Address 2   ;Text50        ;CaptionML=ENU=Bill-to Address 2;
                                                   Editable=No }
    { 45  ;   ;Bill-to Post Code   ;Code20        ;TableRelation=IF (Bill-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Bill-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Bill-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Bill-to City",
                                                                  "Bill-to Post Code",
                                                                  "Bill-to County",
                                                                  "Bill-to Country/Region Code",
                                                                  (CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Bill-to Post Code;
                                                   Editable=No }
    { 46  ;   ;Bill-to City        ;Text30        ;TableRelation=IF (Bill-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Bill-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Bill-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Bill-to City",
                                                                  "Bill-to Post Code",
                                                                  "Bill-to County",
                                                                  "Bill-to Country/Region Code",
                                                                  (CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Bill-to City;
                                                   Editable=No }
    { 48  ;   ;Bill-to County      ;Text30        ;CaptionML=ENU=Bill-to County;
                                                   Editable=Yes }
    { 49  ;   ;Bill-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Bill-to Country/Region Code }
    { 50  ;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                IF ("Order Date" > "Starting Date") AND ("Starting Date" <> 0D) THEN
                                                                  IF (CurrFieldNo = 0) OR NOT (CurrFieldNo IN [FIELDNO("Starting Date"), FIELDNO("Ending Date")]) THEN
                                                                    FIELDERROR("Order Date",STRSUBSTNO(Text000,FIELDCAPTION("Starting Date")))
                                                                  ELSE
                                                                    IF NOT CONFIRM(Text119, FALSE, FIELDCAPTION("Starting Date"), FIELDCAPTION("Order Date")) THEN
                                                                      ERROR('');
                                                                IF CurrFieldNo = FIELDNO("Order Date") THEN FIELDERROR("Order Date");  //db, 12-04-07 (because of editable form 11020671)
                                                                IF "Source Type" <> "Source Type"::Contract THEN
                                                                  "Service Control Period Date" := "Order Date";
                                                              END;

                                                   CaptionML=ENU=Order Date;
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 51  ;   ;Order Time          ;Time          ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Order Time") THEN FIELDERROR("Order Time");  //db, 12-04-07 (because of editable form 11020671)
                                                              END;

                                                   CaptionML=ENU=Order Time;
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 52  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Order Date");
                                                                //db.sn, 04-10-10: M23012
                                                                CheckPlanPeriod;
                                                                IF ("Starting Date" > "Ending Date") AND ("Ending Date" <> 0D) THEN BEGIN
                                                                  IF CurrFieldNo = FIELDNO("Starting Date") THEN BEGIN
                                                                    "Ending Date" := 0D;
                                                                    "Ending Time" := 0T;
                                                                  END ELSE BEGIN
                                                                    FIELDERROR("Starting Date",STRSUBSTNO(Text000,FIELDCAPTION("Ending Date")));
                                                                  END;
                                                                END;
                                                                //db.en, 04-10-10: M23012

                                                                CheckPlanDateTime;
                                                                CheckPlanDataFSA;
                                                                IF "Starting Date" = 0D THEN BEGIN
                                                                  "Starting Time" := 0T;
                                                                  "Ending Date" := 0D;
                                                                  "Ending Time" := 0T;
                                                                END;
                                                                CheckFirmPlannedPlanDates;
                                                                IF "Starting Date" <> xRec."Starting Date" THEN
                                                                  ServLogRec.StoreChange(2, "No.", ServLogRec.FormatDescription(FIELDCAPTION("Starting Date"), FORMAT(xRec."Starting Date"), FORMAT("Starting Date")));
                                                                UpdateFirstLastPossibleFields;
                                                                UpdateWorkOrderInfo(CurrFieldNo);
                                                              END;

                                                   CaptionML=ENU=Starting Date }
    { 53  ;   ;Starting Time       ;Time          ;OnValidate=BEGIN
                                                                CheckPlanDateTime;
                                                                CheckPlanDataFSA;
                                                                CheckFirmPlannedPlanDates;
                                                                IF "Starting Time" <> xRec."Starting Time" THEN
                                                                  ServLogRec.StoreChange(2, "No.", ServLogRec.FormatDescription(FIELDCAPTION("Starting Time"), FORMAT(xRec."Starting Time"), FORMAT("Starting Time")));
                                                                UpdateFirstLastPossibleFields;
                                                                UpdateWorkOrderInfo(CurrFieldNo);
                                                              END;

                                                   CaptionML=ENU=Starting Time }
    { 54  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                SkipPlanCu := TRUE;
                                                                VALIDATE("Starting Date");
                                                                SkipPlanCu := FALSE;

                                                                CheckPlanDateTime;
                                                                CheckPlanDataFSA;
                                                                CheckFirmPlannedPlanDates;
                                                                UpdateFirstLastPossibleFields;
                                                                UpdateWorkOrderInfo(CurrFieldNo);
                                                              END;

                                                   CaptionML=ENU=Ending Date }
    { 55  ;   ;Ending Time         ;Time          ;OnValidate=BEGIN
                                                                CheckPlanDateTime;
                                                                CheckPlanDataFSA;
                                                                CheckFirmPlannedPlanDates;
                                                                UpdateFirstLastPossibleFields;
                                                                UpdateWorkOrderInfo(CurrFieldNo);
                                                              END;

                                                   CaptionML=ENU=Ending Time }
    { 56  ;   ;Expected Hours      ;Decimal       ;OnValidate=BEGIN
                                                                UpdateWorkOrderInfo(CurrFieldNo);
                                                                DetermineLimitBudgetExceeded;
                                                              END;

                                                   CaptionML=ENU=Expected Hours;
                                                   DecimalPlaces=0:5 }
    { 57  ;   ;Modified on         ;Date          ;CaptionML=ENU=Modified on;
                                                   Editable=No }
    { 58  ;   ;Modified by         ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserCode@1210190001 : Code[50];
                                                              UserMgt@1210190000 : Codeunit 418;
                                                            BEGIN
                                                              UserCode := "Modified by";
                                                              UserMgt.LookupUserID(UserCode);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Modified by;
                                                   Editable=No }
    { 59  ;   ;Assigned to         ;Code20        ;TableRelation=Employee.No.;
                                                   OnValidate=VAR
                                                                CUFunc@1100285300 : Codeunit 11128007;
                                                              BEGIN
                                                                //<< ITERO.PR 150928
                                                                IF "Assigned to" <> '' THEN BEGIN
                                                                  CUFunc.SOOrderManager(Rec,"Assigned to");
                                                                END;
                                                                //>> ITERO.PR 150928
                                                              END;

                                                   CaptionML=ENU=Assigned to }
    { 60  ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract.No.;
                                                   OnValidate=VAR
                                                                PurchaseLine@1100525000 : Record 39;
                                                                ItemJnlLine@1100525001 : Record 83;
                                                                HourAccountingLine@1100525002 : Record 11012039;
                                                                ServiceSurchargeManagement@1100528600 : Codeunit 11012834;
                                                              BEGIN
                                                                TESTFIELD("Plant Location",''); //DP00195
                                                                CheckServOrderAuthorization(FIELDCAPTION("Service Contract No."));

                                                                IF "Service Contract No." <> xRec."Service Contract No." THEN
                                                                  TESTFIELD("Collective List No.", '');

                                                                IF CurrFieldNo <> 0 THEN
                                                                  IF "Source Type" = "Source Type"::Contract THEN
                                                                    IF xRec."Service Contract No." <> '' THEN //mg, 12-04-11: M25869
                                                                      TESTFIELD("Service Contract No.", xRec."Service Contract No.");  //db, 23-03-10: M18554

                                                                DetermineObjectNo;  //db, 16-03-15: C019952
                                                                IF ServContrRec.GET("Service Contract No.") THEN BEGIN
                                                                  TestSLandSCCombination;

                                                                  ServSetup.GET;
                                                                  VALIDATE("Customer No.", ServContrRec."Customer No.");
                                                                  DetermineBilltoCustomerbySC;
                                                                  CheckContractStatus(ServContrRec);  //db, 10-06-10: M19645
                                                                  //db.sn, 12-04-13: C006839
                                                                  IF "Service Contract No." <> xRec."Service Contract No." THEN BEGIN
                                                                    //force update from contract or SourceTypeSetup (object)
                                                                    "Service Type (Other)" := '';
                                                                    "Service Type" := '';
                                                                  END;
                                                                  //db.en, 12-04-13: C006839
                                                                  DetermineServiceType(FALSE);
                                                                  IF "Service Type (Other)" = '' THEN
                                                                    "Service Type (Other)" := ServContrRec."Service Type (Other)";
                                                                  IF "Service Type" = '' THEN
                                                                    VALIDATE("Service Type", ServContrRec."Service Type");
                                                                  DetermineServicePackage;
                                                                  CopyDefaultDimFromContract;  //db, 14-09-11: M28816
                                                                  "Department Code (Other)" := ServContrRec."Department Code (Other)";
                                                                  VALIDATE("Global Dimension 1 Code", ServContrRec."Global Dimension 1 Code");
                                                                  CheckDimension;
                                                                  DetermineDiscountGroups;
                                                                  IF (ServContrRec."Payment Terms Code" <> '') AND ("Payment Terms Code" = '') THEN     // ek, 14-05-13: W051546.n
                                                                    "Payment Terms Code" := ServContrRec."Payment Terms Code";                          // ek, 14-05-13: W051546.n
                                                                  IF "Your Reference" = '' THEN //mg, 20-12-11: M31690
                                                                    "Your Reference" := ServContrRec."Your Reference";
                                                                  IF ServSetup."Order Manager based on" = ServSetup."Order Manager based on"::ContractMgt THEN
                                                                    VALIDATE("Order Manager", ServContrRec."Contract Manager");  //db, 06-01-09
                                                                  IF ServSetup."Assign To" = ServSetup."Assign To"::ContractMgt THEN
                                                                    VALIDATE("Assigned to", ServContrRec."Contract Manager");
                                                                  CheckContrDiscAdditionalCost;  //db, 04-02-10
                                                                  "Currency Code" := DetermineCurrencyCode;
                                                                  CheckVATServOrder;
                                                                  CheckVATReverse(FALSE,FALSE);
                                                                  CheckInternalCharge;  //db, 20-05-11
                                                                  DetermineLimitBudget;
                                                                  DetermineInvoiceBaseAmount;
                                                                  DetermineInvoiceMethod;
                                                                  CheckContractServBudget(1);
                                                                  CopyExtraCost;
                                                                  CheckTravelData;
                                                                  ServiceSurchargeManagement.CopySurchargeLinesToSO(Rec);
                                                                  "Additional Cost" := DetermineAdditionalCost;
                                                                  UpdateSurchargeFields;
                                                                  TestSCPeriodClosed;
                                                                  FillSubcontractor;
                                                                  FillPreferredEmployee;
                                                                  DetermineServiceCategory;
                                                                  DeterminePriceBookFields;

                                                                  //update tables where service contract no. is not a flowfield (M16794)
                                                                  IF "No." <> '' THEN BEGIN  //db, 06-04-10: M18963
                                                                    PurchaseLine.SETCURRENTKEY("Document Type","Service Order No.");
                                                                    PurchaseLine.SETRANGE("Service Order No.", "No.");
                                                                    IF NOT PurchaseLine.ISEMPTY THEN BEGIN
                                                                      IF PurchaseLine.FINDSET(TRUE, FALSE) THEN BEGIN
                                                                        REPEAT
                                                                          PurchaseLine."Service Contract No." := "Service Contract No.";
                                                                          PurchaseLine.MODIFY(TRUE);
                                                                        UNTIL PurchaseLine.NEXT = 0;
                                                                      END;
                                                                    END;

                                                                    ItemJnlLine.SETCURRENTKEY("Service Order No.");
                                                                    ItemJnlLine.SETRANGE("Service Order No.", "No.");
                                                                    IF NOT ItemJnlLine.ISEMPTY THEN BEGIN
                                                                      IF ItemJnlLine.FINDSET(TRUE, FALSE) THEN BEGIN
                                                                        REPEAT
                                                                          ItemJnlLine."Service Contract No." := "Service Contract No.";
                                                                          ItemJnlLine.MODIFY(TRUE);
                                                                        UNTIL ItemJnlLine.NEXT = 0;
                                                                      END;
                                                                    END;

                                                                    HourAccountingLine.SETCURRENTKEY("Service Order No.");
                                                                    HourAccountingLine.SETRANGE("Service Order No.", "No.");
                                                                    IF NOT HourAccountingLine.ISEMPTY THEN BEGIN
                                                                      IF HourAccountingLine.FINDSET(TRUE, FALSE) THEN BEGIN
                                                                        REPEAT
                                                                          HourAccountingLine."Service Contract No." := "Service Contract No.";
                                                                          //db.sn, 12-09-13: C008074
                                                                          HourAccountingLine."Additional Cost (Service)" := "Additional Cost";
                                                                          IF HourAccountingLine."Additional Cost (Service)" THEN
                                                                            HourAccountingLine."Department Code" := "Department Code (Other)"
                                                                          ELSE
                                                                            HourAccountingLine."Department Code" := "Global Dimension 1 Code";
                                                                          //db.en, 12-09-13: C008074
                                                                          HourAccountingLine.MODIFY(TRUE);
                                                                        UNTIL HourAccountingLine.NEXT = 0;
                                                                      END;
                                                                    END;
                                                                  END;
                                                                END ELSE
                                                                  IF "Service Contract No." = '' THEN BEGIN
                                                                    VALIDATE("Service Location No.");
                                                                    DetermineServiceType(FALSE);
                                                                    IF "Service Contract No." <> xRec."Service Contract No." THEN
                                                                      CopyExtraCost;
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Service Contract No. }
    { 61  ;   ;Service Package     ;Code10        ;TableRelation="Service Package";
                                                   OnValidate=BEGIN
                                                                //db, 04-02-10: where-condition on source type removed
                                                                IF ServPackRec.GET("Service Package") THEN
                                                                  IF ServPackRec."Source Type" <> ServPackRec."Source Type"::None THEN
                                                                    ServPackRec.TESTFIELD("Source Type", "Source Type");
                                                              END;

                                                   CaptionML=ENU=Service Package }
    { 62  ;   ;Service Contract Description;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Contract.Description WHERE (No.=FIELD(Service Contract No.)));
                                                   CaptionML=ENU=Service Contract Description;
                                                   Editable=No }
    { 63  ;   ;Modified on (Time)  ;Time          ;CaptionML=ENU=Modified on;
                                                   Editable=No }
    { 65  ;   ;Service Location No.;Code20        ;TableRelation="Service Location".No.;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Plant Location",''); //DP00195
                                                                CheckServOrderAuthorization(FIELDCAPTION("Service Location No."));

                                                                //db.sn, 16-03-15: C019952
                                                                IF (CurrFieldNo <> 0) AND (CurrFieldNo <> FIELDNO("Service Contract No.")) THEN BEGIN
                                                                  IF "Service Contract No." = '' THEN
                                                                    DetermineContractNo;
                                                                  DetermineObjectNo;
                                                                END;
                                                                //db.en, 16-03-15: C019952
                                                                TestSLandSCCombination;
                                                                ValidateAddressData(1);
                                                                ValidateOtherData;
                                                                DetermineBilltoCustomerbySC;
                                                                ValidateBilltoContactPerson;
                                                                DetermineInvoiceMethod;
                                                                DetermineLimitBudget;
                                                                CheckDimension;
                                                                DetermineDiscountGroups;
                                                                CheckVATServOrder;
                                                                CheckVATReverse(FALSE,FALSE);
                                                                CheckInternalCharge;  //db, 20-05-11
                                                                CheckContractServBudget(0);
                                                                CALCFIELDS("Project No.");
                                                                UpdatePrefLocations;
                                                                UpdateCostPlus(FIELDNO("Service Location No."));  //db, 08-12-10: M23704
                                                                MODIFY; //mg
                                                                CheckTravelData;

                                                                UpdateVessel; //kkleermaker.n, 110817, M28697
                                                                FillSubcontractor;
                                                                FillPreferredEmployee;

                                                                IF ("Employee No." = '') AND (Subcontractor = '') THEN
                                                                  UpdateWorkOrderAnonymous;
                                                              END;

                                                   CaptionML=ENU=Service Location No. }
    { 66  ;   ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   CaptionML=ENU=Territory Code }
    { 67  ;   ;Remote Control      ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location"."Remote Control" WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=ENU=Remote Control;
                                                   Editable=No }
    { 68  ;   ;Service Location Description;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location".Description WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=ENU=Service Location Description;
                                                   Editable=No }
    { 69  ;   ;Service Type (Other);Code20        ;TableRelation="Service Type";
                                                   OnValidate=BEGIN
                                                                CheckServOrderAuthorization(FIELDCAPTION("Service Type (Other)"));

                                                                ServSetup.GET;
                                                                IF ServSetup."Copy Additional Cost Setup" THEN BEGIN
                                                                  TESTFIELD("Service Type (Other)", "Service Type");
                                                                  VALIDATE("Department Code (Other)", "Global Dimension 1 Code");
                                                                END ELSE BEGIN
                                                                  IF ServTypeRec.GET("Service Type (Other)") THEN
                                                                    IF ServTypeRec."Department Code" <> '' THEN
                                                                      VALIDATE("Department Code (Other)", ServTypeRec."Department Code");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Service Type (Additional Cost) }
    { 70  ;   ;Service Type        ;Code20        ;TableRelation="Service Type";
                                                   OnValidate=VAR
                                                                ServiceSurchargeManagement@1210190000 : Codeunit 11012834;
                                                              BEGIN
                                                                CheckServOrderAuthorization(FIELDCAPTION("Service Type"));

                                                                ServSetup.GET;
                                                                IF ServSetup."Copy Additional Cost Setup" THEN
                                                                  VALIDATE("Service Type (Other)", "Service Type");
                                                                IF ServTypeRec.GET("Service Type") THEN
                                                                  IF ServTypeRec."Department Code" <> '' THEN
                                                                    VALIDATE("Global Dimension 1 Code", ServTypeRec."Department Code");

                                                                ServiceSurchargeManagement.CopySurchargeLinesToSO(Rec);
                                                              END;

                                                   CaptionML=ENU=Service Type }
    { 71  ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                //db.sn, 07-04-11
                                                                IF (Status = Status::"Technical Finished") OR (Status = Status::"Administrative Finished") THEN
                                                                  IF "Closing Date" = 0D THEN
                                                                    "Closing Date" := TODAY;
                                                                ServLogRec.StoreChange(2, "No.", ServLogRec.FormatDescription(FIELDCAPTION(Status), FORMAT(xRec.Status), FORMAT(Status)));
                                                                //db.en, 07-04-11

                                                                IF (CurrFieldNo = FIELDNO(Status)) AND (Status <> xRec.Status) THEN
                                                                  HandleStatusChange;
                                                                HandleStatusChangeLinkedOrders;
                                                              END;

                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Open,,In Process,Technical Finished,Administrative Finished,Finished,Cancelled;
                                                   OptionString=Open,,In Process,Technical Finished,Administrative Finished,Finished,Cancelled }
    { 72  ;   ;Priority            ;Code10        ;TableRelation="Service Priority" WHERE (Contract Filter=FIELD(Service Contract No.));
                                                   OnValidate=BEGIN
                                                                IF "Service Contract No." + "Customer No." <> '' THEN
                                                                  CopyExtraCost;

                                                                ServLogRec.StoreChange(2, "No.", ServLogRec.FormatDescription(FIELDCAPTION(Priority), xRec.Priority, Priority));
                                                              END;

                                                   CaptionML=ENU=Priority }
    { 80  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 81  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Service Order),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 82  ;   ;Debrief Comment     ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Debrief Text" WHERE (Type=CONST(ServiceOrder),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=ENU=Debrief Text;
                                                   Editable=No }
    { 85  ;   ;Source Type         ;Option        ;InitValue=Direct;
                                                   CaptionML=ENU=Source Type;
                                                   OptionCaptionML=ENU=Call,Contract,Direct,Estimate,,,Modification,Replacement;
                                                   OptionString=Call,Contract,Direct,Estimate,,,Modification,Replacement;
                                                   Editable=No }
    { 95  ;   ;Comment (Problem Text);Boolean     ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Service Text" WHERE (Table Name=CONST(Service Order),
                                                                                           No.=FIELD(No.),
                                                                                           Table Field=CONST(90)));
                                                   CaptionML=ENU=Comment (Problem Text);
                                                   Editable=No }
    { 96  ;   ;Comment (Internal Text);Boolean    ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Service Text" WHERE (Table Name=CONST(Service Order),
                                                                                           No.=FIELD(No.),
                                                                                           Table Field=CONST(91)));
                                                   CaptionML=ENU=Comment (Internal Text);
                                                   Editable=No }
    { 97  ;   ;Comment (Solution Text);Boolean    ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Service Text" WHERE (Table Name=CONST(Service Order),
                                                                                           No.=FIELD(No.),
                                                                                           Table Field=CONST(92)));
                                                   CaptionML=ENU=Comment (Solution Text);
                                                   Editable=No }
    { 98  ;   ;Comment (Invoice Text);Boolean     ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Service Text" WHERE (Table Name=CONST(Service Order),
                                                                                           No.=FIELD(No.),
                                                                                           Table Field=CONST(93)));
                                                   CaptionML=ENU=Comment (Invoice Text);
                                                   Editable=No }
    { 99  ;   ;Comment (Cause Text);Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Service Text" WHERE (Table Name=CONST(Service Order),
                                                                                           No.=FIELD(No.),
                                                                                           Table Field=CONST(94)));
                                                   CaptionML=ENU=Comment (Cause Text);
                                                   Editable=No }
    { 100 ;   ;Call No.            ;Code20        ;TableRelation="Service Call".No.;
                                                   CaptionML=ENU=Call No.;
                                                   Editable=No }
    { 101 ;   ;Glazing Service Call No.;Code20    ;TableRelation="Glazing Service Call";
                                                   CaptionML=ENU=Glazing Service Call No.;
                                                   Editable=No }
    { 105 ;   ;Description Call    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Call".Description WHERE (No.=FIELD(Call No.)));
                                                   CaptionML=ENU=Description Call;
                                                   Editable=No }
    { 110 ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                CheckVATReverse(TRUE,FALSE);
                                                                UpdateCostPlus(FIELDNO("VAT Prod. Posting Group"));  //db, 08-12-10: M23704
                                                              END;

                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 120 ;   ;Order Kind          ;Code10        ;TableRelation="Service Order Indication".Code WHERE (Indication=CONST(Kind));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Description Order Kind", "Flow FSA");
                                                                CheckContrDiscAdditionalCost;  //db, 04-02-10
                                                                CheckExpectedHours(0, "Order Kind");
                                                                IF xRec."Order Kind" <> "Order Kind" THEN
                                                                  UpdateCostPlusEntryDiscount;
                                                              END;

                                                   CaptionML=ENU=Order Kind }
    { 121 ;   ;Description Order Kind;Text30      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order Indication".Description WHERE (Indication=CONST(Kind),
                                                                                                                    Code=FIELD(Order Kind)));
                                                   CaptionML=ENU=Description Order Kind;
                                                   Editable=No }
    { 122 ;   ;Flow FSA            ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order Indication"."Flow FSA" WHERE (Indication=CONST(Kind),
                                                                                                                   Code=FIELD(Order Kind)));
                                                   CaptionML=ENU=Flow Field Service;
                                                   Editable=No }
    { 125 ;   ;Order Type          ;Code10        ;TableRelation="Service Order Indication".Code WHERE (Indication=CONST(Type));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Description Order Type");
                                                                CheckContrDiscAdditionalCost;  //db, 04-02-10
                                                                CheckExpectedHours(1, "Order Type");
                                                              END;

                                                   CaptionML=ENU=Order Type }
    { 126 ;   ;Description Order Type;Text30      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order Indication".Description WHERE (Indication=CONST(Type),
                                                                                                                    Code=FIELD(Order Type)));
                                                   CaptionML=ENU=Description Order Type;
                                                   Editable=No }
    { 130 ;   ;Alternative Bill-to Address;Code10 ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Bill-to Customer No.),
                                                                                               Billing Address=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                IF "Alternative Bill-to Address" <> xRec."Alternative Bill-to Address" THEN
                                                                  TESTFIELD("Collective List No.", '');
                                                                CheckInvoiceAddress;
                                                              END;

                                                   CaptionML=ENU=Alternative Bill-to Address }
    { 140 ;   ;Collect Invoices By ;Option        ;OnValidate=BEGIN
                                                                CASE "Collect Invoices By" OF
                                                                  "Collect Invoices By"::Call: TESTFIELD("Call No.");
                                                                  "Collect Invoices By"::CustOrder: TESTFIELD("Order No. Customer");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Collect Invoices By;
                                                   OptionCaptionML=ENU=Service Order,Service Location,Service Contract,Customer,Call,Orderno. Customer,Base Service Order;
                                                   OptionString=ServOrder,ServLocation,ServContract,Customer,Call,CustOrder,BaseOrder }
    { 150 ;   ;Problem             ;Code10        ;TableRelation="Service Analysis".Code WHERE (Analysis Type=CONST(Problem));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Description Problem");
                                                                IF xRec.Problem <> Problem THEN BEGIN
                                                                  InsertServiceText(0, Problem, 90);  //DP00106: FIELDNO("Problem Text")
                                                                  UpdateCustomerProblem;
                                                                  UpdateServAnalysisNotGlobDims;
                                                                  UpdateCostPlusEntryDiscount;
                                                                  ApplyProblemCodeAdditionalInfo;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ServiceAnalysis@1100409000 : Record 11012842;
                                                            BEGIN
                                                              GetFilteredProblemsOnDisciplines(ServiceAnalysis);
                                                              GetFilteredProblemsOnSUP(ServiceAnalysis);
                                                              IF PAGE.RUNMODAL(PAGE::"Service Analysis (Problem)", ServiceAnalysis) = ACTION::LookupOK THEN
                                                                VALIDATE(Problem, ServiceAnalysis.Code);
                                                            END;

                                                   CaptionML=ENU=Problem }
    { 151 ;   ;Description Problem ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Analysis".Description WHERE (Analysis Type=CONST(Problem),
                                                                                                            Code=FIELD(Problem)));
                                                   CaptionML=ENU=Description Problem;
                                                   Editable=No }
    { 160 ;   ;Cause               ;Code10        ;TableRelation="Service Analysis".Code WHERE (Analysis Type=CONST(Cause));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Description Cause");
                                                                IF xRec.Cause <> Cause THEN BEGIN
                                                                  InsertServiceText(1, Cause, 94);  //DP00106: FIELDNO("Cause Text")
                                                                  UpdateCostPlusEntryDiscount;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ServiceAnalysis@1100409001 : Record 11012842;
                                                            BEGIN
                                                              GetFilteredCausesByProblem(Problem, ServiceAnalysis);
                                                              IF PAGE.RUNMODAL(PAGE::"Service Analysis (Cause)", ServiceAnalysis) = ACTION::LookupOK THEN
                                                                VALIDATE(Cause, ServiceAnalysis.Code);
                                                            END;

                                                   CaptionML=ENU=Cause }
    { 161 ;   ;Description Cause   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Analysis".Description WHERE (Analysis Type=CONST(Cause),
                                                                                                            Code=FIELD(Cause)));
                                                   CaptionML=ENU=Description Cause;
                                                   Editable=No }
    { 170 ;   ;Solution            ;Code10        ;TableRelation="Service Analysis".Code WHERE (Analysis Type=CONST(Solution));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Description Solution");
                                                                IF xRec.Solution <> Solution THEN BEGIN
                                                                  InsertServiceText(2, Solution, 92);  //DP00106: FIELDNO("Solution Text")
                                                                  UpdateCostPlusEntryDiscount;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ServiceAnalysis@1100409000 : Record 11012842;
                                                            BEGIN
                                                              GetFilteredSolutionsByProblemCause(Problem, Cause, ServiceAnalysis);
                                                              IF PAGE.RUNMODAL(PAGE::"Service Analysis (Solution)", ServiceAnalysis) = ACTION::LookupOK THEN
                                                                VALIDATE(Solution, ServiceAnalysis.Code);
                                                            END;

                                                   CaptionML=ENU=Solution }
    { 171 ;   ;Description Solution;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Analysis".Description WHERE (Analysis Type=CONST(Solution),
                                                                                                            Code=FIELD(Solution)));
                                                   CaptionML=ENU=Description Solution;
                                                   Editable=No }
    { 180 ;   ;Previous Service Order No.;Code20  ;TableRelation="Service Order".No. WHERE (No.=FIELD(Previous Service Order No.));
                                                   OnValidate=VAR
                                                                ServiceOrder@1100525000 : Record 11012823;
                                                              BEGIN
                                                                CheckParentChildOrder;
                                                                IF ServiceOrder.GET("Previous Service Order No.") THEN
                                                                  IF ServiceOrder."Base Service Order" OR (ServiceOrder."Previous Service Order No." <> '') THEN BEGIN
                                                                    VALIDATE("Base Service Order No.", ServiceOrder."Base Service Order No.")
                                                                  END ELSE BEGIN
                                                                    VALIDATE("Base Service Order No.", "Previous Service Order No.");
                                                                    ServiceOrder.VALIDATE("Base Service Order No.", "Previous Service Order No.");
                                                                    ServiceOrder.VALIDATE("Base Service Order", TRUE);
                                                                    ServiceOrder.MODIFY(TRUE);
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Previous Service Order No. }
    { 190 ;   ;Base Service Order No.;Code20      ;TableRelation="Service Order".No. WHERE (No.=FIELD(Base Service Order No.));
                                                   OnValidate=VAR
                                                                ServiceOrderCostPlus@1100525003 : Record 11012825;
                                                                AdviceOrderLine@1100525002 : Record 11012055;
                                                                DebriefText@1100525001 : Record 11012886;
                                                                SrvOrdDebriefSpec@1100525000 : Record 11020335;
                                                                ServiceLedgerEntry@1100525004 : Record 11012819;
                                                                SalesLine@1100525005 : Record 37;
                                                                PurchaseOrderControlLine@1100525006 : Record 11020221;
                                                                HourAccountingSurcharge@1100525007 : Record 11020308;
                                                                ItemJournalLine@1100525008 : Record 83;
                                                                ItemJournalSurcharge@1100525011 : Record 11020585;
                                                                HourAccountingLine@1100525009 : Record 11012039;
                                                                PurchaseLine@1100525010 : Record 39;
                                                                ServiceOrder@1100525012 : Record 11012823;
                                                              BEGIN
                                                                //In following tabels the field "Base Service Order No." is set when creating the record
                                                                //Here we handle the changing of this field.
                                                                IF "No." = '' THEN
                                                                  EXIT;

                                                                //DP00503 sn
                                                                IF (CurrFieldNo <> 0) AND GUIALLOWED THEN BEGIN
                                                                  IF (xRec."Base Service Order No." <> "Base Service Order No.") AND
                                                                     ("Base Service Order No." <> '') THEN BEGIN
                                                                    IF ServiceOrder.GET("Base Service Order No.") THEN BEGIN
                                                                      IF ServiceOrder.Status > ServiceOrder.Status::"Technical Finished" THEN
                                                                        MESSAGE(Text112, "Base Service Order No.", ServiceOrder.Status);
                                                                        //base service order is already 'Administrative Finished'.
                                                                    END;
                                                                  END;
                                                                END;
                                                                //DP00503 en

                                                                WITH ServiceOrderCostPlus DO BEGIN
                                                                  SETCURRENTKEY("Service Order No.");
                                                                  SETRANGE("Service Order No.", Rec."No.");
                                                                  SETFILTER("Base Service Order No.", '<>%1', Rec."Base Service Order No.");
                                                                  IF NOT ISEMPTY THEN //For Performance in SQL
                                                                    MODIFYALL("Base Service Order No.", Rec."Base Service Order No.",FALSE);
                                                                END;

                                                                WITH ServiceLedgerEntry DO BEGIN
                                                                  SETCURRENTKEY("Service Order No.");
                                                                  SETRANGE("Service Order No.", Rec."No.");
                                                                  SETFILTER("Base Service Order No.", '<>%1', Rec."Base Service Order No.");
                                                                  IF NOT ISEMPTY THEN //For Performance in SQL
                                                                    MODIFYALL("Base Service Order No.", Rec."Base Service Order No.",FALSE);
                                                                END;

                                                                WITH AdviceOrderLine DO BEGIN
                                                                  SETCURRENTKEY("Record Type","Project No.","Service Order No.");
                                                                  SETRANGE("Record Type", "Record Type"::ServOrder);
                                                                  SETRANGE("Project No.", '');
                                                                  SETRANGE("Service Order No.", Rec."No.");
                                                                  SETFILTER("Base Service Order No.", '<>%1', Rec."Base Service Order No.");
                                                                  IF NOT ISEMPTY THEN //For Performance in SQL
                                                                    MODIFYALL("Base Service Order No.", Rec."Base Service Order No.",FALSE);
                                                                END;

                                                                WITH DebriefText DO BEGIN
                                                                  SETCURRENTKEY(Type,"No.");
                                                                  SETRANGE(Type, Type::ServiceOrder);
                                                                  SETRANGE("No.", Rec."No.");
                                                                  SETFILTER("Base Service Order No.", '<>%1', Rec."Base Service Order No.");
                                                                  IF NOT ISEMPTY THEN //For Performance in SQL
                                                                    MODIFYALL("Base Service Order No.", Rec."Base Service Order No.",FALSE);
                                                                END;

                                                                WITH SrvOrdDebriefSpec DO BEGIN
                                                                  SETCURRENTKEY("Service Order No.");
                                                                  SETRANGE("Service Order No.", Rec."No.");
                                                                  SETFILTER("Base Service Order No.", '<>%1', Rec."Base Service Order No.");
                                                                  IF NOT ISEMPTY THEN //For Performance in SQL
                                                                    MODIFYALL("Base Service Order No.", Rec."Base Service Order No.",FALSE);
                                                                END;

                                                                WITH SalesLine DO BEGIN
                                                                  SETCURRENTKEY("Document Type","Service Invoice","Service Order No.");
                                                                  SETFILTER("Document Type", '%1|%2', "Document Type"::Invoice, "Document Type"::"Credit Memo");
                                                                  SETRANGE("Service Invoice", TRUE);
                                                                  SETRANGE("Service Order No.", Rec."No.");
                                                                  SETFILTER("Base Service Order No.", '<>%1', Rec."Base Service Order No.");
                                                                  IF NOT ISEMPTY THEN //For Performance in SQL
                                                                    MODIFYALL("Base Service Order No.", Rec."Base Service Order No.",FALSE);
                                                                END;

                                                                WITH PurchaseOrderControlLine DO BEGIN
                                                                  SETCURRENTKEY("Service Order No.");
                                                                  SETRANGE("Service Order No.", Rec."No.");
                                                                  SETFILTER("Base Service Order No.", '<>%1', Rec."Base Service Order No.");
                                                                  IF NOT ISEMPTY THEN //For Performance in SQL
                                                                    MODIFYALL("Base Service Order No.", Rec."Base Service Order No.",FALSE);
                                                                END;

                                                                WITH HourAccountingSurcharge DO BEGIN
                                                                  SETCURRENTKEY("Service Order No.");
                                                                  SETRANGE("Service Order No.", Rec."No.");
                                                                  SETFILTER("Base Service Order No.", '<>%1', Rec."Base Service Order No.");
                                                                  IF NOT ISEMPTY THEN //For Performance in SQL
                                                                    MODIFYALL("Base Service Order No.", Rec."Base Service Order No.",FALSE);
                                                                END;

                                                                WITH ItemJournalLine DO BEGIN
                                                                  SETCURRENTKEY("Service Order No.");
                                                                  SETRANGE("Service Order No.", Rec."No.");
                                                                  SETFILTER("Base Service Order No.", '<>%1', Rec."Base Service Order No.");
                                                                  IF NOT ISEMPTY THEN //For Performance in SQL
                                                                    MODIFYALL("Base Service Order No.", Rec."Base Service Order No.",FALSE);
                                                                END;

                                                                //** 4PS 14-11-2010 sn
                                                                WITH ItemJournalSurcharge DO BEGIN
                                                                  SETCURRENTKEY("Service Order No.");
                                                                  SETRANGE("Service Order No.", Rec."No.");
                                                                  SETFILTER("Base Service Order No.", '<>%1', Rec."Base Service Order No.");
                                                                  IF NOT ISEMPTY THEN //For Performance in SQL
                                                                    MODIFYALL("Base Service Order No.", Rec."Base Service Order No.",FALSE);
                                                                END;
                                                                //** 4PS 14-11-2010 sn

                                                                WITH HourAccountingLine DO BEGIN
                                                                  SETCURRENTKEY("Service Order No.");
                                                                  SETRANGE("Service Order No.", Rec."No.");
                                                                  SETFILTER("Base Service Order No.", '<>%1', Rec."Base Service Order No.");
                                                                  IF NOT ISEMPTY THEN //For Performance in SQL
                                                                    MODIFYALL("Base Service Order No.", Rec."Base Service Order No.",FALSE);
                                                                END;

                                                                WITH PurchaseLine DO BEGIN
                                                                  SETCURRENTKEY("Document Type","Service Order No.");
                                                                  SETRANGE("Service Order No.", Rec."No.");
                                                                  SETRANGE("Document Type", "Document Type"::Order);
                                                                  SETFILTER("Base Service Order No.", '<>%1', Rec."Base Service Order No.");
                                                                  IF NOT ISEMPTY THEN //For Performance in SQL
                                                                    MODIFYALL("Base Service Order No.", Rec."Base Service Order No.",FALSE);
                                                                END;

                                                                DetermineInvoiceMethod;
                                                              END;

                                                   OnLookup=VAR
                                                              ServiceOrder@1100525000 : Record 11012823;
                                                            BEGIN
                                                              ServiceOrder.GET("Base Service Order No.");
                                                              PAGE.RUNMODAL(PAGE::"Base Service Order", ServiceOrder);
                                                            END;

                                                   CaptionML=ENU=Base Service Order No.;
                                                   Editable=No }
    { 195 ;   ;Base Service Order  ;Boolean       ;OnValidate=BEGIN
                                                                DetermineInvoiceMethod;
                                                              END;

                                                   CaptionML=ENU=Base Service Order;
                                                   Editable=No }
    { 200 ;   ;Project No.         ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location"."Project No." WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=ENU=Project No.;
                                                   Editable=No }
    { 220 ;   ;Mobile Phone No.    ;Text30        ;OnValidate=BEGIN
                                                                SyncServiceLocationData(CurrFieldNo);
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Mobile Phone No. }
    { 230 ;   ;Phone No. 2         ;Text30        ;OnValidate=BEGIN
                                                                SyncServiceLocationData(CurrFieldNo);
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. 2 }
    { 240 ;   ;Fax No.             ;Text30        ;OnValidate=BEGIN
                                                                SyncServiceLocationData(CurrFieldNo);
                                                              END;

                                                   CaptionML=ENU=Fax No. }
    { 250 ;   ;No. Printed         ;Integer       ;CaptionML=ENU=No. Printed;
                                                   Editable=No }
    { 260 ;   ;Limit Budget Labor  ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Limit Budget Total", "Limit Budget Labor" + "Limit Budget Material");
                                                              END;

                                                   CaptionML=ENU=Limit Budget Labor;
                                                   AutoFormatType=1 }
    { 261 ;   ;Limit Budget Hours  ;Decimal       ;OnValidate=BEGIN
                                                                DetermineLimitBudgetExceeded;
                                                              END;

                                                   CaptionML=ENU=Limit Budget Hours;
                                                   DecimalPlaces=2:5 }
    { 262 ;   ;Limit Budget Material;Decimal      ;OnValidate=BEGIN
                                                                VALIDATE("Limit Budget Total", "Limit Budget Labor" + "Limit Budget Material");
                                                              END;

                                                   CaptionML=ENU=Limit Budget Material;
                                                   AutoFormatType=1 }
    { 265 ;   ;Limit Budget Total  ;Decimal       ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                IF ("Limit Budget Labor" <> 0) OR ("Limit Budget Material" <> 0) THEN
                                                                  TESTFIELD("Limit Budget Total", "Limit Budget Labor" + "Limit Budget Material");
                                                                DetermineLimitBudgetExceeded;
                                                              END;

                                                   CaptionML=ENU=Limit Budget Total;
                                                   AutoFormatType=1 }
    { 270 ;   ;Invoice Price       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Cost Plus Entry"."Invoice Price (LCY)" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                                                Service Order No.=FIELD(No.),
                                                                                                                                Invoiced=CONST(No),
                                                                                                                                Chargeable=CONST(Yes)));
                                                   CaptionML=ENU=Invoice Price;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 271 ;   ;Invoiced Price      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Revenue (LCY)" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                                       Service Order No.=FIELD(No.)));
                                                   CaptionML=ENU=Invoiced Price;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 272 ;   ;Invoice in Process  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Amount (LCY)" WHERE (Document Type=CONST(Invoice),
                                                                                                      Service Invoice=CONST(Yes),
                                                                                                      Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                      Service Order No.=FIELD(No.)));
                                                   CaptionML=ENU=Invoice in Process;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 273 ;   ;Credit Memo in Process;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Sales Line"."Amount (LCY)" WHERE (Document Type=CONST(Credit Memo),
                                                                                                       Service Invoice=CONST(Yes),
                                                                                                       Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                       Service Order No.=FIELD(No.)));
                                                   CaptionML=ENU=Credit Memo in Process;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 275 ;   ;Service Entry Cost  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Cost (LCY)" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                                    Service Order No.=FIELD(No.)));
                                                   CaptionML=ENU=Service Entry Cost;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 280 ;   ;Actual Costs        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Cost (LCY)" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                                    Service Order No.=FIELD(No.),
                                                                                                                    Cost Component=FIELD(Cost Component Filter),
                                                                                                                    Posting Date=FIELD(Period Filter),
                                                                                                                    Cost Present=CONST(Yes)));
                                                   CaptionML=ENU=Actual Costs;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 281 ;   ;Actual Hours        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry".Quantity WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                          Service Order No.=FIELD(No.),
                                                                                                          Cost Component=FIELD(Cost Component Filter),
                                                                                                          Posting Date=FIELD(Period Filter),
                                                                                                          Cost Type=CONST(Labor),
                                                                                                          Cost Present=CONST(Yes)));
                                                   CaptionML=ENU=Actual Hours;
                                                   Editable=No }
    { 282 ;   ;Revenues            ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Revenue (LCY)" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                                       Service Order No.=FIELD(No.),
                                                                                                                       Cost Component=FIELD(Cost Component Filter),
                                                                                                                       Posting Date=FIELD(Period Filter),
                                                                                                                       Revenue Present=CONST(Yes)));
                                                   CaptionML=ENU=Revenues;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 283 ;   ;Actual Costs (Additional);Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Cost (LCY)" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                                    Service Order No.=FIELD(No.),
                                                                                                                    Cost Component=FIELD(Cost Component Filter),
                                                                                                                    Posting Date=FIELD(Period Filter),
                                                                                                                    Additional Cost=CONST(Yes),
                                                                                                                    Cost Present=CONST(Yes)));
                                                   CaptionML=ENU=Actual Costs (Additional);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 284 ;   ;Actual Costs (Contract);Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Cost (LCY)" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                                    Service Order No.=FIELD(No.),
                                                                                                                    Cost Component=FIELD(Cost Component Filter),
                                                                                                                    Posting Date=FIELD(Period Filter),
                                                                                                                    Additional Cost=CONST(No),
                                                                                                                    Cost Present=CONST(Yes)));
                                                   CaptionML=ENU=Actual Costs (Contract);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 285 ;   ;Actual Hours (Additional);Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry".Quantity WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                          Service Order No.=FIELD(No.),
                                                                                                          Cost Component=FIELD(Cost Component Filter),
                                                                                                          Posting Date=FIELD(Period Filter),
                                                                                                          Additional Cost=CONST(Yes),
                                                                                                          Cost Type=CONST(Labor),
                                                                                                          Cost Present=CONST(Yes)));
                                                   CaptionML=ENU=Actual Hours (Additional);
                                                   Editable=No }
    { 286 ;   ;Actual Hours (Contract);Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry".Quantity WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                          Service Order No.=FIELD(No.),
                                                                                                          Cost Component=FIELD(Cost Component Filter),
                                                                                                          Posting Date=FIELD(Period Filter),
                                                                                                          Additional Cost=CONST(No),
                                                                                                          Cost Type=CONST(Labor),
                                                                                                          Cost Present=CONST(Yes)));
                                                   CaptionML=ENU=Actual Hours (Contract);
                                                   Editable=No }
    { 287 ;   ;Revenues (Additional);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Revenue (LCY)" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                                       Service Order No.=FIELD(No.),
                                                                                                                       Cost Component=FIELD(Cost Component Filter),
                                                                                                                       Posting Date=FIELD(Period Filter),
                                                                                                                       Additional Cost=CONST(Yes),
                                                                                                                       Revenue Present=CONST(Yes)));
                                                   CaptionML=ENU=Revenues (Additional);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 288 ;   ;Revenues (Contract) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Revenue (LCY)" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                                       Service Order No.=FIELD(No.),
                                                                                                                       Cost Component=FIELD(Cost Component Filter),
                                                                                                                       Posting Date=FIELD(Period Filter),
                                                                                                                       Additional Cost=CONST(No),
                                                                                                                       Revenue Present=CONST(Yes)));
                                                   CaptionML=ENU=Revenues (Contract);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 289 ;   ;Invoice Cost        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Cost (LCY)" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                                    Service Order No.=FIELD(No.),
                                                                                                                    Cost Component=FIELD(Cost Component Filter),
                                                                                                                    Posting Date=FIELD(Period Filter),
                                                                                                                    Cost Present=CONST(Yes),
                                                                                                                    Chargeable=CONST(Yes),
                                                                                                                    Cost Plus Entry Created=CONST(No),
                                                                                                                    Transfer to Project=CONST(" ")));
                                                   CaptionML=ENU=Invoice Cost;
                                                   Editable=No }
    { 290 ;   ;Period Filter       ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Period Filter }
    { 292 ;   ;Period Type Filter  ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Period Type Filter;
                                                   OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                                                   OptionString=Day,Week,Month,Quarter,Year,Accounting Period }
    { 293 ;   ;Source Type Filter  ;Option        ;FieldClass=FlowFilter;
                                                   InitValue=Other;
                                                   CaptionML=ENU=Source Type Filter;
                                                   OptionCaptionML=ENU=Call,Contract,Other,Estimate;
                                                   OptionString=Call,Contract,Other,Estimate }
    { 294 ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter;
                                                   Editable=No }
    { 295 ;   ;Cost Component Filter;Code10       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Cost Component Filter }
    { 300 ;   ;Order Amount (LCY)  ;Decimal       ;OnValidate=VAR
                                                                CurrencyDate@1100528802 : Date;
                                                                CurrencyExchangeRate@1100528801 : Record 330;
                                                                Currency2@1100528800 : Record 4;
                                                              BEGIN
                                                                // dp00116.sn
                                                                Currency2.InitRoundingPrecision;
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  CurrencyDate := "Order Date";
                                                                  "Order Amount" :=
                                                                  ROUND(
                                                                    CurrencyExchangeRate.ExchangeAmtLCYToFCY(
                                                                      0, '', CurrencyDate, "Currency Code", "Order Amount (LCY)",
                                                                       CurrencyExchangeRate.ExchangeRate(0, '', CurrencyDate, "Currency Code",TRUE),TRUE),
                                                                       Currency2."Amount Rounding Precision");
                                                                END ELSE BEGIN
                                                                  "Order Amount" := ROUND("Order Amount (LCY)",Currency2."Amount Rounding Precision");
                                                                END;
                                                                // dp00116.en

                                                                ServCostPlusRec.CheckInstallment(Rec, xRec);
                                                              END;

                                                   CaptionML=ENU=Order Amount (LCY);
                                                   AutoFormatType=1 }
    { 301 ;   ;Order Amount        ;Decimal       ;OnValidate=VAR
                                                                CurrencyDate@1100528802 : Date;
                                                                CurrencyExchangeRate@1100528801 : Record 330;
                                                                Currency2@1100528800 : Record 4;
                                                              BEGIN
                                                                // dp00116.n
                                                                Currency2.InitRoundingPrecision;
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  CurrencyDate := "Order Date";
                                                                  "Order Amount (LCY)" :=
                                                                  ROUND(
                                                                    CurrencyExchangeRate.ExchangeAmtFCYToLCY(
                                                                      0, '', CurrencyDate, "Currency Code", "Order Amount",
                                                                       CurrencyExchangeRate.ExchangeRate(0, '', CurrencyDate, "Currency Code",TRUE),TRUE),
                                                                       Currency2."Amount Rounding Precision");
                                                                END ELSE BEGIN
                                                                  "Order Amount (LCY)" := ROUND("Order Amount",Currency2."Amount Rounding Precision");
                                                                END;

                                                                ServCostPlusRec.CheckInstallment(Rec, xRec);
                                                              END;

                                                   CaptionML=ENU=Order Amount;
                                                   AutoFormatType=1 }
    { 302 ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                // dp00116.n
                                                                IF "Currency Code" <> xRec."Currency Code" THEN BEGIN
                                                                  RecreateServiceOrderLines;
                                                                  CalcServiceOrderAmountFromLCY;
                                                                END
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 305 ;   ;Installment Scheme  ;Code10        ;TableRelation="Installment Scheme".Code WHERE (Type=CONST(Service Order));
                                                   OnValidate=BEGIN
                                                                ServCostPlusRec.CheckInstallment(Rec, xRec);
                                                              END;

                                                   CaptionML=ENU=Installment Scheme }
    { 306 ;   ;Installment Amount  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Cost Plus Entry"."Invoice Price (LCY)" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                                                Service Order No.=FIELD(No.),
                                                                                                                                Installment Scheme=FILTER(<>''),
                                                                                                                                Posting Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Installment Amount;
                                                   Editable=No }
    { 310 ;   ;Invoice Base Amount Labor;Decimal  ;OnValidate=BEGIN
                                                                VALIDATE("Invoice Base Amount Total", "Invoice Base Amount Labor" + "Invoice Base Amount Material");
                                                              END;

                                                   CaptionML=ENU=Invoice Base Amount Labor;
                                                   AutoFormatType=1 }
    { 311 ;   ;Invoice Base Hours  ;Decimal       ;CaptionML=ENU=Invoice Base Hours;
                                                   DecimalPlaces=2:5 }
    { 312 ;   ;Invoice Base Amount Material;Decimal;
                                                   OnValidate=BEGIN
                                                                VALIDATE("Invoice Base Amount Total", "Invoice Base Amount Labor" + "Invoice Base Amount Material");
                                                              END;

                                                   CaptionML=ENU=Invoice Base Amount Material;
                                                   AutoFormatType=1 }
    { 315 ;   ;Invoice Base Amount Total;Decimal  ;OnValidate=BEGIN
                                                                IF ("Invoice Base Amount Labor" <> 0) OR ("Invoice Base Amount Material" <> 0) THEN
                                                                  TESTFIELD("Invoice Base Amount Total", "Invoice Base Amount Labor" + "Invoice Base Amount Material");
                                                              END;

                                                   CaptionML=ENU=Invoice Base Amount Total;
                                                   AutoFormatType=1 }
    { 320 ;   ;Invoice Base Method ;Option        ;OnValidate=BEGIN
                                                                IF "Invoice Base Method" = "Invoice Base Method"::" " THEN BEGIN
                                                                  "Invoice Base Amount Labor" := 0;
                                                                  "Invoice Base Hours" := 0;
                                                                  "Invoice Base Amount Material" := 0;
                                                                  "Invoice Base Amount Total" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Invoice Base Method;
                                                   OptionCaptionML=ENU=" ,Total Service Order - Invoice Base Amount,Total Service Order if exceeding Invoice Base Amount";
                                                   OptionString=[ ,total-base,total>base] }
    { 329 ;   ;Department Code (Other);Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                CheckServOrderAuthorization(FIELDCAPTION("Department Code (Other)"));
                                                                ValidateShortcutDimCode(1,"Department Code (Other)", FALSE);  //db, 14-09-11: M28816

                                                                ServSetup.GET;
                                                                IF ServSetup."Copy Additional Cost Setup" THEN
                                                                  TESTFIELD("Department Code (Other)", "Global Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Department (Additional Cost) }
    { 330 ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=VAR
                                                                ServiceSurchargeManagement@1100528600 : Codeunit 11012834;
                                                              BEGIN
                                                                CheckServOrderAuthorization(FIELDCAPTION("Global Dimension 1 Code"));
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code", TRUE);  //db, 14-09-11: M28816

                                                                ServSetup.GET;
                                                                IF ServSetup."Copy Additional Cost Setup" THEN
                                                                  VALIDATE("Department Code (Other)", "Global Dimension 1 Code");

                                                                ServiceSurchargeManagement.CopySurchargeLinesToSO(Rec);
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 335 ;   ;Open (Purchase)     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Order Control Line"."Outstanding Amount" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                                             Service Order No.=FIELD(No.),
                                                                                                                             Cost Component=FIELD(Cost Component Filter),
                                                                                                                             Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Open (Purchase);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 336 ;   ;Received/Not Invoiced;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Order Control Line"."Amt. Rcd. Not Invoiced" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                                                 Service Order No.=FIELD(No.),
                                                                                                                                 Cost Component=FIELD(Cost Component Filter),
                                                                                                                                 Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Received/Not Invoiced;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 337 ;   ;Open Ovh. Surch. Firm (Purch.);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Order Control Line"."Overhead Surcharge Firm" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                                                  Service Order No.=FIELD(No.),
                                                                                                                                  Cost Component=FIELD(Cost Component Filter),
                                                                                                                                  Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Open Ovh. Surch. Firm Commitments (Purchase);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 338 ;   ;Open Amount (Hours) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line"."Amount (LCY)" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                                Service Order No.=FIELD(No.),
                                                                                                                Cost Component=FIELD(Cost Component Filter),
                                                                                                                Posting Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Open Amount (Hours);
                                                   Editable=No }
    { 339 ;   ;Open Hours          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line"."Total Line" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                              Service Order No.=FIELD(No.),
                                                                                                              Cost Component=FIELD(Cost Component Filter),
                                                                                                              Posting Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Open Hours;
                                                   Editable=No }
    { 340 ;   ;Open Ovh. Surch. (Hours);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Surcharge"."Overhead Surcharge Service" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                                                   Service Order No.=FIELD(No.),
                                                                                                                                   Cost Component=FIELD(Cost Component Filter),
                                                                                                                                   Posting Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Open Ovh. Surch. (Hours);
                                                   Editable=No }
    { 341 ;   ;Open Ovh. Surch. Soft (Purch.);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Order Control Line"."Overhead Surcharge Soft" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                                                  Service Order No.=FIELD(No.),
                                                                                                                                  Cost Component=FIELD(Cost Component Filter),
                                                                                                                                  Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Open Ovh. Surch. Soft Commitments (Purchase);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 345 ;   ;Open (Inventory)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Journal Line".Amount WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                     Service Order No.=FIELD(No.),
                                                                                                     Cost Component=FIELD(Cost Component Filter),
                                                                                                     Posting Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Open (Inventory);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 346 ;   ;Open Ovh. Surch. (Inventory);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Journal Surcharge"."Overhead Surcharge Service" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                                                Service Order No.=FIELD(No.),
                                                                                                                                Cost Component=FIELD(Cost Component Filter),
                                                                                                                                Posting Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Open Ovh. Surch. (Inventory);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 350 ;   ;On Hold             ;Code3         ;TableRelation="On Hold Code".Code;
                                                   OnValidate=BEGIN
                                                                ServLogRec.StoreChange(2, "No.", ServLogRec.FormatDescription(FIELDCAPTION("On Hold"), xRec."On Hold", "On Hold"));
                                                              END;

                                                   CaptionML=ENU=On Hold }
    { 351 ;   ;Description On Hold ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("On Hold Code".Description WHERE (Code=FIELD(On Hold)));
                                                   CaptionML=ENU=Description On Hold;
                                                   Editable=No }
    { 360 ;   ;Closing Date        ;Date          ;CaptionML=ENU=Closing Date }
    { 370 ;   ;% Labor             ;Decimal       ;OnValidate=BEGIN
                                                                CheckVATReverse(TRUE,FALSE);
                                                              END;

                                                   CaptionML=ENU=% Labor;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   AutoFormatType=1 }
    { 380 ;   ;% to B Account      ;Decimal       ;OnValidate=BEGIN
                                                                CheckVATReverse(TRUE,FALSE);
                                                              END;

                                                   CaptionML=ENU=% to B Account;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 390 ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=ENU=Shipping Agent Code }
    { 400 ;   ;Purchase            ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Amount (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                         Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                         Service Order No.=FIELD(No.),
                                                                                                         Cost Component=FIELD(Cost Component Filter),
                                                                                                         Order Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Purchase;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 410 ;   ;Name Assigned To    ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Assigned to)));
                                                   CaptionML=ENU=Name Assigned To;
                                                   Editable=No }
    { 430 ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   CaptionML=ENU=Payment Terms Code }
    { 460 ;   ;Created on          ;Date          ;CaptionML=ENU=Created on;
                                                   Editable=No }
    { 465 ;   ;Created by          ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserCode@1210190000 : Code[50];
                                                              UserMgt@1210190001 : Codeunit 418;
                                                            BEGIN
                                                              UserCode := "Created by";
                                                              UserMgt.LookupUserID(UserCode);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Created by;
                                                   Editable=No }
    { 470 ;   ;Progress Scheme     ;Code10        ;TableRelation="Progress Scheme".Code;
                                                   OnValidate=VAR
                                                                ProgressRec@1100485000 : Record 11020251;
                                                              BEGIN
                                                                ProgressRec.EditProgressScheme(ProgressRec.Type::ServOrder, "Progress Scheme", "No.");
                                                              END;

                                                   CaptionML=ENU=Progress Scheme }
    { 480 ;   ;Received/Not Inv. Hours;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Order Control Line"."Hours Rcd. Not Invoiced" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                                                  Service Order No.=FIELD(No.),
                                                                                                                                  Cost Component=FIELD(Cost Component Filter),
                                                                                                                                  Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Received/Not Inv. Hours;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 490 ;   ;Employee No.        ;Code20        ;TableRelation="Resource (WOP)" WHERE (Type=CONST(Employee));
                                                   OnValidate=VAR
                                                                WorkOrder@1100527000 : Record 11229279;
                                                                CUFunc@1000000000 : Codeunit 11128007;
                                                                ResourceWOP@1100528600 : Record 11229278;
                                                                ResourceMgtWorkOrderPlan@1100528601 : Codeunit 11229277;
                                                              BEGIN
                                                                CheckPlanDataFSA;
                                                                ResourceMgtWorkOrderPlan.TestResourceWithinCompanyPlanGroup("Employee No.");
                                                                DetermineLimitBudgetExceeded;
                                                                CALCFIELDS("Employee Name");
                                                                //<< ITERO.PR 150928
                                                                IF "Employee No." <> '' THEN BEGIN
                                                                  CUFunc.SOEmployee(Rec,"Employee No.");
                                                                END;
                                                                //>> ITERO.PR 150928
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupResourceEmpl("Employee No.", FALSE);
                                                            END;

                                                   CaptionML=ENU=Employee No.;
                                                   Description=DP00465, based on Resource }
    { 491 ;   ;Employee Name       ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Resource (WOP)".Name WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=ENU=Employee Name;
                                                   Editable=No }
    { 495 ;   ;Subcontractor       ;Code20        ;TableRelation="Resource (WOP)" WHERE (Type=CONST(Subcontractor));
                                                   OnValidate=VAR
                                                                WorkOrder@1100528600 : Record 11229279;
                                                                ResourceMgtWorkOrderPlan@1100528601 : Codeunit 11229277;
                                                              BEGIN
                                                                CheckPlanDataFSA;
                                                                ResourceMgtWorkOrderPlan.TestResourceWithinCompanyPlanGroup(Subcontractor);
                                                                CALCFIELDS("Subcontractor Name");
                                                              END;

                                                   CaptionML=ENU=Subcontractor;
                                                   Description=DP00610, based on Resource }
    { 496 ;   ;Subcontractor Name  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Resource (WOP)".Name WHERE (No.=FIELD(Subcontractor)));
                                                   CaptionML=ENU=Subcontractor Name;
                                                   Editable=No }
    { 510 ;   ;Discipline          ;Code10        ;FieldClass=Normal;
                                                   TableRelation=Discipline;
                                                   OnValidate=BEGIN
                                                                FillSubcontractor;
                                                              END;

                                                   CaptionML=ENU=Discipline }
    { 511 ;   ;Trade Speciality    ;Code10        ;TableRelation="Trade Speciality".Code WHERE (Discipline=FIELD(Discipline));
                                                   OnValidate=BEGIN
                                                                FillSubcontractor;
                                                              END;

                                                   CaptionML=ENU=Trade Speciality }
    { 540 ;   ;Location Filter     ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Service Location".No.;
                                                   CaptionML=ENU=Location Filter }
    { 550 ;   ;Territory Filter    ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Territory.Code;
                                                   CaptionML=ENU=Territory Filter }
    { 560 ;   ;Discipline Filter   ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Discipline.Code;
                                                   CaptionML=ENU=Discipline Filter }
    { 570 ;   ;Department Filter   ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Department Filter }
    { 578 ;   ;First Possible Starting Time;Time  ;OnValidate=BEGIN
                                                                CheckPlanLimitDateTime;
                                                                CheckFirmPlannedPlanDates;
                                                                UpdateWorkOrderInfo(CurrFieldNo);
                                                              END;

                                                   CaptionML=ENU=First Possible Starting Time }
    { 579 ;   ;Last Possible Ending Time;Time     ;OnValidate=BEGIN
                                                                CheckPlanLimitDateTime;
                                                                CheckFirmPlannedPlanDates;
                                                                UpdateWorkOrderInfo(CurrFieldNo);
                                                              END;

                                                   CaptionML=ENU=Last Possible Ending Time }
    { 580 ;   ;First Possible Starting Date;Date  ;OnValidate=BEGIN
                                                                IF ("First Possible Starting Date" > "Last Possible Ending Date") AND ("Last Possible Ending Date" <> 0D) THEN
                                                                  FIELDERROR("First Possible Starting Date",STRSUBSTNO(Text000,FIELDCAPTION("Last Possible Ending Date")));
                                                                IF "First Possible Starting Date" = 0D THEN
                                                                  "Last Possible Ending Date" := 0D;
                                                                IF "Starting Date" < "First Possible Starting Date" THEN
                                                                  "Starting Date" := "First Possible Starting Date";
                                                                IF "Ending Date" > "Last Possible Ending Date" THEN
                                                                  IF ("Ending Date" <> 0D) AND ("Last Possible Ending Date" <> 0D) THEN
                                                                   "Ending Date" := "Last Possible Ending Date";

                                                                CheckPlanLimitDateTime;
                                                                CheckFirmPlannedPlanDates;
                                                                CheckPlanDataFSA;
                                                                UpdateWorkOrderInfo(CurrFieldNo);
                                                              END;

                                                   CaptionML=ENU=First Possible Starting Date }
    { 581 ;   ;Last Possible Ending Date;Date     ;OnValidate=BEGIN
                                                                VALIDATE("First Possible Starting Date");
                                                                CheckPlanLimitDateTime;
                                                                CheckFirmPlannedPlanDates;
                                                                CheckPlanDataFSA;
                                                                UpdateWorkOrderInfo(CurrFieldNo);
                                                              END;

                                                   CaptionML=ENU=Last Possible Ending Date }
    { 583 ;   ;Schedule Relation   ;Option        ;CaptionML=ENU=Schedule Relation;
                                                   OptionCaptionML=ENU=" ,Start-Start,Start-End,End-Start,End-End";
                                                   OptionString=[ ,Start-Start,Start-End,End-Start,End-End] }
    { 584 ;   ;Duration Time       ;Decimal       ;OnValidate=BEGIN
                                                                CheckPlanDataFSA;
                                                                UpdateWorkOrderInfo(CurrFieldNo);
                                                              END;

                                                   CaptionML=ENU=Duration Time;
                                                   DecimalPlaces=0:5 }
    { 585 ;   ;Budget Hours        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line".Hours WHERE (Service Order No.=FIELD(No.),
                                                                                                            Cost Component=FIELD(Cost Component Filter),
                                                                                                            Index Date=FIELD(Period Filter),
                                                                                                            Cost Type=CONST(Labor)));
                                                   CaptionML=ENU=Budget Hours;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 586 ;   ;Budget Amount       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line".Amount WHERE (Service Order No.=FIELD(No.),
                                                                                                             Cost Component=FIELD(Cost Component Filter),
                                                                                                             Index Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Budget Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 587 ;   ;Budget Overhead Surcharge;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line"."Overhead Surcharge" WHERE (Service Order No.=FIELD(No.),
                                                                                                                           Cost Component=FIELD(Cost Component Filter),
                                                                                                                           Index Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Budget Overhead Surcharge;
                                                   Editable=No }
    { 591 ;   ;Next Deadline       ;DateTime      ;CaptionML=ENU=Next Deadline;
                                                   Description=W014185;
                                                   Editable=No }
    { 595 ;   ;Next Reference Period;Code10       ;TableRelation="Reference Period".Code WHERE (Type=CONST(ServOrder),
                                                                                                Document No.=FIELD(No.));
                                                   CaptionML=ENU=Next Reference Period;
                                                   Editable=No }
    { 596 ;   ;Next Reference Period Desc;Text50  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Reference Period".Description WHERE (Type=CONST(ServOrder),
                                                                                                            Document No.=FIELD(No.),
                                                                                                            Code=FIELD(Next Reference Period)));
                                                   CaptionML=ENU=Next Reference Period Description;
                                                   Editable=No }
    { 600 ;   ;Watch               ;Code10        ;TableRelation=Watch;
                                                   CaptionML=ENU=Watch;
                                                   Editable=No }
    { 610 ;   ;Estimate No.        ;Code20        ;TableRelation=Estimate.No.;
                                                   CaptionML=ENU=Estimate No.;
                                                   Editable=No }
    { 611 ;   ;Estimate Description;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Estimate.Description WHERE (No.=FIELD(Estimate No.)));
                                                   CaptionML=ENU=Estimate Description;
                                                   Editable=No }
    { 612 ;   ;Sub-Estimate No.    ;Code20        ;TableRelation="Sub-Estimate OLD"."Sub-Estimate No." WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Sub-Estimate No.;
                                                   Editable=No }
    { 613 ;   ;Sub-Estimate Description;Text50    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sub-Estimate OLD".Description WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                            Sub-Estimate No.=FIELD(Sub-Estimate No.)));
                                                   CaptionML=ENU=Sub-Estimate Description;
                                                   Editable=No }
    { 615 ;   ;Latest Reference Period;Code10     ;FieldClass=FlowField;
                                                   CalcFormula=Max("Reference Period".Code WHERE (Type=CONST(ServOrder),
                                                                                                  Document No.=FIELD(No.),
                                                                                                  Ending Date-Time=FILTER(<>'')));
                                                   CaptionML=ENU=Latest Reference Period;
                                                   Editable=No }
    { 650 ;   ;Latest Reference Period Time;DateTime;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Max("Reference Period"."Ending Date-Time" WHERE (Type=CONST(ServOrder),
                                                                                                                Document No.=FIELD(No.),
                                                                                                                Ending Date-Time=FILTER(<>'')));
                                                   CaptionML=ENU=Latest Reference Period Time;
                                                   Editable=No }
    { 660 ;   ;Actual Reference Point;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Document Reference Point"."Reference Point" WHERE (Type=CONST(ServOrder),
                                                                                                                          Document No.=FIELD(No.),
                                                                                                                          Actual=CONST(Yes)));
                                                   CaptionML=ENU=Actual Reference Point;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 661 ;   ;Actual Reference Point Desc;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Reference Point".Description WHERE (No.=FIELD(Actual Reference Point)));
                                                   CaptionML=ENU=Actual Reference Point Description;
                                                   Editable=No }
    { 662 ;   ;Actual Reference Point Time;DateTime;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Document Reference Point"."Date-Time (modified)" WHERE (Type=CONST(ServOrder),
                                                                                                                               Document No.=FIELD(No.),
                                                                                                                               Actual=CONST(Yes)));
                                                   CaptionML=ENU=Actual Reference Point Time;
                                                   Editable=No }
    { 670 ;   ;Allowed Costs       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line".Amount WHERE (Service Order No.=FIELD(No.),
                                                                                                             Cost Component=FIELD(Cost Component Filter),
                                                                                                             Finished=CONST(Yes),
                                                                                                             Index Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Allowed Costs;
                                                   Editable=No }
    { 671 ;   ;Allowed Costs (Ovh. Surch.);Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line"."Overhead Surcharge" WHERE (Service Order No.=FIELD(No.),
                                                                                                                           Cost Component=FIELD(Cost Component Filter),
                                                                                                                           Finished=CONST(Yes),
                                                                                                                           Index Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Allowed Costs (Overhead Surcharge);
                                                   Editable=No }
    { 672 ;   ;Allowed Hours       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line".Hours WHERE (Service Order No.=FIELD(No.),
                                                                                                            Cost Component=FIELD(Cost Component Filter),
                                                                                                            Finished=CONST(Yes),
                                                                                                            Index Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Allowed Hours;
                                                   Editable=No }
    { 680 ;   ;Settlement Method   ;Option        ;OnValidate=BEGIN
                                                                //db, 08-06-15: C023645
                                                                IF ("Settlement Method" <> xRec."Settlement Method") AND ("Settlement Method" = "Settlement Method"::"Cost Plus") THEN BEGIN
                                                                  TESTFIELD("Installment Scheme", '');
                                                                  TESTFIELD("Order Amount",0);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Settlement Method;
                                                   OptionCaptionML=ENU=Cost Plus,Fixed Price;
                                                   OptionString=Cost Plus,Fixed Price }
    { 691 ;   ;Signer              ;Text50        ;CaptionML=ENU=Signer }
    { 692 ;   ;E-Mail Signer       ;Text80        ;CaptionML=ENU=E-Mail Signer }
    { 695 ;   ;Accepted            ;Boolean       ;CaptionML=ENU=Accepted }
    { 700 ;   ;EP Contact No. Company;Code20      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Dimension Value"."Contact No. (Company)" WHERE (Code=FIELD(Global Dimension 1 Code),
                                                                                                                       Global Dimension No.=CONST(1)));
                                                   CaptionML=ENU=Company No.;
                                                   Editable=No }
    { 710 ;   ;EP Company Name     ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(EP Contact No. Company)));
                                                   CaptionML=ENU=Company Name;
                                                   Editable=No }
    { 720 ;   ;EP Company Address  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Address WHERE (No.=FIELD(EP Contact No. Company)));
                                                   CaptionML=ENU=Company Address;
                                                   Editable=No }
    { 730 ;   ;EP Company Postcode ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Post Code" WHERE (No.=FIELD(EP Contact No. Company)));
                                                   CaptionML=ENU=Company Post Code;
                                                   Editable=No }
    { 740 ;   ;EP Company City     ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.City WHERE (No.=FIELD(EP Contact No. Company)));
                                                   CaptionML=ENU=Company City;
                                                   Editable=No }
    { 800 ;   ;Postpone Invoicing  ;Boolean       ;CaptionML=ENU=Postpone Invoicing }
    { 810 ;   ;Order No. Customer  ;Text50        ;OnValidate=BEGIN
                                                                IF "Order No. Customer" <> xRec."Order No. Customer" THEN
                                                                  IF Origin = Origin::Dispatch THEN
                                                                    FIELDERROR(Origin);
                                                              END;

                                                   CaptionML=ENU=Order No. Customer }
    { 820 ;   ;Additional Cost     ;Boolean       ;OnValidate=BEGIN
                                                                CheckAdditionalCostSetup;
                                                              END;

                                                   CaptionML=ENU=Additional Cost }
    { 821 ;   ;Additional Cost (Labor);Boolean    ;OnValidate=BEGIN
                                                                CheckAdditionalCostSetup;
                                                              END;

                                                   CaptionML=ENU=Additional Cost (Labor) }
    { 822 ;   ;Additional Cost (Material);Boolean ;OnValidate=BEGIN
                                                                CheckAdditionalCostSetup;
                                                              END;

                                                   CaptionML=ENU=Additional Cost (Material) }
    { 823 ;   ;Additional Cost (Subc);Boolean     ;OnValidate=BEGIN
                                                                CheckAdditionalCostSetup;
                                                              END;

                                                   CaptionML=ENU=Additional Cost (Subcontracting) }
    { 824 ;   ;Additional Cost (Plant);Boolean    ;OnValidate=BEGIN
                                                                CheckAdditionalCostSetup;
                                                              END;

                                                   CaptionML=ENU=Additional Cost (Plant) }
    { 825 ;   ;Additional Cost (Sundry);Boolean   ;OnValidate=BEGIN
                                                                CheckAdditionalCostSetup;
                                                              END;

                                                   CaptionML=ENU=Additional Cost (Sundry) }
    { 830 ;   ;Service Cluster     ;Code10        ;TableRelation="Service Cluster".Code;
                                                   OnValidate=BEGIN
                                                                ValidateServiceCluster;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupServiceCluster;
                                                            END;

                                                   CaptionML=ENU=Service Cluster }
    { 832 ;   ;Service Cluster Seqn.;Integer      ;TableRelation="Service Cluster Seq."."Seq. No.";
                                                   OnValidate=BEGIN
                                                                ValidateServiceClusterSeqn;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupServiceClusterSeqn;
                                                            END;

                                                   CaptionML=ENU=Service Cluster Seqn.;
                                                   Editable=No }
    { 840 ;   ;Schedule Method     ;Option        ;CaptionML=ENU=Schedule Method;
                                                   OptionCaptionML=ENU=" ,Date Fixed,Period Bound";
                                                   OptionString=[ ,Date,Period] }
    { 850 ;No ;Warranty found at   ;Text1         ;CaptionML=ENU=Warranty found at;
                                                   Description=DP00106: expired;
                                                   Editable=No }
    { 860 ;   ;Serv.Order WIP not processed;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Exist("Service-Ledger Entry" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                   Service Order No.=FIELD(No.),
                                                                                                   Service Order WIP processed=CONST(No)));
                                                   CaptionML=ENU=Service Order WIP not processed;
                                                   Editable=No }
    { 865 ;   ;Service Entry Revenue (WIP);Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Revenue (LCY)" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                                       Service Order No.=FIELD(No.),
                                                                                                                       Service Order WIP processed=CONST(No)));
                                                   CaptionML=ENU=Service Entry (WIP Revenue);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 866 ;   ;Service Entry Cost (WIP);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Cost (LCY)" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                                    Service Order No.=FIELD(No.),
                                                                                                                    Service Order WIP processed=CONST(No)));
                                                   CaptionML=ENU=Service Entry (WIP Cost);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 900 ;   ;Purch Discount Term Group 1;Code20 ;TableRelation="Discount Term Group".Code WHERE (Level=CONST(Customer),
                                                                                                   Type=FILTER(Common|Purchase));
                                                   CaptionML=ENU=Purchase Discount Term Group (Customer) }
    { 901 ;   ;Purch Discount Term Group 2;Code20 ;TableRelation="Discount Term Group".Code WHERE (Level=CONST(Job),
                                                                                                   Type=FILTER(Common|Purchase));
                                                   CaptionML=ENU=Purchase Discount Term Group (Job) }
    { 905 ;   ;Reference Date (Item);Date         ;CaptionML=ENU=Reference Date Item Prices }
    { 906 ;   ;Reference Date (Company);Date      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Inventory Setup"."Reference Date (Item)");
                                                   CaptionML=ENU=Reference Date Item Prices (Company);
                                                   Editable=No }
    { 907 ;   ;Reference Date (Customer);Date     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Reference Date (Item)" WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Reference Date Item Prices (Customer);
                                                   Editable=No }
    { 910 ;   ;Sales Discount Term Group 1;Code20 ;TableRelation="Discount Term Group".Code WHERE (Level=CONST(Customer),
                                                                                                   Type=FILTER(Common|Sales));
                                                   CaptionML=ENU=Sales Discount Term Group (Customer) }
    { 911 ;   ;Sales Discount Term Group 2;Code20 ;TableRelation="Discount Term Group".Code WHERE (Level=CONST(Job),
                                                                                                   Type=FILTER(Common|Sales));
                                                   CaptionML=ENU=Sales Discount Term Group (Job) }
    { 950 ;   ;Cost Control Up to Date;Boolean    ;CaptionML=ENU=Cost Control Up to Date }
    { 970 ;   ;Problem Text Code OLD;Code10       ;TableRelation="Standard Service Text".Code WHERE (Type=CONST(Problem));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Problem Text Code OLD", '');
                                                              END;

                                                   CaptionML=ENU=Problem Text Code OLD }
    { 980 ;   ;Internal Text Code OLD;Code10      ;TableRelation="Standard Service Text".Code WHERE (Type=CONST(Internal));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Internal Text Code OLD", '');
                                                              END;

                                                   CaptionML=ENU=Internal Text Code OLD }
    { 990 ;   ;Solution Text Code OLD;Code10      ;TableRelation="Standard Service Text".Code WHERE (Type=CONST(Solution));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Solution Text Code OLD", '');
                                                              END;

                                                   CaptionML=ENU=Solution Text Code OLD }
    { 995 ;   ;Cause Text Code OLD ;Code10        ;TableRelation="Standard Service Text".Code WHERE (Type=CONST(Cause));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Cause Text Code OLD", '');
                                                              END;

                                                   CaptionML=ENU=Cause Text Code OLD }
    { 996 ;   ;Invoice Text Code OLD;Code10       ;TableRelation="Standard Service Text".Code WHERE (Type=CONST(Invoice));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Invoice Text Code OLD", '');
                                                              END;

                                                   CaptionML=ENU=Internal Text Code OLD }
    { 1000;   ;Plan during Clock Time OLD;Boolean ;OnValidate=BEGIN
                                                                //CheckPlanDataFSA;
                                                                TESTFIELD("Plan during Clock Time OLD", FALSE);
                                                              END;

                                                   CaptionML=ENU=Plan during Clock Time OLD }
    { 1010;   ;Order Manager       ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Order Manager }
    { 1011;   ;Order Manager Name  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Order Manager)));
                                                   CaptionML=ENU=Order Manager Name;
                                                   Editable=No }
    { 1020;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 1030;   ;Location Customer   ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location"."Location Customer" WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=ENU=Location Customer;
                                                   Editable=No }
    { 1050;   ;Service Order Filter;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Service Order Filter;
                                                   Description=expired for Base ServOrder (still used in R11012806) }
    { 1060;   ;Send Report         ;Boolean       ;CaptionML=ENU=Send Report;
                                                   Editable=No }
    { 1070;   ;Date/Time Export Work Sheet;DateTime;
                                                   CaptionML=ENU=Date/Time Export Work Sheet;
                                                   Editable=No }
    { 1090;   ;Collective List No. ;Code20        ;TableRelation=IF (Base Service Order=CONST(Yes)) "Service Collective-List" WHERE (Bill-to Customer No.=FIELD(Bill-to Customer No.),
                                                                                                                                     Alternative Bill-to Address=FIELD(Alternative Bill-to Address))
                                                                                                                                     ELSE IF (Base Service Order=CONST(No)) "Service Collective-List";
                                                   OnValidate=VAR
                                                                ServiceOrderCostPlusEntry@1100528600 : Record 11012825;
                                                                ServiceCollectiveList@1100528601 : Record 11071730;
                                                                Customer@1100528602 : Record 18;
                                                                ServiceOrder@1100525000 : Record 11012823;
                                                                ServiceSetup@1100528604 : Record 11012800;
                                                                ServiceCollectiveListMgt@1100528603 : Codeunit 11012850;
                                                              BEGIN
                                                                IF xRec."Collective List No." = "Collective List No." THEN EXIT;

                                                                IF "Collective List No." <> '' THEN
                                                                  CheckCollectiveList
                                                                ELSE BEGIN
                                                                  ServiceCollectiveList.GET(xRec."Collective List No.");
                                                                  ServiceCollectiveList.TESTFIELD(Status, ServiceCollectiveList.Status::Open);
                                                                END;

                                                                IF NOT DisableBaseOrderCheck THEN
                                                                  IF "Base Service Order No." <> "No." THEN BEGIN
                                                                    IF "Collect Invoices By" = "Collect Invoices By"::BaseOrder THEN BEGIN  //DP01008
                                                                      ServiceOrder.GET("Base Service Order No.");
                                                                      ServiceOrder.VALIDATE("Collective List No.", "Collective List No.");
                                                                      ServiceOrder.MODIFY(TRUE);
                                                                      FIND('='); // Previous command will modify data on current record
                                                                    END;
                                                                  END;

                                                                IF Status < Status::"Administrative Finished" THEN BEGIN
                                                                  ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", "No.");
                                                                  ServiceOrderCostPlusEntry.SETRANGE(Invoiced, FALSE);
                                                                  ServiceOrderCostPlusEntry.SETRANGE("Bill-to Customer No.", "Bill-to Customer No.");
                                                                  ServiceOrderCostPlusEntry.MODIFYALL("Collective List No.", "Collective List No.", TRUE);
                                                                END;

                                                                IF "Collective List No." <> '' THEN BEGIN
                                                                  IF Status < Status::"Administrative Finished" THEN
                                                                    RecalcSOCostPlusEntries(FALSE);
                                                                  IF xRec."Collective List No." <> "Collective List No." THEN
                                                                    MODIFY;
                                                                  ServiceCollectiveListMgt.CreateCollListSCInvoicingLines("Collective List No.", FALSE);
                                                                  ServiceSetup.GET;
                                                                  IF NOT SuppressAutoRecalculateCollectiveList AND ServiceSetup."Auto Recalculate Coll. List" THEN BEGIN
                                                                    ServiceCollectiveList.GET("Collective List No.");
                                                                    ServiceCollectiveList.Recalculate(FALSE);
                                                                  END;
                                                                END;

                                                                IF "Base Service Order" THEN
                                                                  CheckBaseServiceOrderTree;
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupCollectiveListNo();
                                                            END;

                                                   CaptionML=ENU=Collective List No. }
    { 1200;   ;Direct Debit Mandate ID;Code35     ;TableRelation="SEPA Direct Debit Mandate" WHERE (Customer No.=FIELD(Bill-to Customer No.),
                                                                                                    Closed=CONST(No),
                                                                                                    Blocked=CONST(No),
                                                                                                    Mandate for Filter=CONST(ServiceOrder),
                                                                                                    No. Mandate for Filter=FIELD(No.));
                                                   OnValidate=BEGIN
                                                                IF "Direct Debit Mandate ID" <> '' THEN
                                                                  TESTFIELD("Bill-to Customer No.");
                                                              END;

                                                   CaptionML=ENU=Direct Debit Mandate ID }
    { 1210;No ;RESERVED MvE        ;Code10         }
    { 1620;   ;Payment Method Code (SO Inv.);Code10;
                                                   TableRelation="Payment Method";
                                                   CaptionML=ENU=Payment Method Code (SO Invoicing) }
    { 2000;   ;Budget Hours (Gantt Chart);Decimal ;CaptionML=ENU=Budget Hours (Gantt Chart);
                                                   Editable=No }
    { 2010;   ;Open Hours (Gantt Chart);Decimal   ;CaptionML=ENU=Open Hours (Gantt Chart);
                                                   Editable=No }
    { 2020;   ;Posted Hours (Gantt Chart);Decimal ;CaptionML=ENU=Posted Hours (Gantt Chart);
                                                   Editable=No }
    { 2030;   ;Finished Hours (Gantt Chart);Decimal;
                                                   CaptionML=ENU=Finished Hours (Gantt Chart);
                                                   Editable=No }
    { 2040;   ;Actual Reference Point (Gantt);Integer;
                                                   TableRelation="Reference Point".No. WHERE (Apply=CONST(ServOrder));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Actual Reference Point (Gantt Chart);
                                                   BlankZero=Yes;
                                                   Description=Diekus: also used in SO-monitor;
                                                   Editable=No }
    { 2050;   ;Commision Date      ;Date          ;CaptionML=ENU=Commision Date }
    { 2060;   ;Customer Problem    ;Code10        ;TableRelation="Customer Service Analysis".Code WHERE (Analysis Type=CONST(Problem),
                                                                                                         Customer No.=FIELD(Customer No.));
                                                   CaptionML=ENU=Customer Problem }
    { 2070;   ;Service Order Cost Activated;Boolean;
                                                   CaptionML=ENU=Service Order Cost Activated;
                                                   Editable=No }
    { 6000;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 7000;   ;FLS VisiTour ID     ;Integer       ;CaptionML=ENU=FLS VisiTour ID;
                                                   Editable=No }
    { 11012001;;Vessel No.         ;Code20        ;TableRelation=Vessel.No.;
                                                   CaptionML=ENU=Vessel No.;
                                                   Description=Vessels;
                                                   Editable=No }
    { 11012010;;Charge Vendor (Warranty);Boolean  ;CaptionML=ENU=Charge Vendor (Warranty);
                                                   Editable=No }
    { 11012020;;Service Control Period Date;Date  ;OnValidate=BEGIN
                                                                IF Status = Status::Finished THEN
                                                                  ERROR(Text005, TABLECAPTION, "No.", FIELDCAPTION(Status), Status);
                                                                //TESTFIELD("Base Service Order");
                                                                TESTFIELD("Service Control Period Date");
                                                                TestSCPeriodClosed;
                                                              END;

                                                   CaptionML=ENU=Service Control Period Date }
    { 11012030;;Plant Location     ;Code20        ;TableRelation="Plant Location".Code;
                                                   OnValidate=VAR
                                                                ServiceContact@1100528800 : Record 11012841;
                                                                BilltoCustomerNo@1100528000 : Code[20];
                                                              BEGIN
                                                                IF "Plant Location" <> '' THEN BEGIN
                                                                  TESTFIELD("Service Location No.",''); //DJN, 7-10-13: DP00195
                                                                  TESTFIELD("Service Contract No.",''); //DJN, 7-10-13: DP00195
                                                                  IF PlantLocRec.GET("Plant Location") THEN BEGIN
                                                                    IF PlantLocRec."Service Order No." <> '' THEN
                                                                      ERROR(Text114);
                                                                  END;
                                                                  IF "Plant Location" <> xRec."Plant Location" THEN BEGIN
                                                                    CheckServOrderAuthorization(FIELDCAPTION("Plant Location"));
                                                                    ValidateAddressData(3);
                                                                    //ValidateOtherData;  //C022547.o
                                                                    //C022547.sn
                                                                    ServSetup.GET;
                                                                    ServSetup.TESTFIELD("Customer Internal Charge");
                                                                    IF "Customer No." <> ServSetup."Customer Internal Charge" THEN BEGIN
                                                                      VALIDATE("Customer No.", ServSetup."Customer Internal Charge");
                                                                      CustRec.GET("Customer No.");
                                                                      BilltoCustomerNo := CustRec."Bill-to Customer No.";
                                                                      IF BilltoCustomerNo = '' THEN
                                                                        BilltoCustomerNo := "Customer No.";
                                                                      IF BilltoCustomerNo <> "Bill-to Customer No." THEN
                                                                        VALIDATE("Bill-to Customer No.", BilltoCustomerNo);
                                                                      //C022547.en
                                                                      DetermineDiscountGroups; // ek, 13-05-13: W051530.n
                                                                      CheckVATServOrder;
                                                                      CheckVATReverse(FALSE,FALSE);
                                                                    END;
                                                                  END;
                                                                END;
                                                                CheckInternalCharge;  //db, 20-05-11
                                                                CALCFIELDS("Project No.");
                                                                MODIFY; //mg
                                                                CheckTravelData;
                                                                "Additional Cost" := DetermineAdditionalCost;
                                                                CALCFIELDS("Plant Location Description");
                                                              END;

                                                   CaptionML=ENU=Plant Location }
    { 11012035;;Plant Location Description;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Location".Description WHERE (Code=FIELD(Plant Location)));
                                                   CaptionML=ENU=Plant Location Description;
                                                   Editable=No }
    { 11012040;;Plant Type         ;Code20        ;TableRelation="Plant Type".Code;
                                                   OnValidate=BEGIN
                                                                IF "Plant Type" = '' THEN
                                                                  "Plant Number" := '';
                                                                CALCFIELDS("Plant Type Description");
                                                              END;

                                                   CaptionML=ENU=Plant Type }
    { 11012045;;Plant Type Description;Text50     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Type".Description WHERE (Code=FIELD(Plant Type)));
                                                   CaptionML=ENU=Plant Type Description;
                                                   Editable=No }
    { 11012050;;Plant Number       ;Code10        ;TableRelation="Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   OnValidate=VAR
                                                                PlantType@1100528000 : Record 11012551;
                                                                PlantInventory@1100528800 : Record 11012555;
                                                                OPlantLocation@1100528801 : Code[20];
                                                              BEGIN
                                                                IF ("Plant Location" = '') AND ("Plant Number" <> '') AND (xRec."Plant Number" <> "Plant Number") THEN BEGIN
                                                                  PlantType.GET("Plant Type");
                                                                  IF NOT PlantType.Bulk THEN BEGIN
                                                                    IF PlantInventory.GetPlantLocationByPlantNumber("Plant Type", "Plant Number", OPlantLocation) THEN BEGIN
                                                                      IF OPlantLocation <> '' THEN
                                                                        VALIDATE("Plant Location", OPlantLocation);
                                                                    END
                                                                  END;
                                                                END;
                                                                CALCFIELDS("Plant Number Description");
                                                              END;

                                                   CaptionML=ENU=Plant No. }
    { 11012055;;Plant Number Description;Text50   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Number".Description WHERE (Plant Type=FIELD(Plant Type),
                                                                                                        No.=FIELD(Plant Number)));
                                                   CaptionML=ENU=Plant No. Description;
                                                   Editable=No }
    { 11012056;;Plant Inspection No.;Code30       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Number"."Inspection No." WHERE (Plant Type=FIELD(Plant Type),
                                                                                                             No.=FIELD(Plant Number)));
                                                   CaptionML=ENU=Plant Inspection No.;
                                                   Editable=No }
    { 11012060;;Cost Component Plant;Code10       ;TableRelation="Cost Component Plant".Code;
                                                   CaptionML=ENU=Cost Component Plant }
    { 11012070;;Alternative Plant Loc Address;Code10;
                                                   TableRelation="Plant Location Address"."Address Code" WHERE (Location=FIELD(Plant Location));
                                                   OnValidate=BEGIN
                                                                ValidateAddressData(3);
                                                              END;

                                                   OnLookup=VAR
                                                              PlantLocationAddressesFrm@1100529901 : Page 11012625;
                                                              PlantLocationAddressRec@1100529900 : Record 11012590;
                                                            BEGIN
                                                              PlantLocationAddressRec.SETRANGE(Location,"Plant Location");
                                                              PlantLocationAddressesFrm.SETTABLEVIEW(PlantLocationAddressRec);
                                                              PlantLocationAddressesFrm.LOOKUPMODE := TRUE;
                                                              IF PlantLocationAddressesFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                PlantLocationAddressesFrm.GETRECORD(PlantLocationAddressRec);
                                                                "Alternative Plant Loc Address" := PlantLocationAddressRec."Address Code";
                                                                ValidateAddressData(3);
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Alternative Plant Location Address }
    { 11012080;;Travel Duration    ;Duration      ;CaptionML=ENU=Travel Duration }
    { 11012090;;No. of Work Orders ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Work Order" WHERE (Source Company=FIELD(Company Filter),
                                                                                         Source Type=CONST(ServiceOrder),
                                                                                         Source No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Work Orders;
                                                   Editable=No }
    { 11012100;;Company Filter     ;Text30        ;FieldClass=FlowFilter;
                                                   TableRelation=Company.Name;
                                                   CaptionML=ENU=Company Filter }
    { 11012110;;Firm Planned       ;Boolean       ;OnValidate=BEGIN
                                                                IF (CurrFieldNo = FIELDNO("Firm Planned")) AND (xRec."Firm Planned" <> "Firm Planned") THEN BEGIN
                                                                  IF NOT "Firm Planned" THEN BEGIN
                                                                    IF NOT CONFIRM(Text115) THEN
                                                                      ERROR('');
                                                                  END ELSE
                                                                    CheckFirmPlannedPlanDates;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Firm Planned }
    { 11012120;;Service Category   ;Code10        ;TableRelation=IF (Service Contract No.=FILTER(<>'')) "Service Category".Code WHERE (Service Contract No.=FIELD(Service Contract No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Service Contract No.");
                                                              END;

                                                   CaptionML=ENU=Service Category }
    { 11012130;;Post Code Type     ;Option        ;CaptionML=ENU=Post Code Type;
                                                   OptionCaptionML=ENU=" ,Odd,Even,House Boat,House Trailer";
                                                   OptionString=[ ,Odd,Even,House Boat,House Trailer];
                                                   Editable=No }
    { 11012140;;SO Finished (Field Service);Boolean;
                                                   CaptionML=ENU=Service Order Finished (Field Service);
                                                   Editable=No }
    { 11012150;;House No.          ;Integer       ;CaptionML=ENU=House No.;
                                                   Editable=No }
    { 11012160;;House No. Ext.     ;Code10        ;CaptionML=ENU=House No. Extension;
                                                   Editable=No }
    { 11012170;;Recording Unit Prices by;Code20   ;TableRelation=Employee.No.;
                                                   CaptionML=ENU=Recording Unit Prices by }
    { 11012180;;Next Service Orders Exist;Boolean ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Service Order" WHERE (Base Service Order No.=FIELD(No.),
                                                                                            Base Service Order=CONST(No)));
                                                   CaptionML=ENU=Next Service Orders Exist;
                                                   Editable=No }
    { 11012190;;Cause of Exclusion Code;Code10    ;TableRelation="Cause of Excl. (Ref. Period)";
                                                   CaptionML=ENU=Cause of Exclusion }
    { 11012200;;Preferred Employee No.;Code20     ;TableRelation="Resource (WOP)";
                                                   OnValidate=VAR
                                                                ResourceMgtWorkOrderPlan@1100528600 : Codeunit 11229277;
                                                              BEGIN
                                                                ResourceMgtWorkOrderPlan.TestResourceWithinCompanyPlanGroup("Preferred Employee No.");
                                                              END;

                                                   CaptionML=ENU=Preferred Employee No.;
                                                   Editable=No }
    { 11012210;;Preferred Employee Name;Text50    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Resource (WOP)".Name WHERE (No.=FIELD(Preferred Employee No.)));
                                                   CaptionML=ENU=Preferred Employee Name;
                                                   Editable=No }
    { 11012220;;Service Location Type;Code20      ;TableRelation="Service Location Type";
                                                   OnValidate=VAR
                                                                ServiceLocation@1100528600 : Record 11012801;
                                                              BEGIN
                                                                IF "Service Location No." <> '' THEN
                                                                  IF ServiceLocation.GET("Service Location No.") THEN
                                                                    IF ServiceLocation."Service Location Type" <> '' THEN
                                                                      TESTFIELD("Service Location Type", ServiceLocation."Service Location Type");
                                                              END;

                                                   CaptionML=ENU=Service Location Type }
    { 11012230;;Room (SUP)         ;Code20        ;TableRelation="SUP Room".Code;
                                                   OnValidate=VAR
                                                                ServiceUnitPriceManagement@1100528600 : Codeunit 11012846;
                                                              BEGIN
                                                                IF "Room (SUP)" <> xRec."Room (SUP)" THEN BEGIN
                                                                  ServiceUnitPriceManagement.ValidateRoom("Customer No.", "Room (SUP)");
                                                                  VALIDATE("Part (SUP)", '');
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ServiceUnitPriceManagement@1100528602 : Codeunit 11012846;
                                                            BEGIN
                                                              ServiceUnitPriceManagement.LookupRoom("Customer No.", "Service Location Type", "Room (SUP)");
                                                              VALIDATE("Room (SUP)");
                                                            END;

                                                   CaptionML=ENU=Room }
    { 11012240;;Part (SUP)         ;Code20        ;TableRelation="SUP Part".Code;
                                                   OnValidate=VAR
                                                                ServiceUnitPriceManagement@1100528600 : Codeunit 11012846;
                                                              BEGIN
                                                                ServiceUnitPriceManagement.ValidatePart("Customer No.", "Part (SUP)");
                                                              END;

                                                   OnLookup=VAR
                                                              ServiceUnitPriceManagement@1100528600 : Codeunit 11012846;
                                                            BEGIN
                                                              ServiceUnitPriceManagement.LookupPart("Customer No.", "Room (SUP)", "Part (SUP)");
                                                              VALIDATE("Part (SUP)");
                                                            END;

                                                   CaptionML=ENU=Part }
    { 11012250;;Customer Feature   ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location"."Customer Feature" WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=ENU=Customer Feature;
                                                   Editable=No }
    { 11012260;;Location Contact Debrief;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Service Loc. Contact Debrief" WHERE (Service Order No.=FIELD(No.)));
                                                   CaptionML=ENU=Location Contact Debrief;
                                                   Editable=No }
    { 11012700;;Service Warranty Code;Code10      ;TableRelation="Service Warranty";
                                                   CaptionML=ENU=Service Warranty Code }
    { 11012710;;Origin             ;Option        ;CaptionML=ENU=Origin;
                                                   OptionCaptionML=ENU=Navision,Mobile,Service Portal,Service Call App.,Dispatch,FSA,,,,,,,,Other";
                                                   OptionString=Navision,Mobile,Service Portal,Service Call App.,Dispatch,FSA,,,,,,,,Other;
                                                   Description=Same as T11012822:920;
                                                   Editable=No }
    { 11012720;;Limit Budget Exceedance;Boolean   ;CaptionML=ENU=Limit Budget Exceedance;
                                                   Editable=No }
    { 11012730;;Charged on Project ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Revenue (LCY)" WHERE (Base Service Order No.=FIELD(Base Service Order No.),
                                                                                                                       Service Order No.=FIELD(No.),
                                                                                                                       Transfer to Project=CONST(Processed)));
                                                   CaptionML=ENU=Charged on Project;
                                                   Editable=No }
    { 11012831;;Laboratory Service Call No.;Code20;TableRelation="Service Call";
                                                   CaptionML=ENU=Laboratory Service Call No.;
                                                   Editable=No }
    { 11012832;;Laboratory Order Creation Date;DateTime;
                                                   OnValidate=BEGIN
                                                                // Intentionally left editable for troubleshooting purposes; should not be editable from the UI.
                                                              END;

                                                   CaptionML=ENU=Laboratory Order Creation Date }
    { 11012833;;Lab. Results Retrieval Date;DateTime;
                                                   OnValidate=BEGIN
                                                                // Intentionally left editable for troubleshooting purposes; should not be editable from the UI.
                                                              END;

                                                   CaptionML=ENU=Lab. Results Retrieval Date }
    { 11012834;;Lab. Certif. Retrieval Date;DateTime;
                                                   OnValidate=BEGIN
                                                                // Intentionally left editable for troubleshooting purposes; should not be editable from the UI.
                                                              END;

                                                   CaptionML=ENU=Lab. Certif. Retrieval Date }
    { 11012835;;Get Lab Certificate;Boolean       ;CaptionML=ENU=Get Lab Certificate;
                                                   Description=Used internally by report 11012860 and codeunit 11012860;
                                                   Editable=No }
    { 11012980;;Export to FSA(Teaml.change)OLD;Boolean;
                                                   OnValidate=BEGIN
                                                                //UpdateExportFSAInWorkOrder();
                                                              END;

                                                   CaptionML=ENU=Export to FSA (Teamlead change) OLD;
                                                   Description=Export indication to FSA in behalf of teamlead change;
                                                   Editable=No }
    { 11012990;;Export to FSA      ;Boolean       ;OnValidate=VAR
                                                                DocRefPoint@1210190000 : Record 11020296;
                                                                FPSMobileItemUsage@1100525000 : Record 11125647;
                                                              BEGIN
                                                                IF "Export to FSA" THEN BEGIN
                                                                  IF (Status > Status::"In Process") AND (Status <> Status::Cancelled) THEN
                                                                    FIELDERROR("Export to FSA", STRSUBSTNO(Text011, Status));
                                                                  IF (Status = Status::Cancelled) AND ("Date/Time Export to FSA" = 0DT) THEN
                                                                    FIELDERROR("Export to FSA", STRSUBSTNO(Text012, Status));

                                                                  CheckExportToFSA();
                                                                  DocRefPoint.InsertDocRefPointExportFSA("No.");
                                                                  //mg.sn, 14-12-11: M31481
                                                                  IF DocRefPoint.GetNewActRefPoint >= 0 THEN
                                                                    "Actual Reference Point (Gantt)" := DocRefPoint.GetNewActRefPoint;
                                                                  //mg.en, 14-12-11: M31481
                                                                END;

                                                                UpdateExportFSAInWorkOrder();
                                                              END;

                                                   CaptionML=ENU=Export to Field Service;
                                                   Description=Export indication to FSA. (Field Service Admin. of 4PS-Mobile). Must be turned on at SO conscious. }
    { 11012991;;Date/Time Export to FSA;DateTime  ;CaptionML=ENU=Date/Time Export to Field Service;
                                                   Editable=No }
    { 11012992;;Contact No.        ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Contact Business Relation"."Contact No." WHERE (Link to Table=CONST(Customer),
                                                                                                                       No.=FIELD(Customer No.)));
                                                   CaptionML=ENU=Contact No.;
                                                   Editable=No }
    { 11012993;;Bill-to Contact No.;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Contact Business Relation"."Contact No." WHERE (Link to Table=CONST(Customer),
                                                                                                                       No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Bill-to Contact No.;
                                                   Editable=No }
    { 11012995;;Decentral Created  ;Boolean       ;CaptionML=ENU=Decentral Created;
                                                   Description=FSA/Mobile;
                                                   Editable=No }
    { 11012996;;Contact Person No. ;Code20        ;TableRelation=Contact.No. WHERE (Type=CONST(Person),
                                                                                    Company No.=FIELD(Contact No.),
                                                                                    Blocked=CONST(No));
                                                   OnValidate=VAR
                                                                Contact@1210190000 : Record 5050;
                                                                OverwriteCommunicationFields@1100409000 : Boolean;
                                                              BEGIN
                                                                CALCFIELDS("Contact Person Name");
                                                                "Contact Name" := "Contact Person Name";

                                                                IF Contact.GET("Contact Person No.") THEN BEGIN
                                                                  IF CurrFieldNo <> FIELDNO("Contact Person No.") THEN
                                                                    OverwriteCommunicationFields := TRUE
                                                                  ELSE
                                                                    OverwriteCommunicationFields := CONFIRM(Text108, TRUE);

                                                                  //mg.sn, 04-04-12: M33783
                                                                  IF OverwriteCommunicationFields THEN BEGIN
                                                                    "Phone No." := Contact."Phone No.";
                                                                    "E-Mail" := Contact."E-Mail";
                                                                    "Phone No. 2" := Contact."Phone No. 2";
                                                                    "Mobile Phone No." := Contact."Mobile Phone No.";
                                                                    "Fax No." := Contact."Fax No.";
                                                                  END;
                                                                  //mg.en, 04-04-12: M33783
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Contact Person No. }
    { 11012997;;Contact Person Name;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Contact Person No.)));
                                                   CaptionML=ENU=Contact Person Name;
                                                   Editable=No }
    { 11012998;;Bill-to Contact Person;Code20     ;TableRelation=Contact.No. WHERE (Company No.=FIELD(Bill-to Contact No.),
                                                                                    Type=CONST(Person));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Bill-to Contact Person Name");
                                                              END;

                                                   CaptionML=ENU=Bill-to Contact Person }
    { 11012999;;Bill-to Contact Person Name;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Bill-to Contact Person)));
                                                   CaptionML=ENU=Bill-to Contact Person Name;
                                                   Editable=No }
    { 11013000;;Price Book Type    ;Option        ;OnValidate=BEGIN
                                                                ValidateUnitPriceTypeChange;
                                                              END;

                                                   CaptionML=ENU=Price Book Type;
                                                   OptionCaptionML=ENU=None,Internal,Customer;
                                                   OptionString=None,Internal,Customer }
    { 11013010;;Unit Price Status  ;Option        ;OnValidate=BEGIN
                                                                ProcessUnitPriceStatusChange;
                                                              END;

                                                   CaptionML=ENU=Unit Price Status;
                                                   OptionCaptionML=ENU=" ,Pre-Recording,Recording,Production Recording,,,,,Finished";
                                                   OptionString=[ ,Pre-Recording,Recording,Production Recording,,,,,Finished] }
    { 11013020;;Change Request No. ;Code20        ;TableRelation="Change Request";
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Change Request Description");
                                                              END;

                                                   CaptionML=ENU=Change Request No.;
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 11013021;;Change Request Description;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Change Request".Description WHERE (No.=FIELD(Change Request No.)));
                                                   CaptionML=ENU=Change Request Description;
                                                   Editable=No }
    { 11013030;;Invoiced (LCY)     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service-Ledger Entry"."Total Revenue (LCY)" WHERE (Service Order No.=FIELD(No.),
                                                                                                                       Cost Type=CONST(Revenues)));
                                                   CaptionML=ENU=Invoiced (LCY) }
    { 11013040;;Master Project     ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order Extension"."Master Project" WHERE (Service Order No.=FIELD(No.)));
                                                   OnLookup=VAR
                                                              Job@1100528600 : Record 11072003;
                                                            BEGIN
                                                              Job.SETRANGE("Internal Project", FALSE);
                                                              IF Job.GET("Master Project") THEN;
                                                              PAGE.RUN(0, Job);
                                                            END;

                                                   CaptionML=ENU=Master Project;
                                                   Editable=No }
    { 11013050;;Master Element     ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order Extension"."Master Element" WHERE (Service Order No.=FIELD(No.)));
                                                   OnLookup=VAR
                                                              ProjectElement@1100528600 : Record 11012010;
                                                            BEGIN
                                                              CALCFIELDS("Master Project", "Master Element");
                                                              ProjectElement.SETRANGE("Project No.", "Master Project");
                                                              IF ProjectElement.GET("Master Project", "Master Element") THEN
                                                              PAGE.RUN(0, ProjectElement);
                                                            END;

                                                   CaptionML=ENU=Master Element;
                                                   Editable=No }
    { 11128270;;Price List Code    ;Code20        ;TableRelation="Customer Price List" WHERE (Display Price List=CONST(Yes));
                                                   CaptionML=ENU=Price List Code }
    { 11128285;;Tactics Agreement  ;Decimal       ;CaptionML=ENU=Tactics Agreeement (%) }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Customer No.                             }
    {    ;Service Contract No.,Source Type,Order Date;
                                                   SumIndexFields=Order Amount (LCY);
                                                   MaintainSIFTIndex=No }
    {    ;Service Location No.,Source Type         }
    {    ;Previous Service Order No.               }
    {    ;Base Service Order No.                   }
    {    ;Base Service Order                       }
    {    ;City,Address                             }
    {    ;Post Code                                }
    {    ;Order Date,Order Time                    }
    {    ;Starting Date,Starting Time              }
    {    ;Ending Date,Ending Time                  }
    {    ;Priority                                 }
    {    ;Call No.                                 }
    {    ;Next Deadline                            }
    {    ;Actual Reference Point (Gantt)           }
    {    ;Employee No.,Starting Date,Starting Time }
    {    ;Global Dimension 1 Code                  }
    {    ;Export to FSA                            }
    {    ;Estimate No.,Sub-Estimate No.            }
    {    ;Laboratory Order Creation Date           }
    {    ;Service Location No.,Order Date,Order Time }
    {    ;Vessel No.                               }
    {    ;Service Location No.,Status,Starting Date }
    {    ;Service Contract No.,Status,Starting Date }
    {    ;Collective List No.                      }
    {    ;Bill-to Customer No.                     }
    {    ;Subcontractor,Actual Reference Point (Gantt),Last Possible Ending Date,Ending Date }
    {    ;Glazing Service Call No.                 }
    {    ;Subcontractor,Starting Date,Starting Time }
    {    ;Starting Date,Duration Time,Status       }
    {    ;Assigned to                              }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ServSetup@1210190000 : Record 11012800;
      UserSetup@1100485011 : Record 91;
      ServLogRec@1100485006 : Record 11012855;
      ServContrRec@1210190008 : Record 11012812;
      ServLocRec@1210190004 : Record 11012801;
      ServActRec@1210190011 : Record 5080;
      ServAdviceRec@1210190015 : Record 11012055;
      ServCostPlusRec@1210190012 : Record 11012825;
      ServTypeRec@1210190022 : Record 11012814;
      ServPackRec@1100525007 : Record 11012806;
      ProgSchemeRec@1100485004 : Record 11020250;
      ProgPhaseRec@1100485005 : Record 11020251;
      RefPeriodRec@1100485007 : Record 11020272;
      CustRec@1210190009 : Record 18;
      ProjElemRec@1210190010 : Record 11012010;
      BudgetRateRec@1210190020 : Record 11012000;
      DimValRec@1210190019 : Record 349;
      TempServOrderRec@1210190017 : TEMPORARY Record 11012823;
      TempServOrderRec2@1100485001 : TEMPORARY Record 11012823;
      PostCode@1210190016 : Record 225;
      TradeSpecRec@1100485021 : Record 11020285;
      SignatureRec@1100525010 : Record 11020349;
      ServOrderExtension@1100528900 : Record 11071727;
      PlantLocRec@1100529300 : Record 11012554;
      DimMgt@1210190018 : Codeunit 408;
      NoSeriesMgt@1210190001 : Codeunit 396;
      Text000@1210190006 : TextConst 'ENU=must occur before %1';
      MoveEntries@1210190027 : Codeunit 361;
      Text001@1210190013 : TextConst 'ENU=Do you want to change %1?';
      Text002@1210190021 : TextConst 'ENU=Status not allowed, will be set by Closing procedure';
      Text003@1210190023 : TextConst 'ENU=%1 %2 should have at least %3 %4.';
      Text004@1210190030 : TextConst 'ENU=Service Contract %1 expires on %2';
      Text004a@1100525009 : TextConst 'ENU=%3 before Starting Date %2 of Service Contract %1';
      Text004b@1100525005 : TextConst 'ENU=%3 after Ending Date %2 of Service Contract %1';
      Text005@1210190026 : TextConst 'ENU=%1 %2 has %3 %4.';
      Text006@1210190025 : TextConst 'ENU=Finishing Time exceeds Starting Time';
      Text007@1210190031 : TextConst 'ENU=Assignment not accepted: the result would be a never ending chain of Service Orders';
      Text008@1100485008 : TextConst 'ENU=must occur between %1 and %2';
      Text009@1100485016 : TextConst 'ENU=Modify %1 of %2 not allowed due to choosen blockade by actual Reference Point.';
      Text010@1100485000 : TextConst 'ENU=Do you want to change Address Data: \\Old: \%1 \%2 \%3 \%4 \%5 \\New: \%6 \%7 \%8 \%9 \%10';
      PlanCu@1100485022 : Codeunit 11012807;
      gSkipStatusCheck@1210190002 : Boolean;
      gSkipUpdateDocRefPoint@1100485012 : Boolean;
      gUseFilledOrderDateTime@1100485019 : Boolean;
      Text011@1100485013 : TextConst 'ENU=not allowed for an order with status ''%1''';
      Text012@1100485014 : TextConst 'ENU=not allowed for n order with status ''%1'' that is never exported to Field Service';
      Text013@1100485015 : TextConst 'ENU=Actueel Reference Point is blocked for modify, send Service Order ''%1'' to Field Service not allowed.';
      AskQuestionAddress@1100485017 : Boolean;
      Text014@1100485018 : TextConst 'ENU=Actueel Reference Point is blocked for export of Service Order %1 to Field Service.';
      SkipPlanCu@1100485023 : Boolean;
      Text015@1100485010 : TextConst 'ENU=Bill-To Address,Address';
      Text016@1100525000 : TextConst 'ENU=%1 can not be changed by user %2, because (expected) cost and/or revenues are registrated.';
      Text017@1100485025 : TextConst 'ENU=No team leader selected.';
      Text018@1100485026 : TextConst 'ENU=%1 is not a valid %2.';
      Text021@1100525004 : TextConst 'ENU=Attention! Employee %1 is not %2.';
      Text022@1100525018 : TextConst 'ENU="Schedule Relation: %1 \\Previous Service Order: \%2 \%3 \%4 \\Current Service Order: \%6 \%7 \%8 "';
      Text023@1100525008 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      Text024@1100528300 : TextConst 'ENU=FuctionCode FLS VisiTour not allowed.';
      Text043@1210190039 : TextConst 'ENU=Excactly one employee must be %1 for %2 %3.';
      Text999@1100525006 : TextConst 'ENU=Rename not allowed due to external applications';
      DPA_Management@1100000999 : Codeunit 11012783;
      SaveField@1210190014 : Integer;
      Text036@1100528401 : TextConst 'ENU=%1 with %2 %3 not found.';
      Text037@1100528400 : TextConst 'ENU=There should be only 1 %1 with %2 %3.';
      SaveDefaultDim@1210190032 : Boolean;
      Text040@1210190036 : TextConst 'ENU=Not all related Service Orders have status Technical Finished, continue?';
      Text041@1210190035 : TextConst 'ENU=Show these Service Orders First,Change Both Base and Related Service Orders,Change Only Base Service Order';
      Text042@1210190034 : TextConst 'ENU="Status Change "';
      DisableBaseOrderCheck@1100528603 : Boolean;
      Text103@1100528604 : TextConst 'ENU=Service Location No. %1 is not part of any Service Contract Object of Service Contract %2';
      Text104@1210190038 : TextConst 'ENU=Manually entered Price';
      Text106@1100528800 : TextConst 'ENU=Do you want to change the Currency Code ?';
      Text107@1210190040 : TextConst 'ENU=%1 is within Closed Contract Period %2 of Service Contract %3.';
      AnalysisType@1100528606 : 'Problem,Cause,Solution';
      Text108@1100409000 : TextConst 'ENU=Copy Communication Data from Contact Person?';
      Text109@1100528600 : TextConst 'ENU=Are you sure you want to disconnect this Next Service Order (and possible connected Next Service Orders) from the Base Service Order?';
      Text110@1100528607 : TextConst 'ENU=Invoiced Cost Plus Entries exist, disconnecting nog possible.';
      Text111@1100528602 : TextConst 'ENU=Maintenance Appointment already sent, send again?';
      Text112@1100525002 : TextConst 'ENU=Attention! Base Service Order %1 has status %2.';
      Text113@1100525003 : TextConst 'ENU=Service Order %1 has Next Service Orders, linking not allowed';
      Text114@1100525011 : TextConst 'ENU=Plant Location cannot be assigned to a service order';
      DontShowMenuOnStatusChange@1100525012 : Boolean;
      Text115@1100528601 : TextConst 'ENU=Service Order is Firm Planned, continue?';
      Text116@1100528608 : TextConst 'ENU=Service Order %1 is Firm Planned, changes not allowed';
      Text117@1100528609 : TextConst 'ENU=Changes to field %1 not allowed, more than 1 work orders present';
      Text118@1100409001 : TextConst 'ENU=Changes to field %1 not propagated to work orders, more than 1 work orders present';
      Text119@1100409002 : TextConst 'ENU=%1 precedes %2, continue?';
      Text120@1100528611 : TextConst 'ENU=Only Entry List will be displayed without expected costs';
      Text121@1100528610 : TextConst 'ENU=Only Entry List will be displayed without expected revenues';
      Text11012040@1100409003 : TextConst 'ENU=Do you want to replace existing preferred locations?';
      SkipUpdateServiceText@1100525001 : Boolean;
      SuppressAutoRecalculateCollectiveList@1100528612 : Boolean;

    PROCEDURE ValidateAddressData@1210190000(lvAction@1210190002 : Integer);
    VAR
      ObjectImpWorkSheetMgt@1100528600 : Codeunit 11012839;
    BEGIN
      ServSetup.GET;
      IF (lvAction <> 3) AND ((CurrFieldNo = FIELDNO("Plant Location")) OR (CurrFieldNo = FIELDNO("Plant Number"))) AND
         ("Plant Location" <> '') AND ("Customer No." = ServSetup."Customer Internal Charge")
      THEN  //C022547.n
        EXIT;

      CASE lvAction OF
        1: ValidateServiceLocAddressData;
        2: ValidateBillToCustAddressData;
        3: ValidatePlantLocAddressData;
      END;

      IF ((CurrFieldNo <> 0) OR ((CurrFieldNo = 0) AND AskQuestionAddress)) AND  ((lvAction = 1) OR (lvAction = 3 ))
          AND ("No." <> '') THEN BEGIN
        IF ((xRec.Name + xRec.Address + xRec.City + xRec."Post Code" + xRec."Contact Name" + xRec."Phone No.") <>
            (Name + Address + City + "Post Code" + "Contact Name" + "Phone No.")) AND
           ((xRec.Name + xRec.Address + xRec.City + xRec."Post Code" + xRec."Contact Name" + xRec."Phone No." <> '')) THEN BEGIN
          //AskQuestionAddress := FALSE;  //db, 10-01-07 / 12-06-07 (call 9357)
          IF CONFIRM(Text010, TRUE,
            xRec.Name, xRec.Address, (xRec."Post Code" + '  ' + xRec.City), xRec."Contact Name", xRec."Phone No.",
            Name, Address, ("Post Code" + '  ' + City), "Contact Name", "Phone No.") = FALSE THEN
          BEGIN
            Name := xRec.Name;
            "Name 2" := xRec."Name 2";
            Address := xRec.Address;
            "Address 2":= xRec."Address 2";
            VALIDATE("Post Code", xRec."Post Code");
            City := xRec.City;
            "Country/Region Code" := xRec."Country/Region Code";
            "Contact Name" := xRec."Contact Name";
            "Phone No." := xRec."Phone No.";
            "Phone No. 2" := xRec."Phone No. 2";
            "Mobile Phone No." := xRec."Mobile Phone No.";
            "Fax No." := xRec."Fax No.";
            "E-Mail" := xRec."E-Mail";
            "Territory Code" := xRec."Territory Code";
          END ELSE BEGIN
            AskQuestionAddress := FALSE;  //db, 12-06-07 (call 9357)
            xRec.Name := Name;
            xRec."Name 2" := "Name 2";
            xRec.Address := Address;
            xRec."Address 2" := "Address 2";
            xRec.City := City;
            xRec."Country/Region Code" := "Country/Region Code";
            xRec."Post Code" := "Post Code";
            xRec."Post Code Type" := "Post Code Type";
            xRec."Contact Name" := "Contact Name";
            xRec."Phone No." := "Phone No.";
            xRec."Phone No. 2" := "Phone No. 2";
            xRec."Mobile Phone No." := "Mobile Phone No.";
            xRec."Fax No." := "Fax No.";
            xRec."E-Mail" := "E-Mail";
            xRec."Territory Code" := "Territory Code";
          END;
        END;
      END;
    END;

    PROCEDURE ValidateServiceLocAddressData@1100529910();
    VAR
      lvBillToCust@1100529900 : Code[20];
    BEGIN
      ServSetup.GET;
      IF "Customer No." <> '' THEN BEGIN
        CustRec.GET("Customer No.");
        CustRec.CheckCustomerStatus("Customer No.");
        Name := CustRec.Name;
        "Name 2":= CustRec."Name 2";
        Address := CustRec.Address;
        "Address 2":= CustRec."Address 2";
        City := CustRec.City;
        "Country/Region Code" := CustRec."Country/Region Code";
        "Post Code" := CustRec."Post Code";
        "Contact Name" := CustRec.Contact;
        "Phone No." := CustRec."Phone No.";
        "Phone No. 2" := CustRec."Phone No. 2";
        "Mobile Phone No." := CustRec."Mobile Phone No.";
        "Fax No." := CustRec."Fax No.";
        "E-Mail" := CustRec."E-Mail";
        "Territory Code" := CustRec."Territory Code";
        PostCode.GetTerritoryByPostCodeGroup(City,"Post Code","Territory Code");  //db, 11-02-13: C005566
        IF CustRec."Bill-to Customer No." <> '' THEN
          lvBillToCust := CustRec."Bill-to Customer No."
        ELSE
          lvBillToCust := "Customer No.";
        IF "Bill-to Customer No." = '' THEN
          VALIDATE("Bill-to Customer No.",lvBillToCust)
        ELSE BEGIN
          IF (CurrFieldNo = FIELDNO("Customer No.")) AND (lvBillToCust <> "Bill-to Customer No.") THEN
            IF CONFIRM(Text001,FALSE,FIELDCAPTION("Bill-to Customer No.")) THEN BEGIN
              VALIDATE("Bill-to Customer No.",lvBillToCust);
             "Alternative Bill-to Address" := '';
            END;
        END;
      END;
      IF "Service Location No."  <> '' THEN BEGIN
        ServLocRec.GET("Service Location No.");
        ServLocRec.TESTFIELD(Blocked, FALSE);
        Name := COPYSTR(ServLocRec.Description, 1, MAXSTRLEN(Name));
        "Name 2":= COPYSTR(ServLocRec."Description 2", 1, MAXSTRLEN("Name 2"));
        Address := ServLocRec.Address;
        "Address 2" := ServLocRec."Address 2";
        City := ServLocRec.City;
        "Country/Region Code" := ServLocRec."Country/Region Code";
        "Post Code" := ServLocRec."Post Code";
        "Contact Name" := ServLocRec."Contact Name";
        "Phone No." := ServLocRec."Phone No.";
        "Phone No. 2" := ServLocRec."Phone No. 2";
        "Mobile Phone No." := ServLocRec."Mobile Phone No.";
        "Fax No." := ServLocRec."Fax No.";
        "E-Mail" := ServLocRec."E-Mail";
        "Territory Code" := ServLocRec."Territory Code";
        PostCode.GetTerritoryByPostCodeGroup(City,"Post Code","Territory Code");  //db, 11-02-13: C005566
        IF ServSetup."Order Manager based on" = ServSetup."Order Manager based on"::LocationMgt THEN
          VALIDATE("Order Manager", ServLocRec."Location Manager");  //db, 06-01-09
        IF ServSetup."Assign To" = ServSetup."Assign To"::LocationMgt THEN
          VALIDATE("Assigned to", ServLocRec."Location Manager");
        //DP00195 sn.
        "Plant Location" := '';
        "Plant Type" := '';
        "Plant Number" := '';
        "Cost Component Plant" := '';
        "Alternative Plant Loc Address" := '';
        //en.
      END ELSE BEGIN
        IF "Service Contract No."  <> '' THEN BEGIN
          ServContrRec.GET("Service Contract No.");
          ServContrRec.TESTFIELD(Blocked, FALSE);
          ServContrRec.CALCFIELDS(Name, Address, City, "Post Code");
          IF ServContrRec."Customer No." <> '' THEN BEGIN  //db, 23-11-06 (dummy contract)
            Name := ServContrRec.Name;
            "Name 2" := ServContrRec."Name 2";
            Address := ServContrRec.Address;
            "Address 2" := ServContrRec."Address 2";
            City := ServContrRec.City;
            "Country/Region Code" := ServContrRec."Country/Region Code";
            VALIDATE("Post Code", ServContrRec."Post Code");
            "Contact Name" := ServContrRec."Contact Name";
            "Phone No." := ServContrRec."Phone No.";
            "Phone No. 2" := ServContrRec."Phone No. 2";
            "Mobile Phone No." := ServContrRec."Mobile Phone No.";
            "Fax No." := ServContrRec."Fax No.";
            "E-Mail" := ServContrRec."E-Mail";
            //"Territory Code" := ServContrRec."Territory Code";
          END;
          IF ServSetup."Order Manager based on" = ServSetup."Order Manager based on"::ContractMgt THEN
            VALIDATE("Order Manager", ServContrRec."Contract Manager");  //db, 06-01-09
          IF ServSetup."Assign To" = ServSetup."Assign To"::ContractMgt THEN
            VALIDATE("Assigned to", ServContrRec."Contract Manager");
        END;
      END;
    END;

    PROCEDURE ValidateBillToCustAddressData@1100529901();
    BEGIN
      IF "Bill-to Customer No."  <> '' THEN BEGIN
        CheckInvoiceAddress;
        CustRec.GET("Bill-to Customer No.");
        CustRec.CheckCustomerStatus("Bill-to Customer No.");
      END;
    END;

    PROCEDURE ValidatePlantLocAddressData@1100529908();
    VAR
      lvBillToCust@1100529900 : Code[20];
      PlantLocation@1100529901 : Record 11012554;
      PlantLocationAddress@1100529902 : Record 11012590;
    BEGIN
      IF "Plant Location"  <> '' THEN BEGIN
        PlantLocation.GET("Plant Location");
        PlantLocation.TESTFIELD(Blocked,FALSE);
        Name := COPYSTR(PlantLocation.Description, 1, MAXSTRLEN(Name));
        "Name 2":= COPYSTR(PlantLocation."Description 2", 1, MAXSTRLEN("Name 2"));
        "Service Location No." := '';//DP00195
        "VAT Bus. Posting Group" := PlantLocation."VAT Bus. Posting Group";
        IF "Alternative Plant Loc Address" = '' THEN BEGIN
          Address := PlantLocation.Address;
          "Address 2" := PlantLocation."Address 2";
          City := PlantLocation.City;
          "Country/Region Code" := PlantLocation."Country/Region Code";
          "Post Code" := PlantLocation."Post Code";
          "Contact Name" := PlantLocation.Contact;
          "Phone No." := PlantLocation."Phone No.";
          "Phone No. 2" := PlantLocation."Contact Phone No.";
          "Fax No." := PlantLocation."Fax No.";
          "E-Mail" := PlantLocation."E-Mail";
          "Territory Code" := PlantLocation."Territory Code";
        END ELSE BEGIN
          IF PlantLocationAddress.GET("Plant Location","Alternative Plant Loc Address") THEN BEGIN
            Address := PlantLocationAddress.Address;
            "Address 2" := PlantLocationAddress."Address 2";
            City := PlantLocationAddress.City;
            "Country/Region Code" := '';
            "Post Code" := PlantLocationAddress."Post Code";
            "Contact Name" := PlantLocationAddress.Contact;
            "Phone No." := PlantLocationAddress."Phone No.";
            "Phone No. 2" := '';
            "Fax No." := '';
            "E-Mail" := '';
            "Territory Code" := '';
          END;
        END;
        "Mobile Phone No." := '';
        PostCode.GetTerritoryByPostCodeGroup(City,"Post Code","Territory Code");  //db, 11-02-13: C005566
      END ELSE BEGIN
        IF "Customer No."  <> '' THEN BEGIN
          CustRec.GET("Customer No.");
          CustRec.CheckCustomerStatus("Customer No.");
          Name := CustRec.Name;
          "Name 2":= CustRec."Name 2";
          Address := CustRec.Address;
          "Address 2":= CustRec."Address 2";
          City := CustRec.City;
          "Country/Region Code" := CustRec."Country/Region Code";
          "Post Code" := CustRec."Post Code";
          "Contact Name" := CustRec.Contact;
          "Phone No." := CustRec."Phone No.";
          "Phone No. 2" := CustRec."Phone No. 2";
          "Mobile Phone No." := CustRec."Mobile Phone No.";
          "Fax No." := CustRec."Fax No.";
          "E-Mail" := CustRec."E-Mail";
          "Territory Code" := CustRec."Territory Code";
          PostCode.GetTerritoryByPostCodeGroup(City,"Post Code","Territory Code");  //db, 11-02-13: C005566
          IF CustRec."Bill-to Customer No." <> '' THEN
            lvBillToCust := CustRec."Bill-to Customer No."
          ELSE
            lvBillToCust := "Customer No.";
          IF "Bill-to Customer No." = '' THEN
            VALIDATE("Bill-to Customer No.",lvBillToCust)
          ELSE BEGIN
            IF (CurrFieldNo = FIELDNO("Customer No.")) AND (lvBillToCust <> "Bill-to Customer No.") THEN
              IF CONFIRM(Text001,FALSE,FIELDCAPTION("Bill-to Customer No.")) THEN BEGIN
                VALIDATE("Bill-to Customer No.",lvBillToCust);
               "Alternative Bill-to Address" := '';
              END;
          END;
        END;
        //DP00195 sn.
        "Plant Location" := '';
        "Plant Type" := '';
        "Plant Number" := '';
        "Cost Component Plant" := '';
        "Alternative Plant Loc Address" := '';
        //en.
      END;
    END;

    PROCEDURE ValidateOtherData@1210190004();
    VAR
      Job@1100528600 : Record 11072003;
      SaveBilltoCustomer@1210190002 : Code[20];
    BEGIN
      IF ServLocRec.GET("Service Location No.") THEN
        "Service Location Type" := ServLocRec."Service Location Type";

      IF "Source Type" <> "Source Type"::Direct THEN
       IF NOT "Decentral Created" THEN  //db, 23-06-11: M27832
         EXIT;

      SaveBilltoCustomer := '';
      IF NOT CustRec.GET("Customer No.") THEN CustRec.INIT;
      IF CustRec."Bill-to Customer No." = '' THEN
        CustRec."Bill-to Customer No." := CustRec."No.";  //db, 08-02-12: M32854
      IF NOT ServContrRec.GET("Service Contract No.") THEN ServContrRec.INIT;
      IF ServContrRec."Bill-to Customer No. (CP)" = '' THEN
        ServContrRec."Bill-to Customer No. (CP)" := ServContrRec."Customer No.";  //db, 08-02-12: M32854
      IF (("Service Contract No." = '') AND ("Bill-to Customer No." <> CustRec."Bill-to Customer No.")) OR
         (("Service Contract No." <> '') AND ("Bill-to Customer No." <> ServContrRec."Bill-to Customer No. (CP)")) THEN
        SaveBilltoCustomer := "Bill-to Customer No.";

      IF ServLocRec.GET("Service Location No.") THEN BEGIN
        IF ("Service Contract No." = '') OR (ServContrRec."Customer No." = '') THEN BEGIN
          "Bill-to Customer No." := '';
          VALIDATE("Customer No.", ServLocRec."Customer No.");
        END ELSE
          VALIDATE("Service Contract No.");
      END;

      IF SaveBilltoCustomer = '' THEN
        SaveBilltoCustomer := "Bill-to Customer No.";
      VALIDATE("Bill-to Customer No.", SaveBilltoCustomer);
    END;

    PROCEDURE CheckInvoiceAddress@1210190002();
    VAR
      AdrsRec@1210190000 : Record 222;
    BEGIN
      IF AdrsRec.GET("Bill-to Customer No.", "Alternative Bill-to Address") THEN BEGIN
        "Bill-to Name" := AdrsRec.Name;
        "Bill-to Name 2" := AdrsRec."Name 2";
        "Bill-to Address" := AdrsRec.Address;
        "Bill-to Address 2" := AdrsRec."Address 2";
        "Bill-to Post Code" := AdrsRec."Post Code";
        "Bill-to City" := AdrsRec.City;
      END ELSE BEGIN
        "Alternative Bill-to Address" := '';
        IF NOT CustRec.GET("Bill-to Customer No.") THEN CustRec.INIT;  //db, 23-02-09: M13533
        "Bill-to Name" := CustRec.Name;
        "Bill-to Name 2" := CustRec."Name 2";
        "Bill-to Address" := CustRec.Address;
        "Bill-to Address 2" := CustRec."Address 2";
        "Bill-to Post Code" := CustRec."Post Code";
        "Bill-to City" := CustRec.City;
      END;
    END;

    PROCEDURE CheckParentChildOrder@1210190011();
    VAR
      lvServOrderRec@1210190000 : Record 11012823;
      lvOrder@1210190002 : Code[20];
    BEGIN
      lvOrder := "Previous Service Order No.";
      WHILE lvOrder <> '' DO BEGIN
        IF "No." = lvOrder THEN
          ERROR(Text007);
        IF NOT lvServOrderRec.GET(lvOrder) THEN EXIT;
        lvOrder := lvServOrderRec."Previous Service Order No.";
      END;
    END;

    PROCEDURE CheckStatus@8(ExtraStepsLimitation@11012000 : Integer);
    BEGIN
      IF Status = Status::Cancelled THEN
        ERROR(Text005, TABLECAPTION, "No.", FIELDCAPTION(Status), Status);

      IF Status >= (Status::Finished - ExtraStepsLimitation) THEN
        ERROR(Text005, TABLECAPTION, "No.", FIELDCAPTION(Status), Status);
    END;

    PROCEDURE CheckDimension@1100485008();
    BEGIN
      IF ServLocRec.GET("Service Location No.") THEN BEGIN
        IF ServLocRec."Global Dimension 1 Code" <> '' THEN
          VALIDATE("Global Dimension 1 Code", ServLocRec."Global Dimension 1 Code");
      END;
    END;

    PROCEDURE CheckVATServOrder@1100525007();
    VAR
      VatGroupFoundAt@1100525000 : 'Customer,Contract,Location';
    BEGIN
      IF CustRec.GET("Bill-to Customer No.") THEN BEGIN
        "VAT Prod. Posting Group" := CustRec."VAT Prod. Posting Group";
        //DP00195.sn
        IF "Plant Location" <> '' THEN BEGIN
           IF PlantLocRec.GET("Plant Location") THEN
              "VAT Bus. Posting Group" := PlantLocRec."VAT Bus. Posting Group";
        END ELSE
          "VAT Bus. Posting Group" := CustRec."VAT Bus. Posting Group";  //M25440
        //DP00195.en
      END;
      IF NOT "Charge Vendor (Warranty)" THEN BEGIN
        //C025182.sn
        IF ServContrRec.GET("Service Contract No.") THEN BEGIN
          IF ServContrRec."VAT Prod. Posting Group" <> '' THEN BEGIN  //db, 22-09-11: M28204
            "VAT Prod. Posting Group" := ServContrRec."VAT Prod. Posting Group";
            VatGroupFoundAt := VatGroupFoundAt::Contract;
          END;
        END;
        IF ServLocRec.GET("Service Location No.") THEN BEGIN
          IF ServLocRec."VAT Prod. Posting Group" <> '' THEN BEGIN
            "VAT Prod. Posting Group" := ServLocRec."VAT Prod. Posting Group";  //**4PS-BE
            VatGroupFoundAt := VatGroupFoundAt::Location;
          END;
        END;
        IF ((VatGroupFoundAt = VatGroupFoundAt::Contract) AND ("Bill-to Customer No." <> ServContrRec."Bill-to Customer No. (CP)")) OR
           ((VatGroupFoundAt = VatGroupFoundAt::Location) AND ("Bill-to Customer No." <> ServContrRec."Customer No.")) THEN BEGIN
          IF NOT CustRec.GET("Bill-to Customer No.") THEN CustRec.INIT;
          "VAT Prod. Posting Group" := CustRec."VAT Prod. Posting Group";
          "VAT Bus. Posting Group" := CustRec."VAT Bus. Posting Group";
        END;
        //C025182.en
      END;
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20];SaveDefaultDim@1210190000 : Boolean);
    VAR
      DimMgt@1100525000 : Codeunit 408;
      DimValRec@1100525001 : Record 349;
    BEGIN
      //db, 19-08-09: M15896
      IF ShortcutDimCode = '' THEN EXIT;
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.GetDimValueRec(FieldNumber, ShortcutDimCode, DimValRec, TRUE,'');
      IF NOT DimMgt.CheckDimValue(DimValRec."Dimension Code",ShortcutDimCode) THEN
        ERROR(DimMgt.GetDimErr);
      IF "No." <> '' THEN  //ps, 03-08-11, call 28595
        IF SaveDefaultDim THEN  //db, 14-09-11: M28816
          DimMgt.SaveDefaultDim(DATABASE::"Service Order","No.",FieldNumber,ShortcutDimCode); //mg, 17-05-11: M27041
    END;

    PROCEDURE AssistEdit@2(OldServOrder@11012000 : Record 11012823) : Boolean;
    VAR
      ServiceSourceTypeSetup@1100528600 : Record 11071726;
      ServOrder@1210190000 : Record 11012823;
      lvSeries@1100485000 : Text[30];
    BEGIN
      WITH ServOrder DO BEGIN
        ServOrder := Rec;
        ServiceSourceTypeSetup.GET(OldServOrder."Source Type");
        ServiceSourceTypeSetup.TESTFIELD("No. Series");
        lvSeries := ServiceSourceTypeSetup."No. Series";

        IF NoSeriesMgt.SelectSeries(lvSeries,OldServOrder."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          ServSetup.GET;  //WG 160114
          IF ServSetup."Assign To" = ServSetup."Assign To"::User THEN
            IF UserSetup.GET(USERID) THEN
              VALIDATE("Assigned to", UserSetup."Employee No.");
          Rec := ServOrder;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE LookupServiceLocation@1210190003();
    VAR
      ServiceLocation@1210190000 : Record 11012801;
      ServiceLocation2@1100528302 : Record 11012801;
      ContractObject@1100528600 : Record 11071702;
      BuildingObjectRelation@1100528301 : Record 11071820;
      ServiceContract@1100525000 : Record 11012812;
      ServiceObject@1100528601 : Record 11071691;
    BEGIN
      IF "Service Contract No." <> '' THEN
        ServiceContract.GET("Service Contract No.");
      ContractObject.SETRANGE("Service Contract No.", "Service Contract No.");
      IF ("Service Contract No." <> '') AND
         (ServiceContract."Contract Form" <> ServiceContract."Contract Form"::"Framework Contract") AND
         NOT ContractObject.ISEMPTY
      THEN BEGIN
        IF ContractObject.FINDSET THEN
          REPEAT
            IF ContractObject."Service Location No." <> '' THEN BEGIN
              ServiceLocation."No." := ContractObject."Service Location No.";
              ServiceLocation.MARK(TRUE);
            END ELSE BEGIN
              BuildingObjectRelation.SETCURRENTKEY("Object No.");
              BuildingObjectRelation.SETRANGE("Object No.", ContractObject."Service Object No.");
              BuildingObjectRelation.SETFILTER("Building Code", '<>%1', '');
              IF BuildingObjectRelation.FINDSET THEN BEGIN
                ServiceLocation2.SETCURRENTKEY("Building Code");
                REPEAT
                  ServiceLocation2.SETRANGE("Building Code", BuildingObjectRelation."Building Code");
                  IF ServiceLocation2.FINDSET THEN
                    REPEAT
                      ServiceLocation."No." := ServiceLocation2."No.";
                      ServiceLocation.MARK(TRUE);
                    UNTIL ServiceLocation2.NEXT = 0;
                UNTIL BuildingObjectRelation.NEXT = 0;
              END;
            END;
          UNTIL ContractObject.NEXT = 0;
        ServiceLocation.MARKEDONLY(TRUE);
      END ELSE BEGIN
        IF "Customer No." <> '' THEN
          ServiceLocation.SETFILTER("Customer No.", "Customer No.");
        IF "Service Contract No." <> '' THEN BEGIN
          ServiceLocation2.RESET;
          ServiceLocation2.COPY(ServiceLocation);
          IF ServiceLocation2.FINDSET THEN
            REPEAT
              ServiceLocation2.GetRelatedObjects(ServiceObject);
              IF ServiceObject.ISEMPTY THEN BEGIN
                ServiceLocation."No." := ServiceLocation2."No.";
                ServiceLocation.MARK(TRUE);
              END;
            UNTIL ServiceLocation2.NEXT = 0;
          ServiceLocation.MARKEDONLY(TRUE);
        END;
      END;

      ServiceLocation."No." := "Service Location No.";
      IF PAGE.RUNMODAL(PAGE::"Service Location List", ServiceLocation) = ACTION::LookupOK THEN BEGIN
        xRec := Rec;
        VALIDATE("Customer No.", ServiceLocation."Customer No.");
        AskQuestionAddress := TRUE;
        VALIDATE("Service Location No.", ServiceLocation."No.");
      END;
    END;

    PROCEDURE LookupServiceContract@1210190007();
    VAR
      ServiceObject@1100528600 : Record 11071691;
      ContractObject@1100528601 : Record 11071702;
      ServiceLocation@1100528300 : Record 11012801;
      BuildingObjectRelation@1100528301 : Record 11071820;
      ServContrRec2@1100525000 : Record 11012812;
      RecordsMarked@1100528602 : Boolean;
    BEGIN
      ServContrRec.RESET;
      IF NOT ServContrRec.GET("Service Contract No.") THEN ServContrRec.INIT;
      IF NOT ServContrRec.Blocked THEN
        ServContrRec.SETRANGE(Blocked, FALSE);
      ServContrRec.SETFILTER("Customer No.", "Customer No.");

      IF "Service Location No." <> '' THEN BEGIN
        ContractObject.SETCURRENTKEY("Service Object No.");

        ServiceObject.SETCURRENTKEY("Service Location No.");
        ServiceObject.SETRANGE("Service Location No.", "Service Location No.");
        IF ServiceObject.FINDSET THEN
          REPEAT
            ContractObject.SETRANGE("Service Object No.", ServiceObject."No.");
            IF ContractObject.FINDSET THEN
              REPEAT
                ServContrRec."No." := ContractObject."Service Contract No.";
                ServContrRec.MARK(TRUE);
                RecordsMarked := TRUE;
              UNTIL ContractObject.NEXT = 0;
          UNTIL ServiceObject.NEXT = 0;

        ServiceLocation.GET("Service Location No.");
        IF ServiceLocation."Building Code" <> '' THEN BEGIN
          BuildingObjectRelation.SETRANGE("Building Code", ServiceLocation."Building Code");
          IF BuildingObjectRelation.FINDSET THEN
            REPEAT
              ContractObject.SETRANGE("Service Object No.", BuildingObjectRelation."Object No.");
              IF ContractObject.FINDSET THEN
                REPEAT
                  ServContrRec."No." := ContractObject."Service Contract No.";
                  ServContrRec.MARK(TRUE);
                  RecordsMarked := TRUE;
                UNTIL ContractObject.NEXT = 0;
            UNTIL BuildingObjectRelation.NEXT = 0;
        END;

        ServContrRec2.SETCURRENTKEY("Customer No.");
        ServContrRec2.SETRANGE("Customer No.", "Customer No.");
        ServContrRec2.SETRANGE("Contract Form", ServContrRec2."Contract Form"::"Framework Contract");
        IF ServContrRec2.FINDSET THEN
          REPEAT
            ServContrRec."No." := ServContrRec2."No.";
            ServContrRec.MARK(TRUE);
            RecordsMarked := TRUE;
          UNTIL ServContrRec2.NEXT = 0;

        IF NOT RecordsMarked THEN BEGIN
          ContractObject.RESET;
          ServContrRec2.RESET;
          ServContrRec2.COPY(ServContrRec);
          ServContrRec2.SETRANGE("Contract Form", ServContrRec2."Contract Form"::" ");
          IF ServContrRec2.FINDSET THEN
            REPEAT
              ContractObject.SETRANGE("Service Contract No.", ServContrRec2."No.");
              IF ContractObject.ISEMPTY THEN BEGIN
                ServContrRec."No." := ServContrRec2."No.";
                ServContrRec.MARK(TRUE);
              END;
            UNTIL ServContrRec2.NEXT = 0;
        END;

        ServContrRec.MARKEDONLY(TRUE);
      END;

      IF "Service Contract No." <> '' THEN
        ServContrRec."No." := "Service Contract No.";
      IF PAGE.RUNMODAL(PAGE::"Service Contracts List", ServContrRec) = ACTION::LookupOK THEN BEGIN
        xRec := Rec;
        //db.sn, 17-12-09: M17472
        //AskQuestionAddress := TRUE;
        CurrFieldNo := FIELDNO("Service Contract No.");
        //db.en, 17-12-09: M17472
        VALIDATE("Service Contract No.", ServContrRec."No.");
      END;
    END;

    PROCEDURE ShowContact@1210190005(lvCust@1210190001 : Code[20]);
    VAR
      ContRec@1210190006 : Record 5050;
      ServContRec@1100485000 : Record 11012841;
    BEGIN
      IF "Service Location No." <> '' THEN BEGIN
        ServContRec.SETRANGE("Service Location No.", "Service Location No.");
      END ELSE BEGIN
        IF "Service Contract No." <> '' THEN BEGIN
          ServContRec.SETRANGE("Service Contract No.", "Service Contract No.");
        END ELSE BEGIN
          ServContRec.SETRANGE("Service Location No.", '%1', '');
          ServContRec.SETRANGE("Service Contract No.", '%1', '');
        END;
      END;
      IF ServContRec.FINDFIRST THEN BEGIN
        IF PAGE.RUNMODAL(PAGE::"Service Contacts", ServContRec) = ACTION::LookupOK THEN BEGIN
          CurrFieldNo := FIELDNO("Contact Name");
          VALIDATE("Contact Name", ServContRec."Contact Name");
          CurrFieldNo := FIELDNO("Phone No.");
          VALIDATE("Phone No.", ServContRec."Phone No.");
          CurrFieldNo := FIELDNO("E-Mail");
          VALIDATE("E-Mail", ServContRec."E-Mail");
          CurrFieldNo := FIELDNO("Phone No. 2");
          VALIDATE("Phone No. 2", ServContRec."Phone No. 2");
          CurrFieldNo := FIELDNO("Mobile Phone No.");
          VALIDATE("Mobile Phone No.", ServContRec."Mobile Phone No.");
          CurrFieldNo := FIELDNO("Fax No.");
          VALIDATE("Fax No.", ServContRec."Fax No.");
        END;
      END ELSE BEGIN
        CustRec.ShowContactName(lvCust, ContRec);
        IF ContRec.Name <> '' THEN BEGIN
          CurrFieldNo := FIELDNO("Contact Name");
          VALIDATE("Contact Name", ContRec.Name);
          CurrFieldNo := FIELDNO("Phone No.");
          VALIDATE("Phone No.", ContRec."Phone No. Work");
          CurrFieldNo := FIELDNO("Phone No. 2");
          VALIDATE("Phone No. 2", ContRec."Phone No. Work 2");
          IF "Phone No." = '' THEN BEGIN
            CurrFieldNo := FIELDNO("Phone No.");
            VALIDATE("Phone No.", ContRec."Phone No.");
          END;
          IF "Phone No. 2" = '' THEN BEGIN
            CurrFieldNo := FIELDNO("Phone No. 2");
            VALIDATE("Phone No. 2", ContRec."Phone No. 2");
          END;
          CurrFieldNo := FIELDNO("E-Mail");
          VALIDATE("E-Mail", ContRec."E-Mail");
          CurrFieldNo := FIELDNO("Mobile Phone No.");
          VALIDATE("Mobile Phone No.", ContRec."Mobile Phone No.");
          CurrFieldNo := FIELDNO("Fax No.");
          VALIDATE("Fax No.", ContRec."Fax No.");
        END;
      END;
    END;

    PROCEDURE ShowInvoice@1210190001(CreditMemo@1210190000 : Boolean);
    VAR
      lSalesInvHeader@1210190002 : Record 112;
      lSalesInvLine@1210190001 : Record 113;
      lSalesCrMemoHeader@1210190004 : Record 114;
      lSalesCrMemoLine@1210190003 : Record 115;
    BEGIN
      IF CreditMemo = FALSE THEN BEGIN
        lSalesInvHeader.CLEARMARKS;
        lSalesInvLine.SETCURRENTKEY("Service Contract No.", "Service Order No.");
        lSalesInvLine.SETRANGE("Service Order No.", "No.");
        IF lSalesInvLine.FINDSET THEN BEGIN
          REPEAT
            IF lSalesInvHeader.GET(lSalesInvLine."Document No.") THEN
              lSalesInvHeader.MARK(TRUE);
          UNTIL lSalesInvLine.NEXT = 0;
        END;
        lSalesInvHeader.MARKEDONLY(TRUE);
        PAGE.RUNMODAL(PAGE::"Posted Sales Invoices",lSalesInvHeader);
      END ELSE BEGIN
        lSalesCrMemoHeader.CLEARMARKS;
        lSalesCrMemoLine.SETCURRENTKEY("Service Contract No.", "Service Order No.");
        lSalesCrMemoLine.SETRANGE("Service Order No.", "No.");
        IF lSalesCrMemoLine.FINDSET THEN BEGIN
          REPEAT
            IF lSalesCrMemoHeader.GET(lSalesCrMemoLine."Document No.") THEN
              lSalesCrMemoHeader.MARK(TRUE);
          UNTIL lSalesCrMemoLine.NEXT = 0;
        END;
        lSalesCrMemoHeader.MARKEDONLY(TRUE);
        PAGE.RUNMODAL(PAGE::"Posted Sales Credit Memos",lSalesCrMemoHeader);
      END;
    END;

    PROCEDURE ShowNextOrder@1210190015(lvAction@1210190001 : Integer) : Text[30];
    VAR
      lvCount@1210190002 : Integer;
      lvNextOrder@1100485000 : Code[20];
    BEGIN
      //0=display; 1=lookup

      TempServOrderRec2.DELETEALL;
      IF "No." = '' THEN EXIT('');  //db, 26-07-06 (call 7861)
      CheckNextOrder("No.", lvNextOrder);
      IF lvNextOrder = '' THEN EXIT('');

      IF lvAction = 0 THEN BEGIN
        lvCount := TempServOrderRec2.COUNT;
        IF lvCount = 1 THEN
          EXIT(lvNextOrder)
        ELSE
          EXIT(STRSUBSTNO('[%1]', lvCount));
      END ELSE BEGIN
        TempServOrderRec2.MARKEDONLY(TRUE);
        PAGE.RUNMODAL(PAGE::"Service-Order List", TempServOrderRec2);
      END;
    END;

    PROCEDURE CheckNextOrder@1100485001(lvServOrder@1100485000 : Code[20];VAR lvNextOrder@1100485002 : Code[20]);
    VAR
      lvServOrderRec@1100485001 : Record 11012823;
    BEGIN
      lvServOrderRec.SETCURRENTKEY("Previous Service Order No.");
      lvServOrderRec.SETRANGE("Previous Service Order No.", lvServOrder);
      IF lvServOrderRec.FINDSET THEN BEGIN
        IF lvNextOrder = '' THEN
          lvNextOrder := lvServOrderRec."No.";
        REPEAT
          TempServOrderRec2 := lvServOrderRec;
          TempServOrderRec2.INSERT;
          TempServOrderRec2.MARK := TRUE;
          CheckNextOrder(lvServOrderRec."No.", lvNextOrder);
        UNTIL lvServOrderRec.NEXT = 0;
      END;
    END;

    PROCEDURE ShowPrevOrder@1100485005(lvAction@1210190001 : Integer) : Text[30];
    VAR
      lvCount@1210190002 : Integer;
      lvPrevOrder@1100485000 : Code[20];
    BEGIN
      //0=display; 1=lookup

      TempServOrderRec2.DELETEALL;
      lvPrevOrder := "Previous Service Order No.";
      CheckPrevOrder("Previous Service Order No.");
      IF lvPrevOrder = '' THEN EXIT('');

      IF lvAction = 0 THEN BEGIN
        lvCount := TempServOrderRec2.COUNT;
        IF lvCount = 1 THEN
          EXIT(lvPrevOrder)
        ELSE
          EXIT(STRSUBSTNO('[%1]', lvCount));
      END ELSE BEGIN
        TempServOrderRec2.MARKEDONLY(TRUE);
        PAGE.RUNMODAL(PAGE::"Service-Order List", TempServOrderRec2);
      END;
    END;

    PROCEDURE CheckPrevOrder@1100485006(lvServOrder@1100485000 : Code[20]);
    VAR
      lvServOrderRec@1100485001 : Record 11012823;
    BEGIN
      WHILE lvServOrder <> '' DO BEGIN
        IF NOT lvServOrderRec.GET(lvServOrder) THEN EXIT;
        TempServOrderRec2 := lvServOrderRec;
        TempServOrderRec2.INSERT;
        TempServOrderRec2.MARK := TRUE;
        lvServOrder := lvServOrderRec."Previous Service Order No.";
      END;
    END;

    PROCEDURE DisconnectChain@1100485004();
    VAR
      lvServOrderRec@1100485000 : Record 11012823;
      lvServOrderRec2@1100485001 : Record 11012823;
    BEGIN
      IF "Base Service Order" THEN BEGIN
        lvServOrderRec.SETCURRENTKEY("Base Service Order No.");
        lvServOrderRec.SETRANGE("Base Service Order No.", "No.");
        lvServOrderRec.SETFILTER("No.", '<>%1', "No.");
        IF NOT lvServOrderRec.ISEMPTY THEN
          TESTFIELD("Base Service Order", FALSE);
        lvServOrderRec.RESET;
      END;

      lvServOrderRec.SETCURRENTKEY("Previous Service Order No.");
      lvServOrderRec.SETRANGE("Previous Service Order No.", "No.");
      IF NOT lvServOrderRec.ISEMPTY THEN BEGIN
        IF lvServOrderRec.FINDSET(TRUE, TRUE) THEN BEGIN
          REPEAT
            lvServOrderRec2 := lvServOrderRec;
            lvServOrderRec2."Previous Service Order No." := "Previous Service Order No.";
            lvServOrderRec2.MODIFY;
          UNTIL lvServOrderRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE DetermineInvoiceMethod@1210190006();
    VAR
      ServSetup@1210190000 : Record 11012800;
      ServiceOrder@1100525000 : Record 11012823;
    BEGIN
      IF "Collect Invoices By" <> "Collect Invoices By"::CustOrder THEN  //db, 07-02-12: M31250
        CLEAR("Collect Invoices By");
      IF "Collect Invoices By" = "Collect Invoices By"::ServOrder THEN
        IF ServLocRec.GET("Service Location No.") THEN
          IF ServLocRec."Collect Cost Plus Entry" = TRUE THEN
            "Collect Invoices By" := "Collect Invoices By"::ServLocation;
      IF "Collect Invoices By" = "Collect Invoices By"::ServOrder THEN
        IF ServContrRec.GET("Service Contract No.") THEN
          IF ServContrRec."Collect Cost Plus Entry" = TRUE THEN
            "Collect Invoices By" := "Collect Invoices By"::ServContract;
      IF "Collect Invoices By" = "Collect Invoices By"::ServOrder THEN
        IF CustRec.GET("Bill-to Customer No.") THEN
          IF CustRec."Collect Cost Plus Entry" = TRUE THEN
            "Collect Invoices By" := "Collect Invoices By"::Customer;
      IF "Collect Invoices By" = "Collect Invoices By"::ServOrder THEN BEGIN
        IF ("Base Service Order No." <> '') AND
          (("Base Service Order No." <> "No.") OR ("Base Service Order")) THEN //mg.c, 03-05-11: M25435
          "Collect Invoices By" := "Collect Invoices By"::BaseOrder;
        IF ServiceOrder.GET("Base Service Order No.") THEN
          IF ServiceOrder."Bill-to Customer No." <> "Bill-to Customer No." THEN
            "Collect Invoices By" := "Collect Invoices By"::ServOrder;  //DP01008
      END;
      IF "Collect Invoices By" = "Collect Invoices By"::ServOrder THEN
        //mg.sc, 03-05-11: M25435
        IF ("Call No." <> '') OR ("Glazing Service Call No." <> '') THEN BEGIN //mg.c, 13-12-11: M25435
          ServSetup.GET;
          "Collect Invoices By" := ServSetup."Collect Invoices By for Calls";
        END;
        //mg.ec, 03-05-11: M25435
    END;

    PROCEDURE DetermineLimitBudget@1210190012();
    VAR
      lvServLocLimit@1100485000 : Decimal;
    BEGIN
      ServSetup.GET;
      IF NOT ServContrRec.GET("Service Contract No.") THEN ServContrRec.INIT;
      IF NOT ServLocRec.GET("Service Location No.") THEN ServLocRec.INIT;

      "Limit Budget Hours" := ServContrRec."Limit Budget Hours";
      "Limit Budget Labor" := ServContrRec."Limit Budget Labor";
      "Limit Budget Material" := ServContrRec."Limit Budget Material";
      "Limit Budget Total" := ServContrRec."Limit Budget Total";

      IF ServLocRec."Travel Time" <> 0 THEN BEGIN
        ServSetup.TESTFIELD("Cost Object Travel Time");
        DimMgt.GetDimValueRec(2, ServSetup."Cost Object Travel Time", DimValRec, TRUE,'');
        BudgetRateRec.SETRANGE(Code,DimValRec."Rate Code");
        BudgetRateRec.SETRANGE("Starting Date",0D,TODAY);
        BudgetRateRec.SETFILTER("Ending Date",'%1|>=%2',0D, TODAY);
        IF BudgetRateRec.FINDLAST THEN
          DimValRec."Sales Price" := BudgetRateRec.Rate;
        lvServLocLimit := ServLocRec."Travel Time" * DimValRec."Sales Price";
        "Limit Budget Labor" := "Limit Budget Labor" - lvServLocLimit;
        "Limit Budget Hours" := "Limit Budget Hours" - ServLocRec."Travel Time";
        IF (ServContrRec."Limit Budget Labor" + ServContrRec."Limit Budget Material" <> ServContrRec."Limit Budget Total") THEN
          "Limit Budget Total" := "Limit Budget Total" - lvServLocLimit;
      END;

      IF "Limit Budget Labor" < 0 THEN "Limit Budget Labor" := 0;
      IF "Limit Budget Hours" < 0 THEN "Limit Budget Hours" := 0;
      IF "Limit Budget Material" < 0 THEN "Limit Budget Material" := 0;

      IF (ServContrRec."Limit Budget Labor" + ServContrRec."Limit Budget Material" = ServContrRec."Limit Budget Total") THEN
        "Limit Budget Total" := "Limit Budget Labor" + "Limit Budget Material";
    END;

    PROCEDURE DetermineLimitBudgetExceeded@1100528656() : Boolean;
    VAR
      LimitBudgetManagement@1100528600 : Codeunit 11012878;
    BEGIN
      EXIT(LimitBudgetManagement.UpdateServiceOrderLimitBudgetExceeded(Rec));
    END;

    PROCEDURE DetermineInvoiceBaseAmount@1210190013();
    BEGIN
      IF NOT ServContrRec.GET("Service Contract No.") THEN ServContrRec.INIT;

      "Invoice Base Method" := ServContrRec."Invoice Base Method";

      "Invoice Base Hours" := ServContrRec."Invoice Base Hours";
      "Invoice Base Amount Labor" := ServContrRec."Invoice Base Amount Labor";
      "Invoice Base Amount Material" := ServContrRec."Invoice Base Amount Material";
      "Invoice Base Amount Total" := ServContrRec."Invoice Base Amount Total";
    END;

    PROCEDURE DetermineAdditionalCost@1100485025() : Boolean;
    VAR
      NoSeries@1100528600 : Record 308;
    BEGIN
      IF ("Plant Location" <> '') AND ("Service Contract No." = '') THEN BEGIN
        IF NOT NoSeries.GET("No. Series") THEN
          NoSeries.INIT;
        EXIT(NoSeries."Additional Cost (Service)");
      END ELSE
        EXIT(("Source Type" = "Source Type"::Direct) AND ("Service Contract No." <> ''));
    END;

    PROCEDURE DetermineCurrencyCode@1100528800() : Code[10];
    VAR
      Customer@1100485000 : Record 18;
      MaintenanceInvoiceMgt@1100528800 : Codeunit 11012828;
      ContractCurr@1100528801 : Code[10];
    BEGIN
      ContractCurr := MaintenanceInvoiceMgt.GetContractCurrency("Service Contract No.");
      IF ContractCurr <> '' THEN BEGIN
        EXIT(ContractCurr)
      END ELSE BEGIN
        IF Customer.GET("Bill-to Customer No.") THEN //mg.c, 15-02-13: C005445
          EXIT(Customer."Currency Code");
      END;
    END;

    PROCEDURE GetHistoryServiceOrder@1100485002(lvSpec@1100485001 : Boolean);
    VAR
      lvServOrderRec@1100485000 : Record 11012823;
    BEGIN
      lvServOrderRec."No." := "No.";

      lvServOrderRec.RESET;
      IF "Service Location No." <> '' THEN
        lvServOrderRec.SETRANGE("Service Location No.", "Service Location No.");
      IF "Service Contract No." <> '' THEN
        lvServOrderRec.SETRANGE("Service Contract No.", "Service Contract No.");
      IF "Customer No." <> '' THEN
        lvServOrderRec.SETRANGE("Customer No.", "Customer No.");
      PAGE.RUNMODAL(PAGE::"Service-Order List", lvServOrderRec);
    END;

    PROCEDURE CheckUpdateDocRefPoint@1100485014(IUpdateMode@1100485000 : Code[1]);
    VAR
      lvDocRefPointRec@1100485001 : Record 11020296;
      ReferencePoint@1100528000 : Record 11020271;
      lvServOrderxRec@1100485002 : Record 11012823;
    BEGIN
      IF gSkipUpdateDocRefPoint THEN
        EXIT;

      IF SaveField = FIELDNO(Status) THEN  //db, 19-05-11: M27257
        COMMIT; //there is also a commit in lvDocRefPointRec in case of sending mails

      CASE IUpdateMode OF
        'I':
          BEGIN
            IF (NOT gUseFilledOrderDateTime) THEN
              lvDocRefPointRec.InsertDocRefPoint(lvDocRefPointRec.Type::ServOrder,"No.",Status,TODAY,TIME)
            ELSE
              lvDocRefPointRec.InsertDocRefPoint(lvDocRefPointRec.Type::ServOrder,"No.",Status,"Order Date","Order Time");
          END;
        'M':
          BEGIN
            IF gSkipStatusCheck = FALSE THEN BEGIN  //db, 21-03-11
              IF NOT lvServOrderxRec.GET("No.") THEN  //* Get old (so call always before saving change!)
                EXIT;
              IF lvServOrderxRec.Status = Status THEN
                EXIT;
            END;

            ReferencePoint.SETRANGE("Triggered by Status ServOrder", Status +1);
            ReferencePoint.SETRANGE(Apply, ReferencePoint.Apply::ServOrder);
            IF NOT ReferencePoint.FINDLAST THEN
              EXIT;
            IF ReferencePoint."No." = "Actual Reference Point (Gantt)" THEN
              EXIT;

            lvDocRefPointRec.InsertDocRefPoint(lvDocRefPointRec.Type::ServOrder,"No.",Status,TODAY,TIME);
            IF SaveField = FIELDNO(Status) THEN  //db, 19-05-11: M27257
              Rec.FIND('=');  //jd, 06-04-11: in lvDocRefPointRec in case of sending worksheet by mail Rec is updated
          END;
      END;

      //Actual Reference Point (Gantt) is changed in lvDocRefPointRec.InsertDocRefPoint. Get Result here
      IF lvDocRefPointRec.GetNewActRefPoint >= 0 THEN
        "Actual Reference Point (Gantt)" := lvDocRefPointRec.GetNewActRefPoint;
    END;

    PROCEDURE SetSkipUpdateDocRefPoint@1100485015(ISkip@1100485000 : Boolean);
    BEGIN
      gSkipUpdateDocRefPoint := ISkip;
    END;

    PROCEDURE SetSkipStatusCheck@1100526200(ISkip@1100485000 : Boolean);
    BEGIN
      //db, 21-03-11
      gSkipStatusCheck := ISkip;
    END;

    PROCEDURE SetUseFilledOrderDateTime@1100485021(IUseOrderDateTime@1100485000 : Boolean);
    BEGIN
      gUseFilledOrderDateTime := IUseOrderDateTime;
    END;

    PROCEDURE UpdateNextDeadline@1100485007();
    VAR
      DateTimeMgt@1100485000 : Codeunit 11020218;
      RefLimit@1100485001 : Text[50];
      CurrDeadline@1100485002 : DateTime;
    BEGIN
      //db, 24-08-12: W014185
      "Next Reference Period" := '';
      "Next Deadline" := 0DT;

      RefPeriodRec.RESET;
      RefPeriodRec.SETCURRENTKEY(Type, "Document No.");
      RefPeriodRec.SETRANGE(Type, RefPeriodRec.Type::ServOrder);
      RefPeriodRec.SETRANGE("Document No.", "No.");
      IF RefPeriodRec.FINDSET THEN BEGIN
        REPEAT
          IF (RefPeriodRec.Norm <> 0) AND
             (RefPeriodRec."Starting Date" <> 0D) AND
             (RefPeriodRec."Starting Time" <> 0T) AND
             (RefPeriodRec."Ending Date" = 0D) AND
             (RefPeriodRec."Ending Time" = 0T) THEN BEGIN
            RefLimit := RefPeriodRec.CheckRefPeriod(1,RefPeriodRec.Type::ServOrder,"No.",RefPeriodRec.Code,0);
            IF RefLimit <> '' THEN BEGIN
              CurrDeadline := DateTimeMgt.Text2Datetime(RefLimit);
              IF ("Next Deadline" = 0DT) OR (CurrDeadline <= "Next Deadline") THEN BEGIN
                "Next Deadline" := CurrDeadline;
                "Next Reference Period" := RefPeriodRec.Code;
              END;
            END;
          END;
        UNTIL RefPeriodRec.NEXT = 0;
      END;
    END;

    PROCEDURE AssistEditPriority@1100485012();
    VAR
      ServicePriority@1100528800 : Record 11012829;
      ServiceCallInfoMgt@1100528801 : Codeunit 11012855;
    BEGIN
      ServiceCallInfoMgt.GetServicePriorityDS(
        "Service Contract No.",
        "Customer No.",
        Discipline,
        "Trade Speciality",
        Priority,
        ServicePriority);

      IF PAGE.RUNMODAL(0, ServicePriority) = ACTION::LookupOK THEN
        VALIDATE(Priority, ServicePriority.Code);
    END;

    PROCEDURE AssistEditDiscipline@1100485011();
    VAR
      ContrDiscRec@1100485002 : Record 11012881;
      LocDiscRec@1100485000 : Record 11012844;
      DiscRec@1100485001 : Record 11020204;
    BEGIN
      IF "Service Contract No." <> '' THEN BEGIN
        ContrDiscRec.SETRANGE("Service Contract No.", "Service Contract No.");
        ContrDiscRec.SETFILTER(Discipline, '<>%1', '');
        IF ContrDiscRec.FINDSET THEN BEGIN
          REPEAT
            IF DiscRec.GET(ContrDiscRec.Discipline) THEN
              DiscRec.MARK := TRUE;
          UNTIL ContrDiscRec.NEXT = 0;
          DiscRec.MARKEDONLY(TRUE);
        END;
      END;

      IF "Service Location No." <> '' THEN BEGIN
        LocDiscRec.SETRANGE("Service Location No.", "Service Location No.");
        LocDiscRec.SETFILTER(Discipline, '<>%1', '');
        IF LocDiscRec.FINDSET THEN BEGIN
          REPEAT
            IF DiscRec.GET(LocDiscRec.Discipline) THEN
              DiscRec.MARK := TRUE;
          UNTIL LocDiscRec.NEXT = 0;
          DiscRec.MARKEDONLY(TRUE);
        END;
      END;

      IF Discipline <> '' THEN
        DiscRec.GET(Discipline);

      IF PAGE.RUNMODAL(0, DiscRec) = ACTION::LookupOK THEN
        VALIDATE(Discipline, DiscRec.Code);
    END;

    PROCEDURE AssistEditTradeSpeciality@1100485034();
    VAR
      TradeSpecRec@1100485003 : Record 11020285;
      ContrDiscRec@1100485004 : Record 11012881;
      LocDiscRec@1100485005 : Record 11012844;
    BEGIN
      IF "Service Contract No." <> '' THEN BEGIN
        ContrDiscRec.SETRANGE("Service Contract No.", "Service Contract No.");
        IF Discipline <> '' THEN  //db, 27-03-09: M13480
          ContrDiscRec.SETRANGE(Discipline, Discipline);
        ContrDiscRec.SETFILTER("Trade Speciality", '<>%1', '');
        IF ContrDiscRec.FINDSET THEN BEGIN
          REPEAT
            IF TradeSpecRec.GET(ContrDiscRec.Discipline, ContrDiscRec."Trade Speciality") THEN
              TradeSpecRec.MARK := TRUE;
          UNTIL ContrDiscRec.NEXT = 0;
          TradeSpecRec.MARKEDONLY(TRUE);
        END;
      END;

      IF "Service Location No." <> '' THEN BEGIN
        LocDiscRec.SETRANGE("Service Location No.", "Service Location No.");
        IF Discipline <> '' THEN  //db, 27-03-09: M13480
          LocDiscRec.SETRANGE(Discipline, Discipline);
        LocDiscRec.SETFILTER("Trade Speciality", '<>%1', '');
        IF LocDiscRec.FINDSET THEN BEGIN
          REPEAT
            IF TradeSpecRec.GET(LocDiscRec.Discipline, LocDiscRec."Trade Speciality") THEN
              TradeSpecRec.MARK := TRUE;
          UNTIL LocDiscRec.NEXT = 0;
          TradeSpecRec.MARKEDONLY(TRUE);
        END;
      END;

      IF "Trade Speciality" <> '' THEN
        TradeSpecRec.GET(Discipline, "Trade Speciality");

      IF Discipline <> '' THEN
        TradeSpecRec.SETRANGE(Discipline, Discipline);  //db, 27-03-09: M13480

      IF PAGE.RUNMODAL(0, TradeSpecRec) = ACTION::LookupOK THEN
        VALIDATE("Trade Speciality", TradeSpecRec.Code);
    END;

    PROCEDURE AssistEditDimension1@1100485000();
    VAR
      ContrDimRec@1100485002 : Record 11012809;
      DimValRec@1100485001 : Record 349;
    BEGIN
      DimValRec.SETRANGE("Global Dimension No.", 1);

      IF "Service Contract No." <> '' THEN BEGIN
        ContrDimRec.SETRANGE("Service Contract No.", "Service Contract No.");
        ContrDimRec.SETFILTER("Global Dimension 1 Code", '<>%1', '');
        IF ContrDimRec.FINDSET THEN BEGIN
          REPEAT
            DimValRec.SETRANGE(Code, ContrDimRec."Global Dimension 1 Code");
            IF DimValRec.FINDSET THEN
              DimValRec.MARK := TRUE;
          UNTIL ContrDimRec.NEXT = 0;
          DimValRec.SETRANGE(Code);
          DimValRec.MARKEDONLY(TRUE);
        END;
      END;

      IF "Global Dimension 1 Code" <> '' THEN
        DimMgt.GetDimValueRec(1, "Global Dimension 1 Code", DimValRec, TRUE,'');

      IF PAGE.RUNMODAL(0, DimValRec) = ACTION::LookupOK THEN
        VALIDATE("Global Dimension 1 Code", DimValRec.Code);
    END;

    PROCEDURE CheckWIP@1100485009();
    VAR
      ServiceLedgerEntry@1100485000 : Record 11012819;
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY("Service Order No.");   //db, 11-06-10: M19759
      ServiceLedgerEntry.SETRANGE("Service Order No.", "No.");
      ServiceLedgerEntry.SETRANGE("Service Order WIP processed", FALSE);
      IF ServiceLedgerEntry.FINDFIRST THEN
        ServiceLedgerEntry.TESTFIELD("Service Order WIP processed", TRUE);
    END;

    PROCEDURE CheckCommitments@1100525008();
    VAR
      ItemJnlLineRec@1100525003 : Record 83;
      PurchLineRec@1100525002 : Record 39;
      HourLineRec@1100525000 : Record 11012039;
    BEGIN
      //db, 10-12-09: M15683
      ItemJnlLineRec.SETCURRENTKEY("Service Order No.");
      ItemJnlLineRec.SETRANGE("Service Order No.", "No.");
      IF ItemJnlLineRec.FINDFIRST THEN
        ItemJnlLineRec.FIELDERROR("Service Order No.");

      PurchLineRec.SETCURRENTKEY("Document Type","Service Order No.");
      PurchLineRec.SETRANGE("Service Order No.", "No.");
      IF PurchLineRec.FINDFIRST THEN
        PurchLineRec.FIELDERROR("Service Order No.");

      HourLineRec.SETCURRENTKEY("Service Order No.");
      HourLineRec.SETRANGE("Service Order No.", "No.");
      IF HourLineRec.FINDFIRST THEN
        HourLineRec.FIELDERROR("Service Order No.");
    END;

    PROCEDURE CheckBlockedByFSA@1100485016() : Boolean;
    VAR
      lvProjSetupRec@1100485001 : Record 315;
      lvRefPointRec@1100485000 : Record 11020271;
    BEGIN
      lvProjSetupRec.GET;
      IF (NOT lvProjSetupRec."Field Service Active") AND (NOT lvProjSetupRec."4PS-Mobile Active") THEN
        EXIT(FALSE);

      IF NOT "Export to FSA" THEN
        EXIT(FALSE);

      CALCFIELDS("Actual Reference Point");
      IF "Actual Reference Point" <> 0 THEN BEGIN
        IF lvRefPointRec.GET("Actual Reference Point") THEN BEGIN
          IF lvRefPointRec."Block Modify Service Order" THEN
            EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE CheckExportToFSA@1100485010();
    VAR
      lvProjSetupRec@1100485000 : Record 315;
      MandatoryFields@1100485001 : Record 11125651;
      lvRefPointRec@1100485002 : Record 11020271;
      WorkOrder@1100528700 : Record 11229279;
    BEGIN
      IF NOT "Export to FSA" THEN
        EXIT;

      lvProjSetupRec.GET;
      IF (NOT lvProjSetupRec."Field Service Active") AND (NOT lvProjSetupRec."4PS-Mobile Active") THEN BEGIN
        IF "Export to FSA" THEN
          "Export to FSA" := FALSE;  //* No (error) message, just switch off
        EXIT;
      END;

      IF CheckBlockedByFSA() THEN
        ERROR(Text013, "No.");

      CALCFIELDS("Actual Reference Point");
      IF "Actual Reference Point" <> 0 THEN
        IF lvRefPointRec.GET("Actual Reference Point") THEN
          IF lvRefPointRec."Skip Export to FSA" THEN
            ERROR(Text014, "No.");

      IF "Price Book Type" <> "Price Book Type"::None THEN
        TESTFIELD("Unit Price Status", "Unit Price Status"::"Production Recording");

      //CheckEmplNotActiveInFSA();
      //CheckOneTeamLeader();

      WorkOrder.INIT;
      MandatoryFields.CheckMandatoryFieldsServiceOrder(Rec, WorkOrder, COMPANYNAME);
    END;

    PROCEDURE CheckPlanDataFSA@1100485032();
    BEGIN
      CASE CurrFieldNo OF
        FIELDNO("Starting Date"): IF "Starting Date" = xRec."Starting Date" THEN EXIT;
        FIELDNO("Starting Time"): IF "Starting Time" = xRec."Starting Time" THEN EXIT;
        FIELDNO("Ending Date"): IF "Ending Date" = xRec."Ending Date" THEN EXIT;
        FIELDNO("Ending Time"): IF "Ending Time" = xRec."Ending Time" THEN EXIT;
        FIELDNO("Duration Time"): IF "Duration Time" = xRec."Duration Time" THEN EXIT;
        FIELDNO(Subcontractor):
          BEGIN
            IF Subcontractor = xRec.Subcontractor THEN
              EXIT
            ELSE
              IF Status >= Status::"Technical Finished" THEN  //db, 30-09-10
                FIELDERROR(Status);  //db, 22-10-08: M12751
          END;
        FIELDNO("Employee No."):
          BEGIN
            IF "Employee No." = xRec."Employee No." THEN
              EXIT
            ELSE
              IF Status >= Status::"Technical Finished" THEN  //db, 30-09-10
                FIELDERROR(Status);  //db, 22-10-08: M12751
          END;
        FIELDNO("First Possible Starting Date"): IF "First Possible Starting Date" = xRec."First Possible Starting Date" THEN EXIT;
        FIELDNO("Last Possible Ending Date"): IF "Last Possible Ending Date" = xRec."Last Possible Ending Date" THEN EXIT;
        //FIELDNO("Plan during Clock Time"): IF "Plan during Clock Time" = xRec."Plan during Clock Time" THEN EXIT;
      END;

      IF NOT UpdatePlanningAllowed() THEN BEGIN
        CASE CurrFieldNo OF
          FIELDNO("Starting Date"): ERROR(Text009, FIELDCAPTION("Starting Date"), TABLECAPTION);
          FIELDNO("Starting Time"): ERROR(Text009, FIELDCAPTION("Starting Time"), TABLECAPTION);
          FIELDNO("Ending Date"): ERROR(Text009, FIELDCAPTION("Ending Date"), TABLECAPTION);
          FIELDNO("Ending Time"): ERROR(Text009, FIELDCAPTION("Ending Time"), TABLECAPTION);
          FIELDNO("Duration Time"): ERROR(Text009, FIELDCAPTION("Duration Time"), TABLECAPTION);
          FIELDNO(Subcontractor): ERROR(Text009, FIELDCAPTION(Subcontractor), TABLECAPTION);
          FIELDNO("Employee No."): ERROR(Text009, FIELDCAPTION("Employee No."), TABLECAPTION);
          FIELDNO("First Possible Starting Date"): ERROR(Text009, FIELDCAPTION("First Possible Starting Date"), TABLECAPTION);
          FIELDNO("Last Possible Ending Date"): ERROR(Text009, FIELDCAPTION("Last Possible Ending Date"), TABLECAPTION);
          //FIELDNO("Plan during Clock Time"): ERROR(Text009, FIELDCAPTION("Plan during Clock Time"), TABLECAPTION);
        END;
      END;
    END;

    PROCEDURE UpdatePlanningAllowed@1100525028() : Boolean;
    VAR
      lvRefPointRec@1100525000 : Record 11020271;
    BEGIN
      CALCFIELDS("Actual Reference Point");
      IF "Actual Reference Point" <> 0 THEN
        IF lvRefPointRec.GET("Actual Reference Point") THEN
          EXIT(NOT lvRefPointRec."Block Modify Service Order");
      EXIT(TRUE);
    END;

    PROCEDURE UpdateFinishedBudgetLines@1100485020();
    VAR
      ServBudgetRec@1100485000 : Record 11012875;
      GanttChartMgt@1210190000 : Codeunit 11012037;
    BEGIN
      //IF ("Date/Time Export to FSA" = 0DT) THEN EXIT;

      IF (Status = Status::"Technical Finished") OR (Status = Status::"Administrative Finished") THEN BEGIN
        ServBudgetRec.SETRANGE("Budget Type", ServBudgetRec."Budget Type"::Order);
        ServBudgetRec.SETRANGE("Service Order No.", "No.");
        ServBudgetRec.SETRANGE(Finished, FALSE);
        ServBudgetRec.SETRANGE("Follow-up Job", FALSE);
        ServBudgetRec.MODIFYALL(Finished,TRUE);
        GanttChartMgt.BuildServiceHours(Rec,FALSE);  //db, 12-12-11: M31261

        UpdateFinishedObjects;
      END;
    END;

    PROCEDURE LookupPreviousServOrder@1100485013();
    VAR
      ServOrderRec@1100485000 : Record 11012823;
    BEGIN
      IF "Previous Service Order No." <> '' THEN
        ServOrderRec.GET("Previous Service Order No.");
      ServOrderRec.SETFILTER("No.", '<>%1', "No.");
      IF "Customer No." <> '' THEN
        ServOrderRec.SETRANGE("Customer No.", "Customer No.");
      IF "Service Contract No." <> '' THEN
        ServOrderRec.SETRANGE("Service Contract No.", "Service Contract No.");
      IF "Service Location No." <> '' THEN
        ServOrderRec.SETRANGE("Service Location No.", "Service Location No.");
      IF PAGE.RUNMODAL(PAGE::"Service-Order List", ServOrderRec) = ACTION::LookupOK THEN BEGIN
        VALIDATE("Previous Service Order No.", ServOrderRec."No.");
      END;
    END;

    PROCEDURE CheckVATReverse@1100485017(lvFieldValidate@1100485002 : Boolean;lvFieldEntry@1100525000 : Boolean) : Boolean;
    VAR
      VATPostingSetup@1100485000 : Record 325;
      CustRec@1100485001 : Record 18;
    BEGIN
      //db, 06-07-09
      IF NOT CustRec.GET("Bill-to Customer No.") THEN
        CustRec.INIT;
      IF NOT VATPostingSetup.GET(CustRec."VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
        VATPostingSetup.INIT;
      IF VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT" THEN BEGIN
        IF lvFieldEntry = TRUE THEN EXIT(TRUE);
        IF lvFieldValidate = FALSE THEN BEGIN
          IF NOT ServLocRec.GET("Service Location No.") THEN ServLocRec.INIT;
          IF ServLocRec."VAT Prod. Posting Group" <> '' THEN BEGIN
            "% Labor" := ServLocRec."Percentage Labor";
            "% to B Account" := ServLocRec."Percentage to B Account";
          END ELSE BEGIN
            IF NOT ServContrRec.GET("Service Contract No.") THEN ServContrRec.INIT;
            IF ServContrRec."VAT Prod. Posting Group" <> '' THEN BEGIN  //db, 25-02-11: M25849
              "% Labor" := ServContrRec."% Labor";
              "% to B Account" := ServContrRec."% to B Account";
            END;
          END;
        END;
      END ELSE BEGIN
        IF lvFieldEntry = TRUE THEN EXIT(FALSE);
        IF lvFieldValidate = TRUE THEN BEGIN
          TESTFIELD("% Labor", 0);
          TESTFIELD("% to B Account", 0);
        END ELSE BEGIN
          "% Labor" := 0;
          "% to B Account" := 0;
        END;
      END;
    END;

    PROCEDURE DrillDownActualRefPoint@1100485019();
    VAR
      DocumentReferencePointsFRM@1100485000 : Page 11020345;
    BEGIN
      DocumentReferencePointsFRM.SetServiceOrderNo("No.");
      DocumentReferencePointsFRM.EDITABLE(FALSE);
      DocumentReferencePointsFRM.RUNMODAL;
    END;

    PROCEDURE CreateTryOutQuote@1100485023();
    VAR
      TryOutQuoteRec@1100485000 : Record 11012758;
      TryOutSuccRec@1100485001 : Record 11012761;
      ContBusRel@1100485002 : Record 5054;
      lvText000@1100485003 : TextConst 'ENU=%1 %2 created';
      Options@1100485004 : Text[80];
      Selected@1100485005 : Integer;
    BEGIN
      Options := Text015;
      Selected := STRMENU(Options, 2);
      IF Selected = 0 THEN EXIT;

      TryOutQuoteRec.INIT;
      TryOutQuoteRec.INSERT(TRUE);

      ContBusRel.SETCURRENTKEY("Link to Table", "No.");
      ContBusRel.SETRANGE("No.", "Customer No.");
      ContBusRel.SETRANGE("Link to Table", ContBusRel."Link to Table"::Customer);
      IF ContBusRel.FIND('-') THEN
        TryOutQuoteRec.VALIDATE("Contact No.", ContBusRel."Contact No.");

      IF Selected = 2 THEN BEGIN
        TryOutQuoteRec.VALIDATE("Copy Address from", TryOutQuoteRec."Copy Address from"::Company);
        TryOutQuoteRec.Description := Description;
        TryOutQuoteRec."Description 2" := Name;
        TryOutQuoteRec.Address := Address;
        TryOutQuoteRec.City := City;
        TryOutQuoteRec."Post Code" := "Post Code";
        TryOutQuoteRec."Territory Code" := "Territory Code";
      END;

      IF Selected = 1 THEN BEGIN
        //TryOutQuoteRec.VALIDATE("Copy Address from", TryOutQuoteRec."Copy Address from"::Company);
        TryOutQuoteRec.VALIDATE("Copy Address from", TryOutQuoteRec."Copy Address from"::"Bill-to"); //WWB, 14 okt 2008 - Call 11612
        TryOutQuoteRec.Description := Description;
        TryOutQuoteRec."Description 2" := "Bill-to Name";
        TryOutQuoteRec.Address := "Bill-to Address";
        TryOutQuoteRec."Address 2" := "Bill-to Address 2";
        TryOutQuoteRec.City := "Bill-to City";
        TryOutQuoteRec."Post Code" := "Bill-to Post Code";
        TryOutQuoteRec."Territory Code" := "Territory Code";
        //TryOutQuoteRec.County := ?;                                                              These aren't available from record
        //TryOutQuoteRec."Country Code" := ?;
      END;


      TryOutQuoteRec."Your reference" := "Your Reference";
      TryOutQuoteRec."Global Dimension 1 Code" := "Global Dimension 1 Code";
      TryOutQuoteRec.Discipline := Discipline;
      TryOutQuoteRec.MODIFY(TRUE);

      TryOutSuccRec.INIT;
      TryOutSuccRec."Try-out No." := TryOutQuoteRec."Try-out No.";
      TryOutSuccRec."Try-out Quote" := TryOutQuoteRec.Code;
      TryOutSuccRec."Line No." := 10000;
      TryOutSuccRec.INSERT(TRUE);
      TryOutSuccRec."Service Order No." := "No.";
      TryOutSuccRec."Service Contract No." := "Service Contract No.";    //db, 10-10-08: M12693
      TryOutSuccRec."Service Location No." := "Service Location No.";  //db, 10-10-08: M12693
      TryOutSuccRec.MODIFY(TRUE);

      MESSAGE(lvText000, TryOutQuoteRec.TABLECAPTION, TryOutQuoteRec.Code);
    END;

    PROCEDURE CheckContractServBudget@1100485029(lvAction@1100485002 : Integer);
    VAR
      lvServBudgetRec@1100485000 : Record 11012875;
      lvServBudgetRec2@1100485001 : Record 11012875;
    BEGIN
      lvServBudgetRec.SETRANGE("Budget Type", lvServBudgetRec."Budget Type"::Order);
      lvServBudgetRec.SETRANGE("Service Order No.", "No.");
      IF NOT lvServBudgetRec.ISEMPTY THEN BEGIN
        IF lvServBudgetRec.FINDSET(TRUE, TRUE) THEN BEGIN
          REPEAT
            IF lvAction = 0 THEN BEGIN
              lvServBudgetRec."Service Location No." := "Service Location No.";
              lvServBudgetRec.MODIFY;
            END;
            IF lvAction = 1 THEN BEGIN
              IF lvServBudgetRec."Service Contract No." <> "Service Contract No." THEN BEGIN
                IF "Source Type" = "Source Type"::Contract THEN
                  TESTFIELD("Service Contract No.", lvServBudgetRec."Service Contract No.");  //db, 23-03-10: M18554
                lvServBudgetRec2 := lvServBudgetRec;
                lvServBudgetRec2."Service Contract No." := "Service Contract No.";
                lvServBudgetRec2.INSERT;
                lvServBudgetRec.DELETE;
              END;
            END;
          UNTIL lvServBudgetRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CheckServOrderAuthorization@1100485028(FieldCap@1100485000 : Text[100]);
    BEGIN
      IF "No." = '' THEN EXIT;  //db, 11-02-09
      IF CurrFieldNo = 0 THEN EXIT;  //db, 28-02-11: M25697 (skip function if validate called for just created orders)

      ServSetup.GET;
      IF NOT ServSetup."Service Authorization" THEN
        EXIT;

      IF CheckCostsAndRevenuesZero(TRUE) THEN
        EXIT;

      //Check now if user is authorized for changes
      IF UserSetup.GET(USERID) THEN
        IF UserSetup."Service Authorization Active" THEN
          EXIT;

      ERROR(Text016, FieldCap, USERID);
    END;

    PROCEDURE CheckCostsAndRevenuesZero@1100485031(CheckOpen@1100485002 : Boolean) : Boolean;
    VAR
      CostControlMgt@1100485001 : Codeunit 11012006;
      TotCost@1100485000 : Decimal;
    BEGIN
      //db.sn, 01-02-11: M22902
      CALCFIELDS(Revenues, "Invoice in Process", "Credit Memo in Process");
      IF (Revenues <> 0) OR ("Invoice in Process" <> 0) OR ("Credit Memo in Process" <> 0) THEN
        EXIT(FALSE);
      //db.en, 01-02-11: M22902

      IF (CurrFieldNo = FIELDNO("Service Contract No.")) AND ("Decentral Created" = TRUE) THEN  //db, 15-08-13: C008074
        CheckOpen := FALSE;  //check ActualCost only; ExpectedCost (OpenPurch/Hours/Inventory) will be updated

      IF CheckOpen THEN BEGIN
        TotCost := CostControlMgt.TotCostServOrder(Rec, TRUE)
      END ELSE BEGIN
        CALCFIELDS("Actual Costs");
        TotCost := "Actual Costs";
      END;

      EXIT(TotCost = 0);
    END;

    PROCEDURE AssistEditSubcontractor@1100525006(lvAction@1100485007 : Integer) : Text[30];
    VAR
      lvVendorRec@1100485000 : Record 23;
      lvNumRec@1100485008 : Integer;
    BEGIN
      IF "Service Contract No." = '' THEN BEGIN  //db, 01-11-07 (regarding to performance)
        IF lvAction = 0 THEN EXIT('');  //display (form)
        IF lvAction = 2 THEN EXIT('');  //validate (discipline)
      END;

      IF Subcontractor <> '' THEN
        lvVendorRec.GET(Subcontractor);

      lvVendorRec.MARKEDONLY(TRUE);
      IF lvAction = 0 THEN BEGIN  //0=display; 1=assist-edit; 2=validate discipline; 3=lookup
        lvNumRec := lvVendorRec.COUNT;
        IF lvNumRec = 0 THEN
          EXIT('')
        ELSE
          EXIT('[' + FORMAT(lvNumRec) + ']');
      END;
      IF lvAction = 1 THEN BEGIN
        lvVendorRec.SETRANGE(Subcontractor, TRUE);
        IF PAGE.RUNMODAL(0, lvVendorRec) = ACTION::LookupOK THEN
          VALIDATE(Subcontractor, lvVendorRec."No.");
      END;
      IF lvAction = 2 THEN BEGIN
        lvNumRec := lvVendorRec.COUNT;
        IF lvNumRec <> 1 THEN
          EXIT('')
        ELSE
          EXIT(lvVendorRec."No.");
      END;
    END;

    PROCEDURE CheckCreditLimit@1100525001();
    VAR
      SalesSetup@1100525000 : Record 311;
    BEGIN
      //db, 31-10-08: M13190
      SalesSetup.GET;
      IF SalesSetup."Credit Warnings" = SalesSetup."Credit Warnings"::"No Warning" THEN
        EXIT;
    END;

    PROCEDURE ActivateCreditLimit@1100525033(lvAction@1100525001 : Integer) ShowWarning : Boolean;
    VAR
      CreditLimitFrm@1100525000 : Page 343;
    BEGIN
      //db, 16-12-10: M23068
      ShowWarning := CreditLimitFrm.ServiceOrderShowWarning("Bill-to Customer No.");
      IF lvAction = 1 THEN
        CreditLimitFrm.RUNMODAL;
      EXIT(ShowWarning);
    END;

    PROCEDURE UpdateServiceCall@1100525000();
    VAR
      ServiceSetup@1100528600 : Record 11012800;
      lvServCallRec@1100525000 : Record 11012822;
      lvServOrderRec@1100525001 : Record 11012823;
      OldServCallRec@1100525002 : Record 11012822;
      GlazingServiceCall@1100525003 : Record 11125777;
    BEGIN
      IF lvServCallRec.GET("Call No.") THEN BEGIN
        OldServCallRec := lvServCallRec;  //db, 22-03-10: M15436
        IF ServiceSetup.GET AND ServiceSetup."Auto Update Call from Order" THEN BEGIN
          IF (lvServCallRec."Customer No." <> "Customer No.") OR
             (lvServCallRec."Service Location No." <> "Service Location No.") OR
             (lvServCallRec."Service Contract No." <> "Service Contract No.") OR
             (lvServCallRec.Problem <> Problem) OR
             (lvServCallRec.Cause <> Cause) OR
             (lvServCallRec.Solution <> Solution)
          THEN BEGIN
            lvServCallRec."Customer No." := "Customer No.";
            lvServCallRec."Service Location No." := "Service Location No.";
            lvServCallRec."Service Contract No." := "Service Contract No.";
            lvServCallRec.Problem := Problem;
            lvServCallRec.Cause := Cause;
            lvServCallRec.Solution := Solution;
          END;
        END;

        lvServOrderRec.SETCURRENTKEY("Call No.");
        lvServOrderRec.SETRANGE("Call No.", "Call No.");
        lvServOrderRec.SETFILTER("No.", '<>%1', "No.");
        lvServOrderRec.SETFILTER(Status, '<%1', Status::"Technical Finished");
        IF (lvServOrderRec.ISEMPTY) AND (Status >= Status::"Technical Finished") THEN
          lvServCallRec.Status := lvServCallRec.Status::Finished
        ELSE
          lvServCallRec.Status := lvServCallRec.Status::"In Process";
        IF Status = Status::Cancelled THEN BEGIN
          lvServOrderRec.SETFILTER(Status, '<>%1', Status);
          IF (lvServOrderRec.ISEMPTY) THEN
            lvServCallRec.Status := lvServCallRec.Status::Cancelled;
        END;

        IF OldServCallRec.Status <> lvServCallRec.Status THEN BEGIN  //db, 22-03-10: M15436
          ServLogRec.StoreChange(2, lvServCallRec."No.", ServLogRec.FormatDescription(lvServCallRec.FIELDCAPTION(Status),
            FORMAT(OldServCallRec.Status), FORMAT(lvServCallRec.Status)));
          ProgPhaseRec.CheckProgressScheme(ProgPhaseRec.Type::ServCall,
            lvServCallRec."Progress Scheme", lvServCallRec."No.", lvServCallRec.Status, TODAY, TIME);
          lvServCallRec.CheckUpdateDocRefPoint('M');
          lvServCallRec.UpdateNextDeadline;  //db, 24-02-11
        END;
        lvServCallRec.MODIFY;
      END;

      //C028610.sn
      IF "Glazing Service Call No." <> '' THEN BEGIN
        IF GlazingServiceCall.GET("Glazing Service Call No.") THEN BEGIN
          lvServOrderRec.RESET;
          lvServOrderRec.SETCURRENTKEY("Glazing Service Call No.");
          lvServOrderRec.SETRANGE("Glazing Service Call No.", "Glazing Service Call No.");
          lvServOrderRec.SETFILTER("No.", '<>%1', "No.");
          lvServOrderRec.SETFILTER(Status, '<%1', Status::"Technical Finished");
          IF (lvServOrderRec.ISEMPTY) AND (Status >= Status::"Technical Finished") THEN
            GlazingServiceCall.Status := GlazingServiceCall.Status::Finished
          ELSE
            GlazingServiceCall.Status := GlazingServiceCall.Status::"In Progress";
          IF Status = Status::Cancelled THEN BEGIN
            lvServOrderRec.SETFILTER(Status, '<>%1', Status);
            IF (lvServOrderRec.ISEMPTY) THEN
              GlazingServiceCall.Status := GlazingServiceCall.Status::Cancelled;
          END;
          GlazingServiceCall.MODIFY;
        END;
      END;
      //C028610.en
    END;

    PROCEDURE CheckDateOutOfUse@1100525002() StartDate : Date;
    BEGIN
      IF "Starting Date" <> 0D THEN
        StartDate := "Starting Date"
      ELSE
        StartDate := "Order Date";

      IF StartDate = 0D THEN
        StartDate := TODAY;  //db, 16-11-09: M16603

      EXIT(StartDate);
    END;

    PROCEDURE UpdatePrefLocations@1100525003();
    VAR
      PreferenceLocation@1100525001 : Record 11020353;
      ServiceLocationPrefLoc@1100525000 : Record 11020391;
      Text001@1100525002 : TextConst 'ENU=Do you want to replace existing preferred locations?';
    BEGIN
      //db, 23-02-15: C013902
      ServiceLocationPrefLoc.SETRANGE("Service Location No.","Service Location No.");
      IF ServiceLocationPrefLoc.ISEMPTY THEN BEGIN
        UpdatePrefLocationsFromDim1;
        EXIT;
      END;

      PreferenceLocation.SETRANGE(Type,PreferenceLocation.Type::"Service Order");
      PreferenceLocation.SETRANGE("No.","No.");
      IF NOT PreferenceLocation.ISEMPTY THEN
        IF NOT CONFIRM(Text11012040) THEN
          EXIT;
      PreferenceLocation.DELETEALL;
      IF ServiceLocationPrefLoc.FINDSET THEN BEGIN
        REPEAT
          PreferenceLocation.Type := PreferenceLocation.Type::"Service Order";
          PreferenceLocation."No." := "No.";
          PreferenceLocation."Location Code" := ServiceLocationPrefLoc."Location Code";
          PreferenceLocation.Priority := ServiceLocationPrefLoc.Priority;
          PreferenceLocation.INSERT;
        UNTIL ServiceLocationPrefLoc.NEXT = 0;
      END;
    END;

    PROCEDURE UpdatePrefLocationsFromDim1@1100525042();
    VAR
      GeneralLedgerSetup@1100525002 : Record 98;
      PreferenceLocation@1100525001 : Record 11020353;
      DimensionValueLocation@1100525000 : Record 11020352;
    BEGIN
      //db, 23-02-15: C013902
      GeneralLedgerSetup.GET;
      DimensionValueLocation.SETRANGE("Dimension Code",GeneralLedgerSetup."Global Dimension 1 Code");
      DimensionValueLocation.SETRANGE("Dimension Value Code","Global Dimension 1 Code");
      IF DimensionValueLocation.ISEMPTY THEN
        EXIT;

      PreferenceLocation.SETRANGE(Type,PreferenceLocation.Type::"Service Order");
      PreferenceLocation.SETRANGE("No.","No.");
      IF NOT PreferenceLocation.ISEMPTY THEN
        IF "Global Dimension 1 Code" = xRec."Global Dimension 1 Code" THEN
          EXIT
        ELSE
          IF NOT CONFIRM(Text11012040) THEN
            EXIT;
      PreferenceLocation.DELETEALL;
      IF DimensionValueLocation.FINDSET THEN BEGIN
        REPEAT
          PreferenceLocation.Type := PreferenceLocation.Type::"Service Order";
          PreferenceLocation."No." := "No.";
          PreferenceLocation."Location Code" := DimensionValueLocation."Location Code";
          PreferenceLocation.Priority := DimensionValueLocation.Priority;
          PreferenceLocation.INSERT;
        UNTIL DimensionValueLocation.NEXT = 0;
      END;
    END;

    PROCEDURE CheckModifyCallNoAllowed@1100525004() : Boolean;
    VAR
      lvProjSetupRec@1100525000 : Record 315;
    BEGIN
      IF "Source Type" <> "Source Type"::Call THEN
        EXIT(FALSE);

      IF "Decentral Created" THEN BEGIN
        lvProjSetupRec.GET;
        IF (lvProjSetupRec."Field Service Active") OR (lvProjSetupRec."4PS-Mobile Active") THEN
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE UpdateExportFSAInWorkOrder@1100525005();
    VAR
      ProjSetup@1100525001 : Record 315;
      WorkOrder@1100525000 : Record 11229279;
    BEGIN
      //DP00465.n
      ProjSetup.GET;
      IF ProjSetup."4PS-Mobile Active" THEN BEGIN
        WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
        WorkOrder.SETRANGE("Source Company", COMPANYNAME);
        WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
        WorkOrder.SETRANGE("Source No.", "No.");
        WorkOrder.SETRANGE("Resource Type", WorkOrder."Resource Type"::Employee);
        IF NOT "Export to FSA" THEN
          WorkOrder.SETRANGE("Export to FSA", TRUE)
        ELSE BEGIN
          WorkOrder.FINDFIRST; // Need at least 1 work order
          WorkOrder.SETRANGE("Export to FSA", FALSE);
        END;
        IF NOT WorkOrder.ISEMPTY THEN BEGIN
          IF WorkOrder.FINDSET(TRUE,FALSE) THEN BEGIN
            REPEAT
              WorkOrder.VALIDATE("Export to FSA", "Export to FSA");
              WorkOrder.MODIFY(TRUE);
            UNTIL WorkOrder.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE CopyExtraCost@1100525127();
    VAR
      ServiceExtraCostFrom@1100525001 : Record 11020344;
      ServiceExtraCostTo@1100525000 : Record 11020344;
      ServiceSetup@1100525002 : Record 11012800;
      CostObjectFilter@1100525003 : Text[250];
      LineNo@1100525004 : Integer;
    BEGIN
      IF ("Service Contract No." = '') AND ("Customer No." = '') THEN
        EXIT;

      ServiceSetup.GET;
      IF ServiceSetup."Cost Object Travel Time" <> '' THEN
        CostObjectFilter := STRSUBSTNO('<>%1', ServiceSetup."Cost Object Travel Time");
      IF ServiceSetup."Cost Object Travel Distance" <> '' THEN BEGIN
        IF CostObjectFilter <> '' THEN
          CostObjectFilter := CostObjectFilter + '&';
        CostObjectFilter := STRSUBSTNO('%1<>%2', CostObjectFilter, ServiceSetup."Cost Object Travel Distance");
      END;
      IF ServiceSetup."Cost Object Travel Cost" <> '' THEN BEGIN
        IF CostObjectFilter <> '' THEN
          CostObjectFilter := CostObjectFilter + '&';
        CostObjectFilter := STRSUBSTNO('%1<>%2', CostObjectFilter, ServiceSetup."Cost Object Travel Cost");
      END;

      ServiceExtraCostTo.SETRANGE("Entity Type", ServiceExtraCostFrom."Entity Type"::"Service Order");
      ServiceExtraCostTo.SETRANGE("Entity Code", "No.");
      IF CostObjectFilter <> '' THEN
        ServiceExtraCostTo.SETFILTER("Cost Object", CostObjectFilter);
      ServiceExtraCostTo.DELETEALL(TRUE);
      ServiceExtraCostTo.SETRANGE("Cost Object");
      IF ServiceExtraCostTo.FINDLAST THEN
        LineNo := ServiceExtraCostTo."Line No.";
      LineNo += 10000;

      IF "Service Contract No." <> '' THEN BEGIN
        ServiceExtraCostFrom.SETRANGE("Entity Type", ServiceExtraCostFrom."Entity Type"::"Service Contract");
        ServiceExtraCostFrom.SETRANGE("Entity Code", "Service Contract No.");
      END ELSE BEGIN
        ServiceExtraCostFrom.SETRANGE("Entity Type", ServiceExtraCostFrom."Entity Type"::Customer);
        ServiceExtraCostFrom.SETRANGE("Entity Code", "Customer No.");
      END;

      ServiceExtraCostFrom.SETFILTER("Apply at Source Type", '%1|%2',
        ServiceExtraCostFrom."Apply at Source Type"::"All Source Types", "Source Type");
      ServiceExtraCostFrom.SETFILTER(Priority, '%1|%2', '', Priority);
      IF ServiceExtraCostFrom.FINDSET THEN
        REPEAT
          ServiceExtraCostTo := ServiceExtraCostFrom;
          ServiceExtraCostTo."Entity Type" := ServiceExtraCostTo."Entity Type"::"Service Order";
          ServiceExtraCostTo."Entity Code" := "No.";
          ServiceExtraCostTo."Line No." := LineNo;
          ServiceExtraCostTo.INSERT(TRUE);
          LineNo += 10000;
        UNTIL ServiceExtraCostFrom.NEXT = 0;
    END;

    PROCEDURE ShowMyOrders@1100525009();
    VAR
      ServiceOrder@1100525001 : Record 11012823;
      UserSetup@1100525000 : Record 91;
    BEGIN
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Employee No.");

      ServiceOrder := Rec;

      ServiceOrder.RESET;
      ServiceOrder.SETRANGE("Assigned to", UserSetup."Employee No.");
      ServiceOrder.SETFILTER(Status,'<%1', Status::Finished);
      PAGE.RUN(PAGE::"Service-Order List", ServiceOrder);
    END;

    PROCEDURE LookupServicePackage@1100525011();
    VAR
      ServPackFrm@1100525000 : Page 11012857;
      ServPackRec@1100525001 : Record 11012806;
    BEGIN
      //db, 17-03-10: T4627
      ServPackRec.SETFILTER("Source Type", '%1|%2', "Source Type", ServPackRec."Source Type"::None);
      ServPackFrm.SETTABLEVIEW(ServPackRec);
      IF ServPackRec.GET("Service Package") THEN
        ServPackFrm.SETRECORD(ServPackRec);
      ServPackFrm.SetSelection("Service Contract No.");
      ServPackFrm.LOOKUPMODE(TRUE);
      IF ServPackFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ServPackFrm.GETRECORD(ServPackRec);
        VALIDATE("Service Package", ServPackRec.Code);
      END;
    END;

    PROCEDURE CheckContrDiscAdditionalCost@1100525012();
    VAR
      ContrDiscRec@1100525000 : Record 11012828;
      OrderIndicationRec@1100525001 : Record 11012837;
      CostComp@1100525002 : Text[50];
    BEGIN
      //db, 04-02-10
      IF "Service Contract No." = '' THEN EXIT;  //skip check standard discount terms

      ServSetup.GET;
      IF ServSetup."Add.Cost Based On Contr.Disc." = FALSE THEN BEGIN
        "Additional Cost (Labor)" := FALSE;
        "Additional Cost (Material)" := FALSE;
        "Additional Cost (Subc)" := FALSE;
        "Additional Cost (Plant)" := FALSE;
        "Additional Cost (Sundry)" := FALSE;
      END ELSE BEGIN
        "Additional Cost" := FALSE;
        "Additional Cost (Labor)" := TRUE;
        "Additional Cost (Material)" := TRUE;
        "Additional Cost (Subc)" := TRUE;
        "Additional Cost (Plant)" := TRUE;
        "Additional Cost (Sundry)" := TRUE;
      END;
      IF "Source Type" = "Source Type"::Direct THEN
        EXIT;

      IF ServSetup."Contract Discount Level" = ServSetup."Contract Discount Level"::CostComponent THEN BEGIN
        IF OrderIndicationRec.GET(OrderIndicationRec.Indication::Kind, "Order Kind") THEN
          CostComp := OrderIndicationRec."Cost Component";
        IF OrderIndicationRec.GET(OrderIndicationRec.Indication::Type, "Order Type") THEN BEGIN
          IF (CostComp = '') THEN
            CostComp := OrderIndicationRec."Cost Component";
          IF (CostComp <> OrderIndicationRec."Cost Component") AND (OrderIndicationRec."Cost Component" <> '')THEN
            CostComp := CostComp + '|' + OrderIndicationRec."Cost Component";
        END;
      END;

      ContrDiscRec.SETRANGE("Service Contract No.", "Service Contract No.");
      IF ServSetup."Contract Discount Level" = ServSetup."Contract Discount Level"::SourceType THEN BEGIN
        ContrDiscRec.SETRANGE("Discount Level", ContrDiscRec."Discount Level"::SourceType);
        ContrDiscRec.SETRANGE("Source Type", "Source Type");
      END;
      IF ServSetup."Contract Discount Level" = ServSetup."Contract Discount Level"::CostComponent THEN BEGIN
        ContrDiscRec.SETRANGE("Discount Level", ContrDiscRec."Discount Level"::CostComponent);
        IF CostComp <> '' THEN
          ContrDiscRec.SETFILTER("Cost Component", CostComp);
      END;
      IF ContrDiscRec.FINDSET THEN BEGIN
        REPEAT
          CASE ContrDiscRec."Cost Type" OF
             ContrDiscRec."Cost Type"::" ":
               BEGIN
                 "Additional Cost (Labor)" := FALSE;
                 "Additional Cost (Material)" := FALSE;
                 "Additional Cost (Subc)" := FALSE;
                 "Additional Cost (Plant)" := FALSE;
                 "Additional Cost (Sundry)" := FALSE;
               END;
            ContrDiscRec."Cost Type"::Labor: "Additional Cost (Labor)" := FALSE;
            ContrDiscRec."Cost Type"::Material: "Additional Cost (Material)" := FALSE;
            ContrDiscRec."Cost Type"::Subcontracting: "Additional Cost (Subc)" := FALSE;
            ContrDiscRec."Cost Type"::Plant: "Additional Cost (Plant)" := FALSE;
            ContrDiscRec."Cost Type"::Sundry: "Additional Cost (Sundry)" := FALSE;
          END;
        UNTIL ContrDiscRec.NEXT = 0;
      END;
    END;

    PROCEDURE GetAdditionalCostService@1100525013(iServOrder@1100525001 : Code[20];iCostObject@1100525003 : Code[20];iCostType@1100525006 : ' ,Labor,Material,Subcontracting,Plant,Sundry,Revenue';iCompName@1100525005 : Text[50]) AddCost : Boolean;
    VAR
      ServSetup@1100525000 : Record 11012800;
      ServOrderRec@1100525004 : Record 11012823;
    BEGIN
      //db, 04-02-10: used in table 37, 39, 81, 83, 246, 11012032/039/055/825/875
      IF iCompName <> '' THEN BEGIN
        ServSetup.CHANGECOMPANY(iCompName);
        ServOrderRec.CHANGECOMPANY(iCompName);
      END;

      ServSetup.GET;
      ServOrderRec.GET(iServOrder);
      IF ServSetup."Add.Cost Based On Contr.Disc." = FALSE THEN BEGIN
        AddCost := ServOrderRec."Additional Cost";
      END ELSE BEGIN
        CASE iCostType OF
          iCostType::Labor: AddCost := ServOrderRec."Additional Cost (Labor)";
          iCostType::Material: AddCost := ServOrderRec."Additional Cost (Material)";
          iCostType::Subcontracting: AddCost := ServOrderRec."Additional Cost (Subc)";
          iCostType::Plant: AddCost := ServOrderRec."Additional Cost (Plant)";
          iCostType::Sundry: AddCost := ServOrderRec."Additional Cost (Sundry)";
          ELSE
            AddCost :=
              (ServOrderRec."Additional Cost (Labor)" AND
               ServOrderRec."Additional Cost (Material)" AND
               ServOrderRec."Additional Cost (Subc)" AND
               ServOrderRec."Additional Cost (Plant)" AND
               ServOrderRec."Additional Cost (Sundry)");
        END;
      END;

      EXIT(AddCost);
    END;

    PROCEDURE UpdateWarrantyFound@1210190017(WarrantyTxt@1210190001 : Text[50]);
    BEGIN
      //db, 23-05-11
      ServOrderExtension.GetServOrderExtension("No.");  //db, 22-04-13: C007214
      ServOrderExtension."Warranty found at" := WarrantyTxt;
      ServOrderExtension.UpdateServOrderExtension("No.");
    END;

    PROCEDURE CheckWarrantyDiscount@1210190009(lvCode@1210190000 : Code[10];lvStartDate@1210190001 : Date;lvEndDate@1210190002 : Date) : Boolean;
    VAR
      ServWarrantyRec@1100525000 : Record 11012827;
    BEGIN
      //db, 04-02-10
      IF ServWarrantyRec.GET(lvCode) THEN
        IF ("Order Date" >= lvStartDate) AND ("Order Date" <= lvEndDate) THEN
           EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE CheckAdditionalCostSetup@1100525019();
    BEGIN
      //db, 04-03-10
      IF CurrFieldNo = 0 THEN EXIT;

      ServSetup.GET;
      IF NOT ServSetup."Add.Cost Based On Contr.Disc." THEN EXIT;

      CASE CurrFieldNo OF
        FIELDNO("Additional Cost"):
          BEGIN
            "Additional Cost (Labor)" := "Additional Cost";
            "Additional Cost (Material)" := "Additional Cost";
            "Additional Cost (Subc)" := "Additional Cost";
            "Additional Cost (Plant)" := "Additional Cost";
            "Additional Cost (Sundry)" := "Additional Cost";
          END;
        FIELDNO("Additional Cost (Labor)"),
        FIELDNO("Additional Cost (Material)"),
        FIELDNO("Additional Cost (Subc)"),
        FIELDNO("Additional Cost (Plant)"),
        FIELDNO("Additional Cost (Sundry)"):
          BEGIN
            IF ("Additional Cost (Labor)" = TRUE) AND
               ("Additional Cost (Material)" = TRUE) AND
               ("Additional Cost (Subc)" = TRUE) AND
               ("Additional Cost (Plant)" = TRUE) AND
               ("Additional Cost (Sundry)" = TRUE) THEN
              "Additional Cost" := TRUE;
            IF ("Additional Cost (Labor)" = FALSE) AND
               ("Additional Cost (Material)" = FALSE) AND
               ("Additional Cost (Subc)" = FALSE) AND
               ("Additional Cost (Plant)" = FALSE) AND
               ("Additional Cost (Sundry)" = FALSE) THEN
              "Additional Cost" := FALSE;
          END;
      END;
    END;

    PROCEDURE CheckExpectedHours@1100525015(lvType@1100485000 : Integer;lvIndication@1100485001 : Code[10]);
    VAR
      ServIndicationRec@1100485002 : Record 11012837;
    BEGIN
      IF ServIndicationRec.GET(lvType, lvIndication) THEN BEGIN
        IF (ServIndicationRec."Expected Hours" <> 0) AND ("Expected Hours" <> 0) THEN BEGIN
          //db.sn, 02-03-15: C020552
          "Expected Hours" := ServIndicationRec."Expected Hours";
          CheckBudgetHours;
          VALIDATE("Expected Hours");
          //db.en, 02-03-15: C020552
        END;
      END;
    END;

    PROCEDURE RunCreatePlantLocation@1100525018(IServOrderRec@1100485002 : Record 11012823);
    VAR
      PlantMgtCompRec@1100525003 : Record 11020586;
      TmpPlantMgtCompRec@1100525002 : TEMPORARY Record 11020586;
      PlantMgtCompListFrm@1100525006 : Page 11124918;
      NoOfPlantComps@1100525005 : Integer;
      NoCreated@1100525004 : Integer;
      lvPlantLocCode@1100485000 : Code[20];
      lvText11012001@1100525001 : TextConst 'ENU=Create a Plant Location of Service Order ''%1''. Status is ''%2'', are you sure?';
      lvText11012002@1100525000 : TextConst 'ENU=Do you want to create a Plant Location of Service Order ''%1''?';
      lvText11012003@1100485003 : TextConst 'ENU=Plant Location ''%1'' is created in plant company ''%2''.';
      lvText11012004@1100485004 : TextConst 'ENU=Plant Location ''%1'' is created in %2 plant companies.';
    BEGIN
      //**4PS (Copied from the T5200)
      CASE TRUE OF
        IServOrderRec.Status < Status::"In Process":
          IF NOT CONFIRM(lvText11012001, TRUE, IServOrderRec."No.", Status) THEN
            EXIT;
        IServOrderRec.Status = Status::"In Process":
          IF NOT CONFIRM(lvText11012002, TRUE, IServOrderRec."No.") THEN
            EXIT;
        IServOrderRec.Status > Status::"In Process":
          FIELDERROR(Status);
      END;

      NoCreated := 0;
      PlantMgtCompRec."Plant Company" := PlantMgtCompRec.GetPlantCompany(TRUE, NoOfPlantComps, '');
      IF NoOfPlantComps = 1 THEN BEGIN
        lvPlantLocCode := CreatePlantLocation(IServOrderRec, PlantMgtCompRec."Plant Company");
        IF lvPlantLocCode <> '' THEN
          NoCreated := 1;
      END ELSE BEGIN
        PlantMgtCompRec.RESET;
        PlantMgtCompListFrm.SetMultiCreate();
        PlantMgtCompListFrm.SETRECORD(PlantMgtCompRec);
        PlantMgtCompListFrm.LOOKUPMODE(TRUE);
        IF PlantMgtCompListFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          IF NOT PlantMgtCompListFrm.GetMarkedRecords(TmpPlantMgtCompRec) THEN BEGIN
            PlantMgtCompListFrm.GETRECORD(PlantMgtCompRec);
            lvPlantLocCode := CreatePlantLocation(IServOrderRec, PlantMgtCompRec."Plant Company");
            IF lvPlantLocCode <> '' THEN
              NoCreated := 1;
          END ELSE BEGIN
            TmpPlantMgtCompRec.FINDSET;
            REPEAT
              lvPlantLocCode := CreatePlantLocation(IServOrderRec, TmpPlantMgtCompRec."Plant Company");
              IF lvPlantLocCode <> '' THEN BEGIN
                NoCreated := NoCreated + 1;
                PlantMgtCompRec."Plant Company" := TmpPlantMgtCompRec."Plant Company";
              END;
            UNTIL TmpPlantMgtCompRec. NEXT = 0;
          END;
        END;
      END;

      IF NoCreated > 0 THEN BEGIN
        IF NoCreated = 1 THEN
          MESSAGE(lvText11012003, lvPlantLocCode, PlantMgtCompRec."Plant Company")
        ELSE
          MESSAGE(lvText11012004, lvPlantLocCode, NoCreated);
      END;
    END;

    PROCEDURE CreatePlantLocation@1100525016(IServOrderRec@1100485000 : Record 11012823;IPlantCompany@1100485010 : Text[30]) : Code[20];
    VAR
      lvServSetupRec@1100525000 : Record 11012800;
      lvPlantSetupRec@1100485004 : Record 11012550;
      CompanyData@1100485006 : Record 11020674;
      lvCustRec@1100485003 : Record 18;
      lvPlantLocRec@1100485001 : Record 11012554;
      lvPlantLocRec2@1100485002 : Record 11012554;
      lvText11012003@1100485009 : TextConst 'ENU=Plant Location ''%1'' is already present in Company ''%2'', with Service Order ''%3'' and Company Name ''%4''.';
      lvDimValRec@1100525001 : Record 349;
    BEGIN
      //**4PS  (Copied from the function 'CreatePlantLocation' in T11072003/T5200)
      //* From a service order in the 'Service Company' create a plant location in the 'Plant Company' this
      //* can be another company, so do not use 'VALIDATE'/'INSERT/MODIFY(TRUE)' on the Plant Location table!

      WITH IServOrderRec DO BEGIN
        TESTFIELD("No.");
        lvServSetupRec.GET;
        lvServSetupRec.TESTFIELD("Build Plant Location Code from");

        IF NOT CompanyData.GET(COMPANYNAME) THEN  //* Current company, so not the Plant company
          CompanyData."Company Name" := COMPANYNAME;

        IF (CompanyData."Company No." = '') AND
           (lvServSetupRec."Build Plant Location Code from" = lvServSetupRec."Build Plant Location Code from"::CompNoServNo)
        THEN
          CompanyData.TESTFIELD("Company No.");

        lvPlantSetupRec.CHANGECOMPANY(IPlantCompany);
        lvPlantSetupRec.GET;

        lvPlantLocRec2.CHANGECOMPANY(IPlantCompany);

        lvPlantLocRec.CHANGECOMPANY(IPlantCompany);
        lvPlantLocRec.INIT;
        lvPlantLocRec.InitRecord;
        CASE lvServSetupRec."Build Plant Location Code from" OF
          lvServSetupRec."Build Plant Location Code from"::ServNo:
            lvPlantLocRec.Code := "No.";
          lvServSetupRec."Build Plant Location Code from"::CompNoServNo:
            lvPlantLocRec.Code := CompanyData."Company No." + "No.";
          ELSE
            lvPlantLocRec.Code := '';
        END;
        lvPlantLocRec.TESTFIELD(Code);
        IF lvPlantLocRec2.GET(lvPlantLocRec.Code) THEN
          ERROR(lvText11012003, lvPlantLocRec.Code, IPlantCompany, lvPlantLocRec2."Service Order No.", lvPlantLocRec2."Company Name");

        lvPlantLocRec."Creation Date" := TODAY;
        lvPlantLocRec.Depot :=  FALSE;
        lvPlantLocRec."Service Order No." :=  "No.";
        IF IPlantCompany <> COMPANYNAME THEN BEGIN
          lvPlantLocRec."Company Name" := COMPANYNAME;
          //
          //* CustomerNo may only be filled (mandatory with that of the company table) if SO and Plant Location
          //* in different companies. If the companies are the same then Coustomer must be empty.
          CompanyData.TESTFIELD("Customer No.");
          lvCustRec.CHANGECOMPANY(IPlantCompany);
          IF NOT lvCustRec.GET(CompanyData."Customer No.") THEN
            lvCustRec.INIT;
          lvPlantLocRec."Customer No." := CompanyData."Customer No.";
          lvPlantLocRec."VAT Bus. Posting Group" := lvCustRec."VAT Bus. Posting Group";
          IF lvPlantSetupRec."Def. Loc. Bus. P.Grp of Cust." THEN
            lvPlantLocRec."Gen. Bus. Posting Group" := lvCustRec."Gen. Bus. Posting Group";
        END;
        //mg.sn, 09-03-11: M25508
        IF lvPlantLocRec."Customer No." = '' THEN BEGIN
          lvPlantLocRec."Gen. Bus. Posting Group" := lvPlantSetupRec."Default Gen. Bus.Posting Group";
          lvPlantLocRec."VAT Bus. Posting Group" := lvPlantSetupRec."Default VAT Bus.Posting Group";
        END;
        //mg.en, 09-03-11: M25508
        lvPlantLocRec.Description :=  Description;
        lvPlantLocRec."Search Name" := Description;
        lvPlantLocRec.Address := Address;
        lvPlantLocRec."Address 2" := "Address 2";
        lvPlantLocRec.City := City;
        lvPlantLocRec."Post Code" := "Post Code";
        lvPlantLocRec.Contact := "Contact Name";
        lvPlantLocRec."Phone No." := "Phone No.";
        lvPlantLocRec."Fax No." := "Fax No.";
        lvPlantLocRec."E-Mail" := "E-Mail";
        lvPlantLocRec."Territory Code" := "Territory Code";
        lvPlantLocRec."Starting Date" := "Starting Date";
        lvPlantLocRec."Ending Date" := "Ending Date";
        IF "Global Dimension 1 Code" <> '' THEN BEGIN  //*24614.sn
          IF IPlantCompany = COMPANYNAME THEN
            lvPlantLocRec."Department Code" := "Global Dimension 1 Code"
          ELSE BEGIN
            lvDimValRec.CHANGECOMPANY(IPlantCompany);
            lvDimValRec.SETCURRENTKEY(Code, "Global Dimension No.");
            lvDimValRec.SETRANGE(Code, "Global Dimension 1 Code");
            lvDimValRec.SETRANGE("Global Dimension No.", 1);
            IF lvDimValRec.FINDFIRST THEN
              lvPlantLocRec."Department Code" := "Global Dimension 1 Code";
          END;
        END;                                           //*24614.en
        lvPlantLocRec.NormalizePostCodeHouseNo;//DP00195
        lvPlantLocRec.INSERT;

        EXIT(lvPlantLocRec.Code);
      END;
    END;

    PROCEDURE DisplayMap@1100525017();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FIND('-') THEN
        MapMgt.MakeSelection(DATABASE::"Service Order",GETPOSITION)
      ELSE
        MESSAGE(Text023);
    END;

    PROCEDURE CheckPlanDateTime@1100525020();
    BEGIN
      //db, 17-03-10: M18520
       IF ("Starting Date" = "Ending Date") THEN
        IF ("Starting Time" <> 0T) AND ("Ending Time" <> 0T) THEN
          IF ("Starting Time" > "Ending Time") THEN
            FIELDERROR("Starting Time",STRSUBSTNO(Text000,FIELDCAPTION("Ending Time")));
    END;

    PROCEDURE CheckPlanLimitDateTime@1100525021();
    BEGIN
      //db, 19-03-10: M18520
       IF ("First Possible Starting Date" = "Last Possible Ending Date") THEN
        IF ("First Possible Starting Time" <> 0T) AND ("Last Possible Ending Time" <> 0T) THEN
          IF ("First Possible Starting Time" > "Last Possible Ending Time") THEN
            FIELDERROR("First Possible Starting Time",STRSUBSTNO(Text000,FIELDCAPTION("Last Possible Ending Time")));
    END;

    PROCEDURE CheckFirmPlannedPlanDates@1100528738();
    VAR
      FirstPossibleStartingDateTime@1100528601 : DateTime;
      LastPossibleEndingDateTime@1100528603 : DateTime;
      StartingDateTime@1100528602 : DateTime;
      EndingDateTime@1100528604 : DateTime;
    BEGIN
      IF NOT "Firm Planned" THEN
        EXIT;
      IF ("First Possible Starting Date" <> 0D) OR ("Last Possible Ending Date" <> 0D) THEN BEGIN
        FirstPossibleStartingDateTime := CREATEDATETIME("First Possible Starting Date", "First Possible Starting Time");
        StartingDateTime := CREATEDATETIME("Starting Date", "Starting Time");
        IF StartingDateTime < FirstPossibleStartingDateTime THEN
          IF "Starting Date" <> "First Possible Starting Date" THEN
            FIELDERROR("First Possible Starting Date", STRSUBSTNO(Text000, FIELDCAPTION("Starting Date")))
          ELSE
            FIELDERROR("First Possible Starting Time", STRSUBSTNO(Text000, FIELDCAPTION("Starting Time")));

        IF "Last Possible Ending Time" <> 0T THEN
          LastPossibleEndingDateTime := CREATEDATETIME("Last Possible Ending Date", "Last Possible Ending Time")
        ELSE
          LastPossibleEndingDateTime := CREATEDATETIME("Last Possible Ending Date", 235959.999T);
        EndingDateTime := CREATEDATETIME("Ending Date", "Ending Time");

        IF ("First Possible Starting Date" <> 0D) AND ("Last Possible Ending Date" <> 0D) THEN BEGIN
          IF ("Starting Date" <> 0D) AND (("Starting Date" < "First Possible Starting Date") OR ("Starting Date" > "Last Possible Ending Date")) THEN
            FIELDERROR("Starting Date", STRSUBSTNO(Text008, FIELDCAPTION("First Possible Starting Date"), FIELDCAPTION("Last Possible Ending Date")));
          IF ("Ending Date" <> 0D) AND (("Ending Date" < "First Possible Starting Date") OR ("Ending Date" > "Last Possible Ending Date")) THEN
            FIELDERROR("Ending Date", STRSUBSTNO(Text008, FIELDCAPTION("First Possible Starting Date"), FIELDCAPTION("Last Possible Ending Date")));
        END;

        IF EndingDateTime > LastPossibleEndingDateTime THEN
          IF "Ending Date" <> "Last Possible Ending Date" THEN
            FIELDERROR("Ending Date", STRSUBSTNO(Text000, FIELDCAPTION("Last Possible Ending Date")))
          ELSE
            FIELDERROR("Ending Time", STRSUBSTNO(Text000, FIELDCAPTION("Last Possible Ending Time")));
      END ELSE BEGIN
        IF ((xRec."Starting Date" <> 0D) AND (xRec."Starting Date" <> "Starting Date")) OR
           ((xRec."Ending Date" <> 0D) AND (xRec."Ending Date" <> "Ending Date")) OR
           ((xRec."Starting Time" <> 0T) AND (xRec."Starting Time" <> "Starting Time")) OR
           ((xRec."Ending Time" <> 0T) AND (xRec."Ending Time" <> "Ending Time"))
        THEN
          ERROR(Text116, "No.");
      END;
    END;

    PROCEDURE BuildRelationalStructure@1100525022(Action@1100525000 : Text[30]);
    VAR
      RelationalStructureMgt@1100525001 : Codeunit 11012238;
    BEGIN
      RelationalStructureMgt.BuildFromServOrder(Rec, xRec, Action);
    END;

    PROCEDURE CopyDefaultDimFromContract@1100525023();
    BEGIN
      IF "No." = '' THEN EXIT;  //db, 12-12-11: M28816

      DimMgt.DeleteDefaultDim(DATABASE::"Service Order", "No.");
      DimMgt.CopyDefaultDim(
        DATABASE::"Service-Contract", "Service Contract No.",
        DATABASE::"Service Order", "No.");

      UpdateServAnalysisNotGlobDims;
    END;

    PROCEDURE UpdateServAnalysisNotGlobDims@1100528616();
    BEGIN
      IF "No." = '' THEN
        EXIT;

      IF Problem <> '' THEN
        DimMgt.UpdateAnalysisDimNotGlobal(AnalysisType::Problem, Problem, DATABASE::"Service Order", "No.");
    END;

    PROCEDURE CheckContractStatus@1100525024(ServContrRec@1100525001 : Record 11012812);
    VAR
      ServiceContract@1100528700 : Record 11012812;
      OrderDate@1100525000 : Date;
    BEGIN
      //db, 10-06-10: M19644, M19645
      ServContrRec.TESTFIELD(Blocked, FALSE);
      IF ServContrRec.Status < ServContrRec.Status::Order THEN BEGIN
        ServiceContract.Status := ServiceContract.Status::Order;
        ERROR(Text003, ServContrRec.TABLECAPTION, ServContrRec."No.", ServContrRec.FIELDCAPTION(Status), ServiceContract.Status);
      END;
      IF "Order Date" = 0D THEN
        OrderDate:= WORKDATE
      ELSE
        OrderDate := "Order Date";
      IF ("Source Type" = "Source Type"::Call) OR (CurrFieldNo <> 0) THEN BEGIN //M21841
        IF OrderDate < ServContrRec."Starting Date" THEN
          MESSAGE(Text004a, ServContrRec."No.", ServContrRec."Starting Date", FIELDCAPTION("Order Date"));
        IF OrderDate > ServContrRec."Ending Date" THEN
          IF ServContrRec."Expiring Date" < ServContrRec."Ending Date" THEN  //db, 15-02-11:M25682
            MESSAGE(Text004b, ServContrRec."No.", ServContrRec."Ending Date", FIELDCAPTION("Order Date"));
      END;
      IF ServContrRec."Expiring Date" <> 0D THEN BEGIN
        IF ServContrRec."Expiring Date" < OrderDate THEN
          ERROR(Text004, ServContrRec."No.", ServContrRec."Expiring Date");
        //IF ServContrRec."Ending Date" >= ServContrRec."Expiring Date" THEN
        // MESSAGE(Text004, ServContrRec."No.", ServContrRec."Expiring Date");  //db, 30-12-10: M21843
      END;
    END;

    PROCEDURE GetSignature@1100525025(VAR SignatureRec@1100525001 : Record 11020349;ShowPicture@1100525000 : Boolean);
    BEGIN
      //db, 21-05-10: M19537
      IF "No." <> '' THEN BEGIN
        IF NOT SignatureRec.GET("No.") THEN BEGIN
          CLEAR(SignatureRec.Signature);
        END ELSE BEGIN
          IF FORMAT(SignatureRec.Signature) <> '' THEN
            IF ShowPicture THEN
              SignatureRec.CALCFIELDS(Signature);
        END;
      END;
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Global Dimension 1 Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::"Service Order");
      IF Dimension1Code <> '' THEN
        "Global Dimension 1 Code" := Dimension1Code;

      IF "Global Dimension 1 Code" <> '' THEN
        VALIDATE("Global Dimension 1 Code");
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Department Filter"));
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012823) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012823');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Service Order", "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    PROCEDURE DPA_SetFiltersForResource@1100525049(Context@1100525000 : Text[30];ResourceNo@1100525001 : Code[20]) : Boolean;
    VAR
      Resource@1100525002 : Record 11229278;
      UserSetup@1100525003 : Record 91;
    BEGIN
      //**4PS
      Resource.SETRANGE("No.", ResourceNo);
      Resource.SETRANGE(Type, Resource.Type::Employee);
      Resource.SETRANGE(Company, COMPANYNAME);
      IF Resource.FINDFIRST THEN BEGIN
        UserSetup.SETRANGE("Employee No.", Resource."Source No.");
        IF UserSetup.FINDFIRST THEN
          DPA_Management.SetUserWSEmployee(UserSetup."User ID");
      END;

      EXIT(DPA_SetFilters(Context));
    END;

    PROCEDURE CheckPlanPeriod@1100525031();
    BEGIN
      //db, 04-10-10: M23012
      IF ("Starting Date" < "First Possible Starting Date") AND ("Starting Date" <> 0D) THEN
        IF  ("First Possible Starting Date" <> 0D) THEN
          FIELDERROR("Starting Date", STRSUBSTNO(Text008,
            FIELDCAPTION("First Possible Starting Date"), FIELDCAPTION("Last Possible Ending Date")));
      IF ("Starting Date" > "Last Possible Ending Date") AND ("Starting Date" <> 0D) THEN
        IF  ("Last Possible Ending Date" <> 0D) THEN
          FIELDERROR("Starting Date", STRSUBSTNO(Text008,
            FIELDCAPTION("First Possible Starting Date"), FIELDCAPTION("Last Possible Ending Date")));
      IF ("Ending Date" > "Last Possible Ending Date") THEN
        IF  ("Last Possible Ending Date" <> 0D) THEN
          FIELDERROR("Ending Date", STRSUBSTNO(Text008,
            FIELDCAPTION("First Possible Starting Date"), FIELDCAPTION("Last Possible Ending Date")));
    END;

    PROCEDURE UpdateCostPlus@1100525032(CalledBy@1100525001 : Integer);
    VAR
      CostPlusRec@1100525000 : Record 11012825;
      JobsSetup@1100528601 : Record 315;
    BEGIN
      //db, 08-12-10: M23704
      //IF MODIFY THEN;  //db, 26-05-11: M27720, due calcfields(Service Contract No.) in GetBasicPrice

      CostPlusRec.SETRANGE("Service Order No.", "No.");
      CostPlusRec.SETRANGE(Invoiced, FALSE);
      //CostPlusRec.SETFILTER("Installment No.", '%1', '');  //db, 25-05-11: M26461 //mg.o, 09-02-12: M32859
      IF CalledBy = FIELDNO("Bill-to Customer No.") THEN
        CostPlusRec.SETRANGE("Bill-to Customer No.", xRec."Bill-to Customer No.")
      ELSE
        CostPlusRec.SETRANGE("Bill-to Customer No.", "Bill-to Customer No.");

      IF MODIFY THEN;  //db, 26-05-11: M27720, due calcfields(Service Contract No.) in GetBasicPrice
      IF NOT CostPlusRec.ISEMPTY THEN BEGIN
        IF CostPlusRec.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            CostPlusRec."Customer No.":= "Customer No.";
            CostPlusRec."Bill-to Customer No.":= "Bill-to Customer No.";
            CostPlusRec."Service Location No.":= "Service Location No.";
            CostPlusRec."VAT Prod. Posting Group":= "VAT Prod. Posting Group";
            IF (CalledBy = FIELDNO("Customer No.")) OR (CalledBy = FIELDNO("Bill-to Customer No.")) THEN BEGIN
              IF CostPlusRec."Installment No." = '' THEN BEGIN //mg, 09-02-12: M32843
                IF CostPlusRec."Basic Price Found at" <> Text104 THEN BEGIN //mg, 09-02-12: M32859
                  //db.sn, 26-05-11: M27720
                  IF CostPlusRec.CheckItemLine THEN BEGIN  //db, 24-06-14: C009380
                    CostPlusRec.FindSalesPrice;
                  END ELSE BEGIN
                    CostPlusRec.SetValidateHourRateCode(TRUE);
                    CostPlusRec.GetBasicPrice;
                  END;
                  //db.en, 26-05-11: M27720
                END;
              END;
            END;
            CostPlusRec.MODIFY;
          UNTIL CostPlusRec.NEXT = 0;
        END;
      END;

      JobsSetup.GET;
      IF NOT JobsSetup."4PS-Mobile Active" THEN BEGIN
        IF CalledBy = FIELDNO("Service Contract No.") THEN BEGIN
          CostPlusRec."Service Order No." := "No.";
          CostPlusRec.GetExtraCostLinesByContract();
        END;
      END;
    END;

    PROCEDURE GetTryOut@1210190010(iAction@1210190000 : Integer) Result : Text[30];
    VAR
      TryOutRelationRec@1210190001 : Record 11012761;
    BEGIN
      //db, 05-05-11
      IF TryOutRelationRec.READPERMISSION THEN
        Result := TryOutRelationRec.GetTryOut('', '', '', '', "No.", '', '', iAction);

      EXIT(Result);
    END;

    PROCEDURE ShowTryOut@1210190008(iAction@1210190000 : Integer);
    VAR
      TryOutRelationRec@1210190001 : Record 11012761;
    BEGIN
      //db, 05-05-11
      TryOutRelationRec.ShowTryOut('', '', '', '', "No.", '', '', iAction);
    END;

    PROCEDURE CheckInternalCharge@1210190014();
    VAR
      ServOrderRec@1210190000 : Record 11012823;
    BEGIN
      //db, 20-05-11
      IF NOT ServOrderRec.GET("No.") THEN EXIT;
      ServOrderExtension.GetServOrderExtension("No.");  //db, 22-04-13: C007214

      IF NOT ServContrRec.GET("Service Contract No.") THEN ServContrRec.INIT;
      IF ServContrRec."Internal Contract" THEN BEGIN
        IF ServLocRec.GET("Service Location No.") THEN
          IF ServLocRec."Project No." <> '' THEN
            ServOrderExtension."Master Project" := ServLocRec."Project No.";
      END ELSE BEGIN
        ServOrderExtension."Master Project" := '';
        ServOrderExtension."Master Element" := '';
      END;

      ServOrderExtension.UpdateServOrderExtension("No.");  //db, 22-04-13: C007214
    END;

    PROCEDURE CheckSendReport@1210190018();
    VAR
      ServMailRec@1210190000 : Record 11071711;
    BEGIN
      //db, 21-06-11: M26634
      "Send Report" := FALSE;

      IF NOT ServContrRec.GET("Service Contract No.") THEN ServContrRec.INIT;
      IF NOT ServContrRec."Send Mail Work Sheet" THEN EXIT;

      ServMailRec.SETRANGE("Service Contract No.", "Service Contract No.");
      ServMailRec.SETRANGE("Source Type", "Source Type");
      ServMailRec.SETRANGE("Source E-Mail", ServMailRec."Source E-Mail"::OrderSigner);
      IF ServMailRec.FINDSET THEN
        "Send Report" := ServMailRec."Mail Work Sheet";
    END;

    PROCEDURE FillExecServiceContractData@1100528400(PrincipalCompanyName@1100528402 : Text[30];ServContrNoPrincComp@1100528403 : Code[20]);
    VAR
      ExecutingServiceContract@1100528400 : Record 11071725;
      ServiceContract@1100528401 : Record 11012812;
    BEGIN
      IF "Service Contract No." = '' THEN BEGIN
        ExecutingServiceContract.GET(PrincipalCompanyName, ServContrNoPrincComp);
        ServiceContract.GET(ExecutingServiceContract."Serv. Contr. No. Exec. Comp.");
        VALIDATE("Service Contract No.", ExecutingServiceContract."Serv. Contr. No. Exec. Comp."); //kkleermaker, 110815, M27956
        "Customer No." := ServiceContract."Customer No.";
      END;
    END;

    PROCEDURE GetSolutionTextFromExecCompany@1100528401();
    VAR
      ServiceText@1100528403 : Record 11012882;
      WebServiceMgt@1100528400 : Codeunit 11012266;
      NoOfProblemLines@1100528401 : Integer;
      I@1100528402 : Integer;
      XPath@1100528404 : Text[1024];
    BEGIN
      GetDataFromExecCompany('Description', WebServiceMgt);

      ServiceText.SETRANGE("Table Name", ServiceText."Table Name"::"Service Order");
      ServiceText.SETRANGE("No.", "No.");
      ServiceText.SETRANGE("Table Field", 92);  //DP00106: FIELDNO("Solution Text")
      ServiceText.DELETEALL;

      NoOfProblemLines := WebServiceMgt.GetResponseValueCount('.//so:Solution_Text_Line_SVCNET');
      FOR I := 1 TO NoOfProblemLines DO BEGIN
        ServiceText."Table Name" := ServiceText."Table Name"::"Service Order";
        ServiceText."No." := "No.";
        ServiceText."Table Field" := 92;  //DP00106: FIELDNO("Solution Text");
        ServiceText."Line No." := GetFirstFreeServiceTextLineNo(
          ServiceText."Table Name",
          ServiceText."No.",
          ServiceText."Table Field");
        XPath := STRSUBSTNO('.//so:Solution_Text_Line_SVCNET[%1]/so:Date', I);
        ServiceText.Date := WebServiceMgt.GetResponseValueDate(XPath, FALSE);
        XPath := STRSUBSTNO('.//so:Solution_Text_Line_SVCNET[%1]/so:Code', I);
        ServiceText.Code := WebServiceMgt.GetResponseValueText(XPath, FALSE);
        XPath := STRSUBSTNO('.//so:Solution_Text_Line_SVCNET[%1]/so:Comment', I);
        ServiceText.Comment := WebServiceMgt.GetResponseValueText(XPath, FALSE);
        ServiceText.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetFirstFreeServiceTextLineNo@1100528407(TableName@1100528400 : Integer;No@1100528401 : Code[20];TableFieldNo@1100528402 : Integer) : Integer;
    VAR
      ServiceText@1100528403 : Record 11012882;
    BEGIN
      ServiceText.SETRANGE("Table Name", TableName);
      ServiceText.SETRANGE("No.", No);
      ServiceText.SETRANGE("Table Field", TableFieldNo);
      IF ServiceText.FINDLAST THEN
        EXIT(ServiceText."Line No." + 10000)
      ELSE
        EXIT(10000);
    END;

    PROCEDURE GetActRefPointFromExecCompany@1100528403();
    VAR
      ServiceOrderExtension@1100525000 : Record 11071727;
      WebServiceMgt@1100528401 : Codeunit 11012266;
    BEGIN
      ServiceOrderExtension.GetServOrderExtension("No.");
      EVALUATE(
        ServiceOrderExtension."Act. Ref. Point Exec. Company",
        GetDataFromExecCompany('Actual_Reference_Point', WebServiceMgt));
      ServiceOrderExtension.UpdateServOrderExtension("No.");
    END;

    LOCAL PROCEDURE GetDataFromExecCompany@1100528404(TagName@1100528403 : Text[50];VAR WebServiceMgt@1100528405 : Codeunit 11012266) : Text[250];
    VAR
      WebServiceURL@1100528401 : Record 11020659;
      Namespaces@1100528402 : ARRAY [10,2] OF Text[100];
      ServiceOrderExtension@1100528404 : Record 11071727;
    BEGIN
      ServiceOrderExtension.GetServOrderExtension("No.");
      ServiceOrderExtension.TESTFIELD("Executing Company Name");
      ServiceOrderExtension.TESTFIELD("Order No. Executing Company");
      GetServiceOrderWebServiceURL(WebServiceURL);
      WebServiceMgt.PrepareSOAPRequest(WebServiceURL."Target Namespace", 'Read');
      WebServiceMgt.AppendSOAPParameter(
        WebServiceURL."Target Namespace",
        'No',
        ServiceOrderExtension."Order No. Executing Company");
      WebServiceMgt.SendSOAPRequest('Read', WebServiceURL.URL, TRUE);
      Namespaces[1, 1] := 'so';
      Namespaces[1, 2] := WebServiceURL."Target Namespace";
      WebServiceMgt.SetResponseSelectionNamespaces(Namespaces);
      EXIT(WebServiceMgt.GetResponseValueText('.//so:' + TagName, FALSE));
    END;

    LOCAL PROCEDURE GetServiceOrderWebServiceURL@1100528402(VAR WebServiceURL@1100528403 : Record 11020659);
    VAR
      ServiceOrderExtension@1100528400 : Record 11071727;
    BEGIN
      ServiceOrderExtension.GetServOrderExtension("No.");
      ServiceOrderExtension.TESTFIELD("Executing Company Name");
      WebServiceURL.SETRANGE(Type, WebServiceURL.Type::"Service Network");
      WebServiceURL.SETRANGE("Company Name", ServiceOrderExtension."Executing Company Name");
      IF WebServiceURL.COUNT = 0 THEN
        ERROR(
          Text036,
          WebServiceURL.TABLECAPTION,
          WebServiceURL.FIELDCAPTION("Company Name"),
          ServiceOrderExtension."Executing Company Name");
      IF WebServiceURL.COUNT > 1 THEN
        ERROR(
          Text037,
          WebServiceURL.TABLECAPTION,
          WebServiceURL.FIELDCAPTION("Company Name"),
          ServiceOrderExtension."Executing Company Name");
      WebServiceURL.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateVessel@1210190019();
    VAR
      Vessel@1210190000 : Record 11071737;
      ServiceOrderExtension@1210190001 : Record 11071727;
    BEGIN
      //kkleermaker, 110817, M28697
      IF "Service Location No." <> xRec."Service Location No." THEN
        IF Vessel.GET("Service Location No.") THEN BEGIN
          "Vessel No." := Vessel."No.";
          IF NOT ServiceOrderExtension.GET("No.") THEN
            ServiceOrderExtension.INIT;
          ServiceOrderExtension."Vessel Name" := Vessel.Name;
          ServiceOrderExtension.UpdateServOrderExtension("No.");
        END ELSE BEGIN
          "Vessel No." := '';
          IF ServiceOrderExtension.GET("No.") THEN BEGIN
            ServiceOrderExtension."Vessel Name" := '';
            ServiceOrderExtension.UpdateServOrderExtension("No.");
          END;
        END
    END;

    PROCEDURE GetOpenPurchaseBaseOrder@1210190021() : Decimal;
    VAR
      PurchaseOrderControlLine@1210190000 : Record 11020221;
    BEGIN
      //mg, 19-09-11: M28500
      PurchaseOrderControlLine.SETCURRENTKEY("Base Service Order No.");
      PurchaseOrderControlLine.SETRANGE("Base Service Order No.", "Base Service Order No.");
      IF GETFILTER("Cost Component Filter") <> '' THEN
        PurchaseOrderControlLine.SETFILTER("Cost Component", GETFILTER("Cost Component Filter"));
      IF GETFILTER("Period Filter") <> '' THEN
        PurchaseOrderControlLine.SETFILTER(Date, GETFILTER("Period Filter"));
      PurchaseOrderControlLine.CALCSUMS("Outstanding Amount");
      EXIT(PurchaseOrderControlLine."Outstanding Amount");
    END;

    PROCEDURE GetReceivedNotInvBaseOrder@1210190022() : Decimal;
    VAR
      PurchaseOrderControlLine@1210190000 : Record 11020221;
    BEGIN
      //mg, 19-09-11: M28500
      PurchaseOrderControlLine.SETCURRENTKEY("Base Service Order No.");
      PurchaseOrderControlLine.SETRANGE("Base Service Order No.", "Base Service Order No.");
      IF GETFILTER("Cost Component Filter") <> '' THEN
        PurchaseOrderControlLine.SETFILTER("Cost Component", GETFILTER("Cost Component Filter"));
      IF GETFILTER("Period Filter") <> '' THEN
        PurchaseOrderControlLine.SETFILTER(Date, GETFILTER("Period Filter"));
      PurchaseOrderControlLine.CALCSUMS("Amt. Rcd. Not Invoiced");
      EXIT(PurchaseOrderControlLine."Amt. Rcd. Not Invoiced");
    END;

    PROCEDURE GetOpenInventoryBaseOrder@1210190023() : Decimal;
    VAR
      ItemJournalLine@1210190000 : Record 83;
    BEGIN
      //mg, 19-09-11: M28500
      ItemJournalLine.SETCURRENTKEY("Base Service Order No.");
      ItemJournalLine.SETRANGE("Base Service Order No.", "Base Service Order No.");
      IF GETFILTER("Cost Component Filter") <> '' THEN
        ItemJournalLine.SETRANGE("Cost Component", GETFILTER("Cost Component Filter"));
      IF GETFILTER("Period Filter") <> '' THEN
        ItemJournalLine.SETFILTER("Posting Date", GETFILTER("Period Filter"));
      ItemJournalLine.CALCSUMS(Amount);
      EXIT(ItemJournalLine.Amount);
    END;

    PROCEDURE GetOpenHoursBaseOrder@1210190024() : Decimal;
    VAR
      HourAccountingLine@1210190000 : Record 11012039;
    BEGIN
      //mg, 19-09-11: M28500
      HourAccountingLine.SETCURRENTKEY("Base Service Order No.");
      HourAccountingLine.SETRANGE("Base Service Order No.", "Base Service Order No.");
      IF GETFILTER("Cost Component Filter") <> '' THEN
        HourAccountingLine.SETFILTER("Cost Component", GETFILTER("Cost Component Filter"));
      IF GETFILTER("Period Filter") <> '' THEN
        HourAccountingLine.SETFILTER("Posting Date", GETFILTER("Period Filter"));
      HourAccountingLine.CALCSUMS("Total Line");
      EXIT(HourAccountingLine."Total Line");
    END;

    PROCEDURE GetOpenAmountHoursBaseOrder@1210190025() : Decimal;
    VAR
      HourAccountingLine@1210190000 : Record 11012039;
    BEGIN
      //mg, 19-09-11: M28500
      HourAccountingLine.SETCURRENTKEY("Base Service Order No.");
      HourAccountingLine.SETRANGE("Base Service Order No.", "Base Service Order No.");
      IF GETFILTER("Cost Component Filter") <> '' THEN
        HourAccountingLine.SETFILTER("Cost Component", GETFILTER("Cost Component Filter"));
      IF GETFILTER("Period Filter") <> '' THEN
        HourAccountingLine.SETFILTER("Posting Date", GETFILTER("Period Filter"));
      HourAccountingLine.CALCSUMS("Amount (LCY)");
      EXIT(HourAccountingLine."Amount (LCY)");
    END;

    PROCEDURE GetActualCostsBaseOrder@1210190026() : Decimal;
    VAR
      ServiceLedgerEntry@1210190000 : Record 11012819;
    BEGIN
      //mg, 19-09-11: M28500
      ServiceLedgerEntry.SETCURRENTKEY("Base Service Order No.");
      ServiceLedgerEntry.SETRANGE("Base Service Order No.", "Base Service Order No.");
      IF GETFILTER("Cost Component Filter") <> '' THEN
        ServiceLedgerEntry.SETFILTER("Cost Component", GETFILTER("Cost Component Filter"));
      IF GETFILTER("Period Filter") <> '' THEN
        ServiceLedgerEntry.SETFILTER("Posting Date", GETFILTER("Period Filter"));
      ServiceLedgerEntry.SETRANGE("Cost Present", TRUE);
      ServiceLedgerEntry.CALCSUMS("Total Cost (LCY)");
      EXIT(ServiceLedgerEntry."Total Cost (LCY)");
    END;

    PROCEDURE GetActualHoursBaseOrder@1210190027() : Decimal;
    VAR
      ServiceLedgerEntry@1210190000 : Record 11012819;
    BEGIN
      //mg, 19-09-11: M28500
      ServiceLedgerEntry.SETCURRENTKEY("Base Service Order No.");
      ServiceLedgerEntry.SETRANGE("Base Service Order No.", "Base Service Order No.");
      IF GETFILTER("Cost Component Filter") <> '' THEN
        ServiceLedgerEntry.SETFILTER("Cost Component", GETFILTER("Cost Component Filter"));
      IF GETFILTER("Period Filter") <> '' THEN
        ServiceLedgerEntry.SETFILTER("Posting Date", GETFILTER("Period Filter"));
      ServiceLedgerEntry.SETRANGE("Cost Type", ServiceLedgerEntry."Cost Type"::Labor);
      ServiceLedgerEntry.SETRANGE("Cost Present", TRUE);
      ServiceLedgerEntry.CALCSUMS(Quantity);
      EXIT(ServiceLedgerEntry.Quantity);
    END;

    PROCEDURE GetTotalOpenOvhSurchBaseOrder@1210190028() TotalOvhSurch : Decimal;
    VAR
      PurchaseOrderControlLine@1210190000 : Record 11020221;
      HourAccountingSurcharge@1210190001 : Record 11020308;
      ItemJournalSurcharge@1210190002 : Record 11020585;
    BEGIN
      //mg, 19-09-11: M28500
      PurchaseOrderControlLine.SETCURRENTKEY("Base Service Order No.");
      PurchaseOrderControlLine.SETRANGE("Base Service Order No.", "Base Service Order No.");
      IF GETFILTER("Cost Component Filter") <> '' THEN
        PurchaseOrderControlLine.SETFILTER("Cost Component", GETFILTER("Cost Component Filter"));
      IF GETFILTER("Period Filter") <> '' THEN
        PurchaseOrderControlLine.SETFILTER(Date, GETFILTER("Period Filter"));
      PurchaseOrderControlLine.CALCSUMS("Overhead Surcharge Firm");
      TotalOvhSurch += PurchaseOrderControlLine."Overhead Surcharge Firm";
      //db.sn, 23-05-13: C002866
      PurchaseOrderControlLine.CALCSUMS("Overhead Surcharge Soft");
      TotalOvhSurch += PurchaseOrderControlLine."Overhead Surcharge Soft";
      //db.en, 23-05-13: C002866

      HourAccountingSurcharge.SETCURRENTKEY("Base Service Order No.");
      HourAccountingSurcharge.SETRANGE("Base Service Order No.", "Base Service Order No.");
      IF GETFILTER("Cost Component Filter") <> '' THEN
        HourAccountingSurcharge.SETFILTER("Cost Component", GETFILTER("Cost Component Filter"));
      IF GETFILTER("Period Filter") <> '' THEN
        HourAccountingSurcharge.SETFILTER("Posting Date", GETFILTER("Period Filter"));
      HourAccountingSurcharge.CALCSUMS("Overhead Surcharge Service");
      TotalOvhSurch += HourAccountingSurcharge."Overhead Surcharge Service";

      ItemJournalSurcharge.SETCURRENTKEY("Base Service Order No.");
      ItemJournalSurcharge.SETRANGE("Base Service Order No.", "Base Service Order No.");
      IF GETFILTER("Cost Component Filter") <> '' THEN
        ItemJournalSurcharge.SETFILTER("Cost Component", GETFILTER("Cost Component Filter"));
      IF GETFILTER("Period Filter") <> '' THEN
        ItemJournalSurcharge.SETFILTER("Posting Date", GETFILTER("Period Filter"));
      ItemJournalSurcharge.CALCSUMS("Overhead Surcharge Service");
      TotalOvhSurch += ItemJournalSurcharge."Overhead Surcharge Service";

      EXIT(TotalOvhSurch);
    END;

    PROCEDURE CheckBaseServiceOrderTree@1100528600();
    VAR
      ServiceOrder@1100528600 : Record 11012823;
    BEGIN
      ServiceOrder.SETCURRENTKEY("Base Service Order No.");
      ServiceOrder.SETRANGE("Base Service Order No.", "No.");
      ServiceOrder.SETFILTER("No.", '<>%1', "No.");
      ServiceOrder.SetDisableBaseOrderCheck;
      IF ServiceOrder.FINDSET THEN
        REPEAT
          IF ServiceOrder."Collect Invoices By" = ServiceOrder."Collect Invoices By"::BaseOrder THEN BEGIN  //DP01008
            ServiceOrder.VALIDATE("Collective List No.", "Collective List No.");
            ServiceOrder.MODIFY(TRUE);
          END;
        UNTIL ServiceOrder.NEXT = 0;
    END;

    PROCEDURE SetDisableBaseOrderCheck@1100528601();
    BEGIN
      DisableBaseOrderCheck := TRUE;
    END;

    PROCEDURE CheckCollectiveList@1100528602();
    VAR
      ServiceCollectiveList@1100528600 : Record 11071730;
      Customer@1100528601 : Record 18;
      StartingDate@1100525000 : Date;
    BEGIN
      TESTFIELD("Collective List No.");
      TESTFIELD("Bill-to Customer No.");
      TESTFIELD("Customer No.");
      ServiceCollectiveList.GET("Collective List No.");
      ServiceCollectiveList.TESTFIELD(Status, ServiceCollectiveList.Status::Open);
      IF "No." = "Base Service Order No." THEN BEGIN
        ServiceCollectiveList.TESTFIELD("Bill-to Customer No.", "Bill-to Customer No.");
        IF NOT UseBilltoAsSelltoCustomer THEN
          ServiceCollectiveList.TESTFIELD("Customer No.", "Customer No.");
      END;
      TESTFIELD("Currency Code", ServiceCollectiveList."Currency Code");
      Customer.GET("Customer No.");

      IF ServiceCollectiveList."Service Contract No." <> '' THEN
        ServiceCollectiveList.TESTFIELD("Service Contract No.", "Service Contract No.");
      IF ServiceCollectiveList."Service Location No." <> '' THEN
      ServiceCollectiveList.TESTFIELD("Service Location No.", "Service Location No.");

      StartingDate := GetStartingDate;
      ServiceCollectiveList.SETFILTER("Starting Date", '%1|<=%2', 0D, StartingDate);
      ServiceCollectiveList.SETFILTER("Ending Date", '%1|>=%2', 0D, StartingDate);
      ServiceCollectiveList.FIND;
    END;

    PROCEDURE HandleLookupCollectiveListNo@1100528603() : Boolean;
    VAR
      ServiceCollectiveList@1100528602 : Record 11071730;
      Customer@1100528603 : Record 18;
      ServiceCollectiveListsFRM@1100528600 : Page 11125230;
      ServiceOrderNo@1100409000 : Code[20];
      StartingDate@1100525000 : Date;
    BEGIN
      TESTFIELD("Bill-to Customer No.");
      Customer.GET("Bill-to Customer No.");
      IF "No." <> "Base Service Order No." THEN
        ServiceOrderNo := "Base Service Order No."
      ELSE
        ServiceOrderNo := "No.";
      ServiceCollectiveList.SETRANGE("Bill-to Customer No.", "Bill-to Customer No.");
      IF NOT UseBilltoAsSelltoCustomer THEN
        ServiceCollectiveList.SETRANGE("Customer No.", "Customer No.")
      ELSE
        ServiceCollectiveList.SETRANGE("Customer No.", "Bill-to Customer No.");
      ServiceCollectiveList.SETRANGE("Alternative Bill-to Address", "Alternative Bill-to Address");
      ServiceCollectiveList.SETRANGE("Bill-to Contact Person No.", "Bill-to Contact Person");
      IF "Collective List No." = '' THEN
        ServiceCollectiveList.SETRANGE(Status, ServiceCollectiveList.Status::Open);

      //DP00195 sn.
      IF IsPlantServiceOrder THEN
        Customer."Collect SO Invoices By" := Customer."Collect SO Invoices By"::"Service Order";
      //DP00195 en.

      CASE Customer."Collect SO Invoices By" OF
        Customer."Collect SO Invoices By"::"Service Contract":
          BEGIN
            ServiceCollectiveList.SETFILTER("Service Contract No.", '%1|%2', '', "Service Contract No.");
            ServiceCollectiveList.SETFILTER("Service Order No.", '%1|%2', '', ServiceOrderNo);
          END;
        Customer."Collect SO Invoices By"::Complex:
          ServiceCollectiveList.SETFILTER("Complex Code", '%1|%2', '', GetComplexCode);
        Customer."Collect SO Invoices By"::"Service Location":
          BEGIN
            ServiceCollectiveList.SETFILTER("Service Contract No.", '%1|%2', '', "Service Contract No.");
            ServiceCollectiveList.SETRANGE("Service Location No.", "Service Location No.");
            ServiceCollectiveList.SETFILTER("Service Order No.", '%1|%2', '', ServiceOrderNo);
          END;
        Customer."Collect SO Invoices By"::"Service Order":
          ServiceCollectiveList.SETRANGE("Service Order No.", ServiceOrderNo)
      END;
      ServiceCollectiveList.SETRANGE("Currency Code", "Currency Code");
      StartingDate := GetStartingDate;
      ServiceCollectiveList.SETFILTER("Starting Date", '%1|<=%2', 0D, StartingDate);
      ServiceCollectiveList.SETFILTER("Ending Date", '%1|>=%2', 0D, StartingDate);
      ServiceCollectiveList."No." := "Collective List No.";
      ServiceCollectiveListsFRM.SetDefaults(Rec);
      //IF PAGE.RUNMODAL(0, ServiceCollectiveList) = ACTION::LookupOK THEN
      ServiceCollectiveListsFRM.SETTABLEVIEW(ServiceCollectiveList);
      ServiceCollectiveListsFRM.SETRECORD(ServiceCollectiveList);
      ServiceCollectiveListsFRM.LOOKUPMODE(TRUE);
      IF ServiceCollectiveListsFRM.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ServiceCollectiveListsFRM.GETRECORD(ServiceCollectiveList);
        VALIDATE("Collective List No.", ServiceCollectiveList."No.");
      END;
    END;

    PROCEDURE RecalcSOCostPlusEntries@1100528604(IForceChargeable@1100528600 : Boolean);
    VAR
      ServiceOrderCostPlusEntry@1100528601 : Record 11012825;
    BEGIN
      ServiceOrderCostPlusEntry."Service Order No." := "No.";
      ServiceOrderCostPlusEntry.DetermineRemovalContribution(FALSE);  //C024476 (inherit default from item line)
      //DP01008.sn
      IF "Collect Invoices By" = "Collect Invoices By"::BaseOrder THEN
        ServiceOrderCostPlusEntry.CheckInvBaseAmountBaseOrder(IForceChargeable)
      ELSE
        ServiceOrderCostPlusEntry.CheckInvoiceBaseAmount(IForceChargeable);
      //DP01008.en
    END;

    PROCEDURE RecalcBaseSOCostPlusEntries@1100528620(IBaseServiceOrder@1100528600 : Code[20];IForceChargeable@1100528602 : Boolean);
    VAR
      ServiceOrder@1100528601 : Record 11012823;
    BEGIN
      IF NOT ServiceOrder.GET(IBaseServiceOrder) THEN
        EXIT;
      IF NOT ServiceOrder."Base Service Order" THEN
        EXIT;

      ServiceOrder.RecalcSOCostPlusEntries(IForceChargeable);
    END;

    PROCEDURE CheckTravelData@1100528605();
    VAR
      ServiceExtraCost@1100528600 : Record 11020344;
    BEGIN
      ServiceExtraCost."Entity Type" := ServiceExtraCost."Entity Type"::"Service Order";
      ServiceExtraCost."Entity Code" := "No.";
      ServiceExtraCost.CheckTravelData;
    END;

    PROCEDURE ProcessUnitPriceStatusChange@1100528606();
    VAR
      ServiceUnitPriceManagement@1100528600 : Codeunit 11012846;
    BEGIN
      //kzwerver, 110930, n, RfC Unit Price
      IF (CurrFieldNo <> FIELDNO("Unit Price Status")) THEN
        EXIT;

      MODIFY; //mg, 26-09-12: T000805
      CASE "Unit Price Status" OF
        "Unit Price Status"::"Pre-Recording":
          ServiceUnitPriceManagement.ProcessStatusPreRecording(Rec);
        "Unit Price Status"::Recording:
          ServiceUnitPriceManagement.ProcessStatusRecording(Rec);
        "Unit Price Status"::"Production Recording":
          ServiceUnitPriceManagement.ProcessStatusRealization(Rec);
      END;
      FIND('='); //previous command changes record
      //MODIFY; //mg.o, 26-09-12: T000805
    END;

    PROCEDURE ValidateUnitPriceTypeChange@1100528609();
    VAR
      ServiceOrderExtension@1210190000 : Record 11071727;
      ServiceUnitPriceManagement@1100528600 : Codeunit 11012846;
    BEGIN
      //kzwerver, 110930, n, RfC Unit Price
      ServiceUnitPriceManagement.ValidateSOUnitPriceChange("No.", FIELDCAPTION("Price Book Type"));

      ServiceOrderExtension.GetServOrderExtension("No.");
      ServiceOrderExtension."Price Book Code" := '';
      ServiceOrderExtension."Price Book Index Date" := 0D;
      "Unit Price Status" := 0;

      IF ("Price Book Type" = "Price Book Type"::Customer) THEN BEGIN
        ServiceOrderExtension."Price Book Code" := "Customer No.";
        ServiceOrderExtension."Price Book Index Date" :=
          ServiceUnitPriceManagement.GetLatestPriceBookIndexDate("Price Book Type", "Customer No.");
        IF (ServiceOrderExtension."Price Book Index Date" = 0D) THEN
          ServiceOrderExtension."Price Book Code" := '';
      END;

      ServiceOrderExtension.UpdateServOrderExtension("No.");
    END;

    PROCEDURE TestSLandSCCombination@1100528607();
    VAR
      ContractObject@1100528600 : Record 11071702;
      ServiceObject@1100528300 : Record 11071691;
      ServiceLocationFound@1100528601 : Boolean;
    BEGIN
      IF ("Service Location No." = '') OR ("Service Contract No." = '') THEN EXIT;

      ContractObject.SETCURRENTKEY("Service Contract No.", "Service Location No.");
      ContractObject.SETRANGE("Service Contract No.", "Service Contract No.");
      IF ContractObject.ISEMPTY THEN
        EXIT;
      ContractObject.SETRANGE("Service Location No.", "Service Location No.");
      IF ContractObject.ISEMPTY THEN
        ERROR(Text103, "Service Location No.", "Service Contract No.");
    END;

    PROCEDURE InsertServiceText@1100528608(IAnalysisType@1100528600 : 'Problem,Cause,Solution';IAnalysisCode@1100528601 : Code[10];ITableFieldNo@1100528602 : Integer);
    VAR
      ServiceText@1100528603 : Record 11012882;
      ServiceAnalysis@1100528606 : Record 11012842;
    BEGIN
      IF SkipUpdateServiceText THEN EXIT;

      IF IAnalysisCode = '' THEN EXIT;

      ServiceText.SETRANGE("Table Name", ServiceText."Table Name"::"Service Order");
      ServiceText.SETRANGE("No.", "No.");
      ServiceText.SETRANGE("Table Field", ITableFieldNo);
      IF NOT ServiceText.ISEMPTY THEN
        EXIT;

      IF ServiceAnalysis.GET(IAnalysisType, IAnalysisCode) THEN BEGIN
        ServiceText."Table Name" := ServiceText."Table Name"::"Service Order";
        ServiceText."No." := "No.";
        ServiceText."Table Field" := ITableFieldNo;
        ServiceText."Line No." := 10000;
        ServiceText.Date := TODAY;
        ServiceText."Time Created" := TIME;
        ServiceText.Comment := ServiceAnalysis.Description;
        ServiceText.INSERT(TRUE);
      END;
    END;

    PROCEDURE ChangeStatusLinkedSOs@1210190032();
    VAR
      ServiceOrder@1210190000 : Record 11012823;
      ServiceOrderList@1100525000 : Page 11012830;
      SaveStatusOld@1100525001 : Option;
      SaveStatusNew@1100525002 : Option;
      Answer@1100525003 : Integer;
    BEGIN
      TESTFIELD("Base Service Order", TRUE);

      ServiceOrder.SETCURRENTKEY("Base Service Order No.");
      ServiceOrder.SETRANGE("Base Service Order No.", "No.");
      ServiceOrder.SETRANGE("Base Service Order", FALSE);
      IF ServiceOrder.ISEMPTY THEN
        EXIT;

      IF DontShowMenuOnStatusChange THEN
        Answer := 2
      ELSE
        Answer := STRMENU(Text041, 1, Text042);

      CASE Answer OF
        0: ERROR('');
        //DP00503 sn
        1:
          BEGIN
            IF (CurrFieldNo = FIELDNO(Status)) THEN BEGIN
              ServiceOrder.SETFILTER(Status, '..%1', ServiceOrder.Status::"Technical Finished");
              ServiceOrderList.SETTABLEVIEW(ServiceOrder);
              SaveStatusOld := xRec.Status;
              SaveStatusNew := Rec.Status;
              COMMIT;  //Otherwise RunModal is not possible.
              ServiceOrderList.SetShowOnlyForm(TRUE);
              ServiceOrderList.LOOKUPMODE(TRUE);
              IF ServiceOrderList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                ServiceOrder.SETFILTER(Status, '<%1', ServiceOrder.Status::"Technical Finished");
                IF NOT ServiceOrder.ISEMPTY THEN
                  IF NOT CONFIRM(Text040) THEN
                    ERROR('');
                ServiceOrder.SETFILTER(Status, '..%1', ServiceOrder.Status::"Technical Finished");
                IF NOT ServiceOrder.ISEMPTY THEN BEGIN
                  IF ServiceOrder.FINDSET(TRUE) THEN
                    REPEAT
                      ServiceOrder.VALIDATE(Status, Status);
                      ServiceOrder.HandleStatusChange;
                    UNTIL ServiceOrder.NEXT = 0;
                END;
              END ELSE BEGIN
                ServiceOrder.SETRANGE(Status);
                Status := SaveStatusOld;
                COMMIT;  //Reset status
                ERROR('');
              END;
            END;
          END;
        //DP00503 en
        2:
          BEGIN
            ServiceOrder.SETFILTER(Status, '<%1', ServiceOrder.Status::"Technical Finished");
            IF NOT ServiceOrder.ISEMPTY THEN
              IF NOT CONFIRM(Text040) THEN
                ERROR('');
            ServiceOrder.SETFILTER(Status, '..%1', ServiceOrder.Status::"Technical Finished"); //mg, 09-11-11: M30581
            IF NOT ServiceOrder.ISEMPTY THEN BEGIN
              IF ServiceOrder.FINDSET(TRUE) THEN
                REPEAT
                  ServiceOrder.VALIDATE(Status, Status);
                  ServiceOrder.HandleStatusChange;
                UNTIL ServiceOrder.NEXT = 0;
            END;
          END;
      END;
    END;

    PROCEDURE UpdateToNextRefPoint@1210190033(IStep@1210190000 : 'Planned,Reviewed,Make Chargeable,Not Invoice,Prepare');
    VAR
      DocumentReferencePoint@1210190003 : Record 11020296;
      SubcontPortSetup@1100528600 : Record 11126402;
      ServiceOrderCostPlusEntry@1100528000 : Record 11012825;
    BEGIN
      CASE IStep OF
        IStep::Planned:
          BEGIN
            DocumentReferencePoint.InsertDocRefPointSOPlanned("No.");
            IF (Subcontractor <> '') AND
               (NOT SubcontPortSetup.FINDSET OR NOT SubcontPortSetup."Subcontracting Portal Active")
            THEN
              CreateSubcontrPurchaseOrder;
          END;
        IStep::Reviewed:
          DocumentReferencePoint.InsertDocRefPointSOReviewed("No.");
        IStep::"Make Chargeable":
          DocumentReferencePoint.InsertDocRefPointSOInvoiced("No.");
        // dp00215.sn
        IStep::"Not Invoice":
          BEGIN
            DocumentReferencePoint.InsertDocRefPointSONotInvoice("No.");
            ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", "No.");
            ServiceOrderCostPlusEntry.SETRANGE(Chargeable, TRUE);
            ServiceOrderCostPlusEntry.SETRANGE(Invoiced, FALSE);
            ServiceOrderCostPlusEntry.MODIFYALL(Chargeable, FALSE, TRUE);
          END;
        // dp00215.en
        IStep::Prepare:
          DocumentReferencePoint.InsertDocRefPointSOPrepared("No.");  //DP01015
      END;
      IF DocumentReferencePoint.GetNewActRefPoint >= 0 THEN BEGIN
        FIND('='); // Previous command may modify data
        "Actual Reference Point (Gantt)" := DocumentReferencePoint.GetNewActRefPoint;
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE UpdateSOSurchageBudgetLines@1100528610();
    VAR
      ServiceSurchargeManagement@1100528600 : Codeunit 11012834;
    BEGIN
      ServiceSurchargeManagement.UpdateSOSurchargeBudgetLines(Rec);
    END;

    PROCEDURE UpdateSurchargeFields@1100528611();
    VAR
      ServiceOrderExtension@1100528600 : Record 11071727;
      ServiceContract@1100528601 : Record 11012812;
      Customer@1100528602 : Record 18;
      ItemPriceCPEbySourceType@1100528603 : Record 11071800;
      ServiceSourceTypeSetup@1100528604 : Record 11071726;
      ItemPriceCostPlusEntry@1100528605 : Option;
    BEGIN
      ServiceOrderExtension.GetServOrderExtension("No.");  //db, 22-04-13: C007214

      IF "Service Contract No." <> '' THEN BEGIN
        ServiceContract.GET("Service Contract No.");
        ServiceOrderExtension.VALIDATE("Surcharge % Labor", ServiceContract."Surcharge % Labor");
        ServiceOrderExtension.VALIDATE("Surcharge % Material", ServiceContract."Surcharge % Material");
        ServiceOrderExtension.VALIDATE("Surcharge % Subcontr.", ServiceContract."Surcharge % Subcontr.");
        ServiceOrderExtension.VALIDATE("Surcharge % Plant", ServiceContract."Surcharge % Plant");
        ServiceOrderExtension.VALIDATE("Surcharge % Sundry", ServiceContract."Surcharge % Sundry");
      END ELSE
        IF "Customer No." <> '' THEN BEGIN
          Customer.GET("Customer No.");
          ServiceOrderExtension.VALIDATE("Surcharge % Labor", Customer."Surcharge % Labor");
          ServiceOrderExtension.VALIDATE("Surcharge % Material", Customer."Surcharge % Material");
          ServiceOrderExtension.VALIDATE("Surcharge % Subcontr.", Customer."Surcharge % Subcontr.");
          ServiceOrderExtension.VALIDATE("Surcharge % Plant", Customer."Surcharge % Plant");
          ServiceOrderExtension.VALIDATE("Surcharge % Sundry", Customer."Surcharge % Sundry");
        END;

      IF ServiceSourceTypeSetup.GET("Source Type") THEN
        ItemPriceCostPlusEntry := ServiceSourceTypeSetup."Item Price Cost Plus Entry";
      IF "Customer No." <> '' THEN
        IF ItemPriceCPEbySourceType.GET(ItemPriceCPEbySourceType.Type::Customer, "Customer No.", "Source Type") THEN
          ItemPriceCostPlusEntry := ItemPriceCPEbySourceType."Item Price Cost Plus Entry";
      IF "Service Contract No." <> '' THEN
        IF ItemPriceCPEbySourceType.GET(ItemPriceCPEbySourceType.Type::Contract, "Service Contract No.", "Source Type") THEN
          ItemPriceCostPlusEntry := ItemPriceCPEbySourceType."Item Price Cost Plus Entry";

      ServiceOrderExtension.VALIDATE("Item Price Cost Plus Entry", ItemPriceCostPlusEntry);
      ServiceOrderExtension.UpdateServOrderExtension("No.");
    END;

    PROCEDURE ActivateServOrderCard@1210190034();
    VAR
      ServiceSetup@1100525000 : Record 11012800;
      ServiceOrder@1100409000 : Record 11012823;
    BEGIN
      ServiceSetup.GET;
      ServiceOrder := Rec;  //db, 28-09-12: C002699
      IF ServiceSetup."Page ID Order" <> 0 THEN
        PAGE.RUN(ServiceSetup."Page ID Order", ServiceOrder)
      ELSE
        PAGE.RUN(PAGE::"Service Order (General)", ServiceOrder);
    END;

    PROCEDURE ActivateVesselServOrderCard@1100525029();
    VAR
      ServiceOrder@1100409000 : Record 11012823;
    BEGIN
      //kzwerver, 140212, n, #C011037
      ServiceOrder := Rec;
      PAGE.RUN(PAGE::"Vessel Service Order", ServiceOrder);
    END;

    PROCEDURE UpdateCustomerProblem@1210190035();
    VAR
      CustomerServiceAnalysis@1210190000 : Record 11071728;
    BEGIN
      IF ("Customer No." = '') OR (Problem = '') THEN
        EXIT;
      CustomerServiceAnalysis.SETRANGE("Analysis Type", CustomerServiceAnalysis."Analysis Type"::Problem);
      CustomerServiceAnalysis.SETRANGE("Customer No.", "Customer No.");
      CustomerServiceAnalysis.SETRANGE("Standard Analysis Code", Problem);
      IF CustomerServiceAnalysis.COUNT = 1 THEN BEGIN
        CustomerServiceAnalysis.FINDFIRST;
        VALIDATE("Customer Problem", CustomerServiceAnalysis.Code);
      END;
    END;

    PROCEDURE UpdateConfirmationLetter@1100528612();
    VAR
      ServiceOrderExtension@1100528601 : Record 11071727;
      Customer@1100528602 : Record 18;
      ServiceSetup@1100528600 : Record 11012800;
    BEGIN
      IF "Source Type" <> "Source Type"::Contract THEN
        EXIT;
      IF NOT Customer.GET("Customer No.") THEN
        Customer.INIT;

      IF Customer."Maintenance Appointments by" = Customer."Maintenance Appointments by"::Letter THEN BEGIN
        ServiceOrderExtension.GetServOrderExtension("No.");
        ServiceOrderExtension."Appointment Letter Code" := Customer."SO Appointment Letter Code";
        IF ServiceOrderExtension."Appointment Letter Code" = '' THEN BEGIN
          ServiceSetup.GET;
          ServiceOrderExtension."Appointment Letter Code" := ServiceSetup."Default SO Appointm. Letter";
        END;
        ServiceOrderExtension.UpdateServOrderExtension("No.");
      END;
    END;

    PROCEDURE EditDocuments@1100528702(ContactNo@1210190003 : Code[20];ContactPersonNo@1210190004 : Code[20];SendMail@1210190002 : Boolean;Recipient@1100528700 : Text[120]);
    VAR
      DocumentTemplate@1210190001 : Record 11012401;
      DocumentMailing@1210190000 : Codeunit 11012278;
      RecRef@1100525000 : RecordRef;
      DocumentLinkRIDs@1100525001 : ARRAY [5] OF RecordID;
    BEGIN
      RecRef.GETTABLE(Rec);
      DocumentLinkRIDs[1] := RecRef.RECORDID;

      DocumentMailing.EditDocuments(
        STRSUBSTNO('%1', DocumentTemplate.Type::"Service Order"), DocumentLinkRIDs,
        "Global Dimension 1 Code", ContactNo, ContactPersonNo, SendMail, Recipient);
    END;

    PROCEDURE TestCustomerLocation@1100528614();
    BEGIN
      ServLocRec.GET("Service Location No.");
      IF ServLocRec."Customer No." <> '' THEN
        TESTFIELD("Customer No.", ServLocRec."Customer No.");
    END;

    PROCEDURE TestCustomerContract@1100528615();
    BEGIN
      ServContrRec.GET("Service Contract No.");
      IF ServContrRec."Customer No." <> '' THEN  //mg, 03-05-11: M27178
        TESTFIELD("Customer No.", ServContrRec."Customer No.");
    END;

    PROCEDURE ShowObjectSpecificationLines@1210190038();
    VAR
      ServiceOrderObjSpecLine@1210190000 : Record 11071782;
    BEGIN
      TESTFIELD("No.");
      ServiceOrderObjSpecLine.SETRANGE("Service Order No.", "No.");
      PAGE.RUNMODAL(0, ServiceOrderObjSpecLine);
    END;

    PROCEDURE ShowTodos@1100528700();
    VAR
      Todo@1100528700 : Record 5080;
    BEGIN
      Todo.SETRANGE("Service Order No.", "No.");
      Todo.SETRANGE("System To-do Type", Todo."System To-do Type"::Organizer);
      PAGE.RUNMODAL(PAGE::"To-do List", Todo);
    END;

    PROCEDURE UpdateFinishedObjects@1100525035();
    VAR
      ServiceOrderObject@1100525000 : Record 11071724;
    BEGIN
      ServiceOrderObject.SETRANGE("Service Order No.", "No.");
      IF ServiceOrderObject.FINDSET THEN
        REPEAT
          ServiceOrderObject.UpdateFinishedFromBudgetLines;
        UNTIL ServiceOrderObject.NEXT = 0;
    END;

    PROCEDURE ServiceOrderLinesExist@3() : Boolean;
    VAR
      SOCostPlusEntry@1100528800 : Record 11012825;
    BEGIN
      // dp00116.n
      SOCostPlusEntry.SETRANGE("Service Order No.","No.");
      EXIT(SOCostPlusEntry.FINDFIRST);
    END;

    PROCEDURE RecreateServiceOrderLines@4();
    VAR
      SOCostPlusEntry@1100528801 : Record 11012825;
      Confirmed@1100528800 : Boolean;
    BEGIN
      // dp00116.n
      IF ServiceOrderLinesExist THEN BEGIN
        IF (NOT GUIALLOWED) THEN
          Confirmed := TRUE
        ELSE
          Confirmed :=
            CONFIRM(Text106, FALSE);
        IF Confirmed THEN BEGIN
          SOCostPlusEntry.SETRANGE("Service Order No.","No.");
          IF SOCostPlusEntry.FINDSET THEN BEGIN
            REPEAT
              SOCostPlusEntry.TESTFIELD(Invoiced,FALSE);
              SOCostPlusEntry.TESTFIELD("Invoice in Process (LCY)",0);
              SOCostPlusEntry.TESTFIELD("Invoiced Price",0);
              SOCostPlusEntry.TESTFIELD("Credit Memo in Process (LCY)",0);

              SOCostPlusEntry."Currency Code" := "Currency Code";
              SOCostPlusEntry.CalculateBasicPriceFromLCY;
              SOCostPlusEntry.CalculateCostPriceFromLCY;
              SOCostPlusEntry.CalculateSalesPriceFromLCY;
              SOCostPlusEntry.CalculateInvoicePriceFromLCY;
              SOCostPlusEntry.CalculateGrossPriceFromLCY;
              SOCostPlusEntry.MODIFY;
            UNTIL SOCostPlusEntry.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE CalcServiceOrderAmountFromLCY@1100528802();
    VAR
      CurrencyDate@1100528802 : Date;
      CurrencyExchangeRate@1100528801 : Record 330;
      Currency2@1100528800 : Record 4;
    BEGIN
      // dp00116.n
      Currency2.InitRoundingPrecision;
      IF "Currency Code" <> '' THEN BEGIN
        CurrencyDate := "Order Date";
        "Order Amount" :=
        ROUND(
          CurrencyExchangeRate.ExchangeAmtLCYToFCY(
            0, '', CurrencyDate, "Currency Code", "Order Amount (LCY)",
             CurrencyExchangeRate.ExchangeRate(0, '', CurrencyDate, "Currency Code",TRUE),TRUE),
             Currency2."Amount Rounding Precision");
      END ELSE BEGIN
        "Order Amount" := ROUND("Order Amount (LCY)",Currency2."Amount Rounding Precision");
      END;
    END;

    PROCEDURE CreateSalesInvoiceViaCollList@1100409006();
    VAR
      ServiceOrder@1100409000 : Record 11012823;
    BEGIN
      IF "Base Service Order" = FALSE THEN  //DP01008
        TESTFIELD("Collect Invoices By", "Collect Invoices By"::ServOrder)
      ELSE
        TESTFIELD("Base Service Order", TRUE);
      ServiceOrder := Rec;
      ServiceOrder.SETRECFILTER;
      ServiceOrder.CreateSalesInvoiceViaCollLists;
    END;

    PROCEDURE CreateSalesInvoiceViaCollLists@1100528627();
    VAR
      ServiceOrder@1100409000 : Record 11012823;
    BEGIN
      ServiceOrder.COPY(Rec);
      SETRANGE("Base Service Order", TRUE);
      IF "Glazing Service Call No." <> '' THEN  //C028240
        ServiceOrder.SETRANGE("Glazing Service Call No.", "Glazing Service Call No.");
      REPORT.RUNMODAL(REPORT::"Create Service Order Invoice", TRUE, FALSE, ServiceOrder);
    END;

    PROCEDURE TestSCPeriodClosed@1210190040();
    VAR
      ServiceContractCtrlPeriod@1210190000 : Record 11071746;
    BEGIN
      IF ("Service Contract No." = '') OR ("Service Control Period Date" = 0D) THEN
        EXIT;

      ServiceContractCtrlPeriod.SETRANGE("Service Contract No.", "Service Contract No.");
      ServiceContractCtrlPeriod.SETFILTER("Date Finished", '<>%1', 0D);
      ServiceContractCtrlPeriod.SETFILTER("Ending Date", '>=%1', "Service Control Period Date");
      IF ServiceContractCtrlPeriod.FINDFIRST THEN
        MESSAGE(Text107, FIELDCAPTION("Service Control Period Date"), ServiceContractCtrlPeriod.Code, ServiceContractCtrlPeriod."Service Contract No.");
    END;

    PROCEDURE CopyCustomerNotGlobalDims@1100525036();
    VAR
      GLSetup@1210190002 : Record 98;
      DefDimCust@1210190000 : Record 352;
      DefDimServOrder@1210190001 : Record 352;
    BEGIN
      //*  (24651.n
      IF ("Customer No." = '') OR ("Service Contract No." <> '') THEN
        EXIT;
      GLSetup.GET;

      DefDimCust.SETRANGE("Table ID", DATABASE::Customer);
      DefDimCust.SETRANGE("No.", "Customer No.");
      DefDimCust.SETFILTER("Dimension Code", '<>%1&<>%2', GLSetup."Global Dimension 1 Code", GLSetup."Global Dimension 2 Code");
      IF DefDimCust.FINDSET THEN BEGIN
        REPEAT
          IF NOT DefDimServOrder.GET(DATABASE::"Service Order", "No.", DefDimCust."Dimension Code") THEN BEGIN
            DefDimServOrder := DefDimCust;
            DefDimServOrder."Table ID" := DATABASE::"Service Order";
            DefDimServOrder."No." := "No.";
            DefDimServOrder.INSERT;
          END ELSE BEGIN
            IF DefDimServOrder."Dimension Value Code" <> DefDimCust."Dimension Value Code" THEN BEGIN
              DefDimServOrder."Dimension Value Code" := DefDimCust."Dimension Value Code";
              DefDimServOrder."Value Posting" := DefDimCust."Value Posting";
              DefDimServOrder.MODIFY;
            END;
          END;
        UNTIL DefDimCust.NEXT = 0;
      END;

      UpdateServAnalysisNotGlobDims;
    END;

    PROCEDURE GetServiceOrderCard@1100525034() : Integer;
    VAR
      ServiceSetup@1100525001 : Record 11012800;
      ServiceOrder@1100525000 : Record 11012823;
    BEGIN
      ServiceSetup.GET;

      IF ServiceSetup."Page ID Order" <> 0 THEN BEGIN
        EXIT(ServiceSetup."Page ID Order");
      END ELSE BEGIN
        ServiceOrder := Rec;
        ServiceOrder.SETRECFILTER;
        IF ServiceSetup."SO (Plan) Ref. Point Filter" <> '' THEN BEGIN
          ServiceOrder.SETFILTER("Actual Reference Point (Gantt)", ServiceSetup."SO (Plan) Ref. Point Filter");
          IF ServiceOrder.FINDFIRST THEN BEGIN
            EXIT(PAGE::"Service Order (Plan)");
          END;
        END;
        IF ServiceSetup."SO (Prepare) Ref. Point Filter" <> '' THEN BEGIN
          ServiceOrder.SETFILTER("Actual Reference Point (Gantt)", ServiceSetup."SO (Prepare) Ref. Point Filter");
          IF ServiceOrder.FINDFIRST THEN BEGIN
            EXIT(PAGE::"Service Order (Preparation)");
          END;
        END;
        IF ServiceSetup."SO (Review) Ref. Point Filter" <> '' THEN BEGIN
          ServiceOrder.SETFILTER("Actual Reference Point (Gantt)", ServiceSetup."SO (Review) Ref. Point Filter");
          IF ServiceOrder.FINDFIRST THEN BEGIN
            EXIT(PAGE::"Service Order (Review)");
          END;
        END;
        IF ServiceSetup."SO (Invoice) Ref. Point Filter" <> '' THEN BEGIN
          ServiceOrder.SETFILTER("Actual Reference Point (Gantt)", ServiceSetup."SO (Invoice) Ref. Point Filter");
          IF ServiceOrder.FINDFIRST THEN BEGIN
            EXIT(PAGE::"Service Order (Invoicing)");
          END;
        END;
      END;
      EXIT(PAGE::"Service Order (General)");
    END;

    PROCEDURE ShowServiceOrderCard@1100528613();
    BEGIN
      PAGE.RUN(GetServiceOrderCard(), Rec);
    END;

    PROCEDURE CreateSubcontrPurchaseOrder@1100528621();
    VAR
      Vendor@1100528604 : Record 23;
      AdviceOrderLine@1100528602 : Record 11012055;
      TmpAdviceOrderLine@1100528605 : TEMPORARY Record 11012055;
      PurchaseLine@1100528603 : Record 39;
      PurchaseHeader@1100528601 : Record 38;
      ResourceWOP@1100528607 : Record 11229278;
      AdviceOrderManagement@1100528600 : Codeunit 11012041;
      VendorNo@1100528606 : Code[20];
    BEGIN
      IF Subcontractor = '' THEN
        EXIT;

      IF NOT ResourceWOP.GET(Subcontractor) THEN
        EXIT;
      IF ResourceWOP.Company <> COMPANYNAME THEN
        EXIT;

      IF NOT Vendor.GET(ResourceWOP."Source No.") THEN
        EXIT;

      AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::ServOrder);
      AdviceOrderLine.SETRANGE(Vendor, Vendor."No.");
      AdviceOrderLine.SETRANGE("Service Order No.", "No.");
      AdviceOrderLine.SETFILTER("Process Status", '<%1', AdviceOrderLine."Process Status"::Cancelled);
      IF AdviceOrderLine.FINDSET THEN BEGIN
        IF Vendor."Direct Post Order ICM" THEN
          REPEAT
            TmpAdviceOrderLine := AdviceOrderLine;
            TmpAdviceOrderLine.INSERT;
          UNTIL AdviceOrderLine.NEXT = 0;
        COMMIT; // Next process has a runmodal
        AdviceOrderManagement.ProcessPurchase(AdviceOrderLine, FALSE, FALSE);

        IF TmpAdviceOrderLine.FINDSET THEN BEGIN
          REPEAT
            AdviceOrderLine.GET(
              TmpAdviceOrderLine."Record Type", TmpAdviceOrderLine."Project No.",
              TmpAdviceOrderLine."Service Order No.", TmpAdviceOrderLine."Line No.");

            IF AdviceOrderLine."Purchase Route Reference" <> '' THEN BEGIN
              PurchaseLine.SETCURRENTKEY("Document Type", "Purchase Route Reference");
              PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
              PurchaseLine.SETRANGE("Purchase Route Reference", AdviceOrderLine."Purchase Route Reference");
              IF PurchaseLine.FINDSET THEN
                REPEAT
                  IF PurchaseHeader.GET(PurchaseLine."Document Type", PurchaseLine."Document No.") THEN
                    PurchaseHeader.MARK(TRUE);
                UNTIL PurchaseLine.NEXT = 0;
            END;
          UNTIL TmpAdviceOrderLine.NEXT = 0;
          PurchaseHeader.MARKEDONLY(TRUE);
          PurchaseHeader.DirectPosting;
        END;
      END;
    END;

    PROCEDURE CheckAndChangeStatusBaseOrder@1100528618(INewSOStatus@1100409000 : Integer);
    VAR
      ServiceSetup@1100528600 : Record 11012800;
      ServiceOrder@1100528601 : Record 11012823;
    BEGIN
      ServiceSetup.GET;

      IF NOT ServiceSetup."Update Status Base Order" THEN
        EXIT;

      ServiceOrder.SETCURRENTKEY("Base Service Order No.");
      ServiceOrder.SETRANGE("Base Service Order No.", "Base Service Order No.");
      ServiceOrder.SETRANGE("Base Service Order", FALSE);
      ServiceOrder.SETFILTER("No.", '<>%1', "No.");
      ServiceOrder.SETFILTER(Status, '<>%1', INewSOStatus);
      IF ServiceOrder.ISEMPTY THEN BEGIN
        ServiceOrder.GET("Base Service Order No.");
        IF ServiceOrder.Status < INewSOStatus THEN BEGIN
          ServiceOrder.VALIDATE(Status, INewSOStatus);
          ServiceOrder.HandleStatusChange;
        END;
      END;
    END;

    PROCEDURE HandleStatusChange@1100409000();
    VAR
      Employee@1100409002 : Record 5200;
      WorkOrder@1100409001 : Record 11229279;
      DeletedWorkOrderCache@1100409000 : Record 11229281;
      OldServiceOrder@1100525000 : Record 11012823;
    BEGIN
      IF ((xRec.Status <> Status:: Finished) AND (Status = Status::Finished)) OR
         ((xRec.Status = Status:: Finished) AND (Status <> Status::Finished)) THEN
        ERROR(Text002);
      IF (Status = Status::Cancelled) THEN BEGIN  //db, 22-03-10: M18714
        CheckCommitments;
        CheckWIP;
        //DP00465.sc  (EmplBySO -> WorkOrder/SO, and DeletedServiceOrderCache -> DeletedWorkOrderCache)
        //When order is canceled remove the order from the PDA (Test Call 4705)
        WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
        WorkOrder.SETRANGE("Source Company", COMPANYNAME);
        WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
        WorkOrder.SETRANGE("Source No.", "No.");
        WorkOrder.SETRANGE("Resource Type", WorkOrder."Resource Type"::Employee);
        WorkOrder.SETFILTER("Resource No.", '<>%1', '');
        WorkOrder.SETRANGE("Active in FSA", TRUE);
        IF WorkOrder.FINDSET THEN BEGIN
          REPEAT
            WorkOrder.UpdateDeletedWorkOrderCache(WorkOrder, 'D');
          UNTIL WorkOrder.NEXT = 0;
        END;
        //DP00465.ec (EmplBySO -> WorkOrder/SO, and DeletedServiceOrderCache -> DeletedWorkOrderCache)
        CommunicateOrderToFLS(3); //DP00703.n
      END;
      IF CheckBlockedByFSA() THEN
        ERROR(Text009, FIELDCAPTION(Status), TABLECAPTION);
      //db.sn, 21-03-11
      SaveField := CurrFieldNo;  //db, 09-05-11: M27257
      SetSkipUpdateDocRefPoint(TRUE);

      IF MODIFY(TRUE) THEN
        ProgPhaseRec.CheckProgressScheme(ProgPhaseRec.Type::ServOrder, "Progress Scheme", "No.", Status, TODAY, TIME);
      SetSkipUpdateDocRefPoint(FALSE);
      SaveField := 0;  //db, 09-05-11: M27257
      //db.en, 21-03-11
      //jd.sn, 06-04-11
      SetSkipStatusCheck(TRUE);
      CheckUpdateDocRefPoint('M');
      IF OldServiceOrder.GET("No.") THEN
        IF OldServiceOrder."Actual Reference Point (Gantt)" <> "Actual Reference Point (Gantt)" THEN BEGIN
          OldServiceOrder."Actual Reference Point (Gantt)" := "Actual Reference Point (Gantt)";
          FIND;
          "Actual Reference Point (Gantt)" := OldServiceOrder."Actual Reference Point (Gantt)";
        END;
      UpdateNextDeadline;
      SetSkipStatusCheck(FALSE);
      IF MODIFY THEN;
      //jd.en, 06-04-11
      //db, 07-04-11: no update actions beyond this point, due to problem with transaction swich off by smtp.sendmail

      UpdateContractArrangements;
    END;

    PROCEDURE HandleStatusChangeLinkedOrders@1100528655();
    BEGIN
      IF "Base Service Order" AND (Status = Status::"Administrative Finished") THEN
        ChangeStatusLinkedSOs;
      IF NOT "Base Service Order" AND
         ((Status = Status::"Technical Finished") OR (Status = Status::"Administrative Finished")) THEN
        CheckAndChangeStatusBaseOrder(Status);
    END;

    PROCEDURE DocumentsCreatedByFSA@1100409001() : Boolean;
    VAR
      RecRef@1100525000 : RecordRef;
      DocumentLinkMgt@1100525001 : Codeunit 11012401;
    BEGIN
      RecRef.GETTABLE(Rec);
      EXIT(DocumentLinkMgt.GetInfoFiltered(RecRef, TRUE)>0);
    END;

    PROCEDURE FillSubcontractor@1100409002();
    VAR
      SubcontractorService@1100409000 : Record 11071789;
    BEGIN
      IF "Source Type" <> "Source Type"::Call THEN
        EXIT;
      VALIDATE(Subcontractor, SubcontractorService.GetSubcontractorResourceNo(
        "Service Contract No.", "Service Location No.", '', '', Discipline, "Trade Speciality"));
    END;

    PROCEDURE DetermineServiceType@1100409003(IOnInsert@1100409000 : Boolean);
    VAR
      SCCustSourceTypeSetup@1100409001 : Record 11071800;
      ServiceSourceTypeSetup@1100409003 : Record 11071726;
      NoSeries@1100525000 : Record 308;
      ServiceType@1100409004 : Code[20];
      ServiceTypeOther@1100409005 : Code[20];
      Level@1100409006 : Integer;
    BEGIN
      IF "No. Series" <> '' THEN BEGIN
        IF NoSeries.GET("No. Series") THEN
          IF NoSeries."Service Type" <> '' THEN BEGIN
            ServiceType := NoSeries."Service Type";
            ServiceTypeOther := NoSeries."Service Type (Other)";
          END;
      END;

      IF ServiceType = '' THEN BEGIN
        IF "Service Contract No." = '' THEN
          Level += 1
        ELSE
          IF "Charge Vendor (Warranty)" THEN
            Level += 1;
        IF (Level = 1) AND ("Customer No." = '') THEN
          Level += 1;
        REPEAT
          CASE Level OF
            0:
              BEGIN
                IF SCCustSourceTypeSetup.GET(SCCustSourceTypeSetup.Type::Contract, "Service Contract No.", "Source Type") THEN BEGIN
                  ServiceType :=  SCCustSourceTypeSetup."Service Type";
                  ServiceTypeOther :=  SCCustSourceTypeSetup."Service Type (Other)";
                END;
              END;
            1:
              BEGIN
                IF SCCustSourceTypeSetup.GET(SCCustSourceTypeSetup.Type::Customer, "Bill-to Customer No.", "Source Type") THEN BEGIN
                  IF ServiceType = '' THEN
                    ServiceType :=  SCCustSourceTypeSetup."Service Type";
                  IF ServiceTypeOther = '' THEN
                    ServiceTypeOther :=  SCCustSourceTypeSetup."Service Type (Other)";
                END;
              END;
            2:
              BEGIN
                IF ServiceSourceTypeSetup.GET("Source Type") THEN BEGIN
                  IF ServiceType = '' THEN
                    ServiceType :=  ServiceSourceTypeSetup."Service Type";
                  IF ServiceTypeOther = '' THEN
                    ServiceTypeOther :=  ServiceSourceTypeSetup."Service Type (Other)";
                END;
              END;
          END;
          Level += 1;
        UNTIL (Level > 2) OR ((ServiceType <> '') AND (ServiceTypeOther <> ''));
      END;

      IF (ServiceType <> '') AND
         (NOT IOnInsert OR ("Service Type" = '')) AND
         (ServiceType <> "Service Type")
      THEN
        VALIDATE("Service Type", ServiceType);
      IF (ServiceTypeOther <> '') AND
         (NOT IOnInsert OR ("Service Type (Other)" = '')) AND
         (ServiceTypeOther <> "Service Type (Other)")
      THEN
        VALIDATE("Service Type (Other)", ServiceTypeOther);
    END;

    PROCEDURE SearchPlantLocation@1100529900() : Boolean;
    VAR
      PlantLocation@1100528601 : Record 11012554;
    BEGIN
      PlantLocation.SETCURRENTKEY("Post Code", "House No.", "House No. Ext.");
      IF PAGE.RUNMODAL(PAGE::"Plant Location Search", PlantLocation) = ACTION::LookupOK THEN BEGIN
        VALIDATE("Plant Location", PlantLocation.Code);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE SearchServiceLocation@1100528619() : Boolean;
    VAR
      ServiceLocation@1100528601 : Record 11012801;
    BEGIN
      ServiceLocation.SETCURRENTKEY("Post Code", "House No.", "House No. Ext.");
      IF PAGE.RUNMODAL(PAGE::"Find Service Location", ServiceLocation) = ACTION::LookupOK THEN BEGIN
        VALIDATE("Service Location No.", ServiceLocation."No.");
        EXIT(TRUE);
      END;
    END;

    PROCEDURE TransferCostRevToProject@1100528622();
    VAR
      ServiceOrder@1100528600 : Record 11012823;
      ServiceOrderExtension@1100528602 : Record 11071727;
      ServiceSetup@1100528603 : Record 11012800;
      TransferServicetoProjectREP@1100528601 : Report 11012777;
    BEGIN
      ServiceOrderExtension.GetServOrderExtension("No.");
      ServiceOrderExtension.TESTFIELD("Master Project");

      ServiceSetup.GET;
      ServiceSetup.TESTFIELD("Service to Project", ServiceSetup."Service to Project"::"Transfer Cost and Revenue");

      ServiceOrder.COPY(Rec);
      ServiceOrder.SETRECFILTER;
      TransferServicetoProjectREP.SETTABLEVIEW(ServiceOrder);
      TransferServicetoProjectREP.RUNMODAL;
    END;

    PROCEDURE StartServOrders@1100409004(lvAction@1100485000 : Integer;lvCount@1100485001 : Boolean) : Integer;
    VAR
      lvServOrderRec@1100485002 : Record 11012823;
    BEGIN
      //db, 31-12-12: moved from form to table, not yet integrated with same function of codeunit 11012825

      //C026176.sn
      IF lvCount AND ("No." = '') THEN
        EXIT(0);
      //C026176.en

      lvServOrderRec.SETFILTER("No.", '<>%1', "No.");
      CASE lvAction OF
        0:
          BEGIN
            lvServOrderRec.SETCURRENTKEY("Service Contract No.");
            lvServOrderRec.SETRANGE("Service Contract No.", "Service Contract No.");
            IF (lvCount = TRUE) AND ("Service Contract No." = '') THEN EXIT(0);
          END;
        1:
          BEGIN
            lvServOrderRec.SETCURRENTKEY("Service Location No.");
            lvServOrderRec.SETRANGE("Service Location No.", "Service Location No.");
            IF (lvCount = TRUE) AND ("Service Location No." = '') THEN EXIT(0);
          END;
        2:
          BEGIN
            lvServOrderRec.SETCURRENTKEY("Call No.");
            lvServOrderRec.SETRANGE("Call No.", "Call No.");
            lvServOrderRec.SETRANGE("Source Type", lvServOrderRec."Source Type"::Call);
            IF (lvCount = TRUE) AND ("Call No." = '') THEN EXIT(0);
          END;
        3:
          BEGIN
            IF NOT lvCount THEN BEGIN
              IF "Base Service Order No." = '' THEN
                EXIT(0);
              lvServOrderRec.SETRANGE("No.", "Base Service Order No.");
              lvServOrderRec.FINDFIRST;
              PAGE.RUNMODAL(PAGE::"Base Service Order", lvServOrderRec);
              EXIT(0);
            END ELSE BEGIN
              lvServOrderRec.SETCURRENTKEY("Base Service Order No.");
              lvServOrderRec.SETRANGE("Base Service Order No.", "Base Service Order No.");
              IF ("Base Service Order No."= '') THEN EXIT(0);
              EXIT(lvServOrderRec.COUNT);
            END;
          END;
        9:  //db, 31-12-12: 30184
          BEGIN
            lvServOrderRec.SETCURRENTKEY("Glazing Service Call No.");
            lvServOrderRec.SETRANGE("Glazing Service Call No.", "Glazing Service Call No.");
            //lvServOrderRec.SETRANGE("Source Type", lvServOrderRec."Source Type"::Call);  //db, 20-03-13: T001508
            IF (lvCount = TRUE) AND ("Glazing Service Call No." = '') THEN EXIT(0);
          END;
      END;

      IF lvCount = FALSE THEN BEGIN
        PAGE.RUNMODAL(0, lvServOrderRec);
      END ELSE BEGIN
        EXIT(lvServOrderRec.COUNT);
      END;
    END;

    PROCEDURE DetermineBilltoCustomerbySC@1100528623();
    VAR
      SCCustSourceTypeSetup@1100528600 : Record 11071800;
      ServiceContract@1100528601 : Record 11012812;
      ServiceLocation@1100528602 : Record 11012801;
    BEGIN
      IF "Service Contract No." = '' THEN
        EXIT;
      IF NOT ServiceContract.GET("Service Contract No.") THEN
        EXIT;
      IF ("Service Location No." <> '') AND
         SCCustSourceTypeSetup.GET(SCCustSourceTypeSetup.Type::Contract, "Service Contract No.", "Source Type") AND
         (SCCustSourceTypeSetup."Bill-to" = SCCustSourceTypeSetup."Bill-to"::"Service Location")
      THEN BEGIN
        IF ServiceLocation.GET("Service Location No.") THEN BEGIN
          IF ServiceLocation."Customer No." <> '' THEN
            VALIDATE("Bill-to Customer No.", ServiceLocation."Customer No.");
          IF ServiceLocation."Address Code" <> '' THEN
            VALIDATE("Alternative Bill-to Address", ServiceLocation."Address Code");
        END;
      END ELSE BEGIN
        IF ServiceContract."Bill-to Customer No. (CP)" <> '' THEN
          VALIDATE("Bill-to Customer No.", ServiceContract."Bill-to Customer No. (CP)");
        IF ServiceContract."Alt. Bill-to Address (CP)" <> '' THEN
          VALIDATE("Alternative Bill-to Address", ServiceContract."Alt. Bill-to Address (CP)");
      END;
      CheckInvoiceAddress;
    END;

    PROCEDURE CreateInvoiceText@1100409005();
    VAR
      Customer@1100409000 : Record 18;
      ServiceText@1100409005 : Record 11012882;
      TextFunctionManagement@1100409001 : Codeunit 11012357;
      InvoiceText@1100409002 : Text[250];
      EndPos@1100409004 : Integer;
    BEGIN
      IF "Bill-to Customer No." = '' THEN
        EXIT;
      IF NOT Customer.GET("Bill-to Customer No.") THEN
        EXIT;
      IF Customer."Invoice Text Cost Plus" = '' THEN
        EXIT;

      ServiceText.SETRANGE("Table Name", ServiceText."Table Name"::"Service Order");
      ServiceText.SETRANGE("No.", "No.");
      ServiceText.SETRANGE("Table Field", 93);
      ServiceText.DELETEALL(TRUE);

      InvoiceText := Customer."Invoice Text Cost Plus";
      REPEAT
        IF STRLEN(InvoiceText) > MAXSTRLEN(ServiceText.Comment) THEN
          EndPos := TextFunctionManagement.GetSplitPosition(InvoiceText, MAXSTRLEN(ServiceText.Comment))
        ELSE
          EndPos := STRLEN(InvoiceText);
        IF EndPos > 0 THEN BEGIN
          ServiceText."Table Name" := ServiceText."Table Name"::"Service Order";
          ServiceText."No." := "No.";
          ServiceText."Table Field" := 93;
          ServiceText."Line No." += 10000;
          ServiceText.Comment := COPYSTR(InvoiceText, 1, EndPos);
          ServiceText.SetUpNewLine;
          ServiceText.INSERT(TRUE);
          InvoiceText := COPYSTR(InvoiceText, EndPos +1, MAXSTRLEN(ServiceText.Comment));
        END;
      UNTIL (EndPos = 0) OR (InvoiceText = '');
    END;

    PROCEDURE DisconnectNextServiceOrder@1100528624(IConfirm@1100528600 : Boolean);
    VAR
      ServiceOrderCostPlusEntry@1100528601 : Record 11012825;
    BEGIN
      TESTFIELD("Base Service Order", FALSE);

      IF IConfirm AND GUIALLOWED THEN
        IF NOT CONFIRM(Text109) THEN
          ERROR('');

      ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", "No.");
      ServiceOrderCostPlusEntry.SETRANGE(Invoiced, TRUE);
      IF NOT ServiceOrderCostPlusEntry.ISEMPTY THEN
        ERROR(Text110);

      VALIDATE("Base Service Order", TRUE);
      VALIDATE("Base Service Order No.", "No.");
      VALIDATE("Previous Service Order No.", '');
      MODIFY(TRUE);

      UpdateBaseServiceOrder("No.", "No.");

      IF "Collective List No." <> '' THEN BEGIN
        xRec := Rec;
        VALIDATE("Collective List No.", '');
      END;
      MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBaseServiceOrder@1100528625(IServiceOrderNo@1100528600 : Code[20];INewBaseServiceOrderNo@1100528601 : Code[20]);
    VAR
      ServiceOrder@1100528602 : Record 11012823;
    BEGIN
      ServiceOrder.SETCURRENTKEY("Previous Service Order No.");
      ServiceOrder.SETRANGE("Previous Service Order No.", IServiceOrderNo);
      IF NOT ServiceOrder.ISEMPTY THEN BEGIN
        IF ServiceOrder.FINDSET(TRUE) THEN
          REPEAT
            UpdateBaseServiceOrder(ServiceOrder."No.", INewBaseServiceOrderNo);
            ServiceOrder.VALIDATE("Base Service Order No.", INewBaseServiceOrderNo);
            ServiceOrder.MODIFY(TRUE);
          UNTIL ServiceOrder.NEXT = 0;
      END;
    END;

    PROCEDURE SelectAndConnectToBaseServiceOrder@1100528635();
    BEGIN
      SelectAndConnectToBaseServiceOrder2(0);
    END;

    PROCEDURE SelectAndConnectToBaseVesselServiceOrder@1100528406();
    BEGIN
      SelectAndConnectToBaseServiceOrder2(PAGE::"Vessel Service Order List");
    END;

    LOCAL PROCEDURE SelectAndConnectToBaseServiceOrder2@1100528408(LookupPageNo@1100528400 : Integer);
    VAR
      ServiceOrder@1100528600 : Record 11012823;
    BEGIN
      TESTFIELD("Base Service Order", TRUE);
      IF HasNextServiceOrders THEN
        ERROR(Text113, "No.");
      ServiceOrder.SETCURRENTKEY("Base Service Order");
      ServiceOrder.SETRANGE("Base Service Order", TRUE);
      ServiceOrder.SETRANGE("Customer No.", "Customer No.");
      ServiceOrder.SETRANGE("Bill-to Customer No.", "Bill-to Customer No.");
      ServiceOrder.SETRANGE("Service Contract No.", "Service Contract No.");
      ServiceOrder.SETRANGE("Service Location No.", "Service Location No.");
      ServiceOrder.SETFILTER("No.", '<>%1', "No.");
      IF PAGE.RUNMODAL(LookupPageNo, ServiceOrder) = ACTION::LookupOK THEN
        ConnectToBaseServiceOrder(ServiceOrder."No.");
    END;

    PROCEDURE ConnectToBaseServiceOrder@1100528636(IBaseServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceOrder@1100528601 : Record 11012823;
    BEGIN
      TESTFIELD("Base Service Order", TRUE);
      IF HasNextServiceOrders THEN
        ERROR(Text113, "No.");
      ServiceOrder.GET(IBaseServiceOrderNo);
      ServiceOrder.TESTFIELD("Base Service Order");
      IF ("Collective List No." <> '') AND (ServiceOrder."Collective List No." <> '') THEN
        TESTFIELD("Collective List No.", ServiceOrder."Collective List No.")
      ELSE
        TESTFIELD("Collective List No.", '');
      TESTFIELD("Customer No.", ServiceOrder."Customer No.");
      TESTFIELD("Bill-to Customer No.", ServiceOrder."Bill-to Customer No.");
      TESTFIELD("Service Contract No.", ServiceOrder."Service Contract No.");
      TESTFIELD("Service Location No.", ServiceOrder."Service Location No.");

      VALIDATE("Base Service Order", FALSE);
      VALIDATE("Base Service Order No.", IBaseServiceOrderNo);
      VALIDATE("Previous Service Order No.", IBaseServiceOrderNo);
      MODIFY(TRUE);
      IF ("Collective List No." = '') AND (ServiceOrder."Collective List No." <> '') THEN BEGIN
        SetDisableBaseOrderCheck;
        VALIDATE("Collective List No.", ServiceOrder."Collective List No.");
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE UseBilltoAsSelltoCustomer@1100528626() : Boolean;
    VAR
      ServiceCollectiveListMgt@1100528602 : Codeunit 11012850;
    BEGIN
      EXIT(ServiceCollectiveListMgt.UseBilltoAsSelltoCustomer("Customer No.", "Service Contract No."));
    END;

    PROCEDURE GetSelectionFilter@1100525010(VAR ServiceOrder@1100525000 : Record 11012823) : Code[250];
    VAR
      SelectionFilter@1003 : Code[250];
      RecordCount@1004 : Integer;
    BEGIN
      //**4PS.n
      RecordCount := ServiceOrder.COUNT;
      IF RecordCount > 0 THEN BEGIN
        ServiceOrder.FINDSET;
        WHILE RecordCount > 0 DO BEGIN
          RecordCount := RecordCount - 1;
          IF SelectionFilter <> '' THEN
            SelectionFilter := SelectionFilter + '|';
          SelectionFilter := SelectionFilter + ServiceOrder."No.";
          IF RecordCount > 0 THEN
            ServiceOrder.NEXT;
        END;
      END;
      EXIT(SelectionFilter);
    END;

    PROCEDURE DetermineDiscountGroups@1100529200();
    VAR
      ServiceContract@1100529207 : Record 11012812;
      Customer@1100529206 : Record 18;
    BEGIN
      IF Customer.GET("Bill-to Customer No.") THEN BEGIN                                    // Usage of customer level is new.
        "Purch Discount Term Group 1" := Customer."Purch Discount Term Group";
        "Sales Discount Term Group 1" := Customer."Sales Discount Term Group";
        //>> ITERO.AC 150904 Copy price list code from customer
        "Price List Code" := Customer."Price List Code";
        //<< ITERO.AC 150904
      END;

      IF ServiceContract.GET("Service Contract No.") THEN BEGIN                             // Usage of contract level was standard.
        IF (ServiceContract."Purch Discount Term Group 1" <> '') OR
           (ServiceContract."Customer No." <> '') THEN
          "Purch Discount Term Group 1" := ServiceContract."Purch Discount Term Group 1";
        "Purch Discount Term Group 2" := ServiceContract."Purch Discount Term Group 2";
        IF (ServiceContract."Sales Discount Term Group 1" <> '') OR
           (ServiceContract."Customer No." <> '') THEN
          "Sales Discount Term Group 1" := ServiceContract."Sales Discount Term Group 1";
        "Sales Discount Term Group 2" := ServiceContract."Sales Discount Term Group 2";
      END;

      IF "Service Location No." <> '' THEN BEGIN                                              // Location Always leading
        IF ServLocRec.GET("Service Location No.") THEN BEGIN
          IF ServLocRec."Purch Discount Term Group 1" <> '' THEN
            "Purch Discount Term Group 1" := ServLocRec."Purch Discount Term Group 1";
          IF ServLocRec."Purch Discount Term Group 2" <> '' THEN
            "Purch Discount Term Group 2" := ServLocRec."Purch Discount Term Group 2";
          IF ServLocRec."Sales Discount Term Group 1" <> '' THEN
            "Sales Discount Term Group 1" := ServLocRec."Sales Discount Term Group 1";
          IF ServLocRec."Sales Discount Term Group 2" <> '' THEN
            "Sales Discount Term Group 2" := ServLocRec."Sales Discount Term Group 2";
        END;
      END;
    END;

    PROCEDURE GetStartingDate@1100528628() : Date;
    BEGIN
      IF "Starting Date" <> 0D THEN
        EXIT("Starting Date");
      IF "Order Date" <> 0D THEN
        EXIT("Order Date");
      EXIT(WORKDATE);
    END;

    PROCEDURE IsOldMaintenanceServiceOrder@1100525026() : Boolean;
    VAR
      ServiceOrderObject@1100528601 : Record 11071724;
    BEGIN
      TESTFIELD("Source Type", "Source Type"::Contract);
      ServiceOrderObject.SETRANGE("Service Order No.", "No.");
      ServiceOrderObject.SETFILTER("Source Line No.", '<>%1', 0);
      EXIT(ServiceOrderObject.ISEMPTY);
    END;

    PROCEDURE UpdateContractArrangements@1100525014();
    VAR
      ServiceOrderObject@1100525000 : Record 11071724;
      ContractObjectMaintenance@1100525001 : Record 11071692;
    BEGIN
      IF "Source Type" <> "Source Type"::Contract THEN
        EXIT;
      ServiceOrderObject.SETRANGE("Service Order No.", "No.");
      ServiceOrderObject.SETFILTER("Maintenance Scheme", '<>%1', '');
      IF ServiceOrderObject.FINDSET THEN
        REPEAT
          IF ContractObjectMaintenance.GET(
            ServiceOrderObject."Service Contract No.", ServiceOrderObject."Object No.", ServiceOrderObject."Maintenance Scheme")
          THEN BEGIN
            ContractObjectMaintenance.UpdateLastAndNextMaintDate;
            ContractObjectMaintenance.MODIFY(TRUE);
          END;
        UNTIL ServiceOrderObject.NEXT = 0;
    END;

    PROCEDURE CheckDurationOnInitServOrder@1100525027();
    BEGIN
      //db, 08-08-13: C007836
      IF "Duration Time" < "Expected Hours" THEN
        VALIDATE("Duration Time", "Expected Hours");
    END;

    PROCEDURE ValidateServiceCluster@1100528633();
    VAR
      ServiceContract@1100528601 : Record 11012812;
      ServiceCluster@1100528600 : Record 11071742;
    BEGIN
      IF "Service Cluster" <> '' THEN BEGIN
        ServiceContract.GET("Service Contract No.");
        IF ServiceContract."Use Contract Clusters" THEN
          ServiceCluster.GET("Service Contract No.", "Service Cluster")
        ELSE
          ServiceCluster.GET('', "Service Cluster");
      END;
    END;

    PROCEDURE LookupServiceCluster@1100528632();
    VAR
      ServiceContract@1100528600 : Record 11012812;
      ServiceCluster@1100528601 : Record 11071742;
    BEGIN
      IF NOT ServiceContract.GET("Service Contract No.") THEN
        ServiceContract.INIT;
      IF ServiceContract."Use Contract Clusters" THEN BEGIN
        ServiceCluster.SETRANGE("Service Contract No.", "Service Contract No.");
        IF "Service Cluster" <> '' THEN
          ServiceCluster.GET("Service Contract No.", "Service Cluster");
      END ELSE BEGIN
        ServiceCluster.SETRANGE("Service Contract No.", '');
        IF "Service Cluster" <> '' THEN
          ServiceCluster.GET('', "Service Cluster");
      END;
      PAGE.RUNMODAL(0, ServiceCluster);
    END;

    PROCEDURE ValidateServiceClusterSeqn@1100528631();
    VAR
      ServiceContract@1100528601 : Record 11012812;
      ServiceClusterSeq@1100528600 : Record 11071966;
    BEGIN
      IF ("Service Cluster" <> '') AND ("Service Cluster Seqn." <> 0) THEN BEGIN
        ServiceContract.GET("Service Contract No.");
        IF ServiceContract."Use Contract Clusters" THEN
          ServiceClusterSeq.GET("Service Contract No.", "Service Cluster", "Service Cluster Seqn.")
        ELSE
          ServiceClusterSeq.GET('', "Service Cluster", "Service Cluster Seqn.");
      END;
    END;

    PROCEDURE LookupServiceClusterSeqn@1100528630();
    VAR
      ServiceContract@1100528600 : Record 11012812;
      ServiceClusterSeq@1100528601 : Record 11071966;
    BEGIN
      IF NOT ServiceContract.GET("Service Contract No.") THEN
        ServiceContract.INIT;
      IF ServiceContract."Use Contract Clusters" THEN BEGIN
        ServiceClusterSeq.SETRANGE("Service Contract No.", "Service Contract No.");
        ServiceClusterSeq.SETRANGE("Cluster Code", "Service Cluster");
        IF "Service Cluster Seqn." <> 0 THEN
          ServiceClusterSeq.GET("Service Contract No.", "Service Cluster", "Service Cluster Seqn.");
      END ELSE BEGIN
        ServiceClusterSeq.SETRANGE("Service Contract No.", '');
        ServiceClusterSeq.SETRANGE("Cluster Code", "Service Cluster");
        IF "Service Cluster Seqn." <> 0 THEN
          ServiceClusterSeq.GET('', "Service Cluster", "Service Cluster Seqn.");
      END;
      PAGE.RUNMODAL(0, ServiceClusterSeq);
    END;

    PROCEDURE SendAppointment@1100528634(VAR IServiceOrder@1100528604 : Record 11012823);
    VAR
      ServiceOrder@1100528603 : Record 11012823;
      Customer@1100528600 : Record 18;
      ServiceOrderExtension@1100528601 : Record 11071727;
      DocumentPrint@1100528602 : Codeunit 229;
    BEGIN
      ServiceOrder.COPY(IServiceOrder);
      REPORT.RUNMODAL(REPORT::"Send Service Order Appointment", TRUE, TRUE, ServiceOrder);
    END;

    PROCEDURE IsPlantServiceOrder@1100529902() : Boolean;
    BEGIN
      IF "Plant Location" <> '' THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE GetComplexCode@1100528629() : Code[20];
    VAR
      ServiceLocation@1100528600 : Record 11012801;
    BEGIN
      IF ServiceLocation.GET("Service Location No.") THEN
        EXIT(ServiceLocation.GetComplexCode);
    END;

    PROCEDURE SyncServiceLocationData@1100528637(IFieldNo@1100528600 : Integer);
    VAR
      ServiceSetup@1100528601 : Record 11012800;
      ServiceLocation@1100528602 : Record 11012801;
    BEGIN
      ServiceSetup.GET;
      IF NOT ServiceSetup."Sync. Location by Order/Call" THEN
        EXIT;
      IF NOT ServiceLocation.GET("Service Location No.") THEN
        EXIT;
      CASE IFieldNo OF
        FIELDNO(Name):
          ServiceLocation.VALIDATE(Description, Name);
        FIELDNO("Contact Name"):
          ServiceLocation.VALIDATE("Contact Name", "Contact Name");
        FIELDNO("Phone No."):
          ServiceLocation.VALIDATE("Phone No.", "Phone No.");
        FIELDNO("Phone No. 2"):
          ServiceLocation.VALIDATE("Phone No. 2", "Phone No. 2");
        FIELDNO("Mobile Phone No."):
          ServiceLocation.VALIDATE("Mobile Phone No.", "Mobile Phone No.");
        FIELDNO("E-Mail"):
          ServiceLocation.VALIDATE("E-Mail", "E-Mail");
        FIELDNO("Fax No."):
          ServiceLocation.VALIDATE("Fax No.", "Fax No.");
      ELSE
        EXIT;
      END;
      ServiceLocation.MODIFY(TRUE);
    END;

    PROCEDURE HasNextServiceOrders@1100525040() : Boolean;
    VAR
      ServiceOrder@1100525000 : Record 11012823;
    BEGIN
      ServiceOrder.SETCURRENTKEY("Base Service Order No.");
      ServiceOrder.SETRANGE("Base Service Order No.", "No.");
      ServiceOrder.SETRANGE("Base Service Order", FALSE);
      EXIT(NOT ServiceOrder.ISEMPTY);
    END;

    PROCEDURE LookupResourceEmpl@1100527004(VAR ResourceNo@1100527002 : Code[20];EditableMode@1100527003 : Boolean);
    VAR
      Resource@1100527000 : Record 11229278;
      WorkOrder@1100527001 : Record 11229279;
    BEGIN
      //DP00465
      IF NOT UpdateResourceWorkOrderAllowed(WorkOrder."Resource Type"::Employee) THEN BEGIN
        WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
        WorkOrder.SETRANGE("Source Company", COMPANYNAME);
        WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
        WorkOrder.SETRANGE("Source No.", "No.");
        WorkOrder.SETRANGE("Resource Type", WorkOrder."Resource Type"::Employee);
        WorkOrder.SETFILTER("Resource No.", '<>%1', '');
        IF WorkOrder.FINDSET THEN BEGIN
          REPEAT
            IF Resource.GET(WorkOrder."Resource No.") THEN
              Resource.MARK(TRUE);
          UNTIL WorkOrder.NEXT = 0;
          Resource.MARKEDONLY(TRUE);
          IF Resource.COUNT = 1 THEN
            Resource.MARKEDONLY(FALSE);
        END;
      END;
      Resource.SETRANGE(Type, Resource.Type::Employee);
      Resource.SETFILTER(Schedule, '%1|%2', Resource.Schedule::ServiceOrder, Resource.Schedule::Both);
      IF NOT Resource.GET(ResourceNo) OR (ResourceNo = '') THEN BEGIN
        Resource."No." := ResourceNo;
        Resource.Type := Resource.Type::Employee;
        Resource.Company := COMPANYNAME;
      END;
      IF NOT EditableMode THEN
        PAGE.RUNMODAL(0, Resource)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, Resource) = ACTION::LookupOK THEN BEGIN
          IF (Resource."No." <> ResourceNo) AND (Resource."No." <> '') THEN
            ResourceNo := Resource."No.";
        END;
      END;
    END;

    PROCEDURE LookupResourceSubcontractor@1100528638(VAR ResourceNo@1100527002 : Code[20];EditableMode@1100527003 : Boolean);
    VAR
      Resource@1100527000 : Record 11229278;
      WorkOrder@1100527001 : Record 11229279;
    BEGIN
      //DP00610
      IF NOT UpdateResourceWorkOrderAllowed(WorkOrder."Resource Type"::Subcontractor) THEN BEGIN
        WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
        WorkOrder.SETRANGE("Source Company", COMPANYNAME);
        WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
        WorkOrder.SETRANGE("Source No.", "No.");
        WorkOrder.SETRANGE("Resource Type", WorkOrder."Resource Type"::Subcontractor);
        WorkOrder.SETFILTER("Resource No.", '<>%1', '');
        IF WorkOrder.FINDSET THEN BEGIN
          REPEAT
            IF Resource.GET(WorkOrder."Resource No.") THEN
              Resource.MARK(TRUE);
          UNTIL WorkOrder.NEXT = 0;
        END;
        Resource.MARKEDONLY(TRUE);
        IF Resource.COUNT = 1 THEN
          Resource.MARKEDONLY(FALSE);
      END;
      Resource.SETRANGE(Type, Resource.Type::Subcontractor);
      Resource.SETFILTER(Schedule, '%1|%2', Resource.Schedule::ServiceOrder, Resource.Schedule::Both);
      IF NOT Resource.GET(ResourceNo) OR (ResourceNo = '') THEN BEGIN
        Resource."No." := ResourceNo;
        Resource.Type := Resource.Type::Subcontractor;
        Resource.Company := COMPANYNAME;
      END;
      IF NOT EditableMode THEN
        PAGE.RUNMODAL(0, Resource)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, Resource) = ACTION::LookupOK THEN BEGIN
          IF (Resource."No." <> ResourceNo) AND (Resource."No." <> '') THEN
            ResourceNo := Resource."No.";
        END;
      END;
    END;

    PROCEDURE UpdateWorkOrder@1100525030(IUpdateDateTimes@1100528600 : Boolean);
    BEGIN
      UpdateWorkorderEmployee(IUpdateDateTimes);
      UpdateWorkorderSubcontractor(IUpdateDateTimes);
      UpdateWorkOrderAnonymous;
      UpdateWorkOrderInfo(1);
    END;

    PROCEDURE UpdateWorkorderEmployee@1100525128(IUpdateDateTimes@1100528600 : Boolean);
    VAR
      WorkOrder@1100525000 : Record 11229279;
    BEGIN
      //DP00465
      IF ("Employee No." = '') OR (Status > Status::"In Process") THEN
        EXIT;
      IF NOT UpdateResourceWorkOrderAllowed(WorkOrder."Resource Type"::Employee) THEN
        EXIT;
      WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.", "No.");
      WorkOrder.SETRANGE("Resource Type", WorkOrder."Resource Type"::Employee);
      WorkOrder.SETRANGE("WO Finished (Field Service)", FALSE);
      IF WorkOrder.ISEMPTY THEN BEGIN
        WorkOrder.SETRANGE("Resource Type");
        WorkOrder.SETRANGE("Resource No.", '');
      END;
      IF WorkOrder.FINDFIRST THEN BEGIN
        WorkOrder.TestIfModificationIsAllowed;
        IF IUpdateDateTimes THEN
          WorkOrder.VALIDATE("Source No.", "No.");
        WorkOrder."Resource Type" := WorkOrder."Resource Type"::Employee;
        WorkOrder.VALIDATE("Resource No.", "Employee No.");
        WorkOrder.MODIFY(TRUE);
      END ELSE BEGIN
        WorkOrder.INIT;
        WorkOrder."No." := '';
        WorkOrder."Source Company" := COMPANYNAME;
        WorkOrder."Source Type" := WorkOrder."Source Type"::ServiceOrder;
        WorkOrder.VALIDATE("Source No.", "No.");
        WorkOrder."Resource Type" := WorkOrder."Resource Type"::Employee;
        WorkOrder.INSERT(TRUE);
        WorkOrder.VALIDATE("Resource No.", "Employee No.");
        WorkOrder.VALIDATE("Leading Resource", TRUE);
        WorkOrder.MODIFY(TRUE);
      END;
    END;

    PROCEDURE UpdateWorkorderSubcontractor@1100528617(IUpdateDateTimes@1100528600 : Boolean);
    VAR
      WorkOrder@1100525000 : Record 11229279;
    BEGIN
      //DP00610
      IF (Subcontractor = '') OR (Status > Status::"In Process") THEN
        EXIT;
      IF NOT UpdateResourceWorkOrderAllowed(WorkOrder."Resource Type"::Subcontractor) THEN
        EXIT;
      WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.", "No.");
      WorkOrder.SETRANGE("Resource Type", WorkOrder."Resource Type"::Subcontractor);
      WorkOrder.SETRANGE("WO Finished (Field Service)", FALSE);
      IF WorkOrder.ISEMPTY THEN BEGIN
        WorkOrder.SETRANGE("Resource Type");
        WorkOrder.SETRANGE("Resource No.", '');
      END;
      IF WorkOrder.FINDFIRST THEN BEGIN
        WorkOrder.TestIfModificationIsAllowed;
        IF IUpdateDateTimes THEN
          WorkOrder.VALIDATE("Source No.", "No.");
        WorkOrder.VALIDATE("Resource Type", WorkOrder."Resource Type"::Subcontractor);
        WorkOrder.VALIDATE("Resource No.", Subcontractor);
        WorkOrder.MODIFY(TRUE);
      END ELSE BEGIN
        WorkOrder.INIT;
        WorkOrder."No." := '';
        WorkOrder."Source Company" := COMPANYNAME;
        WorkOrder."Source Type" := WorkOrder."Source Type"::ServiceOrder;
        WorkOrder.VALIDATE("Source No.", "No.");
        WorkOrder."Resource Type" := WorkOrder."Resource Type"::Subcontractor;
        WorkOrder.INSERT(TRUE);
        WorkOrder.VALIDATE("Resource No.", Subcontractor);
        WorkOrder.MODIFY(TRUE);
      END;
    END;

    PROCEDURE UpdateWorkOrderAnonymous@1100525038();
    VAR
      WorkOrder@1100525000 : Record 11229279;
    BEGIN
      IF Status > Status::"In Process" THEN
        EXIT;
      IF NOT UpdateResourceWorkOrderAllowed(WorkOrder."Resource Type"::" ") THEN
        EXIT;
      WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.", "No.");
      WorkOrder.SETRANGE("WO Finished (Field Service)", FALSE);
      IF WorkOrder.ISEMPTY THEN BEGIN
        WorkOrder.INIT;
        WorkOrder."No." := '';
        WorkOrder."Source Company" := COMPANYNAME;
        WorkOrder."Source Type" := WorkOrder."Source Type"::ServiceOrder;
        WorkOrder.VALIDATE("Source No.", "No.");
      //  WorkOrder."Resource Type" := WorkOrder."Resource Type"::Employee;
        WorkOrder.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateResourceWorkOrderAllowed@1100527000(ICheckResourceType@1100528600 : ' ,Employee,Subcontractor') : Boolean;
    VAR
      WorkOrder@1100527000 : Record 11229279;
    BEGIN
      //DP00465
      IF Status <= Status::"In Process" THEN BEGIN
        WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
        WorkOrder.SETRANGE("Source Company", COMPANYNAME);
        WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
        WorkOrder.SETRANGE("Source No.", "No.");
        WorkOrder.SETRANGE("Resource Type", ICheckResourceType);
        WorkOrder.SETRANGE("WO Finished (Field Service)", FALSE);
        IF WorkOrder.ISEMPTY THEN
          EXIT(TRUE);
        IF WorkOrder.FINDFIRST THEN BEGIN
          IF WorkOrder.NEXT = 0 THEN
            EXIT(TRUE);  // If 1 WO on SO, with resource empty
        END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetServiceOrderBudgetHours@1100528729() : Decimal;
    VAR
      ServiceOrder@1100528600 : Record 11012823;
    BEGIN
      CALCFIELDS("Budget Hours");
      IF "Budget Hours" <> 0 THEN
        EXIT("Budget Hours");
      IF "Starting Date" <> "Ending Date" THEN
        EXIT(-1);
      IF ("Starting Time" <> 0T) AND ("Ending Time" <> 0T) THEN
        EXIT(("Ending Time" - "Starting Time") / (60 * 60 * 1000));
    END;

    PROCEDURE SetDontShowMenuOnStatusChange@1100525037(IDontShowMenuOnStatusChange@1100525000 : Boolean);
    BEGIN
      DontShowMenuOnStatusChange := IDontShowMenuOnStatusChange;
    END;

    PROCEDURE DetermineServiceCategory@1100528639();
    VAR
      ServiceOrderObject@1100528600 : Record 11071724;
      ServiceContract@1100528601 : Record 11012812;
    BEGIN
      IF NOT ServiceContract.GET("Service Contract No.") THEN
        EXIT;
      IF ServiceContract."Budget Based on" <> ServiceContract."Budget Based on"::Contract THEN
        EXIT;
      CASE "Source Type" OF
        "Source Type"::Call:
          "Service Category" := ServiceContract."Service Category (Calls)";
        "Source Type"::Direct:
          "Service Category" := ServiceContract."Service Category (Extension)"
      END;

      ServiceOrderObject.SETRANGE("Service Order No.", "No.");
      ServiceOrderObject.SETFILTER("Service Category", '<>%1', '');
      IF ServiceOrderObject.FINDFIRST THEN
        "Service Category" := ServiceOrderObject."Service Category";
    END;

    PROCEDURE GetServiceCategory@1100528640() ServiceCategory : Code[10];
    VAR
      ServiceContract@1100528600 : Record 11012812;
    BEGIN
      ServiceCategory := "Service Category";
      IF NOT ServiceContract.GET("Service Contract No.") THEN
        EXIT;
      IF ServiceContract."Budget Based on" <> ServiceContract."Budget Based on"::Contract THEN
        EXIT;
      IF ServiceCategory = '' THEN BEGIN
        CASE "Source Type" OF
          "Source Type"::Call:
            ServiceCategory := ServiceContract."Service Category (Calls)";
          "Source Type"::Direct:
            ServiceCategory := ServiceContract."Service Category (Extension)"
        END;
      END;
    END;

    PROCEDURE DetermineServicePackage@1100525041();
    VAR
      ServiceContract@1100525000 : Record 11012812;
    BEGIN
      IF NOT ServiceContract.GET("Service Contract No.") THEN
        EXIT;
      CASE "Source Type" OF
        "Source Type"::Call:
          IF ServiceContract."Service Package Call" = '' THEN
            "Service Package" := ServiceContract."Service Package"
          ELSE
            "Service Package" := ServiceContract."Service Package Call";
        "Source Type"::Contract:
          IF ServiceContract."Service Package Contract" = '' THEN
            "Service Package" := ServiceContract."Service Package"
          ELSE
            "Service Package" := ServiceContract."Service Package Contract";
        "Source Type"::Direct:
          IF ServiceContract."Service Package Other" = '' THEN
            "Service Package" := ServiceContract."Service Package"
          ELSE
            "Service Package" := ServiceContract."Service Package Other";
        "Source Type"::Estimate:
          IF ServiceContract."Service Package Estimate" = '' THEN
            "Service Package" := ServiceContract."Service Package"
          ELSE
            "Service Package" := ServiceContract."Service Package Estimate";
      END;
    END;

    PROCEDURE GetFilteredCausesByProblem@1100525043(Problem@1100409000 : Code[10];VAR ServiceAnalysis@1100409001 : Record 11012842);
    VAR
      ServiceAnalysisRelation@1100409002 : Record 11072238;
    BEGIN
      ServiceAnalysisRelation.SETRANGE("Problem Code", Problem);
      IF ServiceAnalysisRelation.FINDSET THEN BEGIN
        REPEAT
          ServiceAnalysis."Analysis Type" := ServiceAnalysis."Analysis Type"::Cause;
          ServiceAnalysis.Code := ServiceAnalysisRelation."Cause Code";
          ServiceAnalysis.MARK(TRUE);
        UNTIL ServiceAnalysisRelation.NEXT = 0;
        ServiceAnalysis.MARKEDONLY(TRUE);
      END;
    END;

    PROCEDURE GetFilteredSolutionsByProblemCause@1100525039(Problem@1100409000 : Code[20];Cause@1100409001 : Code[20];VAR ServiceAnalysis@1100409002 : Record 11012842);
    VAR
      ServiceAnalysisRelation@1100409003 : Record 11072238;
    BEGIN
      ServiceAnalysisRelation.SETRANGE("Problem Code", Problem);
      ServiceAnalysisRelation.SETRANGE("Cause Code", Cause);
      IF ServiceAnalysisRelation.FINDSET THEN BEGIN
        REPEAT
          ServiceAnalysis."Analysis Type" := ServiceAnalysis."Analysis Type"::Solution;
          ServiceAnalysis.Code := ServiceAnalysisRelation."Solution Code";
          ServiceAnalysis.MARK(TRUE);
        UNTIL ServiceAnalysisRelation.NEXT = 0;
        ServiceAnalysis.MARKEDONLY(TRUE);
      END;
    END;

    PROCEDURE GetFilteredProblemsOnDisciplines@1100409009(VAR ServiceAnalysis@1100409001 : Record 11012842);
    VAR
      Resource@1100409000 : Record 11229278;
      ServiceContractDiscipline@1100409004 : Record 11012881;
      ServiceLocationDiscipline@1100409003 : Record 11012844;
      ServiceAnalysisDiscipline@1100409002 : Record 11072198;
      DisciplineFilter@1100525000 : Text;
    BEGIN
      // dp00662
      IF NOT Resource.GET("Employee No.") THEN
        Resource.INIT;
      Resource.CALCFIELDS("Disciplines Exist");
      IF (Discipline <> '') OR Resource."Disciplines Exist" THEN BEGIN
         ServiceAnalysisDiscipline.SETRANGE("Analysis Type", ServiceAnalysisDiscipline."Analysis Type"::Problem);
         DisciplineFilter := Resource.GetDisciplineFilter;
         IF DisciplineFilter <> '' THEN
           DisciplineFilter += '|';
         IF Discipline <> '' THEN
           DisciplineFilter += Discipline
         ELSE
           DisciplineFilter += '''''';
         ServiceAnalysisDiscipline.SETFILTER(Discipline, DisciplineFilter);
         IF ServiceAnalysisDiscipline.FINDSET THEN BEGIN
           REPEAT
             IF ServiceAnalysis.GET(ServiceAnalysisDiscipline."Analysis Type", ServiceAnalysisDiscipline."Analysis Code") THEN BEGIN
               ServiceAnalysis.MARK(TRUE);
               ServiceAnalysis.MARKEDONLY(TRUE);
             END;
           UNTIL ServiceAnalysisDiscipline.NEXT = 0;
         END;
      END ELSE BEGIN
        IF "Service Contract No." <> '' THEN BEGIN
          ServiceContractDiscipline.SETRANGE("Service Contract No.", "Service Contract No.");
          IF ServiceContractDiscipline.FINDSET THEN BEGIN
            REPEAT
              ServiceAnalysisDiscipline.SETRANGE("Analysis Type", ServiceAnalysisDiscipline."Analysis Type"::Problem);
              ServiceAnalysisDiscipline.SETRANGE(Discipline, ServiceContractDiscipline.Discipline);
              IF ServiceAnalysisDiscipline.FINDSET THEN BEGIN
                REPEAT
                  IF ServiceAnalysis.GET(ServiceAnalysisDiscipline."Analysis Type", ServiceAnalysisDiscipline."Analysis Code") THEN BEGIN
                    ServiceAnalysis.MARK(TRUE);
                    ServiceAnalysis.MARKEDONLY(TRUE);
                  END;
                UNTIL ServiceAnalysisDiscipline.NEXT = 0;
              END;
            UNTIL ServiceContractDiscipline.NEXT = 0;
          END;
        END;

        IF "Service Location No." <> '' THEN BEGIN
          ServiceLocationDiscipline.SETRANGE("Service Location No.", "Service Location No.");
          IF ServiceLocationDiscipline.FINDSET THEN BEGIN
            REPEAT
              ServiceAnalysisDiscipline.SETRANGE("Analysis Type", ServiceAnalysisDiscipline."Analysis Type"::Problem);
              ServiceAnalysisDiscipline.SETRANGE(Discipline, ServiceLocationDiscipline.Discipline);
              IF ServiceAnalysisDiscipline.FINDSET THEN BEGIN
                REPEAT
                  IF ServiceAnalysis.GET(ServiceAnalysisDiscipline."Analysis Type", ServiceAnalysisDiscipline."Analysis Code") THEN BEGIN
                    ServiceAnalysis.MARK(TRUE);
                    ServiceAnalysis.MARKEDONLY(TRUE);
                  END;
                UNTIL ServiceAnalysisDiscipline.NEXT = 0;
              END;
            UNTIL ServiceLocationDiscipline.NEXT = 0;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetFilteredProblemsOnSUP@1100528653(VAR ServiceAnalysis@1100528600 : Record 11012842);
    VAR
      ServiceLocationTypeRoom@1100528601 : Record 11072281;
      SUPRoomPart@1100528602 : Record 11072282;
      SUPPartServiceAnalysis@1100528603 : Record 11072283;
      ServiceAnalysis2@1100525000 : Record 11012842;
      ServiceUnitPriceManagement@1100525003 : Codeunit 11012846;
      CustomerNo@1100525002 : Code[20];
      Skip@1100525001 : Boolean;
    BEGIN
      IF ("Room (SUP)" = '') AND ("Part (SUP)" = '') THEN
        EXIT;
      CustomerNo := "Customer No.";
      IF NOT ServiceUnitPriceManagement.CustomerHasCustomizations(CustomerNo) THEN
        CustomerNo := '';

      ServiceLocationTypeRoom.SETRANGE("Customer No.", CustomerNo);
      IF "Service Location Type" <> '' THEN
        ServiceLocationTypeRoom.SETRANGE("Service Location Type", "Service Location Type");
      SUPRoomPart.SETRANGE("Customer No.", CustomerNo);
      IF "Room (SUP)" <> '' THEN
        SUPRoomPart.SETRANGE("Room (SUP)", "Room (SUP)");
      IF "Part (SUP)" <> '' THEN
        SUPRoomPart.SETRANGE("Part (SUP)", "Part (SUP)");
      IF SUPRoomPart.FINDSET THEN
        REPEAT
          Skip := FALSE;
          IF "Service Location Type" <> '' THEN BEGIN
            ServiceLocationTypeRoom.SETRANGE("Room (SUP)", SUPRoomPart."Room (SUP)");
            Skip := ServiceLocationTypeRoom.ISEMPTY;
          END;
          IF NOT Skip THEN BEGIN
            SUPPartServiceAnalysis.SETRANGE("Customer No.", CustomerNo);
            SUPPartServiceAnalysis.SETRANGE("Part (SUP)", SUPRoomPart."Part (SUP)");
            IF SUPPartServiceAnalysis.FINDSET THEN
              REPEAT
                ServiceAnalysis.SETRANGE("Analysis Type", SUPPartServiceAnalysis."Analysis Type");
                ServiceAnalysis.SETRANGE(Code, SUPPartServiceAnalysis."Analysis Code");
                IF NOT ServiceAnalysis.ISEMPTY THEN BEGIN // Already marked, mark also in second record
                  ServiceAnalysis2."Analysis Type" := SUPPartServiceAnalysis."Analysis Type";
                  ServiceAnalysis2.Code := SUPPartServiceAnalysis."Analysis Code";
                  ServiceAnalysis2.MARK(TRUE);
                END;
                ServiceAnalysis.SETRANGE("Analysis Type");
                ServiceAnalysis.SETRANGE(Code);
              UNTIL SUPPartServiceAnalysis.NEXT = 0;
          END;
        UNTIL SUPRoomPart.NEXT = 0;
      ServiceAnalysis.COPY(ServiceAnalysis2);
      ServiceAnalysis.MARKEDONLY(TRUE);
    END;

    PROCEDURE UpdateWorkOrderInfo@1100528641(ICurrFieldNo@1100409000 : Integer);
    VAR
      WorkOrder@1100528600 : Record 11229279;
      RecRef@1100528601 : RecordRef;
      FieldRef@1100528602 : FieldRef;
    BEGIN
      IF ICurrFieldNo = 0 THEN
        EXIT;
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.", "No.");
      IF WorkOrder.FINDFIRST THEN BEGIN
        IF WorkOrder.NEXT <> 0 THEN BEGIN
          RecRef.GETTABLE(Rec);
          IF ICurrFieldNo > 1 THEN
            FieldRef := RecRef.FIELD(ICurrFieldNo);
          IF GUIALLOWED AND (ICurrFieldNo > 1) THEN BEGIN
            IF ICurrFieldNo = FIELDNO(Description) THEN BEGIN
              MESSAGE(Text118,FieldRef.CAPTION);
              EXIT;
            END ELSE
              ERROR(Text117, FieldRef.CAPTION)
          END ELSE
            EXIT;
        END;
        MODIFY(TRUE);
        WorkOrder.VALIDATE("Source No.");
        WorkOrder.MODIFY(FALSE);
      END;
    END;

    PROCEDURE UpdateServiceOrderFinished@1100528642();
    VAR
      DocumentReferencePoint@1100528600 : Record 11020296;
    BEGIN
      DocumentReferencePoint.SETRANGE(Type, DocumentReferencePoint.Type::ServOrder);
      DocumentReferencePoint.SETRANGE("Document No.", "No.");
      IF NOT DocumentReferencePoint.FINDLAST THEN
        DocumentReferencePoint.INIT;
      "SO Finished (Field Service)" := DocumentReferencePoint.IsOrderFinished;
    END;

    PROCEDURE DetermineHouseNo@1100528643();
    VAR
      ObjectImpWorkSheetMgt@1100528600 : Codeunit 11012839;
    BEGIN
      "House No." := ObjectImpWorkSheetMgt.DetermineHouseNoAsInt(Address, "House No. Ext.");
    END;

    PROCEDURE UpdateCostPlusEntryDiscount@1100528644();
    VAR
      ServiceOrderCostPlusEntry@1100528600 : Record 11012825;
    BEGIN
      IF MODIFY THEN; //mg, 29-05-2015: C023298
      ServiceOrderCostPlusEntry.CalcDiscount("No.");
    END;

    PROCEDURE ActualMeterReading@1100529005(VAR OnServiceOrder@1100528800 : Code[20];IPlantType@1100528000 : Code[20];IPlantNumber@1100528001 : Code[10]) : Decimal;
    VAR
      PlantMeterReading@1100529000 : Record 11072671;
    BEGIN
      IF NOT PlantReadPermission THEN
        EXIT;

      IF ISEMPTY THEN BEGIN
        INIT;
        "Plant Type" := IPlantType;
        "Plant Number" := IPlantNumber;
      END;

      IF ("Plant Type" = '') OR ("Plant Number" = '') THEN
        EXIT(0);
      EXIT(PlantMeterReading.GetActualMeterReading("Plant Type", "Plant Number", ActualMeterReadingType, OnServiceOrder));
    END;

    PROCEDURE ActualMeterReadingUnitofMeasure@1100529009() : Code[10];
    VAR
      PlantMeterReadingType@1100529000 : Record 11072670;
    BEGIN
      IF NOT PlantReadPermission THEN
        EXIT;

      IF PlantMeterReadingType.GET(ActualMeterReadingType()) THEN BEGIN
        IF PlantMeterReadingType.Code <> '' THEN
          EXIT(PlantMeterReadingType."Unit of Measure");
      END;
      EXIT('');
    END;

    PROCEDURE ActualMeterReadingType@1100529008() : Code[10];
    VAR
      PlantMeterReading@1100529000 : Record 11072671;
    BEGIN
      IF NOT PlantReadPermission THEN
        EXIT;

      IF ("Plant Type" = '') OR ("Plant Number" = '') THEN
        EXIT('');
      EXIT(PlantMeterReading.DefaultMeterReadingType("Plant Type", "Plant Number"));
    END;

    PROCEDURE ActualMeterReadingDate@1100528801() : Date;
    VAR
      PlantMeterReading@1100528800 : Record 11072671;
    BEGIN
      IF NOT PlantReadPermission THEN
        EXIT;

      IF ("Plant Type" = '') OR ("Plant Number" = '') THEN
        EXIT(0D);
      EXIT(PlantMeterReading.GetActualMeterReadingDate("Plant Type", "Plant Number", ActualMeterReadingType()));
    END;

    PROCEDURE DrillDownMeterReading@1100529011();
    VAR
      PlantMeterReading@1100529000 : Record 11072671;
      PlantMeterReadingPAGE@1100529001 : Page 11125948;
    BEGIN
      IF NOT PlantReadPermission THEN
        EXIT;

      IF ("Plant Type" = '') OR ("Plant Number" = '') THEN
        EXIT;
      PlantMeterReading.FILTERGROUP(7);
      PlantMeterReading.SETRANGE("Plant Type", "Plant Type");
      PlantMeterReading.SETRANGE("Plant No.", "Plant Number");
      PlantMeterReading.FILTERGROUP(0);
      PlantMeterReading.SETRANGE("Meter Reading Type", ActualMeterReadingType());

      IF PlantMeterReading.FINDLAST THEN
        PlantMeterReadingPAGE.SETRECORD(PlantMeterReading);

      PlantMeterReading.SETRANGE("Meter Reading Type");  //Reset filter

      IF PlantMeterReading."Meter Reading Type" = '' THEN

      IF PlantMeterReading.FINDLAST THEN
        PlantMeterReadingPAGE.SETRECORD(PlantMeterReading);

      PlantMeterReadingPAGE.SETTABLEVIEW(PlantMeterReading);
      //PlantMeterReading.EDITABLE(NOT Posted);
      PlantMeterReadingPAGE.RUNMODAL;
    END;

    PROCEDURE DrillDownServiceOrder@1100528806(OnServiceOrder@1100528800 : Code[20]);
    VAR
      ServiceOrderGeneralPage@1100528801 : Page 11125209;
    BEGIN
      GET(OnServiceOrder);
      ServiceOrderGeneralPage.SETRECORD(Rec);
      ServiceOrderGeneralPage.RUNMODAL;
    END;

    PROCEDURE GetMeterReading@1100528804(VAR OMeterReading@1100528801 : Decimal;VAR OMeterReadingType@1100528802 : Code[10];VAR OMeterReadingUnitOfMeasure@1100528803 : Code[10]);
    VAR
      PlantMeterReading@1100528800 : Record 11072671;
      PlantMeterReadingType@1100528805 : Record 11072670;
      DefaultMeterReadingType@1100528804 : Code[10];
    BEGIN
      IF NOT PlantReadPermission THEN
        EXIT;

      OMeterReading := 0;
      OMeterReadingType := '';
      OMeterReadingUnitOfMeasure := '';

      DefaultMeterReadingType := PlantMeterReading.DefaultMeterReadingType("Plant Type","Plant Number");

      PlantMeterReading.SETRANGE("Plant Type", "Plant Type");
      PlantMeterReading.SETRANGE("Plant No.", "Plant Number");
      PlantMeterReading.SETRANGE("Meter Reading Type", DefaultMeterReadingType);
      PlantMeterReading.SETRANGE("Service Order", "No.");
      IF PlantMeterReadingType.GET(DefaultMeterReadingType) THEN BEGIN
        OMeterReadingType := PlantMeterReadingType.Code;
        OMeterReadingUnitOfMeasure := PlantMeterReadingType."Unit of Measure";
      END;

      IF PlantMeterReading.FINDFIRST THEN BEGIN
        OMeterReading := PlantMeterReading."Meter Reading";
      END;
    END;

    PROCEDURE SetMeterReading@1100528803(iMeterReading@1100528801 : Decimal;iMeterReadingType@1100528802 : Code[10];iMeterReadingUnitOfMeasure@1100528803 : Code[10]);
    VAR
      PlantMeterReading@1100528800 : Record 11072671;
    BEGIN
      IF NOT PlantReadPermission THEN
        EXIT;

      PlantMeterReading.SETRANGE("Plant Type", "Plant Type");
      PlantMeterReading.SETRANGE("Plant No.", "Plant Number");
      PlantMeterReading.SETRANGE("Meter Reading Type", iMeterReadingType);
      PlantMeterReading.SETRANGE("Service Order", "No.");
      IF PlantMeterReading.ISEMPTY THEN BEGIN
        PlantMeterReading.INIT;
        PlantMeterReading."Plant Type" := "Plant Type";
        PlantMeterReading."Plant No." := "Plant Number";
        PlantMeterReading."Meter Reading Type" := iMeterReadingType;
        PlantMeterReading.Date := "Starting Date";
        PlantMeterReading."Meter Reading" := iMeterReading;
        PlantMeterReading."Service Order" := "No.";
        PlantMeterReading."Unit of Measure" := iMeterReadingUnitOfMeasure;
        PlantMeterReading.INSERT;
      END ELSE BEGIN
        IF PlantMeterReading.FINDFIRST THEN BEGIN
          IF PlantMeterReading.Date <> "Starting Date" THEN
            PlantMeterReading.RENAME("Plant Type", "Plant Number", iMeterReadingType, "Starting Date");
          PlantMeterReading."Meter Reading" := iMeterReading;
          PlantMeterReading.MODIFY;
        END;
      END;
    END;

    PROCEDURE PlantReadPermission@1100528805() : Boolean;
    VAR
      PlantSetup@1100528800 : Record 11012550;
    BEGIN
      IF PlantSetup.READPERMISSION THEN
        EXIT(TRUE);
    END;

    PROCEDURE ValidateBilltoContactPerson@1100528900() : Code[20];
    VAR
      Customer@1100528803 : Record 18;
      ServiceContact@1100528802 : Record 11012841;
    BEGIN
      IF (ServLocRec.GET("Service Location No.")) AND ("Bill-to Customer No." <> '') THEN
        IF Customer.GET("Bill-to Customer No.") THEN BEGIN
          Customer.CALCFIELDS("Contact No.");
          ServiceContact.SETRANGE("Service Location No.", "Service Location No.");
          ServiceContact.SETRANGE("Contact Company No.", Customer."Contact No.");
          ServiceContact.SETRANGE("Bill-to Contact Person", TRUE);
          IF ServiceContact.FINDFIRST THEN
            VALIDATE("Bill-to Contact Person", ServiceContact."Contact Person No.");
        END;
    END;

    PROCEDURE UpdateSOHours@1100528645();
    BEGIN
      IF "No." = '' THEN
        EXIT;
      UpdateSOSurchageBudgetLines;
      CheckBudgetHours;  //db, 02-03-15: C020552
      DetermineServiceCategory;
      MODIFY;
    END;

    PROCEDURE CheckBudgetHours@1100409011();
    BEGIN
      //db, 02-03-15: C020552
      CALCFIELDS("Budget Hours");
      IF "Budget Hours" <> 0 THEN BEGIN
        "Expected Hours" := "Budget Hours";
        "Duration Time" := "Expected Hours";
      END ELSE BEGIN
        IF "Duration Time" < "Expected Hours" THEN
          "Duration Time" := "Expected Hours";
      END;
    END;

    PROCEDURE ShowPurchaseOrdersForServiceOrder@1100528405();
    VAR
      PurchaseHeader@1100528400 : Record 38;
      ServicePurchaseOrderList@1100528401 : Page 11012877;
    BEGIN
      PurchaseHeader.MarkPurchaseOrdersOfServiceOrder("No.");
      PurchaseHeader.MARKEDONLY(TRUE);
      ServicePurchaseOrderList.SETTABLEVIEW(PurchaseHeader);
      ServicePurchaseOrderList.SetServiceOrderNo("No.");
      ServicePurchaseOrderList.RUNMODAL;
    END;

    PROCEDURE CommunicateOrderToFLS@1100528300(FunctionCode@1100528301 : Integer);
    VAR
      FLSVisiTourInterface@1100528300 : Codeunit 11072090;
    BEGIN
      //DP00703.n
      //FunctionCode
      //0: Create or modify call
      //1: Generate suggestions for appointment
      //2: Confirmation of appointment and planning
      //3: Cancellation (unconditionally)
      //4: Cancellation (if possible. If not -> ReturnCode 40 is geven)
      //5: Parking of appointment (planning is removed, order is stillin FLS)

      ServSetup.GET;
      IF (NOT ServSetup."FLS VisiTour Active") THEN
        EXIT;

      CASE FunctionCode OF
        0: FLSVisiTourInterface.CreateUpdateCall(Rec);
        1: FLSVisiTourInterface.PlanCall(Rec);
        3,4: FLSVisiTourInterface.DeleteCall(Rec, FunctionCode);
        ELSE ERROR(Text024);
      END;
    END;

    PROCEDURE CommunicateOrderFromFLS@1100409007();
    VAR
      FLSVisiTourInterface@1100528300 : Codeunit 11072090;
    BEGIN
      //DP00703.n
      ServSetup.GET;
      IF (NOT ServSetup."FLS VisiTour Active") THEN
        EXIT;
      FLSVisiTourInterface.ShowCallInfo(Rec);
    END;

    PROCEDURE UpdateFirstLastPossibleFields@1100409010();
    VAR
      PlanningAgreement@1100409000 : Record 11071729;
    BEGIN
      ServSetup.GET;
      IF NOT ServSetup."Use Planning Agreement on SO" THEN
        EXIT;
      IF "Source Type" <> "Source Type"::Contract THEN
        EXIT;
      IF "First Possible Starting Date" = 0D THEN
        VALIDATE("First Possible Starting Date", "Starting Date");
      IF "Last Possible Ending Date" = 0D THEN
        VALIDATE("Last Possible Ending Date", "Ending Date");
      IF "Starting Time" = 0T THEN
        EXIT;
      IF ("Starting Date" <> "Ending Date") AND ("Ending Date" <> 0D) THEN
        EXIT;
      PlanningAgreement.GetPlanningAgreementTimes("Starting Time", "First Possible Starting Time", "Last Possible Ending Time");
      IF "First Possible Starting Time" <> 0T THEN
        VALIDATE("First Possible Starting Time");
      IF "Last Possible Ending Time" <> 0T THEN
        VALIDATE("Last Possible Ending Time");
    END;

    PROCEDURE GetInvoiceInProcessLCY@1100529100() : Decimal;
    VAR
      SalesLine@1100529100 : Record 37;
      AmountInvoice@1100529101 : Decimal;
      AmountCreditMemo@1100529102 : Decimal;
    BEGIN
      //C026176.sn
      IF "No." = '' THEN
        EXIT(0);
      //C026176.en

      SalesLine.SETRANGE("Service Order No.", "No.");
      SalesLine.SETFILTER(
        "Document Type", '%1|%2|%3', SalesLine."Document Type"::Invoice,
        SalesLine."Document Type"::"Credit Memo", SalesLine."Document Type"::"Invoice Proposal");
      IF SalesLine.FINDSET THEN BEGIN
        REPEAT
          IF (SalesLine."Document Type" = SalesLine."Document Type"::Invoice) OR
             (SalesLine."Document Type" = SalesLine."Document Type"::"Invoice Proposal")
          THEN
            AmountInvoice += SalesLine."Amount (LCY)";
          IF SalesLine."Document Type" = SalesLine."Document Type"::"Credit Memo" THEN
            AmountCreditMemo += SalesLine."Amount (LCY)";
        UNTIL SalesLine.NEXT = 0;
      END;
      EXIT(AmountInvoice - AmountCreditMemo);
    END;

    PROCEDURE DetermineObjectNo@1100525046();
    VAR
      LocationServiceObject@1100525003 : Record 11071691;
      ServiceObject@1100525001 : Record 11071691;
      ServiceLocation@1100525000 : Record 11012801;
      ServiceContractObject@1100525002 : Record 11071702;
      ServiceContract@1100525005 : Record 11012812;
      FoundServiceObjectNo@1100525004 : Code[20];
      ServiceOrderObject@1100525006 : Record 11071724;
      ServiceCall@1100525008 : Record 11012822;
      ContinueBln@1100525007 : Boolean;
      ServiceContractNo@1100525009 : Code[20];
      MaintenanceManagementCU@1100525010 : Codeunit 11012829;
    BEGIN
      //db, 16-03-15: C019952
      //- function copied from Service Call, but object is flowfield for Service Order
      //- skip update for Source Type where more then 1 object is common

      IF "Decentral Created" THEN EXIT;  //db, 15-05-15

      CASE "Source Type" OF
        "Source Type"::Call:
          BEGIN
            IF NOT ServiceCall.GET("Call No.") THEN ServiceCall.INIT;
            ContinueBln := (ServiceCall."Object No." = '');
          END;
        "Source Type"::Contract: ContinueBln := FALSE;
        "Source Type"::Direct: ContinueBln := TRUE;
        "Source Type"::Estimate: ContinueBln := TRUE;
        "Source Type"::Modification: ContinueBln := FALSE;
        "Source Type"::Replacement: ContinueBln := FALSE;
      END;
      IF ContinueBln = FALSE THEN EXIT;

      IF "Service Contract No." <> '' THEN BEGIN
        ServiceContract.GET("Service Contract No.");
        ServiceContractObject.SETRANGE("Service Contract No.", "Service Contract No.");
        ServiceContractObject.SETRANGE(Blocked, FALSE);
        IF "Service Location No." <> '' THEN
          ServiceContractObject.SETRANGE("Service Location No.", "Service Location No.");
        IF ServiceContractObject.FINDFIRST THEN BEGIN
          IF ServiceContractObject.NEXT = 0 THEN
            FoundServiceObjectNo := ServiceContractObject."Service Object No."
          ELSE BEGIN
            IF ServiceLocation.GET("Service Location No.") THEN BEGIN
              ServiceLocation.GetRelatedObjects(LocationServiceObject);
              LocationServiceObject.SETRANGE(Blocked, FALSE);
              ServiceContractObject.FINDSET;
              ServiceObject.MARKEDONLY(TRUE);
              REPEAT
                LocationServiceObject.SETRANGE("No.", ServiceContractObject."Service Object No.");
                IF NOT LocationServiceObject.ISEMPTY THEN BEGIN
                  ServiceObject."No." := ServiceContractObject."Service Object No.";
                  ServiceObject.MARK(TRUE);
                END;
              UNTIL (ServiceObject.COUNT > 1) OR (ServiceContractObject.NEXT = 0);
              IF ServiceObject.FINDFIRST AND (ServiceObject.NEXT = 0) THEN
                FoundServiceObjectNo := ServiceObject."No.";
            END;
          END;
        END;
      END;
      IF (ServiceContract."Contract Form" <> ServiceContract."Contract Form"::"Framework Contract") AND
         (FoundServiceObjectNo = '') AND ("Service Location No." <> '')
      THEN BEGIN
        IF ServiceLocation.GET("Service Location No.") THEN BEGIN
          ServiceLocation.GetRelatedObjects(LocationServiceObject);
          LocationServiceObject.SETRANGE(Blocked, FALSE);
          IF LocationServiceObject.FINDFIRST AND (LocationServiceObject.NEXT = 0) THEN
            FoundServiceObjectNo := LocationServiceObject."No.";
        END;
      END;

      IF (FoundServiceObjectNo <> '') OR
         (ServiceContract."Contract Form" = ServiceContract."Contract Form"::"Framework Contract")
      THEN BEGIN
        {
        //db, 15-05-15: skip fysical insert object; just determine object
        ServiceOrderObject.SETRANGE("Service Order No.", "No.");
        ServiceOrderObject.DELETEALL;
        //
        ServiceOrderObject.INIT;
        ServiceOrderObject.VALIDATE("Service Order No.", "No.");
        ServiceOrderObject.VALIDATE("Object No.", FoundServiceObjectNo);
        ServiceOrderObject.VALIDATE("Service Contract No.", "Service Contract No.");
        CASE "Source Type" OF
          "Source Type"::Call: ServiceOrderObject.Source := ServiceOrderObject.Source::Calls;
          "Source Type"::Contract: ServiceOrderObject.Source := ServiceOrderObject.Source::Maintenance;
          "Source Type"::Direct: ServiceOrderObject.Source := ServiceOrderObject.Source::Other;
          "Source Type"::Estimate: ServiceOrderObject.Source := ServiceOrderObject.Source::Other;
          "Source Type"::Modification: ServiceOrderObject.Source := ServiceOrderObject.Source::Modifications;
          "Source Type"::Replacement: ServiceOrderObject.Source := ServiceOrderObject.Source::Replacements;
        END;
        ServiceOrderObject.INSERT(TRUE);
        }
        ServiceContractNo := MaintenanceManagementCU.GetActualContractForObject(FoundServiceObjectNo, TODAY);
        IF ServiceContractNo <> '' THEN
          IF "Service Contract No." = '' THEN
            VALIDATE("Service Contract No.", ServiceContractNo)
          ELSE
            TESTFIELD("Service Contract No.", ServiceContractNo);
      END;
    END;

    PROCEDURE GetBillToLanguageCode@1100528409() : Code[10];
    VAR
      Customer@1100528400 : Record 18;
    BEGIN
      IF "Bill-to Customer No." = '' THEN
        EXIT('');

      IF Customer.GET("Bill-to Customer No.") THEN
        EXIT(Customer."Language Code");
    END;

    PROCEDURE DetermineContractNo@1100528646();
    VAR
      ServiceLocationInfoMgt@1100528600 : Codeunit 11012856;
      ActualServiceContractNo@1100528601 : Code[20];
    BEGIN
      IF "Service Location No." <> '' THEN BEGIN
        ActualServiceContractNo := ServiceLocationInfoMgt.GetActualContractFromLocation("Service Location No.", '', TODAY);
        IF ActualServiceContractNo <> '' THEN
          VALIDATE("Service Contract No.", ActualServiceContractNo);
      END;
    END;

    PROCEDURE GetPublishSubcontPort@1100528647() : Boolean;
    VAR
      SubcontPortSetup@1100528600 : Record 11126402;
      WorkOrder@1100528601 : Record 11229279;
    BEGIN
      IF NOT SubcontPortSetup.GET('1') THEN
        EXIT;
      IF NOT SubcontPortSetup."Subcontracting Portal Active" THEN
        EXIT;

      WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.", "No.");
      WorkOrder.SETRANGE("Resource Type", WorkOrder."Resource Type"::Subcontractor);
      WorkOrder.SETFILTER("Resource No.", '<>%1', '');
      WorkOrder.SETRANGE("Publish on Subcontr. Portal", TRUE);
      EXIT(NOT WorkOrder.ISEMPTY);
    END;

    PROCEDURE TogglePublishSubcontPort@1100528648(IPublish@1100528602 : Boolean);
    VAR
      SubcontPortSetup@1100528603 : Record 11126402;
      WorkOrder@1100528600 : Record 11229279;
      ResourceWOP@1100528601 : Record 11229278;
      TmpSkipPurch@1100528605 : TEMPORARY Record 11012005;
      SkipCreatePurchOrder@1100528604 : Boolean;
    BEGIN
      SubcontPortSetup.GET('1');
      SubcontPortSetup.TESTFIELD("Subcontracting Portal Active");

      WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.", "No.");
      WorkOrder.SETRANGE("Resource Type", WorkOrder."Resource Type"::Subcontractor);
      WorkOrder.SETRANGE("Publish on Subcontr. Portal", NOT IPublish);
      WorkOrder.SETFILTER("Resource No.", '<>%1', '');
      IF NOT WorkOrder.ISEMPTY THEN BEGIN
        IF WorkOrder.FINDSET(TRUE, FALSE) THEN
          REPEAT
            SkipCreatePurchOrder := TmpSkipPurch.GET(WorkOrder."Source No.", WorkOrder."Resource No.");
            WorkOrder.SetCollectivePublishSubcPortalRun(SkipCreatePurchOrder);
            WorkOrder.VALIDATE("Publish on Subcontr. Portal", IPublish);
            WorkOrder.MODIFY(TRUE);
            IF NOT SkipCreatePurchOrder THEN BEGIN
              TmpSkipPurch."Project No." := WorkOrder."Source No.";
              TmpSkipPurch.Principal := WorkOrder."Resource No.";
              TmpSkipPurch.INSERT;
            END;
          UNTIL WorkOrder.NEXT = 0;
      END;
    END;

    PROCEDURE ShowServiceEntries@1100528649(IType@1100525001 : Integer);
    VAR
      ServiceLedgerEntry@1100525000 : Record 11012819;
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY("Service Order No.");
      ServiceLedgerEntry.SETRANGE("Service Order No.", "No.");
      IF IType = 0 THEN BEGIN
        ServiceLedgerEntry.SETRANGE("Cost Present", TRUE);
        MESSAGE(Text120);
      END ELSE BEGIN
        ServiceLedgerEntry.SETRANGE("Revenue Present", TRUE);
        MESSAGE(Text121);
      END;
      PAGE.RUNMODAL(PAGE::"Service Entry List", ServiceLedgerEntry);
    END;

    PROCEDURE FillPreferredEmployee@1100528650();
    VAR
      PreferredEmployee@1100528600 : Record 11012843;
      ServiceOrderObject@1100528601 : Record 11071724;
      ObjectNo@1100528602 : Code[20];
      MaintenanceScheme@1100528603 : Code[20];
      DummyOption@1100528604 : Option;
      Origin@1100528605 : ' ,Call,Service Order';
      PreferredEmployeeNo@1100528606 : Code[20];
    BEGIN
      IF "Source Type" IN ["Source Type"::Call, "Source Type"::Contract, "Source Type"::Direct] THEN BEGIN
        ServiceOrderObject.SETRANGE("Service Order No.", "No.");
        IF ServiceOrderObject.FINDFIRST THEN BEGIN
          ObjectNo := ServiceOrderObject."Object No.";
          MaintenanceScheme := ServiceOrderObject."Maintenance Scheme";
        END;
      END;

      PreferredEmployeeNo :=
        PreferredEmployee.GetPreferredEmployee(
          "Service Contract No.", "Service Location No.", ObjectNo, MaintenanceScheme, "No.", Discipline, "Trade Speciality", "Starting Date", DummyOption, Origin::"Service Order");
      IF PreferredEmployeeNo <> '' THEN
        VALIDATE("Preferred Employee No.", PreferredEmployeeNo);
    END;

    LOCAL PROCEDURE ShowPreferredEmployee@1100528651();
    VAR
      PreferredEmployee@1100528600 : Record 11012843;
      ServiceOrderObject@1100528605 : Record 11071724;
      ObjectNo@1100528604 : Code[20];
      MaintenanceScheme@1100528603 : Code[20];
      DummyOption@1100528602 : Option;
      Origin@1100528601 : ' ,Call,Service Order';
    BEGIN
      IF "Source Type" IN ["Source Type"::Call, "Source Type"::Contract, "Source Type"::Direct] THEN BEGIN
        ServiceOrderObject.SETRANGE("Service Order No.", "No.");
        IF ServiceOrderObject.FINDFIRST THEN BEGIN
          ObjectNo := ServiceOrderObject."Object No.";
          MaintenanceScheme := ServiceOrderObject."Maintenance Scheme";
        END;
      END;
      PreferredEmployee.AssistEditPreferredEmployee("Service Contract No.", "Service Location No.", ObjectNo, MaintenanceScheme, '');
    END;

    PROCEDURE SetSkipUpdateServiceText@1100525045(Value@1100525000 : Boolean);
    BEGIN
      SkipUpdateServiceText := Value;
    END;

    LOCAL PROCEDURE ApplyProblemCodeAdditionalInfo@1100528652();
    VAR
      ServiceAnalysis@1100528600 : Record 11012842;
      ServiceAnalysisDiscipline@1100528601 : Record 11072198;
    BEGIN
      IF ServiceAnalysis.GET(ServiceAnalysis."Analysis Type"::Problem, Problem) THEN BEGIN
        IF ServiceAnalysis.Priority <> '' THEN
          VALIDATE(Priority, ServiceAnalysis.Priority);
        IF ServiceAnalysis."Expected Hours" <> 0 THEN BEGIN
          "Expected Hours" := ServiceAnalysis."Expected Hours";
          CheckBudgetHours;
          VALIDATE("Expected Hours");
        END;
        ServiceAnalysisDiscipline.SETRANGE("Analysis Type", ServiceAnalysisDiscipline."Analysis Type"::Problem);
        ServiceAnalysisDiscipline.SETRANGE("Analysis Code", Problem);
        IF ServiceAnalysisDiscipline.FINDSET THEN
          IF ServiceAnalysisDiscipline.NEXT = 0 THEN
            VALIDATE(Discipline, ServiceAnalysisDiscipline.Discipline);
      END;
    END;

    PROCEDURE SetSuppressAutoRecalculateCollectiveList@1100528654(ISuppressAutoRecalculateCollectiveList@1100528600 : Boolean);
    BEGIN
      SuppressAutoRecalculateCollectiveList := ISuppressAutoRecalculateCollectiveList;
    END;

    PROCEDURE GetRoomDescription@1100525047() : Text[50];
    VAR
      SUPRoom@1100525000 : Record 11071950;
      ServiceUnitPriceManagement@1100528600 : Codeunit 11012846;
      CustomerNo@1100528601 : Code[20];
    BEGIN
      IF ServiceUnitPriceManagement.CustomerHasCustomizations("Customer No.") THEN
        CustomerNo := "Customer No.";
      IF SUPRoom.GET(CustomerNo, "Room (SUP)") THEN
        EXIT(SUPRoom.Description);
    END;

    PROCEDURE GetPartDescription@1100525048() : Text[50];
    VAR
      SUPPart@1100525000 : Record 11071951;
      ServiceUnitPriceManagement@1100528600 : Codeunit 11012846;
      CustomerNo@1100528601 : Code[20];
    BEGIN
      IF ServiceUnitPriceManagement.CustomerHasCustomizations("Customer No.") THEN
        CustomerNo := "Customer No.";
      IF SUPPart.GET(CustomerNo, "Part (SUP)") THEN
        EXIT(SUPPart.Description);
    END;

    LOCAL PROCEDURE DeterminePriceBookFields@1100528657();
    VAR
      ServiceContract@1100528601 : Record 11012812;
      Customer@1100528600 : Record 18;
      ServiceOrderExtension@1100528602 : Record 11071727;
    BEGIN
      IF NOT ("Source Type" IN ["Source Type"::Call, "Source Type"::Direct]) THEN
        EXIT;
      ServiceOrderExtension.GetServOrderExtension("No.");
      CASE TRUE OF
        "Service Contract No." <> '':
          BEGIN
            ServiceContract.GET("Service Contract No.");
            VALIDATE("Price Book Type", ServiceContract."Price Book Type");
            IF MODIFY(TRUE) THEN;
            ServiceOrderExtension.VALIDATE("Price Book Code", ServiceContract."Price Book Code");
            ServiceOrderExtension.VALIDATE("Price Book Index Date", ServiceContract."Price Book Index Date");
            ServiceOrderExtension.VALIDATE("Unit Price Set", ServiceContract."Unit Price Set");
            VALIDATE("Unit Price Status", ServiceContract."Unit Price Status");
          END;
        "Customer No." <> '':
          BEGIN
            Customer.GET("Customer No.");
            VALIDATE("Price Book Type", Customer."Price Book Type");
            IF MODIFY(TRUE) THEN;
            ServiceOrderExtension.VALIDATE("Price Book Code", Customer."Price Book Code");
            ServiceOrderExtension.VALIDATE("Price Book Index Date", Customer."Price Book Index Date");
            ServiceOrderExtension.VALIDATE("Unit Price Set", Customer."Unit Price Set");
            VALIDATE("Unit Price Status", Customer."Unit Price Status");
          END;
      END;
      ServiceOrderExtension.UpdateServOrderExtension("No.");
    END;

    BEGIN
    {
      4PS01 HBK 06-08-09: Field added "Language Code"
      4PS, 15-11-13, DP00483, Performance tuning:
      - MaintainSIFTIndex Disabled for key Service Contract No.,Source Type,Order Date
      - Key Starting Date,Duration Time,Status added
      150504 ITERO.MH Added Symbrio Integration at: onModify, onInsert, onDelete
      150817 ITERO.AC Added field Price List Code
      150904 ITERO.AC Copy Price List Code from Customer to Service Order in DetermineDiscountGroups
      150928 ITERO.PR New Code in "Assigned to"

      160114 ITERO.WG Added ServSetup.GET in assistedit
      160408 ITERO.SB RAD-206 Added field "Tactics Agreement"
    }
    END.
  }
}

