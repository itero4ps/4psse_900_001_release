OBJECT Table 11012875 Service Order Budget Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Advised := FALSE;
               "Purchase Route Reference" := '';
               "Price Agreement" := FALSE;
               "Relation Contract-Installation" := '';
               "Summary Line" := FALSE;
               "Index Date" := TODAY;
               GetServOrder(TRUE);
               VALIDATE("Cost Component");

               CalcOverheadSurcharge;
               UpdateCostControlStatus(UpdateAction::Insert);
             END;

    OnModify=BEGIN
               GetServOrder(FALSE);

               CalcOverheadSurcharge;
               UpdateCostControlStatus(UpdateAction::Modify);
             END;

    OnDelete=VAR
               lBudgetLineRec@1100525000 : Record 11012875;
             BEGIN
               lBudgetLineRec.RESET;
               lBudgetLineRec.SETCURRENTKEY("Service Order No.", "Attached to Line No.");
               lBudgetLineRec.SETRANGE("Service Order No.", "Service Order No.");
               lBudgetLineRec.SETRANGE("Service Contract No.", "Service Contract No.");
               lBudgetLineRec.SETRANGE("Budget Type","Budget Type");
               lBudgetLineRec.SETRANGE("Attached to Line No.", "Line No.");

               lBudgetLineRec.SETRANGE("Surcharge Line Budget", TRUE);
               IF NOT lBudgetLineRec.ISEMPTY THEN
                 lBudgetLineRec.DELETEALL(TRUE);

               UpdateCostControlStatus(UpdateAction::Delete);
             END;

    CaptionML=ENU=Service Order Budget Line;
    LookupPageID=Page11020694;
    DrillDownPageID=Page11020694;
  }
  FIELDS
  {
    { 10  ;   ;Service Order No.   ;Code20        ;TableRelation="Service Order";
                                                   CaptionML=ENU=Service Order No.;
                                                   Editable=No }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 30  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 35  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 40  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 50  ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Unit of Measure") THEN BEGIN
                                                                  IF ("Cost Type" = "Cost Type"::Material) THEN
                                                                    IF "Unit of Measure" <>  xRec."Unit of Measure" THEN
                                                                      CheckItemUnitConversion(Rec, xRec);
                                                                  CalcTotals;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;
                                                            END;

                                                   CaptionML=ENU=Unit of Measure }
    { 60  ;   ;Time Quantity       ;Decimal       ;InitValue=1;
                                                   OnValidate=BEGIN
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=ENU=Time Quantity;
                                                   BlankZero=Yes }
    { 70  ;   ;Unit of Time        ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=ENU=Unit of Time }
    { 80  ;   ;Cost Type           ;Option        ;OnValidate=BEGIN
                                                                IF "Cost Object" <> '' THEN BEGIN
                                                                  IF "Cost Type" <> xRec."Cost Type" THEN
                                                                    IF CONFIRM(Text004,TRUE) THEN BEGIN
                                                                      "Cost Object" := '';
                                                                      //only fill fields below for cost type material
                                                                      "Item No." := '';
                                                                      "Basic Item" := '';
                                                                      "Trade Item" := '';
                                                                      Manufacturer := '';
                                                                      "Vendor (Trade Item)" := '';
                                                                    END ELSE BEGIN
                                                                      "Cost Type" := xRec."Cost Type";
                                                                      EXIT;
                                                                    END;
                                                                END;
                                                                IF ("Cost Type" = "Cost Type"::Labor) THEN BEGIN
                                                                  Price := 0;
                                                                END ELSE BEGIN
                                                                  "Rate Code" := '';
                                                                  Rate := 0;
                                                                  Norm := 0;
                                                                END;
                                                                CalcTotals;
                                                                CheckAdditionalCostService;  //db, 24-02-10
                                                              END;

                                                   CaptionML=ENU=Cost Type;
                                                   OptionCaptionML=ENU=Labor,Material,Subcontracting,Plant,Sundry;
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry }
    { 90  ;   ;Cost Object         ;Code20        ;TableRelation=IF (Cost Type=CONST(Labor)) "Dimension Value".Code WHERE (Cost Type=FILTER(Labor),
                                                                                                                           Global Dimension No.=CONST(2))
                                                                                                                           ELSE IF (Cost Type=CONST(Material)) "Dimension Value".Code WHERE (Cost Type=FILTER(Material),
                                                                                                                                                                                             Global Dimension No.=CONST(2))
                                                                                                                                                                                             ELSE IF (Cost Type=CONST(Plant)) "Dimension Value".Code WHERE (Cost Type=FILTER(Plant),
                                                                                                                                                                                                                                                            Global Dimension No.=CONST(2))
                                                                                                                                                                                                                                                            ELSE IF (Cost Type=CONST(Subcontracting)) "Dimension Value".Code WHERE (Cost Type=FILTER(Subcontracting),
                                                                                                                                                                                                                                                                                                                                    Global Dimension No.=CONST(2))
                                                                                                                                                                                                                                                                                                                                    ELSE IF (Cost Type=CONST(Sundry)) "Dimension Value".Code WHERE (Cost Type=FILTER(Sundry),
                                                                                                                                                                                                                                                                                                                                                                                                    Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                IF ("Cost Object" <> '') AND ("Item No." + "Trade Item" + "Basic Item" = '') THEN  //db, 17-04-08
                                                                  IF xRec."Cost Object" = '' THEN
                                                                    GetDefaultsCostObject()
                                                                  ELSE
                                                                    IF "Cost Object" <> xRec."Cost Object" THEN
                                                                      IF CONFIRM(
                                                                        Text000 +
                                                                        Text001)
                                                                      THEN
                                                                        GetDefaultsCostObject();
                                                              END;

                                                   CaptionML=ENU=Cost Object }
    { 100 ;   ;Norm                ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Cost Type" = "Cost Type"::Labor) OR ("Cost Type" = "Cost Type"::Subcontracting) THEN
                                                                  CalcTotals
                                                                ELSE BEGIN
                                                                  MESSAGE(Text002, "Cost Type");
                                                                  Norm := 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Norm;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 110 ;   ;Rate Code           ;Code10        ;TableRelation="Budget Rate".Code WHERE (Project Filter=FILTER(''));
                                                   OnValidate=VAR
                                                                ServiceOrder@1100528601 : Record 11012823;
                                                                BudgetHourRateManagement@1100528600 : Codeunit 11012358;
                                                                BudgetRateFoundAt@1100528602 : Text[250];
                                                              BEGIN
                                                                IF ("Cost Type" = "Cost Type"::Labor) OR ("Cost Type" = "Cost Type"::Subcontracting) THEN BEGIN
                                                                  IF NOT ServiceOrder.GET("Service Order No.") THEN ServiceOrder.INIT;  //db, 08-04-13: C006883
                                                                  Rate :=
                                                                    BudgetHourRateManagement.GetBudgetRate(
                                                                      1, '', "Service Order No.", ServiceOrder."Service Contract No.", ServiceOrder."Global Dimension 1 Code",
                                                                      "Rate Code", TODAY, BudgetRateFoundAt);

                                                                  IF ("Cost Type" = "Cost Type"::Subcontracting) THEN BEGIN
                                                                    Price := Norm * Rate;
                                                                    Rate := 0;
                                                                  END;
                                                                  CalcTotals;
                                                                END ELSE BEGIN
                                                                  IF "Rate Code" <> '' THEN BEGIN
                                                                    MESSAGE(Text003, "Cost Type");
                                                                    "Rate Code" := '';
                                                                  END;
                                                                  "Wage Component" := '';  //DP00236
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Rate Code }
    { 120 ;   ;Rate                ;Decimal       ;OnValidate=BEGIN
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=ENU=Rate;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 130 ;   ;Hours               ;Decimal       ;CaptionML=ENU=Hours;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 140 ;   ;Price               ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Cost Type" = "Cost Type"::Labor) AND ("Summary Line" = FALSE) THEN BEGIN  //db, 30-01-08
                                                                  MESSAGE(Text005);
                                                                  Price := 0;
                                                                END ELSE BEGIN
                                                                  IF "Gross Price" <> 0 THEN BEGIN
                                                                    "Discount %" := (("Gross Price" - Price) / "Gross Price") * 100;
                                                                  END;
                                                                  CalcTotals;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 145 ;   ;Gross Price         ;Decimal       ;OnValidate=BEGIN
                                                                CalculateNettPrice;
                                                              END;

                                                   CaptionML=ENU=Gross Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 146 ;   ;Discount %          ;Decimal       ;OnValidate=BEGIN
                                                                CalculateNettPrice;
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=ENU=Discount %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 150 ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 160 ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::Item);
                                                                IF "Item No." <> xRec."Item No." THEN
                                                                  "Variant Code" := '';
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 170 ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::"Basic Item");
                                                              END;

                                                   CaptionML=ENU=Basic Item }
    { 180 ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::"Trade Item");
                                                              END;

                                                   CaptionML=ENU=Trade Item }
    { 190 ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=VAR
                                                                TradeItemRec@1100525000 : Record 11012317;
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") AND ("Vendor (Trade Item)" <> '') THEN BEGIN
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  //db.sn, 17-12-10: M18021
                                                                  IF lvExecValidate THEN BEGIN
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item")
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor");
                                                                  END;
                                                                  //db.en, 17-12-10: M18021
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 200 ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Manufacturer }
    { 210 ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   OnValidate=BEGIN
                                                                ValidateCostComponent;
                                                                IF CurrFieldNo <> FIELDNO("Cost Component") THEN BEGIN
                                                                  CostCompRec.CheckDefaultCostComponent("Service Order No.", "Cost Component", '', "Cost Type",
                                                                    "Additional Cost");  //db, 24-02-10
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Component }
    { 220 ;   ;Purchase Route Reference;Code20    ;OnLookup=VAR
                                                              lvRouteRefMgtCU@1100485000 : Codeunit 11012045;
                                                            BEGIN
                                                              lvRouteRefMgtCU.ShowReferenceList("Purchase Route Reference");
                                                            END;

                                                   CaptionML=ENU=Purchase Route Reference;
                                                   Editable=No }
    { 230 ;   ;Price Agreement     ;Boolean       ;CaptionML=ENU=Price Agreement }
    { 240 ;   ;Vendor              ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Vendor }
    { 250 ;   ;Advised             ;Boolean       ;CaptionML=ENU=Advised }
    { 260 ;   ;Finished            ;Boolean       ;OnValidate=BEGIN
                                                                IF (Finished <> xRec.Finished) AND (NOT Finished) AND (NOT "Follow-up Job") AND (CurrFieldNo = FIELDNO(Finished)) THEN BEGIN
                                                                  IF ServOrderRec.GET("Service Order No.") THEN BEGIN
                                                                    IF (ServOrderRec."Date/Time Export to FSA" <> 0DT) AND  //db, 08-02-07
                                                                       ((ServOrderRec.Status = ServOrderRec.Status::"Technical Finished") OR
                                                                        (ServOrderRec.Status = ServOrderRec.Status::"Administrative Finished")) THEN
                                                                      Finished := TRUE;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Finished }
    { 261 ;   ;Follow-up Job       ;Boolean       ;CaptionML=ENU=Follow-up Job }
    { 270 ;   ;Service Location No.;Code20        ;TableRelation="Service Location".No.;
                                                   OnValidate=BEGIN
                                                                IF ServOrderRec.GET("Service Order No.") THEN  //db, 05-03-08
                                                                  TESTFIELD("Service Location No.", ServOrderRec."Service Location No.");
                                                              END;

                                                   CaptionML=ENU=Service Location No. }
    { 300 ;   ;Object No.          ;Code20        ;TableRelation=Service-Object.No.;
                                                   OnValidate=BEGIN
                                                                DetermineObjectCustomer;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Object No. }
    { 305 ;   ;Object Customer     ;Code20        ;CaptionML=ENU=Object Customer }
    { 310 ;   ;Building            ;Text30        ;CaptionML=ENU=Building }
    { 320 ;   ;Floor               ;Text30        ;CaptionML=ENU=Floor }
    { 330 ;   ;Room                ;Text30        ;CaptionML=ENU=Room }
    { 340 ;   ;Relation Contract-Installation;Text30;
                                                   CaptionML=ENU=Relation Contract-Installation }
    { 350 ;   ;Discipline          ;Code10        ;TableRelation=Discipline;
                                                   CaptionML=ENU=Discipline }
    { 351 ;   ;Trade Speciality    ;Code10        ;TableRelation="Trade Speciality".Code WHERE (Discipline=FIELD(Discipline));
                                                   CaptionML=ENU=Trade Speciality }
    { 352 ;   ;Trade Expertise     ;Code10        ;TableRelation="Trade Expertise";
                                                   OnValidate=BEGIN
                                                                TradeExpRec.GetRelatedValue(Discipline, "Trade Speciality", "Trade Expertise");
                                                              END;

                                                   CaptionML=ENU=Trade Expertise }
    { 360 ;   ;Index Date          ;Date          ;CaptionML=ENU=Index Date }
    { 370 ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract.No.;
                                                   CaptionML=ENU=Service Contract No. }
    { 380 ;   ;Additional Cost     ;Boolean       ;OnValidate=BEGIN
                                                                ValidateAdditionalCost;
                                                              END;

                                                   CaptionML=ENU=Additional Cost }
    { 390 ;   ;Source Type         ;Option        ;InitValue=Other;
                                                   CaptionML=ENU=Source Type;
                                                   OptionCaptionML=ENU=Call,Contract,Other,Estimate;
                                                   OptionString=Call,Contract,Other,Estimate;
                                                   Editable=No }
    { 400 ;   ;Total Labor         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line".Amount WHERE (Service Order No.=FIELD(Service Order No.),
                                                                                                             Cost Type=CONST(Labor),
                                                                                                             Object No.=FIELD(Object Filter),
                                                                                                             Maintenance Scheme=FIELD(Maintenance Scheme Filter)));
                                                   CaptionML=ENU=Total Labor;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 401 ;   ;Total Material      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line".Amount WHERE (Service Order No.=FIELD(Service Order No.),
                                                                                                             Cost Type=CONST(Material),
                                                                                                             Object No.=FIELD(Object Filter),
                                                                                                             Maintenance Scheme=FIELD(Maintenance Scheme Filter)));
                                                   CaptionML=ENU=Total Material;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 402 ;   ;Total Subcontracting;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line".Amount WHERE (Service Order No.=FIELD(Service Order No.),
                                                                                                             Cost Type=CONST(Subcontracting),
                                                                                                             Object No.=FIELD(Object Filter),
                                                                                                             Maintenance Scheme=FIELD(Maintenance Scheme Filter)));
                                                   CaptionML=ENU=Total Subcontracting;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 403 ;   ;Total Plant         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line".Amount WHERE (Service Order No.=FIELD(Service Order No.),
                                                                                                             Cost Type=CONST(Plant),
                                                                                                             Object No.=FIELD(Object Filter),
                                                                                                             Maintenance Scheme=FIELD(Maintenance Scheme Filter)));
                                                   CaptionML=ENU=Total Plant;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 404 ;   ;Total Sundry        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line".Amount WHERE (Service Order No.=FIELD(Service Order No.),
                                                                                                             Cost Type=CONST(Sundry),
                                                                                                             Object No.=FIELD(Object Filter),
                                                                                                             Maintenance Scheme=FIELD(Maintenance Scheme Filter)));
                                                   CaptionML=ENU=Total Sundry;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 405 ;   ;Total Amount        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line".Amount WHERE (Service Order No.=FIELD(Service Order No.),
                                                                                                             Object No.=FIELD(Object Filter),
                                                                                                             Maintenance Scheme=FIELD(Maintenance Scheme Filter)));
                                                   CaptionML=ENU=Total Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 406 ;   ;Total Hours         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line".Hours WHERE (Service Order No.=FIELD(Service Order No.),
                                                                                                            Object No.=FIELD(Object Filter),
                                                                                                            Maintenance Scheme=FIELD(Maintenance Scheme Filter)));
                                                   CaptionML=ENU=Total Hours;
                                                   Editable=No }
    { 407 ;   ;Total Surcharge     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Budget Line".Amount WHERE (Service Order No.=FIELD(Service Order No.),
                                                                                                             Surcharge Line=CONST(Yes),
                                                                                                             Object No.=FIELD(Object Filter),
                                                                                                             Maintenance Scheme=FIELD(Maintenance Scheme Filter)));
                                                   CaptionML=ENU=Total Surcharge;
                                                   Editable=No }
    { 410 ;   ;External Text       ;Text250       ;OnValidate=BEGIN
                                                                "External Text Block" := "External Text" <> '';
                                                              END;

                                                   CaptionML=ENU=External Text }
    { 411 ;   ;External Text Block ;Boolean       ;CaptionML=ENU=External Text Block;
                                                   Editable=No }
    { 420 ;   ;Overhead Surcharge  ;Decimal       ;CaptionML=ENU=Overhead Surcharge;
                                                   Editable=No }
    { 425 ;   ;Wage Component      ;Code10        ;TableRelation="Wage Component";
                                                   OnValidate=BEGIN
                                                                CalcTotals;  //DP00236
                                                              END;

                                                   CaptionML=ENU=Wage Component }
    { 430 ;   ;Summary Line        ;Boolean       ;CaptionML=ENU=Summary Line }
    { 435 ;   ;Surcharge Line      ;Boolean       ;CaptionML=ENU=Surcharge Line }
    { 440 ;   ;Budget Type         ;Option        ;CaptionML=ENU=Budget Type;
                                                   OptionCaptionML=ENU=Service Order,Service Contract;
                                                   OptionString=Order,Contract }
    { 470 ;   ;Code                ;Code20        ;CaptionML=ENU=Code }
    { 490 ;   ;Line No. External Estimate;Integer ;CaptionML=ENU=Line No. External Estimate;
                                                   BlankZero=Yes }
    { 500 ;   ;Surcharge Line Budget;Boolean      ;CaptionML=ENU=Surcharge Line Budget;
                                                   Editable=No }
    { 510 ;   ;Attached to Line No.;Integer       ;CaptionML=ENU=Attached to Line No. }
    { 520 ;   ;Part of Line        ;Integer       ;TableRelation="Service Order Budget Line"."Line No." WHERE (Service Order No.=FIELD(Service Order No.));
                                                   OnValidate=BEGIN
                                                                DetermineBOMLevel("Part of Line","Level BOM");
                                                              END;

                                                   CaptionML=ENU=Part of Line }
    { 525 ;   ;Original Quantity   ;Decimal       ;CaptionML=ENU=Original Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 527 ;   ;Level BOM           ;Integer       ;CaptionML=ENU=Level BOM;
                                                   Description=Level after exploding BOM-Item;
                                                   Editable=No }
    { 528 ;   ;BOM Item No.        ;Code20        ;TableRelation=Item;
                                                   CaptionML=ENU=BOM Item No.;
                                                   Description=Original Item before exploding BOM }
    { 530 ;   ;Scheme Code         ;Code15        ;CaptionML=ENU=Scheme Code }
    { 531 ;   ;Comments            ;Text50        ;CaptionML=ENU=Comments }
    { 532 ;   ;Supply              ;Boolean       ;CaptionML=ENU=Supply }
    { 533 ;   ;Comments for Logistics;Text50      ;CaptionML=ENU=Comments for Logistics }
    { 534 ;   ;Material Sheet      ;Option        ;CaptionML=ENU=Material Sheet;
                                                   OptionCaptionML=ENU=Customer and Assemly,Customer Only,Assembly only,Do not report;
                                                   OptionString=Customer and Assemly,Customer Only,Assembly only,Do not report }
    { 540 ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                IF "Variant Code" <> '' THEN
                                                                  TESTFIELD("Item No.");
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 550 ;   ;Work Line Type      ;Option        ;CaptionML=ENU=Work Line Type;
                                                   OptionCaptionML=ENU=Maintenance Scheme,Modification,Standard Object,Standard Object Deinstallation,Standard Object Installation,Object Installation,Object;
                                                   OptionString=Maintenance Scheme,Modification,Standard Object,Standard Object Deinstallation,Standard Object Installation,Object Installation,Object }
    { 560 ;   ;Work Code           ;Code20        ;TableRelation=IF (Work Line Type=CONST(Maintenance Scheme)) "Maintenance Scheme".Code
                                                                 ELSE IF (Work Line Type=CONST(Modification)) "Object Modification".No.
                                                                 ELSE IF (Work Line Type=CONST(Standard Object)) "Standard Object".No.
                                                                 ELSE IF (Work Line Type=CONST(Standard Object Deinstallation)) "Standard Object".No.
                                                                 ELSE IF (Work Line Type=CONST(Standard Object Installation)) "Standard Object".No.
                                                                 ELSE IF (Work Line Type=CONST(Object Installation)) Service-Object.No.
                                                                 ELSE IF (Work Line Type=CONST(Object)) Service-Object.No.;
                                                   CaptionML=ENU=Work Code;
                                                   NotBlank=Yes }
    { 570 ;   ;Work Index Date     ;Date          ;CaptionML=ENU=Work Index Date }
    { 600 ;   ;Glazing Service Call No.;Code20    ;TableRelation="Glazing Service Call";
                                                   CaptionML=ENU=Glazing Service Call No.;
                                                   Description=jhoek.050511;
                                                   Editable=No }
    { 610 ;   ;Glazing Service Call Line No.;Integer;
                                                   TableRelation="Glazing Service Call Line"."Line No." WHERE (Glazing Service Call No.=FIELD(Glazing Service Call No.));
                                                   CaptionML=ENU=Glazing Service Call Line No.;
                                                   Description=jhoek.050511;
                                                   Editable=No }
    { 620 ;   ;Maintenance Scheme Type;Option     ;CaptionML=ENU=Maintenance Scheme Type;
                                                   OptionCaptionML=ENU=Service,Plant;
                                                   OptionString=Service,Plant }
    { 630 ;   ;Maintenance Scheme  ;Code20        ;CaptionML=ENU=Maintenance Scheme }
    { 640 ;   ;Price History 0 Exists;Boolean     ;CaptionML=ENU=Price History 0 Exists;
                                                   Editable=No }
    { 710 ;   ;Unit Price Code OLD ;Code20        ;CaptionML=ENU=Unit Price Code (OBSOLETE);
                                                   Description=OBSOLETE;
                                                   Editable=No }
    { 720 ;   ;Unit Price Index Date OLD;Date     ;CaptionML=ENU=Unit Price Index Date (OBSOLETE);
                                                   NotBlank=Yes;
                                                   Description=OBSOLETE;
                                                   Editable=No }
    { 730 ;   ;Unit Price Line Code OLD;Code20    ;CaptionML=ENU=Unit Price Line Code (OBSOLETE);
                                                   Description=OBSOLETE;
                                                   Editable=No }
    { 740 ;   ;Unit Price Budget Line No.;Integer ;CaptionML=ENU=Unit Price Budget Line No.;
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 750 ;   ;Object Filter       ;Code250       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Object Filter }
    { 760 ;   ;Maintenance Scheme Filter;Code250  ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Maintenance Scheme Filter }
    { 770 ;   ;SUP Room            ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("SUP Recording Line".Room WHERE (Service Order No.=FIELD(Service Order No.),
                                                                                                       Line No.=FIELD(Recording Line No.)));
                                                   CaptionML=ENU=SUP Room;
                                                   Editable=No }
    { 780 ;   ;Recording Line No.  ;Integer       ;CaptionML=ENU=Recording Line No.;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Budget Type,Service Order No.,Service Contract No.,Object No.,Maintenance Scheme,Line No.;
                                                   SumIndexFields=Hours,Amount,Overhead Surcharge;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Service Contract No.,Source Type,Cost Component,Cost Type,Cost Object,Finished,Index Date;
                                                   SumIndexFields=Hours,Amount,Overhead Surcharge }
    {    ;Service Contract No.,Source Type,Cost Type,Cost Object,Finished,Index Date;
                                                   SumIndexFields=Hours,Amount,Overhead Surcharge }
    {    ;Service Location No.,Source Type,Cost Component,Finished,Index Date;
                                                   SumIndexFields=Hours,Amount,Overhead Surcharge }
    {    ;Service Location No.,Source Type,Cost Type,Cost Object,Finished,Index Date;
                                                   SumIndexFields=Hours,Amount,Overhead Surcharge }
    {    ;Service Order No.,Finished,Index Date   ;SumIndexFields=Hours,Amount,Overhead Surcharge }
    {    ;Service Order No.,Cost Type,Cost Object,Finished,Index Date;
                                                   SumIndexFields=Hours,Amount,Overhead Surcharge }
    {    ;Service Order No.,Attached to Line No.   }
    {    ;Service Order No.,Object No.,Cost Type  ;SumIndexFields=Hours,Amount,Overhead Surcharge }
    {    ;Budget Type,Service Order No.,Line No.   }
    {    ;Service Order No.,Surcharge Line        ;SumIndexFields=Hours,Amount,Overhead Surcharge }
    {    ;Service Order No.,Cost Type,Surcharge Line;
                                                   SumIndexFields=Hours,Amount,Overhead Surcharge }
    {    ;Budget Type,Service Order No.,Object No.,Maintenance Scheme,Finished;
                                                   SumIndexFields=Amount }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ServOrderRec@1100485013 : Record 11012823;
      ServContrRec@1100485011 : Record 11012812;
      ServLocRec@1100485017 : Record 11012801;
      TradeExpRec@1100485012 : Record 11020286;
      ItemRec@1100485009 : Record 27;
      CostCompRec@1100525001 : Record 11012012;
      DimValRec@1100485008 : Record 349;
      DimMgt@1100485007 : Codeunit 408;
      ValidateCu@1100485001 : Codeunit 11012033;
      GanttChartMgt@1100525000 : Codeunit 11012037;
      ItemTypeOpt@1100485000 : 'Item,Basic Item,Trade Item,Trade Vendor';
      Text000@1100485006 : TextConst 'ENU=Copy Data from new Cost Object?\\';
      Text001@1100485005 : TextConst 'ENU=Empty fields only will be updated. Existing data will not be overruled.';
      Text002@1100485004 : TextConst 'ENU=Cost Type of Line is %1, input of norm not allowed';
      Text003@1100485003 : TextConst 'ENU=Cost Type of line is %1, input of rate code not allowed.';
      Text004@1100485002 : TextConst 'ENU=Change Cost Type ?';
      Text005@1100485014 : TextConst 'ENU=Unit Price not allowed because Cost Type of this record is Labor !';
      UpdateAction@1100485010 : 'Insert,Modify,Delete';
      DontUpdateServiceOrderObject@1100528600 : Boolean;

    PROCEDURE CalcTotals@1();
    VAR
      WageCompRec@1100528900 : Record 11012014;
      OverTimeFactor@1100528901 : Decimal;
    BEGIN
      Hours := ROUND("Time Quantity" * Quantity * Norm);

      IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
        IF Rate = 0 THEN  //db, 30-01-08
          Amount := ROUND("Time Quantity" * Quantity * Price)
        ELSE
          Amount := ROUND("Time Quantity" * Quantity * Norm * Rate);
        //DP00236.sn
        IF "Wage Component" <> '' THEN BEGIN
          OverTimeFactor := WageCompRec.GetBudgetOverTimeFactor('', "Wage Component");
          IF OverTimeFactor <> 0 THEN
            Amount := Amount * OverTimeFactor;
        END;
        //DP00236.en
      END ELSE BEGIN
        Amount := ROUND("Time Quantity" * Quantity * Price);
      END;

      ///"Overhead Surcharge" := CalcOverheadSurcharge;  //db, 28-11-07
    END;

    PROCEDURE GetDefaultsCostObject@3();
    BEGIN
      DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE,'');

      IF Description = '' THEN
        Description := DimValRec.Name;
      IF "Unit of Measure" = '' THEN
        "Unit of Measure" := DimValRec."Unit of Measure";
      IF "Unit of Time" = '' THEN
        "Unit of Time" := DimValRec."Unit of Time";
      IF "Cost Component" = '' THEN
        "Cost Component" := DimValRec."Cost Component";

      "Cost Type" := DimValRec."Cost Type";
      CASE "Cost Type" OF
        "Cost Type"::Labor:
          BEGIN
            IF Norm = 0 THEN
              Norm := DimValRec.Norm;
            IF ("Rate Code" = '') AND (Rate = 0) THEN
              VALIDATE("Rate Code", DimValRec."Rate Code");
          END;
        ELSE
          IF Price = 0 THEN
            Price := DimValRec.Price;
      END;
      CalcTotals;
    END;

    PROCEDURE ValidateItem@31(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item');
    VAR
      DummyDat@11012001 : Date;
      lvRefDate@1100485003 : Date;
      lvDiscRef1@1100485002 : Code[20];
      lvDiscRef2@1100485001 : Code[20];
      ServiceLocation@1100525000 : Record 11012801;
      ServiceOrder@1100525001 : Record 11012823;
    BEGIN
      GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2);
      IF ServiceLocation.GET("Service Location No.") AND (ServiceLocation."Language Code" <> '') THEN
        ValidateCu.SetLanguageCode(ServiceLocation."Language Code")
      ELSE BEGIN
        ServiceOrder.GET("Service Order No.");
        ValidateCu.SetLanguageCode(ServiceOrder."Language Code");
      END;

      ValidateCu.ValidateItem(
        LTypeArtOpt,"Trade Item","Item No.",Manufacturer,"Vendor (Trade Item)",
        "Basic Item","Cost Object",Description,"Unit of Measure",Price,
        "Discount %",DummyDat,"Gross Price","Description 2","Cost Component",
        lvDiscRef1, lvDiscRef2, lvRefDate, '');

      IF LTypeArtOpt = LTypeArtOpt::"Trade Item" THEN
        "Price History 0 Exists" := ValidateCu.PriceHistory0Exists("Trade Item", "Vendor (Trade Item)", lvRefDate)
      ELSE
        "Price History 0 Exists" := FALSE;


      VALIDATE("Cost Component");

      IF ItemRec.GET("Item No.") THEN BEGIN
        IF ItemRec.Text <> '' THEN
          VALIDATE("External Text", ItemRec.Text);
      END;

      CalcTotals;  //db, 08-09-11
    END;

    PROCEDURE HandleLookupUnit@1210190008();
    VAR
      ItemUnitRec@1210190000 : Record 5404;
      lvUnit@1210190001 : Code[10];
    BEGIN
      lvUnit := ItemUnitRec.HandleLookupUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)");
      IF (lvUnit <> '') AND (lvUnit <> "Unit of Measure") THEN BEGIN
        xRec."Unit of Measure" := "Unit of Measure";  //db, 01-07-04: standard bug
        VALIDATE("Unit of Measure", lvUnit);
      END;
    END;

    PROCEDURE CheckItemUnitConversion@1210190010(VAR MainNewRec@1210190006 : Record 11012875;MainOldRec@1210190007 : Record 11012875);
    VAR
      ItemRec@1210190004 : Record 27;
      UnitFactor@1210190005 : Decimal;
      UnitFactorOld@1210190003 : Decimal;
      UnitFactorNew@1210190002 : Decimal;
      UnitControl@1210190001 : Codeunit 5402;
    BEGIN
      WITH MainNewRec DO BEGIN
        UnitFactorOld := 1;
        UnitFactorNew := 1;
        IF "Trade Item" <> '' THEN BEGIN
          ValidateCu.ValidateUnit(ItemTypeOpt::"Trade Item",
            "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
            Quantity,"Unit of Measure",UnitFactorNew);
        END ELSE BEGIN
          IF "Basic Item" <> '' THEN BEGIN
            ValidateCu.ValidateUnit(ItemTypeOpt::"Basic Item",
              "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
              Quantity,"Unit of Measure",UnitFactorNew);
          END ELSE BEGIN  //db, 07-04-08: M10070
            IF "Item No." <> '' THEN BEGIN
              ItemRec.GET("Item No.");
              UnitFactorOld := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, MainOldRec."Unit of Measure");
              UnitFactorNew := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, "Unit of Measure");
              UnitFactor := UnitFactorOld;
              ValidateCu.ValidateUnit(ItemTypeOpt::Item,
                "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
                Quantity,"Unit of Measure",UnitFactor);
            END;
          END;
        END;
        IF (UnitFactorNew * UnitFactorOld) <> 0 THEN BEGIN
          IF UnitFactorNew <> UnitFactorOld THEN BEGIN //db, 20-04-11: M26826
            IF "Gross Price" <> 0 THEN
              VALIDATE("Gross Price", ("Gross Price" * UnitFactorNew / UnitFactorOld))
            ELSE
              VALIDATE(Price, (Price * UnitFactorNew / UnitFactorOld));
          END;
        END;
      END;
    END;

    PROCEDURE CalculateNettPrice@1210190005();
    BEGIN
      IF "Gross Price" <> 0 THEN BEGIN
        Price := "Gross Price" - (("Gross Price"/100) * "Discount %");
      END;
    END;

    PROCEDURE GetServOrder@1100485000(lvInit@1100485001 : Boolean);
    BEGIN
      IF "Budget Type" = "Budget Type"::Contract THEN EXIT;  //db, 17-12-07

      ServOrderRec.GET("Service Order No.");
      "Service Location No." := ServOrderRec."Service Location No.";
      "Service Contract No." := ServOrderRec."Service Contract No.";  //db, 25-09-06
      "Source Type" := ServOrderRec."Source Type";  //db, 03-11-06
      IF (NOT "Follow-up Job") AND
         (ServOrderRec."Date/Time Export to FSA" <> 0DT) AND  //db, 08-02-07
         ((ServOrderRec.Status = ServOrderRec.Status::"Technical Finished") OR
          (ServOrderRec.Status = ServOrderRec.Status::"Administrative Finished")) THEN
        Finished := TRUE; //db, 24-11-06

      IF lvInit = TRUE THEN BEGIN
        CurrFieldNo := FIELDNO("Service Order No.");  //db, 24-02-10
        CheckAdditionalCostService;  //db, 24-02-10
      END;
    END;

    PROCEDURE CheckDateOutOfUse@1100485024() StartDate : Date;
    BEGIN
      //db, 14-11-07
      StartDate := "Index Date";

      IF StartDate = 0D THEN BEGIN
        IF ServOrderRec.GET("Service Order No.") THEN BEGIN  //db, 05-03-08
          IF ServOrderRec."Starting Date" <> 0D THEN
            StartDate := ServOrderRec."Starting Date"
          ELSE
            StartDate := ServOrderRec."Order Date";
        END;
      END;

      EXIT(StartDate);
    END;

    PROCEDURE CalcOverheadSurcharge@1100525006() lvTotalSurcharge : Decimal;
    VAR
      ServSetup@1100485001 : Record 11012800;
      SurchargeRec@1210190000 : Record 11020208;
      lvServType@1100485002 : Code[20];
      lvWageComp@1100485000 : Code[20];
      lvQuan@1100485003 : Decimal;
      lvDate@1100485004 : Date;
      DepartmentCode@1100525000 : Code[20];
      lBudgetLineRec@1100525001 : Record 11012875;
      lStartLine@1100525003 : Integer;
      lvSurcharge@1100525004 : Decimal;
      SurchDimValRec@1100525005 : Record 349;
      EmplRec@1100409000 : Record 5200;
      Resource@1100529000 : Record 11229278;
      GLSetup@1100409001 : Record 98;
    BEGIN
      // New version 25-06-2010
      IF "Budget Type" = "Budget Type"::Order THEN
        EXIT;

      lvTotalSurcharge := 0;

      IF "Line No." = 0 THEN EXIT;
      IF "Surcharge Line" THEN EXIT;

      "Overhead Surcharge" := 0;

      lBudgetLineRec.SETCURRENTKEY("Service Order No.", "Attached to Line No.");
      lBudgetLineRec.SETRANGE("Service Order No.", "Service Order No.");
      lBudgetLineRec.SETRANGE("Service Contract No.", "Service Contract No.");
      lBudgetLineRec.SETRANGE("Budget Type","Budget Type");
      lBudgetLineRec.SETRANGE("Attached to Line No.", "Line No.");
      lBudgetLineRec.SETRANGE("Surcharge Line Budget", TRUE);
      IF NOT lBudgetLineRec.ISEMPTY THEN
        lBudgetLineRec.DELETEALL(TRUE);

      IF "Cost Object" = '' THEN
        EXIT;

      DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, '');

      ServSetup.GET;
      IF "Wage Component" <> '' THEN
        lvWageComp := "Wage Component"
      ELSE
        lvWageComp := ServSetup."Wage Component (Ovh. Surch.)";

      lvQuan := Quantity;
      IF "Time Quantity" <> 0 THEN
        lvQuan := lvQuan * "Time Quantity";
      //IF Norm <> 0 THEN  //db, 10-06-13: C007910
      IF "Cost Type" = "Cost Type"::Labor THEN
        lvQuan := lvQuan * Norm;

      IF "Budget Type" = "Budget Type"::Order THEN BEGIN
        ServOrderRec.GET("Service Order No.");
        DepartmentCode := ServOrderRec."Global Dimension 1 Code";  //db, 01-10-12: C001629
        IF "Additional Cost" = TRUE THEN
          lvServType := ServOrderRec."Service Type (Other)"
        ELSE
          lvServType := ServOrderRec."Service Type";
      END;
      IF "Budget Type" = "Budget Type"::Contract THEN BEGIN
        ServContrRec.GET("Service Contract No.");
        //db.sn, 01-10-12: C001629
        DepartmentCode := ServContrRec."Global Dimension 1 Code";
        //db.en, 01-10-12: C001629
        IF "Additional Cost" = TRUE THEN
          lvServType := ServContrRec."Service Type (Other)"
        ELSE
          lvServType := ServContrRec."Service Type";
      END;

      //db.sn, 01-10-12: C001629
      //IF NOT EmplRec.GET(ServOrderRec."Employee No.") THEN EmplRec.INIT;  //DP00465.o
      GLSetup.GET;
      IF GLSetup."Source Department Surcharge" = GLSetup."Source Department Surcharge"::Employee THEN BEGIN
        //option not useful for subcontracting and not recommended for employee
        //DP00465.sn
        IF ServOrderRec."Employee No." <> '' THEN BEGIN
          Resource.SETCURRENTKEY(Type, Company, "Source No.");
          Resource.SETRANGE(Type, Resource.Type::Employee);
          Resource.SETRANGE(Company, COMPANYNAME);
          Resource.SETRANGE("Source No.", ServOrderRec."Employee No.");
          IF Resource.FINDFIRST THEN BEGIN
            IF NOT EmplRec.GET(Resource."Source No.") THEN
              EmplRec.INIT;
        //DP00465.en
            IF EmplRec."Global Dimension 1 Code" <> '' THEN
              DepartmentCode := EmplRec."Global Dimension 1 Code";
          END;
        END;
      END;
      //db.en, 01-10-12: C001629

      IF "Index Date" = 0D THEN
        lvDate := TODAY
      ELSE
        lvDate := "Index Date";

      IF SurchargeRec.GetSurcharges(
        1, lvServType, '', TRUE, DimValRec."Cost Type", "Cost Object", lvWageComp,
        DepartmentCode, EmplRec."Trade Association",  //db, 01-10-12: C001629
        "Cost Component", lvDate, SurchargeRec) THEN
      BEGIN
        lBudgetLineRec.INIT;
        lBudgetLineRec.TRANSFERFIELDS(Rec);
        lBudgetLineRec."Line No." := 0;
        lBudgetLineRec.Price := 0;
        lBudgetLineRec."Rate Code" := '';
        lBudgetLineRec.Rate := 0;
        lBudgetLineRec.Norm := 0;
        lBudgetLineRec.CalcTotals;
        lBudgetLineRec.VALIDATE("Cost Object", '');
        lBudgetLineRec.VALIDATE("Cost Type");
        lBudgetLineRec."Overhead Surcharge" := 0;
        lStartLine := "Line No.";
        REPEAT
          IF SurchargeRec."Apply for Service Budget" THEN BEGIN
            IF SurchargeRec.Percentage <> 0 THEN
              IF SurchargeRec."Surcharge over Surcharge" THEN
                lvSurcharge := ROUND((Amount + lvTotalSurcharge) * SurchargeRec.Percentage/100)
              ELSE
                lvSurcharge := ROUND(Amount * SurchargeRec.Percentage/100)
            ELSE
              lvSurcharge := ROUND(SurchargeRec.Amount * lvQuan);
            lvTotalSurcharge := lvTotalSurcharge + lvSurcharge;
            IF lvSurcharge <> 0 THEN BEGIN
              lBudgetLineRec."Attached to Line No." := "Line No.";
              lBudgetLineRec."Surcharge Line Budget" := TRUE;
              lBudgetLineRec."Surcharge Line" := TRUE;
              lBudgetLineRec."Overhead Surcharge" := lvSurcharge;
              IF SurchargeRec."Source Type Cost Object" = SurchargeRec."Source Type Cost Object"::Fixed THEN BEGIN
                SurchargeRec.GetSurchargeDimVal(DimValRec, SurchDimValRec);
                lBudgetLineRec."Cost Object" := SurchDimValRec.Code;
                lBudgetLineRec."Cost Type" := SurchDimValRec."Cost Type";
              END;
              IF SurchDimValRec."Cost Component" <> '' THEN
                lBudgetLineRec."Cost Component" := SurchDimValRec."Cost Component";
      //        IF SurchargeRec."Source Type Department" = SurchargeRec."Source Type Department"::Fixed THEN BEGIN
      //           lBudgetLineRec."Global Dimension 1 Code" := SurchargeRec."Coverage Department";
      //        END;
              REPEAT
                //lStartLine += 1; //**4PS.o
                lStartLine += 500; //**4PS.n
                lBudgetLineRec."Line No." := lStartLine;
              UNTIL lBudgetLineRec.INSERT(TRUE);
              //db.sn, 16-09-10
              lBudgetLineRec."Index Date" := lvDate;
              lBudgetLineRec.MODIFY;
              //db.en, 16-09-10
            END;
          END;
        UNTIL SurchargeRec.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateCostControlStatus@10(lUpdateAction@1100485002 : 'Insert,Modify,Delete');
    VAR
      lvServOrderRec@1100485000 : Record 11012823;
    BEGIN
      IF "Budget Type" <> "Budget Type"::Order THEN
        EXIT;
      IF NOT lvServOrderRec.GET("Service Order No.") THEN
        EXIT;

      UpdateServHoursGanttChart(lUpdateAction); //20-07-09
      UpdateBudgetSurchLinesFinished(lUpdateAction);
      UpdateServiceOrderObject(lUpdateAction);
    END;

    PROCEDURE GetReferenceData@1100485002(VAR lvRefDate@1100485002 : Date;VAR lvDiscRef1@1100485001 : Code[20];VAR lvDiscRef2@1100485000 : Code[20]);
    BEGIN
      lvDiscRef1 := '';
      lvDiscRef2 := '';
      IF "Service Order No." <> '' THEN BEGIN
        IF NOT ServOrderRec.GET("Service Order No.") THEN ServOrderRec.INIT;
        lvRefDate := ValidateCu.GetRefDateServOrder(ServOrderRec);
      //  lvDiscRef1 := ServOrderRec."Purch Discount Term Group 1";
      //  lvDiscRef2 := ServOrderRec."Purch Discount Term Group 2";
      END ELSE BEGIN
        IF NOT ServLocRec.GET("Service Location No.") THEN ServLocRec.INIT;
        IF NOT ServContrRec.GET("Service Contract No.") THEN ServContrRec.INIT;
        lvRefDate := ValidateCu.GetRefDateServContract(ServContrRec);
      END;
    END;

    PROCEDURE UpdateServHoursGanttChart@1100525000(UpdateAction@1100525000 : 'Insert,Modify,Delete,Rename');
    VAR
      ServiceOrderBudgetLine@1100528600 : Record 11012875;
    BEGIN
      //20-07-09
      ServiceOrderBudgetLine := Rec;
      IF NOT ServiceOrderBudgetLine.FIND('=') THEN
        ServiceOrderBudgetLine.INIT;
      GanttChartMgt.UpdateBudgetHours(UpdateAction,Rec,ServiceOrderBudgetLine);
    END;

    PROCEDURE CheckAdditionalCostService@1100525017();
    BEGIN
      //db, 24-02-10
      IF "Service Order No." = '' THEN EXIT;
      IF NOT ServOrderRec.GET("Service Order No.") THEN EXIT;

      IF (CurrFieldNo = FIELDNO("Service Order No.")) OR (CurrFieldNo = FIELDNO("Cost Type")) THEN BEGIN
        "Additional Cost" :=
          ServOrderRec.GetAdditionalCostService("Service Order No.","Cost Object","Cost Type"+1,'');

        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Cost Type" <> xRec."Cost Type") THEN BEGIN
          VALIDATE("Cost Component");
        END;
      END;
    END;

    PROCEDURE ValidateAdditionalCost@1100525003();
    VAR
      SaveCostComp@1100525000 : Text[30];
    BEGIN
      SaveCostComp := "Cost Component";
      TESTFIELD("Service Order No.");
      VALIDATE("Service Order No.");
      IF CurrFieldNo <> FIELDNO("Additional Cost") THEN EXIT;  //db, 18-03-10: T4641

      CheckCostComponent(SaveCostComp);  //db, 07-06-10: M19425
    END;

    PROCEDURE CheckCostComponent@1100525004(CostComp@1100525000 : Text[30]);
    VAR
      CostCompRec@1100525001 : Record 11012012;
    BEGIN
      //db, 07-06-10: M19425 (also called by function CreateOrAddToServOrder from table 11012839)
      IF CostCompRec.GET(CostComp) THEN BEGIN
         "Cost Component" := CostComp;
         IF ("Additional Cost" = TRUE) THEN BEGIN
           IF (CostCompRec."Cost Component (Add.Cost)" <> '') THEN
             "Cost Component" := CostCompRec."Cost Component (Add.Cost)";
         END ELSE BEGIN
           CostCompRec.SETRANGE("Cost Component (Add.Cost)", CostComp);
           IF CostCompRec.FINDSET THEN BEGIN
             REPEAT
               IF (CostCompRec."Cost Component (Add.Cost)" = CostComp) THEN
                 "Cost Component" := CostCompRec.Code;
             UNTIL CostCompRec.NEXT = 0;
           END;
         END;
      END;
    END;

    PROCEDURE ValidateCostComponent@1100525002();
    VAR
      CostCompRec@1100525000 : Record 11012012;
      CostCompRec2@1100525001 : Record 11012012;
    BEGIN
      IF CurrFieldNo <> FIELDNO("Cost Component") THEN EXIT;  //db, 18-03-10: T4642

      IF CostCompRec.GET("Cost Component") THEN BEGIN
        //db.sn, 06-12-10: M24263
        IF CostCompRec."Additional Cost (Service)" THEN BEGIN
          CostCompRec2.SETRANGE("Cost Component (Add.Cost)", "Cost Component");
          IF NOT CostCompRec2.FINDFIRST THEN EXIT;
        END ELSE BEGIN
          IF CostCompRec."Cost Component (Add.Cost)" = '' THEN EXIT;
        END;
        //db.en, 06-12-10: M24263
        "Additional Cost" := CostCompRec."Additional Cost (Service)";
      END;
    END;

    PROCEDURE ChangeQuantityExplodedLines@1100525005(QuantityFactor@1100525000 : Decimal);
    VAR
      SOBudgetLine2@1100525001 : Record 11012875;
    BEGIN
      //**4PS
      SOBudgetLine2.RESET;
      SOBudgetLine2.SETRANGE("Service Order No.","Service Order No.");
      SOBudgetLine2.SETRANGE("Part of Line","Line No.");
      SOBudgetLine2.SETFILTER("Line No.", '<>%1', "Line No.");
      IF SOBudgetLine2.FINDSET(TRUE, FALSE) THEN
        REPEAT
          IF NOT ((SOBudgetLine2."Item No." = '') AND (SOBudgetLine2."Original Quantity" = 0)) THEN BEGIN
            IF SOBudgetLine2."Item No." = '' THEN BEGIN
              SOBudgetLine2.ChangeQuantityExplodedLines(QuantityFactor);
              SOBudgetLine2."Original Quantity" := QuantityFactor * SOBudgetLine2."Original Quantity";
            END ELSE
              SOBudgetLine2.VALIDATE(Quantity, QuantityFactor * SOBudgetLine2.Quantity);
            SOBudgetLine2.MODIFY;
          END;
        UNTIL SOBudgetLine2.NEXT = 0;
    END;

    PROCEDURE DetermineBOMLevel@1100525007(LineNo@1100525000 : Integer;VAR BOMLevel@1100525002 : Integer);
    VAR
      SOBudgetLine3@1100525003 : Record 11012875;
    BEGIN
      //**4PS
      SOBudgetLine3.SETRANGE("Budget Type","Budget Type");
      SOBudgetLine3.SETRANGE("Service Order No.","Service Order No.");
      SOBudgetLine3.SETRANGE("Service Contract No.","Service Contract No.");
      SOBudgetLine3.SETRANGE("Line No.",LineNo);
      IF SOBudgetLine3.FINDFIRST THEN
        BOMLevel := SOBudgetLine3."Level BOM" + 1;
    END;

    PROCEDURE UpdateServiceOrderObject@1100528600(IUpdateAction@1100528602 : 'Insert,Modify,Delete,Rename');
    VAR
      ServiceOrder@1100528603 : Record 11012823;
      ServiceOrderObject@1100528600 : Record 11071724;
      ServiceOrderBudgetLine@1100528601 : Record 11012875;
    BEGIN
      IF ("Service Order No." = '') OR ("Object No." = '') OR DontUpdateServiceOrderObject THEN
        EXIT;
      IF NOT ServiceOrder.GET("Service Order No.") THEN
        EXIT;
      IF NOT ServiceOrderObject.GET("Service Order No.", "Object No.", "Maintenance Scheme") THEN
        EXIT;

      ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
      ServiceOrderBudgetLine.SETRANGE("Service Order No.", "Service Order No.");
      ServiceOrderBudgetLine.SETRANGE("Object No.", "Object No.");
      ServiceOrderBudgetLine.SETRANGE("Maintenance Scheme", "Maintenance Scheme");
      ServiceOrderBudgetLine.SETFILTER("Line No.", '<>%1', "Line No.");
      ServiceOrderBudgetLine.SETRANGE(Finished, FALSE);
      ServiceOrderObject.Finished := ServiceOrderBudgetLine.ISEMPTY AND (Finished OR (IUpdateAction = IUpdateAction::Delete));
      IF ServiceOrderObject.Finished THEN
        ServiceOrderObject."Execution Date" := TODAY;
      ServiceOrderBudgetLine.SETRANGE(Finished);

      ServiceOrderBudgetLine.SETRANGE("Follow-up Job", TRUE);
      ServiceOrderObject."Follow-up Job" := NOT ServiceOrderBudgetLine.ISEMPTY OR
        ("Follow-up Job" AND (IUpdateAction <> IUpdateAction::Delete));
      ServiceOrderObject.MODIFY(TRUE);
    END;

    PROCEDURE SetUpdateSOObjectFinished@1100528603(IUpdateServiceOrderObject@1100528600 : Boolean);
    BEGIN
      DontUpdateServiceOrderObject := NOT IUpdateServiceOrderObject;
    END;

    PROCEDURE UpdateBudgetSurchLinesFinished@1100528601(IUpdateAction@1100528600 : 'Insert,Modify,Delete,Rename');
    VAR
      ServiceOrder@1100528602 : Record 11012823;
      ServiceOrderBudgetLine@1100528601 : Record 11012875;
    BEGIN
      IF ("Service Order No." = '') OR NOT ServiceOrder.GET("Service Order No.") THEN
        EXIT;
      IF "Surcharge Line" THEN
        EXIT;

      ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
      ServiceOrderBudgetLine.SETRANGE("Service Order No.", "Service Order No.");
      ServiceOrderBudgetLine.SETRANGE("Object No.", "Object No.");
      ServiceOrderBudgetLine.SETRANGE("Maintenance Scheme", "Maintenance Scheme");
      ServiceOrderBudgetLine.SETFILTER("Line No.", '<>%1', "Line No.");
      ServiceOrderBudgetLine.SETRANGE("Surcharge Line", FALSE);
      IF ServiceOrderBudgetLine.ISEMPTY AND (IUpdateAction = IUpdateAction::Delete) THEN BEGIN
        ServiceOrderBudgetLine.SETRANGE("Surcharge Line", TRUE);
        ServiceOrderBudgetLine.SETRANGE(Finished, TRUE);
        ServiceOrderBudgetLine.MODIFYALL(Finished, FALSE);
        EXIT;
      END;
      ServiceOrderBudgetLine.SETRANGE(Finished, FALSE);
      IF ServiceOrderBudgetLine.ISEMPTY AND ("Surcharge Line" OR Finished OR (IUpdateAction = IUpdateAction::Delete)) THEN BEGIN
        ServiceOrderBudgetLine.SETRANGE("Surcharge Line", TRUE);
        ServiceOrderBudgetLine.SETRANGE(Finished, FALSE);
        ServiceOrderBudgetLine.MODIFYALL(Finished, TRUE);
      END ELSE BEGIN
        ServiceOrderBudgetLine.SETRANGE("Surcharge Line", TRUE);
        ServiceOrderBudgetLine.SETRANGE(Finished, TRUE);
        ServiceOrderBudgetLine.MODIFYALL(Finished, FALSE);
      END;
    END;

    PROCEDURE HandleAssistEditItem@1100528602(IFieldNo@1100528600 : Integer) ORefresh : Boolean;
    VAR
      "2baMgt"@1100528601 : Codeunit 11012306;
      RecRef@1100528602 : RecordRef;
    BEGIN
      IF IFieldNo = FIELDNO("Trade Item") THEN BEGIN
        RecRef.GETTABLE(Rec);
        "2baMgt".RunModalDialogForMultipleItems("Vendor (Trade Item)", "Trade Item", RecRef);
        ORefresh := TRUE;
      END;
    END;

    LOCAL PROCEDURE DetermineObjectCustomer@1100525010();
    VAR
      ServiceObject@1100525000 : Record 11071691;
    BEGIN
      IF ServiceObject.GET("Object No.") THEN
        IF ServiceObject."Object Customer" <> '' THEN
          VALIDATE("Object Customer", ServiceObject."Object Customer");
    END;

    BEGIN
    {
      4PS01 JD 14-02-08 Fill Cost Component  from SOType or Cost Object
    }
    END.
  }
}

