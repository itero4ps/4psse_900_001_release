OBJECT Table 11012919 Proj. Development House Model
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CheckUpdateProjectDates();
             END;

    OnModify=BEGIN
               CheckUpdateProjectDates();
             END;

    OnDelete=BEGIN
               "Starting Date Sales" := 0D;
               "Starting Date Construction" := 0D;
               "Delivery Date" := 0D;
               CheckUpdateProjectDates();
             END;

    CaptionML=ENU=House Model (Proj. Development);
    LookupPageID=Page11012669;
    DrillDownPageID=Page11012669;
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation="Project Development";
                                                   CaptionML=ENU=Project No.;
                                                   NotBlank=Yes }
    { 20  ;   ;Model               ;Code20        ;TableRelation="House Model".Model WHERE (Project No.=FILTER(''));
                                                   OnValidate=BEGIN
                                                                IF (Model <> xRec.Model) OR (Description = '') THEN BEGIN
                                                                  IF HouseModelRec.READPERMISSION THEN BEGIN
                                                                    IF NOT HouseModelRec.GET("Project No.", Model) THEN BEGIN
                                                                      IF NOT HouseModelRec.GET('', Model) THEN
                                                                        HouseModelRec.INIT;
                                                                    END;
                                                                    Description := HouseModelRec.Description;
                                                                    IF (Model <> xRec.Model) THEN BEGIN
                                                                      IF (HouseModelRec."Total Surface" <> 0) THEN BEGIN
                                                                        VALIDATE("Gross Floor Surface", HouseModelRec."Total Surface");
                                                                        VALIDATE("Nett Floor Surface", HouseModelRec."Total Surface");
                                                                      END;
                                                                      IF (HouseModelRec."Total Content" <> 0) THEN
                                                                        VALIDATE(Content, HouseModelRec."Total Content");
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Model;
                                                   NotBlank=Yes }
    { 30  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 40  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                DetermineStartDateConstruction();
                                                                VALIDATE("Total Nett Floor Surface");
                                                                VALIDATE("Total Gross Floor Surface");
                                                                VALIDATE("Total Content");
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:0;
                                                   MinValue=0 }
    { 50  ;   ;Prognosis No. of Sales;Decimal     ;OnValidate=BEGIN
                                                                DetermineStartDateConstruction();
                                                              END;

                                                   CaptionML=ENU=Prognosis No. of Sales;
                                                   MinValue=0 }
    { 51  ;   ;Prognosis by        ;Option        ;InitValue=Month;
                                                   OnValidate=BEGIN
                                                                DetermineStartDateConstruction();
                                                              END;

                                                   CaptionML=ENU=Prognosis by;
                                                   OptionCaptionML=ENU=Week,Month;
                                                   OptionString=Week,Month }
    { 60  ;   ;Starting Date Sales ;Date          ;OnValidate=BEGIN
                                                                DetermineStartDateConstruction();
                                                                CheckUpdateBudgetDistrDates(FIELDNO("Starting Date Sales"));
                                                              END;

                                                   CaptionML=ENU=Starting Date Sales }
    { 70  ;   ;Construction Time   ;Decimal       ;OnValidate=BEGIN
                                                                DetermineDeliveryDate();
                                                              END;

                                                   CaptionML=ENU=Construction Time;
                                                   MinValue=0 }
    { 71  ;   ;Construction Time in;Option        ;InitValue=Months;
                                                   OnValidate=BEGIN
                                                                DetermineDeliveryDate();
                                                              END;

                                                   CaptionML=ENU=Construction Time in;
                                                   OptionCaptionML=ENU=Weeks,Months;
                                                   OptionString=Weeks,Months }
    { 80  ;   ;Min. Sales % before Starting;Decimal;
                                                   OnValidate=BEGIN
                                                                DetermineStartDateConstruction();
                                                              END;

                                                   CaptionML=ENU=Min. Sales Perc. before Starting Construction;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 90  ;   ;Starting Date Construction;Date    ;OnValidate=BEGIN
                                                                DetermineDeliveryDate();
                                                                CheckUpdateBudgetDistrDates(FIELDNO("Starting Date Construction"));
                                                              END;

                                                   CaptionML=ENU=Starting Date Construction }
    { 100 ;   ;Delivery Date       ;Date          ;OnValidate=BEGIN
                                                                IF ("Delivery Date" <> 0D) AND ("Delivery Date" < "Starting Date Construction") THEN
                                                                  FIELDERROR("Delivery Date",
                                                                    STRSUBSTNO(Text000, "Delivery Date", FIELDCAPTION("Starting Date Construction"), "Starting Date Construction"));
                                                                CheckUpdateBudgetDistrDates(FIELDNO("Delivery Date"));
                                                              END;

                                                   CaptionML=ENU=Delivery Date }
    { 110 ;   ;Gross Floor Surface ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Gross Floor Surface" <> 0) AND ("Nett Floor Surface" > "Gross Floor Surface") THEN
                                                                  VALIDATE("Nett Floor Surface", "Gross Floor Surface");

                                                                VALIDATE("Total Gross Floor Surface");
                                                              END;

                                                   CaptionML=ENU=Gross Floor Surface;
                                                   MinValue=0 }
    { 111 ;   ;Total Gross Floor Surface;Decimal  ;OnValidate=BEGIN
                                                                "Total Gross Floor Surface" := ROUND(Quantity * "Gross Floor Surface", 0.001);
                                                              END;

                                                   CaptionML=ENU=Total Gross Floor Surface;
                                                   MinValue=0;
                                                   Editable=No }
    { 120 ;   ;Nett Floor Surface  ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Nett Floor Surface" <> 0) AND ("Gross Floor Surface" < "Nett Floor Surface") THEN
                                                                  VALIDATE("Gross Floor Surface", "Nett Floor Surface");

                                                                VALIDATE("Total Nett Floor Surface");
                                                              END;

                                                   CaptionML=ENU=Nett Floor Surface;
                                                   MinValue=0 }
    { 121 ;   ;Total Nett Floor Surface;Decimal   ;OnValidate=BEGIN
                                                                "Total Nett Floor Surface" := ROUND(Quantity * "Nett Floor Surface", 0.001);
                                                              END;

                                                   CaptionML=ENU=Total Nett Floor Surface;
                                                   MinValue=0;
                                                   Editable=No }
    { 130 ;   ;Content             ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Total Content");
                                                              END;

                                                   CaptionML=ENU=Content;
                                                   MinValue=0 }
    { 131 ;   ;Total Content       ;Decimal       ;OnValidate=BEGIN
                                                                "Total Content" := ROUND(Quantity * Content, 0.001);
                                                              END;

                                                   CaptionML=ENU=Total Content;
                                                   MinValue=0;
                                                   Editable=No }
    { 140 ;   ;Scheme Cost Budget Distr.;Code10   ;TableRelation="Budget Distribution Scheme";
                                                   CaptionML=ENU=Scheme Cost Distribution }
    { 145 ;   ;Scheme Rev. Budget Distr.;Code10   ;TableRelation="Budget Distribution Scheme";
                                                   CaptionML=ENU=Scheme Revenue Distribution }
    { 150 ;   ;Frequency Cost Budget Distr.;DateFormula;
                                                   InitValue=1M;
                                                   OnValidate=BEGIN
                                                                IF (CALCDATE("Frequency Cost Budget Distr.", TODAY) < TODAY) THEN
                                                                  FIELDERROR("Frequency Cost Budget Distr.");
                                                              END;

                                                   CaptionML=ENU=Frequency Cost Distribution }
    { 155 ;   ;Frequency Rev. Budget Distr.;DateFormula;
                                                   InitValue=1M;
                                                   OnValidate=BEGIN
                                                                IF (CALCDATE("Frequency Rev. Budget Distr.", TODAY) < TODAY) THEN
                                                                  FIELDERROR("Frequency Rev. Budget Distr.");
                                                              END;

                                                   CaptionML=ENU=Frequency Revenue Distribution }
    { 160 ;   ;Start Date Cost Budget Distr.;Date ;CaptionML=ENU=Starting Date Cost Distribution }
    { 161 ;   ;End Date Cost Budget Distr.;Date   ;CaptionML=ENU=Ending Date Cost Distribution }
    { 162 ;   ;Start Date Rev. Budget Distr.;Date ;CaptionML=ENU=Starting Date Revenue Distribution }
    { 163 ;   ;End Date Rev. Budget Distr.;Date   ;CaptionML=ENU=Ending Date Revenue Distribution }
    { 170 ;   ;Budget Level        ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Development"."Budget Level" WHERE (Project No.=FIELD(Project No.)));
                                                   CaptionML=ENU=Budget Level;
                                                   OptionCaptionML=ENU=Project,House Model;
                                                   OptionString=Project,Model;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Project No.,Model                       ;SumIndexFields=Total Gross Floor Surface,Total Nett Floor Surface,Total Content;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100485000 : TextConst 'ENU=''%1'' may not be less than the %2 ''%3''';
      ProjDevSetupRec@1100485003 : Record 11012900;
      HouseModelRec@1100485001 : Record 11012501;
      ProjDevRec@1100485002 : Record 11012915;

    PROCEDURE InitRecord@1100485005();
    BEGIN
      ProjDevSetupRec.GET;
      GetProjDevData();
      "Scheme Cost Budget Distr." := ProjDevRec."Scheme Cost Budget Distr.";
      "Scheme Rev. Budget Distr." := ProjDevRec."Scheme Rev. Budget Distr.";
      IF FORMAT(ProjDevRec."Frequency Cost Budget Distr.") <> '' THEN
        "Frequency Cost Budget Distr." := ProjDevRec."Frequency Cost Budget Distr.";
      IF FORMAT(ProjDevRec."Frequency Rev. Budget Distr.") <> '' THEN
        "Frequency Rev. Budget Distr." := ProjDevRec."Frequency Rev. Budget Distr.";

      CASE ProjDevSetupRec."Type Start Cost Budget Distr." OF
        ProjDevSetupRec."Type Start Cost Budget Distr."::" ":
          "Start Date Cost Budget Distr." := ProjDevRec."Start Date Cost Budget Distr.";
        ProjDevSetupRec."Type Start Cost Budget Distr."::"Starting Date Project":
          "Start Date Cost Budget Distr." := ProjDevRec."Starting Date";
      END;
      CASE ProjDevSetupRec."Type End Cost Budget Distr." OF
        ProjDevSetupRec."Type End Cost Budget Distr."::" ":
          "End Date Cost Budget Distr." := ProjDevRec."End Date Cost Budget Distr.";
        ProjDevSetupRec."Type End Cost Budget Distr."::"Ending Date Project":
          "End Date Cost Budget Distr." := ProjDevRec."Ending Date";
      END;
      CASE ProjDevSetupRec."Type Start Rev. Budget Distr." OF
        ProjDevSetupRec."Type Start Rev. Budget Distr."::" ":
          "Start Date Rev. Budget Distr." := ProjDevRec."Start Date Rev. Budget Distr.";
        ProjDevSetupRec."Type Start Rev. Budget Distr."::"Starting Date Project":
          "Start Date Rev. Budget Distr." := ProjDevRec."Starting Date";
      END;
      CASE ProjDevSetupRec."Type End Rev. Budget Distr." OF
        ProjDevSetupRec."Type End Rev. Budget Distr."::" ":
          "End Date Rev. Budget Distr." := ProjDevRec."End Date Rev. Budget Distr.";
        ProjDevSetupRec."Type End Rev. Budget Distr."::"Ending Date Project":
          "End Date Rev. Budget Distr." := ProjDevRec."Ending Date";
      END;
    END;

    PROCEDURE GetProjDevData@1100485006();
    BEGIN
      IF "Project No." <> ProjDevRec."Project No." THEN BEGIN
        ProjDevRec.GET("Project No.");
        ProjDevRec.CALCFIELDS("Starting Date", "Ending Date");
      END;
    END;

    PROCEDURE LookupModel@1100485004();
    BEGIN
      IF NOT HouseModelRec.READPERMISSION THEN
        EXIT;

      HouseModelRec.RESET;
      HouseModelRec.SETRANGE("Project No.", "Project No.");
      IF HouseModelRec.FIND('-') THEN BEGIN
        HouseModelRec.SETFILTER("Project No.", '%1|%2', '', "Project No.");
        HouseModelRec."Project No." := "Project No.";
      END ELSE BEGIN
        HouseModelRec.SETRANGE("Project No.", '');
        HouseModelRec."Project No." := '';
      END;
      HouseModelRec.Model := Model;

      IF PAGE.RUNMODAL(0, HouseModelRec) = ACTION::LookupOK THEN BEGIN
        IF HouseModelRec.Model <> '' THEN
          VALIDATE(Model, HouseModelRec.Model);
      END;
    END;

    PROCEDURE CheckUpdateProjectDates@1100485003();
    VAR
      lvProjDevRec@1100485000 : Record 11012915;
      lvProjDevHouseModelRec@1100485001 : Record 11012919;
      lvDate1@1100485002 : Date;
      lvDate2@1100485003 : Date;
      lvDate3@1100485004 : Date;
    BEGIN
      lvDate1 := 0D;
      IF ("Starting Date Sales" <> 0D) THEN
        lvDate1 := "Starting Date Sales";
      lvDate2 := 0D;
      IF ("Starting Date Construction" <> 0D) THEN
        lvDate2 := "Starting Date Construction";
      lvDate3 := 0D;
      IF ("Delivery Date" <> 0D) THEN
        lvDate3 := "Delivery Date";

      lvProjDevHouseModelRec.SETRANGE("Project No.", "Project No.");
      lvProjDevHouseModelRec.SETFILTER(Model, '<>%1', Model);
      IF lvProjDevHouseModelRec.FIND('-') THEN BEGIN
        REPEAT
          IF (lvProjDevHouseModelRec."Starting Date Sales" <> 0D) AND
             ((lvDate1 = 0D) OR (lvProjDevHouseModelRec."Starting Date Sales" < lvDate1))
          THEN
            lvDate1 := lvProjDevHouseModelRec."Starting Date Sales";

          IF (lvProjDevHouseModelRec."Starting Date Construction" <> 0D) AND
             ((lvDate2 = 0D) OR (lvProjDevHouseModelRec."Starting Date Construction" < lvDate2))
          THEN
            lvDate2 := lvProjDevHouseModelRec."Starting Date Construction";

          IF (lvProjDevHouseModelRec."Delivery Date" <> 0D) AND
             ((lvDate3 = 0D) OR (lvProjDevHouseModelRec."Delivery Date" > lvDate3))
          THEN
            lvDate3 := lvProjDevHouseModelRec."Delivery Date";
        UNTIL lvProjDevHouseModelRec.NEXT = 0;
      END;

      IF (lvDate1 = 0D) AND (lvDate2 = 0D) AND (lvDate3 = 0D) THEN
        EXIT;
      IF NOT lvProjDevRec.GET("Project No.") THEN
        EXIT;

      IF ((lvDate1 <> 0D) AND (lvProjDevRec."Starting Date Sales" <> lvDate1)) OR
         ((lvDate2 <> 0D) AND (lvProjDevRec."Starting Date Construction" <> lvDate2)) OR
         ((lvDate3 <> 0D) AND (lvProjDevRec."Delivery Date" <> lvDate3))
      THEN BEGIN
        IF (lvDate1 <> 0D) THEN BEGIN
          lvProjDevRec."Starting Date Sales" := lvDate1;
          lvProjDevRec.CheckUpdateBudgetDistrDates(lvProjDevRec.FIELDNO("Starting Date Sales"));
        END;
        IF (lvDate2 <> 0D) THEN BEGIN
          lvProjDevRec."Starting Date Construction" := lvDate2;
          lvProjDevRec.CheckUpdateBudgetDistrDates(lvProjDevRec.FIELDNO("Starting Date Construction"));
        END;
        IF (lvDate3 <> 0D) THEN BEGIN
          lvProjDevRec."Delivery Date" := lvDate3;
          lvProjDevRec.CheckUpdateBudgetDistrDates(lvProjDevRec.FIELDNO("Delivery Date"));
        END;
        lvProjDevRec.MODIFY;
      END;
    END;

    PROCEDURE DetermineStartDateConstruction@1100485001();
    VAR
      lvPeriods@1100485000 : Decimal;
    BEGIN
      IF (Quantity = 0) OR ("Starting Date Sales" = 0D) OR
         ("Prognosis No. of Sales" = 0) OR ("Min. Sales % before Starting" = 0)
      THEN
        EXIT;

      lvPeriods := (("Min. Sales % before Starting" / 100) * Quantity) / "Prognosis No. of Sales";
      "Starting Date Construction" := CALCDATE(MakeDateExpression(lvPeriods, 'P'), "Starting Date Sales");
      DetermineDeliveryDate();
      CheckUpdateBudgetDistrDates(FIELDNO("Starting Date Construction"));
    END;

    PROCEDURE DetermineDeliveryDate@1100485002();
    BEGIN
      IF ("Starting Date Construction" <> 0D) AND ("Construction Time" <> 0) THEN
        "Delivery Date" := CALCDATE(MakeDateExpression("Construction Time", 'C'), "Starting Date Construction");

      IF ("Delivery Date" <> 0D) AND ("Delivery Date" < "Starting Date Construction") THEN
        "Delivery Date" := 0D;
      CheckUpdateBudgetDistrDates(FIELDNO("Delivery Date"));
    END;

    PROCEDURE MakeDateExpression@1100485000(INoPeriods@1100485001 : Decimal;ITimeUnitType@1100485000 : Code[1]) : Code[10];
    VAR
      lvTimeUnit@1100485004 : 'Week,Month';
      lvDays@1100485003 : Integer;
      lvDateExpression@1100485002 : Code[10];
    BEGIN
      lvTimeUnit := -1;
      CASE ITimeUnitType OF
        'C':
          BEGIN
            CASE "Construction Time in" OF
              "Construction Time in"::Weeks: lvTimeUnit := lvTimeUnit::Week;
              "Construction Time in"::Months: lvTimeUnit := lvTimeUnit::Month;
            END;
          END;
        'P':
          BEGIN
            CASE "Prognosis by" OF
              "Prognosis by"::Week: lvTimeUnit := lvTimeUnit::Week;
              "Prognosis by"::Month: lvTimeUnit := lvTimeUnit::Month;
            END;
          END;
      END;

      lvDateExpression := '<' + FORMAT(ROUND(INoPeriods,1,'<'));
      lvDays := 0;
      CASE lvTimeUnit OF
        lvTimeUnit::Week:
          BEGIN
            lvDateExpression := lvDateExpression + 'W';
            lvDays := ROUND((INoPeriods MOD 1) * 7, 1);
          END;
        lvTimeUnit::Month:
          BEGIN
            lvDateExpression := lvDateExpression + 'M';
            lvDays := ROUND((INoPeriods MOD 1) * 30, 1);
          END;
        ELSE
          EXIT('<0D>');
      END;
      IF lvDays <> 0 THEN
        lvDateExpression := lvDateExpression + '+' + FORMAT(lvDays) + 'D';

      lvDateExpression := lvDateExpression + '>';
      EXIT(lvDateExpression);
    END;

    PROCEDURE CheckUpdateBudgetDistrDates@1100485009(ICurrFieldNo@1100485000 : Integer);
    BEGIN
      ProjDevSetupRec.GET;
      CASE ICurrFieldNo OF
        FIELDNO("Starting Date Sales"):
          BEGIN
            IF ProjDevSetupRec."Type Start Cost Budget Distr." =
              ProjDevSetupRec."Type Start Cost Budget Distr."::"Starting Date Sales"
            THEN
              "Start Date Cost Budget Distr." := "Starting Date Sales";
            IF ProjDevSetupRec."Type Start Rev. Budget Distr." =
               ProjDevSetupRec."Type Start Rev. Budget Distr."::"Starting Date Sales"
            THEN
              "Start Date Rev. Budget Distr." := "Starting Date Sales";
          END;
        FIELDNO("Starting Date Construction"):
          BEGIN
            IF ProjDevSetupRec."Type Start Cost Budget Distr." =
               ProjDevSetupRec."Type Start Cost Budget Distr."::"Starting Date Construction"
            THEN
              "Start Date Cost Budget Distr." := "Starting Date Construction";
            IF ProjDevSetupRec."Type Start Rev. Budget Distr." =
               ProjDevSetupRec."Type Start Rev. Budget Distr."::"Starting Date Construction"
            THEN
              "Start Date Rev. Budget Distr." := "Starting Date Construction";
          END;
        FIELDNO("Delivery Date"):
          BEGIN
            IF ProjDevSetupRec."Type End Cost Budget Distr." = ProjDevSetupRec."Type End Cost Budget Distr."::"Delivery Date" THEN
              "End Date Cost Budget Distr." := "Delivery Date";
            IF ProjDevSetupRec."Type End Rev. Budget Distr." = ProjDevSetupRec."Type End Rev. Budget Distr."::"Delivery Date" THEN
              "End Date Rev. Budget Distr." := "Delivery Date";
          END;
      END;
    END;

    BEGIN
    END.
  }
}

