OBJECT Table 11012940 Rental Unit
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD("Project No.");
               TESTFIELD("Rental Unit");
             END;

    OnModify=VAR
               lvRentalPackageRec@1210190000 : Record 11012941;
             BEGIN
               IF ("Ending Date" <> 0D) THEN BEGIN
                 lvRentalPackageRec.SETRANGE("Project No.", "Project No.");
                 lvRentalPackageRec.SETRANGE("Rental Unit", "Rental Unit");
                 IF lvRentalPackageRec.FIND('+') THEN
                   IF (lvRentalPackageRec."Ending Date" = 0D) OR (lvRentalPackageRec."Ending Date" > "Ending Date") THEN BEGIN
                     lvRentalPackageRec."Ending Date" := "Ending Date";
                     lvRentalPackageRec.MODIFY(TRUE);
                   END;
               END;
             END;

    OnDelete=VAR
               lvRentalPackageRec@1210190000 : Record 11012941;
               lvRentalRateRec@1210190001 : Record 11012942;
               lvRentalUnitInsuranceRec@1100485000 : Record 11012943;
               lvRentalUnitInstallationRec@1100485001 : Record 11012945;
               lvRentalUnitUtilityRec@1100485002 : Record 11012944;
               lvRentalUnitCommentRec@1100485003 : Record 11012975;
               lvRentalUnitValidationRec@1100485004 : Record 11012977;
               lvRentalUnitMortgageRec@1100485005 : Record 11012978;
               lvRentalUnitObjectRec@1100485008 : Record 11012999;
               RentalUnitGuarantee@1100485007 : Record 11012996;
               RentalUnitFeatureType@1100529002 : Record 11229845;
               RentalPackageLineRate@1100529004 : Record 11229856;
               RentalPackageProlongCode@1100529000 : Record 11229840;
               RentalPackageProlong@1100529001 : Record 11229841;
               HistRentalPackage@1100529003 : Record 11229848;
               BudgetLine@1100528600 : Record 11012001;
             BEGIN
               lvRentalPackageRec.SETRANGE("Project No.", "Project No.");
               lvRentalPackageRec.SETRANGE("Rental Unit", "Rental Unit");
               lvRentalPackageRec.SETRANGE("Completely Invoiced", FALSE);
               lvRentalPackageRec.SETFILTER("Customer No.", '>%1', '');
               IF lvRentalPackageRec.FIND('-') THEN
                 IF NOT CONFIRM(Text005, FALSE, FIELDCAPTION("Rental Unit") , "Rental Unit") THEN
                   ERROR('');

               lvRentalPackageRec.RESET;
               lvRentalPackageRec.SETRANGE("Project No.", "Project No.");
               lvRentalPackageRec.SETRANGE("Rental Unit", "Rental Unit");
               //lvRentalPackageRec.DELETEALL;  //DP00617.o
               //DP00617.sn
               IF lvRentalPackageRec.FINDSET(TRUE,FALSE) THEN BEGIN
                 REPEAT
                   lvRentalPackageRec.DeleteDocumentLinks();
                   lvRentalPackageRec.DELETE;
                 UNTIL lvRentalPackageRec.NEXT = 0;
               END;
               DeleteDocumentLinks();

               RentalPackageLineRate.SETRANGE("Project No.", "Project No.");
               RentalPackageLineRate.SETRANGE("Rental Unit", "Rental Unit");
               RentalPackageLineRate.DELETEALL;
               //DP00617.en

               lvRentalRateRec.SETRANGE("Project No.", "Project No.");
               lvRentalRateRec.SETRANGE("Rental Unit", "Rental Unit");
               lvRentalRateRec.DELETEALL;

               lvRentalUnitInsuranceRec.SETRANGE("Project No.", "Project No.");
               lvRentalUnitInsuranceRec.SETRANGE("Rental Unit", "Rental Unit");
               lvRentalUnitInsuranceRec.DELETEALL;

               lvRentalUnitInstallationRec.SETRANGE("Project No.", "Project No.");
               lvRentalUnitInstallationRec.SETRANGE("Rental Unit", "Rental Unit");
               lvRentalUnitInstallationRec.DELETEALL;

               lvRentalUnitUtilityRec.SETRANGE("Project No.", "Project No.");
               lvRentalUnitUtilityRec.SETRANGE("Rental Unit", "Rental Unit");
               lvRentalUnitUtilityRec.DELETEALL;

               lvRentalUnitCommentRec.SETRANGE("Project No.", "Project No.");
               lvRentalUnitCommentRec.SETRANGE("Rental Unit", "Rental Unit");
               lvRentalUnitCommentRec.DELETEALL;

               lvRentalUnitValidationRec.SETRANGE("Project No.", "Project No.");
               lvRentalUnitValidationRec.SETRANGE("Rental Unit", "Rental Unit");
               lvRentalUnitValidationRec.DELETEALL;

               lvRentalUnitMortgageRec.SETRANGE("Project No.", "Project No.");
               lvRentalUnitMortgageRec.SETRANGE("Rental Unit", "Rental Unit");
               lvRentalUnitMortgageRec.DELETEALL;

               lvRentalUnitObjectRec.SETRANGE("Project No.", "Project No.");
               lvRentalUnitObjectRec.SETRANGE("Rental Unit", "Rental Unit");
               lvRentalUnitObjectRec.DELETEALL;

               RentalUnitGuarantee.SETRANGE("Project No.", "Project No.");
               RentalUnitGuarantee.SETRANGE("Rental Unit", "Rental Unit");
               RentalUnitGuarantee.DELETEALL;

               //DP00617.sn
               RentalUnitFeatureType.SETRANGE("Project No.", "Project No.");
               RentalUnitFeatureType.SETRANGE("Rental Unit", "Rental Unit");
               RentalUnitFeatureType.DELETEALL;

               RentalPackageProlongCode.SETRANGE("Project No.", "Project No.");
               RentalPackageProlongCode.SETRANGE("Rental Unit", "Rental Unit");
               RentalPackageProlongCode.DELETEALL;

               RentalPackageProlong.SETRANGE("Project No.", "Project No.");
               RentalPackageProlong.SETRANGE("Rental Unit", "Rental Unit");
               RentalPackageProlong.DELETEALL;

               HistRentalPackage.SETRANGE("Project No.", "Project No.");
               HistRentalPackage.SETRANGE("Rental Unit", "Rental Unit");
               HistRentalPackage.DELETEALL(TRUE);
               //DP00617.en

               BudgetLine.SETRANGE("Project No.", "Project No.");
               BudgetLine.SETRANGE("Rental Unit", "Rental Unit");
               BudgetLine.MODIFYALL("Rental Unit", '', TRUE);
             END;

    OnRename=BEGIN
               MoveDocumentLinks(xRec, Rec, FALSE);
             END;

    CaptionML=ENU=Rental Unit;
    LookupPageID=Page11012941;
    DrillDownPageID=Page11012941;
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=ENU=Project No.;
                                                   NotBlank=Yes }
    { 20  ;   ;Rental Unit         ;Code20        ;CaptionML=ENU=Rental Unit;
                                                   NotBlank=Yes }
    { 30  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 40  ;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 50  ;   ;Post Code           ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code }
    { 60  ;   ;City                ;Text30        ;CaptionML=ENU=City }
    { 70  ;   ;Starting Date       ;Date          ;OnValidate=VAR
                                                                lvRentalPackageRec@1210190000 : Record 11012941;
                                                              BEGIN
                                                                IF ("Starting Date" > "Ending Date") AND ("Ending Date" <> 0D) THEN
                                                                  FIELDERROR("Starting Date",STRSUBSTNO(Text001,FIELDCAPTION("Ending Date"),"Ending Date"));

                                                                ProjectSetupRec.GET;
                                                                IF ProjectSetupRec."Rental of Unit successive" THEN BEGIN
                                                                  lvRentalPackageRec.SETRANGE("Project No.", "Project No.");
                                                                  lvRentalPackageRec.SETRANGE("Rental Unit", "Rental Unit");
                                                                  IF lvRentalPackageRec.FIND('-') THEN
                                                                    FIELDERROR("Starting Date",Text006);
                                                                END;

                                                                lvRentalPackageRec.RESET;
                                                                lvRentalPackageRec.SETRANGE("Project No.", "Project No.");
                                                                lvRentalPackageRec.SETRANGE("Rental Unit", "Rental Unit");
                                                                lvRentalPackageRec.SETFILTER("Starting Date", '<%1', "Starting Date");
                                                                IF lvRentalPackageRec.FIND('-') THEN
                                                                  FIELDERROR("Starting Date",STRSUBSTNO(Text003,
                                                                             lvRentalPackageRec.FIELDCAPTION("Starting Date"),lvRentalPackageRec."Starting Date"));
                                                              END;

                                                   CaptionML=ENU=Starting Date;
                                                   NotBlank=Yes }
    { 80  ;   ;Ending Date         ;Date          ;OnValidate=VAR
                                                                lvRentalPackageRec@1210190000 : Record 11012941;
                                                              BEGIN
                                                                IF ("Starting Date" > "Ending Date") AND ("Ending Date" <> 0D) THEN
                                                                  FIELDERROR("Ending Date",STRSUBSTNO(Text002,FIELDCAPTION("Starting Date"),"Starting Date"));

                                                                IF ("Ending Date" = 0D) THEN
                                                                  EXIT;

                                                                lvRentalPackageRec.SETRANGE("Project No.", "Project No.");
                                                                lvRentalPackageRec.SETRANGE("Rental Unit", "Rental Unit");
                                                                IF lvRentalPackageRec.FIND('+') THEN BEGIN
                                                                  IF ("Ending Date" < lvRentalPackageRec."Starting Date") THEN
                                                                    FIELDERROR("Ending Date",STRSUBSTNO(Text004,
                                                                               lvRentalPackageRec.FIELDCAPTION("Starting Date"),lvRentalPackageRec."Starting Date"));
                                                                  IF ("Ending Date" < lvRentalPackageRec."Ending Date") THEN
                                                                    FIELDERROR("Ending Date",STRSUBSTNO(Text004,
                                                                               lvRentalPackageRec.FIELDCAPTION("Ending Date"),lvRentalPackageRec."Ending Date"));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Ending Date }
    { 90  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Rental Unit Comment Line" WHERE (Comment Type=CONST(Rental Unit),
                                                                                                       Project No.=FIELD(Project No.),
                                                                                                       Rental Unit=FIELD(Rental Unit)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 100 ;   ;Surface             ;Decimal       ;CaptionML=ENU=Surface;
                                                   MinValue=0 }
    { 110 ;   ;Plans               ;Boolean       ;CaptionML=ENU=Plans }
    { 120 ;   ;Construction Drawings;Boolean      ;CaptionML=ENU=Construction Drawings }
    { 130 ;   ;Purchase Date       ;Date          ;CaptionML=ENU=Purchase Date }
    { 140 ;   ;Purchase Amount     ;Decimal       ;CaptionML=ENU=Purchase Amount;
                                                   MinValue=0 }
    { 150 ;   ;Rebuilding Amount   ;Decimal       ;CaptionML=ENU=Rebuilding Amount;
                                                   MinValue=0 }
    { 160 ;   ;OZB Value           ;Decimal       ;CaptionML=ENU=OZB Value;
                                                   MinValue=0 }
    { 165 ;   ;OZB Reference Date  ;Date          ;CaptionML=ENU=OZB Reference Date }
    { 170 ;   ;Juridical Status    ;Code10        ;TableRelation="Juridical Status";
                                                   CaptionML=ENU=Juridical Status }
    { 180 ;   ;Destination         ;Code10        ;TableRelation=Destination;
                                                   CaptionML=ENU=Destination }
    { 190 ;   ;Type                ;Code10        ;TableRelation="Rental Unit Type";
                                                   CaptionML=ENU=Type }
    { 200 ;   ;Municipality        ;Text30        ;CaptionML=ENU=Municipality }
    { 210 ;   ;Section/No.         ;Text30        ;CaptionML=ENU=Section/No. }
    { 220 ;   ;Property Ownership Type Code;Code10;TableRelation="Property Ownership Type";
                                                   CaptionML=ENU=Property Ownership Type }
    { 230 ;   ;Termination Period  ;DateFormula   ;CaptionML=ENU=Termination Period }
    { 240 ;   ;Owner               ;Text30        ;CaptionML=ENU=Owner }
    { 250 ;   ;Service Location No.;Code20        ;TableRelation="Service Location".No.;
                                                   CaptionML=ENU=Service Location No.;
                                                   Editable=No }
    { 260 ;   ;Budget Amount       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                               Rental Unit=FIELD(Rental Unit)));
                                                   CaptionML=ENU=Budget Amount;
                                                   Editable=No }
    { 500 ;   ;Period Filter       ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Period Filter }
  }
  KEYS
  {
    {    ;Project No.,Rental Unit                 ;Clustered=Yes }
    {    ;Service Location No.                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1210190002 : TextConst 'ENU=may not occur after %1 (%2)';
      Text002@1210190003 : TextConst 'ENU=may not occur before %1 (%2)';
      Text003@1210190004 : TextConst 'ENU=may not occur after Rental %1 (%2)';
      Text004@1210190000 : TextConst 'ENU=may not occur before the last Rental %1 (%2)';
      Text005@1210190001 : TextConst 'ENU=%1 ''%2'' not yet Completely Invoiced.\ \Delete %1?\ \';
      ProjectSetupRec@1210190005 : Record 315;
      Text006@1210190006 : TextConst 'ENU=modify not allowed because already rental mutation present';
      Text007@1100528700 : TextConst 'ENU=%1 %2 has been created.';
      Text008@1100528701 : TextConst 'ENU=%1 already has a %2.';

    PROCEDURE ReadTotalCostRevenue@1100485000(VAR OTotalCosts@1100485004 : Decimal;VAR OTotalRevenues@1100485005 : Decimal);
    VAR
      lvJobLedgEntryRec@1100485000 : Record 11072005;
    BEGIN
      OTotalCosts := 0;
      OTotalRevenues := 0;

      lvJobLedgEntryRec.SETCURRENTKEY("Job No.", "Posting Date");
      IF GETFILTER("Project No.") <>'' THEN
        COPYFILTER("Project No.", lvJobLedgEntryRec."Job No.");
      lvJobLedgEntryRec.FILTERGROUP(6);
      lvJobLedgEntryRec.SETFILTER("Rental Unit", '<>%1', '');  //* Only entries in which Rental Unit is filled
      lvJobLedgEntryRec.FILTERGROUP(0);
      IF GETFILTER("Rental Unit") <> '' THEN
        COPYFILTER("Rental Unit", lvJobLedgEntryRec."Rental Unit");
      IF GETFILTER("Period Filter") <> '' THEN
        COPYFILTER("Period Filter", lvJobLedgEntryRec."Posting Date");
      IF lvJobLedgEntryRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          OTotalCosts := OTotalCosts + lvJobLedgEntryRec."Total Cost (LCY)";
          OTotalRevenues := OTotalRevenues + lvJobLedgEntryRec."Total Price (LCY)";
        UNTIL lvJobLedgEntryRec.NEXT = 0;
      END;

      IF OTotalRevenues <> 0 THEN
        OTotalRevenues := -OTotalRevenues;  //* Revenues has negative amount in entries
    END;

    PROCEDURE DrildownCostRevenue@1100485001(IFieldNo@1100485001 : Integer);
    VAR
      lvJobLedgEntryRec@1100485000 : Record 11072005;
    BEGIN
      lvJobLedgEntryRec.SETCURRENTKEY("Job No.", "Posting Date");
      IF GETFILTER("Project No.") <>'' THEN
        COPYFILTER("Project No.", lvJobLedgEntryRec."Job No.");
      lvJobLedgEntryRec.FILTERGROUP(6);
      lvJobLedgEntryRec.SETFILTER("Rental Unit", '<>%1', '');  //* Only entries in which Rental Unit is filled
      lvJobLedgEntryRec.FILTERGROUP(0);
      IF GETFILTER("Rental Unit") <> '' THEN
        COPYFILTER("Rental Unit", lvJobLedgEntryRec."Rental Unit");
      IF GETFILTER("Period Filter") <> '' THEN
        COPYFILTER("Period Filter", lvJobLedgEntryRec."Posting Date");

      CASE IFieldNo OF
        1: //* Costs
          lvJobLedgEntryRec.SETFILTER("Total Cost (LCY)", '<>0');
        2: //* Revenues
          lvJobLedgEntryRec.SETFILTER("Total Price (LCY)", '<>0');
      END;

      PAGE.RUNMODAL(0, lvJobLedgEntryRec);
    END;

    PROCEDURE ActualRentalPackage@1100525000() : Boolean;
    VAR
      lvRentalPackageRec@1100525000 : Record 11012941;
    BEGIN
      //* Check active 'Rental package present on current date
      lvRentalPackageRec.SETRANGE("Project No.", "Project No.");
      lvRentalPackageRec.SETRANGE("Rental Unit", "Rental Unit");
      lvRentalPackageRec.SETFILTER("Starting Date", '..%1', TODAY);
      lvRentalPackageRec.SETFILTER("Ending Date", '%1..|%2', TODAY, 0D);
      lvRentalPackageRec.SETFILTER("Customer No.", '<>%1', '');
      //lvRentalPackageRec.SETFILTER("Period Amount", '<>%1', 0);
      IF NOT lvRentalPackageRec.ISEMPTY THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE CalcTerminationDate@1100528401() TerminationDate : Date;
    BEGIN
      IF ("Ending Date" = 0D) OR
         (FORMAT("Termination Period") = '')
      THEN
        EXIT;

      TerminationDate := CALCDATE(STRSUBSTNO('-%1', "Termination Period"), "Ending Date");
    END;

    PROCEDURE CreateServiceLocation@1100528700();
    VAR
      ServiceLocation@1100528700 : Record 11012801;
      JobSetup@1100528701 : Record 315;
      NoSeries@1100528702 : Record 308;
      Job@1100528703 : Record 11072003;
      NoSeriesManagement@1100528704 : Codeunit 396;
    BEGIN
      IF "Service Location No." <> '' THEN
        ERROR(Text008, TABLECAPTION, ServiceLocation.TABLECAPTION);

      IF NOT ServiceLocation.READPERMISSION THEN
        EXIT;

      JobSetup.GET;
      JobSetup.TESTFIELD("Service Location Nos. (Rental)");
      NoSeries.GET(JobSetup."Service Location Nos. (Rental)");

      Job.GET("Project No.");

      IF (NoSeries."Manual Nos.") AND NOT ServiceLocation.GET("Rental Unit") THEN BEGIN
        CLEAR(ServiceLocation);
        ServiceLocation."No." := "Rental Unit";
        ServiceLocation.INSERT(TRUE);
      END ELSE BEGIN
        CLEAR(ServiceLocation);
        NoSeriesManagement.InitSeries(
          JobSetup."Service Location Nos. (Rental)",
          ServiceLocation."No. Series",
          0D,
          ServiceLocation."No.",
          ServiceLocation."No. Series");
        ServiceLocation.INSERT(TRUE);
      END;

      ServiceLocation.VALIDATE(Description, Description);
      ServiceLocation.Address := Address;
      ServiceLocation."Post Code" := "Post Code";
      ServiceLocation.City := City;
      ServiceLocation.VALIDATE("Global Dimension 1 Code", Job."Global Dimension 1 Code");
      ServiceLocation.MODIFY(TRUE);

      "Service Location No." := ServiceLocation."No.";
      MODIFY;

      MESSAGE(Text007, ServiceLocation.TABLECAPTION, ServiceLocation."No.");
    END;

    PROCEDURE UpdateServiceLocation@1100528703();
    VAR
      ServiceLocation@1100528700 : Record 11012801;
      RentalPackage@1100528701 : Record 11012941;
      CustChanged@1100528702 : Boolean;
    BEGIN
      IF NOT ServiceLocation.READPERMISSION THEN
        EXIT;

      IF NOT ServiceLocation.GET("Service Location No.") THEN
        EXIT;

      IF GetActualRentalPackage(RentalPackage) THEN BEGIN
        CustChanged := (ServiceLocation."Customer No." <> RentalPackage."Customer No.");
        ServiceLocation.VALIDATE("Customer No.", RentalPackage."Customer No.")
      END ELSE BEGIN
        CustChanged := (ServiceLocation."Customer No." <> '');
        ServiceLocation.VALIDATE("Customer No.", '');
      END;

      ServiceLocation.Address := Address;
      ServiceLocation."Address 2" := '';
      ServiceLocation."Post Code" := "Post Code";
      ServiceLocation.City := City;
      ServiceLocation.VALIDATE(Description, Description);
      IF CustChanged THEN BEGIN
        // These fields can be filled by the user manually after the service location has been created. Change these fields
        // only if the customer is validated.
        ServiceLocation.County := '';
        ServiceLocation."Country/Region Code":= '';
      END;
      ServiceLocation.MODIFY(TRUE);
    END;

    PROCEDURE ShowServiceLocation@1100528702();
    VAR
      ServiceLocation@1100528700 : Record 11012801;
    BEGIN
      IF NOT ServiceLocation.READPERMISSION THEN
        EXIT;

      TESTFIELD("Service Location No.");

      IF ServiceLocation.GET("Service Location No.") THEN
        PAGE.RUNMODAL(PAGE::"Service Location", ServiceLocation);
    END;

    PROCEDURE ShowServiceObjects@1100528701();
    VAR
      ServiceLocation@1100528700 : Record 11012801;
    BEGIN
      IF NOT ServiceLocation.READPERMISSION THEN
        EXIT;

      TESTFIELD("Service Location No.");

      IF ServiceLocation.GET("Service Location No.") THEN
        ServiceLocation.ShowRelatedObjects;
    END;

    PROCEDURE GetActualRentalPackage@1100528704(VAR RentalPackage@1100528700 : Record 11012941) : Boolean;
    BEGIN
      RentalPackage.SETRANGE("Project No.", "Project No.");
      RentalPackage.SETRANGE("Rental Unit", "Rental Unit");
      RentalPackage.SETFILTER("Starting Date", '..%1', TODAY);
      RentalPackage.SETFILTER("Ending Date", '%1..|%2', TODAY, 0D);
      EXIT(RentalPackage.FINDSET);
    END;

    PROCEDURE DeleteDocumentLinks@1100529006();
    VAR
      DocumentLinkMgt@1100525000 : Codeunit 11012401;
      RecRef@1100525001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DocumentLinkMgt.DeleteDocumentLinksFromObject(RecRef);
    END;

    PROCEDURE MoveDocumentLinks@1100529005(SourceRec@1100529001 : Record 11012940;TargetRec@1100529000 : Record 11012940;CopyMode@1100529003 : Boolean);
    VAR
      DocumentLinkMgt@1100525000 : Codeunit 11012401;
      SourceRecRef@1100525001 : RecordRef;
      TargetRecRef@1100529002 : RecordRef;
    BEGIN
      SourceRecRef.GETTABLE(SourceRec);
      TargetRecRef.GETTABLE(TargetRec);
      IF NOT CopyMode THEN
        DocumentLinkMgt.ReplaceDocLink(SourceRecRef, TargetRecRef)
      ELSE
        DocumentLinkMgt.CopyDocLinks(SourceRecRef, TargetRecRef);
    END;

    PROCEDURE ShowFeatures@1100525002();
    VAR
      RentalUnitFeatureType@1100529000 : Record 11229845;
    BEGIN
      //DP00617
      TESTFIELD("Project No.");
      TESTFIELD("Rental Unit");
      RentalUnitFeatureType.FILTERGROUP(2);
      RentalUnitFeatureType.SETRANGE("Project No.", "Project No.");
      RentalUnitFeatureType.SETRANGE("Rental Unit", "Rental Unit");
      RentalUnitFeatureType.SETRANGE("Entity Type", RentalUnitFeatureType."Entity Type"::RentalUnit);
      RentalUnitFeatureType.FILTERGROUP(0);
      PAGE.RUNMODAL(PAGE::"Rental Unit Feature Types", RentalUnitFeatureType);
      RentalUnitFeatureType.CheckMandatoryValues(RentalUnitFeatureType."Entity Type"::RentalUnit, "Project No.", "Rental Unit", 0D);
    END;

    BEGIN
    END.
  }
}

