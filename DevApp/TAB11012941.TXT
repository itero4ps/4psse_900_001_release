OBJECT Table 11012941 Rental Package
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               lvRentalPackageRec@1210190000 : Record 11012941;
               RentalRateLine@1100529000 : Record 11012942;
             BEGIN
               TESTFIELD("Project No.");
               TESTFIELD("Rental Unit");
               TESTFIELD("Starting Date");
               ProjectRec.GET("Project No.");
               ProjectRec.TESTFIELD("Project Status",ProjectRec."Project Status"::Production);

               "Invoiced Until" := 0D;
               "Invoice Status" := 0;
               "Invoice Type" := 0;
               "Last Invoice No." := '';
               "Previous Invoice No." := '';
               "Previous Invoiced Until" := 0D;
               "Previous Invoice Type" := 0;
               "Invoice Delayed Indexation" := FALSE;
               IF "Customer No." = '' THEN
                 ResetInvoiceData();
               //VALIDATE("Completely Invoiced");
               "Completely Invoiced" := RentalRateLine.CompletelyInvoiced(0, 'I', Rec, RentalRateLine);

               lvRentalPackageRec.SETRANGE("Project No.", "Project No.");
               lvRentalPackageRec.SETRANGE("Rental Unit", "Rental Unit");
               IF lvRentalPackageRec.FIND('+') THEN
                 IF (lvRentalPackageRec."Ending Date" = 0D) THEN BEGIN
                   lvRentalPackageRec."Ending Date" := "Starting Date" - 1;
                   //lvRentalPackageRec.VALIDATE("Completely Invoiced");
                   lvRentalPackageRec."Completely Invoiced" := RentalRateLine.CompletelyInvoiced(0, 'M', lvRentalPackageRec, RentalRateLine);
                   lvRentalPackageRec.MODIFY;
                 END;

               IF Status = Status::Preparation THEN
                 "Package Editable" := TRUE;

               InsertDefaultProlongCode();  //DP00617
             END;

    OnModify=VAR
               lvRentalPackageRec@1210190000 : Record 11012941;
               lvRentalPackageRec2@1210190001 : Record 11012941;
               RentalRateLine@1100529001 : Record 11012942;
             BEGIN
               //xRec.TESTFIELD("Package Editable", TRUE);
               IF NOT gSkipCheckPackageEditable THEN
                 CheckIfPackageIsEditable("Project No.", "Rental Unit", "Starting Date");  //Not updated yet, must be checked on old value in table

               ProjectRec.GET("Project No.");
               ProjectRec.TESTFIELD("Project Status",ProjectRec."Project Status"::Production);

               IF "Customer No." = '' THEN BEGIN
                 ResetInvoiceData();
                 DeleteRentalRateLines();
               END;
               //VALIDATE("Completely Invoiced");
               "Completely Invoiced" := RentalRateLine.CompletelyInvoiced(0, 'M', Rec, RentalRateLine);

               lvRentalPackageRec.SETRANGE("Project No.", "Project No.");
               lvRentalPackageRec.SETRANGE("Rental Unit", "Rental Unit");
               lvRentalPackageRec.SETFILTER("Starting Date", '>%1', "Starting Date");
               IF lvRentalPackageRec.FIND('-') THEN BEGIN
                 ProjectSetupRec.GET;
                 IF ProjectSetupRec."Rental of Unit successive" AND
                    ("Ending Date" < (lvRentalPackageRec."Starting Date" - 1)) THEN BEGIN
                   IF (lvRentalPackageRec."Customer No." = '') THEN
                     lvRentalPackageRec.RENAME(lvRentalPackageRec."Project No.", lvRentalPackageRec."Rental Unit", ("Ending Date" + 1))
                   ELSE BEGIN
                     lvRentalPackageRec2.INIT;
                     lvRentalPackageRec2."Project No." := "Project No.";
                     lvRentalPackageRec2."Rental Unit" := "Rental Unit";
                     lvRentalPackageRec2."Starting Date" := "Ending Date" + 1;
                     lvRentalPackageRec2."Ending Date" := lvRentalPackageRec."Starting Date" - 1;
                     lvRentalPackageRec2.INSERT;
                   END;
                 END;
               END;
             END;

    OnDelete=VAR
               lvRentalPackageRec@1210190000 : Record 11012941;
               lvRentalUnitCommentRec@1100485000 : Record 11012975;
               RentalUnitGuarantee@1100485002 : Record 11012996;
               RentalUnitFeatureType@1100529002 : Record 11229845;
               RentalPackageProlongCode@1100529000 : Record 11229840;
               RentalPackageProlong@1100529001 : Record 11229841;
               HistRentalPackage@1100529003 : Record 11229848;
             BEGIN
               TESTFIELD("Package Editable", TRUE);

               ProjectRec.GET("Project No.");
               ProjectRec.TESTFIELD("Project Status",ProjectRec."Project Status"::Production);

               ProjectSetupRec.GET;
               IF ProjectSetupRec."Rental of Unit successive" THEN BEGIN
                 lvRentalPackageRec.SETRANGE("Project No.", "Project No.");
                 lvRentalPackageRec.SETRANGE("Rental Unit", "Rental Unit");
                 lvRentalPackageRec.SETFILTER("Starting Date", '>%1', "Starting Date");
                 IF lvRentalPackageRec.FIND('-') THEN
                    ERROR(Text012);
               END;

               IF ("Completely Invoiced" = FALSE) AND ("Customer No." <> '') THEN
                 IF NOT CONFIRM(Text006, FALSE, FIELDCAPTION("Rental Unit") , "Rental Unit") THEN
                   ERROR('');

               DeleteRentalRateLines();

               lvRentalUnitCommentRec.SETRANGE("Comment Type", lvRentalUnitCommentRec."Comment Type"::"Rental Package");
               lvRentalUnitCommentRec.SETRANGE("Project No.", "Project No.");
               lvRentalUnitCommentRec.SETRANGE("Rental Unit", "Rental Unit");
               lvRentalUnitCommentRec.SETRANGE("Starting Date", "Starting Date");
               lvRentalUnitCommentRec.DELETEALL;

               RentalUnitGuarantee.SETRANGE("Project No.", "Project No.");
               RentalUnitGuarantee.SETRANGE("Rental Unit", "Rental Unit");
               RentalUnitGuarantee.SETRANGE("Starting Date", "Starting Date");
               RentalUnitGuarantee.DELETEALL;

               //DP00617.sn
               DeleteDocumentLinks();

               RentalUnitFeatureType.SETRANGE("Project No.", "Project No.");
               RentalUnitFeatureType.SETRANGE("Rental Unit", "Rental Unit");
               RentalUnitFeatureType.SETRANGE("Starting Date Package", "Starting Date");
               RentalUnitFeatureType.SETRANGE("Entity Type", RentalUnitFeatureType."Entity Type"::RentalPackage);
               RentalUnitFeatureType.DELETEALL;

               RentalPackageProlongCode.SETRANGE("Project No.", "Project No.");
               RentalPackageProlongCode.SETRANGE("Rental Unit", "Rental Unit");
               RentalPackageProlongCode.SETRANGE("Starting Date", "Starting Date");
               RentalPackageProlongCode.DELETEALL;

               RentalPackageProlong.SETRANGE("Project No.", "Project No.");
               RentalPackageProlong.SETRANGE("Rental Unit", "Rental Unit");
               RentalPackageProlong.SETRANGE("Starting Date", "Starting Date");
               RentalPackageProlong.DELETEALL;

               HistRentalPackage.SETRANGE("Project No.", "Project No.");
               HistRentalPackage.SETRANGE("Rental Unit", "Rental Unit");
               HistRentalPackage.SETRANGE("Starting Date", "Starting Date");
               HistRentalPackage.DELETEALL(TRUE);
               //DP00617.en
             END;

    OnRename=BEGIN
               IF ("Project No." <> xRec."Project No.") OR ("Rental Unit" <> xRec."Rental Unit") THEN
                 ERROR(Text000);
               TESTFIELD("Last Invoice No.", ''); //Modify Start Date not allowed if already invoiced
               CheckIfLinesAreAfterStartDate;
               ProjectRec.GET("Project No.");
               ProjectRec.TESTFIELD("Project Status",ProjectRec."Project Status"::Production);
               MoveDocumentLinks(xRec, Rec, FALSE);  //DP00617.n
             END;

    CaptionML=ENU=Rental Package;
    LookupPageID=Page11012943;
    DrillDownPageID=Page11012943;
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   OnValidate=BEGIN
                                                                IF ("Project No." <> '') AND ("Global Dimension 1 Code" = '') THEN BEGIN
                                                                  IF ProjectRec.GET("Project No.") THEN BEGIN
                                                                    IF ProjectRec."Global Dimension 1 Code" <> '' THEN
                                                                      "Global Dimension 1 Code" := ProjectRec."Global Dimension 1 Code";
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Project No.;
                                                   NotBlank=Yes }
    { 20  ;   ;Rental Unit         ;Code20        ;TableRelation="Rental Unit"."Rental Unit" WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Rental Unit;
                                                   NotBlank=Yes }
    { 30  ;   ;Starting Date       ;Date          ;OnValidate=VAR
                                                                lvRentalUnitRec@1210190001 : Record 11012940;
                                                                lvRentalPackageRec@1210190000 : Record 11012941;
                                                              BEGIN
                                                                ProjectSetupRec.GET;
                                                                IF ("Starting Date" > "Ending Date") AND ("Ending Date" <> 0D) THEN
                                                                  FIELDERROR("Starting Date",STRSUBSTNO(Text001,FIELDCAPTION("Ending Date"),"Ending Date"));

                                                                IF lvRentalUnitRec.GET("Project No.", "Rental Unit") THEN BEGIN
                                                                  IF ("Starting Date" < lvRentalUnitRec."Starting Date") THEN
                                                                    FIELDERROR("Starting Date",STRSUBSTNO(Text002,lvRentalUnitRec.FIELDCAPTION("Starting Date"),lvRentalUnitRec."Starting Date"));
                                                                  IF ("Starting Date" > lvRentalUnitRec."Ending Date") AND (lvRentalUnitRec."Ending Date" <> 0D) THEN
                                                                    FIELDERROR("Starting Date",STRSUBSTNO(Text001,lvRentalUnitRec.FIELDCAPTION("Ending Date"),lvRentalUnitRec."Ending Date"));
                                                                END;

                                                                IF ProjectSetupRec."Rental of Unit successive" THEN BEGIN
                                                                  lvRentalPackageRec.RESET;
                                                                  lvRentalPackageRec.SETRANGE("Project No.", "Project No.");
                                                                  lvRentalPackageRec.SETRANGE("Rental Unit", "Rental Unit");
                                                                  IF xRec."Starting Date" <> 0D THEN
                                                                    lvRentalPackageRec.SETFILTER("Starting Date", '<%1', xRec."Starting Date");
                                                                  IF lvRentalPackageRec.FIND('+') THEN BEGIN
                                                                    IF (("Starting Date" - 1) <> lvRentalPackageRec."Ending Date") AND (lvRentalPackageRec."Ending Date" <> 0D) THEN
                                                                      FIELDERROR("Starting Date",STRSUBSTNO(Text010, FIELDCAPTION("Ending Date"), lvRentalPackageRec."Ending Date"));
                                                                  END ELSE BEGIN
                                                                    IF ("Starting Date" <> lvRentalUnitRec."Starting Date") THEN
                                                                      FIELDERROR("Starting Date",STRSUBSTNO(Text011,lvRentalUnitRec.FIELDCAPTION("Ending Date"),lvRentalUnitRec."Starting Date"));
                                                                  END;
                                                                END;

                                                                IF xRec."Starting Date" = 0D THEN BEGIN
                                                                  lvRentalPackageRec.RESET;
                                                                  lvRentalPackageRec.SETRANGE("Project No.", "Project No.");
                                                                  lvRentalPackageRec.SETRANGE("Rental Unit", "Rental Unit");
                                                                  IF lvRentalPackageRec.FIND('+') THEN BEGIN
                                                                    IF (lvRentalPackageRec."Ending Date" <> 0D) THEN BEGIN
                                                                      IF ("Starting Date" <= lvRentalPackageRec."Ending Date") THEN
                                                                        FIELDERROR("Starting Date",
                                                                                   STRSUBSTNO(Text003,lvRentalPackageRec.FIELDCAPTION("Ending Date"),lvRentalPackageRec."Ending Date"));
                                                                    END ELSE BEGIN
                                                                      IF ("Starting Date" <= lvRentalPackageRec."Starting Date") THEN
                                                                        FIELDERROR("Starting Date",
                                                                                     STRSUBSTNO(Text003,lvRentalPackageRec.FIELDCAPTION("Starting Date"),lvRentalPackageRec."Starting Date"));
                                                                    END;
                                                                  END;
                                                                END;

                                                                //IF ("Starting Date" > "Next Invoice Until") AND ("Next Invoice Until" <> 0D) THEN  //DP00617.o
                                                                //  "Next Invoice Until" := "Starting Date";
                                                              END;

                                                   CaptionML=ENU=Starting Date;
                                                   NotBlank=Yes }
    { 40  ;   ;Ending Date         ;Date          ;OnValidate=VAR
                                                                lvRentalUnitRec@1210190001 : Record 11012940;
                                                                lvRentalPackageRec@1210190000 : Record 11012941;
                                                              BEGIN
                                                                IF ("Ending Date" <> 0D) THEN BEGIN
                                                                  IF ("Starting Date" > "Ending Date") AND ("Ending Date" <> 0D) THEN
                                                                    FIELDERROR("Ending Date",STRSUBSTNO(Text002,FIELDCAPTION("Starting Date"),"Starting Date"));
                                                                  IF lvRentalUnitRec.GET("Project No.", "Rental Unit") THEN BEGIN
                                                                    IF ("Ending Date" > lvRentalUnitRec."Ending Date") AND (lvRentalUnitRec."Ending Date" <> 0D) THEN
                                                                      FIELDERROR("Ending Date",STRSUBSTNO(Text001,lvRentalUnitRec.FIELDCAPTION("Ending Date"),lvRentalUnitRec."Ending Date"));
                                                                  END;
                                                                  lvRentalPackageRec.SETRANGE("Project No.", "Project No.");
                                                                  lvRentalPackageRec.SETRANGE("Rental Unit", "Rental Unit");
                                                                  lvRentalPackageRec.SETFILTER("Starting Date", '>%1', "Starting Date");
                                                                  IF lvRentalPackageRec.FIND('-') THEN BEGIN
                                                                    IF ("Ending Date" >= lvRentalPackageRec."Starting Date") THEN BEGIN
                                                                      FIELDERROR("Ending Date",STRSUBSTNO(Text008,FIELDCAPTION("Starting Date"),lvRentalPackageRec."Starting Date"));
                                                                    END;
                                                                    ProjectSetupRec.GET;
                                                                    IF ProjectSetupRec."Rental of Unit successive" THEN BEGIN
                                                                      IF ("Ending Date" < (lvRentalPackageRec."Starting Date" - 1)) THEN BEGIN
                                                                        IF NOT CONFIRM(Text009, FALSE) THEN
                                                                          ERROR('');
                                                                      END;
                                                                    END;
                                                                  END;
                                                                END ELSE BEGIN
                                                                  lvRentalPackageRec.SETRANGE("Project No.", "Project No.");
                                                                  lvRentalPackageRec.SETRANGE("Rental Unit", "Rental Unit");
                                                                  lvRentalPackageRec.SETFILTER("Starting Date", '>%1', "Starting Date");
                                                                  IF lvRentalPackageRec.FIND('-') THEN
                                                                    FIELDERROR("Ending Date",STRSUBSTNO(Text005,FIELDCAPTION("Starting Date"),"Starting Date"));
                                                                END;

                                                                CheckIfLinesAreBeforeEndDate;
                                                              END;

                                                   CaptionML=ENU=Ending Date;
                                                   Description=Do not use Fieldnumber 35, reserved for "Invoice Run No." in history (T11229848) }
    { 50  ;   ;Customer No.        ;Code20        ;TableRelation=Customer.No.;
                                                   OnValidate=BEGIN
                                                                CALCFIELDS(Name);
                                                                CheckCopyRentalRateLines();
                                                                IF ("Customer No." <> '') AND ("Invoice Frequency" = "Invoice Frequency"::" ") THEN
                                                                  VALIDATE("Invoice Frequency", "Invoice Frequency"::Month);
                                                              END;

                                                   CaptionML=ENU=Customer No. }
    { 51  ;   ;Name                ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Customer No.)));
                                                   CaptionML=ENU=Name;
                                                   Editable=No }
    { 70  ;   ;Invoice Frequency   ;Option        ;OnValidate=BEGIN
                                                                IF "Customer No." <> '' THEN
                                                                  TESTFIELD("Invoice Frequency");

                                                                //DP00617.so
                                                                //IF ("Customer No." <> '') AND ("Invoiced Until" = 0D) AND
                                                                //   (("Next Invoice Until" = 0D) OR (xRec."Invoice Frequency" <> "Invoice Frequency")) THEN BEGIN
                                                                //  CASE "Invoice Frequency" OF
                                                                //    "Invoice Frequency"::Month,
                                                                //    "Invoice Frequency"::HalfYear:
                                                                //      CalendarRec."Period Type" := CalendarRec."Period Type"::Month;
                                                                //    "Invoice Frequency"::Quarter:
                                                                //      CalendarRec."Period Type" := CalendarRec."Period Type"::Quarter;
                                                                //    "Invoice Frequency"::Year:
                                                                //      CalendarRec."Period Type" := CalendarRec."Period Type"::Year;
                                                                //    ELSE
                                                                //      EXIT;
                                                                //  END;
                                                                //  CalendarRec."Period Start" := "Starting Date";
                                                                //  IF "Invoice Frequency" = "Invoice Frequency"::HalfYear THEN BEGIN
                                                                //    IF (DATE2DMY("Starting Date", 2) <= 6) THEN
                                                                //      "Next Invoice Until" := DMY2DATE(30, 6, DATE2DMY("Starting Date", 3))
                                                                //    ELSE
                                                                //      "Next Invoice Until" := DMY2DATE(31, 12, DATE2DMY("Starting Date", 3));
                                                                //  END ELSE BEGIN
                                                                //    PeriodFormManagement.FindDate('=<', CalendarRec, CalendarRec."Period Type");
                                                                //    "Next Invoice Until" := CalendarRec."Period End";
                                                                //  END;
                                                                //END;
                                                                //DP00617.eo

                                                                IF xRec."Invoice Frequency" <> "Invoice Frequency" THEN  //DP00617.n
                                                                  RecalcAmountPackageLines();
                                                              END;

                                                   CaptionML=ENU=Invoice Frequency;
                                                   OptionCaptionML=ENU=" ,,,,Month,,Quarter,,Half a Year,,Year";
                                                   OptionString=[ ,,,,Month,,Quarter,,HalfYear,,Year] }
    { 80  ;   ;Next Invoice Until OLD;Date        ;OnValidate=BEGIN
                                                                TESTFIELD("Next Invoice Until OLD", 0D);  //DP00617.n
                                                                //DP00617.so
                                                                //IF "Customer No." = '' THEN
                                                                //  EXIT;
                                                                //IF ("Invoiced Until" = 0D) THEN BEGIN
                                                                //  IF ("Next Invoice Until" < "Starting Date") THEN
                                                                //    FIELDERROR("Next Invoice Until",STRSUBSTNO(Text002,FIELDCAPTION("Starting Date"),"Starting Date"));
                                                                //END ELSE BEGIN
                                                                //  IF ("Next Invoice Until" < "Invoiced Until") THEN
                                                                //    FIELDERROR("Next Invoice Until",STRSUBSTNO(Text002,FIELDCAPTION("Invoiced Until"),"Invoiced Until"));
                                                                //END;
                                                                //DP00617.eo
                                                              END;

                                                   CaptionML=ENU=Next Invoice until OLD }
    { 85  ;   ;Invoice Moment      ;Option        ;InitValue=Forewards;
                                                   CaptionML=ENU=Invoice Moment;
                                                   OptionCaptionML=ENU=Forewards,Afterwards;
                                                   OptionString=Forewards,Afterwards }
    { 90  ;   ;Invoiced Until      ;Date          ;CaptionML=ENU=Invoiced until;
                                                   Editable=No }
    { 100 ;   ;Completely Invoiced ;Boolean       ;CaptionML=ENU=Completely Invoiced;
                                                   Editable=No }
    { 105 ;   ;Invoice Status      ;Option        ;CaptionML=ENU=Invoice Status;
                                                   OptionCaptionML=ENU=,,Temporary,Posted;
                                                   OptionString=,,Temporary,Posted;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 109 ;   ;Invoice Type        ;Option        ;CaptionML=ENU=Invoice Type;
                                                   OptionCaptionML=ENU=" ,Invoice,Credit Memo";
                                                   OptionString=[ ,Invoice,CreditMemo];
                                                   Editable=No }
    { 110 ;   ;Last Invoice No.    ;Code20        ;TableRelation=IF (Invoice Status=CONST(Temporary),
                                                                     Invoice Type=CONST(Invoice)) "Sales Header".No. WHERE (Document Type=CONST(Invoice))
                                                                     ELSE IF (Invoice Status=CONST(Temporary),
                                                                              Invoice Type=CONST(CreditMemo)) "Sales Header".No. WHERE (Document Type=CONST(Credit Memo))
                                                                              ELSE IF (Invoice Status=CONST(Posted),
                                                                                       Invoice Type=CONST(Invoice)) "Sales Invoice Header".No.
                                                                                       ELSE IF (Invoice Status=CONST(Posted),
                                                                                                Invoice Type=CONST(CreditMemo)) "Sales Cr.Memo Header".No.;
                                                   OnLookup=BEGIN
                                                              ShowSalesInvoiceList("Last Invoice No.", "Invoice Status", "Invoice Type");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Last Invoice No.;
                                                   Editable=No }
    { 111 ;   ;Previous Invoice No.;Code20        ;TableRelation="Sales Invoice Header".No.;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Previous Invoice No.;
                                                   Editable=No }
    { 112 ;   ;Previous Invoiced Until;Date       ;CaptionML=ENU=Previous Invoiced Until;
                                                   Editable=No }
    { 113 ;   ;Previous Invoice Type;Option       ;CaptionML=ENU=Previous Invoice Type;
                                                   OptionCaptionML=ENU=" ,Invoice,Credit Memo";
                                                   OptionString=[ ,Invoice,CreditMemo];
                                                   Editable=No }
    { 115 ;   ;History Invoices    ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("History Rental Package" WHERE (Project No.=FIELD(Project No.),
                                                                                                     Rental Unit=FIELD(Rental Unit),
                                                                                                     Starting Date=FIELD(Starting Date)));
                                                   CaptionML=ENU=History Invoces;
                                                   Editable=No }
    { 120 ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Rental Unit Comment Line" WHERE (Comment Type=CONST(Rental Package),
                                                                                                       Project No.=FIELD(Project No.),
                                                                                                       Rental Unit=FIELD(Rental Unit),
                                                                                                       Starting Date=FIELD(Starting Date)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 130 ;   ;Prolongation Date   ;Date          ;CaptionML=ENU=Prolongation Date }
    { 135 ;   ;Prolong Code        ;Code10        ;TableRelation="Rental Package Prolong Code"."Prolong Code" WHERE (Project No.=FIELD(Project No.),
                                                                                                                     Rental Unit=FIELD(Rental Unit),
                                                                                                                     Starting Date=FIELD(Starting Date));
                                                   CaptionML=ENU=Prolong Code }
    { 140 ;   ;Rent Increase Date  ;Date          ;CaptionML=ENU=Rent Increase Date }
    { 150 ;   ;Indexation OLD      ;Code10        ;OnValidate=BEGIN
                                                                TESTFIELD("Indexation OLD", '');  //DP00617
                                                              END;

                                                   CaptionML=ENU=Indexation OLD }
    { 151 ;   ;Indexation Date     ;Date          ;OnValidate=BEGIN
                                                                IF ("Indexation Date" <> xRec."Indexation Date") AND ("Last Invoice No." <> '') THEN BEGIN
                                                                  IF ExecuteManualIndexedAllowed(Rec) THEN BEGIN
                                                                    IF NOT CONFIRM(Text019, FALSE, FIELDCAPTION("Indexation Date")) THEN
                                                                      ERROR('');
                                                                    IF "Max. Delay Indexation [Mth]" > 0 THEN BEGIN
                                                                      IF NOT CONFIRM(Text020, FALSE) THEN
                                                                        ERROR('');
                                                                    END;
                                                                    "Invoice Delayed Indexation" := FALSE;
                                                                  END;
                                                                END;
                                                                IF ("Indexation Date" <> 0D) AND (FORMAT("Indexation Frequency") = '') THEN
                                                                  EVALUATE("Indexation Frequency",  '<1Y>');
                                                                IF ("Indexation Date" = 0D) AND ("Max. Delay Indexation [Mth]" <> 0) THEN
                                                                  "Max. Delay Indexation [Mth]" := 0;
                                                              END;

                                                   CaptionML=ENU=Indexation Date }
    { 153 ;   ;Indexation Frequency;DateFormula   ;CaptionML=ENU=Indexation Frequency }
    { 154 ;   ;Max. Delay Indexation [Mth];Integer;OnValidate=BEGIN
                                                                IF "Max. Delay Indexation [Mth]" <> 0 THEN
                                                                  TESTFIELD("Indexation Date");
                                                              END;

                                                   CaptionML=ENU=Max. Delay Indexation [Mth];
                                                   MinValue=0;
                                                   MaxValue=12 }
    { 155 ;   ;Invoice Delayed Indexation;Boolean ;CaptionML=ENU=Invoice Delayed Indexation;
                                                   Editable=No }
    { 160 ;   ;Customer Reference  ;Text35        ;CaptionML=ENU=Customer Reference }
    { 170 ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                UpdatePackageEditable;
                                                              END;

                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Preparation,Active,Terminated;
                                                   OptionString=Preparation,Active,Terminated }
    { 180 ;   ;Package Editable    ;Boolean       ;CaptionML=ENU=Package Editable;
                                                   Editable=No }
    { 190 ;   ;Renewal Period OLD  ;DateFormula   ;OnValidate=BEGIN
                                                                IF FORMAT("Renewal Period OLD") <> '' THEN FIELDERROR("Renewal Period OLD");  //DP00617
                                                              END;

                                                   CaptionML=ENU=Renewal Period OLD }
    { 195 ;   ;Renewal Period Description OLD;Text30;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Renewal Period Description OLD", '');  //DP00617
                                                              END;

                                                   CaptionML=ENU=Renewal Period Description OLD }
    { 200 ;   ;Guarantees          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Rental Unit Guarantee".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                                         Rental Unit=FIELD(Rental Unit),
                                                                                                         Starting Date=FIELD(Starting Date)));
                                                   CaptionML=ENU=Guarantees;
                                                   Editable=No }
    { 220 ;   ;Cancellation Clause Code;Code10    ;TableRelation="Rental Cancellation Clause";
                                                   CaptionML=ENU=Cancellation Clause Code }
    { 230 ;   ;Termination Period  ;DateFormula   ;CaptionML=ENU=Termination Period }
    { 240 ;   ;Termination Reason  ;Code10        ;TableRelation="Rental Unit Reason Code" WHERE (Type=CONST(Termination));
                                                   CaptionML=ENU=Termination Reason;
                                                   Description=Fieldnumbers from 1000 reserved for history specific fields (T11229848) (Note: Transferfields is used) }
    { 250 ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                //See DP00668 (DR00373), only info!
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
  }
  KEYS
  {
    {    ;Project No.,Rental Unit,Starting Date   ;Clustered=Yes }
    {    ;Completely Invoiced,Project No.,Customer No.,Rental Unit }
    {    ;Invoice Status,Last Invoice No.          }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100529000 : TextConst 'ENU=Rename not allowed';
      Text001@1210190002 : TextConst 'ENU=may not occur after %1 (%2)';
      Text002@1210190003 : TextConst 'ENU=may not occur before %1 (%2)';
      Text003@1210190000 : TextConst 'ENU=must occur after %1 (%2) of the last rent';
      Text004@1210190001 : TextConst 'ENU=Copy previous Rental Rate?';
      Text005@1210190004 : TextConst 'ENU=may not be empty';
      ProjectSetupRec@1210190008 : Record 315;
      ProjectRec@1210190013 : Record 11072003;
      Text006@1210190007 : TextConst 'ENU=%1 ''%2'' not yet Completely Invoiced.\ \Delete %1?\ \';
      Text008@1210190009 : TextConst 'ENU=must occur before %1 (%2) of the next rent';
      Text009@1210190010 : TextConst 'ENU=Rental not successive anymore\ \Fill gap with vacancy?\ \';
      Text010@1210190011 : TextConst 'ENU=must succeed the previous %1 (%2)';
      Text011@1210190012 : TextConst 'ENU=must be equal to the %1 (%2)';
      Text012@1210190014 : TextConst 'ENU=Rental must be successive, delete not allowed.';
      Text013@1100528400 : TextConst 'ENU=There is a %1 with %2 before %3.';
      Text014@1100528401 : TextConst 'ENU=There is a %1 with %2 after %3.';
      Text015@1100528402 : TextConst 'ENU=There are %1s with filled %2. Empty %2?';
      gSkipCheckPackageEditable@1100529001 : Boolean;
      Text016@1100529002 : TextConst 'ENU=Not allowed, no (or not only) lines with %1 ''%2'' present';
      Text017@1100529003 : TextConst 'ENU=Are the lines  manually indexed and may %1 now be incremented?';
      Text018@1100529004 : TextConst 'ENU=No rate present on %1 (%2), in %3 ''%4'', ''%5''';
      Text019@1100529005 : TextConst 'ENU=Modify %1, recommended is to do this by the function (action) ''Indexed manually''. Are you sure?';
      Text020@1100529006 : TextConst 'ENU=If function is not used then ivoicing of the delayed indexation is not possible Are you very sure?';

    PROCEDURE ResetInvoiceData@1210190001();
    BEGIN
      "Invoice Frequency" := 0;
      //"Next Invoice Until" := 0D;  //DP00617.o
      "Invoiced Until" := 0D;
    END;

    PROCEDURE SetSkipCheckPackageEditable@1100529003(SkipCheckPackageEditable@1100529000 : Boolean);
    BEGIN
      gSkipCheckPackageEditable := SkipCheckPackageEditable;
    END;

    PROCEDURE DeleteRentalRateLines@1210190000();
    VAR
      lvRentalRateRec@1210190000 : Record 11012942;
      RentalPackageLineRate@1100529000 : Record 11229856;
    BEGIN
      lvRentalRateRec.SETRANGE("Project No.", "Project No.");
      lvRentalRateRec.SETRANGE("Rental Unit", "Rental Unit");
      lvRentalRateRec.SETRANGE("Starting Date Package", "Starting Date");
      lvRentalRateRec.DELETEALL;

      RentalPackageLineRate.SETRANGE("Project No.", "Project No.");
      RentalPackageLineRate.SETRANGE("Rental Unit", "Rental Unit");
      RentalPackageLineRate.SETRANGE("Starting Date Package", "Starting Date");
      RentalPackageLineRate.DELETEALL;
    END;

    PROCEDURE CheckCopyRentalRateLines@1210190002();
    VAR
      lvRentalPackageRec@1210190001 : Record 11012941;
      lvRentalRateRec@1210190000 : Record 11012942;
      lvRentalRateRec2@1210190002 : Record 11012942;
    BEGIN
      IF "Customer No." = '' THEN
        EXIT;

      lvRentalRateRec.SETRANGE("Project No.", "Project No.");
      lvRentalRateRec.SETRANGE("Rental Unit", "Rental Unit");
      lvRentalRateRec.SETRANGE("Starting Date Package", "Starting Date");
      IF lvRentalRateRec.FIND('-') THEN
        EXIT;

      lvRentalPackageRec.SETRANGE("Project No.", "Project No.");
      lvRentalPackageRec.SETRANGE("Rental Unit", "Rental Unit");
      lvRentalPackageRec.SETFILTER("Starting Date", '<%1', "Starting Date");
      lvRentalPackageRec.SETFILTER("Customer No.", '<>%1', '');
      IF lvRentalPackageRec.FIND('+') THEN BEGIN
        lvRentalRateRec.SETRANGE("Project No.", "Project No.");
        lvRentalRateRec.SETRANGE("Rental Unit", "Rental Unit");
        lvRentalRateRec.SETRANGE("Starting Date Package", lvRentalPackageRec."Starting Date");
        IF lvRentalRateRec.FIND('-') THEN BEGIN
          IF NOT CONFIRM(Text004, TRUE) THEN
            EXIT;
          REPEAT
            lvRentalRateRec2 := lvRentalRateRec;
            lvRentalRateRec2."Starting Date Package" := "Starting Date";
            lvRentalRateRec2."Starting Date Line" := 0D;
            lvRentalRateRec2."Ending Date Line" := 0D;
            lvRentalRateRec2.InitProcessFields();
            lvRentalRateRec2.INSERT;
          UNTIL lvRentalRateRec.NEXT = 0;
          "Completely Invoiced" := FALSE;
          VALIDATE("Invoice Frequency", lvRentalPackageRec."Invoice Frequency");
          //CALCFIELDS("Period Amount");
        END;
      END;
    END;

    LOCAL PROCEDURE UpdatePackageEditable@1100528403();
    BEGIN
      IF (xRec.Status = Status::Preparation) AND
         (Status = Status::Active)
      THEN
        "Package Editable" := FALSE;
    END;

    PROCEDURE SetPackageEditable@1100528402(PackageEditable@1100528400 : Boolean);
    BEGIN
      "Package Editable" := PackageEditable;
      MODIFY;
    END;

    PROCEDURE CheckIfPackageIsEditable@1100528400(ProjectNo@1100528400 : Code[20];RentalUnitCode@1100528401 : Code[20];StartingDate@1100528402 : Date);
    VAR
      RentalPackage@1100528403 : Record 11012941;
    BEGIN
      RentalPackage.GET(ProjectNo, RentalUnitCode, StartingDate);
      RentalPackage.TESTFIELD("Package Editable", TRUE);
    END;

    LOCAL PROCEDURE CheckIfLinesAreAfterStartDate@1100528405();
    VAR
      RentalRateLine@1100528400 : Record 11012942;
    BEGIN
      IF "Starting Date" = 0D THEN
        EXIT;

      RentalRateLine.SETRANGE("Project No.", "Project No.");
      RentalRateLine.SETRANGE("Rental Unit", "Rental Unit");
      RentalRateLine.SETRANGE("Starting Date Package", xRec."Starting Date");
      RentalRateLine.SETFILTER("Starting Date Line", '<>%1&<%2', 0D, "Starting Date");
      IF NOT RentalRateLine.ISEMPTY THEN
        ERROR(
          Text013, RentalRateLine.TABLECAPTION, RentalRateLine.FIELDCAPTION("Starting Date Line"), "Starting Date");

      RentalRateLine.SETRANGE("Starting Date Line");
      RentalRateLine.SETFILTER("Ending Date Line", '<>%1&<%2', 0D, "Starting Date");
      IF NOT RentalRateLine.ISEMPTY THEN
        ERROR(
          Text013, RentalRateLine.TABLECAPTION, RentalRateLine.FIELDCAPTION("Ending Date Line"), "Starting Date");
    END;

    LOCAL PROCEDURE CheckIfLinesAreBeforeEndDate@1100528406();
    VAR
      RentalRateLine@1100528400 : Record 11012942;
    BEGIN
      IF "Ending Date" = 0D THEN
        EXIT;

      RentalRateLine.SETRANGE("Project No.", "Project No.");
      RentalRateLine.SETRANGE("Rental Unit", "Rental Unit");
      RentalRateLine.SETRANGE("Starting Date Package", "Starting Date");
      RentalRateLine.SETFILTER("Starting Date Line", '<>%1&>%2', 0D, "Ending Date");
      IF NOT RentalRateLine.ISEMPTY THEN
        ERROR(
          Text014, RentalRateLine.TABLECAPTION, RentalRateLine.FIELDCAPTION("Starting Date Line"), "Ending Date");

      RentalRateLine.SETRANGE("Starting Date Line");
      RentalRateLine.SETFILTER("Ending Date Line", '<>%1&>%2', 0D, "Ending Date");
      RentalRateLine.SETRANGE("Reason End after Contract", '');  //DP00617.n
      IF NOT RentalRateLine.ISEMPTY THEN
        ERROR(
          Text014, RentalRateLine.TABLECAPTION, RentalRateLine.FIELDCAPTION("Ending Date Line"), "Ending Date");
    END;

    PROCEDURE CalcTerminationDate@1100525000() TerminationDate : Date;
    BEGIN
      //DP00472
      IF ("Ending Date" = 0D) OR
         (FORMAT("Termination Period") = '')
      THEN
        EXIT;

      TerminationDate := CALCDATE(STRSUBSTNO('-%1', "Termination Period"), "Ending Date");
    END;

    LOCAL PROCEDURE RecalcAmountPackageLines@1100529001();
    VAR
      RentalPackageLineRate@1100529000 : Record 11229856;
    BEGIN
      //DP00617 (Period Amount)
      RentalPackageLineRate.SETRANGE("Project No.", "Project No.");
      RentalPackageLineRate.SETRANGE("Rental Unit", "Rental Unit");
      RentalPackageLineRate.SETRANGE("Starting Date Package", "Starting Date");
      IF RentalPackageLineRate.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          RentalPackageLineRate.CalculatePeriodAmount(TRUE, "Invoice Frequency");
          RentalPackageLineRate.MODIFY;
        UNTIL RentalPackageLineRate.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE InsertDefaultProlongCode@1100529000();
    VAR
      ProjSetup@1100529000 : Record 315;
      RentalPackageProlongCode@1100529001 : Record 11229840;
    BEGIN
      //DP00617
      ProjSetup.GET;
      IF ProjSetup."Default Prolong Code" = '' THEN
        EXIT;
      IF RentalPackageProlongCode.GET("Project No.", "Rental Unit", "Starting Date", ProjSetup."Default Prolong Code") THEN
        EXIT;
      RentalPackageProlongCode.INIT;
      RentalPackageProlongCode."Project No." := "Project No.";
      RentalPackageProlongCode."Rental Unit" := "Rental Unit";
      RentalPackageProlongCode."Starting Date" := "Starting Date";
      RentalPackageProlongCode."Prolong Code" := ProjSetup."Default Prolong Code";
      RentalPackageProlongCode.Description := ProjSetup."Default Prolong Code Descr.";
      RentalPackageProlongCode.INSERT;
    END;

    PROCEDURE DeleteDocumentLinks@1100529006();
    VAR
      DocumentLinkMgt@1100525000 : Codeunit 11012401;
      RecRef@1100525001 : RecordRef;
    BEGIN
      //DP00617
      RecRef.GETTABLE(Rec);
      DocumentLinkMgt.DeleteDocumentLinksFromObject(RecRef);
    END;

    PROCEDURE MoveDocumentLinks@1100529005(SourceRec@1100529001 : Record 11012941;TargetRec@1100529000 : Record 11012941;CopyMode@1100529003 : Boolean);
    VAR
      DocumentLinkMgt@1100525000 : Codeunit 11012401;
      SourceRecRef@1100525001 : RecordRef;
      TargetRecRef@1100529002 : RecordRef;
    BEGIN
      //DP00617
      SourceRecRef.GETTABLE(SourceRec);
      TargetRecRef.GETTABLE(TargetRec);
      IF NOT CopyMode THEN
        DocumentLinkMgt.ReplaceDocLink(SourceRecRef, TargetRecRef)
      ELSE
        DocumentLinkMgt.CopyDocLinks(SourceRecRef, TargetRecRef);
    END;

    PROCEDURE ShowSalesInvoiceList@1100529002(InvoiceNo@1100529003 : Code[20];InvoiceStatus@1100529004 : Option;InvoiceType@1100529005 : Option);
    VAR
      SalesHead@1100529000 : Record 36;
      SalesInvoiceHead@1100529001 : Record 112;
      SalesCrMemoHead@1100529002 : Record 114;
    BEGIN
      //DP00617
      IF InvoiceNo = '' THEN
        EXIT;
      IF InvoiceStatus = "Invoice Status"::"Temporary" THEN BEGIN
        SalesHead.FILTERGROUP(9);
        IF InvoiceType <> "Invoice Type"::CreditMemo THEN
          SalesHead.SETRANGE("Document Type", SalesHead."Document Type"::Invoice)
        ELSE
          SalesHead.SETRANGE("Document Type", SalesHead."Document Type"::"Credit Memo");
        SalesHead.FILTERGROUP(0);
        SalesHead.SETRANGE("No.", InvoiceNo);
        PAGE.RUNMODAL(0, SalesHead);
      END ELSE BEGIN
        IF InvoiceType <> "Invoice Type"::CreditMemo THEN BEGIN
          SalesInvoiceHead.SETRANGE("No.", InvoiceNo);
          PAGE.RUNMODAL(0, SalesInvoiceHead);
        END ELSE BEGIN
          SalesCrMemoHead.SETRANGE("No.", InvoiceNo);
          PAGE.RUNMODAL(0, SalesCrMemoHead);
        END;
      END;
    END;

    PROCEDURE ShowFeatures@1100525002();
    VAR
      RentalUnitFeatureType@1100529000 : Record 11229845;
    BEGIN
      //DP00617
      TESTFIELD("Project No.");
      TESTFIELD("Rental Unit");
      TESTFIELD("Starting Date");
      RentalUnitFeatureType.FILTERGROUP(2);
      RentalUnitFeatureType.SETRANGE("Project No.", "Project No.");
      RentalUnitFeatureType.SETRANGE("Rental Unit", "Rental Unit");
      RentalUnitFeatureType.SETRANGE("Starting Date Package", "Starting Date");
      RentalUnitFeatureType.SETRANGE("Entity Type", RentalUnitFeatureType."Entity Type"::RentalPackage);
      RentalUnitFeatureType.FILTERGROUP(0);
      PAGE.RUNMODAL(PAGE::"Rental Unit Feature Types", RentalUnitFeatureType);
      RentalUnitFeatureType.CheckMandatoryValues(
        RentalUnitFeatureType."Entity Type"::RentalPackage, "Project No.", "Rental Unit", "Starting Date");
    END;

    PROCEDURE AllowedInvoiceEndDateWithDelayIndex@1100529009() : Date;
    VAR
      MonthNo@1100529000 : Integer;
      YearNo@1100529001 : Integer;
    BEGIN
      //DP00617
      IF ("Max. Delay Indexation [Mth]" > 0) AND ("Indexation Date" <> 0D) THEN BEGIN
        MonthNo := DATE2DMY("Indexation Date", 2);
        YearNo := DATE2DMY("Indexation Date", 3);
        MonthNo := MonthNo + "Max. Delay Indexation [Mth]";
        IF MonthNo > 12 THEN BEGIN
          YearNo := YearNo + 1;
          MonthNo := MonthNo - 12;
        END;
        EXIT(DMY2DATE(1, MonthNo, YearNo) -1);
      END;
      EXIT(0D);
    END;

    PROCEDURE ExecuteManualIndexed@1100529004(RentalPackage@1100529000 : Record 11012941);
    VAR
      RentalRateLine@1100529001 : Record 11012942;
      RentalPackageLineRate@1100529002 : Record 11229856;
      RateFound@1100529004 : Boolean;
      DelayedIndex@1100529003 : Boolean;
    BEGIN
      //DP00617
      IF NOT ExecuteManualIndexedAllowed(RentalPackage) THEN
        ERROR(Text016, RentalRateLine.FIELDCAPTION("Index Type"), RentalRateLine."Index Type"::Manual);
      WITH RentalPackage DO BEGIN
        IF NOT CONFIRM(Text017, FALSE, FIELDCAPTION("Indexation Date")) THEN
          EXIT;
        TESTFIELD("Indexation Date");
        TESTFIELD("Indexation Frequency");
        IF "Invoice Status" = "Invoice Status"::"Temporary" THEN
          FIELDERROR("Invoice Status");

        RentalRateLine.SETRANGE("Project No.", "Project No.");
        RentalRateLine.SETRANGE("Rental Unit", "Rental Unit");
        RentalRateLine.SETRANGE("Starting Date Package", "Starting Date");
        RentalRateLine.SETFILTER("Index Group", '<>%1', '');
        RentalRateLine.SETRANGE("Index Type", RentalRateLine."Index Type"::Manual);
        IF RentalRateLine.FINDFIRST THEN
          ResetDelayedIndexPeriod(RentalPackage);
        IF RentalRateLine.FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF NOT LineTerminatedBeforeIndexDate(RentalPackage, RentalRateLine) THEN BEGIN
              RateFound := RentalRateLine.GetLineRateOnRefDate(RentalRateLine, "Indexation Date", RentalPackageLineRate);
              IF (NOT RateFound) OR (RentalPackageLineRate.Date <> "Indexation Date") THEN BEGIN
                ERROR(Text018, FIELDCAPTION("Indexation Date"), "Indexation Date",
                  RentalRateLine.FIELDCAPTION("Line No."), RentalRateLine."Line No.", RentalRateLine.Description);
              END;
              IF FillDelayedIndexPeriod(RentalPackage, RentalRateLine) THEN BEGIN
                RentalRateLine.MODIFY(FALSE);
                DelayedIndex := TRUE;
              END;
            END;
          UNTIL RentalRateLine.NEXT = 0;
        END;
        "Indexation Date" := CALCDATE("Indexation Frequency", "Indexation Date");  // Do not fill with Validate!
        IF DelayedIndex THEN
          "Invoice Delayed Indexation" := TRUE;
        MODIFY(FALSE);
      END;
    END;

    PROCEDURE ExecuteManualIndexedAllowed@1100529007(RentalPackage@1100529000 : Record 11012941) : Boolean;
    VAR
      RentalRateLine@1100529001 : Record 11012942;
    BEGIN
      //DP00617
      //Only allowed if only manual indexation!
      RentalRateLine.SETRANGE("Project No.", RentalPackage."Project No.");
      RentalRateLine.SETRANGE("Rental Unit", RentalPackage."Rental Unit");
      RentalRateLine.SETRANGE("Starting Date Package", RentalPackage."Starting Date");
      RentalRateLine.SETFILTER("Index Group", '<>%1', '');
      RentalRateLine.SETRANGE("Index Type", RentalRateLine."Index Type"::Manual);
      IF RentalRateLine.ISEMPTY THEN
        EXIT(FALSE);
      RentalRateLine.SETRANGE("Index Type", RentalRateLine."Index Type"::Index);
      IF NOT RentalRateLine.ISEMPTY THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE ResetDelayedIndexPeriod@1100529011(VAR RentalPackage@1100529000 : Record 11012941);
    VAR
      RentalRateLine@1100529001 : Record 11012942;
    BEGIN
      //DP00617
      RentalPackage."Invoice Delayed Indexation" := FALSE;
      RentalPackage.MODIFY;

      RentalRateLine.SETRANGE("Project No.", RentalPackage."Project No.");
      RentalRateLine.SETRANGE("Rental Unit", RentalPackage."Rental Unit");
      RentalRateLine.SETRANGE("Starting Date Package", RentalPackage."Starting Date");
      //
      RentalRateLine.SETFILTER("Start Delayed Index. Period", '<>%1', 0D);
      RentalRateLine.MODIFYALL("Start Delayed Index. Period", 0D, FALSE);
      RentalRateLine.SETRANGE("Start Delayed Index. Period");  //Reset filter
      //
      RentalRateLine.SETFILTER("End Delayed Index. Period", '<>%1', 0D);
      RentalRateLine.MODIFYALL("End Delayed Index. Period", 0D, FALSE);
    END;

    PROCEDURE FillDelayedIndexPeriod@1100529012(RentalPackage@1100529000 : Record 11012941;VAR RentalRateLine@1100529001 : Record 11012942) : Boolean;
    BEGIN
      IF (RentalPackage."Max. Delay Indexation [Mth]" > 0) AND (RentalRateLine."Invoiced Until" >= RentalPackage."Indexation Date") THEN BEGIN
        // Start must be Index.Date, this is reference date for the rates.
        // So not start date line if that is greater (that is done during invoice delayed indexation).
        RentalRateLine."Start Delayed Index. Period" := RentalPackage."Indexation Date";
        RentalRateLine."End Delayed Index. Period" := RentalRateLine."Invoiced Until";
        EXIT(TRUE)
      END;
      EXIT(FALSE)
    END;

    PROCEDURE LineTerminatedBeforeIndexDate@1100529010(RentalPackage@1100529000 : Record 11012941;RentalRateLine@1100529001 : Record 11012942) : Boolean;
    BEGIN
      //DP00617
      WITH RentalPackage DO BEGIN
        IF ((RentalRateLine."Ending Date Line" <> 0D) AND (RentalRateLine."Ending Date Line" < "Indexation Date") AND (RentalRateLine."Termination Reason" <> '')) OR
           ((RentalRateLine."Ending Date Line" = 0D) AND ("Ending Date" <> 0D) AND ("Ending Date" < "Indexation Date") AND ("Termination Reason" <> ''))
        THEN
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE EditDocuments@1100529008();
    VAR
      Contact@1100529000 : Record 5050;
      RentalUnit@1100529006 : Record 11012940;
      Proj@1100529004 : Record 11072003;
      DocumentTemplate@1100529005 : Record 11012401;
      RecRef@1100529002 : RecordRef;
      DocumentLinkRIDs@1100529001 : ARRAY [5] OF RecordID;
      DocumentMailing@1100529003 : Codeunit 11012278;
    BEGIN
      //DP00617
      TESTFIELD("Customer No.");
      IF NOT Contact.GetContactByCustomer("Customer No.", Contact, TRUE) THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DocumentLinkRIDs[1] := RecRef.RECORDID;
      IF Proj.GET("Project No.") THEN BEGIN
        RecRef.GETTABLE(Proj);
        DocumentLinkRIDs[2] := RecRef.RECORDID;
      END;
      IF RentalUnit.GET("Project No.", "Rental Unit") THEN BEGIN
        RecRef.GETTABLE(RentalUnit);
        DocumentLinkRIDs[3] := RecRef.RECORDID;
      END;

      DocumentMailing.EditDocuments(STRSUBSTNO('%1', DocumentTemplate.Type::"Rental Package"), DocumentLinkRIDs, '', Contact."No.", '', FALSE, '');
    END;

    BEGIN
    END.
  }
}

