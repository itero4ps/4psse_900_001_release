OBJECT Table 11020231 Project Budget Rate
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Project Budget Rate;
    LookupPageID=Page11020264;
  }
  FIELDS
  {
    { 1   ;   ;Rate Code           ;Code10        ;TableRelation="Budget Rate" WHERE (Project Filter=FIELD(Project No.));
                                                   CaptionML=ENU=Rate Code;
                                                   NotBlank=Yes }
    { 2   ;   ;Rate                ;Decimal       ;OnValidate=BEGIN
                                                                "Rate (FCY)" := ExchangeAmtLCYToFCY(Rate, FALSE, TRUE, FALSE);  //DP00883

                                                                IF Rate <> xRec.Rate THEN
                                                                  "Last Date Modified" := TODAY;
                                                              END;

                                                   CaptionML=ENU=Rate;
                                                   AutoFormatType=2 }
    { 5   ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified }
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job;
                                                   CaptionML=ENU=Project No.;
                                                   NotBlank=Yes }
    { 20  ;   ;Standard Rate       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Budget Rate".Rate WHERE (Code=FIELD(Rate Code)));
                                                   CaptionML=ENU=Standard Rate;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 30  ;   ;Starting Date       ;Date          ;CaptionML=ENU=Starting Date }
    { 40  ;   ;Ending Date         ;Date          ;CaptionML=ENU=Ending Date }
    { 100 ;   ;Rate (FCY)          ;Decimal       ;OnValidate=BEGIN
                                                                Rate := ExchangeAmtFCYToLCY("Rate (FCY)", FALSE, TRUE, FALSE);  //DP00883
                                                              END;

                                                   CaptionML=ENU=Rate (FCY);
                                                   Description=DP00883 }
    { 110 ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                //DP00883
                                                                IF NOT ProjRec.GET("Project No.") THEN ProjRec.INIT;
                                                                TESTFIELD("Currency Code", ProjRec."Currency Code");

                                                                VALIDATE(Rate);
                                                              END;

                                                   CaptionML=ENU=Currency Code;
                                                   Description=DP00883 }
  }
  KEYS
  {
    {    ;Project No.,Rate Code,Starting Date     ;Clustered=Yes }
    {    ;Project No.,Starting Date,Rate Code      }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ProjRec@1100525000 : Record 11072003;

    PROCEDURE GetCurrencyFactor@1100528601(IUseSalesExchange@1100528600 : Boolean;IUseReportCurrency@1100528602 : Boolean) : Decimal;
    VAR
      Estimate@1100528604 : Record 11012151;
      CurrencyExchangeRate@1100528601 : Record 330;
      CurrencyCode@1100528603 : Code[10];
    BEGIN
      //DP00883
      IF NOT ProjRec.GET("Project No.") THEN
        ProjRec.INIT;
      //IF IUseReportCurrency THEN
      //  CurrencyCode := ProjRec."Report Currency Code"
      //ELSE
        CurrencyCode := "Currency Code";
      //Type: 0=General, 1=Project, 2=Estimate
      EXIT(CurrencyExchangeRate.ExchangeRate(1, "Project No.", ProjRec."Reference Date (Currency)", CurrencyCode, IUseSalesExchange));
    END;

    PROCEDURE ExchangeAmtLCYToFCY@1100528602(IAmount@1100528601 : Decimal;IUseSalesExchange@1100528602 : Boolean;IUsePriceRounding@1100528605 : Boolean;IUseReportCurrency@1100528607 : Boolean) : Decimal;
    VAR
      Estimate@1100528608 : Record 11012151;
      CurrencyExchangeRate@1100528600 : Record 330;
      Currency@1100528604 : Record 4;
      Amount@1100528603 : Decimal;
      CurrencyCode@1100528606 : Code[10];
    BEGIN
      //DP00883
      IF "Currency Code" = '' THEN
        EXIT(IAmount);
      IF NOT ProjRec.GET("Project No.") THEN
        ProjRec.INIT;
      //IF IUseReportCurrency THEN
      //  CurrencyCode := ProjRec."Report Currency Code"
      //ELSE
        CurrencyCode := "Currency Code";
      Amount := CurrencyExchangeRate.ExchangeAmtLCYToFCY(
        1, "Project No.", ProjRec."Reference Date (Currency)", CurrencyCode, IAmount, GetCurrencyFactor(IUseSalesExchange, IUseReportCurrency), IUseSalesExchange);
      IF NOT Currency.GET(CurrencyCode) THEN
        Currency.InitRoundingPrecision;
      IF IUsePriceRounding THEN
        Amount := ROUND(Amount, Currency."Unit-Amount Rounding Precision")
      ELSE
        Amount := ROUND(Amount, Currency."Amount Rounding Precision");
      EXIT(Amount);
    END;

    PROCEDURE ExchangeAmtFCYToLCY@1100528600(IAmount@1100528601 : Decimal;IUseSalesExchange@1100528602 : Boolean;IUsePriceRounding@1100528605 : Boolean;IUseReportCurrency@1100528606 : Boolean) : Decimal;
    VAR
      Estimate@1100528608 : Record 11012151;
      CurrencyExchangeRate@1100528600 : Record 330;
      Currency@1100528604 : Record 4;
      Amount@1100528603 : Decimal;
      CurrencyCode@1100528607 : Code[10];
    BEGIN
      //DP00883
      IF "Currency Code" = '' THEN
        EXIT(IAmount);
      IF NOT ProjRec.GET("Project No.") THEN
        ProjRec.INIT;
      //IF IUseReportCurrency THEN
      //  CurrencyCode := ProjRec."Report Currency Code"
      //ELSE
        CurrencyCode := "Currency Code";
      Amount := CurrencyExchangeRate.ExchangeAmtFCYToLCY(
        1, "Project No.", ProjRec."Reference Date (Currency)", CurrencyCode, IAmount, GetCurrencyFactor(IUseSalesExchange, IUseReportCurrency), IUseSalesExchange);
      Currency.InitRoundingPrecision;
      IF IUsePriceRounding THEN
        Amount := ROUND(Amount, Currency."Unit-Amount Rounding Precision")
      ELSE
        Amount := ROUND(Amount, Currency."Amount Rounding Precision");
      EXIT(Amount);
    END;

    BEGIN
    END.
  }
}

