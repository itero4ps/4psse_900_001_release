OBJECT Table 11020251 Progress Phase
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               ProgSchemeRec.GET(Scheme);
               Apply := ProgSchemeRec.Apply;
             END;

    OnModify=BEGIN
               ProgSchemeRec.GET(Scheme);
               Apply := ProgSchemeRec.Apply;
               UpdateDocPhaseFromStandard;
             END;

    OnRename=BEGIN
               RenameDocPhaseFromStandard;
             END;

    CaptionML=ENU=Progress Phase;
    LookupPageID=Page11020299;
  }
  FIELDS
  {
    { 5   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Common,,Service Call,Service Order,Purchase Quote,Purchase Order;
                                                   OptionString=Common,,ServCall,ServOrder,PurchQuote,PurchOrder;
                                                   Editable=No }
    { 10  ;   ;Scheme              ;Code10        ;TableRelation="Progress Scheme".Code;
                                                   CaptionML=ENU=Scheme;
                                                   Editable=No }
    { 20  ;   ;Code                ;Code10        ;CaptionML=ENU=Code }
    { 30  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 40  ;   ;Employee No.        ;Code20        ;TableRelation=Employee.No.;
                                                   CaptionML=ENU=Employee No. }
    { 50  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                CheckDate;
                                                              END;

                                                   CaptionML=ENU=Starting Date }
    { 51  ;   ;Started             ;Boolean       ;OnValidate=BEGIN
                                                                IF (Type <> Type::Common) AND (Started = TRUE) THEN BEGIN
                                                                  IF "Employee No." = '' THEN
                                                                    IF UserSetup.GET(USERID) THEN
                                                                      "Employee No." := UserSetup."Employee No.";
                                                                  IF "Starting Date" = 0D THEN
                                                                    "Starting Date" := TODAY;
                                                                  IF "Starting Time" = 0T THEN
                                                                    "Starting Time" := TIME;
                                                                  IF "Reference Period" <> '' THEN
                                                                    CheckPeriodStart(Type, "Reference Period", "Document No.", TODAY, TIME);
                                                                END;

                                                                IF CurrFieldNo <> 0 THEN  //db, 06-09-06 (avoid sql-problem when changing status in maintable if called by CheckProgressScheme)
                                                                  CheckDocumentStatus(0);
                                                              END;

                                                   CaptionML=ENU=Started }
    { 55  ;   ;Starting Time       ;Time          ;CaptionML=ENU=Starting Time }
    { 60  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                CheckDate;
                                                              END;

                                                   CaptionML=ENU=Ending Date }
    { 61  ;   ;Finished            ;Boolean       ;OnValidate=BEGIN
                                                                IF (Type <> Type::Common) AND (Finished = TRUE) THEN BEGIN
                                                                  IF "Employee No." = '' THEN
                                                                    IF UserSetup.GET(USERID) THEN
                                                                      "Employee No." := UserSetup."Employee No.";
                                                                  IF "Ending Date" = 0D THEN
                                                                    "Ending Date" := TODAY;
                                                                  IF "Ending Time" = 0T THEN
                                                                    "Ending Time" := TIME;
                                                                  IF "Reference Period" <> '' THEN
                                                                    CheckPeriodEnd(Type, "Reference Period", "Document No.", TODAY, TIME);
                                                                END;

                                                                IF CurrFieldNo <> 0 THEN  //db, 06-09-06 (avoid sql-problem when changing status in maintable if called by CheckProgressScheme)
                                                                  CheckDocumentStatus(1);
                                                              END;

                                                   CaptionML=ENU=Finished }
    { 65  ;   ;Ending Time         ;Time          ;CaptionML=ENU=Ending Time }
    { 70  ;   ;Apply               ;Option        ;CaptionML=ENU=Apply;
                                                   OptionCaptionML=ENU=" ,,Service Call,Service Order,Purchase Quote,Purchase Order";
                                                   OptionString=Common,,ServCall,ServOrder,PurchQuote,PurchOrder;
                                                   Editable=No }
    { 100 ;   ;Document No.        ;Code20        ;TableRelation=IF (Type=CONST(ServCall)) "Service Call".No.
                                                                 ELSE IF (Type=CONST(ServOrder)) "Service Order".No.
                                                                 ELSE IF (Type=CONST(PurchQuote)) "Purchase Header".No. WHERE (Document Type=CONST(Quote))
                                                                 ELSE IF (Type=CONST(PurchOrder)) "Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   CaptionML=ENU=Document No.;
                                                   Editable=No }
    { 110 ;   ;Reference Period    ;Code10        ;TableRelation="Reference Period".Code WHERE (Type=CONST(Common),
                                                                                                Apply=FIELD(Apply));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Reference Point", 0);
                                                                CALCFIELDS("Description Reference Period");
                                                              END;

                                                   CaptionML=ENU=Reference Period }
    { 120 ;   ;Description Reference Period;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Reference Period".Description WHERE (Type=CONST(Common),
                                                                                                            Code=FIELD(Reference Period)));
                                                   CaptionML=ENU=Description Reference Period;
                                                   Editable=No }
    { 130 ;   ;Reference Point     ;Integer       ;TableRelation="Reference Point".No. WHERE (Apply=FIELD(Apply));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Reference Period", '');
                                                                CALCFIELDS("Description Reference Point");
                                                              END;

                                                   CaptionML=ENU=Reference Point }
    { 140 ;   ;Description Reference Point;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Reference Point".Description WHERE (No.=FIELD(Reference Point)));
                                                   CaptionML=ENU=Description Reference Point;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Type,Scheme,Code,Document No.           ;Clustered=Yes }
    {    ;Type,Document No.,Code                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      UserSetup@1100485001 : Record 91;
      PeriodRec@1100485000 : Record 11020272;
      ProgSchemeRec@1100485002 : Record 11020250;
      StatusChange@1100485003 : Boolean;

    PROCEDURE CheckDate@1100485000();
    VAR
      lvText000@1100485000 : TextConst 'ENU=must occur before %1';
    BEGIN
      IF ("Starting Date" <> 0D) AND ("Ending Date" <> 0D) THEN
        IF "Starting Date" > "Ending Date" THEN
          FIELDERROR("Starting Date",STRSUBSTNO(lvText000,FIELDCAPTION("Ending Date")));
    END;

    PROCEDURE CheckDocumentStatus@1100485001(lvAction@1100485003 : Integer);
    VAR
      ServCallRec@1100485004 : Record 11012822;
      ServOrderRec@1100485000 : Record 11012823;
      PurchOrderRec@1100485001 : Record 38;
      RefDateRec@1100485002 : Record 11020271;
    BEGIN
      IF StatusChange = TRUE THEN EXIT;  //db, 06-09-06 (sql-problem in codeunit 415)

      IF "Reference Period" <> '' THEN BEGIN
        PeriodRec.RESET;
        PeriodRec.SETRANGE(Type, PeriodRec.Type::Common);
        PeriodRec.SETRANGE(Code, "Reference Period");
        IF NOT PeriodRec.FINDFIRST THEN EXIT;

        IF lvAction = 0 THEN
          IF NOT RefDateRec.GET(PeriodRec."Reference Point Start") THEN EXIT;
        IF lvAction = 1 THEN
          IF NOT RefDateRec.GET(PeriodRec."Reference Point End") THEN EXIT;
      END ELSE BEGIN
        IF NOT RefDateRec.GET("Reference Point") THEN EXIT;
      END;

      IF Type = Type::ServCall THEN BEGIN
        IF RefDateRec."Triggered by Status ServCall" = RefDateRec."Triggered by Status ServCall"::" " THEN EXIT;
        IF ServCallRec.GET("Document No.") THEN BEGIN
          ServCallRec.VALIDATE(Status, RefDateRec."Triggered by Status ServCall" - 1);
          ServCallRec.MODIFY(TRUE);
        END;
      END;

      IF Type = Type::ServOrder THEN BEGIN
        IF RefDateRec."Triggered by Status ServOrder" = RefDateRec."Triggered by Status ServOrder"::" " THEN EXIT;
        IF ServOrderRec.GET("Document No.") THEN BEGIN
          ServOrderRec.VALIDATE(Status, RefDateRec."Triggered by Status ServOrder" - 1);
          ServOrderRec.MODIFY(TRUE);
        END;
      END;

      IF Type = Type::PurchQuote THEN BEGIN
        IF RefDateRec."Triggered by Status PurchQuote" = RefDateRec."Triggered by Status PurchQuote"::" " THEN EXIT;
        IF PurchOrderRec.GET(PurchOrderRec."Document Type"::Quote, "Document No.") THEN BEGIN
          PurchOrderRec.VALIDATE("Quote Status", RefDateRec."Triggered by Status PurchQuote" - 1);
          PurchOrderRec.MODIFY(TRUE);
        END;
      END;

      IF Type = Type::PurchOrder THEN BEGIN
        IF RefDateRec."Triggered by Status PurchOrder" = RefDateRec."Triggered by Status PurchOrder"::" " THEN EXIT;
        IF PurchOrderRec.GET(PurchOrderRec."Document Type"::Order, "Document No.") THEN BEGIN
          PurchOrderRec.VALIDATE(Status, RefDateRec."Triggered by Status PurchOrder" - 1);
          PurchOrderRec.MODIFY(TRUE);
        END;
      END;
    END;

    PROCEDURE GetProgressPhase@1100485002(lvAction@1100485000 : Integer;lvType@1100485002 : Integer;lvScheme@1100485004 : Code[20];lvDoc@1100485003 : Code[20]) ProgressPhase : Text[50];
    VAR
      ProgressRec@1100485001 : Record 11020251;
      ProgressRec2@1100485005 : Record 11020251;
      NextPhase@1100485006 : Code[20];
    BEGIN
      ProgressPhase := '';
      NextPhase := '';

      ProgressRec.RESET;
      ProgressRec.SETCURRENTKEY(Type, "Document No.", Code);  //db, 06-10-06
      ProgressRec.SETRANGE(Type, lvType);
      ProgressRec.SETRANGE(Scheme, lvScheme);
      ProgressRec.SETRANGE("Document No.", lvDoc);

      IF (lvAction = 0) OR (lvAction = 2) THEN BEGIN
        ProgressRec.SETRANGE(Finished, FALSE);
        IF ProgressRec.FIND('-') THEN BEGIN
          ProgressPhase := ProgressRec.Description;
          IF lvAction = 2 THEN BEGIN
            NextPhase := ProgressRec.Code;
            IF ProgressRec.NEXT <> 0 THEN BEGIN
              NextPhase := ProgressRec.Code;
              ProgressPhase := ProgressRec.Description;
            END;
          END;
        END;
      END;

      IF lvAction = 1 THEN BEGIN
        COMMIT;
        IF PAGE.RUNMODAL(PAGE::"Progress Phase", ProgressRec) = ACTION::LookupOK THEN BEGIN
          NextPhase := ProgressRec.Code;
          ProgressPhase := ProgressRec.Description;
        END;
      END;

      IF (lvAction = 1) OR (lvAction = 2) THEN BEGIN
        IF (lvType = ProgressRec.Type::PurchQuote) OR
           (lvType = ProgressRec.Type::PurchOrder) THEN
        BEGIN
          ProgressRec2.COPY(ProgressRec);
          ProgressRec2.SETFILTER(Code, '..%1', NextPhase);
          IF ProgressRec2.FIND('-') THEN BEGIN
            REPEAT
              IF ProgressRec2.Started = FALSE THEN BEGIN
                ProgressRec2.VALIDATE(Started, TRUE);
                IF ProgressRec2.Code = NextPhase THEN
                  ProgressRec2.CheckDocumentStatus(0);  //db, 21-09-06
              END;
              IF ProgressRec2.Finished = FALSE THEN BEGIN
                IF ProgressRec2.Code <> NextPhase THEN
                  ProgressRec2.VALIDATE(Finished, TRUE);
              END;
              ProgressRec2.MODIFY;
            UNTIL ProgressRec2.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE EditProgressScheme@1100485003(lvType@1100485002 : Integer;lvScheme@1100485001 : Code[20];lvDoc@1100485000 : Code[20]);
    VAR
      ProgressRec@1100485003 : Record 11020251;
      ProgressRec2@1100485004 : Record 11020251;
      lvText000@1100525000 : TextConst 'ENU=Progress Scheme present';
    BEGIN
      ProgressRec.RESET;
      ProgressRec.SETCURRENTKEY(Type, "Document No.", Code);  //db, 06-10-06
      ProgressRec.SETRANGE(Type, lvType);
      ProgressRec.SETRANGE("Document No.", lvDoc);
      IF ProgressRec.FIND('-') THEN
        ERROR(lvText000);

      ProgressRec.RESET;
      ProgressRec.SETCURRENTKEY(Type, Scheme, Code, "Document No.");  //db, 06-10-06
      ProgressRec.SETRANGE(Type, ProgressRec.Type::Common);
      ProgressRec.SETRANGE(Scheme, lvScheme);
      IF ProgressRec.FIND('-') THEN BEGIN
        REPEAT
          ProgressRec2.COPY(ProgressRec);
          ProgressRec2.Type := lvType;
          ProgressRec2."Document No." := lvDoc;
          IF ProgressRec2."Reference Period" <> '' THEN
            CopyRefPeriod(lvType, ProgressRec2."Reference Period", lvDoc);
          ProgressRec2.INSERT;
        UNTIL ProgressRec.NEXT = 0;
      END ELSE BEGIN
        CopyRefPeriod(lvType, '', lvDoc);
      END;
    END;

    PROCEDURE CheckProgressScheme@1100485004(lvType@1100485002 : Integer;lvScheme@1100485001 : Code[20];lvDoc@1100485000 : Code[20];lvStatus@1100485006 : Integer;lvDate@1100485008 : Date;lvTime@1100485009 : Time);
    VAR
      RefDateRec@1100485005 : Record 11020271;
      RefPeriodRec@1100485004 : Record 11020272;
      ProgressRec@1100485003 : Record 11020251;
      ProgressRec2@1100485010 : Record 11020251;
      TmpProgressRec@1100485007 : TEMPORARY Record 11020251;
    BEGIN
      StatusChange := TRUE;  //db, 06-09-06 (function called from maintable when status changed)

      IF lvScheme <> '' THEN BEGIN
        ProgressRec.RESET;
        ProgressRec.SETCURRENTKEY(Type, "Document No.", Code);  //db, 06-10-06
        ProgressRec.SETRANGE(Type, lvType);
        ProgressRec.SETRANGE(Scheme, lvScheme);
        ProgressRec.SETRANGE("Document No.", lvDoc);
        ProgressRec.SETFILTER("Reference Period", '<>%1', '');
        ProgressRec.SETFILTER("Reference Point", '%1', 0);
        IF ProgressRec.FIND('-') THEN BEGIN
          REPEAT
            RefPeriodRec.SETRANGE(Type, RefPeriodRec.Type::Common);
            RefPeriodRec.SETRANGE(Code, ProgressRec."Reference Period");
            IF RefPeriodRec.FINDSET THEN BEGIN
              REPEAT
                IF NOT RefDateRec.GET(RefPeriodRec."Reference Point Start") THEN RefDateRec.INIT;
                IF ((ProgressRec.Type = ProgressRec.Type::ServCall) AND
                    (RefDateRec."Triggered by Status ServCall" = lvStatus+1)) OR
                   ((ProgressRec.Type = ProgressRec.Type::ServOrder) AND
                    (RefDateRec."Triggered by Status ServOrder" = lvStatus+1)) OR
                   ((ProgressRec.Type = ProgressRec.Type::PurchOrder) AND
                    (RefDateRec."Triggered by Status PurchOrder" = lvStatus+1)) OR
                   ((ProgressRec.Type = ProgressRec.Type::PurchQuote) AND
                    (RefDateRec."Triggered by Status PurchQuote" = lvStatus+1)) THEN
                  ProgressRec.VALIDATE(Started, TRUE);

                IF NOT RefDateRec.GET(RefPeriodRec."Reference Point End") THEN RefDateRec.INIT;
                IF ((ProgressRec.Type = ProgressRec.Type::ServCall) AND
                    (RefDateRec."Triggered by Status ServCall" = lvStatus+1)) OR
                   ((ProgressRec.Type = ProgressRec.Type::ServOrder) AND
                    (RefDateRec."Triggered by Status ServOrder" = lvStatus+1)) OR
                   ((ProgressRec.Type = ProgressRec.Type::PurchOrder) AND
                    (RefDateRec."Triggered by Status PurchOrder" = lvStatus+1)) OR
                   ((ProgressRec.Type = ProgressRec.Type::PurchQuote) AND
                    (RefDateRec."Triggered by Status PurchQuote" = lvStatus+1)) THEN
                  ProgressRec.VALIDATE(Finished, TRUE);

                ProgressRec.MODIFY;
              UNTIL RefPeriodRec.NEXT = 0;
            END;
          UNTIL ProgressRec.NEXT = 0;
        END;

        ProgressRec.SETFILTER("Reference Period", '%1', '');
        ProgressRec.SETFILTER("Reference Point", '<>%1', 0);
        IF ProgressRec.FIND('-') THEN BEGIN
          REPEAT
            IF NOT RefDateRec.GET(ProgressRec."Reference Point") THEN RefDateRec.INIT;
            IF (( ProgressRec.Type = ProgressRec.Type::ServCall) AND
                (RefDateRec."Triggered by Status ServCall" = lvStatus+1)) OR
               (( ProgressRec.Type = ProgressRec.Type::ServOrder) AND
                (RefDateRec."Triggered by Status ServOrder" = lvStatus+1)) OR
               (( ProgressRec.Type = ProgressRec.Type::PurchOrder) AND
                (RefDateRec."Triggered by Status PurchOrder" = lvStatus+1)) OR
               (( ProgressRec.Type = ProgressRec.Type::PurchQuote) AND
                (RefDateRec."Triggered by Status PurchQuote" = lvStatus+1)) THEN
             BEGIN
               ProgressRec.VALIDATE(Started, TRUE);
               ProgressRec.MODIFY;
               //db.sn, 26-04-07
               TmpProgressRec := ProgressRec;
               TmpProgressRec.INSERT;
               IF (ProgressRec.Type = ProgressRec.Type::PurchOrder) OR
                  (ProgressRec.Type = ProgressRec.Type::PurchQuote) THEN BEGIN
                 ProgressRec2.COPY(ProgressRec);
                 ProgressRec2.SETFILTER(Code, '<%1', ProgressRec.Code);
                 ProgressRec2.SETRANGE(Started, TRUE);
                 ProgressRec2.SETRANGE(Finished, FALSE);
                 IF ProgressRec2.FIND('-') THEN BEGIN
                   REPEAT
                     IF NOT TmpProgressRec.GET(ProgressRec2.Type, ProgressRec2.Scheme,
                       ProgressRec2.Code, ProgressRec2."Document No.") THEN BEGIN
                       ProgressRec2.VALIDATE(Finished, TRUE);
                       ProgressRec2.MODIFY;
                     END;
                   UNTIL ProgressRec2.NEXT = 0;
                 END;
               END;
               //db.en, 26-04-07
             END;
          UNTIL ProgressRec.NEXT = 0;
          TmpProgressRec.DELETEALL;
        END;
      END ELSE BEGIN
        RefPeriodRec.SETCURRENTKEY(Type, "Document No.");
        RefPeriodRec.SETRANGE(Type, lvType);
        RefPeriodRec.SETRANGE("Document No.", lvDoc);
        IF RefPeriodRec.FINDSET THEN BEGIN
          REPEAT
            IF NOT RefDateRec.GET(RefPeriodRec."Reference Point Start") THEN RefDateRec.INIT;
            IF (( RefPeriodRec.Type =  RefPeriodRec.Type::ServCall) AND
                (RefDateRec."Triggered by Status ServCall" = lvStatus+1)) OR
               (( RefPeriodRec.Type =  RefPeriodRec.Type::ServOrder) AND
                (RefDateRec."Triggered by Status ServOrder" = lvStatus+1)) OR
               (( RefPeriodRec.Type =  RefPeriodRec.Type::PurchOrder) AND
                (RefDateRec."Triggered by Status PurchOrder" = lvStatus+1)) OR
               (( RefPeriodRec.Type =  RefPeriodRec.Type::PurchQuote) AND
                (RefDateRec."Triggered by Status PurchQuote" = lvStatus+1)) THEN
              CheckPeriodStart(RefPeriodRec.Type, RefPeriodRec.Code, RefPeriodRec."Document No.", lvDate, lvTime);

            IF NOT RefDateRec.GET(RefPeriodRec."Reference Point End") THEN RefDateRec.INIT;
            IF (( RefPeriodRec.Type =  RefPeriodRec.Type::ServCall) AND
                (RefDateRec."Triggered by Status ServCall" = lvStatus+1)) OR
               (( RefPeriodRec.Type =  RefPeriodRec.Type::ServOrder) AND
                (RefDateRec."Triggered by Status ServOrder" = lvStatus+1)) OR
               (( RefPeriodRec.Type =  RefPeriodRec.Type::PurchOrder) AND
                (RefDateRec."Triggered by Status PurchOrder" = lvStatus+1)) OR
               (( RefPeriodRec.Type =  RefPeriodRec.Type::PurchQuote) AND
                (RefDateRec."Triggered by Status PurchQuote" = lvStatus+1)) THEN
              CheckPeriodEnd(RefPeriodRec.Type, RefPeriodRec.Code, RefPeriodRec."Document No.", lvDate, lvTime);

          UNTIL RefPeriodRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CheckPeriodStart@1100485005(lvType@1100485002 : Integer;lvPeriod@1100485001 : Code[20];lvDoc@1100485000 : Code[20];lvDate@1100485004 : Date;lvTime@1100485003 : Time);
    BEGIN
      PeriodRec.RESET;
      PeriodRec.SETRANGE(Type, lvType);
      PeriodRec.SETRANGE(Code, lvPeriod);
      PeriodRec.SETRANGE("Document No.", lvDoc);
      PeriodRec.SETRANGE("Starting Date", 0D);
      IF PeriodRec.FINDFIRST THEN BEGIN
        PeriodRec."Starting Date" := lvDate;
        PeriodRec."Starting Time" := lvTime;
        PeriodRec.MODIFY(TRUE);
      END ELSE BEGIN
        PeriodRec.SETRANGE("Starting Date");
        IF NOT PeriodRec.FINDFIRST THEN BEGIN
          PeriodRec.INIT;
          PeriodRec.Type := lvType;
          PeriodRec.VALIDATE(Code, lvPeriod);
          PeriodRec."Document No." := lvDoc;
          PeriodRec."Starting Date" := lvDate;
          PeriodRec."Starting Time" := lvTime;
          PeriodRec.INSERT(TRUE);
        END;
      END;
    END;

    PROCEDURE CheckPeriodEnd@1100485006(lvType@1100485002 : Integer;lvPeriod@1100485001 : Code[20];lvDoc@1100485000 : Code[20];lvDate@1100485004 : Date;lvTime@1100485003 : Time);
    BEGIN
      PeriodRec.RESET;
      PeriodRec.SETRANGE(Type, lvType);
      PeriodRec.SETRANGE(Code, lvPeriod);
      PeriodRec.SETRANGE("Document No.", lvDoc);
      PeriodRec.SETRANGE("Ending Date", 0D);
      IF PeriodRec.FINDLAST THEN BEGIN
        PeriodRec."Ending Date" := lvDate;
        PeriodRec."Ending Time" := lvTime;
        PeriodRec.MODIFY(TRUE);
      END;
    END;

    PROCEDURE CopyRefPeriod@1100485007(lvType@1100485003 : Integer;lvPeriod@1100485004 : Code[20];lvDoc@1100485002 : Code[20]);
    VAR
      RefPeriodRec@1100485000 : Record 11020272;
      RefPeriodRec2@1100485001 : Record 11020272;
    BEGIN
      RefPeriodRec.SETCURRENTKEY(Type, Code);
      RefPeriodRec.SETRANGE(Type, RefPeriodRec.Type::Common);
      IF lvPeriod <> '' THEN
        RefPeriodRec.SETRANGE(Code, lvPeriod);
      IF RefPeriodRec.FINDSET THEN BEGIN
        REPEAT
          RefPeriodRec2 := RefPeriodRec;
          RefPeriodRec2.Type := lvType;
          RefPeriodRec2."Document No." := lvDoc;
          IF lvType = RefPeriodRec2.Apply THEN
            IF RefPeriodRec2.INSERT THEN;
        UNTIL RefPeriodRec.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateDocPhaseFromStandard@1100485008();
    VAR
      ProgPhaseRec@1100485000 : Record 11020251;
    BEGIN
      IF Type <> Type::Common THEN EXIT;

      ProgPhaseRec.SETFILTER(Type, '<>%1', Type);
      ProgPhaseRec.SETRANGE(Code, Code);
      ProgPhaseRec.SETFILTER("Document No.", '<>%1', '');
      IF ProgPhaseRec.FIND('-') THEN BEGIN
        REPEAT
          ProgPhaseRec.Description := Description;
          ProgPhaseRec.Apply := Apply;
          ProgPhaseRec."Reference Period" := "Reference Period";
          ProgPhaseRec."Reference Point" := "Reference Point";
          ProgPhaseRec.MODIFY;
        UNTIL ProgPhaseRec.NEXT = 0;
      END;
    END;

    PROCEDURE RenameDocPhaseFromStandard@1100485010();
    VAR
      ProgPhaseRec@1100485000 : Record 11020251;
      ProgPhaseRec2@1100485001 : Record 11020251;
    BEGIN
      IF Type <> Type::Common THEN EXIT;

      ProgPhaseRec.SETFILTER(Type, '<>%1', Type);
      ProgPhaseRec.SETRANGE(Code, xRec.Code);
      ProgPhaseRec.SETFILTER("Document No.", '<>%1', '');
      IF ProgPhaseRec.FIND('-') THEN BEGIN
        REPEAT
          ProgPhaseRec2.COPY(ProgPhaseRec);
          ProgPhaseRec2.DELETE;
          ProgPhaseRec2.Code := Code;
          ProgPhaseRec2.INSERT;
        UNTIL ProgPhaseRec.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

