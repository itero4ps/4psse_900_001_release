OBJECT Table 11020272 Reference Period
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               LicenceCu.CheckLicenceDeadline;
               UpdateDatetime;
               CheckRecordType;
               GetNorm(Rec);
               DetermineResult;
             END;

    OnModify=BEGIN
               LicenceCu.CheckLicenceDeadline;
               UpdateDatetime;
               UpdateDocRefFromStandard;
               GetNorm(Rec);
               DetermineResult;
             END;

    OnRename=BEGIN
               CheckRecordType;
               RenameDocRefFromStandard;
             END;

    CaptionML=ENU=Reference Period;
    LookupPageID=Page11020322;
  }
  FIELDS
  {
    { 10  ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Common,,Service Call,Service Order,Purchase Quote,Purchase Order;
                                                   OptionString=Common,,ServCall,ServOrder,PurchQuote,PurchOrder }
    { 20  ;   ;Code                ;Code10        ;OnValidate=VAR
                                                                RefPeriodRec@1100485000 : Record 11020272;
                                                              BEGIN
                                                                IF Type <> Type::Common THEN BEGIN
                                                                  RefPeriodRec.GET(Type::Common, '', Code);
                                                                  Description := RefPeriodRec.Description;
                                                                  Apply := RefPeriodRec.Apply;
                                                                  VALIDATE("Reference Point Start", RefPeriodRec."Reference Point Start");
                                                                  VALIDATE("Reference Point End", RefPeriodRec."Reference Point End");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Code }
    { 30  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 40  ;   ;Reference Point Start;Integer      ;TableRelation="Reference Point".No. WHERE (Apply=FIELD(Apply));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Description Ref. Point Start");
                                                              END;

                                                   CaptionML=ENU=Reference Point Start }
    { 45  ;   ;Reference Point End ;Integer       ;TableRelation="Reference Point".No. WHERE (Apply=FIELD(Apply));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Description Ref. Point End");
                                                              END;

                                                   CaptionML=ENU=Reference Point End }
    { 50  ;   ;Description Ref. Point Start;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Reference Point".Description WHERE (No.=FIELD(Reference Point Start)));
                                                   CaptionML=ENU=Description Reference Point Start;
                                                   Editable=No }
    { 55  ;   ;Description Ref. Point End;Text50  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Reference Point".Description WHERE (No.=FIELD(Reference Point End)));
                                                   CaptionML=ENU=Description Reference Point End;
                                                   Editable=No }
    { 60  ;   ;Apply               ;Option        ;CaptionML=ENU=Apply;
                                                   OptionCaptionML=ENU=" ,,Service Call,Service Order,Purchase Quote,Purchase Order";
                                                   OptionString=Common,,ServCall,ServOrder,PurchQuote,PurchOrder }
    { 100 ;   ;Document No.        ;Code20        ;TableRelation=IF (Type=CONST(ServCall)) "Service Call".No.
                                                                 ELSE IF (Type=CONST(ServOrder)) "Service Order".No.
                                                                 ELSE IF (Type=CONST(PurchQuote)) "Purchase Header".No. WHERE (Document Type=CONST(Quote))
                                                                 ELSE IF (Type=CONST(PurchOrder)) "Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   CaptionML=ENU=Document No. }
    { 110 ;   ;Norm                ;Decimal       ;CaptionML=ENU=Norm (Hours);
                                                   DecimalPlaces=0:5 }
    { 115 ;   ;Type Hours          ;Option        ;CaptionML=ENU=Type Hours;
                                                   OptionCaptionML=ENU=Clock Time,Office Time;
                                                   OptionString=ClockTime,OfficeTime }
    { 120 ;   ;Starting Date       ;Date          ;CaptionML=ENU=Starting Date }
    { 130 ;   ;Ending Date         ;Date          ;CaptionML=ENU=Ending Date }
    { 140 ;   ;Starting Time       ;Time          ;CaptionML=ENU=Starting Time }
    { 150 ;   ;Ending Time         ;Time          ;CaptionML=ENU=Ending Time }
    { 160 ;   ;Result              ;Decimal       ;CaptionML=ENU=Result;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 175 ;   ;Starting Date-Time  ;DateTime      ;OnValidate=BEGIN
                                                                "Starting Date" := DT2DATE("Starting Date-Time");
                                                                "Starting Time" := DT2TIME("Starting Date-Time");
                                                              END;

                                                   CaptionML=ENU=Starting Date-Time;
                                                   Description=W014185 }
    { 185 ;   ;Ending Date-Time    ;DateTime      ;OnValidate=BEGIN
                                                                "Ending Date" := DT2DATE("Ending Date-Time");
                                                                "Ending Time" := DT2TIME("Ending Date-Time");
                                                              END;

                                                   CaptionML=ENU=Ending Date-Time;
                                                   Description=W014185 }
    { 190 ;   ;Source              ;Option        ;CaptionML=ENU=Source;
                                                   OptionCaptionML=ENU=Standard,Service Contract,Customer;
                                                   OptionString=Standard,Service Contract,Customer;
                                                   Editable=No }
    { 300 ;   ;Publish on Service Portal;Boolean  ;CaptionML=ENU=Publish on Service Portal }
  }
  KEYS
  {
    {    ;Type,Document No.,Code                  ;Clustered=Yes }
    {    ;Type,Code,Document No.                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ClockTime@1100485000 : Boolean;
      TmpRefPeriodRec@1100485001 : TEMPORARY Record 11020272;
      DocNo@1100485002 : Code[20];
      DatetimeMgt@1100485003 : Codeunit 11020218;
      LicenceCu@1100485004 : Codeunit 11012137;
      DeadlineDatetimeDec@1100485005 : Decimal;
      gCompany@1100529000 : Text[30];

    PROCEDURE CheckRecordType@1100485000();
    BEGIN
      IF Type = Type::Common THEN
        TESTFIELD("Document No.", '')
      ELSE
        TESTFIELD("Document No.");
    END;

    PROCEDURE DetermineResult@11();
    VAR
      lvResult@1100525000 : Decimal;
    BEGIN
      //db, 21-10-08: M13046
      IF ("Starting Date" = 0D) OR ("Ending Date" = 0D) OR
         ("Starting Time" = 0T) OR ("Ending Time" = 0T) THEN BEGIN
        Result := 0;
        EXIT;
      END;

      TmpRefPeriodRec.DELETEALL;
      TmpRefPeriodRec := Rec;
      IF ClockTime THEN BEGIN
        DocNo:= PADSTR('', MAXSTRLEN("Document No."), '0');
        TmpRefPeriodRec."Document No." := DocNo;
        TmpRefPeriodRec.INSERT;
      END ELSE BEGIN
        CheckContractTimeTable(TRUE,
          TmpRefPeriodRec, TmpRefPeriodRec."Starting Date", TmpRefPeriodRec."Starting Time", TmpRefPeriodRec.Norm);
      END;

      IF TmpRefPeriodRec.FIND('-') THEN BEGIN
        REPEAT
          WITH TmpRefPeriodRec DO BEGIN
            IF "Ending Date-Time" > "Starting Date-Time" THEN
              lvResult := lvResult + ("Ending Date-Time" - "Starting Date-Time")/(3.6 *1000000);
          END;
        UNTIL TmpRefPeriodRec.NEXT = 0;
      END;

      Result := ROUND(lvResult);
    END;

    PROCEDURE SetOtherCompanyForCheckRefPeriod@1100529000(Company@1100529000 : Text[30]);
    BEGIN
      IF Company <> COMPANYNAME THEN
        gCompany := Company
      ELSE
        gCompany := '';
    END;

    PROCEDURE CheckRefPeriod@1100485003(lvAction@1100485007 : Integer;lvType@1100485009 : Integer;lvDocument@1100485008 : Code[20];lvRefPeriod@1100485000 : Code[20];lvRefMargin@1100485004 : Decimal) : Text[250];
    VAR
      RefPeriodRec@1100485001 : Record 11020272;
      lvNorm@1100485003 : Decimal;
      lvStartDate@1100485005 : Date;
      lvStartTime@1100485006 : Time;
      HelpDec@1210190000 : Decimal;
      StartDateTime@1210190004 : Decimal;
    BEGIN
      IF lvAction = 0 THEN BEGIN
        lvStartDate := TODAY;
        lvStartTime := TIME;
        lvNorm := lvRefMargin;
        IF lvNorm = 0 THEN EXIT('');
      END ELSE BEGIN
        IF gCompany <> '' THEN
          RefPeriodRec.CHANGECOMPANY(gCompany);
        RefPeriodRec.RESET;
        RefPeriodRec.SETRANGE(Type, lvType);
        RefPeriodRec.SETRANGE(Code, lvRefPeriod);
        RefPeriodRec.SETRANGE("Document No.", lvDocument);
        IF NOT RefPeriodRec.FINDFIRST THEN
          EXIT('');

        lvStartDate := RefPeriodRec."Starting Date";
        lvStartTime := RefPeriodRec."Starting Time";

        IF lvAction = 1 THEN BEGIN
          GetNorm(RefPeriodRec);
          lvNorm := RefPeriodRec.Norm;
          IF lvNorm = 0 THEN EXIT('');
          IF NOT ClockTime THEN
            CheckContractTimeTable(FALSE, RefPeriodRec, lvStartDate, lvStartTime, lvNorm);
        END;

        IF lvAction = 3 THEN BEGIN
          lvStartDate := RefPeriodRec."Ending Date";
          lvStartTime := RefPeriodRec."Ending Time";
        END;
      END;

      IF (lvStartDate = 0D) OR (lvStartTime = 0T) THEN EXIT('');
      StartDateTime := DatetimeMgt.Datetime(lvStartDate, lvStartTime);
      HelpDec := StartDateTime + (lvNorm * 3.6);
      DeadlineDatetimeDec := HelpDec;  //* Fill for function 'GetDeadlineDateAndTime'

      EXIT(DatetimeMgt.OLDDatetime2Text(HelpDec) );
    END;

    PROCEDURE GetDeadlineDateAndTime@1100485006(IAction@1100485009 : Integer;IType@1100485008 : Integer;IDocument@1100485007 : Code[20];IRefPeriod@1100485006 : Code[20];IRefMargin@1100485005 : Decimal;VAR ODeadLineDate@1100485001 : Date;VAR ODeadLineTime@1100485000 : Time);
    BEGIN
      ODeadLineDate := 0D;
      ODeadLineTime := 0T;
      IF CheckRefPeriod(IAction, IType, IDocument, IRefPeriod, IRefMargin) <> '' THEN BEGIN
        ODeadLineDate := DatetimeMgt.Datetime2Date(DeadlineDatetimeDec);
        ODeadLineTime := DatetimeMgt.Datetime2Time(DeadlineDatetimeDec);
      END;
    END;

    PROCEDURE UpdateDocRefFromStandard@1100485008();
    VAR
      RefPeriodRec@1100485001 : Record 11020272;
    BEGIN
      IF Type <> Type::Common THEN EXIT;

      RefPeriodRec.RESET;
      RefPeriodRec.SETFILTER(Type, '<>%1', Type);
      RefPeriodRec.SETRANGE(Code, Code);
      RefPeriodRec.SETFILTER("Document No.", '<>%1', '');
      IF NOT RefPeriodRec.ISEMPTY THEN BEGIN
        IF RefPeriodRec.FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            RefPeriodRec.Description := Description;
            RefPeriodRec.Apply := Apply;
            RefPeriodRec."Reference Point Start" := "Reference Point Start";
            RefPeriodRec."Reference Point End" := "Reference Point End";
            RefPeriodRec.MODIFY;
          UNTIL RefPeriodRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE RenameDocRefFromStandard@1100485010();
    VAR
      RefPeriodRec@1100485002 : Record 11020272;
      RefPeriodRec2@1100485003 : Record 11020272;
    BEGIN
      IF Type <> Type::Common THEN EXIT;

      RefPeriodRec.RESET;
      RefPeriodRec.SETFILTER(Type, '<>%1', Type);
      RefPeriodRec.SETRANGE(Code, xRec.Code);
      RefPeriodRec.SETFILTER("Document No.", '<>%1', '');
      IF NOT RefPeriodRec.ISEMPTY THEN BEGIN
        IF RefPeriodRec.FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            RefPeriodRec2.COPY(RefPeriodRec);
            RefPeriodRec2.DELETE;
            RefPeriodRec2.Code := Code;
            RefPeriodRec2.INSERT;
          UNTIL RefPeriodRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE UpdateNorm@1100485001(lvType@1100485002 : Integer;lvDocument@1100485000 : Code[20]);
    VAR
      RefPeriodRec@1100485001 : Record 11020272;
      ServOrderRec@1100485003 : Record 11012823;
      ServCallRec@1100485004 : Record 11012822;
    BEGIN
      RefPeriodRec.RESET;
      RefPeriodRec.SETCURRENTKEY(Type, "Document No.");
      RefPeriodRec.SETRANGE(Type, lvType);
      RefPeriodRec.SETRANGE("Document No.", lvDocument);
      IF RefPeriodRec.FIND('-') THEN BEGIN
        REPEAT
          GetNorm(RefPeriodRec);
          RefPeriodRec.MODIFY;
        UNTIL RefPeriodRec.NEXT = 0;
        IF RefPeriodRec.Type = RefPeriodRec.Type::ServCall THEN BEGIN
          ServCallRec.GET(lvDocument);
          ServCallRec.MODIFY(TRUE);  //UpdateNextDeadline
        END;
        IF RefPeriodRec.Type = RefPeriodRec.Type::ServOrder THEN BEGIN
          ServOrderRec.GET(lvDocument);
          ServOrderRec.MODIFY(TRUE);  //UpdateNextDeadline
        END;
      END;
    END;

    PROCEDURE GetNorm@1100485002(VAR RefPeriodRec@1100485007 : Record 11020272);
    VAR
      RefNormRec@1100485004 : Record 11012856;
      RefNormRec2@1100485009 : Record 11012856;
      ServOrderRec@1100485002 : Record 11012823;
      ServCallRec@1100485001 : Record 11012822;
      ServObjectRec@1100525003 : Record 11071724;
      lvServContract@1100485000 : Code[20];
      lvServLoc@1100485008 : Code[20];
      lvObjectNo@1100525002 : Code[20];
      lvCustomerNo@1100409000 : Code[20];
      lvDiscipline@1100485005 : Code[20];
      lvTradeSpec@1210190000 : Code[20];
      lvPriority@1100485006 : Code[20];
      MissNorm@1100485003 : Boolean;
    BEGIN
      IF gCompany <> '' THEN BEGIN
        ServOrderRec.CHANGECOMPANY(gCompany);
        ServObjectRec.CHANGECOMPANY(gCompany);
        ServCallRec.CHANGECOMPANY(gCompany);
        RefNormRec.CHANGECOMPANY(gCompany);
        RefNormRec2.CHANGECOMPANY(gCompany);
      END;
      WITH RefPeriodRec DO BEGIN
        IF Type = Type::ServOrder THEN BEGIN
          IF ServOrderRec.GET("Document No.") THEN BEGIN
            lvServContract := ServOrderRec."Service Contract No.";
            lvServLoc := ServOrderRec."Service Location No.";
            //db.sn, 30-05-13: C001442
            ServObjectRec.SETRANGE("Service Order No.", ServOrderRec."No.");
            IF ServObjectRec.FINDFIRST THEN
              lvObjectNo := ServObjectRec."Object No.";
            //db.en, 30-05-13: C001442
            lvCustomerNo := ServOrderRec."Customer No.";
            lvDiscipline := ServOrderRec.Discipline;
            lvTradeSpec := ServOrderRec."Trade Speciality";
            lvPriority := ServOrderRec.Priority;
          END;
        END;
        IF Type = Type::ServCall THEN BEGIN
          IF ServCallRec.GET("Document No.") THEN BEGIN
            lvServContract := ServCallRec."Service Contract No.";
            lvServLoc := ServCallRec."Service Location No.";
            //db.sn, 30-05-13: C001442
            lvObjectNo := ServCallRec."Object No.";
            //db.en, 30-05-13: C001442
            lvCustomerNo := ServCallRec."Customer No.";
            lvDiscipline := ServCallRec.Discipline;
            lvTradeSpec := ServCallRec."Trade Speciality";
            lvPriority := ServCallRec.Priority;
          END;
        END;

        IF lvServContract <> '' THEN
          RefNormRec.SETRANGE("Service Contract No.", lvServContract)
        ELSE BEGIN
          RefNormRec.SETFILTER("Service Contract No.", '%1', '');
          IF lvCustomerNo <> '' THEN
            RefNormRec.SETRANGE("Customer No.", lvCustomerNo)
          ELSE
            RefNormRec.SETFILTER("Customer No.", '%1', '');
        END;
        IF lvServLoc <> '' THEN
          RefNormRec.SETRANGE("Service Location No.", lvServLoc)
        ELSE
          RefNormRec.SETFILTER("Service Location No.", '%1', '');
        //db.sn, 30-05-13: C001442
        IF lvObjectNo <> '' THEN
          RefNormRec.SETRANGE("Object No.", lvObjectNo)
        ELSE
          RefNormRec.SETFILTER("Object No.", '%1', '');
        //db.en, 30-05-13: C001442
        IF lvDiscipline <> '' THEN
          RefNormRec.SETRANGE(Discipline, lvDiscipline)
        ELSE
          RefNormRec.SETFILTER(Discipline, '%1', '');
        IF lvTradeSpec <> '' THEN  //db, 04-07-11
          RefNormRec.SETRANGE("Trade Speciality", lvTradeSpec)
        ELSE
          RefNormRec.SETFILTER("Trade Speciality", '%1', '');
        IF lvPriority <> '' THEN
          RefNormRec.SETRANGE(Priority, lvPriority)
        ELSE
          RefNormRec.SETFILTER(Priority, '%1', '');
        RefNormRec.SETRANGE("Reference Period", Code);
        IF NOT RefNormRec.FIND('-') THEN BEGIN
          MissNorm := TRUE;
          //C026191.sn
          IF (lvObjectNo <> '') AND (MissNorm = TRUE) THEN BEGIN
            RefNormRec2.COPY(RefNormRec);
            RefNormRec2.SETRANGE(Discipline);
            RefNormRec2.SETRANGE("Trade Speciality");
            IF RefNormRec2.FIND('-') THEN MissNorm := FALSE;
            RefNormRec.COPY(RefNormRec2);
          END;
          //C026191.en
          IF (lvServLoc <> '') AND (MissNorm = TRUE) THEN BEGIN
            RefNormRec2.COPY(RefNormRec);
            RefNormRec2.SETFILTER("Service Location No.", '%1', '');
            IF RefNormRec2.FIND('-') THEN MissNorm := FALSE;
            RefNormRec.COPY(RefNormRec2);
            //db.sn, 30-05-13: C001442
            IF (lvObjectNo <> '') AND (MissNorm = TRUE) THEN BEGIN
              RefNormRec2.COPY(RefNormRec);
              RefNormRec2.SETFILTER("Object No.", '%1', '');
              RefNormRec2.SETRANGE("Service Location No.", lvServLoc);
              IF RefNormRec2.FIND('-') THEN MissNorm := FALSE;
              RefNormRec.COPY(RefNormRec2);
            END;
            //db.en, 30-05-13: C001442
            IF (MissNorm = TRUE) THEN BEGIN
              RefNormRec2.COPY(RefNormRec);
              RefNormRec2.SETFILTER("Service Location No.", '%1', '');
              IF RefNormRec2.FIND('-') THEN MissNorm := FALSE;
              RefNormRec.COPY(RefNormRec2);
            END;
          END;
          IF (lvTradeSpec <> '') AND (MissNorm = TRUE) THEN BEGIN
            RefNormRec2.COPY(RefNormRec);
            RefNormRec2.SETFILTER("Trade Speciality", '%1', '');
            IF RefNormRec2.FIND('-') THEN MissNorm := FALSE;
            RefNormRec.COPY(RefNormRec2);
          END;
          IF (lvDiscipline <> '') AND (MissNorm = TRUE) THEN BEGIN
            RefNormRec2.COPY(RefNormRec);
            RefNormRec2.SETFILTER(Discipline, '%1', '');
            IF RefNormRec2.FIND('-') THEN MissNorm := FALSE;
            RefNormRec.COPY(RefNormRec2);
          END;
          IF (lvPriority <> '') AND (MissNorm = TRUE) THEN BEGIN
            RefNormRec2.COPY(RefNormRec);
            RefNormRec2.SETFILTER(Priority, '%1', '');
            IF RefNormRec2.FIND('-') THEN MissNorm := FALSE;
            RefNormRec.COPY(RefNormRec2);
          END;
          //db.sn, 22-12-10: M24525
          IF (RefNormRec2."Service Location No." = '') AND
             (RefNormRec2.Discipline = '') AND
             (RefNormRec2."Trade Speciality" = '') AND
             (RefNormRec2.Priority = '') THEN
          BEGIN
            //if norm found on level contract, search on more detailed level without check on priority
            IF (lvServLoc <> '') THEN BEGIN
              RefNormRec2.SETRANGE("Service Location No.", lvServLoc);
              IF RefNormRec2.FIND('-') THEN BEGIN
                MissNorm := FALSE;
                RefNormRec.COPY(RefNormRec2);
              END ELSE BEGIN
                RefNormRec2.SETRANGE("Service Location No.");
              END;
            END;
            IF (lvDiscipline+lvTradeSpec <> '') THEN BEGIN
              IF lvDiscipline <> '' THEN
                RefNormRec2.SETRANGE(Discipline, lvDiscipline);
              IF lvTradeSpec <> '' THEN
                RefNormRec2.SETFILTER("Trade Speciality", lvTradeSpec);
              IF RefNormRec2.FIND('-') THEN BEGIN
                MissNorm := FALSE;
                RefNormRec.COPY(RefNormRec2);
              END ELSE BEGIN
                RefNormRec2.SETRANGE(Discipline);
              END;
            END;
          END;
          //db.en, 22-12-10: M24525
          IF MissNorm = TRUE THEN
            RefNormRec.INIT;
        END;

        IF Type <> Type::Common THEN BEGIN  //db, 05-05-08: M11844
          Norm := RefNormRec.Norm;
          "Type Hours" := RefNormRec."Type Hours";  //db, 25-02-11: M17637
          ClockTime := (RefNormRec."Type Hours" = RefNormRec."Type Hours"::ClockTime);
          //mg.sn, 19-03-12: M33958
          IF NOT MissNorm THEN BEGIN
            IF RefNormRec."Service Contract No." <> '' THEN
              Source := Source::"Service Contract";
            IF RefNormRec."Customer No." <> '' THEN
              Source := Source::Customer;
          END;
          //mg.en, 19-03-12: M33958
        END;
      END;
    END;

    PROCEDURE CheckContractTimeTable@1100485004(TmpBln@1100485016 : Boolean;VAR RefPeriodRec@1100485007 : Record 11020272;VAR gvStartDate@1100485005 : Date;VAR gvStartTime@1100485006 : Time;VAR gvNorm@1100485010 : Decimal);
    VAR
      CompanyInformation@1100528600 : Record 79;
      ServOrderRec@1100485002 : Record 11012823;
      ServCallRec@1100485001 : Record 11012822;
      TerritoryRec@1100485022 : Record 286;
      DimValRec@1100485023 : Record 349;
      BaseCalendar@1100528601 : Record 11072014;
      DimMgt@1100485024 : Codeunit 408;
      lvServContract@1100485000 : Code[20];
      lvStartDate@1100485013 : Date;
      lvStartTime@1100485012 : Time;
      lvTimeFrom@1100485014 : Time;
      lvTimeUntil@1100485015 : Time;
      lvNorm@1100485009 : Decimal;
      lvGap@1100485011 : Decimal;
      lvDay@1100485008 : Integer;
      BaseCalendarCode@1100485018 : Code[20];
      lvTerritory@1100485020 : Code[20];
      lvDepartment@1100485021 : Code[20];
    BEGIN
      lvStartDate := gvStartDate;
      lvStartTime := gvStartTime;
      lvNorm := gvNorm;

      IF lvStartDate = 0D THEN EXIT;
      IF lvStartTime = 0T THEN EXIT;

      WITH RefPeriodRec DO BEGIN
        IF Type = Type::ServOrder THEN BEGIN
          IF ServOrderRec.GET("Document No.") THEN BEGIN
            lvServContract := ServOrderRec."Service Contract No.";
            lvTerritory := ServOrderRec."Territory Code";
            lvDepartment := ServOrderRec."Global Dimension 1 Code";
          END;
        END;
        IF Type = Type::ServCall THEN BEGIN
          IF ServCallRec.GET("Document No.") THEN BEGIN
            lvServContract := ServCallRec."Service Contract No.";
            lvTerritory := ServCallRec."Territory Code";
            lvDepartment := ServCallRec."Global Dimension 1 Code";
          END;
        END;

        CompanyInformation.GET;
        BaseCalendarCode := CompanyInformation."Base Calendar Code";
        DimMgt.GetDimValueRec(1, lvDepartment, DimValRec, FALSE,'');
        IF DimValRec."Base Calendar Code" <> '' THEN
          BaseCalendarCode := DimValRec."Base Calendar Code";
        IF TerritoryRec.GET(lvTerritory) THEN
          IF TerritoryRec."Base Calendar Code" <> '' THEN
            BaseCalendarCode := TerritoryRec."Base Calendar Code";

        IF NOT BaseCalendar.GET(BaseCalendarCode) THEN EXIT;

        REPEAT
          lvDay := DATE2DWY(lvStartDate,1);
          lvGap := 0;
          CASE lvDay OF
            1:
              BEGIN
                lvTimeFrom := BaseCalendar."Monday Work From";
                lvTimeUntil := BaseCalendar."Monday Work Until";
              END;
            2:
              BEGIN
                lvTimeFrom := BaseCalendar."Tuesday Work From";
                lvTimeUntil := BaseCalendar."Tuesday Work Until";
              END;
            3:
              BEGIN
                lvTimeFrom := BaseCalendar."Wednesday Work From";
                lvTimeUntil := BaseCalendar."Wednesday Work Until";
              END;
            4:
              BEGIN
                lvTimeFrom := BaseCalendar."Thursday Work From";
                lvTimeUntil := BaseCalendar."Thursday Work Until";
              END;
            5:
              BEGIN
                lvTimeFrom := BaseCalendar."Friday Work From";
                lvTimeUntil := BaseCalendar."Friday Work Until";
              END;
            6:
              BEGIN
                lvTimeFrom := BaseCalendar."Saturday Work From";
                lvTimeUntil := BaseCalendar."Saturday Work Until";
              END;
            7:
              BEGIN
                lvTimeFrom := BaseCalendar."Sunday Work From";
                lvTimeUntil := BaseCalendar."Sunday Work Until";
              END;
          END;

          IF lvStartTime < lvTimeFrom THEN
            lvStartTime := lvTimeFrom;
          IF lvStartTime > lvTimeUntil THEN
            lvStartTime := lvTimeUntil;
          IF lvTimeUntil <> 0T THEN
            lvGap := (lvTimeUntil - lvStartTime) / (3600*1000);

          IF TmpBln THEN BEGIN
            IF DocNo <> '' THEN
              DocNo := INCSTR(DocNo)
            ELSE
              DocNo:= PADSTR('', MAXSTRLEN("Document No."), '0');

            TmpRefPeriodRec.Type := Type;
            TmpRefPeriodRec.Code := Code;
            TmpRefPeriodRec."Document No." := DocNo;
            TmpRefPeriodRec."Starting Date" := lvStartDate;
            IF lvStartTime = 0T THEN
              TmpRefPeriodRec."Starting Time" := lvTimeFrom
            ELSE
              TmpRefPeriodRec."Starting Time" := lvStartTime;
            TmpRefPeriodRec."Ending Date" := lvStartDate;
            TmpRefPeriodRec."Ending Time" := lvTimeUntil;
            TmpRefPeriodRec.UpdateDatetime; //mg, 20-03-2015: C020322
            IF (TmpRefPeriodRec."Ending Date" > Rec."Ending Date") THEN
              EXIT;
            IF TmpRefPeriodRec.INSERT THEN;
            IF (TmpRefPeriodRec."Ending Date" = Rec."Ending Date") AND
               (TmpRefPeriodRec."Ending Time" > Rec."Ending Time") THEN BEGIN
              TmpRefPeriodRec."Ending Time" := Rec."Ending Time";
              TmpRefPeriodRec.UpdateDatetime; //mg, 20-03-2015: C020322
              TmpRefPeriodRec.MODIFY;
              EXIT;
            END;
          END;

          IF NOT TmpBln AND (lvGap >= lvNorm) THEN BEGIN //mg.c, 20-03-2015: C020322
            gvNorm := lvNorm;
            gvStartDate := lvStartDate;
            gvStartTime := lvStartTime;
            lvNorm := 0;
          END ELSE BEGIN
            lvNorm := lvNorm - lvGap;
            lvStartDate := lvStartDate + 1;
            lvStartTime := 0T;
          END;

          IF (lvStartDate > gvStartDate + 7) AND (gvNorm = lvNorm) THEN EXIT;
        UNTIL (NOT TmpBln AND (lvNorm = 0)) OR
              (TmpBln AND (TmpRefPeriodRec."Ending Date" >= Rec."Ending Date")); //mg.c, 20-03-2015: C020322
      END;
    END;

    PROCEDURE UpdateDatetime@1100485005();
    BEGIN
      "Starting Date-Time" := CREATEDATETIME("Starting Date","Starting Time");
      "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time");
    END;

    BEGIN
    {
      //db, 23-08-12: W014185 (convert date-time functions; decimal -> datetime)
    }
    END.
  }
}

