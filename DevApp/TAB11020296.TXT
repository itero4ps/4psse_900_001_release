OBJECT Table 11020296 Document Reference Point
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               LicenceCu.CheckLicenceDeadline;
               FillModifiedBy;
               UpdateActualOnInsert;
               UpdateLogbook(UpdateAction::Insert);
               UpdateAccLogMomentGanttChart(UpdateAction::Insert);
               InsertDocRefPointQueueEntry(UpdateAction::Insert);
             END;

    OnModify=BEGIN
               LicenceCu.CheckLicenceDeadline;
               TESTFIELD("Reference Point");
               FillModifiedBy;
               UpdateActualOnModify;
               UpdateLogbook(UpdateAction::Modify);
               UpdateAccLogMomentGanttChart(UpdateAction::Modify);
               InsertDocRefPointQueueEntry(UpdateAction::Modify);
             END;

    OnDelete=BEGIN
               TESTFIELD(Manual, TRUE);  //db, 23-09-08: M9831
               UpdateActualOnDelete;
               UpdateLogbook(UpdateAction::Delete);
               UpdateAccLogMomentGanttChart(UpdateAction::Delete);
               InsertDocRefPointQueueEntry(UpdateAction::Delete);
             END;

    OnRename=BEGIN
               ERROR(Text000);  //db, 21-07-08: M9831
             END;

    CaptionML=ENU=Document Reference Point;
    LookupPageID=Page11020345;
    DrillDownPageID=Page11020345;
  }
  FIELDS
  {
    { 10  ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Service Call,Service Order,Purchase Quote,Purchase Order;
                                                   OptionString=ServCall,ServOrder,PurchQuote,PurchOrder }
    { 20  ;   ;Document No.        ;Code20        ;TableRelation=IF (Type=CONST(ServCall)) "Service Call".No.
                                                                 ELSE IF (Type=CONST(ServOrder)) "Service Order".No.
                                                                 ELSE IF (Type=CONST(PurchQuote)) "Purchase Header".No. WHERE (Document Type=CONST(Quote))
                                                                 ELSE IF (Type=CONST(PurchOrder)) "Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   CaptionML=ENU=Document No. }
    { 25  ;   ;Date-Time (registrated);DateTime   ;CaptionML=ENU=Date-Time (registrated);
                                                   Description=W014185;
                                                   Editable=No }
    { 26  ;   ;Date-Time (modified);DateTime      ;OnValidate=BEGIN
                                                                "Date Modified" := DT2DATE("Date-Time (modified)");
                                                                "Time Modified" := DT2TIME("Date-Time (modified)");
                                                                UpdateRefPeriod;  //mg, 17-06-15: C022231
                                                              END;

                                                   CaptionML=ENU=Date-Time (modified);
                                                   Description=W014185;
                                                   Editable=No }
    { 35  ;   ;Date Modified       ;Date          ;OnValidate=BEGIN
                                                                "Date-Time (modified)" := CREATEDATETIME("Date Modified","Time Modified");
                                                                UpdateRefPeriod;  //db, 01-06-10: M19634
                                                              END;

                                                   CaptionML=ENU=Date Modified }
    { 36  ;   ;Time Modified       ;Time          ;OnValidate=BEGIN
                                                                "Date-Time (modified)" := CREATEDATETIME("Date Modified","Time Modified");
                                                                UpdateRefPeriod;  //db, 01-06-10: M19634
                                                              END;

                                                   CaptionML=ENU=Time Modified }
    { 40  ;   ;Reference Point     ;Integer       ;TableRelation="Reference Point".No.;
                                                   OnValidate=BEGIN
                                                                CheckEditPermission;
                                                                TESTFIELD(Manual, TRUE);  //db, 23-09-08: M9831
                                                                CALCFIELDS("Reference Point Description");
                                                              END;

                                                   CaptionML=ENU=Reference Point;
                                                   NotBlank=Yes }
    { 50  ;   ;Reference Point Description;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Reference Point".Description WHERE (No.=FIELD(Reference Point)));
                                                   CaptionML=ENU=Reference Point Description;
                                                   Editable=No }
    { 60  ;   ;Actual              ;Boolean       ;CaptionML=ENU=Actual;
                                                   Editable=No }
    { 70  ;   ;Modified by Employee;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Modified by Employee;
                                                   Editable=No }
    { 71  ;   ;Full Name           ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Modified by Employee)));
                                                   CaptionML=ENU=Full Name;
                                                   Editable=No }
    { 75  ;   ;Modified by         ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Modified by;
                                                   Editable=No }
    { 80  ;   ;Manual              ;Boolean       ;CaptionML=ENU=Manual;
                                                   Editable=No }
    { 90  ;   ;Modified by Subcont.Port.Vend.;Code20;
                                                   TableRelation="Subcont.Port. Vendor"."Vendor No.";
                                                   CaptionML=ENU=Modified by Subcontractor Portal Vendor }
    { 100 ;   ;Modified by Subcont.Port. User;Text30;
                                                   TableRelation="Subcont.Port. User".Login WHERE (Vendor No.=FIELD(Modified by Subcont.Port.Vend.));
                                                   CaptionML=ENU=Modified by Subcontractor Portal User }
    { 110 ;   ;N/A for Actual Reference Point;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Reference Point"."N/A for Actual Reference Point" WHERE (No.=FIELD(Reference Point)));
                                                   CaptionML=ENU=N/A for Actual Reference Point;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Type,Document No.,Date-Time (registrated);
                                                   Clustered=Yes }
    {    ;Type,Document No.,Date-Time (modified)   }
    {    ;Type,Reference Point,Date-Time (registrated) }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      LicenceCu@1100485001 : Codeunit 11012137;
      Text000@1100485000 : TextConst 'ENU=Rename not allowed';
      DatetimeMgt@1100485002 : Codeunit 11020218;
      GanttChartMgt@1100525000 : Codeunit 11012037;
      UpdateAction@1100525001 : 'Insert,Modify,Delete,Rename';
      NewActRefPoint@1100525002 : Integer;

    PROCEDURE UpdateActualOnInsert@1100485000();
    VAR
      lvDocRefPointRec@1100485000 : Record 11020296;
    BEGIN
      CheckIfServOrderFinished;  //db, 03-06-13: C007907

      CALCFIELDS("N/A for Actual Reference Point");
      IF "N/A for Actual Reference Point" THEN
        EXIT;

      lvDocRefPointRec.SETCURRENTKEY(Type, "Document No.", "Date-Time (modified)"); //db, 21-07-08: M9831
      lvDocRefPointRec.SETRANGE(Type, Type);
      lvDocRefPointRec.SETRANGE("Document No.", "Document No.");
      lvDocRefPointRec.SETRANGE("N/A for Actual Reference Point", FALSE);
      IF NOT lvDocRefPointRec.FINDLAST THEN BEGIN
        Actual := TRUE;
        CheckTriggerByStatus(Rec);  //db, 19-05-09: M14955
      END ELSE BEGIN
        IF "Date-Time (modified)" < lvDocRefPointRec."Date-Time (modified)" THEN
          Actual := FALSE
        ELSE BEGIN
          Actual := TRUE;
          CheckTriggerByStatus(Rec);  //db, 19-05-09: M14955
          lvDocRefPointRec.SETRANGE(Actual, TRUE);
          lvDocRefPointRec.MODIFYALL(Actual, FALSE, FALSE);  //* Met 'RunTrigger' is False!
        END;
      END;
      IF Actual AND (Type = Type::ServOrder) THEN
        UpdateAccLogMomentEmpsByOrder("Reference Point", "Document No.");
    END;

    PROCEDURE UpdateActualOnModify@1100485011();
    VAR
      lvDocRefPointRec@1100485000 : Record 11020296;
      DateTimeModified@1100528600 : DateTime;
    BEGIN
      CheckIfServOrderFinished;  //db, 03-06-13: C007907
      CheckEditPermission;

      CALCFIELDS("N/A for Actual Reference Point");
      IF "N/A for Actual Reference Point" THEN
        EXIT;

      IF xRec."Date-Time (modified)" <> 0DT THEN
        DateTimeModified := xRec."Date-Time (modified)"
      ELSE
        DateTimeModified := "Date-Time (modified)";

      lvDocRefPointRec.SETCURRENTKEY(Type, "Document No.", "Date-Time (modified)"); //db, 21-07-08: M9831
      lvDocRefPointRec.SETRANGE(Type, Type);
      lvDocRefPointRec.SETRANGE("Document No.", "Document No.");
      lvDocRefPointRec.SETFILTER("Date-Time (modified)", '<>%1', DateTimeModified);
      lvDocRefPointRec.SETRANGE("N/A for Actual Reference Point", FALSE);
      IF lvDocRefPointRec.FINDLAST THEN BEGIN
        IF "Date-Time (modified)" < lvDocRefPointRec."Date-Time (modified)" THEN BEGIN
          Actual := FALSE;
          lvDocRefPointRec.Actual := TRUE;
          IF (lvDocRefPointRec.Type = lvDocRefPointRec.Type::ServOrder) THEN
            UpdateAccLogMomentEmpsByOrder(lvDocRefPointRec."Reference Point", lvDocRefPointRec."Document No.");
          lvDocRefPointRec.MODIFY;
          CheckTriggerByStatus(lvDocRefPointRec);  //db, 19-05-09: M14955
        END ELSE BEGIN
          Actual := TRUE;
          IF (Type = Type::ServOrder) THEN
            UpdateAccLogMomentEmpsByOrder("Reference Point", "Document No.");
          CheckTriggerByStatus(Rec);  //db, 19-05-09: M14955
          lvDocRefPointRec.SETRANGE(Actual, TRUE);
          lvDocRefPointRec.MODIFYALL(Actual, FALSE, FALSE);  //* Met 'RunTrigger' is False!
        END;
      END;
    END;

    PROCEDURE UpdateActualOnDelete@1100485003();
    VAR
      lvDocRefPointRec@1100485000 : Record 11020296;
    BEGIN
      CALCFIELDS("N/A for Actual Reference Point");
      IF NOT Actual AND NOT "N/A for Actual Reference Point" THEN
        EXIT;

      lvDocRefPointRec.SETCURRENTKEY(Type, "Document No.", "Date-Time (modified)"); //db, 21-07-08: M9831
      lvDocRefPointRec.SETRANGE(Type, Type);
      lvDocRefPointRec.SETRANGE("Document No.", "Document No.");
      lvDocRefPointRec.SETFILTER("Date-Time (modified)", '<>%1', "Date-Time (modified)");
      lvDocRefPointRec.SETRANGE("N/A for Actual Reference Point", FALSE);
      IF lvDocRefPointRec.FINDLAST THEN BEGIN
        lvDocRefPointRec.Actual := TRUE;
        IF (lvDocRefPointRec.Type = lvDocRefPointRec.Type::ServOrder) THEN
          UpdateAccLogMomentEmpsByOrder(lvDocRefPointRec."Reference Point", lvDocRefPointRec."Document No.");
        lvDocRefPointRec.MODIFY(FALSE);  //* Met 'RunTrigger' is False!
        CheckTriggerByStatus(lvDocRefPointRec);  //db, 19-05-09: M14955
      END;
    END;

    PROCEDURE CheckEditPermission@1100485006();
    VAR
      lvServSetup@1100525000 : Record 11012800;
      lvProjSetup@1100485002 : Record 315;
      lvFsaMgtCU@1100485000 : Codeunit 11012158;
      lvMobileMgtCU@1100485001 : Codeunit 11012199;
      lvText001@1100485003 : TextConst 'ENU=No permission';
    BEGIN
      lvServSetup.GET;
      lvProjSetup.GET;
      IF (NOT lvProjSetup."Field Service Active") AND
         (NOT lvProjSetup."4PS-Mobile Active") THEN
        IF (NOT lvServSetup."Change Reference Point") THEN  //db, 04-06-10: M19631
          ERROR(lvText001);

      IF lvProjSetup."Field Service Active" THEN
        lvFsaMgtCU.CheckPermissionRefPoint;
      IF lvProjSetup."4PS-Mobile Active" THEN
        lvMobileMgtCU.CheckPermissionRefPoint;
    END;

    PROCEDURE FillModifiedBy@1100485001();
    VAR
      lvUserSetupRec@1100485000 : Record 91;
    BEGIN
      IF NOT lvUserSetupRec.GET(USERID) THEN
        lvUserSetupRec."Employee No." := '';

      "Modified by Employee" := lvUserSetupRec."Employee No.";
      "Modified by" := USERID;

      IF "Date-Time (modified)" = 0DT THEN BEGIN
        VALIDATE("Date-Time (modified)", "Date-Time (registrated)");  //db, 21-07-08: M9831
      END;
    END;

    PROCEDURE DateAndTime2DateTime@1100485005(IDate@1100485001 : Date;ITime@1100485002 : Time) : Decimal;
    BEGIN
      EXIT(DatetimeMgt.Datetime(IDate, ITime));
    END;

    PROCEDURE InsertDocRefPoint@1100485002(IType@1100485000 : Option;IDocNo@1100485002 : Code[20];INewStatus@1100485003 : Option;IDate@1100485006 : Date;ITime@1100485007 : Time);
    VAR
      lvRefPointRec@1100485001 : Record 11020271;
      lvDocRefPointRec@1100485004 : Record 11020296;
      lvApply@1100485005 : Option;
    BEGIN
      CASE IType OF
        lvDocRefPointRec.Type::ServCall:
          BEGIN
            lvRefPointRec.SETRANGE("Triggered by Status ServCall", INewStatus+1);
            lvApply := lvRefPointRec.Apply::ServCall;
          END;
        lvDocRefPointRec.Type::ServOrder:
          BEGIN
            lvRefPointRec.SETRANGE("Triggered by Status ServOrder", INewStatus+1);
            lvApply := lvRefPointRec.Apply::ServOrder;
          END;
        lvDocRefPointRec.Type::PurchQuote:
          BEGIN
            lvRefPointRec.SETRANGE("Triggered by Status PurchQuote", INewStatus+1);
            lvApply := lvRefPointRec.Apply::PurchQuote;
          END;
        lvDocRefPointRec.Type::PurchOrder:
          BEGIN
            lvRefPointRec.SETRANGE("Triggered by Status PurchOrder", INewStatus+1);
            lvApply := lvRefPointRec.Apply::PurchOrder;
          END;
        ELSE
          EXIT;
      END;

      lvRefPointRec.SETRANGE(Apply, lvApply);
      IF lvRefPointRec.FINDFIRST THEN BEGIN  //* Uitgangspunt is dat een status-trigger maar 1 keer voorkomt (kwestie van inrichten),
                                             //* daarom alleen eerste lezen.
        InsertDocRefPointWithNo(IType, IDocNo, lvRefPointRec."No.", IDate,ITime);
      END;
    END;

    PROCEDURE InsertDocRefPointExportFSA@1210190001(IDocNo@1210190000 : Code[20]);
    VAR
      MobileSetup@1210190001 : Record 11012676;
    BEGIN
      IF NOT MobileSetup.READPERMISSION THEN EXIT;  //db, 01-07-11: M28227

      MobileSetup.GET();
      IF MobileSetup."Ref. Point Sending SO" <> 0 THEN
        InsertDocRefPointWithNo(Rec.Type::ServOrder, IDocNo, MobileSetup."Ref. Point Sending SO", TODAY,TIME);
    END;

    PROCEDURE InsertDocRefPointSOCallIntake@1100525008(IDocNo@1100528600 : Code[20]);
    VAR
      ServiceSetup@1100528601 : Record 11012800;
      ServOrderRec@1100525001 : Record 11012823;
      ServCallRec@1100525000 : Record 11012822;
    BEGIN
      //db, 13-08-15: C023471
      ServiceSetup.GET;
      IF ServiceSetup."Ref. Point SO Call Intake" = 0 THEN
        EXIT;

      IF NOT ServOrderRec.GET(IDocNo) THEN ServOrderRec.INIT;
      IF NOT ServCallRec.GET(ServOrderRec."Call No.") THEN EXIT;

      InsertDocRefPointWithNo(Rec.Type::ServOrder, IDocNo, ServiceSetup."Ref. Point SO Call Intake",
        ServCallRec."Receiving Date", ServCallRec."Receiving Time");

      UpdateRefPeriod;
    END;

    PROCEDURE InsertDocRefPointSOPrepared@1100525009(IDocNo@1100528600 : Code[20]);
    VAR
      ServiceSetup@1100528601 : Record 11012800;
    BEGIN
      //DP01015
      ServiceSetup.GET;
      ServiceSetup.TESTFIELD("Ref. Point SO Prepared");
      InsertDocRefPointWithNo(Rec.Type::ServOrder, IDocNo, ServiceSetup."Ref. Point SO Prepared", TODAY,TIME);
    END;

    PROCEDURE InsertDocRefPointSOPlanned@1100528600(IDocNo@1100528600 : Code[20]);
    VAR
      ServiceSetup@1100528601 : Record 11012800;
    BEGIN
      ServiceSetup.GET;
      ServiceSetup.TESTFIELD("Ref. Point SO Planned");
      InsertDocRefPointWithNo(Rec.Type::ServOrder, IDocNo, ServiceSetup."Ref. Point SO Planned", TODAY,TIME);
    END;

    PROCEDURE InsertDocRefPointSOReviewed@1100528601(IDocNo@1100528600 : Code[20]);
    VAR
      ServiceSetup@1100528601 : Record 11012800;
    BEGIN
      ServiceSetup.GET;
      ServiceSetup.TESTFIELD("Ref. Point SO Reviewed");
      InsertDocRefPointWithNo(Rec.Type::ServOrder, IDocNo, ServiceSetup."Ref. Point SO Reviewed", TODAY,TIME);
    END;

    PROCEDURE InsertDocRefPointSOInvoiced@1100528602(IDocNo@1100528600 : Code[20]);
    VAR
      ServiceSetup@1100528601 : Record 11012800;
    BEGIN
      ServiceSetup.GET;
      ServiceSetup.TESTFIELD("Ref. Point SO Make Chargeable");
      InsertDocRefPointWithNo(Rec.Type::ServOrder, IDocNo, ServiceSetup."Ref. Point SO Make Chargeable", TODAY,TIME);
    END;

    PROCEDURE InsertDocRefPointSONotInvoice@1100528800(IDocNo@1100528600 : Code[20]);
    VAR
      ServiceSetup@1100528601 : Record 11012800;
    BEGIN
      // dp00215.n
      ServiceSetup.GET;
      ServiceSetup.TESTFIELD("Ref. Point SO Not Invoice");
      InsertDocRefPointWithNo(Rec.Type::ServOrder, IDocNo, ServiceSetup."Ref. Point SO Not Invoice", TODAY,TIME);
    END;

    PROCEDURE InsertDocRefPointWithNo@1210190000(IType@1100485000 : Option;IDocNo@1100485002 : Code[20];IRefPointNo@1100485003 : Integer;IDate@1100485006 : Date;ITime@1100485007 : Time);
    VAR
      lvDocRefPointRec@1100485004 : Record 11020296;
      DateTimeRegistered@1100528600 : DateTime;
    BEGIN
      DateTimeRegistered := CREATEDATETIME(IDate,ITime);

      IF lvDocRefPointRec.GET(IType, IDocNo, DateTimeRegistered) THEN
        REPEAT
          DateTimeRegistered += 1; // add 1ms
        UNTIL NOT lvDocRefPointRec.GET(IType, IDocNo, DateTimeRegistered);

      lvDocRefPointRec.INIT;
      lvDocRefPointRec.Type := IType;
      lvDocRefPointRec."Document No." := IDocNo;
      lvDocRefPointRec."Date-Time (registrated)" := DateTimeRegistered;
      lvDocRefPointRec."Reference Point" := IRefPointNo;
      lvDocRefPointRec.INSERT(TRUE);

      NewActRefPoint := lvDocRefPointRec.GetNewActRefPoint;

      SendMail(IType, IDocNo, IRefPointNo);

      Rec := lvDocRefPointRec;
    END;

    PROCEDURE UpdateLogbook@1100485007(UpdateAction@1100525000 : 'Insert,Modify,Delete,Rename');
    VAR
      ServLogRec@1100485002 : Record 11012855;
      lvDesc@1100485000 : Text[250];
      lvMess@1100485001 : Text[250];
    BEGIN
      //db, 21-07-08: M9831
      CASE UpdateAction OF
        UpdateAction::Insert:
          BEGIN
            IF "Date-Time (registrated)" <> 0DT THEN
              EXIT;

            lvDesc := FIELDCAPTION("Reference Point") + ' ' + FORMAT("Reference Point")  + ' ' + FIELDCAPTION("Date-Time (modified)"
      );
            lvMess := ServLogRec.FormatDescription(lvDesc,
              DatetimeMgt.Datetime2Text(0DT),
              DatetimeMgt.Datetime2Text("Date-Time (modified)"));
          END;
        UpdateAction::Modify:
          BEGIN
            IF "Date-Time (modified)" = xRec."Date-Time (modified)" THEN
              EXIT;
            lvDesc := FIELDCAPTION("Reference Point") + ' ' + FORMAT("Reference Point")  + ' ' + FIELDCAPTION("Date-Time (modified)"
      );
            lvMess := ServLogRec.FormatDescription(lvDesc,
              DatetimeMgt.Datetime2Text(xRec."Date-Time (modified)"),
              DatetimeMgt.Datetime2Text("Date-Time (modified)"));
          END;
        UpdateAction::Delete:
          BEGIN
            lvDesc := FIELDCAPTION("Reference Point") + ' ' + FORMAT("Reference Point")  + ' ' + FIELDCAPTION("Date-Time (modified)"
      );
            lvMess := ServLogRec.FormatDescription(lvDesc,
              DatetimeMgt.Datetime2Text("Date-Time (modified)"),
              DatetimeMgt.Datetime2Text(0DT));
          END;
      END;

      IF Type = Type::ServOrder THEN
        ServLogRec.StoreChange(2, "Document No.", lvMess);
    END;

    PROCEDURE SendMail@1100525000(parTypeINT@1100525005 : Integer;parDocCDE@1100525006 : Code[20];parRefPointINT@1100525007 : Integer);
    VAR
      lvRefPointRec@1100525002 : Record 11020271;
      lvServOrderRec@1210190001 : Record 11012823;
      lvServContrRec@1210190000 : Record 11012812;
      Customer@1210190002 : Record 18;
      Vendor@1100528600 : Record 23;
      lvSOMailCu@1100525001 : Codeunit 11012816;
      DocumentPrint@1100528500 : Codeunit 229;
    BEGIN
      //db, 21-03-11
      IF parTypeINT = 1 THEN BEGIN // Only ServOrder
        IF NOT lvServOrderRec.GET(parDocCDE) THEN EXIT;
        IF NOT lvServContrRec.GET(lvServOrderRec."Service Contract No.") THEN lvServContrRec.INIT;
        IF NOT Customer.GET(lvServOrderRec."Customer No.") THEN Customer.INIT;
        IF NOT Vendor.GET(lvServOrderRec.Subcontractor) THEN Vendor.INIT;

        IF lvRefPointRec.GET(parRefPointINT) THEN BEGIN
          IF (lvRefPointRec."Send Status Update Mail") AND
            (((lvServContrRec."No." <> '') AND lvServContrRec."Send Mail Status Update") OR
             ((lvServContrRec."No." = '') AND Customer."Send Mail SO Status Update")) THEN BEGIN
            IF NOT CheckMailStatusUpdateSent(parTypeINT, parDocCDE, parRefPointINT) THEN BEGIN //mg.c, 07-10-11: M29283
              lvSOMailCu.SetMailAction(0);
              lvSOMailCu.ServiceOrderMail(parDocCDE);
            END;
          END;
          IF (lvRefPointRec."Send Mail Work Sheet") AND
            (((lvServContrRec."No." <> '') AND lvServContrRec."Send Mail Work Sheet") OR
             ((lvServContrRec."No." = '') AND Customer."Send Mail SO Work Sheet"))
          THEN BEGIN
            lvServOrderRec.SETRANGE("No.", parDocCDE);
            DocumentPrint.EmailServiceOrderWorksheet(lvServOrderRec, FALSE);
          END;
      //    IF (lvServOrderRec.Subcontractor <> '') AND (lvRefPointRec."Send Mail to Subcontractor") THEN BEGIN
      //      lvSOMailCu.SetMailAction(2);
      //      lvSOMailCu.ServiceOrderMail(parDocCDE);
      //    END;
        END;
      END;
    END;

    PROCEDURE CheckTriggerByStatus@1100525001(lvDocRefPointRec@1100525000 : Record 11020296);
    VAR
      lvRefPointRec@1100525001 : Record 11020271;
      lvServCallRec@1100525003 : Record 11012822;
      lvServOrderRec@1100525002 : Record 11012823;
    BEGIN
      lvRefPointRec.GET(lvDocRefPointRec."Reference Point");

      //db, 19-05-09: M14955
      IF (("Reference Point" = xRec."Reference Point") OR (xRec."Reference Point" = 0)) AND
         (("Date Modified" = xRec."Date Modified") OR (xRec."Date Modified" = 0D)) AND
         (("Time Modified" = xRec."Time Modified") OR (xRec."Time Modified" = 0T)) AND
         (lvRefPointRec.Apply = lvRefPointRec.Apply::ServCall) THEN //mg: 21-11-2013: C011032
        EXIT;  //db, 07-09-09: T3866

      IF lvRefPointRec.Apply = lvRefPointRec.Apply::ServCall THEN BEGIN
        IF lvRefPointRec."Triggered by Status ServCall" = lvRefPointRec."Triggered by Status ServCall"::" " THEN
          EXIT;
        IF lvServCallRec.GET(lvDocRefPointRec."Document No.") THEN BEGIN
          IF lvServCallRec.Status <> lvRefPointRec."Triggered by Status ServCall" - 1 THEN BEGIN
            lvServCallRec.VALIDATE(Status, lvRefPointRec."Triggered by Status ServCall" - 1);
            lvServCallRec.MODIFY;
          END;
        END;
      END;
      IF lvRefPointRec.Apply = lvRefPointRec.Apply::ServOrder THEN BEGIN
        IF lvRefPointRec."Triggered by Status ServOrder" = lvRefPointRec."Triggered by Status ServOrder"::" " THEN
          EXIT;
        IF lvServOrderRec.GET(lvDocRefPointRec."Document No.") THEN BEGIN
          IF lvServOrderRec.Status <> lvRefPointRec."Triggered by Status ServOrder" - 1 THEN BEGIN
            lvServOrderRec.VALIDATE(Status, lvRefPointRec."Triggered by Status ServOrder" - 1);
            IF lvServOrderRec.Status = lvServOrderRec.Status::Cancelled THEN BEGIN  //db, 10-03-15: C015350
              lvServOrderRec.CheckCommitments;
              lvServOrderRec.CheckWIP;
            END;
            //mg.sc, 19-09-11: M28502
            lvServOrderRec.SetSkipUpdateDocRefPoint(TRUE);
            lvServOrderRec.MODIFY(TRUE);
            //mg.ec, 19-09-11: M28502
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateAccLogMomentGanttChart@1100525002(UpdateAction@1100525000 : 'Insert,Modify,Delete,Rename');
    BEGIN
      GanttChartMgt.UpdateActualLogMoment(UpdateAction,Rec,xRec,NewActRefPoint);
    END;

    PROCEDURE GetNewActRefPoint@1100525004() : Integer;
    BEGIN
      EXIT(NewActRefPoint);
    END;

    PROCEDURE UpdateRefPeriod@1100525003();
    VAR
      RefPeriodRec@1100525000 : Record 11020272;
      CheckResult@1100525001 : Boolean;
    BEGIN
      //db, 01-06-10: M19634
      RefPeriodRec.SETCURRENTKEY(Type, "Document No.");
      RefPeriodRec.SETRANGE(Type, Type+2);
      RefPeriodRec.SETRANGE("Document No.", "Document No.");
      IF NOT RefPeriodRec.ISEMPTY THEN BEGIN
        IF RefPeriodRec.FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            CheckResult := FALSE;
            IF RefPeriodRec."Reference Point Start" = "Reference Point" THEN BEGIN
              RefPeriodRec.VALIDATE("Starting Date-Time", "Date-Time (modified)");
              CheckResult := TRUE;
            END;
            IF RefPeriodRec."Reference Point End" = "Reference Point" THEN BEGIN
              RefPeriodRec.VALIDATE("Ending Date-Time", "Date-Time (modified)");
              CheckResult := TRUE;
            END;
            IF CheckResult THEN BEGIN
              RefPeriodRec.GetNorm(RefPeriodRec);  //db, 17-06-10: M19634
              RefPeriodRec.DetermineResult;
              RefPeriodRec.MODIFY;
            END;
          UNTIL RefPeriodRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CheckMailStatusUpdateSent@1210190002(IType@1210190002 : Integer;IDocumentNo@1210190001 : Code[20];IRefPoint@1210190000 : Integer) : Boolean;
    VAR
      DocumentReferencePoint@1210190003 : Record 11020296;
      ServiceSetup@1210190004 : Record 11012800;
    BEGIN
      //mg, 07-10-11: M29283
      ServiceSetup.GET;
      IF NOT ServiceSetup."Send Mail Status Update Once" THEN
        EXIT(FALSE);

      DocumentReferencePoint.SETRANGE(Type, IType);
      DocumentReferencePoint.SETRANGE("Document No.", IDocumentNo);
      DocumentReferencePoint.SETRANGE("Reference Point", IRefPoint);
      EXIT(DocumentReferencePoint.COUNT > 1);
    END;

    PROCEDURE CheckStatusServOrder@1100528100();
    VAR
      lvDocRefPointRec@1100525004 : Record 11020296;
      lvRefPointRec@1100525003 : Record 11020271;
      lvRefPeriodRec@1100525002 : Record 11020272;
      lvServOrderRec@1100525001 : Record 11012823;
      lvProgPhaseRec@1100525000 : Record 11020251;
    BEGIN
      lvDocRefPointRec.SETRANGE(Type, Type);
      lvDocRefPointRec.SETRANGE("Document No.", "Document No.");
      lvDocRefPointRec.SETRANGE(Actual, TRUE);
      IF lvDocRefPointRec.FINDFIRST THEN BEGIN
        lvRefPointRec.RESET;
        lvRefPointRec.SETRANGE(Apply, lvRefPointRec.Apply::ServOrder);
        lvRefPointRec.SETRANGE("No.", lvDocRefPointRec."Reference Point");
        IF lvRefPointRec.FINDFIRST THEN BEGIN
          CLEAR(lvServOrderRec);
          lvServOrderRec.GET("Document No.");
          // jhoek.010910.begin
          // As discussed with dborkent; this appears to be the only safe place to make this modification.
          IF lvServOrderRec."Actual Reference Point (Gantt)" <> lvDocRefPointRec."Reference Point" THEN BEGIN
            lvServOrderRec."Actual Reference Point (Gantt)" := lvDocRefPointRec."Reference Point";
            lvServOrderRec.MODIFY(FALSE);
          END;
          // jhoek.010910.end
          IF (lvRefPointRec."Triggered by Status ServOrder" > 0) AND
             (lvServOrderRec.Status <= lvServOrderRec.Status::"Technical Finished")
          THEN BEGIN
            lvServOrderRec.VALIDATE(Status, lvRefPointRec."Triggered by Status ServOrder" - 1);
            lvServOrderRec.SetSkipUpdateDocRefPoint(TRUE);
            lvServOrderRec.MODIFY(TRUE);
            lvProgPhaseRec.CheckProgressScheme(
              lvProgPhaseRec.Type::ServOrder, lvServOrderRec."Progress Scheme",
              lvServOrderRec."No.", lvServOrderRec.Status, "Date Modified", "Time Modified");
            lvServOrderRec.SetSkipUpdateDocRefPoint(FALSE);
          END ELSE BEGIN
            lvRefPeriodRec.SETCURRENTKEY(Type, "Document No.");
            lvRefPeriodRec.SETRANGE(Type,  lvRefPeriodRec.Type::ServOrder);
            lvRefPeriodRec.SETRANGE("Document No.", "Document No.");
            //
            lvRefPeriodRec.SETRANGE("Reference Point Start", lvRefPointRec."No.");
            lvRefPeriodRec.SETRANGE("Starting Date", 0D);
            IF NOT lvRefPeriodRec.ISEMPTY THEN BEGIN
              IF lvRefPeriodRec.FINDSET(TRUE,FALSE) THEN BEGIN
                REPEAT
                  lvRefPeriodRec.VALIDATE("Starting Date", "Date Modified");
                  lvRefPeriodRec.VALIDATE("Starting Time", "Time Modified");
                  lvRefPeriodRec.MODIFY(TRUE);
                UNTIL lvRefPeriodRec.NEXT = 0;
              END;
            END;
            lvRefPeriodRec.SETRANGE("Reference Point Start");
            lvRefPeriodRec.SETRANGE("Starting Date");
            //
            lvRefPeriodRec.SETRANGE("Reference Point End", lvRefPointRec."No.");
            lvRefPeriodRec.SETRANGE("Ending Date", 0D);
            IF NOT lvRefPeriodRec.ISEMPTY THEN BEGIN
              IF lvRefPeriodRec.FINDSET(TRUE,FALSE) THEN BEGIN
                REPEAT
                  lvRefPeriodRec.VALIDATE("Ending Date", "Date Modified");
                  lvRefPeriodRec.VALIDATE("Ending Time", "Time Modified");
                  lvRefPeriodRec.MODIFY(TRUE);
                UNTIL lvRefPeriodRec.NEXT = 0;
              END;
            END;
            lvRefPeriodRec.SETRANGE("Reference Point End");
            lvRefPeriodRec.SETRANGE("Ending Date");
          END;
        END;
      END;
    END;

    PROCEDURE UpdateAccLogMomentEmpsByOrder@1100525005(ActRefPoint@1100525000 : Integer;ServiceOrderNo@1100525002 : Code[20]);
    VAR
      ReferencePoint@1100525003 : Record 11020271;
      FieldServiceAdminSetup@1100525004 : Record 11012138;
      AlwaysUpdateRefPointEmployee@1100525005 : Boolean;
    BEGIN
      //C005692.n
      {
      IF FieldServiceAdminSetup.FINDFIRST THEN
        AlwaysUpdateRefPointEmployee := FieldServiceAdminSetup."Field Service Active" AND
          (FieldServiceAdminSetup."Field Service Administration" = FieldServiceAdminSetup."Field Service Administration"::FieldVision);
      IF NOT ReferencePoint.GET(ActRefPoint) THEN
        EXIT; //db, 16-05-13: T002651 (skip ActRefPoint=-1)
      IF NOT AlwaysUpdateRefPointEmployee AND (ReferencePoint."Triggered by Field Service" <> '') THEN
        EXIT;

      //EmployeeByServiceOrder.SETRANGE(Type, EmployeeByServiceOrder.Type::Order);
      //EmployeeByServiceOrder.SETRANGE("No.", ServiceOrderNo);
      //IF EmployeeByServiceOrder.FINDSET(TRUE,FALSE) THEN
      //  REPEAT
      //    EmployeeByServiceOrder."Actual Reference Point" := ActRefPoint;
      //    EmployeeByServiceOrder.MODIFY(FALSE);
      //  UNTIL EmployeeByServiceOrder.NEXT = 0;
      }
    END;

    PROCEDURE CheckIfServOrderFinished@1100525006();
    VAR
      ServOrderRec@1100525000 : Record 11012823;
    BEGIN
      //db, 03-06-13: C007907
      IF Type <> Type::ServOrder THEN EXIT;

      IF ServOrderRec.GET("Document No.") THEN BEGIN
        IF ServOrderRec.Status = ServOrderRec.Status::Finished THEN
          ServOrderRec.FIELDERROR(Status);
      END;
    END;

    PROCEDURE IsOrderFinished@1100528604() : Boolean;
    VAR
      ReferencePoint@1100528600 : Record 11020271;
    BEGIN
      IF Type <> Type::ServOrder THEN
        EXIT;
      IF NOT ReferencePoint.GET("Reference Point") THEN
        ReferencePoint.INIT;
      EXIT(ReferencePoint.IsOrderFinished);
    END;

    PROCEDURE InsertDocRefPointQueueEntry@1100525007(UpdateAction@1100525000 : 'Insert,Modify,Delete,Rename');
    VAR
      DeadlineControlSetup@1100525002 : Record 11072240;
      DocRefPointQueueEntry@1100525001 : Record 11072239;
    BEGIN
      IF NOT DeadlineControlSetup.GET THEN
        DeadlineControlSetup.INIT;
      IF NOT DeadlineControlSetup."Copy Ref. Points to Queue" THEN
        EXIT;

      IF (UpdateAction <> UpdateAction::Insert) AND
         (UpdateAction <> UpdateAction::Modify) AND
         (UpdateAction <> UpdateAction::Delete) THEN
         EXIT;

      DocRefPointQueueEntry.Type := Type;
      DocRefPointQueueEntry."Document No." := "Document No.";
      DocRefPointQueueEntry."Date-Time (registrated)" := "Date-Time (registrated)";
      DocRefPointQueueEntry."Reference Point" := "Reference Point";
      DocRefPointQueueEntry."Trigger Type" := UpdateAction;
      DocRefPointQueueEntry.Comment := '';
      DocRefPointQueueEntry.INSERT(TRUE);
    END;

    BEGIN
    END.
  }
}

