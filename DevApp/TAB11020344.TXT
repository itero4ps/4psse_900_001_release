OBJECT Table 11020344 Service Extra Cost
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Cost Plus Line No." := 0;
               InsertCostPlusEntry;
             END;

    OnModify=BEGIN
               ModifyCostPlusEntry;
             END;

    OnDelete=BEGIN
               DeleteCostPlusEntry;
             END;

    CaptionML=ENU=Service Extra Cost;
  }
  FIELDS
  {
    { 10  ;   ;Entity Type         ;Option        ;CaptionML=ENU=Entity Type;
                                                   OptionCaptionML=ENU=Service Contract,Service Order,Customer;
                                                   OptionString=Service Contract,Service Order,Customer;
                                                   Editable=No }
    { 20  ;   ;Entity Code         ;Code20        ;TableRelation=IF (Entity Type=CONST(Service Contract)) Service-Contract.No.
                                                                 ELSE IF (Entity Type=CONST(Service Order)) "Service Order".No.;
                                                   CaptionML=ENU=Entity Code;
                                                   Editable=No }
    { 30  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 40  ;   ;Cost Object         ;Code20        ;TableRelation=IF (Cost Type=CONST(Labor)) "Dimension Value".Code WHERE (Cost Type=FILTER(Labor),
                                                                                                                           Global Dimension No.=CONST(2))
                                                                                                                           ELSE IF (Cost Type=CONST(Material)) "Dimension Value".Code WHERE (Cost Type=FILTER(Material),
                                                                                                                                                                                             Global Dimension No.=CONST(2))
                                                                                                                                                                                             ELSE IF (Cost Type=CONST(Plant)) "Dimension Value".Code WHERE (Cost Type=FILTER(Plant),
                                                                                                                                                                                                                                                            Global Dimension No.=CONST(2))
                                                                                                                                                                                                                                                            ELSE IF (Cost Type=CONST(Subcontracting)) "Dimension Value".Code WHERE (Cost Type=FILTER(Subcontracting),
                                                                                                                                                                                                                                                                                                                                    Global Dimension No.=CONST(2))
                                                                                                                                                                                                                                                                                                                                    ELSE IF (Cost Type=CONST(Sundry)) "Dimension Value".Code WHERE (Cost Type=FILTER(Sundry),
                                                                                                                                                                                                                                                                                                                                                                                                    Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                IF "Cost Object" <> '' THEN BEGIN
                                                                  IF "Cost Object" <> xRec."Cost Object" THEN BEGIN
                                                                    CALCFIELDS("Cost Object Description");
                                                                    IF Description <> "Cost Object Description" THEN
                                                                      Description := "Cost Object Description";
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Object }
    { 45  ;   ;Cost Object Description;Text50     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Dimension Value".Name WHERE (Code=FIELD(Cost Object),
                                                                                                    Global Dimension No.=CONST(2)));
                                                   CaptionML=ENU=Cost Object Description;
                                                   Editable=No }
    { 50  ;   ;Cost Type           ;Option        ;OnValidate=BEGIN
                                                                IF "Cost Object" <> '' THEN BEGIN
                                                                  IF "Cost Type" <> xRec."Cost Type" THEN
                                                                    IF CONFIRM(Text001,TRUE) THEN BEGIN
                                                                      "Cost Object" := '';
                                                                      CALCFIELDS("Cost Object Description");
                                                                    END ELSE BEGIN
                                                                      "Cost Type" := xRec."Cost Type";
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Type;
                                                   OptionCaptionML=ENU=Labor,Material,Subcontracting,Plant,Sundry;
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry }
    { 60  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 70  ;   ;Quantity            ;Decimal       ;CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 80  ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=ENU=Unit of Measure }
    { 90  ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount }
    { 100 ;   ;Apply at Source Type;Option        ;OnValidate=BEGIN
                                                                IF "Apply at Source Type" <> "Apply at Source Type"::Call THEN
                                                                  IF "Entity Type" = "Entity Type"::"Service Order" THEN
                                                                    FIELDERROR("Apply at Source Type", Text002);
                                                              END;

                                                   CaptionML=ENU=Apply at Source Type;
                                                   OptionCaptionML=ENU=Call,Contract,Direct,Estimate,All Source Types;
                                                   OptionString=Call,Contract,Direct,Estimate,All Source Types }
    { 110 ;   ;Cost Plus Line No.  ;Integer       ;CaptionML=ENU=Cost Plus Line No.;
                                                   Editable=No }
    { 120 ;   ;Priority            ;Code10        ;TableRelation=IF (Entity Type=CONST(Service Contract)) "Service Contract Priority".Priority WHERE (Service Contract No.=FIELD(Entity Code))
                                                                 ELSE IF (Entity Type=CONST(Customer)) "Service Priority";
                                                   CaptionML=ENU=Priority }
  }
  KEYS
  {
    {    ;Entity Type,Entity Code,Line No.        ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100525000 : TextConst 'ENU=Change Cost Type ?';
      Text002@1100525001 : TextConst 'ENU=Not applicable with Service Orders';
      Skip4PSMobileCheck@1100525002 : Boolean;

    PROCEDURE CheckTravelData@1100528600();
    VAR
      ServSetup@1100525000 : Record 11012800;
      ServiceContract@1100528600 : Record 11012812;
      ServOrder@1100525002 : Record 11012823;
      ServLoc@1100525003 : Record 11012801;
      PlantLoc@1100529300 : Record 11012554;
      ExtraCost@1210190000 : Record 11020344;
      DimValRec@1100525004 : Record 349;
      BudgetRateRec@1100525005 : Record 11012000;
      SCCustSourceTypeSetup@1100528601 : Record 11071800;
      LastLino@1210190001 : Integer;
      DimMgt@1100525001 : Codeunit 408;
      TravelTime@1100529303 : Decimal;
      TravelDistance@1100529302 : Decimal;
      TravelCostWithIndexDate@1100529301 : Decimal;
    BEGIN
      TESTFIELD("Entity Type", "Entity Type"::"Service Order"); //only works for service orders

      ServOrder.GET("Entity Code");
      IF ServOrder."Customer No." <> '' THEN BEGIN
        IF NOT SCCustSourceTypeSetup.GET(
                 SCCustSourceTypeSetup.Type::Customer, ServOrder."Customer No.", ServOrder."Source Type")
        THEN
          SCCustSourceTypeSetup.INIT;
      END;
      IF ServOrder."Service Contract No." <> '' THEN BEGIN
        ServiceContract.GET(ServOrder."Service Contract No.");
        IF NOT SCCustSourceTypeSetup.GET(
                 SCCustSourceTypeSetup.Type::Contract, ServOrder."Service Contract No.", ServOrder."Source Type")
        THEN
          SCCustSourceTypeSetup.INIT;
      END;

      //DP00195 sn.
      //IF (ServOrder."Service Location No." = '') AND (ServOrder."Plant Location" = '') THEN
      //  EXIT;

      IF ServOrder."Service Location No." <> '' THEN BEGIN
        ServLoc.GET(ServOrder."Service Location No.");
        TravelTime := ServLoc."Travel Time";
        TravelDistance := ServLoc."Travel Distance";
        TravelCostWithIndexDate := ServLoc.GetTravelCostWithIndexDate(ServOrder."Order Date");
      END;

      IF (ServOrder."Plant Location" = '') AND (ServOrder."Service Contract No." <> '') AND (TravelCostWithIndexDate = 0) THEN
        TravelCostWithIndexDate := ServiceContract.GetTravelCostWithIndexDate(ServOrder."Order Date");

      IF ServOrder."Plant Location" <> '' THEN BEGIN
        PlantLoc.GET(ServOrder."Plant Location");
        TravelTime := PlantLoc."Travel Time";
        TravelDistance := PlantLoc."Travel Distance";
        TravelCostWithIndexDate := PlantLoc.GetTravelCostWithIndexDate(ServOrder."Order Date")
      END;
      //en.

      IF SCCustSourceTypeSetup."Calculate Travel Costs" = SCCustSourceTypeSetup."Calculate Travel Costs"::" " THEN
        EXIT;

      ServSetup.GET;
      IF SCCustSourceTypeSetup."Calculate Travel Costs" = SCCustSourceTypeSetup."Calculate Travel Costs"::"Travel Distance+Time"
      THEN BEGIN
        ServSetup.TESTFIELD("Cost Object Travel Time");
        ServSetup.TESTFIELD("Cost Object Travel Distance");
      END;
      IF SCCustSourceTypeSetup."Calculate Travel Costs" = SCCustSourceTypeSetup."Calculate Travel Costs"::"Travel Cost" THEN
        ServSetup.TESTFIELD("Cost Object Travel Cost");

      ExtraCost.RESET;
      ExtraCost.SETRANGE("Entity Type", ExtraCost."Entity Type"::"Service Order");
      ExtraCost.SETRANGE("Entity Code", "Entity Code");
      IF ExtraCost.FINDLAST THEN
        LastLino := ExtraCost."Line No."
      ELSE
        LastLino := 0;

      IF SCCustSourceTypeSetup."Calculate Travel Costs" = SCCustSourceTypeSetup."Calculate Travel Costs"::"Travel Distance+Time"
      THEN BEGIN
        ExtraCost.SETRANGE("Cost Object", ServSetup."Cost Object Travel Time");
        IF ExtraCost.FINDFIRST THEN
          ExtraCost.DELETEALL(TRUE);

        IF TravelTime <> 0 THEN BEGIN
          DimMgt.GetDimValueRec(2, ServSetup."Cost Object Travel Time", DimValRec, TRUE, '');
          BudgetRateRec.SETRANGE(Code, DimValRec."Rate Code");
          BudgetRateRec.SETRANGE("Starting Date", 0D, TODAY);
          BudgetRateRec.SETFILTER("Ending Date", '%1|>=%2', 0D, TODAY);
          IF BudgetRateRec.FINDLAST THEN
            DimValRec."Sales Price" := BudgetRateRec.Rate;

          ExtraCost.INIT;
          ExtraCost."Entity Type" := ExtraCost."Entity Type"::"Service Order";
          ExtraCost."Entity Code" := ServOrder."No.";
          ExtraCost."Line No." := LastLino + 10000;
          ExtraCost.INSERT(TRUE);

          ExtraCost."Cost Type" := DimValRec."Cost Type";
          ExtraCost."Cost Object" := DimValRec.Code;
          ExtraCost.Description := DimValRec.Name;
          ExtraCost.Quantity := TravelTime;
          ExtraCost."Unit of Measure" := DimValRec."Unit of Measure";
      //    ExtraCost.Amount := ExtraCost.Quantity * DimValRec."Sales Price";
          ExtraCost.MODIFY(TRUE);

          LastLino := ExtraCost."Line No.";
        END;

        ExtraCost.SETRANGE("Cost Object", ServSetup."Cost Object Travel Distance");
        IF ExtraCost.FINDFIRST THEN
          ExtraCost.DELETEALL(TRUE);
        IF TravelDistance <> 0 THEN BEGIN
          DimMgt.GetDimValueRec(2, ServSetup."Cost Object Travel Distance", DimValRec, TRUE, '');

          ExtraCost.INIT;
          ExtraCost."Entity Type" := ExtraCost."Entity Type"::"Service Order";
          ExtraCost."Entity Code" := ServOrder."No.";
          ExtraCost."Line No." := LastLino + 10000;
          ExtraCost.INSERT(TRUE);

          ExtraCost."Cost Type" := DimValRec."Cost Type";
          ExtraCost."Cost Object" := DimValRec.Code;
          ExtraCost.Description := DimValRec.Name;
          ExtraCost.Quantity := TravelDistance;
          ExtraCost."Unit of Measure" := DimValRec."Unit of Measure";
      //    ExtraCost.Amount := ExtraCost.Quantity * DimValRec."Sales Price";
          ExtraCost.MODIFY(TRUE);

          LastLino := ExtraCost."Line No.";
        END;
      END;

      IF SCCustSourceTypeSetup."Calculate Travel Costs" = SCCustSourceTypeSetup."Calculate Travel Costs"::"Travel Cost" THEN BEGIN
        ExtraCost.SETRANGE("Cost Object", ServSetup."Cost Object Travel Cost");
        IF ExtraCost.FINDFIRST THEN
          ExtraCost.DELETEALL(TRUE);
        IF TravelCostWithIndexDate <> 0 THEN BEGIN
          DimMgt.GetDimValueRec(2, ServSetup."Cost Object Travel Cost", DimValRec, TRUE,'');

          ExtraCost.INIT;
          ExtraCost."Entity Type" := ExtraCost."Entity Type"::"Service Order";
          ExtraCost."Entity Code" := ServOrder."No.";
          ExtraCost."Line No." := LastLino + 10000;
          ExtraCost.INSERT(TRUE);

          ExtraCost."Cost Type" := DimValRec."Cost Type";
          ExtraCost."Cost Object" := DimValRec.Code;
          ExtraCost.Description := DimValRec.Name;
          ExtraCost.Quantity := 1;
          ExtraCost."Unit of Measure" := DimValRec."Unit of Measure";
          ExtraCost.Amount := TravelCostWithIndexDate;
          ExtraCost.MODIFY(TRUE);

          LastLino := ExtraCost."Line No.";
        END;
      END;
    END;

    PROCEDURE CopyFromContract@1100525000();
    VAR
      ServOrder@1100525000 : Record 11012823;
    BEGIN
      TESTFIELD("Entity Type", "Entity Type"::"Service Order"); //only works for service orders
      ServOrder.GET("Entity Code");
      ServOrder.CopyExtraCost();
    END;

    PROCEDURE InsertCostPlusEntry@1100528301();
    VAR
      ServiceOrderCostPlusEntry@1100528300 : Record 11012825;
      ServiceOrder@1100528302 : Record 11012823;
      "4PSMobileSetup"@1100528303 : Record 11012676;
      LastLineNo@1100528301 : Integer;
      Price@1100525000 : Decimal;
    BEGIN
      IF ("Entity Type" <> "Entity Type"::"Service Order") THEN
        EXIT;
      IF NOT Skip4PSMobileCheck THEN
        IF "4PSMobileSetup".READPERMISSION THEN
          IF "4PSMobileSetup".GET THEN
            IF ("4PSMobileSetup"."4PS-Mobile Active") THEN
              EXIT;
      ServiceOrder.GET("Entity Code");
      ServiceOrder.CheckStatus(1);

      ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", "Entity Code");
      IF (ServiceOrderCostPlusEntry.FINDLAST) THEN
        LastLineNo := ServiceOrderCostPlusEntry."Line No."
      ELSE
        LastLineNo := 0;

      LastLineNo += 10000;
      ServiceOrderCostPlusEntry.INIT;
      ServiceOrderCostPlusEntry.VALIDATE("Service Order No.", "Entity Code");
      ServiceOrderCostPlusEntry."Line No." := LastLineNo;
      ServiceOrderCostPlusEntry.VALIDATE("Cost Object", "Cost Object");
      ServiceOrderCostPlusEntry.VALIDATE(Description, Description);
      ServiceOrderCostPlusEntry.VALIDATE(Quantity, Quantity);
      ServiceOrderCostPlusEntry.VALIDATE("Unit of Measure", "Unit of Measure");
      IF Amount <> 0 THEN BEGIN
        IF Quantity <> 0 THEN
          Price := Amount / Quantity
        ELSE
          Price := Amount;
        ServiceOrderCostPlusEntry.VALIDATE("Basic Price (LCY)", Price);
      END;
      ServiceOrderCostPlusEntry."Extra Cost" := TRUE;

      ServiceOrderCostPlusEntry.INSERT(TRUE);

      "Cost Plus Line No." := ServiceOrderCostPlusEntry."Line No.";
    END;

    PROCEDURE ModifyCostPlusEntry@1100528304();
    VAR
      ServiceOrderCostPlusEntry@1100528300 : Record 11012825;
      ServiceOrder@1100528302 : Record 11012823;
      "4PSMobileSetup"@1100528303 : Record 11012676;
      Price@1100525000 : Decimal;
    BEGIN
      IF ("Entity Type" <> "Entity Type"::"Service Order") THEN
        EXIT;
      IF ("Cost Plus Line No." = 0) THEN
        EXIT;
      IF NOT Skip4PSMobileCheck THEN
        IF "4PSMobileSetup".READPERMISSION THEN
          IF "4PSMobileSetup".GET THEN
            IF ("4PSMobileSetup"."4PS-Mobile Active") THEN
              EXIT;
      IF (NOT ServiceOrderCostPlusEntry.GET("Entity Code", "Cost Plus Line No.")) THEN
        EXIT;
      IF (ServiceOrderCostPlusEntry.Invoiced) THEN
        EXIT;
      ServiceOrder.GET("Entity Code");
      ServiceOrder.CheckStatus(1);

      ServiceOrderCostPlusEntry.VALIDATE("Cost Object", "Cost Object");
      ServiceOrderCostPlusEntry.VALIDATE(Description, Description);
      ServiceOrderCostPlusEntry.VALIDATE(Quantity, Quantity);
      ServiceOrderCostPlusEntry.VALIDATE("Unit of Measure", "Unit of Measure");
      IF Amount <> 0 THEN BEGIN
        IF Quantity <> 0 THEN
          Price := Amount / Quantity
        ELSE
          Price := Amount;
        ServiceOrderCostPlusEntry.VALIDATE("Basic Price (LCY)", Price);
      END;
      ServiceOrderCostPlusEntry.MODIFY(TRUE);
    END;

    PROCEDURE DeleteCostPlusEntry@1100528305();
    VAR
      ServiceOrderCostPlusEntry@1100528300 : Record 11012825;
      ServiceOrder@1100528302 : Record 11012823;
      "4PSMobileSetup"@1100528303 : Record 11012676;
    BEGIN
      IF ("Entity Type" <> "Entity Type"::"Service Order") THEN
        EXIT;
      IF ("Cost Plus Line No." = 0) THEN
        EXIT;
      IF NOT Skip4PSMobileCheck THEN
        IF "4PSMobileSetup".READPERMISSION THEN
          IF "4PSMobileSetup".GET THEN
            IF ("4PSMobileSetup"."4PS-Mobile Active") THEN
              EXIT;
      ServiceOrder.GET("Entity Code");
      ServiceOrder.CheckStatus(1);

      ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", "Entity Code");
      ServiceOrderCostPlusEntry.SETRANGE("Line No.", "Cost Plus Line No.");
      ServiceOrderCostPlusEntry.SETRANGE(Invoiced, FALSE);

      ServiceOrderCostPlusEntry.DELETEALL(TRUE);
    END;

    PROCEDURE SetSkip4PSMobileCheck@1100525001(ISkip4PSMobileCheck@1100525000 : Boolean);
    BEGIN
      Skip4PSMobileCheck := ISkip4PSMobileCheck;
    END;

    BEGIN
    END.
  }
}

