OBJECT Table 11020395 Impl. Company Table
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=VAR
               Text001@1100525001 : TextConst 'ENU="No Insert permission "';
             BEGIN
             END;

    CaptionML=ENU=Implementation Company Table;
    LookupPageID=Page11072500;
  }
  FIELDS
  {
    { 5   ;   ;Database Abbreviation;Text30       ;TableRelation="Impl. Company"."Database Abbreviation";
                                                   CaptionML=ENU=Database Abbreviation }
    { 7   ;   ;Company Abbreviation;Text30        ;TableRelation="Impl. Company"."Company Abbreviation" WHERE (Database Abbreviation=FIELD(Database Abbreviation));
                                                   CaptionML=ENU=Company Abbreviation }
    { 10  ;   ;Database Company    ;Text30        ;FieldClass=Normal;
                                                   CaptionML=ENU=Database Company;
                                                   Editable=No }
    { 20  ;   ;Table ID            ;Integer       ;CaptionML=ENU=Table ID;
                                                   Editable=No }
    { 30  ;   ;Defined Table Type  ;Option        ;CaptionML=ENU=Defined Table Type;
                                                   OptionCaptionML=ENU=,Setup,Common Data,Basic Data,Financial Setup,Basic Cards,Input,Transaction,Not Applicable,Tools;
                                                   OptionString=[ ,Setup,Common Data,Basic Data,Financial Setup,Basic Cards,Input,Transaction,Not Applicable,Tools] }
    { 35  ;   ;Type of Table       ;Option        ;CaptionML=ENU=Type of Table;
                                                   OptionCaptionML=ENU=,Setup,Common Data,Basic Data,Financial Setup,Basic Cards,Input,Transaction,Not Applicable,Tools;
                                                   OptionString=[ ,Setup,Common Data,Basic Data,Financial Setup,Basic Cards,Input,Transaction,Not Applicable,Tools];
                                                   Editable=No }
    { 50  ;   ;Table Name          ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Object.Name WHERE (Type=CONST(Table),
                                                                                         ID=FIELD(Table ID)));
                                                   CaptionML=ENU=Table Name;
                                                   Editable=No }
    { 60  ;   ;Table Caption       ;Text100       ;CaptionML=ENU=Table Caption;
                                                   Editable=No }
    { 87  ;   ;Central Modified Data;Boolean      ;CaptionML=ENU=Central Modified Data }
    { 90  ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                IF Status = Status::Definitief THEN BEGIN
                                                                  IF "Date Finished" = 0D THEN
                                                                    "Date Finished" := TODAY;
                                                                END ELSE
                                                                  "Date Finished" := 0D;
                                                              END;

                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=In Process,Testing,Final;
                                                   OptionString=Uitvoering,Testgereed,Definitief }
    { 95  ;   ;Responsable Person  ;Code10        ;TableRelation="Implementation Person".Code;
                                                   CaptionML=ENU=Responsable Person }
    { 100 ;   ;Page ID             ;Integer       ;TableRelation=Object.ID WHERE (Type=CONST(Page));
                                                   CaptionML=ENU=Page ID }
    { 120 ;   ;No. Of Comments     ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Impl. Company Table Comment" WHERE (Database Abbreviation=FIELD(Database Abbreviation),
                                                                                                          Company Abbreviation=FIELD(Company Abbreviation),
                                                                                                          Table ID=FIELD(Table ID)));
                                                   CaptionML=ENU=No. Of Remarkst;
                                                   Editable=No }
    { 130 ;   ;Expected Finish Date;Date          ;CaptionML=ENU=Expected Finish Date }
    { 140 ;   ;Date Finished       ;Date          ;CaptionML=ENU=Finish Date }
    { 150 ;   ;License permission  ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("License Permission"."Read Permission" WHERE (Object Type=CONST(TableData),
                                                                                                                    Object Number=FIELD(Table ID)));
                                                   CaptionML=ENU=Current License Permission;
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect];
                                                   Editable=No }
    { 160 ;   ;Granule             ;Text250       ;CaptionML=ENU=Granule;
                                                   Editable=No }
    { 170 ;   ;Granule Name        ;Text50        ;CaptionML=ENU=Granule Name;
                                                   Editable=No }
    { 200 ;   ;Delete Data         ;Option        ;OnValidate=VAR
                                                                ImplMgt@1100525000 : Codeunit 11125345;
                                                                lvText001@1100525001 : TextConst 'ENU=Option %1 not allowed';
                                                              BEGIN
                                                                IF "Delete Data" = "Delete Data"::Yes THEN
                                                                  IF NOT ImplMgt.ISDevLicenseActive THEN
                                                                    ERROR(STRSUBSTNO(lvText001,"Delete Data"));
                                                              END;

                                                   CaptionML=ENU=Delete Data;
                                                   OptionCaptionML=ENU=No,Yes;
                                                   OptionString=No,Yes }
    { 300 ;   ;Check Data          ;Option        ;OnValidate=VAR
                                                                lvExtendedTablePropRec@1100525000 : Record 11020573;
                                                                lvText001@1100525001 : TextConst 'ENU=Create Check Setup Lines not possible for table %1';
                                                              BEGIN
                                                                IF "Check Data" = "Check Data"::Yes THEN
                                                                  IF NOT lvExtendedTablePropRec.IsCheckSetupLineAllowed("Table ID") THEN
                                                                    ERROR(STRSUBSTNO(lvText001,"Table ID"));
                                                              END;

                                                   CaptionML=ENU=Check Setup;
                                                   OptionCaptionML=ENU=No,Yes;
                                                   OptionString=No,Yes }
    { 400 ;   ;Copy Data           ;Option        ;OnValidate=VAR
                                                                ImplMgt@1100525000 : Codeunit 11125345;
                                                                lvText001@1100525001 : TextConst 'ENU=Option %1 not allowed';
                                                              BEGIN
                                                                IF "Copy Data" = "Copy Data"::Yes THEN
                                                                  IF NOT ImplMgt.ISDevLicenseActive THEN
                                                                    ERROR(STRSUBSTNO(lvText001,"Copy Data"));
                                                              END;

                                                   CaptionML=ENU=Copy Data;
                                                   OptionCaptionML=ENU=No,Yes;
                                                   OptionString=No,Yes }
    { 500 ;   ;Create RIM Migration Table;Option  ;OnValidate=VAR
                                                                lvExtendedTablePropRec@1100525000 : Record 11020573;
                                                                lvText001@1100525001 : TextConst 'ENU=Create Rim Migration Table not possible for table %1';
                                                              BEGIN
                                                                IF "Create RIM Migration Table" = "Create RIM Migration Table"::Yes THEN
                                                                  IF NOT lvExtendedTablePropRec.IsRimImportExportAllowed("Table ID") THEN
                                                                    ERROR(STRSUBSTNO(lvText001,"Table ID"));
                                                              END;

                                                   CaptionML=ENU=Create Rim Migration Table;
                                                   OptionCaptionML=ENU=No,Yes;
                                                   OptionString=No,Yes }
    { 600 ;   ;Create XML Migration Table;Option  ;OnValidate=VAR
                                                                ExtendedTableProperty@1100525000 : Record 11020573;
                                                                Text001@1100525001 : TextConst 'ENU=Create Rim Migration Table not possible for table %1';
                                                                XMLMigrationTable@1100525002 : Record 11020619;
                                                              BEGIN
                                                                IF "Create XML Migration Table" = "Create XML Migration Table"::Yes THEN
                                                                  IF NOT ExtendedTableProperty.IsXMLImportExportAllowed("Table ID") THEN
                                                                    ERROR(STRSUBSTNO(Text001,"Table ID",XMLMigrationTable.TABLECAPTION));
                                                              END;

                                                   CaptionML=ENU=Create XML Export Table;
                                                   OptionCaptionML=ENU=No,Yes;
                                                   OptionString=No,Yes }
    { 610 ;   ;No. Of Records      ;Integer       ;CaptionML=ENU=No. Of Records;
                                                   Editable=No }
    { 620 ;   ;Global Table        ;Boolean       ;CaptionML=ENU=Global Table;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Database Abbreviation,Company Abbreviation,Table ID;
                                                   Clustered=Yes }
    {    ;Database Abbreviation,Company Abbreviation,Defined Table Type }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Window@1100525003 : Dialog;
      Progress@1100525002 : Integer;
      NoOfRecords@1100525001 : Integer;
      Counter@1100525000 : Integer;
      Text001@1100525004 : TextConst 'ENU=Automatic Data Conversion %1 (%2)  @1@@@@@@@@@@@@@';
      Text003@1100525005 : TextConst 'ENU=It''s Not allowed to copy to Live company';
      Text013@1100529200 : TextConst 'ENU=It''s Not allowed to copy to Live company';
      Text014@1100525007 : TextConst 'ENU=Initialize Tables  @1@@@@@@@@@@@@@';
      Text015@1100525006 : TextConst 'ENU=Update Tables @1@@@@@@@@@@@@@';

    PROCEDURE CopyDataInTablesRange@1100525001(SourceDBAbbrTxt@1100525009 : Text[30];SourceCompAbbrTxt@1100525008 : Text[30];CopyDBAbbrTxt@1100525004 : Text[30];CopyCompAbbrTxt@1100525001 : Text[30];SetupBln@1100525003 : Boolean;CommonBln@1100525011 : Boolean;BasicDataBln@1100525010 : Boolean;FinanceSetupBln@1100525012 : Boolean);
    VAR
      lvSourceCompRec@1100525005 : Record 11020394;
      lvCopyCompRec@1100525013 : Record 11020394;
      lvTablesByTypeRec@1100525006 : Record 11020395;
      lvText020@1100525002 : TextConst 'ENU=Data in tables in selected table types will be copied from %1 to %2, continue?';
      lvTablesByTypeCopyRec@1100525007 : Record 11020395;
    BEGIN
      lvSourceCompRec.GET(SourceDBAbbrTxt,SourceCompAbbrTxt);
      lvCopyCompRec.GET(CopyDBAbbrTxt,CopyCompAbbrTxt);

      IF lvCopyCompRec."Type Of Company" = lvCopyCompRec."Type Of Company"::"Live Company" THEN
        ERROR(Text003);

      IF NOT CONFIRM(STRSUBSTNO(lvText020,SourceCompAbbrTxt,CopyCompAbbrTxt)) THEN
        EXIT;

      lvTablesByTypeRec.SETCURRENTKEY("Database Abbreviation","Company Abbreviation","Table ID");
      lvTablesByTypeRec.SETRANGE("Database Abbreviation",SourceDBAbbrTxt);
      lvTablesByTypeRec.SETRANGE("Company Abbreviation",SourceCompAbbrTxt);
      lvTablesByTypeRec.SETRANGE("Copy Data",lvTablesByTypeRec."Copy Data"::Yes);
      lvTablesByTypeRec.SETFILTER("License permission",'<>%1',lvTablesByTypeRec."License permission"::" ");

      IF SetupBln THEN BEGIN
        lvTablesByTypeRec.SETRANGE("Defined Table Type",lvTablesByTypeRec."Defined Table Type"::Setup);
        IF lvTablesByTypeRec.FINDFIRST THEN BEGIN
          Window.OPEN(STRSUBSTNO(Text001,lvTablesByTypeRec."Defined Table Type"::Setup));
          NoOfRecords := lvTablesByTypeRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            UpdateProgressWindow(Counter);
            CopyData(lvTablesByTypeRec."Table ID",lvSourceCompRec."Database Company",lvCopyCompRec."Database Company");
          UNTIL lvTablesByTypeRec.NEXT = 0;
          Window.CLOSE;
        END;
      END;

      IF CommonBln THEN BEGIN
        lvTablesByTypeRec.SETRANGE("Defined Table Type",lvTablesByTypeRec."Defined Table Type"::"Common Data");
        IF lvTablesByTypeRec.FINDFIRST THEN BEGIN
          Window.OPEN(STRSUBSTNO(Text001,lvTablesByTypeRec."Defined Table Type"::"Common Data"));
          NoOfRecords := lvTablesByTypeRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            UpdateProgressWindow(Counter);
            CopyData(lvTablesByTypeRec."Table ID",lvSourceCompRec."Database Company",lvCopyCompRec."Database Company");
          UNTIL lvTablesByTypeRec.NEXT = 0;
          Window.CLOSE;
        END;
      END;

      IF BasicDataBln THEN BEGIN
        lvTablesByTypeRec.SETRANGE("Defined Table Type",lvTablesByTypeRec."Defined Table Type"::"Basic Data");
        IF lvTablesByTypeRec.FINDFIRST THEN BEGIN
          Window.OPEN(STRSUBSTNO(Text001,lvTablesByTypeRec."Defined Table Type"::"Basic Data"));
          NoOfRecords := lvTablesByTypeRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            UpdateProgressWindow(Counter);
            CopyData(lvTablesByTypeRec."Table ID",lvSourceCompRec."Database Company",lvCopyCompRec."Database Company");
          UNTIL lvTablesByTypeRec.NEXT = 0;
          Window.CLOSE;
        END;
      END;

      IF FinanceSetupBln THEN BEGIN
        lvTablesByTypeRec.SETRANGE("Defined Table Type",lvTablesByTypeRec."Defined Table Type"::"Financial Setup");
        IF lvTablesByTypeRec.FINDFIRST THEN BEGIN
          Window.OPEN(STRSUBSTNO(Text001,lvTablesByTypeRec."Defined Table Type"::"Financial Setup"));
          NoOfRecords := lvTablesByTypeRec.COUNT;
          Counter := 0;
          REPEAT
            Counter := Counter + 1;
            UpdateProgressWindow(Counter);
            CopyData(lvTablesByTypeRec."Table ID",lvSourceCompRec."Database Company",lvCopyCompRec."Database Company");
          UNTIL lvTablesByTypeRec.NEXT = 0;
          Window.CLOSE;
        END;
      END;

      CLEAR(lvTablesByTypeRec);
      lvTablesByTypeRec.SETCURRENTKEY("Database Abbreviation","Company Abbreviation","Table ID");
      lvTablesByTypeRec.SETRANGE("Database Abbreviation",SourceDBAbbrTxt);
      lvTablesByTypeRec.SETRANGE("Company Abbreviation",SourceCompAbbrTxt);
      IF lvTablesByTypeRec.FINDFIRST THEN
        REPEAT
          lvTablesByTypeCopyRec.COPY(lvTablesByTypeRec);
          lvTablesByTypeCopyRec."Database Abbreviation" := CopyDBAbbrTxt;
          lvTablesByTypeCopyRec."Company Abbreviation" := CopyCompAbbrTxt;
          lvTablesByTypeCopyRec."Database Company" := lvCopyCompRec."Database Company";
          IF lvTablesByTypeCopyRec.INSERT THEN;
        UNTIL lvTablesByTypeRec.NEXT = 0;
    END;

    PROCEDURE CopyData@1100525011(TableID@1100525001 : Integer;SourceComp@1100525003 : Text[30];CopyComp@1100525004 : Text[30]);
    VAR
      lvExistingDataRecRef@1100525000 : RecordRef;
      lvOrgDataRecRef@1100525002 : RecordRef;
      lvNewDataRecRef@1100525005 : RecordRef;
    BEGIN
      IF TableID = 0 THEN
        EXIT;

      lvExistingDataRecRef.OPEN(TableID,FALSE,CopyComp);
      lvExistingDataRecRef.DELETEALL;

      lvNewDataRecRef.OPEN(TableID,FALSE,CopyComp);
      lvOrgDataRecRef.OPEN(TableID,FALSE,SourceComp);
      IF lvOrgDataRecRef.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          ConvertData(lvOrgDataRecRef,lvNewDataRecRef,TableID);
        UNTIL lvOrgDataRecRef.NEXT = 0;
      END;
    END;

    PROCEDURE ConvertData@1100485000(lvRecRef@1100485004 : RecordRef;lvRecRef2@1100485005 : RecordRef;lvOldTableNo@1100485001 : Integer);
    VAR
      lvFieldRec@1100485000 : Record 2000000041;
      lvFldRef@1100485003 : FieldRef;
      lvFldRef2@1100485002 : FieldRef;
    BEGIN
      lvFieldRec.SETRANGE(TableNo, lvOldTableNo);
      lvFieldRec.SETRANGE(Class, lvFieldRec.Class::Normal);
      lvFieldRec.SETRANGE(Enabled, TRUE);
      lvFieldRec.SETFILTER(Type,'<>%1', lvFieldRec.Type::BLOB);
      IF lvFieldRec.FIND('-') THEN
        REPEAT
          lvFldRef := lvRecRef.FIELD(lvFieldRec."No.");
          lvFldRef2 := lvRecRef2.FIELD(lvFieldRec."No.");
          lvFldRef2.VALUE(lvFldRef.VALUE);
        UNTIL lvFieldRec.NEXT=0;

      lvRecRef2.INSERT;
    END;

    PROCEDURE UpdateProgressWindow@1100525005(NewProgress@11012000 : Integer);
    BEGIN
      IF NoOfRecords > 0 THEN BEGIN
        NewProgress := ROUND(NewProgress / NoOfRecords * 100,1);
        IF (NewProgress <> Progress) THEN
          Window.UPDATE(1,100 * NewProgress);
        Progress := NewProgress;
      END;
    END;

    PROCEDURE CreateRIMMigrationTable@1100525003(TableID@1100525001 : Integer);
    VAR
      lvMigrationRec@1100525000 : Record 8613;
    BEGIN
      IF TableID = 0 THEN
        EXIT;

      lvMigrationRec.INIT;
      lvMigrationRec.VALIDATE("Table ID",TableID);
      lvMigrationRec.INSERT(TRUE);
    END;

    PROCEDURE CreateXMLMigrationTable@1100525111(TableID@1100525001 : Integer);
    VAR
      XMLMigrationTable@1100525000 : Record 11020619;
    BEGIN
      IF TableID = 0 THEN
        EXIT;

      XMLMigrationTable.INIT;
      XMLMigrationTable.VALIDATE("Table ID",TableID);
      XMLMigrationTable.INSERT(TRUE);
    END;

    PROCEDURE RIMTablePossible@1100525014(VAR ExtDataRec@1100525000 : Record 11020573) : Boolean;
    BEGIN
      EXIT(
        ExtDataRec."Type of Table" IN [
          ExtDataRec."Type of Table"::"Common Data",
          ExtDataRec."Type of Table"::"Basic Data",
          ExtDataRec."Type of Table"::"Financial Setup"]);
    END;

    PROCEDURE XMLTablePossible@1100525004(VAR ExtDataRec@1100525000 : Record 11020573) : Boolean;
    BEGIN
      EXIT(
        ExtDataRec."Type of Table" IN [
          ExtDataRec."Type of Table"::Setup,
          ExtDataRec."Type of Table"::"Common Data",
          ExtDataRec."Type of Table"::"Basic Data",
          ExtDataRec."Type of Table"::"Financial Setup"]);
    END;

    PROCEDURE UpdateImplTables@1100525000(ImplCompany@1100525000 : Record 11020394;UpdateBln@1100525004 : Boolean);
    VAR
      ExtendedTableProperty@1100525002 : Record 11020573;
      ImplCompanyTable@1100525003 : Record 11020395;
      Object@1100409000 : Record 2000000001;
    BEGIN
      CLEAR(ImplCompanyTable);
      IF ExtendedTableProperty.FINDSET(FALSE,FALSE) THEN BEGIN
        IF UpdateBln THEN
          Window.OPEN(STRSUBSTNO(Text015))
        ELSE
          Window.OPEN(STRSUBSTNO(Text014));
        NoOfRecords := ExtendedTableProperty.COUNT;
        Counter := 0;
        REPEAT
          Counter := Counter + 1;
          UpdateProgressWindow(Counter);
          IF NOT ImplCompanyTable.GET(
              ImplCompany."Database Abbreviation",
              ImplCompany."Company Abbreviation",
              ExtendedTableProperty."Table ID") THEN BEGIN
            ImplCompanyTable.INIT;
            ImplCompanyTable.VALIDATE("Table ID",ExtendedTableProperty."Table ID");
            ImplCompanyTable.VALIDATE("Type of Table",ExtendedTableProperty."Type of Table");
            ImplCompanyTable."Database Abbreviation" := ImplCompany."Database Abbreviation";
            ImplCompanyTable."Company Abbreviation" := ImplCompany."Company Abbreviation";
            ImplCompanyTable."Defined Table Type" := ExtendedTableProperty."Type of Table";
            ImplCompanyTable.INSERT;
          END;
          ExtendedTableProperty.CALCFIELDS("Table Caption");
          IF NOT UpdateBln THEN
            ImplCompanyTable."Defined Table Type" := ExtendedTableProperty."Type of Table";
          ImplCompanyTable."Database Company" := ImplCompany."Database Company";
          ImplCompanyTable."Type of Table" := ExtendedTableProperty."Type of Table";
          ImplCompanyTable."Page ID" := ExtendedTableProperty."Page ID";
          ImplCompanyTable.Granule := ExtendedTableProperty.Granule;
          ImplCompanyTable."Granule Name" := ExtendedTableProperty."Granule Name";
          ImplCompanyTable."Table Caption" := ExtendedTableProperty."Table Caption";
          ImplCompanyTable.CALCFIELDS("License permission");
          IF (ImplCompanyTable."License permission" = ImplCompanyTable."License permission"::Yes) THEN BEGIN
            ImplCompanyTable."No. Of Records" := ImplCompanyTable.GetNoOfDatabaseRecords;
            ImplCompanyTable."Global Table" := ImplCompanyTable.TableIsGlobalTable;
          END;
          ImplCompanyTable.MODIFY;
        UNTIL ExtendedTableProperty.NEXT = 0;
        Window.CLOSE;
      END;

      CLEAR(ImplCompanyTable);
      ImplCompanyTable.SETRANGE("Database Abbreviation",ImplCompany."Database Abbreviation");
      ImplCompanyTable.SETRANGE("Company Abbreviation",ImplCompany."Company Abbreviation");
      IF ImplCompanyTable.FINDSET(TRUE,TRUE) THEN
        REPEAT
          IF NOT Object.GET(Object.Type::Table,'',ImplCompanyTable."Table ID") THEN
            ImplCompanyTable.DELETE(TRUE);
        UNTIL ImplCompanyTable.NEXT = 0;
    END;

    PROCEDURE GetNoOfDatabaseRecords@15() : Integer;
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      IF "Table ID" = 0 THEN
        EXIT(0);

      CALCFIELDS("License permission");
      IF "License permission" = "License permission"::" " THEN
        EXIT(0);

      RecRef.OPEN("Table ID",FALSE,"Database Company");
      EXIT(RecRef.COUNT);
    END;

    PROCEDURE TableIsGlobalTable@1100529200() : Boolean;
    VAR
      TableInformation@1100529200 : Record 2000000028;
    BEGIN
      TableInformation.SETRANGE("Company Name",' ');
      TableInformation.SETRANGE("Table No.","Table ID");
      EXIT(NOT TableInformation.ISEMPTY);
    END;

    BEGIN
    END.
  }
}

