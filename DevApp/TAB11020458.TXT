OBJECT Table 11020458 Estimate Composition NEW
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnModify=BEGIN
               Changed := TRUE;
             END;

    CaptionML=ENU=Estimate Composition;
    LookupPageID=Page11229769;
  }
  FIELDS
  {
    { 10  ;   ;Estimate No.        ;Code20        ;TableRelation=Estimate.No.;
                                                   CaptionML=ENU=Estimate No.;
                                                   Editable=No }
    { 20  ;   ;Sub-Estimate No.    ;Code20        ;TableRelation="Sub-Estimate NEW"."Sub-Estimate No." WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Sub-Estimate No. }
    { 25  ;   ;Part Group          ;Code10        ;TableRelation="Sub-Estimate NEW"."Part Group" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                        Sub-Estimate No.=FIELD(Sub-Estimate No.));
                                                   CaptionML=ENU=Part Group }
    { 30  ;   ;Part                ;Code20        ;TableRelation="Estimate Part NEW".Part WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                 Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                 Part Group=FIELD(Part Group));
                                                   CaptionML=ENU=Part }
    { 40  ;   ;Estimate Line       ;Integer       ;TableRelation="Estimate Line NEW"."Line No." WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                       Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                       Part=FIELD(Part));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Estimate Line }
    { 43  ;   ;Estimate Level Sub-Estimate;Integer;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sub-Estimate NEW".Level WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                      Sub-Estimate No.=FIELD(Sub-Estimate No.)));
                                                   CaptionML=ENU=Estimate Level Sub-Estimat }
    { 45  ;   ;Estimate Level Part ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Estimate Part NEW".Level WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                       Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                       Part Group=FIELD(Part Group),
                                                                                                       Part=FIELD(Part)));
                                                   CaptionML=ENU=Estimate Level Part }
    { 50  ;   ;Recipe Line         ;Integer       ;CaptionML=ENU=Recipe Line }
    { 51  ;   ;Recipe              ;Code20        ;TableRelation="Base Recipe".No. WHERE (Recipe Group=FIELD(Recipe Group));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Recipe }
    { 52  ;   ;Recipe Group        ;Code10        ;TableRelation="Recipe Group".No.;
                                                   CaptionML=ENU=Recipe Group }
    { 53  ;   ;Recipe Description  ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Base Recipe".Description WHERE (Recipe Group=FIELD(Recipe Group),
                                                                                                       No.=FIELD(Recipe)));
                                                   CaptionML=ENU=Recipe Description;
                                                   Editable=No }
    { 55  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 56  ;   ;Attached to Line No.;Integer       ;TableRelation="Estimate Line NEW"."Line No." WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                       Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                       Part Group=FIELD(Part Group),
                                                                                                       Part=FIELD(Part));
                                                   CaptionML=ENU=Attached to Line No.;
                                                   Editable=No }
    { 57  ;   ;Set Level           ;Integer       ;CaptionML=ENU=Set Level }
    { 58  ;   ;Set Code            ;Code10        ;TableRelation="Plant Set";
                                                   CaptionML=ENU=Set Code;
                                                   Editable=No }
    { 60  ;   ;Description         ;Text100       ;CaptionML=ENU=Description }
    { 75  ;   ;Compressed          ;Boolean       ;CaptionML=ENU=Compressed }
    { 80  ;   ;Quantity            ;Decimal       ;CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 85  ;   ;Part Quantity       ;Decimal       ;CaptionML=ENU=Part Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 86  ;   ;Cumulative Quantity ;Decimal       ;CaptionML=ENU=Cumulative Quantity;
                                                   DecimalPlaces=0:5 }
    { 90  ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Unit of Measure") THEN
                                                                  IF "Unit of Measure" <>  xRec."Unit of Measure" THEN
                                                                    CheckItemUnitConversion(Rec, xRec);
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;
                                                            END;

                                                   CaptionML=ENU=Unit of Measure }
    { 91  ;   ;Unit Factor         ;Decimal       ;InitValue=1;
                                                   CaptionML=ENU=Unit Factor;
                                                   Editable=No }
    { 95  ;   ;Norm Group          ;Code10        ;TableRelation="Norm Group".Code;
                                                   CaptionML=ENU=Norm Group }
    { 96  ;   ;Sub Operation Code  ;Code20        ;TableRelation="Sub Operation".Code;
                                                   CaptionML=ENU=Sub Operation Code }
    { 100 ;   ;Norm                ;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Norm;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 110 ;   ;Nett Cost Price     ;Decimal       ;OnValidate=BEGIN
                                                                CalculateDiscount(FALSE);
                                                                PlantMgt.CalcBuyBackRates("Item No.","Plant Type",0,"Nett Cost Price","Buy Back Price","Buy Back %");  //DP00381
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Nett Cost Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 115 ;   ;Purchase Discount % ;Decimal       ;OnValidate=BEGIN
                                                                CalculateNettPrice;
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Purchase Discount %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 120 ;   ;Gross Price         ;Decimal       ;OnValidate=BEGIN
                                                                CalculateNettPrice;
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Gross Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 141 ;   ;Buy Back Price      ;Decimal       ;OnValidate=BEGIN
                                                                PlantMgt.CalcBuyBackRates("Item No.","Plant Type",1,"Nett Cost Price","Buy Back Price","Buy Back %");  //DP00381
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Buy Back Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 144 ;   ;Buy Back %          ;Decimal       ;OnValidate=BEGIN
                                                                PlantMgt.CalcBuyBackRates("Item No.","Plant Type",2,"Nett Cost Price","Buy Back Price","Buy Back %");  //DP00381
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Buy Back %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 150 ;   ;Rate Code           ;Code10        ;TableRelation="Estimate Rate"."Rate Code" WHERE (Estimate No.=FIELD(Estimate No.));
                                                   OnValidate=VAR
                                                                RateRec@1210190000 : Record 11012160;
                                                              BEGIN
                                                                IF RateRec.GET("Estimate No.","Rate Code") THEN BEGIN
                                                                  "Cost Rate" := RateRec."Cost Rate";
                                                                  "Sales Rate" := RateRec."Sales Rate";  //DP00381
                                                                  "Rate Type" := RateRec."Rate Type";
                                                                  "Team Size" := RateRec."Team Size";
                                                                  IF ("Rate Type" <> xRec."Rate Type") THEN BEGIN
                                                                    IF "Rate Type" = "Rate Type"::Hours THEN BEGIN
                                                                      Norm := Norm / 60;
                                                                      "Norm (Sales)" := "Norm (Sales)" / 60;  //DP00381
                                                                    END ELSE BEGIN
                                                                      Norm := Norm * 60;
                                                                      "Norm (Sales)" := "Norm (Sales)" * 60;  //DP00381
                                                                    END;
                                                                  END;
                                                                  IF ("Team Size" <> xRec."Team Size") THEN BEGIN
                                                                    IF "Team Size" <> 0 THEN BEGIN
                                                                      Norm := Norm / "Team Size";
                                                                      "Norm (Sales)" := "Norm (Sales)" / "Team Size";  //DPP00381
                                                                    END;
                                                                    IF xRec."Team Size" <> 0 THEN BEGIN
                                                                      Norm := Norm * xRec."Team Size";
                                                                      "Norm (Sales)" := "Norm (Sales)" * xRec."Team Size";  //DP00381
                                                                    END;
                                                                  END;
                                                                END;
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Rate Code }
    { 151 ;   ;Cost Rate           ;Decimal       ;CaptionML=ENU=Cost Rate;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 152 ;   ;Rate Type           ;Option        ;CaptionML=ENU=Rate Type;
                                                   OptionCaptionML=ENU=Hours,Minuts;
                                                   OptionString=Hours,Minuts;
                                                   Editable=No }
    { 153 ;   ;Team Size           ;Decimal       ;CaptionML=ENU=Team Size;
                                                   Editable=No }
    { 160 ;   ;Text Composition    ;Code140       ;CaptionML=ENU=Text Composition;
                                                   Editable=No }
    { 200 ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::Item);
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 210 ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::"Basic Item");
                                                              END;

                                                   CaptionML=ENU=Basic Item }
    { 220 ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::"Trade Item");
                                                              END;

                                                   CaptionML=ENU=Trade Item }
    { 240 ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=VAR
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") AND ("Vendor (Trade Item)" <> '') THEN BEGIN
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  //db.sn, 17-12-10: M18021
                                                                  IF lvExecValidate THEN BEGIN
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item")
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor");
                                                                  END;
                                                                  //db.en, 17-12-10: M18021
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 250 ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Manufacturer }
    { 260 ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   CaptionML=ENU=Plant Type;
                                                   Editable=No }
    { 270 ;   ;Weight              ;Decimal       ;CaptionML=ENU=Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 271 ;   ;Total Weight        ;Decimal       ;CaptionML=ENU=Total Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 280 ;   ;Ask for Quote       ;Boolean       ;OnValidate=BEGIN
                                                                IF "Ask for Quote" THEN BEGIN
                                                                  IF ("Nett Cost Price" = 0) AND ("Cost Object Price" = '') THEN BEGIN
                                                                    "Ask for Quote" := FALSE;
                                                                    IF CurrFieldNo <> 0 THEN
                                                                      FIELDERROR("Ask for Quote", Text002);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Ask for Quote }
    { 290 ;   ;Purchase Route Reference;Code20    ;CaptionML=ENU=Purchase Route Reference;
                                                   Editable=No }
    { 300 ;   ;Compress No.        ;Integer       ;CaptionML=ENU=Compress No.;
                                                   Editable=No }
    { 310 ;   ;Zero Line           ;Boolean       ;CaptionML=ENU=Zero Line }
    { 320 ;   ;Document No.        ;Code20        ;TableRelation="Document Properties";
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Document No. }
    { 330 ;   ;Code                ;Code20        ;CaptionML=ENU=Code }
    { 340 ;   ;Price Agreement     ;Boolean       ;CaptionML=ENU=Price Agreement }
    { 341 ;   ;Norm Agreement      ;Boolean       ;CaptionML=ENU=Norm Agreement }
    { 350 ;   ;Vendor              ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Vendor }
    { 360 ;   ;Changed             ;Boolean       ;CaptionML=ENU=Changed;
                                                   Editable=No }
    { 370 ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   CaptionML=ENU=Cost Component }
    { 380 ;   ;Time Quantity       ;Decimal       ;InitValue=1;
                                                   CaptionML=ENU=Time Quantity;
                                                   BlankZero=Yes }
    { 390 ;   ;Unit of Time        ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=ENU=Unit of Time }
    { 400 ;   ;Hours               ;Decimal       ;CaptionML=ENU=Hours;
                                                   DecimalPlaces=2:;
                                                   Editable=No }
    { 410 ;   ;Labor Cost Amount   ;Decimal       ;CaptionML=ENU=Labor Cost Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 420 ;   ;Material Cost Amount;Decimal       ;CaptionML=ENU=Material Cost Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 421 ;   ;Gross Amount        ;Decimal       ;CaptionML=ENU=Gross Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 430 ;   ;Subcontracting Cost Amount;Decimal ;CaptionML=ENU=Subcontracting Cost Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 440 ;   ;Plant Cost Amount   ;Decimal       ;CaptionML=ENU=Plant Cost Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 441 ;   ;Buy Back Amount     ;Decimal       ;CaptionML=ENU=Buy Back Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 445 ;   ;Sundry Cost Amount  ;Decimal       ;CaptionML=ENU=Sundry Cost Amount;
                                                   Description=DP00381;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 450 ;   ;Cost Amount         ;Decimal       ;CaptionML=ENU=Cost Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 460 ;   ;Cum. Adj. Factor Hours;Decimal     ;CaptionML=ENU=Cum. Adjustment Factor Hours;
                                                   DecimalPlaces=0:6 }
    { 461 ;   ;Cum. Adj. Factor Price;Decimal     ;CaptionML=ENU=Cum. Adjustment Factor Price;
                                                   DecimalPlaces=0:6 }
    { 470 ;   ;Alternative Vendor  ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Alternative Vendor }
    { 480 ;   ;Alternative Item    ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD(Alternative Vendor));
                                                   CaptionML=ENU=Alternative Item }
    { 490 ;   ;Alternative Price   ;Decimal       ;CaptionML=ENU=Alternative Price;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 500 ;   ;Project No.         ;Code20        ;TableRelation=Job;
                                                   CaptionML=ENU=Project No. }
    { 510 ;   ;Element             ;Code20        ;TableRelation=IF (Project No.=FILTER('')) "Base Element".Code
                                                                 ELSE IF (Project No.=FILTER(<>'')) "Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                FormatMgt.FormatElem(Element,2,'');
                                                                IF Element <> '' THEN
                                                                  IF "Project No." <> '' THEN BEGIN
                                                                    IF NOT ProjElemRec.GET("Project No.", Element) THEN
                                                                      ElemRec.GET(Element);
                                                                  END ELSE
                                                                    ElemRec.GET(Element);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 520 ;   ;Line Status         ;Code10        ;TableRelation="Line Status".Status;
                                                   CaptionML=ENU=Line Status }
    { 530 ;   ;Purchase Action Mat.;Code10        ;TableRelation="Estimate Purchase Action".Code WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Purchase Action Material }
    { 531 ;   ;Purchase Phase Mat. ;Code10        ;CaptionML=ENU=Purchase Phase Material;
                                                   Numeric=Yes }
    { 540 ;   ;Purchase Action Subc.;Code10       ;TableRelation="Estimate Purchase Action".Code WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Purchase Action Subcontracting }
    { 541 ;   ;Purchase Phase Subc.;Code10        ;CaptionML=ENU=Purchase Phase Subcontracting;
                                                   Numeric=Yes }
    { 550 ;   ;Purchase Action Plant;Code10       ;TableRelation="Estimate Purchase Action".Code WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Purchase Action Plant }
    { 551 ;   ;Purchase Phase Plant;Code10        ;CaptionML=ENU=Purchase Phase Plant;
                                                   Numeric=Yes }
    { 560 ;   ;Sub-Estimate Description;Text50    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sub-Estimate NEW".Description WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                            Sub-Estimate No.=FIELD(Sub-Estimate No.)));
                                                   CaptionML=ENU=Estimate Part Description;
                                                   Editable=No }
    { 570 ;   ;Part Description    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Estimate Part NEW".Description WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                             Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                             Part=FIELD(Part)));
                                                   CaptionML=ENU=Part Description;
                                                   Editable=No }
    { 580 ;   ;Project Planning Activity Code;Code10;
                                                   TableRelation="Project Planning Base Activity";
                                                   OnValidate=VAR
                                                                ProjectPlanningActivity@1100528401 : Record 11012431;
                                                                ProjectPlanningBaseActivity@1100528402 : Record 11012434;
                                                                FormatManagement@1100528400 : Codeunit 11012022;
                                                              BEGIN
                                                                FormatManagement.FormatElem("Project Planning Activity Code", 20, '');
                                                                IF "Project Planning Activity Code" <> '' THEN
                                                                  IF "Project No." <> '' THEN BEGIN
                                                                    IF NOT ProjectPlanningActivity.GET("Project No." + "Project Planning Activity Code") THEN
                                                                      ProjectPlanningBaseActivity.GET("Project Planning Activity Code");
                                                                  END ELSE
                                                                    ProjectPlanningBaseActivity.GET("Project Planning Activity Code");
                                                              END;

                                                   OnLookup=VAR
                                                              ProjectPlanningActivity@1100528401 : Record 11012431;
                                                              ProjectPlanningBaseActivity@1100528400 : Record 11012434;
                                                            BEGIN
                                                              IF "Project No." <> '' THEN BEGIN
                                                                ProjectPlanningActivity.SETRANGE("Project No.", "Project No.");
                                                                ProjectPlanningActivity.Code := "Project Planning Activity Code";
                                                                IF PAGE.RUNMODAL(0, ProjectPlanningActivity) = ACTION::LookupOK THEN
                                                                  VALIDATE("Project Planning Activity Code", ProjectPlanningActivity.Code);
                                                              END ELSE BEGIN
                                                                ProjectPlanningBaseActivity.Code := "Project Planning Activity Code";
                                                                IF PAGE.RUNMODAL(0, ProjectPlanningBaseActivity) = ACTION::LookupOK THEN
                                                                  VALIDATE("Project Planning Activity Code", ProjectPlanningBaseActivity.Code);
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Project Planning Activity Code }
    { 585 ;   ;Extension Contract  ;Code10        ;TableRelation="Extension Contract"."Contract No." WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Extension Contract;
                                                   Description=DP00260 }
    { 590 ;   ;Uncoded Estimate Line;Boolean      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Estimate Line NEW"."Uncoded Line" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                Part Group=FIELD(Part Group),
                                                                                                                Part=FIELD(Part),
                                                                                                                Line No.=FIELD(Estimate Line)));
                                                   CaptionML=ENU=Uncoded Estimate Line;
                                                   Editable=No }
    { 595 ;   ;Uncoded Recipe Line ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Estimate Recipe Line"."Uncoded Line" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                   Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                   Part Group=FIELD(Part Group),
                                                                                                                   Part=FIELD(Part),
                                                                                                                   Estimate Line=FIELD(Estimate Line),
                                                                                                                   Line No.=FIELD(Recipe Line)));
                                                   CaptionML=ENU=Uncoded  Recipe Line;
                                                   Editable=No }
    { 600 ;   ;Discipline          ;Code10        ;TableRelation=Discipline;
                                                   CaptionML=ENU=Discipline }
    { 601 ;   ;Trade Speciality    ;Code10        ;TableRelation="Trade Speciality".Code WHERE (Discipline=FIELD(Discipline));
                                                   CaptionML=ENU=Trade Speciality }
    { 602 ;   ;Trade Expertise     ;Code10        ;TableRelation="Trade Expertise";
                                                   OnValidate=VAR
                                                                TradeExpRec@1100525000 : Record 11020286;
                                                              BEGIN
                                                                TradeExpRec.GetRelatedValue(Discipline, "Trade Speciality", "Trade Expertise");
                                                              END;

                                                   CaptionML=ENU=Trade Expertise }
    { 610 ;No ;Maintenance Interval;DateFormula   ;CaptionML=ENU=Maintenance Interval;
                                                   Description=expired }
    { 611 ;No ;Maintenance Relation;Code20        ;CaptionML=ENU=Maintenance Relation;
                                                   Description=expired }
    { 1250;   ;Wage Component      ;Code10        ;TableRelation="Wage Component";
                                                   CaptionML=ENU=Wage Component }
    { 1260;   ;Price History 0 Exists;Boolean     ;CaptionML=ENU=Price History 0 Exists;
                                                   Editable=No }
    { 2000;   ;Cost Type (Price)   ;Option        ;CaptionML=ENU=Cost Type (Price);
                                                   OptionCaptionML=ENU=" ,Material,Subcontracting,Plant,Sundry";
                                                   OptionString=[ ,Material,Subcontracting,Plant,Sundry];
                                                   Description=DP00381 }
    { 2005;   ;Cost Object Labor   ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Labor),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=VAR
                                                                DimValRec@1210190000 : Record 349;
                                                                DimMgt@1210190001 : Codeunit 408;
                                                              BEGIN
                                                                //DP00381
                                                                IF "Cost Object Labor" <> '' THEN BEGIN
                                                                  DimMgt.GetDimValueRec(2, "Cost Object Labor", DimValRec, TRUE, '');
                                                                  "Cost Component" := DimValRec."Cost Component";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Object Labor;
                                                   Description=DP00381 }
    { 2006;   ;Cost Object Price   ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=FIELD("Cost Type (Price)"),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=VAR
                                                                DimValRec@1210190000 : Record 349;
                                                                DimMgt@1210190001 : Codeunit 408;
                                                              BEGIN
                                                                //DP00381
                                                                IF "Cost Object Price" <> '' THEN BEGIN
                                                                  DimMgt.GetDimValueRec(2, "Cost Object Price", DimValRec, TRUE, '');
                                                                  "Cost Component" := DimValRec."Cost Component";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Object Price;
                                                   Description=DP00381 }
    { 2010;   ;Nett Sales Price    ;Decimal       ;OnValidate=BEGIN
                                                                //DP00381
                                                                CalculateDiscount(TRUE);
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Nett Sales Price;
                                                   BlankZero=Yes;
                                                   Description=DP00381;
                                                   AutoFormatType=2 }
    { 2015;   ;Sales Discount %    ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Sales Discount %") THEN BEGIN
                                                                  TESTFIELD("Gross Price");  //db, 11-11-13: DP00260 (C005807)
                                                                END;

                                                                //DP00381.sn
                                                                CalculateNettPrice;
                                                                CalculateTotals;
                                                                //DP00381.en
                                                              END;

                                                   CaptionML=ENU=Sales Discount %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Description=DP00381 }
    { 2020;   ;Norm Group (Sales)  ;Code10        ;TableRelation="Norm Group".Code;
                                                   CaptionML=ENU=Norm Group (Sales);
                                                   Description=DP00381 }
    { 2030;   ;Norm (Sales)        ;Decimal       ;OnValidate=BEGIN
                                                                //DP00381
                                                                IF CurrFieldNo <> FIELDNO("Production Rate (Sales)") THEN
                                                                  IF "Norm (Sales)" <> 0 THEN
                                                                    "Production Rate (Sales)" := 1 / "Norm (Sales)"
                                                                  ELSE
                                                                    "Production Rate (Sales)" := 0;

                                                                CalculateTotals;  //db, 24-09-12: norm and production rate used to calculate hours
                                                              END;

                                                   CaptionML=ENU=Norm (Sales);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Description=DP00381 }
    { 2035;   ;Production Rate (Sales);Decimal    ;OnValidate=BEGIN
                                                                //DP00381
                                                                IF "Production Rate (Sales)" <> 0 THEN
                                                                  VALIDATE("Norm (Sales)", 1 / "Production Rate (Sales)")
                                                                ELSE
                                                                  VALIDATE("Norm (Sales)",1);
                                                              END;

                                                   CaptionML=ENU=Production Rate (Sales);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Description=DP00381 }
    { 2040;   ;Sales Rate          ;Decimal       ;CaptionML=ENU=Sales Rate;
                                                   BlankZero=Yes;
                                                   Description=DP00381;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 2050;   ;Quantity (Sales)    ;Decimal       ;OnValidate=BEGIN
                                                                //DP00381
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Quantity (Sales);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Description=DP00381 }
    { 2055;   ;Cumulative Quantity (Sales);Decimal;CaptionML=ENU=Cumulative Quantity (Sales);
                                                   DecimalPlaces=0:5;
                                                   Description=DP00381 }
    { 2060;   ;Surcharge % Labor   ;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Surcharge % Labor;
                                                   BlankZero=Yes;
                                                   Description=DP00381 }
    { 2065;   ;Surcharge % Price   ;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Surcharge % Price;
                                                   BlankZero=Yes;
                                                   Description=DP00381 }
    { 2100;   ;Labor Sales Amount  ;Decimal       ;CaptionML=ENU=Labor Sales Amount;
                                                   Description=DP00381;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2105;   ;Hours (Sales)       ;Decimal       ;CaptionML=ENU=Hours (Sales);
                                                   DecimalPlaces=2:;
                                                   Description=DP00381;
                                                   Editable=No }
    { 2110;   ;Material Sales Amount;Decimal      ;CaptionML=ENU=Material Sales Amount;
                                                   Description=DP00381;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2120;   ;Subcontracting Sales Amount;Decimal;CaptionML=ENU=Subcontracting Sales Amount;
                                                   Description=DP00381;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2130;   ;Plant Sales Amount  ;Decimal       ;CaptionML=ENU=Plant Sales Amount;
                                                   Description=DP00381;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2140;   ;Sundry Sales Amount ;Decimal       ;CaptionML=ENU=Sundry Sales Amount;
                                                   Description=DP00381;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2150;   ;Sales Amount        ;Decimal       ;CaptionML=ENU=Sales Amount;
                                                   Description=DP00381;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2160;   ;Cum. Adj. Factor Hours (Sales);Decimal;
                                                   CaptionML=ENU=Cum. Hours Adjustment Factor (Sales);
                                                   DecimalPlaces=0:6;
                                                   Description=DP00555 }
  }
  KEYS
  {
    {    ;Estimate No.,Sub-Estimate No.,Part Group,Part,Estimate Line,Recipe Line;
                                                   Clustered=Yes }
    {    ;Estimate No.,Line No.,Compressed         }
    {    ;Estimate No.,Text Composition,Ask for Quote,Price Agreement,Norm Agreement,Zero Line }
    {    ;Estimate No.,Compress No.                }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CompRec@1210190002 : Record 11020458;
      EstLineRec@1210190001 : Record 11072072;
      RcpLineRec@1210190000 : Record 11072075;
      EstRec@1210190003 : Record 11012151;
      ItemRec@1210190013 : Record 27;
      BasicItemRec@1210190012 : Record 11012316;
      TradeItemRec@1210190011 : Record 11012317;
      ItemUnitRec@1210190014 : Record 5404;
      ElemRec@1100485005 : Record 11012060;
      ProjElemRec@1100485004 : Record 11012010;
      FormatMgt@1100485006 : Codeunit 11012022;
      PlantMgt@1100528900 : Codeunit 11012232;
      Status@1210190008 : Dialog;
      maxrec@1210190007 : Integer;
      currec@1210190006 : Integer;
      Text000@1210190009 : TextConst 'ENU=Busy with      #1#################\';
      Text001@1210190005 : TextConst 'ENU=Estimatepart  #2################# @3@@@@@@@@@@@@@';
      ItemTypeOpt@1210190010 : 'Item,Basic Item,Trade Item,Trade Vendor';
      Text002@1100485008 : TextConst 'ENU=only allowed for material, subcontracting or plant';

    PROCEDURE SelectLines@1100485001(VAR EstLineRec@1100485000 : Record 11072072);
    VAR
      ICurrEst@1100485001 : Code[20];
    BEGIN
      ICurrEst := EstLineRec.GETFILTER("Estimate No.");
      IF NOT EstRec.GET(ICurrEst) THEN
        EXIT;

      CompRec.RESET;
      CompRec.SETRANGE("Estimate No.", ICurrEst);
      CompRec.DELETEALL;

      Status.OPEN(Text000 + Text001);

      EstLineRec.SETRANGE("Surcharge Type", EstLineRec."Surcharge Type"::" ");
      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        Status.UPDATE(1,EstLineRec.TABLECAPTION);
        REPEAT
          currec := currec + 1;
          Status.UPDATE(2,EstLineRec.Part);
          Status.UPDATE(3,ROUND(currec / maxrec * 10000,1));
          IF EstLineRec.Recipe = '' THEN BEGIN
            CompRec.INIT;
            CompRec."Estimate No." := EstLineRec."Estimate No.";
            CompRec."Sub-Estimate No." := EstLineRec."Sub-Estimate No.";
            CompRec."Part Group" := EstLineRec."Part Group";
            CompRec.Part := EstLineRec.Part;
            CompRec."Estimate Line" := EstLineRec."Line No.";
            CompRec."Recipe Line" := 0;  //db, 18-08-08: M12430
            CompRec."Recipe Group" := EstLineRec."Recipe Group";
            CompRec.Recipe := EstLineRec.Recipe;
            CompRec.Description := EstLineRec.Description;
            CompRec."Cost Type (Price)" := EstLineRec."Cost Type (Price)";
            CompRec."Cost Object Labor" := EstLineRec."Cost Object Labor";
            CompRec."Cost Object Price" := EstLineRec."Cost Object Price";
            CompRec."Cost Component" := EstLineRec."Cost Component";
            CompRec."Time Quantity" := EstLineRec."Time Quantity";
            CompRec."Unit of Time" := EstLineRec."Unit of Time";
            CompRec.Quantity := EstLineRec.Quantity;
            CompRec."Quantity (Sales)" := EstLineRec."Quantity (Sales)";  //DP00381
            CompRec."Part Quantity" := EstLineRec."Part Quantity";
            CompRec."Cumulative Quantity" := CompRec.Quantity * CompRec."Part Quantity";
            CompRec."Cumulative Quantity (Sales)" := CompRec."Quantity (Sales)" * CompRec."Part Quantity";  //DP00381
            CompRec."Unit of Measure" := EstLineRec."Unit of Measure";
            CompRec."Norm Group" := EstLineRec."Norm Group";
            CompRec."Norm Group (Sales)" := EstLineRec."Norm Group (Sales)";  //DP00381
            CompRec."Sub Operation Code" := EstLineRec."Sub Operation Code";
            CompRec.Norm := EstLineRec.Norm;
            CompRec."Norm (Sales)" := EstLineRec."Norm (Sales)";  //DP00381
            CompRec."Cost Rate" := EstLineRec."Cost Rate";
            CompRec."Sales Rate" := EstLineRec."Sales Rate";  //DP00381
            CompRec."Rate Code" := EstLineRec."Rate Code";
            CompRec."Rate Type" := EstLineRec."Rate Type";
            CompRec."Team Size" := EstLineRec."Team Size";
            CompRec."Surcharge % Labor" := EstLineRec."Surcharge % Labor";  //DP00381
            CompRec."Surcharge % Price" := EstLineRec."Surcharge % Price";  //DP00381
            CompRec."Nett Cost Price" := EstLineRec."Nett Cost Price";
            CompRec."Nett Sales Price" := EstLineRec."Nett Sales Price";  //DP00381
            CompRec."Purchase Discount %" := EstLineRec."Purchase Discount %";
            CompRec."Sales Discount %" := EstLineRec."Sales Discount %";
            CompRec."Gross Price" := EstLineRec."Gross Price";
            CompRec."Buy Back Price" := EstLineRec."Buy Back Price";
            CompRec."Buy Back %" := EstLineRec."Buy Back %";
            CompRec.Weight := EstLineRec.Weight;
            CompRec."Item No." := EstLineRec."Item No.";
            CompRec."Basic Item" := EstLineRec."Basic Item";
            CompRec."Trade Item" := EstLineRec."Trade Item";
            CompRec."Vendor (Trade Item)" := EstLineRec."Vendor (Trade Item)";
            CompRec.Manufacturer := EstLineRec.Manufacturer;
            CompRec."Plant Type" := EstLineRec."Plant Type";
            CompRec."Text Composition" := ComposeText(CompRec);
            CompRec."Ask for Quote" := EstLineRec."Ask for Quote";
            CompRec."Purchase Route Reference" := EstLineRec."Purchase Route Reference";
            CompRec."Zero Line" := (CompRec."Cumulative Quantity" = 0);
            CompRec."Document No." := EstLineRec."Document No.";
            CompRec.Code := EstLineRec.Code;
            CompRec."Project No." := EstLineRec."Project No.";
            CompRec.Element := EstLineRec.Element;
            CompRec."Extension Contract" := EstLineRec."Extension Contract";  //DP00260
            CompRec."Project Planning Activity Code" := EstLineRec."Project Planning Activity Code";
            CompRec."Wage Component" := EstLineRec."Wage Component";  //DP00236
            CompRec."Price Agreement" := EstLineRec."Price Agreement";
            CompRec."Norm Agreement" := EstLineRec."Norm Agreement";
            CompRec.Vendor := EstLineRec.Vendor;
            CompRec."Unit Factor" := CheckUnitFactor;
            CompRec."Cum. Adj. Factor Hours" := EstLineRec."Cum. Adj. Factor Hours";
            CompRec."Cum. Adj. Factor Price" := EstLineRec."Cum. Adj. Factor Price";
            CompRec."Cum. Adj. Factor Hours (Sales)" := EstLineRec."Cum. Adj. Factor Hours (Sales)";  //DP00555
            CompRec."Line Status" := EstLineRec."Line Status";
            CompRec."Purchase Action Mat." := EstLineRec."Purchase Action Mat.";
            CompRec."Purchase Phase Mat." := EstLineRec."Purchase Phase Mat.";
            CompRec."Purchase Action Subc." := EstLineRec."Purchase Action Subc.";
            CompRec."Purchase Phase Subc." := EstLineRec."Purchase Phase Subc.";
            CompRec."Purchase Action Plant" := EstLineRec."Purchase Action Plant";
            CompRec."Purchase Phase Plant" := EstLineRec."Purchase Phase Plant";
            //db.sn, 01-11-13: DP00260 (17764)
            CompRec.Discipline := EstLineRec.Discipline;
            CompRec."Trade Speciality" := EstLineRec."Trade Speciality";
            CompRec."Trade Expertise" := EstLineRec."Trade Expertise";
            //db.en, 01-11-13: DP00260 (17764)
            CompRec."Price History 0 Exists" := EstLineRec."Price History 0 Exists";
            CompRec.CalculateTotals;
            CompRec.CheckGtinAlternative;
            CompRec.INSERT;
          END ELSE BEGIN
            RcpLineRec.SETRANGE("Estimate No.", EstLineRec."Estimate No.");
            RcpLineRec.SETRANGE("Sub-Estimate No.", EstLineRec."Sub-Estimate No.");
            RcpLineRec.SETRANGE("Part Group", EstLineRec."Part Group");
            RcpLineRec.SETRANGE(Part, EstLineRec.Part);
            RcpLineRec.SETRANGE("Estimate Line", EstLineRec."Line No.");
            //RcpLineRec.SETFILTER("Recipe (Child)", '%1', '');
            RcpLineRec.SETRANGE("Recipe Header", FALSE);  //db, 26-09-14
            RcpLineRec.SETRANGE("Surcharge Type", RcpLineRec."Surcharge Type"::" ");
            IF RcpLineRec.FINDSET THEN BEGIN
              REPEAT
                CompRec.INIT;
                CompRec."Estimate No." := RcpLineRec."Estimate No.";
                CompRec."Sub-Estimate No." := RcpLineRec."Sub-Estimate No.";
                CompRec."Part Group" := RcpLineRec."Part Group";
                CompRec.Part := RcpLineRec.Part;
                CompRec."Estimate Line" := RcpLineRec."Estimate Line";
                CompRec."Recipe Line" := RcpLineRec."Line No.";
                CompRec."Recipe Group" := RcpLineRec."Recipe Group";
                CompRec.Recipe := RcpLineRec.Recipe;
                CompRec.Description := RcpLineRec.Description;
                CompRec."Cost Type (Price)" := RcpLineRec."Cost Type (Price)";
                CompRec."Cost Object Labor" := RcpLineRec."Cost Object Labor";
                CompRec."Cost Object Price" := RcpLineRec."Cost Object Price";
                CompRec."Cost Component" := RcpLineRec."Cost Component";
                CompRec."Time Quantity" := RcpLineRec."Time Quantity";
                CompRec."Unit of Time" := RcpLineRec."Unit of Time";
                CompRec.Quantity := RcpLineRec.Quantity;
                CompRec."Quantity (Sales)" := RcpLineRec."Quantity (Sales)";  //DP00381
                //mg.sc, 05-04-11: M26499
                IF RcpLineRec."Ignore Recipe Quantity" THEN
                  CompRec."Part Quantity" := EstLineRec."Part Quantity"
                ELSE
                  CompRec."Part Quantity" := EstLineRec.Quantity * EstLineRec."Part Quantity";
                //mg.ec, 05-04-11: M26499
                CompRec."Cumulative Quantity" := CompRec.Quantity * CompRec."Part Quantity";
                CompRec."Cumulative Quantity (Sales)" := CompRec."Quantity (Sales)" * CompRec."Part Quantity";  //DP00381
                CompRec."Unit of Measure" := RcpLineRec."Unit of Measure";
                CompRec."Norm Group" := RcpLineRec."Norm Group";
                CompRec."Norm Group (Sales)" := RcpLineRec."Norm Group (Sales)";  //DP00381
                CompRec."Sub Operation Code" := RcpLineRec."Sub Operation Code";
                CompRec.Norm := RcpLineRec.Norm;
                CompRec."Norm (Sales)" := RcpLineRec."Norm (Sales)";  //DP00381
                CompRec."Cost Rate" := RcpLineRec."Cost Rate";
                CompRec."Sales Rate" := RcpLineRec."Sales Rate";  //DP00381
                CompRec."Rate Code" := RcpLineRec."Rate Code";
                CompRec."Rate Type" := RcpLineRec."Rate Type";
                CompRec."Team Size" := RcpLineRec."Team Size";
                CompRec."Surcharge % Labor" := RcpLineRec."Surcharge % Labor";  //DP00381
                CompRec."Surcharge % Price" := RcpLineRec."Surcharge % Price";  //DP00381
                CompRec."Nett Cost Price" := RcpLineRec."Nett Cost Price";
                CompRec."Nett Sales Price" := RcpLineRec."Nett Sales Price";  //DP00381
                CompRec."Purchase Discount %" := RcpLineRec."Purchase Discount %";
                CompRec."Sales Discount %" := RcpLineRec."Sales Discount %";
                CompRec."Gross Price" := RcpLineRec."Gross Price";
                CompRec."Buy Back Price" := RcpLineRec."Buy Back Price";
                CompRec."Buy Back %" := RcpLineRec."Buy Back %";
                CompRec.Weight := RcpLineRec.Weight;
                CompRec."Item No." := RcpLineRec."Item No.";
                CompRec."Basic Item" := RcpLineRec."Basic Item";
                CompRec."Trade Item" := RcpLineRec."Trade Item";
                CompRec."Vendor (Trade Item)" := RcpLineRec."Vendor (Trade Item)";
                CompRec.Manufacturer := RcpLineRec.Manufacturer;
                CompRec."Plant Type" := RcpLineRec."Plant Type";
                CompRec."Text Composition" := ComposeText(CompRec);
                CompRec."Ask for Quote" := RcpLineRec."Ask for Quote";
                CompRec."Purchase Route Reference" := RcpLineRec."Purchase Route Reference";
                CompRec."Zero Line" := (CompRec."Cumulative Quantity" = 0);
                CompRec."Document No." := RcpLineRec."Document No.";
                CompRec.Code := RcpLineRec.Code;
                CompRec."Project No." := RcpLineRec."Project No.";
                CompRec.Element := RcpLineRec.Element;
                CompRec."Extension Contract" := RcpLineRec."Extension Contract";  //DP00260
                CompRec."Project Planning Activity Code" := RcpLineRec."Project Planning Activity Code";
                CompRec."Wage Component" := RcpLineRec."Wage Component";  //DP00236
                CompRec."Price Agreement" := RcpLineRec."Price Agreement";
                CompRec."Norm Agreement" := RcpLineRec."Norm Agreement";
                CompRec.Vendor := RcpLineRec.Vendor;
                CompRec."Unit Factor" := CheckUnitFactor;
                CompRec."Cum. Adj. Factor Hours" := RcpLineRec."Cum. Adj. Factor Hours";
                CompRec."Cum. Adj. Factor Price" := RcpLineRec."Cum. Adj. Factor Price";
                CompRec."Cum. Adj. Factor Hours (Sales)" := RcpLineRec."Cum. Adj. Factor Hours (Sales)";  //DP00555
                CompRec."Line Status" := RcpLineRec."Line Status";
                CompRec."Purchase Action Mat." := RcpLineRec."Purchase Action Mat.";
                CompRec."Purchase Phase Mat." := RcpLineRec."Purchase Phase Mat.";
                CompRec."Purchase Action Subc." := RcpLineRec."Purchase Action Subc.";
                CompRec."Purchase Phase Subc." := RcpLineRec."Purchase Phase Subc.";
                CompRec."Purchase Action Plant" := RcpLineRec."Purchase Action Plant";
                CompRec."Purchase Phase Plant" := RcpLineRec."Purchase Phase Plant";
                //db.sn, 01-11-13: DP00260 (17764)
                CompRec.Discipline := RcpLineRec.Discipline;
                CompRec."Trade Speciality" := RcpLineRec."Trade Speciality";
                CompRec."Trade Expertise" := RcpLineRec."Trade Expertise";
                //db.en, 01-11-13: DP00260 (17764)
                CompRec."Price History 0 Exists" := RcpLineRec."Price History 0 Exists";
                CompRec.CalculateTotals;
                CompRec.CheckGtinAlternative;
                CompRec.INSERT;
              UNTIL RcpLineRec.NEXT = 0;
            END;
          END;
        UNTIL EstLineRec.NEXT = 0;
      END;

      Compress(ICurrEst);
      Status.CLOSE;
      COMMIT;

      CompRec.RESET;
      CompRec.SETCURRENTKEY("Estimate No.", "Line No.", Compressed);
      CompRec.FILTERGROUP(2);  //db, 29-09-08: M12466
      CompRec.SETRANGE("Estimate No.", ICurrEst);
      CompRec.FILTERGROUP(0);  //db, 29-09-08: M12466
      CompRec.SETRANGE(Compressed, TRUE);
      PAGE.RUNMODAL(0, CompRec);

      CompRec.RESET;
      CompRec.SETRANGE("Estimate No.", ICurrEst);
      CompRec.DELETEALL;
      COMMIT;
    END;

    PROCEDURE SelectLinesRaw@1100525000(VAR EstLineRec@1100485000 : Record 11125680);
    VAR
      ICurrEst@1100485001 : Code[20];
    BEGIN
      //db, 20-01-10
      ICurrEst := EstLineRec.GETFILTER("Estimate No.");
      IF NOT EstRec.GET(ICurrEst) THEN
        EXIT;

      CompRec.RESET;
      CompRec.SETRANGE("Estimate No.", ICurrEst);
      CompRec.DELETEALL;

      Status.OPEN(Text000 + Text001);

      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        Status.UPDATE(1,EstLineRec.TABLECAPTION);
        REPEAT
          currec := currec + 1;
          Status.UPDATE(2,EstLineRec."Element No.");
          Status.UPDATE(3,ROUND(currec / maxrec * 10000,1));
          CompRec.INIT;
          CompRec."Estimate No." := EstLineRec."Estimate No.";
          CompRec."Sub-Estimate No." := '';
          CompRec."Part Group" := '';
          CompRec.Part := EstLineRec."Element No.";  //temporary tender entry as part
          CompRec."Estimate Line" := EstLineRec."Line No.";
          CompRec."Recipe Line" := 0;
          CompRec."Recipe Group" := '';
          CompRec.Recipe := '';
          CompRec.Description := EstLineRec.Description;
          IF EstLineRec."Cost Object Labor" <> '' THEN BEGIN
            CompRec."Cost Type (Price)" := CompRec."Cost Type (Price)"::" ";
            CompRec."Cost Object Labor" := EstLineRec."Cost Object Labor";
          END;
          IF EstLineRec."Cost Object Material" <> '' THEN BEGIN
            CompRec."Cost Type (Price)" := CompRec."Cost Type (Price)"::Material;
            CompRec."Cost Object Price" := EstLineRec."Cost Object Material";
          END;
          IF EstLineRec."Cost Object Subcontracting" <> '' THEN BEGIN
            CompRec."Cost Type (Price)" := CompRec."Cost Type (Price)"::Subcontracting;
            CompRec."Cost Object Price" := EstLineRec."Cost Object Subcontracting";
          END;
          IF EstLineRec."Cost Object Plant" <> '' THEN BEGIN
            CompRec."Cost Type (Price)" := CompRec."Cost Type (Price)"::Plant;
            CompRec."Cost Object Price" := EstLineRec."Cost Object Plant";
          END;
          CompRec."Cost Component" := EstLineRec."Cost Component";
          CompRec."Time Quantity" := EstLineRec."Time Quantity";
          CompRec."Unit of Time" := EstLineRec."Unit of Time";
          CompRec.Quantity := EstLineRec.Quantity;
          //CompRec."Quantity (Sales)" := EstLineRec."Quantity (Sales)";
          CompRec."Part Quantity" := EstLineRec."Part Quantity";
          //CompRec."Cumulative Quantity" := CompRec.Quantity * CompRec."Part Quantity";
          CompRec."Cumulative Quantity" := EstLineRec."Cumulative Quantity";  //db, 02-03-15: C016484 (PartQuantity not adjusted for RAW)
          //CompRec."Cumulative Quantity (Sales)" := CompRec."Quantity (Sales)" * CompRec."Part Quantity";  //DP00381
          CompRec."Unit of Measure" := EstLineRec."Unit of Measure";
          CompRec."Norm Group" := EstLineRec."Norm Group";
          //CompRec."Norm Group (Sales)" := EstLineRec."Norm Group (Sales)";
          CompRec."Sub Operation Code" := EstLineRec."Sub Operation Code";
          CompRec.Norm := EstLineRec.Norm;
          //CompRec."Norm (Sales)" := EstLineRec."Norm (Sales)";
          CompRec."Cost Rate" := EstLineRec.Rate;
          //CompRec."Sales Rate" := EstLineRec."Sales Rate";
          CompRec."Rate Code" := EstLineRec."Rate Code";
          CompRec."Rate Type" := EstLineRec."Rate Type";
          CompRec."Team Size" := EstLineRec."Team Size";
          //CompRec."Surcharge % Labor" := EstLineRec."Surcharge % Labor";  //DP00381
          //CompRec."Surcharge % Price" := EstLineRec."Surcharge % Price";  //DP00381
          CompRec."Nett Cost Price" := EstLineRec."Material Price";
          //CompRec."Nett Sales Price" := EstLineRec."Material Price";
          CompRec."Purchase Discount %" := EstLineRec."Purchase Discount %";
          CompRec."Sales Discount %" := EstLineRec."Sales Discount %";
          CompRec."Gross Price" := EstLineRec."Gross Price";
          IF CompRec."Cost Type (Price)" = CompRec."Cost Type (Price)"::Subcontracting THEN
            CompRec."Nett Cost Price" := EstLineRec."Subcontracting Price";
          IF CompRec."Cost Type (Price)" = CompRec."Cost Type (Price)"::Plant THEN
            CompRec."Nett Cost Price" := EstLineRec."Plant Price";
          CompRec."Buy Back Price" := EstLineRec."Buy Back Price";
          CompRec."Buy Back %" := EstLineRec."Buy Back %";
          CompRec.Weight := EstLineRec.Weight;
          CompRec."Item No." := EstLineRec."Item No.";
          CompRec."Basic Item" := EstLineRec."Basic Item";
          CompRec."Trade Item" := EstLineRec."Trade Item";
          CompRec."Vendor (Trade Item)" := EstLineRec."Vendor (Trade Item)";
          CompRec.Manufacturer := EstLineRec.Manufacturer;
          CompRec."Plant Type" := EstLineRec."Plant Type";
          CompRec."Text Composition" := ComposeText(CompRec);
          CompRec."Ask for Quote" := EstLineRec."Ask for Quote";
          CompRec."Purchase Route Reference" := EstLineRec."Purchase Route Reference";
          CompRec."Zero Line" := (CompRec."Cumulative Quantity" = 0);
          CompRec."Document No." := EstLineRec."Document No.";
          //CompRec.Code := EstLineRec.Code;
          CompRec."Project No." := EstLineRec."Project No.";
          CompRec.Element := EstLineRec.Element;
          //CompRec."Extension Contract" := EstLineRec."Extension Contract";  //DP00260
          CompRec."Project Planning Activity Code" := EstLineRec."Project Planning Activity Code";
          //CompRec."Wage Component" := EstLineRec."Wage Component";  //DP00236
          CompRec."Price Agreement" := EstLineRec."Price Agreement";
          CompRec."Norm Agreement" := EstLineRec."Norm Agreement";
          CompRec.Vendor := EstLineRec.Vendor;
          CompRec."Unit Factor" := CheckUnitFactor;
          CompRec."Cum. Adj. Factor Hours" := EstLineRec."Cum. Adj. Factor Hours";
          //DP00381.sn
          IF CompRec."Cost Type (Price)" = CompRec."Cost Type (Price)"::Material THEN
            CompRec."Cum. Adj. Factor Price" := EstLineRec."Cum. Adj. Factor Material";
          IF CompRec."Cost Type (Price)" = CompRec."Cost Type (Price)"::Subcontracting THEN
            CompRec."Cum. Adj. Factor Price" := EstLineRec."Cum. Adj. Factor Subcontr.";
          IF CompRec."Cost Type (Price)" = CompRec."Cost Type (Price)"::Plant THEN
            CompRec."Cum. Adj. Factor Price" := EstLineRec."Cum. Adj. Factor Plant";
          //DP00381.en
          CompRec."Cum. Adj. Factor Hours (Sales)" := CompRec."Cum. Adj. Factor Hours";  //DP00555
          CompRec."Line Status" := EstLineRec."Line Status";
          CompRec."Purchase Action Mat." := EstLineRec."Purchase Action Mat.";
          CompRec."Purchase Phase Mat." := EstLineRec."Purchase Phase Mat.";
          CompRec."Purchase Action Subc." := EstLineRec."Purchase Action Subc.";
          CompRec."Purchase Phase Subc." := EstLineRec."Purchase Phase Subc.";
          CompRec."Purchase Action Plant" := EstLineRec."Purchase Action Plant";
          CompRec."Purchase Phase Plant" := EstLineRec."Purchase Phase Plant";
          //db.sn, 01-11-13: DP00260 (17764)
          CompRec.Discipline := EstLineRec.Discipline;
          CompRec."Trade Speciality" := EstLineRec."Trade Speciality";
          CompRec."Trade Expertise" := EstLineRec."Trade Expertise";
          //db.en, 01-11-13: DP00260 (17764)
          CompRec.CalculateTotals;
          CompRec.CheckGtinAlternative;
          CompRec.INSERT;
        UNTIL EstLineRec.NEXT = 0;
      END;

      Compress(ICurrEst);
      Status.CLOSE;
      COMMIT;

      CompRec.RESET;
      CompRec.SETCURRENTKEY("Estimate No.", "Line No.", Compressed);
      CompRec.FILTERGROUP(2);
      CompRec.SETRANGE("Estimate No.", ICurrEst);
      CompRec.FILTERGROUP(0);
      CompRec.SETRANGE(Compressed, TRUE);
      PAGE.RUNMODAL(0, CompRec);

      CompRec.RESET;
      CompRec.SETRANGE("Estimate No.", ICurrEst);
      CompRec.DELETEALL;
      COMMIT;
    END;

    PROCEDURE Compress@1210190005(ICurrEst@1210190000 : Code[20]);
    VAR
      LastLino@1210190006 : Integer;
      LastText@1210190004 : Text[250];
      LastAskQ@1210190007 : Boolean;
      LastAgrP@1210190009 : Boolean;
      LastAgrN@1100485005 : Boolean;
      LastComp@1210190008 : Integer;
      LastFact1@1100485000 : Decimal;
      LastFact2@1100485001 : Decimal;
      LastFact3@1100485002 : Decimal;
      LastFact4@1100485003 : Decimal;
      LastFact5@1100485004 : Decimal;
      LastFact6@1100525002 : Decimal;
      LastProj@1100525000 : Code[20];
      LastElem@1100525001 : Code[20];
      LastExtContr@1100525004 : Code[20];
      LastStatus@1100525003 : Code[20];
      LastProjPlanActCode@1100528400 : Code[20];
    BEGIN
      LastLino := 0;
      LastComp := 0;
      LastText := '~';
      LastAskQ := FALSE;
      LastAgrP := FALSE;
      LastAgrN := FALSE;

      CompRec.RESET;
      CompRec.SETCURRENTKEY("Estimate No.", "Text Composition", "Ask for Quote", "Price Agreement", "Norm Agreement", "Zero Line");
      CompRec.SETRANGE("Estimate No.", ICurrEst);
      IF CompRec.FINDSET(TRUE, FALSE) THEN BEGIN
        currec := 0;
        maxrec := CompRec.COUNT;
        Status.UPDATE(1,CompRec.TABLECAPTION);
        REPEAT
          currec := currec + 1;
          IF CompRec."Cost Type (Price)" = CompRec."Cost Type (Price)"::" " THEN
            Status.UPDATE(2,CompRec."Cost Object Labor")
          ELSE
            Status.UPDATE(2,CompRec."Cost Object Price");
          Status.UPDATE(3,ROUND(currec / maxrec * 10000,1));
          CompRec."Line No." := LastLino + 1;
          LastLino := CompRec."Line No.";
          IF (LastText <> CompRec."Text Composition") OR
             (LastAskQ <> CompRec."Ask for Quote") OR
             (LastAgrP <> CompRec."Price Agreement") OR
             (LastAgrN <> CompRec."Norm Agreement")
          THEN BEGIN
            CompRec.Compressed := TRUE;
            LastText := CompRec."Text Composition";
            LastAskQ := CompRec."Ask for Quote";
            LastAgrP := CompRec."Price Agreement";
            LastAgrN := CompRec."Norm Agreement";
            LastFact1 := CompRec.Norm;
            LastFact2 := CompRec."Gross Price";
            LastFact3 := CompRec."Nett Cost Price";
            LastFact4 := CompRec."Nett Sales Price";  //DP00381
            LastFact5 := CompRec."Norm (Sales)";  //DP00381
            LastFact6 := CompRec."Buy Back Price";
            LastProj := CompRec."Project No.";
            LastElem := CompRec.Element;
            LastExtContr := CompRec."Extension Contract";  //DP00260
            LastProjPlanActCode := CompRec."Project Planning Activity Code";
            LastStatus := CompRec."Line Status";
            LastComp := LastComp + 1;
          END ELSE BEGIN
            IF (LastFact1 <> CompRec.Norm) OR
               (LastFact2 <> CompRec."Gross Price") OR
               (LastFact3 <> CompRec."Nett Cost Price") OR
               (LastFact4 <> CompRec."Nett Sales Price") OR  //DP00381
               (LastFact5 <> CompRec."Norm (Sales)") OR  //DP00381
               (LastFact6 <> CompRec."Buy Back Price") OR
               (LastProj <> CompRec."Project No.") OR
               (LastElem <> CompRec.Element) OR
               (LastExtContr <> CompRec."Extension Contract") OR  //DP00260
               (LastProjPlanActCode <> CompRec."Project Planning Activity Code") OR
               (LastStatus <> CompRec."Line Status") THEN
            BEGIN
              CompRec.Compressed := TRUE;
              LastFact1 := CompRec.Norm;
              LastFact2 := CompRec."Gross Price";
              LastFact3 := CompRec."Nett Cost Price";
              LastFact4 := CompRec."Nett Sales Price";  //DP00381
              LastFact5 := CompRec."Norm (Sales)";  //DP00381
              LastFact6 := CompRec."Buy Back Price";
              LastProj := CompRec."Project No.";
              LastElem := CompRec.Element;
              LastExtContr := CompRec."Extension Contract";  //DP00260
              LastProjPlanActCode := CompRec."Project Planning Activity Code";
              LastStatus := CompRec."Line Status";
              LastComp := LastComp + 1;
            END;
          END;
          CompRec."Compress No." := LastComp;
          CompRec.MODIFY;
        UNTIL CompRec.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateIntern@1210190001();
    VAR
      CompRec@1210190000 : Record 11020458;
    BEGIN
      TESTFIELD(Compressed, TRUE);

      CompRec.RESET;
      CompRec.SETCURRENTKEY("Estimate No.", "Compress No.");
      CompRec.SETRANGE("Estimate No.", "Estimate No.");
      CompRec.SETRANGE("Compress No.", "Compress No.");
      CompRec.SETFILTER("Line No.", '<>%1', "Line No.");
      IF CompRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          CompRec."Cost Type (Price)" := "Cost Type (Price)";
          CompRec.Norm := Norm;
          CompRec."Norm (Sales)" := "Norm (Sales)";  //DP00381
          CompRec."Surcharge % Labor" := "Surcharge % Labor";  //DP00381
          CompRec."Surcharge % Price" := "Surcharge % Price";  //DP00381
          CompRec."Nett Cost Price" := "Nett Cost Price";
          CompRec."Nett Sales Price" := "Nett Sales Price";  //DP00381
          CompRec."Purchase Discount %":= "Purchase Discount %";
          CompRec."Sales Discount %":= "Sales Discount %";
          CompRec."Gross Price" := "Gross Price";
          CompRec.Description := Description;
          CompRec."Price Agreement" := "Price Agreement";
          CompRec."Norm Agreement" := "Norm Agreement";
          CompRec."Item No." := "Item No.";
          CompRec."Basic Item" := "Basic Item";
          CompRec."Trade Item" := "Trade Item";
          CompRec.Manufacturer := Manufacturer;
          CompRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
          CompRec."Cost Object Labor" := "Cost Object Labor";
          CompRec."Cost Object Price" := "Cost Object Price";
          CompRec."Cost Component" := "Cost Component";
          CompRec."Unit of Measure" := "Unit of Measure";
          IF (CompRec."Unit Factor" <> 0) AND ("Unit Factor" = 1) THEN BEGIN
            IF CompRec."Unit Factor" <> 1 THEN BEGIN
              CompRec.Quantity := ROUND(CompRec.Quantity * CompRec."Unit Factor", 1, '>');
              CompRec."Quantity (Sales)" := ROUND(CompRec."Quantity (Sales)" * CompRec."Unit Factor", 1, '>');  //DP00381
            END;
          END;
          IF (CompRec."Unit Factor" = 1) AND ("Unit Factor" <> 0) THEN BEGIN
            IF "Unit Factor" <> 1 THEN BEGIN
              CompRec.Quantity := ROUND(CompRec.Quantity / "Unit Factor", 1, '>');
              CompRec."Quantity (Sales)" := ROUND(CompRec."Quantity (Sales)" / "Unit Factor", 1, '>');  //DP00381
            END;
          END;
          CompRec."Unit Factor" := "Unit Factor";
          CompRec."Norm Group" := "Norm Group";
          CompRec."Norm Group (Sales)" := "Norm Group (Sales)";  //DP00381
          CompRec."Sub Operation Code" := "Sub Operation Code";
          CompRec."Rate Code" := "Rate Code";
          CompRec."Rate Type" := "Rate Type";
          CompRec."Cost Rate" := "Cost Rate";
          CompRec."Sales Rate" := "Sales Rate";  //DP00381
          CompRec."Team Size" := "Team Size";
          CompRec."Project No." := "Project No.";
          CompRec.Element := Element;
          CompRec."Extension Contract" := "Extension Contract";  //DP00260
          CompRec."Project Planning Activity Code" := "Project Planning Activity Code";
          CompRec."Wage Component" := "Wage Component";  //DP00236
          CompRec."Ask for Quote" := "Ask for Quote";
          CompRec."Alternative Vendor" := "Alternative Vendor";
          CompRec."Alternative Item" := "Alternative Item";
          CompRec."Alternative Price" := "Alternative Price";
          CompRec."Buy Back Price" := "Buy Back Price";
          CompRec."Buy Back %" := "Buy Back %";
          CompRec.Weight := Weight;
          CompRec."Line Status" := "Line Status";
          CompRec."Purchase Action Mat." := "Purchase Action Mat.";
          CompRec."Purchase Phase Mat." := "Purchase Phase Mat.";
          CompRec."Purchase Action Subc." := "Purchase Action Subc.";
          CompRec."Purchase Phase Subc." := "Purchase Phase Subc.";
          CompRec."Purchase Action Plant" := "Purchase Action Plant";
          CompRec."Purchase Phase Plant" := "Purchase Phase Plant";
          //db.sn, 01-11-13: DP00260 (17764)
          CompRec.Discipline := Discipline;
          CompRec."Trade Speciality" := "Trade Speciality";
          CompRec."Trade Expertise" := "Trade Expertise";
          //db.en, 01-11-13: DP00260 (17764)
          CompRec.Changed := TRUE;
          CompRec.CalculateTotals;
          CompRec.MODIFY;
        UNTIL CompRec.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateExtern@1210190002(CurrEst@1210190004 : Code[20]);
    VAR
      CompRec@1210190000 : Record 11020458;
      EstRec@1210190003 : Record 11012151;
      EstLineRec@1210190002 : Record 11072072;
      RcpLineRec@1210190001 : Record 11072075;
      RawEstLineRec@1100525000 : Record 11125680;
    BEGIN
      EstRec.GET(CurrEst);
      EstRec.TESTFIELD(Fixed, FALSE);

      Status.OPEN(Text000 + Text001);

      EstRec.LOCKTABLE;
      IF EstRec."RAW Estimate" THEN BEGIN  //db, 20-01-10
        RawEstLineRec.LOCKTABLE;
      END ELSE BEGIN
        EstLineRec.LOCKTABLE;
        RcpLineRec.LOCKTABLE;
      END;

      CompRec.RESET;
      CompRec.SETRANGE("Estimate No.", CurrEst);
      CompRec.SETRANGE(Changed, TRUE);
      IF CompRec.FINDSET(TRUE, FALSE) THEN BEGIN
        currec := 0;
        maxrec := CompRec.COUNT;
        Status.UPDATE(1,CompRec.TABLECAPTION);
        REPEAT
          currec := currec + 1;
          Status.UPDATE(2,CompRec.Part);
          Status.UPDATE(3,ROUND(currec / maxrec * 10000,1));
          IF EstRec."RAW Estimate" THEN BEGIN  //db, 20-01-10
            RawEstLineRec.GET(CompRec."Estimate No.", CompRec.Part, CompRec."Estimate Line");
            RawEstLineRec.Norm := CompRec.Norm;
            //db.sn, 28-09-12: C002769
            IF RawEstLineRec.Norm <> 0 THEN
              RawEstLineRec."Production Rate" := 1 / RawEstLineRec.Norm
            ELSE
              RawEstLineRec."Production Rate" := 0;
            //db.en, 28-09-12: C002769
            //DP00381.sn
            IF CompRec."Cost Type (Price)" = CompRec."Cost Type (Price)"::Material THEN BEGIN
              RawEstLineRec."Material Price" := CompRec."Nett Cost Price";
              RawEstLineRec."Purchase Discount %":= CompRec."Purchase Discount %";
              RawEstLineRec."Sales Discount %":= CompRec."Sales Discount %";
              RawEstLineRec."Gross Price" := CompRec."Gross Price" ;
            END;
            IF CompRec."Cost Type (Price)" = CompRec."Cost Type (Price)"::Subcontracting THEN
              RawEstLineRec."Subcontracting Price" := CompRec."Nett Cost Price";
            IF CompRec."Cost Type (Price)" = CompRec."Cost Type (Price)"::Plant THEN
              RawEstLineRec."Plant Price" := CompRec."Nett Cost Price";
            //DP00381.en
            RawEstLineRec.Description := CompRec.Description;
            RawEstLineRec."Price Agreement" := CompRec."Price Agreement";
            RawEstLineRec."Norm Agreement" := CompRec."Norm Agreement";
            RawEstLineRec."Item No." := CompRec."Item No.";
            RawEstLineRec."Basic Item" := CompRec."Basic Item";
            RawEstLineRec."Trade Item" := CompRec."Trade Item";
            RawEstLineRec.Manufacturer := CompRec.Manufacturer;
            RawEstLineRec."Vendor (Trade Item)" := CompRec."Vendor (Trade Item)";
            RawEstLineRec."Cost Object Labor" := CompRec."Cost Object Labor";
            IF CompRec."Cost Type (Price)" = CompRec."Cost Type (Price)"::Material THEN
              RawEstLineRec."Cost Object Material" := CompRec."Cost Object Price";
            IF CompRec."Cost Type (Price)" = CompRec."Cost Type (Price)"::Subcontracting THEN
              RawEstLineRec."Cost Object Subcontracting" := CompRec."Cost Object Price";
            IF CompRec."Cost Type (Price)" = CompRec."Cost Type (Price)"::Plant THEN
              RawEstLineRec."Cost Object Plant" := CompRec."Cost Object Price";
            RawEstLineRec."Cost Component" := CompRec."Cost Component";
            RawEstLineRec.Quantity := CompRec.Quantity;
            //RawEstLineRec."Quantity (Sales)" := CompRec."Quantity (Sales)";
            RawEstLineRec."Unit of Measure" := CompRec."Unit of Measure";
            RawEstLineRec."Norm Group" := CompRec."Norm Group";
            RawEstLineRec."Sub Operation Code" := CompRec."Sub Operation Code";
            RawEstLineRec."Rate Code" := CompRec."Rate Code";
            RawEstLineRec."Rate Type" := CompRec."Rate Type";
            RawEstLineRec.Rate := CompRec."Cost Rate";
            //RawEstLineRec."Sales Rate" := CompRec."Sales Rate";
            RawEstLineRec."Team Size" := CompRec."Team Size";
            RawEstLineRec."Project No." := CompRec."Project No.";
            RawEstLineRec.Element := CompRec.Element;
            //RawEstLineRec."Extension Contract" := CompRec."Extension Contract";  //DP00260
            RawEstLineRec."Project Planning Activity Code" := CompRec."Project Planning Activity Code";
            //RawEstLineRec."Wage Component" := CompRec."Wage Component";  //DP00236
            RawEstLineRec."Ask for Quote" := CompRec."Ask for Quote";
            RawEstLineRec."Buy Back Price" := CompRec."Buy Back Price";
            RawEstLineRec."Buy Back %" := CompRec."Buy Back %";
            RawEstLineRec.Weight := CompRec.Weight;
            RawEstLineRec."Line Status" := CompRec."Line Status";
            RawEstLineRec."Purchase Action Mat." := CompRec."Purchase Action Mat.";
            RawEstLineRec."Purchase Phase Mat." := CompRec."Purchase Phase Mat.";
            RawEstLineRec."Purchase Action Subc." := CompRec."Purchase Action Subc.";
            RawEstLineRec."Purchase Phase Subc." := CompRec."Purchase Phase Subc.";
            RawEstLineRec."Purchase Action Plant" := CompRec."Purchase Action Plant";
            RawEstLineRec."Purchase Phase Plant" := CompRec."Purchase Phase Plant";
            //db.sn, 01-11-13: DP00260 (17764)
            RawEstLineRec.Discipline := CompRec.Discipline;
            RawEstLineRec."Trade Speciality" := CompRec."Trade Speciality";
            RawEstLineRec."Trade Expertise" := CompRec."Trade Expertise";
            //db.en, 01-11-13: DP00260 (17764)
            RawEstLineRec.CalculateTotals;
            RawEstLineRec.MODIFY;
          END ELSE BEGIN
            IF CompRec."Recipe Line" = 0 THEN BEGIN
              EstLineRec.GET(CompRec."Estimate No.", CompRec."Sub-Estimate No.", CompRec."Part Group",
                             CompRec.Part, CompRec."Estimate Line");
              EstLineRec.Norm := CompRec.Norm;
              EstLineRec."Norm (Sales)" := CompRec."Norm (Sales)";  //DP00381
              //db.sn, 28-09-12: C002769
              IF EstLineRec.Norm <> 0 THEN
                EstLineRec."Production Rate" := 1 / EstLineRec.Norm
              ELSE
                EstLineRec."Production Rate" := 0;
              IF EstLineRec."Norm (Sales)" <> 0 THEN  //DP00381
                EstLineRec."Production Rate (Sales)" := 1 / EstLineRec."Norm (Sales)"
              ELSE
                EstLineRec."Production Rate (Sales)" := 0;
              //db.en, 28-09-12: C002769
              EstLineRec."Surcharge % Labor" := CompRec."Surcharge % Labor";  //DP00381
              EstLineRec."Surcharge % Price" := CompRec."Surcharge % Price";  //DP00381
              EstLineRec."Cost Type (Price)" := CompRec."Cost Type (Price)";  //DP00381
              EstLineRec."Nett Cost Price" := CompRec."Nett Cost Price";
              EstLineRec."Nett Sales Price" := CompRec."Nett Sales Price";  //DP00381
              EstLineRec."Purchase Discount %":= CompRec."Purchase Discount %";
              EstLineRec."Sales Discount %":= CompRec."Sales Discount %";
              EstLineRec.VALIDATE("Gross Price", CompRec."Gross Price");
              EstLineRec.Description := CompRec.Description;
              EstLineRec."Price Agreement" := CompRec."Price Agreement";
              EstLineRec."Norm Agreement" := CompRec."Norm Agreement";
              EstLineRec."Item No." := CompRec."Item No.";
              EstLineRec."Basic Item" := CompRec."Basic Item";
              EstLineRec."Trade Item" := CompRec."Trade Item";
              EstLineRec.Manufacturer := CompRec.Manufacturer;
              EstLineRec."Vendor (Trade Item)" := CompRec."Vendor (Trade Item)";
              EstLineRec."Cost Object Labor" := CompRec."Cost Object Labor";
              IF CompRec."Cost Type (Price)" = CompRec."Cost Type (Price)"::Material THEN
                EstLineRec."Cost Object Price" := CompRec."Cost Object Price";
              IF CompRec."Cost Type (Price)" = CompRec."Cost Type (Price)"::Subcontracting THEN
                EstLineRec."Cost Object Price" := CompRec."Cost Object Price";
              IF CompRec."Cost Type (Price)" = CompRec."Cost Type (Price)"::Plant THEN
                EstLineRec."Cost Object Price" := CompRec."Cost Object Price";
              EstLineRec."Cost Component" := CompRec."Cost Component";
              EstLineRec.Quantity := CompRec.Quantity;
              EstLineRec."Quantity (Sales)" := CompRec."Quantity (Sales)";  //DP00381
              EstLineRec."Unit of Measure" := CompRec."Unit of Measure";
              EstLineRec."Norm Group" := CompRec."Norm Group";
              EstLineRec."Norm Group (Sales)" := CompRec."Norm Group (Sales)";  //DP00381
              EstLineRec."Sub Operation Code" := CompRec."Sub Operation Code";
              EstLineRec."Rate Code" := CompRec."Rate Code";
              EstLineRec."Rate Type" := CompRec."Rate Type";
              EstLineRec."Cost Rate" := CompRec."Cost Rate";
              EstLineRec."Sales Rate" := CompRec."Sales Rate";  //DP00381
              EstLineRec."Team Size" := CompRec."Team Size";
              EstLineRec."Project No." := CompRec."Project No.";
              EstLineRec.Element := CompRec.Element;
              EstLineRec."Extension Contract" := CompRec."Extension Contract";  //DP00260
              EstLineRec."Project Planning Activity Code" := CompRec."Project Planning Activity Code";
              EstLineRec."Wage Component" := CompRec."Wage Component";  //DP00236
              EstLineRec."Ask for Quote" := CompRec."Ask for Quote";
              EstLineRec."Buy Back Price" := CompRec."Buy Back Price";
              EstLineRec."Buy Back %" := CompRec."Buy Back %";
              EstLineRec.Weight := CompRec.Weight;
              EstLineRec."Line Status" := CompRec."Line Status";
              EstLineRec."Purchase Action Mat." := CompRec."Purchase Action Mat.";
              EstLineRec."Purchase Phase Mat." := CompRec."Purchase Phase Mat.";
              EstLineRec."Purchase Action Subc." := CompRec."Purchase Action Subc.";
              EstLineRec."Purchase Phase Subc." := CompRec."Purchase Phase Subc.";
              EstLineRec."Purchase Action Plant" := CompRec."Purchase Action Plant";
              EstLineRec."Purchase Phase Plant" := CompRec."Purchase Phase Plant";
              //db.sn, 01-11-13: DP00260 (17764)
              EstLineRec.Discipline := CompRec.Discipline;
              EstLineRec."Trade Speciality" := CompRec."Trade Speciality";
              EstLineRec."Trade Expertise" := CompRec."Trade Expertise";
              //db.en, 01-11-13: DP00260 (17764)
              EstLineRec.CalculateTotals;
              EstLineRec.MODIFY;
              EstLineRec.CheckEstimateCharge;
            END ELSE BEGIN
              RcpLineRec.GET(CompRec."Estimate No.", CompRec."Sub-Estimate No.", CompRec."Part Group",
                             CompRec.Part, CompRec."Estimate Line", CompRec."Recipe Group",
                             CompRec.Recipe, CompRec."Recipe Line");
              RcpLineRec.Norm := CompRec.Norm;
              RcpLineRec."Norm (Sales)" := CompRec."Norm (Sales)";  //DP00381
              //db.sn, 28-09-12: C002769
              IF RcpLineRec.Norm <> 0 THEN
                RcpLineRec."Production Rate" := 1 / RcpLineRec.Norm
              ELSE
                RcpLineRec."Production Rate" := 0;
              IF RcpLineRec."Norm (Sales)" <> 0 THEN  //DP00381
                RcpLineRec."Production Rate (Sales)" := 1 / RcpLineRec."Norm (Sales)"
              ELSE
                RcpLineRec."Production Rate (Sales)" := 0;
              //db.en, 28-09-12: C002769
              RcpLineRec."Surcharge % Labor" := CompRec."Surcharge % Labor";  //DP00381
              RcpLineRec."Surcharge % Price" := CompRec."Surcharge % Price";  //DP00381
              RcpLineRec."Cost Type (Price)" := CompRec."Cost Type (Price)";  //DP00381
              RcpLineRec."Nett Cost Price" := CompRec."Nett Cost Price";
              RcpLineRec."Nett Sales Price" := CompRec."Nett Sales Price";  //DP00381
              RcpLineRec."Purchase Discount %":= CompRec."Purchase Discount %";
              RcpLineRec."Sales Discount %":= CompRec."Sales Discount %";
              RcpLineRec.VALIDATE("Gross Price", CompRec."Gross Price");
              RcpLineRec.Description := CompRec.Description;
              RcpLineRec."Price Agreement" := CompRec."Price Agreement";
              RcpLineRec."Norm Agreement" := CompRec."Norm Agreement";
              RcpLineRec."Item No." := CompRec."Item No.";
              RcpLineRec."Basic Item" := CompRec."Basic Item";
              RcpLineRec."Trade Item" := CompRec."Trade Item";
              RcpLineRec.Manufacturer := CompRec.Manufacturer;
              RcpLineRec."Vendor (Trade Item)" := CompRec."Vendor (Trade Item)";
              RcpLineRec."Cost Object Labor" := CompRec."Cost Object Labor";
              IF CompRec."Cost Type (Price)" = CompRec."Cost Type (Price)"::Material THEN
                RcpLineRec."Cost Object Price" := CompRec."Cost Object Price";
              IF CompRec."Cost Type (Price)" = CompRec."Cost Type (Price)"::Subcontracting THEN
                RcpLineRec."Cost Object Price" := CompRec."Cost Object Price";
              IF CompRec."Cost Type (Price)" = CompRec."Cost Type (Price)"::Plant THEN
                RcpLineRec."Cost Object Price" := CompRec."Cost Object Price";
              RcpLineRec."Cost Component" := CompRec."Cost Component";
              RcpLineRec.Quantity := CompRec.Quantity;
              RcpLineRec."Quantity (Sales)" := CompRec."Quantity (Sales)";  //DP00381
              RcpLineRec."Unit of Measure" := CompRec."Unit of Measure";
              RcpLineRec."Norm Group" := CompRec."Norm Group";
              RcpLineRec."Norm Group (Sales)" := CompRec."Norm Group (Sales)";  //DP00381
              RcpLineRec."Sub Operation Code" := CompRec."Sub Operation Code";
              RcpLineRec."Rate Code" := CompRec."Rate Code";
              RcpLineRec."Rate Type" := CompRec."Rate Type";
              RcpLineRec."Cost Rate" := CompRec."Cost Rate";
              RcpLineRec."Sales Rate" := CompRec."Sales Rate";  //DP00381
              RcpLineRec."Team Size" := CompRec."Team Size";
              RcpLineRec."Project No." := CompRec."Project No.";
              RcpLineRec.Element := CompRec.Element;
              RcpLineRec."Extension Contract" := CompRec."Extension Contract";  //DP00260
              RcpLineRec."Project Planning Activity Code" := CompRec."Project Planning Activity Code";
              RcpLineRec."Wage Component" := CompRec."Wage Component";  //DP00236
              RcpLineRec."Ask for Quote" := CompRec."Ask for Quote";
              RcpLineRec."Buy Back Price" := CompRec."Buy Back Price";
              RcpLineRec."Buy Back %" := CompRec."Buy Back %";
              RcpLineRec.Weight := CompRec.Weight;
              RcpLineRec."Line Status" := CompRec."Line Status";
              RcpLineRec."Purchase Action Mat." := CompRec."Purchase Action Mat.";
              RcpLineRec."Purchase Phase Mat." := CompRec."Purchase Phase Mat.";
              RcpLineRec."Purchase Action Subc." := CompRec."Purchase Action Subc.";
              RcpLineRec."Purchase Phase Subc." := CompRec."Purchase Phase Subc.";
              RcpLineRec."Purchase Action Plant" := CompRec."Purchase Action Plant";
              RcpLineRec."Purchase Phase Plant" := CompRec."Purchase Phase Plant";
              //db.sn, 01-11-13: DP00260 (17764)
              RcpLineRec.Discipline := CompRec.Discipline;
              RcpLineRec."Trade Speciality" := CompRec."Trade Speciality";
              RcpLineRec."Trade Expertise" := CompRec."Trade Expertise";
              //db.en, 01-11-13: DP00260 (17764)
              RcpLineRec.CalculateTotals;
              RcpLineRec.MODIFY;
              RcpLineRec.CheckRecipeCharge;
              RcpLineRec.UpdateEstLines;
            END;
          END;
          CompRec.Changed := FALSE;
          CompRec.MODIFY;
        UNTIL CompRec.NEXT = 0;
      END;

      EstRec.UpdateLogbook(CurrEst);
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE FillPurchRouteRefFilterCompres@1210190006() : Code[1024];
    VAR
      lvTmpRouteRefRec@1210190000 : TEMPORARY Record 11012079;
      lvRefFilter@1210190001 : Code[1024];
    BEGIN
      lvRefFilter := '';

      CompRec.RESET;
      CompRec.SETCURRENTKEY("Estimate No.", "Text Composition", "Ask for Quote", "Price Agreement", "Norm Agreement", "Zero Line");
      CompRec.SETRANGE("Estimate No.", "Estimate No.");
      CompRec.SETRANGE("Text Composition", "Text Composition");
      CompRec.SETRANGE("Ask for Quote", "Ask for Quote");
      CompRec.SETRANGE("Price Agreement", "Price Agreement");
      CompRec.SETFILTER("Purchase Route Reference", '<>%1', '');
      IF CompRec.FINDSET THEN BEGIN
        REPEAT
          lvTmpRouteRefRec.SETRANGE(Type, lvTmpRouteRefRec.Type::Reference);
          lvTmpRouteRefRec.SETRANGE("Reference No.", CompRec."Purchase Route Reference");
          IF NOT lvTmpRouteRefRec.FIND('-') THEN BEGIN
            lvTmpRouteRefRec.Type := lvTmpRouteRefRec.Type::Reference;
            lvTmpRouteRefRec."Reference No." := CompRec."Purchase Route Reference";
            lvTmpRouteRefRec."Entry No." := 1;
            lvTmpRouteRefRec.INSERT;
          END;
        UNTIL CompRec.NEXT = 0;
      END;

      lvTmpRouteRefRec.RESET;
      lvTmpRouteRefRec.SETRANGE(Type, lvTmpRouteRefRec.Type::Reference);
      IF lvTmpRouteRefRec.FIND('-') THEN BEGIN
        REPEAT
          IF (STRLEN(lvRefFilter) + STRLEN(lvTmpRouteRefRec."Reference No.")) <= MAXSTRLEN(lvRefFilter) THEN BEGIN
            IF lvRefFilter <> '' THEN
              lvRefFilter := lvRefFilter +'|';
            lvRefFilter := lvRefFilter + lvTmpRouteRefRec."Reference No.";
          END;
        UNTIL lvTmpRouteRefRec.NEXT = 0;
      END;

      EXIT(lvRefFilter);
    END;

    PROCEDURE ComposeText@1210190016(MainRec@1210190000 : Record 11020458) TextComp : Code[250];
    VAR
      sep@1100485000 : Text[30];
    BEGIN
      sep := '~';
      TextComp := '';

      TextComp := TextComp + MainRec.Description + sep;
      TextComp := TextComp + MainRec."Unit of Measure" + sep;
      TextComp := TextComp + MainRec."Rate Code" + sep;
      IF MainRec."Trade Item" <> '' THEN
        TextComp := TextComp + MainRec."Trade Item" + sep
      ELSE
        IF MainRec."Basic Item" <> '' THEN
          TextComp := TextComp + MainRec."Basic Item" + sep
        ELSE
          IF MainRec."Item No." <> '' THEN
            TextComp := TextComp + MainRec."Item No." + sep
          ELSE
            IF MainRec."Cost Object Labor" <> '' THEN
              TextComp := TextComp + MainRec."Cost Object Labor" + sep
            ELSE
              TextComp := TextComp + MainRec."Cost Object Price" + sep;
      IF MainRec."Plant Type" <> '' THEN
        TextComp := TextComp + MainRec."Plant Type" + sep;

      TextComp := COPYSTR(TextComp, 1, MAXSTRLEN(MainRec."Text Composition"));  //100+10+10+20
      EXIT(TextComp);
    END;

    PROCEDURE CalculateDiscount@1100485000(SalesBln@1100525001 : Boolean);
    VAR
      NettPrice@1100525000 : Decimal;
    BEGIN
      IF "Gross Price" <> 0 THEN BEGIN
        IF  ("Item No." + "Basic Item" + "Trade Item" + "Plant Type" = '') AND ("Purchase Discount %" = 0) THEN BEGIN
          "Gross Price" := "Nett Cost Price";
          //db.sn, 11-11-13: DP00260 (C005807)
          IF NOT SalesBln THEN
            VALIDATE("Nett Sales Price","Gross Price" - (("Gross Price"/100) * "Sales Discount %"));
          //db.en, 11-11-13: DP00260 (C005807)
        END ELSE BEGIN
          IF SalesBln THEN
            "Sales Discount %" := (("Gross Price" - "Nett Sales Price") / "Gross Price") * 100
          ELSE
            "Purchase Discount %" := (("Gross Price" - "Nett Cost Price") / "Gross Price") * 100;
        END;
      END ELSE BEGIN
        //db.sn, 11-11-13: DP00260 (C005807)
        IF NOT SalesBln THEN BEGIN
          IF "Purchase Discount %" = 0 THEN BEGIN
            "Gross Price" := "Nett Cost Price";
            VALIDATE("Nett Sales Price","Gross Price" - (("Gross Price"/100) * "Sales Discount %"));
          END;
        END;
        //db.en, 11-11-13: DP00260 (C005807)
        IF "Purchase Discount %" <> 100 THEN BEGIN
          IF NOT (("Item No." + "Basic Item" + "Trade Item" + "Plant Type" = '') AND ("Purchase Discount %" = 0)) THEN
            "Gross Price" := "Nett Cost Price" / ((100 - "Purchase Discount %") / 100);
        END ELSE BEGIN
          "Gross Price" := "Nett Cost Price";
        END;
      END;
    END;

    PROCEDURE CalculateNettPrice@13();
    BEGIN
      VALIDATE("Nett Cost Price","Gross Price" - (("Gross Price"/100) * "Purchase Discount %"));
      VALIDATE("Nett Sales Price","Gross Price" - (("Gross Price"/100) * "Sales Discount %"));  //DP00381
    END;

    PROCEDURE CalculateGrossPrice@1100525002();
    BEGIN
      IF "Purchase Discount %" <> 100 THEN
        "Gross Price" := "Nett Cost Price" * 100 / (100 - "Purchase Discount %");
    END;

    PROCEDURE CalculateCompressedTotals@1210190009(VAR CumQuanCost@1100485001 : Decimal;VAR HoursCost@1100485002 : Decimal;VAR LaborCost@1100485003 : Decimal;VAR MaterialCost@1100485004 : Decimal;VAR SubcontractingCost@1100485005 : Decimal;VAR PlantCost@1100485006 : Decimal;VAR SundryCost@1100525005 : Decimal;VAR CostAmount@1100485000 : Decimal;VAR BuyBack@1100525000 : Decimal;VAR CumQuanSales@1100525009 : Decimal;VAR HoursSales@1100525007 : Decimal;VAR LaborSales@1100525006 : Decimal;VAR MaterialSales@1100525004 : Decimal;VAR SubcontractingSales@1100525003 : Decimal;VAR PlantSales@1100525002 : Decimal;VAR SundrySales@1100525008 : Decimal;VAR SalesAmount@1100525001 : Decimal);
    BEGIN
      //Dp00381
      CumQuanCost := 0;
      HoursCost := 0;
      LaborCost := 0;
      MaterialCost := 0;
      SubcontractingCost := 0;
      PlantCost := 0;
      SundryCost := 0;
      CostAmount := 0;
      BuyBack := 0;
      CumQuanSales := 0;
      HoursSales := 0;
      LaborSales := 0;
      MaterialSales := 0;
      SubcontractingSales := 0;
      PlantSales := 0;
      SundrySales := 0;
      SalesAmount := 0;

      CompRec.RESET;
      CompRec.SETCURRENTKEY("Estimate No.", "Compress No.");
      CompRec.SETRANGE("Estimate No.", "Estimate No.");
      CompRec.SETRANGE("Compress No.", "Compress No.");
      IF CompRec.FINDSET THEN BEGIN
        REPEAT
          CumQuanCost := CumQuanCost + CompRec."Cumulative Quantity";
          HoursCost := HoursCost + CompRec.Hours;
          LaborCost := LaborCost + CompRec."Labor Cost Amount";
          MaterialCost := MaterialCost + CompRec."Material Cost Amount";
          SubcontractingCost := SubcontractingCost + CompRec."Subcontracting Cost Amount";
          PlantCost := PlantCost + CompRec."Plant Cost Amount";
          SundryCost := SundryCost + CompRec."Sundry Cost Amount";
          CostAmount := CostAmount + CompRec."Cost Amount";
          BuyBack := BuyBack + CompRec."Buy Back Amount";
          //Sales
          CumQuanSales := CumQuanSales + CompRec."Cumulative Quantity (Sales)";
          HoursSales := HoursSales + CompRec."Hours (Sales)";
          LaborSales := LaborSales + CompRec."Labor Sales Amount";
          MaterialSales := MaterialSales + CompRec."Material Sales Amount";
          SubcontractingSales := SubcontractingSales + CompRec."Subcontracting Sales Amount";
          PlantSales := PlantSales + CompRec."Plant Sales Amount";
          SundrySales := SundrySales + CompRec."Sundry Sales Amount";
          SalesAmount := SalesAmount + CompRec."Sales Amount";
        UNTIL CompRec.NEXT = 0;
      END;
    END;

    PROCEDURE HandleLookupUnit@1210190011();
    VAR
      ItemUnitRec@1210190000 : Record 5404;
      lvUnit@1210190001 : Code[10];
    BEGIN
      lvUnit := ItemUnitRec.HandleLookupUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)");
      IF (lvUnit <> '') AND (lvUnit <> "Unit of Measure") THEN BEGIN
        xRec."Unit of Measure" := "Unit of Measure";  //db, 01-07-04: standard bug
        VALIDATE("Unit of Measure", lvUnit);
        IF CurrFieldNo = 0 THEN  //db, 07-11-05: if function called by lookup on form
          CheckItemUnitConversion(Rec, xRec);
      END;
    END;

    PROCEDURE CheckItemUnitConversion@1210190007(VAR MainNewRec@1210190006 : Record 11020458;MainOldRec@1210190007 : Record 11020458);
    VAR
      ItemRec@1210190004 : Record 27;
      UnitFactor@1210190005 : Decimal;
      UnitFactorOld@1210190003 : Decimal;
      UnitFactorNew@1210190002 : Decimal;
      UnitControl@1210190001 : Codeunit 5402;
      ValidateCu@1210190008 : Codeunit 11012033;
    BEGIN
      WITH MainNewRec DO BEGIN
        UnitFactorOld := 1;
        UnitFactorNew := 1;
        IF "Trade Item" <> '' THEN BEGIN
          ValidateCu.ValidateUnit(ItemTypeOpt::"Trade Item",
            "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
            Quantity,"Unit of Measure",UnitFactorNew);
        END ELSE BEGIN
          IF "Basic Item" <> '' THEN BEGIN
            ValidateCu.ValidateUnit(ItemTypeOpt::"Basic Item",
              "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
              Quantity,"Unit of Measure",UnitFactorNew);
          END ELSE BEGIN
            IF "Item No." <> '' THEN BEGIN
              ItemRec.GET("Item No.");
              UnitFactorOld := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, MainOldRec."Unit of Measure");
              UnitFactorNew := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, "Unit of Measure");
              UnitFactor := UnitFactorOld;
              ValidateCu.ValidateUnit(ItemTypeOpt::Item,
                "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
                Quantity,"Unit of Measure",UnitFactor);
            END;
          END;
        END;
        IF (UnitFactorNew * UnitFactorOld) <> 0 THEN BEGIN
          IF UnitFactorNew <> UnitFactorOld THEN  //db, 20-04-11: M26826
            VALIDATE("Gross Price", ("Gross Price" * UnitFactorNew / UnitFactorOld));
          "Unit Factor" := UnitFactorNew;
        END;
      END;
    END;

    PROCEDURE CheckUnitFactor@1210190012() lvFactor : Decimal;
    BEGIN
      lvFactor := 1;

      WITH CompRec DO BEGIN
        IF TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN BEGIN
          IF "Unit of Measure" = UPPERCASE(TradeItemRec."Packaging Unit") THEN
            IF TradeItemRec."Qty. per Unit of Measure" <> 0 THEN
              lvFactor := TradeItemRec."Qty. per Unit of Measure";
          EXIT(lvFactor);
        END;
        IF BasicItemRec.GET(Manufacturer, "Basic Item") THEN BEGIN
          IF "Unit of Measure" = UPPERCASE(BasicItemRec."Packaging Unit") THEN
            IF BasicItemRec."Qty. per Unit of Measure" <> 0 THEN
              lvFactor := BasicItemRec."Qty. per Unit of Measure";
          EXIT(lvFactor);
        END;
        IF ItemUnitRec.GET("Item No.", "Unit of Measure") THEN BEGIN
          IF ItemUnitRec."Qty. per Unit of Measure" <> 0 THEN
            lvFactor := ItemUnitRec."Qty. per Unit of Measure";
          EXIT(lvFactor);
        END;
      END;

      EXIT(lvFactor);
    END;

    PROCEDURE ValidateItem@3(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item');
    VAR
      Desc1Txt@1210190001 : Text[50];
      Desc2Txt@1210190003 : Text[50];
      lvDummyDate@1210190005 : Date;
      lvRefDate@1100485000 : Date;
      lvDiscRef1@1100525001 : Code[20];
      lvDiscRef2@1100525002 : Code[20];
      lvRefPrio@1100525000 : Code[10];
      lvDiscType@1100525003 : 'Purchase,Sales';
      ValidateCu@1210190004 : Codeunit 11012033;
    BEGIN
      IF ("Purchase Route Reference" = '') AND ("Price Agreement" = FALSE) THEN BEGIN
        EstRec.GET("Estimate No.");
        lvRefDate := ValidateCu.GetRefDateEstimate(EstRec);
        ValidateCu.GetRefDiscEstimate(EstRec, lvDiscRef1, lvDiscRef2, lvDiscType::Purchase);
        lvRefPrio := ValidateCu.GetRefPrioEstimate(EstRec, lvDiscType::Purchase);

        ValidateCu.ValidateItem(
          LTypeArtOpt, "Trade Item", "Item No.", Manufacturer, "Vendor (Trade Item)", "Basic Item",
          "Cost Object Price", Desc1Txt, "Unit of Measure", "Nett Cost Price",
          "Purchase Discount %", lvDummyDate, "Gross Price", Desc2Txt, "Cost Component",
          lvDiscRef1, lvDiscRef2, lvRefDate, lvRefPrio);

        //dbeekman.sn, 31-03-09, calculate BuyBack
        CLEAR("Buy Back Price");
        CLEAR("Buy Back %");
        IF LTypeArtOpt = LTypeArtOpt::Item THEN BEGIN
          IF NOT ItemRec.GET("Item No.") THEN ItemRec.INIT;
          IF ItemRec."Sales/Buy-Back Item (Plant)" THEN BEGIN  //db, 06-06-11: M27669 (skip validate for normal items)
            ValidateCu.GetSalesBuyBackRates("Item No.", EstRec."Plant Location",lvRefDate,
              "Gross Price","Buy Back Price");  //db, 06-06-11: M27669 (use SalesRate as GrossPrice)
            VALIDATE("Buy Back Price");
            VALIDATE("Purchase Discount %", ItemRec."Profit %");  //db, 22-09-11: M27669 (assumed to be zero)
          END;
        END;
        //dbeekman.en

        "Text Composition" := ComposeText(Rec);
        IF Desc2Txt = '' THEN
          Description := Desc1Txt
        ELSE
          Description := COPYSTR((Desc1Txt + '\' + Desc2Txt), 1, MAXSTRLEN(Description));

        //IF EstRec."Estimate Type" = EstRec."Estimate Type"::Sales THEN BEGIN
          ValidateCu.GetRefDiscEstimate(EstRec, lvDiscRef1, lvDiscRef2, lvDiscType::Sales);
          lvRefPrio := ValidateCu.GetRefPrioEstimate(EstRec, lvDiscType::Sales);
          ValidateCu.GetSalesDiscount(
            EstRec."Customer No.", "Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)",
            "Nett Sales Price", "Sales Discount %", "Gross Price", lvRefDate, EstRec."Customer Disc. Group",
            lvDiscRef1, lvDiscRef2, lvRefPrio);  //DP00381
        //END;
      END;

      CASE LTypeArtOpt OF
        LTypeArtOpt::Item:
          BEGIN
            IF NOT ItemRec.GET("Item No.") THEN ItemRec.INIT;
            Weight := ItemRec.Weight;
            IF ItemRec."Sub Operation Code" <> '' THEN
              VALIDATE("Sub Operation Code", ItemRec."Sub Operation Code");
          END;
        LTypeArtOpt::"Basic Item":
          BEGIN
            IF NOT BasicItemRec.GET(Manufacturer, "Basic Item") THEN BasicItemRec.INIT;
            Weight := BasicItemRec."Nett Weight";
            IF BasicItemRec."Sub Operation Code" <> '' THEN
              VALIDATE("Sub Operation Code", BasicItemRec."Sub Operation Code");
          END;
        LTypeArtOpt::"Trade Item":
          BEGIN
            IF NOT TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN TradeItemRec.INIT;
            Weight := TradeItemRec."Gross Weight";
            IF TradeItemRec."Sub Operation Code" <> '' THEN
              VALIDATE("Sub Operation Code", TradeItemRec."Sub Operation Code");
          END;
      END;

      VALIDATE("Buy Back Price"); //to trigger error if buyback is not allowed when new item is selected with price agreement
    END;

    PROCEDURE CalculateTotals@1();
    VAR
      WageCompRec@1100525017 : Record 11012014;
      OverTimeFactorCost@1100525016 : Decimal;
      OverTimeFactorSales@1100525015 : Decimal;
      RoundFactor@1100525014 : Decimal;
      NettPriceMat@1100525013 : Decimal;
      NettPriceSubc@1100525012 : Decimal;
      NettPricePlant@1100525011 : Decimal;
      NettPriceSundry@1100525010 : Decimal;
      GrossPriceMat@1100525009 : Decimal;
      GrossPriceSubc@1100525008 : Decimal;
      GrossPricePlant@1100525007 : Decimal;
      GrossPriceSundry@1100525006 : Decimal;
      SalesPriceMat@1100525005 : Decimal;
      SalesPriceSubc@1100525004 : Decimal;
      SalesPricePlant@1100525003 : Decimal;
      SalesPriceSundry@1100525002 : Decimal;
      CostRate@1100525001 : Decimal;
      SalesRate@1100525000 : Decimal;
    BEGIN
      //DP00381: copy from EstLineRec", adapted for cumulative quantity
      Hours := "Time Quantity" * "Cumulative Quantity" * Norm;
      "Hours (Sales)" := "Time Quantity" * "Cumulative Quantity (Sales)" * "Norm (Sales)";
      CostRate := "Cost Rate";
      SalesRate := "Sales Rate" * (1 + "Surcharge % Labor"/100);
      IF "Cost Type (Price)" = "Cost Type (Price)"::Material THEN BEGIN
        NettPriceMat := "Nett Cost Price";
        GrossPriceMat := "Gross Price";
        SalesPriceMat := "Nett Sales Price" * (1 + "Surcharge % Price"/100);
      END;
      IF "Cost Type (Price)" = "Cost Type (Price)"::Subcontracting THEN BEGIN
        NettPriceSubc := "Nett Cost Price";
        GrossPriceSubc := "Gross Price";
        SalesPriceSubc := "Nett Sales Price" * (1 + "Surcharge % Price"/100);
      END;
      IF "Cost Type (Price)" = "Cost Type (Price)"::Plant THEN BEGIN
        NettPricePlant := "Nett Cost Price";
        GrossPricePlant := "Gross Price";
        SalesPricePlant := "Nett Sales Price" * (1 + "Surcharge % Price"/100);
      END;
      IF "Cost Type (Price)" = "Cost Type (Price)"::Sundry THEN BEGIN
        NettPriceSundry := "Nett Cost Price";
        GrossPriceSundry := "Gross Price";
        SalesPriceSundry := "Nett Sales Price" * (1 + "Surcharge % Price"/100);
      END;
      IF "Cost Type (Price)" = "Cost Type (Price)"::" " THEN BEGIN
        IF ("Nett Cost Price" <> 0) OR ("Nett Sales Price" <> 0) THEN
          TESTFIELD("Cost Type (Price)");
      END;

      IF "Cum. Adj. Factor Hours" <> 0 THEN
        Hours := Hours * "Cum. Adj. Factor Hours";
      IF "Cum. Adj. Factor Hours (Sales)" <> 0 THEN  //DP00555
        "Hours (Sales)" := "Hours (Sales)" * "Cum. Adj. Factor Hours (Sales)";
      "Labor Cost Amount"  := Hours * CostRate;
      "Labor Sales Amount"  := "Hours (Sales)" * SalesRate;
      //DP00236.sn
      IF "Wage Component" <> '' THEN BEGIN
        WageCompRec.GetOverTimeFactors("Wage Component",OverTimeFactorCost, OverTimeFactorSales);
        IF OverTimeFactorCost <> 0 THEN
          "Labor Cost Amount" := "Labor Cost Amount" * OverTimeFactorCost;
        IF OverTimeFactorSales <> 0 THEN
          "Labor Sales Amount" := "Labor Sales Amount" * OverTimeFactorSales;
      END;
      //DP00236.en
      IF "Rate Type" = "Rate Type"::Minuts THEN BEGIN
        Hours := Hours * "Team Size" / 60;
        "Hours (Sales)":= "Hours (Sales)" * "Team Size" / 60;
      END;

      "Material Cost Amount" := "Time Quantity" * "Cumulative Quantity" * NettPriceMat;
      "Material Sales Amount" := "Time Quantity" * "Cumulative Quantity (Sales)" * SalesPriceMat;

      "Subcontracting Cost Amount" := "Time Quantity" * "Cumulative Quantity" * NettPriceSubc;
      "Subcontracting Sales Amount" := "Time Quantity" * "Cumulative Quantity (Sales)" * SalesPriceSubc;

      "Plant Cost Amount" := "Time Quantity" * "Cumulative Quantity" * NettPricePlant;
      "Plant Sales Amount" := "Time Quantity" * "Cumulative Quantity (Sales)" * SalesPricePlant;

      "Sundry Cost Amount" := "Time Quantity" * "Cumulative Quantity" * NettPriceSundry;
      "Sundry Sales Amount" := "Time Quantity" * "Cumulative Quantity (Sales)" * SalesPriceSundry;

      IF ("Cum. Adj. Factor Price" <> 0)  AND ("Cost Type (Price)" = "Cost Type (Price)"::Material) THEN BEGIN
        "Material Cost Amount" := "Material Cost Amount" * "Cum. Adj. Factor Price";
        "Gross Amount" := "Gross Amount" * "Cum. Adj. Factor Price";
      END;
      IF ("Cum. Adj. Factor Price" <> 0)  AND ("Cost Type (Price)" = "Cost Type (Price)"::Subcontracting) THEN BEGIN
        "Subcontracting Cost Amount" := "Subcontracting Cost Amount" * "Cum. Adj. Factor Price";
        //"Subcontracting Gross Amount" := "Subcontracting Gross Amount" * "Cum. Adj. Factor Price";
      END;
      IF ("Cum. Adj. Factor Price" <> 0)  AND ("Cost Type (Price)" = "Cost Type (Price)"::Plant) THEN BEGIN
        "Plant Cost Amount" := "Plant Cost Amount" * "Cum. Adj. Factor Price";
        //"Plant Gross Amount" := "Plant Gross Amount" * "Cum. Adj. Factor Price";
      END;
      IF ("Cum. Adj. Factor Price" <> 0)  AND ("Cost Type (Price)" = "Cost Type (Price)"::Sundry) THEN BEGIN
        "Sundry Cost Amount" := "Sundry Cost Amount" * "Cum. Adj. Factor Price";
        //"Sundry Gross Amount" := "Sundry Gross Amount" * "Cum. Adj. Factor Price";
      END;

      "Cost Amount" := "Labor Cost Amount" + "Material Cost Amount" + "Subcontracting Cost Amount" +
        "Plant Cost Amount" + "Sundry Cost Amount";
      "Sales Amount" := "Labor Sales Amount" + "Material Sales Amount" + "Subcontracting Sales Amount" +
        "Plant Sales Amount" + "Sundry Sales Amount";

      "Total Weight" := ROUND("Cumulative Quantity" * Weight);
      "Buy Back Amount" := ROUND("Cumulative Quantity" * "Buy Back Price");
    END;

    PROCEDURE CheckGtinAlternative@1100485002();
    VAR
      TradeItemRec@1100485000 : Record 11012317;
      TradeItemRec2@1100485001 : Record 11012317;
      AlterPrice@1100485002 : Decimal;
      lvRefDate@1100485004 : Date;
      lvDiscRef1@1100485005 : Code[20];
      lvDiscRef2@1100485006 : Code[20];
      lvRefPrio@1100525000 : Code[10];
      lvDiscType@1100525001 : 'Purchase,Sales';
      ValidateCu@1100485003 : Codeunit 11012033;
    BEGIN
      "Alternative Vendor" := '';
      "Alternative Item" := '';
      "Alternative Price" := 0;

      IF "Trade Item" = '' THEN EXIT;

      IF TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN BEGIN
        IF TradeItemRec."GTIN Code (Item)" = '' THEN EXIT;

        EstRec.GET("Estimate No.");
        lvRefDate := ValidateCu.GetRefDateEstimate(EstRec);
        ValidateCu.GetRefDiscEstimate(EstRec, lvDiscRef1, lvDiscRef2, lvDiscType::Purchase);
        lvRefPrio := ValidateCu.GetRefPrioEstimate(EstRec, lvDiscType::Purchase);

        ValidateCu.GetPriceTradeItem(TradeItemRec, lvRefDate, lvDiscRef1, lvDiscRef2, lvRefPrio);
        AlterPrice := TradeItemRec."Nett Price";

        TradeItemRec2.RESET;
        TradeItemRec2.SETCURRENTKEY("GTIN Code (Item)");
        TradeItemRec2.SETRANGE("GTIN Code (Item)", TradeItemRec."GTIN Code (Item)");
        IF TradeItemRec2.FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            ValidateCu.GetPriceTradeItem(TradeItemRec2, lvRefDate, lvDiscRef1, lvDiscRef2, lvRefPrio);
            IF (TradeItemRec2.Vendor <> TradeItemRec.Vendor) AND (TradeItemRec2."Item Code" <> TradeItemRec."Item Code") THEN BEGIN
              IF (TradeItemRec2."Nett Price" < AlterPrice) AND (TradeItemRec2."Nett Price" <> 0) THEN BEGIN
                "Alternative Vendor" := TradeItemRec2.Vendor;
                "Alternative Item" := TradeItemRec2."Item Code";
                "Alternative Price" := TradeItemRec2."Nett Price";
                AlterPrice := "Alternative Price";
              END;
            END;
          UNTIL TradeItemRec2.NEXT = 0;
        END ELSE BEGIN
          TradeItemRec2.RESET;
          TradeItemRec2.SETCURRENTKEY("Product Code");
          TradeItemRec2.SETRANGE(Manufacturer, TradeItemRec.Manufacturer);
          TradeItemRec2.SETRANGE("Product Code", TradeItemRec."Product Code");
          IF TradeItemRec2.FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              ValidateCu.GetPriceTradeItem(TradeItemRec2, lvRefDate, lvDiscRef1, lvDiscRef2, lvRefPrio);
              IF (TradeItemRec2.Vendor <> TradeItemRec.Vendor) AND (TradeItemRec2."Item Code" <> TradeItemRec."Item Code") THEN BEGIN
                IF (TradeItemRec2."Nett Price" < AlterPrice) AND (TradeItemRec2."Nett Price" <> 0) THEN BEGIN
                  "Alternative Vendor" := TradeItemRec2.Vendor;
                  "Alternative Item" := TradeItemRec2."Item Code";
                  "Alternative Price" := TradeItemRec2."Nett Price";
                  AlterPrice := "Alternative Price";
                END;
              END;
            UNTIL TradeItemRec2.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE GetPartDescription@1100525001() : Text[50];
    VAR
      EstimateElementRAW@1100525000 : Record 11125679;
    BEGIN
      CALCFIELDS("Part Description");
      IF ("Part Group" = '') AND ("Part Description" = '') THEN BEGIN
        EstimateElementRAW.SETCURRENTKEY("Estimate No.", "Element No.");
        EstimateElementRAW.SETRANGE("Estimate No.", "Estimate No.");
        EstimateElementRAW.SETRANGE("Element No.", Part);
        IF EstimateElementRAW.FINDFIRST THEN
          EXIT(EstimateElementRAW.Text);
      END;
      EXIT("Part Description");
    END;

    BEGIN
    END.
  }
}

