OBJECT Table 11020505 Plant Transport Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 PlantSetupRec.GET;
                 PlantSetupRec.TESTFIELD("Transport Order Nos.");
                 NoSeriesMgt.InitSeries(PlantSetupRec."Transport Order Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;
               Status := Status::Open;
               "Transport Order Printed" := 0;
               "Purchase Order" := '';
               FillLocations();
               FillDefaultPerc();

               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05
             END;

    OnModify=BEGIN
               CheckUpdateTransportCost();
             END;

    OnDelete=VAR
               lvTransPlantOrderRec@1100485002 : Record 11020509;
               lvTransCostLineRec@1100485000 : Record 11020506;
               lvLinkedTransOrdersRec@1100485004 : Record 11020514;
               lvOrderContRec@1100485003 : Record 11012536;
               lvTransRideLineRec@1100525001 : Record 11020518;
             BEGIN
               IF "Ride No." <> '' THEN BEGIN
                 IF lvTransRideLineRec.GET("Ride No.", "No.") THEN
                  ERROR(Text005, lvTransRideLineRec.FIELDCAPTION("Transport Order No."), "No.", FIELDCAPTION("Ride No."), "Ride No.");
               END;

               lvTransCostLineRec.SETRANGE("Transport Order No.", "No.");
               lvTransCostLineRec.DELETEALL;

               lvTransPlantOrderRec.SETRANGE("Transport Order No.", "No.");
               lvTransPlantOrderRec.DELETEALL;

               lvLinkedTransOrdersRec.SETRANGE("Transport Order No.", "No.");
               lvLinkedTransOrdersRec.DELETEALL;
               lvLinkedTransOrdersRec.RESET;
               lvLinkedTransOrdersRec.SETCURRENTKEY("Linked Transport Order No.");
               lvLinkedTransOrdersRec.SETRANGE("Linked Transport Order No.", "No.");
               lvLinkedTransOrdersRec.DELETEALL;

               //DP00183.sc
               DeleteDocumentLinks();
               DeleteCommentLines();
               //DP00183.ec

               lvOrderContRec.SETRANGE(Type, lvOrderContRec.Type::"TO From", lvOrderContRec.Type::"TO To");
               lvOrderContRec.SETRANGE("Order No.", "No.");
               lvOrderContRec.DELETEALL;
             END;

    OnRename=VAR
               lvOrderContRec@1100485002 : Record 11012536;
               lvOrderContRec2@1100485000 : Record 11012536;
             BEGIN
               IF Status >= Status::Released THEN
                 FIELDERROR(Status);

               //DP00183.sc
               MoveDocumentLinks(xRec, Rec, FALSE); //DP00183.n
               //DP00183.ec

               lvOrderContRec.SETRANGE(Type, lvOrderContRec.Type::"TO From", lvOrderContRec.Type::"TO To");
               lvOrderContRec.SETRANGE("Order No.", xRec."No.");
               IF lvOrderContRec.FIND('-') THEN BEGIN
                 REPEAT
                   lvOrderContRec2 := lvOrderContRec;
                   lvOrderContRec2."Order No." := "No.";
                   lvOrderContRec2.INSERT;
                   lvOrderContRec.DELETE;
                 UNTIL lvOrderContRec.NEXT = 0;
               END;
             END;

    CaptionML=ENU=Transport Order;
    LookupPageID=Page11020511;
  }
  FIELDS
  {
    { 10  ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  PlantSetupRec.GET;
                                                                  NoSeriesMgt.TestManual(PlantSetupRec."Transport Order Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 20  ;   ;Transport Date      ;Date          ;OnValidate=VAR
                                                                lvTransCostLineRec@1100525000 : Record 11020506;
                                                                lvUpdateItemPrices@1100525001 : Boolean;
                                                              BEGIN
                                                                IF (Status >= Status::Released) THEN
                                                                    FIELDERROR(Status);

                                                                CheckOrderDateAllowed();

                                                                IF "Transport Date" <> xRec."Transport Date" THEN BEGIN
                                                                  lvTransCostLineRec.SETRANGE("Transport Order No.", "No.");
                                                                  lvTransCostLineRec.SETFILTER(Type, '<>%1', lvTransCostLineRec.Type::Text);
                                                                  IF lvTransCostLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
                                                                    lvUpdateItemPrices := TRUE;
                                                                    IF CurrFieldNo = FIELDNO("Transport Date") THEN BEGIN
                                                                      IF NOT CONFIRM(Text004, TRUE, FIELDCAPTION("Transport Date")) THEN
                                                                        lvUpdateItemPrices := FALSE;
                                                                    END;
                                                                    IF lvUpdateItemPrices THEN BEGIN
                                                                      REPEAT
                                                                        lvTransCostLineRec.Price := lvTransCostLineRec.SearchTransportPrice(Rec);
                                                                        lvTransCostLineRec.VALIDATE(Price);
                                                                        lvTransCostLineRec.MODIFY(FALSE);
                                                                      UNTIL lvTransCostLineRec.NEXT = 0;
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Transport Date }
    { 25  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF (Status >= Status::Released) THEN
                                                                    FIELDERROR(Status);

                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  IF PlantOrdersPresent() THEN
                                                                    FIELDERROR(Type, Text003);

                                                                  IF Type = Type::"Other Transfers" THEN BEGIN
                                                                    VALIDATE("From Location", '');
                                                                    VALIDATE("To Location", '');
                                                                  END;

                                                                  FillLocations();
                                                                  FillDefaultPerc();
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Arrival,Removal,Other Transfers;
                                                   OptionString=Arrival,Removal,Other Transfers }
    { 30  ;   ;Shipping Agent      ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                //IF (CurrFieldNo = FIELDNO("Shipping Agent")) AND ("Shipping Agent" <> xRec."Shipping Agent") THEN  //22057.o
                                                                //  FillMeansTranDefaultCostObject();
                                                                VALIDATE("Means of Transport");
                                                                CALCFIELDS("Shipping Agent Name", "External Transport");
                                                              END;

                                                   CaptionML=ENU=Shipping Agent }
    { 31  ;   ;Shipping Agent Name ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Shipping Agent".Name WHERE (Code=FIELD(Shipping Agent)));
                                                   CaptionML=ENU=Shipping Agent Name;
                                                   Editable=No }
    { 32  ;   ;External Transport  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Shipping Agent".External WHERE (Code=FIELD(Shipping Agent)));
                                                   CaptionML=ENU=External Transport;
                                                   Editable=No }
    { 40  ;   ;Means of Transport  ;Code20        ;TableRelation="Means of Transport".Code WHERE (Shipping Agent=FIELD(Shipping Agent));
                                                   OnValidate=BEGIN
                                                                //IF (CurrFieldNo = FIELDNO("Means of Transport")) AND ("Means of Transport" <> xRec."Means of Transport") THEN  //22057.o
                                                                //  FillMeansTranDefaultCostObject();
                                                                CALCFIELDS("Means of Transport Description");
                                                                //RecalcTransOrderLines(TRUE);  //22057.o
                                                              END;

                                                   CaptionML=ENU=Means of Transport }
    { 41  ;   ;Means of Transport Description;Text30;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Means of Transport".Description WHERE (Shipping Agent=FIELD(Shipping Agent),
                                                                                                              Code=FIELD(Means of Transport)));
                                                   CaptionML=ENU=Means of Transport Description;
                                                   Editable=No }
    { 50  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 60  ;   ;Order Amount        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Plant Transport Cost Line".Amount WHERE (Transport Order No.=FIELD(No.)));
                                                   CaptionML=ENU=Order Amount;
                                                   Editable=No }
    { 70  ;   ;Ride No.            ;Code20        ;TableRelation="Plant Transport Ride";
                                                   CaptionML=ENU=Ride No.;
                                                   Editable=No }
    { 75  ;   ;Department Code     ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1, "Department Code");
                                                              END;

                                                   CaptionML=ENU=Department Code }
    { 90  ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Open,Printed,Released,Sended,Posted;
                                                   OptionString=Open,Printed,Released,PO Posted,TO Posted;
                                                   Editable=No }
    { 100 ;   ;From Location       ;Code20        ;TableRelation=IF (Type=CONST(Arrival)) "Plant Location" WHERE (Depot=CONST(Yes))
                                                                 ELSE IF (Type=CONST(Removal)) "Plant Location" WHERE (Depot=CONST(No))
                                                                 ELSE "Plant Location";
                                                   OnValidate=BEGIN
                                                                IF (Status >= Status::Released) THEN
                                                                    FIELDERROR(Status);

                                                                CALCFIELDS("From Location Description", "From Depot");
                                                                IF "From Depot" AND ("Perc. From Location" <> 0) THEN
                                                                  "Perc. From Location" := 0;

                                                                IF "From Location" <> '' THEN BEGIN
                                                                  PlantLocRec.GET("From Location");
                                                                  PlantLocRec.CheckBlock(1,TRUE,FALSE);
                                                                  "From Location Address" := PlantLocRec.Address;
                                                                  "From Location Address 2" := PlantLocRec."Address 2";
                                                                  "From Location City" := PlantLocRec.City;
                                                                  "From Location Contact" := PlantLocRec.Contact;
                                                                  "From Location Contact Phone No" := PlantLocRec."Contact Phone No.";
                                                                  "From Location Post Code" := PlantLocRec."Post Code";
                                                                END ELSE BEGIN
                                                                  "From Location Address" := '';
                                                                  "From Location Address 2" := '';
                                                                  "From Location City" := '';
                                                                  "From Location Contact" := '';
                                                                  "From Location Contact Phone No" := '';
                                                                  "From Location Post Code" := '';
                                                                END;
                                                                "From Location Address Code" := '';
                                                              END;

                                                   CaptionML=ENU=From Location }
    { 101 ;   ;From Location Description;Text50   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Location".Description WHERE (Code=FIELD(From Location)));
                                                   CaptionML=ENU=From Location Description;
                                                   Editable=No }
    { 102 ;   ;From Depot          ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Location".Depot WHERE (Code=FIELD(From Location)));
                                                   CaptionML=ENU=From Depot;
                                                   Editable=No }
    { 110 ;   ;To Location         ;Code20        ;TableRelation=IF (Type=CONST(Arrival)) "Plant Location" WHERE (Depot=CONST(No))
                                                                 ELSE IF (Type=CONST(Removal)) "Plant Location" WHERE (Depot=CONST(Yes))
                                                                 ELSE "Plant Location";
                                                   OnValidate=BEGIN
                                                                IF (Status >= Status::Released) THEN
                                                                    FIELDERROR(Status);

                                                                CALCFIELDS("To Location Description", "To Depot");
                                                                IF "To Depot" AND ("Perc. To Location" <> 0) THEN
                                                                  "Perc. To Location" := 0;

                                                                IF "To Location" <> '' THEN BEGIN
                                                                  PlantLocRec.GET("To Location");
                                                                  PlantLocRec.CheckBlock(1,TRUE,FALSE);
                                                                  "To Location Address" := PlantLocRec.Address;
                                                                  "To Location Address 2" := PlantLocRec."Address 2";
                                                                  "To Location City" := PlantLocRec.City;
                                                                  "To Location Contact" := PlantLocRec.Contact;
                                                                  "To Location Contact Phone No" := PlantLocRec."Contact Phone No.";
                                                                  "To Location Post Code" := PlantLocRec."Post Code";
                                                                  IF PlantLocRec."Customer No." <> '' THEN BEGIN
                                                                    IF CustRec.GET(PlantLocRec."Customer No.") THEN
                                                                      "Shipment Method Code" := CustRec."Shipment Method Code";
                                                                  END;
                                                                END ELSE BEGIN
                                                                  "To Location Address" := '';
                                                                  "To Location Address 2" := '';
                                                                  "To Location City" := '';
                                                                  "To Location Contact" := '';
                                                                  "To Location Contact Phone No" := '';
                                                                  "To Location Post Code" := '';
                                                                END;
                                                                "To Location Address Code" := '';
                                                              END;

                                                   CaptionML=ENU=To Location }
    { 111 ;   ;To Location Description;Text50     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Location".Description WHERE (Code=FIELD(To Location)));
                                                   CaptionML=ENU=To Location Description;
                                                   Editable=No }
    { 112 ;   ;To Depot            ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Location".Depot WHERE (Code=FIELD(To Location)));
                                                   CaptionML=ENU=To Depot;
                                                   Editable=No }
    { 120 ;   ;Perc. From Location ;Decimal       ;OnValidate=BEGIN
                                                                IF "Perc. From Location" <> 0 THEN BEGIN
                                                                  CALCFIELDS("From Depot");
                                                                  IF (Type = Type::Arrival) OR "From Depot" THEN
                                                                    FIELDERROR("Perc. From Location", Text002);
                                                                END;
                                                                CalculateOtherPerc(FIELDNO("Perc. From Location"));
                                                              END;

                                                   CaptionML=ENU=Percentage From Location;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 130 ;   ;Perc. To Location   ;Decimal       ;OnValidate=BEGIN
                                                                IF "Perc. To Location" <> 0 THEN BEGIN
                                                                  CALCFIELDS("To Depot");
                                                                  IF (Type = Type::Removal) OR "To Depot" THEN
                                                                    FIELDERROR("Perc. To Location", Text002);
                                                                END;
                                                                CalculateOtherPerc(FIELDNO("Perc. To Location"));
                                                              END;

                                                   CaptionML=ENU=Percentage To Location;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 140 ;   ;Perc. Internal      ;Decimal       ;OnValidate=BEGIN
                                                                CalculateOtherPerc(FIELDNO("Perc. Internal"));
                                                              END;

                                                   CaptionML=ENU=Percentage Internal;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 145 ;   ;Internal Customer No.;Code20       ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Customer Name");
                                                                IF ("Internal Customer No." = '') AND ("Perc. Internal" <> 0) THEN
                                                                  VALIDATE("Perc. Internal", 0);
                                                              END;

                                                   CaptionML=ENU=Internal Customer No. }
    { 146 ;   ;Customer Name       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Internal Customer No.)));
                                                   CaptionML=ENU=Customer Name;
                                                   Editable=No }
    { 150 ;   ;Perc. Project       ;Decimal       ;OnValidate=BEGIN
                                                                CalculateOtherPerc(FIELDNO("Perc. Project"));
                                                              END;

                                                   CaptionML=ENU=Percentage Project;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 155 ;   ;Project No.         ;Code20        ;TableRelation=Job WHERE (Project Status=CONST(Production));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Project Description");
                                                                IF ("Project No." = '') AND ("Perc. Project" <> 0) THEN
                                                                  VALIDATE("Perc. Project", 0);

                                                                IF ("Project No." = '') THEN
                                                                  EXIT;

                                                                IF (CurrFieldNo = FIELDNO("Project No.")) AND (xRec."Project No." = '') THEN
                                                                  VALIDATE("Perc. Project", 100);

                                                                ProjRec.GET("Project No.");
                                                                ProjRec.CheckProjectStatus(1);
                                                              END;

                                                   CaptionML=ENU=Project No. }
    { 156 ;   ;Project Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job.Description WHERE (No.=FIELD(Project No.)));
                                                   CaptionML=ENU=Project Description;
                                                   Editable=No }
    { 180 ;   ;Create Transport Cost by;Option    ;CaptionML=ENU=Create Transport Cost by;
                                                   OptionCaptionML=ENU=" ,Plant Order,Transport Order";
                                                   OptionString=[ ,Plant Order,Transport Order] }
    { 185 ;   ;Create Load/Unload Cost by;Option  ;CaptionML=ENU=Create Load/Unload Cost by;
                                                   OptionCaptionML=ENU=" ,Plant Order,Transport Order";
                                                   OptionString=[ ,Plant Order,Transport Order] }
    { 190 ;   ;From Location Address;Text50       ;CaptionML=ENU=From Location Address }
    { 191 ;   ;From Location Address 2;Text50     ;CaptionML=ENU=From Location Address 2 }
    { 192 ;   ;From Location City  ;Text30        ;CaptionML=ENU=From Location City }
    { 193 ;   ;From Location Contact;Text50       ;CaptionML=ENU=From Location Contact }
    { 194 ;   ;From Location Post Code;Code20     ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                IF PostCodeRec.GET("From Location Post Code") THEN
                                                                  "From Location City" := PostCodeRec.City;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=From Location Post Code }
    { 195 ;   ;From Location Address Code;Code10  ;TableRelation="Plant Location Address"."Address Code" WHERE (Location=FIELD(From Location));
                                                   OnValidate=BEGIN
                                                                IF ("From Location Address Code" <> '') THEN BEGIN
                                                                  LocAddressRec.GET("From Location", "From Location Address Code");
                                                                  "From Location Address" := LocAddressRec.Address;
                                                                  "From Location Address 2" := LocAddressRec."Address 2";
                                                                  "From Location Post Code" := LocAddressRec."Post Code";
                                                                  "From Location City" := LocAddressRec.City;
                                                                  "From Location Contact" := LocAddressRec.Contact;
                                                                  "From Location Contact Phone No" := LocAddressRec."Phone No.";
                                                                END ELSE BEGIN
                                                                  IF ("From Location Address Code" <> xRec."From Location Address Code") AND ("From Location" <> '') THEN BEGIN
                                                                    PlantLocRec.GET("From Location");
                                                                    "From Location Address" := PlantLocRec.Address;
                                                                    "From Location Address 2" := PlantLocRec."Address 2";
                                                                    "From Location Post Code" := PlantLocRec."Post Code";
                                                                    "From Location City" := PlantLocRec.City;
                                                                    "From Location Contact" := PlantLocRec.Contact;
                                                                    "From Location Contact Phone No" := PlantLocRec."Contact Phone No.";
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=From Location Address Code }
    { 196 ;   ;From Location Country/Region;Code10;TableRelation=Country/Region;
                                                   CaptionML=ENU=From Location Country/Region }
    { 197 ;   ;From Location Contact Phone No;Text30;
                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=From Location Contact Phone No. }
    { 200 ;   ;To Location Address ;Text50        ;CaptionML=ENU=To Location Address }
    { 201 ;   ;To Location Address 2;Text50       ;CaptionML=ENU=To Location Address 2 }
    { 202 ;   ;To Location City    ;Text30        ;CaptionML=ENU=To Location City }
    { 203 ;   ;To Location Contact ;Text50        ;CaptionML=ENU=To Location Contact }
    { 204 ;   ;To Location Post Code;Code20       ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                IF PostCodeRec.GET("To Location Post Code") THEN
                                                                  "To Location City" := PostCodeRec.City;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=To Location Post Code }
    { 205 ;   ;To Location Address Code;Code10    ;TableRelation="Plant Location Address"."Address Code" WHERE (Location=FIELD(To Location));
                                                   OnValidate=BEGIN
                                                                IF ("To Location Address Code" <> '') THEN BEGIN
                                                                  LocAddressRec.GET("To Location", "To Location Address Code");
                                                                  "To Location Address" := LocAddressRec.Address;
                                                                  "To Location Address 2" := LocAddressRec."Address 2";
                                                                  "To Location Post Code" := LocAddressRec."Post Code";
                                                                  "To Location City" := LocAddressRec.City;
                                                                  "To Location Contact" := LocAddressRec.Contact;
                                                                  "To Location Contact Phone No" := LocAddressRec."Phone No.";
                                                                END ELSE BEGIN
                                                                  IF ("To Location Address Code" <> xRec."To Location Address Code") AND ("To Location" <> '') THEN BEGIN
                                                                    PlantLocRec.GET("To Location");
                                                                    "To Location Address" := PlantLocRec.Address;
                                                                    "To Location Address 2" := PlantLocRec."Address 2";
                                                                    "To Location Post Code" := PlantLocRec."Post Code";
                                                                    "To Location City" := PlantLocRec.City;
                                                                    "To Location Contact" := PlantLocRec.Contact;
                                                                    "To Location Contact Phone No" := PlantLocRec."Contact Phone No.";
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=To Location Address Code }
    { 206 ;   ;To Location Country/Region;Code10  ;TableRelation=Country/Region;
                                                   CaptionML=ENU=To Location Country/Region }
    { 207 ;   ;To Location Contact Phone No;Text30;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=To Location Contact Phone No. }
    { 210 ;   ;Transport Order Printed;Integer    ;CaptionML=ENU=Transport Order Printed;
                                                   Editable=No }
    { 220 ;   ;Purchase Order      ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   OnLookup=VAR
                                                              PurchOrderHead@1100525000 : Record 38;
                                                            BEGIN
                                                              PurchOrderHead.SETRANGE("Document Type", PurchOrderHead."Document Type"::Order);
                                                              PurchOrderHead.SETRANGE("No.", "Purchase Order");
                                                              PAGE.RUNMODAL(PAGE::"Purchase Order List", PurchOrderHead);
                                                            END;

                                                   CaptionML=ENU=Purchase Order;
                                                   Editable=No }
    { 230 ;   ;Invoice with Transport Order;Code20;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Linked Plant Transport Orders"."Transport Order No." WHERE (Linked Transport Order No.=FIELD(No.)));
                                                   TableRelation="Plant Transport Order";
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Invoice with Transport Orde;
                                                   Editable=No }
    { 235 ;   ;No. Linked Transport Orders;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("Linked Plant Transport Orders" WHERE (Transport Order No.=FIELD(No.)));
                                                   CaptionML=ENU=No. Linked Transport Orders;
                                                   Editable=No }
    { 600 ;   ;Appointment Fixed Date;Boolean     ;CaptionML=ENU=Appointment Fixed Date }
    { 610 ;   ;Appointment Time    ;Time          ;CaptionML=ENU=Appointment Time }
    { 620 ;   ;Appointment Code    ;Code10        ;TableRelation="Logistic Appointment";
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Appointment Description");
                                                              END;

                                                   CaptionML=ENU=Appointment Code }
    { 630 ;   ;Appointment Description;Text50     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Logistic Appointment".Description WHERE (Code=FIELD(Appointment Code)));
                                                   CaptionML=ENU=Appointment Description;
                                                   Editable=No }
    { 640 ;   ;Appointment Comment ;Text80        ;CaptionML=ENU=Appointment Comment }
    { 660 ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=ENU=Shipment Method Code }
    { 9001;   ;Status Delivery     ;Option        ;OnValidate=BEGIN
                                                                PlantSetupRec.GET;
                                                                IF NOT PlantSetupRec."PO-Picking Bar Code Scanner" THEN
                                                                  EXIT;
                                                                ScanStatusLog.INIT;
                                                                ScanStatusLog.Type := ScanStatusLog.Type::"Transport Order";
                                                                ScanStatusLog."Order No." := "No.";
                                                                ScanStatusLog."Status Transport Order Deliver" := "Status Delivery";
                                                                ScanStatusLog.UserID := USERID;
                                                                ScanStatusLog."Log Time" := CURRENTDATETIME;
                                                                ScanStatusLog.INSERT;
                                                              END;

                                                   CaptionML=ENU=Status Delivery;
                                                   OptionCaptionML=ENU=New,Released,Ready,Loaded;
                                                   OptionString=New,Released,Ready,Loaded }
    { 9002;   ;Status Arrival      ;Option        ;OnValidate=BEGIN
                                                                PlantSetupRec.GET;
                                                                IF NOT PlantSetupRec."PO-Picking Bar Code Scanner" THEN
                                                                  EXIT;
                                                                ScanStatusLog.INIT;
                                                                ScanStatusLog.Type := ScanStatusLog.Type::"Transport Order";
                                                                ScanStatusLog."Order No." := "No.";
                                                                ScanStatusLog."Status Transport Order Arrival" := "Status Arrival";
                                                                ScanStatusLog.UserID := USERID;
                                                                ScanStatusLog."Log Time" := CURRENTDATETIME;
                                                                ScanStatusLog.INSERT;
                                                              END;

                                                   CaptionML=ENU=Status Arrival;
                                                   OptionCaptionML=ENU=New,Unloaded,In Process,Ready;
                                                   OptionString=New,Unloaded,In Process,Ready }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Transport Date                           }
    {    ;Shipping Agent,Means of Transport,Transport Date }
    {    ;From Location                            }
    {    ;To Location                              }
    {    ;Project No.                              }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PlantSetupRec@1100485000 : Record 11012550;
      PlantLocRec@1100485006 : Record 11012554;
      PostCodeRec@1100485008 : Record 225;
      LocAddressRec@1100485007 : Record 11012590;
      ProjRec@1100485009 : Record 11072003;
      ScanStatusLog@1100485010 : Record 11020526;
      CustRec@1100525000 : Record 18;
      NoSeriesMgt@1100485001 : Codeunit 396;
      Text002@1100485004 : TextConst 'ENU=not allowed for a depot.';
      Text003@1100485005 : TextConst 'ENU=change not allowed, there are already Plant Orders present';
      Text004@1100525001 : TextConst 'ENU=%1 is modified, update cost line prices?';
      Text005@1100525002 : TextConst 'ENU=Delete not allowed, %1 ''%2'' is linked to %3 ''%4''.';
      DimMgt@1100525008 : Codeunit 408;
      DPA_Management@1100000999 : Codeunit 11012783;
      SkipModify@1100528400 : Boolean;

    PROCEDURE InitRecord@1100485002();
    VAR
      CompanyData@1100485000 : Record 11020674;
    BEGIN
      PlantSetupRec.GET;
      //"Cost Object Transport" := PlantSetupRec."Default Cost Object Transport";   //22057.so
      //"Cost Object Transport 2" := PlantSetupRec."Default Cost Object Transp. 2";
      //"Cost Object Load/Unload" := PlantSetupRec."Def. Cost Object Load/Unload";  //22057.eo
      "Create Transport Cost by" := PlantSetupRec."Def. Create Transport Cost by";
      "Create Load/Unload Cost by" := PlantSetupRec."Def.Create Load/Unload Cost by";

      IF CompanyData.GET(COMPANYNAME) THEN;

      "Internal Customer No." := CompanyData."Customer No.";
    END;

    PROCEDURE AssistEdit@2(ITransOrderXRec@11012000 : Record 11020505) : Boolean;
    VAR
      lvTransOrderRec@1100485000 : Record 11020505;
    BEGIN
      WITH lvTransOrderRec DO BEGIN
        lvTransOrderRec := Rec;
        PlantSetupRec.GET;
        PlantSetupRec.TESTFIELD("Transport Order Nos.");
        IF NoSeriesMgt.SelectSeries(PlantSetupRec."Transport Order Nos.",ITransOrderXRec."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := lvTransOrderRec;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE FillMeansTranDefaultCostObject@1100485006();
    BEGIN
      //22507.o
      //IF ("Shipping Agent" <> '') AND ("Means of Transport" <> '') THEN BEGIN
      //  IF lvMeansOfTransRec.GET("Shipping Agent", "Means of Transport") THEN BEGIN
      //    IF lvMeansOfTransRec."Default Cost Object Transport" <> '' THEN
      //      VALIDATE("Cost Object Transport", lvMeansOfTransRec."Default Cost Object Transport");
      //    IF lvMeansOfTransRec."Def. Cost Object Load/Unload" <> '' THEN
      //      VALIDATE("Cost Object Load/Unload", lvMeansOfTransRec."Def. Cost Object Load/Unload");
      //  END;
      //END;
    END;

    PROCEDURE FillLocations@1();
    BEGIN
      PlantSetupRec.GET;
      CASE Type OF
        Type::Arrival:
          BEGIN
            VALIDATE("From Location",PlantSetupRec.GetRentalDepot);
            VALIDATE("To Location",'');
          END;
        Type::Removal:
          BEGIN
            VALIDATE("From Location",'');
            VALIDATE("To Location",PlantSetupRec.GetReturnDepot);
          END;
      END;
    END;

    PROCEDURE FillDefaultPerc@1100485005();
    BEGIN
      "Perc. From Location" := 0;
      "Perc. To Location" := 0;
      "Perc. Internal" := 0;
      "Perc. Project" := 0;
      CALCFIELDS("From Depot", "To Depot");

      CASE Type OF
        Type::Arrival:
          BEGIN
            IF NOT "To Depot" THEN
              "Perc. To Location" := 100
            ELSE BEGIN
              IF ("Project No." = '') THEN
                "Perc. Internal" := 100
              ELSE
                "Perc. Project" := 100;
            END;
          END;
        Type::Removal:
          BEGIN
            IF NOT "From Depot" THEN
              "Perc. From Location" := 100
            ELSE BEGIN
              IF ("Project No." = '') THEN
                "Perc. Internal" := 100
              ELSE
                "Perc. Project" := 100;
            END;
          END;
        Type::"Other Transfers":
          BEGIN
            IF (NOT "From Depot") OR (NOT "To Depot") THEN BEGIN
              IF (NOT "From Depot") AND (NOT "To Depot") THEN BEGIN
                "Perc. From Location" := 50;
                "Perc. To Location" := 50;
              END ELSE BEGIN
                IF (NOT "From Depot") THEN
                  "Perc. From Location" := 100
                ELSE
                  "Perc. To Location" := 100;
              END;
            END ELSE BEGIN
              IF ("Project No." = '') THEN
                "Perc. Internal" := 100
              ELSE
                "Perc. Project" := 100;
            END;
          END;
      END;
    END;

    PROCEDURE RecalcTransOrderLines@1100485000(IMessMode@1100485005 : Boolean);
    BEGIN
      //22057.o
      //IF NOT lvMeansOfTransRec.GET("Shipping Agent", "Means of Transport") THEN
      //  EXIT;
      //
      //lvTransOrderLineRec.SETRANGE("Transport Order No.", "No.");
      //lvTransOrderLineRec.SETFILTER(Type, '<>%1', lvTransOrderLineRec.Type::Text);
      //IF lvTransOrderLineRec.FIND('-') THEN BEGIN
      //  REPEAT
      //    {//**12925.so
      //    IF lvTransOrderLineRec."No." = '' THEN BEGIN
      //      IF (lvTransOrderLineRec.Type = lvTransOrderLineRec.Type::Transport) AND ("Cost Object Transport" <> '') THEN
      //        lvTransOrderLineRec.VALIDATE("No.", "Cost Object Transport");
      //      IF (lvTransOrderLineRec.Type = lvTransOrderLineRec.Type::"Load/Unload") AND ("Cost Object Load/Unload" <> '') THEN
      //        lvTransOrderLineRec.VALIDATE("No.", "Cost Object Load/Unload");
      //      IF lvTransOrderLineRec."No." <> '' THEN
      //        lvTransOrderLineRec.MODIFY;
      //    END;
      //    }//**12925.eo
      //    //**12925.sn (Melding 12925)
      //    lvOldPrice := lvTransOrderLineRec.Price;
      //    lvOldCostObject := lvTransOrderLineRec."No.";
      //    CASE lvTransOrderLineRec.Type OF
      //      lvTransOrderLineRec.Type::Transport:
      //        BEGIN
      //          IF ("Cost Object Transport" <> '') AND
      //             ((lvTransOrderLineRec."No." <> "Cost Object Transport 2") OR ("Cost Object Transport 2" = '')) AND
      //             ((lvTransOrderLineRec."No." = '') OR
      //              ((lvTransOrderLineRec."No." <> "Cost Object Transport") AND
      //               (lvMeansOfTransRec."Default Cost Object Transport" <> '')))
      //          THEN
      //            lvTransOrderLineRec.VALIDATE("No.", "Cost Object Transport");
      //        END;
      //      lvTransOrderLineRec.Type::"Load/Unload":
      //        BEGIN
      //          IF ("Cost Object Load/Unload" <> '') AND
      //             ((lvTransOrderLineRec."No." = '') OR
      //              ((lvTransOrderLineRec."No." <> "Cost Object Load/Unload") AND
      //               (lvMeansOfTransRec."Def. Cost Object Load/Unload" <> '')))
      //          THEN
      //            lvTransOrderLineRec.VALIDATE("No.", "Cost Object Load/Unload");
      //        END;
      //    END;
      //
      //    lvPrice := lvTransOrderLineRec.SearchTransportPrice(Rec);
      //    IF (lvPrice <> lvTransOrderLineRec.Price) AND (lvPrice <> 0) THEN BEGIN
      //      lvTransOrderLineRec.VALIDATE(Price, lvPrice);
      //      //lvTransOrderLineRec.MODIFY;
      //      //lvCounterMod := lvCounterMod + 1;
      //    END;
      //    IF (lvTransOrderLineRec.Price <> lvOldPrice) OR (lvTransOrderLineRec."No." <> lvOldCostObject) THEN BEGIN  //**12925
      //      lvTransOrderLineRec.MODIFY;
      //      lvCounterMod := lvCounterMod + 1;
      //    END;
      //    lvCounter := lvCounter + 1;
      //  UNTIL lvTransOrderLineRec.NEXT = 0;
      //  IF IMessMode AND (lvCounterMod > 0) THEN
      //    MESSAGE(Text001, FIELDCAPTION("Shipping Agent"), FIELDCAPTION("Means of Transport"), lvCounterMod, lvCounter);
      //END;
    END;

    PROCEDURE CalculateOtherPerc@1100485003(ICurrFieldNo@1100485000 : Integer);
    BEGIN
      CALCFIELDS("From Depot", "To Depot");
      IF ((Type = Type::Arrival) OR ((Type = Type::"Other Transfers") AND "From Depot")) AND ("Perc. From Location" <> 0) THEN
        "Perc. From Location" := 0;
      IF ((Type = Type::Removal) OR ((Type = Type::"Other Transfers") AND "To Depot")) AND ("Perc. To Location" <> 0) THEN
        "Perc. To Location" := 0;
      IF ("Project No." = '') AND ("Perc. Project" <> 0) THEN
        "Perc. Project" := 0;
      IF (Type = Type::"Other Transfers") AND "From Depot" AND "To Depot" AND ("Project No." = '') AND ("Perc. Project" = 0) THEN
        "Perc. Internal" := 100;

      CASE ICurrFieldNo OF
        FIELDNO("Perc. From Location"):
          BEGIN
            IF "Perc. From Location" = 100 THEN BEGIN
              "Perc. To Location" := 0;
              "Perc. Internal" := 0;
              "Perc. Project" := 0;
            END;
          END;
        FIELDNO("Perc. To Location"):
          BEGIN
            IF "Perc. To Location" = 100 THEN BEGIN
              "Perc. From Location" := 0;
              "Perc. Internal" := 0;
              "Perc. Project" := 0;
            END;
          END;
        FIELDNO("Perc. Internal"):
          BEGIN
            IF "Perc. Internal" = 100 THEN BEGIN
              "Perc. From Location" := 0;
              "Perc. To Location" := 0;
              "Perc. Project" := 0;
            END;
          END;
        FIELDNO("Perc. Project"):
          BEGIN
            IF "Perc. Project" = 100 THEN BEGIN
              "Perc. From Location" := 0;
              "Perc. To Location" := 0;
              "Perc. Internal" := 0;
            END;
          END;
      END;

      IF GetTotalPercentage() = 100 THEN
        EXIT;

      CASE ICurrFieldNo OF
        FIELDNO("Perc. From Location"):
          BEGIN
            CASE Type OF
              Type::Removal:
                BEGIN
                  IF ("Perc. Internal" <> 0) XOR ("Perc. Project" <> 0) THEN BEGIN
                    IF ("Perc. Internal" <> 0) THEN
                      "Perc. Internal" := 100 - "Perc. From Location"
                    ELSE
                      "Perc. Project" := 100 - "Perc. From Location";
                  END ELSE BEGIN
                    IF ("Perc. Internal" = 0) AND ("Perc. Project" = 0) THEN BEGIN
                      IF ("Project No." = '') THEN
                        "Perc. Internal" := 100 - "Perc. From Location"
                      ELSE
                        "Perc. Project" := 100 - "Perc. From Location";
                    END;
                  END;
                END;
              Type::"Other Transfers":
                BEGIN
                  IF ("Perc. Internal" = 0) AND ("Perc. Project" = 0) AND (NOT "From Depot") AND (NOT "To Depot") THEN
                    "Perc. To Location" := 100 - "Perc. From Location";
                END;
            END;
          END;
        FIELDNO("Perc. To Location"):
          BEGIN
            CASE Type OF
              Type::Arrival:
                BEGIN
                  IF ("Perc. Internal" <> 0) XOR ("Perc. Project" <> 0) THEN BEGIN
                    IF ("Perc. Internal" <> 0) THEN
                      "Perc. Internal" := 100 - "Perc. To Location"
                    ELSE
                      "Perc. Project" := 100 - "Perc. To Location";
                  END ELSE BEGIN
                    IF ("Perc. Internal" = 0) AND ("Perc. Project" = 0) THEN BEGIN
                      IF ("Project No." = '') THEN
                        "Perc. Internal" := 100 - "Perc. To Location"
                      ELSE
                        "Perc. Project" := 100 - "Perc. To Location";
                    END;
                  END;
                END;
              Type::"Other Transfers":
                BEGIN
                  IF ("Perc. Internal" = 0) AND ("Perc. Project" = 0) AND (NOT "From Depot") AND (NOT "To Depot") THEN
                    "Perc. From Location" := 100 - "Perc. To Location";
                END;
            END;
          END;
        FIELDNO("Perc. Internal"):
          BEGIN
            CASE Type OF
              Type::Arrival:
                BEGIN
                  IF ("Project No." = '') AND ("Perc. Project" = 0) THEN
                    "Perc. To Location" := 100 - "Perc. Internal"
                  ELSE BEGIN
                    IF ("Project No." <> '') AND ("Perc. To Location" = 0) THEN
                      "Perc. Project" := 100 - "Perc. Internal";
                  END;
                END;
              Type::Removal:
                BEGIN
                  IF ("Project No." = '') AND ("Perc. Project" = 0) THEN
                    "Perc. From Location" := 100 - "Perc. Internal"
                  ELSE BEGIN
                    IF ("Project No." <> '') AND ("Perc. From Location" = 0) THEN
                      "Perc. Project" := 100 - "Perc. Internal";
                  END;
                END;
              Type::"Other Transfers":
                BEGIN
                  IF ("Perc. From Location" = 0) AND ("Perc. To Location" = 0) THEN BEGIN
                    IF ("Project No." <> '') OR ("Perc. Project" <> 0) THEN
                      "Perc. Project" := 100 - "Perc. Internal";
                  END;
                END;
            END;
          END;
        FIELDNO("Perc. Project"):
          BEGIN
            CASE Type OF
              Type::Arrival:
                BEGIN
                  IF ("Internal Customer No." = '') AND ("Perc. Internal" = 0) THEN
                    "Perc. To Location" := 100 - "Perc. Project"
                  ELSE BEGIN
                    IF ("Internal Customer No." <> '') AND ("Perc. To Location" = 0) THEN
                      "Perc. Internal" := 100 - "Perc. Project";
                  END;
                END;
              Type::Removal:
                BEGIN
                  IF ("Internal Customer No." = '') AND ("Perc. Internal" = 0) THEN
                    "Perc. From Location" := 100 - "Perc. Project"
                  ELSE BEGIN
                    IF ("Internal Customer No." <> '') AND ("Perc. From Location" = 0) THEN
                      "Perc. Internal" := 100 - "Perc. Project";
                  END;
                END;
              Type::"Other Transfers":
                BEGIN
                  IF ("Perc. From Location" = 0) AND ("Perc. To Location" = 0) THEN BEGIN
                    IF ("Internal Customer No." <> '') OR ("Perc. Internal" <> 0) THEN
                      "Perc. Internal" := 100 - "Perc. Project";
                  END;
                END;
            END;
          END;
      END;
    END;

    PROCEDURE GetTotalPercentage@1100485001() : Decimal;
    BEGIN
      EXIT("Perc. From Location" + "Perc. To Location" + "Perc. Internal" + "Perc. Project");
    END;

    PROCEDURE PlantOrdersPresent@1100485004() : Boolean;
    VAR
      lvTransPlantOrderRec@1100485000 : Record 11020509;
    BEGIN
      //* Check one or more Plant Order(s) present on Transport Orders

      lvTransPlantOrderRec.SETRANGE("Transport Order No.", "No.");
      IF lvTransPlantOrderRec.FIND('-') THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE CheckOrderDateAllowed@1100525000();
    VAR
      lvLowerLimitDate@1100525000 : Date;
      lvUpperLimitDate@1100525001 : Date;
      lvText001@1100525002 : TextConst 'ENU=must be within the range %1..%2';
    BEGIN
      IF "Transport Date" = 0D THEN
        EXIT;

      PlantSetupRec.GET;
      lvLowerLimitDate := PlantSetupRec.GetOrderDateLowerLimit(PlantSetupRec);
      lvUpperLimitDate := PlantSetupRec.GetOrderDateUpperLimit(PlantSetupRec);
      IF ("Transport Date" < lvLowerLimitDate) OR ("Transport Date" > lvUpperLimitDate) THEN
        FIELDERROR("Transport Date", STRSUBSTNO(lvText001, lvLowerLimitDate, lvUpperLimitDate));
    END;

    LOCAL PROCEDURE CheckUpdateTransportCost@1210190000();
    VAR
      TransOrder@1210190000 : Record 11020505;
      TransFuncMgt@1210190001 : Codeunit 11020504;
    BEGIN
      IF ("Shipping Agent" <> '') AND ("Means of Transport" <> '') THEN BEGIN
        TransOrder.GET("No.");
        IF ("Shipping Agent" <> TransOrder."Shipping Agent") OR
          ("Means of Transport" <> TransOrder."Means of Transport") OR
          ("Create Transport Cost by" <> TransOrder."Create Transport Cost by") OR
          ("Create Load/Unload Cost by" <> TransOrder."Create Load/Unload Cost by")
        THEN BEGIN
          MODIFY;
          TransFuncMgt.RunCreateTransportCost(Rec, '', TRUE, TRUE, FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      IF NOT SkipModify THEN
        MODIFY;
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Department Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::"Plant Transport Order");
      IF Dimension1Code <> '' THEN
        "Department Code" := Dimension1Code;

      IF "Department Code" <> '' THEN BEGIN
        SkipModify := TRUE;
        VALIDATE("Department Code");
        SkipModify := FALSE;
      END;
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11020505) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11020505');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Plant Transport Order", "Department Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Department Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Department Code");
    END;

    PROCEDURE ShowDocuments@1100529007();
    VAR
      RecRef@1100525000 : RecordRef;
      DocumentFilters@1100525001 : Codeunit 11012432;
    BEGIN
      //DP00183
      TESTFIELD("No.");
      RecRef.GETTABLE(Rec);
      DocumentFilters.CreateTempFilterAndExecute1(RecRef, "Department Code", FALSE, TRUE);
    END;

    PROCEDURE HasDocumentLinks@1100525006() : Boolean;
    VAR
      DocumentLinkMgt@1100525000 : Codeunit 11012401;
      RecRef@1100525001 : RecordRef;
    BEGIN
      //DP00183
      RecRef.GETTABLE(Rec);
      EXIT(DocumentLinkMgt.EntityHasDocumentLinks(RecRef));
    END;

    PROCEDURE DeleteDocumentLinks@1100529006();
    VAR
      DocumentLinkMgt@1100525000 : Codeunit 11012401;
      RecRef@1100525001 : RecordRef;
    BEGIN
      //DP00183
      RecRef.GETTABLE(Rec);
      DocumentLinkMgt.DeleteDocumentLinksFromObject(RecRef);
    END;

    PROCEDURE MoveDocumentLinks@1100529005(SourceRec@1100529001 : Record 11020505;TargetRec@1100529000 : Record 11020505;CopyMode@1100529003 : Boolean);
    VAR
      DocumentLinkMgt@1100525000 : Codeunit 11012401;
      SourceRecRef@1100525001 : RecordRef;
      TargetRecRef@1100529002 : RecordRef;
    BEGIN
      //DP00183
      SourceRecRef.GETTABLE(SourceRec);
      TargetRecRef.GETTABLE(TargetRec);
      IF NOT CopyMode THEN
        DocumentLinkMgt.ReplaceDocLink(SourceRecRef, TargetRecRef)
      ELSE
        DocumentLinkMgt.CopyDocLinks(SourceRecRef, TargetRecRef);
    END;

    PROCEDURE MoveDocumentLinksToPosted@1100529000(SourceRec@1100529001 : Record 11020505;TargetRec@1100529000 : Record 11020507);
    VAR
      DocumentLinkMgt@1100525000 : Codeunit 11012401;
      SourceRecRef@1100525001 : RecordRef;
      TargetRecRef@1100529002 : RecordRef;
    BEGIN
      //DP00183
      SourceRecRef.GETTABLE(SourceRec);
      TargetRecRef.GETTABLE(TargetRec);
      DocumentLinkMgt.ReplaceDocLink(SourceRecRef, TargetRecRef)
    END;

    PROCEDURE CommentSheet@1100529004(EditableMode@1100529002 : Boolean);
    VAR
      PlantCommentLine@1100529000 : Record 11072666;
    BEGIN
      //DP00183
      TESTFIELD("No.");
      PlantCommentLine.EditCommentLines(DATABASE::"Plant Transport Order", "No.", '', 0, EditableMode);  //C005461.c
    END;

    PROCEDURE HasCommentLines@1100529002() : Boolean;
    VAR
      PlantCommentLine@1100529000 : Record 11072666;
    BEGIN
      //DP00183
      EXIT(PlantCommentLine.HasCommentLines(DATABASE::"Plant Transport Order","No.", '', 0));  //C005461.c
    END;

    PROCEDURE DeleteCommentLines@1100529003();
    VAR
      PlantCommentLine@1100529000 : Record 11072666;
    BEGIN
      //DP00183
      PlantCommentLine.DeleteComments(DATABASE::"Plant Transport Order", "No.", '', 0);  //C005461.c
    END;

    PROCEDURE MoveCommentLinesToPosted@1100529008(SourceRec@1100529002 : Record 11020505;TargetRec@1100529003 : Record 11020507);
    VAR
      PlantCommentLine@1100529000 : Record 11072666;
    BEGIN
      //DP00183
      //PlantCommentLine.MoveComments(SourceRecRef,TargetRecRef);  //C005461.o
      PlantCommentLine.MoveComments(
        DATABASE::"Plant Transport Order", SourceRec."No.", '', 0,
        DATABASE::"Posted Plant Transport Order", TargetRec."No.", '', 0);  //C005461.n
    END;

    PROCEDURE PrintRecords@1100528400() : Boolean;
    VAR
      ReportSelections@1100528401 : Record 77;
      PlantTransportOrder@1100528400 : Record 11020505;
    BEGIN
      PlantTransportOrder.COPY(Rec);
      IF PlantTransportOrder.ISEMPTY THEN
        EXIT(FALSE);

      ReportSelections.SETRANGE(Usage, 1551);
      ReportSelections.SETRANGE("Default Selection", TRUE);
      ReportSelections.FINDSET;

      REPEAT
        REPORT.RUNMODAL(ReportSelections."Report ID", FALSE, TRUE, PlantTransportOrder);
      UNTIL ReportSelections.NEXT = 0;

      EXIT(TRUE);
    END;

    PROCEDURE SaveRecordsAsPDFFiles@1100528401(VAR TempEmailAttachment@1100528400 : TEMPORARY Record 11229294) : Boolean;
    VAR
      ReportSelections@1100528402 : Record 77;
      PlantTransportOrder@1100528401 : Record 11020505;
      PlantTransportOrder2@1100528405 : Record 11020505;
      EMailSetup@1100528406 : Record 11229911;
      DocumentPrint@1100528403 : Codeunit 229;
      DocumentMailing@1100528407 : Codeunit 260;
      I@1100528404 : Integer;
    BEGIN
      PlantTransportOrder.COPY(Rec);
      IF PlantTransportOrder.ISEMPTY THEN
        EXIT(FALSE);

      PlantTransportOrder.FINDSET;

      ReportSelections.SETRANGE(Usage, 1551);
      ReportSelections.SETRANGE("Default Selection", TRUE);

      REPEAT
        ReportSelections.FINDSET;
        I := 0;
        REPEAT
          PlantTransportOrder2 := PlantTransportOrder;
          PlantTransportOrder2.SETRECFILTER;
          DocumentPrint.SaveAnyRecordReportAsPdf(
            PlantTransportOrder2, EMailSetup.Usage::"Plant Transport Order", PlantTransportOrder2."Department Code",
            ReportSelections."Report ID", TRUE, TempEmailAttachment);
          TempEmailAttachment."Attachment Name" := DocumentMailing.ComposePDFFileName(
            PlantTransportOrder2.TABLECAPTION, PlantTransportOrder2."No.", I);
          TempEmailAttachment.MODIFY;
          I := I + 1;
        UNTIL ReportSelections.NEXT = 0;
      UNTIL PlantTransportOrder.NEXT = 0;

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

