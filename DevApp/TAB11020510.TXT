OBJECT Table 11020510 Plant Order Item Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS7.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               GetOrderHeader();
               OrderRec.TESTFIELD(Posted,FALSE);
               //IF OrderRec.Type IN [OrderRec.Type::"Other Transfers", OrderRec.Type::"Negative Inventory Correction"] THEN
               //  ERROR(Text001, OrderRec.FIELDCAPTION(Type), OrderRec.Type);
               CheckOrderType();  //*DP00183

               Posted := FALSE;
               "Transfer Date" := OrderRec."Transfer Date";
               "Purchase Order" := '';
               "Purchase Order Line No." := 0;
             END;

    OnModify=BEGIN
               GetOrderHeader();
               "Transfer Date" := OrderRec."Transfer Date";
             END;

    OnDelete=BEGIN
               GetOrderHeader();
               OrderRec.TESTFIELD(Posted,FALSE);
             END;

    OnRename=BEGIN
               GetOrderHeader();
               OrderRec.TESTFIELD(Posted,FALSE);
             END;

    CaptionML=ENU=Plant Order Item Line;
    LookupPageID=Page11020588;
    DrillDownPageID=Page11020588;
  }
  FIELDS
  {
    { 10  ;   ;Plant Order No.     ;Code20        ;TableRelation="Plant Order";
                                                   CaptionML=ENU=Plant Order No. }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 30  ;   ;Type                ;Option        ;OnValidate=VAR
                                                                lvItemLineRec@1100485000 : Record 11020510;
                                                              BEGIN
                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  IF Type = Type::Text THEN
                                                                    TESTFIELD("Item No.", '');
                                                                  lvItemLineRec := Rec;
                                                                  INIT;   //* Order en regelnr blijven hiebij ongewijzigd (keyvelden van index 1)
                                                                  Type := lvItemLineRec.Type;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Item,Text;
                                                   OptionString=Item,Text }
    { 40  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF "Item No." <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Item);
                                                                  GetOrderHeader();
                                                                  //IF OrderRec.Type IN [OrderRec.Type::"Other Transfers", OrderRec.Type::"Negative Inventory Correction"] THEN
                                                                  //  ERROR(Text001, OrderRec.FIELDCAPTION(Type), OrderRec.Type);
                                                                  CheckOrderType();  //*DP00183
                                                                  GetItem();
                                                                  IF ("Item No." <> xRec."Item No.") OR PlantOrderCalcExternally THEN BEGIN
                                                                    SetNoInventoryWarning(TRUE);  //*19786.n
                                                                    IF FromLocationRec."VAT Location Code" <> '' THEN
                                                                      VALIDATE("Location Code",FromLocationRec."VAT Location Code");
                                                                    IF "Location Code" = '' THEN
                                                                      "Location Code" := GetDefaultItemLocFromPlntDepot(FIELDNO("Location Code")); //*DP00183.n
                                                                    IF "Location Code" = '' THEN
                                                                      "Location Code" := UserMgtCU.GetLocation(0,'',UserMgtCU.GetSalesFilter);
                                                                    IF "New Location Code" = '' THEN
                                                                      "New Location Code" := GetDefaultItemLocFromPlntDepot(FIELDNO("New Location Code")); //*DP00183.n
                                                                    IF ("New Location Code" <> '') AND ("New Location Code" = "Location Code") THEN //*DP00183.n
                                                                      "New Location Code" := '';
                                                                    SetNoInventoryWarning(FALSE);  //*19786.n
                                                                    "Variant Code" := '';
                                                                    Description := ItemRec.Description;
                                                                    "Description 2" := ItemRec."Description 2";
                                                                    VALIDATE("Unit of Measure", ItemRec."Sales Unit of Measure");
                                                                    GetUnitPrice(FIELDNO("Item No."));
                                                                    VALIDATE("Unit Price");
                                                                    CheckInventoryWarning(0);  //*19786.n
                                                                  END;
                                                                END;
                                                                CALCFIELDS("Sales/Buy-Back Item");
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 50  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 51  ;   ;Description 2       ;Text50        ;OnValidate=BEGIN
                                                                IF "Description 2" <> '' THEN
                                                                  TESTFIELD(Type, Type::Item);
                                                              END;

                                                   CaptionML=ENU=Description 2 }
    { 60  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                IF "Location Code" <> '' THEN
                                                                  TESTFIELD(Type, Type::Item);

                                                                IF "Location Code" <> xRec."Location Code" THEN BEGIN
                                                                  GetUnitPrice(FIELDNO("Location Code"));
                                                                  VALIDATE("Unit Price");
                                                                  CheckInventoryWarning(0);  //*19786.n
                                                                  IF ("New Location Code" <> '') AND ("New Location Code" = "Location Code") THEN //*DP00183.n
                                                                    "New Location Code" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 65  ;   ;New Location Code   ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                //*DP00183.n
                                                                IF "New Location Code" <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Item);
                                                                  CALCFIELDS("Order Type");
                                                                  TESTFIELD("Order Type", "Order Type"::"Other Transfers");
                                                                  IF NOT IsOtherTransferDepotToDepot() THEN
                                                                    TESTFIELD("New Location Code", '');
                                                                  IF "New Location Code" = "Location Code" THEN
                                                                    FIELDERROR("New Location Code");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=New Location Code }
    { 70  ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure";
                                                   OnValidate=BEGIN
                                                                IF "Unit of Measure" <> '' THEN
                                                                  TESTFIELD(Type, Type::Item);

                                                                GetItem();
                                                                "Qty. per Unit of Measure" := UOMMgtCU.GetQtyPerUnitOfMeasure(ItemRec,"Unit of Measure");
                                                                SetQtyForInventory;

                                                                IF CurrFieldNo <> FIELDNO("Item No.") THEN BEGIN
                                                                  GetUnitPrice(FIELDNO("Unit of Measure"));
                                                                  VALIDATE("Unit Price");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Unit of Measure }
    { 75  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 80  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                IF Quantity <> 0 THEN
                                                                  TESTFIELD(Type, Type::Item);
                                                                IF (Quantity < 0) AND ("Direct Delivery" OR IsOtherTransferDepotToDepot) THEN  //*DP00183.c
                                                                  FIELDERROR(Quantity);

                                                                IF Quantity <> xRec.Quantity THEN
                                                                  GetUnitPrice(FIELDNO(Quantity));

                                                                SetQtyForInventory();

                                                                VALIDATE("Unit Price");

                                                                CheckInventoryWarning(FIELDNO(Quantity));  //*19786.n  (check moved from Form to Table)
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 90  ;   ;Unit Price          ;Decimal       ;OnValidate=BEGIN
                                                                IF "Unit Price" <> 0 THEN
                                                                  TESTFIELD(Type, Type::Item);

                                                                IF "Unit Price" <> 0 THEN
                                                                  TESTFIELD("Reason Code (Exit)", '');   //DP00485 (26972)

                                                                GLSetup.GET;
                                                                Amount := ROUND(GetQuantity() * "Unit Price",GLSetup."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 100 ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                IF (Amount <> 0) THEN BEGIN
                                                                  TESTFIELD(Type, Type::Item);
                                                                  IF GetQuantity() = 0 THEN
                                                                    TESTFIELD(Quantity);
                                                                END;

                                                                IF GetQuantity() <> 0 THEN BEGIN
                                                                  "Unit Price" := Amount / GetQuantity()
                                                                END ELSE
                                                                  "Unit Price" := Amount;

                                                                GLSetup.GET;
                                                                "Unit Price" := ROUND("Unit Price",GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Amount;
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 110 ;   ;Posted              ;Boolean       ;FieldClass=Normal;
                                                   CaptionML=ENU=Posted;
                                                   Editable=No }
    { 120 ;   ;Arrival Location    ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Order"."To Location" WHERE (No.=FIELD(Plant Order No.),
                                                                                                         Type=CONST(Arrival)));
                                                   CaptionML=ENU=Arrival Location;
                                                   Editable=No }
    { 130 ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=VAR
                                                                lvItemVariantRec@1100485000 : Record 5401;
                                                              BEGIN
                                                                IF "Variant Code" <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Item);
                                                                  TESTFIELD("Item No.");
                                                                END;

                                                                IF "Variant Code" <> xRec."Variant Code" THEN BEGIN
                                                                  IF "Variant Code" = '' THEN BEGIN
                                                                    GetItem();
                                                                    Description := ItemRec.Description;
                                                                    "Description 2" := ItemRec."Description 2";
                                                                  END ELSE BEGIN
                                                                    lvItemVariantRec.GET("Item No.", "Variant Code");
                                                                    Description := lvItemVariantRec.Description;
                                                                    "Description 2" := lvItemVariantRec."Description 2";
                                                                  END;
                                                                  GetUnitPrice(FIELDNO("Variant Code"));
                                                                  VALIDATE("Unit Price");
                                                                  CheckInventoryWarning(0);  //*19786.n
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Variant Code;
                                                   Description=4PS: TableRelation aangepast }
    { 140 ;   ;Asked Quantity      ;Decimal       ;OnValidate=BEGIN
                                                                CASE Type OF
                                                                  Type::Text:
                                                                    TESTFIELD("Asked Quantity",0);
                                                                  Type::Item:
                                                                    BEGIN
                                                                      PlantSetup.GET;
                                                                      GetOrderHeader();
                                                                      IF (OrderRec.Type <> OrderRec.Type::Arrival) OR (NOT PlantSetup."Extended Picking Procedure") THEN
                                                                        TESTFIELD("Asked Quantity",0);
                                                                      SetQtyForInventory();
                                                                      IF "Asked Quantity" <> xRec."Asked Quantity" THEN
                                                                        GetUnitPrice(FIELDNO("Asked Quantity"));
                                                                      VALIDATE("Unit Price");
                                                                      CheckInventoryWarning(FIELDNO("Asked Quantity"));  //*19786.n  (check moved from Form to Table)
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Asked Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes;
                                                   Description=Aantal kan negatief zijn (correcties) maar 'Gevraagd aantal' mag niet negatief zijn (bij corr. gewoon nul laten) dus bewust MinValue=0 }
    { 141 ;   ;Qty. to Receive     ;Decimal       ;OnValidate=BEGIN
                                                                //*24249.n
                                                                IF ("Qty. to Receive" = 0) THEN
                                                                  EXIT;

                                                                PlantSetup.GET;
                                                                PlantSetup.TESTFIELD("Removal with Qty. to Receive", TRUE);

                                                                CASE Type OF
                                                                  Type::Text:
                                                                    TESTFIELD("Qty. to Receive",0);
                                                                  Type::Item:
                                                                    BEGIN
                                                                      GetOrderHeader();
                                                                      IF (OrderRec.Type <> OrderRec.Type::Removal) THEN
                                                                        TESTFIELD("Qty. to Receive",0);
                                                                      IF ("Qty. to Receive" <> Quantity) AND ((Quantity = 0) OR (Quantity = xRec."Qty. to Receive")) THEN
                                                                        VALIDATE(Quantity, "Qty. to Receive");
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Qty. to Receive;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes;
                                                   Description=Expected }
    { 150 ;   ;Purch. Order Type   ;Option        ;OnValidate=VAR
                                                                ItemVend@1100530000 : Record 99;
                                                              BEGIN
                                                                IF ("Purch. Order Type" = "Purch. Order Type"::" ") THEN BEGIN
                                                                  IF ("Vendor No." <> '') THEN
                                                                    "Vendor No." := '';
                                                                  IF ("Direct Delivery") THEN
                                                                    "Direct Delivery" := FALSE;
                                                                  EXIT;
                                                                END;

                                                                PlantSetup.GET;
                                                                PlantSetup.TESTFIELD("Extended Picking Procedure", TRUE);

                                                                GetOrderHeader();
                                                                OrderRec.TESTFIELD(Type, OrderRec.Type::Arrival);

                                                                IF ("Purch. Order Type" <> xRec."Purch. Order Type") THEN
                                                                  "Vendor No." := ItemVend.GetDefaultVendorNo("Item No.", "Variant Code", TRUE);
                                                              END;

                                                   CaptionML=ENU=Purch. Order Type;
                                                   OptionCaptionML=ENU=" ,Purchase";
                                                   OptionString=[ ,Purchase] }
    { 151 ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=BEGIN
                                                                IF ("Vendor No." = '') THEN
                                                                  EXIT;

                                                                IF ("Purch. Order Type" = "Purch. Order Type"::" ") THEN
                                                                  TESTFIELD("Vendor No.", '');
                                                              END;

                                                   CaptionML=ENU=Vendor No. }
    { 152 ;   ;Direct Delivery     ;Boolean       ;OnValidate=BEGIN
                                                                IF (NOT "Direct Delivery") THEN
                                                                  EXIT;

                                                                IF ("Purch. Order Type" = "Purch. Order Type"::" ") THEN
                                                                  TESTFIELD("Direct Delivery", FALSE);
                                                                IF Quantity < 0 THEN
                                                                  FIELDERROR(Quantity);
                                                              END;

                                                   CaptionML=ENU=Direct Delivery }
    { 153 ;   ;Purchase Order      ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   CaptionML=ENU=Purchase Order;
                                                   Editable=No }
    { 154 ;   ;Purchase Order Line No.;Integer    ;TableRelation="Purchase Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                   Document No.=FIELD(Purchase Order));
                                                   CaptionML=ENU=Purch. Order Line No.;
                                                   Editable=No }
    { 200 ;   ;Element             ;Code20        ;OnValidate=VAR
                                                                lvLocation@1100525000 : Code[20];
                                                              BEGIN
                                                                IF Element = '' THEN
                                                                  EXIT;
                                                                TESTFIELD(Type, Type::Item);
                                                                GetOrderHeader();
                                                                IF OrderRec.Type <> OrderRec.Type::Removal THEN
                                                                  lvLocation := OrderRec."To Location"
                                                                ELSE
                                                                  lvLocation := OrderRec."From Location";
                                                                CASE OrderRec.Type OF
                                                                  OrderRec.Type::Arrival:
                                                                    OrderRec.TESTFIELD("To Location");
                                                                  OrderRec.Type::Removal:
                                                                    OrderRec.TESTFIELD("From Location");
                                                                  ELSE
                                                                    OrderRec.FIELDERROR(Type);
                                                                END;
                                                                PlantElementMgtCU.OnValidateElement(lvLocation, Element, '',TRUE);
                                                              END;

                                                   OnLookup=VAR
                                                              lvEditable@1100525001 : Boolean;
                                                              lvNewElement@1100525000 : Code[20];
                                                              lvLocation@1100525002 : Code[20];
                                                            BEGIN
                                                              GetOrderHeader();
                                                              IF OrderRec.Type <> OrderRec.Type::Removal THEN
                                                                lvLocation := OrderRec."To Location"
                                                              ELSE
                                                                lvLocation := OrderRec."From Location";
                                                              IF (OrderRec.Type IN [OrderRec.Type::Arrival, OrderRec.Type::Removal]) AND
                                                                 (NOT OrderRec.Posted) AND (Type <> Type::Text)
                                                              THEN
                                                                lvEditable := TRUE;
                                                              lvNewElement := PlantElementMgtCU.OnLookupElement(lvLocation, Element, '', lvEditable);
                                                              IF (lvNewElement <> '') AND (lvNewElement <> Element) THEN
                                                                VALIDATE(Element, lvNewElement);
                                                            END;

                                                   CaptionML=ENU=Element }
    { 410 ;   ;Comment CP Order    ;Text50        ;OnValidate=BEGIN
                                                                IF "Comment CP Order" <> ''THEN BEGIN
                                                                  TESTFIELD(Type, Type::Item);
                                                                  PlantSetup.GET;
                                                                  PlantSetup.TESTFIELD("Comment CP Order", TRUE);  //RTC.
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Comment CP Order;
                                                   Description=BNBM Specifiek }
    { 420 ;   ;Plant Request No.   ;Code20        ;TableRelation="Plant Request";
                                                   CaptionML=ENU=Plant Request No.;
                                                   Editable=No }
    { 425 ;   ;Plant Request Line No.;Integer     ;TableRelation="Plant Request Line"."Line No." WHERE (Plant Request No.=FIELD(Plant Request No.));
                                                   CaptionML=ENU=Plant Reques Line No.;
                                                   Editable=No }
    { 430 ;   ;Qty. for Inventory  ;Decimal       ;CaptionML=ENU=Qty. for Inventory;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 440 ;   ;Transfer Date       ;Date          ;CaptionML=ENU=Transfer Date;
                                                   Editable=No }
    { 445 ;   ;Order Type          ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Order".Type WHERE (No.=FIELD(Plant Order No.)));
                                                   CaptionML=ENU=Order Type;
                                                   OptionCaptionML=ENU=Arrival,Removal,Other Transfers,Negative Inventory Correction;
                                                   OptionString=Arrival,Removal,Other Transfers,Negative Inventory Correction;
                                                   Editable=No }
    { 450 ;   ;Sales/Buy-Back Item ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Item."Sales/Buy-Back Item (Plant)" WHERE (No.=FIELD(Item No.)));
                                                   CaptionML=ENU=Sales/Buy-Back;
                                                   Editable=No }
    { 500 ;   ;Plant Location (Posted);Code20     ;TableRelation="Plant Location";
                                                   CaptionML=ENU=Plant Location;
                                                   Description=Deze wordt pas gevuld bij het boeken van de MO, met From of To locatie (afh. ordersoort afvoer/aanvoer) }
    { 510 ;   ;Plant Order Status  ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Order".Status WHERE (No.=FIELD(Plant Order No.)));
                                                   CaptionML=ENU=Plant Order Status;
                                                   OptionCaptionML=ENU=Open,Printed,Released,Posted;
                                                   OptionString=Open,Printed,Released,Posted;
                                                   Editable=No }
    { 520 ;   ;Plant Order Type    ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Order".Type WHERE (No.=FIELD(Plant Order No.)));
                                                   CaptionML=ENU=Plant Order Type;
                                                   OptionCaptionML=ENU=Arrival,Removal,Other Transfers,Negative Inventory Correction;
                                                   OptionString=Arrival,Removal,Other Transfers,Negative Inventory Correction;
                                                   Editable=No }
    { 530 ;   ;Item Amount         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Plant Order Item Line".Amount WHERE (Plant Order No.=FIELD(Plant Order No.)));
                                                   CaptionML=ENU=Item Amount.;
                                                   Editable=No }
    { 600 ;   ;Reason Code (Exit)  ;Code10        ;TableRelation="Exit Reason Code" WHERE (Exit Sold S/BB Plant on Loc.=FILTER(Yes));
                                                   OnValidate=VAR
                                                                ExitReason@1100529000 : Record 11072665;
                                                              BEGIN
                                                                //DP00485.sn (26972)
                                                                IF "Reason Code (Exit)" <> '' THEN BEGIN
                                                                  CALCFIELDS("Sales/Buy-Back Item");
                                                                  TESTFIELD("Sales/Buy-Back Item", TRUE);
                                                                  GetOrderHeader;
                                                                  OrderRec.TESTFIELD(Type, OrderRec.Type::Removal);
                                                                  ExitReason.GET("Reason Code (Exit)");
                                                                  ExitReason.TESTFIELD("Exit Sold S/BB Plant on Loc.", TRUE);
                                                                  VALIDATE("Unit Price", 0) ;
                                                                  MESSAGE(Text018, ExitReason.FIELDCAPTION("Exit Sold S/BB Plant on Loc."));
                                                                END ELSE BEGIN
                                                                  PlantOrderCalcExternally := TRUE;
                                                                  IF xRec."Reason Code (Exit)" <> ''  THEN
                                                                    VALIDATE("Item No.");
                                                                  PlantOrderCalcExternally := FALSE;
                                                                END;
                                                                //DP00485.en (26972)
                                                              END;

                                                   CaptionML=ENU=Reason Code (Exit) }
    { 9000;   ;BarCodeText         ;Text30        ;OnValidate=BEGIN
                                                                IF BarCodeText <> ''THEN
                                                                  TESTFIELD(Type, Type::Item);
                                                              END;

                                                   CaptionML=ENU=Bar Code;
                                                   Description=BNBM Specifiek }
    { 9001;   ;Order Picking Status;Option        ;OnValidate=BEGIN
                                                                IF "Order Picking Status" <> 0 THEN BEGIN
                                                                  TESTFIELD(Type, Type::Item);
                                                                  PlantSetup.GET;
                                                                  PlantSetup.TESTFIELD("PO-Picking Bar Code Scanner", TRUE);  //RTC.
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Order Picking Status;
                                                   OptionCaptionML=ENU=" ,No Stock,Ready";
                                                   OptionString=[ ,No Stock,Ready];
                                                   Description=BNBM Specifiek }
    { 9002;   ;Shelf/Bin No.       ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Item."Shelf No." WHERE (No.=FIELD(Item No.)));
                                                   OnValidate=BEGIN
                                                                IF "Shelf/Bin No." <> ''THEN
                                                                  TESTFIELD(Type, Type::Item);
                                                              END;

                                                   CaptionML=ENU=Shelf No.;
                                                   Editable=No }
    { 9003;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Plant Order No.),
                                                                                                                 Source Ref. No.=FIELD(Line No.),
                                                                                                                 Source Type=CONST(11020510),
                                                                                                                 Reservation Status=CONST(Reservation)));
                                                   CaptionML=ENU=Reserved Qty. (Base);
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Plant Order No.,Line No.                ;SumIndexFields=Amount,Quantity;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Item No.,Posted,Location Code,Variant Code,Transfer Date;
                                                   SumIndexFields=Qty. for Inventory }
    {    ;Plant Location (Posted),Item No.,Transfer Date }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GLSetup@11012000 : Record 98;
      PlantSetup@1100485007 : Record 11012550;
      OrderRec@11012002 : Record 11012556;
      ItemRec@11012004 : Record 27;
      Text001@1100485000 : TextConst 'ENU=Items not allowed for %1 is ''%2''';
      FromLocationRec@1100485006 : Record 11012554;
      SalesPriceCalcMgtCU@1100485001 : Codeunit 7000;
      UOMMgtCU@1100485002 : Codeunit 5402;
      UserMgtCU@1100485003 : Codeunit 5700;
      Text002@1100485008 : TextConst 'ENU=No %1 found for Item ''%2''.';
      PlantElementMgtCU@1100525000 : Codeunit 11012582;
      PlantOrderCalcExternally@1100525001 : Boolean;
      Text003@1100525002 : TextConst 'ENU=%1 (%2) is greater than inventory (%3), %4 ''%5'' %6%7 ''%8''.';
      NoInventoryWarning@1210190000 : Boolean;
      Text004@1100529000 : TextConst 'ENU=For %1 is ''%2'' only items allowed for transfer from Depot to Depot.';
      Text018@1100525003 : TextConst 'ENU=Note: Concerns %1, so no Buy Back and will also return to Depot.';

    PROCEDURE GetOrderHeader@5();
    BEGIN
      IF PlantOrderCalcExternally THEN
        EXIT;

      TESTFIELD("Plant Order No.");
      OrderRec.GET("Plant Order No.");
      IF NOT FromLocationRec.GET(OrderRec."From Location") THEN
        FromLocationRec.INIT;
    END;

    PROCEDURE GetItem@1100485001();
    BEGIN
      IF "Item No." <> ItemRec."No." THEN
        ItemRec.GET("Item No.");
    END;

    PROCEDURE GetUnitPrice@1100485000(ICurrFieldNo@1100485001 : Integer);
    VAR
      lvItemSalesBuyBackRateRec@1100485002 : Record 11020318;
      lvItemJnlLineRec@1100485000 : Record 83;
      lvPlantLocRec@1100485007 : Record 11012554;
      lvCustRec@1100485008 : Record 18;
      lvItemJnlFieldNo@1100485003 : Integer;
      lvPlantLoc@1100485006 : Code[20];
      lvCustNo@1100485005 : Code[20];
      lvCustPriceGrp@1100485004 : Code[10];
      lvIsProjectLocation@1210190000 : Boolean;
    BEGIN
      GetOrderHeader();

      IF OrderRec.Type = OrderRec.Type::"Other Transfers" THEN  //DP00183
        EXIT;

      //DP00485.sn (26972)
      IF "Reason Code (Exit)" <> '' THEN
        EXIT;
      //DP00485.en (26972)

      GetItem();
      PlantSetup.GET;

      //mg.sn, 09-03-11: M26095
      IF OrderRec.Type = OrderRec.Type::Removal THEN
        lvPlantLoc := OrderRec."From Location"
      ELSE
        lvPlantLoc := OrderRec."To Location";
      IF lvPlantLocRec.GET(lvPlantLoc) THEN
        IF lvPlantLocRec."Project No." <> '' THEN
          lvIsProjectLocation := TRUE;
      //mg.en, 09-03-11: M26095

      IF ItemRec."Sales/Buy-Back Item (Plant)" THEN BEGIN
        lvItemSalesBuyBackRateRec.SETRANGE("Item No.", "Item No.");
        lvItemSalesBuyBackRateRec.SETRANGE("Starting Date", 0D, OrderRec."Transfer Date");
        IF NOT lvItemSalesBuyBackRateRec.FINDLAST THEN BEGIN
          lvItemSalesBuyBackRateRec.INIT;
          IF PlantSetup."Rate Warning" THEN BEGIN
            IF OrderRec.Type = OrderRec.Type::Removal THEN
              MESSAGE(Text002, lvItemSalesBuyBackRateRec.FIELDCAPTION("Buy Back Rate"), "Item No.")
            ELSE
              MESSAGE(Text002, lvItemSalesBuyBackRateRec.FIELDCAPTION("Sales Rate"), "Item No.");
          END;
        END;

        //mg.sc, 09-03-11: M26095
        IF PlantSetup."Item with Cost Price" AND lvIsProjectLocation THEN
          "Unit Price" := ItemRec."Unit Cost"
        ELSE BEGIN
          IF OrderRec.Type = OrderRec.Type::Removal THEN
            "Unit Price" := lvItemSalesBuyBackRateRec."Buy Back Rate" * "Qty. per Unit of Measure"
          ELSE
            "Unit Price" := lvItemSalesBuyBackRateRec."Sales Rate" * "Qty. per Unit of Measure";
        END;
        //mg.ec, 09-03-11: M26095
        EXIT;
      END;

      lvItemJnlLineRec."Item No." := "Item No.";
      lvItemJnlLineRec."Location Code" := "Location Code";
      lvItemJnlLineRec."Posting Date" := OrderRec."Transfer Date";
      lvItemJnlLineRec.Quantity := ABS(GetQuantity());
      lvItemJnlLineRec."Unit Amount" := "Unit Price";
      lvItemJnlLineRec."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
      lvItemJnlLineRec."Unit of Measure Code" := "Unit of Measure";
      lvItemJnlLineRec."Variant Code" := "Variant Code";

      CASE ICurrFieldNo OF
        FIELDNO("Item No."):
          lvItemJnlFieldNo := lvItemJnlLineRec.FIELDNO("Item No.");
        FIELDNO("Location Code"):
          lvItemJnlFieldNo := lvItemJnlLineRec.FIELDNO("Location Code");
        FIELDNO("Unit of Measure"):
          lvItemJnlFieldNo := lvItemJnlLineRec.FIELDNO("Unit of Measure Code");
        FIELDNO("Asked Quantity"),
        FIELDNO(Quantity):
          lvItemJnlFieldNo := lvItemJnlLineRec.FIELDNO(Quantity);
        FIELDNO("Variant Code"):
          lvItemJnlFieldNo := lvItemJnlLineRec.FIELDNO("Variant Code");
      END;
      IF OrderRec.Type = OrderRec.Type::Removal THEN
        lvPlantLoc := OrderRec."From Location"
      ELSE
        lvPlantLoc := OrderRec."To Location";
      IF lvPlantLocRec.GET(lvPlantLoc) THEN BEGIN
        IF lvPlantLocRec."Customer No." <> '' THEN BEGIN
          lvCustNo := lvPlantLocRec."Customer No.";
          IF lvCustRec.GET(lvCustNo) THEN
            lvCustPriceGrp := lvCustRec."Customer Price Group";
        END;
      END;

      //mg.sc, 04-03-11: M24452
      PlantSetup.GET;
      //SalesPriceCalcMgtCU.FindItemJnlLinePrice(lvItemJnlLineRec, lvItemJnlFieldNo);
      IF PlantSetup."Item with Cost Price" AND lvIsProjectLocation THEN BEGIN
        "Unit Price" := ItemRec."Unit Cost";
      END ELSE BEGIN
        SalesPriceCalcMgtCU.FindPlantOrderItemLinePrice(lvItemJnlLineRec, lvItemJnlFieldNo, lvCustNo, lvCustPriceGrp);
        "Unit Price" := lvItemJnlLineRec."Unit Amount";
      END;
      //mg.ec, 04-03-11: M24452
    END;

    PROCEDURE GetQuantity@1100485003() : Decimal;
    BEGIN
      IF (Quantity <> 0) OR ("Asked Quantity" = 0) THEN
        EXIT(Quantity);

      PlantSetup.GET;
      IF NOT PlantSetup."Extended Picking Procedure" THEN
        EXIT(Quantity);

      GetOrderHeader();
      IF (NOT OrderRec.Posted) AND (OrderRec.Status < OrderRec.Status::Released) AND (OrderRec.Type = OrderRec.Type::Arrival) THEN
        EXIT("Asked Quantity");

      EXIT(Quantity);
    END;

    PROCEDURE SetQtyForInventory@1100485002();
    BEGIN
      GetOrderHeader();
      IF OrderRec.Posted THEN
        "Qty. for Inventory":= 0
      ELSE BEGIN
        CASE OrderRec.Type OF
          OrderRec.Type::Arrival: "Qty. for Inventory" := ROUND(GetQuantity() * "Qty. per Unit of Measure",0.00001);
          OrderRec.Type::Removal: "Qty. for Inventory" := ROUND(-GetQuantity() * "Qty. per Unit of Measure",0.00001);
        ELSE
          "Qty. for Inventory" := 0;
        END;
      END;
    END;

    PROCEDURE SetOrderHeader@1100525000(VAR PlantOrder@1100525000 : Record 11012556);
    BEGIN
      OrderRec.COPY(PlantOrder);
      PlantOrderCalcExternally := TRUE;
    END;

    PROCEDURE GetInventory@1100525001(InventByLocation@1100525000 : Boolean) : Decimal;
    VAR
      Item@1100525003 : Record 27;
    BEGIN
      IF ("Item No." = '') OR Posted THEN
        EXIT(0);
      IF NOT Item.GET("Item No.") THEN
        EXIT(0);

      IF "Variant Code" <> '' THEN  //* IF Variant filled then inventory by item/variant(/location)
        Item.SETRANGE("Variant Filter", "Variant Code");
      IF InventByLocation THEN  //* Inventory by item(/variant)/location
        Item.SETRANGE("Location Filter", "Location Code");
      Item.CALCFIELDS(Inventory);
      IF ("Qty. per Unit of Measure" <> 0) THEN
        Item.Inventory := ROUND(Item.Inventory / "Qty. per Unit of Measure", 0.00001);
      EXIT(Item.Inventory);
    END;

    PROCEDURE SetNoInventoryWarning@1210190001(NoInventWarning@1210190000 : Boolean);
    BEGIN
      NoInventoryWarning := NoInventWarning;
    END;

    PROCEDURE CheckInventoryWarning@1100525002(CurrentFldNo@1100525002 : Integer);
    VAR
      Quan@1100525003 : Decimal;
      InventQty@1100525000 : Decimal;
      QuanTxt@1100525004 : Text[50];
      VariantTxt@1100525001 : Text[50];
    BEGIN
      //*19786.sn
      IF (Type <> Type::Item) OR ("Item No." = '') OR NoInventoryWarning THEN
        EXIT;
      PlantSetup.GET;
      IF NOT PlantSetup."Item Stockout Warning" THEN
        EXIT;
      //*19786.en
      CALCFIELDS("Order Type");
      IF "Order Type" <> "Order Type"::Arrival THEN
        IF NOT IsOtherTransferDepotToDepot() THEN  //*DP00183.n
          EXIT;

      CASE CurrentFldNo OF
        FIELDNO(Quantity):
          BEGIN
            Quan := Quantity;
            QuanTxt := FIELDCAPTION(Quantity);
          END;
        FIELDNO("Asked Quantity"):
          BEGIN
            Quan := "Asked Quantity";
            QuanTxt := FIELDCAPTION("Asked Quantity");
          END;
        ELSE
          BEGIN
            IF (Quantity <> 0) OR ("Asked Quantity" = 0) THEN BEGIN
              Quan := Quantity;
              QuanTxt := FIELDCAPTION(Quantity);
            END ELSE BEGIN
              Quan := "Asked Quantity";
              QuanTxt := FIELDCAPTION("Asked Quantity");
            END;
          END;
      END;
      IF Quan <= 0 THEN
        EXIT;

      InventQty := GetInventory(TRUE);
      IF (Quan > InventQty) THEN BEGIN
        IF "Variant Code" <> '' THEN
          VariantTxt := FIELDCAPTION("Variant Code") + ' ''' + "Variant Code" + ''' ';
        MESSAGE(Text003, QuanTxt, Quan, InventQty,
          FIELDCAPTION("Item No."), "Item No.", VariantTxt,FIELDCAPTION("Location Code"), "Location Code");
      END;
    END;

    PROCEDURE CalcPlantOrderWeight@1210190000(IncludeItemLines@1210190000 : Boolean) : Decimal;
    VAR
      PlantOrderLine@1210190001 : Record 11012557;
    BEGIN
      PlantOrderLine."Plant Order No." := "Plant Order No.";
      EXIT(PlantOrderLine.PlantOrderTotalWeight(IncludeItemLines));
    END;

    PROCEDURE LookupItemNo@1210190002(xRecItemNo@1210190003 : Code[20]) : Code[20];
    VAR
      Item@1210190000 : Record 27;
      ItemList@1210190001 : Page 31;
      Editable@1210190002 : Boolean;
    BEGIN
      TESTFIELD(Type, Type::Item);
      GetOrderHeader();
      IF (NOT OrderRec.Posted) AND (OrderRec.Status < OrderRec.Status::Released) AND
         ((OrderRec.Type IN [OrderRec.Type::Arrival, OrderRec.Type::Removal]) OR IsOtherTransferDepotToDepot()) //*DP00183.c
      THEN
        Editable := TRUE;

      Item."No." := "Item No.";
      IF NOT Editable THEN BEGIN
        ItemList.SETRECORD(Item);
        ItemList.RUNMODAL;
      END ELSE BEGIN
        IF Item."No." = '' THEN
          Item."No." := xRecItemNo;
        ItemList.SETRECORD(Item);
        ItemList.DetermineInterface(
          DATABASE::"Plant Order Item Line",
          "Plant Order No.",'','','',0,'','',"Line No.",'','');
        ItemList.LOOKUPMODE(TRUE);
        IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ItemList.GETRECORD(Item);
          IF Item."No." <> '' THEN
            EXIT(Item."No.");
        END;
      END;
      EXIT("Item No.");
    END;

    PROCEDURE IsOtherTransferDepotToDepot@1100529000() : Boolean;
    BEGIN
      //*DP00183
      IF "Plant Order No." <> '' THEN BEGIN
        GetOrderHeader();
        EXIT(OrderRec.IsOtherTransferDepotToDepot());
      END;
      EXIT(FALSE);
    END;

    PROCEDURE CheckOrderType@1100529002();
    BEGIN
      //*DP00183
      IF OrderRec.Type = OrderRec.Type::"Negative Inventory Correction" THEN
        ERROR(Text001, OrderRec.FIELDCAPTION(Type), OrderRec.Type);
      IF OrderRec.Type = OrderRec.Type::"Other Transfers" THEN BEGIN
        IF NOT IsOtherTransferDepotToDepot() THEN
          ERROR(Text004, OrderRec.FIELDCAPTION(Type), OrderRec.Type);
      END;
    END;

    PROCEDURE GetDefaultItemLocFromPlntDepot@1100529001(FieldNumber@1100529000 : Integer) : Code[10];
    VAR
      PlantLoc@1100529001 : Record 11012554;
      PlantLocCode@1100529002 : Code[20];
    BEGIN
      //*DP00183
      GetOrderHeader();
      IF FieldNumber = FIELDNO("Location Code") THEN BEGIN
        CASE OrderRec.Type OF
          OrderRec.Type::Arrival,
          OrderRec.Type::"Other Transfers":
            PlantLocCode := OrderRec."From Location";
          OrderRec.Type::Removal:
            PlantLocCode := OrderRec."To Location";
        END;
      END ELSE BEGIN
        IF (FieldNumber = FIELDNO("New Location Code")) AND (OrderRec.Type = OrderRec.Type::"Other Transfers") THEN BEGIN
          IF IsOtherTransferDepotToDepot() THEN
            PlantLocCode := OrderRec."To Location";
        END;
      END;
      IF (PlantLocCode <> '') AND PlantLoc.GET(PlantLocCode) THEN BEGIN
        IF PlantLoc.Depot THEN
          EXIT(PlantLoc."Location Code (Items)");
      END;
      EXIT('');
    END;

    PROCEDURE FilterLinesWithItemToPlan@69(VAR Item@1000 : Record 27);
    BEGIN
      RESET;
      SETCURRENTKEY("Item No.",Posted,"Location Code","Variant Code","Transfer Date");
      SETRANGE("Item No.",Item."No.");
      SETRANGE(Posted, FALSE);
      SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SETFILTER("Transfer Date",Item.GETFILTER("Date Filter"));
      SETFILTER("Qty. for Inventory",'<>0');
    END;

    PROCEDURE FindLinesWithItemToPlan@7(VAR Item@1000 : Record 27) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item);
      EXIT(FINDFIRST);
    END;

    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record 27) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item);
      EXIT(NOT ISEMPTY);
    END;

    PROCEDURE ExitSoldSBBItemOnLoc@1100529010() : Boolean;
    VAR
      ExitReason@1100529000 : Record 11072665;
    BEGIN
      //DP00485 (26972)  NOTE: Rental Type "Buy Back" only allowed on Removal Order, so check on Order Type not needed here
      CALCFIELDS("Sales/Buy-Back Item");
      IF ("Reason Code (Exit)" <> '') AND ("Sales/Buy-Back Item") THEN BEGIN
        IF ExitReason.GET("Reason Code (Exit)") THEN BEGIN
          EXIT(ExitReason."Exit Sold S/BB Plant on Loc.");
        END;
      END;
      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}

