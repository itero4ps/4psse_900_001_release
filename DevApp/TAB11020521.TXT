OBJECT Table 11020521 Plant Request Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Location Copied Need" := '';
               "Line No. Copied Need" := 0;
             END;

    CaptionML=ENU=Plant Request Line;
  }
  FIELDS
  {
    { 10  ;   ;Plant Request No.   ;Code20        ;TableRelation="Plant Request";
                                                   CaptionML=ENU=Plant Request No. }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 30  ;   ;Type                ;Option        ;OnValidate=VAR
                                                                lvReqLineRec@1100485000 : Record 11020521;
                                                                LicensePlantExtendedCU@1100409000 : Codeunit 11012579;
                                                              BEGIN
                                                                CASE Type OF
                                                                  Type::Plant:
                                                                    TESTFIELD("Item No.", '');
                                                                  Type::Item:
                                                                    BEGIN
                                                                      LicensePlantExtendedCU.LicenseTablePlantItem(TRUE,11020521);  //DP00267
                                                                      ReqRec.GET("Plant Request No.");
                                                                      IF (ReqRec.Type = ReqRec.Type::"Other Transfers") THEN
                                                                        FIELDERROR(Type);
                                                                      TESTFIELD("Plant Type", '');
                                                                      TESTFIELD("Set Code", '');
                                                                    END;
                                                                  Type::Text:
                                                                    BEGIN
                                                                      TESTFIELD("Plant Type", '');
                                                                      TESTFIELD("Set Code", '');
                                                                      TESTFIELD("Item No.", '');
                                                                    END;
                                                                END;

                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  lvReqLineRec := Rec;
                                                                  INIT;
                                                                  Type := lvReqLineRec.Type;
                                                                END;
                                                                IF Type = Type::Item THEN
                                                                  GetDefaultLocationCode();  //DP00183
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Plant,Item,Text;
                                                   OptionString=Plant,Item,Text }
    { 40  ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   OnValidate=VAR
                                                                PlantType@1100525000 : Record 11012551;
                                                              BEGIN
                                                                IF "Plant Type" = '' THEN BEGIN
                                                                  "Plant No." := '';
                                                                  Rate := 0;
                                                                  CALCFIELDS(Bulk);
                                                                  EXIT;
                                                                END;

                                                                TESTFIELD(Type, Type::Plant);
                                                                TESTFIELD("Set Code", '');
                                                                //**4PS.sn DPA Plant
                                                                PlantType.Code := "Plant Type";
                                                                PlantType.DPA_FindRecWithDPAFilterAppld;
                                                                //**4PS.en DPA Plant
                                                                PlantType.GET("Plant Type");
                                                                PlantType.TESTFIELD("Order via Plant Request", TRUE);
                                                                CheckPlantTypeBlocked();  //DP00485.n (C009313)
                                                                CALCFIELDS(Bulk, "Plant Category");

                                                                IF "Plant Type" <> xRec."Plant Type" THEN
                                                                  "Plant No." := '';

                                                                IF ("Set Code" <> '') AND ("Plant Type" <> '') THEN
                                                                  "Set Code" := '';

                                                                IF ("Plant Type" <> xRec."Plant Type") OR (Description = '') THEN
                                                                  GetPlantDescription();

                                                                IF PlantTypeRentalRate(TODAY, Rate1, Rate2, Rate3) THEN BEGIN
                                                                    Rate := Rate1;
                                                                    Price := Rate2;
                                                                    "Buy Back Price" := Rate3;
                                                                END ELSE BEGIN
                                                                    Rate := 0;
                                                                    Price := 0;
                                                                    "Buy Back Price" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Plant Type }
    { 45  ;   ;Plant No.           ;Code10        ;TableRelation=IF (Type=CONST(Plant)) "Plant Number".No. WHERE (Plant Type=FIELD(Plant Type))
                                                                 ELSE IF (Type=CONST(Text)) "Standard Text";
                                                   OnValidate=VAR
                                                                PlantNumber@1100525000 : Record 11012552;
                                                                StandardText@1100529000 : Record 7;
                                                              BEGIN
                                                                IF "Plant No." = '' THEN
                                                                  EXIT;

                                                                //DP00241.sn (28876)   Note: Also TableRelation added for Text
                                                                IF Type = Type::Text THEN BEGIN
                                                                  StandardText.GET("Plant No.");
                                                                  Description := StandardText.Description;
                                                                  EXIT;
                                                                END;
                                                                //DP00241.en (28876)

                                                                TESTFIELD(Type, Type::Plant);
                                                                TESTFIELD("Plant Type");

                                                                //**4PS.sn DPA Plant
                                                                PlantNumber."Plant Type" := "Plant Type";
                                                                PlantNumber."No." := "Plant No.";
                                                                PlantNumber.DPA_FindRecWithDPAFilterAppld;
                                                                //**4PS.en DPA Plant

                                                                CALCFIELDS(Bulk);
                                                                IF NOT Bulk THEN BEGIN
                                                                  IF Quantity <> 1 THEN
                                                                    Quantity := 1;
                                                                END ELSE BEGIN
                                                                  //* At bulk is plant no. only allowed if it concerns external plant with no. in stock
                                                                  PlantNoRec.GET("Plant Type", "Plant No.");
                                                                  IF (NOT PlantNoRec.External) OR ("Plant No." <> PlantNoRec."Stock No.") THEN
                                                                    "Plant No." := '';
                                                                END;

                                                                IF ("Plant No." <> xRec."Plant No.") OR (Description = '') THEN
                                                                  GetPlantDescription();
                                                              END;

                                                   CaptionML=ENU=Plant No. }
    { 50  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Unit Price");
                                                                IF "Item No." = '' THEN
                                                                  EXIT;

                                                                TESTFIELD(Type, Type::Item);
                                                                ItemRec.GET("Item No.");
                                                                ItemRec.TESTFIELD("Order via Plant Request", TRUE);

                                                                IF ("Item No." <> xRec."Item No.") OR (Description = '') THEN
                                                                  Description := ItemRec.Description;

                                                                IF ItemSalesRate(TODAY, Rate1, Rate2) THEN BEGIN
                                                                    Rate := Rate1;
                                                                    Price := Rate2;
                                                                    "Buy Back Price" := Rate3;
                                                                END ELSE BEGIN
                                                                    Rate := 0;
                                                                    Price := 0;
                                                                    "Buy Back Price" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 51  ;   ;Unit Price          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Item."Unit Price" WHERE (No.=FIELD(Item No.)));
                                                   CaptionML=ENU=Unit Price;
                                                   Editable=No }
    { 55  ;   ;Set Code            ;Code10        ;TableRelation="Plant Set";
                                                   OnValidate=BEGIN
                                                                IF ("Set Code" = '') THEN
                                                                  EXIT;

                                                                TESTFIELD(Type, Type::Plant);
                                                                TESTFIELD("Plant Type", '');

                                                                SetRec.GET("Set Code");
                                                                SetRec.TESTFIELD("Order via Plant Request", TRUE);
                                                                Description := SetRec.Description;

                                                                IF Quantity = 0 THEN
                                                                  Quantity := 1
                                                                ELSE BEGIN
                                                                  IF Quantity <> 1 THEN BEGIN
                                                                    IF UniquePlantWithNoFilledOnSet() THEN
                                                                      Quantity := 1;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Set }
    { 60  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 70  ;   ;Bulk                ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Type".Bulk WHERE (Code=FIELD(Plant Type)));
                                                   CaptionML=ENU=Bulk;
                                                   Editable=No }
    { 71  ;   ;Plant Category      ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Type"."Plant Category" WHERE (Code=FIELD(Plant Type)));
                                                   TableRelation="Plant Category";
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Plant Category;
                                                   Editable=No }
    { 80  ;   ;Rate Code           ;Code10        ;OnValidate=BEGIN
                                                                IF "Rate Code" <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Plant);
                                                                  PlantSetupRec.GET;
                                                                  PlantSetupRec.TESTFIELD("Rate Codes");
                                                                  ReqRec.GET("Plant Request No.");
                                                                  IF ReqRec.Type = ReqRec.Type::Removal THEN
                                                                    PlantRateCodeRec.CheckPlantRateCode(ReqRec."From Location", "Rate Code", TRUE, '')
                                                                  ELSE
                                                                    PlantRateCodeRec.CheckPlantRateCode(ReqRec."To Location", "Rate Code", TRUE, '');
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              ReqRec.GET("Plant Request No.");
                                                              IF ReqRec.Type = ReqRec.Type::Removal THEN
                                                                PlantRateCodeRec.Code := PlantRateCodeRec.LookupPlantRateCode(ReqRec."From Location", "Rate Code", TRUE, '')
                                                              ELSE
                                                                PlantRateCodeRec.Code := PlantRateCodeRec.LookupPlantRateCode(ReqRec."To Location", "Rate Code", TRUE, '');
                                                              IF (NOT ReqRec.Posted) AND (ReqRec.Status < ReqRec.Status::Approved) AND (Type = Type::Plant) THEN
                                                                VALIDATE("Rate Code", PlantRateCodeRec.Code);
                                                            END;

                                                   CaptionML=ENU=Rate Code }
    { 85  ;   ;From Rate Code (Other Transf.);Code10;
                                                   OnValidate=BEGIN
                                                                IF "From Rate Code (Other Transf.)" <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Plant);
                                                                  PlantSetupRec.GET;
                                                                  PlantSetupRec.TESTFIELD("Rate Codes");
                                                                  ReqRec.GET("Plant Request No.");
                                                                  ReqRec.TESTFIELD(Type, ReqRec.Type::"Other Transfers");
                                                                  PlantRateCodeRec.CheckPlantRateCode(ReqRec."From Location", "From Rate Code (Other Transf.)", TRUE, '');
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF Type <> Type::Plant THEN
                                                                EXIT;
                                                              ReqRec.GET("Plant Request No.");
                                                              IF ReqRec.Type <> ReqRec.Type::"Other Transfers" THEN
                                                                EXIT;
                                                              PlantRateCodeRec.Code := PlantRateCodeRec.LookupPlantRateCode(ReqRec."From Location", "From Rate Code (Other Transf.)", TRUE, '');
                                                              IF (NOT ReqRec.Posted) AND (ReqRec.Status < ReqRec.Status::Approved) THEN
                                                                VALIDATE("From Rate Code (Other Transf.)", PlantRateCodeRec.Code);
                                                            END;

                                                   CaptionML=ENU=From Rate Code (Other Transf.);
                                                   Description=Only for Other Transger, not mandatory }
    { 90  ;   ;Expected return on  ;Date          ;OnValidate=BEGIN
                                                                IF "Expected return on" <> 0D THEN BEGIN
                                                                  TESTFIELD(Type,Type::Plant);
                                                                  ReqRec.GET("Plant Request No.");
                                                                  IF ("Expected return on" < ReqRec."Transfer Date") THEN
                                                                    "Expected return on" := ReqRec."Transfer Date";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Expected return on }
    { 100 ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                IF Quantity = 0 THEN
                                                                  EXIT;

                                                                CASE Type OF
                                                                  Type::Text:
                                                                    FIELDERROR(Type);
                                                                  Type::Plant:
                                                                    BEGIN
                                                                      IF ("Plant Type" <> '') THEN BEGIN
                                                                        CALCFIELDS(Bulk);
                                                                        IF ("Plant No." <> '') AND (NOT Bulk) THEN
                                                                          TESTFIELD(Quantity, 1);
                                                                      END ELSE BEGIN
                                                                        IF ("Set Code" <> '') AND UniquePlantWithNoFilledOnSet() AND (NOT (Quantity IN [0,1])) THEN
                                                                          FIELDERROR(Quantity,Text001);
                                                                      END;
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 110 ;   ;Location Copied Need;Code20        ;TableRelation="Plant Location".Code;
                                                   CaptionML=ENU=Location Copied Need;
                                                   Editable=No }
    { 115 ;   ;Line No. Copied Need;Integer       ;CaptionML=ENU=Line No. Copied Need;
                                                   Editable=No }
    { 120 ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                IF "Location Code" <> '' THEN
                                                                  TESTFIELD(Type, Type::Item);
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 200 ;   ;Element             ;Code20        ;OnValidate=BEGIN
                                                                IF Element = '' THEN
                                                                  EXIT;
                                                                IF (Type = Type::Text) THEN
                                                                  FIELDERROR(Type);
                                                                ReqRec.GET("Plant Request No.");
                                                                IF NOT (ReqRec.Type IN [ReqRec.Type::Arrival, ReqRec.Type::"Other Transfers"]) THEN
                                                                  ReqRec.FIELDERROR(Type);
                                                                ReqRec.TESTFIELD("To Location");
                                                                PlantElementMgtCU.OnValidateElement(ReqRec."To Location", Element, '', FALSE);
                                                              END;

                                                   OnLookup=VAR
                                                              lvEditable@1100525001 : Boolean;
                                                              lvNewElement@1100525000 : Code[20];
                                                            BEGIN
                                                              ReqRec.GET("Plant Request No.");
                                                              IF (ReqRec.Type IN [ReqRec.Type::Arrival, ReqRec.Type::"Other Transfers"]) AND
                                                                 (NOT ReqRec.Posted) AND (ReqRec.Status < ReqRec.Status::Approved) AND (Type <> Type::Text)
                                                              THEN
                                                                lvEditable := TRUE;
                                                              lvNewElement := PlantElementMgtCU.OnLookupElement(ReqRec."To Location", Element, '', lvEditable);
                                                              IF (lvNewElement <> '') AND (lvNewElement <> Element) THEN
                                                                VALIDATE(Element, lvNewElement);
                                                            END;

                                                   CaptionML=ENU=Element }
    { 9001;   ;Comment CP Order    ;Text50        ;OnValidate=BEGIN
                                                                IF ("Comment CP Order" <> '') AND (Type = Type::Text) THEN
                                                                  FIELDERROR(Type);
                                                              END;

                                                   CaptionML=ENU=Comment CP Order;
                                                   Description=BNBM Specific }
    { 9002;   ;Price               ;Decimal       ;CaptionML=ENU=Price;
                                                   Description=Web Site Info;
                                                   Editable=No }
    { 9003;   ;Rate                ;Decimal       ;CaptionML=ENU=Rate;
                                                   Description=Web Site Info;
                                                   Editable=No }
    { 9004;   ;Buy Back Price      ;Decimal       ;CaptionML=ENU=Buy Back Price;
                                                   Description=Web Site Info;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Plant Request No.,Line No.              ;Clustered=Yes }
    {    ;Location Copied Need,Line No. Copied Need }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PlantSetupRec@1100525003 : Record 11012550;
      PlantNoRec@1100485001 : Record 11012552;
      SetRec@1100485000 : Record 11012587;
      PlantRec@1100525001 : Record 11012551;
      ItemRec@1100485002 : Record 27;
      ReqRec@1100485003 : Record 11020520;
      Text001@1100485004 : TextConst 'ENU=must be 1 for a set that contains unique Plant with Plant No. filled';
      Text002@1100485005 : TextConst 'ENU=Explode Set Line(s)?';
      PlantRateCodeRec@1100525002 : Record 11020502;
      PlantElementMgtCU@1100525000 : Codeunit 11012582;
      Rate1@1210190000 : Decimal;
      Rate2@1210190001 : Decimal;
      Rate3@1210190002 : Decimal;

    PROCEDURE GetPlantDescription@4();
    BEGIN
      IF (Type <> Type::Plant) OR ("Set Code" <> '') THEN
        EXIT;

      PlantNoRec.GetPlantDescription("Plant Type","Plant No.",Description);
    END;

    PROCEDURE UniquePlantWithNoFilledOnSet@1100485003() : Boolean;
    VAR
      lvSetLineRec@1100485000 : Record 11012588;
    BEGIN
      lvSetLineRec.SETRANGE("Set Code", "Set Code");
      lvSetLineRec.SETRANGE(Type, lvSetLineRec.Type::Plant);
      lvSetLineRec.SETRANGE(Bulk, FALSE);
      lvSetLineRec.SETFILTER("Plant No.", '<>%1', '');
      IF lvSetLineRec.FIND('-') THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE ExplodeSet@1100485000(VAR IvarPlantRequestLineRec@1100485005 : Record 11020521);
    VAR
      lvSetLineRec@1100485002 : Record 11012588;
      lvPlantReqRec@1100485008 : Record 11020520;
      lvReqLineRec@1100485009 : Record 11020521;
      lvReqLineRec2@1100485010 : Record 11020521;
      lvOrgReqLineRec@1100485011 : Record 11020521;
      lvNewReqLineRec@1100485003 : Record 11020521;
      PlantToLoc@1210190000 : Record 11012554;
      lvNoOfLinesNeeded@1100485001 : Integer;
      lvLineSpacing@1100485012 : Integer;
      lvNextLineNo@1100485013 : Integer;
      lvQuantity@1100485004 : Decimal;
    BEGIN
      PlantSetupRec.GET;
      WITH lvPlantReqRec DO BEGIN
        "No." := IvarPlantRequestLineRec."Plant Request No.";
        TESTFIELD("No.");
        GET(IvarPlantRequestLineRec."Plant Request No.");
        TESTFIELD(Posted,FALSE);
        PlantToLoc.GET("To Location");
      END;

      IF GUIALLOWED THEN
        IF NOT CONFIRM(Text002) THEN
          EXIT;

      lvReqLineRec.COPY(IvarPlantRequestLineRec);
      lvReqLineRec.MARKEDONLY(TRUE);
      IF NOT lvReqLineRec.FINDFIRST THEN
        lvReqLineRec.MARKEDONLY(FALSE);

      lvReqLineRec.SETCURRENTKEY("Plant Request No.", "Line No.");
      lvReqLineRec.SETRANGE("Plant Request No.", IvarPlantRequestLineRec."Plant Request No.");
      lvReqLineRec.SETRANGE(Type, lvReqLineRec.Type::Plant);
      lvReqLineRec.SETRANGE("Plant Type", '');
      lvReqLineRec.SETRANGE("Item No.", '');
      lvReqLineRec.SETFILTER("Set Code", '<>%1', '');
      lvReqLineRec.SETFILTER(Quantity, '<>%1', 0);
      IF lvReqLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          lvOrgReqLineRec := lvReqLineRec;  //* Save field values

          lvSetLineRec.RESET;
          lvSetLineRec.SETRANGE("Set Code", lvReqLineRec."Set Code");
          lvSetLineRec.SETFILTER(Quantity, '<>%1', 0);
          IF lvSetLineRec.FINDSET THEN BEGIN
            lvNoOfLinesNeeded := lvSetLineRec.COUNT;
            IF lvNoOfLinesNeeded > 0 THEN BEGIN
              //Determine Line Spacing
              lvReqLineRec2.RESET;
              lvReqLineRec2.SETRANGE("Plant Request No.", lvReqLineRec."Plant Request No.");
              lvReqLineRec2.SETFILTER("Line No.", '>%1', lvReqLineRec."Line No.");
              IF lvReqLineRec2.FINDFIRST THEN
                lvLineSpacing := (lvReqLineRec2."Line No." - lvReqLineRec."Line No.") DIV (lvNoOfLinesNeeded)
              ELSE
                lvLineSpacing := 10000;
              IF lvLineSpacing <> 0 THEN
                lvNextLineNo := lvReqLineRec."Line No."
              ELSE BEGIN
                lvLineSpacing := 10000;
                lvReqLineRec2.SETRANGE("Line No.");  //* Reset filter
                lvReqLineRec2.FINDLAST;
                lvNextLineNo := lvReqLineRec2."Line No." + 10000;
              END;

              lvReqLineRec.DELETE;
              REPEAT
                lvSetLineRec.CALCFIELDS(Bulk);
                IF lvSetLineRec.Bulk OR (lvSetLineRec.Type = lvSetLineRec.Type::Item) THEN
                  lvQuantity := ROUND(lvSetLineRec.Quantity * lvOrgReqLineRec.Quantity, 0.00001)
                ELSE BEGIN
                  IF (lvSetLineRec."Plant No." <> '') THEN
                    lvQuantity := 1
                  ELSE
                    lvQuantity := ROUND(lvSetLineRec.Quantity * lvOrgReqLineRec.Quantity, 1);
                END;

                lvNewReqLineRec.INIT;
                lvNewReqLineRec."Plant Request No." := lvOrgReqLineRec."Plant Request No.";
                lvNewReqLineRec."Line No." := lvNextLineNo;
                lvNewReqLineRec."Set Code" := '';
                IF lvSetLineRec.Type <> lvSetLineRec.Type::Item THEN BEGIN
                  lvNewReqLineRec.Type := lvNewReqLineRec.Type::Plant;
                  lvNewReqLineRec."Plant Type" := lvSetLineRec."Plant Type";
                  lvNewReqLineRec."Plant No." := lvSetLineRec."Plant No.";
                  lvNewReqLineRec.GetPlantDescription();
                  //lvNewReqLineRec."Rate Code" := lvOrgReqLineRec."Rate Code";
                  IF lvOrgReqLineRec."Rate Code" <> '' THEN  //*23814
                    lvNewReqLineRec."Rate Code" := lvOrgReqLineRec."Rate Code"
                  ELSE BEGIN
                    IF PlantSetupRec."Rate Codes" AND (lvSetLineRec."Default Rate Code" <> '') AND
                       (ReqRec.Type <> ReqRec.Type::Removal) AND (NOT PlantToLoc.Depot)
                    THEN BEGIN
                      lvNewReqLineRec."Rate Code" := lvSetLineRec."Default Rate Code";
                      IF PlantRateCodeRec.CheckPlantRateCode(lvPlantReqRec."To Location", "Rate Code", FALSE, '') THEN
                        lvNewReqLineRec."Rate Code" := '';
                    END;
                  END;
                  lvNewReqLineRec."Expected return on" := lvOrgReqLineRec."Expected return on";
                END ELSE BEGIN
                  lvNewReqLineRec.Type := lvNewReqLineRec.Type::Item;
                  lvNewReqLineRec."Item No." := lvSetLineRec."Item No.";
                  lvNewReqLineRec.Description := lvSetLineRec.GetSetLineDescription();  // C007324.n
                  lvNewReqLineRec.GetDefaultLocationCode();  //DP00183
                END;
                lvNewReqLineRec.Element := lvOrgReqLineRec.Element;
                lvNewReqLineRec.Quantity := lvQuantity;
                lvNewReqLineRec."Comment CP Order" := lvOrgReqLineRec."Comment CP Order";
                lvNewReqLineRec.INSERT;
                lvNextLineNo := lvNextLineNo + lvLineSpacing;

              UNTIL lvSetLineRec.NEXT = 0;
            END;
          END;
          lvReqLineRec := lvOrgReqLineRec;
        UNTIL lvReqLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE PlantRequestTotalWeight@3() : Decimal;
    VAR
      lvReqLineRec@11012000 : Record 11020521;
      TotWeight@11012002 : Decimal;
    BEGIN
      IF "Plant Request No." = '' THEN
        EXIT(0);

      TotWeight := 0;
      lvReqLineRec.SETRANGE("Plant Request No.", "Plant Request No.");
      lvReqLineRec.SETRANGE(Type, lvReqLineRec.Type::Plant, lvReqLineRec.Type::Item);
      IF lvReqLineRec.FIND('-') THEN BEGIN
        REPEAT
          CASE lvReqLineRec.Type OF
            lvReqLineRec.Type::Plant:
              BEGIN
                IF PlantRec.GET(lvReqLineRec."Plant Type") THEN
                  TotWeight := ROUND(TotWeight + PlantRec.Weight * lvReqLineRec.Quantity);
              END;
            lvReqLineRec.Type::Item:
              BEGIN
                IF ItemRec.GET(lvReqLineRec."Item No.") THEN
                  TotWeight := ROUND(TotWeight + ItemRec.Weight * lvReqLineRec.Quantity);
              END;
          END;
        UNTIL lvReqLineRec.NEXT = 0;
      END;

      EXIT(TotWeight);
    END;

    PROCEDURE NotPostedPlantNeedCopiedQuan@1100525000(PlantNeedLocation@1100525000 : Code[20];PlantNeedLineNo@1100525001 : Integer;PlantCompany@1100409000 : Text[30]) CopiedQuantity : Decimal;
    VAR
      lvPlantReqRec@1100525003 : Record 11020520;
      lvPlantReqLineRec@1100525002 : Record 11020521;
    BEGIN
      CopiedQuantity := 0;
      IF (PlantNeedLocation = '') OR (PlantNeedLineNo = 0) THEN
        EXIT;
      IF (PlantCompany <> '') AND (PlantCompany <> COMPANYNAME) THEN BEGIN
        lvPlantReqRec.CHANGECOMPANY(PlantCompany);
        lvPlantReqLineRec.CHANGECOMPANY(PlantCompany);
      END;
      lvPlantReqLineRec.SETCURRENTKEY("Location Copied Need", "Line No. Copied Need");
      lvPlantReqLineRec.SETRANGE("Location Copied Need", PlantNeedLocation);
      lvPlantReqLineRec.SETRANGE("Line No. Copied Need", PlantNeedLineNo);
      IF lvPlantReqLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          IF lvPlantReqRec."No." <> lvPlantReqLineRec."Plant Request No." THEN BEGIN
            IF NOT lvPlantReqRec.GET(lvPlantReqLineRec."Plant Request No.") THEN
              lvPlantReqRec.Posted := TRUE;
          END;
          IF NOT lvPlantReqRec.Posted THEN
            CopiedQuantity := CopiedQuantity + lvPlantReqLineRec.Quantity;
        UNTIL lvPlantReqLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE GetUnitOfMeasureCode@1100530000() : Code[10];
    BEGIN
      CASE Type OF
        Type::Plant:
          BEGIN
            IF "Plant Type" <> '' THEN BEGIN
              IF PlantRec.GET("Plant Type") THEN
                EXIT(PlantRec."Unit of Measure");
            END ELSE BEGIN
              IF "Set Code" <> '' THEN BEGIN
                IF SetRec.GET("Set Code") THEN
                  EXIT(SetRec."Unit of Measure");
              END;
            END;
          END;
        Type::Item:
          BEGIN
            IF "Item No." <> '' THEN BEGIN
              IF ItemRec.GET("Item No.") THEN
                EXIT(ItemRec."Sales Unit of Measure");  //Sales Unit, see T11012557 (default unit item lines)
            END;
          END;
      END;
      EXIT('');
    END;

    PROCEDURE GetStockQuantity@1210190000() : Decimal;
    VAR
      PlantRequest@1210190000 : Record 11020520;
      PlantType@1210190003 : Record 11012551;
      PlantNumber@1210190001 : Record 11012552;
      Item@1210190004 : Record 27;
    BEGIN
      //mg, 10-03-11: M25116
      IF NOT PlantRequest.GET("Plant Request No.") THEN
        EXIT;
      IF PlantRequest.Type <> PlantRequest.Type::Arrival THEN
        EXIT;
      CASE Type OF
        Type::Plant:
          BEGIN
            IF "Plant No." = '' THEN BEGIN
              IF PlantType.GET("Plant Type") THEN BEGIN
                PlantType.CALCFIELDS("Quantity in Depot");
                EXIT(PlantType."Quantity in Depot");
              END;
            END ELSE BEGIN
              IF PlantNumber.GET("Plant Type", "Plant No.") THEN BEGIN
                PlantNumber.CALCFIELDS("Quantity in Stock");
                EXIT(PlantNumber."Quantity in Stock");
              END;
            END;
          END;
        Type::Item:
          BEGIN
            IF Item.GET("Item No.") THEN BEGIN
              Item.CALCFIELDS(Inventory);
              EXIT(Item.Inventory);
            END;
          END;
      END;
    END;

    PROCEDURE CalcPlantTypeAvailable@1100525005() : Decimal;
    VAR
      PlanningFutureDeficit@1100525000 : Codeunit 11012576;
    BEGIN
      EXIT(PlanningFutureDeficit.PlantTypeAvailableOnRequestLine(Rec));
    END;

    PROCEDURE GetItemInventoryLocation@1210190002() : Decimal;
    VAR
      PlantRequest@1210190000 : Record 11020520;
      Item@1210190004 : Record 27;
    BEGIN
      //*22501
      IF (Type <> Type::Item) OR ("Location Code" = '') THEN
        EXIT(0);
      IF NOT PlantRequest.GET("Plant Request No.") THEN
        EXIT(0);
      IF PlantRequest.Type <> PlantRequest.Type::Arrival THEN
        EXIT(0);
      IF NOT Item.GET("Item No.") THEN
        EXIT(0);

      Item.SETRANGE("Location Filter", "Location Code");
      Item.CALCFIELDS(Inventory);
      EXIT(Item.Inventory);
    END;

    PROCEDURE GetOpenPlantOrderLineQuantity@1210190012() retValue : Decimal;
    VAR
      PlantOrderLine@1210190000 : Record 11012557;
    BEGIN
      //mg, 10-03-11: M25116
      CASE Type OF
        Type::Plant:
          BEGIN
            PlantOrderLine.SETCURRENTKEY(Posted, "Plant Type");
            PlantOrderLine.SETRANGE(Posted, FALSE);
            PlantOrderLine.SETRANGE("Plant Type", "Plant Type");
            IF "Plant No." <> '' THEN
              PlantOrderLine.SETRANGE("No.", "Plant No.");
            PlantOrderLine.SETRANGE(Type, PlantOrderLine.Type::Plant);
            IF PlantOrderLine.FINDSET THEN
              REPEAT
                //mg.sc, 18-03-11: M26273
                PlantOrderLine.CALCFIELDS("Plant Order Type");
                CASE PlantOrderLine."Plant Order Type" OF
                  PlantOrderLine."Plant Order Type"::Arrival:
                    retValue += PlantOrderLine."Asked Quantity";
                  PlantOrderLine."Plant Order Type"::Removal:
                    retValue -= PlantOrderLine."Qty. to Receive";
                END;
                //mg.ec, 18-03-11: M26273
              UNTIL PlantOrderLine.NEXT = 0;
          END;
        Type::Item:
          BEGIN
            PlantOrderLine.SETCURRENTKEY("Item No.", Posted);
            PlantOrderLine.SETRANGE("Item No.", "Item No.");
            PlantOrderLine.SETRANGE(Posted, FALSE);
            PlantOrderLine.SETRANGE(Type, PlantOrderLine.Type::Item);
            IF PlantOrderLine.FINDSET THEN
              REPEAT
                //mg.sc, 18-03-11: M26273
                PlantOrderLine.CALCFIELDS("Plant Order Type");
                CASE PlantOrderLine."Plant Order Type" OF
                  PlantOrderLine."Plant Order Type"::Arrival:
                    retValue += PlantOrderLine."Asked Quantity";
                  PlantOrderLine."Plant Order Type"::Removal:
                    retValue -= PlantOrderLine."Qty. to Receive";
                END;
                //mg.ec, 18-03-11: M26273
              UNTIL PlantOrderLine.NEXT = 0;
          END;
      END;
    END;

    PROCEDURE DrillDownOpenPlantOrderLineQty@1210190003();
    VAR
      PlantOrderLine@1210190001 : Record 11012557;
    BEGIN
      //mg, 10-03-11: M25116
      CASE Type OF
        Type::Plant:
          BEGIN
            PlantOrderLine.SETCURRENTKEY(Posted, "Plant Type");
            PlantOrderLine.SETRANGE(Posted, FALSE);
            PlantOrderLine.SETRANGE("Plant Type", "Plant Type");
            IF "Plant No." <> '' THEN
              PlantOrderLine.SETRANGE("No.", "Plant No.");
            //mg.sc, 18-03-11: M26273
            PlantOrderLine.SETFILTER("Plant Order Status", '%1..%2',
              PlantOrderLine."Plant Order Status"::Open,
              PlantOrderLine."Plant Order Status"::Released);
            PlantOrderLine.SETFILTER("Plant Order Type", '%1|%2',
              PlantOrderLine."Plant Order Type"::Arrival,
              PlantOrderLine."Plant Order Type"::Removal);
            //mg.ec, 18-03-11: M26273
            PAGE.RUN(0, PlantOrderLine);
          END;
        Type::Item:
          BEGIN
            PlantOrderLine.SETCURRENTKEY("Item No.", Posted);
            PlantOrderLine.SETRANGE("Item No.", "Item No.");
            PlantOrderLine.SETRANGE(Posted, FALSE);
            //mg.sc, 18-03-11: M26273
            PlantOrderLine.SETFILTER("Plant Order Status", '%1..%2',
              PlantOrderLine."Plant Order Status"::Open,
              PlantOrderLine."Plant Order Status"::Released);
            PlantOrderLine.SETFILTER("Plant Order Type", '%1|%2',
              PlantOrderLine."Plant Order Type"::Arrival,
              PlantOrderLine."Plant Order Type"::Removal);
            //mg.ec, 18-03-11: M26273
            PAGE.RUN(PAGE::"Plant Order Item Line List", PlantOrderLine);
          END;
      END;
    END;

    PROCEDURE PlantTypeRentalRate@1100525001(StartDate@1100525002 : Date;VAR RentalRate@1100525001 : Decimal;VAR SalesRate@1100525006 : Decimal;VAR BuyBackRate@1100525005 : Decimal) RateFound : Boolean;
    VAR
      RentalRateRec@1100525000 : Record 11012567;
      PlantTypeRec@1100525003 : Record 11012551;
    BEGIN
      //M25337
      RentalRate := 0;
      BuyBackRate := 0;
      SalesRate := 0;
      RateFound := FALSE;
      ReqRec.GET("Plant Request No.");
      IF NOT ReqRec."Internet Order" THEN
        EXIT;
      IF PlantTypeRec.GET("Plant Type") THEN BEGIN
        IF PlantTypeRec."Rental Type" = PlantTypeRec."Rental Type"::Rental THEN BEGIN
          RentalRateRec.SETRANGE("Rental Type", RentalRateRec."Rental Type"::Rental);
          RentalRateRec.SETRANGE("Plant Type", "Plant Type");
          RentalRateRec.SETFILTER("Plant No.", '%1', '');
          RentalRateRec.SETFILTER("Starting Date", '..%1', StartDate);
          RentalRateRec.SETFILTER("Ending Date", '''''|%1..', StartDate);
          IF RentalRateRec.FINDLAST THEN BEGIN
            RentalRate := RentalRateRec."Rental Rate External (Days)";
            RateFound := TRUE;
          END;
        END ELSE BEGIN
          //* Sale/Buy Back or both (concerns sale/buy back-plant that will be rented sometimes)
          RentalRateRec.SETRANGE("Rental Type",RentalRateRec."Rental Type"::"Sales / Buy Back");
          RentalRateRec.SETRANGE("Plant Type", PlantTypeRec.Code);
          RentalRateRec.SETFILTER("Plant No.", '%1', '');
          RentalRateRec.SETFILTER("Starting Date", '..%1', StartDate);
          RentalRateRec.SETFILTER("Ending Date", '''''|%1..', StartDate);
          IF RentalRateRec.FINDLAST THEN BEGIN
              SalesRate := RentalRateRec."Sales Rate";
              BuyBackRate := RentalRateRec."Buy Back Rate";
          END ELSE BEGIN
              SalesRate := PlantTypeRec."Current Price";
          END;
          RateFound := TRUE;
        END;
      END;
    END;

    PROCEDURE ItemSalesRate@1210190001(StartDate@1100525001 : Date;VAR SalesRate@1100525000 : Decimal;VAR BuyBackRate@1100525003 : Decimal) RateFound : Boolean;
    VAR
      ItemRec@1100525004 : Record 27;
      ItemRateRec@1100525005 : Record 11020318;
    BEGIN
      //M25337
      SalesRate := 0;
      BuyBackRate := 0;
      RateFound := FALSE;
      ReqRec.GET("Plant Request No.");
      IF NOT ReqRec."Internet Order" THEN
        EXIT;
      IF ItemRec.GET("Item No.") THEN BEGIN
        IF ItemRec."Sales/Buy-Back Item (Plant)" THEN BEGIN
          ItemRateRec.SETRANGE("Item No.", "Item No.");
          ItemRateRec.SETFILTER("Starting Date", '..%1', StartDate);
          IF ItemRateRec.FINDLAST THEN BEGIN
            SalesRate := ItemRateRec."Sales Rate";
            BuyBackRate := ItemRateRec."Buy Back Rate";
            RateFound := TRUE;
          END;
        END ELSE BEGIN
          SalesRate := ItemRec."Unit Price";
          BuyBackRate := 0;
          RateFound := TRUE;
        END;
      END;
    END;

    PROCEDURE GetDefaultLocationCode@1100409000();
    VAR
      PlantLoc@1100409000 : Record 11012554;
      PlantLocCode@1100409001 : Code[20];
    BEGIN
      //DP00183 (T001007)
      ReqRec.GET("Plant Request No.");
      IF ReqRec.Type = ReqRec.Type::Removal THEN
        PlantLocCode := ReqRec."To Location"
      ELSE
        PlantLocCode := ReqRec."From Location";
      IF PlantLocCode <> '' THEN BEGIN
        PlantLoc.GET(PlantLocCode);
        IF PlantLoc."Location Code (Items)" <> '' THEN
          "Location Code" := PlantLoc."Location Code (Items)";
      END;
    END;

    PROCEDURE CheckPlantTypeBlocked@1100525003();
    VAR
      PlantType@1100525000 : Record 11012551;
      PlantLoc@1100525001 : Record 11012554;
    BEGIN
      //DP00485. (C009313)  Only check for transfer to a location, return to / transfer to depot is allowed
      PlantType.GET("Plant Type");
      IF NOT PlantType.Blocked THEN
        EXIT;
      ReqRec.GET("Plant Request No.");
      IF ReqRec.Type = ReqRec.Type::"Other Transfers" THEN BEGIN
        IF NOT PlantLoc.GET(ReqRec."To Location") THEN
          PlantLoc.Depot := FALSE;
      END;
      IF (ReqRec.Type = ReqRec.Type::Arrival) OR
         ((ReqRec.Type = ReqRec.Type::"Other Transfers") AND (NOT PlantLoc.Depot))
      THEN
        PlantType.TESTFIELD(Blocked, FALSE);
    END;

    PROCEDURE GetRentalRate@1100525002() : Decimal;
    VAR
      PlantRequest@1100525002 : Record 11020520;
      PlantType@1100525003 : Record 11012551;
      PlantLoc@1100525001 : Record 11012554;
      PlantRateCode@1210190001 : Record 11020502;
      SearchRate@1100525004 : Codeunit 11012567;
      Loc@1100525000 : Code[20];
      RateCode@1210190000 : Code[10];
    BEGIN
      //DP00898 (Function copied from 'Plant Order SF', modified for Request Lien)
      IF ("Plant Type" = '') OR (Type <> Type::Plant) THEN
        EXIT(0);
      IF NOT PlantRequest.GET("Plant Request No.") THEN
        EXIT(0);
      IF NOT PlantType.GET("Plant Type") THEN
        EXIT(0);
      IF PlantType."Rental Type" <> PlantType."Rental Type"::Rental THEN
        EXIT(0);

      RateCode := "Rate Code";
      CASE PlantRequest.Type OF
        PlantRequest.Type::Arrival:
          Loc := PlantRequest."To Location";
        PlantRequest.Type::Removal:
          Loc := PlantRequest."From Location";
        PlantRequest.Type::"Other Transfers":
          BEGIN
            IF PlantLoc.GET(PlantRequest."To Location") THEN BEGIN
              IF NOT PlantLoc.Depot THEN
                Loc := PlantRequest."To Location";
            END;
            IF Loc = '' THEN BEGIN
              IF PlantLoc.GET(PlantRequest."From Location") THEN BEGIN
                IF NOT PlantLoc.Depot THEN BEGIN
                  Loc := PlantRequest."From Location";
                  RateCode := "From Rate Code (Other Transf.)";
                END;
              END;
            END;
            IF Loc = '' THEN
              EXIT(0);
          END;
        ELSE
          EXIT(0);
      END;

      IF RateCode <> '' THEN BEGIN
        IF NOT PlantRateCode.CheckPlantRateCode(Loc, RateCode, FALSE, '') THEN
          EXIT(0);
      END;

      EXIT(SearchRate.Rate(Loc,"Plant Type","Plant No.",RateCode,PlantRequest."Transfer Date",0,0,''));
    END;

    PROCEDURE GetPlantCategoryDescription@1100525004() : Text;
    VAR
      PlantCategory@1100525000 : Record 11072663;
    BEGIN
      IF "Plant Type" <> '' THEN BEGIN
        CALCFIELDS("Plant Category");
        IF "Plant Category" <> '' THEN BEGIN
          IF PlantCategory.GET("Plant Category") THEN
            EXIT(PlantCategory.Description);
        END;
      END;
      EXIT('');
    END;

    BEGIN
    END.
  }
}

