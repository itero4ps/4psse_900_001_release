OBJECT Table 11020547 IMOS XML-Protocol
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=IMOS XML-Protocol;
    LookupPageID=Page11020546;
  }
  FIELDS
  {
    { 2   ;   ;Agreement Code      ;Code10        ;CaptionML=ENU=Agreement Code }
    { 5   ;   ;Description         ;Text30        ;CaptionML=ENU=Description }
    { 10  ;   ;Codeunit No.        ;Integer       ;TableRelation=Object.ID WHERE (Type=CONST(Codeunit),
                                                                                  ID=FIELD(Codeunit No.));
                                                   OnValidate=BEGIN
                                                                "Codeunit Name" := TranslateObject(Object.Type::Codeunit,"Codeunit No.")
                                                              END;

                                                   CaptionML=ENU=Codeunit No. }
    { 11  ;   ;Codeunit Name       ;Text30        ;CaptionML=ENU=Codeunit Name }
    { 12  ;   ;File Protocol Code  ;Code10        ;TableRelation="IMOS File Protocol";
                                                   CaptionML=ENU=Protocol Code }
    { 13  ;   ;Combine Documents   ;Boolean       ;CaptionML=ENU=Combine Documents }
    { 20  ;   ;Active              ;Boolean       ;CaptionML=ENU=Active }
    { 21  ;   ;XML Document Name   ;Text30        ;CaptionML=ENU=XML Document Name }
    { 22  ;   ;XML Document Namespace;Text30      ;CaptionML=ENU=XML Document Namespace }
    { 30  ;   ;Direction           ;Option        ;CaptionML=ENU=Direction;
                                                   OptionCaptionML=ENU=Outbound,Inbound;
                                                   OptionString=Outbound,Inbound }
    { 40  ;   ;Apply XML Schema    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Apply XML Schema" THEN
                                                                  TESTFIELD("XML Schema File Name");
                                                              END;

                                                   CaptionML=ENU=Apply XML Schema }
    { 45  ;   ;XML Schema File Name;Text250       ;CaptionML=ENU=XML Schema File Name }
    { 46  ;   ;XML Schema Target Namespace;Text250;CaptionML=ENU=XML Schema Target Namespace }
  }
  KEYS
  {
    {    ;Agreement Code                          ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Object@1000000001 : Record 2000000001;
      Text002@1000000000 : TextConst 'ENU="Using validation Schemas requires Microsoft XML Core Services  4.0 or later "';
      FileMgt@1100525000 : Codeunit 419;

    PROCEDURE AssistEdit@2(FieldNumber@1000000001 : Integer) : Boolean;
    VAR
      FileName@1000000000 : Text[250];
      FilterString@1100525001 : Text;
      FileManagement@1100525000 : Codeunit 419;
    BEGIN
      FilterString := FileManagement.GetToFilterText('', '.xsd');
      FileName := FileManagement.OpenFileDialog('', '', FilterString);
      IF FileName = '' THEN
        EXIT(FALSE);

      CASE FieldNumber OF
        FIELDNO("XML Schema File Name"):
          "XML Schema File Name" := FileName;
      END;
    END;

    PROCEDURE TranslateObject@1000000001(ObjectType@1000 : ' ,Table,Form,Report,Dataport,Codeunit';ObjectID@1001 : Integer) : Text[250];
    VAR
      Object@1002 : Record 2000000058;
    BEGIN
      IF Object.GET(ObjectType,ObjectID) THEN
        EXIT(Object."Object Caption");
    END;

    PROCEDURE ValidateAgreementXMLDocument@1100485000(PartnerAgreement@1000000000 : Record 11020547;XMLDOMDocument@1000000002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR ParseError@1000000003 : Text[1024]) : Boolean;
    VAR
      xmlschema@1000000001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDOMManagement4PS@1100525000 : Codeunit 11020220;
    BEGIN
      IF PartnerAgreement."Apply XML Schema" THEN //27-11-2015 PArameter not set in live situation at customer
        BEGIN
          IF FileExists(PartnerAgreement."XML Schema File Name") THEN
            BEGIN
              xmlschema := xmlschema.XmlDocument;
              IF GUIALLOWED THEN
                XMLDOMManagement4PS.LoadXMLFromClientFile(
                  xmlschema, PartnerAgreement."XML Schema File Name", FALSE)
              ELSE
                xmlschema.Load(PartnerAgreement."XML Schema File Name");
              EXIT(ValidateXMLDocument(XMLDOMDocument,xmlschema,PartnerAgreement."XML Schema Target Namespace",ParseError));
            END;
        END;
      EXIT(TRUE);
    END;

    PROCEDURE FileExists@1100525007(FileName@1100525000 : Text) : Boolean;
    BEGIN
      IF GUIALLOWED THEN
        EXIT(FileMgt.ClientFileExists(FileName))
      ELSE
        EXIT(EXISTS(FileName));
    END;

    PROCEDURE ValidateXMLDocument@10(xmldom@1000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";xmlschema@1000000000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";targetNamespace@1000000004 : Text[1024];VAR ParseError@1000000002 : Text[1024]) : Boolean;
    VAR
      Schema@1003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDOMDocument@1000000006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDomParseError@1000000001 : Text;
      SchemaCache@1000000003 : Text;
    BEGIN
      //**Validation is not used by current customer, when used this validation should be rewrittem for .NET
      //**it was originally written for Automation XMLDOM in CLassic CLient
      //**it is not clear how to reprogram it.
      {
      CREATE(SchemaCache, FALSE, TRUE);
      Schema := Schema.XmlDocument;
      xmlschema.Save(Schema);

      SchemaCache.add(targetNamespace,Schema);

      XMLDOMDocument := XMLDOMDocument.XmlDocument;
      XMLDOMDocument.async := FALSE;
      XMLDOMDocument.schemas := SchemaCache;
      XMLDOMDocument.Load(xmldom);
      IF (XMLDOMDocument.parseError.errorCode <> 0) THEN
        BEGIN
          XMLDomParseError := XMLDOMDocument.parseError;
          ParseError := XMLDomParseError.reason;
          EXIT(FALSE)
        END ELSE
          EXIT(TRUE)
      }
    END;

    BEGIN
    END.
  }
}

