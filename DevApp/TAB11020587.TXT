OBJECT Table 11020587 Loan Header
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnDelete=VAR
               LoanLine@1100525000 : Record 11020588;
               LoanGuarantee@1100528700 : Record 11229289;
             BEGIN
               IF "End Date" > TODAY THEN
                 IF NOT CONFIRM(Text001) THEN
                   ERROR(Text000);

               LoanLine.SETRANGE("Loan Header Code", Code);
               LoanLine.DELETEALL(TRUE);

               LoanGuarantee.SETRANGE("Loan Header Code", Code);
               LoanGuarantee.DELETEALL(TRUE);
             END;

    CaptionML=ENU=Loan Header;
    LookupPageID=Page11124871;
    DrillDownPageID=Page11124871;
  }
  FIELDS
  {
    { 10  ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 20  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 30  ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Lent,Borrowed,Derivative;
                                                   OptionString=Lent,Borrowed,Derivative }
    { 40  ;   ;Relation Type       ;Option        ;OnValidate=BEGIN
                                                                VALIDATE(Relation, '');
                                                              END;

                                                   CaptionML=ENU=Relation Type;
                                                   OptionCaptionML=ENU=Intern,Extern;
                                                   OptionString=Intern,Extern }
    { 50  ;   ;Relation            ;Text30        ;TableRelation=IF (Relation Type=CONST(Intern)) Company
                                                                 ELSE IF (Relation Type=CONST(Extern)) Contact;
                                                   OnValidate=BEGIN
                                                                IF Relation <> '' THEN
                                                                  VALIDATE("Project No.")
                                                                ELSE
                                                                  VALIDATE("Project No.", '');
                                                              END;

                                                   CaptionML=ENU=Relation }
    { 60  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                CheckPresentLines();
                                                                CheckAmount;
                                                              END;

                                                   CaptionML=ENU=Amount }
    { 70  ;   ;Start Date          ;Date          ;OnValidate=BEGIN
                                                                CalcEndDate;
                                                              END;

                                                   CaptionML=ENU=Start Date }
    { 80  ;   ;Term                ;DateFormula   ;OnValidate=BEGIN
                                                                CalcEndDate;
                                                              END;

                                                   CaptionML=ENU=Term }
    { 90  ;   ;Interest %          ;Decimal       ;OnValidate=BEGIN
                                                                CheckPresentLines();
                                                                SetInterestGroup("Interest %");
                                                              END;

                                                   CaptionML=ENU=Interest %;
                                                   DecimalPlaces=0:5 }
    { 100 ;   ;Interest Calculation;Option        ;OnValidate=BEGIN
                                                                CheckPresentLines();
                                                              END;

                                                   CaptionML=ENU=Interest Calculation;
                                                   OptionCaptionML=ENU=Act/365,Act/360,365/365;
                                                   OptionString=Act/365,Act/360,365/365 }
    { 110 ;   ;Installment Term    ;DateFormula   ;OnValidate=BEGIN
                                                                CheckPresentLines();
                                                              END;

                                                   CaptionML=ENU=Installment Term }
    { 115 ;   ;Installment Method  ;Option        ;OnValidate=BEGIN
                                                                CheckPresentLines();
                                                                IF FORMAT("Installment Term") <> '' THEN
                                                                  ERROR(Text004, FIELDCAPTION("Installment Term"));
                                                                IF "Installment Method" = "Installment Method"::"End Term" THEN
                                                                  FillEndTermFields;
                                                              END;

                                                   CaptionML=ENU=Installment Method;
                                                   OptionCaptionML=ENU=Lineair,End Term;
                                                   OptionString=Lineair,End Term }
    { 120 ;   ;Date First Installment;Date        ;OnValidate=BEGIN
                                                                CheckPresentLines();
                                                              END;

                                                   CaptionML=ENU=Date First Installment }
    { 130 ;   ;Interim Payments Possible;Boolean  ;CaptionML=ENU=Interim Payments Possible }
    { 135 ;   ;No of Installments Planned;Integer ;OnValidate=BEGIN
                                                                CalcInstallmentAmount;
                                                              END;

                                                   CaptionML=ENU=No of Installments Planned }
    { 137 ;   ;Installment Amount  ;Decimal       ;OnValidate=BEGIN
                                                                CheckPresentLines();
                                                              END;

                                                   CaptionML=ENU=Installment Amount }
    { 140 ;   ;Comments            ;Text100       ;CaptionML=ENU=Comments }
    { 150 ;   ;Interest % Group    ;Text10        ;CaptionML=ENU=Interest % Group;
                                                   Editable=No }
    { 160 ;   ;End Date            ;Date          ;CaptionML=ENU=End Date;
                                                   Editable=No }
    { 170 ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 180 ;   ;Interest Term       ;DateFormula   ;OnValidate=BEGIN
                                                                CheckPresentLines();
                                                              END;

                                                   CaptionML=ENU=Interest Term }
    { 190 ;   ;No of Interest Payments;Integer    ;FieldClass=FlowField;
                                                   CalcFormula=Count("Loan Line" WHERE (Loan Header Code=FIELD(Code),
                                                                                        Type=CONST(Interest)));
                                                   OnValidate=BEGIN
                                                                CheckPresentLines();
                                                              END;

                                                   CaptionML=ENU=No of Interest Payments;
                                                   Editable=No }
    { 200 ;   ;Amount Interest Payments;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Loan Line".Amount WHERE (Loan Header Code=FIELD(Code),
                                                                                             Type=CONST(Interest)));
                                                   OnValidate=BEGIN
                                                                CheckPresentLines();
                                                              END;

                                                   CaptionML=ENU=Amount Interest Payments;
                                                   Editable=No }
    { 210 ;   ;No of Installments  ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Loan Line" WHERE (Loan Header Code=FIELD(Code),
                                                                                        Type=FILTER(Installment|Last Installment)));
                                                   OnValidate=BEGIN
                                                                CheckPresentLines();
                                                              END;

                                                   CaptionML=ENU=No of Installments;
                                                   Editable=No }
    { 220 ;   ;Amount Installments ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Loan Line".Amount WHERE (Loan Header Code=FIELD(Code),
                                                                                             Type=FILTER(Installment|Last Installment)));
                                                   OnValidate=BEGIN
                                                                CheckPresentLines();
                                                              END;

                                                   CaptionML=ENU=Amount Installments;
                                                   Editable=No }
    { 230 ;   ;Amount Repayed Prognosis;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Loan Line".Amount WHERE (Loan Header Code=FIELD(Code),
                                                                                             Type=FILTER(Installment|Last Installment),
                                                                                             Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=Amount Repayed (Prognosis);
                                                   Editable=No }
    { 240 ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 250 ;   ;Type of Loan        ;Option        ;CaptionML=ENU=Type of Loan;
                                                   OptionCaptionML=ENU=Subordinated,Private,Financial Lease,Sundry;
                                                   OptionString=Subordinated,Private,Financial Lease,Sundry }
    { 260 ;   ;Project No.         ;Code20        ;OnValidate=VAR
                                                                Job@1100528700 : Record 11072003;
                                                                Company@1100528701 : Record 2000000006;
                                                              BEGIN
                                                                IF ("Relation Type" = "Relation Type"::Intern) AND ("Project No." <> '') THEN BEGIN
                                                                  TESTFIELD(Relation);
                                                                  Company.GET(Relation);
                                                                  Job.CHANGECOMPANY(Relation);
                                                                  Job.GET("Project No.");
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              Job@1100528701 : Record 11072003;
                                                              Company@1100528700 : Record 2000000006;
                                                            BEGIN
                                                              IF "Relation Type" = "Relation Type"::Intern THEN BEGIN
                                                                TESTFIELD(Relation);
                                                                Company.GET(Relation);
                                                                Job.CHANGECOMPANY(Relation);
                                                                IF "Project No." <> '' THEN
                                                                  IF Job.GET("Project No.") THEN;
                                                                IF PAGE.RUNMODAL(0, Job) = ACTION::LookupOK THEN
                                                                  VALIDATE("Project No.", Job."No.");
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Project No. }
    { 270 ;   ;Loan Agreement Present;Boolean     ;CaptionML=ENU=Loan Agreement Present }
    { 280 ;   ;Short Term          ;Boolean       ;CaptionML=ENU=Short Term }
    { 290 ;   ;Interest Type       ;Option        ;OnValidate=BEGIN
                                                                IF "Interest Type" = "Interest Type"::Fixed THEN
                                                                  "Basic Interest" := '';
                                                              END;

                                                   CaptionML=ENU=Interest Type;
                                                   OptionCaptionML=ENU=Fixed,Variable;
                                                   OptionString=Fixed,Variable }
    { 300 ;   ;Basic Interest      ;Code10        ;TableRelation="Basic Interest".Code;
                                                   OnValidate=BEGIN
                                                                IF "Interest Type" = "Interest Type"::Fixed THEN
                                                                  "Basic Interest" := '';
                                                              END;

                                                   CaptionML=ENU=Basic Interest }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100525000 : TextConst 'ENU=Process has been interrupted to respect the warning.';
      Text001@1100525001 : TextConst 'ENU=Ending date after today. Do you want to delete the loan including all lines?';
      Text002@1100525002 : TextConst 'ENU=Already loan lines present. Do you want to delete this and create lines again?';
      LoanLines@1100525003 : Record 11020588;
      LineNo@1100525004 : Integer;
      Text003@1100525005 : TextConst 'ENU=Already loan lines present. If you modify this field, perhaps de loan lines must be modified or created again. Continue?';
      Text004@1100525006 : TextConst 'ENU=%1 must be empty.';
      Text005@1100525007 : TextConst 'ENU=Total amount (%1) may not be less than repayment amount (2).';
      Text006@1100525008 : TextConst 'ENU=All not realized lines will be deleted. New lines will be created regarding the total repayment amount until now. Continue?';
      AfterIncInstallment@1100525009 : Boolean;
      Text007@1100525010 : TextConst 'ENU=Only 2 repayments allowed between 2 interest payments (between %1 ans %2).';
      Text008@1100525011 : TextConst 'ENU="Repayment must be on a date where also is a interest payment. Adjust interestterm, installment term ans/or date firstinstallment. "';
      GLSetup@1100525012 : Record 98;
      GLEntry@1100525014 : Record 17;
      GLAccount@1100525015 : Record 15;
      Text009@1100525016 : TextConst 'ENU=Realised Line may not be changed.';
      PayedOffAmountGL@1100525017 : Decimal;
      DataFromGL@1100525018 : Boolean;
      Text010@1100525019 : TextConst 'ENU=There are Repayments in the General Ledger present, initial generate is not possible.';
      Text011@1100525020 : TextConst 'ENU=Total amount from General Ledger (%1) may not differ from repayment amount total (2).';

    PROCEDURE SetInterestGroup@1100525000(InterestPerc@1100525000 : Decimal);
    VAR
      InterestRoundedDown@1100525001 : Integer;
      InterestRoundedUp@1100525002 : Integer;
    BEGIN
      InterestRoundedDown := ROUND(InterestPerc, 1, '<');
      InterestRoundedUp := ROUND(InterestPerc, 1, '>');
      IF InterestRoundedDown = InterestRoundedUp THEN
        InterestRoundedUp := InterestRoundedDown + 1;
      VALIDATE("Interest % Group", STRSUBSTNO('%1%2%3%4', InterestRoundedDown,
                                                          '-',
                                                          InterestRoundedUp,
                                                          '%'));
    END;

    PROCEDURE GenerateLines@1100525001();
    VAR
      InterestAmount@1100525002 : Decimal;
      CurrentDayDate@1100525005 : Date;
      NextInstallmentDate@1100525004 : Date;
      NextInterestPaymentDate@1100525007 : Date;
      PrevInterestPaymentDate@1100525008 : Date;
      Days@1100525010 : Integer;
      AmountForIntPay@1100525011 : Decimal;
      InstallmentAmount@1100525001 : Decimal;
    BEGIN
      DataFromGL := LoanAmountGL(Amount);
      IF DataFromGL THEN
        PayedOffAmountGL := LoanRepaymentGL;

      TESTFIELD(Amount);
      TESTFIELD("Start Date");
      TESTFIELD(Term);
      TESTFIELD("Date First Installment");
      TESTFIELD("Interest Term");
      TESTFIELD("Installment Amount");
      MODIFY;
      IF AfterIncInstallment THEN
        CheckPresentLinesGenAfterInst
      ELSE
        CheckPresentLinesGenerate;

      InitLoanLine;

      SetStartingValues(CurrentDayDate,
                        NextInstallmentDate,
                        InstallmentAmount,
                        NextInterestPaymentDate,
                        PrevInterestPaymentDate,
                        AmountForIntPay);

      REPEAT
        IF CurrentDayDate = NextInterestPaymentDate THEN BEGIN
          CalcInterestAmount(CurrentDayDate,
                             PrevInterestPaymentDate,
                             InterestAmount,
                             AmountForIntPay,
                             NextInterestPaymentDate);
        END;
        IF (CurrentDayDate = NextInstallmentDate) AND (AmountForIntPay > 0) THEN BEGIN
          IF AmountForIntPay < InstallmentAmount THEN
            InstallmentAmount := AmountForIntPay;
          InsertLoanLine(InstallmentAmount, CurrentDayDate, 0, 0, 0);
          NextInstallmentDate := CALCDATE("Installment Term", CurrentDayDate);
          AmountForIntPay := AmountForIntPay - InstallmentAmount;
        END;
        CurrentDayDate := CALCDATE('<1D>', CurrentDayDate);  //db, 16-03-11
      // UNTIL CurrentDayDate = "End Date";  M23718 o
      UNTIL (CurrentDayDate = "End Date") OR (AmountForIntPay <= 0);

      IF AmountForIntPay > 0 THEN BEGIN
        Days := CurrentDayDate - PrevInterestPaymentDate;
        InterestAmount := AmountForIntPay * "Interest %" / 100 * CalcFactorInterestPayment(Days, CurrentDayDate);
        InsertLoanLine(InterestAmount, CurrentDayDate, AmountForIntPay, 1, 0);
        InsertLoanLine(AmountForIntPay, CurrentDayDate, 0, 2, 0);
      END;
    END;

    PROCEDURE CheckPresentLinesGenerate@1100525005();
    BEGIN
      LoanLines.RESET;
      LoanLines.SETRANGE("Loan Header Code", Code);
      LoanLines.SETRANGE(Realised, TRUE);
      IF NOT LoanLines.ISEMPTY THEN
        ERROR(Text009);

      IF LoanRepaymentGL <> 0 THEN
        ERROR(Text010);

      LoanLines.RESET;
      LoanLines.SETRANGE("Loan Header Code", Code);
      IF NOT LoanLines.ISEMPTY THEN BEGIN
        IF NOT CONFIRM(Text002) THEN
          ERROR(Text000);
        LoanLines.DELETEALL(TRUE);
      END;
      CLEAR(LoanLines);
    END;

    PROCEDURE CheckPresentLinesGenAfterInst@1100525015();
    VAR
      TotalAmount@1100525000 : Decimal;
    BEGIN
      TotalAmount := 0;
      LoanLines.RESET;
      LoanLines.SETCURRENTKEY("Loan Header Code", Type, Realised);
      LoanLines.SETRANGE("Loan Header Code", Code);
      LoanLines.SETRANGE(Realised, TRUE);
      LoanLines.SETFILTER(Type, '<>%1', LoanLines.Type::Interest);
      IF NOT LoanLines.ISEMPTY THEN BEGIN
        LoanLines.CALCSUMS(Amount);
        TotalAmount := LoanLines.Amount;
      END;

      IF LoanRepaymentGL <> TotalAmount THEN
        ERROR(Text011, LoanRepaymentGL, TotalAmount);

      IF NOT CONFIRM(Text006) THEN
        ERROR(Text000);
      LoanLines.RESET;
      LoanLines.SETRANGE("Loan Header Code", Code);
      LoanLines.SETRANGE(Realised, FALSE);
      IF NOT LoanLines.ISEMPTY THEN
        LoanLines.DELETEALL(TRUE);

      CLEAR(LoanLines);
    END;

    PROCEDURE CalcFactorInterestPayment@1100525009(Days@1100525000 : Integer;CurrentDate@1100525001 : Date) : Decimal;
    VAR
      Factor@1100525002 : Decimal;
    BEGIN
      CASE "Interest Calculation" OF
        "Interest Calculation"::"Act/365":
          BEGIN
            IF IsLeapYear(CurrentDate) THEN
              Factor := Days / 365
            ELSE
              Factor := Days / 365;
          END;
        "Interest Calculation"::"Act/360":
          BEGIN
            IF IsLeapYear(CurrentDate) THEN
              Factor := Days / 360
            ELSE
              Factor := Days / 360;
          END;
        "Interest Calculation"::"365/365":
          BEGIN
            IF Days = 366 THEN Days := 365;
            Factor := Days / 365;
          END;
      END;
      EXIT(Factor);
    END;

    PROCEDURE IsLeapYear@1100525002(Date@1100525000 : Date) : Boolean;
    VAR
      DatePrevYear@1100525001 : Date;
    BEGIN
      DatePrevYear := CALCDATE('<-1Y>', Date);  //db, 16-03-11 //call 30615
      EXIT(Date - DatePrevYear = 366);
    END;

    PROCEDURE InitLoanLine@1100525006();
    VAR
      CurLoanLine@1100525000 : Record 11020588;
    BEGIN
      LoanLines.INIT;
      LoanLines.VALIDATE("Loan Header Code", Code);
      LineNo := 10000;

      IF AfterIncInstallment THEN BEGIN
        CurLoanLine.RESET;
        CurLoanLine.SETRANGE("Loan Header Code", Code);
        IF CurLoanLine.FINDLAST THEN
          LineNo := CurLoanLine."Line No." + 10000;
      END;
    END;

    PROCEDURE InsertLoanLine@1100525004(Amount@1100525000 : Decimal;CurrentDayDate@1100525001 : Date;AmountForIntPay@1100525002 : Decimal;Type@1100525004 : 'Installment,Interest,Last Installment';AmountForIntPayII@1100525005 : Decimal);
    VAR
      LoanLineInterest@1100525003 : Record 11020588;
    BEGIN
      LoanLines.VALIDATE("Line No.", LineNo);
      LineNo += 10000;
      LoanLines.VALIDATE(Type, Type);
      LoanLines.VALIDATE(Amount, Amount);
      LoanLines.VALIDATE(Date, CurrentDayDate);
      IF Type <> Type::Interest THEN BEGIN
        LoanLineInterest.SETCURRENTKEY("Loan Header Code", Type);
        LoanLineInterest.SETRANGE("Loan Header Code", LoanLines."Loan Header Code");
        LoanLineInterest.SETRANGE(Type, LoanLineInterest.Type::Interest);
        LoanLineInterest.SETRANGE(Date, LoanLines.Date);
        IF LoanLineInterest.ISEMPTY THEN
          ERROR(Text008);
      END;
      LoanLines.VALIDATE(Type, Type);
      LoanLines.VALIDATE("Used Amount For Calculation", AmountForIntPay);
      LoanLines.VALIDATE("Used Amount For Calculation II", AmountForIntPayII);
      LoanLines.INSERT(TRUE);
    END;

    PROCEDURE CalcInstallmentAmount@1100525007();
    BEGIN
      CheckPresentLines();
      IF "No of Installments Planned" = 0 THEN
        VALIDATE("Installment Amount", Amount)
      ELSE
        VALIDATE("Installment Amount", Amount / "No of Installments Planned");
    END;

    PROCEDURE CalcEndDate@1100525008();
    BEGIN
      CheckPresentLines();
      IF (FORMAT(Term) <> '') AND ("Start Date" <> 0D) THEN
        VALIDATE("End Date", CALCDATE(Term, "Start Date"))
      ELSE
        VALIDATE("End Date", 0D);
    END;

    PROCEDURE CheckPresentLines@1100525003();
    BEGIN
      LoanLines.RESET;
      LoanLines.SETRANGE("Loan Header Code", Code);
      IF NOT LoanLines.ISEMPTY THEN
        IF NOT CONFIRM(Text003) THEN
          ERROR(Text000);

      CLEAR(LoanLines);
    END;

    PROCEDURE FillEndTermFields@1100525010();
    BEGIN
      VALIDATE("Date First Installment", "End Date");
      VALIDATE("No of Installments Planned", 1);
      VALIDATE("Installment Amount", Amount);
    END;

    PROCEDURE CheckAmount@1100525011();
    BEGIN
      CALCFIELDS("Amount Installments");
      IF Amount < "Amount Installments" THEN
        ERROR(Text005, Amount, "Amount Installments");
    END;

    PROCEDURE GenerateLinesAfterInstallment@1100525012();
    BEGIN
      TESTFIELD("Interim Payments Possible");

      AfterIncInstallment := TRUE;

      GenerateLines;

      AfterIncInstallment := FALSE;
    END;

    PROCEDURE SetStartingValues@1100525048(VAR CurrentDayDate@1100525000 : Date;VAR NextInstallmentDate@1100525001 : Date;VAR InstallmentAmount@1100525002 : Decimal;VAR NextInterestPaymentDate@1100525003 : Date;VAR PrevInterestPaymentDate@1100525004 : Date;VAR AmountForIntPay@1100525005 : Decimal);
    BEGIN
      CurrentDayDate := "Start Date";

      IF AfterIncInstallment THEN CurrentDayDate := GetNewStartDateCalc;

      IF FORMAT("Installment Term") = '' THEN BEGIN
        NextInstallmentDate := "End Date";
      END ELSE BEGIN
        NextInstallmentDate := CALCDATE("Installment Term", CurrentDayDate);
        IF NextInstallmentDate < "Date First Installment" THEN
          //NextInstallmentDate := CALCDATE("Installment Term", "Date First Installment"); //**4PS.o
          NextInstallmentDate := "Date First Installment";                                 //**4PS.n
      END;

      IF AfterIncInstallment THEN
        CalcRemainingInstallAmounts(InstallmentAmount, AmountForIntPay)
      ELSE BEGIN
        InstallmentAmount := "Installment Amount";
        AmountForIntPay := Amount;
      END;

      NextInterestPaymentDate := CALCDATE("Interest Term", CurrentDayDate);
      PrevInterestPaymentDate := CurrentDayDate;
    END;

    PROCEDURE GetNewStartDateCalc@1100525014() : Date;
    VAR
      CurLoanLine@1100525000 : Record 11020588;
    BEGIN
      CurLoanLine.RESET;
      CurLoanLine.SETCURRENTKEY("Loan Header Code", Type);
      CurLoanLine.SETRANGE("Loan Header Code", Code);
      CurLoanLine.SETRANGE(Type, CurLoanLine.Type::Interest);
      IF CurLoanLine.FINDLAST THEN
        EXIT(CurLoanLine.Date)
      ELSE
        EXIT("Start Date");
    END;

    PROCEDURE CalcRemainingInstallAmounts@1100525029(VAR InstallmentAmount@1100525002 : Decimal;VAR AmountForIntPay@1100525003 : Decimal);
    VAR
      RemainingNoOfInstallments@1100525000 : Integer;
      RemainingAmountInstallments@1100525001 : Decimal;
    BEGIN
      CALCFIELDS("Amount Installments", "No of Installments");
      RemainingNoOfInstallments := "No of Installments Planned" - "No of Installments";
      RemainingAmountInstallments := Amount - "Amount Installments";
      AmountForIntPay := RemainingAmountInstallments;
      InstallmentAmount := "Installment Amount"; //M23718  n
      //M23718  so
      //Because field "No Of Installments Planned" apparently not be filled.
      //IF RemainingNoOfInstallments > 1 THEN BEGIN;
      //  InstallmentAmount := RemainingAmountInstallments / RemainingNoOfInstallments;
      //END ELSE BEGIN;
      //  InstallmentAmount := RemainingAmountInstallments;
      //END;
      //M23718  so
    END;

    PROCEDURE CalcInterestAmount@1100525013(VAR CurrentDayDate@1100525001 : Date;VAR PrevInterestPaymentDate@1100525002 : Date;VAR InterestAmount@1100525003 : Decimal;VAR AmountForIntPay@1100525004 : Decimal;VAR NextInterestPaymentDate@1100525005 : Date);
    VAR
      Days@1100525000 : Integer;
      LoanLineInstallment@1100525006 : Record 11020588;
      AmountForIntPayI@1100525007 : Decimal;
      AmountForIntPayII@1100525008 : Decimal;
    BEGIN
      LoanLineInstallment.RESET;
      LoanLineInstallment.SETCURRENTKEY("Loan Header Code", Type);
      LoanLineInstallment.SETRANGE("Loan Header Code", Code);
      LoanLineInstallment.SETRANGE(Type, LoanLineInstallment.Type::Installment);
      LoanLineInstallment.SETRANGE(Date, PrevInterestPaymentDate, CurrentDayDate);
      CASE LoanLineInstallment.COUNT OF
        0: BEGIN
             Days := CurrentDayDate - PrevInterestPaymentDate;
             InterestAmount := AmountForIntPay * "Interest %" / 100 * CalcFactorInterestPayment(Days, CurrentDayDate);
             InsertLoanLine(InterestAmount, CurrentDayDate, AmountForIntPay, 1, 0);
             NextInterestPaymentDate := CALCDATE("Interest Term", CurrentDayDate);
             PrevInterestPaymentDate := CurrentDayDate;
           END;
        1: BEGIN
             Days := CurrentDayDate - PrevInterestPaymentDate;
             InterestAmount := AmountForIntPay * "Interest %" / 100 * CalcFactorInterestPayment(Days, CurrentDayDate);
             InsertLoanLine(InterestAmount, CurrentDayDate, AmountForIntPay, 1, 0);
             NextInterestPaymentDate := CALCDATE("Interest Term", CurrentDayDate);
             PrevInterestPaymentDate := CurrentDayDate;
           END;
        2: BEGIN
             LoanLineInstallment.FINDLAST;
             Days := LoanLineInstallment.Date - PrevInterestPaymentDate;
             AmountForIntPayI := AmountForIntPay + LoanLineInstallment.Amount;
             InterestAmount := (AmountForIntPayI) *
                               "Interest %" / 100 *
                               CalcFactorInterestPayment(Days, LoanLineInstallment.Date);
             Days := CurrentDayDate - LoanLineInstallment.Date;
             InterestAmount += AmountForIntPay * "Interest %" / 100 * CalcFactorInterestPayment(Days, CurrentDayDate);
             AmountForIntPayII := AmountForIntPay;
             InsertLoanLine(InterestAmount, CurrentDayDate, AmountForIntPayI, 1, AmountForIntPayII);
             NextInterestPaymentDate := CALCDATE("Interest Term", CurrentDayDate);
             PrevInterestPaymentDate := CurrentDayDate;
           END;
        ELSE
          ERROR(Text007, PrevInterestPaymentDate, CurrentDayDate);
      END;
    END;

    PROCEDURE LoanAmountGL@1100525016(VAR LoanAmount@1100525001 : Decimal) : Boolean;
    BEGIN
      GLSetup.GET;
      LoanAmount := Amount;

      IF (GLSetup."Dimension Loans" <> '') AND (GLSetup."Cost Object Loans" <> '') THEN BEGIN
        LoanAmount := 0;

        IF Code = '' THEN
          EXIT;
        GLAccount.SETRANGE("Income/Balance", GLAccount."Income/Balance"::"Balance Sheet");
        IF GLAccount.FINDSET THEN BEGIN
          REPEAT
            GLEntry.SETCURRENTKEY("G/L Account No.","Global Dimension 1 Code","Global Dimension 2 Code","Posting Date");
            GLEntry.SETRANGE("G/L Account No.", GLAccount."No.");
            GLEntry.SETRANGE("Global Dimension 2 Code", GLSetup."Cost Object Loans");
            IF GLEntry.FINDSET THEN BEGIN
              REPEAT
                IF IsDimensionCodeValueInDimensionSet(GLEntry."Dimension Set ID", GLSetup."Dimension Loans", Code) THEN
                  LoanAmount := LoanAmount + GLEntry.Amount;
              UNTIL GLEntry.NEXT = 0;
            END;
          UNTIL GLAccount.NEXT = 0;
        END;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE LoanRepaymentGL@1100525019() PayOfAmount : Decimal;
    VAR
      LoanAmount@1100525002 : Decimal;
    BEGIN
      GLSetup.GET;
      LoanAmount := 0;
      PayOfAmount := 0;
      IF (GLSetup."Dimension Loans" <> '') AND (GLSetup."Cost Object Loans" <> '') THEN BEGIN
        IF Code = '' THEN
          EXIT;
        GLAccount.SETRANGE("Income/Balance", GLAccount."Income/Balance"::"Balance Sheet");
        IF GLAccount.FINDSET THEN BEGIN
          REPEAT
            GLEntry.SETCURRENTKEY("G/L Account No.","Global Dimension 1 Code","Global Dimension 2 Code","Posting Date");
            GLEntry.SETRANGE("G/L Account No.", GLAccount."No.");
            IF GLEntry.FINDSET THEN BEGIN
              REPEAT
                IF IsDimensionCodeValueInDimensionSet(GLEntry."Dimension Set ID", GLSetup."Dimension Loans", Code) THEN BEGIN
                  IF GLEntry."Global Dimension 2 Code" = GLSetup."Cost Object Loans" THEN
                    LoanAmount := LoanAmount + GLEntry.Amount;
                  PayOfAmount := PayOfAmount + GLEntry.Amount;
                END;
              UNTIL GLEntry.NEXT = 0;
            END;
          UNTIL GLAccount.NEXT = 0;
        END;
        PayOfAmount := PayOfAmount - LoanAmount;
      END;
    END;

    LOCAL PROCEDURE IsDimensionCodeValueInDimensionSet@1100528702(DimensionSetID@1100528702 : Integer;DimensionCode@1100528701 : Code[20];DimensionValueCode@1100528700 : Code[20]) : Boolean;
    VAR
      DimensionSetEntry@1100528703 : Record 480;
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Set ID", DimensionSetID);
      DimensionSetEntry.SETRANGE("Dimension Code", DimensionCode);
      DimensionSetEntry.SETRANGE("Dimension Value Code", DimensionValueCode);
      EXIT(NOT DimensionSetEntry.ISEMPTY);
    END;

    BEGIN
    END.
  }
}

