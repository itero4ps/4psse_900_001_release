OBJECT Table 11020631 Project Forecast Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CheckForecastFixed(TRUE);
               UpdateLog;
             END;

    OnModify=BEGIN
               CheckForecastFixed(TRUE);
               UpdateLog;
             END;

    OnDelete=VAR
               ProjectForecastInPeriod@1100525000 : Record 11020632;
             BEGIN
               CheckForecastFixed(TRUE);
               UpdateLog;

               ProjectForecastInPeriod.SETRANGE("Project No.", "Project No.");
               ProjectForecastInPeriod.SETRANGE("Forecast Date", "Forecast Date");
               ProjectForecastInPeriod.SETRANGE("Cost Type", "Cost Type");
               ProjectForecastInPeriod.SETRANGE(Element, Element);
               ProjectForecastInPeriod.SETRANGE("Cost Object", "Cost Object");
               ProjectForecastInPeriod.DELETEALL(TRUE);
             END;

    OnRename=BEGIN
               ERROR(Text002);
             END;

    CaptionML=ENU=Project Forecast Line;
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=ENU=Project No.;
                                                   NotBlank=Yes }
    { 20  ;   ;Forecast Date       ;Date          ;CaptionML=ENU=Forecast Date }
    { 30  ;   ;Cost Type           ;Option        ;CaptionML=ENU=Cost Type;
                                                   OptionCaptionML=ENU=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                   Editable=No }
    { 40  ;   ;Cost Object         ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Project Filter=FIELD(Project No.),
                                                                                               Cost Type=FIELD(Cost Type));
                                                   OnValidate=VAR
                                                                DimVal@1100525001 : Record 349;
                                                                DimMgt@1100525000 : Codeunit 408;
                                                              BEGIN
                                                                IF ("Cost Object" <> '') AND ("Cost Object" <> xRec."Cost Object") THEN BEGIN
                                                                  DimMgt.GetDimValueRec(2, "Cost Object", DimVal, TRUE, '');
                                                                  "Cost Type" := DimVal."Cost Type";
                                                                  IF "Cost Type" = "Cost Type"::Labor THEN
                                                                    VALIDATE("Rate Code", DimVal."Rate Code");
                                                                END;

                                                                IF CurrFieldNo > 0 THEN
                                                                  GetCostObjectDescription;
                                                              END;

                                                   CaptionML=ENU=Cost Object }
    { 50  ;   ;Cost Object Description;Text50     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Dimension Value".Name WHERE (Code=FIELD(Cost Object),
                                                                                                    Global Dimension No.=CONST(2)));
                                                   CaptionML=ENU=Cost Object Description;
                                                   Editable=No }
    { 60  ;   ;Project Cost Object Name;Text50    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project - Cost Object".Name WHERE (Project No.=FIELD(Project No.),
                                                                                                          Cost Object=FIELD(Cost Object)));
                                                   CaptionML=ENU=Project Cost Object Name;
                                                   Editable=No }
    { 80  ;   ;Element             ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=VAR
                                                                ProjElem@1100525001 : Record 11012010;
                                                                ElementFormat@1100525000 : Codeunit 11012022;
                                                              BEGIN
                                                                ElementFormat.FormatElem(Element,2,'');
                                                                IF Element <> '' THEN
                                                                  ProjElem.GET("Project No.",Element);

                                                                IF CurrFieldNo > 0 THEN
                                                                  CALCFIELDS("Element Description");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 85  ;   ;Element Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Element".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                           Element=FIELD(Element)));
                                                   CaptionML=ENU=Element Description;
                                                   Editable=No }
    { 100 ;   ;Period Type Filter  ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Period Type;
                                                   OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                                                   OptionString=Day,Week,Month,Quarter,Year,Accounting Period }
    { 200 ;   ;Budget              ;Decimal       ;CaptionML=ENU=Budget;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 210 ;   ;Budget Hours        ;Decimal       ;CaptionML=ENU=Budget Hours;
                                                   Editable=No }
    { 220 ;   ;Actual Costs        ;Decimal       ;CaptionML=ENU=Actual Costs;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 230 ;   ;Actual Hours        ;Decimal       ;CaptionML=ENU=Actual Hours;
                                                   Editable=No }
    { 240 ;   ;Open (Purchase)     ;Decimal       ;CaptionML=ENU=Open (Purchase);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 250 ;   ;Received/Not Invoiced;Decimal      ;CaptionML=ENU=Received/Not Invoiced;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 260 ;   ;Open Ovh. Surch. (Purchase);Decimal;CaptionML=ENU=Open Ovh. Surch. (Purchase);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 262 ;   ;Open (Inventory)    ;Decimal       ;CaptionML=ENU=Open (Inventory);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 263 ;   ;Open Ovh. Surch. (Inventory);Decimal;
                                                   CaptionML=ENU=Open Ovh. Surch. (Inventory);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 270 ;   ;Total Open Purchase ;Decimal       ;OnValidate=BEGIN
                                                                CalcOpenPurchPlusForecast;
                                                              END;

                                                   CaptionML=ENU=Total Open Purchase;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 275 ;   ;Open Hours          ;Decimal       ;CaptionML=ENU=Open Hours;
                                                   Editable=No }
    { 280 ;   ;Total Cost          ;Decimal       ;OnValidate=BEGIN
                                                                CalcForecastTotalCost;
                                                              END;

                                                   CaptionML=ENU=Total Cost;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 290 ;   ;Total Hours         ;Decimal       ;CaptionML=ENU=Total Hours;
                                                   Editable=No }
    { 300 ;   ;Allowed             ;Decimal       ;CaptionML=ENU=Allowed;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 310 ;   ;Allowed Hours       ;Decimal       ;CaptionML=ENU=Allowed Hours;
                                                   Editable=No }
    { 320 ;   ;Prognosis           ;Decimal       ;CaptionML=ENU=Prognosis;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 330 ;   ;Prognosis Hours     ;Decimal       ;CaptionML=ENU=Prognosis Hours;
                                                   Editable=No }
    { 340 ;   ;Invoiced            ;Decimal       ;CaptionML=ENU=Invoiced;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1000;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                CalcAmount;
                                                                CheckSurchargesCalculated;
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 1005;   ;Amount incl. Surcharge;Decimal     ;OnValidate=BEGIN
                                                                Amount := "Amount incl. Surcharge" - "Overhead Surcharge Forecast";

                                                                CalcForecastTotalCost;
                                                                CalcOpenPurchPlusForecast;
                                                              END;

                                                   CaptionML=ENU=Amount incl. Surcharge;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1010;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Amount incl. Surcharge", Amount + "Overhead Surcharge Forecast");
                                                                CheckSurchargesCalculated;
                                                              END;

                                                   CaptionML=ENU=Amount;
                                                   AutoFormatType=1 }
    { 1015;   ;Overhead Surcharge Forecast;Decimal;CaptionML=ENU=Overhead Surcharge Forecast;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1020;   ;Best Case           ;Decimal       ;OnValidate=BEGIN
                                                                //*30275.o   Property: MaxValue = 0
                                                                //*30275.sn
                                                                IF "Cost Type" <> "Cost Type"::Revenue THEN BEGIN
                                                                  IF "Best Case" > 0 THEN
                                                                    FIELDERROR("Best Case", Text004);
                                                                END ELSE BEGIN
                                                                  IF "Best Case" < 0 THEN
                                                                    FIELDERROR("Best Case", Text005);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Best Case;
                                                   AutoFormatType=1 }
    { 1030;   ;Worst Case          ;Decimal       ;OnValidate=BEGIN
                                                                //*30275.o   Property: MinValue = 0
                                                                //*30275.sn
                                                                IF "Cost Type" <> "Cost Type"::Revenue THEN BEGIN
                                                                  IF "Worst Case" < 0 THEN
                                                                    FIELDERROR("Worst Case", Text005);
                                                                END ELSE BEGIN
                                                                  IF "Worst Case" > 0 THEN
                                                                    FIELDERROR("Worst Case", Text004);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Worst Case;
                                                   AutoFormatType=1 }
    { 1040;   ;Rate Code           ;Code10        ;TableRelation="Budget Rate".Code WHERE (Project Filter=FIELD(Project No.));
                                                   OnValidate=VAR
                                                                BudgetRateManagement@1100528600 : Codeunit 11012358;
                                                                Job@1100528601 : Record 11072003;
                                                                BudgetRateFoundAt@1100528602 : Text[250];
                                                              BEGIN
                                                                TESTFIELD("Cost Type", "Cost Type"::Labor);
                                                                Job.GET("Project No.");
                                                                Rate := BudgetRateManagement.GetBudgetRate(
                                                                  0, "Project No.", '', '', Job."Global Dimension 1 Code", "Rate Code", "Forecast Date", BudgetRateFoundAt);
                                                                CalcAmount;
                                                                UpdateRateInForecastPeriod(FIELDNO("Rate Code"));
                                                                CheckSurchargesCalculated;
                                                              END;

                                                   CaptionML=ENU=Rate Code }
    { 1050;   ;Rate                ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO(Rate) THEN
                                                                  TESTFIELD("Rate Code", '');

                                                                CalcAmount;
                                                                UpdateRateInForecastPeriod(FIELDNO(Rate));
                                                                CheckSurchargesCalculated;
                                                              END;

                                                   CaptionML=ENU=Rate;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 2000;   ;Forecast Total Cost ;Decimal       ;CaptionML=ENU=Forecast Total Cost;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2010;   ;Total Open Purch.plus Forecast;Decimal;
                                                   CaptionML=ENU=Total Open Purchase Plus Forecast;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2020;   ;Total Distributed Forecast Amt;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Project Forecast in Period".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                                              Forecast Date=FIELD(Forecast Date),
                                                                                                              Cost Type=FIELD(Cost Type),
                                                                                                              Cost Object=FIELD(Cost Object),
                                                                                                              Element=FIELD(Element)));
                                                   CaptionML=ENU=Total Distributed Forecast Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
  }
  KEYS
  {
    {    ;Project No.,Forecast Date,Cost Type,Element,Cost Object;
                                                   SumIndexFields=Budget,Budget Hours,Actual Costs,Actual Hours,Open (Purchase),Received/Not Invoiced,Open Ovh. Surch. (Purchase),Total Open Purchase,Total Cost,Total Hours;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Project No.,Cost Type,Forecast Date     ;SumIndexFields=Allowed,Allowed Hours,Prognosis,Prognosis Hours,Quantity,Amount incl. Surcharge,Amount,Overhead Surcharge Forecast,Best Case,Worst Case,Forecast Total Cost,Total Open Purch.plus Forecast }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100525000 : TextConst 'ENU=Forecast is frozen, Changes not allowed.';
      SkipFixedCheck@1100525001 : Boolean;
      Text002@1100525002 : TextConst 'ENU=Renaming is not allowed.';
      Text003@1100525003 : TextConst 'ENU=Date must be after %1';
      Text004@1210190000 : TextConst 'ENU=must be negative (or zero)';
      Text005@1210190001 : TextConst 'ENU=must be positive (or zero)';

    PROCEDURE CalcAmount@1100525001();
    BEGIN
      VALIDATE(Amount, Quantity * Rate);
    END;

    PROCEDURE CalcForecastTotalCost@1100525000();
    BEGIN
      IF "Cost Type" < "Cost Type"::Revenue THEN
        "Forecast Total Cost" := "Total Cost" + "Amount incl. Surcharge";
    END;

    PROCEDURE CalcTotalOpenPurch@1100528500();
    BEGIN
      //C003394
      VALIDATE("Total Open Purchase",  //C003389 VALIDATE
        "Open (Purchase)" + "Received/Not Invoiced" + "Open Ovh. Surch. (Purchase)" +
        "Open (Inventory)" + "Open Ovh. Surch. (Inventory)");
    END;

    PROCEDURE CalcOpenPurchPlusForecast@1100525006();
    BEGIN
      "Total Open Purch.plus Forecast" := "Total Open Purchase" + "Amount incl. Surcharge";
    END;

    PROCEDURE CalcForecastInPeriod@1100525004(StartDate@1100525003 : Date;EndDate@1100525004 : Date) ForecastInPeriod : Decimal;
    VAR
      ProjectForecastInPeriod@1100525000 : Record 11020632;
    BEGIN
      ProjectForecastInPeriod.SETRANGE("Project No.", "Project No.");
      ProjectForecastInPeriod.SETRANGE("Forecast Date", "Forecast Date");
      ProjectForecastInPeriod.SETRANGE("Cost Type", "Cost Type");
      ProjectForecastInPeriod.SETRANGE(Element, Element);
      ProjectForecastInPeriod.SETRANGE("Cost Object", "Cost Object");
      ProjectForecastInPeriod.SETRANGE(Date, StartDate, EndDate);
      IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
        ProjectForecastInPeriod.CALCSUMS(Quantity);
        ForecastInPeriod := ProjectForecastInPeriod.Quantity;
      END ELSE BEGIN
        ProjectForecastInPeriod.CALCSUMS(Amount);
        ForecastInPeriod := ProjectForecastInPeriod.Amount;
      END;
    END;

    PROCEDURE OnAfterValidateForecastInPerio@1100525003(StartDate@1100525004 : Date;EndDate@1100525005 : Date;NewForecast@1100525002 : Decimal;OldForecast@1100525003 : Decimal);
    VAR
      ProjectForecastMgt@1100525000 : Codeunit 11012256;
      ForecastToApply@1100525001 : Decimal;
    BEGIN
      IF (StartDate <= "Forecast Date") AND (EndDate > "Forecast Date") THEN
        StartDate := CALCDATE('<1D>', "Forecast Date");

      IF StartDate <= "Forecast Date" THEN BEGIN
        MESSAGE(Text003, FIELDCAPTION("Forecast Date"));
        EXIT;
      END;

      ForecastToApply := NewForecast - OldForecast;
      ProjectForecastMgt.CreateForecastInPeriod(
        Rec,
        StartDate,
        ForecastToApply);
    END;

    PROCEDURE OnDrillDownForecastInPeriod@1100525002(StartDate@1100525005 : Date;EndDate@1100525004 : Date);
    VAR
      ProjectForecastInPeriod@1100525002 : Record 11020632;
      ProjectForecastInPeriodPage@1100528700 : Page 11124950;
    BEGIN
      ProjectForecastInPeriod.SETRANGE("Project No.", "Project No.");
      ProjectForecastInPeriod.SETRANGE("Forecast Date", "Forecast Date", "Forecast Date"); // set from - to otherwise NAV will crash
      ProjectForecastInPeriod.SETRANGE("Cost Type", "Cost Type");
      ProjectForecastInPeriod.SETRANGE(Element, Element);
      ProjectForecastInPeriod.SETRANGE("Cost Object", "Cost Object");
      ProjectForecastInPeriod.SETRANGE(Date, StartDate, EndDate);
      ProjectForecastInPeriodPage.EDITABLE(NOT CheckForecastFixed(FALSE));
      ProjectForecastInPeriodPage.SETTABLEVIEW(ProjectForecastInPeriod);
      ProjectForecastInPeriodPage.RUNMODAL;
    END;

    PROCEDURE CommentIsPresent@1100525005(StartDate@1100525001 : Date;EndDate@1100525000 : Date) : Boolean;
    VAR
      ProjectForecastInPeriod@1100525002 : Record 11020632;
    BEGIN
      ProjectForecastInPeriod.SETRANGE("Project No.", "Project No.");
      ProjectForecastInPeriod.SETRANGE("Forecast Date", "Forecast Date");
      ProjectForecastInPeriod.SETRANGE("Cost Type", "Cost Type");
      ProjectForecastInPeriod.SETRANGE(Element, Element);
      ProjectForecastInPeriod.SETRANGE("Cost Object", "Cost Object");
      ProjectForecastInPeriod.SETRANGE(Date, StartDate, EndDate);
      ProjectForecastInPeriod.SETFILTER(Comment, '<>%1', '');
      EXIT(NOT ProjectForecastInPeriod.ISEMPTY);
    END;

    PROCEDURE TotalDistributedForecast@1100525008() : Decimal;
    VAR
      ProjectForecastInPeriod@1100525000 : Record 11020632;
    BEGIN
      ProjectForecastInPeriod.SETRANGE("Project No.", "Project No.");
      ProjectForecastInPeriod.SETRANGE("Forecast Date", "Forecast Date");
      ProjectForecastInPeriod.SETRANGE("Cost Type", "Cost Type");
      ProjectForecastInPeriod.SETRANGE(Element, Element);
      ProjectForecastInPeriod.SETRANGE("Cost Object", "Cost Object");
      IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
        ProjectForecastInPeriod.CALCSUMS(Quantity);
        EXIT(ROUND(ProjectForecastInPeriod.Quantity,0.00001)); //C028238
      END ELSE BEGIN
        ProjectForecastInPeriod.CALCSUMS(Amount);
        EXIT(ProjectForecastInPeriod.Amount);
      END;
    END;

    PROCEDURE Deviation@1100525009() : Decimal;
    BEGIN
      IF "Cost Type" = "Cost Type"::Labor THEN
        EXIT(Quantity - TotalDistributedForecast)
      ELSE
        EXIT("Total Open Purch.plus Forecast" - TotalDistributedForecast);
    END;

    PROCEDURE CheckForecastFixed@1100525007(ShowErrorMessage@1100525001 : Boolean) : Boolean;
    VAR
      ProjectForecastHeader@1100525000 : Record 11020630;
    BEGIN
      IF SkipFixedCheck THEN
        EXIT(FALSE);

      IF NOT ProjectForecastHeader.GET("Project No.", "Forecast Date") THEN
        EXIT(FALSE);

      IF ProjectForecastHeader.Fixed THEN
        IF ShowErrorMessage THEN
          ERROR(Text001)
        ELSE
          EXIT(TRUE);
    END;

    PROCEDURE SetSkipFixedCheck@1100525013();
    BEGIN
      SkipFixedCheck := TRUE;
    END;

    PROCEDURE UpdateRateInForecastPeriod@1100525010(FromFieldNo@1100525000 : Integer);
    VAR
      ProjectForecastInPeriod@1100525001 : Record 11020632;
    BEGIN
      ProjectForecastInPeriod.SETRANGE("Project No.", "Project No.");
      ProjectForecastInPeriod.SETRANGE("Forecast Date", "Forecast Date");
      ProjectForecastInPeriod.SETRANGE("Cost Type", "Cost Type");
      ProjectForecastInPeriod.SETRANGE(Element, Element);
      ProjectForecastInPeriod.SETRANGE("Cost Object", "Cost Object");
      IF ProjectForecastInPeriod.FINDSET(TRUE) THEN
        REPEAT
          CASE FromFieldNo OF
            FIELDNO("Rate Code"):
              ProjectForecastInPeriod.VALIDATE("Rate Code", "Rate Code");
            FIELDNO(Rate):
              BEGIN
                ProjectForecastInPeriod.VALIDATE("Rate Code", "Rate Code"); //should be empty
                ProjectForecastInPeriod.VALIDATE(Rate, Rate);
              END;
          END;
          ProjectForecastInPeriod.MODIFY(TRUE);
        UNTIL ProjectForecastInPeriod.NEXT = 0;
    END;

    PROCEDURE GetCostObjectDescription@1100525011();
    BEGIN
      CALCFIELDS("Cost Object Description", "Project Cost Object Name");
      IF "Project Cost Object Name" <> '' THEN
        "Cost Object Description" := "Project Cost Object Name";
    END;

    PROCEDURE UpdateLog@1100525012();
    VAR
      ProjectForecastHeader@1100525000 : Record 11020630;
    BEGIN
      ProjectForecastHeader.UpdateLog("Project No.", "Forecast Date");
    END;

    PROCEDURE CheckSurchargesCalculated@1210190000() : Boolean;
    VAR
      ProjectForecastHeader@1210190000 : Record 11020630;
    BEGIN
      ProjectForecastHeader.INIT;
      ProjectForecastHeader.SETRANGE("Project No.", "Project No.");
      ProjectForecastHeader.SETRANGE("Forecast Date", "Forecast Date");
      IF ProjectForecastHeader.FINDFIRST THEN BEGIN
        IF ProjectForecastHeader."Ovh. Surcharges Calculated" THEN
          IF NOT ProjectForecastHeader."Altered After Calculation" THEN BEGIN
            ProjectForecastHeader."Altered After Calculation" := TRUE;
            ProjectForecastHeader.MODIFY;
          END;
      END;
    END;

    PROCEDURE ActualInPeriod@1100525014(ActualType@1100525002 : Integer) : Decimal;
    VAR
      ProjectForecastHeader@1100525000 : Record 11020630;
      ProjectForecastLine@1100525001 : Record 11020631;
    BEGIN
      // Actual Type: 1=Costs, 2=Hours
      IF ("Project No." <> '') AND ("Forecast Date" <> 0D) THEN BEGIN
        ProjectForecastHeader.SETRANGE("Project No.", "Project No.");
        ProjectForecastHeader.SETRANGE("Forecast Date", 0D, "Forecast Date" - 1);
        IF ProjectForecastHeader.FINDLAST THEN BEGIN
          IF NOT ProjectForecastLine.GET(
            "Project No.", ProjectForecastHeader."Forecast Date", "Cost Type", Element, "Cost Object")
          THEN
            ProjectForecastLine.INIT;
        END;
        CASE ActualType OF
          1: EXIT("Actual Costs" - ProjectForecastLine."Actual Costs");
          2: EXIT("Actual Hours" - ProjectForecastLine."Actual Hours");
        END;
      END;
      EXIT(0);
    END;

    BEGIN
    END.
  }
}

