OBJECT Table 11071696 Maintenance Proposal Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               //"Budget Working Hours" := GetServiceBudgetHours();
             END;

    CaptionML=ENU=Maintenance Proposal Line;
  }
  FIELDS
  {
    { 5   ;   ;Maintenance Proposal;Code20        ;TableRelation="Maintenance Proposal Header".No.;
                                                   CaptionML=ENU=Maintenance Proposal;
                                                   Editable=No }
    { 8   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 10  ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract.No.;
                                                   CaptionML=ENU=Service Contract No.;
                                                   Editable=No }
    { 20  ;   ;Object No.          ;Code20        ;TableRelation=Service-Object.No.;
                                                   OnValidate=VAR
                                                                ServiceObject@1100528601 : Record 11071691;
                                                                ServiceLocation@1100528600 : Record 11012801;
                                                              BEGIN
                                                                IF ServiceObject.GET("Object No.") THEN BEGIN
                                                                  IF ServiceLocation.GET(ServiceObject.GetPrefServiceLocationNo(FALSE)) THEN BEGIN
                                                                    "Post Code" := ServiceLocation."Post Code";
                                                                    "Post Code Type" := ServiceLocation."Post Code Type";
                                                                    "House No." := ServiceLocation."House No.";
                                                                    "House No. Ext." := ServiceLocation."House No. Ext.";
                                                                  END;
                                                                END;
                                                                FillDisciplineAndTradeSpeciality;
                                                              END;

                                                   CaptionML=ENU=Object No.;
                                                   Editable=No }
    { 25  ;   ;Object Description  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Object.Description WHERE (No.=FIELD(Object No.)));
                                                   CaptionML=ENU=Object Description;
                                                   Editable=No }
    { 27  ;   ;Object Description 2;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Object."Description 2" WHERE (No.=FIELD(Object No.)));
                                                   CaptionML=ENU=Object Description 2;
                                                   Editable=No }
    { 30  ;   ;Starting Date Maintenance;Date     ;OnValidate=BEGIN
                                                                IF "Starting Date Maintenance" <> xRec."Starting Date Maintenance" THEN BEGIN
                                                                  "Ending Date Maintenance" := "Starting Date Maintenance";
                                                                  "Starting Time Maintenance" := 0T;
                                                                  "Ending Time Maintenance" := 0T;
                                                                END;
                                                                TestStartEndDateTimes;

                                                                "Execution Year" := DATE2DWY("Starting Date Maintenance",3);
                                                                "Execution Week" := DATE2DWY("Starting Date Maintenance",2);
                                                                "Execution Day" := DATE2DWY("Starting Date Maintenance",1) -1;

                                                                IF "Starting Date Maintenance" = 0D THEN
                                                                  EXIT;

                                                                CASE "Maintenance Day" OF
                                                                  "Maintenance Day"::Monday.."Maintenance Day"::Sunday:
                                                                    IF "Execution Day" +1 <> "Maintenance Day" THEN
                                                                      IF NOT CONFIRM(Text000, FALSE, FIELDCAPTION("Starting Date Maintenance"), "Maintenance Day") THEN
                                                                        ERROR('');
                                                                  "Maintenance Day"::Weekday:
                                                                    IF "Execution Day" IN ["Execution Day"::Saturday, "Execution Day"::Sunday] THEN
                                                                      IF NOT CONFIRM(Text000, FALSE, FIELDCAPTION("Starting Date Maintenance"), "Maintenance Day") THEN
                                                                        ERROR('');
                                                                  "Maintenance Day"::Weekend:
                                                                    IF "Execution Day" IN ["Execution Day"::Monday.."Execution Day"::Friday] THEN
                                                                      IF NOT CONFIRM(Text000, FALSE, FIELDCAPTION("Starting Date Maintenance"), "Maintenance Day") THEN
                                                                        ERROR('');
                                                                END;

                                                                IF ("Last Possible Maint. Date" <> 0D) AND
                                                                   ("Starting Date Maintenance" > "Last Possible Maint. Date") THEN
                                                                  FIELDERROR("Starting Date Maintenance", STRSUBSTNO(Text005, FIELDCAPTION("Last Possible Maint. Date")));
                                                              END;

                                                   CaptionML=ENU=Starting Date Maintenance }
    { 32  ;   ;Starting Time Maintenance;Time     ;OnValidate=VAR
                                                                EndingDateTime@1100528600 : DateTime;
                                                              BEGIN
                                                                IF "Starting Time Maintenance" <> 0T THEN BEGIN
                                                                  EndingDateTime := CREATEDATETIME("Starting Date Maintenance", "Starting Time Maintenance");
                                                                  EndingDateTime += "Budget Working Hours" * 60 * 60 * 1000;
                                                                  "Ending Date Maintenance" := DT2DATE(EndingDateTime);
                                                                  "Ending Time Maintenance" := DT2TIME(EndingDateTime);
                                                                  VALIDATE("Ending Date Maintenance");
                                                                END;
                                                                TestStartEndDateTimes;
                                                              END;

                                                   CaptionML=ENU=Starting Time Maintenance }
    { 35  ;   ;Ending Date Maintenance;Date       ;OnValidate=BEGIN
                                                                TestStartEndDateTimes;
                                                                IF ("Last Possible Maint. Date" <> 0D) AND
                                                                   ("Ending Date Maintenance" > "Last Possible Maint. Date") THEN
                                                                  FIELDERROR("Ending Date Maintenance", STRSUBSTNO(Text005, FIELDCAPTION("Last Possible Maint. Date")));
                                                              END;

                                                   CaptionML=ENU=Ending Date Maintenance }
    { 37  ;   ;Ending Time Maintenance;Time       ;OnValidate=BEGIN
                                                                TestStartEndDateTimes;
                                                              END;

                                                   CaptionML=ENU=Ending Time Maintenance }
    { 40  ;   ;Standard Object No. ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Object."Standard Object No." WHERE (No.=FIELD(Object No.)));
                                                   CaptionML=ENU=Standard Object No.;
                                                   Editable=No }
    { 60  ;   ;Brand               ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Standard Object"."Object Brand OLD" WHERE (No.=FIELD(Standard Object No.)));
                                                   CaptionML=ENU=Brand;
                                                   Editable=No }
    { 70  ;   ;Standard Object Description;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Standard Object".Description WHERE (No.=FIELD(Standard Object No.)));
                                                   CaptionML=ENU=Standard Object Description;
                                                   Editable=No }
    { 75  ;   ;Standard Object Description 2;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Standard Object"."Description 2" WHERE (No.=FIELD(Standard Object No.)));
                                                   CaptionML=ENU=Standard Object Description 2;
                                                   Editable=No }
    { 80  ;   ;Service Location No.;Code20        ;TableRelation="Service Location";
                                                   CaptionML=ENU=Service Location No.;
                                                   Editable=No }
    { 90  ;   ;Object Group        ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Standard Object"."Object Group" WHERE (No.=FIELD(Standard Object No.)));
                                                   CaptionML=ENU=Object Group;
                                                   Editable=No }
    { 100 ;   ;Maintenance Scheme  ;Code20        ;TableRelation="Maintenance Scheme".Code;
                                                   OnValidate=BEGIN
                                                                FillDisciplineAndTradeSpeciality;
                                                              END;

                                                   CaptionML=ENU=Maintenance Scheme;
                                                   Editable=No }
    { 110 ;   ;Service Package     ;Code10        ;TableRelation="Service Package".Code;
                                                   CaptionML=ENU=Service Package;
                                                   Editable=No }
    { 120 ;   ;Execution Week      ;Integer       ;CaptionML=ENU=Week;
                                                   Editable=No }
    { 130 ;   ;Execution Year      ;Integer       ;CaptionML=ENU=Year;
                                                   Editable=No }
    { 150 ;   ;Preferred Employee  ;Code20        ;TableRelation="Resource (WOP)" WHERE (Type=CONST(Employee));
                                                   OnValidate=VAR
                                                                ResourceMgtWorkOrderPlan@1100528600 : Codeunit 11229277;
                                                              BEGIN
                                                                ResourceMgtWorkOrderPlan.TestResourceWithinCompanyPlanGroup("Preferred Employee");
                                                              END;

                                                   CaptionML=ENU=Preferred Employee;
                                                   Description=DP00465, based on Resource }
    { 160 ;   ;Preferred Employee Level;Option    ;CaptionML=ENU=Preferred Employee Level;
                                                   OptionCaptionML=ENU=" ,Contract,Location,Object,Contract Object Maintenance,Complex";
                                                   OptionString=[ ,Contract,Location,Object,Contract Object Maintenance,Complex] }
    { 170 ;   ;Service Order No.   ;Code20        ;TableRelation="Service Order";
                                                   CaptionML=ENU=Service Order No. }
    { 180 ;   ;Execution Day       ;Option        ;CaptionML=ENU=Day;
                                                   OptionCaptionML=ENU=Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday;
                                                   OptionString=Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday;
                                                   Editable=No }
    { 190 ;   ;Service Contract Arr. Line No.;Integer;
                                                   CaptionML=ENU=Service Contract Arrangement Line No.;
                                                   Editable=No }
    { 200 ;   ;Overlap Conflict    ;Boolean       ;CaptionML=ENU=Overlap Conflict;
                                                   Editable=No }
    { 210 ;   ;Maintenance Scheme Description;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Maintenance Scheme".Description WHERE (Code=FIELD(Maintenance Scheme)));
                                                   CaptionML=ENU=Maintenance Scheme Description;
                                                   Editable=No }
    { 220 ;   ;Service Location Description;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location".Description WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=ENU=Service Location Description;
                                                   Editable=No }
    { 230 ;   ;Address             ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location".Address WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=ENU=Address;
                                                   Editable=No }
    { 240 ;   ;Address 2           ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location"."Address 2" WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=ENU=Address 2;
                                                   Editable=No }
    { 250 ;   ;City                ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location".City WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=ENU=City;
                                                   Editable=No }
    { 260 ;   ;County              ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location".County WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=ENU=County;
                                                   Editable=No }
    { 270 ;   ;Post Code           ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code;
                                                   Editable=No }
    { 275 ;   ;Post Code Type      ;Option        ;CaptionML=ENU=Post Code Type;
                                                   OptionCaptionML=ENU=" ,Odd,Even,House Boat,House Trailer";
                                                   OptionString=[ ,Odd,Even,House Boat,House Trailer];
                                                   Editable=No }
    { 280 ;   ;House No.           ;Code20        ;CaptionML=ENU=House No.;
                                                   Editable=No }
    { 285 ;   ;House No. Ext.      ;Code10        ;CaptionML=ENU=House No. Extension;
                                                   Editable=No }
    { 290 ;   ;Firm Planned        ;Boolean       ;CaptionML=ENU=Firm Planned }
    { 300 ;   ;New Maintenance Date;Date          ;OnValidate=VAR
                                                                NewExecutionDay@1100526200 : Option;
                                                              BEGIN
                                                                IF "New Maintenance Date" = 0D THEN BEGIN
                                                                  "New Theoretical Maint. Date" := 0D;
                                                                  EXIT;
                                                                END;

                                                                NewExecutionDay := DATE2DWY("New Maintenance Date",1) -1;

                                                                CASE "Maintenance Day" OF
                                                                  "Maintenance Day"::Monday.."Maintenance Day"::Sunday:
                                                                    IF NewExecutionDay +1 <> "Maintenance Day" THEN
                                                                      IF NOT CONFIRM(Text000, FALSE, FIELDCAPTION("New Maintenance Date"), "Maintenance Day") THEN
                                                                        ERROR('');
                                                                  "Maintenance Day"::Weekday:
                                                                    IF NewExecutionDay IN ["Execution Day"::Saturday, "Execution Day"::Sunday] THEN
                                                                      IF NOT CONFIRM(Text000, FALSE, FIELDCAPTION("New Maintenance Date"), "Maintenance Day") THEN
                                                                        ERROR('');
                                                                  "Maintenance Day"::Weekend:
                                                                    IF NewExecutionDay IN ["Execution Day"::Monday.."Execution Day"::Friday] THEN
                                                                      IF NOT CONFIRM(Text000, FALSE, FIELDCAPTION("New Maintenance Date"), "Maintenance Day") THEN
                                                                        ERROR('');
                                                                END;
                                                                IF ("Last Possible Maint. Date" <> 0D) AND
                                                                   ("New Maintenance Date" > "Last Possible Maint. Date") THEN
                                                                  FIELDERROR("New Maintenance Date", STRSUBSTNO(Text005, FIELDCAPTION("Last Possible Maint. Date")));
                                                              END;

                                                   CaptionML=ENU=New Maintenance Date }
    { 310 ;   ;Theoretical Maintenance Date;Date  ;FieldClass=Normal;
                                                   CaptionML=ENU=Theoretical Maintenance Date;
                                                   Editable=No }
    { 320 ;   ;New Theoretical Maint. Date;Date   ;CaptionML=ENU=New Theoretical Maintenance Date;
                                                   Editable=No }
    { 330 ;   ;Maintenance Day     ;Option        ;CaptionML=ENU=Maintenance Day;
                                                   OptionCaptionML=ENU=" ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday,Weekday,Weekend";
                                                   OptionString=[ ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday,Weekday,Weekend] }
    { 340 ;   ;Expired             ;Boolean       ;OnValidate=VAR
                                                                MaintenanceProposalLine@1100528600 : Record 11071696;
                                                                ServiceContractArrangement@1100528601 : Record 11071705;
                                                              BEGIN
                                                                TESTFIELD("Service Order No.", '');

                                                                ServiceContractArrangement.SETRANGE("Service Contract No.", "Service Contract No.");
                                                                ServiceContractArrangement.SETRANGE("Object No.", "Object No.");
                                                                ServiceContractArrangement.SETRANGE("Maintenance Scheme", "Maintenance Scheme");
                                                                ServiceContractArrangement.SETRANGE("Line No.", "Service Contract Arr. Line No.");

                                                                IF xRec.Expired AND NOT Expired THEN BEGIN
                                                                  MaintenanceProposalLine.SETCURRENTKEY("Service Contract No.", "Object No.");
                                                                  MaintenanceProposalLine.SETRANGE("Service Contract No.", "Service Contract No.");
                                                                  MaintenanceProposalLine.SETRANGE("Object No.", "Object No.");
                                                                  MaintenanceProposalLine.SETRANGE("Maintenance Scheme", "Maintenance Scheme");
                                                                  MaintenanceProposalLine.SETRANGE("Service Contract Arr. Line No.", "Service Contract Arr. Line No.");
                                                                  MaintenanceProposalLine.SETRANGE(Expired, FALSE);
                                                                  MaintenanceProposalLine.SETFILTER("Maintenance Proposal", '<>%1', "Maintenance Proposal");
                                                                  IF MaintenanceProposalLine.FINDFIRST THEN
                                                                    ERROR(Text001, MaintenanceProposalLine."Maintenance Proposal");

                                                                  CALCFIELDS("Contract Agreement Exists");
                                                                  IF NOT "Contract Agreement Exists" THEN
                                                                    ERROR(Text007);
                                                                  IF ServiceContractArrangement.FINDFIRST THEN
                                                                    ServiceContractArrangement.TESTFIELD(Cancelled, FALSE);
                                                                END;

                                                                IF NOT xRec.Expired AND Expired THEN BEGIN
                                                                  IF ServiceContractArrangement.FINDFIRST THEN
                                                                    IF NOT ServiceContractArrangement.Cancelled THEN BEGIN
                                                                      ServiceContractArrangement.Cancelled := TRUE; // no validate
                                                                      ServiceContractArrangement.MODIFY;
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Expired }
    { 350 ;   ;Cluster             ;Code10        ;TableRelation="Service Cluster".Code WHERE (Service Contract No.=FIELD(Service Contract No.));
                                                   OnValidate=BEGIN
                                                                IF xRec.Cluster <> Cluster THEN
                                                                  VALIDATE("Cluster Seqn.", 0);
                                                                ValidateServiceCluster;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupServiceCluster;
                                                            END;

                                                   CaptionML=ENU=Cluster }
    { 351 ;   ;Cluster Seqn.       ;Integer       ;TableRelation="Service Cluster Seq."."Seq. No." WHERE (Cluster Code=FIELD(Cluster));
                                                   OnValidate=BEGIN
                                                                ValidateServiceClusterSeqn;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupServiceClusterSeqn;
                                                            END;

                                                   CaptionML=ENU=Cluster Seqn. }
    { 352 ;   ;Contract Cluster    ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Contract."Use Contract Clusters" WHERE (No.=FIELD(Service Contract No.)));
                                                   CaptionML=ENU=Contract Cluster;
                                                   Editable=No }
    { 360 ;   ;Discipline          ;Code10        ;TableRelation=Discipline;
                                                   CaptionML=ENU=Discipline;
                                                   Editable=No }
    { 370 ;   ;Trade Speciality    ;Code10        ;TableRelation="Trade Speciality".Code WHERE (Discipline=FIELD(Discipline));
                                                   CaptionML=ENU=Trade Speciality;
                                                   Editable=No }
    { 380 ;   ;Subcontractor       ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=VAR
                                                                Vendor@1100525000 : Record 23;
                                                              BEGIN
                                                                IF Subcontractor <> '' THEN
                                                                  IF Vendor.GET(Subcontractor) THEN
                                                                    "Resource No." := Vendor.GetResourceNo;
                                                              END;

                                                   CaptionML=ENU=Subcontractor }
    { 390 ;   ;Subcontractor Name  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Subcontractor)));
                                                   CaptionML=ENU=Subcontractor Name;
                                                   Editable=No }
    { 400 ;   ;Resource No.        ;Code20        ;TableRelation="Resource (WOP)";
                                                   OnValidate=VAR
                                                                ResourceMgtWorkOrderPlan@1100528600 : Codeunit 11229277;
                                                              BEGIN
                                                                ResourceMgtWorkOrderPlan.TestResourceWithinCompanyPlanGroup("Resource No.");
                                                                CALCFIELDS("Resource Name");
                                                              END;

                                                   CaptionML=ENU=Resource;
                                                   Description=DP00465, based on Resource }
    { 410 ;   ;Resource Name       ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Resource (WOP)".Name WHERE (No.=FIELD(Resource No.)));
                                                   CaptionML=ENU=Resource Name;
                                                   Editable=No }
    { 415 ;   ;Employee No.        ;Code20        ;TableRelation="Resource (WOP)" WHERE (Type=CONST(Employee));
                                                   OnValidate=VAR
                                                                ResourceMgtWorkOrderPlan@1100528600 : Codeunit 11229277;
                                                              BEGIN
                                                                ResourceMgtWorkOrderPlan.TestResourceWithinCompanyPlanGroup("Employee No.");
                                                              END;

                                                   CaptionML=ENU=Employee }
    { 416 ;   ;Employee Name       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Resource (WOP)".Name WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=ENU=Employee Name }
    { 420 ;   ;Budget Working Hours;Decimal       ;CaptionML=ENU=Budget Working Hours;
                                                   Editable=No }
    { 425 ;   ;Budget Travel Hours ;Decimal       ;CaptionML=ENU=Budget Travel Hours;
                                                   Editable=No }
    { 430 ;   ;Calculated Travel Hours;Decimal    ;CaptionML=ENU=Calculated Travel Hours;
                                                   Editable=No }
    { 440 ;   ;Last Possible Maint. Date;Date     ;CaptionML=ENU=Last Possible Maintenance Date;
                                                   Editable=No }
    { 450 ;   ;Starting Time Maint. Window;Time   ;OnValidate=BEGIN
                                                                TestMaintenanceTimes;
                                                              END;

                                                   CaptionML=ENU=Starting Time Maintenance Window }
    { 460 ;   ;Ending Time Maint. Window;Time     ;OnValidate=BEGIN
                                                                TestMaintenanceTimes;
                                                              END;

                                                   CaptionML=ENU=Ending Time Maintenance Window }
    { 470 ;   ;Use Maintenance Window;Boolean     ;CaptionML=ENU=Use Maintenance Window }
    { 480 ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   CaptionML=ENU=Customer No.;
                                                   Editable=No }
    { 490 ;   ;Customer Name       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Customer No.)));
                                                   CaptionML=ENU=Customer Name;
                                                   Editable=No }
    { 500 ;   ;Territory Code      ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location"."Territory Code" WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=ENU=Territory Code;
                                                   Editable=No }
    { 510 ;   ;Building Code       ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location"."Building Code" WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=ENU=Building Code;
                                                   Editable=No }
    { 520 ;   ;Complex Code        ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location"."Complex Code" WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=ENU=Complex Code;
                                                   Editable=No }
    { 530 ;   ;Contract Agreement Exists;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Service Contract Arrangement" WHERE (Service Contract No.=FIELD(Service Contract No.),
                                                                                                           Object No.=FIELD(Object No.),
                                                                                                           Maintenance Scheme=FIELD(Maintenance Scheme),
                                                                                                           Line No.=FIELD(Service Contract Arr. Line No.)));
                                                   CaptionML=ENU=Contract Agreement Exists;
                                                   Editable=No }
    { 540 ;   ;Service Order Description;Text50   ;CaptionML=ENU=Description }
    { 550 ;   ;Service Category    ;Code10        ;TableRelation="Service Category".Code WHERE (Service Contract No.=FIELD(Service Contract No.));
                                                   CaptionML=ENU=Service Category }
    { 560 ;   ;Budget Material Present;Boolean    ;CaptionML=ENU=Budget Material Present;
                                                   Editable=No }
    { 570 ;   ;Order Kind          ;Code10        ;TableRelation="Service Order Indication".Code WHERE (Indication=CONST(Kind));
                                                   CaptionML=ENU=Order Kind }
    { 580 ;   ;Order Type          ;Code10        ;TableRelation="Service Order Indication".Code WHERE (Indication=CONST(Type));
                                                   CaptionML=ENU=Order Type }
    { 590 ;   ;Message Text        ;Text250       ;CaptionML=ENU=Message;
                                                   Editable=No }
    { 600 ;   ;Room                ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Object.Room WHERE (No.=FIELD(Object No.)));
                                                   CaptionML=ENU=Room;
                                                   Editable=No }
    { 610 ;   ;Service Contract Group;Code20      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Contract."Contract Group" WHERE (No.=FIELD(Service Contract No.)));
                                                   CaptionML=ENU=Service Contract Group;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Maintenance Proposal,Line No.           ;Clustered=Yes }
    {    ;Service Contract No.,Object No.          }
    {    ;Object No.                               }
    {    ;Maintenance Proposal,Post Code,House No.,House No. Ext. }
    {    ;Resource No.,Starting Date Maintenance,Starting Time Maintenance }
    {    ;Service Order No.,Post Code,House No.,House No. Ext. }
    {    ;Service Location No.                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100526200 : TextConst 'ENU=%1 is not a %2, continue?';
      Text001@1100528600 : TextConst 'ENU=A Maintenance Line already exists for this Object within Proposal %1';
      Text003@1100528601 : TextConst 'ENU=%1 and %2 must occur before %3 en %4';
      Text004@1100528603 : TextConst 'ENU=Service Orders not found';
      Text005@1100528604 : TextConst 'ENU=must occur before %1';
      Text006@1100528605 : TextConst 'ENU=Must occur after  %1';
      Text007@1100528602 : TextConst 'ENU=No Contract Arrangement exists for this Proposal Line';

    PROCEDURE ReplaceMaintenanceDate@1100526202(VAR RecSet@1100526201 : Record 11071696);
    VAR
      MaintenanceProposalLine@1100526200 : Record 11071696;
    BEGIN
      MaintenanceProposalLine.COPY(RecSet);
      MaintenanceProposalLine.SETFILTER("New Maintenance Date", '<>%1', 0D);
      IF NOT MaintenanceProposalLine.FINDSET THEN
        EXIT;

      REPEAT
        MaintenanceProposalLine."Starting Date Maintenance" := MaintenanceProposalLine."New Maintenance Date";
        MaintenanceProposalLine."Starting Time Maintenance" := 0T;
        MaintenanceProposalLine."Ending Date Maintenance" := MaintenanceProposalLine."New Maintenance Date";
        MaintenanceProposalLine."Ending Time Maintenance" := 0T;
        MaintenanceProposalLine."Execution Week" := DATE2DWY(MaintenanceProposalLine."Starting Date Maintenance", 2);
        MaintenanceProposalLine."Execution Year" := DATE2DWY(MaintenanceProposalLine."Starting Date Maintenance", 3);
        MaintenanceProposalLine."Execution Day" := DATE2DWY(MaintenanceProposalLine."Starting Date Maintenance", 1) -1;
        IF MaintenanceProposalLine."New Theoretical Maint. Date" <> 0D THEN
          MaintenanceProposalLine."Theoretical Maintenance Date" := MaintenanceProposalLine."New Theoretical Maint. Date";
        MaintenanceProposalLine."New Maintenance Date" := 0D;
        MaintenanceProposalLine."New Theoretical Maint. Date" := 0D;
        MaintenanceProposalLine.MODIFY(TRUE);
      UNTIL MaintenanceProposalLine.NEXT = 0;
    END;

    PROCEDURE TestStartEndDateTimes@1100528600();
    VAR
      StartDateTime@1100528600 : DateTime;
      EndDateTime@1100528601 : DateTime;
    BEGIN
      IF ("Starting Date Maintenance" = 0D) AND ("Ending Date Maintenance" <> 0D) THEN
        TESTFIELD("Starting Date Maintenance");

      StartDateTime := CREATEDATETIME("Starting Date Maintenance", "Starting Time Maintenance");
      EndDateTime := CREATEDATETIME("Ending Date Maintenance", "Ending Time Maintenance");

      IF StartDateTime > EndDateTime THEN
        ERROR(Text003, FIELDCAPTION("Starting Date Maintenance"), FIELDCAPTION("Starting Time Maintenance"),
          FIELDCAPTION("Ending Date Maintenance"), FIELDCAPTION("Ending Time Maintenance"));
    END;

    PROCEDURE GetServiceBudgetHours@1100528602() : Decimal;
    VAR
      MaintenanceManagement@1100528600 : Codeunit 11012829;
      ServiceContract@1100528602 : Record 11012812;
      ContractObjectMaintenance@1100528601 : Record 11071692;
      Labor@1100528603 : Decimal;
      Hours@1100528604 : Decimal;
      Material@1100528605 : Decimal;
      Subcontracting@1100528606 : Decimal;
      Plant@1100528607 : Decimal;
      Sundry@1100528608 : Decimal;
      TotalCost@1100528609 : Decimal;
      Surcharge@1100528610 : Decimal;
    BEGIN
      ServiceContract.GET("Service Contract No.");
      ContractObjectMaintenance.GET("Service Contract No.", "Object No.", "Maintenance Scheme");
      MaintenanceManagement.CalculateMaintBudgetVisit(ContractObjectMaintenance, ServiceContract,
        Labor, Hours, Material, Subcontracting, Plant, Sundry, TotalCost, Surcharge,
        "Theoretical Maintenance Date", "Theoretical Maintenance Date");
      EXIT(Hours);
    END;

    PROCEDURE PrintAppointmentLetters@1100528603(VAR IMaintenanceProposalLine@1100528603 : Record 11071696);
    VAR
      MaintenanceProposalLine@1100528600 : Record 11071696;
      ServiceOrder@1100528601 : Record 11012823;
      DocumentPrint@1100528602 : Codeunit 229;
    BEGIN
      MaintenanceProposalLine.COPY(IMaintenanceProposalLine);
      MaintenanceProposalLine.SETFILTER("Service Order No.", '<>%1', '');
      IF MaintenanceProposalLine.FINDSET THEN BEGIN
        REPEAT
          ServiceOrder."No." := MaintenanceProposalLine."Service Order No.";
          ServiceOrder.MARK(TRUE);
        UNTIL MaintenanceProposalLine.NEXT = 0;
        ServiceOrder.MARKEDONLY(TRUE);
        DocumentPrint.PrintSOAppointmentLetter(ServiceOrder);
      END ELSE
        MESSAGE(Text004);
    END;

    PROCEDURE EmailAppointment@1100528604(VAR IMaintenanceProposalLine@1100528600 : Record 11071696);
    VAR
      MaintenanceProposalLine@1100528602 : Record 11071696;
      ServiceOrder@1100528601 : Record 11012823;
    BEGIN
      MaintenanceProposalLine.COPY(IMaintenanceProposalLine);
      MaintenanceProposalLine.SETFILTER("Service Order No.", '<>%1', '');
      IF MaintenanceProposalLine.FINDSET THEN BEGIN
        REPEAT
          ServiceOrder."No." := MaintenanceProposalLine."Service Order No.";
          ServiceOrder.MARK(TRUE);
        UNTIL MaintenanceProposalLine.NEXT = 0;
        ServiceOrder.MARKEDONLY(TRUE);
        REPORT.RUNMODAL(REPORT::"E-Mail Appointment Letter", FALSE, TRUE, ServiceOrder);
      END ELSE
        MESSAGE(Text004);
    END;

    PROCEDURE SendAppointment@1100528610(VAR IMaintenanceProposalLine@1100528600 : Record 11071696);
    VAR
      MaintenanceProposalLine@1100528602 : Record 11071696;
      ServiceOrder@1100528606 : Record 11012823;
      ServiceOrderExtension@1100528607 : Record 11071727;
      LetterServiceOrder@1100528601 : Record 11012823;
      EmailServiceOrder@1100528605 : Record 11012823;
      Customer@1100528603 : Record 18;
      DocumentPrint@1100528604 : Codeunit 229;
    BEGIN
      MaintenanceProposalLine.COPY(IMaintenanceProposalLine);
      MaintenanceProposalLine.SETFILTER("Service Order No.", '<>%1', '');
      IF MaintenanceProposalLine.FINDSET THEN BEGIN
        REPEAT
          ServiceOrder.GET(MaintenanceProposalLine."Service Order No.");
          IF ServiceOrder."Bill-to Customer No." <> '' THEN
            IF Customer.GET(ServiceOrder."Bill-to Customer No.") THEN BEGIN
              ServiceOrderExtension.GetServOrderExtension(ServiceOrder."No.");
              IF ServiceOrderExtension."Date Appointment Letter Sent" = 0D THEN BEGIN
                CASE Customer."Maintenance Appointments by" OF
                  Customer."Maintenance Appointments by"::Letter:
                    BEGIN
                      LetterServiceOrder := ServiceOrder;
                      LetterServiceOrder.MARK(TRUE);
                    END;
                  Customer."Maintenance Appointments by"::"E-Mail":
                    BEGIN
                      EmailServiceOrder := ServiceOrder;
                      EmailServiceOrder.MARK(TRUE);
                    END;
                END;
              END;
            END;
        UNTIL MaintenanceProposalLine.NEXT = 0;
        LetterServiceOrder.MARKEDONLY(TRUE);
        EmailServiceOrder.MARKEDONLY(TRUE);
        IF NOT LetterServiceOrder.ISEMPTY THEN
          DocumentPrint.PrintSOAppointmentLetter(LetterServiceOrder);
        IF NOT EmailServiceOrder.ISEMPTY THEN
          REPORT.RUNMODAL(REPORT::"E-Mail Appointment Letter", FALSE, TRUE, EmailServiceOrder);
      END ELSE
        MESSAGE(Text004);
    END;

    PROCEDURE GetPrefServiceLocationNo@1100528301(IWithErrorCheck@1100528300 : Boolean) : Code[20];
    VAR
      ServiceObject@1100528301 : Record 11071691;
    BEGIN
      ServiceObject.GET("Object No.");
      EXIT(ServiceObject.GetPrefServiceLocationNo(IWithErrorCheck));
    END;

    PROCEDURE TestMaintenanceTimes@1100528601();
    BEGIN
      IF ("Starting Time Maintenance" = 0T) OR ("Ending Time Maintenance" = 0T) THEN
        EXIT;
      IF "Ending Time Maintenance" <= "Starting Time Maintenance" THEN
        FIELDERROR("Ending Time Maintenance", STRSUBSTNO(Text006, FIELDCAPTION("Starting Time Maintenance")));
    END;

    PROCEDURE ValidateServiceCluster@1100528606();
    VAR
      ServiceContract@1100528601 : Record 11012812;
      ServiceCluster@1100528600 : Record 11071742;
    BEGIN
      IF Cluster <> '' THEN BEGIN
        ServiceContract.GET("Service Contract No.");
        IF ServiceContract."Use Contract Clusters" THEN
          ServiceCluster.GET("Service Contract No.", Cluster)
        ELSE
          ServiceCluster.GET('', Cluster);
      END;
    END;

    PROCEDURE LookupServiceCluster@1100528605();
    VAR
      ServiceContract@1100528600 : Record 11012812;
      ServiceCluster@1100528601 : Record 11071742;
    BEGIN
      ServiceContract.GET("Service Contract No.");
      IF ServiceContract."Use Contract Clusters" THEN BEGIN
        ServiceCluster.SETRANGE("Service Contract No.", "Service Contract No.");
        IF Cluster <> '' THEN
          ServiceCluster.GET("Service Contract No.", Cluster);
      END ELSE BEGIN
        ServiceCluster.SETRANGE("Service Contract No.", '');
        IF Cluster <> '' THEN
          ServiceCluster.GET('', Cluster);
      END;
      IF PAGE.RUNMODAL(0, ServiceCluster) = ACTION::LookupOK THEN
        VALIDATE(Cluster, ServiceCluster.Code);
    END;

    PROCEDURE ValidateServiceClusterSeqn@1100528608();
    VAR
      ServiceContract@1100528601 : Record 11012812;
      ServiceClusterSeq@1100528600 : Record 11071966;
    BEGIN
      IF Cluster <> '' THEN BEGIN
        ServiceContract.GET("Service Contract No.");
        IF ServiceContract."Use Contract Clusters" THEN
          ServiceClusterSeq.GET("Service Contract No.", Cluster, "Cluster Seqn.")
        ELSE
          ServiceClusterSeq.GET('', Cluster, "Cluster Seqn.");
      END;
    END;

    PROCEDURE LookupServiceClusterSeqn@1100528607();
    VAR
      ServiceContract@1100528600 : Record 11012812;
      ServiceClusterSeq@1100528601 : Record 11071966;
    BEGIN
      ServiceContract.GET("Service Contract No.");
      IF ServiceContract."Use Contract Clusters" THEN BEGIN
        ServiceClusterSeq.SETRANGE("Service Contract No.", "Service Contract No.");
        ServiceClusterSeq.SETRANGE("Cluster Code", Cluster);
        IF "Cluster Seqn." <> 0 THEN
          ServiceClusterSeq.GET("Service Contract No.", Cluster, "Cluster Seqn.");
      END ELSE BEGIN
        ServiceClusterSeq.SETRANGE("Service Contract No.", '');
        ServiceClusterSeq.SETRANGE("Cluster Code", Cluster);
        IF "Cluster Seqn." <> 0 THEN
          ServiceClusterSeq.GET('', Cluster, "Cluster Seqn.");
      END;
      IF PAGE.RUNMODAL(0, ServiceClusterSeq) = ACTION::LookupOK THEN
        VALIDATE("Cluster Seqn.", ServiceClusterSeq."Seq. No.");
    END;

    PROCEDURE GetClusterContractNo@1100528609() : Code[20];
    BEGIN
      CALCFIELDS("Contract Cluster");
      IF "Contract Cluster" THEN
        EXIT("Service Contract No.")
      ELSE
        EXIT('');
    END;

    LOCAL PROCEDURE FillDisciplineAndTradeSpeciality@1100528611();
    VAR
      MaintenanceManagement@1100528601 : Codeunit 11012829;
    BEGIN
      MaintenanceManagement.DetermineDisciplineAndTradeSpeciality("Object No.", "Maintenance Scheme", Discipline, "Trade Speciality");
    END;

    BEGIN
    END.
  }
}

