OBJECT Table 11071714 Object Imp. Worksheet Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               ObjectImpWorksheetLine@1100528600 : Record 11071714;
               ObjectImpWorksheet@1100528601 : Record 11071713;
             BEGIN
               IF "Line No." = 0 THEN BEGIN
                 ObjectImpWorksheetLine.SETRANGE("Worksheet No.", "Worksheet No.");
                 IF ObjectImpWorksheetLine.FINDLAST THEN
                   "Line No." := ObjectImpWorksheetLine."Line No." + 10000
                 ELSE
                   "Line No." := 10000;
               END;
               UpdateTypeAndCode;
               ObjectImpWorksheet.GET("Worksheet No.");
               IF (Quantity = 0) OR (ObjectImpWorksheet."Import Type" = ObjectImpWorksheet."Import Type"::"Service Contract") THEN
                 Quantity := 1;
               IF "Quantity per Object" = 0 THEN
                 "Quantity per Object" := 1;
               CheckLine(FALSE);
             END;

    OnModify=BEGIN
               CheckLine(FALSE);
             END;

    CaptionML=ENU=Object Import Worksheet Line;
  }
  FIELDS
  {
    { 10  ;   ;Worksheet No.       ;Code10        ;TableRelation="Object Imp. Worksheet";
                                                   CaptionML=ENU=Worksheet No. }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 30  ;   ;Name                ;Text50        ;CaptionML=ENU=Name;
                                                   Editable=Yes }
    { 40  ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 50  ;   ;Address             ;Text50        ;OnValidate=BEGIN
                                                                CheckLine(FALSE);
                                                              END;

                                                   CaptionML=ENU=Address;
                                                   Editable=Yes }
    { 60  ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2;
                                                   Editable=Yes }
    { 70  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                IF ObjectImpWorkSheetMgtCU.NormalizePostCode("Post Code", "Country/Region Code", "Post Code (Normalized)") THEN
                                                                  VALIDATE("Post Code (Normalized)")
                                                                ELSE
                                                                  "Post Code (Normalized)" := '';
                                                                CheckLine(FALSE);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code;
                                                   Editable=Yes }
    { 80  ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City;
                                                   Editable=Yes }
    { 85  ;   ;County              ;Text30        ;CaptionML=ENU=County;
                                                   Editable=Yes }
    { 90  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region Code }
    { 100 ;   ;Phone No.           ;Text30        ;OnValidate=BEGIN
                                                                "Phone No. (Normalized)" := ObjectImpWorkSheetMgtCU.NormalizePhoneNo("Phone No.");
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 110 ;   ;Fax No.             ;Text30        ;OnValidate=BEGIN
                                                                "Fax No. (Normalized)" := ObjectImpWorkSheetMgtCU.NormalizePhoneNo("Fax No.");
                                                              END;

                                                   CaptionML=ENU=Fax No. }
    { 120 ;   ;House No.           ;Text30        ;OnValidate=BEGIN
                                                                CheckLine(FALSE);
                                                              END;

                                                   CaptionML=ENU=House No. }
    { 125 ;   ;House No. Ext.      ;Code10        ;OnValidate=BEGIN
                                                                CheckLine(FALSE);
                                                              END;

                                                   CaptionML=ENU=House No. Extension }
    { 130 ;   ;Found Location No.  ;Code20        ;TableRelation="Service Location";
                                                   OnValidate=VAR
                                                                ServiceLocation@1100528600 : Record 11012801;
                                                                HouseNoExt@1100528601 : Code[10];
                                                              BEGIN
                                                                IF "Found Location No." <> '' THEN BEGIN
                                                                  ServiceLocation.GET("Found Location No.");
                                                                  IF (ServiceLocation."House No." <> "House No.") OR (ServiceLocation."House No. Ext." <> "House No. Ext.") THEN
                                                                    ERROR(Text003, ServiceLocation."No.");
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ServiceLocation@1100528600 : Record 11012801;
                                                              HouseNoExt@1100528601 : Code[10];
                                                            BEGIN
                                                              GetServiceLocationDS(ServiceLocation);
                                                              IF "Found Location No." <> '' THEN
                                                                IF ServiceLocation.GET("Found Location No.") THEN;
                                                              IF PAGE.RUNMODAL(0, ServiceLocation) = ACTION::LookupOK THEN
                                                                VALIDATE("Found Location No.", ServiceLocation."No.");
                                                            END;

                                                   CaptionML=ENU=Found Location No. }
    { 150 ;   ;Standard Object No. ;Code20        ;TableRelation="Standard Object" WHERE (Expired=CONST(No));
                                                   OnValidate=BEGIN
                                                                CheckLine(FALSE);

                                                                IF ("Object Description" = '') AND ("Object Description 2" = '') THEN BEGIN
                                                                  CALCFIELDS("Standard Object Description", "Standard Object Description 2");
                                                                  "Object Description" := "Standard Object Description";
                                                                  "Object Description 2" := "Standard Object Description 2";
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ServiceObjectManagement@1100528601 : Codeunit 11012808;
                                                            BEGIN
                                                              IF ServiceObjectManagement.HandleLookupStandardObject('', FALSE, "Standard Object No.") THEN
                                                                VALIDATE("Standard Object No.");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Standard Object No. }
    { 160 ;   ;Standard Object Description;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Standard Object".Description WHERE (No.=FIELD(Standard Object No.)));
                                                   CaptionML=ENU=Standard Object Description;
                                                   Editable=No }
    { 165 ;   ;Standard Object Description 2;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Standard Object"."Description 2" WHERE (No.=FIELD(Standard Object No.)));
                                                   CaptionML=ENU=Standard Object Description 2;
                                                   Editable=No }
    { 170 ;   ;Serial No.          ;Text30        ;CaptionML=ENU=Serial No. }
    { 175 ;   ;Year of Manufacture ;Integer       ;CaptionML=ENU=Year of Manufacture }
    { 180 ;   ;Building            ;Text30        ;CaptionML=ENU=Building }
    { 185 ;   ;Floor               ;Text30        ;CaptionML=ENU=Floor }
    { 190 ;   ;Room                ;Text30        ;CaptionML=ENU=Room }
    { 195 ;   ;Customer Feature    ;Text30        ;CaptionML=ENU=Customer Feature }
    { 200 ;   ;Address (Normalized);Text50        ;CaptionML=ENU=Address (Normalized) }
    { 220 ;   ;Post Code (Normalized);Code20      ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code (Normalized) }
    { 230 ;   ;City (Normalized)   ;Text30        ;CaptionML=ENU=City (Normalized) }
    { 250 ;   ;Phone No. (Normalized);Text30      ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. (Normalized) }
    { 260 ;   ;Fax No. (Normalized);Text30        ;CaptionML=ENU=Fax No. (Normalized) }
    { 280 ;   ;Location Description;Text50        ;CaptionML=ENU=Location Description }
    { 300 ;   ;Ready for Processing;Boolean       ;CaptionML=ENU=Ready for Processing }
    { 310 ;   ;No. of Matching Addresses;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Count("Object Imp. Worksheet Line" WHERE (Worksheet No.=FIELD(Worksheet No.),
                                                                                                         Post Code (Normalized)=FIELD("Post Code (Normalized)"),
                                                                                                         House No.=FIELD(House No.),
                                                                                                         House No. Ext.=FIELD(House No. Ext.)));
                                                   CaptionML=ENU=No. of Matching Addresses;
                                                   Editable=No }
    { 315 ;   ;No. of Matching Objects;Integer    ;FieldClass=FlowField;
                                                   CalcFormula=Count("Object Imp. Worksheet Line" WHERE (Worksheet No.=FIELD(Worksheet No.),
                                                                                                         Post Code (Normalized)=FIELD("Post Code (Normalized)"),
                                                                                                         House No.=FIELD(House No.),
                                                                                                         House No. Ext.=FIELD(House No. Ext.),
                                                                                                         Standard Object No.=FIELD(Standard Object No.)));
                                                   CaptionML=ENU=No. of Matching Objects;
                                                   Editable=No }
    { 330 ;   ;Created Location No.;Code20        ;TableRelation="Service Location";
                                                   CaptionML=ENU=Created Location No.;
                                                   Editable=No }
    { 335 ;   ;Imported Survey Location Code;Code10;
                                                   TableRelation=IF (Import Type=CONST(Service Survey)) "Service Survey Location"."Location Code";
                                                   CaptionML=ENU=Imported Survey Location Code;
                                                   Editable=No }
    { 340 ;   ;Created Object No.  ;Code20        ;TableRelation=Service-Object;
                                                   CaptionML=ENU=Created Object No.;
                                                   Editable=No }
    { 345 ;   ;Imported Surv. Loc. Object No.;Integer;
                                                   TableRelation=IF (Import Type=CONST(Service Survey)) "Serv. Surv. Location Object"."Seq. No.";
                                                   CaptionML=ENU=Imported Survey Location Object No.;
                                                   Editable=No }
    { 360 ;   ;Create Location     ;Boolean       ;CaptionML=ENU=Create Location }
    { 370 ;   ;Create Object       ;Boolean       ;CaptionML=ENU=Create Object }
    { 380 ;   ;Plot No.            ;Code10        ;TableRelation=IF (Company Name=CONST()) Plot."Plot No." WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                CheckLine(FALSE);
                                                              END;

                                                   CaptionML=ENU=Plot No. }
    { 390 ;   ;Project No.         ;Code20        ;TableRelation=IF (Company Name=CONST()) Job;
                                                   OnValidate=BEGIN
                                                                CheckLine(FALSE);
                                                              END;

                                                   CaptionML=ENU=Project No. }
    { 400 ;   ;Company Name        ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Object Imp. Worksheet"."Company Name" WHERE (No.=FIELD(Worksheet No.)));
                                                   CaptionML=ENU=Company Name;
                                                   Editable=No }
    { 410 ;   ;Import Type         ;Option        ;CaptionML=ENU=Import Type;
                                                   OptionCaptionML=ENU=Service Contract,Service Survey;
                                                   OptionString=Service Contract,Service Survey;
                                                   Editable=No }
    { 420 ;   ;Code                ;Code20        ;TableRelation=IF (Import Type=CONST(Service Contract)) Service-Contract
                                                                 ELSE IF (Import Type=CONST(Service Survey)) "Service Survey" WHERE (Input Method=CONST(Object));
                                                   CaptionML=ENU=Code;
                                                   Editable=No }
    { 430 ;   ;Found Survey Location Code;Code20  ;TableRelation=IF (Import Type=CONST(Service Survey)) "Service Survey Location"."Location Code" WHERE (Survey No.=FIELD(Code));
                                                   CaptionML=ENU=Found Survey Location Code;
                                                   Editable=No }
    { 440 ;   ;E-Mail              ;Text80        ;CaptionML=ENU=E-Mail }
    { 450 ;   ;Customer Feature (Location);Text30 ;CaptionML=ENU=Customer Feature (Location) }
    { 460 ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Global Dimension 1 Code }
    { 470 ;   ;Travel Cost Code    ;Code10        ;TableRelation="Travel Cost Code";
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Travel Cost Code }
    { 480 ;   ;Object Customer     ;Code20        ;CaptionML=ENU=Object Customer }
    { 490 ;   ;Subcontractor       ;Code20        ;TableRelation=Vendor WHERE (Subcontractor=CONST(Yes));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Subcontractor }
    { 500 ;   ;Price Agreement     ;Decimal       ;CaptionML=ENU=Price Agreement (LCY);
                                                   BlankZero=Yes }
    { 510 ;   ;Starting Date Maintenance;Date     ;CaptionML=ENU=Starting Date Maintenance }
    { 520 ;   ;Service Package     ;Code20        ;TableRelation="Service Package" WHERE (Source Type=CONST(None));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Service Package }
    { 530 ;   ;Subcontracting      ;Boolean       ;CaptionML=ENU=Subcontracting }
    { 540 ;   ;In use since        ;Date          ;CaptionML=ENU=In use since }
    { 550 ;   ;Quantity            ;Integer       ;InitValue=1;
                                                   OnValidate=VAR
                                                                ObjectImpWorksheet@1100528600 : Record 11071713;
                                                              BEGIN
                                                                IF Quantity <> 1 THEN BEGIN
                                                                  IF NOT ObjectImpWorksheet.GET("Worksheet No.") THEN
                                                                    ObjectImpWorksheet.INIT;
                                                                  ObjectImpWorksheet.TESTFIELD("Import Type", ObjectImpWorksheet."Import Type"::"Service Survey");
                                                                END;
                                                                CheckLine(FALSE);
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   MinValue=1;
                                                   BlankZero=Yes }
    { 560 ;   ;Quantity per Object ;Integer       ;InitValue=1;
                                                   OnValidate=BEGIN
                                                                CheckLine(FALSE);
                                                              END;

                                                   CaptionML=ENU=Quantity per Object;
                                                   MinValue=1;
                                                   BlankZero=Yes }
    { 570 ;   ;Complex Code        ;Code10        ;TableRelation=Complex;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Complex Code }
    { 580 ;   ;Object Description  ;Text50        ;CaptionML=ENU=Object Description }
    { 590 ;   ;Object Description 2;Text50        ;CaptionML=ENU=Object Description 2 }
    { 600 ;   ;Object Specification 1;Text80      ;CaptionML=ENU=Object Specification 1 }
    { 610 ;   ;Object Specification 2;Text80      ;CaptionML=ENU=Object Specification 2 }
    { 620 ;   ;Object Specification 3;Text80      ;CaptionML=ENU=Object Specification 3 }
    { 630 ;   ;Object Specification 4;Text80      ;CaptionML=ENU=Object Specification 4 }
    { 640 ;   ;Object Specification 5;Text80      ;CaptionML=ENU=Object Specification 5 }
    { 650 ;   ;Object Specification 6;Text80      ;CaptionML=ENU=Object Specification 6 }
    { 660 ;   ;Object Specification 7;Text80      ;CaptionML=ENU=Object Specification 7 }
    { 670 ;   ;Object Specification 8;Text80      ;CaptionML=ENU=Object Specification 8 }
    { 680 ;   ;Object Specification 9;Text80      ;CaptionML=ENU=Object Specification 9 }
    { 690 ;   ;Object Specification 10;Text80     ;CaptionML=ENU=Object Specification 10 }
    { 1000;   ;Message             ;Text250       ;CaptionML=ENU=Message }
  }
  KEYS
  {
    {    ;Worksheet No.,Line No.                  ;Clustered=Yes }
    {    ;Post Code (Normalized),House No.,House No. Ext. }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PostCode@1100526200 : Record 225;
      ObjectImpWorkSheetMgtCU@1100526202 : Codeunit 11012839;
      Text000@1100528600 : TextConst 'ENU=%1 not filled';
      Text001@1100528601 : TextConst 'ENU=%1 %2 doesn''t exist';
      Text002@1100528602 : TextConst 'ENU=%1 could not be determined';
      Text003@1100528603 : TextConst 'ENU=Post Code and House No. do not match Service Location %1';

    PROCEDURE Normalize@1100526202(ISkipCheckCreateFlags@1100528600 : Boolean);
    VAR
      HouseNoExt@1100526200 : Code[10];
    BEGIN
      IF NOT ObjectImpWorkSheetMgtCU.NormalizePostCode("Post Code", "Country/Region Code", "Post Code (Normalized)") THEN
        "Post Code (Normalized)" := '';
      IF "House No." = '' THEN
        "House No." := ObjectImpWorkSheetMgtCU.DetermineHouseNo(Address, HouseNoExt);
      IF "House No. Ext." = '' THEN
        "House No. Ext." := HouseNoExt;
      IF ("Found Location No." = '') OR NOT IsCorrectServiceLocationNo("Found Location No.") THEN
        DetermineLocationNo("Found Location No.");
      DetermineSurveyLocationCode("Post Code (Normalized)", "House No.", "House No. Ext.", "Found Survey Location Code");

      IF NOT ISkipCheckCreateFlags THEN BEGIN
        IF (xRec."Post Code (Normalized)" <> "Post Code (Normalized)") OR (xRec."House No." <> "House No.") OR
          (xRec."House No. Ext." <> "House No. Ext.") THEN
          "Create Location" :=
            ((("Found Location No." = '') AND ("Import Type" = "Import Type"::"Service Contract")) OR
             (("Found Survey Location Code" = '') AND ("Import Type" = "Import Type"::"Service Survey"))) AND
            NOT IsLocationCreatedElsewhere();
        IF "Create Location" AND IsLocationCreatedElsewhere THEN
          "Create Location" := FALSE;
      END;

      IF NOT ISkipCheckCreateFlags THEN BEGIN
        IF "Import Type" = "Import Type"::"Service Contract" THEN BEGIN
          IF (xRec."Found Location No." <> "Found Location No.") OR
             (xRec."Standard Object No." <> "Standard Object No.")
          THEN
            "Create Object" := NOT ObjectExists() AND NOT IsObjectCreatedElsewhere;
        END ELSE
          "Create Object" := TRUE;
      END;

      "Address (Normalized)" := '';
      "City (Normalized)" := '';
      IF "Address (Normalized)" <> '' THEN
        IF "House No. Ext." <> '' THEN
          "Address (Normalized)" := STRSUBSTNO('%1 %2 %3', "Address (Normalized)", "House No.", "House No. Ext.")
        ELSE
          "Address (Normalized)" := STRSUBSTNO('%1 %2', "Address (Normalized)", "House No.");
    END;

    PROCEDURE DetermineLocationNo@1100526203(VAR OLocationNo@1100526202 : Code[20]);
    VAR
      ServiceLocation@1100526200 : Record 11012801;
      HouseNrExt@1100526201 : Code[20];
    BEGIN
      OLocationNo := '';
      GetServiceLocationDS(ServiceLocation);
      IF ServiceLocation.FINDFIRST THEN
        OLocationNo := ServiceLocation."No.";
    END;

    PROCEDURE DetermineSurveyLocationCode@1100528611(IPostCode@1100526204 : Code[20];IHouseNo@1100526205 : Text[30];IHouseNoExt@1100526206 : Text[30];VAR OLocationCode@1100526202 : Code[10]);
    VAR
      ServiceSurveyLocation@1100526200 : Record 11071804;
      HouseNrExt@1100526201 : Code[20];
    BEGIN
      IF "Import Type" <> "Import Type"::"Service Survey" THEN
        EXIT;

      OLocationCode := '';
      IF IHouseNo + IPostCode = '' THEN
        EXIT;

      ServiceSurveyLocation.SETCURRENTKEY("Survey No.", "Post Code");
      ServiceSurveyLocation.SETRANGE("Survey No.", Code);
      ServiceSurveyLocation.SETRANGE("Post Code", IPostCode);
      IF NOT ServiceSurveyLocation.FINDSET THEN
        EXIT;

      REPEAT
        IF (ObjectImpWorkSheetMgtCU.DetermineHouseNo(ServiceSurveyLocation.Address, HouseNrExt) = IHouseNo) AND
          (HouseNrExt = IHouseNoExt) THEN
          OLocationCode:= ServiceSurveyLocation."Location Code";
      UNTIL ServiceSurveyLocation.NEXT = 0;
    END;

    PROCEDURE CreateLocation@1100525013();
    VAR
      ServiceLocation@1100525000 : Record 11012801;
      ServiceContract@1100526200 : Record 11012812;
    BEGIN
      IF NOT "Create Location" THEN
        EXIT;

      IF "Created Location No." <> '' THEN
        EXIT;

      GetServiceContract(ServiceContract);

      ServiceLocation.INIT;
      ServiceLocation.INSERT(TRUE);

      ServiceLocation.VALIDATE(Description, "Location Description");
      ServiceLocation."Creation Date" := TODAY;
      ServiceLocation.Address := "Address (Normalized)";
      ServiceLocation."Address 2" := "Address 2";
      ServiceLocation.City := "City (Normalized)";
      ServiceLocation."Post Code" := "Post Code (Normalized)";
      ServiceLocation."Country/Region Code" := "Country/Region Code";
      ServiceLocation."Customer No." := ServiceContract."Customer No.";
      ServiceLocation."Customer Feature" := "Customer Feature (Location)";
      ServiceLocation."Phone No." := "Phone No. (Normalized)";
      ServiceLocation.EvaluatePostCodeGroup;
      ServiceLocation.VALIDATE("Global Dimension 1 Code", "Global Dimension 1 Code");
      ServiceLocation.VALIDATE("Travel Cost Code", "Travel Cost Code");
      ServiceLocation."Fax No." := "Fax No. (Normalized)";
      ServiceLocation."E-Mail" := "E-Mail";
      ServiceLocation."Complex Code" := "Complex Code";
      ServiceLocation.MODIFY(TRUE);

      "Created Location No." := ServiceLocation."No.";
      MODIFY;
    END;

    LOCAL PROCEDURE CreateComplex@1100528610();
    VAR
      Complex@1100528600 : Record 11071816;
      ServiceContract@1100528601 : Record 11012812;
    BEGIN
      IF "Complex Code" = '' THEN
        EXIT;
      IF NOT Complex.GET("Complex Code") THEN BEGIN
        GetServiceContract(ServiceContract);

        Complex.VALIDATE(Code, "Complex Code");
        Complex.INSERT(TRUE);

        Complex.VALIDATE("Customer No.", ServiceContract."Customer No.");
        Complex.MODIFY(TRUE);
      END;
    END;

    PROCEDURE CreateObject@1100525014();
    VAR
      ServiceObject@1100525000 : Record 11071691;
      ContractObject@1100526200 : Record 11071702;
      ContractObjectMaintenance@1100528603 : Record 11071692;
      ServiceContract@1100526203 : Record 11012812;
      ObjectImpWorksheet@1100528600 : Record 11071713;
      ServiceSetup@1100528602 : Record 11012800;
      ContractAmountsbyDate@1100528604 : Record 11071708;
      SubcontractorService@1100528605 : Record 11071789;
      ObjectSpecificationMgt@1100528601 : Codeunit 11012848;
    BEGIN
      IF NOT "Create Object" THEN
        EXIT;

      IF "Created Object No." <>  '' THEN
        EXIT;

      GetServiceContract(ServiceContract);
      IF "Standard Object No." <> '' THEN BEGIN
        ServiceObject.INIT;
        ServiceObject."No." := '';
        ServiceObject.INSERT(TRUE);

        ServiceObject.VALIDATE("Standard Object No.", "Standard Object No.");
        IF "Created Location No." <> '' THEN
          ServiceObject.VALIDATE("Service Location No.", "Created Location No.")
        ELSE
          ServiceObject.VALIDATE("Service Location No.", "Found Location No.");
        ServiceObject."Warranty Start Date Customer" := 0D;
        ServiceObject."In use since" := "In use since";
        ServiceObject.Building := Building;
        ServiceObject.Floor := Floor;
        ServiceObject.Room := Room;
        ServiceObject."Customer Feature" := "Customer Feature";
        ServiceObject."Object Customer" := "Object Customer";
        ServiceObject.Quantity := "Quantity per Object";
        ServiceObject.Description := "Object Description";
        ServiceObject."Description 2" := "Object Description 2";

        ObjectImpWorksheet.GET("Worksheet No.");
        ServiceObject.VALIDATE("Company Name", ObjectImpWorksheet."Company Name");
        ServiceObject.VALIDATE("Project No.", "Project No.");
        ServiceObject.VALIDATE("Plot No.", "Plot No.");
        ServiceObject.MODIFY(TRUE);

        "Created Object No." := ServiceObject."No.";
        MODIFY;

        ServiceSetup.GET;
        IF "Serial No." <> '' THEN BEGIN
          ServiceSetup.TESTFIELD("Spec. Code Serial No.");
          ObjectSpecificationMgt.SetObjectSpecValue(ServiceObject."No.", ServiceSetup."Spec. Code Serial No.", "Serial No.");
        END;
        IF "Year of Manufacture" <> 0 THEN BEGIN
          ServiceSetup.TESTFIELD("Spec. Code Year of Manufact.");
          ObjectSpecificationMgt.SetObjectSpecValue(ServiceObject."No.", ServiceSetup."Spec. Code Year of Manufact.",
            FORMAT("Year of Manufacture"));
        END;

        IF ServiceContract."No." <> '' THEN BEGIN
          ContractObject.INIT;
          ContractObject.SetDoNotCreateMaintenanceLines(TRUE);
          ContractObject.VALIDATE("Service Contract No.", ServiceContract."No.");
          ContractObject.VALIDATE("Service Object No.", ServiceObject."No.");
          ContractObject.VALIDATE("Starting Date", ServiceContract."Starting Date");
          ContractObject.VALIDATE("Ending Date", ServiceContract."Ending Date");
          ContractObject.Subcontracting := Subcontracting;
          ContractObject.INSERT(TRUE);
          ContractObject.SetDoNotCreateMaintenanceLines(FALSE);
          ContractObject.SetDoNotConfirmMaintenanceSchemeCreation(TRUE); //mg, 03-07-2015
          IF "Service Package" <> '' THEN
            ContractObject.VALIDATE("Service Package", "Service Package")
          ELSE
            ContractObject.VALIDATE("Service Package", ServiceContract."Service Package");
          ContractObject.MODIFY(TRUE);

          IF ("Starting Date Maintenance" <> 0D) OR (Subcontractor <> '') THEN BEGIN
            ContractObjectMaintenance.SETRANGE("Service Contract No.", ServiceContract."No.");
            ContractObjectMaintenance.SETRANGE("Object No.", ServiceObject."No.");
            IF ContractObjectMaintenance.FINDSET(TRUE) THEN BEGIN
              REPEAT
                IF "Starting Date Maintenance" <> 0D THEN BEGIN
                  ContractObjectMaintenance.VALIDATE("Starting Date Maintenance", "Starting Date Maintenance");
                  ContractObjectMaintenance.MODIFY(TRUE);
                END;
                IF Subcontractor <> '' THEN BEGIN
                  SubcontractorService.VALIDATE("Service Contract No.", ServiceContract."No.");
                  SubcontractorService.VALIDATE("Object No.", ServiceObject."No.");
                  SubcontractorService.VALIDATE("Maintenance Scheme Code", ContractObjectMaintenance."Maintenance Scheme");
                  SubcontractorService.VALIDATE(Subcontractor, Subcontractor);
                  SubcontractorService.INSERT(TRUE);
                END;
              UNTIL ContractObjectMaintenance.NEXT = 0;
            END ELSE BEGIN
              CLEAR(SubcontractorService);
              SubcontractorService.SETRANGE("Service Contract No.", '');
              SubcontractorService.SETRANGE("Complex Code", '');
              SubcontractorService.SETRANGE("Service Location No.", GetLocationNo);
              SubcontractorService.SETRANGE("Object No.", '');
              SubcontractorService.SETRANGE("Maintenance Scheme Code", '');
              SubcontractorService.SETRANGE(Subcontractor, Subcontractor);
              IF SubcontractorService.ISEMPTY THEN BEGIN
                SubcontractorService.VALIDATE("Service Location No.", GetLocationNo);
                SubcontractorService.VALIDATE(Subcontractor, Subcontractor);
                SubcontractorService.INSERT(TRUE);
              END;
            END;
          END;

          IF "Price Agreement" <> 0 THEN BEGIN
            ContractAmountsbyDate.Type := ContractAmountsbyDate.Type::"Price Agreement";
            ContractAmountsbyDate."Service Contract No." := ServiceContract."No.";
            ContractAmountsbyDate."Service Object No." := ServiceObject."No.";
            ContractAmountsbyDate."Index Date" := ServiceContract."Starting Date";
            ContractAmountsbyDate.VALIDATE("Amount (LCY)", "Price Agreement");
            ContractAmountsbyDate.INSERT(TRUE);
          END;
        END;

        HandleObjectSpecifications(ServiceObject."No.");
      END;
    END;

    PROCEDURE GetServiceContract@1100526206(VAR OServiceContract@1100526200 : Record 11012812);
    VAR
      ObjectImpWorksheet@1100526202 : Record 11071713;
    BEGIN
      CLEAR(OServiceContract);
      ObjectImpWorksheet.GET("Worksheet No.");
      IF ObjectImpWorksheet."Import Type" = ObjectImpWorksheet."Import Type"::"Service Contract" THEN
        IF ObjectImpWorksheet.Code <> '' THEN
          OServiceContract.GET(ObjectImpWorksheet.Code);
    END;

    PROCEDURE Process@1100526201();
    VAR
      ObjectImpWorksheet@1100528600 : Record 11071713;
    BEGIN
      IF NOT CheckLine(TRUE) THEN EXIT;

      IF NOT "Ready for Processing" THEN
        EXIT;

      ObjectImpWorksheet.GET("Worksheet No.");
      ObjectImpWorksheet.TESTFIELD(Code);
      CASE ObjectImpWorksheet."Import Type" OF
        ObjectImpWorksheet."Import Type"::"Service Contract":
          BEGIN
            CreateComplex;
            CreateLocation;
            CreateObject;
          END;
        ObjectImpWorksheet."Import Type"::"Service Survey":
          BEGIN
            CreateSurveyLocation;
            CreateSurveyLocObject;
          END;
      END;
    END;

    PROCEDURE IsLocationCreatedElsewhere@1100526207() : Boolean;
    VAR
      ObjectImpWorksheetLine@1100526200 : Record 11071714;
    BEGIN
      ObjectImpWorksheetLine.SETRANGE("Worksheet No.", "Worksheet No.");
      ObjectImpWorksheetLine.SETRANGE("Post Code (Normalized)", "Post Code (Normalized)");
      ObjectImpWorksheetLine.SETRANGE("House No.", "House No.");
      ObjectImpWorksheetLine.SETRANGE("House No. Ext.", "House No. Ext.");
      ObjectImpWorksheetLine.SETRANGE("Create Location", TRUE);
      ObjectImpWorksheetLine.SETFILTER("Line No.", '<>%1', "Line No.");
      EXIT(NOT ObjectImpWorksheetLine.ISEMPTY);
    END;

    PROCEDURE IsObjectCreatedElsewhere@1100528604() : Boolean;
    VAR
      ObjectImpWorksheetLine@1100526200 : Record 11071714;
    BEGIN
      ObjectImpWorksheetLine.SETRANGE("Worksheet No.", "Worksheet No.");
      ObjectImpWorksheetLine.SETRANGE("Post Code (Normalized)", "Post Code (Normalized)");
      ObjectImpWorksheetLine.SETRANGE("House No.", "House No.");
      ObjectImpWorksheetLine.SETRANGE("House No. Ext.", "House No. Ext.");
      ObjectImpWorksheetLine.SETRANGE("Create Object", TRUE);
      ObjectImpWorksheetLine.SETRANGE("Standard Object No.", "Standard Object No.");
      ObjectImpWorksheetLine.SETFILTER("Line No.", '<>%1', "Line No.");
      EXIT(NOT ObjectImpWorksheetLine.ISEMPTY);
    END;

    PROCEDURE CheckLine@1100528600(ISkipCheckCreateFlags@1100528603 : Boolean) : Boolean;
    VAR
      StandardObject@1100528600 : Record 11020334;
      Job@1100528601 : Record 11072003;
      Plot@1100528602 : Record 11012500;
      DimensionValue@1100528604 : Record 349;
      TravelCostCode@1100528605 : Record 11071801;
      Vendor@1100528606 : Record 23;
      ServicePackage@1100528607 : Record 11012806;
    BEGIN
      Normalize(ISkipCheckCreateFlags);

      Message := '';
      IF "Standard Object No." = '' THEN
        Message := STRSUBSTNO(Text000, FIELDCAPTION("Standard Object No."));

      IF NOT StandardObject.GET("Standard Object No.") THEN
        Message := STRSUBSTNO(Text001, FIELDCAPTION("Standard Object No."), "Standard Object No.");

      IF "Address (Normalized)" = '' THEN
        Message := STRSUBSTNO(Text002, FIELDCAPTION("Address (Normalized)"));

      IF "Post Code (Normalized)" = '' THEN
        Message := STRSUBSTNO(Text002, FIELDCAPTION("Post Code (Normalized)"));

      IF "City (Normalized)" = '' THEN
        Message := STRSUBSTNO(Text002, FIELDCAPTION("City (Normalized)"));

      CALCFIELDS("Company Name");
      IF "Project No." <> '' THEN BEGIN
        IF "Company Name" <> '' THEN
          Job.CHANGECOMPANY("Company Name");
        IF NOT Job.GET("Project No.") THEN
          Message := STRSUBSTNO(Text001, FIELDCAPTION("Project No."), "Project No.");
      END;

      IF "Plot No." <> '' THEN BEGIN
        IF "Company Name" <> '' THEN
          Plot.CHANGECOMPANY("Company Name");
        IF NOT Plot.GET("Project No.", "Plot No.") THEN
          Message := STRSUBSTNO(Text001, FIELDCAPTION("Plot No."), "Plot No.");
      END;

      IF "Global Dimension 1 Code" <> '' THEN BEGIN
        DimensionValue.SETRANGE("Global Dimension No.", 1);
        DimensionValue.SETRANGE(Code, "Global Dimension 1 Code");
        IF DimensionValue.ISEMPTY THEN
          Message := STRSUBSTNO(Text001, FIELDCAPTION("Global Dimension 1 Code"), "Global Dimension 1 Code");
      END;

      IF "Travel Cost Code" <> '' THEN
        IF NOT TravelCostCode.GET("Travel Cost Code") THEN
          Message := STRSUBSTNO(Text001, FIELDCAPTION("Travel Cost Code"), "Travel Cost Code");

      IF Subcontractor <> '' THEN BEGIN
        Vendor.SETRANGE("No.", Subcontractor);
        Vendor.SETRANGE(Subcontractor, TRUE);
        IF Vendor.ISEMPTY THEN
          Message := STRSUBSTNO(Text001, FIELDCAPTION(Subcontractor), Subcontractor);
      END;

      IF "Service Package" <> '' THEN BEGIN
        ServicePackage.SETRANGE(Code, "Service Package");
        ServicePackage.SETRANGE("Source Type", ServicePackage."Source Type"::None);
        IF ServicePackage.ISEMPTY THEN
          Message := STRSUBSTNO(Text001, FIELDCAPTION("Service Package"), "Service Package");
      END;

      IF Quantity = 0 THEN
        Message := STRSUBSTNO(Text000, FIELDCAPTION(Quantity));
      IF "Quantity per Object" = 0 THEN
        Message := STRSUBSTNO(Text000, FIELDCAPTION("Quantity per Object"));

      CALCFIELDS("No. of Matching Addresses", "No. of Matching Objects");
      "Ready for Processing" := Message = '';
      EXIT(Message = '');
    END;

    PROCEDURE ObjectExists@1100528602() : Boolean;
    VAR
      ServiceObject@1100528600 : Record 11071691;
    BEGIN
      IF GetLocationNo = '' THEN
        EXIT;
      ServiceObject.SETCURRENTKEY("Service Location No.");
      ServiceObject.SETRANGE("Service Location No.", GetLocationNo);
      ServiceObject.SETRANGE("Standard Object No.", "Standard Object No.");
      EXIT(NOT ServiceObject.ISEMPTY);
    END;

    PROCEDURE GetNoOfObjects@1100528601() : Integer;
    VAR
      ServiceObject@1100528600 : Record 11071691;
    BEGIN
      IF GetLocationNo = '' THEN
        EXIT;
      ServiceObject.SETCURRENTKEY("Service Location No.");
      ServiceObject.SETRANGE("Service Location No.", GetLocationNo);
      EXIT(ServiceObject.COUNT);
    END;

    PROCEDURE LookupObjects@1100528603();
    VAR
      ServiceObject@1100528600 : Record 11071691;
    BEGIN
      IF GetLocationNo = '' THEN
        EXIT;

      ServiceObject.SETCURRENTKEY("Service Location No.");
      ServiceObject.SETRANGE("Service Location No.", GetLocationNo);
      PAGE.RUN(0,ServiceObject);
    END;

    PROCEDURE GetLocationNo@1100528606() : Code[20];
    BEGIN
      IF "Found Location No." <> '' THEN
        EXIT("Found Location No.")
      ELSE
        EXIT("Created Location No.");
    END;

    PROCEDURE CreateSurveyLocation@1100528608();
    VAR
      ObjectImpWorksheet@1100528601 : Record 11071713;
      ServiceSurveyLocation@1100528600 : Record 11071804;
      ServiceSetup@1100528603 : Record 11012800;
      LocationCode@1100528602 : Code[10];
    BEGIN
      IF NOT "Create Location" THEN
        EXIT;

      IF "Imported Survey Location Code" <> '' THEN
        EXIT;

      ServiceSetup.GET;
      ObjectImpWorksheet.GET("Worksheet No.");
      ObjectImpWorksheet.TESTFIELD("Import Type", ObjectImpWorksheet."Import Type"::"Service Survey");

      ServiceSurveyLocation.SETRANGE("Survey No.", ObjectImpWorksheet.Code);
      IF ServiceSurveyLocation.FINDLAST THEN
        LocationCode := ServiceSurveyLocation."Location Code";
      IF LocationCode = '' THEN
        LocationCode := '001'
      ELSE
        LocationCode := INCSTR(LocationCode);

      ServiceSurveyLocation.INIT;
      ServiceSurveyLocation."Survey No." := ObjectImpWorksheet.Code;
      ServiceSurveyLocation."Location Code" := LocationCode;
      ServiceSurveyLocation.Address := "Address (Normalized)";
      ServiceSurveyLocation."Address 2" := "Address 2";
      ServiceSurveyLocation."Post Code" := "Post Code (Normalized)";
      ServiceSurveyLocation."Country/Region Code" := "Country/Region Code";
      ServiceSurveyLocation.City := "City (Normalized)";
      ServiceSurveyLocation."Phone No." := "Phone No. (Normalized)";
      ServiceSurveyLocation."Fax No." := "Fax No. (Normalized)";
      ServiceSurveyLocation."E-Mail" := '';
      ServiceSurveyLocation."Mobile Phone No." := '';
      ServiceSurveyLocation."Customer Feature" := '';
      ServiceSurveyLocation."Complex Code" := '';
      ServiceSurveyLocation."Location Structure Format" := ServiceSetup."Def. Location Structure Format";
      ServiceSurveyLocation."Include in Contract" := TRUE;
      ServiceSurveyLocation."Service Location No." := "Found Location No.";
      ServiceSurveyLocation."House No." := "House No.";
      ServiceSurveyLocation."House No. Ext." := "House No. Ext.";
      ServiceSurveyLocation."E-Mail" := "E-Mail";
      ServiceSurveyLocation.INSERT(TRUE);

      "Imported Survey Location Code" := ServiceSurveyLocation."Location Code";
      MODIFY;
    END;

    PROCEDURE CreateSurveyLocObject@1100528609();
    VAR
      ObjectImpWorksheet@1100528600 : Record 11071713;
      ServSurvLocationObject@1100528601 : Record 11071813;
      ServiceSurvey@1100528602 : Record 11071803;
    BEGIN
      IF NOT "Create Object" THEN
        EXIT;
      IF "Imported Surv. Loc. Object No." <> 0 THEN
        EXIT;

      ObjectImpWorksheet.GET("Worksheet No.");
      ObjectImpWorksheet.TESTFIELD("Import Type", ObjectImpWorksheet."Import Type"::"Service Survey");
      ServiceSurvey.GET(ObjectImpWorksheet.Code);

      ServSurvLocationObject.INIT;
      ServSurvLocationObject."Survey No." := ObjectImpWorksheet.Code;
      IF "Imported Survey Location Code" <> '' THEN
        ServSurvLocationObject."Location Code" := "Imported Survey Location Code"
      ELSE
        ServSurvLocationObject."Location Code" := "Found Survey Location Code";
      ServSurvLocationObject.VALIDATE("Standard Object No.", "Standard Object No.");
      ServSurvLocationObject.INSERT(TRUE);
      ServSurvLocationObject.Quantity := Quantity;
      ServSurvLocationObject."Quantity per Object" := "Quantity per Object";
      ServSurvLocationObject."Object Customer" := '';
      ServSurvLocationObject.Building := Building;
      ServSurvLocationObject.Floor := Floor;
      ServSurvLocationObject.Room := Room;
      ServSurvLocationObject."Customer Feature" := "Customer Feature";
      ServSurvLocationObject."Year of Manufacture" := "Year of Manufacture";
      ServSurvLocationObject."Serial No." := "Serial No.";
      ServSurvLocationObject."Customer Object Group" := '';
      IF "Service Package" <> '' THEN
        ServSurvLocationObject.VALIDATE("Service Package", "Service Package")
      ELSE
        ServSurvLocationObject.VALIDATE("Service Package");
      ServSurvLocationObject.MODIFY(TRUE);

      "Imported Surv. Loc. Object No." := ServSurvLocationObject."Seq. No.";
      MODIFY;
    END;

    PROCEDURE UpdateTypeAndCode@1100528605();
    VAR
      ObjectImpWorksheet@1100528600 : Record 11071713;
    BEGIN
      IF ObjectImpWorksheet.GET("Worksheet No.") THEN BEGIN
        "Import Type" := ObjectImpWorksheet."Import Type";
        Code := ObjectImpWorksheet.Code;
      END;
    END;

    LOCAL PROCEDURE GetServiceLocationDS@1100528607(VAR OServiceLocation@1100528600 : Record 11012801);
    BEGIN
      OServiceLocation.RESET;
      OServiceLocation.SETCURRENTKEY("Post Code");
      OServiceLocation.SETRANGE("Post Code", "Post Code (Normalized)");
      OServiceLocation.SETRANGE("House No.", "House No.");
      OServiceLocation.SETRANGE("House No. Ext.", "House No. Ext.");
    END;

    LOCAL PROCEDURE IsCorrectServiceLocationNo@1100528613(IServiceLocationNo@1100528600 : Code[20]) : Boolean;
    VAR
      ServiceLocation@1100528601 : Record 11012801;
    BEGIN
      GetServiceLocationDS(ServiceLocation);
      ServiceLocation.SETRANGE("No.", IServiceLocationNo);
      EXIT(NOT ServiceLocation.ISEMPTY);
    END;

    LOCAL PROCEDURE HandleObjectSpecifications@1100528612(IServiceObjectNo@1100528600 : Code[20]);
    VAR
      ObjectImpWorksheetSpec@1100528601 : Record 11072286;
      ObjectSpecificationMgt@1100528602 : Codeunit 11012848;
    BEGIN
      IF IServiceObjectNo = '' THEN
        EXIT;
      ObjectImpWorksheetSpec.SETRANGE("Worksheet No.", "Worksheet No.");
      ObjectImpWorksheetSpec.SETFILTER("Specification Code", '<>%1', '');
      IF ObjectImpWorksheetSpec.FINDFIRST THEN
        REPEAT
          CASE ObjectImpWorksheetSpec."Specification No." OF
            ObjectImpWorksheetSpec."Specification No."::"Specification 1":
              ObjectSpecificationMgt.SetObjectSpecValue(
                IServiceObjectNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 1");
            ObjectImpWorksheetSpec."Specification No."::"Specification 2":
              ObjectSpecificationMgt.SetObjectSpecValue(
                IServiceObjectNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 2");
            ObjectImpWorksheetSpec."Specification No."::"Specification 3":
              ObjectSpecificationMgt.SetObjectSpecValue(
                IServiceObjectNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 3");
            ObjectImpWorksheetSpec."Specification No."::"Specification 4":
              ObjectSpecificationMgt.SetObjectSpecValue(
                IServiceObjectNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 4");
            ObjectImpWorksheetSpec."Specification No."::"Specification 5":
              ObjectSpecificationMgt.SetObjectSpecValue(
                IServiceObjectNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 5");
            ObjectImpWorksheetSpec."Specification No."::"Specification 6":
              ObjectSpecificationMgt.SetObjectSpecValue(
                IServiceObjectNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 6");
            ObjectImpWorksheetSpec."Specification No."::"Specification 7":
              ObjectSpecificationMgt.SetObjectSpecValue(
                IServiceObjectNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 7");
            ObjectImpWorksheetSpec."Specification No."::"Specification 8":
              ObjectSpecificationMgt.SetObjectSpecValue(
                IServiceObjectNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 8");
            ObjectImpWorksheetSpec."Specification No."::"Specification 9":
              ObjectSpecificationMgt.SetObjectSpecValue(
                IServiceObjectNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 9");
            ObjectImpWorksheetSpec."Specification No."::"Specification 10":
              ObjectSpecificationMgt.SetObjectSpecValue(
                IServiceObjectNo, ObjectImpWorksheetSpec."Specification Code", "Object Specification 10");
          END;
        UNTIL ObjectImpWorksheetSpec.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

