OBJECT Table 11071727 Service Order Extension
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Service Order Extension;
  }
  FIELDS
  {
    { 10  ;   ;Service Order No.   ;Code20        ;TableRelation="Service Order".No. WHERE (No.=FIELD(Service Order No.));
                                                   CaptionML=ENU=Service Order No.;
                                                   NotBlank=Yes }
    { 11  ;   ;Service Order Description;Text50   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order".Description WHERE (No.=FIELD(Service Order No.)));
                                                   CaptionML=ENU=Service Order Description;
                                                   Editable=No }
    { 15  ;   ;Problem Text OLD    ;Text250       ;OnValidate=BEGIN
                                                                TESTFIELD("Problem Text OLD", '');
                                                              END;

                                                   CaptionML=ENU=Problem Text OLD;
                                                   Description=DP00106 }
    { 16  ;   ;Internal Text OLD   ;Text250       ;OnValidate=BEGIN
                                                                TESTFIELD("Internal Text OLD", '');
                                                              END;

                                                   CaptionML=ENU=Internal Text OLD;
                                                   Description=DP00106 }
    { 17  ;   ;Solution Text OLD   ;Text250       ;OnValidate=BEGIN
                                                                TESTFIELD("Solution Text OLD", '');
                                                              END;

                                                   CaptionML=ENU=Solution Text OLD;
                                                   Description=DP00106 }
    { 18  ;   ;Invoice Text OLD    ;Text250       ;OnValidate=BEGIN
                                                                TESTFIELD("Invoice Text OLD", '');
                                                              END;

                                                   CaptionML=ENU=Invoice Text OLD;
                                                   Description=DP00106 }
    { 19  ;   ;Cause Text OLD      ;Text250       ;OnValidate=BEGIN
                                                                TESTFIELD("Cause Text OLD", '');
                                                              END;

                                                   CaptionML=ENU=Cause Text OLD;
                                                   Description=DP00106 }
    { 20  ;   ;Master Project      ;Code20        ;TableRelation=Job.No. WHERE (Internal Project=CONST(No));
                                                   OnValidate=BEGIN
                                                                //db, 20-05-11
                                                                IF "Master Project" <> '' THEN BEGIN
                                                                  ServOrderRec.GET("Service Order No.");
                                                                  ProjRec.GET("Master Project");
                                                                //C011621
                                                                //ProjRec.TESTFIELD("Project Status", ProjRec."Project Status"::Production);
                                                                  IF NOT (ProjRec."Project Status" IN [ProjRec."Project Status"::Production, ProjRec."Project Status"::"Technical Finished"]) THEN
                                                                    ProjRec.FIELDERROR("Project Status");
                                                                //
                                                                END;
                                                                IF NOT ProjElemRec.GET("Master Project", "Master Element") THEN
                                                                  "Master Element" := '';
                                                              END;

                                                   CaptionML=ENU=Master Project }
    { 30  ;   ;Master Element      ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Master Project));
                                                   OnValidate=BEGIN
                                                                //db, 20-05-11
                                                                IF "Master Element" <> '' THEN BEGIN
                                                                  ServOrderRec.GET("Service Order No.");
                                                                  ServContrRec.GET(ServOrderRec."Service Contract No.");
                                                                  ServContrRec.TESTFIELD("Internal Contract", TRUE);
                                                                  //db.sn, 12-12-11
                                                                  FormatMgt.FormatElem("Master Element",2,'');
                                                                  ProjElemRec.GET("Master Project", "Master Element");
                                                                  //db.en, 12-12-11
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Master Element }
    { 40  ;   ;Warranty found at   ;Text50        ;CaptionML=ENU=Warranty found at;
                                                   Editable=No }
    { 50  ;   ;Executing Company Name;Text30      ;TableRelation=Company;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Executing Company Name;
                                                   Editable=No }
    { 60  ;   ;Order No. Executing Company;Code20 ;CaptionML=ENU=Order No. Executing Company;
                                                   Editable=No }
    { 70  ;   ;Principal Company Name;Text30      ;TableRelation=Company;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Principal Company Name }
    { 80  ;   ;Serv. Contr. No. Princ. Comp.;Code20;
                                                   CaptionML=ENU=Serv. Contr. No. Princ. Comp. }
    { 90  ;   ;Act. Ref. Point Exec. Company;Integer;
                                                   CaptionML=ENU=Act. Ref. Point Exec. Company;
                                                   Editable=No }
    { 91  ;   ;Act. Ref. Point Ex. Comp. Dsc.;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Reference Point".Description WHERE (No.=FIELD(Act. Ref. Point Exec. Company)));
                                                   CaptionML=ENU=Act. Ref. Point Ex. Comp. Dsc.;
                                                   Editable=No }
    { 100 ;   ;Vessel Name         ;Text30        ;CaptionML=ENU=Vessel Name;
                                                   Description=Vessels }
    { 110 ;   ;Agent No.           ;Code20        ;TableRelation=Agent;
                                                   CaptionML=ENU=Agent No.;
                                                   Description=Vessels }
    { 120 ;   ;Port                ;Code10        ;CaptionML=ENU=Port;
                                                   Description=Vessels }
    { 130 ;   ;Quay Berth          ;Text30        ;CaptionML=ENU=Quay Berth;
                                                   Description=Vessels }
    { 140 ;   ;Price Book Code     ;Code20        ;OnValidate=VAR
                                                                ServiceUnitPriceManagement@1100528600 : Codeunit 11012846;
                                                              BEGIN
                                                                ServiceUnitPriceManagement.ValidateSOUnitPriceChange("Service Order No.", FIELDCAPTION("Price Book Code"));

                                                                IF "Price Book Code" <> xRec."Price Book Code" THEN
                                                                  VALIDATE("Unit Price Set", '');
                                                              END;

                                                   OnLookup=VAR
                                                              ServiceUnitPrice@1100528600 : Record 11071768;
                                                              ServiceUnitPriceList@1100528601 : Page 11125269;
                                                            BEGIN
                                                              ServOrderRec.GET("Service Order No.");

                                                              ServiceUnitPrice.SETRANGE(Type, ServOrderRec."Price Book Type");
                                                              ServiceUnitPriceList.LOOKUPMODE(TRUE);
                                                              ServiceUnitPriceList.SETTABLEVIEW(ServiceUnitPrice);
                                                              IF (ServiceUnitPriceList.RUNMODAL = ACTION::LookupOK) THEN BEGIN
                                                                ServiceUnitPriceList.GETRECORD(ServiceUnitPrice);
                                                                VALIDATE("Price Book Code", ServiceUnitPrice.Code);
                                                                "Price Book Index Date" := ServiceUnitPrice."Index Date";
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Price Book Code }
    { 150 ;   ;Price Book Index Date;Date         ;OnValidate=VAR
                                                                ServiceUnitPriceManagement@1100528600 : Codeunit 11012846;
                                                              BEGIN
                                                                ServiceUnitPriceManagement.ValidateSOUnitPriceChange("Service Order No.", FIELDCAPTION("Price Book Index Date"));
                                                              END;

                                                   CaptionML=ENU=Price Book Index Date }
    { 160 ;   ;Surcharge % Labor   ;Decimal       ;CaptionML=ENU=Surcharge % Labor }
    { 170 ;   ;Surcharge % Material;Decimal       ;CaptionML=ENU=Surcharge % Material }
    { 180 ;   ;Surcharge % Subcontr.;Decimal      ;CaptionML=ENU=Surcharge % Subcontracting }
    { 190 ;   ;Surcharge % Plant   ;Decimal       ;CaptionML=ENU=Surcharge % Plant }
    { 200 ;   ;Surcharge % Sundry  ;Decimal       ;CaptionML=ENU=Surcharge % Sundry }
    { 210 ;   ;Item Price Cost Plus Entry;Option  ;CaptionML=ENU=Item Price Cost Plus Entry;
                                                   OptionCaptionML=ENU=CostPrice,Gross Price - Sales Discount;
                                                   OptionString=CostPrice,GrossMin }
    { 220 ;   ;Appointment Letter Code;Code10     ;TableRelation="SO Appointment Letter";
                                                   CaptionML=ENU=Appointment Letter }
    { 230 ;   ;Date Appointment Letter Sent;Date  ;CaptionML=ENU=Date Appointment Letter Sent;
                                                   Editable=No }
    { 240 ;   ;Expected Starting Date;Date        ;OnValidate=BEGIN
                                                                TestExpectedDateTimes;
                                                                VALIDATE("Expected Dates Modified on", CREATEDATETIME(TODAY, TIME));
                                                              END;

                                                   CaptionML=ENU=Expected Starting Date }
    { 245 ;   ;Expected Starting Time;Time        ;OnValidate=BEGIN
                                                                TestExpectedDateTimes;
                                                                VALIDATE("Expected Dates Modified on", CREATEDATETIME(TODAY, TIME));
                                                              END;

                                                   CaptionML=ENU=Expected Ending Time }
    { 250 ;   ;Expected Ending Date;Date          ;OnValidate=BEGIN
                                                                TestExpectedDateTimes;
                                                                VALIDATE("Expected Dates Modified on", CREATEDATETIME(TODAY, TIME));
                                                              END;

                                                   CaptionML=ENU=Expected Ending Date }
    { 255 ;   ;Expected Ending Time;Time          ;OnValidate=BEGIN
                                                                TestExpectedDateTimes;
                                                                VALIDATE("Expected Dates Modified on", CREATEDATETIME(TODAY, TIME));
                                                              END;

                                                   CaptionML=ENU=Expected Ending Time }
    { 260 ;   ;Expected Dates Modified on;DateTime;OnValidate=VAR
                                                                ServiceOrderStatusMail@1100409000 : Codeunit 11012816;
                                                              BEGIN
                                                                IF "Expected Dates Modified on" <> xRec."Expected Dates Modified on" THEN BEGIN
                                                                  MODIFY;
                                                                  ServiceOrderStatusMail.SetMailAction(3);
                                                                  ServiceOrderStatusMail.ServiceOrderMail("Service Order No.");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Expected Dates Modified on;
                                                   Editable=No }
    { 270 ;   ;Resend Appointment Letter;Boolean  ;OnValidate=BEGIN
                                                                CheckCustomerAppointmentsByLetter;
                                                                IF "Resend Appointment Letter" THEN
                                                                  TESTFIELD("Date Appointment Letter Sent");
                                                              END;

                                                   CaptionML=ENU=Resend Appointment Letter }
    { 280 ;   ;Unit Price Set      ;Code20        ;OnValidate=VAR
                                                                ServiceUnitPriceSet@1100528600 : Record 11072284;
                                                              BEGIN
                                                                IF "Unit Price Set" <> '' THEN BEGIN
                                                                  ServOrderRec.GET("Service Order No.");
                                                                  ServiceUnitPriceSet.GET("Price Book Code", "Price Book Index Date", "Unit Price Set");
                                                                  IF ServOrderRec."Unit Price Status" > ServOrderRec."Unit Price Status"::"Pre-Recording" THEN
                                                                    ServOrderRec.FIELDERROR("Unit Price Status");
                                                                  IF ServOrderRec."Unit Price Status" = ServOrderRec."Unit Price Status"::" " THEN BEGIN
                                                                    ServOrderRec.VALIDATE("Unit Price Status", ServOrderRec."Unit Price Status"::"Pre-Recording");
                                                                    ServOrderRec.MODIFY(TRUE);
                                                                  END;
                                                                  CopyUnitPriceSetLines;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ServiceUnitPriceSet@1100528600 : Record 11072284;
                                                            BEGIN
                                                              ServiceUnitPriceSet.SETRANGE("Price Book Code", "Price Book Code");
                                                              ServiceUnitPriceSet.SETRANGE("Price Book Index Date", "Price Book Index Date");
                                                              IF PAGE.RUNMODAL(0, ServiceUnitPriceSet) = ACTION::LookupOK THEN
                                                                VALIDATE("Unit Price Set", ServiceUnitPriceSet.Code);
                                                            END;

                                                   CaptionML=ENU=Unit Price Set }
  }
  KEYS
  {
    {    ;Service Order No.                       ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ServContrRec@1210190001 : Record 11012812;
      ServOrderRec@1210190000 : Record 11012823;
      ProjRec@1210190002 : Record 11072003;
      ProjElemRec@1210190003 : Record 11012010;
      Text000@1100528600 : TextConst 'ENU=%1 is not a valid %2.';
      FormatMgt@1210190004 : Codeunit 11012022;
      Text001@1100525000 : TextConst 'ENU=Warning: Customer %1 is not one of the Project Principals of Project %2';
      Text002@1100525003 : TextConst 'ENU=%1 must be within %2 and %3';
      Text003@1100525002 : TextConst 'ENU=%1 cannot precede %2';
      Text004@1100525001 : TextConst 'ENU=%1 must be before %2';
      Text005@1100528601 : TextConst 'ENU=Pre-Recording Lines exist for %1 %2';

    PROCEDURE GetServOrderExtension@1100525001(ServOrder@1100525001 : Code[20]);
    BEGIN
      IF NOT GET(ServOrder) THEN BEGIN
        INIT;
        "Service Order No."  := ServOrder;
      END;
      CALCFIELDS("Act. Ref. Point Ex. Comp. Dsc.");
    END;

    PROCEDURE UpdateServOrderExtension@1100525000(ServOrder@1100525000 : Code[20]);
    VAR
      ServOrderExtRec@1100525001 : Record 11071727;
      ServOrderExtInitRec@1100525003 : Record 11071727;
      DeleteExt@1100525004 : Boolean;
    BEGIN
      ServOrderExtInitRec.INIT;
      ServOrderExtInitRec."Service Order No."  := ServOrder;
      IF FORMAT(Rec) = FORMAT(ServOrderExtInitRec) THEN
        DeleteExt := TRUE
      ELSE
        DeleteExt := FALSE;

      IF NOT ServOrderExtRec.GET(ServOrder) THEN BEGIN
        IF DeleteExt THEN
          EXIT;
        ServOrderExtRec.INIT;
        ServOrderExtRec."Service Order No."  := ServOrder;
        ServOrderExtRec.INSERT;
      END ELSE BEGIN
        IF DeleteExt THEN BEGIN
          ServOrderExtRec.DELETE;
          EXIT;
        END;
      END;
      ServOrderExtRec.TRANSFERFIELDS(Rec, FALSE);
      ServOrderExtRec.MODIFY;
    END;

    PROCEDURE CopyServOrderExtension@1100525002(FromServOrder@1100525000 : Code[20];ToServOrder@1100525002 : Code[20]);
    VAR
      FromServOrderExtRec@1100525004 : Record 11071727;
      ToServOrderExtRec@1100525005 : Record 11071727;
    BEGIN
      IF ToServOrderExtRec.GET(ToServOrder) THEN
        ToServOrderExtRec.DELETE;
      IF FromServOrderExtRec.GET(FromServOrder) THEN BEGIN
        ToServOrderExtRec."Service Order No."  := ToServOrder;
        ToServOrderExtRec.TRANSFERFIELDS(FromServOrderExtRec, FALSE);
        //kkleermaker.sn, 110913
        ToServOrderExtRec."Executing Company Name" := '';
        ToServOrderExtRec."Order No. Executing Company" := '';
        ToServOrderExtRec."Principal Company Name" := '';
        ToServOrderExtRec."Serv. Contr. No. Princ. Comp." := '';
        ToServOrderExtRec."Act. Ref. Point Exec. Company" := 0;
        //kkleermaker.en, 110913
        ToServOrderExtRec.INSERT;
      END;
    END;

    PROCEDURE ValidateUnitPriceFields@1100528600(ServiceOrder@1100528600 : Record 11012823);
    VAR
      ServiceUnitPrice@1100528601 : Record 11071768;
    BEGIN
      IF ("Price Book Code" = '') THEN
        EXIT;

      ServiceUnitPrice.SETRANGE(Type, ServiceOrder."Price Book Type");
      ServiceUnitPrice.SETRANGE(Code, "Price Book Code");
      IF (NOT ServiceUnitPrice.FINDFIRST) THEN
        ERROR(Text000, "Price Book Code", FIELDCAPTION("Price Book Code"));
    END;

    PROCEDURE ValidateUnitPriceFieldsIncDate@1210190000(ServiceOrder@1100528600 : Record 11012823);
    VAR
      ServiceUnitPrice@1100528601 : Record 11071768;
    BEGIN
      IF ("Price Book Code" = '') THEN
        EXIT;

      ServiceUnitPrice.SETRANGE(Type, ServiceOrder."Price Book Type");
      ServiceUnitPrice.SETRANGE(Code, "Price Book Code");
      ServiceUnitPrice.SETRANGE("Index Date", "Price Book Index Date");
      IF (NOT ServiceUnitPrice.FINDFIRST) THEN
        ERROR(Text000, "Price Book Index Date", FIELDCAPTION("Price Book Index Date"));
    END;

    PROCEDURE ValidateMasterProject@1100528601(VAR OServiceOrder@1100528600 : Record 11012823);
    VAR
      ServiceSetup@1100528601 : Record 11012800;
      ServiceSourceTypeSetup@1100528602 : Record 11071726;
      Job@1100528603 : Record 11072003;
      ProjectPrincipal@1100525000 : Record 11012005;
    BEGIN
      IF "Master Project" <> '' THEN BEGIN
        ServiceSetup.GET;
        CASE ServiceSetup."Service to Project" OF
          ServiceSetup."Service to Project"::"Revenue as Cost":
            BEGIN
              IF OServiceOrder."Customer No." <> '' THEN
                OServiceOrder.TESTFIELD("Customer No.", ServiceSetup."Customer Internal Charge")
              ELSE
                OServiceOrder.VALIDATE("Customer No.", ServiceSetup."Customer Internal Charge");
            END;
          ServiceSetup."Service to Project"::"Transfer Cost and Revenue":
            BEGIN
              IF OServiceOrder."Customer No." <> '' THEN BEGIN
                IF NOT ProjectPrincipal.GET("Master Project", OServiceOrder."Customer No.") THEN
                  MESSAGE(Text001, OServiceOrder."Customer No.", "Master Project");
              END ELSE BEGIN
                IF NOT Job.GET("Master Project") THEN
                  Job.INIT;
                OServiceOrder.VALIDATE("Customer No.", Job."Bill-to Customer No.");
              END;
            END;
        END;
        ServiceSourceTypeSetup.GET(OServiceOrder."Source Type");
        ServiceSourceTypeSetup.TESTFIELD("Service Type (Int. Charge)");
        ServiceSourceTypeSetup.TESTFIELD("Service Type (Other) (Int.Ch.)");

        OServiceOrder.VALIDATE("Service Type", ServiceSourceTypeSetup."Service Type (Int. Charge)");
        OServiceOrder.VALIDATE("Service Type (Other)", ServiceSourceTypeSetup."Service Type (Other) (Int.Ch.)");
      END;
    END;

    PROCEDURE CheckCustomerAppointmentsByLetter@1100528608();
    VAR
      ServiceOrder@1100528601 : Record 11012823;
      Customer@1100528600 : Record 18;
    BEGIN
      IF NOT ServiceOrder.GET("Service Order No.") THEN
        EXIT;
      IF NOT Customer.GET(ServiceOrder."Customer No.") THEN
        Customer.INIT;
      Customer.TESTFIELD("Maintenance Appointments by", Customer."Maintenance Appointments by"::Letter);
    END;

    PROCEDURE TestExpectedDateTimes@1100525003();
    VAR
      ServiceOrder@1100525000 : Record 11012823;
    BEGIN
      ServiceOrder.GET("Service Order No.");
      IF (ServiceOrder."First Possible Starting Date" = 0D) AND (ServiceOrder."Last Possible Ending Date" = 0D) THEN
        EXIT;
      IF ("Expected Starting Date" = 0D) AND ("Expected Ending Date" = 0D) THEN
        EXIT;

      IF ("Expected Starting Date" <> 0D) AND
         (("Expected Starting Date" < ServiceOrder."First Possible Starting Date") OR
          ("Expected Starting Date" > ServiceOrder."Last Possible Ending Date"))
      THEN
        ERROR(Text002, FIELDCAPTION("Expected Starting Date"),
          ServiceOrder.FIELDCAPTION("First Possible Starting Date"), ServiceOrder.FIELDCAPTION("Last Possible Ending Date"));

      IF ("Expected Ending Date" <> 0D) AND
         (("Expected Ending Date" < ServiceOrder."First Possible Starting Date") OR
          ("Expected Ending Date" > ServiceOrder."Last Possible Ending Date"))
      THEN
        ERROR(Text002, FIELDCAPTION("Expected Ending Date"),
          ServiceOrder.FIELDCAPTION("First Possible Starting Date"), ServiceOrder.FIELDCAPTION("Last Possible Ending Date"));

      IF ("Expected Starting Date" <> 0D) AND
         ("Expected Starting Time" <> 0T) AND
         (ServiceOrder."First Possible Starting Time" <> 0T) AND
         ("Expected Starting Date" = ServiceOrder."First Possible Starting Date") AND
         ("Expected Starting Time" < ServiceOrder."First Possible Starting Time")
      THEN
        ERROR(Text003, FIELDCAPTION("Expected Starting Time"), ServiceOrder.FIELDCAPTION("First Possible Starting Time"));

      IF ("Expected Ending Date" <> 0D) AND
         ("Expected Ending Time" <> 0T) AND
         (ServiceOrder."Last Possible Ending Time" <> 0T) AND
         ("Expected Ending Date" = ServiceOrder."Last Possible Ending Date") AND
         ("Expected Ending Time" > ServiceOrder."Last Possible Ending Time")
      THEN
        ERROR(Text004, FIELDCAPTION("Expected Ending Time"), ServiceOrder.FIELDCAPTION("Last Possible Ending Time"));
    END;

    PROCEDURE LookupUnitPriceIndexDate@1100528602();
    VAR
      ServiceOrder@1100528601 : Record 11012823;
      ServiceUnitPrice@1100528600 : Record 11071768;
    BEGIN
      ServiceOrder.GET("Service Order No.");
      ServiceUnitPrice.SETRANGE(Type, ServiceOrder."Price Book Type");
      ServiceUnitPrice.SETRANGE(Code, "Price Book Code");
      IF PAGE.RUNMODAL(0, ServiceUnitPrice) = ACTION::LookupOK THEN
        VALIDATE("Price Book Index Date", ServiceUnitPrice."Index Date");
    END;

    LOCAL PROCEDURE CopyUnitPriceSetLines@1100528604();
    VAR
      ServiceUnitPriceSetLine@1100528600 : Record 11072285;
      SUPRecordingLine@1100528601 : Record 11071772;
      LineNo@1100528602 : Integer;
    BEGIN
      ServOrderRec.GET("Service Order No.");

      SUPRecordingLine.SETRANGE("Service Order No.", "Service Order No.");
      IF NOT SUPRecordingLine.ISEMPTY THEN
        ERROR(Text005, FIELDCAPTION("Service Order No."), "Service Order No.");
      ServiceUnitPriceSetLine.SETRANGE("Price Book Code", "Price Book Code");
      ServiceUnitPriceSetLine.SETRANGE("Price Book Index Date", "Price Book Index Date");
      ServiceUnitPriceSetLine.SETRANGE("Set Code", "Unit Price Set");
      IF ServiceUnitPriceSetLine.FINDSET THEN
        REPEAT
          LineNo += 10000;
          SUPRecordingLine."Service Order No." := "Service Order No.";
          SUPRecordingLine."Line No." := LineNo;
          SUPRecordingLine."Price Book Type" := ServOrderRec."Price Book Type";
          SUPRecordingLine."Price Book Code" := "Price Book Code";
          SUPRecordingLine."Index Date" := "Price Book Index Date";
          SUPRecordingLine.VALIDATE("Unit Price Code", ServiceUnitPriceSetLine."Unit Price Code");
          SUPRecordingLine.VALIDATE("Pre-Recording Quantity", ServiceUnitPriceSetLine."Pre-Recording Quantity");
          SUPRecordingLine.INSERT(TRUE);
        UNTIL ServiceUnitPriceSetLine.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

