OBJECT Table 11071730 Service Collective-List
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               ServiceSetup@1100528600 : Record 11012800;
               NoSeriesManagementCU@1100528601 : Codeunit 396;
             BEGIN
               IF "No." = '' THEN BEGIN
                 ServiceSetup.GET;
                 ServiceSetup.TESTFIELD("Collective List Nos.");
                 NoSeriesManagementCU.InitSeries(ServiceSetup."Collective List Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               "Created By" := USERID;
               "Creation Date" := TODAY;
             END;

    OnDelete=VAR
               ServiceOrder@1100528600 : Record 11012823;
               ServiceOrderCostPlusEntry@1100528601 : Record 11012825;
               ServiceCollectiveListMgt@1100528602 : Codeunit 11012850;
             BEGIN
               TESTFIELD(Status, Status::Open);

               ServiceOrder.SETCURRENTKEY("Collective List No.");
               ServiceOrder.SETRANGE("Collective List No.", "No.");
               ServiceOrder.MODIFYALL("Collective List No.", '', TRUE);

               ServiceOrderCostPlusEntry.SETCURRENTKEY("Collective List No.");
               ServiceOrderCostPlusEntry.SETRANGE("Collective List No.", "No.");
               ServiceOrderCostPlusEntry.MODIFYALL("Collective List No.", '', TRUE);

               ServiceCollectiveListMgt.RemoveCollListSCInvocingLines("No.");
             END;

    CaptionML=ENU=Service Collective-List;
    LookupPageID=Page11125230;
    DrillDownPageID=Page11125230;
  }
  FIELDS
  {
    { 10  ;   ;No.                 ;Code20        ;OnValidate=VAR
                                                                ServiceSetup@1100528601 : Record 11012800;
                                                                NoSeriesManagementCU@1100528600 : Codeunit 396;
                                                              BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  ServiceSetup.GET;
                                                                  NoSeriesManagementCU.TestManual(ServiceSetup."Collective List Nos.");
                                                                  "No. Series" := '';
                                                                END;

                                                                CheckIfNoSOExists;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 20  ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status, Status::Open);
                                                                CheckIfNoSOExists;
                                                              END;

                                                   CaptionML=ENU=Customer No.;
                                                   NotBlank=Yes }
    { 22  ;   ;Customer Name       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Customer No.)));
                                                   CaptionML=ENU=Customer Name;
                                                   Editable=No }
    { 25  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=VAR
                                                                ServiceCollectiveListMgt@1100525000 : Codeunit 11012850;
                                                              BEGIN
                                                                TESTFIELD(Status, Status::Open);
                                                                CheckIfNoSOExists;
                                                                IF "Bill-to Customer No." <> xRec."Bill-to Customer No." THEN
                                                                  VALIDATE("Alternative Bill-to Address", '');
                                                                ServiceCollectiveListMgt.FillDefaults(Rec, '');
                                                              END;

                                                   CaptionML=ENU=Bill-to Customer No. }
    { 27  ;   ;Bill-to Customer Name;Text50       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Bill-to Customer Name;
                                                   Editable=No }
    { 28  ;   ;Alternative Bill-to Address;Code10 ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Bill-to Customer No.),
                                                                                               Billing Address=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status, Status::Open);
                                                                CheckIfNoSOExists;
                                                              END;

                                                   CaptionML=ENU=Alternative Bill-to Address }
    { 30  ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract WHERE (Customer No.=FIELD(Customer No.));
                                                   OnValidate=VAR
                                                                ServiceContract@1100528600 : Record 11012812;
                                                                ServiceCollectiveListMgt@1100525000 : Codeunit 11012850;
                                                              BEGIN
                                                                TESTFIELD(Status, Status::Open);
                                                                CheckIfNoSOExists;

                                                                IF ServiceContract.GET("Service Contract No.") THEN BEGIN
                                                                  IF FORMAT(ServiceContract."Invoice Interval") = ''  THEN
                                                                    "Invoice Period" := ServiceContract."Invoice Interval";
                                                                  ServiceCollectiveListMgt.FillDefaults(Rec, '');
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Service Contract No. }
    { 31  ;   ;Bill-to Contact Person No.;Code20  ;TableRelation=Contact;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status, Status::Open);
                                                              END;

                                                   CaptionML=ENU=Bill-to Contact Person No. }
    { 32  ;   ;Bill-to Contact Person Name;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Bill-to Contact Person No.)));
                                                   CaptionML=ENU=Bill-to Contact Person Name;
                                                   Editable=No }
    { 35  ;   ;Complex Code        ;Code20        ;TableRelation=Complex;
                                                   CaptionML=ENU=Complex }
    { 40  ;   ;Service Location No.;Code20        ;TableRelation="Service Location" WHERE (Customer No.=FIELD(Customer No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status, Status::Open);
                                                                CheckIfNoSOExists;
                                                              END;

                                                   CaptionML=ENU=Service Location No. }
    { 45  ;   ;Service Order No.   ;Code20        ;TableRelation="Service Order";
                                                   OnValidate=VAR
                                                                ServiceOrder@1210190000 : Record 11012823;
                                                              BEGIN
                                                                TESTFIELD(Status, Status::Open);
                                                                CheckIfNoSOExists;
                                                                IF "Service Order No." <> '' THEN BEGIN
                                                                  ServiceOrder.GET("Service Order No.");
                                                                  IF ServiceOrder."No." <> ServiceOrder."Base Service Order No." THEN BEGIN
                                                                    IF ServiceOrder."Base Service Order" = FALSE THEN  //DP01008
                                                                      ServiceOrder.TESTFIELD("Collect Invoices By", ServiceOrder."Collect Invoices By"::ServOrder)
                                                                    ELSE
                                                                      ERROR(Text004, ServiceOrder."No.", ServiceOrder."Base Service Order No.");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Service Order No. }
    { 50  ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                CheckStatus;
                                                              END;

                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Open,,,Released,,,Processed;
                                                   OptionString=Open,,,Released,,,Processed }
    { 60  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Status, Status::Open);
                                                                CalcEndingDate;
                                                              END;

                                                   CaptionML=ENU=Starting Date }
    { 70  ;   ;Invoice Period      ;DateFormula   ;OnValidate=BEGIN
                                                                TESTFIELD(Status, Status::Open);
                                                                CalcEndingDate;
                                                              END;

                                                   CaptionML=ENU=Invoice Period }
    { 75  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Status, Status::Open);
                                                              END;

                                                   CaptionML=ENU=Ending Date }
    { 80  ;   ;Minimal Invoice Amount;Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD(Status, Status::Open);
                                                              END;

                                                   CaptionML=ENU=Minimal Invoice Amount }
    { 90  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 100 ;   ;Invoice Price       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Cost Plus Entry"."Invoice Price (LCY)" WHERE (Collective List No.=FIELD(No.),
                                                                                                                                Chargeable=CONST(Yes)));
                                                   CaptionML=ENU=Invoice Price;
                                                   Editable=No }
    { 105 ;   ;Invoiced Price      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Cost Plus Entry"."Invoice Price (LCY)" WHERE (Collective List No.=FIELD(No.),
                                                                                                                                Invoiced=CONST(Yes)));
                                                   CaptionML=ENU=Invoiced Price;
                                                   Editable=No }
    { 110 ;   ;Invoice per Service Order;Boolean  ;OnValidate=BEGIN
                                                                TESTFIELD(Status, Status::Open);
                                                              END;

                                                   CaptionML=ENU=Invoice per Service Order }
    { 120 ;   ;System-Created Entry;Boolean       ;CaptionML=ENU=System-Created Entry }
    { 130 ;   ;Created By          ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Created By }
    { 140 ;   ;Creation Date       ;Date          ;CaptionML=ENU=Creation Date }
    { 150 ;   ;Recalculate Collective-List;Boolean;CaptionML=ENU=Recalculate Collective-List;
                                                   Editable=No }
    { 160 ;   ;Invoice SC Lines Price;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Collective-List SC Inv. Line"."Amount (LCY)" WHERE (Collective List No.=FIELD(No.),
                                                                                                                        Invoiced=CONST(No)));
                                                   CaptionML=ENU=Invoice SC Lines Price;
                                                   Editable=No }
    { 170 ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                CheckIfNoSOExists;
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 180 ;   ;Invoice Layout Code ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Invoice Layout Code" WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Invoice Layout Code;
                                                   Editable=No }
    { 190 ;   ;Customer Price Group;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Customer Price Group" WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Customer Price Group;
                                                   Editable=No }
    { 200 ;   ;Collect SO Invoices By;Option      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Collect SO Invoices By" WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Collect Service Order Invoices By;
                                                   OptionCaptionML=ENU=Customer,Service Contract,Service Location,Service Order,Complex,Customer - Bill-to Contact Person;
                                                   OptionString=Customer,Service Contract,Service Location,Service Order,Complex,Customer - Bill-to Contact Person;
                                                   Editable=No }
    { 210 ;   ;Invoice Period (Coll. List);DateFormula;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Invoice Period (Coll. List)" WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Invoice Period (Collective List);
                                                   Editable=No }
    { 220 ;   ;Invoice Disc. Code  ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Invoice Disc. Code" WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Invoice Disc. Code;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Bill-to Customer No.                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'ENU=There are Service Orders linked to this Collective List, changes not allowed';
      Text001@1100528601 : TextConst 'ENU=There are Service Order Cost Plus Entries linked to this Collective List, changes not allowed';
      Text002@1100528602 : TextConst 'ENU=The Collective-List needs recalculation, continue anyway?';
      Text004@1210190000 : TextConst 'ENU=Service Order %1 is linked to Base Service Order %2. Only the Base Service Order can be linked to the Collective List.';
      Text005@1100528604 : TextConst 'ENU=There are Contract Invoicing Lines created at this Collective List, changes not allowed';
      Text006@1100525000 : TextConst 'ENU=There are no Service Orders available for adding to this Collective List.';
      DontConfirmRecalculateAtRelease@1100528603 : Boolean;

    PROCEDURE AssistEdit@2(OldServiceCollectiveList@1000 : Record 11071730) : Boolean;
    VAR
      ServiceSetup@1100528600 : Record 11012800;
      ServiceCollectiveList@1100526200 : Record 11071730;
      NoSeriesManagementCU@1100528601 : Codeunit 396;
    BEGIN
      ServiceSetup.GET;
      ServiceSetup.TESTFIELD("Collective List Nos.");
      ServiceCollectiveList := Rec;
      IF NoSeriesManagementCU.SelectSeries(ServiceSetup."Collective List Nos.", OldServiceCollectiveList."No. Series","No. Series") THEN
      BEGIN
        ServiceSetup.GET;
        NoSeriesManagementCU.SetSeries("No.");
        Rec := ServiceCollectiveList;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE AssignServiceOrders@1100528600();
    VAR
      ServiceOrder@1100528600 : Record 11012823;
      ServiceOrderFRM@1100528601 : Page 11012830;
    BEGIN
      ServiceOrder.SETCURRENTKEY("Bill-to Customer No.");
      ServiceOrder.SETRANGE("Bill-to Customer No.", "Bill-to Customer No.");
      ServiceOrder.SETRANGE("Alternative Bill-to Address", "Alternative Bill-to Address");
      //ServiceOrder.SETRANGE("Customer No.", "Customer No.");
      ServiceOrder.SETRANGE("Collective List No.", '');
      ServiceOrder.SETRANGE("Currency Code", "Currency Code");
      IF "Service Contract No." <> '' THEN
        ServiceOrder.SETRANGE("Service Contract No.", "Service Contract No.");
      IF "Service Location No." <> '' THEN BEGIN
        ServiceOrder.SETRANGE("Service Contract No.", "Service Contract No.");
        ServiceOrder.SETRANGE("Service Location No.", "Service Location No.");
      END;
      IF "Service Order No." <> '' THEN
        ServiceOrder.SETRANGE("No.", "Service Order No.");
      IF "Complex Code" <> '' THEN BEGIN
        IF ServiceOrder.FINDSET THEN
          REPEAT
            IF ServiceOrder.GetComplexCode = "Complex Code" THEN
              ServiceOrder.MARK(TRUE);
          UNTIL ServiceOrder.NEXT = 0;
        ServiceOrder.MARKEDONLY(TRUE);
      END;
      IF ServiceOrder.ISEMPTY THEN
        ERROR(Text006);
      ServiceOrderFRM.SetRecordSet(ServiceOrder);
      ServiceOrderFRM.LOOKUPMODE(TRUE);
      ServiceOrderFRM.SETTABLEVIEW(ServiceOrder);
      IF ServiceOrderFRM.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ServiceOrderFRM.GetRecordSet(ServiceOrder);
        IF ServiceOrder.ISEMPTY THEN BEGIN
          ServiceOrder.RESET;
          ServiceOrderFRM.GetRecordSet(ServiceOrder);
          ServiceOrder.SETRECFILTER;
        END;
        IF ServiceOrder.FINDSET THEN
          REPEAT
            ServiceOrder.VALIDATE("Collective List No.", "No.");
            ServiceOrder.MODIFY(TRUE);
          UNTIL ServiceOrder.NEXT = 0;
      END;
    END;

    PROCEDURE CalcEndingDate@1100528601();
    BEGIN
      IF "Starting Date" = 0D THEN
        EXIT;
      IF FORMAT("Invoice Period") = '' THEN
        EXIT;

      "Ending Date" := CALCDATE("Invoice Period", "Starting Date") -1;
    END;

    PROCEDURE CheckIfNoSOExists@1100528602();
    VAR
      ServiceOrder@1100528600 : Record 11012823;
      ServiceOrderCostPlusEntry@1100528601 : Record 11012825;
      CollectiveListSCInvLine@1100528602 : Record 11071931;
    BEGIN
      IF "No." = '' THEN EXIT;

      ServiceOrder.SETCURRENTKEY("Collective List No.");
      ServiceOrder.SETRANGE("Collective List No.", "No.");
      IF NOT ServiceOrder.ISEMPTY THEN
        ERROR(Text000);

      ServiceOrderCostPlusEntry.SETCURRENTKEY("Collective List No.");
      ServiceOrderCostPlusEntry.SETRANGE("Collective List No.", "No.");
      IF NOT ServiceOrderCostPlusEntry.ISEMPTY THEN
        ERROR(Text001);

      CollectiveListSCInvLine.SETRANGE("Collective List No.", "No.");
      IF NOT CollectiveListSCInvLine.ISEMPTY THEN
        ERROR(Text005);
    END;

    PROCEDURE Recalculate@1100528603(IForceChargeable@1100528602 : Boolean);
    VAR
      ServiceOrder@1100528600 : Record 11012823;
      ServiceOrderCostPlusEntry@1100528601 : Record 11012825;
    BEGIN
      TESTFIELD(Status, Status::Open);
      ServiceOrder.SETCURRENTKEY("Collective List No.");
      ServiceOrder.SETRANGE("Collective List No.", "No.");
      IF ServiceOrder.FINDSET THEN
        REPEAT
          ServiceOrder.MARK(TRUE);
        UNTIL ServiceOrder.NEXT = 0;

      ServiceOrder.SETRANGE("Collective List No.");
      ServiceOrder.SETCURRENTKEY("No.");

      ServiceOrderCostPlusEntry.SETCURRENTKEY("Collective List No.");
      ServiceOrderCostPlusEntry.SETRANGE("Collective List No.", "No.");
      IF ServiceOrderCostPlusEntry.FINDSET THEN
        REPEAT
          ServiceOrder."No." := ServiceOrderCostPlusEntry."Service Order No.";
          ServiceOrder.MARK(TRUE);
        UNTIL ServiceOrderCostPlusEntry.NEXT = 0;

      ServiceOrder.MARKEDONLY(TRUE);
      IF ServiceOrder.FINDSET(TRUE) THEN
        REPEAT
          ServiceOrder.RecalcSOCostPlusEntries(IForceChargeable);
        UNTIL ServiceOrder.NEXT = 0;
      CheckInvBaseAmountPeriod(IForceChargeable);

      FIND('=');
      VALIDATE("Recalculate Collective-List", FALSE);
      MODIFY(TRUE);
    END;

    PROCEDURE ForceRecalculate@1100528613(IForceChargeable@1100528600 : Boolean);
    VAR
      ServiceCollectiveList@1100528602 : Record 11071730;
      OldStatus@1100528601 : Option;
    BEGIN
      ServiceCollectiveList := Rec; // no filters
      OldStatus := ServiceCollectiveList.Status;
      IF ServiceCollectiveList.Status > ServiceCollectiveList.Status::Open THEN
        ServiceCollectiveList.VALIDATE(Status, Status::Open);
      ServiceCollectiveList.MODIFY;
      ServiceCollectiveList.Recalculate(IForceChargeable);
      IF OldStatus <> ServiceCollectiveList.Status THEN BEGIN
        ServiceCollectiveList.VALIDATE(Status, OldStatus);
        ServiceCollectiveList.MODIFY(TRUE);
      END;
      FIND('=');
    END;

    PROCEDURE MarkAsDirty@1100528604();
    BEGIN
      VALIDATE("Recalculate Collective-List", TRUE);
      MODIFY(TRUE);
    END;

    PROCEDURE CheckStatus@1100528605();
    VAR
      ServiceOrder@1100528600 : Record 11012823;
      ServiceContract@1100528601 : Record 11012812;
    BEGIN
      IF (xRec.Status <> Status) AND (Status = Status::Released) THEN BEGIN
        TESTFIELD("Bill-to Customer No.");
        TESTFIELD("Customer No.");
        IF NOT DontConfirmRecalculateAtRelease AND "Recalculate Collective-List" THEN
          IF GUIALLOWED THEN
            IF NOT CONFIRM(Text002) THEN
              ERROR('');

        MarkServiceOrders(ServiceOrder);
        IF ServiceOrder.FINDSET THEN
          REPEAT
            IF ServiceOrder."Service Contract No." <> '' THEN BEGIN
              ServiceContract.GET(ServiceOrder."Service Contract No.");
              ServiceContract.TESTFIELD(Status, ServiceContract.Status::"Invoicing Allowed");
            END;
          UNTIL ServiceOrder.NEXT = 0;
      END;
    END;

    PROCEDURE MarkServiceOrders@1100528606(VAR OServiceOrder@1100528603 : Record 11012823);
    VAR
      ServiceOrderCostPlusEntry@1100528601 : Record 11012825;
      ServiceOrder@1100528602 : Record 11012823;
    BEGIN
      OServiceOrder.RESET;

      ServiceOrderCostPlusEntry.SETCURRENTKEY("Collective List No.");
      ServiceOrderCostPlusEntry.SETRANGE("Collective List No.", "No.");
      IF ServiceOrderCostPlusEntry.FINDSET THEN
        REPEAT
          OServiceOrder."No." := ServiceOrderCostPlusEntry."Service Order No.";
          OServiceOrder.MARK(TRUE);
        UNTIL ServiceOrderCostPlusEntry.NEXT = 0;

      ServiceOrder.SETCURRENTKEY("Collective List No.");
      ServiceOrder.SETRANGE("Collective List No.", "No.");
      IF ServiceOrder.FINDSET THEN
        REPEAT
          OServiceOrder."No." := ServiceOrder."No.";
          OServiceOrder.MARK(TRUE);
        UNTIL ServiceOrder.NEXT = 0;

      OServiceOrder.MARKEDONLY(TRUE);
    END;

    PROCEDURE GetBilltoAddress@1100528607(VAR OBilltoName@1100528600 : Text[50];VAR OBilltoName2@1100528601 : Text[50];VAR OBilltoAddress@1100528602 : Text[50];VAR OBilltoAddress2@1100528603 : Text[50];VAR OBilltoPostCode@1100528604 : Text[20];VAR OBilltoCity@1100528605 : Text[30]);
    VAR
      Customer@1100528606 : Record 18;
      ShiptoAddress@1100528607 : Record 222;
    BEGIN
      IF "Alternative Bill-to Address" = '' THEN BEGIN
        IF NOT Customer.GET("Bill-to Customer No.") THEN
          Customer.INIT;
        OBilltoName := Customer.Name;
        OBilltoName2 := Customer."Name 2";
        OBilltoAddress := Customer.Address;
        OBilltoAddress2 := Customer."Address 2";
        OBilltoPostCode := Customer."Post Code";
        OBilltoCity := Customer.City;
      END ELSE BEGIN
        IF NOT ShiptoAddress.GET("Bill-to Customer No.", "Alternative Bill-to Address") THEN
          ShiptoAddress.INIT;
        OBilltoName := ShiptoAddress.Name;
        OBilltoName2 := ShiptoAddress."Name 2";
        OBilltoAddress := ShiptoAddress.Address;
        OBilltoAddress2 := ShiptoAddress."Address 2";
        OBilltoPostCode := ShiptoAddress."Post Code";
        OBilltoCity := ShiptoAddress.City;
      END;
    END;

    PROCEDURE GetTotalBasicSalesAmount@1100525000() TotalCost : Decimal;
    VAR
      ServiceOrderCostPlusEntry@1100525000 : Record 11012825;
    BEGIN
      ServiceOrderCostPlusEntry.SETCURRENTKEY("Collective List No.");
      ServiceOrderCostPlusEntry.SETRANGE("Collective List No.", "No.");
      IF ServiceOrderCostPlusEntry.FINDSET THEN
        REPEAT
          TotalCost += ServiceOrderCostPlusEntry."Basic Price (LCY)" * ServiceOrderCostPlusEntry.Quantity;
        UNTIL ServiceOrderCostPlusEntry.NEXT = 0;
    END;

    PROCEDURE GetTotalRevenue@1100525003() TotalRevenue : Decimal;
    VAR
      ServiceOrderCostPlusEntry@1100525000 : Record 11012825;
    BEGIN
      ServiceOrderCostPlusEntry.SETCURRENTKEY("Collective List No.");
      ServiceOrderCostPlusEntry.SETRANGE("Collective List No.", "No.");
      IF ServiceOrderCostPlusEntry.FINDSET THEN
        REPEAT
          ServiceOrderCostPlusEntry.CALCFIELDS("Invoice Price (LCY)", "Invoiced Price (LCY)");
          TotalRevenue += ServiceOrderCostPlusEntry."Invoice Price (LCY)" + ServiceOrderCostPlusEntry."Invoiced Price (LCY)";
        UNTIL ServiceOrderCostPlusEntry.NEXT = 0;
    END;

    PROCEDURE GetSurcharge@1210190000(VAR OSurcharge@1210190001 : Decimal;VAR OSurchargePerc@1210190002 : Decimal);
    VAR
      TotalBasicAmount@1210190000 : Decimal;
    BEGIN
      TotalBasicAmount := GetTotalBasicSalesAmount;
      OSurcharge := "Invoiced Price" + "Invoice Price" - TotalBasicAmount;
      IF TotalBasicAmount <> 0 THEN
        OSurchargePerc := ROUND(OSurcharge / TotalBasicAmount * 100)
      ELSE
        OSurchargePerc := 0;
    END;

    PROCEDURE GetTotalInvoicePrice@1100528608() : Decimal;
    BEGIN
      CALCFIELDS("Invoice Price", "Invoice SC Lines Price");
      EXIT("Invoice Price" + "Invoice SC Lines Price");
    END;

    PROCEDURE GetTotalInvoiceAmountInclVAT@1100528610() AmountInclVAT : Decimal;
    VAR
      ServiceOrderCostPlusEntry@1100528600 : Record 11012825;
      CollectiveListSCInvLine@1100528601 : Record 11071931;
    BEGIN
      ServiceOrderCostPlusEntry.SETCURRENTKEY("Collective List No.");
      ServiceOrderCostPlusEntry.SETRANGE("Collective List No.", "No.");
      ServiceOrderCostPlusEntry.SETRANGE(Chargeable, TRUE);
      ServiceOrderCostPlusEntry.SETRANGE(Invoiced, FALSE);
      IF ServiceOrderCostPlusEntry.FINDSET THEN
        REPEAT
          AmountInclVAT += ServiceOrderCostPlusEntry.GetInvoicePriceInclVAT;
        UNTIL ServiceOrderCostPlusEntry.NEXT = 0;

      CollectiveListSCInvLine.SETRANGE("Collective List No.", "No.");
      CollectiveListSCInvLine.SETRANGE(Invoiced, FALSE);
      IF CollectiveListSCInvLine.FINDSET THEN
        REPEAT
          AmountInclVAT += CollectiveListSCInvLine.GetInvoicePriceInclVAT;
        UNTIL CollectiveListSCInvLine.NEXT = 0;
    END;

    PROCEDURE GetCurrencyCode@1100528609() : Code[10];
    VAR
      ServiceOrder@1100528600 : Record 11012823;
      ServiceContract@1100528601 : Record 11012812;
      Customer@1100528602 : Record 18;
    BEGIN
      IF "Service Order No." <> '' THEN BEGIN
        ServiceOrder.GET("Service Order No.");
        EXIT(ServiceOrder."Currency Code");
      END;
      IF "Service Contract No." <> '' THEN BEGIN
        ServiceContract.GET("Service Contract No.");
        EXIT(ServiceContract."Currency Code");
      END;
      IF "Customer No." <> '' THEN BEGIN
        Customer.GET("Customer No.");
        EXIT(Customer."Currency Code");
      END;
    END;

    LOCAL PROCEDURE CheckInvBaseAmountPeriod@1100528611(IForceChargeable@1100528617 : Boolean);
    VAR
      ServiceContract@1100528622 : Record 11012812;
      ServiceOrder@1100528610 : Record 11012823;
      TmpHandledServiceOrders@1100528615 : TEMPORARY Record 11012823;
      ServiceOrderCostPlusEntry@1100528609 : Record 11012825;
      ServiceSetup@1100528611 : Record 11012800;
      ServiceContractDiscountTerm@1100528613 : Record 11012828;
      DimensionValue@1100528621 : Record 349;
      DimensionManagement@1100528620 : Codeunit 408;
      CostTypeMethod@1100528614 : 'Specific Cost Type,All Cost Types';
      ServicePackageLevel@1100528623 : 'Order,Contract';
      LastLineNo@1100528605 : Integer;
      AmntTotal@1100528604 : Decimal;
      AmntLabor@1100528603 : Decimal;
      AmntMaterial@1100528602 : Decimal;
      AmntSubcontracting@1100528606 : Decimal;
      AmntPlant@1100528607 : Decimal;
      AmntSundry@1100528608 : Decimal;
      InvAmnt@1100528601 : Decimal;
      InvHrs@1100528600 : Decimal;
      ProportionallyFactor@1100528619 : Decimal;
      InFilterGroup@1100528616 : Boolean;
      DiscountPeriodStart@1100528618 : Date;
      DiscountPeriodEnd@1100528612 : Date;
    BEGIN
      RemoveInvoiceBaseAmounts;
      ServiceOrder.SETCURRENTKEY("Collective List No.");
      ServiceOrder.SETRANGE("Collective List No.", "No.");
      ServiceOrder.SETFILTER("Service Contract No.", '<>%1', '');
      IF NOT ServiceOrder.FINDSET THEN
        EXIT;
      REPEAT
        ServiceSetup.GET;
        ServiceSetup.TESTFIELD("Cost Object Invoice Base");
        DimensionManagement.GetDimValueRec(2, ServiceSetup."Cost Object Invoice Base", DimensionValue, TRUE, '');

        ServiceContract.GET(ServiceOrder."Service Contract No.");
        ServiceContractDiscountTerm.SETRANGE("Service Contract No.", ServiceOrder."Service Contract No.");
        ServiceContractDiscountTerm.SETRANGE(Level, ServiceContractDiscountTerm.Level::Period);
        ServiceContractDiscountTerm.SETFILTER("Invoice Base Method", '<>%1', ServiceContractDiscountTerm."Invoice Base Method"::" ");
        ServiceContractDiscountTerm.SETFILTER("Source Type", '%1|%2', ServiceContractDiscountTerm."Source Type"::None, ServiceOrder."Source Type");
        ServiceContractDiscountTerm.SETFILTER("Starting Date Discount", '%1|<=%2', 0D, WORKDATE);
        FOR ServicePackageLevel := ServicePackageLevel::Order TO ServicePackageLevel::Contract DO BEGIN
          CASE ServicePackageLevel OF
            ServicePackageLevel::Order:
              ServiceContractDiscountTerm.SETRANGE("Service Package", ServiceOrder."Service Package");
            ServicePackageLevel::Contract:
              ServiceContractDiscountTerm.SETRANGE("Service Package", ServiceContract."Service Package");
          END;
          FOR CostTypeMethod := CostTypeMethod::"Specific Cost Type" TO CostTypeMethod::"All Cost Types" DO BEGIN
            CASE CostTypeMethod OF
              CostTypeMethod::"Specific Cost Type":
                ServiceContractDiscountTerm.SETFILTER("Cost Type", '<>%1', ServiceContractDiscountTerm."Cost Type"::" ");
              CostTypeMethod::"All Cost Types":
                ServiceContractDiscountTerm.SETRANGE("Cost Type", ServiceContractDiscountTerm."Cost Type"::" ");
            END;
            IF ServiceContractDiscountTerm.FINDSET THEN BEGIN
              REPEAT
                GetCostPlusAmountsByPeriod(
                  ServiceOrder."No.", ServiceContractDiscountTerm, TmpHandledServiceOrders, AmntMaterial, AmntLabor, InvHrs, AmntSubcontracting, AmntPlant, AmntSundry, AmntTotal, InvAmnt);
                ProportionallyFactor := ServiceContractDiscountTerm.GetProportionallyFactorByServiceOrder(ServiceOrder);
                ServiceContractDiscountTerm."Invoice Base" *= ProportionallyFactor;
                ServiceContractDiscountTerm."Invoice Base Quantity" *= ProportionallyFactor;
                InvAmnt := 0;
                CASE ServiceContractDiscountTerm."Invoice Base Method" OF
                  ServiceContractDiscountTerm."Invoice Base Method"::"total-base":
                    BEGIN
                      CASE ServiceContractDiscountTerm."Cost Type" OF
                        ServiceContractDiscountTerm."Cost Type"::" ":
                          IF AmntTotal > ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= ServiceContractDiscountTerm."Invoice Base"
                          ELSE
                            InvAmnt -= AmntTotal;
                        ServiceContractDiscountTerm."Cost Type"::Material:
                          IF AmntMaterial > ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= ServiceContractDiscountTerm."Invoice Base"
                          ELSE
                            InvAmnt -= AmntMaterial;
                        ServiceContractDiscountTerm."Cost Type"::Labor:
                          IF AmntLabor > ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= ServiceContractDiscountTerm."Invoice Base"
                          ELSE
                            InvAmnt -= AmntLabor;
                        ServiceContractDiscountTerm."Cost Type"::Subcontracting:
                          IF AmntSubcontracting > ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= ServiceContractDiscountTerm."Invoice Base"
                          ELSE
                            InvAmnt -= AmntSubcontracting;
                        ServiceContractDiscountTerm."Cost Type"::Plant:
                          IF AmntPlant > ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= ServiceContractDiscountTerm."Invoice Base"
                          ELSE
                            InvAmnt -= AmntPlant;
                        ServiceContractDiscountTerm."Cost Type"::Sundry:
                          IF AmntSundry > ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= ServiceContractDiscountTerm."Invoice Base"
                          ELSE
                            InvAmnt -= AmntSundry;
                      END;
                    END;
                  ServiceContractDiscountTerm."Invoice Base Method"::"total>base":
                    BEGIN
                      CASE ServiceContractDiscountTerm."Cost Type" OF
                        ServiceContractDiscountTerm."Cost Type"::" ":
                          IF AmntTotal <= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntTotal;
                        ServiceContractDiscountTerm."Cost Type"::Material:
                          IF AmntMaterial <= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntMaterial;
                        ServiceContractDiscountTerm."Cost Type"::Labor:
                          BEGIN
                            IF AmntLabor <= ServiceContractDiscountTerm."Invoice Base" THEN
                              InvAmnt -= AmntLabor;
                            IF InvHrs <= ServiceContractDiscountTerm."Invoice Base Quantity" THEN
                              InvAmnt -= AmntLabor;
                          END;
                        ServiceContractDiscountTerm."Cost Type"::Subcontracting:
                          IF AmntSubcontracting <= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntSubcontracting;
                        ServiceContractDiscountTerm."Cost Type"::Plant:
                          IF AmntPlant <= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntPlant;
                        ServiceContractDiscountTerm."Cost Type"::Sundry:
                          IF AmntSundry <= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntSundry;
                      END;
                    END;
                  ServiceContractDiscountTerm."Invoice Base Method"::"total<base":
                    BEGIN
                      CASE ServiceContractDiscountTerm."Cost Type" OF
                        ServiceContractDiscountTerm."Cost Type"::" ":
                          IF AmntTotal >= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntTotal;
                        ServiceContractDiscountTerm."Cost Type"::Material:
                          IF AmntMaterial >= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntMaterial;
                        ServiceContractDiscountTerm."Cost Type"::Labor:
                          BEGIN
                            IF AmntLabor >= ServiceContractDiscountTerm."Invoice Base" THEN
                              InvAmnt -= AmntLabor;
                            IF InvHrs >= ServiceContractDiscountTerm."Invoice Base Quantity" THEN
                              InvAmnt -= AmntLabor;
                          END;
                        ServiceContractDiscountTerm."Cost Type"::Subcontracting:
                          IF AmntSubcontracting >= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntSubcontracting;
                        ServiceContractDiscountTerm."Cost Type"::Plant:
                          IF AmntPlant >= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntPlant;
                        ServiceContractDiscountTerm."Cost Type"::Sundry:
                          IF AmntSundry >= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntSundry;
                      END;
                    END;
                  ServiceContractDiscountTerm."Invoice Base Method"::"base when total>base":
                    BEGIN
                      CASE ServiceContractDiscountTerm."Cost Type" OF
                        ServiceContractDiscountTerm."Cost Type"::" ":
                          IF AmntTotal >= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntTotal - ServiceContractDiscountTerm."Invoice Base";
                        ServiceContractDiscountTerm."Cost Type"::Material:
                          IF AmntMaterial >= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntMaterial - ServiceContractDiscountTerm."Invoice Base";
                        ServiceContractDiscountTerm."Cost Type"::Labor:
                          BEGIN
                            IF (AmntLabor >= ServiceContractDiscountTerm."Invoice Base") AND (ServiceContractDiscountTerm."Invoice Base" <> 0) THEN
                              InvAmnt -= AmntLabor - ServiceContractDiscountTerm."Invoice Base";
                            IF (InvHrs >= ServiceContractDiscountTerm."Invoice Base Quantity") AND (ServiceContractDiscountTerm."Invoice Base Quantity" <> 0) THEN
                              IF InvHrs <> 0 THEN
                                InvAmnt -= (InvHrs - ServiceContractDiscountTerm."Invoice Base Quantity") * (AmntLabor / InvHrs);
                          END;
                        ServiceContractDiscountTerm."Cost Type"::Subcontracting:
                          IF AmntSubcontracting >= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntSubcontracting - ServiceContractDiscountTerm."Invoice Base";
                        ServiceContractDiscountTerm."Cost Type"::Plant:
                          IF AmntPlant >= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntPlant - ServiceContractDiscountTerm."Invoice Base";
                        ServiceContractDiscountTerm."Cost Type"::Sundry:
                          IF AmntSundry >= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt -= AmntSundry - ServiceContractDiscountTerm."Invoice Base";
                      END;
                    END;
                  ServiceContractDiscountTerm."Invoice Base Method"::"base when total<base":
                    BEGIN
                      CASE ServiceContractDiscountTerm."Cost Type" OF
                        ServiceContractDiscountTerm."Cost Type"::" ":
                          IF AmntTotal <= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt += ServiceContractDiscountTerm."Invoice Base" - AmntTotal;
                        ServiceContractDiscountTerm."Cost Type"::Material:
                          IF AmntMaterial <= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt += ServiceContractDiscountTerm."Invoice Base" - AmntMaterial;
                        ServiceContractDiscountTerm."Cost Type"::Labor:
                          BEGIN
                            IF AmntLabor <= ServiceContractDiscountTerm."Invoice Base" THEN
                              InvAmnt += ServiceContractDiscountTerm."Invoice Base" - AmntLabor;
                            IF InvHrs <= ServiceContractDiscountTerm."Invoice Base Quantity" THEN
                              IF InvHrs <> 0 THEN
                                InvAmnt += (ServiceContractDiscountTerm."Invoice Base Quantity" - InvHrs) * (AmntLabor / InvHrs);
                          END;
                        ServiceContractDiscountTerm."Cost Type"::Subcontracting:
                          IF AmntSubcontracting <= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt += ServiceContractDiscountTerm."Invoice Base" - AmntSubcontracting;
                        ServiceContractDiscountTerm."Cost Type"::Plant:
                          IF AmntPlant <= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt += ServiceContractDiscountTerm."Invoice Base" - AmntPlant;
                        ServiceContractDiscountTerm."Cost Type"::Sundry:
                          IF AmntSundry <= ServiceContractDiscountTerm."Invoice Base" THEN
                            InvAmnt += ServiceContractDiscountTerm."Invoice Base" - AmntSundry;
                      END;
                    END;
                END;

                IF CostTypeMethod = CostTypeMethod::"Specific Cost Type" THEN
                  AmntTotal += InvAmnt;
                IF InvAmnt <> 0 THEN BEGIN
                  ServiceOrderCostPlusEntry.INIT;
                  ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", ServiceOrder."No.");
                  IF ServiceOrderCostPlusEntry.FINDLAST THEN
                    LastLineNo := ServiceOrderCostPlusEntry."Line No.";

                  ServiceOrderCostPlusEntry.INIT;
                  ServiceOrderCostPlusEntry.VALIDATE("Service Order No.", ServiceOrder."No.");
                  ServiceOrderCostPlusEntry."Line No." := LastLineNo + 10000;
                  ServiceOrderCostPlusEntry.INSERT(TRUE);
                  ServiceOrderCostPlusEntry."Cost Object" := DimensionValue.Code;
                  ServiceOrderCostPlusEntry.Description := ServiceContractDiscountTerm.Description;
                  ServiceContractDiscountTerm.GetDiscountPeriodByServiceOrder(ServiceOrder, TRUE, DiscountPeriodStart, DiscountPeriodEnd);
                  ServiceOrderCostPlusEntry."Description 2" :=
                    STRSUBSTNO('%1: %2 - %3', ServiceOrder."Service Contract No.", FORMAT(DiscountPeriodStart), FORMAT(DiscountPeriodEnd));
                  ServiceOrderCostPlusEntry.Quantity := 1;
                  ServiceOrderCostPlusEntry."Unit of Measure" := DimensionValue."Unit of Measure";
                  ServiceOrderCostPlusEntry.VALIDATE("Cost Component", DimensionValue."Cost Component");
                  ServiceOrderCostPlusEntry.VALIDATE("Basic Price (LCY)", InvAmnt);
                  ServiceOrderCostPlusEntry."Sales Price (LCY)" := ServiceOrderCostPlusEntry."Basic Price (LCY)";
                  ServiceOrderCostPlusEntry."Invoice Price (LCY)" := ServiceOrderCostPlusEntry."Basic Price (LCY)";
                  ServiceOrderCostPlusEntry."Discount Term Level" := ServiceContractDiscountTerm.Level +1;
                  ServiceOrderCostPlusEntry."Service Package" := ServiceContractDiscountTerm."Service Package";
                  ServiceOrderCostPlusEntry."Discount Term Line No." := ServiceContractDiscountTerm."Line No.";
                  ServiceOrderCostPlusEntry.VALIDATE("Discount % (ServOrder)", 0); //C026479.n
                  ServiceOrderCostPlusEntry.CalculateSalesPriceFromLCY;
                  ServiceOrderCostPlusEntry.CalculateInvoicePriceFromLCY;
                  IF IForceChargeable THEN
                    ServiceOrderCostPlusEntry.Chargeable := TRUE;
                  ServiceOrderCostPlusEntry.MODIFY;
                END;
              UNTIL ServiceContractDiscountTerm.NEXT = 0;
            END;
          END;
        END;
        TmpHandledServiceOrders := ServiceOrder;
        TmpHandledServiceOrders.INSERT;
      UNTIL ServiceOrder.NEXT = 0;
    END;

    LOCAL PROCEDURE GetCostPlusAmountsByPeriod@1100528614(IServiceOrderNo@1100528616 : Code[20];IServiceContractDiscountTerm@1100528601 : Record 11012828;VAR IHandledServiceOrders@1100528615 : Record 11012823;VAR OAmntMaterial@1100528605 : Decimal;VAR OAmntLabor@1100528604 : Decimal;VAR OInvHrs@1100528600 : Decimal;VAR OAmntSubcontracting@1100528606 : Decimal;VAR OAmntPlant@1100528607 : Decimal;VAR OAmntSundry@1100528608 : Decimal;VAR OAmntTotal@1100528609 : Decimal;VAR OInvAmnt@1100528612 : Decimal);
    VAR
      ServiceSetup@1100528614 : Record 11012800;
      ServiceOrder@1100528603 : Record 11012823;
      CurrentServiceOrder@1100528613 : Record 11012823;
      ServiceOrderCostPlusEntry@1100528602 : Record 11012825;
      ServiceCollectiveList@1100528617 : Record 11071730;
      DiscountPeriodStart@1100528610 : Date;
      DiscountPeriodEnd@1100528611 : Date;
      InFilterGroup@1100525000 : Boolean;
    BEGIN
      ServiceSetup.GET;

      OAmntMaterial := 0;
      OAmntLabor := 0;
      OInvHrs := 0;
      OAmntMaterial := 0;
      OAmntSubcontracting := 0;
      OAmntPlant := 0;
      OAmntSundry := 0;
      OAmntTotal := 0;
      OInvAmnt := 0;

      CurrentServiceOrder.GET(IServiceOrderNo);
      ServiceOrder.SETRANGE("Service Contract No.", IServiceContractDiscountTerm."Service Contract No.");
      ServiceOrder.SETFILTER(Status, '<%1', ServiceOrder.Status::Cancelled);
      ServiceOrder.SETFILTER("Settlement Method", '<>%1', ServiceOrder."Settlement Method"::"Fixed Price");
      ServiceOrder.SETRANGE("Charge Vendor (Warranty)", FALSE);
      IServiceContractDiscountTerm.TESTFIELD("Based on");
      CASE IServiceContractDiscountTerm."Based on" OF
        IServiceContractDiscountTerm."Based on"::"Starting Date":
          BEGIN
            IServiceContractDiscountTerm.GetDiscountPeriod(CurrentServiceOrder."Starting Date", FALSE, DiscountPeriodStart, DiscountPeriodEnd);
            ServiceOrder.SETRANGE("Starting Date", DiscountPeriodStart, DiscountPeriodEnd);
            ServiceOrder.SETCURRENTKEY("Service Contract No.", Status, "Starting Date");
          END;
        IServiceContractDiscountTerm."Based on"::"Order Date":
          BEGIN
            IServiceContractDiscountTerm.GetDiscountPeriod(CurrentServiceOrder."Order Date", FALSE, DiscountPeriodStart, DiscountPeriodEnd);
            ServiceOrder.SETRANGE("Order Date", DiscountPeriodStart, DiscountPeriodEnd);
            ServiceOrder.SETCURRENTKEY("Service Contract No.", "Source Type", "Order Date");
          END;
      END;
      IF ServiceOrder.FINDSET THEN
        REPEAT
          ServiceOrderCostPlusEntry.SETCURRENTKEY("Service Order No.");
          ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", ServiceOrder."No.");
          IF ServiceOrderCostPlusEntry.FINDSET THEN BEGIN
            REPEAT
              IF NOT ServiceCollectiveList.GET(ServiceOrderCostPlusEntry."Collective List No.") THEN
                ServiceCollectiveList.INIT;
              ServiceOrderCostPlusEntry.CALCFIELDS("Invoiced Price (LCY)", "Invoice in Process (LCY)", "Credit Memo in Process (LCY)");

              InFilterGroup :=
                ServiceOrderCostPlusEntry.IsInFilterGroup(ServiceOrderCostPlusEntry, IServiceContractDiscountTerm."Filter Group") AND
                ServiceOrderCostPlusEntry.IsInFilterGroup(ServiceOrderCostPlusEntry, IServiceContractDiscountTerm."Filter Group 2");
              IF ((IServiceContractDiscountTerm."Filter Groups Method" = IServiceContractDiscountTerm."Filter Groups Method"::Exclude) AND NOT InFilterGroup) OR
                 ((IServiceContractDiscountTerm."Filter Groups Method" = IServiceContractDiscountTerm."Filter Groups Method"::Include) AND InFilterGroup)
              THEN BEGIN
                IF ((ServiceOrderCostPlusEntry."Collective List No." = "No.") AND (ServiceOrderCostPlusEntry.Chargeable) AND
                    (IHandledServiceOrders.GET(ServiceOrderCostPlusEntry."Service Order No.") OR (ServiceOrderCostPlusEntry."Service Order No." = IServiceOrderNo))) OR
                   (ServiceOrderCostPlusEntry."Invoiced Price (LCY)" + ServiceOrderCostPlusEntry."Invoice in Process (LCY)" + ServiceOrderCostPlusEntry."Credit Memo in Process (LCY)" <> 0) OR
                   (ServiceCollectiveList.Status = ServiceCollectiveList.Status::Released)
                THEN BEGIN
                  IF (ServiceOrderCostPlusEntry."Cost Object" = ServiceSetup."Cost Object Invoice Base") AND
                     (ServiceOrderCostPlusEntry."Discount Term Level" IN [ServiceOrderCostPlusEntry."Discount Term Level"::Period, ServiceOrderCostPlusEntry."Discount Term Level"::"Base Service Order"])
                  THEN BEGIN
                    OInvAmnt -=
                      (ServiceOrderCostPlusEntry."Invoiced Price (LCY)" +
                       ServiceOrderCostPlusEntry."Invoice in Process (LCY)" + ServiceOrderCostPlusEntry."Credit Memo in Process (LCY)");
                    IF ServiceOrderCostPlusEntry.Chargeable THEN
                     OInvAmnt -= ServiceOrderCostPlusEntry."Invoice Price (LCY)";
                  END ELSE BEGIN
                    ServiceOrderCostPlusEntry.CALCFIELDS("Cost Type");
                    OAmntTotal += ServiceOrderCostPlusEntry."Invoice Price (LCY)";
                    CASE ServiceOrderCostPlusEntry."Cost Type" OF
                      ServiceOrderCostPlusEntry."Cost Type"::Labor:
                        BEGIN
                          OAmntLabor += ServiceOrderCostPlusEntry."Invoice Price (LCY)";
                          OInvHrs += ServiceOrderCostPlusEntry.Quantity;
                        END;
                      ServiceOrderCostPlusEntry."Cost Type"::Material:
                        OAmntMaterial += ServiceOrderCostPlusEntry."Invoice Price (LCY)";
                      ServiceOrderCostPlusEntry."Cost Type"::Subcontracting:
                        OAmntSubcontracting += ServiceOrderCostPlusEntry."Invoice Price (LCY)";
                      ServiceOrderCostPlusEntry."Cost Type"::Plant:
                        OAmntPlant += ServiceOrderCostPlusEntry."Invoice Price (LCY)";
                      ServiceOrderCostPlusEntry."Cost Type"::Sundry:
                        OAmntSundry += ServiceOrderCostPlusEntry."Invoice Price (LCY)";
                    END;
                  END;
                END;
              END;
            UNTIL ServiceOrderCostPlusEntry.NEXT = 0;
          END;
        UNTIL ServiceOrder.NEXT = 0;
    END;

    LOCAL PROCEDURE RemoveInvoiceBaseAmounts@1100528612();
    VAR
      ServiceSetup@1100528602 : Record 11012800;
      ServiceOrderCostPlusEntry@1100528600 : Record 11012825;
    BEGIN
      ServiceSetup.GET;
      IF ServiceSetup."Cost Object Invoice Base" = '' THEN
        EXIT;
      ServiceOrderCostPlusEntry.SETCURRENTKEY("Collective List No.");
      ServiceOrderCostPlusEntry.SETRANGE("Collective List No.", "No.");
      ServiceOrderCostPlusEntry.SETRANGE("Cost Object", ServiceSetup."Cost Object Invoice Base");
      ServiceOrderCostPlusEntry.SETRANGE("Discount Term Level", ServiceOrderCostPlusEntry."Discount Term Level"::Period);
      ServiceOrderCostPlusEntry.SETRANGE("Invoiced Price (LCY)", 0);
      ServiceOrderCostPlusEntry.SETRANGE("Invoice in Process (LCY)", 0);
      ServiceOrderCostPlusEntry.SETRANGE("Credit Memo in Process (LCY)", 0);
      ServiceOrderCostPlusEntry.DELETEALL;
    END;

    PROCEDURE SetDontConfirmRecalculateAtRelease@1100528615(IDontConfirmRecalculateAtRelease@1100528600 : Boolean);
    BEGIN
      DontConfirmRecalculateAtRelease := IDontConfirmRecalculateAtRelease;
    END;

    BEGIN
    END.
  }
}

