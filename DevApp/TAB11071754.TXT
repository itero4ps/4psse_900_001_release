OBJECT Table 11071754 Service-Contract Template
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnDelete=VAR
               ServiceSurchargeVersion@1100528601 : Record 11071783;
               SCCustSourceTypeSetup@1100528602 : Record 11071800;
               ServiceCategoryTemplate@1100528600 : Record 11071997;
             BEGIN
               ServiceSurchargeVersion.SETRANGE(Type, ServiceSurchargeVersion.Type::"Contract Template");
               ServiceSurchargeVersion.SETRANGE(Code, Code);
               ServiceSurchargeVersion.DELETEALL(TRUE);

               SCCustSourceTypeSetup.SETRANGE(Type, SCCustSourceTypeSetup.Type::"Contract Template");
               SCCustSourceTypeSetup.SETRANGE(Code, Code);
               SCCustSourceTypeSetup.DELETEALL(TRUE);

               ServiceCategoryTemplate.SETRANGE("Service Contract Template Code", Code);
               ServiceCategoryTemplate.DELETEALL(TRUE);
             END;

    CaptionML=ENU=Service-Contract Template;
    LookupPageID=Page11125265;
    DrillDownPageID=Page11125265;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 20  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 30  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 200 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
    { 250 ;   ;Contract Group      ;Code20        ;TableRelation="Service Contract Group".Code;
                                                   CaptionML=ENU=Contract Group }
    { 259 ;   ;Service Type (Other);Code20        ;TableRelation="Service Type";
                                                   OnValidate=BEGIN
                                                                ServSetup.GET;
                                                                IF ServSetup."Copy Additional Cost Setup" THEN BEGIN
                                                                   TESTFIELD("Service Type (Other)", "Service Type");
                                                                   VALIDATE("Department Code (Other)", "Global Dimension 1 Code");
                                                                END ELSE BEGIN
                                                                  IF ServTypeRec.GET("Service Type (Other)") THEN
                                                                    IF ServTypeRec."Department Code" <> '' THEN
                                                                      VALIDATE("Department Code (Other)", ServTypeRec."Department Code");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Service Type (Additional Cost) }
    { 260 ;   ;Service Type        ;Code20        ;TableRelation="Service Type".Code;
                                                   OnValidate=BEGIN
                                                                ServSetup.GET;
                                                                IF ServTypeRec.GET("Service Type") THEN
                                                                  IF ServTypeRec."Department Code" <> '' THEN
                                                                    VALIDATE("Global Dimension 1 Code", ServTypeRec."Department Code");
                                                              END;

                                                   CaptionML=ENU=Service Type }
    { 310 ;   ;Contract Duration   ;DateFormula   ;CaptionML=ENU=Contract Duration }
    { 330 ;   ;Termination Period  ;DateFormula   ;CaptionML=ENU=Termination Period }
    { 370 ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 470 ;   ;Surcharge % Labor   ;Decimal       ;CaptionML=ENU=Surcharge % Labor }
    { 480 ;   ;Surcharge % Material;Decimal       ;CaptionML=ENU=Surcharge % Material }
    { 490 ;   ;Surcharge % Subcontr.;Decimal      ;CaptionML=ENU=Surcharge % Subcontracting }
    { 500 ;   ;Surcharge % Plant   ;Decimal       ;CaptionML=ENU=Surcharge % Plant }
    { 600 ;   ;Surcharge % Sundry  ;Decimal       ;CaptionML=ENU=Surcharge % Sundry }
    { 620 ;   ;Invoice Installment ;Option        ;CaptionML=ENU=Invoice Installment;
                                                   OptionCaptionML=ENU=Forehand,Afterwards;
                                                   OptionString=Forehand,Afterwards }
    { 630 ;   ;Invoice Text Installments;Text250  ;CaptionML=ENU=Invoice Text Installments }
    { 640 ;   ;Service Package Contract;Code10    ;TableRelation="Service Package" WHERE (Source Type=CONST(Contract));
                                                   CaptionML=ENU=Service Package Contract }
    { 641 ;   ;Service Package Call;Code10        ;TableRelation="Service Package" WHERE (Source Type=CONST(Call));
                                                   CaptionML=ENU=Service Package Call }
    { 642 ;   ;Service Package Other;Code10       ;TableRelation="Service Package" WHERE (Source Type=CONST(Direct));
                                                   CaptionML=ENU=Service Package Other }
    { 643 ;   ;Service Package Estimate;Code10    ;TableRelation="Service Package" WHERE (Source Type=CONST(Estimate));
                                                   CaptionML=ENU=Service Package Estimate }
    { 649 ;   ;Service Package     ;Code10        ;TableRelation="Service Package" WHERE (Source Type=CONST(None));
                                                   OnValidate=VAR
                                                                ServicePackage@1100525000 : Record 11012806;
                                                              BEGIN
                                                                IF ServicePackage.GET("Service Package") THEN BEGIN
                                                                  VALIDATE("Service Package Call", ServicePackage."Service Package Call");
                                                                  VALIDATE("Service Package Contract", ServicePackage."Service Package Contract");
                                                                  VALIDATE("Service Package Other", ServicePackage."Service Package Direct");
                                                                  VALIDATE("Service Package Estimate", ServicePackage."Service Package Estimate");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Service Package }
    { 750 ;   ;Invoice Base Amount Labor;Decimal  ;OnValidate=BEGIN
                                                                VALIDATE("Invoice Base Amount Total", "Invoice Base Amount Labor" + "Invoice Base Amount Material");
                                                              END;

                                                   CaptionML=ENU=Invoice Base Amount Labor;
                                                   AutoFormatType=1 }
    { 751 ;   ;Invoice Base Hours  ;Decimal       ;CaptionML=ENU=Invoice Base Hours;
                                                   DecimalPlaces=2:5 }
    { 752 ;   ;Invoice Base Amount Material;Decimal;
                                                   OnValidate=BEGIN
                                                                VALIDATE("Invoice Base Amount Total", "Invoice Base Amount Labor" + "Invoice Base Amount Material");
                                                              END;

                                                   CaptionML=ENU=Invoice Base Amount Material;
                                                   AutoFormatType=1 }
    { 755 ;   ;Invoice Base Amount Total;Decimal  ;OnValidate=BEGIN
                                                                IF ("Invoice Base Amount Labor" <> 0) OR ("Invoice Base Amount Material" <> 0) THEN
                                                                  TESTFIELD("Invoice Base Amount Total", "Invoice Base Amount Labor" + "Invoice Base Amount Material");
                                                              END;

                                                   CaptionML=ENU=Invoice Base Amount Total;
                                                   AutoFormatType=1 }
    { 760 ;   ;Invoice Base Method ;Option        ;OnValidate=BEGIN
                                                                IF "Invoice Base Method" = "Invoice Base Method"::" " THEN BEGIN
                                                                  "Invoice Base Amount Labor" := 0;
                                                                  "Invoice Base Hours" := 0;
                                                                  "Invoice Base Amount Material" := 0;
                                                                  "Invoice Base Amount Total" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Invoice Base Method;
                                                   OptionCaptionML=ENU=" ,Total Service Order - Invoice Base Amount,Invoice Base Amount if exceeding Total Service Order";
                                                   OptionString=[ ,total-base,base] }
    { 769 ;   ;Department Code (Other);Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ServSetup.GET;
                                                                IF ServSetup."Copy Additional Cost Setup" THEN
                                                                   TESTFIELD("Department Code (Other)", "Global Dimension 1 Code");

                                                                ValidateShortcutDimCode(1, "Department Code (Other)");
                                                              END;

                                                   CaptionML=ENU=Department (Additional Cost) }
    { 770 ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 810 ;   ;Preferred Employee OBS;Code20      ;TableRelation="Resource (WOP)" WHERE (Type=CONST(Employee));
                                                   CaptionML=ENU=Preferred Employee OBSOLETE;
                                                   Description=OBSOLETE;
                                                   Editable=No }
    { 1090;   ;Send Mail Status Update;Boolean    ;CaptionML=ENU=Send Mail at Status update }
    { 1095;   ;Send Mail Work Sheet;Boolean       ;CaptionML=ENU=Send Mail Work Sheet }
    { 1216;   ;Start Date Cntrl Period on 1/1;Boolean;
                                                   CaptionML=ENU=Start Date Control Period on 1/1;
                                                   Description=SERV_CONS }
    { 1240;   ;Invoice Type        ;Option        ;OnValidate=BEGIN
                                                                IF xRec."Invoice Type" <> "Invoice Type" THEN BEGIN
                                                                  CASE "Invoice Type" OF
                                                                    "Invoice Type"::Dynamic: BEGIN
                                                                      "Dynamic Invoice Type" := "Dynamic Invoice Type"::Days;
                                                                      CLEAR("Installment Type");
                                                                    END;
                                                                    "Invoice Type"::Installments: BEGIN
                                                                      CLEAR("Invoice Interval");
                                                                      CLEAR("Dynamic Invoice Type");
                                                                      "Installment Type" := "Installment Type"::Contract;
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Invoice Type;
                                                   OptionCaptionML=ENU=Dynamic,Installments;
                                                   OptionString=Dynamic,Installments;
                                                   Description=SERV_CONS }
    { 1250;   ;Contract Limit      ;Option        ;OnValidate=BEGIN
                                                                IF (xRec."Contract Limit" <> "Contract Limit") AND ("Contract Limit" = "Contract Limit"::Unlimited) THEN
                                                                  CLEAR("Contract Duration");
                                                              END;

                                                   CaptionML=ENU=Contract Limit;
                                                   OptionCaptionML=ENU=Limited,Unlimited;
                                                   OptionString=Limited,Unlimited;
                                                   Description=SERV_CONS }
    { 1280;   ;Invoice Interval    ;DateFormula   ;CaptionML=ENU=Invoice Interval;
                                                   Description=SERV_CONS }
    { 1310;   ;Control Period Interval;DateFormula;CaptionML=ENU=Control Period Interval;
                                                   Description=SERV_CONS }
    { 1320;   ;Calculate Travel Costs;Option      ;CaptionML=ENU=Calculate Travel Costs;
                                                   OptionCaptionML=ENU=" ,Travel Cost,Travel Distance and Time";
                                                   OptionString=[ ,Travel Cost,Travel Distance+Time];
                                                   Description=SERV_CONS }
    { 1330;   ;Calc. Field Serv. Travel Costs;Boolean;
                                                   CaptionML=ENU=Calculate Field Service Travel Costs;
                                                   Description=SERV_CONS }
    { 1430;   ;Publish on Service Portal;Boolean  ;CaptionML=ENU=Publish on Service Portal }
    { 1440;   ;Invoicing via Collective List;Boolean;
                                                   OnValidate=BEGIN
                                                                IF "Invoicing via Collective List" THEN
                                                                  IF "Invoice Type" = "Invoice Type"::Dynamic THEN
                                                                    TESTFIELD("Invoice Interval");
                                                              END;

                                                   CaptionML=ENU=Invoicing via Collective List }
    { 1450;   ;Service Index Method;Code10        ;TableRelation="Service Index Method";
                                                   CaptionML=ENU=Index Method }
    { 1460;   ;Plan Method         ;Option        ;CaptionML=ENU=Plan Method;
                                                   OptionCaptionML=ENU=Theoretical Maintenance Date,Last Execution Date;
                                                   OptionString=Theoretical Maintenance Date,Last Execution Date }
    { 1490;   ;Contract Form       ;Option        ;CaptionML=ENU=Contract Form;
                                                   OptionCaptionML=ENU=" ,Framework Contract,Rental Contract";
                                                   OptionString=[ ,Framework Contract,Rental Contract] }
    { 1550;   ;Installment Type    ;Option        ;OnValidate=BEGIN
                                                                IF "Installment Type" = "Installment Type"::" " THEN
                                                                  TESTFIELD("Invoice Type", "Invoice Type"::Dynamic);
                                                              END;

                                                   CaptionML=ENU=Installment Type;
                                                   OptionCaptionML=ENU=" ,Contract,Object";
                                                   OptionString=[ ,Contract,Object] }
    { 1590;   ;Dynamic Invoice Type;Option        ;OnValidate=BEGIN
                                                                IF "Dynamic Invoice Type" <> "Dynamic Invoice Type"::" " THEN
                                                                  TESTFIELD("Invoice Type", "Invoice Type"::Dynamic)
                                                                ELSE
                                                                  FIELDERROR("Dynamic Invoice Type");
                                                                IF "Dynamic Invoice Type" = "Dynamic Invoice Type"::"Invoice Interval" THEN
                                                                  TESTFIELD("Invoice Interval");
                                                              END;

                                                   CaptionML=ENU=Dynamic Invoice Type;
                                                   OptionCaptionML=ENU=" ,Days,Invoice Interval";
                                                   OptionString=[ ,Days,Invoice Interval] }
    { 1600;   ;OLD Allow Prem. Closing Order;Boolean;
                                                   CaptionML=ENU=OLD Allow Premature Closing Order }
    { 1601;   ;Always Allow Cls Ord. (Maint.);Boolean;
                                                   CaptionML=ENU=Always Close Orders (Maint.) }
    { 1602;   ;Always Allow Cls Ord. (Call);Boolean;
                                                   CaptionML=ENU=Always Close Orders (Call) }
    { 1603;   ;Always Allow Cls Ord. (Ext.);Boolean;
                                                   CaptionML=ENU=Always Close Orders (Extension) }
    { 1610;   ;Progress % Calculation (Precl);Option;
                                                   CaptionML=ENU=Progress % Calculation (Preclosure Result);
                                                   OptionCaptionML=ENU=Allowed Hours,,,Actual Cost;
                                                   OptionString=Allowed Hours,,,Actual Cost }
    { 1620;   ;Payment Method Code (Con.Inv.);Code10;
                                                   TableRelation="Payment Method";
                                                   CaptionML=ENU=Payment Method Code }
    { 1630;   ;Travel Cost Code    ;Code10        ;TableRelation="Travel Cost Code";
                                                   CaptionML=ENU=Travel Cost Code }
    { 1640;   ;Budget Based on     ;Option        ;OnValidate=VAR
                                                                ServiceCategoryTemplate@1100528600 : Record 11071997;
                                                              BEGIN
                                                                IF "Budget Based on" = "Budget Based on"::"Maintenance Scheme" THEN BEGIN
                                                                  TESTFIELD("Service Category (Calls)", '');
                                                                  TESTFIELD("Service Category (Extension)", '');
                                                                  ServiceCategoryTemplate.SETRANGE("Service Contract Template Code", Code);
                                                                  IF NOT ServiceCategoryTemplate.ISEMPTY THEN
                                                                    FIELDERROR("Budget Based on", STRSUBSTNO(Text000, ServiceCategoryTemplate.TABLECAPTION));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Budget Based on;
                                                   OptionCaptionML=ENU=Maintenance Scheme,Contract;
                                                   OptionString=Maintenance Scheme,Contract }
    { 1650;   ;Service Category (Calls);Code10    ;TableRelation="Service Category Template".Code WHERE (Service Contract Template Code=FIELD(Code));
                                                   CaptionML=ENU=Service Category (Calls) }
    { 1660;   ;Service Category (Extension);Code10;TableRelation="Service Category Template".Code WHERE (Service Contract Template Code=FIELD(Code));
                                                   CaptionML=ENU=Service Category (Extension) }
    { 1680;   ;Compress Dyn. Inv. Prop. Lines;Boolean;
                                                   CaptionML=ENU=Compress Dyn. Inv. Prop. Lines }
    { 1690;   ;Create Adv./Purch. Subc. Call;Option;
                                                   CaptionML=ENU=Create Advice/Purchase Order with Subcontracting (Call);
                                                   OptionCaptionML=ENU=User Setup,Yes,No;
                                                   OptionString=Setup,Yes,No }
    { 1691;   ;Create Adv./Purch. Subc. Con.;Option;
                                                   CaptionML=ENU=Create Advice/Purchase Order with Subcontracting (Contract);
                                                   OptionCaptionML=ENU=User Setup,Yes,No;
                                                   OptionString=Setup,Yes,No }
    { 1692;   ;Create Adv./Purch. Subc. Dir.;Option;
                                                   CaptionML=ENU=Create Advice/Purchase Order with Subcontracting (Direct);
                                                   OptionCaptionML=ENU=User Setup,Yes,No;
                                                   OptionString=Setup,Yes,No }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ServSetup@1100528600 : Record 11012800;
      ServTypeRec@1100528601 : Record 11012814;
      Text000@1100528602 : TextConst 'ENU=%1 lines exist';

    PROCEDURE AssistEdit@2(OldServiceContractTemplate@11012000 : Record 11071754) : Boolean;
    VAR
      ServiceContractTemplate@1100525000 : Record 11071754;
      NoSeriesMgt@1100528600 : Codeunit 396;
    BEGIN
      WITH ServiceContractTemplate DO BEGIN
        ServiceContractTemplate := Rec;
        ServSetup.GET;
        ServSetup.TESTFIELD("Service Contract Nos.");
        IF NoSeriesMgt.SelectSeries(ServSetup."Service Contract Nos.", OldServiceContractTemplate."No. Series", "No. Series") THEN BEGIN
      //    NoSeriesMgt.SetSeries("No.");
          Rec := ServiceContractTemplate;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimMgt@1100525000 : Codeunit 408;
      DimValRec@1100525001 : Record 349;
    BEGIN
      //db, 19-08-09: M15896
      IF ShortcutDimCode = '' THEN
        EXIT;
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.GetDimValueRec(FieldNumber, ShortcutDimCode, DimValRec, TRUE,'');
      IF NOT DimMgt.CheckDimValue(DimValRec."Dimension Code",ShortcutDimCode) THEN
        ERROR(DimMgt.GetDimErr);
    END;

    BEGIN
    END.
  }
}

