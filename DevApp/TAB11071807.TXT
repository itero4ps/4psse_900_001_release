OBJECT Table 11071807 Serv. Surv. Loc. Obj. Detail
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TestObjectsNotCreated;
               GetDefaultIncludeInContract;  //DP00978
             END;

    OnModify=BEGIN
               TestObjectsNotCreated;
             END;

    OnDelete=VAR
               ServSurvObjectAddAct@1100528600 : Record 11071814;
             BEGIN
               TestObjectsNotCreated;

               ServSurvObjectAddAct.SETRANGE("Survey No.", "Survey No.");
               ServSurvObjectAddAct.SETRANGE("Location Code", "Location Code");
               ServSurvObjectAddAct.SETRANGE("Seq. No.", "Seq. No.");
               ServSurvObjectAddAct.SETRANGE("Maintenance Scheme Code", "Maintenance Scheme Code");
               ServSurvObjectAddAct.DELETEALL(TRUE);
             END;

    CaptionML=ENU=Service Survey Location Object Detail;
    LookupPageID=Page11126129;
    DrillDownPageID=Page11126129;
  }
  FIELDS
  {
    { 10  ;   ;Survey No.          ;Code20        ;TableRelation="Service Survey";
                                                   CaptionML=ENU=Survey No.;
                                                   NotBlank=Yes }
    { 20  ;   ;Location Code       ;Code10        ;TableRelation="Service Survey Location"."Location Code" WHERE (Survey No.=FIELD(Survey No.));
                                                   CaptionML=ENU=Location Code;
                                                   NotBlank=Yes }
    { 30  ;   ;Seq. No.            ;Integer       ;TableRelation="Serv. Surv. Location Object"."Seq. No." WHERE (Survey No.=FIELD(Survey No.),
                                                                                                                 Location Code=FIELD(Location Code));
                                                   OnValidate=VAR
                                                                ServSurvLocationObject@1100528600 : Record 11071813;
                                                              BEGIN
                                                                IF xRec."Seq. No." <> "Seq. No." THEN
                                                                  IF ServSurvLocationObject.GET("Survey No.", "Location Code", "Seq. No.") THEN
                                                                    VALIDATE("Service Package", ServSurvLocationObject."Service Package");
                                                              END;

                                                   CaptionML=ENU=Seq. No.;
                                                   NotBlank=Yes }
    { 40  ;   ;Standard Object No. ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Serv. Surv. Location Object"."Standard Object No." WHERE (Survey No.=FIELD(Survey No.),
                                                                                                                                 Location Code=FIELD(Location Code),
                                                                                                                                 Seq. No.=FIELD(Seq. No.)));
                                                   OnValidate=BEGIN
                                                                UpdateTotals;
                                                              END;

                                                   CaptionML=ENU=Standard Object No.;
                                                   Editable=No }
    { 50  ;   ;Object Description  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Serv. Surv. Location Object".Description WHERE (Survey No.=FIELD(Survey No.),
                                                                                                                       Location Code=FIELD(Location Code),
                                                                                                                       Seq. No.=FIELD(Seq. No.)));
                                                   CaptionML=ENU=Object Description;
                                                   Editable=No }
    { 55  ;   ;Object Description 2;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Serv. Surv. Location Object"."Description 2" WHERE (Survey No.=FIELD(Survey No.),
                                                                                                                           Location Code=FIELD(Location Code),
                                                                                                                           Seq. No.=FIELD(Seq. No.)));
                                                   CaptionML=ENU=Object Description 2;
                                                   Editable=No }
    { 59  ;   ;Include in Contract ;Boolean       ;CaptionML=ENU=Include in Contract;
                                                   Description=DP00978 }
    { 70  ;   ;Service Package     ;Code10        ;CaptionML=ENU=Service Package;
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 80  ;   ;Maintenance Scheme Code;Code20     ;TableRelation="Maintenance Scheme" WHERE (Subcontracting=FIELD(Subcontracting));
                                                   OnValidate=VAR
                                                                MaintenanceScheme@1100528600 : Record 11071745;
                                                              BEGIN
                                                                IF "Maintenance Scheme Code" <> '' THEN BEGIN
                                                                  MaintenanceScheme.GET("Maintenance Scheme Code");
                                                                  MaintenanceScheme.TESTFIELD(Expired, FALSE);
                                                                  VALIDATE("Maintenance Interval", MaintenanceScheme."Maintenance Interval");
                                                                  IF MaintenanceScheme."Survey Template" THEN
                                                                    CopyMaintenanceSchemeVersionLinesToHigherLevel;
                                                                END;
                                                                UpdateTotals;
                                                              END;

                                                   OnLookup=VAR
                                                              StdObjectMaintenanceScheme@1100528600 : Record 11071703;
                                                              MaintenanceScheme@1100528601 : Record 11071745;
                                                            BEGIN
                                                              CALCFIELDS("Standard Object No.");
                                                              StdObjectMaintenanceScheme.SETRANGE("Object No.", "Standard Object No.");
                                                              StdObjectMaintenanceScheme.SETRANGE("Service Package", "Service Package");
                                                              StdObjectMaintenanceScheme.SETRANGE(Subcontracting, Subcontracting);
                                                              IF StdObjectMaintenanceScheme.FINDSET THEN
                                                                REPEAT
                                                                  MaintenanceScheme.Code := StdObjectMaintenanceScheme."Maintenance Scheme";
                                                                  MaintenanceScheme.MARK(TRUE);
                                                                UNTIL StdObjectMaintenanceScheme.NEXT = 0;
                                                              MaintenanceScheme.MARKEDONLY(TRUE);
                                                              IF "Maintenance Scheme Code" <> '' THEN
                                                                IF MaintenanceScheme.GET("Maintenance Scheme Code") THEN;
                                                              IF PAGE.RUNMODAL(0, MaintenanceScheme) = ACTION::LookupOK THEN
                                                                VALIDATE("Maintenance Scheme Code", MaintenanceScheme.Code);
                                                            END;

                                                   CaptionML=ENU=Maintenance Scheme Code;
                                                   NotBlank=Yes }
    { 90  ;   ;Maintenance Scheme Description;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Maintenance Scheme".Description WHERE (Code=FIELD(Maintenance Scheme Code)));
                                                   CaptionML=ENU=Maintenance Scheme Description;
                                                   Editable=No }
    { 100 ;   ;Maintenance Interval;DateFormula   ;OnValidate=BEGIN
                                                                UpdateFrequencyPerYear;
                                                                UpdateTotals;
                                                              END;

                                                   CaptionML=ENU=Maintenance Interval }
    { 105 ;   ;Frequency per Year  ;Decimal       ;CaptionML=ENU=Frequency per Year;
                                                   Editable=No }
    { 110 ;   ;Labor per Service   ;Decimal       ;CaptionML=ENU=Labor per Service;
                                                   Editable=No }
    { 120 ;   ;Hours per Service   ;Decimal       ;CaptionML=ENU=Hours per Service;
                                                   Editable=No }
    { 130 ;   ;Material per Service;Decimal       ;CaptionML=ENU=Material per Service;
                                                   Editable=No }
    { 140 ;   ;Subcontracting per Service;Decimal ;CaptionML=ENU=Subcontracting per Service;
                                                   Editable=No }
    { 150 ;   ;Plant per Service   ;Decimal       ;CaptionML=ENU=Plant per Service;
                                                   Editable=No }
    { 160 ;   ;Sundry per Service  ;Decimal       ;CaptionML=ENU=Sundry per Service;
                                                   Editable=No }
    { 170 ;   ;Total Cost per Service;Decimal     ;CaptionML=ENU=Total Cost per Service;
                                                   Editable=No }
    { 180 ;   ;Total Labor         ;Decimal       ;FieldClass=Normal;
                                                   CaptionML=ENU=Total Labor;
                                                   Editable=No }
    { 190 ;   ;Total Hours         ;Decimal       ;CaptionML=ENU=Total Hours;
                                                   Editable=No }
    { 200 ;   ;Total Material      ;Decimal       ;CaptionML=ENU=Total Material;
                                                   Editable=No }
    { 210 ;   ;Total Subcontracting;Decimal       ;CaptionML=ENU=Total Subcontracting;
                                                   Editable=No }
    { 220 ;   ;Total Plant         ;Decimal       ;CaptionML=ENU=Total Plant;
                                                   Editable=No }
    { 230 ;   ;Total Sundry        ;Decimal       ;CaptionML=ENU=Total Sundry;
                                                   Editable=No }
    { 240 ;   ;Total Cost          ;Decimal       ;CaptionML=ENU=Total Cost;
                                                   Editable=No }
    { 250 ;   ;Surcharge per Service;Decimal      ;CaptionML=ENU=Surcharge per Service;
                                                   Editable=No }
    { 251 ;   ;Surcharge per Service (Labor);Decimal;
                                                   CaptionML=ENU=Surcharge per Service (Labor);
                                                   Editable=No }
    { 252 ;   ;Surcharge per Service (Mat.);Decimal;
                                                   CaptionML=ENU=Surcharge per Service (Material);
                                                   Editable=No }
    { 253 ;   ;Surcharge per Service (Subc.);Decimal;
                                                   CaptionML=ENU=Surcharge per Service (Subcontracting);
                                                   Editable=No }
    { 254 ;   ;Surcharge per Service (Plant);Decimal;
                                                   CaptionML=ENU=Surcharge per Service (Plant);
                                                   Editable=No }
    { 255 ;   ;Surcharge per Service (Sundry);Decimal;
                                                   CaptionML=ENU=Surcharge per Service (Sundry);
                                                   Editable=No }
    { 260 ;   ;Total Surcharge     ;Decimal       ;CaptionML=ENU=Total Surcharge;
                                                   Editable=No }
    { 261 ;   ;Total Surcharge (Labor);Decimal    ;CaptionML=ENU=Total Surcharge (Labor);
                                                   Editable=No }
    { 262 ;   ;Total Surcharge (Material);Decimal ;CaptionML=ENU=Total Surcharge (Material);
                                                   Editable=No }
    { 263 ;   ;Total Surcharge (Subcontr.);Decimal;CaptionML=ENU=Total Surcharge (Subcontracting);
                                                   Editable=No }
    { 264 ;   ;Total Surcharge (Plant);Decimal    ;CaptionML=ENU=Total Surcharge (Plant);
                                                   Editable=No }
    { 265 ;   ;Total Surcharge (Sundry);Decimal   ;CaptionML=ENU=Total Surcharge (Sundry);
                                                   Editable=No }
    { 270 ;   ;Sales Surcharge per Service;Decimal;CaptionML=ENU=Sales Surcharge per Service;
                                                   Editable=No }
    { 271 ;   ;Sales Surch. per Serv. (Labor);Decimal;
                                                   CaptionML=ENU=Sales Surcharge per Service (Labor);
                                                   Editable=No }
    { 272 ;   ;Sales Surch. per Serv. (Mat.);Decimal;
                                                   CaptionML=ENU=Sales Surcharge per Service (Material);
                                                   Editable=No }
    { 273 ;   ;Sales Surch. per Serv. (Subc.);Decimal;
                                                   CaptionML=ENU=Sales Surcharge per Service (Subcontracting);
                                                   Editable=No }
    { 274 ;   ;Sales Surch. per Serv. (Plant);Decimal;
                                                   CaptionML=ENU=Sales Surcharge per Service (Plant);
                                                   Editable=No }
    { 275 ;   ;Sales Surch. per Serv. (Sun.);Decimal;
                                                   CaptionML=ENU=Sales Surcharge per Service (Sundry);
                                                   Editable=No }
    { 280 ;   ;Total Sales Surcharge;Decimal      ;CaptionML=ENU=Total Sales Surcharge;
                                                   Editable=No }
    { 281 ;   ;Total Sales Surch. (Labor);Decimal ;CaptionML=ENU=Total Sales Surcharge (Labor);
                                                   Editable=No }
    { 282 ;   ;Total Sales Surch. (Material);Decimal;
                                                   CaptionML=ENU=Total Sales Surcharge (Material);
                                                   Editable=No }
    { 283 ;   ;Total Sales Surch. (Subcontr.);Decimal;
                                                   CaptionML=ENU=Total Sales Surcharge (Subcontracting);
                                                   Editable=No }
    { 284 ;   ;Total Sales Surch. (Plant);Decimal ;CaptionML=ENU=Total Sales Surcharge (Plant);
                                                   Editable=No }
    { 285 ;   ;Total Sales Surch. (Sundry);Decimal;CaptionML=ENU=Total Sales Surcharge (Sundry);
                                                   Editable=No }
    { 290 ;   ;Subcontracting      ;Boolean       ;CaptionML=ENU=Subcontracting }
    { 300 ;   ;Subcontractor No.   ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Subcontractor No. }
  }
  KEYS
  {
    {    ;Survey No.,Location Code,Seq. No.,Maintenance Scheme Code;
                                                   SumIndexFields=Total Cost,Total Surcharge,Total Sales Surcharge,Total Hours,Total Material,Total Labor,Total Plant,Total Subcontracting,Total Sundry;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE UpdateTotals@1100528600();
    VAR
      ServiceSurveyManagement@1100528600 : Codeunit 11012852;
    BEGIN
      "Labor per Service" := 0;
      "Hours per Service" := 0;
      "Material per Service" := 0;
      "Subcontracting per Service" := 0;
      "Plant per Service" := 0;
      "Sundry per Service" := 0;
      "Total Cost per Service" := 0;

      ServiceSurveyManagement.GetCostObjectDetail(Rec, "Labor per Service", "Hours per Service", "Material per Service",
        "Subcontracting per Service", "Plant per Service", "Sundry per Service", "Total Cost per Service");

      "Surcharge per Service" :=
        GetSurveySurchargeAmounts(
          0, "Surcharge per Service (Labor)", "Surcharge per Service (Mat.)", "Surcharge per Service (Subc.)",
          "Surcharge per Service (Plant)", "Surcharge per Service (Sundry)");

      "Sales Surcharge per Service" :=
        GetSurveySurchargeAmounts(
          1, "Sales Surch. per Serv. (Labor)", "Sales Surch. per Serv. (Mat.)", "Sales Surch. per Serv. (Subc.)",
          "Sales Surch. per Serv. (Plant)", "Sales Surch. per Serv. (Sun.)");

      "Total Labor" := "Labor per Service" * "Frequency per Year";
      "Total Hours" := "Hours per Service" * "Frequency per Year";
      "Total Material" := "Material per Service" * "Frequency per Year";
      "Total Subcontracting" := "Subcontracting per Service" * "Frequency per Year";
      "Total Plant" := "Plant per Service" * "Frequency per Year";
      "Total Sundry" := "Sundry per Service" * "Frequency per Year";
      "Total Cost" := "Total Cost per Service" * "Frequency per Year";

      "Total Surcharge" := "Surcharge per Service" * "Frequency per Year";
      "Total Surcharge (Labor)" := "Surcharge per Service (Labor)" * "Frequency per Year";
      "Total Surcharge (Material)" := "Surcharge per Service (Mat.)" * "Frequency per Year";
      "Total Surcharge (Subcontr.)" := "Surcharge per Service (Subc.)" * "Frequency per Year";
      "Total Surcharge (Plant)" := "Surcharge per Service (Plant)" * "Frequency per Year";
      "Total Surcharge (Sundry)" := "Surcharge per Service (Sundry)" * "Frequency per Year";

      "Total Sales Surcharge" := "Sales Surcharge per Service" * "Frequency per Year";
      "Total Sales Surch. (Labor)" := "Sales Surch. per Serv. (Labor)" * "Frequency per Year";
      "Total Sales Surch. (Material)" := "Sales Surch. per Serv. (Mat.)" * "Frequency per Year";
      "Total Sales Surch. (Subcontr.)" := "Sales Surch. per Serv. (Subc.)" * "Frequency per Year";
      "Total Sales Surch. (Plant)" := "Sales Surch. per Serv. (Plant)" * "Frequency per Year";
      "Total Sales Surch. (Sundry)" := "Sales Surch. per Serv. (Sun.)" * "Frequency per Year";
    END;

    PROCEDURE UpdateTotalsObject@1100528601();
    VAR
      ServSurvLocationObject@1100528600 : Record 11071813;
    BEGIN
      IF ServSurvLocationObject.GET("Survey No.", "Location Code", "Seq. No.") THEN BEGIN
        ServSurvLocationObject.UpdateTotals;
        ServSurvLocationObject.MODIFY;
      END;
    END;

    PROCEDURE UpdateFrequencyPerYear@1100485000();
    VAR
      HelpTxt1@1100485000 : Text[30];
      HelpTxt2@1100485001 : Text[30];
      HelpDec1@1100485002 : Decimal;
    BEGIN
      HelpTxt1 := FORMAT("Maintenance Interval");
      HelpTxt2 := DELCHR(HelpTxt1, '=', '0123456789');

      IF (HelpTxt1 = '') OR (HelpTxt2 = '') THEN EXIT;

      EVALUATE(HelpDec1, COPYSTR(HelpTxt1, 1, STRPOS(HelpTxt1, HelpTxt2)-1));
      IF HelpDec1 = 0 THEN EXIT;

      CASE HelpTxt2 OF
        'D':
          "Frequency per Year" := 365 / HelpDec1;
        'W':
          "Frequency per Year" := 52 / HelpDec1;
        'M':
          "Frequency per Year" := 12 / HelpDec1;
        'K','Q':
          "Frequency per Year" := 4 / HelpDec1;
        'J','Y':
          "Frequency per Year" := 1 / HelpDec1;
      END;

      VALIDATE("Frequency per Year");
    END;

    PROCEDURE TestObjectsNotCreated@1100528603();
    VAR
      ServSurvLocationObject@1100528600 : Record 11071813;
    BEGIN
      IF ServSurvLocationObject.GET("Survey No.", "Location Code", "Seq. No.") THEN
        ServSurvLocationObject.TESTFIELD("Objects Created", FALSE);
    END;

    PROCEDURE CopyMaintenanceSchemeVersionLinesToHigherLevel@1100528602();
    VAR
      MaintenanceSchemeVersion@1100528601 : Record 11071743;
      MaintSchemeVersionLine@1100528600 : Record 11071744;
      ServSurvObjectAddAct@1100528603 : Record 11071814;
      ServiceSurvey@1100528602 : Record 11071803;
      LineNo@1100528604 : Integer;
    BEGIN
      IF "Maintenance Scheme Code" = '' THEN
        EXIT;
      ServiceSurvey.GET("Survey No.");
      ServiceSurvey.TESTFIELD("Reference Date");

      MaintenanceSchemeVersion.SETRANGE("Line Type", MaintenanceSchemeVersion."Line Type"::"Maintenance Scheme");
      MaintenanceSchemeVersion.SETRANGE(Code, "Maintenance Scheme Code");
      MaintenanceSchemeVersion.SETRANGE("Belongs to Scheme", '');
      MaintenanceSchemeVersion.SETFILTER("Index Date", '<=%1', ServiceSurvey."Reference Date");
      MaintenanceSchemeVersion.SETRANGE(Expired, FALSE);
      IF NOT MaintenanceSchemeVersion.FINDLAST THEN
        EXIT;

      MaintSchemeVersionLine.SETRANGE("Line Type", MaintenanceSchemeVersion."Line Type");
      MaintSchemeVersionLine.SETRANGE("Type Code", MaintenanceSchemeVersion.Code);
      MaintSchemeVersionLine.SETRANGE("Belongs to Scheme", '');
      MaintSchemeVersionLine.SETRANGE("Index Date", MaintenanceSchemeVersion."Index Date");
      IF MaintSchemeVersionLine.FINDSET THEN
        REPEAT
          ServSurvObjectAddAct.INIT;
          ServSurvObjectAddAct."Survey No." := "Survey No.";
          ServSurvObjectAddAct."Location Code" := "Location Code";
          ServSurvObjectAddAct."Seq. No." := "Seq. No.";
          ServSurvObjectAddAct."Maintenance Scheme Code" := "Maintenance Scheme Code";
          ServSurvObjectAddAct."Line No." := LineNo + 10000;
          ServSurvObjectAddAct.INSERT(TRUE);

          ServSurvObjectAddAct."Cost Type" := MaintSchemeVersionLine."Cost Type";
          ServSurvObjectAddAct."Unit of Measure" := MaintSchemeVersionLine."Unit of Measure";
          ServSurvObjectAddAct.VALIDATE("Maintenance Interval", "Maintenance Interval");
          IF ServSurvObjectAddAct."Cost Type" = ServSurvObjectAddAct."Cost Type"::Labor THEN BEGIN
            IF MaintSchemeVersionLine.Norm <> 0 THEN
              ServSurvObjectAddAct.VALIDATE(Norm, MaintSchemeVersionLine.Norm);
            IF MaintSchemeVersionLine."Rate Code" <> '' THEN
              ServSurvObjectAddAct.VALIDATE("Rate Code", MaintSchemeVersionLine."Rate Code")
            ELSE
              ServSurvObjectAddAct.VALIDATE(Rate, MaintSchemeVersionLine.Rate);
          END;
          ServSurvObjectAddAct.VALIDATE("Cost Object", MaintSchemeVersionLine."Cost Object");
          ServSurvObjectAddAct.VALIDATE("Cost Component", MaintSchemeVersionLine."Cost Component");
          ServSurvObjectAddAct.VALIDATE("Item No.", MaintSchemeVersionLine."Item No.");
          ServSurvObjectAddAct.VALIDATE(Manufacturer, MaintSchemeVersionLine.Manufacturer);
          ServSurvObjectAddAct.VALIDATE("Basic Item", MaintSchemeVersionLine."Basic Item");
          ServSurvObjectAddAct.VALIDATE("Vendor (Trade Item)", MaintSchemeVersionLine."Vendor (Trade Item)");
          ServSurvObjectAddAct.VALIDATE("Trade Item", MaintSchemeVersionLine."Trade Item");
          ServSurvObjectAddAct.VALIDATE(Vendor, MaintSchemeVersionLine.Vendor);
          IF (ServSurvObjectAddAct."Cost Type" <> ServSurvObjectAddAct."Cost Type"::Labor) AND
             ((MaintSchemeVersionLine."Basic Item" = '') AND (MaintSchemeVersionLine."Trade Item" = '') AND (MaintSchemeVersionLine."Item No." = '')) OR
             MaintSchemeVersionLine."Price Agreement"
          THEN BEGIN
            ServSurvObjectAddAct.VALIDATE("Gross Price", MaintSchemeVersionLine."Gross Price");
            ServSurvObjectAddAct.VALIDATE("Purchase Discount %", MaintSchemeVersionLine."Purchase Discount %");
            ServSurvObjectAddAct.VALIDATE("Cost Price", MaintSchemeVersionLine."Cost Price");
          END;
          ServSurvObjectAddAct.Description := MaintSchemeVersionLine.Description;
          IF MaintSchemeVersionLine."Quantity (Survey)" <> 0 THEN
            ServSurvObjectAddAct.VALIDATE(Quantity, MaintSchemeVersionLine."Quantity (Survey)");
          ServSurvObjectAddAct.MODIFY(TRUE);
          LineNo += 10000;
        UNTIL MaintSchemeVersionLine.NEXT = 0;
    END;

    PROCEDURE GetDefaultIncludeInContract@1100525000();
    VAR
      ServiceSetup@1100525000 : Record 11012800;
    BEGIN
      //DP00978
      ServiceSetup.GET;
      "Include in Contract" := ServiceSetup."Include in Contract (Scheme)";
    END;

    PROCEDURE GetSurveySurchargeAmounts@1100528619(IKindOfSurcharge@1100528618 : 'Cost,Sales,Both';VAR OLaborSurcharge@1100528613 : Decimal;VAR OMaterialSurcharge@1100528614 : Decimal;VAR OSubcontractingSurcharge@1100528615 : Decimal;VAR OPlantSurcharge@1100528616 : Decimal;VAR OSundrySurcharge@1100528617 : Decimal) TotalSurchargeAmount : Decimal;
    VAR
      TmpServSurvObjectAddAct@1100528601 : TEMPORARY Record 11071814;
      ServiceSurvey@1100528607 : Record 11071803;
      ServiceSurveyManagement@1100528600 : Codeunit 11012852;
      LaborSurcharge@1100528602 : Decimal;
      MaterialSurcharge@1100528603 : Decimal;
      SubcontractingSurcharge@1100528604 : Decimal;
      PlantSurcharge@1100528605 : Decimal;
      SundrySurcharge@1100528606 : Decimal;
      CancellationLevel@1100528608 : Option;
    BEGIN
      ServiceSurveyManagement.GetTempSurveyWorkList(Rec, TRUE, TRUE, TmpServSurvObjectAddAct);

      OLaborSurcharge := 0;
      OMaterialSurcharge := 0;
      OSubcontractingSurcharge := 0;
      OPlantSurcharge := 0;
      OSundrySurcharge := 0;

      ServiceSurvey.GET("Survey No.");
      IF TmpServSurvObjectAddAct.FINDSET THEN
        REPEAT
          IF NOT TmpServSurvObjectAddAct.IsCancelled(
            "Survey No.", "Location Code", "Seq. No.", "Maintenance Scheme Code", ServiceSurvey."Reference Date", CancellationLevel)
          THEN BEGIN
            TotalSurchargeAmount +=
              TmpServSurvObjectAddAct.GetSurveySurchargeAmounts(
                IKindOfSurcharge, LaborSurcharge, MaterialSurcharge, SubcontractingSurcharge, PlantSurcharge, SundrySurcharge);
            OLaborSurcharge += LaborSurcharge;
            OMaterialSurcharge += MaterialSurcharge;
            OSubcontractingSurcharge += SubcontractingSurcharge;
            OPlantSurcharge += PlantSurcharge;
            OSundrySurcharge += SundrySurcharge;
          END;
        UNTIL TmpServSurvObjectAddAct.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

