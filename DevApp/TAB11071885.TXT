OBJECT Table 11071885 Shipping Order Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TestStatusOpen();

               ShippingOrderMgt.UpdateProjInventDeliveryLine(Rec,0); //DP00121
             END;

    OnModify=BEGIN
               ShippingOrderMgt.UpdateProjInventDeliveryLine(Rec,1); //DP00121
             END;

    OnDelete=VAR
               CommentLine@1100529800 : Record 11071887;
             BEGIN
               TestStatusOpen();

               CommentLine.RESET;
               CommentLine.SETRANGE("Document No.", "Document No.");
               CommentLine.SETRANGE("Shipping Order Line No.", "Line No.");
               CommentLine.DELETEALL(TRUE);

               ShippingOrderMgt.UpdateProjInventDeliveryLine(Rec,2); //DP00121
             END;

    CaptionML=ENU=Shipping Order Line;
  }
  FIELDS
  {
    { 10  ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 30  ;   ;Parcel No.          ;Code20        ;CaptionML=ENU=Parcel No. }
    { 50  ;   ;Source Line No.     ;Integer       ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                                GetSourceDocument(FALSE);
                                                                ShippingOrderMgt.CalcWeight(Rec);
                                                              END;

                                                   OnLookup=BEGIN
                                                              GetSourceDocument(TRUE);
                                                            END;

                                                   CaptionML=ENU=Source Line No. }
    { 60  ;   ;Packaging Type      ;Code10        ;TableRelation="Packaging Type";
                                                   OnValidate=VAR
                                                                PackagingType@1100525000 : Record 11020622;
                                                              BEGIN
                                                                TestStatusOpen();

                                                                IF PackagingType.GET("Packaging Type") THEN BEGIN
                                                                  Length := PackagingType.Lenght;
                                                                  Width := PackagingType.Width;
                                                                  Height := PackagingType.Height;
                                                                  CalcVolume();
                                                                END;

                                                                IF ("Packaging Type" = '') AND (xRec."Packaging Type" <> '') THEN
                                                                  TESTFIELD("Parcel No.", '');

                                                                CALCFIELDS("Packaging Type Description");
                                                              END;

                                                   CaptionML=ENU=Packaging Type }
    { 70  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Shipping Order Comment Line" WHERE (Document No.=FIELD(Document No.),
                                                                                                          Shipping Order Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 80  ;   ;Packaging Type Description;Text50  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Packaging Type".Description WHERE (Code=FIELD(Packaging Type)));
                                                   CaptionML=ENU=Packaging Type Description;
                                                   Editable=No }
    { 90  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:0 }
    { 100 ;   ;Length              ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                                CalcVolume();
                                                              END;

                                                   CaptionML=ENU=Length;
                                                   MinValue=0 }
    { 110 ;   ;Width               ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                                CalcVolume();
                                                              END;

                                                   CaptionML=ENU=Width;
                                                   MinValue=0 }
    { 120 ;   ;Height              ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                                CalcVolume();
                                                              END;

                                                   CaptionML=ENU=Height;
                                                   MinValue=0 }
    { 130 ;   ;Volume              ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=ENU=Volume;
                                                   MinValue=0;
                                                   Editable=No }
    { 140 ;   ;Nett Weight Contents;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=ENU=Nett Weight Contents;
                                                   MinValue=0 }
    { 150 ;   ;Gross Weight Contents;Decimal      ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=ENU=Gross Weight Contents;
                                                   MinValue=0 }
    { 160 ;   ;Item No.            ;Code20        ;TableRelation=Item.No.;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 170 ;   ;Trade Item          ;Code20        ;TableRelation=IF (Vendor (Trade Item)=FILTER(<>'')) "Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"))
                                                                 ELSE IF (Vendor (Trade Item)=FILTER('')) "Trade Item"."Item Code";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=ENU=Trade Item }
    { 180 ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=ENU=Basic Item }
    { 190 ;   ;Vendor (Trade Item) ;Code20        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 200 ;   ;Manufacturer        ;Code20        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=ENU=Manufacturer }
    { 203 ;   ;Drop Shipment       ;Boolean       ;CaptionML=ENU=Drop Shipment }
    { 206 ;   ;Special Order       ;Boolean       ;CaptionML=ENU=Special Order }
    { 210 ;   ;Qty. to Ship        ;Decimal       ;OnValidate=VAR
                                                                QtyToShip@1100528800 : Integer;
                                                              BEGIN
                                                                TestStatusOpen();
                                                                IF CurrFieldNo = FIELDNO("Qty. to Ship") THEN BEGIN
                                                                  QtyToShip := ShippingOrderMgt.AvailableQtyToShipSameSource(Rec);
                                                                  IF "Source Qty. to Ship" < QtyToShip THEN
                                                                    ERROR(Text002,"Qty. to Ship" - QtyToShip + "Source Qty. to Ship");
                                                                END;

                                                                ShippingOrderMgt.CalcWeight(Rec);
                                                              END;

                                                   CaptionML=ENU=Qty. to Ship;
                                                   DecimalPlaces=0:0;
                                                   MinValue=0 }
    { 220 ;   ;Item Description    ;Text50        ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=ENU=Item Description }
    { 230 ;   ;Packaging Type Weight;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Packaging Type".Weight WHERE (Code=FIELD(Packaging Type)));
                                                   CaptionML=ENU=Packaging Type Weight;
                                                   Editable=No }
    { 240 ;   ;Line Amount         ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=ENU=Line Amount;
                                                   MinValue=0 }
    { 250 ;   ;CMR Description     ;Text50        ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=ENU=CMR Description }
    { 260 ;   ;Source Qty. to Ship ;Decimal       ;CaptionML=ENU=Source Qty. to Ship;
                                                   Editable=No }
    { 270 ;   ;Good Customs        ;Boolean       ;CaptionML=ENU=Good Customs }
  }
  KEYS
  {
    {    ;Document No.,Line No.                   ;SumIndexFields=Nett Weight Contents,Gross Weight Contents,Line Amount,Quantity,Volume;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Parcel No.                               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ShippingOrderMgt@1100525000 : Codeunit 11012254;
      Text002@1100528803 : TextConst 'ENU=You cannot ship more than %1 units.';
      Text003@1100528800 : TextConst 'ENU=Source No. is empty';
      Text004@1100528801 : TextConst 'ENU=Order Line not present';
      Text005@1100528802 : TextConst 'ENU=Line not present';

    PROCEDURE TestStatusOpen@1100525001();
    VAR
      ShippingOrderHeader@1100525000 : Record 11020623;
    BEGIN
      IF ShippingOrderHeader.GET("Document No.") THEN
        ShippingOrderHeader.TESTFIELD(Status, ShippingOrderHeader.Status::Open);
    END;

    PROCEDURE GetSourceDocument@1100525003(Lookup@1100525000 : Boolean);
    VAR
      ShippingOrderHeader@1100528804 : Record 11020623;
      SalesLine@1100528801 : Record 37;
      PurchaseLine@1100528803 : Record 39;
      ProjectInventoryEntry@1100528806 : Record 11012670;
      ServiceLedgerEntry@1100528807 : Record 11012819;
      SalesOrderLineList@1100528800 : Page 48;
      PurchaseOrderLineList@1100528802 : Page 56;
      ProjectInventoryList@1100528805 : Page 11012673;
      ServiceEntryList@1100528808 : Page 11012826;
      RecRef@1100525013 : RecordRef;
    BEGIN
      WITH ShippingOrderHeader DO BEGIN
        GET("Document No.");
        IF "Source No." = '' THEN BEGIN
          MESSAGE(Text003);
          EXIT;
        END;
      END;

      CASE ShippingOrderHeader."Source Type" OF
        // Sales Order
        ShippingOrderHeader."Source Type"::"Sales Order":
          BEGIN
            SalesLine.RESET;
            SalesLine.SETRANGE("Document No.",ShippingOrderHeader."Source No.");
            IF NOT Lookup THEN BEGIN
              IF SalesLine.GET(SalesLine."Document Type"::Order,ShippingOrderHeader."Source No.","Source Line No.") THEN BEGIN
                RecRef.GETTABLE(SalesLine);
                FillShipmentLine(RecRef, Lookup);
              END ELSE
                ERROR(Text004);
            END ELSE BEGIN
              SalesOrderLineList.LOOKUPMODE(TRUE);
              IF SalesLine.GET(SalesLine."Document Type"::Order,ShippingOrderHeader."Source No.","Source Line No.") THEN
                SalesOrderLineList.SETRECORD(SalesLine);
              SalesOrderLineList.SETTABLEVIEW(SalesLine);
              SalesOrderLineList.DetermineInterface(DATABASE::"Shipping Order Line",
                "Document No.","Parcel No.",'','',0,'','',"Line No.",'','');
              IF SalesOrderLineList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                SalesOrderLineList.GETRECORD(SalesLine);
                RecRef.GETTABLE(SalesLine);
                FillShipmentLine(RecRef, Lookup);
              END;

            END;
          END;

        // Purchase Return Order
        ShippingOrderHeader."Source Type"::"Purchase Return Order":
          BEGIN
            PurchaseLine.RESET;
            PurchaseLine.SETRANGE("Document No.",ShippingOrderHeader."Source No.");
            IF NOT Lookup THEN BEGIN
              IF PurchaseLine.GET(PurchaseLine."Document Type"::Order,ShippingOrderHeader."Source No.",
                "Source Line No.") THEN BEGIN
                RecRef.GETTABLE(PurchaseLine);
                FillShipmentLine(RecRef, Lookup);
              END ELSE
                ERROR(Text004);
            END ELSE BEGIN
              PurchaseOrderLineList.LOOKUPMODE(TRUE);
              IF PurchaseLine.GET(PurchaseLine."Document Type"::Order,ShippingOrderHeader."Source No.","Source Line No.") THEN
                PurchaseOrderLineList.SETRECORD(PurchaseLine);
              PurchaseOrderLineList.SETTABLEVIEW(PurchaseLine);
              PurchaseOrderLineList.DetermineInterface(DATABASE::"Shipping Order Line",
                "Document No.","Parcel No.",'','',0,'','',"Line No.",'','');
              IF PurchaseOrderLineList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                PurchaseOrderLineList.GETRECORD(PurchaseLine);
                RecRef.GETTABLE(PurchaseLine);
                FillShipmentLine(RecRef, Lookup);
              END;
            END;
          END;

        // Project
        ShippingOrderHeader."Source Type"::Project:
          BEGIN
            ProjectInventoryEntry.RESET;
            ProjectInventoryEntry.SETFILTER(Quantity, '<>%1', 0);
            ProjectInventoryEntry.SETRANGE("Project No.", ShippingOrderHeader."Source No.");
            IF NOT Lookup THEN BEGIN
              IF ProjectInventoryEntry.GET("Source Line No.") THEN BEGIN
                ProjectInventoryEntry.CALCFIELDS("Inventory Quantity");
                RecRef.GETTABLE(ProjectInventoryEntry);
                FillShipmentLine(RecRef, Lookup);
              END ELSE
                ERROR(Text005);
            END ELSE BEGIN
              ProjectInventoryList.LOOKUPMODE(TRUE);
              IF ProjectInventoryEntry.GET("Source Line No.") THEN
                ProjectInventoryList.SETRECORD(ProjectInventoryEntry);
              ProjectInventoryList.SETTABLEVIEW(ProjectInventoryEntry);
              ProjectInventoryList.DetermineInterface(DATABASE::"Shipping Order Line",
                "Document No.","Parcel No.",'','',0,'','',"Line No.",'','');  //db, 13-07-15: C009868
              IF ProjectInventoryList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                ProjectInventoryList.GETRECORD(ProjectInventoryEntry);
                RecRef.GETTABLE(ProjectInventoryEntry);
                FillShipmentLine(RecRef, Lookup);
              END;
            END;
          END;

        // Service
        ShippingOrderHeader."Source Type"::"Service Order":
          BEGIN
            ServiceLedgerEntry.RESET;
            ServiceLedgerEntry.SETFILTER(Quantity, '<>%1', 0);
            ServiceLedgerEntry.SETRANGE("Service Order No.", ShippingOrderHeader."Source No.");
            IF NOT Lookup THEN BEGIN
              IF ServiceLedgerEntry.GET("Source Line No.") THEN BEGIN
                IF (ServiceLedgerEntry.Quantity = 0) OR
                  (ServiceLedgerEntry."Service Order No." <> ShippingOrderHeader."Source No.") THEN
                BEGIN
                  ERROR(Text005)
                END ELSE BEGIN
                  RecRef.GETTABLE(ServiceLedgerEntry);
                  FillShipmentLine(RecRef, Lookup);
                END;
              END ELSE
                ERROR(Text005);
            END ELSE BEGIN
              ServiceEntryList.LOOKUPMODE(TRUE);
              IF ServiceLedgerEntry.GET("Source Line No.") THEN
                ServiceEntryList.SETRECORD(ServiceLedgerEntry);
              ServiceEntryList.SETTABLEVIEW(ServiceLedgerEntry);
              ServiceEntryList.SetSelection(DATABASE::"Shipping Order Line",
                "Document No.","Parcel No.",'','',0,'','',"Line No.");
              IF ServiceEntryList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                ServiceEntryList.GETRECORD(ServiceLedgerEntry);
                RecRef.GETTABLE(ServiceLedgerEntry);
                FillShipmentLine(RecRef, Lookup);
              END;
            END;
          END;
      END;
    END;

    PROCEDURE ResetFields@1100525002();
    BEGIN
      "Item No." := '';
      "Vendor (Trade Item)" := '';
      "Trade Item" := '';
      Manufacturer := '';
      "Basic Item" := '';
      "Qty. to Ship" := 0;
      "Line Amount" := 0;
      "Drop Shipment" :=  FALSE;
      "Special Order" := FALSE;
      "Good Customs" := FALSE;
      Quantity := 1;
    END;

    PROCEDURE FillShipmentLine@1100525016(RecRef@1100525002 : RecordRef;Lookup@1100525001 : Boolean);
    VAR
      SalesLine@1100525007 : Record 37;
      PurchaseLine@1100525005 : Record 39;
      Item@1100525008 : Record 27;
      ProjectInventoryEntry@1100528800 : Record 11012670;
      ServiceLedgerEntry@1100528801 : Record 11012819;
    BEGIN
      TestStatusOpen();
      ResetFields();

      CASE RecRef.NUMBER OF
        DATABASE::"Sales Line":
          BEGIN
            RecRef.SETTABLE(SalesLine);
            "Source Line No." := SalesLine."Line No.";
            "Item No." := SalesLine."Item No.";
            "Item Description" := SalesLine.Description;
            "Source Qty. to Ship" := SalesLine."Outstanding Qty. (Base)";
            "Drop Shipment" := SalesLine."Drop Shipment";
            "Special Order" := SalesLine."Special Order";
            "Good Customs" := FillGoodCustoms(SalesLine);
            //C015243.sn
            IF SalesLine.Type = SalesLine.Type::" " THEN
              Quantity := 0;
            //C015243.en
            VALIDATE("Qty. to Ship", ShippingOrderMgt.GetQtyToShipSameSource(Rec, SalesLine."Outstanding Qty. (Base)"));
            VALIDATE("Line Amount", SalesLine."Unit Price" * "Qty. to Ship");
          END;

        DATABASE::"Purchase Line":
          BEGIN
            RecRef.SETTABLE(PurchaseLine);
            "Source Line No." := PurchaseLine."Line No.";
            "Item No." := PurchaseLine."Item No.";
            "Vendor (Trade Item)" := PurchaseLine."Vendor (Trade Item)";
            "Trade Item" := PurchaseLine."Trade Item";
            Manufacturer := PurchaseLine.Manufacturer;
            "Basic Item" := PurchaseLine."Basic Item";
            "Item Description" := PurchaseLine.Description;
            //C015243.sn
            IF PurchaseLine.Type = PurchaseLine.Type::" " THEN
              Quantity := 0;
            //C015243.en
            "Source Qty. to Ship" := PurchaseLine."Outstanding Qty. (Base)" * -1;
            VALIDATE("Qty. to Ship", ShippingOrderMgt.GetQtyToShipSameSource(Rec, (PurchaseLine."Outstanding Qty. (Base)" * -1)));
            VALIDATE("Line Amount", PurchaseLine."Unit Cost (LCY)" * "Qty. to Ship");
          END;

        DATABASE::"Project Inventory Entry":
          BEGIN
            RecRef.SETTABLE(ProjectInventoryEntry);
            "Source Line No." := ProjectInventoryEntry."Entry No.";
            "Item No." := ProjectInventoryEntry."Item No.";
            "Vendor (Trade Item)" := ProjectInventoryEntry."Vendor (Trade Item)";
            "Trade Item" := ProjectInventoryEntry."Trade Item";
            Manufacturer := ProjectInventoryEntry.Manufacturer;
            "Basic Item" := ProjectInventoryEntry."Basic Item";
            "Item Description" := ProjectInventoryEntry.Description;
            ProjectInventoryEntry.CALCFIELDS("Inventory Quantity");  //db, 13-07-15: C009868
            "Source Qty. to Ship" := ProjectInventoryEntry."Inventory Quantity";
            VALIDATE("Qty. to Ship", ShippingOrderMgt.GetQtyToShipSameSource(Rec, ProjectInventoryEntry."Inventory Quantity"));
            "Line Amount" := 0;
          END;

        DATABASE::"Service-Ledger Entry":
          BEGIN
            RecRef.SETTABLE(ServiceLedgerEntry);
            "Source Line No." := ServiceLedgerEntry."Entry No.";
            "Item No." := ServiceLedgerEntry."Item No.";
            "Vendor (Trade Item)" := ServiceLedgerEntry."Vendor (Trade Item)";
            "Trade Item" := ServiceLedgerEntry."Trade Item";
            Manufacturer := ServiceLedgerEntry.Manufacturer;
            "Basic Item" := ServiceLedgerEntry."Basic Item";
            "Item Description" := ServiceLedgerEntry.Description;
            "Source Qty. to Ship" := ServiceLedgerEntry.Quantity;
            VALIDATE("Qty. to Ship", ShippingOrderMgt.GetQtyToShipSameSource(Rec, ServiceLedgerEntry.Quantity));
            "Line Amount" := 0;
          END;

      END;
    END;

    LOCAL PROCEDURE FillGoodCustoms@19(SalesLine@1002 : Record 37) : Boolean;
    VAR
      TrackingSpecification@1001 : Record 336;
      NSTrackingSpecification@1100528600 : Record 11071901;
      ReservEntry@1100409000 : Record 337;
      NSReservEntry@1100409001 : Record 11071900;
    BEGIN
      TrackingSpecification.SETCURRENTKEY("Source ID","Source Type",
        "Source Subtype","Source Batch Name","Source Prod. Order Line","Source Ref. No.");
      TrackingSpecification.SETRANGE("Source ID",SalesLine."Document No.");
      TrackingSpecification.SETRANGE("Source Type",DATABASE::"Sales Line");
      TrackingSpecification.SETRANGE("Source Subtype",SalesLine."Document Type");
      TrackingSpecification.SETRANGE("Source Batch Name",'');
      TrackingSpecification.SETRANGE("Source Prod. Order Line",0);
      TrackingSpecification.SETRANGE("Source Ref. No.",SalesLine."Line No.");
      IF TrackingSpecification.FINDSET THEN
        REPEAT
          IF TrackingSpecification."Good Customs" THEN
            EXIT(TRUE);
        UNTIL TrackingSpecification.NEXT = 0;

      NSTrackingSpecification.SETCURRENTKEY("Source ID","Source Type",
        "Source Subtype","Source Batch Name","Source Prod. Order Line","Source Ref. No.");
      NSTrackingSpecification.SETRANGE("Source ID",SalesLine."Document No.");
      NSTrackingSpecification.SETRANGE("Source Type",DATABASE::"Sales Line");
      NSTrackingSpecification.SETRANGE("Source Subtype",SalesLine."Document Type");
      NSTrackingSpecification.SETRANGE("Source Batch Name",'');
      NSTrackingSpecification.SETRANGE("Source Prod. Order Line",0);
      NSTrackingSpecification.SETRANGE("Source Ref. No.",SalesLine."Line No.");
      IF NSTrackingSpecification.FINDSET THEN
        REPEAT
          IF NSTrackingSpecification."Good Customs" THEN
            EXIT(TRUE);
        UNTIL NSTrackingSpecification.NEXT = 0;

      ReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status",
        "Shipment Date","Expected Receipt Date");
      ReservEntry.SETRANGE("Source ID",SalesLine."Document No.");
      ReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
      ReservEntry.SETRANGE("Source Subtype",SalesLine."Document Type");
      ReservEntry.SETRANGE("Source Batch Name",'');
      ReservEntry.SETRANGE("Source Prod. Order Line",0);
      ReservEntry.SETRANGE("Source Ref. No.",SalesLine."Line No.");
      IF ReservEntry.FINDSET THEN
        REPEAT
          IF ReservEntry."Good Customs" THEN
            EXIT(TRUE);
        UNTIL ReservEntry.NEXT = 0;

      NSReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status",
        "Shipment Date","Expected Receipt Date");
      NSReservEntry.SETRANGE("Source ID",SalesLine."Document No.");
      NSReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
      NSReservEntry.SETRANGE("Source Subtype",SalesLine."Document Type");
      NSReservEntry.SETRANGE("Source Batch Name",'');
      NSReservEntry.SETRANGE("Source Prod. Order Line",0);
      NSReservEntry.SETRANGE("Source Ref. No.",SalesLine."Line No.");
      IF NSReservEntry.FINDSET THEN
        REPEAT
          IF NSReservEntry."Good Customs" THEN
            EXIT(TRUE);
        UNTIL NSReservEntry.NEXT = 0;

      EXIT(FALSE);
    END;

    PROCEDURE CalcVolume@1100525000();
    BEGIN
      Volume := Length * Width * Height;
    END;

    PROCEDURE GetPackagingTypeDesc@1100528800() : Text[50];
    BEGIN
      CALCFIELDS("Packaging Type Description");
      EXIT("Packaging Type Description");
    END;

    PROCEDURE OpenItemTrackingLines@1100409000();
    VAR
      ShippingOrderHeader@1100409000 : Record 11020623;
      SalesLine@1100409001 : Record 37;
      PurchLine@1100409002 : Record 39;
      ProjectInventoryDelivery@1100409003 : Record 11012671;
      ProjectInventoryEntry@1100409004 : Record 11012670;
    BEGIN
      //DP00121
      ShippingOrderHeader.GET("Document No.");

      CASE ShippingOrderHeader."Source Type" OF
        ShippingOrderHeader."Source Type"::"Sales Order":
          BEGIN
            SalesLine.GET(
              SalesLine."Document Type"::Order,
              ShippingOrderHeader."Source No.",
              "Source Line No.");
            SalesLine.OpenItemTrackingLines;
          END;
        ShippingOrderHeader."Source Type"::"Purchase Return Order":
          BEGIN
            PurchLine.GET(
              PurchLine."Document Type"::Order,
              ShippingOrderHeader."Source No.",
              "Source Line No.");
            PurchLine.OpenItemTrackingLines;
          END;
        ShippingOrderHeader."Source Type"::Project:
          BEGIN
            ProjectInventoryEntry.GET("Source Line No.");
            IF ProjectInventoryEntry.GetProjInventoryDeliveryLine(ProjectInventoryDelivery) THEN
              ProjectInventoryDelivery.OpenItemTrackingLines;
          END;
        ShippingOrderHeader."Source Type"::"Service Order":;
          //No Support for Item Tracking
      END;
    END;

    BEGIN
    END.
  }
}

