OBJECT Table 11071888 Generic Sales Header
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Generic Sales Header;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=Quote,Order,Pro Forma Invoice,Pro Forma Credit Memo,Blanket Order,Return Order,Invoice Proposal,Posted Invoice,Posted Credit Memo;
                                                   OptionString=Quote,Order,Pro Forma Invoice,Pro Forma Credit Memo,Blanket Order,Return Order,Invoice Proposal,Posted Invoice,Posted Credit Memo }
    { 2   ;   ;Sell-to Customer No.;Code20        ;CaptionML=ENU=Sell-to Customer No. }
    { 3   ;   ;No.                 ;Code20        ;CaptionML=ENU=No. }
    { 4   ;   ;Bill-to Customer No.;Code20        ;CaptionML=ENU=Bill-to Customer No. }
    { 5   ;   ;Bill-to Name        ;Text50        ;CaptionML=ENU=Bill-to Name }
    { 6   ;   ;Bill-to Name 2      ;Text50        ;CaptionML=ENU=Bill-to Name 2 }
    { 7   ;   ;Bill-to Address     ;Text50        ;CaptionML=ENU=Bill-to Address }
    { 8   ;   ;Bill-to Address 2   ;Text50        ;CaptionML=ENU=Bill-to Address 2 }
    { 9   ;   ;Bill-to City        ;Text30        ;CaptionML=ENU=Bill-to City }
    { 10  ;   ;Bill-to Contact     ;Text50        ;CaptionML=ENU=Bill-to Contact }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=ENU=Your Reference }
    { 12  ;   ;Ship-to Code        ;Code10        ;CaptionML=ENU=Ship-to Code }
    { 13  ;   ;Ship-to Name        ;Text50        ;CaptionML=ENU=Ship-to Name }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=ENU=Ship-to Name 2 }
    { 15  ;   ;Ship-to Address     ;Text50        ;CaptionML=ENU=Ship-to Address }
    { 16  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=ENU=Ship-to Address 2 }
    { 17  ;   ;Ship-to City        ;Text30        ;CaptionML=ENU=Ship-to City }
    { 18  ;   ;Ship-to Contact     ;Text50        ;CaptionML=ENU=Ship-to Contact }
    { 19  ;   ;Order Date          ;Date          ;CaptionML=ENU=Order Date }
    { 20  ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 21  ;   ;Shipment Date       ;Date          ;CaptionML=ENU=Shipment Date }
    { 22  ;   ;Posting Description ;Text50        ;CaptionML=ENU=Posting Description }
    { 23  ;   ;Payment Terms Code  ;Code10        ;CaptionML=ENU=Payment Terms Code }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 25  ;   ;Payment Discount %  ;Decimal       ;CaptionML=ENU=Payment Discount %;
                                                   DecimalPlaces=0:5 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=ENU=Pmt. Discount Date }
    { 27  ;   ;Shipment Method Code;Code10        ;CaptionML=ENU=Shipment Method Code }
    { 28  ;   ;Location Code       ;Code10        ;CaptionML=ENU=Location Code }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Customer Posting Group;Code10      ;CaptionML=ENU=Customer Posting Group }
    { 32  ;   ;Currency Code       ;Code10        ;CaptionML=ENU=Currency Code }
    { 33  ;   ;Currency Factor     ;Decimal       ;CaptionML=ENU=Currency Factor;
                                                   DecimalPlaces=0:15;
                                                   MinValue=0 }
    { 34  ;   ;Customer Price Group;Code10        ;CaptionML=ENU=Customer Price Group }
    { 35  ;   ;Prices Including VAT;Boolean       ;CaptionML=ENU=Prices Including VAT }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;CaptionML=ENU=Invoice Disc. Code }
    { 40  ;   ;Customer Disc. Group;Code20        ;CaptionML=ENU=Customer Disc. Group }
    { 41  ;   ;Language Code       ;Code10        ;CaptionML=ENU=Language Code }
    { 43  ;   ;Salesperson Code    ;Code10        ;CaptionML=ENU=Salesperson Code }
    { 44  ;   ;Order No.           ;Code20        ;CaptionML=ENU=Order No. }
    { 45  ;   ;Order Class         ;Code10        ;CaptionML=ENU=Order Class }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Comment Line" WHERE (Document Type=FIELD(Document Type),
                                                                                                 No.=FIELD(No.),
                                                                                                 Document Line No.=CONST(0)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=ENU=No. Printed }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=ENU=On Hold }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=ENU=Applies-to Doc. Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;CaptionML=ENU=Applies-to Doc. No. }
    { 55  ;   ;Bal. Account No.    ;Code20        ;CaptionML=ENU=Bal. Account No. }
    { 57  ;   ;Ship                ;Boolean       ;CaptionML=ENU=Ship }
    { 58  ;   ;Invoice             ;Boolean       ;CaptionML=ENU=Invoice }
    { 59  ;   ;Print Posted Documents;Boolean     ;CaptionML=ENU=Print Posted Documents }
    { 62  ;   ;Shipping No.        ;Code20        ;CaptionML=ENU=Shipping No. }
    { 63  ;   ;Posting No.         ;Code20        ;CaptionML=ENU=Posting No. }
    { 64  ;   ;Last Shipping No.   ;Code20        ;CaptionML=ENU=Last Shipping No. }
    { 65  ;   ;Last Posting No.    ;Code20        ;CaptionML=ENU=Last Posting No. }
    { 66  ;   ;Prepayment No.      ;Code20        ;CaptionML=ENU=Prepayment No. }
    { 67  ;   ;Last Prepayment No. ;Code20        ;CaptionML=ENU=Last Prepayment No. }
    { 68  ;   ;Prepmt. Cr. Memo No.;Code20        ;CaptionML=ENU=Prepmt. Cr. Memo No. }
    { 69  ;   ;Last Prepmt. Cr. Memo No.;Code20   ;CaptionML=ENU=Last Prepmt. Cr. Memo No. }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=ENU=VAT Registration No. }
    { 71  ;   ;Combine Shipments   ;Boolean       ;CaptionML=ENU=Combine Shipments }
    { 73  ;   ;Reason Code         ;Code10        ;CaptionML=ENU=Reason Code }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;CaptionML=ENU=Gen. Bus. Posting Group }
    { 75  ;   ;EU 3-Party Trade    ;Boolean       ;CaptionML=ENU=EU 3-Party Trade }
    { 76  ;   ;Transaction Type    ;Code10        ;CaptionML=ENU=Transaction Type }
    { 77  ;   ;Transport Method    ;Code10        ;CaptionML=ENU=Transport Method }
    { 78  ;   ;VAT Country/Region Code;Code10     ;CaptionML=ENU=VAT Country/Region Code }
    { 79  ;   ;Sell-to Customer Name;Text50       ;CaptionML=ENU=Sell-to Customer Name }
    { 80  ;   ;Sell-to Customer Name 2;Text50     ;CaptionML=ENU=Sell-to Customer Name 2 }
    { 81  ;   ;Sell-to Address     ;Text50        ;CaptionML=ENU=Sell-to Address }
    { 82  ;   ;Sell-to Address 2   ;Text50        ;CaptionML=ENU=Sell-to Address 2 }
    { 83  ;   ;Sell-to City        ;Text30        ;CaptionML=ENU=Sell-to City }
    { 84  ;   ;Sell-to Contact     ;Text50        ;CaptionML=ENU=Sell-to Contact }
    { 85  ;   ;Bill-to Post Code   ;Code20        ;CaptionML=ENU=Bill-to Post Code }
    { 86  ;   ;Bill-to County      ;Text30        ;CaptionML=ENU=Bill-to County }
    { 87  ;   ;Bill-to Country/Region Code;Code10 ;CaptionML=ENU=Bill-to Country/Region Code }
    { 88  ;   ;Sell-to Post Code   ;Code20        ;CaptionML=ENU=Sell-to Post Code }
    { 89  ;   ;Sell-to County      ;Text30        ;CaptionML=ENU=Sell-to County }
    { 90  ;   ;Sell-to Country/Region Code;Code10 ;CaptionML=ENU=Sell-to Country/Region Code }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;CaptionML=ENU=Ship-to Post Code }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=ENU=Ship-to County }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;CaptionML=ENU=Ship-to Country/Region Code }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=ENU=Bal. Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Bank Account;
                                                   OptionString=G/L Account,Bank Account }
    { 97  ;   ;Exit Point          ;Code10        ;CaptionML=ENU=Exit Point }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=ENU=Correction }
    { 99  ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date }
    { 100 ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No. }
    { 101 ;   ;Area                ;Code10        ;CaptionML=ENU=Area }
    { 102 ;   ;Transaction Specification;Code10   ;CaptionML=ENU=Transaction Specification }
    { 104 ;   ;Payment Method Code ;Code10        ;CaptionML=ENU=Payment Method Code }
    { 105 ;   ;Shipping Agent Code ;Code10        ;CaptionML=ENU=Shipping Agent Code }
    { 106 ;   ;Package Tracking No.;Text30        ;CaptionML=ENU=Package Tracking No. }
    { 109 ;   ;Shipping No. Series ;Code10        ;CaptionML=ENU=Shipping No. Series }
    { 110 ;   ;Order No. Series    ;Code10        ;CaptionML=ENU=Order No. Series }
    { 111 ;   ;Pre-Assigned No.    ;Code20        ;CaptionML=ENU=Pre-Assigned No. }
    { 113 ;   ;Source Code         ;Code10        ;CaptionML=ENU=Source Code }
    { 114 ;   ;Tax Area Code       ;Code20        ;CaptionML=ENU=Tax Area Code }
    { 115 ;   ;Tax Liable          ;Boolean       ;CaptionML=ENU=Tax Liable }
    { 116 ;   ;VAT Bus. Posting Group;Code10      ;CaptionML=ENU=VAT Bus. Posting Group }
    { 117 ;   ;Reserve             ;Option        ;CaptionML=ENU=Reserve;
                                                   OptionCaptionML=ENU=Never,Optional,Always;
                                                   OptionString=Never,Optional,Always }
    { 118 ;   ;Applies-to ID       ;Code50        ;CaptionML=ENU=Applies-to ID }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;CaptionML=ENU=VAT Base Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 120 ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Open,Released,,,,,,,Closed;
                                                   OptionString=Open,Released,Pending Approval,Pending Prepayment,,,,,Closed }
    { 121 ;   ;Invoice Discount Calculation;Option;CaptionML=ENU=Invoice Discount Calculation;
                                                   OptionCaptionML=ENU=None,%,Amount;
                                                   OptionString=None,%,Amount }
    { 122 ;   ;Invoice Discount Value;Decimal     ;CaptionML=ENU=Invoice Discount Value;
                                                   AutoFormatType=1 }
    { 123 ;   ;Send IC Document    ;Boolean       ;CaptionML=ENU=Send IC Document }
    { 130 ;   ;Prepayment %        ;Decimal       ;CaptionML=ENU=Prepayment %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 131 ;   ;Prepayment No. Series;Code10       ;CaptionML=ENU=Prepayment No. Series }
    { 132 ;   ;Compress Prepayment ;Boolean       ;InitValue=Yes;
                                                   CaptionML=ENU=Compress Prepayment }
    { 133 ;   ;Prepayment Due Date ;Date          ;CaptionML=ENU=Prepayment Due Date }
    { 134 ;   ;Prepmt. Cr. Memo No. Series;Code10 ;CaptionML=ENU=Prepmt. Cr. Memo No. Series }
    { 135 ;   ;Prepmt. Posting Description;Text50 ;CaptionML=ENU=Prepmt. Posting Description }
    { 136 ;   ;Prepayment Invoice/Cr. Memo;Boolean;CaptionML=ENU=Prepayment Invoice/Cr. Memo }
    { 137 ;   ;Prepayment Order No.;Code20        ;CaptionML=ENU=Prepayment Order No. }
    { 138 ;   ;Prepmt. Pmt. Discount Date;Date    ;CaptionML=ENU=Prepmt. Pmt. Discount Date }
    { 139 ;   ;Prepmt. Payment Terms Code;Code10  ;CaptionML=ENU=Prepmt. Payment Terms Code }
    { 140 ;   ;Prepmt. Payment Discount %;Decimal ;CaptionML=ENU=Prepmt. Payment Discount %;
                                                   DecimalPlaces=0:5 }
    { 151 ;   ;Quote No.           ;Code20        ;CaptionML=ENU=Quote No. }
    { 480 ;   ;Dimension Set ID    ;Integer       ;CaptionML=ENU=Dimension Set ID }
    { 825 ;   ;Authorization Required;Boolean     ;CaptionML=ENU=Authorization Required }
    { 827 ;   ;Credit Card No.     ;Code20        ;CaptionML=ENU=Credit Card No. }
    { 5043;   ;No. of Archived Versions;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Max("Sales Header Archive"."Version No." WHERE (Document Type=FIELD(Document Type),
                                                                                                               No.=FIELD(No.),
                                                                                                               Doc. No. Occurrence=FIELD(Doc. No. Occurrence)));
                                                   CaptionML=ENU=No. of Archived Versions;
                                                   Editable=No }
    { 5048;   ;Doc. No. Occurrence ;Integer       ;CaptionML=ENU=Doc. No. Occurrence }
    { 5050;   ;Campaign No.        ;Code20        ;CaptionML=ENU=Campaign No. }
    { 5051;   ;Sell-to Customer Template Code;Code10;
                                                   CaptionML=ENU=Sell-to Customer Template Code }
    { 5052;   ;Sell-to Contact No. ;Code20        ;CaptionML=ENU=Sell-to Contact No. }
    { 5053;   ;Bill-to Contact No. ;Code20        ;CaptionML=ENU=Bill-to Contact No. }
    { 5054;   ;Bill-to Customer Template Code;Code10;
                                                   CaptionML=ENU=Bill-to Customer Template Code }
    { 5055;   ;Opportunity No.     ;Code20        ;CaptionML=ENU=Opportunity No. }
    { 5700;   ;Responsibility Center;Code10       ;CaptionML=ENU=Responsibility Center }
    { 5750;   ;Shipping Advice     ;Option        ;CaptionML=ENU=Shipping Advice;
                                                   OptionCaptionML=ENU=Partial,Complete;
                                                   OptionString=Partial,Complete }
    { 5751;   ;Shipped Not Invoiced;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Document No.=FIELD(No.),
                                                                                         Qty. Shipped Not Invoiced=FILTER(<>0)));
                                                   CaptionML=ENU=Shipped Not Invoiced;
                                                   Editable=No }
    { 5752;   ;Completely Shipped  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Min("Sales Line"."Completely Shipped" WHERE (Document Type=FIELD(Document Type),
                                                                                                            Document No.=FIELD(No.),
                                                                                                            Type=FILTER(<>' '),
                                                                                                            Location Code=FIELD(Location Filter)));
                                                   CaptionML=ENU=Completely Shipped;
                                                   Editable=No }
    { 5753;   ;Posting from Whse. Ref.;Integer    ;CaptionML=ENU=Posting from Whse. Ref. }
    { 5754;   ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Location Filter }
    { 5790;   ;Requested Delivery Date;Date       ;CaptionML=ENU=Requested Delivery Date }
    { 5791;   ;Promised Delivery Date;Date        ;CaptionML=ENU=Promised Delivery Date }
    { 5792;   ;Shipping Time       ;DateFormula   ;CaptionML=ENU=Shipping Time }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   CaptionML=ENU=Outbound Whse. Handling Time }
    { 5794;   ;Shipping Agent Service Code;Code10 ;CaptionML=ENU=Shipping Agent Service Code }
    { 5795;   ;Late Order Shipping ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Sell-to Customer No.=FIELD(Sell-to Customer No.),
                                                                                         Document No.=FIELD(No.),
                                                                                         Shipment Date=FIELD(Date Filter),
                                                                                         Outstanding Quantity=FILTER(<>0)));
                                                   CaptionML=ENU=Late Order Shipping;
                                                   Editable=No }
    { 5796;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 5800;   ;Receive             ;Boolean       ;CaptionML=ENU=Receive }
    { 5801;   ;Return Receipt No.  ;Code20        ;CaptionML=ENU=Return Receipt No. }
    { 5802;   ;Return Receipt No. Series;Code10   ;TableRelation="No. Series";
                                                   CaptionML=ENU=Return Receipt No. Series }
    { 5803;   ;Last Return Receipt No.;Code20     ;CaptionML=ENU=Last Return Receipt No. }
    { 6601;   ;Return Order No.    ;Code20        ;CaptionML=ENU=Return Order No. }
    { 6602;   ;Return Order No. Series;Code10     ;CaptionML=ENU=Return Order No. Series }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;CaptionML=ENU=Allow Line Disc. }
    { 7200;   ;Get Shipment/Return Rcpt. Used;Boolean;
                                                   CaptionML=ENU=Get Shipment/Return Rcpt. Used }
    { 9000;   ;Assigned User ID    ;Code50        ;CaptionML=ENU=Assigned User ID }
    { 11012000;;Project Invoice/Credit Memo;Boolean;
                                                   CaptionML=ENU=Project Invoice/Credit Memo }
    { 11012005;;Job No.            ;Code20        ;CaptionML=ENU=Project No. }
    { 11012010;;Installment Invoice/Cr. Memo;Boolean;
                                                   CaptionML=ENU=Installment Invoice/Cr. Memo }
    { 11012015;;Production Motivation Date;Date   ;CaptionML=ENU=Production Motivation Date }
    { 11012016;;Production Motivation Code;Code10 ;CaptionML=ENU=Production Motivation Code }
    { 11012020;;Invoice/Credit Memo Text;Text250  ;CaptionML=ENU=Invoice/Credit Memo Text }
    { 11012030;;Interest Date      ;Date          ;CaptionML=ENU=Interest Date }
    { 11012040;;Related Sales Order No.;Code20    ;CaptionML=ENU=Related Sales Order No. }
    { 11012258;;Company VAT Registration No.;Text20;
                                                   CaptionML=ENU=Company VAT Registration No. }
    { 11012259;;Country/Region of Origin;Code10   ;CaptionML=ENU=Country/Region of Origin }
    { 11012260;;Country/Region of Destination;Code10;
                                                   CaptionML=ENU=Country/Region of Destination }
    { 11012261;;Extended VAT Determination;Boolean;CaptionML=ENU=Extended VAT Determination }
    { 11012262;;Invoice From       ;Option        ;CaptionML=ENU=Invoice From;
                                                   OptionCaptionML=ENU=" ,Logistic,Sales";
                                                   OptionString=[ ,Logistic,Sales] }
    { 11012265;;Offer Amount       ;Decimal       ;CaptionML=ENU=Offer Amount }
    { 11012270;;Selection Code     ;Code20        ;CaptionML=ENU=Selection Code }
    { 11012271;;Selection Code is Current Doc.;Boolean;
                                                   CaptionML=ENU=Selection Code is Current Doc. }
    { 11012280;;Invoice Layout Code;Code10        ;CaptionML=ENU=Invoice Layout Code }
    { 11012377;;Valid Until        ;Date          ;CaptionML=ENU=Valid Until }
    { 11012390;;Extra Shipments Allowed;Boolean   ;CaptionML=ENU=Extra Shipments Allowed }
    { 11012391;;Shipping Details   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Shipping Details" WHERE (Source=FILTER(SalesOrder),
                                                                                               Order No.=FIELD(No.)));
                                                   CaptionML=ENU=Shipping Details;
                                                   Editable=No }
    { 11012495;;Rental Contract Modified on;Date  ;CaptionML=ENU=Rental Contract Modified on }
    { 11012500;;Elected Alternative No.;Integer   ;CaptionML=ENU=Elected Alternative No.;
                                                   MinValue=0 }
    { 11012505;;Plant Location Code;Code20        ;CaptionML=ENU=Plant Location }
    { 11012506;;Plant Depot Logistics;Code20      ;CaptionML=ENU=Plant Depot Logistics }
    { 11012507;;Location Code Logistics;Code10    ;CaptionML=ENU=Location Code Logistics }
    { 11012511;;Arrival Date       ;Date          ;CaptionML=ENU=Arrival Date }
    { 11012512;;Removal Date       ;Date          ;CaptionML=ENU=Removal Date }
    { 11012513;;Rental Starting Date;Date         ;CaptionML=ENU=Rental Starting Date }
    { 11012514;;Rental Ending Date ;Date          ;CaptionML=ENU=Rental Ending Date }
    { 11012515;;Rental Contract Invoice Status;Option;
                                                   CaptionML=ENU=Rental Contract Invoice Status;
                                                   OptionCaptionML=ENU=Open,Chargeable,Temporary,Invoiced;
                                                   OptionString=Open,Chargeable,Temporary,Invoiced }
    { 11012548;;Plant Location Filter;Code250     ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Plant Location Filter }
    { 11012549;;Plant Loc. Filter On Invoice;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Document No.=FIELD(No.),
                                                                                         Plant Location=FIELD(Plant Location Filter)));
                                                   CaptionML=ENU=Plant Loc. Filter On Invoice;
                                                   Editable=No }
    { 11012550;;Plant Invoice      ;Boolean       ;CaptionML=ENU=Plant Invoice }
    { 11012551;;Rental Periode to Date;Date       ;CaptionML=ENU=Rental Periode to Date }
    { 11012552;;Company Name       ;Text30        ;CaptionML=ENU=Company Name }
    { 11012554;;Service Invoice    ;Boolean       ;CaptionML=ENU=Service Invoice }
    { 11012555;;Alternative Bill-to Address;Code10;CaptionML=ENU=Alternative Bill-to Address }
    { 11012556;;Exported on        ;Date          ;CaptionML=ENU=Exported on }
    { 11012557;;Rental Unit Invoice;Boolean       ;CaptionML=ENU=Rental Unit Invoice }
    { 11012558;;Withhold % Last Installment;Decimal;
                                                   CaptionML=ENU=Withhold % Last Installment }
    { 11012559;;Public notary      ;Code20        ;CaptionML=ENU=Public notary }
    { 11012560;;Last Installment Amount;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Invoice Line"."Amount Including VAT" WHERE (Document No.=FIELD(No.),
                                                                                                                      Last Installment=CONST(Yes)));
                                                   CaptionML=ENU=Last Installment Amount;
                                                   Editable=No }
    { 11012561;;Notary Case Number ;Text30        ;CaptionML=ENU=Notary Case Number }
    { 11012562;;Calculate B Amounts based on;Option;
                                                   CaptionML=ENU=Calculate B Amounts based on;
                                                   OptionCaptionML=ENU=Labor Amount,Invoice Amount;
                                                   OptionString=Labor Amount,Invoice Amount }
    { 11012563;;Labor Amount (Subcontracting);Decimal;
                                                   CaptionML=ENU=Labor Amount (Subcontracting);
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012564;;Blocked Amount (Subcontracting;Decimal;
                                                   CaptionML=ENU=Blocked Amount (Subcontracting);
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012566;;Specific WKA Percentages;Boolean  ;CaptionML=ENU=Specific WKA Percentages }
    { 11012567;;% Labor            ;Decimal       ;CaptionML=ENU=% Labor;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   AutoFormatType=1 }
    { 11012568;;% to B Account     ;Decimal       ;CaptionML=ENU=% to B Account;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 11012570;;WKA Period         ;Text50        ;CaptionML=ENU=WKA Period }
    { 11012585;;Sales Document Type;Option        ;CaptionML=ENU=Sales Document Type;
                                                   OptionCaptionML=ENU=Standard,Sales Logistics Separated,Rental Contract;
                                                   OptionString=Standard,Sales Logistics Separated,RentalContract }
    { 11012590;;PDF Send Released  ;Boolean       ;CaptionML=ENU=PDF Send Released }
    { 11012591;;PDF Document is Send;Boolean      ;CaptionML=ENU=PDF Document is Send }
    { 11012592;;PDF Date Send      ;Date          ;CaptionML=ENU=PDF Date Send }
    { 11012594;;PDF Print Code     ;Boolean       ;CaptionML=ENU=PDF Print Code }
    { 11012595;;XML-Export         ;Boolean       ;CaptionML=ENU=XML-Export }
    { 11012596;;XML Exported       ;Boolean       ;CaptionML=ENU=XML Exported }
    { 11012610;;Inserted By        ;Code50        ;CaptionML=ENU=Inserted By }
    { 11012620;;Invoice Frequency Rental;DateFormula;
                                                   CaptionML=ENU=Invoice Frequency Rental }
    { 11012700;;Service Warranty Code;Code10      ;CaptionML=ENU=Service Warranty Code }
    { 11012800;;Service Call No.   ;Code20        ;CaptionML=ENU=Service Call No. }
    { 11012801;;Description Service Call;Text50   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Call".Description WHERE (No.=FIELD(Service Call No.)));
                                                   CaptionML=ENU=Description Service Call;
                                                   Editable=No }
    { 11012804;;Service Contract No.;Code20       ;CaptionML=ENU=Service Contract No. }
    { 11012805;;Service Order No.  ;Code20        ;CaptionML=ENU=Service Order No. }
    { 11012810;;Principal Reference;Text50        ;CaptionML=ENU=Principal Reference }
    { 11012820;;Order No. Customer ;Text50        ;CaptionML=ENU=Order No. Customer }
    { 11012830;;Commision Date Customer;Date      ;CaptionML=ENU=Commision Date Principal }
    { 11012840;;Ship-to Contact No.;Code20        ;CaptionML=ENU=Ship-to Contact No. }
    { 11012850;;Ship-to Phone No.  ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Ship-to Phone No. }
    { 11012860;;Amount Payment in Advance;Decimal ;CaptionML=ENU=Amount Payment in Advance;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012870;;Salesperson Name   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Salesperson Code)));
                                                   CaptionML=ENU=Salesperson Name;
                                                   Editable=No }
    { 11012998;;Sales Representative Code;Code10  ;CaptionML=ENU=Sales Representative Code }
    { 11012999;;Name Sales Representative;Text50  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Sales Representative Code)));
                                                   CaptionML=ENU=Name Sales Representative;
                                                   Editable=No }
    { 11020254;;Credit Restriction ;Code20        ;CaptionML=ENU=Credit Restriction }
    { 11020255;;Credit Restriction Date;Date      ;CaptionML=ENU=Credit Restriction Date }
    { 11020256;;Credit Restriction %;Decimal      ;CaptionML=ENU=Credit Restriction %;
                                                   DecimalPlaces=0:2 }
    { 11020257;;Credit Restriction Amount;Decimal ;CaptionML=ENU=Credit Restriction Amount;
                                                   DecimalPlaces=2:2 }
    { 11020258;;Payment Discount % 2;Decimal      ;CaptionML=ENU=Payment Discount % 2;
                                                   DecimalPlaces=0:5 }
    { 11020259;;Pmt. Discount Date 2;Date         ;CaptionML=ENU=Pmt. Discount Date 2 }
    { 11020260;;Payment Discount % 3;Decimal      ;CaptionML=ENU=Payment Discount % 3;
                                                   DecimalPlaces=0:5 }
    { 11020261;;Pmt. Discount Date 3;Date         ;CaptionML=ENU=Pmt. Discount Date 3 }
    { 11020270;;Delivery Time      ;Time          ;CaptionML=ENU=Delivery Time }
    { 11020280;;E-Mail (Invoices)  ;Text80        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=E-Mail (Invoices) }
    { 11020285;;Electronic Invoicing;Option       ;CaptionML=ENU=Electronic Invoicing;
                                                   OptionCaptionML=ENU=Print,,E-Mail,,GLN (XML),Digipoort (XML);
                                                   OptionString=Print,,E-Mail,,GLN (XML),Digipoort (XML) }
    { 11020287;;NAV 2009 Invoice   ;Boolean       ;CaptionML=ENU=NAV 2009 Invoice }
    { 11128020;;ROT                ;Boolean       ;Description=I.012 }
  }
  KEYS
  {
    {    ;Document Type,No.                       ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Checksiffra@1100285501 : Decimal;
      PersNr@1100285500 : Code[10];

    PROCEDURE Amount@1100525002() : Decimal;
    VAR
      SalesLine@1100525000 : Record 37;
      SalesInvoiceLine@1100525001 : Record 113;
      SalesCrMemoLine@1100525002 : Record 115;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::"Pro Forma Invoice", "Document Type"::"Pro Forma Credit Memo":
          BEGIN
            SalesLine.SETCURRENTKEY("Document Type", "Document No.");
            SalesLine.SETRANGE("Document Type", "Document Type");
            SalesLine.SETRANGE("Document No.", "No.");
            SalesLine.CALCSUMS(Amount);
            EXIT(SalesLine.Amount);
          END;
        "Document Type"::"Posted Invoice":
          BEGIN
            SalesInvoiceLine.SETCURRENTKEY("Document No.");
            SalesInvoiceLine.SETRANGE("Document No.", "No.");
            SalesInvoiceLine.CALCSUMS(Amount);
            EXIT(SalesInvoiceLine.Amount);
          END;
        "Document Type"::"Posted Credit Memo":
          BEGIN
            SalesCrMemoLine.SETCURRENTKEY("Document No.");
            SalesCrMemoLine.SETRANGE("Document No.", "No.");
            SalesCrMemoLine.CALCSUMS(Amount);
            EXIT(SalesCrMemoLine.Amount);
          END;
      END;
    END;

    PROCEDURE AmountIncludingVAT@1100525003() : Decimal;
    VAR
      SalesLine@1100525000 : Record 37;
      SalesInvoiceLine@1100525001 : Record 113;
      SalesCrMemoLine@1100525002 : Record 115;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::"Pro Forma Invoice", "Document Type"::"Pro Forma Credit Memo":
          BEGIN
            SalesLine.SETCURRENTKEY("Document Type", "Document No.");
            SalesLine.SETRANGE("Document Type", "Document Type");
            SalesLine.SETRANGE("Document No.", "No.");
            SalesLine.CALCSUMS("Amount Including VAT");
            EXIT(SalesLine."Amount Including VAT");
          END;
        "Document Type"::"Posted Invoice":
          BEGIN
            SalesInvoiceLine.SETCURRENTKEY("Document No.");
            SalesInvoiceLine.SETRANGE("Document No.", "No.");
            SalesInvoiceLine.CALCSUMS("Amount Including VAT");
            EXIT(SalesInvoiceLine."Amount Including VAT");
          END;
        "Document Type"::"Posted Credit Memo":
          BEGIN
            SalesCrMemoLine.SETCURRENTKEY("Document No.");
            SalesCrMemoLine.SETRANGE("Document No.", "No.");
            SalesCrMemoLine.CALCSUMS("Amount Including VAT");
            EXIT(SalesCrMemoLine."Amount Including VAT");
          END;
      END;
    END;

    PROCEDURE AmountVAT@1100525007() : Decimal;
    VAR
      SalesLine@1100525000 : Record 37;
      SalesInvoiceLine@1100525001 : Record 113;
      SalesCrMemoLine@1100525002 : Record 115;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::"Pro Forma Invoice", "Document Type"::"Pro Forma Credit Memo":
          BEGIN
            SalesLine.SETCURRENTKEY("Document Type", "Document No.");
            SalesLine.SETRANGE("Document Type", "Document Type");
            SalesLine.SETRANGE("Document No.", "No.");
            SalesLine.CALCSUMS("Line VAT Amount");
            EXIT(SalesLine."Line VAT Amount");
          END;
        "Document Type"::"Posted Invoice":
          BEGIN
            SalesInvoiceLine.SETCURRENTKEY("Document No.");
            SalesInvoiceLine.SETRANGE("Document No.", "No.");
            SalesInvoiceLine.CALCSUMS("Line VAT Amount");
            EXIT(SalesInvoiceLine."Line VAT Amount");
          END;
        "Document Type"::"Posted Credit Memo":
          BEGIN
            SalesCrMemoLine.SETCURRENTKEY("Document No.");
            SalesCrMemoLine.SETRANGE("Document No.", "No.");
            SalesCrMemoLine.CALCSUMS("Line VAT Amount");
            EXIT(SalesCrMemoLine."Line VAT Amount");
          END;
      END;
    END;

    PROCEDURE OpenComplaints@1100525014() : Integer;
    VAR
      ComplaintDocument@1100525000 : Record 11012457;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::"Posted Invoice":
          BEGIN
            ComplaintDocument.SETRANGE("Document Type", ComplaintDocument."Document Type"::"PI-S");
            ComplaintDocument.SETRANGE("Document No.", "No.");
            ComplaintDocument.SETFILTER("Complaint Status", STRSUBSTNO('<>%', ComplaintDocument."Complaint Status"::Finished));
            EXIT(ComplaintDocument.COUNT);
          END;
        "Document Type"::"Posted Credit Memo":
          BEGIN
            ComplaintDocument.SETRANGE("Document Type", ComplaintDocument."Document Type"::"PM-S");
            ComplaintDocument.SETRANGE("Document No.", "No.");
            ComplaintDocument.SETFILTER("Complaint Status", STRSUBSTNO('<>%', ComplaintDocument."Complaint Status"::Finished));
            EXIT(ComplaintDocument.COUNT);
          END;
      END;
    END;

    PROCEDURE Complaints@1100525001() : Integer;
    VAR
      ComplaintDocument@1100525000 : Record 11012457;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::"Posted Invoice":
          BEGIN
            ComplaintDocument.SETRANGE("Document Type", ComplaintDocument."Document Type"::"PI-S");
            ComplaintDocument.SETRANGE("Document No.", "No.");
            EXIT(ComplaintDocument.COUNT);
          END;
        "Document Type"::"Posted Credit Memo":
          BEGIN
            ComplaintDocument.SETRANGE("Document Type", ComplaintDocument."Document Type"::"PM-S");
            ComplaintDocument.SETRANGE("Document No.", "No.");
            EXIT(ComplaintDocument.COUNT);
          END;
      END;
    END;

    PROCEDURE HasOnlyReverseChargeVATLines@1100525024() : Boolean;
    VAR
      SalesLine@1100525002 : Record 37;
      SalesInvoiceLine@1100525001 : Record 113;
      SalesCrMemoLine@1100525000 : Record 115;
      HasReverseChargeVatLines@1100525003 : Boolean;
      HasOtherVatLines@1100528400 : Boolean;
      HasLines@1100285300 : Boolean;
    BEGIN

      //CASE "Document Type" OF
      //  "Document Type"::"Pro Forma Invoice", "Document Type"::"Pro Forma Credit Memo":
      //    BEGIN
      //      SalesLine.SETRANGE("Document Type", "Document Type");
      //      SalesLine.SETRANGE("Document No.", "No.");
      //      SalesLine.SETFILTER("VAT Identifier", STRSUBSTNO('<>''%1''', ''));
      //      SalesLine.SETRANGE("VAT Calculation Type", SalesLine."VAT Calculation Type"::"Reverse Charge VAT");
      //      HasReverseChargeVatLines := NOT SalesLine.ISEMPTY;
      //      SalesLine.SETFILTER(
      //        "VAT Calculation Type", STRSUBSTNO('<>%1', SalesLine."VAT Calculation Type"::"Reverse Charge VAT"));
      //      HasOtherVatLines := NOT SalesLine.ISEMPTY;
      //    END;
      //  "Document Type"::"Posted Invoice":
      //    BEGIN
      //      SalesInvoiceLine.SETRANGE("Document No.", "No.");
      //      SalesInvoiceLine.SETFILTER("VAT Identifier", STRSUBSTNO('<>''%1''', ''));
      //      SalesInvoiceLine.SETRANGE("VAT Calculation Type", SalesInvoiceLine."VAT Calculation Type"::"Reverse Charge VAT");
      //      HasReverseChargeVatLines := NOT SalesInvoiceLine.ISEMPTY;
      //      SalesInvoiceLine.SETFILTER(
      //        "VAT Calculation Type", STRSUBSTNO('<>%1', SalesInvoiceLine."VAT Calculation Type"::"Reverse Charge VAT"));
      //      HasOtherVatLines := NOT SalesInvoiceLine.ISEMPTY;
      //    END;
      //  "Document Type"::"Posted Credit Memo":
      //    BEGIN
      //      SalesCrMemoLine.SETRANGE("Document No.", "No.");
      //      SalesCrMemoLine.SETFILTER("VAT Identifier", STRSUBSTNO('<>''%1''', ''));
      //      SalesCrMemoLine.SETRANGE("VAT Calculation Type", SalesCrMemoLine."VAT Calculation Type"::"Reverse Charge VAT");
      //      HasReverseChargeVatLines := NOT SalesCrMemoLine.ISEMPTY;
      //      SalesCrMemoLine.SETFILTER(
      //        "VAT Calculation Type", STRSUBSTNO('<>%1', SalesCrMemoLine."VAT Calculation Type"::"Reverse Charge VAT"));
      //      HasOtherVatLines := NOT SalesCrMemoLine.ISEMPTY;
      //    END;
      //END;
      //EXIT(HasReverseChargeVatLines AND NOT HasOtherVatLines);

      //>> 160422 ITERO.SB Use old version of function HasOnlyReverseChargeVATLines (from 100_dev)
      CASE "Document Type" OF
        "Document Type"::"Pro Forma Invoice", "Document Type"::"Pro Forma Credit Memo":
          BEGIN
            SalesLine.SETCURRENTKEY("Document Type", "Document No.");
            SalesLine.SETRANGE("Document Type", "Document Type");
            SalesLine.SETRANGE("Document No.", "No.");
            HasLines := NOT SalesLine.ISEMPTY;
            SalesLine.SETRANGE("VAT Calculation Type", SalesLine."VAT Calculation Type"::"Reverse Charge VAT");
            EXIT(HasLines AND NOT SalesLine.ISEMPTY);
          END;
        "Document Type"::"Posted Invoice":
          BEGIN
            SalesInvoiceLine.SETCURRENTKEY("Document No.");
            SalesInvoiceLine.SETRANGE("Document No.", "No.");
            HasLines := NOT SalesInvoiceLine.ISEMPTY;
            SalesInvoiceLine.SETRANGE("VAT Calculation Type", SalesInvoiceLine."VAT Calculation Type"::"Reverse Charge VAT");
            EXIT(HasLines AND NOT SalesInvoiceLine.ISEMPTY);
          END;
        "Document Type"::"Posted Credit Memo":
          BEGIN
            SalesCrMemoLine.SETCURRENTKEY("Document No.");
            SalesCrMemoLine.SETRANGE("Document No.", "No.");
            HasLines := NOT SalesCrMemoLine.ISEMPTY;
            SalesCrMemoLine.SETRANGE("VAT Calculation Type", SalesCrMemoLine."VAT Calculation Type"::"Reverse Charge VAT");
            EXIT(HasLines AND NOT SalesCrMemoLine.ISEMPTY);
          END;
      END;
      //<<
    END;

    PROCEDURE GetContractAmount@1100525021(Extensions@1100528201 : Boolean) : Decimal;
    VAR
      ContractAmount@1100525001 : Decimal;
      Invoiced@1100525002 : Decimal;
      ToBeInvoiced@1100525003 : Decimal;
      ExtensionContractAmount@1100528200 : Decimal;
    BEGIN
      CalcSummary(ContractAmount, ExtensionContractAmount, Invoiced, ToBeInvoiced, Extensions);
      EXIT(ContractAmount);
    END;

    PROCEDURE GetExtensionContractAmount@1100528200(Extensions@1100528201 : Boolean) : Decimal;
    VAR
      ContractAmount@1100525001 : Decimal;
      Invoiced@1100525002 : Decimal;
      ToBeInvoiced@1100525003 : Decimal;
      ExtensionContractAmount@1100528200 : Decimal;
    BEGIN
      CalcSummary(ContractAmount, ExtensionContractAmount, Invoiced, ToBeInvoiced, Extensions);
      EXIT(ExtensionContractAmount);
    END;

    PROCEDURE GetInvoiced@1100525020(Extensions@1100528201 : Boolean) : Decimal;
    VAR
      ContractAmount@1100525001 : Decimal;
      Invoiced@1100525002 : Decimal;
      ToBeInvoiced@1100525003 : Decimal;
      ExtensionContractAmount@1100528200 : Decimal;
    BEGIN
      CalcSummary(ContractAmount, ExtensionContractAmount, Invoiced, ToBeInvoiced, Extensions);
      EXIT(Invoiced);
    END;

    PROCEDURE GetToBeInvoiced@1100525018(Extensions@1100528201 : Boolean) : Decimal;
    VAR
      ContractAmount@1100525001 : Decimal;
      Invoiced@1100525002 : Decimal;
      ToBeInvoiced@1100525003 : Decimal;
      ExtensionContractAmount@1100528200 : Decimal;
    BEGIN
      CalcSummary(ContractAmount, ExtensionContractAmount, Invoiced, ToBeInvoiced, Extensions);
      EXIT(ToBeInvoiced);
    END;

    PROCEDURE GetLaborAmountSubcontracting@1100525006() LaborAmount : Decimal;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::"Posted Invoice",
        "Document Type"::"Posted Credit Memo":
          LaborAmount := "Labor Amount (Subcontracting)";
        "Document Type"::"Pro Forma Invoice",
        "Document Type"::"Pro Forma Credit Memo":
          LaborAmount := ROUND(GetLaborAmountSubcontractingProForma);
      END;
    END;

    LOCAL PROCEDURE GetLaborAmountSubcontractingProForma@1100525027() LaborAmountSubcontracting : Decimal;
    VAR
      SalesLine@1100525000 : Record 37;
      DimensionValue@1100525004 : Record 349;
      DimensionManagement@1100525003 : Codeunit 408;
      Amount@1100525001 : Decimal;
      AmountLabor@1100525002 : Decimal;
    BEGIN
      SalesLine.SETRANGE("Document Type", "Document Type");
      SalesLine.SETRANGE("Document No.", "No.");
      SalesLine.SETFILTER("VAT Calculation Type", '%1', SalesLine."VAT Calculation Type"::"Reverse Charge VAT");
      IF SalesLine.FINDSET THEN
        REPEAT
          IF "Installment Invoice/Cr. Memo" OR
             (NOT "Installment Invoice/Cr. Memo" AND
               ("Calculate B Amounts based on" =
                "Calculate B Amounts based on"::"Invoice Amount"))
          THEN
              Amount := Amount + SalesLine."Amount Including VAT"
            ELSE
              IF SalesLine."Cost Plus Line No." <> 0 THEN BEGIN
                IF SalesLine."Cost Type Cost Plus Line" = SalesLine."Cost Type Cost Plus Line"::Labor THEN
                  AmountLabor := AmountLabor + SalesLine."Amount Including VAT"
              END ELSE BEGIN
                IF SalesLine."Shortcut Dimension 2 Code" <> '' THEN BEGIN
                  DimensionManagement.GetDimValueRec(2, SalesLine."Shortcut Dimension 2 Code", DimensionValue, FALSE, '');
                  IF (DimensionValue."Cost Type" = DimensionValue."Cost Type"::Labor) THEN
                    AmountLabor := AmountLabor + SalesLine."Amount Including VAT"
                  ELSE
                    IF (DimensionValue."Cost Type" = DimensionValue."Cost Type"::Revenue) THEN
                      Amount := Amount + SalesLine."Amount Including VAT";
                END;
              END;
        UNTIL SalesLine.NEXT = 0;

      LaborAmountSubcontracting := AmountLabor + Amount * ("% Labor" / 100);
    END;

    PROCEDURE GetBlockedAmountSubcontracting@1100525025() BlockedAmountSubcontracting : Decimal;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::"Posted Invoice",
        "Document Type"::"Posted Credit Memo":
          BlockedAmountSubcontracting := "Blocked Amount (Subcontracting";
        "Document Type"::"Pro Forma Invoice",
        "Document Type"::"Pro Forma Credit Memo":
          BEGIN
            BlockedAmountSubcontracting := ((GetLaborAmountSubcontractingProForma / 100) * "% to B Account");
            BlockedAmountSubcontracting := ROUND(BlockedAmountSubcontracting);
          END;
      END;
    END;

    PROCEDURE GetRestAmountSubcontracting@1100525016() RestAmount : Decimal;
    BEGIN
      IF "Withhold % Last Installment" = 0 THEN
        RestAmount := AmountIncludingVAT - GetBlockedAmountSubcontracting
      ELSE
        RestAmount :=
          AmountIncludingVAT - GetBlockedAmountSubcontracting -
          ((GetLastInstallmentAmount / 100) * "Withhold % Last Installment");
    END;

    PROCEDURE GetRestAmountSubcontractingInclCreditRestriction@1100528401() : Decimal;
    VAR
      CreditRestrictionAmount@1100528400 : Decimal;
    BEGIN
      IF ("Document Type" = "Document Type"::"Pro Forma Invoice") OR
         ("Document Type" = "Document Type"::"Posted Invoice")
      THEN
        CreditRestrictionAmount := AmountIncludingVAT * ("Credit Restriction %" / 100);

      EXIT(GetRestAmountSubcontracting + CreditRestrictionAmount);
    END;

    PROCEDURE GetWithholdAmount@1100525012() WithholdAmount : Decimal;
    BEGIN
      WithholdAmount := (GetLastInstallmentAmount / 100) * "Withhold % Last Installment";
    END;

    PROCEDURE GetLastInstallmentAmount@1100525011() LastInstallmentAmount : Decimal;
    VAR
      SalesLine@1100525001 : Record 37;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::"Pro Forma Invoice":
          BEGIN
            SalesLine.SETRANGE("Document Type", "Document Type");
            SalesLine.SETRANGE("Document No.", "No.");
            SalesLine.SETRANGE("Last Installment", TRUE);
            IF SalesLine.FINDSET THEN
              REPEAT
                LastInstallmentAmount := LastInstallmentAmount + SalesLine."Amount Including VAT";
              UNTIL SalesLine.NEXT = 0;
          END;
        "Document Type"::"Posted Invoice":
          BEGIN
            CALCFIELDS("Last Installment Amount");
            LastInstallmentAmount := "Last Installment Amount";
          END;
        "Document Type"::"Pro Forma Credit Memo", "Document Type"::"Posted Credit Memo":
          LastInstallmentAmount := 0;
      END;
    END;

    PROCEDURE GetCurrencyCode@1100525019() CurrencyCode : Code[10];
    VAR
      GeneralLedgerSetup@1100525002 : Record 98;
    BEGIN
      IF "Currency Code" <> '' THEN
        CurrencyCode := "Currency Code"
      ELSE
        IF GeneralLedgerSetup.GET THEN
          CurrencyCode := GeneralLedgerSetup."LCY Code";
    END;

    PROCEDURE GetPublicNotaryBankAccountNo@1100525013() BankAccountNo : Text[30];
    VAR
      Customer@1100525002 : Record 18;
      CustomerBankAccount@1100525003 : Record 287;
    BEGIN
      IF Customer.GET("Public notary") THEN
        IF CustomerBankAccount.GET(Customer."No.", Customer."Preferred Bank Account") THEN
          BankAccountNo := CustomerBankAccount."Bank Account No.";
    END;

    PROCEDURE GetTranslatedPaymentTermsDescription@1100525022() : Text[50];
    VAR
      PaymentTerms@1100525000 : Record 3;
    BEGIN
      IF "Payment Terms Code" = '' THEN
        PaymentTerms.INIT
      ELSE BEGIN
        PaymentTerms.GET("Payment Terms Code");
        PaymentTerms.TranslateDescription(PaymentTerms, "Language Code");
      END;
      EXIT(PaymentTerms.Description);
    END;

    PROCEDURE GetTranslatedShipmentMethodDescription@1100525029() : Text[50];
    VAR
      ShipmentMethod@1100525000 : Record 10;
    BEGIN
      IF "Shipment Method Code" = '' THEN
        ShipmentMethod.INIT
      ELSE BEGIN
        ShipmentMethod.GET("Shipment Method Code");
        ShipmentMethod.TranslateDescription(ShipmentMethod,"Language Code");
      END;
      EXIT(ShipmentMethod.Description);
    END;

    PROCEDURE InsertSalesHeaderWithLines@1100525005(SalesHeader@1100525000 : Record 36;VAR GenericSalesLine@1100525001 : Record 11071889);
    VAR
      SalesLine@1100525002 : Record 37;
    BEGIN
      InsertSalesHeader(SalesHeader);
      InsertLines(GenericSalesLine);
    END;

    PROCEDURE InsertSalesHeader@1100525008(SalesHeader@1100525000 : Record 36);
    VAR
      SalesHeaderExtension@1100525001 : Record 11071868;
    BEGIN
      INIT;
      TRANSFERFIELDS(SalesHeader);
      SalesHeaderExtension.GetSalesHeadExtension(SalesHeader."Document Type", SalesHeader."No.");
      "E-Mail (Invoices)" := SalesHeaderExtension."E-Mail (Invoices)";
      "Electronic Invoicing" := SalesHeaderExtension."Electronic Invoicing";
      INSERT;
    END;

    PROCEDURE InsertSalesInvoiceHeaderWithLines@1100525009(SalesInvoiceHeader@1100525000 : Record 112;VAR GenericSalesLine@1100525001 : Record 11071889);
    VAR
      SalesInvoiceLine@1100525002 : Record 113;
    BEGIN
      InsertSalesInvoiceHeader(SalesInvoiceHeader);
      InsertLines(GenericSalesLine);
    END;

    PROCEDURE InsertSalesInvoiceHeader@1100525000(SalesInvoiceHeader@1100525000 : Record 112);
    BEGIN
      INIT;
      TRANSFERFIELDS(SalesInvoiceHeader);
      "Document Type" := "Document Type"::"Posted Invoice";
      INSERT;
    END;

    PROCEDURE InsertSalesCrMemoHeaderWithLines@1100525004(SalesCrMemoHeader@1100525000 : Record 114;VAR GenericSalesLine@1100525001 : Record 11071889);
    VAR
      SalesCrMemoLine@1100525002 : Record 115;
    BEGIN
      InsertSalesCrMemoHeader(SalesCrMemoHeader);
      InsertLines(GenericSalesLine);
    END;

    PROCEDURE InsertSalesCrMemoHeader@1100525010(SalesCrMemoHeader@1100525000 : Record 114);
    BEGIN
      INIT;
      TRANSFERFIELDS(SalesCrMemoHeader);
      "Document Type" := "Document Type"::"Posted Credit Memo";
      INSERT;
    END;

    LOCAL PROCEDURE InsertLines@1100525032(VAR GenericSalesLine@1100525001 : Record 11071889);
    VAR
      SalesLine@1100525000 : Record 37;
      SalesInvoiceLine@1100525002 : Record 113;
      SalesCrMemoLine@1100525004 : Record 115;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::"Pro Forma Invoice", "Document Type"::"Pro Forma Credit Memo":
          BEGIN
            SalesLine.SETRANGE("Document Type", "Document Type");
            SalesLine.SETRANGE("Document No.", "No.");
            IF SalesLine.FINDSET THEN
              REPEAT
              //>>RFC001
                IF ("Invoice Layout Code"='0') THEN
                  GenericSalesLine.InsertSalesLineGroup(SalesLine)
                ELSE
              //<<RFC001
                  GenericSalesLine.InsertSalesLine(SalesLine);
              UNTIL SalesLine.NEXT = 0;
          END;
        "Document Type"::"Posted Invoice":
          BEGIN
            SalesInvoiceLine.SETRANGE("Document No.", "No.");
            IF SalesInvoiceLine.FINDSET THEN
              REPEAT
              //>>RFC001
                IF ("Invoice Layout Code"='0') THEN
                  GenericSalesLine.InsertSalesInvoiceLineGroup(SalesInvoiceLine)
                ELSE
              //<<RFC001
                  GenericSalesLine.InsertSalesInvoiceLine(SalesInvoiceLine);
              UNTIL SalesInvoiceLine.NEXT = 0;
          END;
        "Document Type"::"Posted Credit Memo":
          BEGIN
            SalesCrMemoLine.SETRANGE("Document No.", "No.");
            IF SalesCrMemoLine.FINDSET THEN
              REPEAT
              //>>RFC001
                IF ("Invoice Layout Code"='0') THEN
                  GenericSalesLine.InsertSalesCrMemoLineGroup(SalesCrMemoLine)
                ELSE
              //<<RFC001
                  GenericSalesLine.InsertSalesCrMemoLine(SalesCrMemoLine);
              UNTIL SalesCrMemoLine.NEXT = 0;
          END;
      END;
    END;

    LOCAL PROCEDURE CalcSummary@1100485002(VAR ContractAmount@1100525000 : Decimal;VAR ExtensionContractAmount@1100528200 : Decimal;VAR Invoiced@1100525001 : Decimal;VAR ToBeInvoiced@1100525006 : Decimal;Extensions@1100528201 : Boolean);
    VAR
      TempGenericSalesLine@1100525007 : TEMPORARY Record 11071889;
      ProjectInstallment@1100525004 : Record 11012018;
      CustLedgerEntry@1100525003 : Record 21;
      TempPlot@1100525005 : TEMPORARY Record 11012500;
      PresentEntryNo@1100525002 : Integer;
    BEGIN
      InsertLines(TempGenericSalesLine);
      IF "Installment Invoice/Cr. Memo" AND NOT "Service Invoice" THEN BEGIN
        Invoiced := 0;
        ContractAmount := 0;
        ExtensionContractAmount := 0;
        PresentEntryNo := 0;
        PresentEntryNo :=
          DetermineCustomerLedgerNo(
            "No.", "Bill-to Customer No.","Posting Date");

        TempGenericSalesLine.RESET;
        TempGenericSalesLine.SETRANGE("Document Type", "Document Type");
        TempGenericSalesLine.SETRANGE("Document No.", "No.");
        TempGenericSalesLine.SETFILTER(Type, '<>%1', TempGenericSalesLine.Type::" ");
        TempGenericSalesLine.SETRANGE(Option, '');
        IF TempGenericSalesLine.FINDSET THEN BEGIN
          IF ProjectInstallment.GET(
            "Job No.",
            "Sell-to Customer No.",
            TempGenericSalesLine."Plot No.",
            TempGenericSalesLine."Installment No.")
          THEN BEGIN
            CASE TRUE OF
              ((ProjectInstallment."Plot No." <> '') AND (ProjectInstallment.Option = '') AND (ProjectInstallment."Extension Contract" = '')):
                BEGIN
                  TempGenericSalesLine.SETFILTER("Plot No.", '<>%1', '');
                  REPEAT
                    IF NOT TempPlot.GET("Job No.", TempGenericSalesLine."Plot No.") THEN BEGIN
                      IF ProjectInstallment.GET(
                        "Job No.",
                        "Sell-to Customer No.",
                        TempGenericSalesLine."Plot No.",
                        TempGenericSalesLine."Installment No.")
                      THEN BEGIN
                        IF (ProjectInstallment.Option = '') AND (ProjectInstallment."Extension Contract" = '') THEN BEGIN
                          DeterminePlotSummary(
                            "Job No.", ProjectInstallment."Plot No.", PresentEntryNo, ContractAmount, Invoiced);
                          TempPlot."Project No." := "Job No.";
                          TempPlot."Plot No." := TempGenericSalesLine."Plot No.";
                          TempPlot.INSERT;
                        END;
                      END;
                    END;
                  UNTIL TempGenericSalesLine.NEXT = 0;
                END;
              ((ProjectInstallment."Plot No." = '') AND (ProjectInstallment.Option = '')):
                BEGIN
                  DetermineBasicSummary("Job No.", PresentEntryNo, ContractAmount, Invoiced);
                  IF Extensions THEN
                    DetermineExtensionSummary("Job No.", PresentEntryNo, ExtensionContractAmount, Invoiced);
                END;
              END;
          END;
        END;

        ToBeInvoiced := ContractAmount + ExtensionContractAmount - (Invoiced + Amount);
      END;
    END;

    LOCAL PROCEDURE DetermineBasicSummary@1100525017(JobNo@1100525005 : Code[20];PresentEntryNo@1100525003 : Integer;VAR ContractAmount@1100525002 : Decimal;VAR Invoiced@1100525001 : Decimal);
    VAR
      ProjectPrincipal@1210190000 : Record 11012005;
      ProjectInstallment@1100525000 : Record 11012018;
    BEGIN
      ProjectPrincipal.GET(JobNo, "Sell-to Customer No.");
      ContractAmount := ProjectPrincipal."Contract Amount" + ProjectPrincipal."Plot Price";

      ProjectInstallment.SETRANGE("Project No.", JobNo);
      ProjectInstallment.SETRANGE(Principal, "Sell-to Customer No.");
      ProjectInstallment.SETFILTER("Extension Contract", '%1', '');
      ProjectInstallment.SETFILTER(Option, '%1', '');
      ProjectInstallment.SETFILTER("Plot No.", '%1', '');
      IF ProjectInstallment.FINDSET THEN
        REPEAT
          DetermineInvoiced(ProjectInstallment, PresentEntryNo, Invoiced);
        UNTIL ProjectInstallment.NEXT = 0;
    END;

    LOCAL PROCEDURE DetermineExtensionSummary@1100525015(JobNo@1100525001 : Code[20];PresentEntryNo@1100525004 : Integer;VAR ExtensionContractAmount@1100525003 : Decimal;VAR Invoiced@1100525002 : Decimal);
    VAR
      ProjectInstallment@1100525000 : Record 11012018;
    BEGIN
      ProjectInstallment.SETRANGE("Project No.", JobNo);
      ProjectInstallment.SETRANGE(Principal, "Sell-to Customer No.");
      ProjectInstallment.SETFILTER("Extension Contract", '<>%1', '');
      ProjectInstallment.SETFILTER(Option, '%1', '');
      ProjectInstallment.SETFILTER("Plot No.", '%1', '');
      IF ProjectInstallment.FINDSET THEN
        REPEAT
          ExtensionContractAmount := ExtensionContractAmount + ProjectInstallment."Installment Amount";
          DetermineInvoiced(ProjectInstallment, PresentEntryNo, Invoiced);
        UNTIL ProjectInstallment.NEXT = 0;
    END;

    LOCAL PROCEDURE DeterminePlotSummary@1100485004(JobNo@1100525001 : Code[20];PlotNo@1100485000 : Code[10];PresentEntryNo@1100525003 : Integer;VAR ContractAmount@1100525002 : Decimal;VAR Invoiced@1100525004 : Decimal);
    VAR
      ProjectInstallment@1100525000 : Record 11012018;
    BEGIN
      ProjectInstallment.SETRANGE("Project No.", JobNo);
      ProjectInstallment.SETRANGE(Principal, "Sell-to Customer No.");
      ProjectInstallment.SETFILTER("Extension Contract", '%1', '');
      ProjectInstallment.SETRANGE("Plot No.", PlotNo);
      ProjectInstallment.SETFILTER(Option, '%1', '');
      IF ProjectInstallment.FINDSET THEN
        REPEAT
          ContractAmount := ContractAmount + ProjectInstallment."Installment Amount";
          DetermineInvoiced(ProjectInstallment, PresentEntryNo, Invoiced);
        UNTIL ProjectInstallment.NEXT = 0;
    END;

    LOCAL PROCEDURE DetermineInvoiced@1210190008(ProjectInstallment@1100525000 : Record 11012018;PresentEntryNo@1100525001 : Integer;VAR Invoiced@1100525002 : Decimal);
    VAR
      JobLedgerEntry@1100409000 : Record 11072005;
      InvoiceEntryNo@1100525004 : Integer;
    BEGIN
      JobLedgerEntry.SETCURRENTKEY("Job No.");
      JobLedgerEntry.SETRANGE("Job No.", ProjectInstallment."Project No.");
      JobLedgerEntry.SETRANGE(Principal, "Sell-to Customer No.");
      JobLedgerEntry.SETRANGE("Project Invoice", TRUE);
      JobLedgerEntry.SETRANGE("Installment Invoice", TRUE);
      JobLedgerEntry.SETRANGE("Installment No.", ProjectInstallment."Installment No.");
      JobLedgerEntry.SETRANGE("Extension Contract", ProjectInstallment."Extension Contract");
      JobLedgerEntry.SETRANGE("Plot No.", ProjectInstallment."Plot No.");
      IF JobLedgerEntry.FINDSET THEN
        REPEAT
          InvoiceEntryNo := DetermineCustomerLedgerNo(
            JobLedgerEntry."Document No.", "Bill-to Customer No.",JobLedgerEntry."Posting Date");
          IF (InvoiceEntryNo < PresentEntryNo) OR
             (PresentEntryNo = 0)
          THEN
            Invoiced := Invoiced - JobLedgerEntry."Total Price";
        UNTIL JobLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE DetermineCustomerLedgerNo@1210190004(DocumentNo@1210190001 : Code[20];BilltoCustomerNo@1100525000 : Code[20];PostingDate@1100409000 : Date) @1210190003 : Integer;
    VAR
      CustLedgerEntry@1210190000 : Record 21;
    BEGIN
      CustLedgerEntry.SETCURRENTKEY("Document No.");
      CustLedgerEntry.SETRANGE("Document No.", DocumentNo);
      CustLedgerEntry.SETRANGE("Customer No.", BilltoCustomerNo);
      CustLedgerEntry.SETRANGE("Posting Date", PostingDate);
      IF CustLedgerEntry.FINDFIRST THEN
        EXIT(CustLedgerEntry."Entry No.");
    END;

    PROCEDURE HasTextLines@1100525023() : Boolean;
    VAR
      SalesReportTextLine@1100525000 : Record 11071912;
    BEGIN
      SalesReportTextLine.SETRANGE("Document Type", "Document Type");
      SalesReportTextLine.SETRANGE("Document No.", "No.");
      EXIT(NOT SalesReportTextLine.ISEMPTY);
    END;

    PROCEDURE GetVATClauseDescriptions@1100409000(GetAllDescriptions@1100528400 : Boolean;Index@1100528401 : Integer) VATClauseDescriptions : Text;
    VAR
      TempGenericSalesLine@1100409000 : TEMPORARY Record 11071889;
      TempVATPostingSetup@1100409002 : TEMPORARY Record 325;
      TempVATClause@1100409001 : TEMPORARY Record 560;
      VATPostingSetup@1100409003 : Record 325;
      Counter@1100528402 : Integer;
    BEGIN
      InsertLines(TempGenericSalesLine);
      IF TempGenericSalesLine.FINDSET THEN
        REPEAT
          IF (TempGenericSalesLine."VAT Bus. Posting Group" <> '') OR
             (TempGenericSalesLine."VAT Prod. Posting Group" <> '')
          THEN
            IF TempGenericSalesLine."Amount Including VAT" <> 0 THEN BEGIN
              TempVATPostingSetup."VAT Bus. Posting Group" := TempGenericSalesLine."VAT Bus. Posting Group";
              TempVATPostingSetup."VAT Prod. Posting Group" := TempGenericSalesLine."VAT Prod. Posting Group";
              IF TempVATPostingSetup.INSERT THEN;
            END;
        UNTIL TempGenericSalesLine.NEXT = 0;

      IF TempVATPostingSetup.FINDSET THEN
        REPEAT
          IF VATPostingSetup.GET(
            TempVATPostingSetup."VAT Bus. Posting Group",
            TempVATPostingSetup."VAT Prod. Posting Group")
          THEN BEGIN
            TempVATClause.Code := VATPostingSetup."VAT Clause Code";
            IF TempVATClause.INSERT THEN;
          END;
        UNTIL TempVATPostingSetup.NEXT = 0;

      IF TempVATClause.FINDSET THEN
        REPEAT
          Counter := Counter + 1;
          IF GetAllDescriptions OR
             (Counter = Index)
          THEN
            AddVATClauseDescription(VATClauseDescriptions, TempVATClause.Code);
        UNTIL TempVATClause.NEXT = 0;
    END;

    LOCAL PROCEDURE AddVATClauseDescription@1100409005(VAR VATClauseDescriptions@1100409000 : Text;VATClauseCode@1100409001 : Code[10]);
    VAR
      VATClause@1100409004 : Record 560;
    BEGIN
      IF VATClauseCode = '' THEN
        EXIT;
      IF NOT VATClause.GET(VATClauseCode) THEN
        EXIT;
      IF VATClause.Description = '' THEN
        EXIT;

      IF VATClauseDescriptions = '' THEN
        VATClauseDescriptions := VATClause.Description
      ELSE
        VATClauseDescriptions := VATClauseDescriptions + Br + VATClause.Description;
    END;

    LOCAL PROCEDURE Br@1100528424() Br : Text;
    BEGIN
      Br := '<BR>';
    END;

    PROCEDURE "***ITERO****"@1100285503();
    BEGIN
    END;

    PROCEDURE GetInstallmentAmount@1100285500() WithholdAmount : Decimal;
    VAR
      SalesLine@1100525001 : Record 37;
      ProjectInstallment@1100285500 : Record 11012018;
      SalesInvLine@1100285501 : Record 113;
      SalesCrMemoLine@1100285502 : Record 115;
    BEGIN
      //>>160315 ITERO.SB New calc. of withheld amount (RAD-39)
      CASE "Document Type" OF
        "Document Type"::"Pro Forma Invoice":
          BEGIN
            SalesLine.SETRANGE("Document Type", "Document Type");
            SalesLine.SETRANGE("Document No.", "No.");
            SalesLine.CALCSUMS("Withheld Amount");
            WithholdAmount:=SalesLine."Withheld Amount";
      //      {
      //      IF SalesLine.FINDSET THEN
      //        REPEAT
      //          ProjectInstallment.SETRANGE("Project No.",SalesLine."Job No.");
      //          ProjectInstallment.SETRANGE(Principal,SalesLine."Sell-to Customer No.");
      //          ProjectInstallment.SETRANGE("Plot No.",SalesLine."Plot No.");
      //          ProjectInstallment.SETRANGE("Installment No.",SalesLine."Installment No.");
      //          IF ProjectInstallment.FINDSET THEN
      //            WithholdAmount:= WithholdAmount + ProjectInstallment."Withheld Amount";
      //        UNTIL SalesLine.NEXT = 0;
      //      }
          END;
        "Document Type"::"Posted Invoice":
          BEGIN
            SalesInvLine.SETRANGE("Document No.", "No.");
            SalesInvLine.CALCSUMS("Withheld Amount");
            WithholdAmount:=SalesInvLine."Withheld Amount";

      //      {
      //      IF SalesInvLine.FINDSET THEN
      //        REPEAT
      //          ProjectInstallment.SETRANGE("Project No.",SalesInvLine."Job No.");
      //          ProjectInstallment.SETRANGE(Principal,SalesInvLine."Sell-to Customer No.");
      //          ProjectInstallment.SETRANGE("Plot No.",SalesInvLine."Plot No.");
      //          ProjectInstallment.SETRANGE("Installment No.",SalesInvLine."Installment No.");
      //          IF ProjectInstallment.FINDSET THEN
      //            WithholdAmount:= WithholdAmount + ProjectInstallment."Withheld Amount";
      //        UNTIL SalesInvLine.NEXT = 0;
      //      }
          END;
      //>> 140317 ITERO.SB Extended GetinstallmentAmount function with "Pro Forma Credit Memo" and "Posted Credit Memo"
          "Document Type"::"Pro Forma Credit Memo":
          BEGIN
            SalesLine.SETRANGE("Document Type", "Document Type");
            SalesLine.SETRANGE("Document No.", "No.");
            SalesLine.CALCSUMS("Withheld Amount");
            //>>160427 ITERO.SB RAD039fix
            WithholdAmount:=SalesLine."Withheld Amount"*-1;
            //<<

      //      {
      //      IF SalesLine.FINDSET THEN
      //        REPEAT
      //          ProjectInstallment.SETRANGE("Project No.",SalesLine."Job No.");
      //          ProjectInstallment.SETRANGE(Principal,SalesLine."Sell-to Customer No.");
      //          ProjectInstallment.SETRANGE("Plot No.",SalesLine."Plot No.");
      //          ProjectInstallment.SETRANGE("Installment No.",SalesLine."Installment No.");
      //          IF ProjectInstallment.FINDSET THEN
      //            WithholdAmount:= WithholdAmount + ProjectInstallment."Withheld Amount";
      //        UNTIL SalesLine.NEXT = 0;
      //       }
          END;

        "Document Type"::"Posted Credit Memo":
          BEGIN
            SalesCrMemoLine.SETRANGE("Document No.", "No.");
            SalesCrMemoLine.CALCSUMS("Withheld Amount");
            //>>160427 ITERO.SB RAD039fix
            WithholdAmount:=SalesCrMemoLine."Withheld Amount"*-1;
            //<<
      //      {
      //      IF SalesCrMemoLine.FINDSET THEN
      //        REPEAT
      //          ProjectInstallment.SETRANGE("Project No.",SalesCrMemoLine."Job No.");
      //          ProjectInstallment.SETRANGE(Principal,SalesCrMemoLine."Sell-to Customer No.");
      //          ProjectInstallment.SETRANGE("Plot No.",SalesCrMemoLine."Plot No.");
      //          ProjectInstallment.SETRANGE("Installment No.",SalesCrMemoLine."Installment No.");
      //          IF ProjectInstallment.FINDSET THEN
      //            WithholdAmount:= WithholdAmount + ProjectInstallment."Withheld Amount";
      //        UNTIL SalesCrMemoLine.NEXT = 0;
      //      }
          END;

      END;
      //<<
      //<<
    END;

    PROCEDURE GetInstallmentAmountTot@1100285501() WithholdAmount : Decimal;
    VAR
      SalesLine@1100525001 : Record 37;
      ProjectInstallment@1100285500 : Record 11012018;
      SalesInvLine@1100285501 : Record 113;
      SalesCrMemoLine@1100285000 : Record 115;
    BEGIN
      //>>160315 ITERO.SB New calc. of withheld amount (RAD-39)

      //{
      //CASE "Document Type" OF
      //  "Document Type"::"Pro Forma Invoice","Document Type"::"Posted Invoice":
      //    BEGIN
      //      ProjectInstallment.SETRANGE("Project No.", "Job No.");
      //      ProjectInstallment.SETRANGE(Principal, "Sell-to Customer No.");
      //      ProjectInstallment.SETFILTER("Extension Contract", '%1', '');
      //      ProjectInstallment.SETFILTER(Option, '%1', '');
      //      ProjectInstallment.SETFILTER("Plot No.", '%1', '');
      //      ProjectInstallment.SETRANGE("Last Installment",FALSE);
      //      IF ProjectInstallment.FINDSET THEN REPEAT
      //        ProjectInstallment.CALCFIELDS("Invoiced Price");//,ProjectInstallment."Invoice in Process");
      //          IF (ProjectInstallment."Invoiced Price"<>0) THEN
      //          WithholdAmount:= WithholdAmount+ProjectInstallment."Withheld Amount";
      //      UNTIL ProjectInstallment.NEXT = 0;
      //    END;
      //END;
      //}
      CASE "Document Type" OF
        "Document Type"::"Pro Forma Invoice","Document Type"::"Posted Invoice":
          BEGIN
            SalesInvLine.SETRANGE("Job No.","Job No.");
            SalesInvLine.SETRANGE("Sell-to Customer No.","Sell-to Customer No.");
            SalesInvLine.CALCSUMS("Withheld Amount");
            WithholdAmount:=SalesInvLine."Withheld Amount";

            // Include Withheld Amount from Cr.Memo
            //>>160427 ITERO.SB RAD039fix
            SalesCrMemoLine.SETRANGE("Job No.","Job No.");
            SalesCrMemoLine.SETRANGE("Sell-to Customer No.","Sell-to Customer No.");
            SalesCrMemoLine.CALCSUMS("Withheld Amount");
            WithholdAmount += SalesCrMemoLine."Withheld Amount";
          END;
      END;
      //<<
    END;

    PROCEDURE GetAmount@1100285502() Amount : Decimal;
    VAR
      SalesHeader@1100285502 : Record 36;
      SalesInvoiceHeader@1100285503 : Record 112;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::"Pro Forma Invoice":
          BEGIN
            SalesHeader.SETRANGE("Document Type", "Document Type");
            SalesHeader.SETRANGE("No.", "No.");
            IF SalesHeader.FINDFIRST THEN
              Amount:=SalesHeader.Amount;
          END;
        "Document Type"::"Posted Invoice":
          BEGIN
            SalesInvoiceHeader.SETRANGE("No.", "No.");
            IF SalesInvoiceHeader.FINDFIRST THEN
              Amount:=SalesInvoiceHeader.Amount;
          END;
        "Document Type"::"Pro Forma Credit Memo", "Document Type"::"Posted Credit Memo":
          Amount := 0;
      END;
    END;

    PROCEDURE GetROT@1100285504(Type@1100285512 : Integer) : Decimal;
    VAR
      SalesHeader@1100285502 : Record 36;
      SalesInvoiceHeader@1100285503 : Record 112;
      ROTInformation@1100285504 : Record 11128101;
      TotalROT@1100285501 : Decimal;
      RotCount@1100285500 : Integer;
      AmountLabor@1100285505 : Decimal;
      SalesLine@1100285506 : Record 37;
      lvDimensionValue@1100285509 : Record 349;
      lvGeneralLedgerSetup@1100285508 : Record 98;
      lvCostPlusEntry@1100285507 : Record 11012019;
      AmountROT@1100285510 : Decimal;
      AmountROTtot@1100285511 : Decimal;
      SalesInvoiceLine@1100285513 : Record 113;
      SalesHeader2@1100285514 : Record 36;
      SalesCrMemoHeader@1100285515 : Record 114;
      ProjectPrincipal@1100285516 : Record 11012005;
    BEGIN

      CASE "Document Type" OF
        "Document Type"::"Pro Forma Invoice":
          BEGIN
            SalesHeader.SETRANGE("Document Type", "Document Type");
            SalesHeader.SETRANGE("No.", "No.");
            IF SalesHeader.FINDFIRST THEN BEGIN
              //RotCount := 0;
              IF (SalesHeader.ROT) THEN BEGIN
                ROTInformation.RESET();
                ROTInformation.SETRANGE(Type, ROTInformation.Type::Invoice);
                //ROTInformation.SETRANGE("Document No.", SalesHeader."No.");
                ROTInformation.SETRANGE("Invoice No.",SalesHeader."No.");
                IF (ROTInformation.FINDSET(TRUE)) THEN REPEAT
                  //RotCount += 1;
                  TotalROT:=TotalROT+ROTInformation.Amount;
                UNTIL ROTInformation.NEXT = 0;

                IF Type = 1 THEN
                  EXIT(TotalROT);
                IF Type = 2 THEN
                  EXIT(AmountROT);
                IF Type = 3 THEN
                  EXIT(AmountROTtot);

              END;

            END;
          END;
        "Document Type"::"Posted Invoice":
          BEGIN
            SalesInvoiceHeader.SETRANGE("No.", "No.");
            IF SalesInvoiceHeader.FINDFIRST THEN BEGIN
              //RotCount := 0;
              IF (SalesInvoiceHeader.ROT) THEN BEGIN
                ROTInformation.RESET();
                ROTInformation.SETRANGE(Type, ROTInformation.Type::"Posted Invoice");
                //ROTInformation.SETRANGE("Document No.", SalesInvoiceHeader."No.");
                ROTInformation.SETRANGE("Invoice No.",SalesInvoiceHeader."No.");
                IF (ROTInformation.FINDSET(TRUE)) THEN REPEAT
                  //RotCount += 1;
                  TotalROT:=TotalROT+ROTInformation.Amount;
                UNTIL ROTInformation.NEXT = 0;

                IF Type = 1 THEN
                  EXIT(TotalROT);
                IF Type = 2 THEN
                  EXIT(AmountROT);
                IF Type = 3 THEN
                  EXIT(AmountROTtot);

              END;

            END;

          END;
        //END;
        //"Document Type"::"Pro Forma Credit Memo", "Document Type"::"Posted Credit Memo":
          //Amount := 0;

      //>>140317 ITERO.SB Extended "GetROT" function with "Pro Forma Credit Memo" and "Posted Credit Memo"
        "Document Type"::"Pro Forma Credit Memo":
          BEGIN
            SalesHeader2.SETRANGE("Document Type", "Document Type");
            SalesHeader2.SETRANGE("No.", "No.");
            IF SalesHeader2.FINDFIRST THEN BEGIN
              SalesInvoiceHeader.SETRANGE("No.", SalesHeader2."Applies-to Doc. No.");
              IF SalesInvoiceHeader.FINDFIRST THEN BEGIN
                //RotCount := 0;
                IF (SalesInvoiceHeader.ROT) THEN BEGIN
                  ROTInformation.RESET();
                  ROTInformation.SETRANGE(Type, ROTInformation.Type::"Posted Invoice");
                  //ROTInformation.SETRANGE("Document No.", SalesInvoiceHeader."No.");
                  ROTInformation.SETRANGE("Invoice No.",SalesInvoiceHeader."No.");
                  IF (ROTInformation.FINDSET(TRUE)) THEN REPEAT
                    //RotCount += 1;
                    TotalROT:=TotalROT+ROTInformation.Amount;
                  UNTIL ROTInformation.NEXT = 0;
                  IF Type = 1 THEN
                    EXIT(TotalROT);
                  IF Type = 2 THEN
                    EXIT(AmountROT);
                  IF Type = 3 THEN
                    EXIT(AmountROTtot);

                END;
              END;
            END;
          END;
        "Document Type"::"Posted Credit Memo":
          BEGIN
            //SalesHeader2.SETRANGE("Document Type", "Document Type");
            SalesCrMemoHeader.SETRANGE("No.", "No.");
            IF SalesCrMemoHeader.FINDFIRST THEN BEGIN
              SalesInvoiceHeader.SETRANGE("No.", SalesCrMemoHeader."Applies-to Doc. No.");
              IF SalesInvoiceHeader.FINDFIRST THEN BEGIN
                //RotCount := 0;
                IF (SalesInvoiceHeader.ROT) THEN BEGIN
                  ROTInformation.RESET();
                  ROTInformation.SETRANGE(Type, ROTInformation.Type::"Posted Invoice");
                  //ROTInformation.SETRANGE("Document No.", SalesInvoiceHeader."No.");
                  ROTInformation.SETRANGE("Invoice No.", SalesInvoiceHeader."No.");
                  IF (ROTInformation.FINDSET(TRUE)) THEN REPEAT
                    //RotCount += 1;
                    TotalROT:=TotalROT+ROTInformation.Amount;
                  UNTIL ROTInformation.NEXT = 0;

                  IF Type = 1 THEN
                    EXIT(TotalROT);
                  IF Type = 2 THEN
                    EXIT(AmountROT);
                  IF Type = 3 THEN
                    EXIT(AmountROTtot);

                END;
              END;
            END;
          END;

        END;
      //<<
    END;

    PROCEDURE CheckNo@1000000002(TalIn@1000000000 : Code[20]) TalUt : Integer;
    VAR
      AntSiff@1000000001 : Decimal;
      Tal1@1000000013 : Integer;
      Tal2@1000000012 : Integer;
      Tal3@1000000011 : Integer;
      Tal4@1000000010 : Integer;
      Tal5@1000000009 : Integer;
      Tal6@1000000008 : Integer;
      Tal7@1000000007 : Integer;
      Tal8@1000000006 : Integer;
      Tal9@1000000005 : Integer;
      Tal10@1000000004 : Integer;
      Tecken@1000000003 : Text[1];
      Summa@1000000002 : Integer;
      SummaUpp@1000000014 : Integer;
      Summa2@1000000015 : Integer;
      Tal11@1000000016 : Integer;
      Tal12@1000000017 : Integer;
      Tal13@1000000018 : Integer;
    BEGIN
      AntSiff := STRLEN(TalIn);
      Summa := 0;
      IF AntSiff = 13 THEN BEGIN
      //Tal 13
        Tecken := COPYSTR(TalIn,13,1);
        EVALUATE(Tal13,Tecken);
        Tal13 := Tal13 * 2;
        IF Tal13 > 9 THEN BEGIN
          Summa := Summa + (Tal13 - 10);
          Summa := Summa + 1;
        END ELSE BEGIN
          Summa := Summa + Tal13;
        END;
        //Tal12
        Tecken := COPYSTR(TalIn,12,1);
        EVALUATE(Tal12,Tecken);
        Tal12 := Tal12 * 1;
        Summa := Summa + Tal12;
      //Tal 11
        Tecken := COPYSTR(TalIn,11,1);
        EVALUATE(Tal11,Tecken);
        Tal11 := Tal11 * 2;
        IF Tal11 > 9 THEN BEGIN
          Summa := Summa + (Tal11 - 10);
          Summa := Summa + 1;
        END ELSE BEGIN
          Summa := Summa + Tal11;
        END;
        //tal10
        Tecken := COPYSTR(TalIn,10,1);
        EVALUATE(Tal10,Tecken);
        Tal12 := Tal10 * 1;
        Summa := Summa + Tal10;
      //Tal9
        Tecken := COPYSTR(TalIn,9,1);
        EVALUATE(Tal9,Tecken);
        Tal9 := Tal9 * 2;
        IF Tal9 > 9 THEN BEGIN
          Summa := Summa + (Tal9 - 10);
          Summa := Summa + 1;
        END ELSE BEGIN
          Summa := Summa + Tal9;
        END;
      //tal8
        Tecken := COPYSTR(TalIn,8,1);
        EVALUATE(Tal8,Tecken);
        Tal8 := Tal8 * 1;
        Summa := Summa + Tal8;
      //Tal7
        Tecken := COPYSTR(TalIn,7,1);
        EVALUATE(Tal7,Tecken);
        Tal7 := Tal7 * 2;
        IF Tal7 > 9 THEN BEGIN
          Summa := Summa + (Tal7 - 10);
          Summa := Summa + 1;
        END ELSE BEGIN
          Summa := Summa + Tal7;
        END;
      //tal6
        Tecken := COPYSTR(TalIn,6,1);
        EVALUATE(Tal6,Tecken);
        Tal6 := Tal6 * 1;
        Summa := Summa + Tal6;
      //Tal5
        Tecken := COPYSTR(TalIn,5,1);
        EVALUATE(Tal5,Tecken);
        Tal5 := Tal5 * 2;
        IF Tal5 > 9 THEN BEGIN
          Summa := Summa + (Tal5 - 10);
          Summa := Summa + 1;
        END ELSE BEGIN
          Summa := Summa + Tal5;
        END;
      //Tal4
        Tecken := COPYSTR(TalIn,4,1);
        EVALUATE(Tal4,Tecken);
        Tal4 := Tal4 * 1;
        Summa := Summa + Tal4;
      //Tal3
        Tecken := COPYSTR(TalIn,3,1);
        EVALUATE(Tal3,Tecken);
        Tal3 := Tal3 * 2;
        IF Tal3 > 9 THEN BEGIN
          Summa := Summa + (Tal3 - 10);
          Summa := Summa + 1;
        END ELSE BEGIN
          Summa := Summa + Tal3;
        END;
      //Tal2
        Tecken := COPYSTR(TalIn,2,1);
        EVALUATE(Tal2,Tecken);
        Tal2 := Tal2 * 1;
        Summa := Summa + Tal2;
      //Tal1
        Tecken := COPYSTR(TalIn,1,1);
        EVALUATE(Tal1,Tecken);
        Tal1 := Tal1 * 2;
        IF Tal1 > 9 THEN BEGIN
          Summa := Summa + (Tal1 - 10);
          Summa := Summa + 1;
        END ELSE BEGIN
          Summa := Summa + Tal1;
        END;
        //MESSAGE('Summa %1',Summa);
        SummaUpp := Summa DIV 10;
        Summa2 := SummaUpp * 10;
        IF Summa2 = Summa THEN
          EXIT(0);
        SummaUpp := SummaUpp + 1;
        SummaUpp := SummaUpp * 10;
        EXIT(SummaUpp - Summa);
      END;
      IF AntSiff = 7 THEN BEGIN
      END;
      IF AntSiff = 8 THEN BEGIN
        Tecken := COPYSTR(TalIn,8,1);
        EVALUATE(Tal8,Tecken);
        Tal8 := Tal8 * 1;
        Summa := Summa + Tal8;
        Tecken := COPYSTR(TalIn,7,1);
        EVALUATE(Tal7,Tecken);
        Tal7 := Tal7 * 2;
        IF Tal7 > 9 THEN BEGIN
          Summa := Summa + (Tal7 - 10);
          Summa := Summa + 1;
        END ELSE BEGIN
          Summa := Summa + Tal7;
        END;
        Tecken := COPYSTR(TalIn,6,1);
        EVALUATE(Tal6,Tecken);
        Tal6 := Tal6 * 1;
        Summa := Summa + Tal6;
        Tecken := COPYSTR(TalIn,5,1);
        EVALUATE(Tal5,Tecken);
        Tal5 := Tal5 * 2;
        IF Tal5 > 9 THEN BEGIN
          Summa := Summa + (Tal5 - 10);
          Summa := Summa + 1;
        END ELSE BEGIN
          Summa := Summa + Tal5;
        END;
        Tecken := COPYSTR(TalIn,4,1);
        EVALUATE(Tal4,Tecken);
        Tal4 := Tal4 * 1;
        Summa := Summa + Tal4;
        Tecken := COPYSTR(TalIn,3,1);
        EVALUATE(Tal3,Tecken);
        Tal3 := Tal3 * 2;
        IF Tal3 > 9 THEN BEGIN
          Summa := Summa + (Tal3 - 10);
          Summa := Summa + 1;
        END ELSE BEGIN
          Summa := Summa + Tal3;
        END;
        Tecken := COPYSTR(TalIn,2,1);
        EVALUATE(Tal2,Tecken);
        Tal2 := Tal2 * 1;
        Summa := Summa + Tal2;
        Tecken := COPYSTR(TalIn,1,1);
        EVALUATE(Tal1,Tecken);
        Tal1 := Tal1 * 2;
        IF Tal1 > 9 THEN BEGIN
          Summa := Summa + (Tal1 - 10);
          Summa := Summa + 1;
        END ELSE BEGIN
          Summa := Summa + Tal1;
        END;
        SummaUpp := Summa DIV 10;
        Summa2 := SummaUpp * 10;
        IF Summa2 = Summa THEN
          EXIT(0);
        SummaUpp := SummaUpp + 1;
        SummaUpp := SummaUpp * 10;
        EXIT(SummaUpp - Summa);
      END;

      //END;
      IF AntSiff = 9 THEN BEGIN
        Tecken := COPYSTR(TalIn,9,1);
        EVALUATE(Tal9,Tecken);
        Tal9 := Tal9 * 2;
        IF Tal9 > 9 THEN BEGIN
          Summa := Summa + (Tal9 - 10);
          Summa := Summa + 1;
        END ELSE BEGIN
          Summa := Summa + Tal9;
        END;
        Tecken := COPYSTR(TalIn,8,1);
        EVALUATE(Tal8,Tecken);
        Tal8 := Tal8 * 1;
        Summa := Summa + Tal8;
        Tecken := COPYSTR(TalIn,7,1);
        EVALUATE(Tal7,Tecken);
        Tal7 := Tal7 * 2;
        IF Tal7 > 9 THEN BEGIN
          Summa := Summa + (Tal7 - 10);
          Summa := Summa + 1;
        END ELSE BEGIN
          Summa := Summa + Tal7;
        END;
        Tecken := COPYSTR(TalIn,6,1);
        EVALUATE(Tal6,Tecken);
        Tal6 := Tal6 * 1;
        Summa := Summa + Tal6;
        Tecken := COPYSTR(TalIn,5,1);
        EVALUATE(Tal5,Tecken);
        Tal5 := Tal5 * 2;
        IF Tal5 > 9 THEN BEGIN
          Summa := Summa + (Tal5 - 10);
          Summa := Summa + 1;
        END ELSE BEGIN
          Summa := Summa + Tal5;
        END;
        Tecken := COPYSTR(TalIn,4,1);
        EVALUATE(Tal4,Tecken);
        Tal4 := Tal4 * 1;
        Summa := Summa + Tal4;
        Tecken := COPYSTR(TalIn,3,1);
        EVALUATE(Tal3,Tecken);
        Tal3 := Tal3 * 2;
        IF Tal3 > 9 THEN BEGIN
          Summa := Summa + (Tal3 - 10);
          Summa := Summa + 1;
        END ELSE BEGIN
          Summa := Summa + Tal3;
        END;
        Tecken := COPYSTR(TalIn,2,1);
        EVALUATE(Tal2,Tecken);
        Tal2 := Tal2 * 1;
        Summa := Summa + Tal2;
        Tecken := COPYSTR(TalIn,1,1);
        EVALUATE(Tal1,Tecken);
        Tal1 := Tal1 * 2;
        IF Tal1 > 9 THEN BEGIN
          Summa := Summa + (Tal1 - 10);
          Summa := Summa + 1;
        END ELSE BEGIN
          Summa := Summa + Tal1;
        END;
        SummaUpp := Summa DIV 10;
        Summa2 := SummaUpp * 10;
        IF Summa2 = Summa THEN
          EXIT(0);
        SummaUpp := SummaUpp + 1;
        SummaUpp := SummaUpp * 10;
        EXIT(SummaUpp - Summa);
      END;
    END;

    PROCEDURE GetOCR@1100285506() OCR : Code[20];
    VAR
      SalesHeader@1100285502 : Record 36;
      SalesInvoiceHeader@1100285503 : Record 112;
      InvNo@1100285505 : Text;
      CheckNumber@1100285504 : Integer;
      No@1100285501 : Text;
      Lenght@1100285500 : Integer;
    BEGIN
      InvNo:= "No.";
      CheckNumber:=CheckNo(InvNo);
      Lenght:=STRLEN(InvNo) + 2;
      IF Lenght>9 THEN
        No:=COPYSTR(FORMAT(Lenght),2,1)
      ELSE
        No:=FORMAT(Lenght);
      EXIT(InvNo+No+FORMAT(CheckNumber));
    END;

    PROCEDURE GetROTtxt@1100285507() ROTtxt : Text;
    VAR
      SalesHeader@1100285502 : Record 36;
      SalesInvoiceHeader@1100285503 : Record 112;
      ROTInformation@1100285504 : Record 11128101;
      SalesLine@1100285506 : Record 37;
      SalesInvoiceLine@1100285513 : Record 113;
      SalesCrMemoHeader@1100285500 : Record 114;
    BEGIN

      CASE "Document Type" OF
        "Document Type"::"Pro Forma Invoice":
          BEGIN
            SalesHeader.SETRANGE("Document Type", "Document Type");
            SalesHeader.SETRANGE("No.", "No.");
            IF SalesHeader.FINDFIRST THEN BEGIN
              IF (SalesHeader.ROT) THEN BEGIN
                ROTInformation.RESET();
                ROTInformation.SETRANGE(Type, ROTInformation.Type::Invoice);
                //ROTInformation.SETRANGE("Document No.", SalesHeader."No.");
                ROTInformation.SETRANGE("Invoice No.",SalesHeader."No.");
                IF (ROTInformation.FINDSET(TRUE)) THEN REPEAT
                  IF ROTtxt='' THEN
                    ROTtxt:=ROTtxt+ROTInformation.Name+':'+ROTInformation."Personal No."+' Del:'+FORMAT(ROTInformation."Quote of ROT Amount")+'%'
                  ELSE
                    ROTtxt:=ROTtxt+','+ROTInformation.Name+':'+ROTInformation."Personal No."+' Del:'+FORMAT(ROTInformation."Quote of ROT Amount")+'%';
                UNTIL ROTInformation.NEXT = 0;
                //<<
                IF ROTInformation."Building/Apartment"=0 THEN
                  ROTtxt:='Fastbet.:'+ROTInformation."Building No."+','+ROTtxt
                ELSE
                  ROTtxt:='Lgh:'+ROTInformation."Building No."+',Orgnr:'+ROTInformation."Apartment Organisation No."+','+ROTtxt;
              END;
            END;
          END;
        "Document Type"::"Posted Invoice":
          BEGIN
            SalesInvoiceHeader.SETRANGE("No.", "No.");
            IF SalesInvoiceHeader.FINDFIRST THEN BEGIN
              IF (SalesInvoiceHeader.ROT) THEN BEGIN
                ROTInformation.RESET();
                ROTInformation.SETRANGE(Type, ROTInformation.Type::"Posted Invoice");
                //ROTInformation.SETRANGE("Document No.", SalesInvoiceHeader."No.");
                ROTInformation.SETRANGE("Invoice No.",SalesInvoiceHeader."No.");
                IF (ROTInformation.FINDSET(TRUE)) THEN REPEAT
                  IF ROTtxt='' THEN
                    ROTtxt:=ROTtxt+ROTInformation.Name+':'+ROTInformation."Personal No."+' Del:'+FORMAT(ROTInformation."Quote of ROT Amount")+'%'
                  ELSE
                    ROTtxt:=ROTtxt+','+ROTInformation.Name+':'+ROTInformation."Personal No."+' Del:'+FORMAT(ROTInformation."Quote of ROT Amount")+'%';
                UNTIL ROTInformation.NEXT = 0;
                //>> 140403 ITERO.SB Handle "ROT-fixed price"
                IF ROTInformation."Building/Apartment"=0 THEN
                  ROTtxt:='Fastbet.:'+ROTInformation."Building No."+','+ROTtxt
                ELSE
                  ROTtxt:='Lgh:'+ROTInformation."Building No."+',Orgnr:'+ROTInformation."Apartment Organisation No."+','+ROTtxt;

              END;
            END;
          END;
      //>>140317 ITERO.SB Extended "GetROTtxt" function with "Pro Forma Credit Memo" and "Posted Credit Memo"
        "Document Type"::"Pro Forma Credit Memo":
          BEGIN
            SalesHeader.SETRANGE("Document Type", "Document Type");
            SalesHeader.SETRANGE("No.", "No.");
            IF SalesHeader.FINDFIRST THEN BEGIN
              SalesInvoiceHeader.SETRANGE("No.", SalesHeader."Applies-to Doc. No.");
              IF SalesInvoiceHeader.FINDFIRST THEN BEGIN
                IF (SalesInvoiceHeader.ROT) THEN BEGIN
                  ROTInformation.RESET();
                  ROTInformation.SETRANGE(Type, ROTInformation.Type::"Posted Invoice");
                  //ROTInformation.SETRANGE("Document No.", SalesInvoiceHeader."No.");
                  ROTInformation.SETRANGE("Invoice No.",SalesInvoiceHeader."No.");
                  IF (ROTInformation.FINDSET(TRUE)) THEN REPEAT
                    IF ROTtxt='' THEN
                      ROTtxt:=ROTtxt+ROTInformation.Name+':'+ROTInformation."Personal No."+' Del:'+FORMAT(ROTInformation."Quote of ROT Amount")+'%'
                    ELSE
                      ROTtxt:=ROTtxt+','+ROTInformation.Name+':'+ROTInformation."Personal No."+' Del:'+FORMAT(ROTInformation."Quote of ROT Amount")+'%';
                  UNTIL ROTInformation.NEXT = 0;
                  //>> 140403 ITERO.SB Handle "ROT-fixed price"
                  //<<
                  IF ROTInformation."Building/Apartment"=0 THEN
                    ROTtxt:='Fastbet.:'+ROTInformation."Building No."+','+ROTtxt
                  ELSE
                    ROTtxt:='Lgh:'+ROTInformation."Building No."+',Orgnr:'+ROTInformation."Apartment Organisation No."+','+ROTtxt;

                END;
              END;
            END;
          END;
        "Document Type"::"Posted Credit Memo":
          BEGIN
            SalesCrMemoHeader.SETRANGE("No.", "No.");
            IF SalesCrMemoHeader.FINDFIRST THEN BEGIN
              SalesInvoiceHeader.SETRANGE("No.", SalesCrMemoHeader."Applies-to Doc. No.");
              IF SalesInvoiceHeader.FINDFIRST THEN BEGIN
                IF (SalesInvoiceHeader.ROT) THEN BEGIN
                  ROTInformation.RESET();
                  ROTInformation.SETRANGE(Type, ROTInformation.Type::"Posted Invoice");
                  //ROTInformation.SETRANGE("Document No.", SalesInvoiceHeader."No.");
                  ROTInformation.SETRANGE("Invoice No.",SalesInvoiceHeader."No.");
                  IF (ROTInformation.FINDSET(TRUE)) THEN REPEAT
                    IF ROTtxt='' THEN
                      ROTtxt:=ROTtxt+ROTInformation.Name+':'+ROTInformation."Personal No."+' Del:'+FORMAT(ROTInformation."Quote of ROT Amount")+'%'
                    ELSE
                      ROTtxt:=ROTtxt+','+ROTInformation.Name+':'+ROTInformation."Personal No."+' Del:'+FORMAT(ROTInformation."Quote of ROT Amount")+'%';
                  UNTIL ROTInformation.NEXT = 0;
                  //>> 140403 ITERO.SB Handle "ROT-fixed price"
                  //<<
                  IF ROTInformation."Building/Apartment"=0 THEN
                    ROTtxt:='Fastbet.:'+ROTInformation."Building No."+','+ROTtxt
                  ELSE
                    ROTtxt:='Lgh:'+ROTInformation."Building No."+',Orgnr:'+ROTInformation."Apartment Organisation No."+','+ROTtxt;

                END;
              END;
            END;
          END;
      END;
      //<<
    END;

    PROCEDURE GetPhoneNo@1100285505() PhoneNo : Text;
    VAR
      Job@1100285500 : Record 11072003;
      Employee@1100285501 : Record 5200;
    BEGIN
      IF Job.GET("Job No.") THEN BEGIN
        IF Employee.GET(Job."Project Manager") THEN
          PhoneNo := Employee."Phone No.";
      END;
    END;

    PROCEDURE GetROTPct@1100285000(Type@1100285000 : Integer) : Decimal;
    VAR
      ROTPct@1100285001 : Decimal;
      SalesHeader@1100285017 : Record 36;
      SalesInvoiceHeader@1100285016 : Record 112;
      ROTInformation@1100285015 : Record 11128101;
      TotalROT@1100285014 : Decimal;
      RotCount@1100285013 : Integer;
      AmountLabor@1100285012 : Decimal;
      SalesLine@1100285011 : Record 37;
      lvDimensionValue@1100285010 : Record 349;
      lvGeneralLedgerSetup@1100285009 : Record 98;
      lvCostPlusEntry@1100285008 : Record 11012019;
      AmountROT@1100285007 : Decimal;
      AmountROTtot@1100285006 : Decimal;
      SalesInvoiceLine@1100285005 : Record 113;
      SalesHeader2@1100285004 : Record 36;
      SalesCrMemoHeader@1100285003 : Record 114;
      ProjectPrincipal@1100285002 : Record 11012005;
      SalesReceivablesSetup@1100285018 : Record 311;
    BEGIN
      // 151215 ITERO.AC RFC-065 New function that returns current ROT Percentage

      CASE "Document Type" OF
        "Document Type"::"Pro Forma Invoice":
          BEGIN
            SalesHeader.SETRANGE("Document Type", "Document Type");
            SalesHeader.SETRANGE("No.", "No.");
            IF SalesHeader.FINDFIRST THEN BEGIN
              IF (SalesHeader.ROT) THEN BEGIN
                ROTInformation.RESET();
                ROTInformation.SETRANGE(Type, ROTInformation.Type::Invoice);
                ROTInformation.SETRANGE("Invoice No.",SalesHeader."No.");
                IF ROTInformation.FINDFIRST THEN BEGIN
                    ROTPct := ROTInformation."ROT Percentage";
                    IF ROTPct = 0 THEN
                      ROTPct := GetSalesSetupROTPct();
                    EXIT(ROTPct);
                END;
              END;
            END;
          END;
        "Document Type"::"Posted Invoice":
          BEGIN
            SalesInvoiceHeader.SETRANGE("No.", "No.");
            IF SalesInvoiceHeader.FINDFIRST THEN BEGIN
              IF (SalesInvoiceHeader.ROT) THEN BEGIN
                ROTInformation.RESET();
                ROTInformation.SETRANGE(Type, ROTInformation.Type::"Posted Invoice");
                ROTInformation.SETRANGE("Invoice No.",SalesInvoiceHeader."No.");
                IF ROTInformation.FINDFIRST THEN BEGIN
                    ROTPct := ROTInformation."ROT Percentage";
                    IF ROTPct = 0 THEN
                      ROTPct := GetSalesSetupROTPct();
                    EXIT(ROTPct);
                END;
              END;
            END;
          END;

        "Document Type"::"Pro Forma Credit Memo":
          BEGIN
            SalesHeader2.SETRANGE("Document Type", "Document Type");
            SalesHeader2.SETRANGE("No.", "No.");
            IF SalesHeader2.FINDFIRST THEN BEGIN
              SalesInvoiceHeader.SETRANGE("No.", SalesHeader2."Applies-to Doc. No.");
              IF SalesInvoiceHeader.FINDFIRST THEN BEGIN
                //RotCount := 0;
                IF (SalesInvoiceHeader.ROT) THEN BEGIN
                  ROTInformation.RESET();
                  ROTInformation.SETRANGE(Type, ROTInformation.Type::"Posted Invoice");
                  ROTInformation.SETRANGE("Invoice No.",SalesInvoiceHeader."No.");
                  IF ROTInformation.FINDFIRST THEN BEGIN
                    ROTPct := ROTInformation."ROT Percentage";
                    IF ROTPct = 0 THEN
                      ROTPct := GetSalesSetupROTPct();
                    EXIT(ROTPct);
                  END;
                END;
              END;
            END;
          END;
        "Document Type"::"Posted Credit Memo":
          BEGIN
            SalesCrMemoHeader.SETRANGE("No.", "No.");
            IF SalesCrMemoHeader.FINDFIRST THEN BEGIN
              SalesInvoiceHeader.SETRANGE("No.", SalesCrMemoHeader."Applies-to Doc. No.");
              IF SalesInvoiceHeader.FINDFIRST THEN BEGIN
                IF (SalesInvoiceHeader.ROT) THEN BEGIN
                  ROTInformation.RESET();
                  ROTInformation.SETRANGE(Type, ROTInformation.Type::"Posted Invoice");
                  ROTInformation.SETRANGE("Invoice No.", SalesInvoiceHeader."No.");
                  IF ROTInformation.FINDFIRST THEN BEGIN
                    ROTPct := ROTInformation."ROT Percentage";
                    IF ROTPct = 0 THEN
                      ROTPct := GetSalesSetupROTPct();
                    EXIT(ROTPct);
                  END;
                END;
              END;
            END;
          END;
        END;
    END;

    LOCAL PROCEDURE GetSalesSetupROTPct@1100285004() : Decimal;
    VAR
      SalesReceivablesSetup@1100285000 : Record 311;
      ROTPct@1100285001 : Decimal;
    BEGIN
      // 151215 ITERO.AC RFC-065 New function that returns current ROT Percentage from Sales Setup

      IF SalesReceivablesSetup.GET() THEN BEGIN

        SalesReceivablesSetup.TESTFIELD("ROT Percentage");
        ROTPct := SalesReceivablesSetup."ROT Percentage";     // ITERO.AC 151215 RFC-065 Bugfix
        EXIT(ROTPct);

      END;
    END;

    BEGIN
    {
      This table contains fields of the tables Sales Header (36), Sales Invoice Header (112) and Sales Cr.Memo Header (114).
      This table is used in report Generic Sales Document (11020285). This is a report that can be used for printing
      a Pro Forma Sales Invoice, Pro Forma Sales Cr.Memo, Posted Sales Invoice or Posted Sales Cr.Memo.
      This table is only used as a temporary table.

      Some FlowFields in the tables Sales Header (36), Sales Invoice Header (112) and Sales Cr.Memo Header (114) refer to
      different tables.
      Example:
      The FlowField Amount in table Sales Header (36) has the CalcFormula:
        Sum("Sales Line".Amount WHERE (Document Type=FIELD(Document Type),Document No.=FIELD(No.)))
      The FlowField Amount in table Sales Invoice Header (112) has the CalcFormula:
        Sum("Sales Invoice Line".Amount WHERE (Document No.=FIELD(No.)))
      The FlowField Amount in table Sales Cr.Memo Header (114) has the CalcFormula:
        Sum("Sales Cr.Memo Line".Amount WHERE (Document No.=FIELD(No.)))
      Therefore the following FlowFields have been replaced with functions:
              60 Amount
              61 Amount Including VAT
        11012580 Amount VAT
        11012597 Open Complaints
        11012598 Complaints

      To prevent that the Generic Sales Header table will contain to many fields, some fields (that are not
      relevant to a printed invoice or credit memo) have not been added to the Generic Sales Header table:
             107 No. Series (table 36), Pre-Assigned No. Series (table 112, 114)
             108 Posting No. Series (table 36), No. Series (table 112, 114)
             112 User ID
             124 IC Status
             125 Sell-to IC Partner Code
             126 Bill-to IC Partner Code
             129 IC Direction
             160 Job Queue Status
             161 Job Queue Entry ID
        11012593 PDF Sent by
        11012815 Inserted By
        11012880 Invoice Exported by XML
        11020281 Invoice per E-Mail
        11020282 E-Mail Sent by
        11020283 E-Mail Sent on

      When a Sales Header record is inserted in a temporary Generic Sales Header table, the fields
      "E-Mail (Invoices)" and "Electronic Invoicing" are read from table Sales Header Extension (11071868).

      140203 ITERO.SB New functions added
      140317 ITERO.SB Extended "GetROTtxt","GetROT" and "GetinstallmentAmount" functions with "Pro Forma Credit Memo" and "Posted Credit Memo"
      140414 ITERO.SB Updated ROT-calc. + added func. GetPhoneNo (Manager)
      141015 ITERO.MH ENH021 Added "ROT" as field
      150909 RFC001
      151215 ITERO.AC RFC-065 Bugfixes. Added two functions: GetROTPct() AND GetSalesSetupROTPct()
      160315 ITERO.SB New calc. of withheld amount (RAD-39)
      160422 ITERO.SB Use old version of function HasOnlyReverseChargeVATLines (from 100_dev)
      160427 ITERO.SB RAD039fix, Handle new field, Withheld Amt. (Credit)
    }
    END.
  }
}

