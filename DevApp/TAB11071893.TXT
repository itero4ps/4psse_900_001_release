OBJECT Table 11071893 Prognosis per Element
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11072003=rm;
    OnInsert=BEGIN
               ProjRec.GET("Project No.");
               "Main Project No." := ProjRec."Main Project";
               UpdateCostControlStatus(UpdateAction::Insert);
             END;

    OnModify=BEGIN
               UpdateCostControlStatus(UpdateAction::Modify);
               PrognosisRec.UpdateLogBook("Project No.", "Prognosis Date"); //mg, 10-12-10: M24403
             END;

    OnDelete=BEGIN
               IF NOT DeleteControlOnProgPerElem THEN BEGIN //**4PS, SR C011681 17-01-14
                 IF PrognosisRec.GET("Project No.", "Prognosis Date") THEN
                   PrognosisRec.TESTFIELD(Fixed,FALSE);
                 UpdateCostControlStatus(UpdateAction::Delete);//**4PS, SR C013794 10-03-14
                 PrognosisRec.UpdateLogBook("Project No.", "Prognosis Date"); //mg, 10-12-10: M24403
               END;
             END;

    CaptionML=ENU=Prognosis per Element;
    DrillDownPageID=Page11125097;
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=ENU=Project No. }
    { 20  ;   ;Prognosis Date      ;Date          ;OnValidate=BEGIN
                                                                //C017374.so
                                                                //PrevPrognDateFilter := '<'+FORMAT("Prognosis Date");
                                                                //**Call 19910 Exact filter for previous prognosis wanted.
                                                                //IF lPrognosisRec.GET("Project No.", "Prognosis Date") THEN BEGIN
                                                                //  lPrognosisRec.RESET;
                                                                //  lPrognosisRec.SETRANGE("Project No.", "Project No.");
                                                                //  lPrognosisRec.SETFILTER("Prognosis Date", '<%1', "Prognosis Date");
                                                                //  IF lPrognosisRec.FINDLAST THEN BEGIN
                                                                //    PrevPrognDateFilter := FORMAT(lPrognosisRec."Prognosis Date");
                                                                //  END;
                                                                //END;
                                                                //C017374.eo
                                                              END;

                                                   CaptionML=ENU=Prognosis Date }
    { 50  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                CheckSurchargesCalculated;
                                                                CalculateAmount;
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 60  ;   ;Price               ;Decimal       ;OnValidate=BEGIN
                                                                CheckSurchargesCalculated;
                                                                CalculateAmount;
                                                              END;

                                                   CaptionML=ENU=Price;
                                                   AutoFormatType=2 }
    { 70  ;   ;Amount incl. Surcharge;Decimal     ;OnValidate=BEGIN
                                                                CalculateQuantity;
                                                                CalculatePrognosisFields;

                                                                Amount := "Amount incl. Surcharge" - "Ovh. Surcharge";
                                                              END;

                                                   CaptionML=ENU=Amount incl. Ovh. Surcharge;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 73  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                CheckSurchargesCalculated;
                                                                VALIDATE("Amount incl. Surcharge", Amount + "Ovh. Surcharge")
                                                              END;

                                                   CaptionML=ENU=Amount;
                                                   AutoFormatType=1 }
    { 75  ;   ;Ovh. Surcharge      ;Decimal       ;CaptionML=ENU=Ovh. Surch. prognosis;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 80  ;   ;Element             ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                ElementFormat.FormatElem(Element,2,'');
                                                                IF Element <> '' THEN BEGIN
                                                                  IF "Project No." = '' THEN BEGIN
                                                                    ElemRec.GET(Element);
                                                                    Level := ElemRec.Level;
                                                                    Chapter := ElemRec.Chapter;
                                                                    Paragraph := ElemRec.Paragraph;
                                                                  END ELSE BEGIN
                                                                    ProjRec.GET("Project No.");
                                                                    ProjElemRec.GET("Project No.",Element);
                                                                    Level := ProjElemRec.Level;
                                                                    Chapter := ProjElemRec.Chapter;
                                                                    Paragraph := ProjElemRec.Paragraph;
                                                                  END;
                                                                END ELSE BEGIN
                                                                  CLEAR(Level);
                                                                  CLEAR(Chapter);
                                                                  CLEAR(Paragraph);
                                                                END;
                                                                CALCFIELDS("Element Description");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 81  ;   ;Level               ;Integer       ;CaptionML=ENU=Level;
                                                   Editable=No }
    { 82  ;   ;Chapter             ;Code20        ;CaptionML=ENU=Chapter;
                                                   Editable=No }
    { 83  ;   ;Paragraph           ;Code20        ;CaptionML=ENU=Paragraph;
                                                   Editable=No }
    { 85  ;   ;Element Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Element".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                           Element=FIELD(Element)));
                                                   CaptionML=ENU=Element Description;
                                                   Editable=No }
    { 100 ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=ENU=Unit of Measure }
    { 140 ;   ;Previous Date       ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Max("Prognosis per Element"."Prognosis Date" WHERE (Project No.=FIELD(Project No.),
                                                                                                                   Element=FIELD(Element),
                                                                                                                   Prognosis Date=FIELD(UPPERLIMIT(FILTER(Previous Date Filter)))));
                                                   CaptionML=ENU=Previous Date;
                                                   Editable=No }
    { 141 ;   ;Previous Date Filter;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Previous Date Flter;
                                                   Description=C017374 }
    { 150 ;   ;Previous Prognosis  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Prognosis per Element"."Amount incl. Surcharge" WHERE (Project No.=FIELD(Project No.),
                                                                                                                              Prognosis Date=FIELD(Previous Date Filter),
                                                                                                                              Element=FIELD(Element)));
                                                   CaptionML=ENU=Previous Prognosis;
                                                   Editable=No }
    { 155 ;   ;Fix Prognosis Line  ;Boolean       ;CaptionML=ENU=Fix Prognosis Line;
                                                   Editable=No }
    { 160 ;   ;Budget Amount       ;Decimal       ;CaptionML=ENU=Budget Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 165 ;   ;Budget Surcharge Amount;Decimal    ;CaptionML=ENU=Budget Overhead Surcharge Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 180 ;   ;Actual Costs        ;Decimal       ;CaptionML=ENU=Actual Costs;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 200 ;   ;Open (Purchase)     ;Decimal       ;CaptionML=ENU=Open (Purchase);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 210 ;   ;Received/Not Invoiced;Decimal      ;CaptionML=ENU=Received/Not Invoiced;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 211 ;   ;Open Ovh. Surch. (Purchase);Decimal;CaptionML=ENU=Open Ovh. Surch. (Purchase);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 218 ;   ;Open (Inventory)    ;Decimal       ;CaptionML=ENU=Open (Inventory);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 219 ;   ;Open Ovh. Surch. (Inventory);Decimal;
                                                   CaptionML=ENU=Open Ovh. Surch. (Inventory);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 220 ;   ;Allowed Costs       ;Decimal       ;CaptionML=ENU=Allowed Costs;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 240 ;   ;Prognosis End Result;Decimal       ;OnValidate=BEGIN
                                                                CheckSurchargesCalculated;
                                                                "Amount incl. Surcharge" := "Budget Amount" - "Total Cost" - "Prognosis End Result";
                                                                Amount := "Amount incl. Surcharge" - "Ovh. Surcharge";
                                                                "Prognosis Total Cost" := "Amount incl. Surcharge" + "Total Cost";
                                                                CalculateQuantity;
                                                              END;

                                                   CaptionML=ENU=Prognosis End Result;
                                                   AutoFormatType=1 }
    { 250 ;   ;Comment             ;Text100       ;CaptionML=ENU=Comment }
    { 260 ;   ;Total Cost          ;Decimal       ;CaptionML=ENU=Total Cost;
                                                   AutoFormatType=1 }
    { 265 ;   ;Total Cost (Excl. Risc Cov.);Decimal;
                                                   CaptionML=ENU=Total Cost (Excl. Risc Cov.);
                                                   AutoFormatType=1 }
    { 350 ;   ;Total Prognosis End Result;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prognosis per Element"."Prognosis End Result" WHERE (Project No.=FIELD(Project No.),
                                                                                                                         Prognosis Date=FIELD(Prognosis Date)));
                                                   CaptionML=ENU=Total Prognosis End Result;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 410 ;   ;Total Prognosis     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prognosis per Element"."Amount incl. Surcharge" WHERE (Project No.=FIELD(Project No.),
                                                                                                                           Prognosis Date=FIELD(Prognosis Date)));
                                                   CaptionML=ENU=Total Prognosis;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 420 ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   CaptionML=ENU=Cost Component;
                                                   Editable=No }
    { 430 ;   ;Main Project No.    ;Code20        ;TableRelation=Job;
                                                   CaptionML=ENU=Main Project No. }
    { 440 ;   ;Prev Prognosis End Result;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Prognosis per Element"."Prognosis End Result" WHERE (Project No.=FIELD(Project No.),
                                                                                                                            Prognosis Date=FIELD(Previous Date Filter),
                                                                                                                            Element=FIELD(Element)));
                                                   CaptionML=ENU=Prev Prognosis End Result;
                                                   Editable=No }
    { 450 ;   ;Prognosis Total Cost;Decimal       ;OnValidate=BEGIN
                                                                CheckSurchargesCalculated;
                                                                // jhoek.begin
                                                                "Prognosis End Result" := "Budget Amount" - "Prognosis Total Cost";
                                                                "Amount incl. Surcharge" := "Prognosis Total Cost" - "Total Cost";
                                                                CalculateQuantity;
                                                                // jhoek.end
                                                                Amount := "Amount incl. Surcharge" - "Ovh. Surcharge";
                                                              END;

                                                   CaptionML=ENU=Prognosis Total Cost;
                                                   AutoFormatType=1 }
    { 480 ;   ;Estimated Purchase Result;Decimal  ;CaptionML=ENU=Estimated Purchase Result;
                                                   Editable=No }
    { 520 ;   ;Risc Coverage       ;Decimal       ;OnValidate=BEGIN
                                                                CheckSurchargesCalculated;
                                                                "Total Cost" := "Total Cost (Excl. Risc Cov.)" + "Risc Coverage";
                                                                VALIDATE("Amount incl. Surcharge");
                                                              END;

                                                   CaptionML=ENU=Risc Coverage;
                                                   AutoFormatType=1 }
    { 530 ;   ;Invoiced            ;Decimal       ;CaptionML=ENU=Invoiced;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 540 ;   ;Total Risc Coverage Amount;Decimal ;CaptionML=ENU=Total Risc Coverage Amount;
                                                   Editable=No }
    { 545 ;   ;Total Release Risc Coverage;Decimal;CaptionML=ENU=Total Release Risc Coverage;
                                                   Editable=No }
    { 550 ;   ;Best Case Result    ;Decimal       ;OnValidate=BEGIN
                                                                IF "Best Case Result" < "Prognosis End Result" THEN
                                                                  ERROR(Text004);
                                                              END;

                                                   CaptionML=ENU=Best Case Result;
                                                   AutoFormatType=1 }
    { 555 ;   ;Worst Case Result   ;Decimal       ;OnValidate=BEGIN
                                                                IF "Worst Case Result" > "Prognosis End Result" THEN
                                                                  ERROR(Text003);
                                                              END;

                                                   CaptionML=ENU=Worst Case Result;
                                                   AutoFormatType=1 }
  }
  KEYS
  {
    {    ;Project No.,Prognosis Date,Element      ;SumIndexFields=Amount incl. Surcharge,Risc Coverage,Prognosis Total Cost,Prognosis End Result,Budget Amount,Total Cost,Quantity;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Prognosis Date                          ;MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Main Project No.,Project No.,Prognosis Date;
                                                   SumIndexFields=Amount incl. Surcharge,Quantity,Prognosis Total Cost }
    {    ;Main Project No.,Project No.,Cost Component,Prognosis Date;
                                                   SumIndexFields=Amount incl. Surcharge,Quantity,Risc Coverage,Prognosis Total Cost }
    {    ;Main Project No.,Project No.,Element     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ProjElemRec@1210190003 : Record 11012010;
      ElemRec@1100525000 : Record 11012060;
      ProjRec@1100485000 : Record 11072003;
      PrognosisRec@1100525006 : Record 11012034;
      ElementFormat@1100525001 : Codeunit 11012022;
      UpdateAction@1100525004 : 'Insert,Modify,Delete';
      Text003@1100528802 : TextConst 'ENU=Amount may not exceed the Prognosis End Result';
      Text004@1100528801 : TextConst 'ENU=Amount may not be less than Prognosis End Result';
      DeleteControlOnProgPerElem@1100525002 : Boolean;

    PROCEDURE CalculateAmount@1();
    BEGIN
      VALIDATE(Amount, Quantity * Price);
    END;

    PROCEDURE CalculateQuantity@2();
    BEGIN
      IF Price <> 0 THEN
        Quantity := "Amount incl. Surcharge" / Price;
    END;

    PROCEDURE UpdateCostControlStatus@10(lUpdateAction@1100485002 : 'Insert,Modify,Delete');
    BEGIN
      //IF ProjRec.GET("Project No.") THEN
      //  ProjRec.UpdateCostControlStatus(lUpdateAction, xRec."Cost Object", "Cost Object");
    END;

    PROCEDURE CalculatePrognosisFields@1100525000();
    BEGIN
      "Prognosis End Result" := "Budget Amount" - "Total Cost" - "Amount incl. Surcharge";
      "Prognosis Total Cost" := "Amount incl. Surcharge" + "Total Cost";                              //20060810-JE //20090119 PS
    END;

    PROCEDURE CheckSurchargesCalculated@1100525001() : Boolean;
    VAR
      lvPrognosis@1100525000 : Record 11012034;
    BEGIN
      lvPrognosis.INIT;
      lvPrognosis.SETRANGE("Project No.", "Project No.");
      lvPrognosis.SETRANGE("Prognosis Date", "Prognosis Date");
      IF lvPrognosis.FINDFIRST THEN BEGIN
        IF lvPrognosis."Ovh. Surcharges Calculated" THEN
          IF NOT lvPrognosis."Altered After Calculation" THEN BEGIN
            lvPrognosis."Altered After Calculation" := TRUE;  //M21759
            lvPrognosis.MODIFY;                               //M21759
          END;
      END;
    END;

    PROCEDURE SetDeletControlOnProgPerElem@1100525002();
    BEGIN
      //**4PS, SR C011681 17-01-14
      DeleteControlOnProgPerElem := TRUE;
    END;

    PROCEDURE SetPreviousDateFilter@1100528000();
    VAR
      Prognosis@1100528500 : Record 11012034;
    BEGIN
      //C017374
      SETRANGE("Previous Date Filter",0D);

      IF Prognosis.GET("Project No.","Prognosis Date") THEN
        IF Prognosis.NEXT(-1) <> 0 THEN
          SETFILTER("Previous Date Filter",FORMAT(Prognosis."Prognosis Date"));
    END;

    BEGIN
    END.
  }
}

