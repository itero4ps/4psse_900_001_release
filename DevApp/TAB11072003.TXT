OBJECT Table 11072003 Job
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.45243,4PS9.00 (167),4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 11072003=md,
                TableData 11072005=rm,
                TableData 11012915=r;
    DataCaptionFields=No.,Description;
    OnInsert=VAR
               SummarySheetLineRec@1100525000 : Record 11012064;
               SiteMgtFrmSetup@1100525001 : Record 11125525;
               SymbrioSetup@1000 : Record 11127975;
             BEGIN
               JobsSetup.GET;
               IF "No." = '' THEN BEGIN
                 //**4PS.sn
                 IF "Small Project" THEN BEGIN

               //>> 4PSSE I054
               //    JobsSetup.TESTFIELD("Small Project Nos.");
               //    NoSeriesMgt.InitSeries(JobsSetup."Small Project Nos.",xRec."No. Series",0D,"No.","No. Series");

                   IF AltDefaultNoSerieCode = '' THEN BEGIN
                     JobsSetup.TESTFIELD("Small Project Nos.");
                     NoSeriesMgt.InitSeries(JobsSetup."Small Project Nos.",xRec."No. Series",0D,"No.","No. Series");
                   END ELSE BEGIN
                     NoSeriesMgt.InitSeries(AltDefaultNoSerieCode,xRec."No. Series",0D,"No.","No. Series");
                   END;
               //<<

                 END ELSE BEGIN
                   IF "Assembly Project" THEN BEGIN
               //>> 4PSSE I054
               //      JobsSetup.TESTFIELD("Assembly Project Nos.");
               //      NoSeriesMgt.InitSeries(JobsSetup."Assembly Project Nos.",xRec."No. Series",0D,"No.","No. Series");

                     IF AltDefaultNoSerieCode = '' THEN BEGIN
                       JobsSetup.TESTFIELD("Assembly Project Nos.");
                       NoSeriesMgt.InitSeries(JobsSetup."Assembly Project Nos.",xRec."No. Series",0D,"No.","No. Series");
                     END ELSE BEGIN
                       NoSeriesMgt.InitSeries(AltDefaultNoSerieCode,xRec."No. Series",0D,"No.","No. Series");
                     END;
               //<<

                   END ELSE BEGIN
               //>> 4PSSE I054
               //  //**4PS.en
               //      JobsSetup.TESTFIELD("Job Nos.");
               //      NoSeriesMgt.InitSeries(JobsSetup."Job Nos.",xRec."No. Series",0D,"No.","No. Series");
               //  //**4PS.sn

                     IF AltDefaultNoSerieCode = '' THEN BEGIN
                       JobsSetup.TESTFIELD("Job Nos.");
                       NoSeriesMgt.InitSeries(JobsSetup."Job Nos.",xRec."No. Series",0D,"No.","No. Series");
                     END ELSE BEGIN
                       NoSeriesMgt.InitSeries(AltDefaultNoSerieCode,xRec."No. Series",0D,"No.","No. Series");
                     END;

                   END;
                 END;
                 //**4PS.en
               END;

               "Project Type" := DetermineProjectTypeSeries(COMPANYNAME);  //**4PS.n

               IF GETFILTER("Bill-to Customer No.") <> '' THEN
                 IF GETRANGEMIN("Bill-to Customer No.") = GETRANGEMAX("Bill-to Customer No.") THEN
                   VALIDATE("Bill-to Customer No.",GETRANGEMIN("Bill-to Customer No."));

               //**4PS.so
               //IF NOT "Apply Usage Link" THEN
               //  VALIDATE("Apply Usage Link",JobsSetup."Apply Usage Link by Default");
               //IF "WIP Method" = '' THEN
               //  VALIDATE("WIP Method",JobsSetup."Default WIP Method");
               //IF "Job Posting Group" = '' THEN
               //  VALIDATE("Job Posting Group",JobsSetup."Default Job Posting Group");
               //VALIDATE("WIP Posting Method",JobsSetup."Default WIP Posting Method");
               //**4PS.eo

               //**4PS.sn
               "Creation Date" := TODAY;
               IF "Small Project" THEN BEGIN
                 "Creation Time" := TIME;
                 "Commision Date"  := TODAY;
               END;
               "Version Date" := TODAY;
               "Created by" := USERID;
               IF PurchSetup.GET THEN BEGIN
                 "VAT Indicator (Purchase)" := PurchSetup."VAT Indicator (Purchase)";
               END;

                "Progress Registry" := JobsSetup."Default Progress in";
               "Progress from Instal. Progress" := JobsSetup."Progress from Instal. Progress";
               "Element per Installment" := JobsSetup."Element per Installment";
               IF NOT "Small Project" THEN BEGIN
                 "Progress Method" := JobsSetup."Default Progress per";
                 "Prognosis per Element" := JobsSetup."Prognosis per Element";
               END ELSE BEGIN
                 "Progress Method" := "Progress Method"::"Budget Line";
               END;
               "Forecast Level" := JobsSetup."Forecast Level";
               "Prognosis Level" := JobsSetup."Default Prognosis Level";
               VALIDATE("Progress on base of Tender",JobsSetup."Default Progress on Tender");
               "Progress Registry (PTE)" := JobsSetup."Default Progress Reg. (PTE)";
               "Days Notify Buyer" := JobsSetup."Days Notify Buyer";
               "Days Repair Before" := JobsSetup."Days Repair Before";
               "Days Delayed Repair" := JobsSetup."Days Delayed Repair";
               "Days Notify Guarantee Fund" := JobsSetup."Days Notify Guarantee Fund";
               "Days End Service Period" := JobsSetup."Days End Service Period";
               "Budget Level for Options" := JobsSetup."Default Budget Level Options";
               "Preclosure Result" := JobsSetup."Default Preclosure Result";
               "Rental Unit Invoice by" := JobsSetup."Default Rental Unit Invoice by";
               Revision := JobsSetup.Revision;
               "Revision Rule" := JobsSetup."Default Revision Rule";
               "Reference Date Revision" := 0D ;
               "Posting Element Mandatory" := JobsSetup."Posting Element Mandatory";
               Deliver := JobsSetup.Deliver;
               IF (Deliver = Deliver::Location) THEN
                 "Ship To Location" := JobsSetup."Ship To Location";
               "Use Starting Date ProjectElem" := JobsSetup."Use Starting Date ProjectElem";
               "Fill Element with (KPD)" := JobsSetup."Fill Element with (KPD)";
               "Fill Cost Object with (KPD)" := JobsSetup."Fill Cost Object with (KPD)";

               //>>ITERO.PR
               IF JobsSetup."Default Project Status" >= 0 THEN
                 VALIDATE("Project Status",JobsSetup."Default Project Status");
               IF JobsSetup."Default Project Type" <> '' THEN BEGIN
                 IF ProjTypeRec.GET(JobsSetup."Default Project Type") THEN BEGIN
                   IF ProjTypeRec."Department Code" <> '' THEN
                     "Global Dimension 1 Code" := ProjTypeRec."Department Code";
                   "Project Type" := JobsSetup."Default Project Type";
                 END;
               END;
               //ITERO.PR

               IF "Global Dimension 1 Code" <> '' THEN BEGIN
                 SkipModify := TRUE;
                 VALIDATE("Global Dimension 1 Code");
                 SkipModify := FALSE;
                 xRec."Global Dimension 1 Code" := "Global Dimension 1 Code";
               END;
               "Main Project" := "No.";
               IF "Small Project" AND "Plant Job Order" AND ("Bill-to Customer No." <> '') THEN
                 InsertProjectPrincipal("Bill-to Customer No.");

               InventSetupRec.GET;
               IF InventSetupRec."Level Job Inventory Loc./Shelf" = InventSetupRec."Level Job Inventory Loc./Shelf"::Project THEN
                 "Job Inventory Location/Shelf" := InventSetupRec."Job Inventory Location/Shelf";
               IF InventSetupRec."Level Job Inventory Stock Rel."= InventSetupRec."Level Job Inventory Stock Rel."::Project THEN
                 "Job Inventory By Stock Release" := InventSetupRec."Job Inventory By Stock Release";

               IF SiteMgtFrmSetup.READPERMISSION THEN BEGIN
                 IF SiteMgtFrmSetup.GET THEN
                   "Autom. Get Project Inspections" := SiteMgtFrmSetup."Autom. Get Project Inspections";
               END;
               "Print Manday Register" := JobsSetup."Print Manday Register"; //#C023383.n
               //**4PS.en

               //**4PS Spoor.sn
               IF "UAR Task" = '' THEN BEGIN
                 IF UarHrsSetupRec.READPERMISSION THEN BEGIN
                   IF UarHrsSetupRec.GET THEN
                     "UAR Task" := UarHrsSetupRec."UAR Task Worked Hours";
                 END;
               END;
               //**4PS Spoor.en

               DimMgt.UpdateDefaultDim(
                 DATABASE::Job,"No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");
               InitWIPFields;

               "Creation Date" := TODAY;
               "Last Date Modified" := "Creation Date";


               //**4PS.sn
               IF SalesSetup.READPERMISSION THEN BEGIN
                 SalesSetup.GET;
                 "Calculate B Amounts based on" := SalesSetup."Calculate B Amounts based on";
               END;
               "Summary Sheet Project" := JobsSetup."Summary Sheet Project";
               IF ("Summary Sheet Project" <> '') THEN
                 SummarySheetLineRec.CopyTemplate2("Summary Sheet Project", "No.", '', '', '', '', '', '', '');
               "Summary Sheet Contract" := JobsSetup."Summary Sheet Contract";
               "Summary Sheet Option" := JobsSetup."Summary Sheet Option";
               //"Summary Sheet Buyer Option" := JobsSetup."Summary Sheet Buyer Option"; //kzwerver, 110809, n, #26039  //34128.o
               "Allow Precl. R./Prov. Loss" := JobsSetup."Allow Precl. R./Prov. Loss";
               "Provision Loss" := JobsSetup."Provision Loss";    //** Call 31157
               "SharePoint Status" := "SharePoint Status"::New;

               IF "Planning Base Line Date" = 0D THEN
                 "Planning Base Line Date" := 800101D;

               CreateFeatures;
               //**4PS.en

               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05

               ProjectSiteMgt.LogJob(1, Rec); //**4PS.n

               IF SymbrioSetup.READPERMISSION THEN
               //>>IME156
               IF ExportToSymbrio.JobIsReadyForExport(Rec)
                 THEN BEGIN
               //<<IME156
                 //>> IME104
                 JobToRecRef := Rec;
                 JobToRecRef.SETRECFILTER;
                 RecRef.GETTABLE(JobToRecRef);
                 //IME156 added "No."
                 SymbrioFunctions.AddToSymbrioExportQueue(DATABASE::Job,RecRef,"No.", '',"Project Status");
                 //<<

               END; //IME156

               "Time Last Modified" := TIME; // 4PSHM 140131
             END;

    OnModify=BEGIN
               //>> 160818 ITERO.AC RFC116 Moved logic to new separate function
               OnModify(xRec);

               // "Last Date Modified" := TODAY;
               // "Time Last Modified" := TIME; // 4PSHM 140131
               //
               // //**4PS.sn
               // "Modified by" := USERID;
               // IF "Version Date" <> xRec."Version Date" THEN BEGIN
               //  BudgetRec.RESET;
               //  BudgetRec.SETRANGE("Project No.","No.");
               //  BudgetRec.SETRANGE(Adjustment,'');
               //  BudgetRec.SETRANGE(Option,'');
               //  BudgetRec.SETRANGE("Extension Contract",'');
               //  BudgetRec.SETFILTER("Version Date",'<> %1',"Version Date");
               //  BudgetRec.MODIFYALL("Version Date","Version Date",TRUE);
               //
               //  BudgetSummarySheetRec.RESET;
               //  BudgetSummarySheetRec.SETRANGE("Project No.","No.");
               //  BudgetSummarySheetRec.SETRANGE(Option,'');
               //  BudgetSummarySheetRec.SETRANGE("Contract No.",'');
               //  BudgetSummarySheetRec.SETFILTER("Version Date",'<> %1',"Version Date");
               //  BudgetSummarySheetRec.MODIFYALL("Version Date","Version Date",TRUE);
               // END;
               // IF ("Starting Date" <> xRec."Starting Date") OR ("Ending Date" <> xRec."Ending Date") THEN
               //  UpdateProjectStartElement;
               // IF "Project Status" <> xRec."Project Status" THEN
               //  "Status Modification Date" := TODAY;
               // IF ("Technical Finished Date" <> 0D) AND ("Project Status" < "Project Status"::"Technical Finished") THEN
               //  "Technical Finished Date" := 0D;
               //
               // IF ("SharePoint Status" = "SharePoint Status"::Updated) AND
               //   (xRec."SharePoint Status" = "SharePoint Status"::Updated) THEN
               //  "SharePoint Status" := "SharePoint Status"::Modified;
               //
               // IF "Settlement Method" <> "Settlement Method"::"Cost Plus" THEN BEGIN
               //  ProjectPrincipal.SETRANGE("Project No.", "No.");
               //  ProjectPrincipal.SETFILTER("Estimated Amount", '<>%1', 0);
               //  ProjectPrincipal.MODIFYALL("Estimated Amount", 0);
               // END;
               // IF (NOT ("Project Status" IN ["Project Status"::Preparation, "Project Status"::Production])) AND
               //   (xRec."Project Status" IN ["Project Status"::Preparation, "Project Status"::Production])
               // THEN BEGIN
               //  ReqActCapByDayRec.SETRANGE("Project No.", "No.");
               //  ReqActCapByDayRec.SETFILTER(Date, '%1..', TODAY);
               //  ReqActCapByDayRec.DELETEALL;
               //  AssignActCapByDayRec.SETRANGE("Project No.", "No.");
               //  AssignActCapByDayRec.SETFILTER(Date, '%1..', TODAY);
               //  AssignActCapByDayRec.DELETEALL;
               // END;
               // //**4PS.en
               //
               // ProjectSiteMgt.LogJob(2, Rec); //**4PS.n
               //
               // IF SymbrioSetup.READPERMISSION THEN
               // //>>SYM020
               // // SYM036 <<
               // //IF ExportToSymbrio.JobIsReadyForExport(Rec) AND
               // //  (("Project Status" = "Project Status"::Preparation) OR ("Project Status" = "Project Status"::Production))
               // //  THEN
               // // SYM036 >>
               // //<<SYM020
               //  //>>130604 JOSV
               //  cuSymbrio.fnMarkJobForExportToSymbrio(Rec,xRec);
               //  //<<130604 JOSV
               //
               // //>>SYM020
               // // SYM036 <<
               // //IF ExportToSymbrio.JobIsReadyForExport(Rec) AND
               // //  (("Project Status" = "Project Status"::Preparation) OR ("Project Status" = "Project Status"::Production))
               // //  THEN
               // // SYM036 >>
               // //<<SYM020
               //  //>>130604 JOSV
               // cuSymbrio.fnMarkJobForExportToSymbrio(Rec,xRec);
               //  //<<130604 JOSV
             END;

    OnDelete=VAR
               CommentLine@1004 : Record 97;
               JobTask@1000 : Record 11072600;
               JobResPrice@1001 : Record 11020405;
               JobItemPrice@1002 : Record 11020406;
               JobGLAccPrice@1003 : Record 11020407;
               AdjustmentRec@11012000 : Record 11012003;
               ExtBudgetRec@11012001 : Record 11012004;
               ProjCostPlus@1100409000 : Record 11012019;
               ProjPrincipalRec@11012002 : Record 11012005;
               ProgressRec@11012003 : Record 11012036;
               ProjResponsRec@11012004 : Record 11012040;
               ProjAuthorityRec@1100485002 : Record 11020216;
               ProjElemRec@11012005 : Record 11012010;
               HouseModRec@11012006 : Record 11012501;
               OptMainGroupRec@1210190014 : Record 11012509;
               OptGroupRec@1210190015 : Record 11012504;
               OptSubGroupRec@1210190016 : Record 11012505;
               PlotNoRec@11012007 : Record 11012500;
               PlotInstallationRec@1210190005 : Record 11012968;
               OptionRec@11012008 : Record 11012502;
               OptCrossListRec@1210190018 : Record 11012515;
               OptCrossListLineRec@1210190017 : Record 11012516;
               ProjPurchActionRec@11012009 : Record 11012026;
               PrognRec@11012010 : Record 11012034;
               BudgetQuantRec@11012011 : Record 11012002;
               ProjLocRec@11012012 : Record 11012011;
               ProjCostObjCostContrRec@11012013 : Record 11012047;
               ProjContrCostTypeRec@11012014 : Record 11012046;
               ProjContrProjElemRec@11012015 : Record 11012048;
               ProjContrProjElemCostObjRec@11012016 : Record 11012050;
               AdvOrderRec@1000000000 : Record 11012055;
               TryOutRec@1210190004 : Record 11012761;
               ProcessControlHeadRec@1210190007 : Record 11012953;
               ProcessControlLineRec@1210190008 : Record 11012954;
               ProcessControlCommentRec@1210190006 : Record 11012955;
               lvProjAppointRec@1210190013 : Record 11012081;
               lvProjDevRec@1210190012 : Record 11012915;
               lvRentalUnitRec@1210190000 : Record 11012940;
               lvRentalPackageRec@1210190002 : Record 11012941;
               lvVendAssRec@1210190009 : Record 11012292;
               lvVendAssLineRec@1210190010 : Record 11012293;
               lvPreclosureResultRec@1210190011 : Record 11012093;
               lvTenderElemRec@1100485000 : Record 11012263;
               lvTenderElemPartRec@1100485001 : Record 11012264;
               lvTenderParRec@1100485003 : Record 11012072;
               lProjBudgetRateRec@1100485022 : Record 11020231;
               lProjCostObjectCostPriceRec@1100485021 : Record 11020365;
               lProjEmplCostPriceRec@1100485020 : Record 11020253;
               lProjEmplWageCCostPriceRec@1100485019 : Record 11020366;
               lProjTradeAssCostPriceRec@1100485018 : Record 11020361;
               lProjTradeAssWageCostPriceRec@1100485017 : Record 11020362;
               lvPreferenceLocation@1100525001 : Record 11020353;
               lvProjectPlanningActivity@1100525002 : Record 11012431;
               lvSiteMgtTextRec@1100525003 : Record 11125526;
               lvSiteMgtWrkHrsRec@1100525004 : Record 11125528;
               SiteMgtProjShift@1210190019 : Record 11125538;
               lvSiteMgtPlantRequestRec@1100525005 : Record 11125529;
               lvSiteMgtGetOrderRec@1100525006 : Record 11125531;
               lvSiteMgtProjInspecRec@1100525007 : Record 11125534;
               lvSiteMgtInspecRec@1100525008 : Record 11125535;
               lvSiteMgtInspecTextRec@1100525009 : Record 11125536;
               ProjectForecastHeader@1100525010 : Record 11020630;
               ProjectForecastLine@1100525011 : Record 11020631;
               ProjFeatureType@1210190001 : Record 11012753;
               ProjectBuildingRelation@1100528600 : Record 11071918;
               ProjectRawMaterialHeader@1100528500 : Record 11126235;
               GenText@1100525000 : Record 11020260;
               ProjInventoryEntry@1100525014 : Record 11012670;
               ProjInventoryDelivery@1100525013 : Record 11012671;
               WorkOrder@1100525012 : Record 11229279;
               SymbrioSetup@1005 : Record 11127975;
             BEGIN
               //**4PS.so
               //MoveEntries.MoveJobEntries(Rec);
               //**4PS.eo
               //**4PS.sn
               IF "Project Status" < "Project Status"::Finished THEN
                 ERROR(Text11012012);
               IF "Project Status" <> "Project Status"::Archived THEN
                 IF NOT CONFIRM(Text11012013,FALSE) THEN
                   ERROR(Text11012014);
               MoveEntries.RemoveJobEntries(Rec);
               //**4PS.en

               JobTask.SETCURRENTKEY("Job No.");
               JobTask.SETRANGE("Job No.","No.");
               JobTask.DELETEALL(TRUE);

               JobResPrice.SETRANGE("Job No.","No.");
               JobResPrice.DELETEALL;

               JobItemPrice.SETRANGE("Job No.","No.");
               JobItemPrice.DELETEALL;

               JobGLAccPrice.SETRANGE("Job No.","No.");
               JobGLAccPrice.DELETEALL;

               CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Job);
               CommentLine.SETRANGE("No.","No.");
               CommentLine.DELETEALL;

               //**4PS.sn
               BudgetSummarySheetRec.RESET;
               BudgetSummarySheetRec.SETRANGE("Project No.","No.");
               BudgetSummarySheetRec.DELETEALL;

               BudgetRec.RESET;
               BudgetRec.SETRANGE("Project No.","No.");
               IF BudgetRec.FINDSET(TRUE, FALSE) THEN BEGIN
                 REPEAT
                   BudgetRec.SetDeleteCompleteProject;
                   BudgetRec.DELETE(TRUE);
                 UNTIL BudgetRec.NEXT = 0;
               END;

               BudgetQuantRec.SETRANGE("Project No.","No.");
               BudgetQuantRec.DELETEALL(TRUE);

               AdjustmentRec.SETRANGE("Project No.","No.");
               IF AdjustmentRec.FINDSET(TRUE, FALSE) THEN BEGIN
                 REPEAT
                   AdjustmentRec.SetDeleteCompleteProject;
                   AdjustmentRec.DELETE(TRUE);
                 UNTIL AdjustmentRec.NEXT = 0;
               END;

               ExtBudgetRec.SETRANGE("Project No.","No.");
               IF ExtBudgetRec.FINDSET(TRUE, FALSE) THEN BEGIN
                 REPEAT
                   ExtBudgetRec.SetDeleteCompleteProject;
                   ExtBudgetRec.DELETE(TRUE);
                 UNTIL ExtBudgetRec.NEXT = 0;
               END;

               ProjPurchActionRec.SETRANGE("Project No.","No.");
               ProjPurchActionRec.DELETEALL(TRUE);

               PrognRec.SETRANGE("Project No.","No.");
               IF PrognRec.FINDSET (TRUE,FALSE) THEN BEGIN
                 REPEAT
                   PrognRec.SetDeleteCompleteProject();
                   PrognRec.DELETE(TRUE);
                 UNTIL PrognRec.NEXT = 0;
               END;

               ProgressRec.SETRANGE("Project No.","No.");
               ProgressRec.DELETEALL(TRUE);

               ProjContrCostTypeRec.SETRANGE("Project No.","No.");
               ProjContrCostTypeRec.DELETEALL;

               ProjCostObjCostContrRec.SETRANGE("Project No.","No.");
               ProjCostObjCostContrRec.DELETEALL;

               ProjElemRec.SETRANGE("Project No.","No.");
               IF ProjElemRec.FINDSET(TRUE,FALSE) THEN BEGIN
                 REPEAT
                   ProjElemRec.SetDeleteControlOnElement();
                   ProjElemRec.DELETE(TRUE);
                 UNTIL ProjElemRec.NEXT = 0;
               END;

               ProjContrProjElemCostObjRec.SETRANGE("Project No.","No.");
               ProjContrProjElemCostObjRec.DELETEALL;

               //*C001924.sn  Cost Plus must be deleted before the Project Principal is deleted
               ProjCostPlus.SETRANGE("Project No.","No.");
               IF ProjCostPlus.FINDSET(TRUE, FALSE) THEN BEGIN
                 REPEAT
                   ProjCostPlus.SetDeleteCompleteProject();
                   ProjCostPlus.DELETE(TRUE);
                 UNTIL ProjCostPlus.NEXT = 0;
               END;
               //*C001924.en

               ProjPrincipalRec.SETRANGE("Project No.","No.");
               IF ProjPrincipalRec.FINDSET(TRUE, FALSE) THEN BEGIN
                 REPEAT
                   ProjPrincipalRec.SetDeleteCompleteProject;
                   ProjPrincipalRec.DELETE(TRUE);
                 UNTIL ProjPrincipalRec.NEXT = 0;
               END;

               ProjResponsRec.SETRANGE("Project No.","No.");
               ProjResponsRec.SetGlobalDelete;
               IF ProjResponsRec.FINDSET(TRUE, FALSE) THEN BEGIN
                 REPEAT
                   ProjResponsRec.DELETE(TRUE);
                 UNTIL ProjResponsRec.NEXT = 0;
               END;

               ProjAuthorityRec.SETRANGE("Project No.","No.");
               ProjAuthorityRec.SetGlobalDelete;
               IF ProjAuthorityRec.FINDSET(TRUE, FALSE) THEN BEGIN
                 REPEAT
                   ProjAuthorityRec.DELETE(TRUE);
                 UNTIL ProjAuthorityRec.NEXT = 0;
               END;

               ProjElemRec.SETRANGE("Project No.","No.");
               ProjElemRec.DELETEALL(TRUE);

               OptCrossListRec.SETRANGE("Project No.", "No.");
               OptCrossListRec.DELETEALL;

               OptCrossListLineRec.SETRANGE("Project No.", "No.");
               OptCrossListLineRec.DELETEALL;

               OptionRec.SETRANGE("Project No.","No.");
               IF OptionRec.FINDSET(TRUE,FALSE) THEN BEGIN
                 OptionRec.SetSkipCheckDelete;
                 REPEAT
                   OptionRec.DELETE(TRUE);
                 UNTIL OptionRec.NEXT = 0;
               END;

               PlotNoRec.SETRANGE("Project No.","No.");
               IF PlotNoRec.FINDSET(TRUE, FALSE) THEN BEGIN
                 REPEAT
                   PlotNoRec.SetDeleteCompleteProject();
                   PlotNoRec.DELETE(TRUE);
                 UNTIL PlotNoRec.NEXT = 0;
               END;

               HouseModRec.SETRANGE("Project No.","No.");
               HouseModRec.DELETEALL(TRUE);

               OptMainGroupRec.SETRANGE("Project No.","No.");
               OptMainGroupRec.DELETEALL(TRUE);

               OptGroupRec.SETRANGE("Project No.","No.");
               OptGroupRec.DELETEALL(TRUE);

               OptSubGroupRec.SETRANGE("Project No.","No.");
               OptSubGroupRec.DELETEALL(TRUE);

               PlotInstallationRec.SETRANGE("Project No.","No.");
               PlotInstallationRec.DELETEALL(TRUE);

               ProjLocRec.SETRANGE("Project No.","No.");
               IF ProjLocRec.FINDSET(TRUE,FALSE) THEN BEGIN
                 REPEAT
                   ProjLocRec.SetDeleteCompleteProject();
                   ProjLocRec.DELETE(TRUE);
                 UNTIL ProjLocRec.NEXT = 0;
               END;

               AdvOrderRec.SETRANGE("Project No.","No.");
               AdvOrderRec.DELETEALL(TRUE);

               lvProjAppointRec.SETRANGE("Project No.", "No.");
               lvProjAppointRec.DELETEALL(TRUE);

               lvPreclosureResultRec.SETRANGE("Project No.","No.");
               lvPreclosureResultRec.DELETEALL(TRUE);

               IF TryOutRec.READPERMISSION THEN BEGIN
                 TryOutRec.SETCURRENTKEY("Project No.");
                 TryOutRec.SETRANGE("Project No.", "No.");
                 IF TryOutRec.FINDSET(TRUE, FALSE) THEN BEGIN
                   REPEAT
                     IF (TryOutRec."Estimate No." = '') AND
                        (TryOutRec."Service Location No." = '') AND
                        (TryOutRec."Service Contract No." = '') AND
                        (TryOutRec."Service Order No." = '') THEN BEGIN
                       TryOutRec.DELETE(TRUE);
                     END ELSE BEGIN
                       TryOutRec."Project No." := '';
                       TryOutRec.MODIFY(TRUE);
                     END;
                   UNTIL TryOutRec.NEXT = 0;
                 END;
               END;

               ProcessControlCommentRec.SETRANGE("Project No.","No.");
               ProcessControlCommentRec.DELETEALL;

               ProcessControlLineRec.SETRANGE("Project No.","No.");
               ProcessControlLineRec.DELETEALL;

               ProcessControlHeadRec.SETRANGE("Project No.","No.");
               ProcessControlHeadRec.DELETEALL;

               lvProjDevRec.SETRANGE("Project No.", "No.");
               lvProjDevRec.DELETEALL(TRUE);

               lvRentalPackageRec.SETRANGE("Project No.", "No.");  //DP00617.n
               lvRentalPackageRec.DELETEALL;

               lvRentalUnitRec.SETRANGE("Project No.", "No.");
               lvRentalUnitRec.DELETEALL(TRUE);  //DP00617.n

               //lvRentalPackageRec.SETRANGE("Project No.", "No.");  //DP00617.o
               //lvRentalPackageRec.DELETEALL;

               //lvRentalRateLineRec.SETRANGE("Project No.", "No.");  //DP00617.o
               //lvRentalRateLineRec.DELETEALL;

               lvVendAssLineRec.SETRANGE("Project No.", "No.");
               lvVendAssLineRec.DELETEALL;

               lvVendAssRec.SETRANGE("Project No.", "No.");
               lvVendAssRec.DELETEALL;

               lvTenderElemRec.SETRANGE("Project No.", "No.");
               lvTenderElemRec.DELETEALL;

               lvTenderElemPartRec.SETRANGE("Project No.", "No.");
               lvTenderElemPartRec.DELETEALL;

               lvTenderParRec.SETRANGE(Type, lvTenderParRec.Type::Job);
               lvTenderParRec.SETRANGE("No.", "No.");
               lvTenderParRec.DELETEALL;

               lProjBudgetRateRec.SETRANGE("Project No.", "No.");
               lProjBudgetRateRec.DELETEALL;

               lProjCostObjectCostPriceRec.SETRANGE("Project No.", "No.");
               lProjCostObjectCostPriceRec.DELETEALL;

               lProjEmplCostPriceRec.SETRANGE("Project No.", "No.");
               lProjEmplCostPriceRec.DELETEALL;

               lProjEmplWageCCostPriceRec.SETRANGE("Project No.", "No.");
               lProjEmplWageCCostPriceRec.DELETEALL;

               lProjTradeAssCostPriceRec.SETRANGE("Project No.", "No.");
               lProjTradeAssCostPriceRec.DELETEALL;

               lProjTradeAssWageCostPriceRec.SETRANGE("Project No.", "No.");
               lProjTradeAssWageCostPriceRec.DELETEALL;

               lvPreferenceLocation.SETRANGE(Type,lvPreferenceLocation.Type::Job);
               lvPreferenceLocation.SETRANGE("No.","No.");
               lvPreferenceLocation.DELETEALL(TRUE);

               lvProjectPlanningActivity.SETCURRENTKEY("Project No.");
               lvProjectPlanningActivity.SETRANGE("Project No.", "No.");
               lvProjectPlanningActivity.DELETEALL(TRUE);

               lvSiteMgtTextRec.SETRANGE("Project No.", "No.");
               lvSiteMgtTextRec.DELETEALL;

               lvSiteMgtWrkHrsRec.SETRANGE("Project No.", "No.");
               lvSiteMgtWrkHrsRec.DELETEALL;

               SiteMgtProjShift.SETRANGE("Project No.", "No.");  //DP00033
               SiteMgtProjShift.DELETEALL;

               lvSiteMgtPlantRequestRec.SETCURRENTKEY("Project No.");
               lvSiteMgtPlantRequestRec.SETRANGE("Project No.", "No.");
               lvSiteMgtPlantRequestRec.DELETEALL(TRUE);

               lvSiteMgtGetOrderRec.SETCURRENTKEY("Project No.");
               lvSiteMgtGetOrderRec.SETRANGE("Project No.", "No.");
               lvSiteMgtGetOrderRec.DELETEALL(TRUE);

               lvSiteMgtProjInspecRec.SETRANGE("Project No.", "No.");
               lvSiteMgtProjInspecRec.DELETEALL;

               lvSiteMgtInspecRec.SETRANGE("Project No.", "No.");
               lvSiteMgtInspecRec.DELETEALL;

               lvSiteMgtInspecTextRec.SETRANGE("Project No.", "No.");
               lvSiteMgtInspecTextRec.DELETEALL;
               ProjectForecastLine.SetSkipFixedCheck;
               ProjectForecastLine.SETRANGE("Project No.", "No.");
               IF ProjectForecastLine.FINDSET THEN
                 REPEAT
                   //Repeat is needed. DELETEALL ignores global setting SkipFixedCheck
                   ProjectForecastLine.DELETE(TRUE);
                 UNTIL ProjectForecastLine.NEXT = 0;

               ProjectForecastHeader.SETRANGE("Project No.", "No.");
               ProjectForecastHeader.DELETEALL(TRUE);

               ProjFeatureType.SETRANGE("Relation Type", ProjFeatureType."Relation Type"::Job);
               ProjFeatureType.SETRANGE(Code , "No.");
               ProjFeatureType.DELETEALL;

               ProjectBuildingRelation.SETRANGE("Project No.", "No.");
               IF NOT ProjectBuildingRelation.ISEMPTY THEN
                 ProjectBuildingRelation.DELETEALL(TRUE);

               //DP00103
               ProjectRawMaterialHeader.SETRANGE("Project No.", "No.");
               IF NOT ProjectRawMaterialHeader.ISEMPTY THEN
                 ProjectRawMaterialHeader.DELETEALL(TRUE);

               GenText.SETRANGE(Table, GenText.Table::Job);
               GenText.SETRANGE(Code, "No.");
               GenText.DELETEALL;

               //db.sn, 18-06-14: C012780
               ProjInventoryEntry.SETCURRENTKEY("Project No.");
               ProjInventoryEntry.SETRANGE("Project No.", "No.");
               ProjInventoryEntry.DELETEALL(TRUE);

               ProjInventoryDelivery.SETRANGE("Project No.", "No.");
               ProjInventoryDelivery.DELETEALL(TRUE);
               //db.en, 18-06-14: C012780

               //DP00465
               WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
               WorkOrder.SETRANGE("Source Company", COMPANYNAME);
               WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::Project);
               WorkOrder.SETRANGE("Source No.", "No.");
               WorkOrder.SetOnDeleteSource();
               WorkOrder.DELETEALL(TRUE);

               //**4PS.en

               DimMgt.DeleteDefaultDim(DATABASE::Job,"No.");

               ProjectSiteMgt.LogJob(3, Rec); //**4PS.n

               IF SymbrioSetup.READPERMISSION THEN
                 //IME156
               // SYM036 <<
               SymbrioFunctions.fnDeleteJob(Rec);
               //ExportToSymbrio.DeleteJobFromQueue(Rec);
               // SYM036 >>
             END;

    OnRename=VAR
               DocumentLinkMgt@1100525000 : Codeunit 11012401;
               RecRef@1100525001 : RecordRef;
               OldRID@1100525002 : RecordID;
               NewRID@1100525003 : RecordID;
               USSetup@1100285100 : Record 91;
             BEGIN
               //RFC-062
               IF xRec."No." <> '' THEN BEGIN
                 IF USSetup.GET(USERID) THEN BEGIN
                   IF NOT USSetup."Project Authoriz. Active" THEN BEGIN
                     "No." := xRec."No.";
                     ERROR(Text11128002);
                   END;
                 END ELSE BEGIN
                   ERROR(Text11128002);
                 END;
               END;
               //RFC-062
               UpdateJobNoInReservationEntries;
               "Last Date Modified" := TODAY;
               // Get the old record (xRec)
               RecRef.GETTABLE(xRec);
               OldRID := RecRef.RECORDID();

               // Get the new record (Rec)
               RecRef.GETTABLE(Rec);
               NewRID := RecRef.RECORDID();

               DocumentLinkMgt.HandleRenameDocumentLink(COMPANYNAME, OldRID, NewRID)
             END;

    CaptionML=ENU=Project;
    LookupPageID=Page11072004;
    DrillDownPageID=Page11072004;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Description;
                                                   OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  JobsSetup.GET;
                                                                  //**4PS.sn
                                                                  //kzwerver.c, 010311, #25312
                                                                  //  rewritten to case statement
                                                                  CASE TRUE OF
                                                                    "Small Project":
                                                                      NoSeriesMgt.TestManual(JobsSetup."Small Project Nos.");
                                                                    "Assembly Project":
                                                                      NoSeriesMgt.TestManual(JobsSetup."Assembly Project Nos.");
                                                                    ELSE
                                                                    //**4PS.en
                                                                      NoSeriesMgt.TestManual(JobsSetup."Job Nos.");
                                                                  END;
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Search Description  ;Code50        ;CaptionML=ENU=Search Description }
    { 3   ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                IF ("Search Description" = UPPERCASE(xRec.Description)) OR ("Search Description" = '') THEN
                                                                  "Search Description" := Description;
                                                              END;

                                                   CaptionML=ENU=Description }
    { 4   ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 5   ;   ;Bill-to Customer No.;Code20        ;TableRelation=IF (Small Project=CONST(No)) "Project Principal".Principal WHERE (Project No.=FIELD(No.))
                                                                 ELSE IF (Small Project=CONST(Yes)) Customer;
                                                   OnValidate=VAR
                                                                Customer@1100528700 : Record 18;
                                                                lvRotInformation@1100285500 : Record 11128101;
                                                                lvDefaultPriceList@1100285100 : Record 11128110;
                                                              BEGIN
                                                                //**4PS.so
                                                                //IF ("Bill-to Customer No." = '') OR ("Bill-to Customer No." <> xRec."Bill-to Customer No.") THEN
                                                                //  IF JobLedgEntryExist OR JobPlanningLineExist THEN
                                                                //    ERROR(Text000,FIELDCAPTION("Bill-to Customer No."),TABLECAPTION);
                                                                //UpdateCust;
                                                                //**4PS.eo
                                                                //**4PS.sn
                                                                IF "Bill-to Customer No." <> xRec."Bill-to Customer No." THEN BEGIN
                                                                  IF "Bill-to Customer No." <> '' THEN BEGIN
                                                                    Customer.GET("Bill-to Customer No.");
                                                                    IF Customer.Blocked IN [Customer.Blocked::Invoice, Customer.Blocked::All] THEN
                                                                      ERROR(Text11012050, FIELDCAPTION("Bill-to Customer No."), "Bill-to Customer No.");
                                                                  END;
                                                                  CopyCustDataSkipped := FALSE;  //*C-028192.n
                                                                  IF ProjAddressRec.GET("Bill-to Customer No.","Project Address Code") THEN BEGIN
                                                                    VALIDATE("Project Address Code");
                                                                  END ELSE BEGIN
                                                                    "Project Address Code" := '';
                                                                    CopyBillToAddress;
                                                                  END;
                                                                  ValidateBillToCustomerData(FALSE, CopyCustDataSkipped); //*C-028192.c Can already be done in validate "Project Address Code"
                                                                  UpdatePrincipalFields;
                                                                  CopyCustomerNotGlobalDims();  //*24651.n
                                                                END;
                                                                CALCFIELDS("Principal Name", "Contract Amount");
                                                                "Invoice Contact Person" := '';
                                                                //"Principal Contact Person" := ''; //#C026734.o
                                                                UpdatePrincipalContactFields;
                                                                CALCFIELDS("Invoice Contact Person Name", "Principal Contact Person Name", Prospect);
                                                                //**4PS.en

                                                                IF Customer.GET("Bill-to Customer No.") THEN BEGIN
                                                                  "Price List Code" := Customer."Price List Code"; // LAHE 130116
                                                                //>> 161011 ITERO.AC RAD043 Get Discount term from customer
                                                                  "Sales Discount Term Group 1" := Customer."Sales Discount Term Group";
                                                                  "Sales Discount Term Percent" := Customer."Sales Discount Term Percent";
                                                                END;
                                                                //<< 161011 ITERO.AC RAD043

                                                                // RFC-085 <<
                                                                IF JobsSetup."Default pricelist" THEN BEGIN
                                                                  IF ("Price List Code" = '') AND lvDefaultPriceList.GET("Global Dimension 1 Code") THEN
                                                                    "Price List Code" := lvDefaultPriceList."Default Pricelist";
                                                                END;
                                                                // RFC-085 >>

                                                                // 140410 Updates ROT table to add project principal. <<
                                                                lvRotInformation.SETRANGE(Type, lvRotInformation.Type::Project);
                                                                lvRotInformation.SETRANGE("Document No.", "No.");
                                                                IF (lvRotInformation.FINDSET(TRUE)) THEN REPEAT
                                                                   IF (lvRotInformation."Project Principle" = '') THEN BEGIN
                                                                      lvRotInformation."Project Principle" := "Bill-to Customer No.";
                                                                      lvRotInformation.MODIFY();
                                                                   END;
                                                                UNTIL lvRotInformation.NEXT = 0;
                                                                // 140410 >>
                                                              END;

                                                   CaptionML=ENU=Principal }
    { 12  ;   ;Creation Date       ;Date          ;CaptionML=ENU=Creation Date;
                                                   Editable=No }
    { 13  ;   ;Starting Date       ;Date          ;OnValidate=VAR
                                                                ProjectPlanningActivity@1100525000 : Record 11012431;
                                                                JobsSetup@1100528400 : Record 315;
                                                                ProjectTimeTable@1100528401 : Record 11020684;
                                                                StartingDateTime@1100528403 : DateTime;
                                                              BEGIN
                                                                CheckDate;
                                                                //**4PS.sn
                                                                ProjectPlanningActivity.SETCURRENTKEY("Project No.");
                                                                ProjectPlanningActivity.SETRANGE("Project No.", "No.");

                                                                IF NOT ProjectPlanningActivity.ISEMPTY THEN BEGIN
                                                                  JobsSetup.GET;
                                                                  JobsSetup.TESTFIELD("Project Time Table");
                                                                  ProjectTimeTable.GET(JobsSetup."Project Time Table");

                                                                  ProjectPlanningActivity.MODIFYALL("Constraint Type", ProjectPlanningActivity."Constraint Type"::"Start No Earlier Than");
                                                                  StartingDateTime := CREATEDATETIME("Starting Date", ProjectTimeTable.GetWorkFrom("Starting Date"));
                                                                  ProjectPlanningActivity.MODIFYALL("Constraint Date", StartingDateTime);
                                                                END;

                                                                "Modified after Scheduling" := TRUE;

                                                                IF xRec."Starting Date" <> "Starting Date" THEN
                                                                  ShiftWorkOrders(xRec."Starting Date", "Starting Date");
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Starting Date }
    { 14  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                CheckDate;
                                                              END;

                                                   CaptionML=ENU=Ending Date }
    { 19  ;   ;Status              ;Option        ;InitValue=Order;
                                                   OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 11020401;
                                                                SymbrioSetup@1001 : Record 11127975;
                                                              BEGIN
                                                                IF xRec.Status <> Status THEN BEGIN
                                                                  IF Status = Status::Completed THEN BEGIN
                                                                    VALIDATE(Complete,TRUE);
                                                                    IF SymbrioSetup.READPERMISSION THEN
                                                                      ExportToSymbrio.DeleteJobFromQueue(Rec);  //IME156
                                                                  END;
                                                                  IF xRec.Status = xRec.Status::Completed THEN BEGIN
                                                                    IF DIALOG.CONFIRM(Text004) THEN
                                                                      VALIDATE(Complete,FALSE)
                                                                    ELSE
                                                                      Status := xRec.Status;
                                                                  END;
                                                                  JobPlanningLine.SETCURRENTKEY("Job No.");
                                                                  JobPlanningLine.SETRANGE("Job No.","No.");
                                                                  JobPlanningLine.MODIFYALL(Status,Status);
                                                                  MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Planning,Quote,Order,Completed;
                                                   OptionString=Planning,Quote,Order,Completed }
    { 20  ;   ;Person Responsible  ;Code20        ;TableRelation=Resource WHERE (Type=CONST(Person));
                                                   CaptionML=ENU=Person Responsible }
    { 21  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=VAR
                                                                lvDefaultPriceList@1100285100 : Record 11128110;
                                                              BEGIN
                                                                CheckProjectAuthorization(FIELDCAPTION("Global Dimension 1 Code"));

                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                                UpdatePrefLocations; //**4PS.n

                                                                // RFC-085 <<
                                                                IF JobsSetup."Default pricelist" THEN BEGIN
                                                                  IF ("Price List Code" = '') AND lvDefaultPriceList.GET("Global Dimension 1 Code") THEN
                                                                    "Price List Code" := lvDefaultPriceList."Default Pricelist";
                                                                END;
                                                                // RFC-085 >>
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 22  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 23  ;   ;Job Posting Group   ;Code10        ;TableRelation="Job Posting Group";
                                                   CaptionML=ENU=Project Posting Group }
    { 24  ;   ;Blocked             ;Option        ;CaptionML=ENU=Blocked;
                                                   OptionCaptionML=ENU=" ,Posting,All";
                                                   OptionString=[ ,Posting,All] }
    { 29  ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=No }
    { 30  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Job),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 31  ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=ENU=Customer Disc. Group }
    { 32  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=ENU=Customer Price Group }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 49  ;No ;Scheduled Res. Qty. ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Planning Line"."Quantity (Base)" WHERE (Job No.=FIELD(No.),
                                                                                                                Schedule Line=CONST(Yes),
                                                                                                                Type=CONST(Resource),
                                                                                                                No.=FIELD(Resource Filter),
                                                                                                                Planning Date=FIELD(Planning Date Filter)));
                                                   CaptionML=ENU=Scheduled Res. Qty.;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 50  ;No ;Resource Filter     ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Resource;
                                                   CaptionML=ENU=Resource Filter }
    { 51  ;No ;Posting Date Filter ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Posting Date Filter }
    { 55  ;No ;Resource Gr. Filter ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Resource Group";
                                                   CaptionML=ENU=Resource Gr. Filter }
    { 56  ;No ;Scheduled Res. Gr. Qty.;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Planning Line"."Quantity (Base)" WHERE (Job No.=FIELD(No.),
                                                                                                                Schedule Line=CONST(Yes),
                                                                                                                Type=CONST(Resource),
                                                                                                                Resource Group No.=FIELD(Resource Gr. Filter),
                                                                                                                Planning Date=FIELD(Planning Date Filter)));
                                                   CaptionML=ENU=Scheduled Res. Gr. Qty.;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 57  ;   ;Picture             ;BLOB          ;CaptionML=ENU=Picture;
                                                   SubType=Bitmap }
    { 58  ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                IF "Small Project" AND (Name <> xRec.Name) THEN
                                                                  UpdateWorkAddress(0,Name);
                                                              END;

                                                   CaptionML=ENU=Name }
    { 59  ;   ;Address             ;Text50        ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF "Small Project" AND (Address <> xRec.Address) THEN
                                                                  UpdateWorkAddress(2,Address);
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Address }
    { 60  ;   ;Address 2           ;Text50        ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF "Small Project" AND ("Address 2" <> xRec."Address 2") THEN
                                                                  UpdateWorkAddress(3,Address);
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Address 2 }
    { 61  ;   ;City                ;Text50        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                //**4PS.so
                                                                //PostCode.ValidateCity(
                                                                //  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                //**4PS.eo
                                                                //**4PS.sn
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                IF "Small Project" AND (City <> xRec.City) THEN
                                                                  UpdateWorkAddress(5,City);
                                                                //**4PS.en
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City }
    { 63  ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 64  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                //**4PS.so
                                                                //PostCode.ValidatePostCode(
                                                                //  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                //**4PS.sn
                                                                PostCode.ValidatePostCode(City,"Post Code",County, "Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);

                                                                IF "Small Project" AND ("Post Code" <> xRec."Post Code") THEN
                                                                  UpdateWorkAddress(4,"Post Code");
                                                                //**4PS.en
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code }
    { 66  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 67  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF "Small Project" AND ("Country/Region Code" <> xRec."Country/Region Code") THEN
                                                                  UpdateWorkAddress(17,"Country/Region Code");
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Country/Region Code;
                                                   Editable=Yes }
    { 68  ;   ;Name 2              ;Text50        ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF "Small Project" AND ("Name 2" <> xRec."Name 2") THEN
                                                                  UpdateWorkAddress(1,"Name 2");
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Name 2 }
    { 117 ;No ;Reserve             ;Option        ;AccessByPermission=TableData 27=R;
                                                   CaptionML=ENU=Reserve;
                                                   OptionCaptionML=ENU=Never,Optional,Always;
                                                   OptionString=Never,Optional,Always }
    { 1000;No ;WIP Method          ;Code20        ;TableRelation="Job WIP Method".Code WHERE (Valid=CONST(Yes));
                                                   OnValidate=VAR
                                                                JobTask@1000 : Record 11072600;
                                                                JobWIPMethod@1001 : Record 1006;
                                                              BEGIN
                                                                IF "WIP Posting Method" = "WIP Posting Method"::"Per Job Ledger Entry" THEN BEGIN
                                                                  JobWIPMethod.GET("WIP Method");
                                                                  IF NOT JobWIPMethod."WIP Cost" THEN
                                                                    ERROR(Text017,FIELDCAPTION("WIP Posting Method"),FIELDCAPTION("WIP Method"),JobWIPMethod.FIELDCAPTION("WIP Cost"));
                                                                  IF NOT JobWIPMethod."WIP Sales" THEN
                                                                    ERROR(Text017,FIELDCAPTION("WIP Posting Method"),FIELDCAPTION("WIP Method"),JobWIPMethod.FIELDCAPTION("WIP Sales"));
                                                                END;

                                                                JobTask.SETRANGE("Job No.","No.");
                                                                JobTask.SETRANGE("WIP-Total",JobTask."WIP-Total"::Total);
                                                                IF JobTask.FINDFIRST THEN
                                                                  IF CONFIRM(Text014,TRUE,JobTask.FIELDCAPTION("WIP Method"),JobTask.TABLECAPTION,JobTask."WIP-Total") THEN
                                                                    JobTask.MODIFYALL("WIP Method","WIP Method",TRUE);
                                                              END;

                                                   CaptionML=ENU=WIP Method }
    { 1001;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF "Currency Code" <> xRec."Currency Code" THEN
                                                                  IF NOT JobLedgEntryExist THEN BEGIN
                                                                    CurrencyUpdatePlanningLines;
                                                                    CurrencyUpdatePurchLines;
                                                                  END ELSE
                                                                    ERROR(Text000,FIELDCAPTION("Currency Code"),TABLECAPTION);
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 1002;No ;Bill-to Contact No. ;Code20        ;OnValidate=BEGIN
                                                                IF ("Bill-to Contact No." <> xRec."Bill-to Contact No.") AND
                                                                   (xRec."Bill-to Contact No." <> '')
                                                                THEN
                                                                  IF ("Bill-to Contact No." = '') AND ("Bill-to Customer No." = '') THEN BEGIN
                                                                    INIT;
                                                                    "No. Series" := xRec."No. Series";
                                                                    VALIDATE(Description,xRec.Description);
                                                                  END;

                                                                IF ("Bill-to Customer No." <> '') AND ("Bill-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Bill-to Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Bill-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text005,Cont."No.",Cont.Name,"Bill-to Customer No.");
                                                                END;
                                                                UpdateBillToCust("Bill-to Contact No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF ("Bill-to Customer No." <> '') AND Cont.GET("Bill-to Contact No.") THEN
                                                                Cont.SETRANGE("Company No.",Cont."Company No.")
                                                              ELSE
                                                                IF Cust.GET("Bill-to Customer No.") THEN BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Bill-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.");
                                                                END ELSE
                                                                  Cont.SETFILTER("Company No.",'<>''''');

                                                              IF "Bill-to Contact No." <> '' THEN
                                                                IF Cont.GET("Bill-to Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Bill-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   AccessByPermission=TableData 5050=R;
                                                   CaptionML=ENU=Bill-to Contact No. }
    { 1003;   ;Contact             ;Text50        ;CaptionML=ENU=Contact }
    { 1004;No ;Planning Date Filter;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Planning Date Filter }
    { 1005;No ;Total WIP Cost Amount;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                              Job Complete=CONST(No),
                                                                                                              Type=FILTER(Accrued Costs|Applied Costs|Recognized Costs)));
                                                   CaptionML=ENU=Total WIP Cost Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1006;No ;Total WIP Cost G/L Amount;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                  Reversed=CONST(No),
                                                                                                                  Job Complete=CONST(No),
                                                                                                                  Type=FILTER(Accrued Costs|Applied Costs|Recognized Costs)));
                                                   CaptionML=ENU=Total WIP Cost G/L Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1007;No ;WIP Entries Exist   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Job WIP Entry" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=ENU=WIP Entries Exist }
    { 1008;No ;WIP Posting Date    ;Date          ;CaptionML=ENU=WIP Posting Date;
                                                   Editable=No }
    { 1009;No ;WIP G/L Posting Date;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Min("Job WIP G/L Entry"."WIP Posting Date" WHERE (Reversed=CONST(No),
                                                                                                                 Job No.=FIELD(No.)));
                                                   CaptionML=ENU=WIP G/L Posting Date;
                                                   Editable=No }
    { 1010;   ;Posted WIP Method Used;Option      ;CaptionML=ENU=Posted WIP Method Used;
                                                   OptionCaptionML=ENU=" ,Cost Value,Sales Value,Cost of Sales,Percentage of Completion,Completed Contract";
                                                   OptionString=[ ,Cost Value,Sales Value,Cost of Sales,Percentage of Completion,Completed Contract];
                                                   Editable=No }
    { 1011;   ;Invoice Currency Code;Code10       ;TableRelation=Currency;
                                                   CaptionML=ENU=Invoice Currency Code }
    { 1012;No ;Exch. Calculation (Cost);Option    ;CaptionML=ENU=Exch. Calculation (Cost);
                                                   OptionCaptionML=ENU=Fixed FCY,Fixed LCY;
                                                   OptionString=Fixed FCY,Fixed LCY }
    { 1013;No ;Exch. Calculation (Price);Option   ;CaptionML=ENU=Exch. Calculation (Price);
                                                   OptionCaptionML=ENU=Fixed FCY,Fixed LCY;
                                                   OptionString=Fixed FCY,Fixed LCY }
    { 1014;No ;Allow Schedule/Contract Lines;Boolean;
                                                   CaptionML=ENU=Allow Schedule/Contract Lines }
    { 1015;No ;Complete            ;Boolean       ;OnValidate=BEGIN
                                                                IF Complete <> xRec.Complete THEN
                                                                  ChangeJobCompletionStatus;
                                                              END;

                                                   CaptionML=ENU=Complete }
    { 1016;   ;Calc. WIP Method Used;Option       ;CaptionML=ENU=Calc. WIP Method Used;
                                                   OptionCaptionML=ENU=" ,Cost Value,Sales Value,Cost of Sales,Percentage of Completion,Completed Contract";
                                                   OptionString=[ ,Cost Value,Sales Value,Cost of Sales,Percentage of Completion,Completed Contract];
                                                   Editable=No }
    { 1017;No ;Recog. Sales Amount ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                              Type=FILTER(Recognized Sales)));
                                                   CaptionML=ENU=Recog. Sales Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1018;No ;Recog. Sales G/L Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                  Reversed=CONST(No),
                                                                                                                  Type=FILTER(Recognized Sales)));
                                                   CaptionML=ENU=Recog. Sales G/L Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1019;No ;Recog. Costs Amount ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job WIP Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                             Type=FILTER(Recognized Costs)));
                                                   CaptionML=ENU=Recog. Costs Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1020;No ;Recog. Costs G/L Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                 Reversed=CONST(No),
                                                                                                                 Type=FILTER(Recognized Costs)));
                                                   CaptionML=ENU=Recog. Costs G/L Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1021;No ;Total WIP Sales Amount;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job WIP Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                             Job Complete=CONST(No),
                                                                                                             Type=FILTER(Accrued Sales|Applied Sales|Recognized Sales)));
                                                   CaptionML=ENU=Total WIP Sales Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1022;No ;Total WIP Sales G/L Amount;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                 Reversed=CONST(No),
                                                                                                                 Job Complete=CONST(No),
                                                                                                                 Type=FILTER(Accrued Sales|Applied Sales|Recognized Sales)));
                                                   CaptionML=ENU=Total WIP Sales G/L Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1023;No ;WIP Completion Calculated;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Job WIP Entry" WHERE (Job No.=FIELD(No.),
                                                                                            Job Complete=CONST(Yes)));
                                                   CaptionML=ENU=WIP Completion Calculated }
    { 1024;No ;Next Invoice Date   ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Min("Job Planning Line"."Planning Date" WHERE (Job No.=FIELD(No.),
                                                                                                              Contract Line=CONST(Yes),
                                                                                                              Qty. to Invoice=FILTER(<>0)));
                                                   CaptionML=ENU=Next Invoice Date }
    { 1025;   ;Apply Usage Link    ;Boolean       ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 11020401;
                                                                JobLedgerEntry@1001 : Record 11072005;
                                                                JobUsageLink@1002 : Record 1020;
                                                              BEGIN
                                                                IF "Apply Usage Link" THEN BEGIN
                                                                  JobLedgerEntry.SETCURRENTKEY("Job No.");
                                                                  JobLedgerEntry.SETRANGE("Job No.","No.");
                                                                  JobLedgerEntry.SETRANGE("Entry Type",JobLedgerEntry."Entry Type"::Usage);
                                                                  IF JobLedgerEntry.FINDFIRST THEN BEGIN
                                                                    JobUsageLink.SETRANGE("Entry No.",JobLedgerEntry."Entry No.");
                                                                    IF NOT JobUsageLink.FINDFIRST THEN
                                                                      ERROR(Text013,TABLECAPTION);
                                                                  END;

                                                                  JobPlanningLine.SETCURRENTKEY("Job No.");
                                                                  JobPlanningLine.SETRANGE("Job No.","No.");
                                                                  JobPlanningLine.SETRANGE("Schedule Line",TRUE);
                                                                  IF JobPlanningLine.FINDSET THEN
                                                                    REPEAT
                                                                      JobPlanningLine.VALIDATE("Usage Link",TRUE);
                                                                      IF JobPlanningLine."Planning Date" = 0D THEN
                                                                        JobPlanningLine.VALIDATE("Planning Date",WORKDATE);
                                                                      JobPlanningLine.MODIFY(TRUE);
                                                                    UNTIL JobPlanningLine.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Apply Usage Link }
    { 1026;   ;WIP Warnings        ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Job WIP Warning" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=ENU=WIP Warnings;
                                                   Editable=No }
    { 1027;   ;WIP Posting Method  ;Option        ;OnValidate=VAR
                                                                JobLedgerEntry@1000 : Record 11072005;
                                                                JobWIPEntry@1001 : Record 11020402;
                                                                JobWIPMethod@1002 : Record 1006;
                                                              BEGIN
                                                                IF xRec."WIP Posting Method" = "WIP Posting Method"::"Per Job Ledger Entry" THEN BEGIN
                                                                  JobLedgerEntry.SETRANGE("Job No.","No.");
                                                                  JobLedgerEntry.SETFILTER("Amt. Posted to G/L",'<>%1',0);
                                                                  IF JobLedgerEntry.FINDFIRST THEN
                                                                    ERROR(Text015,FIELDCAPTION("WIP Posting Method"),xRec."WIP Posting Method");
                                                                END;

                                                                JobWIPEntry.SETRANGE("Job No.","No.");
                                                                IF JobWIPEntry.FINDFIRST THEN
                                                                  ERROR(Text016,FIELDCAPTION("WIP Posting Method"));

                                                                IF "WIP Posting Method" = "WIP Posting Method"::"Per Job Ledger Entry" THEN BEGIN
                                                                  JobWIPMethod.GET("WIP Method");
                                                                  IF NOT JobWIPMethod."WIP Cost" THEN
                                                                    ERROR(Text017,FIELDCAPTION("WIP Posting Method"),FIELDCAPTION("WIP Method"),JobWIPMethod.FIELDCAPTION("WIP Cost"));
                                                                  IF NOT JobWIPMethod."WIP Sales" THEN
                                                                    ERROR(Text017,FIELDCAPTION("WIP Posting Method"),FIELDCAPTION("WIP Method"),JobWIPMethod.FIELDCAPTION("WIP Sales"));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=WIP Posting Method;
                                                   OptionCaptionML=ENU=Per Job,Per Job Ledger Entry;
                                                   OptionString=Per Job,Per Job Ledger Entry }
    { 1028;   ;Applied Costs G/L Amount;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                  Reverse=CONST(No),
                                                                                                                  Job Complete=CONST(No),
                                                                                                                  Type=FILTER(Applied Costs)));
                                                   CaptionML=ENU=Applied Costs G/L Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1029;   ;Applied Sales G/L Amount;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                  Reverse=CONST(No),
                                                                                                                  Job Complete=CONST(No),
                                                                                                                  Type=FILTER(Applied Sales)));
                                                   CaptionML=ENU=Applied Sales G/L Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1030;   ;Calc. Recog. Sales Amount;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Task"."Recognized Sales Amount" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=ENU=Calc. Recog. Sales Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1031;   ;Calc. Recog. Costs Amount;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Task"."Recognized Costs Amount" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=ENU=Calc. Recog. Costs Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1032;   ;Calc. Recog. Sales G/L Amount;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Task"."Recognized Sales G/L Amount" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=ENU=Calc. Recog. Sales G/L Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1033;   ;Calc. Recog. Costs G/L Amount;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Task"."Recognized Costs G/L Amount" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=ENU=Calc. Recog. Costs G/L Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1034;   ;WIP Completion Posted;Boolean      ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Job WIP G/L Entry" WHERE (Job No.=FIELD(No.),
                                                                                                Job Complete=CONST(Yes)));
                                                   CaptionML=ENU=WIP Completion Posted }
    { 11012000;;Contract Amount    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Project Principal"."Contract Amount (LCY)" WHERE (Project No.=FIELD(No.)));
                                                   CaptionML=ENU=Contract Amount;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012001;;Total Budget       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(No.),
                                                                                               Extension Contract Status=FILTER(Not Applicable|(>=Order&<Expired))));
                                                   CaptionML=ENU=Total Budget;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012002;;Hours Budget       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Hours WHERE (Project No.=FIELD(No.),
                                                                                              Cost Type=CONST(Labor),
                                                                                              Extension Contract Status=FILTER(Not Applicable|(>=Order&<Expired))));
                                                   CaptionML=ENU=Hours Budget;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012003;;Labor Budget       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(No.),
                                                                                               Cost Type=CONST(Labor),
                                                                                               Extension Contract Status=FILTER(Not Applicable|(>=Order&<Expired))));
                                                   CaptionML=ENU=Labor Budget;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012004;;Material Budget    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(No.),
                                                                                               Cost Type=CONST(Material),
                                                                                               Extension Contract Status=FILTER(Not Applicable|(>=Order&<Expired))));
                                                   CaptionML=ENU=Material Budget;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012005;;Subcontracting Budget;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(No.),
                                                                                               Cost Type=CONST(Subcontracting),
                                                                                               Extension Contract Status=FILTER(Not Applicable|(>=Order&<Expired))));
                                                   CaptionML=ENU=Subcontracting Budget;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012006;;Plant Budget       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(No.),
                                                                                               Cost Type=CONST(Plant),
                                                                                               Extension Contract Status=FILTER(Not Applicable|(>=Order&<Expired))));
                                                   CaptionML=ENU=Plant Budget;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012007;;Sundry Budget      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(No.),
                                                                                               Cost Type=CONST(Sundry),
                                                                                               Extension Contract Status=FILTER(Not Applicable|(>=Order&<Expired))));
                                                   CaptionML=ENU=Sundry Budget;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012008;;Budget Fixed       ;Boolean       ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Budget Fixed" <> xRec."Budget Fixed" THEN
                                                                  IF UserSetup.GET(USERID) THEN
                                                                    IF UserSetup."No Access Budget Fixed" THEN
                                                                      ERROR(Text11012002,FIELDCAPTION("Budget Fixed"));
                                                              END;

                                                   CaptionML=ENU=Budget Fixed }
    { 11012009;;Version Date       ;Date          ;CaptionML=ENU=Version Date }
    { 11012010;;Phone No.          ;Text30        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Small Project" AND ("Phone No." <> xRec."Phone No.") THEN
                                                                  UpdateWorkAddress(6,"Phone No.");
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 11012011;;Fax No.            ;Text30        ;CaptionML=ENU=Fax No. }
    { 11012012;;Contract Type      ;Option        ;OnValidate=VAR
                                                                lProjPrincipalRec@1100485000 : Record 11012005;
                                                                lCustomerRec@1100485001 : Record 18;
                                                              BEGIN
                                                                //**4PS
                                                                IF "Contract Type" = xRec."Contract Type" THEN
                                                                  EXIT;

                                                                "Print Manday Register" := ("Contract Type" = "Contract Type"::Subcontracting); // jhoek.310511: melding 19495

                                                                lProjPrincipalRec.SETRANGE("Project No.", "No.");
                                                                IF lProjPrincipalRec.FINDSET(TRUE, FALSE) THEN BEGIN
                                                                  REPEAT
                                                                    IF "Contract Type" = "Contract Type"::Subcontracting THEN BEGIN
                                                                      lCustomerRec.GET(lProjPrincipalRec.Principal);
                                                                      IF (lCustomerRec."% Labor" <> 0) OR
                                                                         (lCustomerRec."% to B Account" <> 0 ) THEN
                                                                      BEGIN
                                                                        lProjPrincipalRec."% Labor" := lCustomerRec."% Labor";
                                                                        lProjPrincipalRec."% to B Account" := lCustomerRec."% to B Account";
                                                                        lProjPrincipalRec."Specific WKA Percentages" := TRUE;
                                                                        lProjPrincipalRec.MODIFY;
                                                                      END;
                                                                    END ELSE BEGIN
                                                                      lProjPrincipalRec."% Labor" := 0;
                                                                      lProjPrincipalRec."% to B Account" := 0;
                                                                      lProjPrincipalRec."Specific WKA Percentages" := FALSE;
                                                                      lProjPrincipalRec."WKA Period" := '';
                                                                      lProjPrincipalRec.MODIFY;
                                                                    END;
                                                                  UNTIL lProjPrincipalRec.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Contract Type;
                                                   OptionCaptionML=ENU=Maincontracting,Subcontracting;
                                                   OptionString=Maincontracting,Subcontracting }
    { 11012013;;% Labor            ;Decimal       ;CaptionML=ENU=% Labor;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   AutoFormatType=1 }
    { 11012014;;% to B Account     ;Decimal       ;CaptionML=ENU=% to B Account;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 11012015;;Settlement Method  ;Option        ;CaptionML=ENU=Settlement Method;
                                                   OptionCaptionML=ENU=Fixed Price,Cost Plus;
                                                   OptionString=Fixed Price,Cost Plus }
    { 11012016;;Project Status     ;Option        ;OnValidate=VAR
                                                                cuSymbrio@1100285400 : Codeunit 11127975;
                                                                SymbrioSetup@1000 : Record 11127975;
                                                              BEGIN
                                                                //**4PS
                                                                IF "Project Status" = xRec."Project Status" THEN
                                                                  EXIT;

                                                                CASE "Project Status" OF
                                                                  "Project Status"::"Technical Finished":
                                                                    "Technical Finished Date" := TODAY;
                                                                  "Project Status"::Finished:
                                                                    IF xRec."Project Status" <> xRec."Project Status"::Archive THEN
                                                                      ERROR(Text11012003);
                                                                  "Project Status"::Archive:
                                                                    IF xRec."Project Status" <> xRec."Project Status"::Finished THEN
                                                                      ERROR(Text11012006);
                                                                  "Project Status"::Archived:
                                                                    ERROR(Text11012004);
                                                                END;

                                                                CASE xRec."Project Status" OF
                                                                  xRec."Project Status"::Finished:
                                                                    IF "Project Status" < xRec."Project Status" THEN
                                                                      ERROR(Text11012007);
                                                                  xRec."Project Status"::Archive:
                                                                    IF "Project Status" <> "Project Status"::Finished THEN
                                                                      ERROR(Text11012007);
                                                                  xRec."Project Status"::Archived:
                                                                    IF "Project Status" < xRec."Project Status" THEN
                                                                      ERROR(Text11012005);
                                                                END;

                                                                IF ("Technical Finished Date" <> 0D) AND ("Project Status" < "Project Status"::"Technical Finished") THEN
                                                                  "Technical Finished Date" := 0D;

                                                                IF SymbrioSetup.READPERMISSION THEN
                                                                //>>SYM020
                                                                // SYM036 <<
                                                                //IF ExportToSymbrio.JobIsReadyForExport(Rec) AND
                                                                //  ((xRec."Project Status" IN ["Project Status"::Preparation,"Project Status"::Production]) AND
                                                                //     ("Project Status" IN ["Project Status"::Estimation,"Project Status"::"Technical Finished","Project Status"::"Administrative Finished"]))
                                                                //  THEN
                                                                //    cuSymbrio.fnMarkJobForExportToSymbrio(Rec,xRec);
                                                                // SYM036 >>
                                                                //<<SYM020
                                                              END;

                                                   CaptionML=ENU=Project Status;
                                                   OptionCaptionML=ENU=Estimation,Preparation,Production,Technical Finished,Administrative Finished,Finished,Archive,Archived;
                                                   OptionString=Estimation,Preparation,Production,Technical Finished,Administrative Finished,Finished,Archive,Archived }
    { 11012017;;Project Type       ;Code20        ;TableRelation="Project Type".Code;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                CheckProjectAuthorization(FIELDCAPTION("Project Type"));

                                                                //*29100.sn
                                                                IF "Project Type" <> xRec."Project Type" THEN
                                                                  CheckModifyDim1ValuePosting();
                                                                //*29100.en

                                                                IF ProjTypeRec.GET("Project Type") THEN
                                                                  IF ProjTypeRec."Department Code" <> '' THEN
                                                                    VALIDATE("Global Dimension 1 Code",ProjTypeRec."Department Code");
                                                              END;

                                                   CaptionML=ENU=Project Type }
    { 11012018;;Territory Code     ;Code10        ;TableRelation=Territory;
                                                   CaptionML=ENU=Territory Code }
    { 11012019;;Type               ;Code10        ;TableRelation=Type;
                                                   CaptionML=ENU=Type }
    { 11012020;;Period Filter      ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Period Filter }
    { 11012021;;Cumulation Filter  ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Cumulation Filter }
    { 11012022;;Progress Filter    ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Progress Date }
    { 11012023;;Blocking Code      ;Code20        ;TableRelation="Blocking Code";
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Blocking Code" <> xRec."Blocking Code" THEN
                                                                  IF UserSetup.GET(USERID) THEN
                                                                    IF NOT UserSetup."Access Job Blocking Code" THEN
                                                                      ERROR(Text11012002,FIELDCAPTION("Blocking Code"));
                                                              END;

                                                   CaptionML=ENU=Blocking Code }
    { 11012025;;Budget             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Main Project No.=FIELD(Main Project),
                                                                                               Project No.=FIELD(Project Filter),
                                                                                               Version Date=FIELD(Cumulation Filter),
                                                                                               Extension Contract Status=FILTER(Not Applicable|Order|Invoicing Allowed)));
                                                   CaptionML=ENU=Budget;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012026;;Budget Hours (Entire Project);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Hours WHERE (Main Project No.=FIELD(Main Project),
                                                                                              Project No.=FIELD(Project Filter),
                                                                                              Version Date=FIELD(Cumulation Filter),
                                                                                              Cost Type=CONST(Labor),
                                                                                              Extension Contract Status=FILTER(Not Applicable|(>=Order&<Expired))));
                                                   CaptionML=ENU=Budget Hours (Entire Project);
                                                   Editable=No }
    { 11012030;;Actual Costs       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Ledger Entry"."Total Cost (LCY)" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                                Job No.=FIELD(Project Filter),
                                                                                                                Entry Type=CONST(Usage),
                                                                                                                Posting Date=FIELD(Cumulation Filter),
                                                                                                                Purchase Action=FIELD(Purchase Action Filter)));
                                                   CaptionML=ENU=Actual Costs;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012031;;Actual Hours       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Ledger Entry".Quantity WHERE (Main Project No.=FIELD(Main Project),
                                                                                                      Job No.=FIELD(Project Filter),
                                                                                                      Cost Type=CONST(Labor),
                                                                                                      Entry Type=CONST(Usage),
                                                                                                      Posting Date=FIELD(Cumulation Filter)));
                                                   CaptionML=ENU=Actual Hours;
                                                   Editable=No }
    { 11012032;;Actuals Period     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Ledger Entry"."Total Cost (LCY)" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                                Job No.=FIELD(Project Filter),
                                                                                                                Entry Type=CONST(Usage),
                                                                                                                Posting Date=FIELD(Period Filter),
                                                                                                                Purchase Action=FIELD(Purchase Action Filter)));
                                                   CaptionML=ENU=Actuals Period;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012033;;Actual Hours Period;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Ledger Entry".Quantity WHERE (Main Project No.=FIELD(Main Project),
                                                                                                      Job No.=FIELD(Project Filter),
                                                                                                      Cost Type=CONST(Labor),
                                                                                                      Entry Type=CONST(Usage),
                                                                                                      Posting Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Actual Hours Period;
                                                   Editable=No }
    { 11012034;;Original Cost Type Filter;Option  ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Original Cost Type Filter;
                                                   OptionCaptionML=ENU=" ,Labor,Material,Subcontracting,Plant,Sundry,Revenues";
                                                   OptionString=[ ,Labor,Material,Subcontracting,Plant,Sundry,Revenues] }
    { 11012035;;Revenues           ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job Ledger Entry"."Total Price (LCY)" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                                  Job No.=FIELD(Project Filter),
                                                                                                                  Entry Type=CONST(Sale),
                                                                                                                  Posting Date=FIELD(Cumulation Filter),
                                                                                                                  Original Cost Type=FIELD(Original Cost Type Filter),
                                                                                                                  Rental Unit=FIELD(Rental Unit Filter)));
                                                   CaptionML=ENU=Revenues;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012036;;Revenues Period    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job Ledger Entry"."Total Price (LCY)" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                                  Job No.=FIELD(Project Filter),
                                                                                                                  Entry Type=CONST(Sale),
                                                                                                                  Posting Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Revenues Period;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012037;;Cost Control Up to Date;Boolean   ;InitValue=Yes;
                                                   CaptionML=ENU=Cost Control Up to Date }
    { 11012038;;Project Address Code;Code10       ;TableRelation=IF (Small Project=CONST(No)) "Ship-to Address".Code WHERE (Customer No.=FIELD(Bill-to Customer No.),
                                                                                                                            Project Address=CONST(Yes));
                                                   OnValidate=VAR
                                                                AddressRec@1100485003 : Record 222;
                                                              BEGIN
                                                                //**4PS
                                                                IF "Small Project" THEN BEGIN
                                                                  AddressRec.RESET;
                                                                  AddressRec.SETRANGE("Project Address", TRUE);
                                                                  AddressRec.SETRANGE(Code,"Project Address Code");
                                                                  IF "Bill-to Customer No." <> '' THEN
                                                                    AddressRec.SETRANGE("Customer No.", "Bill-to Customer No.");
                                                                  IF AddressRec.FINDFIRST THEN BEGIN
                                                                    "Bill-to Customer No." := AddressRec."Customer No.";
                                                                    ValidateBillToCustomerData(FALSE, FALSE);  //*C-028192.c
                                                                  END ELSE
                                                                    IF CONFIRM(Text11012026,TRUE) THEN
                                                                      IF "Bill-to Customer No." <> '' THEN
                                                                        "Project Address Code" := InsertAddress("Bill-to Customer No.")
                                                                      ELSE
                                                                        InsertAddressFromCustomer;
                                                                END;

                                                                IF ("Project Address Code" <> '') THEN BEGIN
                                                                  IF ("Project Address Code" <> xRec."Project Address Code") OR ("Bill-to Customer No." <> xRec."Bill-to Customer No.") THEN
                                                                    UpdateProjectAddress;
                                                                END ELSE
                                                                  CopyBillToAddress;
                                                              END;

                                                   CaptionML=ENU=Project Address Code }
    { 11012039;;Text               ;Text250       ;CaptionML=ENU=Invoice Text }
    { 11012040;;Project Supplier   ;Code20        ;TableRelation=Vendor.No. WHERE (Project Supplier=CONST(Yes));
                                                   CaptionML=ENU=Project Supplier }
    { 11012041;;Name Vendor        ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Project Supplier)));
                                                   CaptionML=ENU=Name Vendor;
                                                   Editable=No }
    { 11012045;;Rental Unit Filter ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Rental Unit"."Rental Unit" WHERE (Project No.=FIELD(No.));
                                                   CaptionML=ENU=Rental Unit Filter }
    { 11012050;;Purchase Budget    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Main Project No.=FIELD(Main Project),
                                                                                               Project No.=FIELD(Project Filter),
                                                                                               Purchase Action Status=FILTER(>=Approved),
                                                                                               Purch. Action Approval Date=FIELD(Cumulation Filter)));
                                                   CaptionML=ENU=Purchase Budget;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012051;;Open (Purchase)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Order Control Line"."Outstanding Amount" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                                             Project No.=FIELD(Project Filter),
                                                                                                                             Date=FIELD(Cumulation Filter),
                                                                                                                             Purchase Action=FIELD(Purchase Action Filter)));
                                                   CaptionML=ENU=Open (Purchase);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012052;;Received/Not Invoiced;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Order Control Line"."Amt. Rcd. Not Invoiced" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                                                 Project No.=FIELD(Project Filter),
                                                                                                                                 Date=FIELD(Cumulation Filter),
                                                                                                                                 Purchase Action=FIELD(Purchase Action Filter)));
                                                   CaptionML=ENU=Received/Not Invoiced;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012053;;Risc Coverage      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Risc Coverage Amount (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                                       Main Project No.=FIELD(Main Project),
                                                                                                                       Job No.=FIELD(Project Filter),
                                                                                                                       Order Date=FIELD(Cumulation Filter),
                                                                                                                       Purchase Action=FIELD(Purchase Action Filter)));
                                                   CaptionML=ENU=Risc Coverage;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012054;;Risc Coverage Withdraw;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Release Risc Coverage (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                                        Main Project No.=FIELD(Main Project),
                                                                                                                        Job No.=FIELD(Project Filter),
                                                                                                                        Order Date=FIELD(Cumulation Filter),
                                                                                                                        Purchase Action=FIELD(Purchase Action Filter)));
                                                   CaptionML=ENU=Risc Coverage Withdraw;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012055;;Open Ovh. Surch. Soft (Purch.);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Order Control Line"."Overhead Surcharge Soft" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                                                  Project No.=FIELD(Project Filter),
                                                                                                                                  Date=FIELD(Cumulation Filter),
                                                                                                                                  Purchase Action=FIELD(Purchase Action Filter)));
                                                   CaptionML=ENU=Open Ovh. Surch. Soft Commitments (Purchase);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012056;;Open Ovh. Surch. Firm (Purch.);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Order Control Line"."Overhead Surcharge Firm" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                                                  Project No.=FIELD(Project Filter),
                                                                                                                                  Date=FIELD(Cumulation Filter),
                                                                                                                                  Purchase Action=FIELD(Purchase Action Filter)));
                                                   CaptionML=ENU=Open Ovh. Surch. Firm Commitments (Purchase);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012057;;Open Ovh. Surch. (Hours);Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Surcharge"."Overhead Surcharge Project" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                                                   Project No.=FIELD(Project Filter),
                                                                                                                                   Posting Date=FIELD(Cumulation Filter),
                                                                                                                                   Component Type=FIELD(Wage Component Type Filter)));
                                                   CaptionML=ENU=Open Ovh. Surch. (Hours);
                                                   Description=IME155 add;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012058;;Open Ovh. Surch. (Inventory);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Journal Surcharge"."Overhead Surcharge Project" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                                                Job No.=FIELD(Project Filter),
                                                                                                                                Posting Date=FIELD(Cumulation Filter)));
                                                   CaptionML=ENU=Open Ovh. Surch. (Inventory);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012059;;Open (Inventory)   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Journal Line".Amount WHERE (Main Project No.=FIELD(Main Project),
                                                                                                     Job No.=FIELD(Project Filter),
                                                                                                     Posting Date=FIELD(Cumulation Filter)));
                                                   CaptionML=ENU=Open (Inventory);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012060;;PrevProgressFilter ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Previous Progress Date }
    { 11012061;;Period Type Filter ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Period Type;
                                                   OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                                                   OptionString=Day,Week,Month,Quarter,Year,Accounting Period }
    { 11012068;;Salesperson Code   ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF CurrFieldNo <> 0 THEN
                                                                  CALCFIELDS("Salesperson Name");
                                                              END;

                                                   CaptionML=ENU=Salesperson Code }
    { 11012069;;Salesperson Name   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Salesperson Code)));
                                                   CaptionML=ENU=Salesperson Name;
                                                   Editable=No }
    { 11012070;;Project Manager    ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                UpdateResponsibility(FIELDNO("Project Manager"), xRec."Project Manager", "Project Manager");
                                                              END;

                                                   CaptionML=ENU=Project Manager }
    { 11012071;;Mechanic           ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Mechanic }
    { 11012072;;Prospect           ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Contact Business Relation"."Contact No." WHERE (No.=FIELD(Bill-to Customer No.),
                                                                                                                       Link to Table=CONST(Customer)));
                                                   CaptionML=ENU=Prospect;
                                                   Editable=No }
    { 11012073;;Supervisor         ;Code20        ;TableRelation=Contact.No. WHERE (Company No.=FIELD(Prospect),
                                                                                    Type=CONST(Person));
                                                   OnValidate=VAR
                                                                ContJobRespRec@1210190000 : Record 5067;
                                                              BEGIN
                                                                //**4PS.n
                                                                IF Supervisor = '' THEN
                                                                  EXIT;

                                                                JobsSetup.GET;
                                                                ContJobRespRec.SETRANGE("Contact No.", Supervisor);
                                                                ContJobRespRec.SETRANGE("Job Responsibility Code", JobsSetup."Function Group Supervisor");
                                                                IF NOT ContJobRespRec.FINDFIRST THEN
                                                                  ERROR(Text11012015, Supervisor);

                                                                IF "Small Project" THEN
                                                                  InsertProjectPrincipal("Bill-to Customer No.");
                                                              END;

                                                   CaptionML=ENU=Supervisor }
    { 11012074;;Project Engineer   ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                UpdateResponsibility(FIELDNO("Project Engineer"), xRec."Project Engineer", "Project Engineer");
                                                              END;

                                                   CaptionML=ENU=Project Engineer }
    { 11012075;;Site Manager       ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                UpdateResponsibility(FIELDNO("Site Manager"), xRec."Site Manager", "Site Manager");
                                                              END;

                                                   CaptionML=ENU=Site Manager }
    { 11012076;;Project Administrator;Code20      ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                //UpdateResponsibility(FIELDNO("Project Administrator"), xRec."Project Administrator", "Project Administrator");
                                                              END;

                                                   CaptionML=ENU=Project Administrator }
    { 11012078;;Estimator          ;Code20        ;TableRelation=Employee.No.;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                UpdateResponsibility(FIELDNO(Estimator), xRec.Estimator, Estimator);
                                                              END;

                                                   CaptionML=ENU=Estimator }
    { 11012079;;Expediter          ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Expediter }
    { 11012080;;Principal Name     ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Principal Name;
                                                   Editable=No }
    { 11012081;;Name Project Manager;Text100      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Project Manager)));
                                                   CaptionML=ENU=Name Project Manager;
                                                   Editable=No }
    { 11012082;;Name Project Engineer;Text100     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Project Engineer)));
                                                   CaptionML=ENU=Name Project Engineer;
                                                   Editable=No }
    { 11012083;;Name Site Manager  ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Site Manager)));
                                                   CaptionML=ENU=Name Site Manager;
                                                   Editable=No }
    { 11012084;;Name Estimator     ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Estimator)));
                                                   CaptionML=ENU=Name Estimator;
                                                   Editable=No }
    { 11012085;;Name Buyer Contact ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Buyercontact)));
                                                   CaptionML=ENU=Name Buyer Contact;
                                                   Editable=No }
    { 11012086;;Name Expediter     ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Expediter)));
                                                   CaptionML=ENU=Name Expediter;
                                                   Editable=No }
    { 11012087;;Name Mechanic      ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Mechanic)));
                                                   CaptionML=ENU=Name Mechanic;
                                                   Editable=No }
    { 11012088;;Name Supervisor    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Supervisor)));
                                                   CaptionML=ENU=Name Supervisor;
                                                   Editable=No }
    { 11012089;;Name Project Administrator;Text100;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Project Administrator)));
                                                   CaptionML=ENU=Name Project Administrator;
                                                   Editable=No }
    { 11012090;;Single/Main/Sub Project;Option    ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Single/Main/Sub Project" <> "Single/Main/Sub Project"::"Sub Project" THEN
                                                                  VALIDATE("Main Project", "No.")
                                                                ELSE
                                                                  VALIDATE("Main Project", '');
                                                              END;

                                                   CaptionML=ENU=Single/Main/Sub Project;
                                                   OptionCaptionML=ENU=Single,Main Project,Sub Project;
                                                   OptionString=Single,Main Project,Sub Project }
    { 11012091;;Project Filter     ;Code250       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Project Filter }
    { 11012092;;Main Project       ;Code20        ;TableRelation=IF (Single/Main/Sub Project=CONST(Sub Project)) Job.No. WHERE (Single/Main/Sub Project=CONST(Main Project))
                                                                 ELSE Job.No. WHERE (No.=FIELD(Main Project));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Small Project" AND ("Single/Main/Sub Project" = "Single/Main/Sub Project"::"Sub Project") THEN
                                                                  IF Job.GET("Main Project") THEN
                                                                    IF Job."Bill-to Customer No." <> "Bill-to Customer No." THEN
                                                                      MESSAGE(STRSUBSTNO(Text11012025,Job."Bill-to Customer No.",Job."No.","Bill-to Customer No."));

                                                                IF "Main Project" <> xRec."Main Project" THEN BEGIN
                                                                  //>> 150908 ITERO.AC Check main project status
                                                                  IF (Job.GET("Main Project")) AND ("Single/Main/Sub Project" = "Single/Main/Sub Project"::"Sub Project") THEN BEGIN
                                                                    IF Job."Project Status" >= Job."Project Status"::"Administrative Finished" THEN
                                                                      ERROR(Text11128001, Job."Project Status");
                                                                  END;
                                                                  //<< 150908 ITERO.AC
                                                                  RenameMainProject;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Main Project }
    { 11012100;;Prognosis Filter   ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Prognosis Date;
                                                   Editable=No }
    { 11012101;;PrevPrognosisFilter;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Previous Prognosis Date;
                                                   Editable=No }
    { 11012102;;Prognosis          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prognosis Line"."Amount incl. Surcharge" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                                    Project No.=FIELD(Project Filter),
                                                                                                                    Prognosis Date=FIELD(Prognosis Filter)));
                                                   CaptionML=ENU=Prognosis;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012103;;Prognosis Previous Period;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prognosis Line"."Amount incl. Surcharge" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                                    Project No.=FIELD(Project Filter),
                                                                                                                    Prognosis Date=FIELD(PrevPrognosisFilter)));
                                                   CaptionML=ENU=Prognosis Previous Period;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012104;;Hours Prognosis    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prognosis Line".Quantity WHERE (Main Project No.=FIELD(Main Project),
                                                                                                    Project No.=FIELD(Project Filter),
                                                                                                    Prognosis Date=FIELD(Prognosis Filter),
                                                                                                    Cost Type=CONST(Labor)));
                                                   CaptionML=ENU=Hours Prognosis;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012105;;Risc Coverage (Prognosis);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prognosis Line"."Risc Coverage" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                           Project No.=FIELD(Project Filter),
                                                                                                           Prognosis Date=FIELD(Prognosis Filter)));
                                                   CaptionML=ENU=Risc Coverage (Prognosis);
                                                   Editable=No }
    { 11012106;;Prognosis Level    ;Option        ;CaptionML=ENU=Prognosis Level;
                                                   OptionCaptionML=ENU=Detailed,Element,Rough;
                                                   OptionString=Detailed,Element,Rough }
    { 11012107;;Prognosis Total Cost;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prognosis Line"."Prognosis Total Cost" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                                  Project No.=FIELD(Project Filter),
                                                                                                                  Prognosis Date=FIELD(Prognosis Filter)));
                                                   CaptionML=ENU=Prognosis Total Cost;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012108;;Overhead Surch. Progn. Costs;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Prognosis Line CC"."Overhead Surch. Progn. Costs" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                                             Project No.=FIELD(Project Filter),
                                                                                                                             Prognosis Date=FIELD(Prognosis Filter),
                                                                                                                             Cost Component Code=FIELD(Cost Component Filter)));
                                                   CaptionML=ENU=Overhead Surch. Progn. Costs;
                                                   Description=4PS-001;
                                                   Editable=No }
    { 11012110;;VAT Bus. Posting Group;Code10     ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 11012120;;Progress Method    ;Option        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Progress Method" <> xRec."Progress Method" THEN BEGIN
                                                                  ProgressLevelRec.SETRANGE("Project No.", "No.");
                                                                  IF NOT ProgressLevelRec.ISEMPTY THEN
                                                                    IF NOT CONFIRM(STRSUBSTNO(Text11012039, FIELDCAPTION("Progress Method"),TRUE)) THEN
                                                                      "Progress Method" := xRec."Progress Method";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Progress Method;
                                                   OptionCaptionML=ENU=Element - Cost Object,Budget Line,Cost Object;
                                                   OptionString=Element - Cost Object,Budget Line,Cost Object }
    { 11012121;;Progress Registry  ;Option        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Progress Registry" <> "Progress Registry"::Percentages THEN
                                                                  TESTFIELD("Progress from Instal. Progress", FALSE);

                                                                IF "Progress Registry" <> xRec."Progress Registry" THEN BEGIN
                                                                  ProgressLevelRec.SETRANGE("Project No.", "No.");
                                                                  IF NOT ProgressLevelRec.ISEMPTY THEN
                                                                    IF "Progress Registry" <> "Progress Registry"::None THEN BEGIN //mg, 12-07-11: M28078
                                                                      IF NOT CONFIRM(STRSUBSTNO(Text11012039, FIELDCAPTION("Progress Registry"),TRUE)) THEN
                                                                        "Progress Registry" := xRec."Progress Registry";
                                                                    END ELSE
                                                                      ERROR(Text11012048, "Progress Registry"); //mg, 12-07-11: M28078
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Progress Registry;
                                                   OptionCaptionML=ENU=Quantities,Percentages,None;
                                                   OptionString=Quantities,Percentages,None }
    { 11012122;;Progress on base of Tender;Boolean;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Progress on base of Tender" THEN
                                                                  VALIDATE("Progress Registry","Progress Registry"::Percentages);
                                                              END;

                                                   CaptionML=ENU=Progress on base of Tender }
    { 11012123;;Progress Registry (PTE);Option    ;OnValidate=VAR
                                                                ProgressLevelPTE@1100525000 : Record 11012267;
                                                              BEGIN
                                                                //**4PS
                                                                IF "Progress Registry (PTE)" <> xRec."Progress Registry (PTE)" THEN BEGIN
                                                                  ProgressLevelPTE.SETRANGE("Project No.","No.");
                                                                  IF NOT ProgressLevelPTE.ISEMPTY THEN
                                                                    IF NOT CONFIRM(STRSUBSTNO(Text11012039,FIELDCAPTION("Progress Registry (PTE)"),TRUE)) THEN
                                                                      "Progress Registry (PTE)" := xRec."Progress Registry (PTE)";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Progress Registry (PTE);
                                                   OptionCaptionML=ENU=Quantities,Percentages;
                                                   OptionString=Quantities,Percentages }
    { 11012125;;Progress from Instal. Progress;Boolean;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Progress from Instal. Progress" THEN
                                                                  TESTFIELD("Progress Registry", "Progress Registry"::Percentages)
                                                                ELSE
                                                                  "Element per Installment" := FALSE;
                                                              END;

                                                   CaptionML=ENU=Generate Progress from Installment Progress }
    { 11012126;;Element per Installment;Boolean   ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Element per Installment" THEN
                                                                  TESTFIELD("Progress from Instal. Progress", TRUE);
                                                              END;

                                                   CaptionML=ENU=Element per Installment }
    { 11012130;;Estimate No.       ;Code20        ;TableRelation=Estimate.No.;
                                                   CaptionML=ENU=Estimate No.;
                                                   Editable=No }
    { 11012135;;Price List         ;Code10        ;TableRelation="Price List".Code WHERE (Customer No.=FIELD(Bill-to Customer No.),
                                                                                          Status=CONST(Open));
                                                   OnValidate=VAR
                                                                lvPriceListRec@1100485000 : Record 11020422;
                                                              BEGIN
                                                                //**4PS
                                                                IF "Price List" <> '' THEN BEGIN
                                                                  lvPriceListRec.GET("Bill-to Customer No.", "Price List");
                                                                  lvPriceListRec.TESTFIELD(Status, lvPriceListRec.Status::Open);
                                                                  "Ref. Date Unit Price" := lvPriceListRec."Start Date";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Price List }
    { 11012136;;Ref. Date Unit Price;Date         ;CaptionML=ENU=Reference Date Unit Price }
    { 11012140;;Budgetted Options in Order;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(No.),
                                                                                               Option=FILTER(<>''),
                                                                                               Adjustment=FILTER('')));
                                                   CaptionML=ENU=Budgetted Options in Order;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012141;;Number of Options in Order;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count(Option WHERE (Project No.=FIELD(No.),
                                                                                   Status=FILTER(Order|Invoice),
                                                                                   Plot No.=FILTER(<>'')));
                                                   CaptionML=ENU=Number of Options in Order;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 11012142;;Number of Options Open;Integer    ;FieldClass=FlowField;
                                                   CalcFormula=Count(Option WHERE (Project No.=FIELD(No.),
                                                                                   Status=FILTER(<Order),
                                                                                   Plot No.=FILTER(<>'')));
                                                   CaptionML=ENU=Number of Options Open;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 11012143;;Number of Plots    ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Plot WHERE (Project No.=FIELD(No.)));
                                                   CaptionML=ENU=Number of Plots;
                                                   Editable=No }
    { 11012144;;Number of Plots Sold;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count(Plot WHERE (Project No.=FIELD(No.),
                                                                                 Sales Status=FILTER(Sold..)));
                                                   CaptionML=ENU=Number of Plots Sold;
                                                   Editable=No }
    { 11012150;;Status Modification Date;Date     ;CaptionML=ENU=Status Modification Date;
                                                   Editable=No }
    { 11012155;;Buyercontact       ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                UpdateResponsibility(FIELDNO(Buyercontact), xRec.Buyercontact, Buyercontact); //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Buyercontact }
    { 11012160;;Modified by        ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Modified by;
                                                   Editable=No }
    { 11012161;;Interest Rate      ;Decimal       ;FieldClass=Normal;
                                                   CaptionML=ENU=Interest Rate }
    { 11012165;;Extension Quoted Amount;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Extension Contract"."Offered Amount" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                                Project No.=FIELD(Project Filter),
                                                                                                                Status=FILTER(<Order),
                                                                                                                Treat like Order=CONST(No),
                                                                                                                Version Date=FIELD(Cumulation Filter)));
                                                   CaptionML=ENU=Extension Quoted Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012166;;Extension Contract Amount;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Extension Contract"."Expected Contract Amount" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                                          Project No.=FIELD(Project Filter),
                                                                                                                          Version Date=FIELD(Cumulation Filter)));
                                                   CaptionML=ENU=Extension Contract Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012167;;Project Contract Amount;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Project Principal"."Contract Amount (LCY)" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                                      Project No.=FIELD(Project Filter)));
                                                   CaptionML=ENU=Project Contract Amount;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012170;;Archive Location Documents;Text250;CaptionML=ENU=Archive Location Digital Documents }
    { 11012180;;Technical Finished Date;Date      ;CaptionML=ENU=Technical Finished Date }
    { 11012181;;Posting Date Closing;Date         ;CaptionML=ENU=Posting date closing;
                                                   Editable=No }
    { 11012190;;Purchase Action Filter;Code10     ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Purchase Action Filter }
    { 11012191;;Purchase           ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Amount (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                         Main Project No.=FIELD(Main Project),
                                                                                                         Job No.=FIELD(Project Filter),
                                                                                                         Order Date=FIELD(Cumulation Filter),
                                                                                                         Purchase Action=FIELD(Purchase Action Filter)));
                                                   CaptionML=ENU=Purchase;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012192;;(Re)Print Option List;Boolean     ;FieldClass=FlowField;
                                                   CalcFormula=Exist(Option WHERE (Project No.=FIELD(No.),
                                                                                   (Re)Print Option List=CONST(Yes)));
                                                   CaptionML=ENU=(Re)Print Option List;
                                                   Editable=No }
    { 11012193;;Offers Expired     ;Boolean       ;CaptionML=ENU=Offers Expired;
                                                   Editable=No }
    { 11012194;;Purchase Period    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Amount (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                         Main Project No.=FIELD(Main Project),
                                                                                                         Job No.=FIELD(Project Filter),
                                                                                                         Order Date=FIELD(Period Filter),
                                                                                                         Purchase Action=FIELD(Purchase Action Filter)));
                                                   CaptionML=ENU=Purchase Period;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012199;;UAR Indirect       ;Boolean       ;CaptionML=ENU=Indirect;
                                                   Description=4PS Spoor }
    { 11012200;;UAR Task           ;Code10        ;TableRelation="UAR Task";
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                CALCFIELDS("UAR Task Description", "UAR Task Pause Allowed", "UAR Task Travel Hours Allowed");
                                                              END;

                                                   CaptionML=ENU=UAR Task;
                                                   Description=4PS Spoor }
    { 11012201;;UAR Task Description;Text50       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("UAR Task".Description WHERE (Code=FIELD(UAR Task)));
                                                   CaptionML=ENU=UAR Task Description;
                                                   Description=4PS Spoor;
                                                   Editable=No }
    { 11012202;;UAR Task Pause Allowed;Boolean    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("UAR Task"."Pause Allowed" WHERE (Code=FIELD(UAR Task)));
                                                   CaptionML=ENU=Pause Allowed;
                                                   Description=4PS Spoor;
                                                   Editable=No }
    { 11012203;;UAR Task Travel Hours Allowed;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("UAR Task"."Travel Hours Allowed" WHERE (Code=FIELD(UAR Task)));
                                                   CaptionML=ENU=Travel Hours Allowed;
                                                   Description=4PS Spoor;
                                                   Editable=No }
    { 11012204;;Small Project      ;Boolean       ;CaptionML=ENU=Small Project }
    { 11012205;;Origin Complaint Company;Text30   ;TableRelation=Company;
                                                   CaptionML=ENU=Origin Complaint Company;
                                                   Editable=No }
    { 11012206;;Origin Complaint No.;Code20       ;TableRelation=IF (Origin Complaint Company=CONST()) Complaint.No.;
                                                   CaptionML=ENU=Origin Complaint No.;
                                                   Editable=No }
    { 11012210;;Options Contract Amount;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum(Option."Contract Amount" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                   Project No.=FIELD(Project Filter),
                                                                                                   Status=FILTER(Order|Invoice),
                                                                                                   Order Date=FIELD(Cumulation Filter),
                                                                                                   Plot No.=FILTER(<>'')));
                                                   CaptionML=ENU=Options Contract Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012212;;Phone No. at Work  ;Text30        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Small Project" AND ("Phone No. at Work" <> xRec."Phone No. at Work") THEN
                                                                  UpdateWorkAddress(7,"Phone No. at Work");
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. at Work }
    { 11012213;;Mobile Phone No.   ;Text30        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Small Project" AND ("Mobile Phone No." <> xRec."Mobile Phone No.") THEN
                                                                  UpdateWorkAddress(8,"Mobile Phone No.");
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Mobile Phone No. }
    { 11012214;;Order No. Customer ;Text50        ;OnValidate=BEGIN
                                                                //**4PS
                                                                SyncProjPrincipal;
                                                              END;

                                                   CaptionML=ENU=Order No. Customer }
    { 11012220;;Purchaser Code     ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF CurrFieldNo <> 0 THEN
                                                                  CALCFIELDS("Name Purchaser");
                                                                UpdateResponsibility(FIELDNO("Purchaser Code"), xRec."Purchaser Code", "Purchaser Code");
                                                              END;

                                                   CaptionML=ENU=Purchaser Code }
    { 11012221;;Name Purchaser     ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Purchaser Code)));
                                                   CaptionML=ENU=Name Purchaser;
                                                   Editable=No }
    { 11012225;;Autom. Get Project Inspections;Boolean;
                                                   CaptionML=ENU=Automaticaly Get Project Inspections;
                                                   Description=Inspections Site Manager Form }
    { 11012230;;Open Amount (Hours);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line"."Amount (LCY)" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                                Project No.=FIELD(Project Filter),
                                                                                                                Posting Date=FIELD(Cumulation Filter),
                                                                                                                Component Type=FIELD(Wage Component Type Filter)));
                                                   CaptionML=ENU=Open Amount (Hours);
                                                   Description=IME155 add;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012240;;Open Hours         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line"."Total Line" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                              Project No.=FIELD(Project Filter),
                                                                                                              Posting Date=FIELD(Cumulation Filter),
                                                                                                              Component Type=FIELD(Wage Component Type Filter)));
                                                   CaptionML=ENU=Open Hours;
                                                   Description=IME155 add;
                                                   Editable=No }
    { 11012250;;Preclosure Result  ;Option        ;InitValue=No;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                CheckProjectAuthorization(FIELDCAPTION("Preclosure Result"));
                                                              END;

                                                   CaptionML=ENU=Preclosure Result;
                                                   OptionCaptionML=ENU=No,Progress,Sales Progress,Allowed,Sales Allowed,Invoiced;
                                                   OptionString=No,Progress,Sales Progress,Allowed,Sales Allowed,Invoiced }
    { 11012251;;Actual Preclosure Result;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Ledger Entry"."Actual Preclosure Result" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                                        Job No.=FIELD(Project Filter),
                                                                                                                        Entry Type=CONST(Usage),
                                                                                                                        Posting Date=FIELD(Cumulation Filter)));
                                                   CaptionML=ENU=Actual Preclosure Result;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012252;;Act. Preclosure Result Period;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Ledger Entry"."Actual Preclosure Result" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                                        Job No.=FIELD(Project Filter),
                                                                                                                        Entry Type=CONST(Usage),
                                                                                                                        Posting Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Actual Preclosure Result Period;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012260;;Due Date Plot      ;Date          ;CaptionML=ENU=Due Date Plot }
    { 11012270;;Interest Before Contract Date;Decimal;
                                                   CaptionML=ENU=Interest Before Contract Date;
                                                   DecimalPlaces=2:2;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 11012280;;Interest Before Transfer Date;Decimal;
                                                   CaptionML=ENU=Interest Before Transfer Date;
                                                   DecimalPlaces=2:2;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 11012285;;Interest WIP Cost  ;Option        ;OnValidate=BEGIN
                                                                //**4PS
                                                                CheckProjectAuthorization(FIELDCAPTION("Interest WIP Cost"));
                                                              END;

                                                   CaptionML=ENU=Interest % WIP Cost;
                                                   OptionCaptionML=ENU=General,Project,Project Type;
                                                   OptionString=General,Project,ProjectType }
    { 11012290;;Payment Terms Code ;Code10        ;TableRelation="Payment Terms";
                                                   CaptionML=ENU=Payment Terms Code }
    { 11012300;;VAT Prod. P. Group Inst. Int.;Code10;
                                                   TableRelation="VAT Product Posting Group";
                                                   CaptionML=ENU=VAT Product Posting Group Installments Interest }
    { 11012303;;Reference Date (Company);Date     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Inventory Setup"."Reference Date (Item)");
                                                   CaptionML=ENU=Reference Date Item Prices (Company);
                                                   Editable=No }
    { 11012304;;Reference Date (Customer);Date    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Reference Date (Item)" WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Reference Date Item Prices (Customer);
                                                   Editable=No }
    { 11012305;;Reference Date (Item);Date        ;CaptionML=ENU=Reference Date Item Prices }
    { 11012306;;Purch Discount Term Group 1;Code20;TableRelation="Discount Term Group".Code WHERE (Level=CONST(Customer),
                                                                                                   Type=FILTER(Common|Purchase));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Purch Discount Term Group 1" = '' THEN BEGIN
                                                                  "Priority Purch Disc Term Grp 1" := '';
                                                                END ELSE BEGIN
                                                                  "Priority Purch Disc Term Grp 0" := '0';
                                                                  "Priority Purch Disc Term Grp 1" := '1';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Purchase Discount Term Group (Customer) }
    { 11012307;;Purch Discount Term Group 2;Code20;TableRelation="Discount Term Group".Code WHERE (Level=CONST(Job),
                                                                                                   Type=FILTER(Common|Purchase));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Purch Discount Term Group 2" = '' THEN BEGIN
                                                                  "Priority Purch Disc Term Grp 2" := '';
                                                                END ELSE BEGIN
                                                                  "Priority Purch Disc Term Grp 0" := '0';
                                                                  "Priority Purch Disc Term Grp 2" := '2';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Purchase Discount Term Group (Job) }
    { 11012308;;Sales Discount Term Group 1;Code20;TableRelation="Discount Term Group".Code WHERE (Level=CONST(Customer),
                                                                                                   Type=FILTER(Common|Sales));
                                                   OnValidate=BEGIN
                                                                //>> 161011 ITERO.AC RAD043 New field "Sales Discount Term Percent" (User must select either a Discount Term Group or a discount percentage)
                                                                IF ("Sales Discount Term Group 1" <> '') AND ("Sales Discount Term Percent" <> 0) THEN
                                                                  ERROR(Text11128291, FIELDCAPTION("Sales Discount Term Group 1"));
                                                                //<< 161011 ITERO.AC RAD043
                                                                //**4PS
                                                                IF "Sales Discount Term Group 1" = '' THEN BEGIN
                                                                  "Priority Sales Disc Term Grp 1" := '';
                                                                END ELSE BEGIN
                                                                  "Priority Sales Disc Term Grp 0" := '0';
                                                                  "Priority Sales Disc Term Grp 1" := '1';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Sales Discount Term Group (Customer) }
    { 11012309;;Sales Discount Term Group 2;Code20;TableRelation="Discount Term Group".Code WHERE (Level=CONST(Job),
                                                                                                   Type=FILTER(Common|Sales));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Sales Discount Term Group 2" = '' THEN BEGIN
                                                                  "Priority Sales Disc Term Grp 2" := '';
                                                                END ELSE BEGIN
                                                                  "Priority Sales Disc Term Grp 0" := '0';
                                                                  "Priority Sales Disc Term Grp 2" := '2';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Sales Discount Term Group (Job) }
    { 11012310;;Default Rate Code  ;Code10        ;TableRelation="Budget Rate".Code WHERE (Project Filter=FIELD(No.));
                                                   CaptionML=ENU=Default Rate Code }
    { 11012311;;Priority Purch Disc Term Grp 0;Code1;
                                                   CaptionML=ENU=Priority Purchase Discount Term Group (Company);
                                                   SQL Data Type=Variant;
                                                   Numeric=Yes }
    { 11012312;;Priority Purch Disc Term Grp 1;Code1;
                                                   CaptionML=ENU=Priority Purchase Discount Term Group (Customer);
                                                   SQL Data Type=Variant;
                                                   Numeric=Yes }
    { 11012313;;Priority Purch Disc Term Grp 2;Code1;
                                                   CaptionML=ENU=Priority Purchase Discount Term Group (Job);
                                                   SQL Data Type=Variant;
                                                   Numeric=Yes }
    { 11012316;;Priority Sales Disc Term Grp 0;Code1;
                                                   CaptionML=ENU=Priority Sales Discount Term Group (Company);
                                                   SQL Data Type=Variant;
                                                   Numeric=Yes }
    { 11012317;;Priority Sales Disc Term Grp 1;Code1;
                                                   CaptionML=ENU=Priority Sales Discount Term Group (Customer);
                                                   SQL Data Type=Variant;
                                                   Numeric=Yes }
    { 11012318;;Priority Sales Disc Term Grp 2;Code1;
                                                   CaptionML=ENU=Priority Sales Discount Term Group (Job);
                                                   SQL Data Type=Variant;
                                                   Numeric=Yes }
    { 11012320;;Cost Component Filter;Code10      ;FieldClass=FlowFilter;
                                                   TableRelation="Cost Component".Code;
                                                   OnValidate=BEGIN
                                                                SETFILTER("Cost Component Filter","Cost Component Filter");
                                                              END;

                                                   CaptionML=ENU=Cost Component Filter }
    { 11012325;;Cost Object Filter ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Cost Object Filter }
    { 11012330;;FSC Type Code      ;Code10        ;TableRelation="FSC Type";
                                                   CaptionML=ENU=FSC Type Code }
    { 11012340;;Delivered Project  ;Code20        ;TableRelation="Delivered Project";
                                                   CaptionML=ENU=Delivered Project;
                                                   Editable=No }
    { 11012350;;Delivered Object   ;Code20        ;TableRelation="Delivered Object".No.;
                                                   CaptionML=ENU=Delivered Object;
                                                   Editable=No }
    { 11012360;;Affiliation No.    ;Text20        ;CaptionML=ENU=Affiliation No. }
    { 11012370;;SFB Code           ;Code10        ;TableRelation="SFB Code";
                                                   CaptionML=ENU=SFB Code }
    { 11012380;;Location Type 1    ;Option        ;CaptionML=ENU=Location Type 1;
                                                   OptionCaptionML=ENU=Inside,Outside;
                                                   OptionString=Inside,Outside }
    { 11012385;;Location Type 2    ;Option        ;CaptionML=ENU=Location Type 2;
                                                   OptionCaptionML=ENU=Home,Export;
                                                   OptionString=Home,Export }
    { 11012387;;Print Manday Register;Boolean     ;CaptionML=ENU=Print Manday Register }
    { 11012390;;Closed Costs       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Ledger Entry"."Closed Costs" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                            Job No.=FIELD(Project Filter),
                                                                                                            Posting Date=FIELD(Cumulation Filter)));
                                                   CaptionML=ENU=Closed Costs;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012391;;Closed Revenues    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Ledger Entry"."Closed Revenues" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                               Job No.=FIELD(Project Filter),
                                                                                                               Posting Date=FIELD(Cumulation Filter)));
                                                   CaptionML=ENU=Closed Revenues;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012392;;Closed Costs Period;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Ledger Entry"."Closed Costs" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                            Job No.=FIELD(Project Filter),
                                                                                                            Posting Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Closed Costs Period;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012393;;Closed Revenues Period;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Ledger Entry"."Closed Revenues" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                               Job No.=FIELD(Project Filter),
                                                                                                               Posting Date=FIELD(Period Filter)));
                                                   CaptionML=ENU=Closed Revenues Period;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012400;;Received/Not Inv. Hours;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Order Control Line"."Hours Rcd. Not Invoiced" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                                                  Project No.=FIELD(Project Filter),
                                                                                                                                  Date=FIELD(Cumulation Filter),
                                                                                                                                  Purchase Action=FIELD(Purchase Action Filter),
                                                                                                                                  Cost Type=CONST(Labor)));
                                                   CaptionML=ENU=Received/Not Inv. Hours;
                                                   Editable=No }
    { 11012405;;Plot Price         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Project Principal"."Plot Price" WHERE (Project No.=FIELD(No.)));
                                                   CaptionML=ENU=Plot Price;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012406;;Project Plot Price ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Project Principal"."Plot Price" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                           Project No.=FIELD(Project Filter)));
                                                   CaptionML=ENU=Project Plot Price;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012410;;Deliver            ;Option        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF Deliver <> xRec.Deliver THEN
                                                                  "Ship To Location" := '';
                                                              END;

                                                   CaptionML=ENU=Deliver;
                                                   OptionCaptionML=ENU=" ,Location,Project Location";
                                                   OptionString=[ ,Location,Project Location] }
    { 11012420;;Ship To Location   ;Code20        ;TableRelation=IF (Deliver=CONST(Project Location)) "Project Location".Code WHERE (Project No.=FIELD(No.))
                                                                 ELSE IF (Deliver=CONST(Location)) Location.Code;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Ship To Location" <> '') THEN
                                                                  TESTFIELD(Deliver);
                                                              END;

                                                   CaptionML=ENU=Ship To Location }
    { 11012425;;Use Starting Date ProjectElem;Boolean;
                                                   CaptionML=ENU=Use Starting Date Project/Element }
    { 11012430;;Excl. from Project Control;Boolean;CaptionML=ENU=Exclude from Project Control }
    { 11012431;;Planning Base Line Date;Date      ;CaptionML=ENU=Planning Base Line Date }
    { 11012432;;Modified after Scheduling;Boolean ;InitValue=Yes;
                                                   CaptionML=ENU=Modified after Scheduling;
                                                   Editable=No }
    { 11012433;;Project Planning Activities;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Exist("Project Planning Activity" WHERE (Project No.=FIELD(No.)));
                                                   CaptionML=ENU=Project Planning Activities;
                                                   Editable=No }
    { 11012440;;End Date Guarantee ;Date          ;CaptionML=ENU=End Date Guarantee }
    { 11012450;;Requested Quote Receipt Date;Date ;CaptionML=ENU=Requested Quote Receipt Date }
    { 11012460;;Vendors React before;Date         ;CaptionML=ENU=Vendors React before }
    { 11012470;;Civil Engineering Project;Boolean ;CaptionML=ENU=Civil Engineering Project }
    { 11012475;;RAW                ;Boolean       ;OnValidate=VAR
                                                                LicensePermission@1100525000 : Record 2000000043;
                                                              BEGIN
                                                                //**4PS
                                                                IF RAW THEN BEGIN
                                                                  LicensePermission.GET(LicensePermission."Object Type"::Table, DATABASE::"Installment Overview");
                                                                  IF LicensePermission."Execute Permission" <> LicensePermission."Execute Permission"::Yes THEN
                                                                    ERROR(Text11012037);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=RAW System }
    { 11012480;;Conveyance Tax     ;Boolean       ;OnValidate=BEGIN
                                                                //**4PS
                                                                MODIFY(TRUE); //Needed cause ProjRec is read in next codeunit //C018022 TRUE added
                                                                BuyersMgt.RecalcPlotInstallments("No.", '');
                                                              END;

                                                   CaptionML=ENU=Conveyance Tax }
    { 11012481;;Ready for Building Date;Date      ;OnValidate=BEGIN
                                                                //**4PS
                                                                MODIFY(TRUE); //Needed cause ProjRec is read in next codeunit //C018022 TRUE added
                                                                BuyersMgt.RecalcPlotInstallments("No.", '');
                                                              END;

                                                   CaptionML=ENU=Ready for Building Date }
    { 11012490;;Home Page          ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=Home Page }
    { 11012500;;Invoice Layout Code;Code10        ;TableRelation="Invoice Layout";
                                                   CaptionML=ENU=Invoice Layout Code }
    { 11012550;;Plant Job Order    ;Boolean       ;OnValidate=VAR
                                                                lvLicensePlantExtendedCU@1100485000 : Codeunit 11012579;
                                                                lvText11012000@1100485001 : TextConst 'ENU=You do not have license for the Granule ''Plant Extended''.';
                                                              BEGIN
                                                                //**4PS
                                                                IF (NOT "Plant Job Order") THEN BEGIN
                                                                  IF ("Plant Location" <> '') THEN
                                                                    FIELDERROR("Plant Job Order", STRSUBSTNO(Text11012035, "Plant Job Order", FIELDCAPTION("Plant Location")));
                                                                  IF ("Plant Type" <> '') THEN
                                                                    FIELDERROR("Plant Job Order", STRSUBSTNO(Text11012035, "Plant Job Order", FIELDCAPTION("Plant Type")));
                                                                  "Plant No." := '';
                                                                  "Cost Component Plant" := '';
                                                                END ELSE BEGIN
                                                                  TESTFIELD("Small Project", TRUE);
                                                                  IF NOT lvLicensePlantExtendedCU.LicenseTablePlantItem(FALSE,0) THEN
                                                                    ERROR(lvText11012000);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Plant Job Order }
    { 11012551;;Plant Type         ;Code20        ;TableRelation="Plant Type";
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Plant Type" = '') THEN
                                                                  "Plant No." := ''
                                                                ELSE BEGIN
                                                                  TESTFIELD("Plant Job Order", TRUE);
                                                                  IF ("Plant No." <> '') THEN
                                                                    VALIDATE("Plant No.");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Plant Type }
    { 11012552;;Plant No.          ;Code10        ;TableRelation="Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Plant No." = '' THEN
                                                                  EXIT;

                                                                TESTFIELD("Plant Job Order", TRUE);
                                                              END;

                                                   CaptionML=ENU=Plant No. }
    { 11012553;;Cost Component Plant;Code10       ;TableRelation="Cost Component Plant";
                                                   OnValidate=VAR
                                                                lvPlantSetupRec@1100485002 : Record 11012550;
                                                              BEGIN
                                                                //**4PS
                                                                IF "Cost Component Plant" = '' THEN
                                                                  EXIT;

                                                                TESTFIELD("Plant Job Order", TRUE);

                                                                lvPlantSetupRec.GET;
                                                                IF ("Cost Component Plant" = lvPlantSetupRec."Cost Component Acquisition") THEN
                                                                  FIELDERROR("Cost Component Plant",STRSUBSTNO(Text11012036,
                                                                    lvPlantSetupRec.FIELDCAPTION("Cost Component Acquisition"),lvPlantSetupRec."Cost Component Acquisition"));
                                                                IF ("Cost Component Plant" = lvPlantSetupRec."Cost Component Rent") THEN
                                                                  FIELDERROR("Cost Component Plant",STRSUBSTNO(Text11012036,
                                                                    lvPlantSetupRec.FIELDCAPTION("Cost Component Rent"),lvPlantSetupRec."Cost Component Rent"));
                                                              END;

                                                   CaptionML=ENU=Cost Component Plant }
    { 11012554;;Plant Location     ;Code20        ;TableRelation="Plant Location";
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Plant Location" = '' THEN
                                                                  EXIT;

                                                                TESTFIELD("Plant Job Order", TRUE);
                                                              END;

                                                   CaptionML=ENU=Plant Location }
    { 11012621;;Current Employee   ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Current Employee }
    { 11012622;;Responsible Employee;Boolean      ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Project Responsible Person" WHERE (Project No.=FIELD(Main Project),
                                                                                                         Employee No.=FIELD(Current Employee)));
                                                   CaptionML=ENU=Responsible Employee;
                                                   Editable=No }
    { 11012630;;Summary Sheet Project;Code20      ;TableRelation="Standard Summary Sheet";
                                                   OnValidate=VAR
                                                                SummarySheetLineRec@1100485000 : Record 11012064;
                                                                lvUpdateBudget@1100525000 : Boolean;
                                                                lvBudgetLine@1210190000 : Record 11012001;
                                                              BEGIN
                                                                //**4PS
                                                                IF (CurrFieldNo = FIELDNO("Summary Sheet Project")) AND ("Summary Sheet Project" <> xRec."Summary Sheet Project") THEN BEGIN
                                                                  TESTFIELD("Budget Fixed", FALSE);
                                                                  //Summary Adjustment
                                                                  lvBudgetLine.RESET;
                                                                  lvBudgetLine.SETCURRENTKEY("Project No.");
                                                                  lvBudgetLine.SETRANGE("Project No.","No.");
                                                                  lvBudgetLine.SETFILTER(Adjustment, '<>%1', '');
                                                                  lvBudgetLine.SETRANGE(Option,'');
                                                                  lvBudgetLine.SETRANGE("Extension Contract",'');
                                                                  lvBudgetLine.SETRANGE("Budget Summary Line", TRUE);
                                                                  IF NOT lvBudgetLine.ISEMPTY THEN BEGIN
                                                                    ERROR(Text11012047, Text11012030c);
                                                                  END;
                                                                  //Summary Adjustment
                                                                  SummarySheetLineRec.SETRANGE("Project No.", "No.");
                                                                  SummarySheetLineRec.SETFILTER("Contract No.", '%1', '');
                                                                  SummarySheetLineRec.SETFILTER("Plot No.", '%1', '');
                                                                  SummarySheetLineRec.SETFILTER("House Model", '%1', '');
                                                                  SummarySheetLineRec.SETFILTER("Main Group", '%1', '');
                                                                  SummarySheetLineRec.SETFILTER(Group, '%1', '');
                                                                  SummarySheetLineRec.SETFILTER("Sub Group", '%1', '');
                                                                  SummarySheetLineRec.SETFILTER(Option, '%1', '');
                                                                  IF SummarySheetLineRec.FINDFIRST THEN BEGIN
                                                                    IF NOT CONFIRM(Text11012028, FALSE) THEN
                                                                      ERROR('')
                                                                    ELSE
                                                                      SummarySheetLineRec.DELETEALL;
                                                                    lvUpdateBudget := TRUE;
                                                                  END;
                                                                  IF ("Summary Sheet Project" <> '') THEN BEGIN
                                                                    SummarySheetLineRec.CopyTemplate2("Summary Sheet Project", "No.", '', '', '', '', '', '', '');
                                                                    SummarySheetLineRec.SETRANGE("Project No.", "No.");
                                                                    SummarySheetLineRec.SETFILTER("Contract No.", '%1', '');
                                                                    SummarySheetLineRec.SETFILTER("Plot No.", '%1', '');
                                                                    SummarySheetLineRec.SETFILTER(Option, '%1', '');
                                                                    IF SummarySheetLineRec.FINDFIRST THEN BEGIN
                                                                      SummarySheetLineRec.ReCalcSummaryLines('');
                                                                      lvUpdateBudget := TRUE;
                                                                    END;
                                                                  END;
                                                                  //db.sn, 18-01-11: M25055
                                                                  //(sql-problem in table 11012064: function UpdateControlStatus executes ProjRec.modify)
                                                                  IF lvUpdateBudget THEN BEGIN
                                                                    //SummarySheetLineRec.UpdateBudgetLines(TRUE);
                                                                    SummarySheetLineRec.UpdateBudgetLines(FALSE,'');
                                                                    "Cost Control Up to Date" := FALSE;
                                                                  END;
                                                                  //db.en, 18-01-11: M25055
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Summary Sheet Project }
    { 11012631;;Summary Sheet Contract;Code20     ;TableRelation="Standard Summary Sheet";
                                                   OnValidate=VAR
                                                                lvSummarySheetLineRec@1100525000 : Record 11012064;
                                                              BEGIN
                                                                //**4PS
                                                                IF (CurrFieldNo = FIELDNO("Summary Sheet Contract")) AND ("Summary Sheet Contract" <> xRec."Summary Sheet Contract") THEN BEGIN
                                                                  lvSummarySheetLineRec.SETRANGE("Project No.", "No.");
                                                                  lvSummarySheetLineRec.SETFILTER("Contract No.", '<>%1', '');
                                                                  lvSummarySheetLineRec.SETFILTER("Plot No.", '%1', '');
                                                                  lvSummarySheetLineRec.SETFILTER(Option, '%1', '');
                                                                  IF lvSummarySheetLineRec.FINDFIRST THEN
                                                                    MESSAGE(Text11012029, Text11012030a);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Summary Sheet Contract }
    { 11012632;;Summary Sheet Option;Code20       ;TableRelation="Standard Summary Sheet";
                                                   OnValidate=VAR
                                                                lvSummarySheetLineRec@1100525000 : Record 11012064;
                                                              BEGIN
                                                                //**4PS
                                                                IF (CurrFieldNo = FIELDNO("Summary Sheet Option")) AND ("Summary Sheet Option" <> xRec."Summary Sheet Option") THEN BEGIN
                                                                  lvSummarySheetLineRec.SETRANGE("Project No.", "No.");
                                                                  lvSummarySheetLineRec.SETFILTER("Contract No.", '%1', '');
                                                                  lvSummarySheetLineRec.SETFILTER("Plot No.", '<>%1', '');
                                                                  lvSummarySheetLineRec.SETFILTER(Option, '<>%1', '');
                                                                  IF lvSummarySheetLineRec.FINDFIRST THEN
                                                                    MESSAGE(Text11012029, Text11012030b);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Summary Sheet Option }
    { 11012633;;Summary Sheet MMR  ;Code20        ;TableRelation="Standard Summary Sheet";
                                                   OnValidate=VAR
                                                                lvSummarySheetLineRec@1100525000 : Record 11012064;
                                                              BEGIN
                                                                //**4PS
                                                                IF (CurrFieldNo = FIELDNO("Summary Sheet Option")) AND ("Summary Sheet Option" <> xRec."Summary Sheet Option") THEN BEGIN
                                                                  lvSummarySheetLineRec.SETRANGE("Project No.", "No.");
                                                                  lvSummarySheetLineRec.SETFILTER("Contract No.", '%1', '');
                                                                  lvSummarySheetLineRec.SETFILTER("Plot No.", '<>%1', '');
                                                                  lvSummarySheetLineRec.SETFILTER(Option, '<>%1', '');
                                                                  IF lvSummarySheetLineRec.FINDFIRST THEN
                                                                    MESSAGE(Text11012029, Text11012030b);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Summary Sheet Major Maintenance }
    { 11012634;;Summary Sheet Contract 2;Code20   ;TableRelation="Standard Summary Sheet";
                                                   OnValidate=VAR
                                                                lvSummarySheetLineRec@1100525000 : Record 11012064;
                                                              BEGIN
                                                                //**4PS
                                                                IF (CurrFieldNo = FIELDNO("Summary Sheet Contract")) AND ("Summary Sheet Contract" <> xRec."Summary Sheet Contract") THEN BEGIN
                                                                  lvSummarySheetLineRec.SETRANGE("Project No.", "No.");
                                                                  lvSummarySheetLineRec.SETFILTER("Contract No.", '<>%1', '');
                                                                  lvSummarySheetLineRec.SETFILTER("Plot No.", '%1', '');
                                                                  lvSummarySheetLineRec.SETFILTER(Option, '%1', '');
                                                                  IF lvSummarySheetLineRec.FINDFIRST THEN
                                                                    MESSAGE(Text11012029, Text11012030a);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Summary Sheet Contract 2;
                                                   Description=DP00901 }
    { 11012640;;Invoice Contact Person;Code20     ;TableRelation=IF (Prospect=FILTER(<>'')) Contact.No. WHERE (Type=CONST(Person),
                                                                                                               Company No.=FIELD(Prospect))
                                                                                                               ELSE IF (Prospect=FILTER('')) Contact.No. WHERE (Company No.=CONST(____________________),
                                                                                                                                                                Type=CONST(Person));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                CALCFIELDS("Invoice Contact Person Name");
                                                              END;

                                                   CaptionML=ENU=Invoice Contact Person }
    { 11012641;;Invoice Contact Person Name;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Invoice Contact Person)));
                                                   CaptionML=ENU=Invoice  Contact Name;
                                                   Editable=No }
    { 11012642;;Principal Contact Person;Code20   ;TableRelation=IF (Prospect=FILTER(<>'')) Contact.No. WHERE (Type=CONST(Person),
                                                                                                               Company No.=FIELD(Prospect))
                                                                                                               ELSE IF (Prospect=FILTER('')) Contact.No. WHERE (Company No.=CONST(____________________),
                                                                                                                                                                Type=CONST(Person));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                CALCFIELDS("Principal Contact Person Name");
                                                              END;

                                                   CaptionML=ENU=Principal Contact Person }
    { 11012643;;Principal Contact Person Name;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Principal Contact Person)));
                                                   CaptionML=ENU=Principal Contact Name;
                                                   Editable=No }
    { 11012655;;Preregistration WIP Account;Code20;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purchases & Payables Setup"."Preregistration WIP Account" WHERE (Primary Key=CONST()));
                                                   CaptionML=ENU=Preregistration WIP Account;
                                                   Editable=No }
    { 11012658;;Preregistered WIP  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("G/L Entry".Amount WHERE (G/L Account No.=FIELD(Preregistration WIP Account),
                                                                                             Job No.=FIELD(No.),
                                                                                             Posting Date=FIELD(Cumulation Filter)));
                                                   CaptionML=ENU=Preregistered WIP;
                                                   Editable=No }
    { 11012670;;Invoiced Price     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job Ledger Entry"."Total Price (LCY)" WHERE (Entry Type=CONST(Sale),
                                                                                                                  Job No.=FIELD(No.),
                                                                                                                  Posting Date=FIELD(Cumulation Filter)));
                                                   CaptionML=ENU=Invoiced Price;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012680;;Internal Project   ;Boolean       ;OnValidate=VAR
                                                                lvJobRec@1100525000 : Record 11072003;
                                                                lvProjectPrincipalRec@1100525001 : Record 11012005;
                                                              BEGIN
                                                                //**4PS
                                                                IF NOT "Internal Project" THEN BEGIN
                                                                  "Master Company" := '';  //DP00847
                                                                  "Master Project" := '';
                                                                  "Master Element" := '';
                                                                END ELSE BEGIN
                                                                  lvJobRec.RESET;
                                                                  lvJobRec.SETRANGE("Master Project", "No.");
                                                                  IF lvJobRec.FINDFIRST THEN
                                                                    ERROR(Text11012043, "No.");
                                                                  JobsSetup.GET;
                                                                  //CheckAndSet Project Principal
                                                                  lvProjectPrincipalRec.RESET;
                                                                  lvProjectPrincipalRec.SETRANGE("Project No.", "No.");
                                                                  lvProjectPrincipalRec.SETFILTER(Principal, '<> %1', JobsSetup."Principal Internal Project");
                                                                  IF lvProjectPrincipalRec.FINDFIRST THEN BEGIN
                                                                    ERROR(Text11012046, JobsSetup."Principal Internal Project");
                                                                  END;

                                                                  IF JobsSetup."Principal Internal Project" <> '' THEN BEGIN
                                                                    lvProjectPrincipalRec.RESET;
                                                                    lvProjectPrincipalRec.SETRANGE("Project No.", "No.");
                                                                    lvProjectPrincipalRec.SETRANGE(Principal, JobsSetup."Principal Internal Project");
                                                                    IF NOT lvProjectPrincipalRec.FINDFIRST THEN BEGIN
                                                                      lvProjectPrincipalRec.INIT;
                                                                      lvProjectPrincipalRec.VALIDATE("Project No.", "No.");
                                                                      lvProjectPrincipalRec.VALIDATE(Principal, JobsSetup."Principal Internal Project");
                                                                      lvProjectPrincipalRec.VALIDATE("Cost Plus Customer", TRUE);
                                                                      //lvProjectPrincipalRec.INSERT(TRUE);  //M22688 0
                                                                      //M22688 sn

                                                                      lvProjectPrincipalRec."Main Project No." := "Main Project";
                                                                      lvProjectPrincipalRec."Invoice Text Installments" := Text;

                                                                      CheckProjectStatus(0);
                                                                      lvProjectPrincipalRec.InitRecord;
                                                                      lvProjectPrincipalRec.GetDefaultSalesSurcharges;

                                                                      lvProjectPrincipalRec.BuildRelationalStructure('INSERT');

                                                                      lvProjectPrincipalRec.INSERT;
                                                                      //M22688 en
                                                                    END;
                                                                    //>>IME109
                                                                    VALIDATE("Bill-to Customer No." ,lvProjectPrincipalRec.Principal);
                                                                    //<<IME109
                                                                  END;


                                                                  //SetDefaults
                                                                  "Cost Object Inter Project Cost" := JobsSetup."Cost Object Intern Charge Cost";
                                                                  "Cost Object Inter Project Rev"  := JobsSetup."Cost Object Intern Charge Rev";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Internal Project }
    { 11012681;;Master Project     ;Code20        ;TableRelation=IF (Master Company=FILTER('')) Job.No. WHERE (Internal Project=CONST(No));
                                                   OnValidate=VAR
                                                                Proj@1100525000 : Record 11072003;
                                                              BEGIN
                                                                //**4PS
                                                                //DP00847.c
                                                                IF NOT "Internal Project" THEN
                                                                  TESTFIELD("Master Project", '');

                                                                IF "Master Project" <> '' THEN BEGIN
                                                                  IF "Master Company" <> '' THEN
                                                                    Proj.CHANGECOMPANY("Master Company");
                                                                  Proj.GET("Master Project");
                                                                  Proj.TESTFIELD("Internal Project", FALSE);
                                                                END;
                                                                IF "Master Project" <> xRec."Master Project" THEN
                                                                  "Master Element" := '';
                                                              END;

                                                   OnLookup=VAR
                                                              Proj@1100529000 : Record 11072003;
                                                            BEGIN
                                                              //DP00847
                                                              IF "Master Company" <> '' THEN
                                                                Proj.CHANGECOMPANY("Master Company");
                                                              Proj.FILTERGROUP(9);
                                                              Proj.SETRANGE("Internal Project", FALSE);
                                                              Proj.FILTERGROUP(0);
                                                              Proj."No." := "Master Project";
                                                              IF PAGE.RUNMODAL(0, Proj) = ACTION::LookupOK THEN
                                                                VALIDATE("Master Project", Proj."No.");
                                                            END;

                                                   CaptionML=ENU=Master Project }
    { 11012682;;Cost Object Inter Project Cost;Code20;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Cost Type=FILTER(Material|Subcontracting|Plant|Sundry));
                                                   CaptionML=ENU=Cost Object Inter Project Costs }
    { 11012683;;Cost Object Inter Project Rev;Code20;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Cost Type=FILTER(Revenue));
                                                   CaptionML=ENU=Cost Object Inter Project Revenues }
    { 11012684;;Master Element     ;Code20        ;TableRelation=IF (Master Company=FILTER('')) "Project Element".Element WHERE (Project No.=FIELD(Master Project));
                                                   OnValidate=VAR
                                                                ProjElem@1100529000 : Record 11012010;
                                                              BEGIN
                                                                //**4PS
                                                                IF "Master Element" <> '' THEN
                                                                  TESTFIELD("Internal Project", TRUE);

                                                                //DP00847.sn
                                                                IF "Master Element" <> '' THEN BEGIN
                                                                  IF "Master Company" <> '' THEN
                                                                    ProjElem.CHANGECOMPANY("Master Company");
                                                                  ProjElem.GET("Master Project", "Master Element");
                                                                END;
                                                                //DP00847.en
                                                              END;

                                                   OnLookup=VAR
                                                              ProjElem@1100529000 : Record 11012010;
                                                            BEGIN
                                                              //DP00847
                                                              IF "Master Company" <> '' THEN
                                                                ProjElem.CHANGECOMPANY("Master Company");
                                                              ProjElem.FILTERGROUP(9);
                                                              ProjElem.SETRANGE("Project No.", "Master Project");
                                                              ProjElem.FILTERGROUP(0);
                                                              ProjElem.Element := "Master Element";
                                                              IF PAGE.RUNMODAL(0, ProjElem) = ACTION::LookupOK THEN
                                                                VALIDATE("Master Element", ProjElem.Element);
                                                            END;

                                                   CaptionML=ENU=Master Element }
    { 11012685;;Master Company     ;Text30        ;TableRelation=Company;
                                                   OnValidate=BEGIN
                                                                //DP00647
                                                                IF "Master Company" <> '' THEN BEGIN
                                                                  IF "Master Company" = COMPANYNAME THEN
                                                                    FIELDERROR("Master Company");
                                                                  TESTFIELD("Internal Project", TRUE);
                                                                END;

                                                                IF "Master Company" <> xRec."Master Company" THEN BEGIN
                                                                  "Master Project" := '';
                                                                  "Master Element" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Master Company }
    { 11012690;;Available as Reference;Option     ;CaptionML=ENU=Available as Reference;
                                                   OptionCaptionML=ENU=Always,On Request,Never;
                                                   OptionString=Always,On Request,Never }
    { 11012700;;VAT Indicator (Purchase);Option   ;CaptionML=ENU=VAT Indicator;
                                                   OptionCaptionML=ENU=VAT,No VAT;
                                                   OptionString=VAT,No VAT }
    { 11012710;;Service Warranty Code;Code10      ;TableRelation="Service Warranty";
                                                   CaptionML=ENU=Service Warranty Code }
    { 11012720;;Job Inventory Location/Shelf;Boolean;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF (NOT "Job Inventory Location/Shelf") THEN
                                                                  EXIT;

                                                                InventSetupRec.GET;
                                                                InventSetupRec.TESTFIELD("Level Job Inventory Loc./Shelf", InventSetupRec."Level Job Inventory Loc./Shelf"::Project);
                                                              END;

                                                   CaptionML=ENU=Job Inventory by Location/Shelf }
    { 11012721;;Job Inventory By Stock Release;Boolean;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF (NOT "Job Inventory By Stock Release") THEN
                                                                  EXIT;

                                                                InventSetupRec.GET;
                                                                InventSetupRec.TESTFIELD("Level Job Inventory Stock Rel.", InventSetupRec."Level Job Inventory Stock Rel."::Project);
                                                              END;

                                                   CaptionML=ENU=Job Inventory by Stock Release }
    { 11012730;;Forecast Level     ;Option        ;CaptionML=ENU=Forecast Level;
                                                   OptionCaptionML=ENU=Element - Cost Object,Element - Cost Type,Cost Object,Cost Type,Cost Component;
                                                   OptionString=Element - Cost Object,Element - Cost Type,Cost Object,Cost Type,Cost Component;
                                                   Description=SEEV.CC }
    { 11012740;;Company Filter     ;Text30        ;FieldClass=FlowFilter;
                                                   TableRelation=Company;
                                                   CaptionML=ENU=Company Filter }
    { 11012750;;Fill Element with (KPD);Option    ;CaptionML=ENU=Fill Element with;
                                                   OptionCaptionML=ENU=Sort Code,Tender Code;
                                                   OptionString=Sort Code,Tender Code }
    { 11012751;;Fill Cost Object with (KPD);Option;CaptionML=ENU=Fill Cost Object with;
                                                   OptionCaptionML=ENU=Code,Sort Code;
                                                   OptionString=Code,Sort Code }
    { 11012760;;Reference Date (Currency);Date    ;CaptionML=ENU=Reference Date (Currency);
                                                   Description=DP00883 }
    { 11012800;;Created from Service Loc. No.;Code20;
                                                   TableRelation="Service Location";
                                                   CaptionML=ENU=Created from Service Location No. }
    { 11012850;;Assembly Project   ;Boolean       ;CaptionML=ENU=Assembly Project }
    { 11012870;;Revision           ;Boolean       ;CaptionML=ENU=Revision }
    { 11012871;;Revision Rule      ;Code20        ;TableRelation="Revision Rule";
                                                   CaptionML=ENU=Revision Rule Formula }
    { 11012872;;Reference Date Revision;Date      ;CaptionML=ENU=Reference Date Revision }
    { 11012874;;SharePoint Phase   ;Option        ;CaptionML=ENU=SharePoint Phase;
                                                   OptionCaptionML=ENU=" ,Development,Design and Preparation,Production";
                                                   OptionString=[ ,Development,Design and Preparation,Production] }
    { 11012875;;SharePoint Status  ;Option        ;CaptionML=ENU=SharePoint Status;
                                                   OptionCaptionML=ENU=New,Add,Modified,Updated,,,,,Active,Inactive;
                                                   OptionString=New,Add,Modified,Updated,,,,,Active,Inactive;
                                                   Editable=Yes }
    { 11012876;;Phase 1 Company    ;Text30        ;TableRelation=Company;
                                                   CaptionML=ENU=Phase 1 Company }
    { 11012877;;Phase 2 Company    ;Text30        ;TableRelation=Company;
                                                   CaptionML=ENU=Phase 2 Company }
    { 11012878;;Phase 3 Company    ;Text30        ;TableRelation=Company;
                                                   CaptionML=ENU=Phase 3 Company }
    { 11012879;;Make SharePoint Site;Boolean      ;CaptionML=ENU=Make Project Site }
    { 11012880;;Shipping Agent Code;Code10        ;TableRelation="Shipping Agent";
                                                   CaptionML=ENU=Shipping Agent Code }
    { 11012881;;SharePoint Site Generated;Boolean ;OnValidate=BEGIN
                                                                //**4PS
                                                                CheckIfChangingSiteURLAllowed;
                                                              END;

                                                   CaptionML=ENU=Project Site Generated }
    { 11012882;;SharePoint Site URL;Text100       ;OnValidate=BEGIN
                                                                //**4PS
                                                                CheckIfChangingSiteURLAllowed;
                                                              END;

                                                   ExtendedDatatype=URL;
                                                   CaptionML=ENU=Project Site URL }
    { 11012883;;Save Int. Doc In SharePoint;Boolean;
                                                   CaptionML=ENU=Save Internal Document In SharePoint }
    { 11012890;;Rental Unit Invoice by;Option     ;CaptionML=ENU=Rental Unit Invoice by;
                                                   OptionCaptionML=ENU=Customer,Rental Unit;
                                                   OptionString=Customer,RentalUnit }
    { 11012895;;Allow Precl. R./Prov. Loss;Option ;CaptionML=ENU=Allow Preclosure Result / Provision Loss;
                                                   OptionCaptionML=ENU=No,Preclosure Result,Provision Loss,Preclosure Result and Provision Loss;
                                                   OptionString=No,Preclosure Result,Provision Loss,Preclosure Result and Provision Loss }
    { 11012920;;Days Notify Buyer  ;Integer       ;CaptionML=ENU=Days Notify Buyer }
    { 11012921;;Days Repair Before ;Integer       ;CaptionML=ENU=Days Repair Before }
    { 11012922;;Days Delayed Repair;Integer       ;CaptionML=ENU=Days Delayed Repair }
    { 11012923;;Days Notify Guarantee Fund;Integer;CaptionML=ENU=Days Notify Guarantee Fund }
    { 11012924;;Days End Service Period;Integer   ;CaptionML=ENU=Days End Service Period }
    { 11012925;;Joint Company      ;Text30        ;TableRelation=Company;
                                                   OnValidate=VAR
                                                                lvJobRec@1100525000 : Record 11072003;
                                                              BEGIN
                                                                //**4PS
                                                                IF (CurrFieldNo = FIELDNO("Joint Company")) AND
                                                                   ("Joint Company" <> xRec."Joint Company") AND
                                                                   ("Joint Job No." <> '') THEN
                                                                BEGIN
                                                                  IF CONFIRM(Text11012042, FALSE, "Joint Job No." , xRec."Joint Company") THEN BEGIN
                                                                    lvJobRec.CHANGECOMPANY(xRec."Joint Company");
                                                                    IF lvJobRec.GET(xRec."Joint Job No.") THEN BEGIN
                                                                      lvJobRec."Joint Company" := '';
                                                                      lvJobRec."Joint Job No." := '';
                                                                      lvJobRec."One to One Join" := FALSE;
                                                                      lvJobRec.MODIFY;
                                                                    END;
                                                                    "Joint Job No." := '';
                                                                  END ELSE BEGIN
                                                                    ERROR('')
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Joint Company }
    { 11012926;;Joint Job No.      ;Code20        ;CaptionML=ENU=Joint Job No.;
                                                   Editable=No }
    { 11012927;;One to One Join    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=ENU=One to One Join }
    { 11012928;;Estate Owner       ;Code20        ;TableRelation=Contact.No.;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                CALCFIELDS("Estate Owner Name");
                                                                IF "Small Project" AND ("Estate Owner" <> xRec."Estate Owner") THEN
                                                                  UpdateWorkAddress(9,"Estate Owner");
                                                              END;

                                                   CaptionML=ENU=Estate Owner }
    { 11012929;;Estate Owner Name  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Estate Owner)));
                                                   CaptionML=ENU=Estate Owner Name;
                                                   Editable=No }
    { 11012930;;Small Project Status;Option       ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Project Status" = "Project Status"::Finished THEN
                                                                  ERROR(Text11012007);

                                                                CASE "Small Project Status" OF
                                                                  "Small Project Status"::Invoice:
                                                                    IF CONFIRM(Text11012020,TRUE) THEN BEGIN
                                                                      VALIDATE("Project Status", "Project Status"::"Administrative Finished");
                                                                      IF "Technical Finished Date" = 0D THEN
                                                                        "Technical Finished Date" := TODAY;
                                                                    END;
                                                                  "Small Project Status"::Finished:
                                                                    BEGIN
                                                                      IF "Technical Finished Date" = 0D THEN
                                                                        "Technical Finished Date" := TODAY;
                                                                      VALIDATE("Project Status", "Project Status"::"Technical Finished");
                                                                    END;
                                                                END;

                                                                IF ("Technical Finished Date" <> 0D) AND
                                                                   (CurrFieldNo = FIELDNO("Small Project Status")) AND
                                                                   ("Small Project Status" < "Small Project Status"::Finished) AND
                                                                   (xRec."Small Project Status" >= "Small Project Status"::Finished)
                                                                THEN BEGIN
                                                                  VALIDATE("Project Status", "Project Status"::Production);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Small Project Status;
                                                   OptionCaptionML=ENU=Not Printed,Printed,Finished,Concept,Invoice,Cancelled;
                                                   OptionString=Not Printed,Printed,Finished,Concept,Invoice,Cancelled }
    { 11012931;;Created by         ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Created by;
                                                   Editable=No }
    { 11012932;;Maximum Amount to Invoice;Decimal ;CaptionML=ENU=Maximum Amount to Invoice }
    { 11012933;;Regular Costs      ;Decimal       ;CaptionML=ENU=Regular Costs }
    { 11012934;;Recoverable Costs  ;Decimal       ;CaptionML=ENU=Recoverable Costs }
    { 11012935;;Internal/External Action;Option   ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Internal/External Action" <> xRec."Internal/External Action" THEN
                                                                  "Action by" := '';
                                                              END;

                                                   CaptionML=ENU=Internal/External Action;
                                                   OptionCaptionML=ENU=Internal,External;
                                                   OptionString=Internal,External }
    { 11012936;;Action by          ;Code20        ;TableRelation=IF (Internal/External Action=CONST(Internal)) Employee.No.
                                                                 ELSE IF (Internal/External Action=CONST(External)) Vendor.No.;
                                                   CaptionML=ENU=Action by }
    { 11012937;;Public notary      ;Code20        ;TableRelation=Customer.No.;
                                                   CaptionML=ENU=Public notary }
    { 11012938;;Withhold %         ;Decimal       ;CaptionML=ENU=Withhold % Last Installment }
    { 11012939;;Estate No.         ;Code20        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Small Project" AND ("Estate No." <> xRec."Estate No.") THEN
                                                                  UpdateWorkAddress(10,"Estate No.");
                                                              END;

                                                   CaptionML=ENU=Estate No. }
    { 11012940;;Building           ;Text30        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Small Project" AND (Building <> xRec.Building) THEN
                                                                  UpdateWorkAddress(11,Building);
                                                              END;

                                                   CaptionML=ENU=Building }
    { 11012941;;Floor              ;Text10        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Small Project" AND (Floor <> xRec.Floor) THEN
                                                                  UpdateWorkAddress(12,Floor);
                                                              END;

                                                   CaptionML=ENU=Floor }
    { 11012942;;Department         ;Text30        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Small Project" AND (Department <> xRec.Department) THEN
                                                                  UpdateWorkAddress(13,Department);
                                                              END;

                                                   CaptionML=ENU=Department }
    { 11012943;;Room               ;Text10        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Small Project" AND (Room <> xRec.Room) THEN
                                                                  UpdateWorkAddress(14,Room);
                                                              END;

                                                   CaptionML=ENU=Room }
    { 11012944;;Urgency Code       ;Code10        ;TableRelation="Urgency Codes by Customer".Urgency WHERE (Customer No.=FIELD(Bill-to Customer No.));
                                                   OnValidate=VAR
                                                                AppointRec@1210190000 : Record 11012081;
                                                                UrgencyRec@1210190004 : Record 11012090;
                                                                LineNo@1210190001 : Integer;
                                                                HelpDec@1210190002 : Decimal;
                                                                HelpDec2@1210190003 : Decimal;
                                                                NewUtcDate@1100525001 : DateTime;
                                                                OldUtcDate@1100525002 : DateTime;
                                                                TimeUsed@1100525003 : Duration;
                                                              BEGIN
                                                                //**4PS
                                                                IF xRec."Urgency Code" <> '' THEN BEGIN
                                                                  AppointRec.SETRANGE("Project No.","No.");
                                                                  AppointRec.SETRANGE("Appointment Type",AppointRec."Appointment Type"::Execution);
                                                                  AppointRec.SETRANGE("Urgency Code",xRec."Urgency Code");
                                                                  AppointRec.DELETEALL;
                                                                END;

                                                                CALCFIELDS("Urgency Description", "Response Time");
                                                                IF "Urgency Code" <> '' THEN BEGIN
                                                                  AppointRec.RESET;
                                                                  AppointRec.SETRANGE("Project No.","No.");
                                                                  AppointRec.SETRANGE("Appointment Type",AppointRec."Appointment Type"::Execution);
                                                                  IF AppointRec.FINDLAST THEN
                                                                    LineNo := AppointRec."Line No."
                                                                  ELSE
                                                                    LineNo := 0;
                                                                  AppointRec.INIT;
                                                                  AppointRec."Project No." := "No.";
                                                                  AppointRec."Appointment Type" := AppointRec."Appointment Type"::Execution;
                                                                  AppointRec."Line No." := LineNo + 10000;
                                                                  AppointRec."Urgency Code" := "Urgency Code";
                                                                  AppointRec."Starting Date" := "Creation Date";
                                                                  AppointRec."Start Time" := "Creation Time" + ("Response Time" * 3600000);
                                                                  UrgencyRec.GET("Bill-to Customer No.","Urgency Code");
                                                                  AppointRec.VALIDATE(Type, UrgencyRec."Appointment Type");
                                                                  HelpDec := "Response Time" / 24;
                                                                  HelpDec2 := 1;
                                                                  IF HelpDec > HelpDec2 THEN BEGIN
                                                                    HelpDec := ROUND(HelpDec,1,'<');
                                                                    IF ProjAddressRec.GET("Bill-to Customer No.","Project Address Code") THEN
                                                                      AppointRec."Starting Date" := CheckCalendarDate(ProjAddressRec."Base Calendar",AppointRec."Starting Date" + HelpDec)
                                                                    ELSE
                                                                      AppointRec."Starting Date" := AppointRec."Starting Date" + HelpDec;
                                                                  END ELSE
                                                                    IF AppointRec."Start Time" < "Creation Time" THEN
                                                                      IF ProjAddressRec.GET("Bill-to Customer No.","Project Address Code") THEN
                                                                        AppointRec."Starting Date" := CheckCalendarDate(ProjAddressRec."Base Calendar",AppointRec."Starting Date" + 1)
                                                                      ELSE
                                                                        AppointRec."Starting Date" := AppointRec."Starting Date" + 1;
                                                                  OldUtcDate := CREATEDATETIME(AppointRec."Starting Date",AppointRec."Start Time");
                                                                  TimeUsed := (UrgencyRec."Resolve Time (Hours)" * 3600000);
                                                                  NewUtcDate := OldUtcDate + TimeUsed;
                                                                  AppointRec."Ending Date" := DT2DATE(NewUtcDate);
                                                                  AppointRec."End Time" := DT2TIME(NewUtcDate);
                                                                  AppointRec.INSERT;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Urgency Code }
    { 11012945;;Urgency Description;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Urgency Codes by Customer".Description WHERE (Customer No.=FIELD(Bill-to Customer No.),
                                                                                                                     Urgency=FIELD(Urgency Code)));
                                                   CaptionML=ENU=Urgency Description;
                                                   Editable=No }
    { 11012946;;Response Time      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Urgency Codes by Customer"."Response Time (Hours)" WHERE (Customer No.=FIELD(Bill-to Customer No.),
                                                                                                                                 Urgency=FIELD(Urgency Code)));
                                                   CaptionML=ENU=Response Time;
                                                   Editable=No }
    { 11012947;;Creation Time      ;Time          ;CaptionML=ENU=Creation Time;
                                                   Editable=No }
    { 11012948;;Area Team          ;Text30        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Small Project" AND ("Area Team" <> xRec."Area Team") THEN
                                                                  UpdateWorkAddress(15,"Area Team");
                                                              END;

                                                   CaptionML=ENU=Area Team }
    { 11012949;;Phone No. Area Team;Text30        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Small Project" AND ("Phone No. Area Team" <> xRec."Phone No. Area Team") THEN
                                                                  UpdateWorkAddress(16,"Phone No. Area Team");
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. Area Team }
    { 11012950;;Calculate B Amounts based on;Option;
                                                   CaptionML=ENU=Calculate B Amounts based on;
                                                   OptionCaptionML=ENU=Labor Amount,Invoice Amount;
                                                   OptionString=Labor Amount,Invoice Amount }
    { 11012951;;Name Action By     ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Action by)));
                                                   CaptionML=ENU=Name Action By;
                                                   Editable=No }
    { 11012952;;Method Last Installment;Option    ;CaptionML=ENU=System Last Installment;
                                                   OptionCaptionML=ENU=" ,Depot,Guarantee";
                                                   OptionString=[ ,Depot,Guarantee] }
    { 11012955;;Guarantee Period   ;DateFormula   ;CaptionML=ENU=Guarantee Period }
    { 11012956;;Options Sold By    ;Option        ;CaptionML=ENU=Options Sold By;
                                                   OptionCaptionML=ENU=Development Company,Building Company;
                                                   OptionString=Development Company,Building Company }
    { 11012960;;Commision Date     ;Date          ;CaptionML=ENU=Commision Date }
    { 11012965;;Commision Date Principal;Date     ;OnValidate=BEGIN
                                                                //**4PS
                                                                SyncProjPrincipal;
                                                              END;

                                                   CaptionML=ENU=Commision Date Principal }
    { 11012969;;Finish report to Principal;Date   ;CaptionML=ENU=Finish report to Principal }
    { 11012970;;Housebuilding Project;Boolean     ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF (("Housebuilding Project") AND ("Joint Company" = '')) THEN BEGIN
                                                                  JobsSetup.GET;
                                                                  "Joint Company" := JobsSetup."Related Company";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Housebuilding Project }
    { 11012971;;Budget Level for Options;Option   ;CaptionML=ENU=Budget Level for Options;
                                                   OptionCaptionML=ENU=Detailed,Option-Cost Type,Option-Cost Object,Option-Element-Cost Type,Option-Element-Cost Object;
                                                   OptionString=Detailed,Option-Cost Type,Option-Cost Object,Option-Element-Cost Type,Option-Element-Cost Object }
    { 11012972;;Last Invoice date  ;Date          ;CaptionML=ENU=Last Invoice date;
                                                   Editable=No }
    { 11012973;;Requested Starting Time;Time      ;CaptionML=ENU=Starting Time (Requested) }
    { 11012974;;Disable Export Losa (COBRA);Boolean;
                                                   CaptionML=ENU=Disable Export to Losa (COBRA) }
    { 11012975;;Posting Element Mandatory;Boolean ;InitValue=No;
                                                   CaptionML=ENU=Posting Element Mandatory }
    { 11012976;;Adviser            ;Code20        ;TableRelation=Contact;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                CALCFIELDS("Name Adviser");
                                                              END;

                                                   CaptionML=ENU=Adviser }
    { 11012977;;Name Adviser       ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Adviser)));
                                                   CaptionML=ENU=Name Adviser;
                                                   Editable=No }
    { 11012978;;Planned Hours      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Project Planning Activity"."Planned Hours" WHERE (Project No.=FIELD(No.)));
                                                   CaptionML=ENU=Planned Hours;
                                                   Editable=No }
    { 11012980;;Prognosis per Element;Boolean     ;OnValidate=BEGIN
                                                                //**4PS
                                                                TESTFIELD("Prognosis Level", "Prognosis Level"::Detailed);
                                                              END;

                                                   CaptionML=ENU=Prognosis per Element }
    { 11012985;;Maintenance And Renovation;Boolean;OnValidate=VAR
                                                                SettlementQuantity@1100525000 : Record 11072243;
                                                              BEGIN
                                                                //**4PS
                                                                IF NOT "Maintenance And Renovation" THEN BEGIN
                                                                  SettlementQuantity.SETRANGE("Project No.", "No.");
                                                                  IF NOT SettlementQuantity.ISEMPTY THEN
                                                                    FIELDERROR("Maintenance And Renovation");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Major Maintenance Project }
    { 11012986;;Budget Level for Settl. Q.;Option ;CaptionML=ENU=Budget Level for Settlement Quantities;
                                                   OptionCaptionML=ENU=Detailed,Cost Type,Cost Object,Element-Cost Type,Element-Cost Object;
                                                   OptionString=Detailed,SQ-Cost Type,SQ-Cost Object,SQ-Element-Cost Type,SQ-Element-Cost Object }
    { 11012987;;Plots Involved     ;Integer       ;CaptionML=ENU=Plots Involved }
    { 11012990;;Long Lease         ;Boolean       ;CaptionML=ENU=Long Lease }
    { 11012992;;Provision Loss     ;Boolean       ;OnValidate=BEGIN
                                                                //**4PS
                                                                CheckProjectAuthorization(FIELDCAPTION("Provision Loss"));
                                                              END;

                                                   CaptionML=ENU=Provision Loss }
    { 11012993;;Provision Loss Result;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Ledger Entry"."Actual Provision Result" WHERE (Main Project No.=FIELD(Main Project),
                                                                                                                       Job No.=FIELD(Project Filter),
                                                                                                                       Entry Type=CONST(Usage),
                                                                                                                       Posting Date=FIELD(Cumulation Filter)));
                                                   CaptionML=ENU=Provision Loss Result;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012994;;Multipurpose Filter;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Multipurpose Filter }
    { 11012995;;Archive Location   ;Text30        ;CaptionML=ENU=Archive Location }
    { 11012996;;Process Status Filter;Option      ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Process Status Filter;
                                                   OptionCaptionML=ENU=Open,Partly Processed,Released,Cancelled,Processed;
                                                   OptionString=Open,Partly Processed,Released,Cancelled,Processed }
    { 11012997;;Discipline         ;Code10        ;TableRelation=Discipline;
                                                   CaptionML=ENU=Discipline }
    { 11012998;;Liquidity Prognosis;Option        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF (("Starting Date" = 0D) OR ("Ending Date" = 0D)) AND
                                                                   ("Liquidity Prognosis" <> "Liquidity Prognosis"::"Not") THEN
                                                                  ERROR(Text11012044);
                                                              END;

                                                   CaptionML=ENU=Liquidity Prognosis;
                                                   OptionCaptionML=ENU=Not,Equable Division,Specific Division;
                                                   OptionString=Not,Equable Division,Specific Division }
    { 11012999;;Element Fixed      ;Boolean       ;CaptionML=ENU=Element Fixed }
    { 11013010;;Project Portal Project;Boolean    ;CaptionML=ENU=Project Portal Project;
                                                   Editable=No }
    { 11013020;;Quote Subsite Generated;Boolean   ;OnValidate=BEGIN
                                                                //**4PS
                                                                CheckIfChangingSiteURLAllowed;
                                                              END;

                                                   CaptionML=ENU=Quote Subsite Generated }
    { 11013030;;Change Request No. ;Code20        ;TableRelation="Change Request";
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                CALCFIELDS("Change Request Description");
                                                              END;

                                                   CaptionML=ENU=Change Request No.;
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 11013031;;Change Request Description;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Change Request".Description WHERE (No.=FIELD(Change Request No.)));
                                                   CaptionML=ENU=Change Request Description;
                                                   Editable=No }
    { 11127975;;Export to Symbrio  ;Boolean        }
    { 11128100;;preCalc. DateTime  ;DateTime      ;CaptionML=ENU=Last calculated at;
                                                   Description=RFC101 }
    { 11128101;;preCalc. Revenues  ;Decimal       ;CaptionML=ENU=Revenues;
                                                   Description=RFC101 }
    { 11128102;;preCalc. Real Costs;Decimal       ;CaptionML=ENU=Actual Costs;
                                                   Description=RFC101 }
    { 11128103;;preCalc. Balance   ;Decimal       ;CaptionML=ENU=Balance;
                                                   Description=RFC101 }
    { 11128104;;preCalc. Prognosis Balance;Decimal;CaptionML=ENU=Prognosis Balance;
                                                   Description=RFC101 }
    { 11128105;;preCalc. Hours totals;Decimal     ;CaptionML=ENU=Hours totals;
                                                   Description=RFC101 }
    { 11128106;;preCalc. LastInvDate;Date         ;CaptionML=ENU=Last date posted invoice;
                                                   Description=RFC101 }
    { 11128107;;preCalc. NewCostFound;Boolean     ;CaptionML=ENU=New cost found after invoicing;
                                                   Description=RFC101 }
    { 11128155;;Wage Component Type Filter;Option ;FieldClass=FlowFilter;
                                                   OptionString=Hours,Days,Expenses,Expense hours;
                                                   Description=IME155 }
    { 11128270;;Price List Code    ;Code10        ;TableRelation="Customer Price List" WHERE (Display Price List=CONST(Yes));
                                                   CaptionML=ENU=Price List Code;
                                                   Description=SEEV }
    { 11128271;;Time Last Modified ;Time          ;CaptionML=ENU=Time Last Modified }
    { 11128272;;Invoiced (ready)   ;Boolean       ;CaptionML=ENU=Invoiced (ready) }
    { 11128273;;Delivery Address Note;Text30      ;CaptionML=ENU=Delivery Address Note }
    { 11128290;;Sales Discount Term Percent;Decimal;
                                                   OnValidate=BEGIN
                                                                //>> 161011 ITERO.AC RAD043 New field "Sales Discount Term Percent" (User must select either a Discount Term Group or a discount percentage)
                                                                IF ("Sales Discount Term Percent" > 99.99) OR ("Sales Discount Term Percent" < -99.99) THEN
                                                                  ERROR(Text11128292, FIELDCAPTION("Sales Discount Term Percent"));

                                                                IF ("Sales Discount Term Group 1" <> '') AND ("Sales Discount Term Percent" <> 0) THEN
                                                                  ERROR(Text11128290, FIELDCAPTION("Sales Discount Term Group 1"));
                                                                //<< 161011 ITERO.AC RAD043
                                                              END;

                                                   CaptionML=ENU=Sales Discount percent }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Description                       }
    {    ;Bill-to Customer No.                     }
    {    ;Description                              }
    { No ;Status                                   }
    {    ;Main Project                             }
    {    ;City,Address                             }
    {    ;Project Status                           }
    {    ;Last Date Modified,Project Manager,Project Status,Single/Main/Sub Project }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Description,Bill-to Customer No.,Starting Date,Project Status }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot change %1 because one or more entries are associated with this %2.';
      JobsSetup@1004 : Record 315;
      PostCode@1015 : Record 225;
      Job@1014 : Record 11072003;
      Cust@1006 : Record 18;
      Cont@1005 : Record 5050;
      ContBusinessRelation@1001 : Record 5054;
      NoSeriesMgt@1010 : Codeunit 396;
      DimMgt@1012 : Codeunit 408;
      Text003@1022 : TextConst 'ENU=You must run the %1 and %2 functions to create and post the completion entries for this job.';
      Text004@1017 : TextConst 'ENU=This will delete any unposted WIP entries for this job and allow you to reverse the completion postings for this job.\\Do you wish to continue?';
      Text005@1019 : TextConst 'ENU=Contact %1 %2 is related to a different company than customer %3.';
      Text006@1018 : TextConst 'ENU=Contact %1 %2 is not related to customer %3.';
      Text007@1009 : TextConst 'ENU=Contact %1 %2 is not related to a customer.';
      Text008@1002 : TextConst 'ENU=%1 %2 must not be blocked with type %3.';
      Text009@1008 : TextConst 'ENU=You must run the %1 function to reverse the completion entries that have already been posted for this job.';
      MoveEntries@1003 : Codeunit 361;
      Text010@1007 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      Text011@1023 : TextConst 'ENU=%1 must be equal to or earlier than %2.';
      Text012@1011 : TextConst 'ENU=You cannot set %1 to %2, as this %3 has set %4 to %5.';
      Text013@1013 : TextConst 'ENU=A usage link cannot be enabled for the entire %1 because usage without the usage link already has been posted.';
      Text014@1016 : TextConst 'ENU=Do you want to set the %1 on every %2 of type %3?';
      Text015@1020 : TextConst 'ENU=%1 must be %2 because job WIP general ledger entries already were posted with this setting.';
      Text016@1021 : TextConst 'ENU=%1 cannot be modified because the job has associated job WIP entries.';
      Text017@1024 : TextConst 'ENU=The selected %1 requires the %2 to have %3 enabled.';
      Text018@1025 : TextConst 'ENU=%1 is set to %2.';
      UpdateJobTaskDimQst@1026 : TextConst 'ENU=You have changed a dimension.\\Do you want to update the lines?';
      Text019@1100525015 : TextConst 'ENU=Principal,Customer';
      Text020@1100525016 : TextConst 'ENU=Select Bill-to Customer from';
      Text11012000@1100525014 : TextConst 'ENU=Do you want create a sub project to project %1?';
      Text11012002@11012002 : TextConst 'ENU=You have no permission to change %1';
      Text11012003@11012003 : TextConst 'ENU=Status not allowed, will be set by Project Closing session';
      Text11012004@11012004 : TextConst 'ENU=Status not allowed, will be set by Project Archiving session';
      Text11012005@11012005 : TextConst 'ENU=Project archived, turning back status not allowed';
      Text11012006@11012006 : TextConst 'ENU=Status not allowed, close project first';
      Text11012007@11012007 : TextConst 'ENU=Project closed, turning back status not allowed';
      Text11012008@11012008 : TextConst 'ENU=Copy work address to project address ?';
      Text11012009@11012009 : TextConst 'ENU=Too many sub projects for main project %1';
      Text11012010@11012010 : TextConst 'ENU=%1 %2 is %3.';
      Text11012011@11012011 : TextConst 'ENU=%1 %2 has %3 %4.';
      OperatingSystemMgt@1100525500 : Codeunit 11012364;
      PurchSetup@1100485013 : Record 312;
      UserSetup@1210190015 : Record 91;
      BudgetRec@1210190010 : Record 11012001;
      BudgetSummarySheetRec@1100485010 : Record 11012064;
      ProjAddressRec@1210190009 : Record 222;
      CustomerRec@1210190008 : Record 18;
      ProjElemRec@1210190007 : Record 11012010;
      ProjTypeRec@1210190006 : Record 11012009;
      UarHrsSetupRec@1210190002 : Record 11012600;
      OperationsBySmallProjRec@1100485000 : Record 11012094;
      SalesSetup@1100485002 : Record 311;
      InventSetupRec@1100485015 : Record 313;
      ProgressLevelRec@1100525000 : Record 11012036;
      TmpEst@1100409001 : TEMPORARY Record 11012151;
      BuyersMgt@1100485008 : Codeunit 11012500;
      AssemblyProjectManagement@1100526100 : Codeunit 11012248;
      Text11012012@11012013 : TextConst 'ENU=You cannot delete a project if it is not finished.';
      Text11012013@11012014 : TextConst 'ENU=Project is not archived, do you want to continue ?';
      Text11012014@11012015 : TextConst 'ENU=Project not removed';
      Text11012015@1210190000 : TextConst 'ENU=Contact %1 has no Supervisor Function';
      Text11012018@1210190012 : TextConst 'ENU=%1 %2 already exists';
      Text11012019@1210190013 : TextConst 'ENU=Update Work Address %1 for Customer %2 ?';
      Text11012020@1210190014 : TextConst 'ENU=Change project status to Administrative Finished ?';
      Text11012021@1210190019 : TextConst 'ENU=Copy Customer Address to Project Address ?';
      Text11012024@1100485001 : TextConst 'ENU=The Project Address can only be changed in the Leading Company %1';
      Text11012025@1100485003 : TextConst 'ENU=Principal %1 of main project %2 differs from principal %3 of subproject';
      Text11012026@1100485006 : TextConst 'ENU=Adres does not exist, would you like to create it?';
      gSpecialSerieNos@1100485012 : Code[10];
      Text11012028@1100485009 : TextConst 'ENU=Remove the existing summarysheet?';
      Text11012029@1100525004 : TextConst 'ENU=There are already summary sheet lines present on %1 level, if necessary these sumary sheets must be updated manually.';
      Text11012030a@1100525005 : TextConst 'ENU=extension contract';
      Text11012030b@1100525006 : TextConst 'ENU=option';
      Text11012030c@1210190003 : TextConst 'ENU=Adjustment';
      Text11012035@1100485023 : TextConst 'ENU=''%1'' not allowed, %2 is filled';
      Text11012036@1100485024 : TextConst 'ENU=may not be %1 ''%2''';
      Text11012037@1100485011 : TextConst 'ENU=You can only use RAW if you have a licence to do so.';
      Text11012038@1100485014 : TextConst 'ENU=%1 can not be changed by user %2, because the total cost and/or total revenues in the Project Ledger is not zero.';
      Text11012039@1100525001 : TextConst 'ENU=Progress Lines already exists. Still change %1?';
      Text11012040@1100525002 : TextConst 'ENU=Do you want to replace existing preferred locations?';
      Text11012041@1100525003 : TextConst 'ENU=Do you want to use the %1 of the Customer Card?';
      Text11012042@1100525007 : TextConst 'ENU=Remove the existing Relation with Project %1 in Company %2?';
      Text11012043@1100525008 : TextConst 'ENU=Project %1 is already in use as Master Project.';
      Text11012044@1100525009 : TextConst 'ENU=Start Date and/or Ending Date of the project has to be filled';
      Text11012046@1100525011 : TextConst 'ENU=Only %1 as Project Principal allowed';
      DPA_Management@1100000999 : Codeunit 11012783;
      FromFeatureRelationType@1100525012 : Integer;
      FromFeatureCode@1100525013 : Code[20];
      CopyCustDataSkipped@1210190001 : Boolean;
      Text11012047@1210190004 : TextConst 'ENU=There are summary sheet lines present on %1 level, cannot change summary sheet.';
      Text11012048@1210190005 : TextConst 'ENU=Progress Lines already exist. Changing to value %1 not allowed.';
      Text11012049@1210190011 : TextConst 'ENU=%1 is already linked to %2 %3\First unlink, please.';
      Text11012050@1100528700 : TextConst 'ENU=%1 %2 is blocked.';
      ProjectSiteMgt@1100528300 : Codeunit 11012282;
      Text11012060@1100528600 : TextConst 'ENU=Shift Work Orders accordingly?';
      SkipModify@1100528400 : Boolean;
      Text11012070@1100409000 : TextConst 'ENU=Open Card of Project %1 ?';
      "*** 4PSSE *"@1100285001 : Integer;
      SkipInsertSettlementSheet@1100285000 : Boolean;
      AltDefaultNoSerieCode@1100285002 : Code[10];
      JobToRecRef@1100285500 : Record 11072003;
      RecRef@1100285501 : RecordRef;
      SymbrioFunctions@1100285502 : Codeunit 11127975;
      ExportToSymbrio@1100285503 : Codeunit 11127979;
      Text11128001@1100285003 : TextConst 'ENU=You cannot select a Main Project with status %1.';
      Text11128002@1100285100 : TextConst 'ENU=You not allowed to change Project No.!';
      Text11128290@1100285504 : TextConst 'ENU=You cannot enter a discount percentage if %1 has been selected';
      Text11128291@1100285505 : TextConst 'ENU=You cannot select %1 if a Sales Discount Percentage has been entered';
      Text11128292@1100285506 : TextConst 'ENU=Illegal value in %1 (valid range is -99,99 to 99,99)';

    PROCEDURE AssistEdit@2(OldJob@1000 : Record 11072003) : Boolean;
    BEGIN
      WITH Job DO BEGIN
        RESET; //**4PS.n
        Job := Rec;
        JobsSetup.GET;
        IF "Small Project" THEN BEGIN
          JobsSetup.TESTFIELD("Small Project Nos.");
          IF NoSeriesMgt.SelectSeries(JobsSetup."Small Project Nos.",OldJob."No. Series","No. Series") THEN BEGIN
            NoSeriesMgt.SetSeries("No.");
            //**4PS.sn
            IF Job.FIND('=') THEN
              ERROR(Text11012018, TABLECAPTION, "No.")
            ELSE BEGIN
              "Project Type" := DetermineProjectTypeSeries(COMPANYNAME);
            //**4PS.en
              Rec := Job;
              EXIT(TRUE);
            END;
          END;
        END ELSE BEGIN
          //**4PS.sn
          IF "Assembly Project" THEN BEGIN
            JobsSetup.TESTFIELD("Job Nos.");
            IF NoSeriesMgt.SelectSeries(JobsSetup."Assembly Project Nos.",OldJob."No. Series","No. Series") THEN BEGIN
              NoSeriesMgt.SetSeries("No.");
              IF Job.FIND('=') THEN
                ERROR(Text11012018, TABLECAPTION, "No.")
              ELSE BEGIN
                "Project Type" := DetermineProjectTypeSeries(COMPANYNAME);
                Rec := Job;
                EXIT(TRUE);
              END;
            END;
          END ELSE BEGIN
          //**4PS.en
            JobsSetup.TESTFIELD("Job Nos.");
            IF NoSeriesMgt.SelectSeries(JobsSetup."Job Nos.",OldJob."No. Series","No. Series") THEN BEGIN
              NoSeriesMgt.SetSeries("No.");
              //**4PS.sn
              IF Job.FIND('=') THEN
                ERROR(Text11012018, TABLECAPTION, "No.")
              ELSE BEGIN
                "Project Type" := DetermineProjectTypeSeries(COMPANYNAME);
              //**4PS.en
                Rec := Job;
                EXIT(TRUE);
              END; //**4PS.n
            END;
          END; //**4PS.n
        END;
      END;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.SaveDefaultDim(DATABASE::Job,"No.",FieldNumber,ShortcutDimCode);
      UpdateJobTaskDimension(FieldNumber,ShortcutDimCode);
    END;

    LOCAL PROCEDURE UpdateBillToCont@27(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Cust@1001 : Record 18;
    BEGIN
      IF Cust.GET(CustomerNo) THEN BEGIN
        IF Cust."Primary Contact No." <> '' THEN
          "Bill-to Contact No." := Cust."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
          ContBusRel.SETRANGE("No.","Bill-to Customer No.");
          IF ContBusRel.FINDFIRST THEN
            "Bill-to Contact No." := ContBusRel."Contact No.";
        END;
        Contact := Cust.Contact;
      END;
    END;

    LOCAL PROCEDURE JobLedgEntryExist@5() : Boolean;
    VAR
      JobLedgEntry@1000 : Record 11072005;
    BEGIN
      CLEAR(JobLedgEntry);
      JobLedgEntry.SETCURRENTKEY("Job No.");
      JobLedgEntry.SETRANGE("Job No.","No.");
      //EXIT(JobLedgEntry.FINDFIRST); //**4PS.o
      EXIT(NOT JobLedgEntry.ISEMPTY); //**4PS.n
    END;

    LOCAL PROCEDURE JobPlanningLineExist@3() : Boolean;
    VAR
      JobPlanningLine@1000 : Record 11020401;
    BEGIN
      JobPlanningLine.INIT;
      JobPlanningLine.SETRANGE("Job No.","No.");
      EXIT(JobPlanningLine.FINDFIRST);
    END;

    LOCAL PROCEDURE UpdateBillToCust@26(ContactNo@1000 : Code[20]);
    VAR
      ContBusinessRelation@1005 : Record 5054;
      Cust@1004 : Record 18;
      Cont@1003 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Bill-to Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          Contact := Cont.Name
        ELSE
          IF Cust.GET("Bill-to Customer No.") THEN
            Contact := Cust.Contact
          ELSE
            Contact := '';
      END ELSE BEGIN
        Contact := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF "Bill-to Customer No." = '' THEN
          VALIDATE("Bill-to Customer No.",ContBusinessRelation."No.")
        ELSE
          IF "Bill-to Customer No." <> ContBusinessRelation."No." THEN
            ERROR(Text006,Cont."No.",Cont.Name,"Bill-to Customer No.");
      END ELSE
        ERROR(Text007,Cont."No.",Cont.Name);
    END;

    LOCAL PROCEDURE UpdateCust@4();
    BEGIN
      IF "Bill-to Customer No." <> '' THEN BEGIN
        Cust.GET("Bill-to Customer No.");
        Cust.TESTFIELD("Customer Posting Group");
        Cust.TESTFIELD("Bill-to Customer No.",'');
        IF Cust.Blocked = Cust.Blocked::All THEN
          ERROR(
            Text012,
            FIELDCAPTION("Bill-to Customer No."),
            "Bill-to Customer No.",
            Cust.TABLECAPTION,
            FIELDCAPTION(Blocked),
            Cust.Blocked);
        //**4PS.so
        //"Bill-to Name" := Cust.Name;
        //"Bill-to Name 2" := Cust."Name 2";
        //"Bill-to Address" := Cust.Address;
        //"Bill-to Address 2" := Cust."Address 2";
        //"Bill-to City" := Cust.City;
        //"Bill-to Post Code" := Cust."Post Code";
        //"Bill-to Country/Region Code" := Cust."Country/Region Code";
        //**4PS.eo
        //**4PS.sn
        Name := Cust.Name;
        "Name 2" := Cust."Name 2";
        Address := Cust.Address;
        "Address 2" := Cust."Address 2";
        City := Cust.City;
        "Post Code" := Cust."Post Code";
        "Country/Region Code" := Cust."Country/Region Code";
        County := Cust.County;
        //**4PS.en
        "Invoice Currency Code" := Cust."Currency Code";
        "Customer Disc. Group" := Cust."Customer Disc. Group";
        "Customer Price Group" := Cust."Customer Price Group";
        "Language Code" := Cust."Language Code";
        //"Bill-to County" := Cust.County; //**4PS.o
        Reserve := Cust.Reserve;
        UpdateBillToCont("Bill-to Customer No.");
      END ELSE BEGIN
        //**4PS.so
        //"Bill-to Name" := '';
        //"Bill-to Name 2" := '';
        //"Bill-to Address" := '';
        //"Bill-to Address 2" := '';
        //"Bill-to City" := '';
        //"Bill-to Post Code" := '';
        //"Bill-to Country/Region Code" := '';
        //**4PS.eo
        //**4PS.sn
        Name := '';
        "Name 2" := '';
        Address := '';
        "Address 2" := '';
        City := '';
        "Post Code" := '';
        "Country/Region Code" := '';
        County := '';
        //**4PS.en
        "Invoice Currency Code" := '';
        "Customer Disc. Group" := '';
        "Customer Price Group" := '';
        "Language Code" := '';
        //"Bill-to County" := '';  //**4PS.o
        VALIDATE("Bill-to Contact No.",'');
      END;
    END;

    PROCEDURE InitWIPFields@1();
    BEGIN
      //**4PS.so: fields disabled
      //"WIP Posting Date" := 0D;
      //"WIP G/L Posting Date" := 0D;
      //**4PS.eo
    END;

    PROCEDURE TestBlocked@6();
    BEGIN
      IF Blocked = Blocked::" " THEN
        EXIT;
      ERROR(Text008,TABLECAPTION,"No.",Blocked);
    END;

    PROCEDURE CurrencyUpdatePlanningLines@10();
    VAR
      JobPlanningLine@1000 : Record 11020401;
    BEGIN
      JobPlanningLine.SETRANGE("Job No.","No.");
      IF JobPlanningLine.FIND('-') THEN
        REPEAT
          JobPlanningLine.CALCFIELDS("Qty. Transferred to Invoice");
          IF JobPlanningLine."Qty. Transferred to Invoice" <> 0 THEN
            ERROR(Text000,FIELDCAPTION("Currency Code"),TABLECAPTION);
          JobPlanningLine.VALIDATE("Currency Code","Currency Code");
          JobPlanningLine.VALIDATE("Currency Date");
          JobPlanningLine.MODIFY;
        UNTIL JobPlanningLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CurrencyUpdatePurchLines@17();
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      MODIFY(TRUE); //C018022 TRUE added
      PurchLine.SETRANGE("Job No.","No.");
      IF PurchLine.FINDSET THEN
        REPEAT
          PurchLine.VALIDATE("Job Currency Code","Currency Code");
          PurchLine.VALIDATE("Job Task No.");
          PurchLine."Modified by" := USERID; //DP00469
          PurchLine."Last Date Modified" := TODAY;//DP00469
          PurchLine.MODIFY;
        UNTIL PurchLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ChangeJobCompletionStatus@7();
    VAR
      AllObjwithCaption@1003 : Record 2000000058;
      JobLedgerEntry@1000 : Record 11072005;
      JobCalcWIP@1001 : Codeunit 11072005;
      ReportCaption1@1002 : Text[250];
      ReportCaption2@1004 : Text[250];
      EndingDate@1005 : Date;
    BEGIN
      AllObjwithCaption.GET(AllObjwithCaption."Object Type"::Report,REPORT::"Job Calculate WIP");
      ReportCaption1 := AllObjwithCaption."Object Caption";
      AllObjwithCaption.GET(AllObjwithCaption."Object Type"::Report,REPORT::"Job Post WIP to G/L");
      ReportCaption2 := AllObjwithCaption."Object Caption";

      IF Complete THEN BEGIN
        IF "Ending Date" = 0D THEN
          EndingDate := WORKDATE
        ELSE
          EndingDate := "Ending Date";

        JobLedgerEntry.SETRANGE("Job No.","No.");
        REPEAT
          IF JobLedgerEntry."Posting Date" > EndingDate THEN
            EndingDate := JobLedgerEntry."Posting Date";
        UNTIL JobLedgerEntry.NEXT = 0;

        IF "Ending Date" < EndingDate THEN
          VALIDATE("Ending Date",EndingDate);
        MESSAGE(Text018,FIELDCAPTION("Ending Date"),"Ending Date");

        MESSAGE(Text003,ReportCaption1,ReportCaption2);
      END ELSE BEGIN
        JobCalcWIP.ReOpenJob("No.");
        "WIP Posting Date" := 0D;
        "Calc. WIP Method Used" := 0;
        MESSAGE(Text009,ReportCaption2);
      END;
    END;

    PROCEDURE DisplayMap@8();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::Job,GETPOSITION)
      ELSE
        MESSAGE(Text010);
    END;

    PROCEDURE GetQuantityAvailable@9(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];VariantCode@1002 : Code[10];InEntryType@1004 : 'Usage,Sale,Both';Direction@1005 : 'Positive,Negative,Both') QtyBase : Decimal;
    VAR
      JobLedgEntry@1003 : Record 11072005;
    BEGIN
      CLEAR(JobLedgEntry);
      JobLedgEntry.SETCURRENTKEY("Job No.","Entry Type",Type,"No.");
      JobLedgEntry.SETRANGE("Job No.","No.");
      IF NOT (InEntryType = InEntryType::Both) THEN
        JobLedgEntry.SETRANGE("Entry Type",InEntryType);
      JobLedgEntry.SETRANGE(Type,JobLedgEntry.Type::Item);
      JobLedgEntry.SETRANGE("No.",ItemNo);
      IF JobLedgEntry.FINDSET THEN
        REPEAT
          IF (JobLedgEntry."Location Code" = LocationCode) AND
             (JobLedgEntry."Variant Code" = VariantCode) AND
             ((Direction = Direction::Both) OR
              ((Direction = Direction::Positive) AND (JobLedgEntry."Quantity (Base)" > 0)) OR
              ((Direction = Direction::Negative) AND (JobLedgEntry."Quantity (Base)" < 0)))
          THEN
            QtyBase := QtyBase + JobLedgEntry."Quantity (Base)";

        UNTIL JobLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckDate@30();
    BEGIN
      IF ("Starting Date" > "Ending Date") AND ("Ending Date" <> 0D) THEN
        ERROR(Text011,FIELDCAPTION("Starting Date"),FIELDCAPTION("Ending Date"));
    END;

    PROCEDURE CalcAccWIPCostsAmount@15() : Decimal;
    BEGIN
      EXIT("Total WIP Cost Amount" + "Applied Costs G/L Amount");
    END;

    PROCEDURE CalcAccWIPSalesAmount@16() : Decimal;
    BEGIN
      EXIT("Total WIP Sales Amount" - "Applied Sales G/L Amount");
    END;

    PROCEDURE CalcRecognizedProfitAmount@11() : Decimal;
    BEGIN
      EXIT("Calc. Recog. Sales Amount" - "Calc. Recog. Costs Amount");
    END;

    PROCEDURE CalcRecognizedProfitPercentage@12() : Decimal;
    BEGIN
      IF "Calc. Recog. Sales Amount" <> 0 THEN
        EXIT((CalcRecognizedProfitAmount / "Calc. Recog. Sales Amount") * 100);
      EXIT(0);
    END;

    PROCEDURE CalcRecognizedProfitGLAmount@14() : Decimal;
    BEGIN
      EXIT("Calc. Recog. Sales G/L Amount" - "Calc. Recog. Costs G/L Amount");
    END;

    PROCEDURE CalcRecognProfitGLPercentage@13() : Decimal;
    BEGIN
      IF "Calc. Recog. Sales G/L Amount" <> 0 THEN
        EXIT((CalcRecognizedProfitGLAmount / "Calc. Recog. Sales G/L Amount") * 100);
      EXIT(0);
    END;

    PROCEDURE PercentCompleted@19() : Decimal;
    VAR
      JobCalcStatistics@1000 : Codeunit 11072019;
      CL@1001 : ARRAY [16] OF Decimal;
    BEGIN
      JobCalcStatistics.JobCalculateCommonFilters(Rec);
      JobCalcStatistics.CalculateAmounts;
      JobCalcStatistics.GetLCYCostAmounts(CL);
      IF CL[4] <> 0 THEN
        EXIT((CL[8] / CL[4]) * 100);
      EXIT(0);
    END;

    PROCEDURE PercentInvoiced@20() : Decimal;
    VAR
      JobCalcStatistics@1000 : Codeunit 11072019;
      PL@1002 : ARRAY [16] OF Decimal;
    BEGIN
      JobCalcStatistics.JobCalculateCommonFilters(Rec);
      JobCalcStatistics.CalculateAmounts;
      JobCalcStatistics.GetLCYPriceAmounts(PL);
      IF PL[12] <> 0 THEN
        EXIT((PL[16] / PL[12]) * 100);
      EXIT(0);
    END;

    PROCEDURE PercentOverdue@18() : Decimal;
    VAR
      JobPlanningLine@1000 : Record 11020401;
      QtyOverdue@1001 : Decimal;
      QtyOnSchedule@1002 : Decimal;
      QtyTotal@1003 : Decimal;
    BEGIN
      JobPlanningLine.SETRANGE("Job No.","No.");
      IF JobPlanningLine.FINDSET THEN
        REPEAT
          IF (JobPlanningLine."Planning Date" < WORKDATE) AND (JobPlanningLine."Remaining Qty." > 0) THEN
            QtyOverdue += 1
          ELSE
            QtyOnSchedule += 1;
        UNTIL JobPlanningLine.NEXT = 0;
      QtyTotal := QtyOverdue + QtyOnSchedule;
      IF QtyTotal <> 0 THEN
        EXIT((QtyOverdue / QtyTotal) * 100);
      EXIT(0);
    END;

    LOCAL PROCEDURE UpdateJobNoInReservationEntries@21();
    VAR
      ReservEntry@1001 : Record 337;
    BEGIN
      ReservEntry.SETFILTER("Source Type",'%1|%2',DATABASE::"Job Planning Line",DATABASE::"Job Journal Line");
      ReservEntry.SETRANGE("Source ID",xRec."No.");
      ReservEntry.MODIFYALL("Source ID","No.",TRUE);
    END;

    LOCAL PROCEDURE UpdateJobTaskDimension@22(FieldNumber@1001 : Integer;ShortcutDimCode@1000 : Code[20]);
    VAR
      JobTask@1002 : Record 11072600;
    BEGIN
      EXIT; //**4PS.n
      IF GUIALLOWED THEN
        IF NOT CONFIRM(UpdateJobTaskDimQst,FALSE) THEN
          EXIT;

      JobTask.SETRANGE("Job No.","No.");
      IF JobTask.FINDSET(TRUE) THEN
        REPEAT
          CASE FieldNumber OF
            1:
              JobTask.VALIDATE("Global Dimension 1 Code",ShortcutDimCode);
            2:
              JobTask.VALIDATE("Global Dimension 2 Code",ShortcutDimCode);
          END;
          JobTask.MODIFY(TRUE);
        UNTIL JobTask.NEXT = 0;
    END;

    PROCEDURE EstimatorName@1210190014() : Text[100];
    VAR
      EmplRec@11012001 : Record 5200;
    BEGIN
      //**4PS
      IF EmplRec.GET(Estimator) THEN
        EXIT(EmplRec.FullName)
      ELSE
        EXIT('');
    END;

    PROCEDURE SiteManagerName@11012253() : Text[100];
    VAR
      EmplRec@11012000 : Record 5200;
    BEGIN
      //**4PS
      IF EmplRec.GET("Site Manager") THEN
        EXIT(EmplRec.FullName)
      ELSE
        EXIT('');
    END;

    PROCEDURE NameProjectManager@11012251() : Text[100];
    VAR
      EmplRec@11012000 : Record 5200;
    BEGIN
      //**4PS
      IF EmplRec.GET("Project Manager") THEN
        EXIT(EmplRec.FullName)
      ELSE
        EXIT('');
    END;

    PROCEDURE ProjectEngineerName@11012250() : Text[100];
    VAR
      EmplRec@11012000 : Record 5200;
    BEGIN
      //**4PS
      IF EmplRec.GET("Project Engineer") THEN
        EXIT(EmplRec.FullName)
      ELSE
        EXIT('');
    END;

    PROCEDURE NameBuyerContact@11012267() : Text[100];
    VAR
      EmplRec@11012000 : Record 5200;
    BEGIN
      //**4PS
      IF EmplRec.GET(Buyercontact) THEN
        EXIT(EmplRec.FullName)
      ELSE
        EXIT('');
    END;

    PROCEDURE NameSupervisor@11012000() : Text[100];
    VAR
      ContRec@11012001 : Record 5050;
    BEGIN
      //**4PS
      IF ContRec.GET(Supervisor) THEN
        EXIT(ContRec.Name);

      EXIT('');
    END;

    PROCEDURE SetProjectTypeForSpecialSeries@1100485009(ISpecialSerieNos@1100485000 : Code[10]);
    BEGIN
      gSpecialSerieNos := ISpecialSerieNos;
    END;

    PROCEDURE DetermineProjectTypeSeries@11012252(CompName@1100485000 : Text[30]) : Code[20];
    VAR
      SeriesTypeRec@11012000 : Record 308;
      SeriesSeqRec@11012001 : Record 309;
      SeriesRelationRec@11012002 : Record 310;
      lvProjectNos@1100485001 : Code[10];
    BEGIN
      //**4PS
      JobsSetup.CHANGECOMPANY(CompName);
      SeriesTypeRec.CHANGECOMPANY(CompName);
      SeriesRelationRec.CHANGECOMPANY(CompName);
      SeriesSeqRec.CHANGECOMPANY(CompName);
      ProjTypeRec.CHANGECOMPANY(CompName);

      JobsSetup.GET;
      IF gSpecialSerieNos <> '' THEN BEGIN
        IF NOT SeriesTypeRec.GET(gSpecialSerieNos) THEN
          EXIT('');
        lvProjectNos := gSpecialSerieNos;
        gSpecialSerieNos := '';
      END ELSE BEGIN
        IF "Small Project" THEN BEGIN
          IF NOT SeriesTypeRec.GET(JobsSetup."Small Project Nos.") THEN
            EXIT('');
          lvProjectNos := JobsSetup."Small Project Nos.";
        END ELSE BEGIN
          IF NOT SeriesTypeRec.GET(JobsSetup."Job Nos.") THEN
            EXIT('');
          lvProjectNos := JobsSetup."Job Nos.";
        END;
      END;

      // search No. Series derived from main series as set in project setup
      SeriesRelationRec.SETRANGE(Code, lvProjectNos);
      IF SeriesRelationRec.FINDSET THEN BEGIN
        REPEAT
          SeriesSeqRec.SETRANGE("Series Code", SeriesRelationRec."Series Code");
          SeriesSeqRec.SETRANGE("Last No. Used", "No.");
          IF SeriesSeqRec.FINDFIRST THEN BEGIN
            SeriesTypeRec.GET(SeriesRelationRec."Series Code");
            IF ProjTypeRec.GET(SeriesTypeRec."Project Type") THEN
              IF ProjTypeRec."Department Code" <> '' THEN
                "Global Dimension 1 Code" := ProjTypeRec."Department Code";
            EXIT(SeriesTypeRec."Project Type");
          END;
        UNTIL SeriesRelationRec.NEXT = 0;
      END;

      // Search series defined in Project Setup
      SeriesSeqRec.SETRANGE("Series Code", lvProjectNos);
      SeriesSeqRec.SETRANGE("Last No. Used", "No.");
      IF SeriesSeqRec.FINDFIRST THEN BEGIN
        SeriesTypeRec.GET(lvProjectNos);
        IF ProjTypeRec.GET(SeriesTypeRec."Project Type") THEN
          IF ProjTypeRec."Department Code" <> '' THEN
            "Global Dimension 1 Code" := ProjTypeRec."Department Code";
        EXIT(SeriesTypeRec."Project Type");
      END;

      JobsSetup.CHANGECOMPANY(COMPANYNAME);
      JobsSetup.GET;

      // If nothing found, return initial value
      IF SeriesTypeRec.GET(JobsSetup."Job Nos.") THEN BEGIN
        IF ProjTypeRec.GET(SeriesTypeRec."Project Type") THEN
          IF ProjTypeRec."Department Code" <> '' THEN
            "Global Dimension 1 Code" := ProjTypeRec."Department Code";
        EXIT(SeriesTypeRec."Project Type");
      END ELSE
        EXIT('');
    END;

    PROCEDURE DetProjectTypeSeriesSimple@1100485008(CompName@1100485000 : Text[30]) : Code[20];
    VAR
      SeriesTypeRec@11012000 : Record 308;
    BEGIN
      //**4PS
      JobsSetup.CHANGECOMPANY(CompName);
      SeriesTypeRec.CHANGECOMPANY(CompName);
      ProjTypeRec.CHANGECOMPANY(CompName);

      JobsSetup.GET;

      IF NOT SeriesTypeRec.GET("No. Series") THEN
        EXIT('');

      IF ProjTypeRec.GET(SeriesTypeRec."Project Type") THEN
        IF ProjTypeRec."Department Code" <> '' THEN
          "Global Dimension 1 Code" := ProjTypeRec."Department Code";

      EXIT(SeriesTypeRec."Project Type");
    END;

    PROCEDURE CalcAllowedOnly@1100525016(VAR AllowedAmount@1100525001 : Decimal;VAR AllowedHours@1100525000 : Decimal);
    VAR
      DummyDec@1100525002 : Decimal;
    BEGIN
      //**4PS
      CalcAllowedAndPurchase(
        FALSE, FALSE, AllowedAmount, AllowedHours, DummyDec, DummyDec,
        DummyDec, DummyDec, DummyDec, DummyDec, DummyDec);
    END;

    PROCEDURE CalcAllowedPrevAllowAndPurch@11012264(VAR AllowedAmount@11012001 : Decimal;VAR AllowedHours@11012002 : Decimal;VAR PrevAllowedAmount@11012003 : Decimal;VAR PrevAllowedHours@11012004 : Decimal;CalcPurchase@1210190012 : Boolean;VAR PurchaseDec@1210190010 : Decimal;VAR EstimPurchResultDec@1210190005 : Decimal;VAR PurchCostDec@1210190004 : Decimal;VAR ActualPurchResultDec@1210190003 : Decimal;VAR TotPurchResultDec@1210190002 : Decimal);
    BEGIN
      //**4PS
      CalcAllowedAndPurchase(
        TRUE, TRUE, AllowedAmount, AllowedHours, PrevAllowedAmount, PrevAllowedHours,
        PurchaseDec, EstimPurchResultDec, PurchCostDec, ActualPurchResultDec, TotPurchResultDec);
    END;

    PROCEDURE CalcAllowedAndPurchase@1100525017(ReadPreviousAllowed@1100525022 : Boolean;ReadPurchase@1100525021 : Boolean;VAR AllowedAmount@1100525020 : Decimal;VAR AllowedHours@1100525019 : Decimal;VAR PrevAllowedAmount@1100525018 : Decimal;VAR PrevAllowedHours@1100525017 : Decimal;VAR PurchaseDec@1100525016 : Decimal;VAR EstimPurchResultDec@1100525015 : Decimal;VAR PurchCostDec@1100525014 : Decimal;VAR ActualPurchResultDec@1100525013 : Decimal;VAR TotPurchResultDec@1100525012 : Decimal);
    VAR
      CostObjCostContrRec@11012005 : Record 11012047;
      DetermineProductionDate@1210190001 : Codeunit 11012014;
      DeterminePrognosisDate@1210190000 : Codeunit 11012029;
      lAllowAmnt@11012006 : Decimal;
      lAllowedHours@11012007 : Decimal;
      lPrevAllowAmnt@11012008 : Decimal;
      lPrevAllowHours@11012009 : Decimal;
      lPurchaseDec@1210190011 : Decimal;
      lEstimPurchResultDec@1210190009 : Decimal;
      lPurchCostDec@1210190008 : Decimal;
      lActualPurchResultDec@1210190007 : Decimal;
      lTotPurchResultDec@1210190006 : Decimal;
    BEGIN
      //**4PS
      AllowedAmount := 0;
      AllowedHours := 0;
      PrevAllowedAmount := 0;
      PrevAllowedHours := 0;
      PurchaseDec := 0;
      EstimPurchResultDec := 0;
      PurchCostDec := 0;
      ActualPurchResultDec := 0;
      TotPurchResultDec := 0;

      CostObjCostContrRec.RESET;
      //CostObjCostContrRec.SETRANGE("Main Project No.", "Main Project");
      //CostObjCostContrRec.SETFILTER("Project No.",GETFILTER("Project Filter"));
      // cost control records for the main project now also reflect the amounts and such for the sub projects
      CostObjCostContrRec.SETFILTER("Project No.","No.");
      //project filter is needed when in CostObjCostContrRec.CalculateAllowed the allowed values cannot be retrieved with
      //the progress because no progress is booked on the costobject. Then the progress is retrieved from budgetlines and projectledger
      //for that the project filter must be set
      CostObjCostContrRec.SETFILTER("Project Filter",GETFILTER("Project Filter"));
      CostObjCostContrRec.SETFILTER("Progress Filter",GETFILTER("Progress Filter"));
      CostObjCostContrRec.SETFILTER("Period Filter",GETFILTER("Period Filter"));
      CostObjCostContrRec.SETFILTER("Cumulation Filter",GETFILTER("Cumulation Filter"));
      CostObjCostContrRec.SETFILTER(PrevProgressFilter,GETFILTER(PrevProgressFilter));
      CostObjCostContrRec.SETFILTER("Prognosis Filter",GETFILTER("Prognosis Filter"));
      CostObjCostContrRec.SETFILTER(PrevPrognosisFilter,GETFILTER(PrevPrognosisFilter));
      IF CostObjCostContrRec.FINDSET THEN
        REPEAT
          {
          //In the other cost control forms one progress date and one progress date is expected. Therefore it is
          //required that the progress for the main and the subprojects is taken on the same day. The same goes for the prognose.
          //To get the same values in the form Project Control, we do the same here: for the subprojects use
          //the same dates as for the main project.
          IF CostObjCostContrRec."Project No." <> "No." THEN BEGIN
            //For each subproject progress en prognosis filters must be determined
            Job.GET(CostObjCostContrRec."Project No.");
            COPYFILTER("Period Filter", Job."Period Filter");
            COPYFILTER("Cumulation Filter", Job."Cumulation Filter");
            DetermineProductionDate.DetermineBothDates(Job);
            DeterminePrognosisDate.DetermineBothDates(Job);
            CostObjCostContrRec.SETFILTER("Progress Filter",Job.GETFILTER("Progress Filter"));
            CostObjCostContrRec.SETFILTER(PrevProgressFilter,Job.GETFILTER(PrevProgressFilter));
            CostObjCostContrRec.SETFILTER("Prognosis Filter",Job.GETFILTER("Prognosis Filter"));
            CostObjCostContrRec.SETFILTER(PrevPrognosisFilter,Job.GETFILTER(PrevPrognosisFilter));
          END;
          }
          CostObjCostContrRec.CalculateAllowed(
            ReadPreviousAllowed, lAllowAmnt,lAllowedHours,lPrevAllowAmnt,lPrevAllowHours);
          AllowedAmount += lAllowAmnt;
          AllowedHours += lAllowedHours;
          PrevAllowedAmount += lPrevAllowAmnt;
          PrevAllowedHours += lPrevAllowHours;


          IF ReadPurchase THEN BEGIN
            CostObjCostContrRec.CalculatePurchaseResults(
              lAllowAmnt,lPurchaseDec,lEstimPurchResultDec,lPurchCostDec,lActualPurchResultDec,lTotPurchResultDec);
            PurchaseDec += lPurchaseDec;
            EstimPurchResultDec += lEstimPurchResultDec;
            PurchCostDec += lPurchCostDec;
            ActualPurchResultDec += lActualPurchResultDec;
            TotPurchResultDec += lTotPurchResultDec;
          END;

        UNTIL CostObjCostContrRec.NEXT = 0;
    END;

    PROCEDURE FillProjectFilter@11012265(VAR ProjFilter@1100485000 : Text[250]);
    VAR
      SubProjRec@11012001 : Record 11072003;
      SubProjRec2@1210190000 : Record 11072003;
      DPmin@11012002 : Code[20];
      DPmax@11012003 : Code[20];
      DPFirst@1210190001 : Code[20];
      DPLast@1210190002 : Code[20];
    BEGIN
      //**4PS
      IF "Single/Main/Sub Project" <> "Single/Main/Sub Project"::"Main Project" THEN BEGIN
        ProjFilter := "No.";
        EXIT;
      END ELSE
        ProjFilter := '';

      IF GETFILTER("Project Status") = '' THEN
        EXIT;

      ProjFilter := "No.";
      //find first and last sub project of main project taking in account the following coding
      //xxxxxx for main and xxxxxx-yyy for subprojects.
      DPmin := '';
      DPmax := '';
      DPFirst := '';
      DPLast := '';

      SubProjRec.RESET;
      SubProjRec.SETCURRENTKEY("Main Project");
      SubProjRec.SETRANGE("Main Project", "No.");
      SubProjRec.SETFILTER("Single/Main/Sub Project",'%1',"Single/Main/Sub Project"::"Sub Project");
      SubProjRec.SETFILTER("No.", '%1', "No." + '*');
      SubProjRec2.COPY(SubProjRec);
      COPYFILTER("Project Status",SubProjRec2."Project Status");
      IF SubProjRec.FINDSET THEN
        REPEAT
          SubProjRec2.SETRANGE("No.", SubProjRec."No.");
          IF SubProjRec2.FINDFIRST THEN BEGIN
            IF DPFirst = '' THEN
              DPFirst := SubProjRec."No."
            ELSE
              DPLast := SubProjRec."No.";
          END ELSE BEGIN
            IF NOT FillProjectFilter2(DPFirst, DPLast, ProjFilter) THEN
              EXIT;
          END;
        UNTIL SubProjRec.NEXT = 0;
      IF NOT FillProjectFilter2(DPFirst, DPLast, ProjFilter) THEN
        EXIT;

      //search for remaining subprojects (out of range xxxxxx-yyy)
      SubProjRec.RESET;
      SubProjRec.SETCURRENTKEY("Main Project");
      SubProjRec.SETRANGE("Main Project", "No.");
      COPYFILTER("Project Status",SubProjRec."Project Status");
      IF SubProjRec.FINDSET THEN BEGIN
        REPEAT
          IF NOT (COPYSTR(SubProjRec."No.", 1, STRLEN("No.")) = "No.") THEN BEGIN
            IF STRLEN(ProjFilter) + STRLEN(SubProjRec."No.") > MAXSTRLEN(ProjFilter) - 1 THEN BEGIN
              MESSAGE(Text11012009, "No.");
              ProjFilter := "No.";
              EXIT;
            END;
            ProjFilter := ProjFilter + '|' + SubProjRec."No.";
          END;
        UNTIL SubProjRec.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FillProjectFilter2@1210190004(VAR DPFirst@1210190000 : Code[20];VAR DPLast@1210190001 : Code[20];VAR ProjFilter@1210190002 : Text[250]) : Boolean;
    VAR
      ProjectRange@1210190003 : Text[1024];
    BEGIN
      //**4PS
      ProjectRange := DPFirst;
      IF DPLast <> '' THEN
        ProjectRange := ProjectRange + '..' + DPLast;
      IF ProjectRange <> '' THEN BEGIN
        IF STRLEN(ProjFilter) + STRLEN(ProjectRange) > MAXSTRLEN(ProjFilter) - 1 THEN BEGIN
          MESSAGE(Text11012009, "No.");
          ProjFilter := "No.";
          EXIT(FALSE);
        END;
        ProjFilter := ProjFilter + '|' + ProjectRange;
        DPFirst := '';
        DPLast := '';
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CheckProjectStatus@11012266(ExtraStepsLimitation@11012000 : Integer);
    BEGIN
      //**4PS
      IF Blocked >= Blocked::Posting THEN
        ERROR(Text11012010,TABLECAPTION,"No.",FIELDCAPTION(Blocked));

      IF "Project Status" >= ("Project Status"::Finished - ExtraStepsLimitation) THEN
        ERROR(Text11012011,TABLECAPTION,"No.",FIELDCAPTION("Project Status"),"Project Status");
    END;

    PROCEDURE BuildCostControl@1210190000();
    VAR
      BuildPurchaseControl@1100525000 : Codeunit 11020225;
      lvJob@1100285100 : Record 11072003;
    BEGIN
      //**4PS
      BuildPurchaseControl.BuildProjPurchControl(Rec);
      IF NOT "Cost Control Up to Date" THEN BEGIN
        CODEUNIT.RUN(CODEUNIT::CreateControlLinesProjCostObj,Rec);
        "Cost Control Up to Date" := TRUE;
        MODIFY;
      END;

      IF "Single/Main/Sub Project" <> "Single/Main/Sub Project"::"Main Project" THEN
        EXIT;

      Job.RESET;
      Job.SETCURRENTKEY("Main Project");
      Job.SETRANGE("Main Project","No.");
      Job.SETRANGE("Single/Main/Sub Project", "Single/Main/Sub Project"::"Sub Project");
      Job.SETRANGE("Cost Control Up to Date",FALSE);
      IF Job.FINDSET THEN
        REPEAT
      //>>160421
          //CODEUNIT.RUN(CODEUNIT::CreateControlLinesProjCostObj,Job);
          //Job."Cost Control Up to Date" := TRUE;
          //Job.MODIFY;
          lvJob.GET(Job."No.");
          CODEUNIT.RUN(CODEUNIT::CreateControlLinesProjCostObj,lvJob);
          lvJob."Cost Control Up to Date" := TRUE;
          lvJob.MODIFY;
      //<<160421
        UNTIL Job.NEXT = 0;
      Job.RESET;
    END;

    PROCEDURE DetPrognosis@1210190001(CurrentProjectOnly@1210190001 : Boolean);
    VAR
      DetPrognDate@1210190000 : Codeunit 11012029;
    BEGIN
      //**4PS
      DetPrognDate.DetermineBothDates(Rec);
      IF CurrentProjectOnly OR ("Single/Main/Sub Project" <> "Single/Main/Sub Project"::"Main Project") THEN BEGIN
        CALCFIELDS(Prognosis,"Prognosis Previous Period");
        EXIT;
      END;

      Prognosis := 0;
      "Prognosis Previous Period" := 0;
      Job.RESET;
      Job.SETCURRENTKEY("Main Project");
      Job.SETRANGE("Main Project","No.");
      Job.SETFILTER("Single/Main/Sub Project",'%1',"Single/Main/Sub Project"::"Sub Project");  //EK0304
      COPYFILTER("Period Filter",Job."Period Filter");
      COPYFILTER("Cumulation Filter",Job."Cumulation Filter");
      IF Job.FINDSET THEN
        REPEAT
          DetPrognDate.DetermineBothDates(Job);
          Job.CALCFIELDS(Prognosis,"Prognosis Previous Period");
          Prognosis := Prognosis + Job.Prognosis;
          "Prognosis Previous Period" := "Prognosis Previous Period" + Job."Prognosis Previous Period";
        UNTIL Job.NEXT = 0;
      Job.RESET;
    END;

    PROCEDURE InsertProjectPrincipal@1210190006(lCustomer@1210190001 : Code[20]);
    VAR
      ProjPrincipalRec@1210190000 : Record 11012005;
      lCustRec@1100525000 : Record 18;
    BEGIN
      //**4PS
      IF lCustomer = '' THEN
        EXIT;

      JobsSetup.GET;
      IF NOT ProjPrincipalRec.GET("No.", lCustomer) THEN BEGIN
        MODIFY(TRUE); //C018022 TRUE added
        ProjPrincipalRec.INIT;
        ProjPrincipalRec."Project No." := "No.";
        ProjPrincipalRec.VALIDATE(Principal, lCustomer);
        ProjPrincipalRec."Cost Plus Customer" := TRUE;
        IF ProjPrincipalRec."Cost Object" = '' THEN
          ProjPrincipalRec."Cost Object" := JobsSetup."Cost Object Cost Plus";
        IF ProjPrincipalRec."VAT Prod. Posting Group" = '' THEN
          ProjPrincipalRec."VAT Prod. Posting Group" := JobsSetup."VAT Prod. Post Group";
        ProjPrincipalRec."Order No. Customer" := "Order No. Customer";
        ProjPrincipalRec."Order Date" := "Commision Date Principal";
        ProjPrincipalRec.INSERT(TRUE);
        lCustRec.GET(lCustomer);
        ProjPrincipalRec.CopySalesSurcharges(lCustRec);
        ProjPrincipalRec.MODIFY;
      END;

      //**4PSSE
      // Diabled 4PS Code
      //InsertSettlementSheet(lCustomer);

      // Variable SkipInsertSettlementSheet is set in a new function to make it possible to
      // skip InsertSettlementSheet wheen needed. The variable is reset afterwards.
      IF NOT SkipInsertSettlementSheet THEN
        InsertSettlementSheet(lCustomer);

      SkipInsertSettlementSheet := FALSE;
      //**
    END;

    PROCEDURE InsertSettlementSheet@1100525009(lCustomer@1210190001 : Code[20]);
    VAR
      CommRec@1210190002 : Record 11012020;
      SettlRec@1210190003 : Record 11012021;
      "---EVRY---"@1100285005 : Integer;
      lvProjRec@1100285004 : Record 11072003;
      lvProjLedgEntryRec@1100285003 : Record 11072005;
      lvPostedHourLineRec@1100285002 : Record 11012085;
      lvHourAccLineRec@1100285001 : Record 11012039;
      lvCreateCostPlusRpt@1100285000 : Report 11012013;
      lProjectPrincipal@1100285100 : Record 11012005;
      Job@1100528600 : Record 11072003;
      JobLedgerEntry@1100528601 : Record 11072005;
      PostedHourLine@1100528602 : Record 11012085;
      HourAccountingLine@1100528603 : Record 11012039;
      CreateProjectCostPlus@1100528604 : Report 11012013;
    BEGIN
      //**4PS
      CheckProjectStatus(0);
      IF lCustomer = '' THEN
        EXIT;

      JobsSetup.GET;

      CommRec.RESET;
      CommRec.SETRANGE("Project No.", "No.");
      CommRec.SETRANGE(Principal, lCustomer);
      IF NOT CommRec.FINDLAST THEN BEGIN
        CommRec.INIT;
        CommRec."Project No." := "No.";
        CommRec.Principal := lCustomer;
        CommRec."No." := '1';
        CommRec.Text := Job.Text;
        CommRec.Description := Description;
        CommRec.InitRecord();
        CommRec.Supervisor := Supervisor;
        CommRec.INSERT;
      END ELSE
        IF CommRec."No." = '1' THEN BEGIN
          CommRec.Supervisor := Supervisor;
          CommRec.MODIFY;
        END;

      SettlRec.RESET;
      SettlRec.SETRANGE("Project No.", "No.");
      SettlRec.SETRANGE(Principal, lCustomer);
      SettlRec.SETRANGE("Commission No.", CommRec."No.");
      IF NOT SettlRec.FINDLAST THEN BEGIN
        SettlRec.INIT;
        SettlRec."Project No." := "No.";
        SettlRec.Principal := lCustomer;
        SettlRec."Commission No." := CommRec."No.";
        SettlRec."No." := '1';
        SettlRec.Description := Description;
        SettlRec.Text := Text;
        SettlRec."Reference Date" := TODAY;
        //>> 150917 ITERO.SB RFC-001 Added reference when creating new settlement sheet
        IF lProjectPrincipal.GET("No.",lCustomer) THEN
          SettlRec."Order No. Customer":=lProjectPrincipal."Order No. Customer";
        //<<
        SettlRec.INSERT;
        SettlRec.InsertDefCustAgreementLines(
          SettlRec."Project No.", SettlRec.Principal, SettlRec."Commission No.", SettlRec."No.", SettlRec."Reference Date");

        Job.SETRANGE("No.", "No.");
        JobLedgerEntry.SETRANGE("Job No.", "No.");
        JobLedgerEntry.SETRANGE("Cost Plus Entry Created", FALSE);
        PostedHourLine.SETRANGE("Project No.", "No.");
        PostedHourLine.SETRANGE("Cost Plus Entry Created", FALSE);
        HourAccountingLine.SETRANGE("Project No.", "No.");
        HourAccountingLine.SETRANGE("Cost Plus Entry Created", FALSE);

        CreateProjectCostPlus.SETTABLEVIEW(Job);
        CreateProjectCostPlus.SETTABLEVIEW(JobLedgerEntry);
        CreateProjectCostPlus.SETTABLEVIEW(PostedHourLine);
        CreateProjectCostPlus.SETTABLEVIEW(HourAccountingLine);
        CreateProjectCostPlus.SetSelection(SettlRec."Project No.", SettlRec.Principal, SettlRec."Commission No.", SettlRec."No.");
        CreateProjectCostPlus.SetReqForm(TRUE);
        CreateProjectCostPlus.USEREQUESTPAGE(FALSE);
        CreateProjectCostPlus.RUNMODAL;
      END;
    END;

    PROCEDURE CopyBillToAddress@1210190013();
    BEGIN
      //**4PS
      IF "Bill-to Customer No." = '' THEN BEGIN
        Name := '';
        "Name 2" := '';
        EXIT;
      END;

      CustomerRec.GET("Bill-to Customer No.");
      Name := CustomerRec.Name;
      "Name 2" := CustomerRec."Name 2";

      JobsSetup.GET;
      IF JobsSetup."Do not Copy Address to Project" THEN
        EXIT;

      IF (Address <> '') OR ("Address 2" <> '') OR (City <> '') OR (Contact <> '') OR
        (County <> '') OR ("Post Code" <> '') OR ("Phone No." <> '') OR ("Fax No." <> '') OR
        ("Country/Region Code" <> '') //call 30619
      THEN
        IF (GUIALLOWED) THEN // 4PSHM 140416
          IF NOT CONFIRM(Text11012021,FALSE) THEN
            EXIT;

      Address := CustomerRec.Address;
      "Address 2" := CustomerRec."Address 2";
      City := CustomerRec.City;
      Contact := CustomerRec.Contact;
      County := CustomerRec.County;
      "Post Code" := CustomerRec."Post Code";
      "Country/Region Code" := CustomerRec."Country/Region Code"; //call 30619
      "Phone No." := CustomerRec."Phone No.";
      "Fax No." := CustomerRec."Fax No.";
      "Mobile Phone No." := CustomerRec."Mobile Phone No.";
    END;

    PROCEDURE UpdateProjectAddress@1210190007();
    VAR
      lProj@1210190000 : Record 11072003;
    BEGIN
      //**4PS
      ProjAddressRec.GET("Bill-to Customer No.","Project Address Code");
      IF NOT "Small Project" THEN BEGIN
        Name := ProjAddressRec.Name;
        "Name 2" := ProjAddressRec."Name 2";
      END;
      IF Address <> '' THEN
        IF NOT CONFIRM(Text11012008,FALSE) THEN
          EXIT;
      Name := ProjAddressRec.Name;
      "Name 2" := ProjAddressRec."Name 2";
      Address := ProjAddressRec.Address;
      "Address 2" := ProjAddressRec."Address 2";
      City := ProjAddressRec.City;
      Contact := ProjAddressRec.Contact;
      County := ProjAddressRec.County;
      "Post Code" := ProjAddressRec."Post Code";
      "Country/Region Code" := ProjAddressRec."Country/Region Code"; //call 30619
      "Phone No." := ProjAddressRec."Phone No.";
      "Fax No." := ProjAddressRec."Fax No.";
      IF "Small Project" THEN BEGIN
        IF ProjAddressRec."Default Main Project" <> '' THEN BEGIN
          "Single/Main/Sub Project" := "Single/Main/Sub Project"::"Sub Project";
          VALIDATE("Main Project",ProjAddressRec."Default Main Project");
          IF ProjAddressRec."Copy Contract Main Project" THEN BEGIN
            lProj.GET(ProjAddressRec."Default Main Project");
            "VAT Bus. Posting Group" := lProj."VAT Bus. Posting Group";
      //      "Contract Type" := lProj."Contract Type";
            VALIDATE("Contract Type", lProj."Contract Type");
            "Settlement Method" := lProj."Settlement Method";
            "% Labor" := lProj."% Labor";
            "% to B Account" := lProj."% to B Account";
          END;
        END;
        "Phone No." := ProjAddressRec."Phone No.";
        "Phone No. at Work" := ProjAddressRec."Phone No. at Work";
        "Mobile Phone No." := ProjAddressRec."Mobile Phone No.";
        "Estate Owner" := ProjAddressRec."Estate Owner";
        "Estate No." := ProjAddressRec."Estate No.";
        Building := ProjAddressRec.Building;
        Floor := ProjAddressRec.Floor;
        Department := ProjAddressRec.Department;
        Room := ProjAddressRec.Room;
        VALIDATE("Urgency Code",ProjAddressRec."Urgency Code");
        "Area Team" := ProjAddressRec."Area Team";
        "Phone No. Area Team" := ProjAddressRec."Phone No. Area Team";
      END;
    END;

    PROCEDURE UpdateWorkAddress@1210190008(FieldOpt@1210190001 : 'Name,Name2,Address,Address2,PostalCode,City,Phone,PhoneAtWork,MobilePhone,EstateOwner,EstateNo,Building,Floor,Department,Room,AreaTeam,PhoneAreaTeam,Country';ValueTxt@1210190002 : Text[50]);
    VAR
      AddressRec@1210190000 : Record 222;
      MarketingSetup@1210190032 : Record 5079;
      CompRelationRec@1210190003 : Record 11012059;
      LeadingCompany@1210190004 : Text[50];
    BEGIN
      //**4PS
      IF AddressRec.GET("Bill-to Customer No.","Project Address Code") THEN BEGIN
        IF AddressRec."Change address by Project" THEN BEGIN
          //Check address change allowed
          //X016.sn
          MarketingSetup.GET;
          IF MarketingSetup."Central Management" THEN BEGIN
            LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Marketing Setup",MarketingSetup."Central Management");
            IF COMPANYNAME <> LeadingCompany THEN BEGIN
              IF MarketingSetup."Customer Addresses" THEN BEGIN
                MESSAGE(Text11012024, LeadingCompany);
                EXIT;
              END;
            END;
          END;
          //X016.en
          //Ask for address change
          IF CONFIRM(STRSUBSTNO(Text11012019,"Project Address Code","Bill-to Customer No.")) THEN BEGIN
            CASE FieldOpt OF
              FieldOpt::Name: AddressRec.Name := ValueTxt;
              FieldOpt::Name2: AddressRec."Name 2" := ValueTxt;
              FieldOpt::Address: AddressRec.Address := ValueTxt;
              FieldOpt::Address2: AddressRec."Address 2" := ValueTxt;
              FieldOpt::PostalCode: AddressRec."Post Code" := ValueTxt;
              FieldOpt::Country: AddressRec."Country/Region Code" := ValueTxt; //call 30619
              FieldOpt::City: AddressRec.City := ValueTxt;
              FieldOpt::Phone: AddressRec."Phone No." := ValueTxt;
              FieldOpt::PhoneAtWork: AddressRec."Phone No. at Work" := ValueTxt;
              FieldOpt::MobilePhone: AddressRec."Mobile Phone No." := ValueTxt;
              FieldOpt::EstateOwner: AddressRec."Estate Owner" := ValueTxt;
              FieldOpt::EstateNo: AddressRec."Estate No." := ValueTxt;
              FieldOpt::Building: AddressRec.Building := ValueTxt;
              FieldOpt::Floor: AddressRec.Floor := ValueTxt;
              FieldOpt::Department: AddressRec.Department := ValueTxt;
              FieldOpt::Room: AddressRec.Room := ValueTxt;
              FieldOpt::AreaTeam: AddressRec."Area Team" := ValueTxt;
              FieldOpt::PhoneAreaTeam: AddressRec."Phone No. Area Team" := ValueTxt;
            END;
            AddressRec.MODIFY(TRUE);
          END;
        END;
      END;
    END;

    PROCEDURE CheckCalendarDate@1210190011(CalendarCode@1210190002 : Code[10];AppointmentDate@1210190003 : Date) : Date;
    VAR
      CalendarMgmt@1210190000 : Codeunit 7600;
      NonWorking@1210190001 : Boolean;
      DescTxt@1210190004 : Text[30];
    BEGIN
      //**4PS
      NonWorking := TRUE;
      WHILE NonWorking DO BEGIN
        NonWorking := CalendarMgmt.CheckDateStatus(CalendarCode,AppointmentDate,DescTxt);
        IF NonWorking THEN
          AppointmentDate := AppointmentDate + 1
        ELSE
          EXIT(AppointmentDate);
      END;
    END;

    PROCEDURE ShowEstimate@1210190012();
    VAR
      EstRec@1210190001 : Record 11012151;
    BEGIN
      //**4PS
      //*C016728.c Array OrigEst -> Temporary table TmpEst
      GetEstimate;
      IF TmpEst.FINDSET THEN BEGIN
        REPEAT
          IF EstRec.GET(TmpEst."No.") THEN
            EstRec.MARK(TRUE);
        UNTIL TmpEst.NEXT = 0
      END;
      EstRec.MARKEDONLY(TRUE);

      PAGE.RUN(PAGE::"Estimate List", EstRec);
    END;

    PROCEDURE GetEstimate@1210190010() : Code[20];
    VAR
      EstSetup@1100528002 : Record 11012150;
      EstRec@1210190000 : Record 11012151;
      SubEstRecOLD@1210190001 : Record 11012152;
      SubEstRecNEW@1100528000 : Record 11072074;
      EstPartRecOLD@1210190002 : Record 11012153;
      EstPartRecNEW@1100528001 : Record 11072073;
      NumEst@1210190004 : Integer;
    BEGIN
      //**4PS
      //*C016728.c Array OrigEst -> Temporary table TmpEst
      NumEst := 0;
      IF "No." = '' THEN EXIT('');  //C026176

      IF EstRec.READPERMISSION THEN BEGIN
        EstSetup.GET;  //db, 31-03-15: C020148
        TmpEst.RESET;
        TmpEst.DELETEALL;
        //
        EstRec.SETCURRENTKEY("Project No.");
        EstRec.SETRANGE("Project No.", "No.");
        IF EstRec.FINDSET THEN BEGIN
          REPEAT
            IF NOT TmpEst.GET(EstRec."No.") THEN BEGIN
              TmpEst."No." := EstRec."No.";
              TmpEst.INSERT;
            END;
          UNTIL EstRec.NEXT = 0;
        END;
        IF EstSetup.Converted THEN BEGIN
          SubEstRecNEW.SETCURRENTKEY("Project No.");
          SubEstRecNEW.SETRANGE("Project No.", "No.");
          IF SubEstRecNEW.FINDSET THEN BEGIN
            REPEAT
              IF NOT TmpEst.GET(SubEstRecNEW."Estimate No.") THEN BEGIN
                TmpEst."No." := SubEstRecNEW."Estimate No.";
                TmpEst.INSERT;
              END;
            UNTIL SubEstRecNEW.NEXT = 0;
          END;
          //db, 06-11-15: project present in part without (sub)estimate is negligible
          //EstPartRecNEW.SETCURRENTKEY("Project No.");
          //EstPartRecNEW.SETRANGE("Project No.", "No.");
          //IF EstPartRecNEW.FINDSET THEN BEGIN
          //  REPEAT
          //    IF NOT TmpEst.GET(EstPartRecNEW."Estimate No.") THEN BEGIN
          //      TmpEst."No." := EstPartRecNEW."Estimate No.";
          //      TmpEst.INSERT;
          //    END;
          //  UNTIL EstPartRecNEW.NEXT = 0;
          //END;
        END ELSE BEGIN
          SubEstRecOLD.SETCURRENTKEY("Project No.");
          SubEstRecOLD.SETRANGE("Project No.", "No.");
          IF SubEstRecOLD.FINDSET THEN BEGIN
            REPEAT
              IF NOT TmpEst.GET(SubEstRecOLD."Estimate No.") THEN BEGIN
                TmpEst."No." := SubEstRecOLD."Estimate No.";
                TmpEst.INSERT;
              END;
            UNTIL SubEstRecOLD.NEXT = 0;
          END;
          //db, 06-11-15: project present in part without (sub)estimate is negligible
          //EstPartRecOLD.SETCURRENTKEY("Project No.");
          //EstPartRecOLD.SETRANGE("Project No.", "No.");
          //IF EstPartRecOLD.FINDSET THEN BEGIN
          //  REPEAT
          //    IF NOT TmpEst.GET(EstPartRecOLD."Estimate No.") THEN BEGIN
          //      TmpEst."No." := EstPartRecOLD."Estimate No.";
          //      TmpEst.INSERT;
          //    END;
          //  UNTIL EstPartRecOLD.NEXT = 0;
          //END;
        END;
        IF TmpEst.FINDFIRST THEN
          NumEst := TmpEst.COUNT;
      END;

      IF NumEst = 0 THEN
        EXIT('');

      IF NumEst = 1 THEN
        EXIT(TmpEst."No.");

      IF NumEst > 1 THEN
        EXIT(STRSUBSTNO('[%1]', NumEst));
    END;

    PROCEDURE Mercash@1100485000() : Boolean;
    BEGIN
      //**4PS.n;
      JobsSetup.GET;
      EXIT(JobsSetup."Salary Application" = JobsSetup."Salary Application"::"5");
    END;

    PROCEDURE RenameMainProject@1100485001();
    VAR
      lvBudgetLine@1100485000 : Record 11012001;
      lvJobLedgerEntry@1100485001 : Record 11072005;
      lvPurchaseOrderControlLine@1100485002 : Record 11020221;
      lvPurchaseLine@1100485003 : Record 39;
      lvItemJournalLine@1100485004 : Record 83;
      lvHourAccountingLine@1100485005 : Record 11012039;
      lvPrognosisLine@1100485006 : Record 11012035;
      lvPrognosis@1100485018 : Record 11012034;
      lvProgressLine@1100485013 : Record 11012037;
      lvExtensionContract@1100485007 : Record 11012004;
      lvProjectPrincipal@1100485008 : Record 11012005;
      lvOption@1100485009 : Record 11012502;
      lvControlProjCostType@1100485012 : Record 11012046;
      lvControlProjCostObj@1100485010 : Record 11012047;
      lvControlProjElem@1100485011 : Record 11012048;
      lvControlProjElemCostType@1100485014 : Record 11012049;
      lvControlProjElemCostObj@1100485015 : Record 11012050;
      lvControlProjCostComp@1100485016 : Record 11020297;
      lvHourAccountingSurcharge@1100485017 : Record 11020308;
      lvItemJournalSurcharge@1100525000 : Record 11020585;
    BEGIN
      //**4PS
      MODIFY(TRUE); //C018022
      WITH lvPurchaseLine DO BEGIN
        RESET;
        SETCURRENTKEY("Job No.");
        SETRANGE("Job No.", Rec."No.");
        SETFILTER("Main Project No.", '<>%1', Rec."Main Project");
        IF NOT ISEMPTY THEN //For Performance in SQL
          MODIFYALL("Main Project No.", Rec."Main Project");
      END;

      WITH lvItemJournalLine DO BEGIN
        SETCURRENTKEY("Job No.");
        SETRANGE("Job No.", Rec."No.");
        SETFILTER("Main Project No.", '<>%1', Rec."Main Project");
        IF NOT ISEMPTY THEN
          MODIFYALL("Main Project No.", Rec."Main Project");
      END;

      WITH lvItemJournalSurcharge DO BEGIN
        SETCURRENTKEY("Job No.");
        SETRANGE("Job No.", Rec."No.");
        SETFILTER("Main Project No.", '<>%1', Rec."Main Project");
        IF NOT ISEMPTY THEN
          MODIFYALL("Main Project No.", Rec."Main Project");
      END;

      WITH lvJobLedgerEntry DO BEGIN
        SETCURRENTKEY("Job No.");
        SETRANGE("Job No.", Rec."No.");
        SETFILTER("Main Project No.", '<>%1', Rec."Main Project");
        IF NOT ISEMPTY THEN
          MODIFYALL("Main Project No.", Rec."Main Project");
      END;

      WITH lvBudgetLine DO BEGIN
        SETCURRENTKEY("Project No.");
        SETRANGE("Project No.", Rec."No.");
        SETFILTER("Main Project No.", '<>%1', Rec."Main Project");
        IF NOT ISEMPTY THEN
          MODIFYALL("Main Project No.", Rec."Main Project");
      END;

      WITH lvExtensionContract DO BEGIN
        SETCURRENTKEY("Project No.");
        SETRANGE("Project No.", Rec."No.");
        SETFILTER("Main Project No.", '<>%1', Rec."Main Project");
        IF NOT ISEMPTY THEN
          MODIFYALL("Main Project No.", Rec."Main Project");
      END;

      WITH lvProjectPrincipal DO BEGIN
        SETCURRENTKEY("Project No.");
        SETRANGE("Project No.", Rec."No.");
        SETFILTER("Main Project No.", '<>%1', Rec."Main Project");
        IF NOT ISEMPTY THEN
          MODIFYALL("Main Project No.", Rec."Main Project");
      END;

      WITH lvPrognosis DO BEGIN
        SETCURRENTKEY("Project No.");
        SETRANGE("Project No.", Rec."No.");
        SETFILTER("Main Project No.", '<>%1', Rec."Main Project");
        IF NOT ISEMPTY THEN
          MODIFYALL("Main Project No.", Rec."Main Project");
      END;

      WITH lvPrognosisLine DO BEGIN
        SETCURRENTKEY("Project No.");
        SETRANGE("Project No.", Rec."No.");
        SETFILTER("Main Project No.", '<>%1', Rec."Main Project");
        IF NOT ISEMPTY THEN
          MODIFYALL("Main Project No.", Rec."Main Project");
      END;

      WITH lvProgressLine DO BEGIN
        SETCURRENTKEY("Project No.");
        SETRANGE("Project No.", Rec."No.");
        SETFILTER("Main Project No.", '<>%1', Rec."Main Project");
        IF NOT ISEMPTY THEN
          MODIFYALL("Main Project No.", Rec."Main Project");
      END;

      WITH lvHourAccountingLine DO BEGIN
        SETCURRENTKEY("Project No.");
        SETRANGE("Project No.", Rec."No.");
        SETFILTER("Main Project No.", '<>%1', Rec."Main Project");
        IF NOT ISEMPTY THEN
          MODIFYALL("Main Project No.", Rec."Main Project");
      END;

      WITH lvControlProjCostType DO BEGIN
        SETCURRENTKEY("Project No.");
        SETRANGE("Project No.", Rec."No.");
        SETFILTER("Main Project No.", '<>%1', Rec."Main Project");
        IF NOT ISEMPTY THEN
          MODIFYALL("Main Project No.", Rec."Main Project");
      END;

      WITH lvControlProjCostObj DO BEGIN
        SETCURRENTKEY("Project No.");
        SETRANGE("Project No.", Rec."No.");
        SETFILTER("Main Project No.", '<>%1', Rec."Main Project");
        IF NOT ISEMPTY THEN
          MODIFYALL("Main Project No.", Rec."Main Project");
      END;

      WITH lvControlProjElem DO BEGIN
        SETCURRENTKEY("Project No.");
        SETRANGE("Project No.", Rec."No.");
        SETFILTER("Main Project No.", '<>%1', Rec."Main Project");
        IF NOT ISEMPTY THEN
          MODIFYALL("Main Project No.", Rec."Main Project");
      END;

      WITH lvControlProjElemCostType DO BEGIN
        SETCURRENTKEY("Project No.");
        SETRANGE("Project No.", Rec."No.");
        SETFILTER("Main Project No.", '<>%1', Rec."Main Project");
        IF NOT ISEMPTY THEN
          MODIFYALL("Main Project No.", Rec."Main Project");
      END;

      WITH lvControlProjElemCostObj DO BEGIN
        SETCURRENTKEY("Project No.");
        SETRANGE("Project No.", Rec."No.");
        SETFILTER("Main Project No.", '<>%1', Rec."Main Project");
        IF NOT ISEMPTY THEN
          MODIFYALL("Main Project No.", Rec."Main Project");
      END;

      WITH lvOption DO BEGIN
        SETCURRENTKEY("Project No.");
        SETRANGE("Project No.", Rec."No.");
        SETFILTER("Main Project No.", '<>%1', Rec."Main Project");
        IF NOT ISEMPTY THEN
          MODIFYALL("Main Project No.", Rec."Main Project");
      END;

      WITH lvPurchaseOrderControlLine DO BEGIN
        SETCURRENTKEY("Project No.");
        SETRANGE("Project No.", Rec."No.");
        SETFILTER("Main Project No.", '<>%1', Rec."Main Project");
        IF NOT ISEMPTY THEN
          MODIFYALL("Main Project No.", Rec."Main Project");
      END;

      WITH lvControlProjCostComp DO BEGIN
        SETCURRENTKEY("Project No.");
        SETRANGE("Project No.", Rec."No.");
        SETFILTER("Main Project No.", '<>%1', Rec."Main Project");
        IF NOT ISEMPTY THEN
          MODIFYALL("Main Project No.", Rec."Main Project");
      END;

      WITH lvHourAccountingSurcharge DO BEGIN
        SETCURRENTKEY("Project No.");
        SETRANGE("Project No.", Rec."No.");
        SETFILTER("Main Project No.", '<>%1', Rec."Main Project");
        IF NOT ISEMPTY THEN
          MODIFYALL("Main Project No.", Rec."Main Project");
      END;
    END;

    PROCEDURE InsertAddress@1100485002(lCustomerCde@1100485000 : Code[20]) AddressCde : Code[10];
    VAR
      AddressRec@1100485002 : Record 222;
      AddressFrm@1100485001 : Page 300;
    BEGIN
      //**4PS
      AddressRec.RESET;
      AddressRec.INIT;
      AddressRec."Customer No." := lCustomerCde;
      AddressRec.Code := "Project Address Code";
      AddressRec."Project Address" := TRUE;
      AddressRec.INSERT(TRUE);
      COMMIT;
      AddressRec.SETRANGE("Customer No.","Bill-to Customer No.");
      AddressFrm.SETRECORD(AddressRec);
      AddressFrm.RUNMODAL;
      AddressFrm.GETRECORD(AddressRec);
      EXIT(AddressRec.Code);
    END;

    PROCEDURE InsertAddressFromCustomer@1100485005();
    VAR
      CustomerFrm@1100485001 : Page 11020310;
      CustomerRec@1100485000 : Record 18;
    BEGIN
      //**4PS
      CLEAR(CustomerFrm);
      CustomerFrm.LOOKUPMODE(TRUE);
      IF CustomerFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
        CustomerFrm.GETRECORD(CustomerRec);
        "Project Address Code" := InsertAddress(CustomerRec."No.");
        "Bill-to Customer No." := CustomerRec."No.";
        ValidateBillToCustomerData(FALSE, FALSE);  //*C-028192.c
        CALCFIELDS("Principal Name", "Contract Amount");
      END;
    END;

    PROCEDURE ValidateBillToCustomerData@1100485003(NoConfirms@1100525000 : Boolean;CopyAllreadySkipped@1210190000 : Boolean);
    VAR
      CopyAllowed@1100525001 : Boolean;
    BEGIN
      // 4PSHM 140416
      IF NOT (GUIALLOWED) THEN NoConfirms := TRUE;

      //**4PS
      CopyCustDataSkipped := FALSE;  //*C-028192.n
      IF "Bill-to Customer No." <> xRec."Bill-to Customer No." THEN
        VALIDATE(Supervisor,'');
      IF "Bill-to Customer No." <> '' THEN BEGIN
        CustomerRec.GET("Bill-to Customer No.");
        IF "VAT Bus. Posting Group" = '' THEN
          "VAT Bus. Posting Group" := CustomerRec."VAT Bus. Posting Group";

        "Calculate B Amounts based on" := CustomerRec."Calculate B Amounts based on";

        IF NOT CopyAllreadySkipped THEN BEGIN  //*C-028192.n
          IF "Settlement Method" <> CustomerRec."Project Settlement Method" THEN BEGIN
            IF NoConfirms THEN
              CopyAllowed := TRUE
            ELSE
              CopyAllowed := CONFIRM(Text11012041, TRUE, FIELDCAPTION("Settlement Method"));
            IF CopyAllowed THEN
              "Settlement Method" := CustomerRec."Project Settlement Method";
            IF (NOT CopyAllowed) THEN CopyCustDataSkipped := TRUE;  //*C-028192.n
          END;
          IF "Contract Type" <> CustomerRec."Project Contract Type" THEN BEGIN
            IF NoConfirms THEN
              CopyAllowed := TRUE
            ELSE
              CopyAllowed := CONFIRM(Text11012041, TRUE, FIELDCAPTION("Contract Type"));
            IF CopyAllowed THEN
              VALIDATE("Contract Type", CustomerRec."Project Contract Type");
            IF (NOT CopyAllowed) THEN CopyCustDataSkipped := TRUE;  //*C-028192.n
          END;
        END;
        "Invoice Layout Code" := CustomerRec."Invoice Layout Code";
        VALIDATE("Purch Discount Term Group 1", CustomerRec."Purch Discount Term Group");
        VALIDATE("Sales Discount Term Group 1", CustomerRec."Sales Discount Term Group");
        //"Reference Date (Item)" := CustomerRec."Reference Date (Item)";
        IF "Small Project" THEN BEGIN
          InsertProjectPrincipal("Bill-to Customer No.");
          OperationsBySmallProjRec.SETRANGE("Project No.", "No.");
          OperationsBySmallProjRec.MODIFYALL("Quantities On Settlement Sheet", CustomerRec."Quantities on Settlement Sheet");
          OperationsBySmallProjRec.MODIFYALL("Total line on settlement sheet", CustomerRec."Total Line on Settlement Sheet");
        END;
      END;
    END;

    PROCEDURE UpdateCostControlStatus@1100485004(ActionType@1100485000 : 'Insert,Modify,Delete';OldCostObject@1100485001 : Code[20];NewCostObject@1100485002 : Code[20]);
    VAR
      UpdateCostControl@1100485003 : Boolean;
      CostObjControlRec@1100485004 : Record 11012047;
    BEGIN
      //**4PS
      IF "Cost Control Up to Date" THEN BEGIN
        CASE ActionType OF
          ActionType::Insert:
            BEGIN
              IF NewCostObject <> '' THEN BEGIN
                CostObjControlRec.SETRANGE("Project No.","No.");
                CostObjControlRec.SETRANGE("Cost Object", NewCostObject);
                IF NOT CostObjControlRec.FINDFIRST THEN
                  UpdateCostControl := TRUE;
              END ELSE
                UpdateCostControl := TRUE;
            END;
          ActionType::Modify:
            IF NewCostObject <> OldCostObject THEN
              UpdateCostControl := TRUE;
          ActionType::Delete:
            UpdateCostControl := TRUE;
        END;
        IF UpdateCostControl THEN BEGIN
          "Cost Control Up to Date" := FALSE;
          MODIFY;
        END;
      END;

      IF ("Single/Main/Sub Project" = "Single/Main/Sub Project"::"Sub Project") AND ("Main Project" <> "No.") THEN
        IF Job.GET("Main Project") THEN
          Job.UpdateCostControlStatus(ActionType, OldCostObject, NewCostObject);
    END;

    PROCEDURE ShowTodos@1100485006();
    VAR
      Todo@1100528700 : Record 5080;
    BEGIN
      //**4PS
      Todo.SETCURRENTKEY("Project No.", Date, Closed);
      Todo.SETRANGE("Project No.", "No.");
      Todo.SETRANGE("System To-do Type", Todo."System To-do Type"::Organizer);
      PAGE.RUNMODAL(PAGE::"To-do List", Todo);
    END;

    PROCEDURE RunCreatePlantLocation@1100525018(IProjRec@1100485002 : Record 11072003);
    VAR
      ProjLocAddressRec@1100525008 : Record 11012011;
      PlantMgtCompRec@1100525005 : Record 11020586;
      TmpPlantMgtCompRec@1100525002 : TEMPORARY Record 11020586;
      PlantMgtCompListFrm@1100525001 : Page 11124918;
      CopyProjLocAddresses@1100525009 : Boolean;
      NoOfPlantComps@1100525000 : Integer;
      NoCreated@1100525004 : Integer;
      lvPlantLocCode@1100485000 : Code[20];
      lvText11012001@1100525007 : TextConst 'ENU=Create a Plant Location of Project ''%1''. Projectstatus is ''%2'', are you sure?';
      lvText11012002@1100525006 : TextConst 'ENU=Do you want to create a Plant Location of Project ''%1''?';
      lvText11012003@1100485003 : TextConst 'ENU=Plant Location ''%1'' is created in plant company ''%2''.';
      lvText11012004@1100485004 : TextConst 'ENU=Plant Location ''%1'' is created in %2 plant companies.';
      lvText11012005@1100525003 : TextConst 'ENU=Including the Project Locations (Project Addresses)?';
    BEGIN
      //**4PS
      CASE TRUE OF
        IProjRec."Project Status" < "Project Status"::Production:
          IF NOT CONFIRM(lvText11012001, TRUE, IProjRec."No.", IProjRec."Project Status") THEN
            EXIT;
        IProjRec."Project Status" = "Project Status"::Production:
          IF NOT CONFIRM(lvText11012002, TRUE, IProjRec."No.") THEN
            EXIT;
        IProjRec."Project Status" > "Project Status"::Production:
          IProjRec.FIELDERROR("Project Status");
      END;

      ProjLocAddressRec.SETRANGE("Project No.", IProjRec."No.");
      IF ProjLocAddressRec.FINDFIRST THEN BEGIN
        IF CONFIRM(lvText11012005, TRUE) THEN
          CopyProjLocAddresses := TRUE;
      END;

      NoCreated := 0;
      PlantMgtCompRec."Plant Company" := PlantMgtCompRec.GetPlantCompany(TRUE, NoOfPlantComps, '');
      IF NoOfPlantComps = 1 THEN BEGIN
        lvPlantLocCode := CreatePlantLocation(IProjRec, PlantMgtCompRec."Plant Company", CopyProjLocAddresses);
        IF lvPlantLocCode <> '' THEN
          NoCreated := 1;
      END ELSE BEGIN
        PlantMgtCompRec.RESET;
        PlantMgtCompListFrm.SetMultiCreate();
        PlantMgtCompListFrm.SETRECORD(PlantMgtCompRec);
        PlantMgtCompListFrm.LOOKUPMODE(TRUE);
        IF PlantMgtCompListFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          IF NOT PlantMgtCompListFrm.GetMarkedRecords(TmpPlantMgtCompRec) THEN BEGIN
            PlantMgtCompListFrm.GETRECORD(PlantMgtCompRec);
            lvPlantLocCode := CreatePlantLocation(IProjRec, PlantMgtCompRec."Plant Company", CopyProjLocAddresses);
            IF lvPlantLocCode <> '' THEN
              NoCreated := 1;
          END ELSE BEGIN
            TmpPlantMgtCompRec.FINDSET;
            REPEAT
              lvPlantLocCode := CreatePlantLocation(IProjRec, TmpPlantMgtCompRec."Plant Company", CopyProjLocAddresses);
              IF lvPlantLocCode <> '' THEN BEGIN
                NoCreated := NoCreated + 1;
                PlantMgtCompRec."Plant Company" := TmpPlantMgtCompRec."Plant Company";
              END;
            UNTIL TmpPlantMgtCompRec. NEXT = 0;
          END;
        END;
      END;

      IF NoCreated > 0 THEN BEGIN
        IF NoCreated = 1 THEN
          MESSAGE(lvText11012003, lvPlantLocCode, PlantMgtCompRec."Plant Company")
        ELSE
          MESSAGE(lvText11012004, lvPlantLocCode, NoCreated);
      END;
    END;

    PROCEDURE CreatePlantLocation@1100485007(IProjRec@1100485000 : Record 11072003;IPlantCompany@1100485010 : Text[30];ICopyProjLocAddresses@1100525000 : Boolean) : Code[20];
    VAR
      lvProjSetupRec@1100485005 : Record 315;
      lvPlantSetupRec@1100485004 : Record 11012550;
      CompanyData@1100485006 : Record 11020674;
      lvCustRec@1100485003 : Record 18;
      lvPlantLocRec@1100485001 : Record 11012554;
      lvPlantLocRec2@1100485002 : Record 11012554;
      lvText11012003@1100485009 : TextConst 'ENU=Plant Location ''%1'' is already present in Company ''%2'', with Project ''%3'' and Company Name ''%4''.';
      lvDimValRec@1100525001 : Record 349;
      Employee@1210190000 : Record 5200;
    BEGIN
      //**4PS
      //* From a project in the 'Project Company' create a plant location in the 'Plant Company' this
      //* can be another company, so do not use 'VALIDATE'/'INSERT/MODIFY(TRUE)' on the Plant Location table!

      WITH IProjRec DO BEGIN
        TESTFIELD("No.");
        lvProjSetupRec.GET;
        lvProjSetupRec.TESTFIELD("Build Plant Location Code from");

        IF NOT CompanyData.GET(COMPANYNAME) THEN
          CompanyData."Company Name" := COMPANYNAME;

        IF (CompanyData."Company No." = '') AND
           (lvProjSetupRec."Build Plant Location Code from" = lvProjSetupRec."Build Plant Location Code from"::CompNoProjNo)
        THEN
          CompanyData.TESTFIELD("Company No.");

        lvPlantSetupRec.CHANGECOMPANY(IPlantCompany);
        lvPlantSetupRec.GET;

        lvPlantLocRec2.CHANGECOMPANY(IPlantCompany);

        lvPlantLocRec.CHANGECOMPANY(IPlantCompany);
        lvPlantLocRec.INIT;
        lvPlantLocRec.InitRecord;
        CASE lvProjSetupRec."Build Plant Location Code from" OF
          lvProjSetupRec."Build Plant Location Code from"::ProjNo:
            lvPlantLocRec.Code := "No.";
          lvProjSetupRec."Build Plant Location Code from"::CompNoProjNo:
            lvPlantLocRec.Code := CompanyData."Company No." + "No.";
          ELSE
            lvPlantLocRec.Code := '';
        END;
        lvPlantLocRec.TESTFIELD(Code);
        IF lvPlantLocRec2.GET(lvPlantLocRec.Code) THEN
          ERROR(lvText11012003, lvPlantLocRec.Code, IPlantCompany, lvPlantLocRec2."Project No.", lvPlantLocRec2."Company Name");

        lvPlantLocRec."Creation Date" := TODAY;
        lvPlantLocRec.Depot :=  FALSE;
        lvPlantLocRec."Project No." :=  "No.";
        IF IPlantCompany <> COMPANYNAME THEN BEGIN
          lvPlantLocRec."Company Name" := COMPANYNAME;
          //Fill Customer only if project and plant location taken from different company
          CompanyData.TESTFIELD("Customer No.");
          lvCustRec.CHANGECOMPANY(IPlantCompany);
          IF NOT lvCustRec.GET(CompanyData."Customer No.") THEN
            lvCustRec.INIT;
          lvPlantLocRec."Customer No." := CompanyData."Customer No.";
          lvPlantLocRec."VAT Bus. Posting Group" := lvCustRec."VAT Bus. Posting Group";
          IF lvPlantSetupRec."Def. Loc. Bus. P.Grp of Cust." THEN
            lvPlantLocRec."Gen. Bus. Posting Group" := lvCustRec."Gen. Bus. Posting Group";
        END;
        //mg.sn, 09-03-11: M25508
        IF lvPlantLocRec."Customer No." = '' THEN BEGIN
          lvPlantLocRec."Gen. Bus. Posting Group" := lvPlantSetupRec."Default Gen. Bus.Posting Group";
          lvPlantLocRec."VAT Bus. Posting Group" := lvPlantSetupRec."Default VAT Bus.Posting Group";
        END;
        //mg.en, 09-03-11: M25508
        //**4PS.sn DPA Plant
        //IF IPlantCompany = COMPANYNAME THEN  //*24614.o
        //  lvPlantLocRec."Department Code" := "Global Dimension 1 Code";  //*24614.o
        //**4PS.en DPA Plant
        lvPlantLocRec.Description :=  Description;
        lvPlantLocRec."Description 2" := "Description 2";
        lvPlantLocRec."Search Name" := "Search Description";
        lvPlantLocRec.Address := Address;
        lvPlantLocRec."Address 2" := "Address 2";
        lvPlantLocRec.City := City;
        IF "Site Manager" <> '' THEN BEGIN
          lvPlantLocRec.Contact := COPYSTR(SiteManagerName, 1 , MAXSTRLEN(Contact));
          //call C-027723.sn
          IF Employee.GET("Site Manager") THEN BEGIN
            //C023677.so
            //lvPlantLocRec."Contact Phone No." := Employee."Phone No.";
            //lvPlantLocRec."E-Mail" := Employee."E-Mail";
            //C023677.eo
            //C023677.sn
            lvPlantLocRec."Contact Phone No." := COPYSTR(
              Employee."Company Mobile Phone No." + ' / ' + Employee."Company Phone No.", 1, MAXSTRLEN(lvPlantLocRec."Contact Phone No."));
            lvPlantLocRec."E-Mail" := Employee."Company E-Mail";
            //C023677.en
          END;
          //call C-027723.en
        END;
        lvPlantLocRec.County := County;
        lvPlantLocRec."Post Code" := "Post Code";
        lvPlantLocRec."Country/Region Code" := "Country/Region Code";
        lvPlantLocRec."Phone No." := "Phone No.";
        lvPlantLocRec."Fax No." := "Fax No.";
        lvPlantLocRec."Territory Code" := "Territory Code";
        lvPlantLocRec."Starting Date" := "Starting Date";
        lvPlantLocRec."Ending Date" := "Ending Date";
        IF "Global Dimension 1 Code" <> '' THEN BEGIN  //*24614.sn
          IF IPlantCompany = COMPANYNAME THEN
            lvPlantLocRec."Department Code" := "Global Dimension 1 Code"
          ELSE BEGIN
            lvDimValRec.CHANGECOMPANY(IPlantCompany);
            lvDimValRec.SETCURRENTKEY(Code, "Global Dimension No.");
            lvDimValRec.SETRANGE(Code, "Global Dimension 1 Code");
            lvDimValRec.SETRANGE("Global Dimension No.", 1);
            IF lvDimValRec.FINDFIRST THEN
              lvPlantLocRec."Department Code" := "Global Dimension 1 Code";
          END;
        END;                                           //*24614.en
        lvPlantLocRec.NormalizePostCodeHouseNo;//DP00195
        lvPlantLocRec.INSERT;

        IF ICopyProjLocAddresses THEN
          lvPlantLocRec.CopyProjLocsToPlantLocAddress(IPlantCompany);

        EXIT(lvPlantLocRec.Code);
      END;
    END;

    PROCEDURE CheckProjectAuthorization@1100485028(FieldCap@1100485000 : Text[100]);
    BEGIN
      //**4PS
      IF "No." = '' THEN
        EXIT;

      JobsSetup.GET;
      IF NOT JobsSetup."Project Authorization" THEN
        EXIT;

      //Check now if user is authorized for changes
      IF UserSetup.GET(USERID) THEN
        IF UserSetup."Project Authoriz. Active" THEN
          EXIT;

      IF CheckCostsAndRevenuesZero THEN
        EXIT;

      ERROR(Text11012038, FieldCap, USERID);
    END;

    LOCAL PROCEDURE CheckCostsAndRevenuesZero@1100485031() : Boolean;
    VAR
      ProjRec@1100525000 : Record 11072003;
      CostControlMgt@1100485001 : Codeunit 11012006;
      TotCost@1100485000 : Decimal;
    BEGIN
      //**4PS
      IF (SkipModify) THEN EXIT(TRUE); //140702 ITERO.MH In this case, the project is not inserted yet.

      ProjRec.COPY(Rec);
      ProjRec.SETRANGE("Project Filter", "No."); //Also for Main Project

      ProjRec.CALCFIELDS(Revenues);
      IF ProjRec.Revenues <> 0 THEN
        EXIT(FALSE);

      IF "Main Project" <> '' THEN
        BuildCostControl;
      TotCost := CostControlMgt.TotCostProject(ProjRec, TRUE);

      EXIT(TotCost = 0);
    END;

    PROCEDURE UpdatePrefLocations@1100525000();
    VAR
      GeneralLedgerSetup@1100525002 : Record 98;
      PreferenceLocation@1100525001 : Record 11020353;
      DimensionValueLocation@1100525000 : Record 11020352;
    BEGIN
      GeneralLedgerSetup.GET;
      DimensionValueLocation.SETRANGE("Dimension Code",GeneralLedgerSetup."Global Dimension 1 Code");
      DimensionValueLocation.SETRANGE("Dimension Value Code","Global Dimension 1 Code");
      IF DimensionValueLocation.ISEMPTY THEN
        EXIT;

      PreferenceLocation.SETRANGE(Type,PreferenceLocation.Type::Job);
      PreferenceLocation.SETRANGE("No.","No.");
      IF NOT PreferenceLocation.ISEMPTY THEN
        IF "Global Dimension 1 Code" = xRec."Global Dimension 1 Code" THEN
          EXIT
        ELSE
          IF NOT CONFIRM(Text11012040) THEN
            EXIT;
      PreferenceLocation.DELETEALL;
      IF DimensionValueLocation.FINDSET THEN
        REPEAT
          PreferenceLocation.Type := PreferenceLocation.Type::Job;
          PreferenceLocation."No." := "No.";
          PreferenceLocation."Location Code" := DimensionValueLocation."Location Code";
          PreferenceLocation.Priority := DimensionValueLocation.Priority;
          PreferenceLocation.INSERT;
        UNTIL DimensionValueLocation.NEXT = 0;
    END;

    PROCEDURE AssistEditProjFolder@1100525001();
    VAR
      FileMgt@1100525002 : Codeunit 419;
      ExplorerPath@1100525000 : Text[250];
      lvRelManSetup@1100525001 : Record 5079;
    BEGIN
      lvRelManSetup.GET;
      IF NOT lvRelManSetup."Use Citrix Client" THEN
        ExplorerPath := OperatingSystemMgt.ClientEnviron('SYSTEMROOT') + '\Explorer.exe'
      ELSE
        ExplorerPath := OperatingSystemMgt.ClientEnviron('SYSTEMROOT') + '\Pexplorer.exe';
      IF "Archive Location Documents" = '' THEN
        FileMgt.SelectDirectoryNameWithBackSlash("Archive Location Documents")
      ELSE BEGIN
        OperatingSystemMgt.ClientShell(
          STRSUBSTNO('"%1"', ExplorerPath),
          STRSUBSTNO('"%1"', "Archive Location Documents"),
          FALSE);
      END;
    END;

    PROCEDURE ShowCurrencyExchangeRates@1100525205();
    VAR
      CurrencyList@1100525000 : Page 11124939;
      CurrencyRec@1100525001 : Record 4;
    BEGIN
      TESTFIELD("No.");
      CurrencyRec.SETRANGE("Project Filter", "No.");
      CurrencyList.SETTABLEVIEW(CurrencyRec);
      CurrencyList.RUN;
    END;

    PROCEDURE ShowFeatures@1100525002();
    VAR
      lContactFeatureTypeRec@1100485000 : Record 11012753;
    BEGIN
      TESTFIELD("No.");
      lContactFeatureTypeRec."Relation Type" := lContactFeatureTypeRec."Relation Type"::Job;
      lContactFeatureTypeRec.Code := "No.";
      lContactFeatureTypeRec.SETRANGE("Relation Type", lContactFeatureTypeRec."Relation Type");
      lContactFeatureTypeRec.SETRANGE(Code, lContactFeatureTypeRec.Code);
      PAGE.RUN(PAGE::"Contact Feature Type", lContactFeatureTypeRec);
    END;

    PROCEDURE UpdateResponsibility@1100525003(IFieldNo@1100525000 : Integer;IOldEmplNo@1100525001 : Code[20];INewEmplNo@1100525002 : Code[20]);
    VAR
      lvProjRespPersRec@1100525004 : Record 11012040;
      lvProjRespPersRec2@1100525006 : Record 11012040;
      lvRespCode@1100525003 : Code[10];
    BEGIN
      IF INewEmplNo = IOldEmplNo THEN
        EXIT;

      JobsSetup.GET;
      CASE IFieldNo OF
        FIELDNO(Estimator):
          lvRespCode := JobsSetup."Responsibility Estimator";
        FIELDNO("Site Manager"):
          lvRespCode := JobsSetup."Responsibility Site Manager";
        FIELDNO("Project Manager"):
          lvRespCode := JobsSetup."Responsibility Project Manager";
        FIELDNO("Project Engineer"):
          lvRespCode := JobsSetup."Responsibility ProjectEngineer";
        FIELDNO(Buyercontact):                                  //**4PS.n
          lvRespCode := JobsSetup."Responsibility Buyercontact"; //**4PS.n
        FIELDNO("Purchaser Code"):
          lvRespCode := JobsSetup."Responsibility Purchaser";
      END;

      IF lvRespCode = '' THEN
        EXIT;

      lvProjRespPersRec.SETCURRENTKEY("Employee No.", Responsibility, "Project No.");
      lvProjRespPersRec.SETRANGE("Project No.", "No.");
      lvProjRespPersRec.SETRANGE(Responsibility, lvRespCode);
      lvProjRespPersRec2.SETCURRENTKEY("Employee No.", Responsibility, "Project No.");
      lvProjRespPersRec2.SETRANGE("Project No.", "No.");
      lvProjRespPersRec2.SETRANGE(Responsibility, lvRespCode);
      IF IOldEmplNo <> '' THEN BEGIN
        lvProjRespPersRec.SETRANGE("Employee No.", IOldEmplNo);
        IF lvProjRespPersRec.FINDFIRST THEN BEGIN
          lvProjRespPersRec2.SETRANGE("Employee No.", INewEmplNo);
          IF lvProjRespPersRec2.FINDFIRST OR (INewEmplNo = '') THEN BEGIN
            lvProjRespPersRec.DELETE(FALSE);  //* FALSE !, because of modify on Job table in delete trigger
            IF "SharePoint Status" = "SharePoint Status"::Updated THEN
              "SharePoint Status" := "SharePoint Status"::Modified;
            DeleteProjectPortalPermissions(lvProjRespPersRec); //**4PS.n
           END ELSE BEGIN
            lvProjRespPersRec."Employee No." := INewEmplNo;
            lvProjRespPersRec.MODIFY(TRUE);
          END;
          EXIT;
        END;
      END;

      IF INewEmplNo <> '' THEN BEGIN
        lvProjRespPersRec.SETRANGE("Employee No.", INewEmplNo);
        IF NOT lvProjRespPersRec.FINDFIRST THEN BEGIN
          lvProjRespPersRec2.RESET;
          lvProjRespPersRec2.SETRANGE("Project No.", "No.");
          IF NOT lvProjRespPersRec2.FINDLAST THEN
            lvProjRespPersRec2."Line No." := 0;
          lvProjRespPersRec.RESET;
          lvProjRespPersRec.INIT;
          lvProjRespPersRec."Project No." := "No.";
          lvProjRespPersRec."Line No." := lvProjRespPersRec2."Line No." + 10000;
          lvProjRespPersRec.Responsibility := lvRespCode;
          lvProjRespPersRec."Employee No." := INewEmplNo;
          //lvProjRespPersRec.INSERT(TRUE); // M 25818
          lvProjRespPersRec.INSERT; // M 25818
        END;
      END;
    END;

    LOCAL PROCEDURE SyncProjPrincipal@1100525007();
    VAR
      ProjectPrincipal@1100525000 : Record 11012005;
    BEGIN
      //**4PS
      IF ("Order No. Customer" <> xRec."Order No. Customer") OR
         ("Commision Date Principal" <> xRec."Commision Date Principal") THEN
      BEGIN
        ProjectPrincipal.SETRANGE("Project No.","No.");
        IF ProjectPrincipal.FINDSET(TRUE, FALSE) THEN BEGIN
          IF ProjectPrincipal.COUNT = 1 THEN BEGIN
            ProjectPrincipal."Order No. Customer" := "Order No. Customer";
            ProjectPrincipal."Order Date" := "Commision Date Principal";
            ProjectPrincipal.MODIFY;
          END ELSE
            REPEAT
              IF ProjectPrincipal."Order No. Customer" = xRec."Order No. Customer" THEN BEGIN
                ProjectPrincipal."Order No. Customer" := "Order No. Customer";
                ProjectPrincipal."Order Date" := "Commision Date Principal";
                ProjectPrincipal.MODIFY;
              END;
            UNTIL ProjectPrincipal.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Global Dimension 1 Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::Job);
      IF Dimension1Code <> '' THEN
        "Global Dimension 1 Code" := Dimension1Code;

      IF "Global Dimension 1 Code" <> '' THEN BEGIN
        SkipModify := TRUE;
        VALIDATE("Global Dimension 1 Code");
        SkipModify := FALSE;
      END;
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11072003) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11072003');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::Job, "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    PROCEDURE UpdateProjectStartElement@1100525004();
    VAR
      ProjElemRec@1100525000 : Record 11012010;
    BEGIN
      //**4PS
      ProjElemRec.SETRANGE("Project No.", "No.");
      ProjElemRec.SETRANGE(Level, 0);
      IF ProjElemRec.FINDFIRST THEN BEGIN
        ProjElemRec."Starting Date" := "Starting Date";
        ProjElemRec."Ending Date" := "Ending Date";
        ProjElemRec.MODIFY;  //db, 05-06-07 (sql-probleem: do not activate modify-trigger)
      END;
    END;

    PROCEDURE SetCopyFeaturesFrom@1100525008(RelationType@1100525001 : Integer;Code@1100525000 : Code[20]);
    BEGIN
      //**4PS
      FromFeatureRelationType := RelationType;
      FromFeatureCode := Code;
    END;

    PROCEDURE CreateFeatures@1100525005();
    VAR
      ContactFeatureType@1100525002 : Record 11012753;
      ContactFeatureGroup@1100530000 : Record 11012751;
    BEGIN
      //**4PS
      IF ContactFeatureGroup.ISEMPTY THEN
        EXIT; //This is done for customers without Sales & Marketing granule

      ContactFeatureType.SETRANGE("Relation Type", ContactFeatureType."Relation Type"::Job);
      ContactFeatureType.SETRANGE(Code, "No.");
      ContactFeatureType."Relation Type" := ContactFeatureType."Relation Type"::Job;
      ContactFeatureType.Code := "No.";
      IF ContactFeatureType.ISEMPTY THEN
        ContactFeatureType.CreateFeatureTypes;

      IF FromFeatureCode <> '' THEN
        ContactFeatureType.CopyFeaturesFromOtherType(
          FromFeatureRelationType, FromFeatureCode, ContactFeatureType."Relation Type"::Job, "No.");
    END;

    PROCEDURE CheckProjectFilterExist@1100525006();
    BEGIN
      //**4PS
      IF NOT GET("No.") THEN BEGIN   //db, 27-12-10: M24356
        SETRANGE("No.");
        IF NEXT = 0 THEN
         IF NOT FINDFIRST THEN
           INIT;
      END;
    END;

    PROCEDURE OpenCard@1100526100();
    BEGIN
      //**4PS
      CASE TRUE OF
        "Small Project": PAGE.RUN(PAGE::"Small Project",Rec);
        "Assembly Project": PAGE.RUN(PAGE::"Assembly Project",Rec);
      ELSE
        PAGE.RUN(PAGE::"Job Card",Rec);
      END;
    END;

    PROCEDURE OpenCardWithRestrictions@1210190002();
    VAR
      Job@1210190003 : Record 11072003;
      SmallProjectFrm@1210190000 : Page 11012149;
      AssemblyProjectFrm@1210190001 : Page 11124890;
      JobCardFrm@1210190002 : Page 11072003;
    BEGIN
      //**4PS
      Job.COPY(Rec);
      Job.FILTERGROUP(4);
      Job.SETRECFILTER;
      Job.FILTERGROUP(0);
      CASE TRUE OF
        "Small Project":
          BEGIN
            SmallProjectFrm.RemoveProjectAndFunctionButton;
            SmallProjectFrm.SETTABLEVIEW(Job);
            SmallProjectFrm.RUN;
          END;
        "Assembly Project":
          BEGIN
            AssemblyProjectFrm.SETTABLEVIEW(Job);
            AssemblyProjectFrm.RUN;
          END;
      ELSE
        JobCardFrm.SETTABLEVIEW(Job);
        JobCardFrm.RUN;
      END;
    END;

    PROCEDURE ImportMaterialReqPEC@1100526101();
    VAR
      AssemblyProjectManagement@1100525000 : Codeunit 11012248;
    BEGIN
      //**4PS
      AssemblyProjectManagement.ImportMaterialRequirementPEC(Rec);
    END;

    PROCEDURE GetTryOut@1210190005(iAction@1210190000 : Integer) Result : Text[30];
    VAR
      TryOutRelationRec@1210190001 : Record 11012761;
    BEGIN
      //**4PS
      IF "No." = '' THEN EXIT('');  //C026176

      IF TryOutRelationRec.READPERMISSION THEN
        Result := TryOutRelationRec.GetTryOut("No.", '', '', '', '', '', '', iAction);

      EXIT(Result);
    END;

    PROCEDURE ShowTryOut@1210190003(iAction@1210190000 : Integer);
    VAR
      TryOutRelationRec@1210190001 : Record 11012761;
    BEGIN
      //**4PS
      TryOutRelationRec.ShowTryOut("No.", '', '', '', '', '', '', iAction);
    END;

    PROCEDURE EditDocuments@1100528702(DocumentTemplateTypeFilter@1210190003 : Text[250];ContactNo@1210190004 : Code[20];ContactPersonNo@1210190005 : Code[20];SendMail@1210190002 : Boolean;Recipient@1100528700 : Text[120]);
    VAR
      DocumentMailing@1210190000 : Codeunit 11012278;
      RecRef@1100525000 : RecordRef;
      DocumentLinkRIDs@1100525001 : ARRAY [5] OF RecordID;
    BEGIN
      //**4PS
      RecRef.GETTABLE(Rec);
      DocumentLinkRIDs[1] := RecRef.RECORDID;

      DocumentMailing.EditDocuments(
        DocumentTemplateTypeFilter, DocumentLinkRIDs,
        "Global Dimension 1 Code", ContactNo, ContactPersonNo, SendMail, Recipient);
    END;

    PROCEDURE GetServiceLocation@1210190016() : Text[30];
    VAR
      ServiceLocation@1210190000 : Record 11012801;
      ServiceLocationCount@1210190001 : Integer;
    BEGIN
      //**4PS
      IF "No." = '' THEN EXIT('');  //C026176

      IF NOT ServiceLocation.READPERMISSION THEN EXIT;
      ServiceLocation.SETCURRENTKEY("Supplying Company", "Project No.");
      ServiceLocation.SETRANGE("Supplying Company", '');
      ServiceLocation.SETRANGE("Project No.", "No.");
      ServiceLocationCount := ServiceLocation.COUNT;
      CASE ServiceLocationCount OF
        0: EXIT;
        1:
          BEGIN
            ServiceLocation.FINDFIRST;
            EXIT(ServiceLocation."No.");
          END;
      ELSE
        EXIT('[' + FORMAT(ServiceLocationCount) + ']');
      END;
    END;

    PROCEDURE ShowServiceLocation@1210190017();
    VAR
      ServiceLocation@1210190000 : Record 11012801;
    BEGIN
      //**4PS
      IF NOT ServiceLocation.READPERMISSION THEN EXIT;
      ServiceLocation.SETCURRENTKEY("Supplying Company", "Project No.");
      ServiceLocation.SETRANGE("Supplying Company", '');
      ServiceLocation.SETRANGE("Project No.", "No.");
      PAGE.RUN(0, ServiceLocation)
    END;

    PROCEDURE LinkComplaint@1210190018();
    VAR
      ComplaintRec@1210190000 : Record 11012450;
      CompanyRec@1210190001 : Record 2000000006;
    BEGIN
      //**4PS
      TestLinkComplaintIsAllowed;
      IF (PAGE.RUNMODAL(0, CompanyRec) = ACTION::LookupOK) THEN BEGIN
        IF (CompanyRec.Name <> COMPANYNAME) THEN
          ComplaintRec.CHANGECOMPANY(CompanyRec.Name);
        ComplaintRec.SETFILTER("Small Project No.", '%1', '');
        IF (PAGE.RUNMODAL(0, ComplaintRec) = ACTION::LookupOK) THEN BEGIN
          IF (CompanyRec.Name <> COMPANYNAME) THEN
            ComplaintRec."Small Project Company" := COMPANYNAME;
          ComplaintRec."Small Project No." := "No.";
          ComplaintRec.MODIFY;
          IF (CompanyRec.Name <> COMPANYNAME) THEN
            "Origin Complaint Company" := CompanyRec.Name;
          "Origin Complaint No." := ComplaintRec."No.";
          MODIFY;
        END;
      END;
    END;

    PROCEDURE UnlinkComplaint@1210190019();
    VAR
      ComplaintRec@1210190000 : Record 11012450;
    BEGIN
      //**4PS
      IF ("Origin Complaint Company" <> '') THEN
        ComplaintRec.CHANGECOMPANY("Origin Complaint Company");
      IF (ComplaintRec.GET("Origin Complaint No.")) THEN BEGIN
        ComplaintRec."Small Project Company" := '';
        ComplaintRec."Small Project No." := '';
        ComplaintRec.MODIFY;
        "Origin Complaint Company" := '';
        "Origin Complaint No." := '';
        MODIFY;
      END;
    END;

    PROCEDURE TestLinkComplaintIsAllowed@1210190020();
    VAR
      ComplaintRec@1210190000 : Record 11012450;
    BEGIN
      //**4PS
      IF ("Origin Complaint No." <> '') THEN
        ERROR(Text11012049, TABLECAPTION, ComplaintRec.TABLECAPTION, "Origin Complaint No.");
    END;

    PROCEDURE CheckModifyDim1ValuePosting@1210190021();
    VAR
      ProjType@1210190000 : Record 11012009;
      DefaultDim@1210190001 : Record 352;
      GLSetup@1210190002 : Record 98;
    BEGIN
      //**4PS
      IF "Project Type" = '' THEN
        EXIT;
      IF NOT ProjType.GET("Project Type") THEN
        EXIT;

      GLSetup.GET;
      DefaultDim.SETRANGE("Table ID", DATABASE::Job);
      DefaultDim.SETRANGE("No.", "No.");
      DefaultDim.SETRANGE("Dimension Code", GLSetup."Global Dimension 1 Code");
      IF DefaultDim.FINDFIRST THEN BEGIN
        IF DefaultDim."Value Posting" <> ProjType."Def. Value Posting Department" THEN BEGIN
          DefaultDim."Value Posting" := ProjType."Def. Value Posting Department";
          DefaultDim.MODIFY;
        END;;
      END;
    END;

    PROCEDURE OpenProjectControl@1210190022();
    VAR
      Project@1210190000 : Record 11072003;
    BEGIN
      //**4PS
      Project.SETRANGE("No.", "No.");
      Project.SETRANGE("Main Project", "Main Project"); //to prevent filterchange in onopenform
      IF "Single/Main/Sub Project" = "Single/Main/Sub Project"::"Main Project" THEN
        Project.SETRANGE("Single/Main/Sub Project", Project."Single/Main/Sub Project"::"Main Project"); //call 29537

      PAGE.RUN(PAGE::"Project Control", Project);
    END;

    PROCEDURE CostControlNeedsBuild@1210190023() : Boolean;
    VAR
      Project@1210190000 : Record 11072003;
      BuildPurchaseControl@1210190001 : Codeunit 11020225;
    BEGIN
      //**4PS
      IF BuildPurchaseControl.ProjPurchControlNeedsBuild(Rec) THEN
        EXIT(TRUE);

      IF NOT "Cost Control Up to Date" THEN
        EXIT(TRUE);

      IF "Single/Main/Sub Project" <> "Single/Main/Sub Project"::"Main Project" THEN
        EXIT;

      Project.SETCURRENTKEY("Main Project");
      Project.SETRANGE("Main Project","No.");
      Project.SETRANGE("Single/Main/Sub Project", "Single/Main/Sub Project"::"Sub Project");
      Project.SETRANGE("Cost Control Up to Date",FALSE);
      EXIT(NOT Project.ISEMPTY);
    END;

    PROCEDURE CopyCustomerNotGlobalDims@1210190009();
    VAR
      GLSetup@1210190002 : Record 98;
      DefDimCust@1210190000 : Record 352;
      DefDimProj@1210190001 : Record 352;
    BEGIN
      //**4PS
      IF "Bill-to Customer No." = '' THEN
        EXIT;
      GLSetup.GET;

      DefDimCust.SETRANGE("Table ID", DATABASE::Customer);
      DefDimCust.SETRANGE("No.", "Bill-to Customer No.");
      DefDimCust.SETFILTER("Dimension Code", '<>%1&<>%2', GLSetup."Global Dimension 1 Code", GLSetup."Global Dimension 2 Code");
      IF DefDimCust.FINDSET THEN BEGIN
        REPEAT
          IF NOT DefDimProj.GET(DATABASE::Job, "No.", DefDimCust."Dimension Code") THEN BEGIN
            DefDimProj := DefDimCust;
            DefDimProj."Table ID" := DATABASE::Job;
            DefDimProj."No." := "No.";
            DefDimProj.INSERT;
          END ELSE BEGIN
            IF DefDimProj."Dimension Value Code" <> DefDimCust."Dimension Value Code" THEN BEGIN
              DefDimProj."Dimension Value Code" := DefDimCust."Dimension Value Code";
              DefDimProj."Value Posting" := DefDimCust."Value Posting";
              DefDimProj.MODIFY;
            END;
          END;
        UNTIL DefDimCust.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckIfChangingSiteURLAllowed@1100528400();
    VAR
      SharePointSetup@1100528400 : Record 11012730;
    BEGIN
      //**4PS
      SharePointSetup.GET;
      SharePointSetup.TESTFIELD("Changing Site URL Allowed");
    END;

    PROCEDURE ShowPostedInvoices@1100525010();
    VAR
      SalesInvHeader@1100525001 : Record 112;
      SalesInvLine@1100525000 : Record 113;
    BEGIN
      //**4PS
      SalesInvLine.SETCURRENTKEY("Job No.");
      SalesInvLine.SETRANGE("Job No.","No.");
      IF SalesInvLine.FINDSET THEN
        REPEAT
          IF SalesInvHeader.GET(SalesInvLine."Document No.") THEN
            SalesInvHeader.MARK(TRUE);
        UNTIL SalesInvLine.NEXT = 0;

      SalesInvHeader.MARKEDONLY(TRUE);

      PAGE.RUNMODAL(PAGE::"Posted Sales Invoices",SalesInvHeader);
    END;

    PROCEDURE ShowPostedCreditMemos@1100525011();
    VAR
      SalesCrMemoHeader@1100525001 : Record 114;
      SalesCrMemoLine@1100525000 : Record 115;
    BEGIN
      //**4PS
      SalesCrMemoLine.SETCURRENTKEY("Job No.");
      SalesCrMemoLine.SETRANGE("Job No.","No.");
      IF SalesCrMemoLine.FINDSET THEN
        REPEAT
          IF SalesCrMemoHeader.GET(SalesCrMemoLine."Document No.") THEN
            SalesCrMemoHeader.MARK(TRUE);
        UNTIL SalesCrMemoLine.NEXT = 0;

      SalesCrMemoHeader.MARKEDONLY(TRUE);

      PAGE.RUNMODAL(PAGE::"Posted Sales Credit Memos",SalesCrMemoHeader);
    END;

    PROCEDURE GetSelectionFilter@1100525012(VAR Job@1100525000 : Record 11072003) : Code[250];
    VAR
      SelectionFilter@1003 : Code[250];
      RecordCount@1004 : Integer;
    BEGIN
      //**4PS
      RecordCount := Job.COUNT;
      IF RecordCount > 0 THEN BEGIN
        Job.FINDSET;
        WHILE RecordCount > 0 DO BEGIN
          RecordCount := RecordCount - 1;
          IF SelectionFilter <> '' THEN
            SelectionFilter := SelectionFilter + '|';
          SelectionFilter := SelectionFilter + Job."No.";
          IF RecordCount > 0 THEN
            Job.NEXT;
        END;
      END;
      EXIT(SelectionFilter);
    END;

    PROCEDURE IsJobInProjectPortal@1100528301() : Boolean;
    VAR
      SharePointIntegration@1100528300 : Codeunit 11020210;
    BEGIN
      //**4PS
      IF (NOT SharePointIntegration.IsProjectPortalActive) THEN
        EXIT(FALSE);
      EXIT(("Project Portal Project") AND
           ("SharePoint Site Generated") AND
           ("SharePoint Site URL" <> ''));
    END;

    PROCEDURE DeleteProjectPortalPermissions@1100528300(ProjectResponsiblePerson@1100528300 : Record 11012040);
    VAR
      RespPersPermPPT@1100528301 : Record 11229812;
      SharePointIntegration@1100528302 : Codeunit 11020210;
    BEGIN
      //**4PS
      IF (NOT SharePointIntegration.IsProjectPortalActive) THEN
        EXIT;

      RespPersPermPPT.SETRANGE("Project No.", ProjectResponsiblePerson."Project No.");
      RespPersPermPPT.SETRANGE("Line No.", ProjectResponsiblePerson."Line No.");
      RespPersPermPPT.DELETEALL(TRUE);
    END;

    PROCEDURE CheckWebServiceProjectPortal@1100528304();
    VAR
      DocumentPortalProject@1100528300 : Codeunit 11012948;
    BEGIN
      //**4PS
      DocumentPortalProject.CheckWebserviceConnection(Rec);
    END;

    PROCEDURE StartMatMonFromCard@1100525019();
    VAR
      MaterialMonitorUserSetup@1100525001 : Record 11020576;
      MaterialMonitorMain@1100525000 : Page 11124841;
    BEGIN
      //**4PS
      MaterialMonitorMain.SetPageFields("No.", "Main Project");
      MaterialMonitorMain.RUN;  //db, 07-07-14: C015823
    END;

    PROCEDURE GetNoOfWorkOrdersEmpl@1100525021(ProjectNo@1100525000 : Code[20];ProjectActivityNo@1100527000 : Code[30]) : Integer;
    VAR
      WorkOrder@1100525001 : Record 11229279;
    BEGIN
      //**4PS
      //DP00465
      IF ProjectNo = '' THEN
        EXIT(0);
      WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::Project);
      WorkOrder.SETRANGE("Source No.", ProjectNo);
      //WorkOrder.SETRANGE("Resource Type", WorkOrder."Resource Type"::Employee);
      IF ProjectActivityNo <> '' THEN
        WorkOrder.SETRANGE("Project Planning Activity No.", ProjectActivityNo);
      EXIT(WorkOrder.COUNT);
    END;

    PROCEDURE ShowWorkOrders@1100525022(ProjectNo@1100525000 : Code[20];ProjectActivityNo@1100527000 : Code[30]);
    VAR
      WorkOrder@1100528600 : Record 11229279;
      WorkOrders@1100525001 : Page 11229284;
    BEGIN
      //**4PS
      //DP00465
      IF ProjectNo = '' THEN
        EXIT;
      WorkOrders.SetSelections(WorkOrder."Source Type"::Project, ProjectNo);
      IF ProjectActivityNo <> '' THEN
        WorkOrders.SetDefaultProjectActivity(ProjectActivityNo);
      WorkOrders.RUNMODAL;
    END;

    PROCEDURE ShiftWorkOrders@1100528600(IOldStartingDate@1100528602 : Date;INewStartingDate@1100528600 : Date);
    VAR
      WorkOrder@1100528601 : Record 11229279;
      DoShift@1100528603 : Boolean;
      ShiftDuration@1100528604 : Duration;
    BEGIN
      //**4PS
      WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::Project);
      WorkOrder.SETRANGE("Source No.", "No.");
      WorkOrder.SETRANGE("Date/Time Export to FSA", 0DT);
      IF NOT WorkOrder.FINDSET THEN
        EXIT;
      IF IOldStartingDate = INewStartingDate THEN
        EXIT;
      IF (IOldStartingDate = 0D) OR (INewStartingDate = 0D) THEN
        EXIT;
      IF GUIALLOWED THEN
        DoShift := CONFIRM(Text11012060, TRUE);
      IF NOT GUIALLOWED OR DoShift THEN
        REPEAT
          ShiftDuration := CREATEDATETIME(INewStartingDate, 0T) - CREATEDATETIME(IOldStartingDate, 0T);
          WorkOrder."Starting Date/Time" := WorkOrder."Starting Date/Time" + ShiftDuration;
          WorkOrder."Ending Date/Time" := WorkOrder."Ending Date/Time" + ShiftDuration;
          WorkOrder.MODIFY(TRUE);
        UNTIL WorkOrder.NEXT = 0;
    END;

    PROCEDURE LaunchPrognosisList@1100525020();
    VAR
      PrognosisList@1100525001 : Page 11012087;
      Prognosis@1100285500 : Record 11012034;
    BEGIN
      //**4PS
      TESTFIELD("No.");
      //>>IME077, OpenPrognosisCardList
      Prognosis.SETRANGE("Project No.", "No.");
      Prognosis.SETRANGE("Prognosis Level", "Prognosis Level");
      IF ("Forecast Level" = "Forecast Level"::"Cost Component") AND ("Prognosis Level" = "Prognosis Level"::Detailed) THEN
        PAGE.RUN(PAGE::"Prognosis CC List",Prognosis)
      ELSE BEGIN
      //<<IME077
        PrognosisList.SetProject("No.");
        PrognosisList.RUNMODAL;
      END;
    END;

    PROCEDURE ShowPurchaseQuotesForProject@1100528402();
    VAR
      PurchaseQuote@1100485000 : Record 38;
    BEGIN
      //**4PS
      PurchaseQuote.MarkPurchaseQuotesOfProject("No.");
      PurchaseQuote.MARKEDONLY(TRUE);
      PAGE.RUN(PAGE::"Purchase List", PurchaseQuote);
    END;

    PROCEDURE ShowPurchaseOrdersForProject@1100528401();
    VAR
      PurchaseOrder@1100485000 : Record 38;
      ProjectPurchaseOrderList@1100525000 : Page 11012071;
    BEGIN
      //**4PS
      PurchaseOrder.MarkPurchaseOrdersOfProject("No.");
      PurchaseOrder.MARKEDONLY(TRUE);
      ProjectPurchaseOrderList.SETTABLEVIEW(PurchaseOrder);
      ProjectPurchaseOrderList.SetProject("No.");
      ProjectPurchaseOrderList.RUNMODAL;
    END;

    PROCEDURE ShowPostedPurchaseInvoices@1100525027(ProjectNo@1100525000 : Code[20]);
    VAR
      PurchInvHeader@1100525001 : Record 122;
      PurchInvLine@1100525002 : Record 123;
    BEGIN
      //**4PS
      IF ProjectNo <> '' THEN BEGIN
        PurchInvLine.SETCURRENTKEY("Job No.", "Buy-from Vendor No.");
        PurchInvLine.SETRANGE("Job No.", ProjectNo);
        IF PurchInvLine.FINDSET THEN BEGIN
          REPEAT
            IF PurchInvLine."Document No." <> PurchInvHeader."No." THEN BEGIN
              IF PurchInvHeader.GET(PurchInvLine."Document No.") THEN
                PurchInvHeader.MARK(TRUE);
            END;
          UNTIL PurchInvLine.NEXT = 0;
        END;
      END;
      PurchInvHeader.MARKEDONLY(TRUE);
      IF NOT PurchInvHeader.ISEMPTY THEN
        PurchInvHeader.FINDFIRST;
      PAGE.RUNMODAL(0, PurchInvHeader);
    END;

    PROCEDURE ShowPostedPurchaseCredMemos@1100525028(ProjectNo@1100525000 : Code[20]);
    VAR
      PurchCrMemoHdr@1100525001 : Record 124;
      PurchCrMemoLine@1100525002 : Record 125;
    BEGIN
      //**4PS
      IF ProjectNo <> '' THEN BEGIN
        PurchCrMemoLine.SETCURRENTKEY("Job No.", "Buy-from Vendor No.");
        PurchCrMemoLine.SETRANGE("Job No.", ProjectNo);
        IF PurchCrMemoLine.FINDSET THEN BEGIN
          REPEAT
            IF PurchCrMemoLine."Document No." <> PurchCrMemoHdr."No." THEN BEGIN
              IF PurchCrMemoHdr.GET(PurchCrMemoLine."Document No.") THEN
                PurchCrMemoHdr.MARK(TRUE);
            END;
          UNTIL PurchCrMemoLine.NEXT = 0;
        END;
      END;
      PurchCrMemoHdr.MARKEDONLY(TRUE);
      IF NOT PurchCrMemoHdr.ISEMPTY THEN
        PurchCrMemoHdr.FINDFIRST;
      PAGE.RUNMODAL(0, PurchCrMemoHdr);
    END;

    PROCEDURE GenerateAssemblyProject@1100528404(CustomerNo@1100528401 : Code[20];ProjectPrincipalBillToCustomerNo@1100528405 : Code[20];AssemblyProjectNo@1100528402 : Code[20];NoSeriesCode@1100528403 : Code[10];Description2@1100528404 : Text[50]);
    VAR
      ContactBusinessRelation@1100485001 : Record 5054;
      ContactFeatureType@1100525000 : Record 11012753;
      Customer@1100528400 : Record 18;
      AssemblyProjectNo2@1100528406 : Code[20];
    BEGIN
      //**4PS
      Customer.GET(CustomerNo);

      IF NOT GET(AssemblyProjectNo) THEN BEGIN
        AssemblyProjectNo2 := DetermineNewProjectNo(NoSeriesCode, FALSE);
        IF (AssemblyProjectNo2 = AssemblyProjectNo) AND (AssemblyProjectNo2 <> '') THEN
          AssemblyProjectNo2 := DetermineNewProjectNo(NoSeriesCode, TRUE)
        ELSE
          AssemblyProjectNo2 := AssemblyProjectNo;

        INIT;
        "No." := AssemblyProjectNo2;
        "No. Series" := NoSeriesCode;
        "Assembly Project" := TRUE;

        INSERT(TRUE);
        "Project Type" := DetProjectTypeSeriesSimple(COMPANYNAME);
        VALIDATE("Global Dimension 1 Code");  //Call C012922 n
        VALIDATE(Description, Customer.Name);
        "Description 2" := Description2;
      END;

      ContactBusinessRelation.SETCURRENTKEY("Link to Table", "No.");
      ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Customer);
      ContactBusinessRelation.SETRANGE("No.", Customer."No.");
      IF ContactBusinessRelation.FINDFIRST THEN BEGIN
        InsertAssemblyProjectPrincipal(ContactBusinessRelation."No.", ProjectPrincipalBillToCustomerNo);
        "Bill-to Customer No." := ContactBusinessRelation."No.";
      END ELSE BEGIN
        InsertAssemblyProjectPrincipal(Customer."No.", ProjectPrincipalBillToCustomerNo);
        "Bill-to Customer No." := Customer."No.";
      END;

      MODIFY;
    END;

    LOCAL PROCEDURE InsertAssemblyProjectPrincipal@1100528403(CustomerNo@1210190001 : Code[20];BillToCustomerNo@1100528401 : Code[20]);
    VAR
      ProjectPrincipal@1210190000 : Record 11012005;
      JobsSetup@1100528400 : Record 315;
    BEGIN
      //**4PS
      IF CustomerNo = '' THEN
        EXIT;

      JobsSetup.GET;

      IF NOT ProjectPrincipal.GET("No.", CustomerNo) THEN BEGIN
        ProjectPrincipal.INIT;
        ProjectPrincipal."Project No." := "No.";
        ProjectPrincipal.VALIDATE(Principal, CustomerNo);
        ProjectPrincipal."Cost Plus Customer" := TRUE;
        IF ProjectPrincipal."Cost Object" = '' THEN
          ProjectPrincipal."Cost Object" := JobsSetup."Cost Object Cost Plus";
        IF ProjectPrincipal."VAT Prod. Posting Group" = '' THEN
          ProjectPrincipal."VAT Prod. Posting Group" := JobsSetup."VAT Prod. Post Group";
        ProjectPrincipal.VALIDATE("Bill-to Customer No.", BillToCustomerNo);
        ProjectPrincipal.INSERT(TRUE);
      END;

      InsertSettlementSheet(CustomerNo);
    END;

    PROCEDURE DetermineNewProjectNo@1100528406(NoSeriesCode@1100528401 : Code[10];UpdateNoSeries@1100485000 : Boolean) ProjectNo : Code[20];
    VAR
      NoSeriesMgt@1100528400 : Codeunit 396;
    BEGIN
      //**4PS
      IF NoSeriesIsDefaultNos(NoSeriesCode) THEN BEGIN
        ProjectNo := NoSeriesMgt.GetNextNo(NoSeriesCode, 0D, UpdateNoSeries);
      END ELSE BEGIN
        IF NoSeriesCode <> '' THEN
          ProjectNo := '';
      END;
    END;

    LOCAL PROCEDURE NoSeriesIsDefaultNos@1100528405(NoSeriesCode@1100528400 : Code[10]) : Boolean;
    VAR
      NoSeries@1100485000 : Record 308;
    BEGIN
      //**4PS
      IF NoSeriesCode = '' THEN
        EXIT(FALSE);
      IF NOT NoSeries.GET(NoSeriesCode) THEN
        EXIT(FALSE);
      EXIT(NoSeries."Default Nos.");
    END;

    PROCEDURE GetBudgetHoursPlannedOnWO@1100525023() : Decimal;
    VAR
      WorkOrder@1100525000 : Record 11229279;
    BEGIN
      WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::Project);
      WorkOrder.SETRANGE("Source No.", "No.");
      WorkOrder.CALCSUMS("Expected Hours");
      EXIT(WorkOrder."Expected Hours");
    END;

    PROCEDURE ResetProjectPortalProject@1100528303();
    VAR
      DocumentUpdateMemberPPT@1100528300 : Record 11229801;
      DocumentUpdateDocumentPPT@1100528301 : Record 11229802;
      DocumentUpdatePPT@1100528302 : Record 11229800;
      ProjectResponsiblePerson@1100528303 : Record 11012040;
      ProjectAuthority@1100528304 : Record 11020216;
    BEGIN
      //**4PS
      DocumentUpdateMemberPPT.SETRANGE("Project No.", "No.");
      DocumentUpdateMemberPPT.DELETEALL;
      DocumentUpdateDocumentPPT.SETRANGE("Project No.", "No.");
      DocumentUpdateDocumentPPT.DELETEALL;
      DocumentUpdatePPT.SETRANGE("Project No.", "No.");
      DocumentUpdatePPT.DELETEALL;
      ProjectResponsiblePerson.SETRANGE("Project No.", "No.");
      ProjectResponsiblePerson.MODIFYALL("Portal Login E-Mail Send On", 0DT);
      ProjectAuthority.SETRANGE("Project No.", "No.");
      ProjectAuthority.MODIFYALL("Portal Login E-Mail Send On", 0DT);

      "SharePoint Site Generated" := FALSE;
      "SharePoint Site URL" := '';
      "Project Portal Project" := FALSE;
      "SharePoint Status" := 0;
      "Quote Subsite Generated" := FALSE;
      "Last Date Modified" := TODAY;
      "Modified by" := USERID;
      MODIFY; //do not use TRUE
    END;

    PROCEDURE LookupProjectPrincipal@1100528407();
    VAR
      Selection@1100525001 : Integer;
      Customer@1100525002 : Record 18;
      CustomerList@1100525003 : Page 22;
      ProjectPrincipal@1100525004 : Record 11012005;
      ProjectPrincipalList@1100525000 : Page 11012016;
      lCustRec@1100285001 : Record 18;
    BEGIN
      //**4PS
      //DP00790-RFC41
      Selection := STRMENU(Text019, 2, Text020);  //1=Principal; 2=Customer
      IF Selection = 0 THEN EXIT;

      IF Selection = 1 THEN BEGIN
        ProjectPrincipal.SETRANGE("Project No.","No.");
        ProjectPrincipal."Project No." := "No.";
        ProjectPrincipal.Principal := "Bill-to Customer No.";
        ProjectPrincipalList.SETTABLEVIEW(ProjectPrincipal);
        ProjectPrincipalList.SETRECORD(ProjectPrincipal);
        ProjectPrincipalList.LOOKUPMODE(TRUE);
        IF ProjectPrincipalList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          GET("No.");
          // Job record must exist in database before this function is called,
          // because the job record can be updated when some fields of the project principal
          // are changed (see function SyncProject of project principal).
          ProjectPrincipalList.GETRECORD(ProjectPrincipal);
          VALIDATE("Bill-to Customer No.", ProjectPrincipal.Principal);
        END;
      END;

      IF Selection = 2 THEN BEGIN
                                //**4PSSE.I041
                                lCustRec.RESET;
                                lCustRec."No." := "Bill-to Customer No.";
        Customer."No." := "Bill-to Customer No.";
        CustomerList.SETRECORD(Customer);
        CustomerList.LOOKUPMODE(TRUE);
        IF CustomerList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          CustomerList.GETRECORD(Customer);
          InsertProjectPrincipal(Customer."No.");
          //>>IME-060
          //VALIDATE("Bill-to Customer No.", Customer."No.");
          IF ("Bill-to Customer No." <> xRec."Bill-to Customer No.") OR ("Bill-to Customer No." = '') OR ("Bill-to Customer No." <> lCustRec."No." ) THEN
            VALIDATE("Bill-to Customer No.", lCustRec."No.");
          //<<IME-060
        END;
      END;
    END;

    PROCEDURE AssistEditProjectPrincipal@1100525024();
    VAR
      ProjectPrincipal@1100525001 : Record 11012005;
      ProjectPrincipalCard@1100525000 : Page 11012015;
    BEGIN
      //**4PS
      //DP00790-RFC41
      ProjectPrincipal.SETRANGE("Project No.","No.");
      ProjectPrincipal."Project No." := "No.";
      ProjectPrincipal.Principal := "Bill-to Customer No.";
      ProjectPrincipalCard.SETTABLEVIEW(ProjectPrincipal);
      ProjectPrincipalCard.SETRECORD(ProjectPrincipal);
      ProjectPrincipalCard.LOOKUPMODE(TRUE);
      IF ProjectPrincipalCard.RUNMODAL = ACTION::LookupOK THEN BEGIN
        GET("No.");
        // Job record must exist in database before this function is called,
        // because the job record can be updated when some fields of the project principal
        // are changed (see function SyncProject of project principal).
        ProjectPrincipalCard.GETRECORD(ProjectPrincipal);
                                //>>IME-060
                                //VALIDATE("Bill-to Customer No.", ProjPrincipRec.Principal);
                                //<<IME-060
      END;
    END;

    PROCEDURE CopyProject@1100409000();
    VAR
      CopyProjPage@1100409001 : Page 11012106;
      Project@1100409000 : Record 11072003;
    BEGIN
      //**4PS C012513
      CopyProjPage.FillDefaults("No."); //mg, 12-07-11: M28335
      CopyProjPage.StdDialogRunModal;

      COMMIT;
      CopyProjPage.GetCreatedProjectNo(Project."No.");
      IF Project."No." <> '' THEN BEGIN
        IF CONFIRM(Text11012070, TRUE, Project."No.") THEN
          PAGE.RUNMODAL(PAGE::"Job Card",Project);
      END;
    END;

    LOCAL PROCEDURE UpdatePrincipalFields@1100528408();
    VAR
      ProjectPrincipal@1100528400 : Record 11012005;
    BEGIN
      //**4PS C009259
      IF "Bill-to Customer No." = '' THEN
        EXIT;

      IF ProjectPrincipal.GET("No.", "Bill-to Customer No.") THEN BEGIN
        "Order No. Customer" := ProjectPrincipal."Order No. Customer";
        "Commision Date Principal" := ProjectPrincipal."Order Date";
      END;
    END;

    PROCEDURE "*** 4PSSE"@1100285001();
    BEGIN
    END;

    PROCEDURE InsertProjPrincipalExt@1100285002(lCustomer@1100285001 : Code[20];lSkipInsertSettlementSheet@1100285000 : Boolean);
    BEGIN
      // 4PSSE
      SkipInsertSettlementSheet := lSkipInsertSettlementSheet;
      InsertProjectPrincipal(lCustomer);
    END;

    PROCEDURE SetAltNoSeries@1100285003(NoSerieCode@1100285000 : Code[10]);
    BEGIN
      //I054
      AltDefaultNoSerieCode := NoSerieCode;
    END;

    PROCEDURE OpenProjectControlSummarized@1100285500();
    VAR
      Project@1100285500 : Record 11072003;
    BEGIN
      //**4PS
      Project.SETRANGE("No.", "No.");
      Project.SETRANGE("Main Project", "Main Project"); //to prevent filterchange in onopenform
      IF "Single/Main/Sub Project" = "Single/Main/Sub Project"::"Main Project" THEN
        Project.SETRANGE("Single/Main/Sub Project", Project."Single/Main/Sub Project"::"Main Project"); //call 29537

      PAGE.RUN(PAGE::"Project Control Summarized", Project);
    END;

    PROCEDURE OpenProjectControlOverview@1100285501();
    VAR
      Project@1100285500 : Record 11072003;
    BEGIN
      //**4PS
      Project.SETRANGE("No.", "No.");
      Project.SETRANGE("Main Project", "Main Project"); //to prevent filterchange in onopenform
      IF "Single/Main/Sub Project" = "Single/Main/Sub Project"::"Main Project" THEN
        Project.SETRANGE("Single/Main/Sub Project", Project."Single/Main/Sub Project"::"Main Project"); //call 29537

      PAGE.RUN(PAGE::"Project Control Overview", Project);
    END;

    LOCAL PROCEDURE UpdatePrincipalContactFields@1100525030();
    VAR
      ProjectPrincipal@1100528400 : Record 11012005;
    BEGIN
      //**4PS C026734.n
      "Principal Contact Person" := '';
      IF "Bill-to Customer No." = '' THEN
        EXIT;

      IF ProjectPrincipal.GET("No.", "Bill-to Customer No.") THEN BEGIN
        "Principal Contact Person" := ProjectPrincipal."Contact Person No.";
      END;
    END;

    PROCEDURE GetNoOfTerms@1100525013(ICustomerNo@1100525000 : Code[20];IJobNo@1100525001 : Code[20]) NumTerms : Integer;
    VAR
      TextType@1100525002 : 'Job,Customer';
      GeneralText@1100525003 : Record 11020260;
    BEGIN
      //**4PS C010894
      //FilterGeneralTextLines(IJobNo, TextType::Job, GeneralText);  //reserved for worksheet small project
      //NumTerms := GeneralText.COUNT;
      //IF NumTerms <> 0 THEN
      //  EXIT(NumTerms);

      //C026176.sn
      IF ICustomerNo = '' THEN
        EXIT(0);
      //C026176.en

      FilterGeneralTextLines(ICustomerNo, TextType::Customer, GeneralText);
      NumTerms := GeneralText.COUNT;
      EXIT(NumTerms);
    END;

    PROCEDURE ShowTerms@1100525014(ICustomerNo@1100525001 : Code[20];IJobNo@1100525000 : Code[20]);
    VAR
      TextType@1100525004 : 'Job,Customer';
      NumTerms@1100525005 : Integer;
      GeneralText@1100525003 : Record 11020260;
      GeneralTextFRM@1100525002 : Page 11126493;
    BEGIN
      //**4PS C010894
      //FilterGeneralTextLines(IJobNo, TextType::Job, GeneralText);  //reserved for worksheet small project
      //NumTerms := GeneralText.COUNT;
      //IF NumTerms = 0 THEN
      //  FilterGeneralTextLines(ICustomerNo, TextType::Customer, GeneralText);

      FilterGeneralTextLines(ICustomerNo, TextType::Customer, GeneralText);
      GeneralTextFRM.SETTABLEVIEW(GeneralText);
      GeneralTextFRM.EDITABLE(FALSE);
      GeneralTextFRM.RUNMODAL;
    END;

    PROCEDURE FilterGeneralTextLines@1100525015(ICode@1100525001 : Code[20];ITextType@1100525000 : 'Job,Customer';VAR OGeneralText@1100525002 : Record 11020260);
    BEGIN
      //**4PS C010894
      OGeneralText.RESET;
      OGeneralText.FILTERGROUP(4);
      OGeneralText.SETRANGE(Code, ICode);
      CASE ITextType OF
        ITextType::Job:
          BEGIN
            OGeneralText.SETRANGE(Table, OGeneralText.Table::Job);
            OGeneralText.SETRANGE("Table Line No.", 0);
          END;
        ITextType::Customer:
          BEGIN
            OGeneralText.SETRANGE(Table, OGeneralText.Table::Customer);
            OGeneralText.SETRANGE("Table Line No.", 0);
          END;
      END;
      OGeneralText.FILTERGROUP(0);
    END;

    PROCEDURE CreateSubProject@1100528000();
    VAR
      MainJob@1100525000 : Record 11072003;
      CreateSubProjFrm@1100528001 : Page 11012106;
      CreatedProjNo@1100528000 : Code[20];
    BEGIN
      //**4PS
      //DP00792-RFC07
      IF CONFIRM(STRSUBSTNO(Text11012000,"No.")) THEN BEGIN
        CreateSubProjFrm.FillDefaults("No.");
        CreateSubProjFrm.SetSelectionCreateSubProject();  //activate several page-options as Principal, SalesPrice
        CreateSubProjFrm.CopyProject();
        CreateSubProjFrm.GetCreatedProjectNo(CreatedProjNo);
        CLEAR(CreateSubProjFrm);
        MainJob.GET("No.");
        MainJob."Single/Main/Sub Project" := MainJob."Single/Main/Sub Project"::"Main Project";  //db, 15-06-15
        MainJob.MODIFY;
        GET(CreatedProjNo);
        "Main Project":= MainJob."No.";
        "Single/Main/Sub Project" := "Single/Main/Sub Project"::"Sub Project";
        IF MainJob."Project Status" > MainJob."Project Status"::Production THEN
          "Project Status" := "Project Status"::Production
        ELSE
          "Project Status" := MainJob."Project Status";
        MODIFY;
        OpenCard;
      END;
    END;

    PROCEDURE UpdateBudgetRate@1100525025();
    VAR
      ProjBudgetRate@1100525000 : Record 11020231;
    BEGIN
      //**4PS
      //DP00883
      ProjBudgetRate.SETRANGE("Project No.", "No.");
      IF ProjBudgetRate.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          ProjBudgetRate.VALIDATE("Currency Code", "Currency Code");
          ProjBudgetRate.MODIFY;
        UNTIL ProjBudgetRate.NEXT = 0;
      END;

      UpdateBudgetLineCurrencyData("No.", '');
      UpdateAdviceOrderCurrencyData("No.");  //DP00884
    END;

    PROCEDURE UpdateBudgetLineCurrencyData@1100525026(iProject@1100525001 : Code[20];iRateCode@1100525002 : Code[10]);
    VAR
      BudgetLine@1100525000 : Record 11012001;
      ProjectCurrencyExchangeRate@1100525003 : Record 11020628;
    BEGIN
      //**4PS
      //DP00883
      //DP00886: local functions for ExchangeAmt moved from BudgetLine to ProjectCurrencyExchangeRate.
      BudgetLine.SETFILTER("Project No.", iProject);
      BudgetLine.SETFILTER("Rate Code", iRateCode);
      IF BudgetLine.FINDSET THEN BEGIN
        REPEAT
          IF NOT BudgetLine."Currency Agreement" THEN  //db, 08-03-16
            BudgetLine."Currency Code" := "Currency Code";
          IF BudgetLine."Cost Type" = BudgetLine."Cost Type"::Labor THEN BEGIN
            BudgetLine."Rate (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY(BudgetLine.Rate, FALSE, TRUE, BudgetLine."Currency Code", BudgetLine."Project No.", '', 0D);
          END ELSE BEGIN
            BudgetLine."Gross Price (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY(BudgetLine."Gross Price", FALSE, TRUE, BudgetLine."Currency Code", BudgetLine."Project No.", '', 0D);
            IF BudgetLine."Currency Agreement" THEN BEGIN  //db, 08-03-16
              BudgetLine.Price := ProjectCurrencyExchangeRate.ExchangeAmtFCYToLCY(BudgetLine."Price (FCY)", FALSE, TRUE, BudgetLine."Currency Code", BudgetLine."Project No.", '', 0D);
              BudgetLine.CalculateDiscount;
            END ELSE BEGIN
              BudgetLine."Price (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY(BudgetLine.Price, FALSE, TRUE, BudgetLine."Currency Code", BudgetLine."Project No.", '', 0D);
            END;
          END;
          BudgetLine.CalcTotals;
          BudgetLine.MODIFY;
        UNTIL BudgetLine.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateAdviceOrderCurrencyData@1100525029(iProject@1100525001 : Code[20]);
    VAR
      AdviceOrder@1100525000 : Record 11012055;
      ProjectCurrencyExchangeRate@1100525002 : Record 11020628;
    BEGIN
      //**4PS
      //DP00884
      //DP00886: local functions for ExchangeAmt moved from AdviceOrder to ProjectCurrencyExchangeRate.
      AdviceOrder.SETRANGE("Record Type", AdviceOrder."Record Type"::Project);
      AdviceOrder.SETFILTER("Project No.", iProject);
      AdviceOrder.SETRANGE(Processed, FALSE);  //db, 08-03-16
      IF AdviceOrder.FINDSET THEN BEGIN
        REPEAT
          IF NOT AdviceOrder."Currency Agreement" THEN  //db, 08-03-16
            AdviceOrder."Currency Code" := "Currency Code";
          AdviceOrder."Gross Price (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY(AdviceOrder."Gross Price", FALSE, TRUE, AdviceOrder."Currency Code", AdviceOrder."Project No.", '', 0D);
          IF AdviceOrder."Currency Agreement" THEN BEGIN  //db, 08-03-16
            AdviceOrder.Price := ProjectCurrencyExchangeRate.ExchangeAmtFCYToLCY(AdviceOrder."Price (FCY)", FALSE, TRUE, AdviceOrder."Currency Code", AdviceOrder."Project No.", '', 0D);
            AdviceOrder."Sales Price" := ProjectCurrencyExchangeRate.ExchangeAmtFCYToLCY(AdviceOrder."Sales Price (FCY)", FALSE, TRUE, AdviceOrder."Currency Code", AdviceOrder."Project No.", '', 0D);
            AdviceOrder."Alternative Price":= ProjectCurrencyExchangeRate.ExchangeAmtFCYToLCY(AdviceOrder."Alternative Price (FCY)", FALSE, TRUE, AdviceOrder."Currency Code", AdviceOrder."Project No.", '', 0D);
            AdviceOrder.Amount := ProjectCurrencyExchangeRate.ExchangeAmtFCYToLCY(AdviceOrder."Amount (FCY)", FALSE, TRUE, AdviceOrder."Currency Code", AdviceOrder."Project No.", '', 0D);
            AdviceOrder.CalculateDiscount;
          END ELSE BEGIN
            AdviceOrder."Price (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY(AdviceOrder.Price, FALSE, TRUE, AdviceOrder."Currency Code", AdviceOrder."Project No.", '', 0D);
            AdviceOrder."Sales Price (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY(AdviceOrder."Sales Price", FALSE, TRUE, AdviceOrder."Currency Code", AdviceOrder."Project No.", '', 0D);
            AdviceOrder."Alternative Price (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY(AdviceOrder."Alternative Price", FALSE, TRUE, AdviceOrder."Currency Code", AdviceOrder."Project No.", '', 0D);
            AdviceOrder."Amount (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY(AdviceOrder.Amount, FALSE, TRUE, AdviceOrder."Currency Code", AdviceOrder."Project No.", '', 0D);
          END;
          AdviceOrder.CalculateTotal;
          AdviceOrder.MODIFY;
        UNTIL AdviceOrder.NEXT = 0;
      END;
    END;

    PROCEDURE PrintRecords@1100528410() : Boolean;
    VAR
      ReportSelections@1100528401 : Record 77;
      Job@1100528400 : Record 11072003;
    BEGIN
      //**4PS
      Job.COPY(Rec);
      IF Job.ISEMPTY THEN
        EXIT(FALSE);

      ReportSelections.SETRANGE(Usage, 1006);
      ReportSelections.SETRANGE("Default Selection", TRUE);
      ReportSelections.FINDSET;

      REPEAT
        REPORT.RUNMODAL(ReportSelections."Report ID", FALSE, TRUE, Job);
      UNTIL ReportSelections.NEXT = 0;

      EXIT(TRUE);
    END;

    PROCEDURE SaveRecordsAsPDFFiles@1100528409(VAR TempEmailAttachment@1100528400 : TEMPORARY Record 11229294) : Boolean;
    VAR
      ReportSelections@1100528402 : Record 77;
      Job@1100528401 : Record 11072003;
      Job2@1100528405 : Record 11072003;
      EMailSetup@1100528406 : Record 11229911;
      DocumentPrint@1100528403 : Codeunit 229;
      DocumentMailing@1100528407 : Codeunit 260;
      I@1100528404 : Integer;
    BEGIN
      //**4PS
      Job.COPY(Rec);
      IF Job.ISEMPTY THEN
        EXIT(FALSE);

      Job.FINDSET;

      ReportSelections.SETRANGE(Usage, 1006);
      ReportSelections.SETRANGE("Default Selection", TRUE);

      REPEAT
        ReportSelections.FINDSET;
        I := 0;
        REPEAT
          Job2 := Job;
          Job2.SETRECFILTER;
          DocumentPrint.SaveAnyRecordReportAsPdf(
            Job2, EMailSetup.Usage::"120", Job2."Global Dimension 1 Code",
            ReportSelections."Report ID", TRUE, TempEmailAttachment);
          TempEmailAttachment."Attachment Name" := DocumentMailing.ComposePDFFileName(
            Job2.TABLECAPTION, Job2."No.", I);
          TempEmailAttachment.MODIFY;
          I := I + 1;
        UNTIL ReportSelections.NEXT = 0;
      UNTIL Job.NEXT = 0;

      EXIT(TRUE);
    END;

    PROCEDURE OnModify@1100409100(xRec@1100409001 : Record 11072003);
    VAR
      ReqActCapByDayRec@1100409004 : Record 11125709;
      AssignActCapByDayRec@1100409003 : Record 11125711;
      "-SEEV"@1100409002 : Integer;
      cuSymbrio@1100409000 : Codeunit 11127975;
      ProjectPrincipal@1100525002 : Record 11012005;
      SymbrioSetup@1100285500 : Record 11127975;
    BEGIN
      "Last Date Modified" := TODAY;
      "Time Last Modified" := TIME; // 4PSHM 140131

      //**4PS.sn
      "Modified by" := USERID;
      IF "Version Date" <> xRec."Version Date" THEN BEGIN
        BudgetRec.RESET;
        BudgetRec.SETRANGE("Project No.","No.");
        BudgetRec.SETRANGE(Adjustment,'');
        BudgetRec.SETRANGE(Option,'');
        BudgetRec.SETRANGE("Extension Contract",'');
        BudgetRec.SETFILTER("Version Date",'<> %1',"Version Date");
        BudgetRec.MODIFYALL("Version Date","Version Date",TRUE);

        BudgetSummarySheetRec.RESET;
        BudgetSummarySheetRec.SETRANGE("Project No.","No.");
        BudgetSummarySheetRec.SETRANGE(Option,'');
        BudgetSummarySheetRec.SETRANGE("Contract No.",'');
        BudgetSummarySheetRec.SETFILTER("Version Date",'<> %1',"Version Date");
        BudgetSummarySheetRec.MODIFYALL("Version Date","Version Date",TRUE);
      END;
      IF ("Starting Date" <> xRec."Starting Date") OR ("Ending Date" <> xRec."Ending Date") THEN
        UpdateProjectStartElement;
      IF "Project Status" <> xRec."Project Status" THEN
        "Status Modification Date" := TODAY;
      IF ("Technical Finished Date" <> 0D) AND ("Project Status" < "Project Status"::"Technical Finished") THEN
        "Technical Finished Date" := 0D;

      IF ("SharePoint Status" = "SharePoint Status"::Updated) AND
         (xRec."SharePoint Status" = "SharePoint Status"::Updated) THEN
        "SharePoint Status" := "SharePoint Status"::Modified;

      IF "Settlement Method" <> "Settlement Method"::"Cost Plus" THEN BEGIN
        ProjectPrincipal.SETRANGE("Project No.", "No.");
        ProjectPrincipal.SETFILTER("Estimated Amount", '<>%1', 0);
        ProjectPrincipal.MODIFYALL("Estimated Amount", 0);
      END;
      IF (NOT ("Project Status" IN ["Project Status"::Preparation, "Project Status"::Production])) AND
         (xRec."Project Status" IN ["Project Status"::Preparation, "Project Status"::Production])
      THEN BEGIN
        ReqActCapByDayRec.SETRANGE("Project No.", "No.");
        ReqActCapByDayRec.SETFILTER(Date, '%1..', TODAY);
        ReqActCapByDayRec.DELETEALL;
        AssignActCapByDayRec.SETRANGE("Project No.", "No.");
        AssignActCapByDayRec.SETFILTER(Date, '%1..', TODAY);
        AssignActCapByDayRec.DELETEALL;
      END;
      //**4PS.en

      ProjectSiteMgt.LogJob(2, Rec); //**4PS.n

      IF SymbrioSetup.READPERMISSION THEN
      //>>SYM020
      // SYM036 <<
      //IF ExportToSymbrio.JobIsReadyForExport(Rec) AND
      //  (("Project Status" = "Project Status"::Preparation) OR ("Project Status" = "Project Status"::Production))
      //  THEN
      // SYM036 >>
      //<<SYM020
        //>>130604 JOSV
        cuSymbrio.fnMarkJobForExportToSymbrio(Rec,xRec);
        //<<130604 JOSV
    END;

    BEGIN
    {

      -SE EVRY-
      LAHE 121211 "Prognosis Cost Level"
      LAHE 121214 Added Key: "Last Date Modified,Estimator,Project Status,Single/Main/Sub Project"
      LAHE 130102 Create Cost Plus in InsertSettlementSheet()
      LAHE 130116 "Price List Code"
      LAHE 130306 Removed "Prognosis Cost Level", expanded "Forecast Level" with "Cost Component"

      130702 ITERO.LP New function InsertProjPrincipalExt to make it possible to skip the settlement sheet.
      130916 ITERO.DJ Added new field, Export To Symbrio as Boolean
      130917 ITERO.DJ set Export to Symbrio Boolean to TRUE OnInsert
      131021 ITERO.SB Changed "set Export to Symbrio Boolean to TRUE OnInsert"
      131107 ITERO.LP IME054 New function SetAltNoSeries() to override No Series from JobsSetup.
      140131 ITERO.MH 4PSHM New field "Time Last Modified" and with triggers on onInsert() and onModify()
      140213 ITERO.LP IME104 Adjustment when exporting to Symbrio.
      14021? ITERO.HG IME109 Internal customer automatic update
      140325 ITERO.DJ ENH020 removed field ROT fixed amount moved it to Pricipal table
      140410 ITERO.MH IME012 Added ROT project principal validation
      140416 ITERO.MH 4PSHM Added GUIALLOWED-code to account for NAS
      140530 ITERO.DL 4PS-039 Department authorization R2
      140630 ITERO.DL IME156 Symbrio NAS taking 5 minutes to process
      140702 ITERO.MH IME159 Added "SkipModify" in BuildCostControl function
      14063x ITERO.DL SYM020 PROJ exports not sending Active0
      140711 ITERO.WG 4PS-042 Added functions 'OpenProjectControlSummarized' and  'OpenProjectControlOverview'
      140815 ITERO.DL IME155 exclude "Component Type"::'expense hours' from "Open Amount (Hours)", "Open Ovh. Surch. (Hours)", "Open Hours"

      150108 ITERO.WG Added Cost Type=Filter(Labor) to field Hour Prognosis
      150218 ITERO.MH SYM036 Changed criteria for export to Symbrio - changed deletion entry too
      150908 ITERO.AC RFC030 Check main project status when a Sub Project is Created
      150917 ITERO.SB RFC-001 Added reference when creating new settlement sheet
      150924 ITERO.PR "Default Project Status", "Default Project Type" from Job Setup
      151110 ITERO.PR RFC-062 Check if allowed to change "No." - OnRename
      151112 ITERO.DL RFC014-2 timingerrors, use JobStatus at modified-time instead of current

      151207 ITERO.PR RFC-085 Get deafult "Price List Code" if not on Customer
      160311 ITERO.SB RFC-106 New field, Invoiced (ready)
      160608 ITERO.SB RAD-006 Added field "Delivery Address Note"
      160517 ITERO.DL RFC-101 New fields 11128100-11128105 precalculated values based on flowfields and proj.control
      160531 ITERO.DL IME-479  moved from pag11072003+11072004  ShowQuotesForProject() + ShowPurchaseOrdersForProject()
                              added code-optimisation
      160818 ITERO.AC RFC-116 Logic in trigger OnModify() moved to new separate function OnModiFy() in order to make it possible to change status from other objects
      161011 ITERO.AC RAD043  * Added filed "Sales Discount Term Percent" in Customer Service Order and Job.
                              * Get Discount Term Group or Percent from customer in new projects
      161012 ITERO.AC RAD043 Adjusted Caption ML for "Sales Discount Term Percent"
    }
    END.
  }
}

