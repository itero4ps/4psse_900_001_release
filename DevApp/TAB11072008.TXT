OBJECT Table 11072008 Job Journal Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.43402,4PS9.00 (210);
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               LOCKTABLE;
               JobJnlTemplate.GET("Journal Template Name");
               JobJnlBatch.GET("Journal Template Name","Journal Batch Name");

               ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
               ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
             END;

    OnModify=BEGIN
               IF (Type = Type::Item) AND (xRec.Type = Type::Item) THEN
                 ReserveJobJnlLine.VerifyChange(Rec,xRec)
               ELSE
                 IF (Type <> Type::Item) AND (xRec.Type = Type::Item) THEN
                   ReserveJobJnlLine.DeleteLine(xRec);
             END;

    OnDelete=BEGIN
               IF Type = Type::Item THEN
                 ReserveJobJnlLine.DeleteLine(Rec);
             END;

    OnRename=BEGIN
               ReserveJobJnlLine.RenameLine(Rec,xRec);
             END;

    CaptionML=ENU=Project Journal Line;
  }
  FIELDS
  {
    { 1   ;   ;Journal Template Name;Code10       ;TableRelation="Job Journal Template";
                                                   CaptionML=ENU=Journal Template Name }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 3   ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   OnValidate=BEGIN
                                                                IF "Job No." = '' THEN BEGIN
                                                                  VALIDATE("Currency Code",'');
                                                                  VALIDATE("Job Task No.",'');
                                                                  CreateDim(
                                                                    DATABASE::Job,"Job No.",
                                                                    DimMgt.TypeToTableID2(Type),"No.",
                                                                    DATABASE::"Service Order","Service Order No.",  //** 4PS.n
                                                                    DATABASE::"Resource Group","Resource Group No.",
                                                                    DATABASE::Location,"Location Code"); //**4PS.n
                                                                  EXIT;
                                                                END;

                                                                GetJob;
                                                                Job.TestBlocked;
                                                                Job.TESTFIELD("Bill-to Customer No.");
                                                                Cust.GET(Job."Bill-to Customer No.");
                                                                VALIDATE("Job Task No.",'');
                                                                "Customer Price Group" := Job."Customer Price Group";
                                                                VALIDATE("Currency Code",Job."Currency Code");
                                                                CreateDim(
                                                                  DATABASE::Job,"Job No.",
                                                                  DimMgt.TypeToTableID2(Type),"No.",
                                                                  DATABASE::"Service Order","Service Order No.",   //** 4PS.n
                                                                  DATABASE::"Resource Group","Resource Group No.",
                                                                  DATABASE::Location,"Location Code");           //**4PS.n
                                                                VALIDATE("Country/Region Code",Cust."Country/Region Code");
                                                              END;

                                                   CaptionML=ENU=Project No. }
    { 4   ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Document Date","Posting Date");
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  UpdateCurrencyFactor;
                                                                  UpdateAllAmounts;
                                                                END
                                                              END;

                                                   CaptionML=ENU=Posting Date }
    { 5   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 6   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                VALIDATE("No.",'');
                                                                IF Type = Type::Item THEN BEGIN
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Resource,Item,G/L Account;
                                                   OptionString=Resource,Item,G/L Account }
    { 8   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(Resource)) Resource
                                                                 ELSE IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(G/L Account)) "G/L Account";
                                                   OnValidate=BEGIN
                                                                IF ("No." = '') OR ("No." <> xRec."No.") THEN BEGIN
                                                                  Description := '';
                                                                  "Unit of Measure Code" := '';
                                                                  "Qty. per Unit of Measure" := 1;
                                                                  "Variant Code" := '';
                                                                  "Work Type Code" := '';
                                                                  DeleteAmounts;
                                                                  "Cost Factor" := 0;
                                                                  "Applies-to Entry" := 0;
                                                                  "Applies-from Entry" := 0;
                                                                  CheckedAvailability := FALSE;
                                                                  "Job Planning Line No." := 0;
                                                                  IF "No." = '' THEN BEGIN
                                                                    UpdateDimensions;
                                                                    EXIT;
                                                                  END
                                                                END;

                                                                CASE Type OF
                                                                  Type::Resource:
                                                                    BEGIN
                                                                      Res.GET("No.");
                                                                      Res.TESTFIELD(Blocked,FALSE);
                                                                      Description := Res.Name;
                                                                      "Description 2" := Res."Name 2";
                                                                      "Resource Group No." := Res."Resource Group No.";
                                                                      "Gen. Prod. Posting Group" := Res."Gen. Prod. Posting Group";
                                                                      VALIDATE("Unit of Measure Code",Res."Base Unit of Measure");
                                                                      IF "Time Sheet No." = '' THEN
                                                                        Res.TESTFIELD("Use Time Sheet",FALSE);
                                                                    END;
                                                                  Type::Item:
                                                                    BEGIN
                                                                      GetItem;
                                                                      Item.TESTFIELD(Blocked,FALSE);
                                                                      Description := Item.Description;
                                                                      "Description 2" := Item."Description 2";
                                                                      GetJob;
                                                                      IF Job."Language Code" <> '' THEN
                                                                        GetItemTranslation;
                                                                      "Posting Group" := Item."Inventory Posting Group";
                                                                      "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
                                                                      VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
                                                                    END;
                                                                  Type::"G/L Account":
                                                                    BEGIN
                                                                      GLAcc.GET("No.");
                                                                      GLAcc.CheckGLAcc;
                                                                      GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      Description := GLAcc.Name;
                                                                      "Gen. Bus. Posting Group" := GLAcc."Gen. Bus. Posting Group";
                                                                      "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                                                                      "Unit of Measure Code" := '';
                                                                      "Direct Unit Cost (LCY)" := 0;
                                                                      "Unit Cost (LCY)" := 0;
                                                                      "Unit Price" := 0;
                                                                    END;
                                                                END;

                                                                VALIDATE(Quantity);
                                                                UpdateDimensions;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 9   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 10  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                "Quantity (Base)" := CalcBaseQty(Quantity);
                                                                UpdateAllAmounts;

                                                                IF "Job Planning Line No." <> 0 THEN
                                                                  VALIDATE("Job Planning Line No.");

                                                                CheckItemAvailable;
                                                                IF Item."Item Tracking Code" <> '' THEN
                                                                  ReserveJobJnlLine.VerifyQuantity(Rec,xRec);
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 12  ;   ;Direct Unit Cost (LCY);Decimal     ;CaptionML=ENU=Direct Unit Cost (LCY);
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 13  ;   ;Unit Cost (LCY)     ;Decimal       ;OnValidate=BEGIN
                                                                IF (Type = Type::Item) AND
                                                                   Item.GET("No.") AND
                                                                   (Item."Costing Method" = Item."Costing Method"::Standard)
                                                                THEN
                                                                  UpdateAllAmounts
                                                                ELSE BEGIN
                                                                  InitRoundingPrecisions;
                                                                  "Unit Cost" := ROUND(
                                                                      CurrExchRate.ExchangeAmtLCYToFCY(
                                                                        //**4PS.so
                                                                        //"Posting Date","Currency Code",
                                                                        //"Unit Cost (LCY)","Currency Factor"),
                                                                        //**4PS.eo
                                                                        //**4PS.sn
                                                                        0, '', "Posting Date","Currency Code",
                                                                        "Unit Cost (LCY)","Currency Factor",FALSE),
                                                                        //**4PS.en
                                                                      UnitAmountRoundingPrecisionFCY);
                                                                  UpdateAllAmounts;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Unit Cost (LCY);
                                                   MinValue=0;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 14  ;   ;Total Cost (LCY)    ;Decimal       ;CaptionML=ENU=Total Cost (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 15  ;   ;Unit Price (LCY)    ;Decimal       ;OnValidate=BEGIN
                                                                InitRoundingPrecisions;
                                                                "Unit Price" := ROUND(
                                                                    CurrExchRate.ExchangeAmtLCYToFCY(
                                                                      //**4PS.so
                                                                      //"Posting Date","Currency Code",
                                                                      //"Unit Price (LCY)","Currency Factor"),
                                                                      //**4PS.eo
                                                                      //**4PS.sn
                                                                      0, '', "Posting Date","Currency Code",
                                                                      "Unit Price (LCY)","Currency Factor",FALSE),
                                                                      //**4PS.en
                                                                    UnitAmountRoundingPrecisionFCY);
                                                                UpdateAllAmounts;
                                                              END;

                                                   CaptionML=ENU=Unit Price (LCY);
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 16  ;   ;Total Price (LCY)   ;Decimal       ;CaptionML=ENU=Total Price (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 17  ;   ;Resource Group No.  ;Code20        ;TableRelation="Resource Group";
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Resource Group","Resource Group No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Service Order","Service Order No.",  //** 4PS.n
                                                                  DimMgt.TypeToTableID2(Type),"No.",
                                                                  DATABASE::Location,"Location Code"); //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Resource Group No.;
                                                   Editable=No }
    { 18  ;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE IF (Type=CONST(Resource)) "Resource Unit of Measure".Code WHERE (Resource No.=FIELD(No.))
                                                                 ELSE "Unit of Measure";
                                                   OnValidate=VAR
                                                                Resource@1000 : Record 156;
                                                              BEGIN
                                                                GetGLSetup;
                                                                CASE Type OF
                                                                  Type::Item:
                                                                    BEGIN
                                                                      Item.GET("No.");
                                                                      "Qty. per Unit of Measure" :=
                                                                        UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                                                    END;
                                                                  Type::Resource:
                                                                    BEGIN
                                                                      IF CurrFieldNo <> FIELDNO("Work Type Code") THEN
                                                                        IF "Work Type Code" <> '' THEN BEGIN
                                                                          WorkType.GET("Work Type Code");
                                                                          IF WorkType."Unit of Measure Code" <> '' THEN
                                                                            TESTFIELD("Unit of Measure Code",WorkType."Unit of Measure Code");
                                                                        END ELSE
                                                                          TESTFIELD("Work Type Code",'');
                                                                      IF "Unit of Measure Code" = '' THEN BEGIN
                                                                        Resource.GET("No.");
                                                                        "Unit of Measure Code" := Resource."Base Unit of Measure";
                                                                      END;
                                                                      ResUnitofMeasure.GET("No.","Unit of Measure Code");
                                                                      "Qty. per Unit of Measure" := ResUnitofMeasure."Qty. per Unit of Measure";
                                                                      "Quantity (Base)" := Quantity * "Qty. per Unit of Measure";
                                                                    END;
                                                                  Type::"G/L Account":
                                                                    "Qty. per Unit of Measure" := 1;
                                                                END;
                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 21  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                "Bin Code" := '';

                                                                IF "Location Code" <> '' THEN
                                                                  IF IsServiceItem THEN
                                                                    Item.TESTFIELD(Type,Item.Type::Inventory);
                                                                GetLocation("Location Code");
                                                                Location.TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                VALIDATE(Quantity);

                                                                //**4PS.sn
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID2(Type),"No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Service Order","Service Order No.",
                                                                  DATABASE::"Resource Group","Resource Group No.",
                                                                  DATABASE::Location,"Location Code"); //**4PS.n
                                                                //**4PS.sn
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 22  ;   ;Chargeable          ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                IF Chargeable <> xRec.Chargeable THEN
                                                                  IF NOT Chargeable THEN
                                                                    VALIDATE("Unit Price",0)
                                                                  ELSE
                                                                    VALIDATE("No.");
                                                              END;

                                                   CaptionML=ENU=Chargeable }
    { 30  ;   ;Posting Group       ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group";
                                                   CaptionML=ENU=Posting Group;
                                                   Editable=No }
    { 31  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 32  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 33  ;   ;Work Type Code      ;Code10        ;TableRelation="Work Type";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::Resource);
                                                                VALIDATE("Line Discount %",0);
                                                                IF ("Work Type Code" = '') AND (xRec."Work Type Code" <> '') THEN BEGIN
                                                                  Res.GET("No.");
                                                                  "Unit of Measure Code" := Res."Base Unit of Measure";
                                                                  VALIDATE("Unit of Measure Code");
                                                                END;
                                                                IF WorkType.GET("Work Type Code") THEN
                                                                  IF WorkType."Unit of Measure Code" <> '' THEN BEGIN
                                                                    "Unit of Measure Code" := WorkType."Unit of Measure Code";
                                                                    IF ResUnitofMeasure.GET("No.","Unit of Measure Code") THEN
                                                                      "Qty. per Unit of Measure" := ResUnitofMeasure."Qty. per Unit of Measure";
                                                                  END ELSE BEGIN
                                                                    Res.GET("No.");
                                                                    "Unit of Measure Code" := Res."Base Unit of Measure";
                                                                    VALIDATE("Unit of Measure Code");
                                                                  END;
                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=ENU=Work Type Code }
    { 34  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   OnValidate=BEGIN
                                                                IF (Type = Type::Item) AND ("No." <> '') THEN
                                                                  UpdateAllAmounts;
                                                              END;

                                                   CaptionML=ENU=Customer Price Group }
    { 37  ;   ;Applies-to Entry    ;Integer       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                InitRoundingPrecisions;
                                                                TESTFIELD(Type,Type::Item);
                                                                IF "Applies-to Entry" <> 0 THEN BEGIN
                                                                  ItemLedgEntry.GET("Applies-to Entry");
                                                                  TESTFIELD(Quantity);
                                                                  IF Quantity < 0 THEN
                                                                    FIELDERROR(Quantity,Text002);
                                                                  ItemLedgEntry.TESTFIELD(Open,TRUE);
                                                                  ItemLedgEntry.TESTFIELD(Positive,TRUE);
                                                                  "Location Code" := ItemLedgEntry."Location Code";
                                                                  "Variant Code" := ItemLedgEntry."Variant Code";
                                                                  GetItem;
                                                                  IF Item."Costing Method" <> Item."Costing Method"::Standard THEN BEGIN
                                                                    "Unit Cost" := ROUND(
                                                                        CurrExchRate.ExchangeAmtLCYToFCY(
                                                                          //**4PS.so
                                                                          //"Posting Date","Currency Code",
                                                                          //CalcUnitCost(ItemLedgEntry),"Currency Factor"),
                                                                          //**4PS.eo
                                                                          //**4PS.sn
                                                                          0, '', "Posting Date","Currency Code",
                                                                          CalcUnitCost(ItemLedgEntry),"Currency Factor",FALSE),
                                                                          //**4PS.en
                                                                        UnitAmountRoundingPrecisionFCY);
                                                                    UpdateAllAmounts;
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Applies-to Entry"));
                                                            END;

                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=ENU=Applies-to Entry }
    { 61  ;   ;Entry Type          ;Option        ;CaptionML=ENU=Entry Type;
                                                   OptionCaptionML=ENU=Usage,Sale;
                                                   OptionString=Usage,Sale;
                                                   Editable=No }
    { 62  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=ENU=Source Code;
                                                   Editable=No }
    { 73  ;   ;Journal Batch Name  ;Code10        ;TableRelation="Job Journal Batch".Name WHERE (Journal Template Name=FIELD(Journal Template Name));
                                                   CaptionML=ENU=Journal Batch Name }
    { 74  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 75  ;   ;Recurring Method    ;Option        ;CaptionML=ENU=Recurring Method;
                                                   OptionCaptionML=ENU=,Fixed,Variable;
                                                   OptionString=,Fixed,Variable;
                                                   BlankZero=Yes }
    { 76  ;   ;Expiration Date     ;Date          ;CaptionML=ENU=Expiration Date }
    { 77  ;   ;Recurring Frequency ;DateFormula   ;CaptionML=ENU=Recurring Frequency }
    { 79  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 80  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 81  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=ENU=Transaction Type }
    { 82  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=ENU=Transport Method }
    { 83  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region Code }
    { 86  ;   ;Entry/Exit Point    ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=ENU=Entry/Exit Point }
    { 87  ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date }
    { 88  ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No. }
    { 89  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=ENU=Area }
    { 90  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=ENU=Transaction Specification }
    { 91  ;   ;Serial No.          ;Code40        ;OnLookup=BEGIN
                                                              TESTFIELD(Type,Type::Item);
                                                              SelectItemEntry(FIELDNO("Serial No."));
                                                            END;

                                                   CaptionML=ENU=Serial No. }
    { 92  ;   ;Posting No. Series  ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Posting No. Series }
    { 93  ;   ;Source Currency Code;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Source Currency Code;
                                                   Editable=No }
    { 94  ;   ;Source Currency Total Cost;Decimal ;CaptionML=ENU=Source Currency Total Cost;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 95  ;   ;Source Currency Total Price;Decimal;CaptionML=ENU=Source Currency Total Price;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 96  ;   ;Source Currency Line Amount;Decimal;CaptionML=ENU=Source Currency Line Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=No }
    { 950 ;   ;Time Sheet No.      ;Code20        ;TableRelation="Time Sheet Header";
                                                   CaptionML=ENU=Time Sheet No. }
    { 951 ;   ;Time Sheet Line No. ;Integer       ;TableRelation="Time Sheet Line"."Line No." WHERE (Time Sheet No.=FIELD(Time Sheet No.));
                                                   CaptionML=ENU=Time Sheet Line No. }
    { 952 ;   ;Time Sheet Date     ;Date          ;TableRelation="Time Sheet Detail".Date WHERE (Time Sheet No.=FIELD(Time Sheet No.),
                                                                                                 Time Sheet Line No.=FIELD(Time Sheet Line No.));
                                                   CaptionML=ENU=Time Sheet Date }
    { 1000;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   OnValidate=VAR
                                                                JobTask@1000 : Record 11072600;
                                                              BEGIN
                                                                IF ("Job Task No." = '') OR (("Job Task No." <> xRec."Job Task No.") AND (xRec."Job Task No." <> '')) THEN BEGIN
                                                                  VALIDATE("No.",'');
                                                                  EXIT;
                                                                END;

                                                                TESTFIELD("Job No.");
                                                                JobTask.GET("Job No.","Job Task No.");
                                                                JobTask.TESTFIELD("Job Task Type",JobTask."Job Task Type"::Posting);
                                                                UpdateDimensions;
                                                              END;

                                                   CaptionML=ENU=Job Task No. }
    { 1001;   ;Total Cost          ;Decimal       ;CaptionML=ENU=Total Cost;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 1002;   ;Unit Price          ;Decimal       ;OnValidate=BEGIN
                                                                UpdateAllAmounts;
                                                              END;

                                                   CaptionML=ENU=Unit Price;
                                                   MinValue=0;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 1003;   ;Line Type           ;Option        ;OnValidate=BEGIN
                                                                IF "Job Planning Line No." <> 0 THEN
                                                                  ERROR(Text006,FIELDCAPTION("Line Type"),FIELDCAPTION("Job Planning Line No."));
                                                              END;

                                                   CaptionML=ENU=Line Type;
                                                   OptionCaptionML=ENU=" ,Schedule,Contract,Both Schedule and Contract";
                                                   OptionString=[ ,Schedule,Contract,Both Schedule and Contract] }
    { 1004;   ;Applies-from Entry  ;Integer       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                InitRoundingPrecisions;
                                                                TESTFIELD(Type,Type::Item);
                                                                IF "Applies-from Entry" <> 0 THEN BEGIN
                                                                  TESTFIELD(Quantity);
                                                                  IF Quantity > 0 THEN
                                                                    FIELDERROR(Quantity,Text003);
                                                                  ItemLedgEntry.GET("Applies-from Entry");
                                                                  ItemLedgEntry.TESTFIELD(Positive,FALSE);
                                                                  IF Item."Costing Method" <> Item."Costing Method"::Standard THEN BEGIN
                                                                    "Unit Cost" := ROUND(
                                                                        CurrExchRate.ExchangeAmtLCYToFCY(
                                                                          //**4PS.so
                                                                          //"Posting Date","Currency Code",
                                                                          //CalcUnitCostFrom(ItemLedgEntry."Entry No."),"Currency Factor"),
                                                                          //**4PS.eo
                                                                          //**4PS.sn
                                                                          0, '', "Posting Date","Currency Code",
                                                                          CalcUnitCostFrom(ItemLedgEntry."Entry No."),"Currency Factor",FALSE),
                                                                          //**4PS.en
                                                                        UnitAmountRoundingPrecisionFCY);
                                                                    UpdateAllAmounts;
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Applies-from Entry"));
                                                            END;

                                                   CaptionML=ENU=Applies-from Entry;
                                                   MinValue=0 }
    { 1005;   ;Job Posting Only    ;Boolean       ;CaptionML=ENU=Job Posting Only }
    { 1006;   ;Line Discount %     ;Decimal       ;OnValidate=BEGIN
                                                                UpdateAllAmounts;
                                                              END;

                                                   CaptionML=ENU=Line Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 1007;   ;Line Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                UpdateAllAmounts;
                                                              END;

                                                   CaptionML=ENU=Line Discount Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 1008;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                UpdateCurrencyFactor;
                                                              END;

                                                   CaptionML=ENU=Currency Code;
                                                   Editable=No }
    { 1009;   ;Line Amount         ;Decimal       ;OnValidate=BEGIN
                                                                UpdateAllAmounts;
                                                              END;

                                                   CaptionML=ENU=Line Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 1010;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Currency Code" = '') AND ("Currency Factor" <> 0) THEN
                                                                  FIELDERROR("Currency Factor",STRSUBSTNO(Text001,FIELDCAPTION("Currency Code")));
                                                                UpdateAllAmounts;
                                                              END;

                                                   CaptionML=ENU=Currency Factor;
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=No }
    { 1011;   ;Unit Cost           ;Decimal       ;OnValidate=BEGIN
                                                                UpdateAllAmounts;
                                                              END;

                                                   CaptionML=ENU=Unit Cost;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 1012;   ;Line Amount (LCY)   ;Decimal       ;OnValidate=BEGIN
                                                                InitRoundingPrecisions;
                                                                "Line Amount" := ROUND(
                                                                    CurrExchRate.ExchangeAmtLCYToFCY(
                                                                      //**4PS.so
                                                                      //"Posting Date","Currency Code",
                                                                      //"Line Amount (LCY)","Currency Factor"),
                                                                      //**4PS.eo
                                                                      //**4PS.sn
                                                                      0, '', "Posting Date","Currency Code",
                                                                      "Line Amount (LCY)","Currency Factor",FALSE),
                                                                      //**4PS.en
                                                                    AmountRoundingPrecisionFCY);
                                                                UpdateAllAmounts;
                                                              END;

                                                   CaptionML=ENU=Line Amount (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1013;   ;Line Discount Amount (LCY);Decimal ;OnValidate=BEGIN
                                                                InitRoundingPrecisions;
                                                                "Line Discount Amount" := ROUND(
                                                                    CurrExchRate.ExchangeAmtLCYToFCY(
                                                                      //**4PS.so
                                                                      //"Posting Date","Currency Code",
                                                                      //"Line Discount Amount (LCY)","Currency Factor"),
                                                                      //**4PS.eo
                                                                      //**4PS.sn
                                                                      0, '', "Posting Date","Currency Code",
                                                                      "Line Discount Amount (LCY)","Currency Factor",FALSE),
                                                                      //**4PS.en
                                                                    AmountRoundingPrecisionFCY);
                                                                UpdateAllAmounts;
                                                              END;

                                                   CaptionML=ENU=Line Discount Amount (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1014;   ;Total Price         ;Decimal       ;CaptionML=ENU=Total Price;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 1015;   ;Cost Factor         ;Decimal       ;CaptionML=ENU=Cost Factor;
                                                   Editable=No }
    { 1016;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 1017;   ;Ledger Entry Type   ;Option        ;CaptionML=ENU=Ledger Entry Type;
                                                   OptionCaptionML=ENU=" ,Resource,Item,G/L Account";
                                                   OptionString=[ ,Resource,Item,G/L Account] }
    { 1018;   ;Ledger Entry No.    ;Integer       ;TableRelation=IF (Ledger Entry Type=CONST(Resource)) "Res. Ledger Entry"
                                                                 ELSE IF (Ledger Entry Type=CONST(Item)) "Item Ledger Entry"
                                                                 ELSE IF (Ledger Entry Type=CONST(G/L Account)) "G/L Entry";
                                                   CaptionML=ENU=Ledger Entry No.;
                                                   BlankZero=Yes }
    { 1019;   ;Job Planning Line No.;Integer      ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 11020401;
                                                              BEGIN
                                                                IF "Job Planning Line No." <> 0 THEN BEGIN
                                                                  ValidateJobPlanningLineLink;
                                                                  JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");

                                                                  JobPlanningLine.TESTFIELD("Job No.","Job No.");
                                                                  JobPlanningLine.TESTFIELD("Job Task No.","Job Task No.");
                                                                  JobPlanningLine.TESTFIELD(Type,Type);
                                                                  JobPlanningLine.TESTFIELD("No.","No.");
                                                                  JobPlanningLine.TESTFIELD("Usage Link",TRUE);
                                                                  JobPlanningLine.TESTFIELD("System-Created Entry",FALSE);

                                                                  "Line Type" := JobPlanningLine."Line Type" + 1;
                                                                  VALIDATE("Remaining Qty.",CalcQtyFromBaseQty(JobPlanningLine."Remaining Qty. (Base)" - "Quantity (Base)"));
                                                                END ELSE
                                                                  VALIDATE("Remaining Qty.",0);
                                                              END;

                                                   OnLookup=VAR
                                                              JobPlanningLine@1000 : Record 11020401;
                                                              Resource@1002 : Record 156;
                                                              Filter@1003 : Text;
                                                            BEGIN
                                                              JobPlanningLine.SETRANGE("Job No.","Job No.");
                                                              JobPlanningLine.SETRANGE("Job Task No.","Job Task No.");
                                                              JobPlanningLine.SETRANGE(Type,Type);
                                                              JobPlanningLine.SETRANGE("No.","No.");
                                                              JobPlanningLine.SETRANGE("Usage Link",TRUE);
                                                              JobPlanningLine.SETRANGE("System-Created Entry",FALSE);
                                                              IF Type = Type::Resource THEN BEGIN
                                                                Filter := Resource.GetUnitOfMeasureFilter("No.","Unit of Measure Code");
                                                                JobPlanningLine.SETFILTER("Unit of Measure Code",Filter);
                                                              END;

                                                              IF PAGE.RUNMODAL(0,JobPlanningLine) = ACTION::LookupOK THEN
                                                                VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
                                                            END;

                                                   CaptionML=ENU=Job Planning Line No.;
                                                   BlankZero=Yes }
    { 1030;   ;Remaining Qty.      ;Decimal       ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 11020401;
                                                              BEGIN
                                                                IF ("Remaining Qty." <> 0) AND ("Job Planning Line No." = 0) THEN
                                                                  ERROR(Text004,FIELDCAPTION("Remaining Qty."),FIELDCAPTION("Job Planning Line No."));

                                                                IF "Job Planning Line No." <> 0 THEN BEGIN
                                                                  JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
                                                                  IF JobPlanningLine.Quantity >= 0 THEN BEGIN
                                                                    IF "Remaining Qty." < 0 THEN
                                                                      "Remaining Qty." := 0;
                                                                  END ELSE BEGIN
                                                                    IF "Remaining Qty." > 0 THEN
                                                                      "Remaining Qty." := 0;
                                                                  END;
                                                                END;
                                                                "Remaining Qty. (Base)" := CalcBaseQty("Remaining Qty.");

                                                                CheckItemAvailable;
                                                              END;

                                                   CaptionML=ENU=Remaining Qty.;
                                                   DecimalPlaces=0:5 }
    { 1031;   ;Remaining Qty. (Base);Decimal      ;OnValidate=BEGIN
                                                                VALIDATE("Remaining Qty.",CalcQtyFromBaseQty("Remaining Qty. (Base)"));
                                                              END;

                                                   CaptionML=ENU=Remaining Qty. (Base) }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   OnValidate=BEGIN
                                                                IF "Variant Code" = '' THEN BEGIN
                                                                  IF Type = Type::Item THEN BEGIN
                                                                    Item.GET("No.");
                                                                    Description := Item.Description;
                                                                    "Description 2" := Item."Description 2";
                                                                    GetItemTranslation;
                                                                  END;
                                                                  EXIT;
                                                                END;

                                                                TESTFIELD(Type,Type::Item);

                                                                ItemVariant.GET("No.","Variant Code");
                                                                Description := ItemVariant.Description;
                                                                "Description 2" := ItemVariant."Description 2";

                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 5403;   ;Bin Code            ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD("Location Code");
                                                                IF "Bin Code" <> '' THEN BEGIN
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Bin Mandatory");
                                                                END;
                                                                TESTFIELD(Type,Type::Item);
                                                                CheckItemAvailable;
                                                                WMSManagement.FindBinContent("Location Code","Bin Code","No.","Variant Code",'')
                                                              END;

                                                   OnLookup=VAR
                                                              BinCode@1000 : Code[20];
                                                            BEGIN
                                                              TESTFIELD("Location Code");
                                                              TESTFIELD(Type,Type::Item);
                                                              BinCode := WMSManagement.BinContentLookUp("Location Code","No.","Variant Code",'',"Bin Code");
                                                              IF BinCode <> '' THEN
                                                                VALIDATE("Bin Code",BinCode);
                                                            END;

                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=ENU=Bin Code }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5410;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE(Quantity,CalcQtyFromBaseQty("Quantity (Base)"));
                                                              END;

                                                   CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 5468;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Journal Template Name),
                                                                                                                Source Ref. No.=FIELD(Line No.),
                                                                                                                Source Type=CONST(1011),
                                                                                                                Source Subtype=FIELD(Entry Type),
                                                                                                                Source Batch Name=FIELD(Journal Batch Name),
                                                                                                                Source Prod. Order Line=CONST(0),
                                                                                                                Reservation Status=CONST(Reservation)));
                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=ENU=Reserved Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5900;   ;Service Order No.   ;Code20        ;TableRelation="Service Order";
                                                   OnValidate=BEGIN
                                                                //** 4PS.sn
                                                                CreateDim(
                                                                  DATABASE::"Service Order","Service Order No.",
                                                                  DimMgt.TypeToTableID2(Type),"No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Resource Group","Resource Group No.",
                                                                  DATABASE::Location,"Location Code"); //**4PS.n
                                                                //** 4PS.en
                                                              END;

                                                   CaptionML=ENU=Service Order No.;
                                                   Description=4PS3.01 (table relation changed) }
    { 5901;   ;Posted Service Shipment No.;Code20 ;CaptionML=ENU=Posted Service Shipment No. }
    { 6501;   ;Lot No.             ;Code20        ;CaptionML=ENU=Lot No.;
                                                   Editable=No }
    { 11012000;;Project Invoice    ;Boolean       ;CaptionML=ENU=Project Invoice }
    { 11012004;;Cost Plus Entry Created;Boolean   ;CaptionML=ENU=Cost Plus Entry Created }
    { 11012006;;Original Cost Type ;Option        ;CaptionML=ENU=Original Cost Type;
                                                   OptionCaptionML=ENU=" ,Labor,Material,Subcontracting,Plant,Sundry,Revenues";
                                                   OptionString=[ ,Labor,Material,Subcontracting,Plant,Sundry,Revenues] }
    { 11012010;;Installment Invoice;Boolean       ;CaptionML=ENU=Installment Invoice }
    { 11012015;;Principal          ;Code20        ;TableRelation=IF (Project Invoice=CONST(Yes)) "Project Principal".Principal WHERE (Project No.=FIELD(Job No.));
                                                   CaptionML=ENU=Principal }
    { 11012020;;Installment No.    ;Code10        ;TableRelation=IF (Project Invoice=CONST(Yes),
                                                                     Installment Invoice=CONST(Yes)) "Project Installment"."Installment No." WHERE (Project No.=FIELD(Job No.),
                                                                                                                                                    Principal=FIELD(Principal),
                                                                                                                                                    Plot No.=FIELD(Plot No.));
                                                   CaptionML=ENU=Installment No. }
    { 11012021;;Installment Motivation;Date       ;TableRelation="Installment Motivation"."Production Date" WHERE (Project No.=FIELD(Job No.),
                                                                                                                   Principal=FIELD(Principal));
                                                   CaptionML=ENU=Installment Motivation }
    { 11012025;;Plot No.           ;Code10        ;TableRelation=IF (Installment Invoice=CONST(Yes)) Plot."Plot No." WHERE (Project No.=FIELD(Job No.));
                                                   CaptionML=ENU=Plot No. }
    { 11012030;;Commision No.      ;Code20        ;TableRelation=IF (Project Invoice=CONST(Yes),
                                                                     Installment Invoice=CONST(No)) Commission.No. WHERE (Project No.=FIELD(Job No.),
                                                                                                                          Principal=FIELD(Principal));
                                                   CaptionML=ENU=Commision No. }
    { 11012040;;Settl.Sheet No.    ;Code10        ;TableRelation=IF (Project Invoice=CONST(Yes),
                                                                     Installment Invoice=CONST(No)) "Settlement Sheet".No. WHERE (Project No.=FIELD(Job No.),
                                                                                                                                  Principal=FIELD(Principal),
                                                                                                                                  Commission No.=FIELD(Commision No.));
                                                   CaptionML=ENU=Settl.Sheet No. }
    { 11012050;;Cost Plus Line No. ;Integer       ;TableRelation=IF (Project Invoice=CONST(Yes),
                                                                     Installment Invoice=CONST(No)) "Project Cost Plus Entry"."Line No." WHERE (Project No.=FIELD(Job No.),
                                                                                                                                                Principal=FIELD(Principal),
                                                                                                                                                Commission No.=FIELD(Commision No.),
                                                                                                                                                Settl.Sheet No.=FIELD(Settl.Sheet No.));
                                                   CaptionML=ENU=Cost Plus Line No. }
    { 11012060;;WIP Balance Account;Code20        ;TableRelation="G/L Account".No.;
                                                   CaptionML=ENU=WIP Balance Account }
    { 11012070;;Wage Component     ;Code10        ;TableRelation="Wage Component";
                                                   CaptionML=ENU=Wage Component }
    { 11012074;;Actual Provision Result;Decimal   ;CaptionML=ENU=Actual Provision Result;
                                                   AutoFormatType=1 }
    { 11012080;;Employee No.       ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No. }
    { 11012090;;Failure No.        ;Code20        ;TableRelation=IF (Project Invoice=CONST(Yes),
                                                                     Installment Invoice=CONST(No)) Commission."Failure No." WHERE (Project No.=FIELD(Job No.),
                                                                                                                                    Principal=FIELD(Principal),
                                                                                                                                    No.=FIELD(Commision No.));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Failure No. }
    { 11012100;;Supervisor Name    ;Text50        ;CaptionML=ENU=Supervisor Name }
    { 11012110;;Closed Costs       ;Decimal       ;CaptionML=ENU=Closed Costs;
                                                   AutoFormatType=1 }
    { 11012120;;Closed Revenues    ;Decimal       ;CaptionML=ENU=Closed Revenues;
                                                   AutoFormatType=1 }
    { 11012125;;Actual Preclosure Result;Decimal  ;CaptionML=ENU=Actual Preclosure Result;
                                                   AutoFormatType=1 }
    { 11012130;;Element            ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Job No.));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element;
                                                   Editable=No }
    { 11012135;;Extension Contract ;Code10        ;TableRelation="Extension Contract"."Contract No." WHERE (Project No.=FIELD(Job No.));
                                                   CaptionML=ENU=Extension Contract }
    { 11012140;;Item No.           ;Code20        ;TableRelation=Item;
                                                   CaptionML=ENU=Item No.;
                                                   Editable=No }
    { 11012141;;Basic Item         ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   CaptionML=ENU=Basic Item;
                                                   Editable=No }
    { 11012142;;Trade Item         ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   CaptionML=ENU=Trade Item;
                                                   Editable=No }
    { 11012144;;Vendor (Trade Item);Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Vendor (Trade Item);
                                                   Editable=No }
    { 11012145;;Manufacturer       ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Manufacturer;
                                                   Editable=No }
    { 11012150;;Surcharge          ;Boolean       ;CaptionML=ENU=Surcharge }
    { 11012160;;Cost Type Closing Procedure;Option;CaptionML=ENU=Cost Type Closing Procedure;
                                                   OptionCaptionML=ENU=Labor,Material,Subcontracting,Plant,Sundry,Revenues;
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry,Revenues }
    { 11012170;;Service Contract No.;Code20       ;TableRelation=Service-Contract.No.;
                                                   OnValidate=BEGIN
                                                                //**4PS: validate and lookup section cleared due to changed relation
                                                              END;

                                                   CaptionML=ENU=Service Contract No. }
    { 11012171;;Service Location No.;Code20       ;TableRelation="Service Location".No.;
                                                   CaptionML=ENU=Service Location No.;
                                                   Editable=No }
    { 11012180;;Vendor             ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Vendor }
    { 11012190;;Rental Unit        ;Code20        ;CaptionML=ENU=Rental Unit;
                                                   Editable=No }
    { 11012200;;Purchase Action    ;Code10        ;TableRelation="Project Purchase Action".Code WHERE (Project No.=FIELD(Job No.),
                                                                                                       Status=FILTER(>=Approved));
                                                   CaptionML=ENU=Purchase Action }
    { 11012210;;Document Line No.  ;Integer       ;CaptionML=ENU=Document Line No. }
    { 11012220;;Cost Entry No. Project Ledger;Integer;
                                                   TableRelation="Job Ledger Entry";
                                                   CaptionML=ENU=Cost Entry No. Project Ledger }
    { 11012230;;Comment            ;Text50        ;CaptionML=ENU=Comment }
    { 11012290;;Supplying Company  ;Text30        ;TableRelation=Company;
                                                   CaptionML=ENU=Supplying Company }
    { 11012320;;Execution Date     ;Date          ;CaptionML=ENU=Execution Date }
    { 11012330;;Created from Intercompany;Boolean ;CaptionML=ENU=Created from Intercompany;
                                                   Editable=No }
    { 11012335;;Intercompany Ledger Entry No.;Integer;
                                                   TableRelation="Intercompany Ledger Entry";
                                                   CaptionML=ENU=Intercompany Ledger Entry No.;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 11012340;;Sales Price Purch. Order;Decimal  ;CaptionML=ENU=Sales Price Purchase Order;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 11012360;;Entity Type        ;Option        ;CaptionML=ENU=Entity Type;
                                                   OptionCaptionML=ENU=None,Cable,Device,Extra Need,Cable Transit,,,,,Position;
                                                   OptionString=None,Cable,Device,ExtraNeed,CableTransit,,,,,Position;
                                                   Description=Engineering;
                                                   Editable=No }
    { 11012361;;System No.         ;Code20        ;CaptionML=ENU=System No.;
                                                   Description=Engineering;
                                                   Editable=No }
    { 11012362;;Entity No.         ;Code20        ;CaptionML=ENU=Entity No.;
                                                   Description=Engineering;
                                                   Editable=No }
    { 11012363;;Cable Transit Pos. ;Option        ;CaptionML=ENU=Cable Transit Postion;
                                                   OptionCaptionML=ENU=" ,From Side,To Side";
                                                   OptionString=[ ,From,To];
                                                   Description=Engineering;
                                                   Editable=No }
    { 11012390;;FSC Type Code      ;Code10        ;TableRelation="FSC Type";
                                                   CaptionML=ENU=FSC Type Code }
    { 11012400;;Text               ;Text250       ;CaptionML=ENU=Text }
    { 11012550;;Plant Invoice      ;Boolean       ;CaptionML=ENU=Plant Invoice }
    { 11012560;;Rental Period      ;Text30        ;CaptionML=ENU=Rental Period }
    { 11012610;;Project Interest   ;Boolean       ;CaptionML=ENU=Project Interest;
                                                   Editable=No }
    { 11012620;;Cost Component     ;Code20        ;TableRelation="Cost Component".Code;
                                                   CaptionML=ENU=Cost Component }
    { 11012630;;Removal Contribution;Boolean      ;CaptionML=ENU=Removal Contribution }
    { 11012650;;Country/Region of Origin/Dest.;Code10;
                                                   TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region of Origin/Destination }
    { 11012660;;Tariff No.         ;Code20        ;TableRelation="Tariff Number";
                                                   CaptionML=ENU=Tariff No. }
    { 11012664;;Yard No.           ;Code20        ;CaptionML=ENU=Yard No.;
                                                   Description=Engineering;
                                                   Editable=No }
    { 11012670;;Net Weight         ;Decimal       ;CaptionML=ENU=Net Weight;
                                                   DecimalPlaces=0:5 }
  }
  KEYS
  {
    {    ;Journal Template Name,Journal Batch Name,Line No.;
                                                   Clustered=Yes }
    {    ;Journal Template Name,Journal Batch Name,Type,No.,Unit of Measure Code,Work Type Code;
                                                   MaintainSQLIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot change %1 when %2 is %3.';
      Location@1007 : Record 14;
      Item@1001 : Record 27;
      Res@1002 : Record 156;
      Cust@1039 : Record 18;
      ItemJnlLine@1003 : Record 83;
      GLAcc@1004 : Record 15;
      Job@1005 : Record 11072003;
      WorkType@1009 : Record 200;
      JobJnlTemplate@1011 : Record 11072007;
      JobJnlBatch@1012 : Record 11072011;
      JobJnlLine@1013 : Record 11072008;
      ItemVariant@1015 : Record 5401;
      ResUnitofMeasure@1008 : Record 205;
      ResCost@1018 : Record 202;
      ItemTranslation@1040 : Record 30;
      CurrExchRate@1029 : Record 330;
      SKU@1028 : Record 5700;
      GLSetup@1010 : Record 98;
      ResFindUnitCost@1027 : Codeunit 220;
      ItemCheckAvail@1020 : Codeunit 311;
      NoSeriesMgt@1021 : Codeunit 396;
      UOMMgt@1022 : Codeunit 5402;
      DimMgt@1023 : Codeunit 408;
      ReserveJobJnlLine@1032 : Codeunit 11072001;
      WMSManagement@1035 : Codeunit 7302;
      DontCheckStandardCost@1037 : Boolean;
      Text001@1060 : TextConst 'ENU=cannot be specified without %1';
      Text002@1033 : TextConst 'ENU=must be positive';
      Text003@1038 : TextConst 'ENU=must be negative';
      HasGotGLSetup@1016 : Boolean;
      CurrencyDate@1030 : Date;
      UnitAmountRoundingPrecision@1024 : Decimal;
      AmountRoundingPrecision@1025 : Decimal;
      UnitAmountRoundingPrecisionFCY@1026 : Decimal;
      AmountRoundingPrecisionFCY@1036 : Decimal;
      CheckedAvailability@1017 : Boolean;
      Text004@1019 : TextConst 'ENU=%1 is only editable when a %2 is defined.';
      Text006@1034 : TextConst 'ENU=%1 cannot be changed when %2 is set.';
      Text007@1006 : TextConst '@@@=Job Journal Line job DEFAULT 30000 is already linked to Job Planning Line  DEERFIELD, 8 WP 1120 10000. Hence Remaining Qty. cannot be calculated correctly. Posting the line may update the linked %3 unexpectedly. Do you want to continue?;ENU=%1 %2 is already linked to %3 %4. Hence %5 cannot be calculated correctly. Posting the line may update the linked %3 unexpectedly. Do you want to continue?';
      Dim1@1000000000 : Code[20];
      Dim2@1000000001 : Code[20];
      Text11012000@1210190000 : TextConst 'ENU=Surcharge %1';
      DPA_Management@1100000999 : Codeunit 11012783;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE CalcQtyFromBaseQty@20(BaseQty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(BaseQty / "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE CheckItemAvailable@5();
    VAR
      JobPlanningLine@1000 : Record 11020401;
    BEGIN
      IF (CurrFieldNo <> 0) AND (Type = Type::Item) AND (Quantity > 0) AND NOT CheckedAvailability THEN BEGIN
        ItemJnlLine."Item No." := "No.";
        ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::"Negative Adjmt.";
        ItemJnlLine."Location Code" := "Location Code";
        ItemJnlLine."Variant Code" := "Variant Code";
        ItemJnlLine."Bin Code" := "Bin Code";
        ItemJnlLine."Unit of Measure Code" := "Unit of Measure Code";
        ItemJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        IF "Job Planning Line No." = 0 THEN
          ItemJnlLine.Quantity := Quantity
        ELSE BEGIN
          JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
          IF JobPlanningLine."Remaining Qty." < (Quantity + "Remaining Qty.") THEN
            ItemJnlLine.Quantity := (Quantity + "Remaining Qty.") - JobPlanningLine."Remaining Qty."
          ELSE
            EXIT;
        END;
        IF ItemCheckAvail.ItemJnlCheckLine(ItemJnlLine, FALSE, 0) THEN
          ItemCheckAvail.RaiseUpdateInterruptedError;
        CheckedAvailability := TRUE;
      END;
    END;

    PROCEDURE EmptyLine@8() : Boolean;
    BEGIN
      EXIT(("Job No." = '') AND ("No." = '') AND (Quantity = 0));
    END;

    PROCEDURE SetUpNewLine@9(LastJobJnlLine@1000 : Record 11072008);
    BEGIN
      JobJnlTemplate.GET("Journal Template Name");
      JobJnlBatch.GET("Journal Template Name","Journal Batch Name");
      JobJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
      JobJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      IF JobJnlLine.FINDFIRST THEN BEGIN
        "Posting Date" := LastJobJnlLine."Posting Date";
        "Document Date" := LastJobJnlLine."Posting Date";
        "Document No." := LastJobJnlLine."Document No.";
        Type := LastJobJnlLine.Type;
        VALIDATE("Line Type",LastJobJnlLine."Line Type");
      END ELSE BEGIN
        "Posting Date" := WORKDATE;
        "Document Date" := WORKDATE;
        IF JobJnlBatch."No. Series" <> '' THEN BEGIN
          CLEAR(NoSeriesMgt);
          "Document No." := NoSeriesMgt.TryGetNextNo(JobJnlBatch."No. Series","Posting Date");
        END;
      END;
      "Recurring Method" := LastJobJnlLine."Recurring Method";
      "Entry Type" := "Entry Type"::Usage;
      "Source Code" := JobJnlTemplate."Source Code";
      "Reason Code" := JobJnlBatch."Reason Code";
      "Posting No. Series" := JobJnlBatch."Posting No. Series";
    END;

    PROCEDURE CreateDim@13(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1100525001 : Integer;No4@1100525000 : Code[20];Type5@1100528251 : Integer;No5@1100528250 : Code[20]);
    VAR
      TableID@1006 : ARRAY [10] OF Integer;
      No@1007 : ARRAY [10] OF Code[20];
    BEGIN
      //**4PS function changed to global
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;

      //**4PS.sn
      TableID[5] := Type5;
      No[5] := No5;

      Dim1 := "Shortcut Dimension 1 Code";
      Dim2 := "Shortcut Dimension 2 Code";
      //**4PS.en

      //"Shortcut Dimension 1 Code" := ''; //**4PS.o Must be kept for Department Authorization
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(TableID,No,"Source Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      //**4PS.sn
      IF (Dim1 <> '') AND ("Shortcut Dimension 1 Code" = '') THEN
        "Shortcut Dimension 1 Code" := Dim1;
      ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");

      IF (Dim2 <> '') AND
         (("Shortcut Dimension 2 Code" = '') OR
          (CurrFieldNo = FIELDNO("Shortcut Dimension 2 Code")))
      THEN BEGIN
        "Shortcut Dimension 2 Code" := Dim2;
        ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
      END;
      //**4PS.en
    END;

    LOCAL PROCEDURE CreateDimForHigherPriorities@21(PriorityTableID@1000 : Integer) : Integer;
    VAR
      TableID@1006 : ARRAY [10] OF Integer;
      No@1007 : ARRAY [10] OF Code[20];
    BEGIN
      IF GetTableIDsForHigherPriorities(TableID,No,PriorityTableID) THEN
        EXIT(DimMgt.GetDefaultDimID(TableID,No,"Source Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0));
    END;

    LOCAL PROCEDURE GetTableIDsForHigherPriorities@28(VAR TableID@1000 : ARRAY [10] OF Integer;VAR No@1001 : ARRAY [10] OF Code[20];PriorityTableID@1002 : Integer) Result : Boolean;
    VAR
      DefaultDimensionPriority@1008 : Record 354;
      DimTableIDs@1005 : ARRAY [3] OF Integer;
      InitialPriority@1007 : Integer;
      i@1004 : Integer;
      j@1006 : Integer;
    BEGIN
      DimTableIDs[1] := DATABASE::Job;
      DimTableIDs[2] := DimMgt.TypeToTableID2(Type);
      DimTableIDs[3] := DATABASE::"Resource Group";

      CLEAR(TableID);
      CLEAR(No);
      IF DefaultDimensionPriority.GET("Source Code",PriorityTableID) THEN
        InitialPriority := DefaultDimensionPriority.Priority;
      DefaultDimensionPriority.SETRANGE("Source Code","Source Code");
      DefaultDimensionPriority.SETFILTER(Priority,'<=%1',InitialPriority);
      i := 1;
      FOR j := 1 TO 3 DO BEGIN
        DefaultDimensionPriority.Priority := 0;
        DefaultDimensionPriority.SETRANGE("Table ID",DimTableIDs[j]);
        IF ((InitialPriority = 0) OR DefaultDimensionPriority.FINDFIRST) AND
           ((DefaultDimensionPriority.Priority < InitialPriority) OR
            ((DefaultDimensionPriority.Priority = InitialPriority) AND (DimTableIDs[j] < PriorityTableID)))
        THEN BEGIN
          Result := TRUE;
          TableID[i] := DimTableIDs[j];
          CASE TableID[i] OF
            DATABASE::Job:
              No[i] := "Job No.";
            DATABASE::"Resource Group":
              No[i] := "Resource Group No.";
            DimMgt.TypeToTableID2(Type):
              No[i] := "No.";
          END;
          i += 1;
        END;
      END;
      EXIT(Result);
    END;

    PROCEDURE ValidateShortcutDimCode@10(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      //**4PS.sn
      IF FieldNumber = 1 THEN
        DimMgt.CheckDepartmentAuthorization(DATABASE::"Job Journal Line", ShortcutDimCode);
      //**4PS.en
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE LookupShortcutDimCode@18(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE ShowShortcutDimCode@15(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetJob@16();
    BEGIN
      TESTFIELD("Job No.");
      IF "Job No." <> Job."No." THEN
        Job.GET("Job No.");
    END;

    LOCAL PROCEDURE UpdateCurrencyFactor@17();
    BEGIN
      IF "Currency Code" <> '' THEN BEGIN
        IF "Posting Date" = 0D THEN
          CurrencyDate := WORKDATE
        ELSE
          CurrencyDate := "Posting Date";
        //"Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Currency Code"); //**4PS.o
        "Currency Factor" := CurrExchRate.ExchangeRate(0, '', CurrencyDate,"Currency Code",FALSE); //**4PS.n
      END ELSE
        "Currency Factor" := 0;
    END;

    LOCAL PROCEDURE GetItem@19();
    BEGIN
      TESTFIELD("No.");
      IF "No." <> Item."No." THEN
        Item.GET("No.");
    END;

    LOCAL PROCEDURE GetSKU@5806() : Boolean;
    BEGIN
      IF (SKU."Location Code" = "Location Code") AND
         (SKU."Item No." = "No.") AND
         (SKU."Variant Code" = "Variant Code")
      THEN
        EXIT(TRUE);

      IF SKU.GET("Location Code","No.","Variant Code") THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE IsInbound@7() : Boolean;
    BEGIN
      IF "Entry Type" IN ["Entry Type"::Usage,"Entry Type"::Sale] THEN
        EXIT("Quantity (Base)" < 0);

      EXIT(FALSE);
    END;

    PROCEDURE OpenItemTrackingLines@6500(IsReclass@1000 : Boolean);
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      ReserveJobJnlLine.CallItemTracking(Rec,IsReclass);
    END;

    LOCAL PROCEDURE InitRoundingPrecisions@23();
    VAR
      Currency@1000 : Record 4;
    BEGIN
      IF (AmountRoundingPrecision = 0) OR
         (UnitAmountRoundingPrecision = 0) OR
         (AmountRoundingPrecisionFCY = 0) OR
         (UnitAmountRoundingPrecisionFCY = 0)
      THEN BEGIN
        CLEAR(Currency);
        Currency.InitRoundingPrecision;
        AmountRoundingPrecision := Currency."Amount Rounding Precision";
        UnitAmountRoundingPrecision := Currency."Unit-Amount Rounding Precision";

        IF "Currency Code" <> '' THEN BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
          Currency.TESTFIELD("Unit-Amount Rounding Precision");
        END;

        AmountRoundingPrecisionFCY := Currency."Amount Rounding Precision";
        UnitAmountRoundingPrecisionFCY := Currency."Unit-Amount Rounding Precision";
      END;
    END;

    PROCEDURE DontCheckStdCost@26();
    BEGIN
      DontCheckStandardCost := TRUE;
    END;

    LOCAL PROCEDURE CalcUnitCost@5809(ItemLedgEntry@1000 : Record 32) : Decimal;
    VAR
      ValueEntry@1001 : Record 5802;
      UnitCost@1004 : Decimal;
    BEGIN
      ValueEntry.SETCURRENTKEY("Item Ledger Entry No.");
      ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
      ValueEntry.CALCSUMS("Cost Amount (Actual)","Cost Amount (Expected)");
      UnitCost :=
        (ValueEntry."Cost Amount (Expected)" + ValueEntry."Cost Amount (Actual)") / ItemLedgEntry.Quantity;

      EXIT(ABS(UnitCost * "Qty. per Unit of Measure"));
    END;

    LOCAL PROCEDURE CalcUnitCostFrom@5804(ItemLedgEntryNo@1000 : Integer) : Decimal;
    VAR
      ValueEntry@1001 : Record 5802;
      InvoicedQty@1002 : Decimal;
      CostAmount@1003 : Decimal;
    BEGIN
      InvoicedQty := 0;
      CostAmount := 0;
      ValueEntry.RESET;
      ValueEntry.SETCURRENTKEY("Item Ledger Entry No.");
      ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
      ValueEntry.SETRANGE("Expected Cost",FALSE);
      IF ValueEntry.FIND('-') THEN
        REPEAT
          InvoicedQty += ValueEntry."Invoiced Quantity";
          CostAmount += ValueEntry."Cost Amount (Actual)";
        UNTIL ValueEntry.NEXT = 0;
      EXIT(CostAmount / InvoicedQty * "Qty. per Unit of Measure");
    END;

    LOCAL PROCEDURE SelectItemEntry@1(CurrentFieldNo@1000 : Integer);
    VAR
      ItemLedgEntry@1001 : Record 32;
      JobJnlLine2@1002 : Record 11072008;
    BEGIN
      ItemLedgEntry.SETCURRENTKEY("Item No.",Open,"Variant Code");
      ItemLedgEntry.SETRANGE("Item No.","No.");
      ItemLedgEntry.SETRANGE(Correction,FALSE);

      IF "Location Code" <> '' THEN
        ItemLedgEntry.SETRANGE("Location Code","Location Code");

      IF CurrentFieldNo = FIELDNO("Applies-to Entry") THEN BEGIN
        ItemLedgEntry.SETRANGE(Positive,TRUE);
        ItemLedgEntry.SETRANGE(Open,TRUE);
      END ELSE
        ItemLedgEntry.SETRANGE(Positive,FALSE);

      IF PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK THEN BEGIN
        JobJnlLine2 := Rec;
        IF CurrentFieldNo = FIELDNO("Applies-to Entry") THEN
          JobJnlLine2.VALIDATE("Applies-to Entry",ItemLedgEntry."Entry No.")
        ELSE
          JobJnlLine2.VALIDATE("Applies-from Entry",ItemLedgEntry."Entry No.");
        Rec := JobJnlLine2;
      END;
    END;

    PROCEDURE DeleteAmounts@4();
    BEGIN
      Quantity := 0;
      "Quantity (Base)" := 0;

      "Direct Unit Cost (LCY)" := 0;
      "Unit Cost (LCY)" := 0;
      "Unit Cost" := 0;

      "Total Cost (LCY)" := 0;
      "Total Cost" := 0;

      "Unit Price (LCY)" := 0;
      "Unit Price" := 0;

      "Total Price (LCY)" := 0;
      "Total Price" := 0;

      "Line Amount (LCY)" := 0;
      "Line Amount" := 0;

      "Line Discount %" := 0;

      "Line Discount Amount (LCY)" := 0;
      "Line Discount Amount" := 0;

      "Remaining Qty." := 0;
      "Remaining Qty. (Base)" := 0;
    END;

    PROCEDURE SetCurrencyFactor@11(Factor@1000 : Decimal);
    BEGIN
      "Currency Factor" := Factor;
    END;

    LOCAL PROCEDURE GetItemTranslation@42();
    BEGIN
      GetJob;
      IF ItemTranslation.GET("No.","Variant Code",Job."Language Code") THEN BEGIN
        Description := ItemTranslation.Description;
        "Description 2" := ItemTranslation."Description 2";
      END;
    END;

    LOCAL PROCEDURE GetGLSetup@24();
    BEGIN
      IF HasGotGLSetup THEN
        EXIT;
      GLSetup.GET;
      HasGotGLSetup := TRUE;
    END;

    LOCAL PROCEDURE UpdateAllAmounts@37();
    BEGIN
      InitRoundingPrecisions;

      UpdateUnitCost;
      UpdateTotalCost;
      FindPriceAndDiscount(Rec,CurrFieldNo);
      HandleCostFactor;
      UpdateUnitPrice;
      UpdateTotalPrice;
      UpdateAmountsAndDiscounts;
    END;

    LOCAL PROCEDURE UpdateUnitCost@36();
    VAR
      RetrievedCost@1000 : Decimal;
    BEGIN
      IF (Type = Type::Item) AND Item.GET("No.") THEN BEGIN
        IF Item."Costing Method" = Item."Costing Method"::Standard THEN BEGIN
          IF NOT DontCheckStandardCost THEN BEGIN
            // Prevent manual change of unit cost on items with standard cost
            IF (("Unit Cost" <> xRec."Unit Cost") OR ("Unit Cost (LCY)" <> xRec."Unit Cost (LCY)")) AND
               (("No." = xRec."No.") AND ("Location Code" = xRec."Location Code") AND
                ("Variant Code" = xRec."Variant Code") AND ("Unit of Measure Code" = xRec."Unit of Measure Code"))
            THEN
              ERROR(
                Text000,
                FIELDCAPTION("Unit Cost"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
          END;
          IF RetrieveCostPrice THEN BEGIN
            IF GetSKU THEN
              "Unit Cost (LCY)" := ROUND(SKU."Unit Cost" * "Qty. per Unit of Measure",UnitAmountRoundingPrecision)
            ELSE
              "Unit Cost (LCY)" := ROUND(Item."Unit Cost" * "Qty. per Unit of Measure",UnitAmountRoundingPrecision);
            "Unit Cost" := ROUND(
                CurrExchRate.ExchangeAmtLCYToFCY(
                  //**4PS.so
                  //"Posting Date","Currency Code",
                  //"Unit Cost (LCY)","Currency Factor"),
                  //**4PS.eo
                  //**4PS.sn
                  0, '', "Posting Date","Currency Code",
                  "Unit Cost (LCY)","Currency Factor",TRUE),
                  //**4PS.en
                UnitAmountRoundingPrecisionFCY);
          END ELSE BEGIN
            IF "Unit Cost" <> xRec."Unit Cost" THEN
              "Unit Cost (LCY)" := ROUND(
                  CurrExchRate.ExchangeAmtFCYToLCY(
                    //**4PS.so
                    //"Posting Date","Currency Code",
                    //"Unit Cost","Currency Factor"),
                    //**4PS.eo
                    //**4PS.sn
                    0, '', "Posting Date","Currency Code",
                    "Unit Cost","Currency Factor",TRUE),
                    //**4PS.en
                  UnitAmountRoundingPrecision)
            ELSE
              "Unit Cost" := ROUND(
                  CurrExchRate.ExchangeAmtLCYToFCY(
                    //**4PS.so
                    //"Posting Date","Currency Code",
                    //"Unit Cost (LCY)","Currency Factor"),
                    //**4PS.eo
                    //**4PS.sn
                    0, '', "Posting Date","Currency Code",
                    "Unit Cost (LCY)","Currency Factor",TRUE),
                    //**4PS.en
                  UnitAmountRoundingPrecisionFCY);
          END;
        END ELSE BEGIN
          IF RetrieveCostPrice THEN BEGIN
            IF GetSKU THEN
              RetrievedCost := SKU."Unit Cost" * "Qty. per Unit of Measure"
            ELSE
              RetrievedCost := Item."Unit Cost" * "Qty. per Unit of Measure";
            "Unit Cost" := ROUND(
                CurrExchRate.ExchangeAmtLCYToFCY(
                  //**4PS.so
                  //"Posting Date","Currency Code",
                  //RetrievedCost,"Currency Factor"),
                  //**4PS.eo
                  //**4PS.sn
                  0, '', "Posting Date","Currency Code",
                  RetrievedCost,"Currency Factor",FALSE),
                  //**4PS.en
                UnitAmountRoundingPrecisionFCY);
            "Unit Cost (LCY)" := ROUND(RetrievedCost,UnitAmountRoundingPrecision);
          END ELSE
            "Unit Cost (LCY)" := ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  //**4PS.so
                  //"Posting Date","Currency Code",
                  //"Unit Cost","Currency Factor"),
                  //**4PS.eo
                  //**4PS.sn
                  0, '', "Posting Date","Currency Code",
                  "Unit Cost","Currency Factor",FALSE),
                  //**4PS.en
                UnitAmountRoundingPrecision);
        END;
      END ELSE
        IF (Type = Type::Resource) AND Res.GET("No.") THEN BEGIN
          IF RetrieveCostPrice THEN BEGIN
            ResCost.INIT;
            ResCost.Code := "No.";
            ResCost."Work Type Code" := "Work Type Code";
            ResFindUnitCost.RUN(ResCost);
            "Direct Unit Cost (LCY)" := ROUND(ResCost."Direct Unit Cost" * "Qty. per Unit of Measure",UnitAmountRoundingPrecision);
            RetrievedCost := ResCost."Unit Cost" * "Qty. per Unit of Measure";
            "Unit Cost" := ROUND(
                CurrExchRate.ExchangeAmtLCYToFCY(
                  //**4PS.so
                  //"Posting Date","Currency Code",
                  //RetrievedCost,"Currency Factor"),
                  //**4PS.eo
                  //**4PS.sn
                  0, '', "Posting Date","Currency Code",
                  RetrievedCost,"Currency Factor",FALSE),
                  //**4PS.en
                UnitAmountRoundingPrecisionFCY);
            "Unit Cost (LCY)" := ROUND(RetrievedCost,UnitAmountRoundingPrecision);
          END ELSE
            "Unit Cost (LCY)" := ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                 //**4PS.so
                 //"Posting Date","Currency Code",
                 //"Unit Cost","Currency Factor"),
                 //**4PS.eo
                 //**4PS.sn
                 0, '', "Posting Date","Currency Code",
                 "Unit Cost","Currency Factor",FALSE),
                 //**4PS.en
                UnitAmountRoundingPrecision);
        END ELSE
          "Unit Cost (LCY)" := ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                //**4PS.so
                //"Posting Date","Currency Code",
                //"Unit Cost","Currency Factor"),
                //**4PS.eo
                //**4PS.sn
                0, '', "Posting Date","Currency Code",
                "Unit Cost","Currency Factor",FALSE),
                //**4PS.en
              UnitAmountRoundingPrecision);
    END;

    LOCAL PROCEDURE RetrieveCostPrice@35() : Boolean;
    BEGIN
      CASE Type OF
        Type::Item:
          IF ("No." <> xRec."No.") OR
             ("Location Code" <> xRec."Location Code") OR
             ("Variant Code" <> xRec."Variant Code") OR
             (Quantity <> xRec.Quantity) OR
             ("Unit of Measure Code" <> xRec."Unit of Measure Code") AND
             (("Applies-to Entry" = 0) AND ("Applies-from Entry" = 0))
          THEN
            EXIT(TRUE);
        Type::Resource:
          IF ("No." <> xRec."No.") OR
             ("Work Type Code" <> xRec."Work Type Code") OR
             ("Unit of Measure Code" <> xRec."Unit of Measure Code")
          THEN
            EXIT(TRUE);
        Type::"G/L Account":
          IF "No." <> xRec."No." THEN
            EXIT(TRUE);
        ELSE
          EXIT(FALSE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE UpdateTotalCost@34();
    BEGIN
      "Total Cost" := ROUND("Unit Cost" * Quantity,AmountRoundingPrecisionFCY);
      "Total Cost (LCY)" := ROUND(
          CurrExchRate.ExchangeAmtFCYToLCY(
            //**4PS.so
            //"Posting Date","Currency Code",
            //"Total Cost","Currency Factor"),
            //**4PS.eo
            //**4PS.sn
            0, '', "Posting Date","Currency Code",
            "Total Cost","Currency Factor",FALSE),
            //**4PS.en
          AmountRoundingPrecision);
    END;

    LOCAL PROCEDURE FindPriceAndDiscount@33(VAR JobJnlLine@1000 : Record 11072008;CalledByFieldNo@1001 : Integer);
    VAR
      SalesPriceCalcMgt@1002 : Codeunit 7000;
      PurchPriceCalcMgt@1003 : Codeunit 7010;
    BEGIN
      IF RetrieveCostPrice AND ("No." <> '') THEN BEGIN
        SalesPriceCalcMgt.FindJobJnlLinePrice(JobJnlLine,CalledByFieldNo);

        IF Type <> Type::"G/L Account" THEN
          PurchPriceCalcMgt.FindJobJnlLinePrice(JobJnlLine,CalledByFieldNo)
        ELSE BEGIN
          // Because the SalesPriceCalcMgt.FindJobJnlLinePrice function also retrieves costs for G/L Account,
          // cost and total cost need to get updated again.
          UpdateUnitCost;
          UpdateTotalCost;
        END;
      END;
    END;

    LOCAL PROCEDURE HandleCostFactor@32();
    BEGIN
      IF ("Cost Factor" <> 0) AND
         ((("Unit Cost" <> xRec."Unit Cost") OR ("Cost Factor" <> xRec."Cost Factor")) OR
          ((Quantity <> xRec.Quantity) OR ("Location Code" <> xRec."Location Code")))
      THEN
        "Unit Price" := ROUND("Unit Cost" * "Cost Factor",UnitAmountRoundingPrecisionFCY)
      ELSE
        IF (Item."Price/Profit Calculation" = Item."Price/Profit Calculation"::"Price=Cost+Profit") AND
           (Item."Profit %" < 100) AND
           ("Unit Cost" <> xRec."Unit Cost")
        THEN
          "Unit Price" := ROUND("Unit Cost" / (1 - Item."Profit %" / 100),UnitAmountRoundingPrecisionFCY);
    END;

    LOCAL PROCEDURE UpdateUnitPrice@25();
    BEGIN
      "Unit Price (LCY)" := ROUND(
          CurrExchRate.ExchangeAmtFCYToLCY(
            //**4PS.so
            //"Posting Date","Currency Code",
            //"Unit Price","Currency Factor"),
            //**4PS.eo
            //**4PS.sn
            0, '', "Posting Date","Currency Code",
            "Unit Price","Currency Factor",FALSE),
            //**4PS.en
          UnitAmountRoundingPrecision);
    END;

    LOCAL PROCEDURE UpdateTotalPrice@6();
    BEGIN
      "Total Price" := Quantity * "Unit Price";

      "Total Price (LCY)" := ROUND(
          CurrExchRate.ExchangeAmtFCYToLCY(
            //**4PS.so
            //"Posting Date","Currency Code",
            //"Total Price","Currency Factor"),
            //**4PS.eo
            //**4PS.sn
            0, '', "Posting Date","Currency Code",
            "Total Price","Currency Factor",FALSE),
            //**4PS.en
          AmountRoundingPrecision);

      "Total Price" := ROUND("Total Price",AmountRoundingPrecisionFCY);
    END;

    LOCAL PROCEDURE UpdateAmountsAndDiscounts@31();
    BEGIN
      IF "Total Price" <> 0 THEN BEGIN
        IF ("Line Amount" <> xRec."Line Amount") AND ("Line Discount Amount" = xRec."Line Discount Amount") THEN BEGIN
          "Line Amount" := ROUND("Line Amount",AmountRoundingPrecisionFCY);
          "Line Discount Amount" := "Total Price" - "Line Amount";

          "Line Amount (LCY)" := ROUND("Line Amount (LCY)",AmountRoundingPrecision);
          "Line Discount Amount (LCY)" := "Total Price (LCY)" - "Line Amount (LCY)";

          "Line Discount %" :=
            ROUND("Line Discount Amount" / "Total Price" * 100,0.00001);
        END ELSE
          IF ("Line Discount Amount" <> xRec."Line Discount Amount") AND ("Line Amount" = xRec."Line Amount") THEN BEGIN
            "Line Discount Amount" := ROUND("Line Discount Amount",AmountRoundingPrecisionFCY);
            "Line Amount" := "Total Price" - "Line Discount Amount";

            "Line Discount Amount (LCY)" := ROUND("Line Discount Amount (LCY)",AmountRoundingPrecision);
            "Line Amount (LCY)" := "Total Price (LCY)" - "Line Discount Amount (LCY)";

            "Line Discount %" :=
              ROUND("Line Discount Amount" / "Total Price" * 100,0.00001);
          END ELSE
            IF ("Line Discount Amount" <> xRec."Line Discount Amount") OR ("Line Amount" <> xRec."Line Amount") OR
               ("Total Price" <> xRec."Total Price") OR ("Line Discount %" <> xRec."Line Discount %")
            THEN BEGIN
              "Line Discount Amount" :=
                ROUND("Total Price" * "Line Discount %" / 100,AmountRoundingPrecisionFCY);
              "Line Amount" := "Total Price" - "Line Discount Amount";

              "Line Discount Amount (LCY)" :=
                ROUND("Total Price (LCY)" * "Line Discount %" / 100,AmountRoundingPrecision);
              "Line Amount (LCY)" := "Total Price (LCY)" - "Line Discount Amount (LCY)";
            END;
      END ELSE BEGIN
        "Line Amount" := 0;
        "Line Discount Amount" := 0;
        "Line Amount (LCY)" := 0;
        "Line Discount Amount (LCY)" := 0;
      END;
    END;

    LOCAL PROCEDURE ValidateJobPlanningLineLink@3();
    VAR
      JobPlanningLine@1000 : Record 11020401;
      JobJournalLine@1001 : Record 11072008;
    BEGIN
      JobJournalLine.SETRANGE("Job No.","Job No.");
      JobJournalLine.SETRANGE("Job Task No.","Job Task No.");
      JobJournalLine.SETRANGE("Job Planning Line No.","Job Planning Line No.");

      IF JobJournalLine.FINDFIRST THEN
        IF ("Journal Template Name" <> JobJournalLine."Journal Template Name") OR
           ("Journal Batch Name" <> JobJournalLine."Journal Batch Name") OR
           ("Line No." <> JobJournalLine."Line No.")
        THEN BEGIN
          JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
          IF NOT CONFIRM(Text007,FALSE,
               TABLECAPTION,
               STRSUBSTNO('%1, %2, %3',"Journal Template Name","Journal Batch Name","Line No."),
               JobPlanningLine.TABLECAPTION,
               STRSUBSTNO('%1, %2, %3',JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",JobPlanningLine."Line No."),
               FIELDCAPTION("Remaining Qty."))
          THEN
            ERROR('');
        END;
    END;

    PROCEDURE ShowDimensions@2();
    BEGIN
      DimMgt.SetTableID(DATABASE::"Job Journal Line"); //**4PS.n
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Journal Template Name","Journal Batch Name","Line No."));
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE UpdateDimensions@12();
    VAR
      DimensionSetIDArr@1000 : ARRAY [10] OF Integer;
    BEGIN
      CreateDim(
        DimMgt.TypeToTableID2(Type),"No.",
        DATABASE::Job,"Job No.",
        DATABASE::"Service Order","Service Order No.", //**4PS.n
        DATABASE::"Resource Group","Resource Group No.",
        DATABASE::Location,"Location Code"); //**4PS.n

      IF "Job Task No." <> '' THEN BEGIN
        DimensionSetIDArr[1] := "Dimension Set ID";
        DimensionSetIDArr[2] :=
          DimMgt.CreateDimSetFromJobTaskDim("Job No.",
            "Job Task No.","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
        DimensionSetIDArr[3] := CreateDimForHigherPriorities(DATABASE::Job);
        "Dimension Set ID" :=
          DimMgt.GetCombinedDimensionSetID(
            DimensionSetIDArr,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      END
    END;

    PROCEDURE IsOpenedFromBatch@22() : Boolean;
    VAR
      JobJournalBatch@1002 : Record 11072011;
      TemplateFilter@1001 : Text;
      BatchFilter@1000 : Text;
    BEGIN
      BatchFilter := GETFILTER("Journal Batch Name");
      IF BatchFilter <> '' THEN BEGIN
        TemplateFilter := GETFILTER("Journal Template Name");
        IF TemplateFilter <> '' THEN
          JobJournalBatch.SETFILTER("Journal Template Name",TemplateFilter);
        JobJournalBatch.SETFILTER(Name,BatchFilter);
        JobJournalBatch.FINDFIRST;
      END;

      EXIT((("Journal Batch Name" <> '') AND ("Journal Template Name" = '')) OR (BatchFilter <> ''));
    END;

    PROCEDURE IsServiceItem@68() : Boolean;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT(FALSE);
      IF "No." = '' THEN
        EXIT(FALSE);
      GetItem;
      EXIT(Item.Type = Item.Type::Service);
    END;

    PROCEDURE InitSurcharge@1210190000(VAR ProjJnlLine@1210190002 : Record 11072008;OrigDimRec@1210190001 : Record 349;SurchDimRec@1210190009 : Record 349;SurchargeRec@1210190004 : Record 11020208;Dim1@1210190005 : Code[20];ProjType@1210190006 : Code[20];VAR vTotSurchAmount@1100485002 : Decimal;VendorPostingGroup@1100525000 : Code[20]);
    VAR
      ProjTypeRec@1210190003 : Record 11012009;
      lJobSetupRec@1210190007 : Record 315;
      lJobRec@1210190008 : Record 11072003;
      lEmployeeRec@1100485000 : Record 5200;
      lvProjElemRec@1100485001 : Record 11012010;
      DimMgt@1100525002 : Codeunit 408;
      lvICHoursPosting@1100525001 : 'NotApplicable,ReceiverSide,Supplierside';
    BEGIN
      //**4PS
      WITH ProjJnlLine DO BEGIN
        lJobSetupRec.GET;
        GetGLSetup;
        IF lJobRec.GET("Job No.") THEN;

        IF (OrigDimRec."Cost Type" = OrigDimRec."Cost Type"::Labor) AND
           ("Employee No." <> '') THEN
        BEGIN
          IF lEmployeeRec.GET("Employee No.") THEN BEGIN
            IF (lEmployeeRec.External) AND
               (lEmployeeRec."External Post No Surcharge") THEN
              EXIT;
          END;
        END;

        IF OrigDimRec."Cost Type" = OrigDimRec."Cost Type"::Revenue THEN BEGIN
          IF SurchargeRec.Percentage <> 0 THEN
            IF SurchargeRec."Surcharge over Surcharge" THEN
              "Total Cost (LCY)" := ROUND(("Total Price (LCY)" + vTotSurchAmount) * SurchargeRec.Percentage/100)
            ELSE
              "Total Cost (LCY)" := ROUND("Total Price (LCY)" * SurchargeRec.Percentage/100)
          ELSE
            "Total Cost (LCY)" := ROUND(SurchargeRec.Amount * Quantity);
        END ELSE BEGIN
          IF SurchargeRec.Percentage <> 0 THEN
            IF SurchargeRec."Surcharge over Surcharge" THEN
              "Total Cost (LCY)" := ROUND(("Total Cost (LCY)" + vTotSurchAmount) * SurchargeRec.Percentage/100)
            ELSE
              "Total Cost (LCY)" := ROUND("Total Cost (LCY)" * SurchargeRec.Percentage/100)
          ELSE
            "Total Cost (LCY)" := ROUND(SurchargeRec.Amount * Quantity);
        END;
        "Total Cost" := "Total Cost (LCY)";
        "Direct Unit Cost (LCY)" := "Total Cost (LCY)";
        "Unit Cost (LCY)" := "Total Cost (LCY)";
        "Unit Cost" := "Unit Cost (LCY)";
        "Unit Price" := 0;
        "Unit Price (LCY)" := 0;
        "Total Price (LCY)" := 0;
        "Currency Code" := '';
        "Source Currency Code" := '';

        "Source Currency Total Price" := 0;
        "Source Currency Total Cost" := 0;
        Quantity := 0;
        "Quantity (Base)" := 0;
        "Unit of Measure Code" := SurchDimRec."Unit of Measure";
        "Qty. per Unit of Measure" := 1;
        "Shortcut Dimension 1 Code" := Dim1;
        "Shortcut Dimension 2 Code" := SurchDimRec.Code;
        DimMgt.ValidateShortcutDimValues(1,"Shortcut Dimension 1 Code","Dimension Set ID");
        DimMgt.ValidateShortcutDimValues(2,"Shortcut Dimension 2 Code","Dimension Set ID");

        IF SurchDimRec."Cost Component" <> '' THEN
          "Cost Component" := SurchDimRec."Cost Component";
        IF SurchargeRec."Element Surcharge" <> '' THEN BEGIN
          lvProjElemRec.GET("Job No.", SurchargeRec."Element Surcharge");
          Element := SurchargeRec."Element Surcharge";
        END;
        Description := STRSUBSTNO(Text11012000, SurchargeRec.Description);

        IF GLSetup."Surch. Entry Not On Vendor PG" THEN BEGIN
          "No." := ProjTypeRec.GetWipAccByVendorPostingGrp(ProjType,
                                                           SurchDimRec."Cost Type",
                                                           lJobRec."Project Status",
                                                           lJobSetupRec."Provisions at Closure",
                                                           COMPANYNAME,
                                                           SurchDimRec."Cost Type",
                                                           '',
                                                           lvICHoursPosting::ReceiverSide,
                                                           '');
        END ELSE BEGIN
          "No." := ProjTypeRec.GetWipAccByVendorPostingGrp(ProjType,
                                                           SurchDimRec."Cost Type",
                                                           lJobRec."Project Status",
                                                           lJobSetupRec."Provisions at Closure",
                                                           COMPANYNAME,
                                                           SurchDimRec."Cost Type",
                                                           Vendor,
                                                           lvICHoursPosting::ReceiverSide,
                                                           VendorPostingGroup);
        END;

        "WIP Balance Account" := SurchargeRec."Coverage Account";
        "Entry Type" := "Entry Type"::Usage;
        Surcharge := TRUE;
        "Removal Contribution" := FALSE;
        "Purchase Action" := '';

        vTotSurchAmount := vTotSurchAmount + "Total Cost (LCY)";
      END;
    END;

    PROCEDURE InitSurchargeIC@1100525000(VAR ProjJnlLine@1210190002 : Record 11072008;OrigDimRec@1210190001 : Record 349;SurchDimRec@1210190009 : Record 349;SurchargeRec@1210190004 : Record 11020208;Dim1@1210190005 : Code[20];ProjType@1210190006 : Code[20];VAR vTotSurchAmount@1100485002 : Decimal;lCompanyName@1100525000 : Text[50]);
    VAR
      ProjTypeRec@1210190003 : Record 11012009;
      lJobSetupRec@1210190007 : Record 315;
      lJobRec@1210190008 : Record 11072003;
      lEmployeeRec@1100485000 : Record 5200;
      lvProjElemRec@1100485001 : Record 11012010;
      lvPostingSetup@1100525004 : Record 11020565;
      ICRec@1100525005 : Record 11012057;
      DimMgt@1100525003 : Codeunit 408;
      lvVendorPostingGroup@1100525001 : Code[20];
      lvICHoursPosting@1100525002 : 'NotApplicable,ReceiverSide,Supplierside';
    BEGIN
      //**4PS
      WITH ProjJnlLine DO BEGIN
        GLSetup.GET;

        IF (lCompanyName <> COMPANYNAME) AND (lCompanyName <> '') THEN
        BEGIN
          ICRec.GET(COMPANYNAME, lCompanyName);
          IF lvPostingSetup.GET("Source Code", COMPANYNAME, lCompanyName) THEN
          BEGIN;
            IF (lvPostingSetup."Prod. Account Credit" <> '') AND
               (lvPostingSetup."Prod. Account Debit" <> '') THEN
            BEGIN
              lvVendorPostingGroup := ICRec."Vendor Posting Group";
            END;
          END;
        END;

        lJobSetupRec.CHANGECOMPANY(lCompanyName);
        lJobRec.CHANGECOMPANY(lCompanyName);

        lJobSetupRec.GET;
        IF lJobRec.GET("Job No.") THEN;

        IF (OrigDimRec."Cost Type" = OrigDimRec."Cost Type"::Labor) AND
           ("Employee No." <> '') THEN
        BEGIN
          IF lEmployeeRec.GET("Employee No.") THEN BEGIN
            IF (lEmployeeRec.External) AND
               (lEmployeeRec."External Post No Surcharge") THEN
              EXIT;
          END;
        END;

        IF OrigDimRec."Cost Type" = OrigDimRec."Cost Type"::Revenue THEN BEGIN
          IF SurchargeRec.Percentage <> 0 THEN
            IF SurchargeRec."Surcharge over Surcharge" THEN
              "Total Cost (LCY)" := ROUND(("Total Price (LCY)" + vTotSurchAmount) * SurchargeRec.Percentage/100)
            ELSE
              "Total Cost (LCY)" := ROUND("Total Price (LCY)" * SurchargeRec.Percentage/100)
          ELSE
            "Total Cost (LCY)" := ROUND(SurchargeRec.Amount * Quantity);
        END ELSE BEGIN
          IF SurchargeRec.Percentage <> 0 THEN
            IF SurchargeRec."Surcharge over Surcharge" THEN
              "Total Cost (LCY)" := ROUND(("Total Cost (LCY)" + vTotSurchAmount) * SurchargeRec.Percentage/100)
            ELSE
              "Total Cost (LCY)" := ROUND("Total Cost (LCY)" * SurchargeRec.Percentage/100)
          ELSE
            "Total Cost (LCY)" := ROUND(SurchargeRec.Amount * Quantity);
        END;

        "Direct Unit Cost (LCY)" := "Total Cost (LCY)";
        "Unit Cost (LCY)" := "Total Cost (LCY)";
        "Unit Price (LCY)" := 0;
        "Total Price (LCY)" := 0;
        "Source Currency Total Price" := 0;
        "Source Currency Total Cost" := 0;
        Quantity := 0;
        "Quantity (Base)" := 0;
        "Unit of Measure Code" := SurchDimRec."Unit of Measure";
        "Shortcut Dimension 1 Code" := Dim1;
        "Shortcut Dimension 2 Code" := SurchDimRec.Code;
        //** DP00387 Company should be receiving company sn
        DimMgt.SetCompany(lCompanyName);
        //** DP00387 Company should be receiving company en
        DimMgt.ValidateShortcutDimValues(1,"Shortcut Dimension 1 Code","Dimension Set ID");
        DimMgt.ValidateShortcutDimValues(2,"Shortcut Dimension 2 Code","Dimension Set ID");

        IF SurchDimRec."Cost Component" <> '' THEN
          "Cost Component" := SurchDimRec."Cost Component";
        IF SurchargeRec."Element Surcharge" <> '' THEN BEGIN
          lvProjElemRec.GET("Job No.", SurchargeRec."Element Surcharge");
          Element := SurchargeRec."Element Surcharge";
        END;
        Description := STRSUBSTNO(Text11012000, SurchargeRec.Description);
        IF GLSetup."Surch. Entry Not On Vendor PG" THEN BEGIN
          "No." := ProjTypeRec.GetWipAccByVendorPostingGrp(ProjType,
                                         SurchDimRec."Cost Type",
                                         lJobRec."Project Status",
                                         lJobSetupRec."Provisions at Closure",
                                         lCompanyName,
                                         SurchDimRec."Cost Type",
                                         '',
                                         lvICHoursPosting::ReceiverSide,
                                         '');
        END ELSE BEGIN
          "No." := ProjTypeRec.GetWipAccByVendorPostingGrp(ProjType,
                                         SurchDimRec."Cost Type",
                                         lJobRec."Project Status",
                                         lJobSetupRec."Provisions at Closure",
                                         lCompanyName,
                                         SurchDimRec."Cost Type",
                                         Vendor,
                                         lvICHoursPosting::ReceiverSide,
                                         lvVendorPostingGroup);

        END;

        "WIP Balance Account" := SurchargeRec."Coverage Account";
        "Entry Type" := "Entry Type"::Usage;
        Surcharge := TRUE;
        "Removal Contribution" := FALSE;
        "Purchase Action" := '';

        vTotSurchAmount := vTotSurchAmount + "Total Cost (LCY)";
      END;
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11072008) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11072008');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Job Journal Line", "Shortcut Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Shortcut Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Shortcut Dimension 1 Code");
    END;

    BEGIN
    {
      4PS01 HBK 03-08-2009 Added Field Supply No.
      4PS, 06-07-2012, DP00121, Serial No. expanded to 40
    }
    END.
  }
}

