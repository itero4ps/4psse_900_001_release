OBJECT Table 11072072 Estimate Line NEW
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 91=rm;
    OnInsert=BEGIN
               VALIDATE(Part);
               VALIDATE("Sub-Estimate No.");
               GetEstimate("Estimate No.", FALSE); //Call 23762
               IF Recipe = '' THEN BEGIN
                 IF "Cost Type (Hours)" <> "Cost Type (Hours)"::Labor THEN  //DP01047
                   "Rate Code" := ''   //db, 11-03-16: related fields will be cleared on validate
                 ELSE
                   CheckDefaultRate;
                 xRec."Rate Type" := "Rate Type";  //disable function ConvertNorm by next validate
                 xRec."Team Size" := "Team Size";
                 VALIDATE("Rate Code");            //get actual rate (if copied from old template)
                 DetermineNormGroup;
               END;

               InitEstimateLine(FALSE);  //db, 11-11-09: M16810
               InitAdjustmentFactor;
               IF Quantity <> 0 THEN
                 VALIDATE(Quantity);  //if Ctrl C+V used, force update hours based on adjustment factor

               "Attached to Line No." := GetAttachedToLineNo(Rec);
             END;

    OnModify=BEGIN
               IF Recipe <> '' THEN BEGIN
                 "Rate Code" := '';
                 "Cost Rate" := 0;   //db, 05-11-15: C026570
                 "Sales Rate" := 0;  //db, 05-11-15: C026570
                 "Rate Type" := "Rate Type"::Hours;
               END ELSE BEGIN
                 Condition := '';
               END;

               EstRec.UpdateLogbook("Estimate No.");
             END;

    OnDelete=VAR
               ChrgRec@11012000 : Record 11229771;
               ChrgRec2@1100409000 : Record 11229771;
               QuanSheetRec@1210190000 : Record 11012186;
               QuanSheetRelRec@1100525000 : Record 11020463;
               QuanModelRec@1210190001 : Record 11012197;
               BufferRec@1100485002 : Record 11012195;
               SurchLine@1100485001 : Integer;
             BEGIN
               EstRec.UpdateLogbook("Estimate No.");

               EstimateMgmt.ModifyLinkedEstLines(0,Rec,0); //0:delete

               ClearRecipeData;  //db, 08-12-15

               IF EstLineTotal.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Line No.") THEN
                 EstLineTotal.DELETE;   //DP00381

               TextRec.RESET;
               TextRec.SETRANGE("Table Name",TextRec."Table Name"::Estimate);
               TextRec.SETRANGE("Estimate No.","Estimate No.");
               TextRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               TextRec.SETRANGE("Part Group","Part Group");
               TextRec.SETRANGE(Part,Part);
               TextRec.SETRANGE("Estimate Line No.","Line No.");
               IF NOT TextRec.ISEMPTY THEN //Call 23762
                 TextRec.DELETEALL;

               EstCodeRec.RESET;
               EstCodeRec.SETRANGE("Estimate No.","Estimate No.");
               EstCodeRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               EstCodeRec.SETRANGE("Part Group","Part Group");
               EstCodeRec.SETRANGE(Part,Part);
               EstCodeRec.SETRANGE("Estimate Line","Line No.");
               IF NOT EstCodeRec.ISEMPTY THEN //Call 23762
                 EstCodeRec.DELETEALL;

               //db.sn, 26-01-15: C020404
               ChrgRec.RESET;
               ChrgRec.SETRANGE("Estimate No.","Estimate No.");
               ChrgRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               ChrgRec.SETRANGE("Part Group","Part Group");
               ChrgRec.SETRANGE(Part,Part);
               ChrgRec.SETRANGE("Recipe Line",0);  //don't remove surcharge of recipe lines
               ChrgRec.SETRANGE("Basic Line","Line No.");  //remove estimated lines included in surcharge
               IF ChrgRec.FINDSET THEN BEGIN
                 REPEAT
                   SurchLine := ChrgRec."Surcharge Line";
                   ChrgRec.DELETE;
                   IF "Cost Amount" <> 0 THEN BEGIN  //skip calculate charge if current line will not change result
                     IF EstLineRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, SurchLine) THEN BEGIN
                       EstLineRec.CheckEstimateCharge;
                       //db, 30-01-15: if last basic line deleted for surcharge, initialise surcharge line to disable totals
                       ChrgRec2.COPY(ChrgRec);
                       ChrgRec2.SETFILTER("Basic Line", '<>%1', "Line No.");
                       ChrgRec2.SETRANGE("Surcharge Line",SurchLine);
                       IF NOT ChrgRec2.FINDFIRST THEN BEGIN
                         EstLineRec.InitNormPrice;
                         EstLineRec.CalculateTotals;
                         EstLineRec.MODIFY;
                       END;
                     END;
                   END;
                 UNTIL ChrgRec.NEXT = 0;
               END;

               ChrgRec.SETRANGE("Basic Line");
               ChrgRec.SETRANGE("Surcharge Line","Line No.");  //delete surcharge lines
               ChrgRec.DELETEALL;
               //db.en, 26-01-15: C020404

               QuanSheetRec.RESET;
               QuanSheetRec.SETRANGE("Estimate No.","Estimate No.");
               QuanSheetRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               QuanSheetRec.SETRANGE("Part Group","Part Group");
               QuanSheetRec.SETRANGE(Part,Part);
               QuanSheetRec.SETRANGE("Estimate Line","Line No.");
               IF NOT QuanSheetRec.ISEMPTY THEN //Call 23762
                 QuanSheetRec.DELETEALL;

               QuanSheetRelRec.RESET;
               QuanSheetRelRec.SETRANGE("Estimate No.","Estimate No.");
               QuanSheetRelRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               QuanSheetRelRec.SETRANGE("Part Group","Part Group");
               QuanSheetRelRec.SETRANGE(Part,Part);
               QuanSheetRelRec.SETRANGE("Estimate Line","Line No.");
               IF NOT QuanSheetRelRec.ISEMPTY THEN //Call 23762
                 QuanSheetRelRec.DELETEALL;

               QuanModelRec.RESET;
               QuanModelRec.SETRANGE("Estimate No.","Estimate No.");
               QuanModelRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               QuanModelRec.SETRANGE("Part Group","Part Group");
               QuanModelRec.SETRANGE(Part,Part);
               QuanModelRec.SETRANGE("Estimate Line","Line No.");
               IF NOT QuanModelRec.ISEMPTY THEN //Call 23762
                 QuanModelRec.DELETEALL;

               BufferRec.RESET;
               BufferRec.SETRANGE("Estimate No.","Estimate No.");
               BufferRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               BufferRec.SETRANGE("Part Group","Part Group");
               BufferRec.SETRANGE(Part,Part);
               BufferRec.SETRANGE("Estimate Line","Line No.");
               IF NOT BufferRec.ISEMPTY THEN //Call 23762
                 BufferRec.DELETEALL;
             END;

    CaptionML=ENU=Estimate Line;
    LookupPageID=Page11125325;
    DrillDownPageID=Page11125325;
  }
  FIELDS
  {
    { 10  ;   ;Estimate No.        ;Code20        ;TableRelation=Estimate.No.;
                                                   CaptionML=ENU=Estimate No. }
    { 20  ;   ;Estimate Description;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Estimate.Description WHERE (No.=FIELD(Estimate No.)));
                                                   CaptionML=ENU=Estimate Description;
                                                   Editable=No }
    { 30  ;   ;Sub-Estimate No.    ;Code20        ;TableRelation="Sub-Estimate NEW"."Sub-Estimate No." WHERE (Estimate No.=FIELD(Estimate No.));
                                                   OnValidate=BEGIN
                                                                IF "Sub-Estimate No." <> '' THEN BEGIN
                                                                  GetSubEstimate("Estimate No.", "Sub-Estimate No.", FALSE); //Call 23762
                                                                  "Chapter (Sub-Estimate)" := SubEstRec.Chapter;
                                                                  "Paragraph (Sub-Estimate)" := SubEstRec.Paragraph;
                                                                END ELSE BEGIN
                                                                  CLEAR("Chapter (Sub-Estimate)");
                                                                  CLEAR("Paragraph (Sub-Estimate)");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Sub-Estimate No. }
    { 40  ;   ;Sub-Estimate Description;Text50    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sub-Estimate NEW".Description WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                            Sub-Estimate No.=FIELD(Sub-Estimate No.)));
                                                   CaptionML=ENU=Sub-Estimate Description;
                                                   Editable=No }
    { 45  ;   ;Part Group          ;Code10        ;TableRelation="Estimate Part NEW"."Part Group" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                         Sub-Estimate No.=FIELD(Sub-Estimate No.));
                                                   CaptionML=ENU=Part Group }
    { 50  ;   ;Part                ;Code20        ;TableRelation="Estimate Part NEW".Part WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                 Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                 Part Group=FIELD(Part Group));
                                                   OnValidate=BEGIN
                                                                IF Part <> '' THEN BEGIN
                                                                  EstPartRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part);
                                                                  Chapter := EstPartRec.Chapter;
                                                                  Paragraph := EstPartRec.Paragraph;
                                                                END ELSE BEGIN
                                                                  CLEAR(Chapter);
                                                                  CLEAR(Paragraph);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Part }
    { 60  ;   ;Part Description    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Estimate Part NEW".Description WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                             Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                             Part=FIELD(Part)));
                                                   CaptionML=ENU=Part Description;
                                                   Editable=No }
    { 65  ;   ;Recipe Group        ;Code10        ;TableRelation="Recipe Group".No.;
                                                   OnValidate=BEGIN
                                                                IF "Recipe Group" <> xRec."Recipe Group" THEN
                                                                  CheckRenameRecipe;
                                                              END;

                                                   CaptionML=ENU=Recipe Group }
    { 70  ;   ;Recipe              ;Code20        ;TableRelation="Base Recipe".No. WHERE (Recipe Group=FIELD(Recipe Group));
                                                   OnValidate=BEGIN
                                                                IF Recipe <> xRec.Recipe THEN BEGIN
                                                                  IF "Cost Type (Price)" <> "Cost Type (Price)"::" " THEN
                                                                    CheckCostTypePriceAllowed;
                                                                  IF Recipe <> '' THEN
                                                                    TESTFIELD("Surcharge Type", "Surcharge Type"::" ");
                                                                  IF EstLineRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Line No.") THEN BEGIN
                                                                    IF xRec.Recipe <> '' THEN
                                                                      IF NOT RecipeRec.GET("Recipe Group", Recipe) THEN
                                                                        CheckRenameRecipe;
                                                                    ClearRecipeData;  //db, 06-02-15
                                                                    IF RecipeRec.GET("Recipe Group", Recipe) THEN
                                                                      CopyRecipe;
                                                                  END;
                                                                  IF NOT RecipeRec.GET("Recipe Group", Recipe) THEN BEGIN
                                                                    IF xRec.Recipe = '' THEN
                                                                      IF NOT CONFIRM(Text001, TRUE) THEN
                                                                        Recipe := xRec.Recipe;
                                                                  END;
                                                                  "Cost Type (Hours)" := "Cost Type (Hours)"::" ";  //DP01047
                                                                  "Surcharge % Labor" := 0;  //DP00381
                                                                  "Surcharge % Price" := 0;  //DP00381
                                                                  "Norm Group" := '';
                                                                  "Norm Group (Sales)":= '';
                                                                  "Sub Operation Code" := '';
                                                                  "Cost Object Labor" := '';
                                                                  "Cost Object Price" := '';
                                                                  InitAdjustmentFactor;
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Recipe }
    { 75  ;   ;Recipe Lines Exist  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Estimate Recipe Line" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                   Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                   Part Group=FIELD(Part Group),
                                                                                                   Part=FIELD(Part),
                                                                                                   Estimate Line=FIELD(Line No.)));
                                                   OnLookup=VAR
                                                              EstimateManagementRTC@1100525000 : Codeunit 11130010;
                                                            BEGIN
                                                            END;

                                                   CaptionML=ENU=Recipe Lines Exist;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 80  ;   ;Line No.            ;Integer       ;ValidateTableRelation=No;
                                                   CaptionML=ENU=Line No. }
    { 85  ;   ;Attached to Line No.;Integer       ;TableRelation="Estimate Line NEW"."Line No." WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                       Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                       Part Group=FIELD(Part Group),
                                                                                                       Part=FIELD(Part));
                                                   CaptionML=ENU=Attached to Line No.;
                                                   Editable=No }
    { 87  ;   ;Set Level           ;Integer       ;CaptionML=ENU=Set Level }
    { 90  ;   ;Set Code            ;Code10        ;TableRelation="Plant Set";
                                                   OnValidate=VAR
                                                                PlantSet@1100525000 : Record 11012587;
                                                                EstimateLine@1100525001 : Record 11072072;
                                                              BEGIN
                                                                IF "Set Code" <> xRec."Set Code" THEN
                                                                  IF "Cost Type (Price)" <> "Cost Type (Price)"::Plant THEN
                                                                    CheckCostTypePriceAllowed;
                                                                IF NOT PlantSet.GET("Set Code") THEN
                                                                  PlantSet.INIT;
                                                                Description := PlantSet.Description;
                                                                "Unit of Measure" := PlantSet."Unit of Measure";

                                                                EstimateMgmt.ModifyLinkedEstLines(0,Rec,0); //0:delete
                                                              END;

                                                   CaptionML=ENU=Set Code }
    { 100 ;   ;Description         ;Text100       ;OnValidate=BEGIN
                                                                UpdateEst.CheckBackSlash(Description);
                                                              END;

                                                   CaptionML=ENU=Description }
    { 110 ;   ;Time Quantity       ;Decimal       ;InitValue=1;
                                                   OnValidate=BEGIN
                                                                IF (Recipe <> '') THEN BEGIN  //db, 02-03-09: M14329
                                                                  IF CurrFieldNo = FIELDNO("Time Quantity") THEN
                                                                    UpdateTimeQuanRecipeLines;
                                                                  TESTFIELD("Time Quantity" , 1);
                                                                END;

                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Time Quantity;
                                                   BlankZero=Yes }
    { 120 ;   ;Unit of Time        ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=ENU=Unit of Time }
    { 140 ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Part Quantity");
                                                                UpdateRecipeTotals;  //db, 02-01-14: C019950
                                                                CheckIgnoreRecipeQuantity;  //db, 27-05-10: M13221

                                                                IF xRec.Quantity = 0 THEN
                                                                  EstimateMgmt.SetQuantityRatio(1)
                                                                ELSE
                                                                  EstimateMgmt.SetQuantityRatio(Quantity / xRec.Quantity);
                                                                EstimateMgmt.ModifyLinkedEstLines(1,Rec,0); //1:modify quantity

                                                                UpdateSalesQuantity;  //DP00381
                                                                CalculateTotals;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF EnterQuantity(4) THEN
                                                                EditQuanSheet;
                                                            END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 150 ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Unit of Measure") THEN BEGIN
                                                                  IF "Unit of Measure" <>  xRec."Unit of Measure" THEN
                                                                    CheckItemUnitConversion(Rec, xRec);
                                                                  CalculateTotals;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;
                                                            END;

                                                   CaptionML=ENU=Unit of Measure }
    { 155 ;   ;Norm Group          ;Code10        ;TableRelation="Norm Group".Code;
                                                   OnValidate=BEGIN
                                                                DetermineNorm;
                                                              END;

                                                   CaptionML=ENU=Norm Group }
    { 157 ;   ;Sub Operation Code  ;Code20        ;TableRelation="Sub Operation".Code;
                                                   OnValidate=VAR
                                                                SubOperRec@11012000 : Record 11012166;
                                                                OperRec@11012001 : Record 11012165;
                                                              BEGIN
                                                                DetermineNormGroup;
                                                                DetermineNorm;
                                                                DetermineNormSales;  //DP00381

                                                                IF SubOperRec.GET("Sub Operation Code") THEN BEGIN
                                                                  SubOperRec.TESTFIELD(Expired,FALSE);
                                                                  IF OperRec.GET(SubOperRec.Operation) THEN BEGIN
                                                                    IF ("Cost Object Labor" = '') OR (OldSubOperationDefault = TRUE) THEN BEGIN
                                                                      VALIDATE("Cost Object Labor", OperRec."Cost Object");
                                                                      CheckCostObject("Cost Object Labor");
                                                                    END;
                                                                    IF OperRec."Rate Code" <> '' THEN
                                                                      VALIDATE("Rate Code", OperRec."Rate Code");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Sub Operation Code }
    { 160 ;   ;Norm                ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> FIELDNO("Production Rate") THEN
                                                                  IF Norm <> 0 THEN
                                                                    "Production Rate" := 1 / Norm
                                                                  ELSE
                                                                    "Production Rate" := 0;

                                                                UpdateSalesNorm;  //DP00381
                                                                CalculateTotals;  //db, 24-09-12: norm and production rate used to calculate hours
                                                              END;

                                                   CaptionML=ENU=Norm;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 165 ;   ;Production Rate     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Production Rate" <> 0 THEN
                                                                  VALIDATE(Norm, 1 / "Production Rate")
                                                                ELSE
                                                                  VALIDATE(Norm,1);
                                                              END;

                                                   CaptionML=ENU=Production Rate;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 170 ;   ;Rate Code           ;Code10        ;TableRelation="Estimate Rate"."Rate Code" WHERE (Estimate No.=FIELD(Estimate No.));
                                                   OnValidate=BEGIN
                                                                EstSetup.GET;

                                                                IF GetRate THEN BEGIN //Call 23762
                                                                  IF (EstSetup."Upd. Cost Object by Rate Code") OR ("Cost Object Labor" = '') THEN BEGIN
                                                                    IF RateRec."Cost Object" <> '' THEN BEGIN
                                                                      "Cost Object Labor" := RateRec."Cost Object";
                                                                      GetEstimate("Estimate No.", TRUE);
                                                                      IF EstRec."Estimate Based On" = EstRec."Estimate Based On"::CostObject THEN BEGIN  //db, 16-01-15: C016230
                                                                        DimMgt.GetDimValueRec(2, "Cost Object Labor", DimValRec, TRUE,'');
                                                                        Description := DimValRec.Name;
                                                                      END;
                                                                    END;
                                                                  END;
                                                                  IF RateRec."Currency Code" = '' THEN BEGIN
                                                                    VALIDATE("Cost Rate", RateRec."Cost Rate");
                                                                    VALIDATE("Sales Rate", RateRec."Sales Rate");
                                                                  END ELSE BEGIN
                                                                    IF RateRec."Currency Code" = "Currency Code" THEN BEGIN
                                                                      SetSkipValidateFCY(TRUE);
                                                                      VALIDATE("Cost Rate (FCY)", RateRec."Cost Rate (FCY)");
                                                                      VALIDATE("Sales Rate (FCY)", RateRec."Sales Rate (FCY)");
                                                                    END ELSE BEGIN
                                                                      SetSkipValidateFCY(TRUE);
                                                                      VALIDATE("Cost Rate (FCY)", ExchangeAmtFCYToFCY(RateRec."Cost Rate (FCY)", RateRec."Currency Code", "Currency Code", FALSE, TRUE));
                                                                      VALIDATE("Sales Rate (FCY)", ExchangeAmtFCYToFCY(RateRec."Sales Rate (FCY)", RateRec."Currency Code", "Currency Code", TRUE, TRUE));
                                                                    END;
                                                                  END;
                                                                  "Rate Type" := RateRec."Rate Type";
                                                                  IF "Rate Type" = "Rate Type"::Minuts THEN
                                                                    "Team Size" := RateRec."Team Size"
                                                                  ELSE
                                                                    "Team Size" := 0;
                                                                  //check conversion norm after change of rate type and team size:
                                                                  IF ("Rate Type" <> xRec."Rate Type") OR ("Team Size" <> xRec."Team Size") THEN
                                                                    ConvertNorm(("Rate Type" <> xRec."Rate Type"), ("Team Size" <> xRec."Team Size"));
                                                                END ELSE BEGIN
                                                                  IF "Sub Operation Code" <> '' THEN
                                                                    TESTFIELD("Rate Code");
                                                                  InitRateRelatedFields;  //DP01047
                                                                  InitNormRelatedFields;  //DP01047
                                                                END;
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Rate Code }
    { 180 ;   ;Cost Rate           ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Cost Rate (FCY)" := ExchangeAmtLCYToFCY("Cost Rate", FALSE, TRUE, FALSE);
                                                              END;

                                                   CaptionML=ENU=Cost Rate;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 190 ;   ;Nett Cost Price     ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Nett Cost Price (FCY)" := ExchangeAmtLCYToFCY("Nett Cost Price", FALSE, TRUE, FALSE);
                                                                CalculateDiscount(FALSE);
                                                                EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",0,"Nett Cost Price","Buy Back Price","Buy Back %");
                                                                "Buy Back Price (FCY)" := ExchangeAmtLCYToFCY("Buy Back Price", FALSE, TRUE, FALSE);
                                                                UpdateSalesPriceFromCostPrice;  //db, 11-04-14: C014487
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Nett Cost Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 211 ;   ;Buy Back Price      ;Decimal       ;OnValidate=BEGIN
                                                                EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",1,"Nett Cost Price","Buy Back Price","Buy Back %");
                                                                "Buy Back Price (FCY)" := ExchangeAmtLCYToFCY("Buy Back Price", FALSE, TRUE, FALSE);
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Buy Back Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 214 ;   ;Buy Back %          ;Decimal       ;OnValidate=BEGIN
                                                                EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",2,"Nett Cost Price","Buy Back Price","Buy Back %");
                                                                "Buy Back Price (FCY)" := ExchangeAmtLCYToFCY("Buy Back Price", FALSE, TRUE, FALSE);
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Buy Back %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 220 ;   ;Hours               ;Decimal       ;CaptionML=ENU=Hours;
                                                   DecimalPlaces=2:;
                                                   Editable=No }
    { 230 ;   ;Labor Cost Amount   ;Decimal       ;CaptionML=ENU=Labor Cost Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 240 ;   ;Material Cost Amount;Decimal       ;CaptionML=ENU=Material Cost Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 241 ;   ;Material Gross Amount;Decimal      ;CaptionML=ENU=Material Gross Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 250 ;   ;Subcontracting Cost Amount;Decimal ;CaptionML=ENU=Subcontracting Cost Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 260 ;   ;Plant Cost Amount   ;Decimal       ;CaptionML=ENU=Plant Cost Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 261 ;   ;Buy Back Amount     ;Decimal       ;CaptionML=ENU=Buy Back Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 265 ;   ;Sundry Cost Amount  ;Decimal       ;CaptionML=ENU=Sundry Cost Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 270 ;   ;Cost Amount         ;Decimal       ;CaptionML=ENU=Cost Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 280 ;   ;Project No.         ;Code20        ;TableRelation=Job;
                                                   OnValidate=BEGIN
                                                                UpdateProjElem(0);
                                                              END;

                                                   CaptionML=ENU=Project No. }
    { 290 ;   ;Element             ;Code20        ;TableRelation="Base Element";
                                                   OnValidate=BEGIN
                                                                FormatMgt.FormatElem(Element,2,'');
                                                                IF Element <> '' THEN
                                                                  IF "Project No." <> '' THEN BEGIN
                                                                    IF NOT ProjElemRec.GET("Project No.", Element) THEN
                                                                      ElemRec.GET(Element);
                                                                  END ELSE
                                                                    ElemRec.GET(Element);

                                                                UpdateProjElem(1);
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF "Project No." <> '' THEN BEGIN
                                                                ProjElemRec.SETRANGE("Project No.", "Project No.");
                                                                ProjElemRec.Element := Element;
                                                                IF PAGE.RUNMODAL(PAGE::"Project Element List", ProjElemRec) = ACTION::LookupOK THEN
                                                                  VALIDATE(Element, ProjElemRec.Element);
                                                              END ELSE BEGIN
                                                                ElemRec.Code := Element;
                                                                IF PAGE.RUNMODAL(PAGE::Elements, ElemRec) = ACTION::LookupOK THEN
                                                                  VALIDATE(Element, ElemRec.Code);
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 300 ;   ;Total Recipe        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Cost Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                               Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                               Part Group=FIELD(Part Group),
                                                                                                               Part=FIELD(Part),
                                                                                                               Estimate Line=FIELD(Line No.)));
                                                   CaptionML=ENU=Total Recipe;
                                                   Editable=No }
    { 301 ;   ;Hours Recipe (Cost) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line".Hours WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                       Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                       Part Group=FIELD(Part Group),
                                                                                                       Part=FIELD(Part),
                                                                                                       Estimate Line=FIELD(Line No.),
                                                                                                       Cost Type (Hours)=CONST(Labor)));
                                                   CaptionML=ENU=Hours Recipe (Cost);
                                                   Description=DP01047;
                                                   Editable=No }
    { 302 ;   ;Hours Recipe (Sales);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Hours (Sales)" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                 Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                 Part Group=FIELD(Part Group),
                                                                                                                 Part=FIELD(Part),
                                                                                                                 Estimate Line=FIELD(Line No.),
                                                                                                                 Cost Type (Hours)=CONST(Labor)));
                                                   CaptionML=ENU=Hours Recipe (Sales);
                                                   Description=DP01047;
                                                   Editable=No }
    { 310 ;   ;Labor Recipe (Cost) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Labor Cost Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                     Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                     Part Group=FIELD(Part Group),
                                                                                                                     Part=FIELD(Part),
                                                                                                                     Estimate Line=FIELD(Line No.)));
                                                   CaptionML=ENU=Labor Recipe (Cost);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 311 ;   ;Labor Recipe (Sales);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Labor Sales Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                      Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                      Part Group=FIELD(Part Group),
                                                                                                                      Part=FIELD(Part),
                                                                                                                      Estimate Line=FIELD(Line No.)));
                                                   CaptionML=ENU=Labor Recipe (Sales);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 320 ;   ;Material Recipe (Cost);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Nett Cost Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                    Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                    Part Group=FIELD(Part Group),
                                                                                                                    Part=FIELD(Part),
                                                                                                                    Estimate Line=FIELD(Line No.),
                                                                                                                    Cost Type (Price)=CONST(Material)));
                                                   CaptionML=ENU=Material Recipe (Cost);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 321 ;   ;Material Recipe (Sales);Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Nett Sales Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                     Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                     Part Group=FIELD(Part Group),
                                                                                                                     Part=FIELD(Part),
                                                                                                                     Estimate Line=FIELD(Line No.),
                                                                                                                     Cost Type (Price)=CONST(Material)));
                                                   CaptionML=ENU=Material Recipe (Sales);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 325 ;   ;Gross Amount Recipe (Mat);Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Gross Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                Part Group=FIELD(Part Group),
                                                                                                                Part=FIELD(Part),
                                                                                                                Estimate Line=FIELD(Line No.),
                                                                                                                Cost Type (Price)=CONST(Material)));
                                                   CaptionML=ENU=Gross Amount Recipe (Material);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 326 ;   ;Gross Amount Recipe (Subc);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Gross Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                Part Group=FIELD(Part Group),
                                                                                                                Part=FIELD(Part),
                                                                                                                Estimate Line=FIELD(Line No.),
                                                                                                                Cost Type (Price)=CONST(Subcontracting)));
                                                   CaptionML=ENU=Gross Amount Recipe (Subcontracting);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 327 ;   ;Gross Amount Recipe (Plant);Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Gross Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                Part Group=FIELD(Part Group),
                                                                                                                Part=FIELD(Part),
                                                                                                                Estimate Line=FIELD(Line No.),
                                                                                                                Cost Type (Price)=CONST(Plant)));
                                                   CaptionML=ENU=Gross Amount Recipe (Plant);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 328 ;   ;Gross Amount Recipe (Sundry);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Gross Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                Part Group=FIELD(Part Group),
                                                                                                                Part=FIELD(Part),
                                                                                                                Estimate Line=FIELD(Line No.),
                                                                                                                Cost Type (Price)=CONST(Sundry)));
                                                   CaptionML=ENU=Gross Amount Recipe (Sundry);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 340 ;   ;Subcontracting Recipe (Cost);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Nett Cost Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                    Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                    Part Group=FIELD(Part Group),
                                                                                                                    Part=FIELD(Part),
                                                                                                                    Estimate Line=FIELD(Line No.),
                                                                                                                    Cost Type (Price)=CONST(Subcontracting)));
                                                   CaptionML=ENU=Subcontracting Recipe (Cost);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 341 ;   ;Subcontracting Recipe (Sales);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Nett Sales Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                     Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                     Part Group=FIELD(Part Group),
                                                                                                                     Part=FIELD(Part),
                                                                                                                     Estimate Line=FIELD(Line No.),
                                                                                                                     Cost Type (Price)=CONST(Subcontracting)));
                                                   CaptionML=ENU=Subcontracting Recipe (Sales);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 350 ;   ;Plant Recipe (Cost) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Nett Cost Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                    Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                    Part Group=FIELD(Part Group),
                                                                                                                    Part=FIELD(Part),
                                                                                                                    Estimate Line=FIELD(Line No.),
                                                                                                                    Cost Type (Price)=CONST(Plant)));
                                                   CaptionML=ENU=Plant Recipe (Cost);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 351 ;   ;Plant Recipe (Sales);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Nett Sales Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                     Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                     Part Group=FIELD(Part Group),
                                                                                                                     Part=FIELD(Part),
                                                                                                                     Estimate Line=FIELD(Line No.),
                                                                                                                     Cost Type (Price)=CONST(Plant)));
                                                   CaptionML=ENU=Plant Recipe (Sales);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 360 ;   ;Weight Recipe       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Total Weight" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                Part Group=FIELD(Part Group),
                                                                                                                Part=FIELD(Part),
                                                                                                                Estimate Line=FIELD(Line No.)));
                                                   CaptionML=ENU=Weight Recipe;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 365 ;   ;Buy Back Recipe     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Buy Back Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                   Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                   Part Group=FIELD(Part Group),
                                                                                                                   Part=FIELD(Part),
                                                                                                                   Estimate Line=FIELD(Line No.)));
                                                   CaptionML=ENU=Buy Back Recipe;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 370 ;   ;Sundry Recipe (Cost);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Nett Cost Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                    Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                    Part Group=FIELD(Part Group),
                                                                                                                    Part=FIELD(Part),
                                                                                                                    Estimate Line=FIELD(Line No.),
                                                                                                                    Cost Type (Price)=CONST(Sundry)));
                                                   CaptionML=ENU=Plant Recipe (Cost);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 371 ;   ;Sundry Recipe (Sales);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Nett Sales Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                     Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                     Part Group=FIELD(Part Group),
                                                                                                                     Part=FIELD(Part),
                                                                                                                     Estimate Line=FIELD(Line No.),
                                                                                                                     Cost Type (Price)=CONST(Sundry)));
                                                   CaptionML=ENU=Plant Recipe (Sales);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 400 ;   ;Text Composition    ;Text50        ;CaptionML=ENU=Text Composition }
    { 401 ;   ;Rounding Line       ;Boolean       ;CaptionML=ENU=Rounding Line }
    { 460 ;   ;Chapter             ;Code10        ;CaptionML=ENU=Chapter }
    { 470 ;   ;Paragraph           ;Code10        ;CaptionML=ENU=Paragraph }
    { 475 ;   ;Chapter (Sub-Estimate);Code10      ;CaptionML=ENU=Chapter Sub-Estimate }
    { 476 ;   ;Paragraph (Sub-Estimate);Code10    ;CaptionML=ENU=Paragraph Sub-Estimate }
    { 480 ;   ;Cost Object Labor   ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Labor),
                                                                                               Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Cost Object Labor }
    { 515 ;   ;Cost Object Price   ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=FILTER(Material..Sundry),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                EstSetup.GET;
                                                                IF EstSetup."Default Purchase Action" THEN BEGIN
                                                                  IF "Cost Object Price" <> '' THEN
                                                                    IF xRec."Cost Object Price" = '' THEN
                                                                      GetDefaultsCostObject(gvCostType::Sundry, "Cost Object Price")
                                                                    ELSE
                                                                      IF "Cost Object Price" <> xRec."Cost Object Price" THEN
                                                                          IF CONFIRM(Text008 + Text009) THEN
                                                                            GetDefaultsCostObject(gvCostType::Sundry, "Cost Object Price");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Object Price }
    { 520 ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." <> '') THEN BEGIN
                                                                  ClearFields(1); //Plant
                                                                  GetEstimate("Estimate No.", FALSE); //Call 23762
                                                                  ValidateItem(ItemTypeOpt::Item, EstRec, TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 530 ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN BEGIN
                                                                  GetEstimate("Estimate No.", FALSE); //Call 23762
                                                                  ValidateItem(ItemTypeOpt::"Basic Item", EstRec, TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Basic Item }
    { 531 ;   ;Item Type           ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Type" WHERE (Product Code=FIELD(Basic Item),
                                                                                                      Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Type;
                                                   Editable=No }
    { 532 ;   ;Item Brand          ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Brand" WHERE (Product Code=FIELD(Basic Item),
                                                                                                       Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Brand;
                                                   Editable=No }
    { 533 ;   ;Item Series         ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Series" WHERE (Product Code=FIELD(Basic Item),
                                                                                                        Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Series;
                                                   Editable=No }
    { 540 ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN BEGIN
                                                                  GetEstimate("Estimate No.", FALSE); //Call 23762
                                                                  ValidateItem(ItemTypeOpt::"Trade Item", EstRec, TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Trade Item }
    { 560 ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=VAR
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") AND ("Vendor (Trade Item)" <> '') THEN BEGIN
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  //db.sn, 17-12-10: M18021
                                                                  IF lvExecValidate THEN BEGIN
                                                                    GetEstimate("Estimate No.", FALSE); //Call 23762
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item",EstRec,TRUE)
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor",EstRec,TRUE);
                                                                  END;
                                                                  //db.en, 17-12-10: M18021
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 570 ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Manufacturer }
    { 580 ;   ;Gross Price         ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Gross Price (FCY)" := ExchangeAmtLCYToFCY("Gross Price", FALSE, TRUE, FALSE);
                                                                CalculateNettPrice;
                                                                UpdateSalesPriceFromCostPrice;  //db, 11-04-14: C014487
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Gross Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 588 ;   ;Purchase Discount % ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Purchase Discount %") THEN BEGIN
                                                                  TESTFIELD("Gross Price");  //db, 11-11-13: DP00260 (C005807)
                                                                END;

                                                                //DP00381.sn
                                                                CalculateNettPrice;
                                                                UpdateSalesPriceFromCostPrice;  //db, 11-04-14: C014487
                                                                CalculateTotals;
                                                                //DP00381.en
                                                              END;

                                                   CaptionML=ENU=Purchase Discount %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 589 ;   ;Sales Discount %    ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Sales Discount %") THEN BEGIN
                                                                  TESTFIELD("Gross Price");  //db, 11-11-13: DP00260 (C005807)
                                                                END;

                                                                //DP00381.sn
                                                                IF "Sales Discount %"<> 0 THEN BEGIN  //db, 11-04-14: C014487
                                                                  GetEstimate("Estimate No.", FALSE);
                                                                  IF "Surcharge Type" = "Surcharge Type"::" " THEN  //db, 05-11-15: C026570 (if SalesPrice=CostPrice+SurchPerc then SalesDisc<0)
                                                                    EstRec.TESTFIELD("Item Sales Price Based On", EstRec."Item Sales Price Based On"::GrossMin);
                                                                END;
                                                                CalculateNettPrice;
                                                                CalculateTotals;
                                                                //DP00381.en
                                                              END;

                                                   CaptionML=ENU=Sales Discount %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 591 ;   ;Surcharge %         ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Part Quantity");
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Surcharge %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 594 ;   ;Surcharge Type      ;Option        ;OnValidate=BEGIN
                                                                IF "Surcharge Type" <> "Surcharge Type"::" " THEN BEGIN
                                                                  IF (xRec."Surcharge Type" = xRec."Surcharge Type"::" ") AND
                                                                     (Quantity + Norm + "Nett Cost Price" <> 0) THEN  //DP00381
                                                                        ERROR(Text005);
                                                                  "Norm Group" := '';
                                                                  "Norm Group (Sales)" := '';
                                                                  "Sub Operation Code" := '';
                                                                  InitAdjustmentFactor;
                                                                  EvaluateSurchargeCostType;  //db, 14-11-13:DP00381
                                                                END ELSE BEGIN
                                                                  ERROR(Text004);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Surcharge Type;
                                                   OptionCaptionML=ENU=" ,Labor,Material,Subcontracting,Plant,Sundry";
                                                   OptionString=[ ,Labor,Material,Subcontracting,Plant,Sundry] }
    { 600 ;   ;Price Reference Date;Date          ;CaptionML=ENU=Price Reference Date;
                                                   Editable=No }
    { 610 ;   ;Part Quantity       ;Decimal       ;OnValidate=BEGIN
                                                                "Part Quantity" := GetPartQuantity;
                                                              END;

                                                   CaptionML=ENU=Part Quantity;
                                                   Editable=No }
    { 680 ;   ;Line Status         ;Code10        ;TableRelation="Line Status".Status;
                                                   OnValidate=BEGIN
                                                                ValidateStatus;
                                                              END;

                                                   CaptionML=ENU=Line Status }
    { 690 ;   ;External Text Block ;Boolean       ;CaptionML=ENU=External Text Block;
                                                   Editable=No }
    { 691 ;   ;Internal Text Block ;Boolean       ;CaptionML=ENU=Internal Text Block;
                                                   Editable=No }
    { 692 ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line (Group)" WHERE (Table Name=CONST(Estimate),
                                                                                                   Estimate No.=FIELD(Estimate No.),
                                                                                                   Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                   Part Group=FIELD(Part Group),
                                                                                                   Part=FIELD(Part),
                                                                                                   Estimate Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 693 ;   ;Print on Quote      ;Boolean       ;CaptionML=ENU=Print on Quote }
    { 694 ;   ;Extension           ;Boolean       ;CaptionML=ENU=Extension }
    { 700 ;   ;Rate Type           ;Option        ;CaptionML=ENU=Rate Type;
                                                   OptionCaptionML=ENU=Hours,Minuts;
                                                   OptionString=Hours,Minuts;
                                                   Editable=No }
    { 710 ;   ;Team Size           ;Decimal       ;CaptionML=ENU=Team Size;
                                                   Editable=No }
    { 720 ;   ;Length              ;Decimal       ;OnValidate=BEGIN
                                                                CalculateQuantity;
                                                              END;

                                                   CaptionML=ENU=Length;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 730 ;   ;Width               ;Decimal       ;OnValidate=BEGIN
                                                                CalculateQuantity;
                                                              END;

                                                   CaptionML=ENU=Width;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 735 ;   ;Height              ;Decimal       ;OnValidate=BEGIN
                                                                CalculateQuantity;
                                                              END;

                                                   CaptionML=ENU=Height;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 740 ;   ;External Text       ;Text250       ;OnValidate=BEGIN
                                                                "External Text Block" := "External Text" <> '';
                                                              END;

                                                   CaptionML=ENU=External Text }
    { 741 ;   ;Internal Text       ;Text250       ;OnValidate=BEGIN
                                                                "Internal Text Block" := "Internal Text" <> '';
                                                              END;

                                                   CaptionML=ENU=Internal Text }
    { 750 ;   ;Volume              ;Decimal       ;CaptionML=ENU=Volume;
                                                   DecimalPlaces=2:;
                                                   Editable=No }
    { 755 ;   ;Weight              ;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 756 ;   ;Total Weight        ;Decimal       ;CaptionML=ENU=Total Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 760 ;   ;Uncoded Labor       ;Boolean       ;CaptionML=ENU=Uncoded Labor;
                                                   Editable=No }
    { 761 ;   ;Uncoded Material    ;Boolean       ;CaptionML=ENU=Uncoded Material;
                                                   Editable=No }
    { 762 ;   ;Uncoded Subcontracting;Boolean     ;CaptionML=ENU=Uncoded Subcontracting;
                                                   Editable=No }
    { 764 ;   ;Uncoded Plant       ;Boolean       ;CaptionML=ENU=Uncoded Plant;
                                                   Editable=No }
    { 765 ;   ;Uncoded Line        ;Boolean       ;CaptionML=ENU=Uncoded Line;
                                                   Editable=No }
    { 770 ;   ;Adjustment Factor Hours;Decimal    ;OnValidate=BEGIN
                                                                ProcessAdjustmentFactor(1,1);  //DP00555
                                                              END;

                                                   CaptionML=ENU=Adjustment Factor Hours;
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 771 ;   ;Adjustment Factor Price;Decimal    ;OnValidate=BEGIN
                                                                ProcessAdjustmentFactor(2,1);  //DP00555
                                                              END;

                                                   CaptionML=ENU=Adjustment Factor Price;
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 775 ;   ;Cum. Adj. Factor Hours;Decimal     ;CaptionML=ENU=Cum. Adjustment Factor Hours;
                                                   DecimalPlaces=0:6 }
    { 776 ;   ;Cum. Adj. Factor Price;Decimal     ;CaptionML=ENU=Cum. Adjustment Factor Price;
                                                   DecimalPlaces=0:6 }
    { 780 ;   ;Ask for Quote       ;Boolean       ;OnValidate=BEGIN
                                                                IF "Ask for Quote" THEN BEGIN  //DP00381
                                                                  IF ("Nett Cost Price" = 0) AND ("Cost Object Price" = '') THEN BEGIN
                                                                    "Ask for Quote" := FALSE;
                                                                    IF CurrFieldNo <> 0 THEN
                                                                      FIELDERROR("Ask for Quote", Text002);
                                                                  END;
                                                                END;

                                                                RecipeLineRec.RESET;
                                                                RecipeLineRec.SETRANGE("Estimate No.","Estimate No.");
                                                                RecipeLineRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
                                                                RecipeLineRec.SETRANGE("Part Group","Part Group");
                                                                RecipeLineRec.SETRANGE(Part,Part);
                                                                RecipeLineRec.SETRANGE("Estimate Line","Line No.");
                                                                IF RecipeLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
                                                                  REPEAT
                                                                    RecipeLineRec.VALIDATE("Ask for Quote", "Ask for Quote");
                                                                    RecipeLineRec.MODIFY;
                                                                  UNTIL RecipeLineRec.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Ask for Quote }
    { 790 ;   ;Purchase Route Reference;Code20    ;OnLookup=VAR
                                                              lvRouteRefMgtCU@1210190000 : Codeunit 11012045;
                                                            BEGIN
                                                              lvRouteRefMgtCU.ShowReferenceList("Purchase Route Reference");
                                                            END;

                                                   CaptionML=ENU=Purchase Route Reference;
                                                   Editable=No }
    { 800 ;   ;Document No.        ;Code20        ;TableRelation="Document Properties";
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Document No. }
    { 810 ;   ;Code                ;Code20        ;OnValidate=VAR
                                                                CodingSystem@1100525000 : Record 11012088;
                                                              BEGIN
                                                                GetEstimate("Estimate No.", FALSE); //Call 23762
                                                                EstRec.TESTFIELD("Coding System");

                                                                IF Code <> '' THEN BEGIN
                                                                  CodingSystem.GET(EstRec."Coding System");
                                                                  IF CodingSystem."Deviant Code allowed" = FALSE THEN BEGIN  //db, 26-06-15
                                                                    FormatMgt.SetSelection(EstRec."Coding System");
                                                                    FormatMgt.FormatElem(Code,4,'');
                                                                    CodeRec.GET(EstRec."Coding System", Code);
                                                                  END;
                                                                END;

                                                                EstCodeRec.RESET;
                                                                EstCodeRec.SETRANGE("Estimate No.", "Estimate No.");
                                                                EstCodeRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
                                                                EstCodeRec.SETRANGE("Part Group", "Part Group");
                                                                EstCodeRec.SETRANGE(Part, Part);
                                                                EstCodeRec.SETRANGE("Estimate Line", "Line No.");
                                                                EstCodeRec.SETRANGE("Coding System", EstRec."Coding System");
                                                                EstCodeRec.DELETEALL;

                                                                IF Code <> '' THEN BEGIN
                                                                  EstCodeRec.INIT;
                                                                  EstCodeRec."Estimate No." := "Estimate No.";
                                                                  EstCodeRec."Sub-Estimate No." := "Sub-Estimate No.";
                                                                  EstCodeRec."Part Group" := "Part Group";
                                                                  EstCodeRec.Part := Part;
                                                                  EstCodeRec."Estimate Line" := "Line No.";
                                                                  EstCodeRec."Recipe Group" := '';
                                                                  EstCodeRec.Recipe := '';
                                                                  EstCodeRec."Recipe Line" := 0;
                                                                  EstCodeRec."Coding System" := EstRec."Coding System";
                                                                  EstCodeRec.Code := Code;
                                                                  EstCodeRec.INSERT;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              GetEstimate("Estimate No.", FALSE); //Call 23762
                                                              EstRec.TESTFIELD("Coding System");
                                                              CodeRec.SETRANGE("Coding System", EstRec."Coding System");
                                                              CodeRec.Code := Code;
                                                              IF PAGE.RUNMODAL(PAGE::"Codes per Coding System", CodeRec) = ACTION::LookupOK THEN
                                                                VALIDATE(Code, CodeRec.Code);
                                                            END;

                                                   CaptionML=ENU=Code }
    { 820 ;   ;Price Agreement     ;Boolean       ;CaptionML=ENU=Price Agreement }
    { 821 ;   ;Norm Agreement      ;Boolean       ;CaptionML=ENU=Norm Agreement }
    { 830 ;   ;Vendor              ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Vendor }
    { 831 ;   ;Vendor Name         ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Vendor)));
                                                   CaptionML=ENU=Vendor Name;
                                                   Editable=No }
    { 840 ;   ;Condition           ;Code10        ;TableRelation=Condition.Code;
                                                   CaptionML=ENU=Condition;
                                                   Editable=No }
    { 850 ;   ;Removal Contribution;Boolean       ;CaptionML=ENU=Removal Contribution }
    { 860 ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   CaptionML=ENU=Cost Component }
    { 870 ;   ;Discipline          ;Code10        ;TableRelation=Discipline;
                                                   CaptionML=ENU=Discipline }
    { 871 ;   ;Trade Speciality    ;Code10        ;TableRelation="Trade Speciality".Code WHERE (Discipline=FIELD(Discipline));
                                                   CaptionML=ENU=Trade Speciality }
    { 872 ;   ;Trade Expertise     ;Code10        ;TableRelation="Trade Expertise";
                                                   OnValidate=BEGIN
                                                                TradeExpRec.GetRelatedValue(Discipline, "Trade Speciality", "Trade Expertise");
                                                              END;

                                                   CaptionML=ENU=Trade Expertise }
    { 890 ;   ;Subcontractor       ;Code20        ;TableRelation=Vendor.No. WHERE (Subcontractor=CONST(Yes));
                                                   CaptionML=ENU=Subcontractor }
    { 891 ;   ;Subcontractor Name  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Subcontractor)));
                                                   CaptionML=ENU=Subcontractor Name;
                                                   Editable=No }
    { 892 ;   ;Scheme Code         ;Code15        ;CaptionML=ENU=Scheme Code }
    { 893 ;   ;Comments            ;Text50        ;CaptionML=ENU=Comments }
    { 894 ;   ;Supply              ;Boolean       ;CaptionML=ENU=Supply }
    { 895 ;   ;Comments for Logistics;Text50      ;CaptionML=ENU=Comments for Logistics }
    { 896 ;   ;Material Sheet      ;Option        ;CaptionML=ENU=Material Sheet;
                                                   OptionCaptionML=ENU=Customer and Assemly,Customer Only,Assembly only,Do not report;
                                                   OptionString=Customer and Assemly,Customer Only,Assembly only,Do not report }
    { 897 ;   ;E-Plan Item         ;Code50        ;TableRelation="E-Plan Item".No.;
                                                   CaptionML=ENU=E-Plan Item;
                                                   Editable=No }
    { 900 ;   ;Quantity Model Exist;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Estimate Model Line Quantity" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                           Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                           Part Group=FIELD(Part Group),
                                                                                                           Part=FIELD(Part),
                                                                                                           Estimate Line=FIELD(Line No.)));
                                                   CaptionML=ENU=Quantity Model Exist;
                                                   Editable=No }
    { 901 ;   ;Quantity Sheet Exist;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Estimate Quantity Sheet" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                      Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                      Part Group=FIELD(Part Group),
                                                                                                      Part=FIELD(Part),
                                                                                                      Estimate Line=FIELD(Line No.)));
                                                   CaptionML=ENU=Quantity Sheet Exist;
                                                   Editable=No }
    { 905 ;   ;Quantity Sheet Relation Exist;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Exist("Estimate Quantity Relation" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                         Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                         Part Group=FIELD(Part Group),
                                                                                                         Part=FIELD(Part),
                                                                                                         Estimate Line=FIELD(Line No.)));
                                                   CaptionML=ENU=Quantity Sheet Relation Exist;
                                                   Editable=No }
    { 910 ;   ;Object No.          ;Code20        ;TableRelation="Standard Object".No.;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Object No. }
    { 911 ;   ;Object Customer     ;Code20        ;CaptionML=ENU=Object Customer }
    { 920 ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   OnValidate=BEGIN
                                                                IF ("Plant Type" <> xRec."Plant Type") AND ("Plant Type" <> '') THEN BEGIN
                                                                  IF "Cost Type (Price)" <> "Cost Type (Price)"::Plant THEN
                                                                    CheckCostTypePriceAllowed;
                                                                  IF NOT EstimateMgmt.IsLineDiscountMaterialOnly THEN
                                                                    ClearFields(0); //Material
                                                                  GetDefaultsPlantType;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Plant Type }
    { 921 ;   ;Plant Price Type    ;Option        ;CaptionML=ENU=Plant Price Type;
                                                   OptionCaptionML=ENU=" ,Day,Week,,Month,,,,,Hour";
                                                   OptionString=[ ,Day,Week,,Month,,,,,Hour];
                                                   Description=DP01047: synchronise options;
                                                   Editable=No }
    { 922 ;   ;Start Rental Period ;Date          ;OnValidate=BEGIN
                                                                CalcRentalUnits;
                                                                EstimateMgmt.ModifyLinkedEstLines(3,Rec,FIELDNO("Start Rental Period")); //3:fields
                                                              END;

                                                   CaptionML=ENU=Start Rental Period }
    { 923 ;   ;End Rental Period   ;Date          ;OnValidate=BEGIN
                                                                CalcRentalUnits;
                                                                EstimateMgmt.ModifyLinkedEstLines(3,Rec,FIELDNO("End Rental Period")); //3:fields
                                                              END;

                                                   CaptionML=ENU=End Rental Period }
    { 924 ;   ;Rental Period Formula;DateFormula  ;OnValidate=BEGIN
                                                                IF FORMAT("Rental Period Formula") <> '' THEN BEGIN
                                                                  IF "Set Code" = '' THEN
                                                                    TESTFIELD("Plant Price Type");
                                                                  VALIDATE("Time Quantity",EstimateMgmt.ConvPlantCalcPeriod("Rental Period Formula","Plant Price Type"));
                                                                END ELSE BEGIN
                                                                  IF "Rental Time Units" <> 0 THEN
                                                                    VALIDATE("Time Quantity","Rental Time Units")
                                                                  ELSE
                                                                    VALIDATE("Time Quantity",1);
                                                                END;
                                                                EstimateMgmt.ModifyLinkedEstLines(3,Rec,FIELDNO("Rental Period Formula")); //3:fields
                                                              END;

                                                   CaptionML=ENU=Rental Period Formula }
    { 925 ;   ;Rental Time Units   ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Rental Period Formula");
                                                                EstimateMgmt.ModifyLinkedEstLines(3,Rec,FIELDNO("Rental Time Units")); //3:fields
                                                              END;

                                                   CaptionML=ENU=Rental Time Units;
                                                   BlankZero=Yes }
    { 930 ;   ;Admicode            ;Code10        ;TableRelation="Admi Code";
                                                   OnValidate=VAR
                                                                lvAdmiCodeRec@1100485000 : Record 11012390;
                                                              BEGIN
                                                                IF Admicode <> '' THEN BEGIN
                                                                  lvAdmiCodeRec.GET(Admicode);
                                                                  IF Description = '' THEN
                                                                    Description := lvAdmiCodeRec.Description;
                                                                  //DP00381.sn
                                                                  IF ("Cost Object Price" = '') THEN BEGIN
                                                                    IF ("Cost Type (Price)"= "Cost Type (Price)"::Material) AND (lvAdmiCodeRec."Cost Object Material" <> '') THEN
                                                                      GetDefaultsCostObject(gvCostType::Material, lvAdmiCodeRec."Cost Object Material");
                                                                    IF ("Cost Type (Price)"= "Cost Type (Price)"::Subcontracting) AND (lvAdmiCodeRec."Cost Object Subcontracting" <> '') THEN
                                                                      GetDefaultsCostObject(gvCostType::Subcontracting, lvAdmiCodeRec."Cost Object Subcontracting");
                                                                    IF ("Cost Type (Price)"= "Cost Type (Price)"::Plant) AND (lvAdmiCodeRec."Cost Object Plant" <> '') THEN
                                                                      GetDefaultsCostObject(gvCostType::Plant, lvAdmiCodeRec."Cost Object Plant");
                                                                    IF ("Cost Type (Price)"= "Cost Type (Price)"::Sundry) AND (lvAdmiCodeRec."Cost Object Sundry" <> '') THEN
                                                                      GetDefaultsCostObject(gvCostType::Sundry, lvAdmiCodeRec."Cost Object Sundry");
                                                                  END;
                                                                  //DP00381.en
                                                                 END;
                                                              END;

                                                   CaptionML=ENU=Admi Code }
    { 940 ;   ;Purchase Action Mat.;Code10        ;TableRelation="Estimate Purchase Action".Code WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Purchase Action Material }
    { 950 ;   ;Purchase Action Filter Mat.;Code10 ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Purchase Action Filter Material }
    { 960 ;   ;Purchase Phase Mat. ;Code10        ;CaptionML=ENU=Purchase Phase Material;
                                                   Numeric=Yes }
    { 970 ;   ;Purchase Action Status Mat.;Option ;CaptionML=ENU=Purchase Action Status Material;
                                                   OptionCaptionML=ENU=Concept,Applied,Approved,Definitive;
                                                   OptionString=Concept,Applied,Approved,Definitive;
                                                   Editable=No }
    { 980 ;   ;Purch. Action Appr. Date Mat.;Date ;CaptionML=ENU=Purch. Action Approval Date Material;
                                                   Editable=No }
    { 990 ;   ;Advised Mat.        ;Boolean       ;CaptionML=ENU=Advised Material }
    { 1000;   ;Purchase Action Subc.;Code10       ;TableRelation="Estimate Purchase Action".Code WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Purchase Action Subcontracting }
    { 1010;   ;Purchase Action Filter Subc.;Code10;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Purchase Action Filter Subcontracting }
    { 1020;   ;Purchase Phase Subc.;Code10        ;CaptionML=ENU=Purchase Phase Subcontracting;
                                                   Numeric=Yes }
    { 1030;   ;Purchase Action Status Subc.;Option;CaptionML=ENU=Purchase Action Status Subcontracting;
                                                   OptionCaptionML=ENU=Concept,Applied,Approved,Definitive;
                                                   OptionString=Concept,Applied,Approved,Definitive;
                                                   Editable=No }
    { 1040;   ;Purch. Action Appr. Date Subc.;Date;CaptionML=ENU=Purch. Action Approval Date Subcontracting;
                                                   Editable=No }
    { 1050;   ;Advised Subc.       ;Boolean       ;CaptionML=ENU=Advised Subcontracting }
    { 1060;   ;Purchase Action Plant;Code10       ;TableRelation="Estimate Purchase Action".Code WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Purchase Action Plant }
    { 1070;   ;Purchase Action Filter Plant;Code10;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Purchase Action Filter Plant }
    { 1080;   ;Purchase Phase Plant;Code10        ;CaptionML=ENU=Purchase Phase Plant;
                                                   Numeric=Yes }
    { 1090;   ;Purchase Action Status Plant;Option;CaptionML=ENU=Purchase Action Status Plant;
                                                   OptionCaptionML=ENU=Concept,Applied,Approved,Definitive;
                                                   OptionString=Concept,Applied,Approved,Definitive;
                                                   Editable=No }
    { 1100;   ;Purch. Action Appr. Date Plant;Date;CaptionML=ENU=Purch. Action Approval Date Plant;
                                                   Editable=No }
    { 1110;   ;Advised Plant       ;Boolean       ;CaptionML=ENU=Advised Plant }
    { 1120;   ;Ignore Part Quantity;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=ENU=Ignore Part Quantity }
    { 1140;   ;Service Order No.   ;Code20        ;TableRelation="Service Order".No. WHERE (No.=FIELD(Service Order No.));
                                                   CaptionML=ENU=Service Order No. }
    { 1145;   ;Object Modification No.;Code10     ;TableRelation="Object Modification";
                                                   CaptionML=ENU=Object Modification No. }
    { 1208;   ;Object Type         ;Text30        ;CaptionML=ENU=Object Type }
    { 1209;   ;Object Brand        ;Text30        ;CaptionML=ENU=Object Brand }
    { 1215;   ;Part of Line        ;Integer       ;TableRelation="Estimate Line NEW"."Line No." WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                       Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                       Part Group=FIELD(Part Group),
                                                                                                       Part=FIELD(Part));
                                                   OnValidate=BEGIN
                                                                DetermineBOMLevel("Part of Line","Level BOM");
                                                              END;

                                                   CaptionML=ENU=Part of Line }
    { 1220;   ;Original Quantity   ;Decimal       ;CaptionML=ENU=Original Quantity BOM;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 1225;   ;Level BOM           ;Integer       ;CaptionML=ENU=Level BOM;
                                                   Description=Level after exploding BOM-Item;
                                                   Editable=No }
    { 1230;   ;BOM Item No.        ;Code20        ;TableRelation=Item;
                                                   CaptionML=ENU=BOM Item No.;
                                                   Description=Original Item before exploding BOM }
    { 1240;   ;Project Planning Activity Code;Code10;
                                                   TableRelation="Project Planning Base Activity";
                                                   OnValidate=VAR
                                                                ProjectPlanningActivity@1100528402 : Record 11012431;
                                                                ProjectPlanningBaseActivity@1100528401 : Record 11012434;
                                                                FormatManagement@1100528400 : Codeunit 11012022;
                                                              BEGIN
                                                                FormatManagement.FormatElem("Project Planning Activity Code", 20, '');
                                                                IF "Project Planning Activity Code" <> '' THEN
                                                                  IF "Project No." <> '' THEN BEGIN
                                                                    IF NOT ProjectPlanningActivity.GET("Project No." + "Project Planning Activity Code") THEN
                                                                      ProjectPlanningBaseActivity.GET("Project Planning Activity Code");
                                                                  END ELSE
                                                                    ProjectPlanningBaseActivity.GET("Project Planning Activity Code");

                                                                UpdateProjPlanActCode;
                                                              END;

                                                   OnLookup=VAR
                                                              ProjectPlanningActivity@1100528401 : Record 11012431;
                                                              ProjectPlanningBaseActivity@1100528400 : Record 11012434;
                                                            BEGIN
                                                              IF "Project No." <> '' THEN BEGIN
                                                                ProjectPlanningActivity.SETRANGE("Project No.", "Project No.");
                                                                ProjectPlanningActivity.Code := "Project Planning Activity Code";
                                                                IF PAGE.RUNMODAL(PAGE::"Project Planning Activity List", ProjectPlanningActivity) = ACTION::LookupOK THEN
                                                                  VALIDATE("Project Planning Activity Code", ProjectPlanningActivity.Code);
                                                              END ELSE BEGIN
                                                                ProjectPlanningBaseActivity.Code := "Project Planning Activity Code";
                                                                IF PAGE.RUNMODAL(PAGE::"Proj. Planning Base Activities", ProjectPlanningBaseActivity) = ACTION::LookupOK THEN
                                                                  VALIDATE("Project Planning Activity Code", ProjectPlanningBaseActivity.Code);
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Project Planning Activity Code }
    { 1250;   ;Wage Component      ;Code10        ;TableRelation="Wage Component";
                                                   OnValidate=BEGIN
                                                                CalculateTotals;  //C026032
                                                              END;

                                                   CaptionML=ENU=Wage Component }
    { 1260;   ;Extension Contract  ;Code10        ;TableRelation="Extension Contract"."Contract No." WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                UpdateExtensionContract;  //DP00260
                                                              END;

                                                   CaptionML=ENU=Extension Contract }
    { 1270;   ;Price History 0 Exists;Boolean     ;CaptionML=ENU=Price History 0 Exists;
                                                   Editable=No }
    { 1280;   ;Quantity Sheet Feature;Code10      ;TableRelation="Est. Quantity Sheet Feature";
                                                   OnValidate=VAR
                                                                i@1100409000 : Integer;
                                                              BEGIN
                                                                //DP00686
                                                                REPEAT
                                                                  CheckFeatureRelation(i);
                                                                  i := i + 1;
                                                                UNTIL i=3;
                                                              END;

                                                   CaptionML=ENU=Quantity Sheet Feature }
    { 2000;   ;Cost Type (Price)   ;Option        ;InitValue=Material;
                                                   OnValidate=BEGIN
                                                                //DP00381
                                                                IF CurrFieldNo = FIELDNO("Cost Type (Price)") THEN BEGIN  //db, 17-03-14: C012735
                                                                  EstSetup.GET;
                                                                  IF "Cost Type (Price)" <> "Cost Type (Price)"::" " THEN BEGIN
                                                                    TESTFIELD(Recipe, '');
                                                                    TESTFIELD("Item No.", '');
                                                                    TESTFIELD("Basic Item", '');
                                                                    TESTFIELD("Trade Item", '');
                                                                    TESTFIELD("Plant Type", '');
                                                                    TESTFIELD("Set Code", '');
                                                                  END ELSE BEGIN
                                                                    "Cost Object Price" := '';
                                                                  END;
                                                                  IF "Cost Type (Price)" = "Cost Type (Price)"::Material THEN
                                                                     VALIDATE("Cost Object Price", EstSetup."Absence Value Material");
                                                                  IF "Cost Type (Price)" = "Cost Type (Price)"::Subcontracting THEN
                                                                     VALIDATE("Cost Object Price", EstSetup."Absence Value Subcontracting");
                                                                  IF "Cost Type (Price)" = "Cost Type (Price)"::Plant THEN
                                                                     VALIDATE("Cost Object Price", EstSetup."Absence Value Plant");
                                                                  IF "Cost Type (Price)" = "Cost Type (Price)"::Sundry THEN
                                                                     VALIDATE("Cost Object Price", EstSetup."Absence Value Sundry Cost");
                                                                END;
                                                                //InitSurcharge(TRUE);  //db, 26-05-14: C015031
                                                                IF CurrFieldNo = FIELDNO("Cost Type (Price)") THEN BEGIN  //db, 17-03-14: C012735
                                                                  InitSurcharge(TRUE);  //db, 26-05-14: C015031
                                                                  CalculateTotals;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Type (Price);
                                                   OptionCaptionML=ENU=" ,Material,Subcontracting,Plant,Sundry";
                                                   OptionString=[ ,Material,Subcontracting,Plant,Sundry] }
    { 2005;   ;Cost Type (Hours)   ;Option        ;OnValidate=BEGIN
                                                                //DP01047
                                                                IF CurrFieldNo = FIELDNO("Cost Type (Hours)") THEN BEGIN
                                                                  IF "Cost Type (Hours)" <> "Cost Type (Hours)"::" " THEN BEGIN
                                                                    TESTFIELD(Recipe, '');
                                                                  END;
                                                                  IF "Cost Type (Hours)" <> "Cost Type (Hours)"::Labor THEN BEGIN
                                                                    EstRec.GET("Estimate No.");
                                                                    EstRec.TESTFIELD("Plant Rates in Hours",TRUE);
                                                                    VALIDATE("Rate Code", '');
                                                                  END;
                                                                  CalculateTotals;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Type (Hours);
                                                   OptionCaptionML=ENU="Labor,,,Plant,, ";
                                                   OptionString=[Labor,,,Plant,, ];
                                                   Description=DP01047 }
    { 2010;   ;Nett Sales Price    ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Nett Sales Price (FCY)" := ExchangeAmtLCYToFCY("Nett Sales Price", TRUE, TRUE, FALSE);
                                                                CalculateDiscount(TRUE);
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Nett Sales Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 2015;No ;Sales Price         ;Decimal       ;OnValidate=VAR
                                                                CurrencyDate@1100528802 : Date;
                                                                CurrencyExchangeRate@1100528801 : Record 330;
                                                                Currency2@1100528800 : Record 4;
                                                              BEGIN
                                                              END;

                                                   CaptionML=ENU=Sales Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 2020;   ;Material Sales Amount;Decimal      ;CaptionML=ENU=Material Sales Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2030;   ;Surcharge % Labor   ;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Surcharge % Labor;
                                                   BlankZero=Yes }
    { 2040;   ;Surcharge % Price   ;Decimal       ;OnValidate=BEGIN
                                                                //CheckSurchargeMaterialPrice;  //db, 26-05-14: C015031
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Surcharge % Price;
                                                   BlankZero=Yes }
    { 2050;   ;Uncoded Sundry      ;Boolean       ;CaptionML=ENU=Uncoded Sundry;
                                                   Editable=No }
    { 2060;   ;Sales Condition Present;Boolean    ;CaptionML=ENU=Sales Condition Present;
                                                   Editable=No }
    { 2100;   ;Subcontracting Gross Amount;Decimal;CaptionML=ENU=Subcontracting Gross Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2105;   ;Subcontracting Sales Amount;Decimal;CaptionML=ENU=Subcontracting Sales Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2110;   ;Plant Gross Amount  ;Decimal       ;CaptionML=ENU=Plant Gross Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2115;   ;Plant Sales Amount  ;Decimal       ;CaptionML=ENU=Plant Sales Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2120;   ;Sundry Gross Amount ;Decimal       ;CaptionML=ENU=Sundry Gross Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2125;   ;Sundry Sales Amount ;Decimal       ;CaptionML=ENU=Sundry Sales Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2130;   ;Sales Rate          ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Sales Rate (FCY)" := ExchangeAmtLCYToFCY("Sales Rate", TRUE, TRUE, FALSE);
                                                              END;

                                                   CaptionML=ENU=Sales Rate;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 2140;   ;Labor Sales Amount  ;Decimal       ;CaptionML=ENU=Labor Sales Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2145;   ;Hours (Sales)       ;Decimal       ;CaptionML=ENU=Hours (Sales);
                                                   DecimalPlaces=2:;
                                                   Editable=No }
    { 2150;   ;Norm Group (Sales)  ;Code10        ;TableRelation="Norm Group".Code;
                                                   OnValidate=BEGIN
                                                                DetermineNormSales;
                                                              END;

                                                   CaptionML=ENU=Norm Group (Sales) }
    { 2170;   ;Norm (Sales)        ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> FIELDNO("Production Rate (Sales)") THEN
                                                                  IF "Norm (Sales)" <> 0 THEN
                                                                    "Production Rate (Sales)" := 1 / "Norm (Sales)"
                                                                  ELSE
                                                                    "Production Rate (Sales)" := 0;

                                                                CalculateTotals;  //db, 24-09-12: norm and production rate used to calculate hours
                                                              END;

                                                   CaptionML=ENU=Norm (Sales);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 2180;   ;Production Rate (Sales);Decimal    ;OnValidate=BEGIN
                                                                IF "Production Rate (Sales)" <> 0 THEN
                                                                  VALIDATE("Norm (Sales)", 1 / "Production Rate (Sales)")
                                                                ELSE
                                                                  VALIDATE("Norm (Sales)",1);
                                                              END;

                                                   CaptionML=ENU=Production Rate (Sales);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 2190;   ;Quantity (Sales)    ;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Quantity (Sales);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 2195;   ;Deviating Sales Quantity;Boolean   ;CaptionML=ENU=Deviating Sales Quantity;
                                                   Editable=No }
    { 2200;   ;Sales Amount        ;Decimal       ;CaptionML=ENU=Sales Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2210;   ;Price Agreement (Sales);Boolean    ;CaptionML=ENU=Price Agreement (Sales) }
    { 2215;   ;Norm Agreement (Sales);Boolean     ;CaptionML=ENU=Norm Agreement (Sales) }
    { 2220;   ;Assembly Project No.;Code20        ;TableRelation=Job WHERE (Assembly Project=CONST(Yes));
                                                   CaptionML=ENU=Assembly Project No. }
    { 2230;   ;Adj. Factor Hours (Sales);Decimal  ;OnValidate=BEGIN
                                                                ProcessAdjustmentFactor(1,2);  //DP00555
                                                              END;

                                                   CaptionML=ENU=Hours Adjustment Factor (Sales);
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 2240;   ;Cum. Adj. Factor Hours (Sales);Decimal;
                                                   CaptionML=ENU=Cum. Hours Adjustment Factor (Sales);
                                                   DecimalPlaces=0:6 }
    { 2250;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                CheckCurrencyAgreement;   //db, 08-03-16
                                                                VALIDATE("Rate Code");
                                                                VALIDATE("Gross Price");
                                                                "Gross Price (FCY)" := ExchangeAmtLCYToFCY("Gross Price", FALSE, TRUE, FALSE);  //db, 11-01-16
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Currency Code;
                                                   Editable=No }
    { 2251;   ;Currency Agreement  ;Boolean       ;CaptionML=ENU=Currency Agreement }
    { 2260;   ;Nett Cost Price (FCY);Decimal      ;OnValidate=BEGIN
                                                                SetSkipValidateFCY(TRUE);
                                                                VALIDATE("Nett Cost Price", ExchangeAmtFCYToLCY("Nett Cost Price (FCY)", FALSE, TRUE, FALSE));
                                                              END;

                                                   CaptionML=ENU=Nett Cost Price (FCY);
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 2270;   ;Nett Sales Price (FCY);Decimal     ;OnValidate=BEGIN
                                                                SetSkipValidateFCY(TRUE);
                                                                VALIDATE("Nett Sales Price", ExchangeAmtFCYToLCY("Nett Sales Price (FCY)", TRUE, TRUE, FALSE));
                                                              END;

                                                   CaptionML=ENU=Nett Sales Price (FCY);
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 2280;   ;Gross Price (FCY)   ;Decimal       ;OnValidate=VAR
                                                                SaveGrossPrice@1100525000 : Decimal;
                                                              BEGIN
                                                                //C026956.sn
                                                                //SetSkipValidateFCY(TRUE);
                                                                SaveGrossPrice := "Gross Price (FCY)";
                                                                VALIDATE("Gross Price", ExchangeAmtFCYToLCY("Gross Price (FCY)", FALSE, TRUE, FALSE));
                                                                IF CurrFieldNo = FIELDNO("Gross Price (FCY)") THEN
                                                                  "Gross Price (FCY)" := SaveGrossPrice;  //function CalculateDiscount cleared input on validate GrossPrice
                                                                //C026956.en
                                                              END;

                                                   CaptionML=ENU=Gross Price (FCY);
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 2290;   ;Cost Rate (FCY)     ;Decimal       ;OnValidate=BEGIN
                                                                SetSkipValidateFCY(TRUE);
                                                                VALIDATE("Cost Rate", ExchangeAmtFCYToLCY("Cost Rate (FCY)", FALSE, TRUE, FALSE));
                                                              END;

                                                   CaptionML=ENU=Cost Rate (FCY);
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 2300;   ;Sales Rate (FCY)    ;Decimal       ;OnValidate=BEGIN
                                                                SetSkipValidateFCY(TRUE);
                                                                VALIDATE("Sales Rate", ExchangeAmtFCYToLCY("Sales Rate (FCY)", TRUE, TRUE, FALSE));
                                                              END;

                                                   CaptionML=ENU=Sales Rate (FCY);
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 2310;   ;Material Cost Amount (FCY);Decimal ;CaptionML=ENU=Material Cost Amount (FCY);
                                                   Editable=No }
    { 2320;   ;Material Sales Amount (FCY);Decimal;CaptionML=ENU=Material Sales Amount (FCY);
                                                   Editable=No }
    { 2330;   ;Material Gross Amount (FCY);Decimal;CaptionML=ENU=Material Gross Amount (FCY);
                                                   Editable=No }
    { 2340;   ;Subcontr. Cost Amount (FCY);Decimal;CaptionML=ENU=Subcontracting Cost Amount (FCY);
                                                   Editable=No }
    { 2350;   ;Subcontr. Sales Amount (FCY);Decimal;
                                                   CaptionML=ENU=Subcontracting Sales Amount (FCY);
                                                   Editable=No }
    { 2360;   ;Subcontr. Gross Amount (FCY);Decimal;
                                                   CaptionML=ENU=Subcontracting Gross Amount (FCY);
                                                   Editable=No }
    { 2370;   ;Plant Cost Amount (FCY);Decimal    ;CaptionML=ENU=Plant Cost Amount (FCY);
                                                   Editable=No }
    { 2380;   ;Plant Sales Amount (FCY);Decimal   ;CaptionML=ENU=Plant Sales Amount (FCY);
                                                   Editable=No }
    { 2390;   ;Plant Gross Amount (FCY);Decimal   ;CaptionML=ENU=Plant Gross Amount (FCY);
                                                   Editable=No }
    { 2400;   ;Sundry Cost Amount (FCY);Decimal   ;Editable=No }
    { 2410;   ;Sundry Sales Amount (FCY);Decimal  ;Editable=No }
    { 2420;   ;Sundry Gross Amount (FCY);Decimal  ;Editable=No }
    { 2430;   ;Cost Amount (FCY)   ;Decimal       ;CaptionML=ENU=Cost Amount (FCY);
                                                   Editable=No }
    { 2440;   ;Sales Amount (FCY)  ;Decimal       ;CaptionML=ENU=Sales Amount (FCY);
                                                   Editable=No }
    { 2450;   ;Labor Cost Amount (FCY);Decimal    ;CaptionML=ENU=Labor Cost Amount (FCY);
                                                   Editable=No }
    { 2460;   ;Labor Sales Amount (FCY);Decimal   ;CaptionML=ENU=Labor Sales Amount (FCY);
                                                   Editable=No }
    { 2470;   ;Buy Back Price (FCY);Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Buy Back Price", ExchangeAmtFCYToLCY("Buy Back Price (FCY)", FALSE, TRUE, FALSE));
                                                              END;

                                                   CaptionML=ENU=Buy Back Price (FCY) }
    { 2480;   ;Buy Back Amount (FCY);Decimal      ;CaptionML=ENU=Buy Back Amount (FCY);
                                                   Editable=No }
    { 11128270;;Price History Found;Boolean       ;CaptionML=ENU=Price History Found;
                                                   Description=EVRY }
    { 11128271;;Price History Vendor No.;Code20   ;Description=EVRY }
  }
  KEYS
  {
    {    ;Estimate No.,Sub-Estimate No.,Part Group,Part,Line No.;
                                                   SumIndexFields=Cost Amount,Hours (Sales),Labor Sales Amount;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Estimate No.,Chapter (Sub-Estimate)     ;SumIndexFields=Hours,Labor Cost Amount,Material Cost Amount,Material Gross Amount,Material Sales Amount,Subcontracting Cost Amount,Subcontracting Gross Amount,Subcontracting Sales Amount,Plant Cost Amount,Plant Gross Amount,Plant Sales Amount,Sundry Cost Amount,Sundry Gross Amount,Sundry Sales Amount;
                                                   MaintainSIFTIndex=No }
    {    ;Estimate No.,Paragraph (Sub-Estimate)   ;SumIndexFields=Hours,Labor Cost Amount,Material Cost Amount,Material Gross Amount,Material Sales Amount,Subcontracting Cost Amount,Subcontracting Gross Amount,Subcontracting Sales Amount,Plant Cost Amount,Plant Gross Amount,Plant Sales Amount,Sundry Cost Amount,Sundry Gross Amount,Sundry Sales Amount;
                                                   MaintainSIFTIndex=No }
    {    ;Estimate No.,Sub-Estimate No.,Chapter   ;SumIndexFields=Labor Cost Amount,Labor Sales Amount,Material Cost Amount,Material Gross Amount,Material Sales Amount,Subcontracting Cost Amount,Subcontracting Gross Amount,Subcontracting Sales Amount,Plant Cost Amount,Plant Gross Amount,Plant Sales Amount,Sundry Cost Amount,Sundry Gross Amount,Sundry Sales Amount;
                                                   MaintainSIFTIndex=No }
    {    ;Estimate No.,Sub-Estimate No.,Paragraph ;SumIndexFields=Labor Cost Amount,Labor Sales Amount,Material Cost Amount,Material Gross Amount,Material Sales Amount,Subcontracting Cost Amount,Subcontracting Gross Amount,Subcontracting Sales Amount,Plant Cost Amount,Plant Gross Amount,Plant Sales Amount,Sundry Cost Amount,Sundry Gross Amount,Sundry Sales Amount;
                                                   MaintainSIFTIndex=No }
    {    ;Estimate No.,Sub-Estimate No.,Part Group,Part,Recipe Group,Recipe }
    {    ;Purchase Route Reference,Ask for Quote   }
    {    ;Estimate No.,Purchase Action Mat.        }
    {    ;Estimate No.,Plant Type                 ;KeyGroups=PLTEST }
    {    ;Estimate No.,Code                        }
    {    ;Estimate No.,Sub-Estimate No.,Part Group,Part,Attached to Line No.;
                                                   SumIndexFields=Volume }
    {    ;Estimate No.,Text Composition            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@11012012 : TextConst 'ENU=Rename not allowed, already lines present for recipe %1';
      EstSetup@1100485004 : Record 11012150;
      EstRec@11012000 : Record 11012151;
      SubEstRec@11012001 : Record 11072074;
      EstPartRec@11012002 : Record 11072073;
      EstLineRec@1210190000 : Record 11072072;
      RecipeRec@11012006 : Record 11020581;
      RecipeLineRec@11012003 : Record 11072075;
      StdRcpLineRec@11012004 : Record 11020582;
      EstRcpLineRec@11012005 : Record 11072075;
      TmpStdRcpLine@1210190021 : TEMPORARY Record 11020582;
      TmpStdChrgRec@1210190022 : TEMPORARY Record 11229771;
      TmpRcpLineRec@1100525007 : TEMPORARY Record 11072075;
      TmpChrgRec@1210190014 : TEMPORARY Record 11229771;
      TmpRecipe@1210190025 : TEMPORARY Record 11020581;
      TextRec@1100525000 : Record 11020595;
      EstModelRec@1100485001 : Record 11012196;
      EstModelLineRec@1100485000 : Record 11012197;
      EstCodeRec@1210190011 : Record 11229772;
      CodeRec@1210190012 : Record 11012089;
      RateRec@11012007 : Record 11012160;
      TradeItemRec@1210190018 : Record 11012317;
      BasicItemRec@1210190005 : Record 11012316;
      ItemRec@1210190003 : Record 27;
      DimValRec@1210190001 : Record 349;
      ElemRec@1210190020 : Record 11012060;
      ProjElemRec@1210190019 : Record 11012010;
      TradeExpRec@1100485002 : Record 11020286;
      EstLineTotal@1100528900 : Record 11072077;
      DimMgt@1210190002 : Codeunit 408;
      FormatMgt@11012008 : Codeunit 11012022;
      UpdateEst@1210190007 : Codeunit 11012229;
      ValidateCu@1210190008 : Codeunit 11012033;
      SearchRateCu@1100525001 : Codeunit 11012567;
      EstimateMgmt@1100525002 : Codeunit 11012232;
      ItemTypeOpt@11012010 : 'Item,Basic Item,Trade Item,Trade Vendor';
      Text001@1210190004 : TextConst 'ENU="Standard Recipe not present; create Estimate Recipe ?"';
      Text002@1210190010 : TextConst 'ENU=only allowed for material, subcontracting or plant (fill one of the prices or cost objects)';
      Text003@1210190009 : TextConst 'ENU=not allowed  for a combination of cost types (material, subcontracting and/or plant), split the estimate line';
      Text004@1210190013 : TextConst 'ENU=Remove Charge Line';
      Text005@1210190015 : TextConst 'ENU=Switch to Surcharge Line not allowed for Estimate Line with filled Quantity, Norm or Price';
      gvCostType@1100485005 : 'Labor,Material,Subcontracting,Plant,Sundry';
      Text006@1100485007 : TextConst 'ENU=Default Purchase Action %1 not present for Estimate %2.';
      Text007@1100485006 : TextConst 'ENU=%1 of %2 is not adopted, because Status is %3.';
      Text008@1100485009 : TextConst 'ENU=Copy Purchase action from new Cost Object?\\';
      Text009@1100485008 : TextConst 'ENU=Only empty fields will be filled. Existing data will not be changed.';
      Text010@1100525003 : TextConst 'ENU=Discount and/or Buy Back cannot be assigned properly. Cost type should be either Material or Plant (but not both).';
      TotalWeight@1100525005 : Decimal;
      TotalBuyBack@1100525006 : Decimal;
      Text011@1100525004 : TextConst 'ENU=Add Line first.';
      EstimateCodesPresent@1210190026 : Boolean;
      EstimateCodesPresentChecked@1210190024 : Boolean;
      RatePresent@1210190016 : Boolean;
      SubEstPresent@1210190017 : Boolean;
      UseTempTables@1210190023 : Boolean;
      SkipBlockedItem@1100525008 : Boolean;
      SkipUpdateFromQuantitySheet@1100409000 : Boolean;
      SkipValidateFCY@1100528600 : Boolean;
      CalledFromUpdateTotals@1100409001 : Boolean;
      SkipBasedOn@1100409002 : Boolean;
      "-EVRY-"@1100285001 : Integer;
      Estimate@1100285000 : Record 11012151;

    PROCEDURE CalculateTotals@1();
    BEGIN
      CalculateTotalsWithOptions(TRUE);
    END;

    PROCEDURE CalculateTotalsWithOptions@1100528607(IUpdateLineTotals@1100528600 : Boolean);
    VAR
      WageCompRec@1100528636 : Record 11012014;
      CurrencyExchangeRate@1100528635 : Record 330;
      OverTimeFactorCost@1100528634 : Decimal;
      OverTimeFactorSales@1100528633 : Decimal;
      RoundFactor@1100528632 : Decimal;
      NettPriceMat@1100528631 : Decimal;
      NettPriceMatFCY@1100528630 : Decimal;
      NettPriceSubc@1100528629 : Decimal;
      NettPriceSubcFCY@1100528628 : Decimal;
      NettPricePlant@1100528627 : Decimal;
      NettPricePlantFCY@1100528626 : Decimal;
      NettPriceSundry@1100528625 : Decimal;
      NettPriceSundryFCY@1100528624 : Decimal;
      GrossPriceMat@1100528623 : Decimal;
      GrossPriceMatFCY@1100528622 : Decimal;
      GrossPriceSubc@1100528621 : Decimal;
      GrossPriceSubcFCY@1100528620 : Decimal;
      GrossPricePlant@1100528619 : Decimal;
      GrossPricePlantFCY@1100528618 : Decimal;
      GrossPriceSundry@1100528617 : Decimal;
      GrossPriceSundryFCY@1100528616 : Decimal;
      SalesPriceMat@1100528615 : Decimal;
      SalesPriceMatFCY@1100528614 : Decimal;
      SalesPriceSubc@1100528613 : Decimal;
      SalesPriceSubcFCY@1100528612 : Decimal;
      SalesPricePlant@1100528611 : Decimal;
      SalesPricePlantFCY@1100528610 : Decimal;
      SalesPriceSundry@1100528609 : Decimal;
      SalesPriceSundryFCY@1100528608 : Decimal;
      CostRate@1100528607 : Decimal;
      CostRateFCY@1100528606 : Decimal;
      SalesRate@1100528605 : Decimal;
      SalesRateFCY@1100528604 : Decimal;
      SaveFactorHours@1100528603 : Decimal;
      SaveFactorPrice@1100528602 : Decimal;
      SaveFactorHoursSales@1100528601 : Decimal;
    BEGIN
      //DP00381
      IF "Item No." + "Basic Item" + "Trade Item" <> '' THEN
        VALIDATE("Cost Type (Price)", "Cost Type (Price)"::Material);

      IF Recipe <> '' THEN BEGIN
        "Surcharge % Labor" := 0;  //db, 05-11-15: C026570
        "Surcharge % Price" := 0;  //db, 05-11-15: C026570
        //db, 31-03-14: C014278 (skip calculate with original totals recipe; adjustment factor included in cost/sales total)
        SaveFactorHours := "Cum. Adj. Factor Hours";
        SaveFactorPrice := "Cum. Adj. Factor Price";
        SaveFactorHoursSales := "Cum. Adj. Factor Hours (Sales)";  //DP00555
        "Cum. Adj. Factor Hours" := 1;
        "Cum. Adj. Factor Price" := 1;
        "Cum. Adj. Factor Hours (Sales)" := 1;  //DP00555
        CALCFIELDS(
          "Hours Recipe (Cost)","Hours Recipe (Sales)",
          "Labor Recipe (Cost)","Labor Recipe (Sales)",
          "Material Recipe (Cost)","Gross Amount Recipe (Mat)","Material Recipe (Sales)",
          "Subcontracting Recipe (Cost)","Gross Amount Recipe (Subc)","Subcontracting Recipe (Sales)",
          "Plant Recipe (Cost)","Gross Amount Recipe (Plant)","Plant Recipe (Sales)",
          "Sundry Recipe (Cost)","Gross Amount Recipe (Sundry)","Sundry Recipe (Sales)",
          "Buy Back Recipe","Weight Recipe");
        Weight := "Weight Recipe";
        "Buy Back Price" := "Buy Back Recipe";
        "Buy Back Price (FCY)" := ExchangeAmtLCYToFCY("Buy Back Price", FALSE, TRUE, FALSE);
        Hours := "Time Quantity" * Quantity * "Hours Recipe (Cost)";
        "Hours (Sales)" := "Time Quantity" * "Quantity (Sales)" * "Hours Recipe (Sales)";
        IF "Hours Recipe (Cost)" <> 0 THEN BEGIN
          RoundFactor := 0.00001;
          CostRate := ROUND(("Labor Recipe (Cost)" / "Hours Recipe (Cost)"), RoundFactor);
          CostRateFCY := ExchangeAmtLCYToFCY(CostRate, FALSE, TRUE, FALSE);
        END;
        IF "Hours Recipe (Sales)" <> 0 THEN BEGIN
          RoundFactor := 0.00001;
          SalesRate := ROUND(("Labor Recipe (Sales)" / "Hours Recipe (Sales)"), RoundFactor);
          SalesRateFCY := ExchangeAmtLCYToFCY(SalesRate, TRUE, TRUE, FALSE);
        END;
        NettPriceMat := "Material Recipe (Cost)";
        GrossPriceMat := "Gross Amount Recipe (Mat)";
        SalesPriceMat := "Material Recipe (Sales)";
        NettPriceSubc := "Subcontracting Recipe (Cost)";
        GrossPriceSubc := "Gross Amount Recipe (Subc)";
        SalesPriceSubc := "Subcontracting Recipe (Sales)";
        NettPricePlant := "Plant Recipe (Cost)";
        GrossPricePlant := "Gross Amount Recipe (Plant)";
        SalesPricePlant := "Plant Recipe (Sales)";
        NettPriceSundry := "Sundry Recipe (Cost)";
        GrossPriceSundry := "Gross Amount Recipe (Sundry)";
        SalesPriceSundry := "Sundry Recipe (Sales)";

        NettPriceMatFCY := ExchangeAmtLCYToFCY(NettPriceMat, FALSE, TRUE, FALSE);
        GrossPriceMatFCY := ExchangeAmtLCYToFCY(GrossPriceMat, FALSE, TRUE, FALSE);
        SalesPriceMatFCY := ExchangeAmtLCYToFCY(SalesPriceMat, TRUE, TRUE, FALSE);
        NettPriceSubcFCY := ExchangeAmtLCYToFCY(NettPriceSubc, FALSE, TRUE, FALSE);
        GrossPriceSubcFCY := ExchangeAmtLCYToFCY(GrossPriceSubc, FALSE, TRUE, FALSE);
        SalesPriceSubcFCY := ExchangeAmtLCYToFCY(SalesPriceSubc, TRUE, TRUE, FALSE);
        NettPricePlantFCY := ExchangeAmtLCYToFCY(NettPricePlant, FALSE, TRUE, FALSE);
        GrossPricePlantFCY := ExchangeAmtLCYToFCY(GrossPricePlant, FALSE, TRUE, FALSE);
        SalesPricePlantFCY := ExchangeAmtLCYToFCY(SalesPricePlant, TRUE, TRUE, FALSE);
        NettPriceSundryFCY := ExchangeAmtLCYToFCY(NettPriceSundry, FALSE, TRUE, FALSE);
        GrossPriceSundryFCY := ExchangeAmtLCYToFCY(GrossPriceSundry, FALSE, TRUE, FALSE);
        SalesPriceSundryFCY := ExchangeAmtLCYToFCY(SalesPriceSundry, TRUE, TRUE, FALSE);
      END ELSE BEGIN
        IF "Surcharge Type" <> "Surcharge Type"::" " THEN BEGIN
          "Time Quantity" := 1;
          "Unit of Time" := '';
          Quantity := "Surcharge %" / 100;
          "Quantity (Sales)" := Quantity;
          "Surcharge % Labor" := 0;  //db, 05-11-15: C026570
          "Surcharge % Price" := 0;  //db, 05-11-15: C026570
        END;
        //DP01047.sn
        IF "Production Rate" > 100000 THEN
          Hours := "Time Quantity" * Quantity / "Production Rate"
        ELSE
          Hours := "Time Quantity" * Quantity * Norm;
        IF "Production Rate (Sales)" > 100000 THEN
          "Hours (Sales)":= "Time Quantity" * "Quantity (Sales)" / "Production Rate (Sales)"
        ELSE
          "Hours (Sales)" := "Time Quantity" * "Quantity (Sales)" * "Norm (Sales)";
        //DP01047.en

        CostRate := "Cost Rate";
        CostRateFCY := "Cost Rate (FCY)";
        SalesRate := "Sales Rate" * (1 + "Surcharge % Labor"/100);
        SalesRateFCY := "Sales Rate (FCY)" * (1 + "Surcharge % Labor"/100);
        IF "Cost Type (Price)" = "Cost Type (Price)"::Material THEN BEGIN
          NettPriceMat := "Nett Cost Price";
          NettPriceMatFCY := "Nett Cost Price (FCY)";
          GrossPriceMat := "Gross Price";
          GrossPriceMatFCY := "Gross Price (FCY)";
          SalesPriceMat := "Nett Sales Price" * (1 + "Surcharge % Price"/100);
          SalesPriceMatFCY := "Nett Sales Price (FCY)" * (1 + "Surcharge % Price"/100);
        END;
        IF "Cost Type (Price)" = "Cost Type (Price)"::Subcontracting THEN BEGIN
          NettPriceSubc := "Nett Cost Price";
          NettPriceSubcFCY := "Nett Cost Price (FCY)";
          GrossPriceSubc := "Gross Price";
          GrossPriceSubcFCY := "Gross Price (FCY)";
          SalesPriceSubc := "Nett Sales Price" * (1 + "Surcharge % Price"/100);
          SalesPriceSubcFCY := "Nett Sales Price (FCY)" * (1 + "Surcharge % Price"/100);
        END;
        IF "Cost Type (Price)" = "Cost Type (Price)"::Plant THEN BEGIN
          NettPricePlant := "Nett Cost Price";
          NettPricePlantFCY := "Nett Cost Price (FCY)";
          GrossPricePlant := "Gross Price";
          GrossPricePlantFCY := "Gross Price (FCY)";
          SalesPricePlant := "Nett Sales Price" * (1 + "Surcharge % Price"/100);
          SalesPricePlantFCY := "Nett Sales Price (FCY)" * (1 + "Surcharge % Price"/100);
        END;
        IF "Cost Type (Price)" = "Cost Type (Price)"::Sundry THEN BEGIN
          NettPriceSundry := "Nett Cost Price";
          NettPriceSundryFCY := "Nett Cost Price (FCY)";
          GrossPriceSundry := "Gross Price";
          GrossPriceSundryFCY := "Gross Price (FCY)";
          SalesPriceSundry := "Nett Sales Price" * (1 + "Surcharge % Price"/100);
          SalesPriceSundryFCY := "Nett Sales Price (FCY)" * (1 + "Surcharge % Price"/100);
        END;
        IF "Cost Type (Price)" = "Cost Type (Price)"::" " THEN BEGIN
          IF ("Nett Cost Price" <> 0) OR ("Nett Sales Price" <> 0) THEN
            TESTFIELD("Cost Type (Price)");
        END;
      END;

      IF "Cum. Adj. Factor Hours" <> 0 THEN
        Hours := Hours * "Cum. Adj. Factor Hours";
      IF "Cum. Adj. Factor Hours (Sales)" <> 0 THEN  //DP00555
        "Hours (Sales)" := "Hours (Sales)" * "Cum. Adj. Factor Hours (Sales)";
      "Labor Cost Amount" := Hours * CostRate;
      "Labor Cost Amount (FCY)" := Hours * CostRateFCY;
      "Labor Sales Amount" := "Hours (Sales)" * SalesRate;
      "Labor Sales Amount (FCY)" := "Hours (Sales)" * SalesRateFCY;
      //DP00236.sn
      IF "Wage Component" <> '' THEN BEGIN
        WageCompRec.GetOverTimeFactors("Wage Component",OverTimeFactorCost, OverTimeFactorSales);
        IF OverTimeFactorCost <> 0 THEN BEGIN
          "Labor Cost Amount" := "Labor Cost Amount" * OverTimeFactorCost;
          "Labor Cost Amount (FCY)" := "Labor Cost Amount (FCY)" * OverTimeFactorCost;
        END;
        IF OverTimeFactorSales <> 0 THEN BEGIN
          "Labor Sales Amount" := "Labor Sales Amount" * OverTimeFactorSales;
          "Labor Sales Amount (FCY)" := "Labor Sales Amount (FCY)" * OverTimeFactorSales;
        END;
      END;
      //DP00236.en
      IF "Rate Type" = "Rate Type"::Minuts THEN BEGIN
        Hours := Hours * "Team Size" / 60;
        "Hours (Sales)":= "Hours (Sales)" * "Team Size" / 60;
      END;

      "Material Cost Amount" := "Time Quantity" * Quantity * NettPriceMat;
      "Material Cost Amount (FCY)" := "Time Quantity" * Quantity * NettPriceMatFCY;
      "Material Gross Amount" := "Time Quantity" * Quantity * GrossPriceMat;
      "Material Gross Amount (FCY)" := "Time Quantity" * Quantity * GrossPriceMatFCY;
      "Material Sales Amount" := "Time Quantity" * "Quantity (Sales)" * SalesPriceMat;
      "Material Sales Amount (FCY)" := "Time Quantity" * "Quantity (Sales)" * SalesPriceMatFCY;

      "Subcontracting Cost Amount" := "Time Quantity" * Quantity * NettPriceSubc;
      "Subcontr. Cost Amount (FCY)" := "Time Quantity" * Quantity * NettPriceSubcFCY;
      "Subcontracting Sales Amount" := "Time Quantity" * "Quantity (Sales)" * SalesPriceSubc;
      "Subcontr. Sales Amount (FCY)" := "Time Quantity" * "Quantity (Sales)" * SalesPriceSubcFCY;
      "Subcontracting Gross Amount" := "Time Quantity" * Quantity * GrossPriceSubc;
      "Subcontr. Gross Amount (FCY)" := "Time Quantity" * Quantity * GrossPriceSubcFCY;

      IF "Cost Type (Hours)"= "Cost Type (Hours)"::Plant THEN BEGIN  //DP01047
        "Plant Cost Amount" := Hours * NettPricePlant;
        "Plant Cost Amount (FCY)" := Hours * NettPricePlantFCY;
        "Plant Sales Amount" := "Hours (Sales)" * SalesPricePlant;
        "Plant Sales Amount (FCY)" := "Hours (Sales)" * SalesPricePlantFCY;
        "Plant Gross Amount" := Hours * GrossPricePlant;
        "Plant Gross Amount (FCY)" := Hours * GrossPricePlantFCY;
      END ELSE BEGIN
        "Plant Cost Amount" := "Time Quantity" * Quantity * NettPricePlant;
        "Plant Cost Amount (FCY)" := "Time Quantity" * Quantity * NettPricePlantFCY;
        "Plant Sales Amount" := "Time Quantity" * "Quantity (Sales)" * SalesPricePlant;
        "Plant Sales Amount (FCY)" := "Time Quantity" * "Quantity (Sales)" * SalesPricePlantFCY;
        "Plant Gross Amount" := "Time Quantity" * Quantity * GrossPricePlant;
        "Plant Gross Amount (FCY)" := "Time Quantity" * Quantity * GrossPricePlantFCY;
      END;

      "Sundry Cost Amount" := "Time Quantity" * Quantity * NettPriceSundry;
      "Sundry Cost Amount (FCY)" := "Time Quantity" * Quantity * NettPriceSundryFCY;
      "Sundry Sales Amount" := "Time Quantity" * "Quantity (Sales)" * SalesPriceSundry;
      "Sundry Sales Amount (FCY)" := "Time Quantity" * "Quantity (Sales)" * SalesPriceSundryFCY;
      "Sundry Gross Amount" := "Time Quantity" * Quantity * GrossPriceSundry;
      "Sundry Gross Amount (FCY)" := "Time Quantity" * Quantity * GrossPriceSundryFCY;

      IF ("Cum. Adj. Factor Price" <> 0)  AND ("Cost Type (Price)" = "Cost Type (Price)"::Material) THEN BEGIN
        "Material Cost Amount" := "Material Cost Amount" * "Cum. Adj. Factor Price";
        "Material Gross Amount" := "Material Gross Amount" * "Cum. Adj. Factor Price";
        "Material Cost Amount (FCY)" := "Material Cost Amount (FCY)" * "Cum. Adj. Factor Price";
        "Material Gross Amount (FCY)" := "Material Gross Amount (FCY)" * "Cum. Adj. Factor Price";
      END;
      IF ("Cum. Adj. Factor Price" <> 0)  AND ("Cost Type (Price)" = "Cost Type (Price)"::Subcontracting) THEN BEGIN
        "Subcontracting Cost Amount" := "Subcontracting Cost Amount" * "Cum. Adj. Factor Price";
        "Subcontr. Cost Amount (FCY)" := "Subcontr. Cost Amount (FCY)" * "Cum. Adj. Factor Price";
        "Subcontracting Gross Amount" := "Subcontracting Gross Amount" * "Cum. Adj. Factor Price";
        "Subcontr. Gross Amount (FCY)" := "Subcontr. Gross Amount (FCY)" * "Cum. Adj. Factor Price";
      END;
      IF ("Cum. Adj. Factor Price" <> 0)  AND ("Cost Type (Price)" = "Cost Type (Price)"::Plant) THEN BEGIN
        "Plant Cost Amount" := "Plant Cost Amount" * "Cum. Adj. Factor Price";
        "Plant Cost Amount (FCY)" := "Plant Cost Amount (FCY)" * "Cum. Adj. Factor Price";
        "Plant Gross Amount" := "Plant Gross Amount" * "Cum. Adj. Factor Price";
        "Plant Gross Amount (FCY)" := "Plant Gross Amount (FCY)" * "Cum. Adj. Factor Price";
      END;
      IF ("Cum. Adj. Factor Price" <> 0)  AND ("Cost Type (Price)" = "Cost Type (Price)"::Sundry) THEN BEGIN
        "Sundry Cost Amount" := "Sundry Cost Amount" * "Cum. Adj. Factor Price";
        "Sundry Cost Amount (FCY)" := "Sundry Cost Amount (FCY)" * "Cum. Adj. Factor Price";
        "Sundry Gross Amount" := "Sundry Gross Amount" * "Cum. Adj. Factor Price";
        "Sundry Gross Amount (FCY)" := "Sundry Gross Amount (FCY)" * "Cum. Adj. Factor Price";
      END;

      "Cost Amount" := "Labor Cost Amount" + "Material Cost Amount" + "Subcontracting Cost Amount" +
        "Plant Cost Amount" + "Sundry Cost Amount";
      "Cost Amount (FCY)" := "Labor Cost Amount (FCY)" + "Material Cost Amount (FCY)" + "Subcontr. Cost Amount (FCY)" +
        "Plant Cost Amount (FCY)" + "Sundry Cost Amount (FCY)";

      "Sales Amount" := "Labor Sales Amount" + "Material Sales Amount" + "Subcontracting Sales Amount" +
        "Plant Sales Amount" + "Sundry Sales Amount";
      "Sales Amount (FCY)" := "Labor Sales Amount (FCY)" + "Material Sales Amount (FCY)" + "Subcontr. Sales Amount (FCY)" +
        "Plant Sales Amount (FCY)" + "Sundry Sales Amount (FCY)";

      "Total Weight" := ROUND(Quantity * Weight);
      "Buy Back Amount" := ROUND(Quantity * "Buy Back Price");
      "Buy Back Amount (FCY)" := ROUND(Quantity * "Buy Back Price (FCY)");

      IF IUpdateLineTotals THEN
        UpdateLineTotals;  //DP00381

      IF "Surcharge Type" <> "Surcharge Type"::" " THEN BEGIN
        Quantity := 1;
        "Quantity (Sales)" := 1;
      END;

      "Deviating Sales Quantity" := (Quantity <> "Quantity (Sales)");  //db, 03-02-15: C020959

      IF Recipe <> '' THEN BEGIN
        //db, 31-03-14: C014278 (reset cum.adjustment factor)
        "Cum. Adj. Factor Hours" := SaveFactorHours;
        "Cum. Adj. Factor Price" := SaveFactorPrice;
        "Cum. Adj. Factor Hours (Sales)" := SaveFactorHoursSales;  //DP00555
        IF RecipeRec.GET("Recipe Group", Recipe) THEN
          Volume := RecipeRec.Volume * Quantity * "Part Quantity";
      END;
    END;

    PROCEDURE UpdateRecipeTotals@1100409007();
    BEGIN
      //db, 02-01-14: C019950
      IF Recipe <> '' THEN BEGIN
        RecipeLineRec.RESET;
        RecipeLineRec.SETRANGE("Estimate No.","Estimate No.");
        RecipeLineRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
        RecipeLineRec.SETRANGE("Part Group","Part Group");
        RecipeLineRec.SETRANGE(Part,Part);
        RecipeLineRec.SETRANGE("Estimate Line","Line No.");
        IF RecipeLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            RecipeLineRec.CalculateTotals;
            RecipeLineRec.UpdateCumTotals(Rec);
            RecipeLineRec.MODIFY;
          UNTIL RecipeLineRec.NEXT = 0;
        END ELSE BEGIN
          InitNormPrice;  //db, 29-11-11: disable incorrect use of Ctrl C+V: M31109
        END;
      END;
    END;

    PROCEDURE CheckIgnoreRecipeQuantity@1100525013();
    VAR
      RcpLineRec@1100525000 : Record 11072075;
    BEGIN
      //db, 27-05-10: M13221
      IF Recipe = '' THEN EXIT;

      RcpLineRec.SETRANGE("Estimate No.", "Estimate No.");
      RcpLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      RcpLineRec.SETRANGE("Part Group", "Part Group");
      RcpLineRec.SETRANGE(Part, Part);
      RcpLineRec.SETRANGE("Estimate Line", "Line No.");
      RcpLineRec.SETRANGE("Ignore Recipe Quantity", TRUE);
      IF RcpLineRec.FINDFIRST THEN BEGIN
         IF MODIFY THEN;
         RcpLineRec.UpdateEstLines;
         IF GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Line No.") THEN;
      END;
    END;

    PROCEDURE CreateCharge@4();
    VAR
      EstimateLine@1100485004 : Record 11072072;
      ChrgRec@11012000 : Record 11229771;
      ChrgLine@11012001 : Integer;
      ChrgDesc@11012002 : Text[100];
      lvText001@1100485003 : TextConst 'ENU=Current line is not a surcharge line.';
      lvText003@1100485001 : TextConst 'ENU=Are these estimate lines the basis for calculating surcharge for %1 ?';
      lvText004@1210190000 : TextConst 'ENU=First select records';
    BEGIN
      EstimateLine.COPY(Rec);

      WITH EstimateLine DO BEGIN
        ChrgLine := "Line No.";
        ChrgDesc := Description;
        IF "Surcharge Type" = "Surcharge Type"::" " THEN BEGIN
          MESSAGE(lvText001);
          EXIT;
        END;

        //db.sn, 29-01-15
        SETFILTER("Surcharge Type", '%1', "Surcharge Type"::" ");
        SETFILTER("Line No.", '<>%1', "Line No.");
        //db.en, 29-01-15

        IF NOT FINDFIRST THEN BEGIN
          MESSAGE(lvText004);
        END ELSE BEGIN
          IF CONFIRM(lvText003, TRUE, ChrgDesc) THEN BEGIN
            FINDSET(FALSE, FALSE);
            REPEAT;
              //IF NOT ChrgRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, 0, '', '', ChrgLine, "Line No.") THEN BEGIN
              IF NOT ChrgRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, 0, 0, '', 0, '', '', ChrgLine, "Line No.") THEN BEGIN //DP00481
                ChrgRec.INIT;
                ChrgRec."Estimate No." := "Estimate No.";
                ChrgRec."Sub-Estimate No." := "Sub-Estimate No.";
                ChrgRec."Part Group" := "Part Group";
                ChrgRec.Part := Part;
                ChrgRec."Surcharge Line" := ChrgLine;
                ChrgRec."Basic Line" := "Line No.";
                ChrgRec.INSERT;
              END;
            UNTIL NEXT = 0;
          END;
        END;
        MARKEDONLY(FALSE);
      END;

      CLEARMARKS;
    END;

    PROCEDURE CheckEstimateCharge@8();
    VAR
      ChrgRec1@11012000 : Record 11229771;
      ChrgRec2@11012001 : Record 11229771;
      EstLineRec1@11012002 : Record 11072072;
      EstLineRec2@11012003 : Record 11072072;
      EstimateLineOriginal@1210190000 : Record 11072072;
    BEGIN
      //read with current estimate line in surcharge table whether this is a basic line for surcharge lines.
      ChrgRec1.SETRANGE("Estimate No.", "Estimate No.");
      ChrgRec1.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      ChrgRec1.SETRANGE("Part Group", "Part Group");
      ChrgRec1.SETRANGE(Part, Part);
      ChrgRec1.SETFILTER("Recipe Group", '%1', '');
      ChrgRec1.SETFILTER(Recipe, '%1', '');
      IF "Surcharge Type" <> "Surcharge Type"::" " THEN
        ChrgRec1.SETRANGE("Surcharge Line", "Line No.")
      ELSE
        ChrgRec1.SETRANGE("Basic Line", "Line No.");
      IF ChrgRec1.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          //make surcharge line in estimate current
          EstLineRec2.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, ChrgRec1."Surcharge Line");
          EstimateLineOriginal := EstLineRec2; //call 30195
          EstLineRec2.InitNormPrice;  //db, 29-11-11
          //check all basic lines in surcharge table for surcharge line
          ChrgRec2.COPY(ChrgRec1);  //db, 15-06-10
          ChrgRec2.SETRANGE("Surcharge Line", ChrgRec1."Surcharge Line");
          ChrgRec2.SETRANGE("Basic Line");
          IF ChrgRec2.FINDSET(FALSE, FALSE) THEN BEGIN
            REPEAT
              //determine Line Total per Cost Type for Basic Lines belonging to Surcharge
              IF EstLineRec1.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, ChrgRec2."Basic Line") THEN BEGIN
                //DP00381
                IF EstLineRec2."Surcharge Type" = EstLineRec2."Surcharge Type"::Labor THEN BEGIN
                  EstLineRec2.Norm := EstLineRec2.Norm + EstLineRec1.Hours;
                  EstLineRec2."Norm (Sales)" := EstLineRec2."Norm (Sales)" + EstLineRec1."Hours (Sales)";
                END ELSE BEGIN
                  //db.sn, 30-01-15: C020403
                  IF ((EstLineRec1."Cost Type (Price)" = EstLineRec1."Cost Type (Price)"::Material) OR
                      (EstLineRec1.Recipe <> '')) AND
                     (EstLineRec2."Surcharge Type" = EstLineRec2."Surcharge Type"::Material) THEN BEGIN
                    EstLineRec2."Gross Price" := EstLineRec2."Gross Price" + EstLineRec1."Material Gross Amount";
                    EstLineRec2."Nett Cost Price" := EstLineRec2."Nett Cost Price" + EstLineRec1."Material Cost Amount";
                    EstLineRec2."Nett Sales Price" := EstLineRec2."Nett Sales Price" + EstLineRec1."Material Sales Amount";
                  END;
                  IF ((EstLineRec1."Cost Type (Price)" = EstLineRec1."Cost Type (Price)"::Subcontracting) OR
                      (EstLineRec1.Recipe <> '')) AND
                     (EstLineRec2."Surcharge Type" = EstLineRec2."Surcharge Type"::Subcontracting) THEN BEGIN
                    EstLineRec2."Gross Price" := EstLineRec2."Gross Price" + EstLineRec1."Subcontracting Gross Amount";
                    EstLineRec2."Nett Cost Price" := EstLineRec2."Nett Cost Price" + EstLineRec1."Subcontracting Cost Amount";
                    EstLineRec2."Nett Sales Price" := EstLineRec2."Nett Sales Price" + EstLineRec1."Subcontracting Sales Amount";
                  END;
                  IF ((EstLineRec1."Cost Type (Price)" = EstLineRec1."Cost Type (Price)"::Plant) OR
                      (EstLineRec1.Recipe <> '')) AND
                     (EstLineRec2."Surcharge Type" = EstLineRec2."Surcharge Type"::Plant) THEN BEGIN
                    EstLineRec2."Gross Price" := EstLineRec2."Gross Price" + EstLineRec1."Plant Gross Amount";
                    EstLineRec2."Nett Cost Price" := EstLineRec2."Nett Cost Price" + EstLineRec1."Plant Cost Amount";
                    EstLineRec2."Nett Sales Price" := EstLineRec2."Nett Sales Price" + EstLineRec1."Plant Sales Amount";
                  END;
                  IF ((EstLineRec1."Cost Type (Price)" = EstLineRec1."Cost Type (Price)"::Sundry) OR
                      (EstLineRec1.Recipe <> '')) AND
                     (EstLineRec2."Surcharge Type" = EstLineRec2."Surcharge Type"::Sundry) THEN BEGIN
                    EstLineRec2."Gross Price" := EstLineRec2."Gross Price" + EstLineRec1."Sundry Gross Amount";
                    EstLineRec2."Nett Cost Price" := EstLineRec2."Nett Cost Price" + EstLineRec1."Sundry Cost Amount";
                    EstLineRec2."Nett Sales Price" := EstLineRec2."Nett Sales Price" + EstLineRec1."Sundry Sales Amount";
                  END;
                  //EstLineRec2.VALIDATE("Gross Price"); //mg.o, 30-04-2015: C023134
                  //db.en, 30-01-15: C020403
                END;
              END;
            UNTIL ChrgRec2.NEXT = 0;
          END;
          //update surcharge line with totals by Cost Type of basic lines
          IF EstLineRec2."Gross Price" <> 0 THEN BEGIN
            EstLineRec2."Purchase Discount %" :=
              100 * (EstLineRec2."Gross Price" - EstLineRec2."Nett Cost Price") / EstLineRec2."Gross Price";
            EstLineRec2."Sales Discount %" :=
              100 * (EstLineRec2."Gross Price" - EstLineRec2."Nett Sales Price") / EstLineRec2."Gross Price";
          END;
          EstLineRec2.VALIDATE("Gross Price"); //mg, 30-04-2015: C023134
          IF EstLineRec2."Surcharge Type" = EstLineRec2."Surcharge Type"::Labor THEN BEGIN
            RateRec.GET(EstLineRec2."Estimate No.",EstLineRec2."Rate Code") ;
            IF RateRec."Rate Type" = RateRec."Rate Type"::Minuts THEN BEGIN
              EstLineRec2.Norm := EstLineRec2.Norm * 60;
              EstLineRec2."Norm (Sales)" := EstLineRec2."Norm (Sales)" * 60;
              IF RateRec."Team Size" <> 0 THEN BEGIN
                EstLineRec2.Norm := EstLineRec2.Norm / RateRec."Team Size";
                EstLineRec2."Norm (Sales)" := EstLineRec2."Norm (Sales)" / RateRec."Team Size";
              END;
            END;
            IF EstLineRec2.Norm <> 0 THEN
              EstLineRec2."Production Rate" := 1 / EstLineRec2.Norm
            ELSE
              EstLineRec2."Production Rate" := 0;
            IF EstLineRec2."Norm (Sales)" <> 0 THEN
              EstLineRec2."Production Rate (Sales)" := 1 / EstLineRec2."Norm (Sales)"
            ELSE
              EstLineRec2."Production Rate (Sales)" := 0;
          END;
          EstLineRec2.CalculateTotals;
          IF FORMAT(EstimateLineOriginal) <> FORMAT(EstLineRec2) THEN //call 30195
            EstLineRec2.MODIFY;
        UNTIL ChrgRec1.NEXT = 0;
      END;
    END;

    PROCEDURE CopyPartLines@1100528900(PartRec@1210190002 : Record 11072073;VAR PartLineRec@1100485004 : Record 11072076;SelectLine@1100485003 : Boolean;OrigPart@1100528902 : Code[20];DestPart@1100528903 : Code[20]);
    VAR
      ChrgRec1@1100485001 : Record 11229771;
      ChrgRec2@1100485000 : Record 11229771;
      PartLine2@1210190000 : Record 11072076;
      LastLino@1210190001 : Integer;
      BudgetRateRec@1100528900 : Record 11012000;
      RefDate@1100528901 : Date;
      BaseRecipe@1100409000 : Record 11020581;
    BEGIN
      IF OrigPart = '' THEN OrigPart := PartRec.Part;  //DP00686
      IF DestPart = '' THEN DestPart := OrigPart;      //DP00686

      GetEstimate(PartRec."Estimate No.", FALSE); //Call 23762
      IF SelectLine = FALSE THEN  //db, 28-08-07
        IF EstRec."Copy Part Lines" = FALSE THEN EXIT;
      //Call 23762.sn
      //Call 31832.sn
      PartLine2.COPY(PartLineRec);
      PartLine2.SETRANGE("Part Group", PartRec."Part Group");
      PartLine2.SETRANGE(Part, OrigPart);  //DP00686
      PartLine2.SETFILTER(Recipe, '<>%1', '');
      IF PartLine2.FINDSET(FALSE, FALSE) THEN
        REPEAT
          IF NOT TmpRecipe.GET(PartLine2."Recipe Group", PartLine2.Recipe) THEN BEGIN
            TmpRecipe."Recipe Group" := PartLine2."Recipe Group";
            TmpRecipe."No." := PartLine2.Recipe;
            TmpRecipe.INSERT;

            StdRcpLineRec.RESET;
            StdRcpLineRec.SETRANGE("Recipe Group", PartLine2."Recipe Group");
            StdRcpLineRec.SETRANGE(Recipe, PartLine2.Recipe);
            IF StdRcpLineRec.FINDSET(FALSE, FALSE) THEN
              REPEAT
                TmpStdRcpLine := StdRcpLineRec;
                TmpStdRcpLine.INSERT;
              UNTIL StdRcpLineRec.NEXT = 0;

            ChrgRec1.SETRANGE("Estimate No.", '');
            ChrgRec1.SETRANGE("Sub-Estimate No.", '');
            ChrgRec1.SETRANGE("Part Group",'');
            ChrgRec1.SETRANGE(Part,'');
            ChrgRec1.SETRANGE("Recipe Group", PartLine2."Recipe Group");
            ChrgRec1.SETRANGE(Recipe, PartLine2.Recipe);
            IF ChrgRec1.FINDSET(FALSE, FALSE) THEN
              REPEAT
                TmpStdChrgRec := ChrgRec1;
                TmpStdChrgRec.INSERT;
              UNTIL ChrgRec1.NEXT = 0;
          END;
        UNTIL PartLine2.NEXT = 0;
      //Call 31832.en

      EstLineRec.LOCKTABLE(TRUE);
      //Call 23762.en

      LastLino := 0;
      EstLineRec.SETRANGE("Estimate No.", PartRec."Estimate No.");
      EstLineRec.SETRANGE("Sub-Estimate No.", PartRec."Sub-Estimate No.");
      EstLineRec.SETRANGE("Part Group", PartRec."Part Group");
      EstLineRec.SETRANGE(Part, DestPart);   //DP00686
      IF EstLineRec.FINDLAST THEN
        LastLino := EstLineRec."Line No.";

      IF SelectLine THEN  //db, 14-06-07 (call 8434)
        PartLineRec.MARKEDONLY(TRUE);
      PartLineRec.SETRANGE("Part Group", PartRec."Part Group");
      PartLineRec.SETRANGE(Part, OrigPart);  //DP00686
      IF PartLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          EstLineRec.SetSkipBlockedItem(TRUE); //db, 11-11-13: DP00260 (C002164)
          EstLineRec.INIT;
          EstLineRec."Estimate No." := PartRec."Estimate No.";
          EstLineRec."Sub-Estimate No." := PartRec."Sub-Estimate No.";
          EstLineRec."Part Group" := PartRec."Part Group";
          EstLineRec.Part := DestPart;  //DP00686
          EstLineRec.InitRecord;
          EstLineRec."Line No." := PartLineRec."Line No." + LastLino;  //db, 14-06-07
          IF PartLineRec.Recipe <> '' THEN BEGIN
            EstLineRec.VALIDATE("Recipe Group", PartLineRec."Recipe Group");
            EstLineRec.VALIDATE(Recipe, PartLineRec.Recipe);
          END ELSE BEGIN
            EstLineRec.VALIDATE("Item No.", PartLineRec."Item No.");
            //db.sn, 27-04-10: M18992
            IF PartLineRec."Trade Item" <> '' THEN BEGIN
              EstLineRec."Vendor (Trade Item)" := PartLineRec."Vendor (Trade Item)";
              EstLineRec.VALIDATE("Trade Item", PartLineRec."Trade Item");
            END ELSE BEGIN
              IF PartLineRec."Basic Item" <> '' THEN BEGIN
                EstLineRec.Manufacturer := PartLineRec.Manufacturer;
                EstLineRec.VALIDATE("Basic Item", PartLineRec."Basic Item");
              END;
            END;
            //db.sn, 27-04-10: M18992
            IF PartLineRec."Rate Code" <> '' THEN
              EstLineRec.VALIDATE("Rate Code", PartLineRec."Rate Code")
            ELSE
              EstLineRec.VALIDATE("Rate Code", EstRec."Rate Code");
            IF PartLineRec."Sub Operation Code" <> '' THEN
              EstLineRec."Sub Operation Code" := PartLineRec."Sub Operation Code";
            EstLineRec.VALIDATE("Sub Operation Code");
            EstLineRec.VALIDATE("Cost Type (Price)", PartLineRec."Cost Type (Price)");  //DP00381
            EstLineRec.VALIDATE("Cost Object Labor", PartLineRec."Cost Object Labor");
            EstLineRec.VALIDATE("Cost Object Price", PartLineRec."Cost Object Price");
            EstLineRec."Cost Component" := PartLineRec."Cost Component";

            IF (PartLineRec.Norm <> 0) AND (PartLineRec."Sub Operation Code" = '') THEN BEGIN //db, 30-01-07
              EstLineRec.Norm := PartLineRec.Norm;
              IF EstLineRec.Norm <> 0 THEN
                EstLineRec."Production Rate" := 1 / EstLineRec.Norm
              ELSE
                EstLineRec."Production Rate" := 0;
              //DP00381.sn
              EstLineRec."Norm (Sales)" := PartLineRec.Norm;
              IF EstLineRec."Norm (Sales)" <> 0 THEN
                EstLineRec."Production Rate (Sales)" := 1 / EstLineRec."Norm (Sales)"
              ELSE
                EstLineRec."Production Rate (Sales)" := 0;
              //DP00381.en
            END;
            //DP00381.sn
            RefDate := EstRec."Reference Date (Rate)";
            IF RefDate = 0D THEN RefDate := TODAY;
            BudgetRateRec.SETRANGE(Code,PartLineRec."Rate Code");
            BudgetRateRec.SETRANGE("Starting Date",0D,RefDate);
            BudgetRateRec.SETFILTER("Ending Date",'%1|>=%2',0D, RefDate);
            IF BudgetRateRec.FINDLAST THEN BEGIN
              xRec."Rate Type" := BudgetRateRec."Rate Type";
              xRec."Team Size" := BudgetRateRec."Team Size";
              IF (EstLineRec."Rate Type" <> BudgetRateRec."Rate Type") OR
                 (EstLineRec."Team Size" <> BudgetRateRec."Team Size") THEN
                EstLineRec.ConvertNorm(
                  (EstLineRec."Rate Type" <> BudgetRateRec."Rate Type"),
                  (EstLineRec."Team Size" <> BudgetRateRec."Team Size"));
            END;
            //DP00381.en
            //db.sn, 03-02-15: C020820
            IF PartLineRec."Gross Price" <> 0 THEN
              EstLineRec."Gross Price" := PartLineRec."Gross Price";
            IF PartLineRec."Purchase Discount %" <> 0 THEN
              EstLineRec."Purchase Discount %" := PartLineRec."Purchase Discount %";
            IF PartLineRec."Nett Cost Price" <> 0 THEN
              EstLineRec."Nett Cost Price" := PartLineRec."Nett Cost Price";
            IF PartLineRec."Sales Discount %" <> 0 THEN
              EstLineRec."Sales Discount %" := PartLineRec."Sales Discount %";
            IF PartLineRec."Nett Sales Price" <> 0 THEN
              EstLineRec."Nett Sales Price" := PartLineRec."Nett Sales Price";
            //db.en, 03-02-15: C020820
            EstLineRec.VALIDATE("Gross Price");
            EstLineRec.UpdateSalesPriceFromCostPrice;  //db, 22-01-15: C020517
            IF PartLineRec."Nett Sales Price" <> 0 THEN
              EstLineRec.VALIDATE("Nett Sales Price", PartLineRec."Nett Sales Price");  // C028612
            EstLineRec."Time Quantity" := PartLineRec."Time Quantity";
            EstLineRec."Unit of Time" := PartLineRec."Unit of Time";
          END;

          xRec := EstLineRec;
          EstLineRec.VALIDATE("Unit of Measure", PartLineRec."Unit of Measure");
          IF xRec."Unit of Measure" <> PartLineRec."Unit of Measure" THEN
            CheckItemUnitConversion(EstLineRec, xRec);

          //IF (PartLineRec.Quantity <> Quantity) OR (Quantity = 0) THEN //Call 23762; db, 01-12-11: M31247
          IF CheckRecipeCondition(EstLineRec) THEN
            EstLineRec.VALIDATE(Quantity, PartLineRec.Quantity);

          EstLineRec.Description := PartLineRec.Description;
          EstLineRec.VALIDATE("Internal Text", PartLineRec."Internal Text");
          EstLineRec.VALIDATE("External Text", PartLineRec."External Text");
          EstLineRec."Line Status" := PartLineRec."Line Status";
          EstLineRec.Vendor := PartLineRec.Vendor;
          EstLineRec.Subcontractor := PartLineRec.Subcontractor;
          EstLineRec.Element := PartLineRec.Element;
          EstLineRec."Project Planning Activity Code" := PartLineRec."Project Plann. Base Act. Code";
          EstLineRec."Surcharge Type" := PartLineRec."Surcharge Type";
          EstLineRec."Surcharge %" := PartLineRec."Surcharge %";
          EstLineRec.Discipline := PartLineRec.Discipline;
          EstLineRec."Trade Speciality" := PartLineRec."Trade Speciality";
          EstLineRec."Trade Expertise" := PartLineRec."Trade Expertise";
          EstLineRec."Ignore Part Quantity" := PartLineRec."Ignore Part Quantity";  //DP00686
          IF (PartLineRec.Recipe <> '') AND (PartLineRec."Quantity Sheet Feature" = '') THEN BEGIN
            BaseRecipe.GET(PartLineRec."Recipe Group", PartLineRec.Recipe);  //db, 09-02-15
            EstLineRec.VALIDATE("Quantity Sheet Feature", BaseRecipe."Quantity Sheet Feature");
          END ELSE BEGIN
            EstLineRec.VALIDATE("Quantity Sheet Feature", PartLineRec."Quantity Sheet Feature");  //DP00686
          END;
          EstLineRec.INSERT(TRUE);

          IF EstLineRec."Surcharge Type" = EstLineRec."Surcharge Type"::" " THEN BEGIN
            IF PartLineRec.Quantity <> 0 THEN  //db, 11-10-07 (call 10459)
              CopyModelQuantity(EstLineRec, PartLineRec.Quantity);
          END ELSE BEGIN
            //search original surcharge line:
            //Call 23762 ChrgRec1.SETCURRENTKEY("Part Group", Part);  //db, 31-05-10: M19367
            ChrgRec1.SETRANGE("Estimate No.", '');
            ChrgRec1.SETRANGE("Sub-Estimate No.", '');
            ChrgRec1.SETRANGE("Part Group", PartLineRec."Part Group");
            ChrgRec1.SETRANGE(Part, PartLineRec.Part);
            ChrgRec1.SETRANGE("Recipe Line", 0);
            ChrgRec1.SETRANGE("Surcharge Line", PartLineRec."Line No.");
            IF ChrgRec1.FINDSET(FALSE, FALSE) THEN BEGIN
              REPEAT
                ChrgRec2.INIT;
                ChrgRec2."Estimate No." := EstLineRec."Estimate No.";
                ChrgRec2."Sub-Estimate No." := EstLineRec."Sub-Estimate No.";
                ChrgRec2."Part Group" := EstLineRec."Part Group";
                ChrgRec2.Part := EstLineRec.Part;
                //db.sn, 14-06-07
                ChrgRec2."Basic Line" := ChrgRec1."Basic Line" + LastLino;
                ChrgRec2."Surcharge Line" := ChrgRec1."Surcharge Line" + LastLino;
                IF SelectLine THEN BEGIN
                  ChrgRec1.CALCFIELDS("Part Line Description");
                  ChrgRec2.CALCFIELDS("Estimate Line Description");
                  IF ChrgRec1."Part Line Description" = ChrgRec2."Estimate Line Description" THEN
                    ChrgRec2.INSERT;
                END ELSE BEGIN
                  ChrgRec2.INSERT;
                END;
                //db.en, 14-06-07
              UNTIL ChrgRec1.NEXT = 0;
              EstLineRec.CheckEstimateCharge;
              EstLineRec.GET(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
                EstLineRec."Part Group", EstLineRec.Part, EstLineRec."Line No.");
            END;
          END;

          //CopyPartLineText(EstLineRec, PartLineRec);  //17-02-15: assign after validate Item and Recipe
          CopyPartQuantityRelations(
            EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
            EstLineRec."Part Group", EstLineRec.Part,
            PartLineRec."Line No.", EstLineRec."Line No.");  //DP00686

          EstLineRec.Code := CopyPartCodes(
            EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
            EstLineRec."Part Group", EstLineRec.Part, '', '',
            PartLineRec."Line No.", EstLineRec."Line No.");
          IF (PartLineRec."Adjustment Factor Hours" <> 0) AND (PartLineRec."Adjustment Factor Hours" <> 1) THEN
            EstLineRec.VALIDATE("Adjustment Factor Hours", PartLineRec."Adjustment Factor Hours");
          IF (PartLineRec."Adjustment Factor Price" <> 0) AND (PartLineRec."Adjustment Factor Price" <> 1) THEN
            EstLineRec.VALIDATE("Adjustment Factor Price", PartLineRec."Adjustment Factor Price");
          IF (PartLineRec."Adj. Factor Hours (Sales)" <> 0) AND (PartLineRec."Adj. Factor Hours (Sales)" <> 1) THEN
            EstLineRec.VALIDATE("Adj. Factor Hours (Sales)", PartLineRec."Adj. Factor Hours (Sales)");  //DP00555
          EstLineRec.MODIFY(TRUE);
          EstLineRec.SetSkipBlockedItem(FALSE); //db, 11-11-13: DP00260 (C002164)

          IF PartLineRec.Recipe <> '' THEN BEGIN
            Rec.COPY(EstLineRec);
            UseTempTables := TRUE; //Call 23762
            CopyRecipe;
            UseTempTables := FALSE; //Call 23762
            Rec.MODIFY;
          END;
          CopyPartLineText(EstLineRec, PartLineRec);  //17-02-15: DP00686
        UNTIL PartLineRec.NEXT = 0;
      END;

      CheckUpdateQuantityFromRelation(
        EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
        EstLineRec."Part Group", EstLineRec.Part);   //DP00686

      COMMIT; //Commit each part To Keep transaction Duration beneath 10 Seconds call 23762
    END;

    PROCEDURE CopyPartCodes@1210190014(lvEst@1210190003 : Code[20];lvSubEst@1210190004 : Code[20];lvPartGrp@1210190000 : Code[20];lvPart@1210190001 : Code[20];lvRcpGrp@1210190008 : Code[20];lvRcp@1210190007 : Code[20];lvOriginLine@1210190002 : Integer;lvEstLine@1210190006 : Integer) CurrCode : Code[20];
    VAR
      EstCodeRec2@1210190005 : Record 11229772;
    BEGIN
      //Call 23762.sn
      IF (NOT EstimateCodesPresent) AND EstimateCodesPresentChecked THEN
        EXIT;
      //Call 23762.en

      GetEstimate(lvEst, TRUE); //Call 23762

      EstCodeRec.RESET;
      EstCodeRec.SETFILTER("Estimate No.", '%1', '');
      EstCodeRec.SETFILTER("Sub-Estimate No.", '%1', '');
      //Call 23762.sn
      IF NOT EstimateCodesPresentChecked THEN BEGIN
        EstimateCodesPresent := NOT EstCodeRec.ISEMPTY;
        EstimateCodesPresentChecked := TRUE;
      END;
      //Call 23762.en
      IF lvRcp = '' THEN BEGIN
        EstCodeRec.SETCURRENTKEY("Part Group", Part);  //db, 31-05-10: M19367
        EstCodeRec.SETRANGE("Part Group", lvPartGrp);
        EstCodeRec.SETRANGE(Part, lvPart);
        EstCodeRec.SETRANGE("Estimate Line", lvOriginLine);
      END ELSE BEGIN
        EstCodeRec.SETCURRENTKEY("Recipe Group", Recipe);  //db, 31-05-10: M19367
        EstCodeRec.SETFILTER("Part Group", '%1', '');
        EstCodeRec.SETFILTER(Part, '%1', '');
        EstCodeRec.SETRANGE("Estimate Line", 0);
        EstCodeRec.SETRANGE("Recipe Group", lvRcpGrp);
        EstCodeRec.SETRANGE(Recipe, lvRcp);
        EstCodeRec.SETRANGE("Recipe Line", lvOriginLine);
      END;
      IF EstCodeRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          IF EstCodeRec."Coding System" = EstRec."Coding System" THEN
            CurrCode := EstCodeRec.Code;
          EstCodeRec2 := EstCodeRec;
          EstCodeRec2."Estimate No." := lvEst;
          EstCodeRec2."Sub-Estimate No." := lvSubEst;
          IF lvRcp = '' THEN BEGIN
            EstCodeRec2."Estimate Line" := lvEstLine;
          END ELSE BEGIN
            EstCodeRec2."Part Group" := lvPartGrp;
            EstCodeRec2.Part := lvPart;
            EstCodeRec2."Estimate Line" := lvEstLine;
          END;
          EstCodeRec2.INSERT;
        UNTIL EstCodeRec.NEXT = 0;
      END;
    END;

    PROCEDURE CopyModelQuantity@1100485003(VAR EstLineRec@1100485000 : Record 11072072;lvQuan@1100485001 : Decimal);
    BEGIN
      WITH EstLineRec DO BEGIN
        EstModelRec.SETRANGE("Estimate No.", "Estimate No.");
        IF EstModelRec.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            //fill quantity per house type
            CLEAR(EstModelLineRec);
            EstModelLineRec."Estimate No." := "Estimate No.";
            EstModelLineRec."Sub-Estimate No." := "Sub-Estimate No.";
            EstModelLineRec."Part Group" := "Part Group";
            EstModelLineRec.Part := Part;
            EstModelLineRec."Estimate Line" := "Line No.";
            EstModelLineRec.Model := EstModelRec.Model;
            EstModelLineRec.Quantity := lvQuan;
            EstModelLineRec.INSERT;
          UNTIL EstModelRec.NEXT = 0;
          //rewrite quantity of estimate line and after that determine surcharge
          VALIDATE(Quantity, EstModelLineRec.DetermineTotalQuan);
          MODIFY(TRUE);
        END;
      END;
    END;

    PROCEDURE CopyRecipe@2();
    VAR
      TmpChrgRec@1100525001 : TEMPORARY Record 11229771;
      ChrgPresent@1100525000 : Boolean;
      ChildRcp@1100525002 : Boolean;
    BEGIN
      GetEstimate("Estimate No.", FALSE); //Call 23762
      RecipeRec.GET("Recipe Group",Recipe);
      //db.sn, 12-02-15
      IF UseTempTables = FALSE THEN BEGIN  //do not overwrite default from part line
        RecipeRec.TESTFIELD(Blocked, FALSE);
        Volume := RecipeRec.Volume;
        Description := RecipeRec.Description;
        "Unit of Measure" := RecipeRec."Unit of Measure";
        Condition := RecipeRec.Condition;
        VALIDATE("Quantity Sheet Feature", RecipeRec."Quantity Sheet Feature");  //DP00686
      END;
      //db.en, 12-02-15

      CopyRecipeQuantitySheet;  //DP00686
      CopyRecipeText;

      //Call 23762.sn
      IF UseTempTables THEN BEGIN
        TmpStdRcpLine.SETRANGE("Recipe Group","Recipe Group");
        TmpStdRcpLine.SETRANGE(Recipe,Recipe);
        IF TmpStdRcpLine.FINDSET THEN
          REPEAT
            StdRcpLineRec := TmpStdRcpLine;
            CopyRecipeLine(TmpChrgRec, ChrgPresent, ChildRcp);
          UNTIL TmpStdRcpLine.NEXT = 0;
      END ELSE BEGIN
      //Call 23762.en
        StdRcpLineRec.SETRANGE("Recipe Group","Recipe Group");
        StdRcpLineRec.SETRANGE(Recipe,Recipe);
        IF StdRcpLineRec.FINDSET(FALSE, FALSE) THEN
          REPEAT
            CopyRecipeLine(TmpChrgRec, ChrgPresent, ChildRcp); //Call 23762
          UNTIL StdRcpLineRec.NEXT = 0;
      END;

      IF CurrFieldNo <> FIELDNO(Recipe) THEN  //db, 06-02-15: function updates all lines in part related to sheet
        CheckUpdateQuantityFromRelation("Estimate No.", "Sub-Estimate No.", "Part Group", Part);   //DP00686

      IF ChrgPresent THEN
        EstRcpLineRec.CheckRecipeCharge2(TmpChrgRec);  //db, 16-06-10: M19367

      IF ChildRcp THEN
        ExplodeRecipe;  //db, 08-10-10: M22182

      CalculateTotals;  //DP00381
    END;

    PROCEDURE CopyRecipeLine@1210190019(VAR TmpChrgRec@1210190003 : Record 11229771;VAR ChrgPresent@1210190000 : Boolean;VAR ChildRcp@1210190001 : Boolean);
    VAR
      ChrgRec1@1210190002 : Record 11229771;
      RecipeLine@1100525003 : Record 11072075;
      Estimate@1100528600 : Record 11012151;
    BEGIN
      //Call 23762
      EstRcpLineRec.SetSkipCalculateTotals(TRUE);
      CopyLine;
      EstRcpLineRec.SetSkipBlockedItem(TRUE);  //db, 11-11-13: DP00260 (C002164)
      EstRcpLineRec."Line No." := StdRcpLineRec."Line No.";
      EstRcpLineRec."Purchase Route Reference" := '';
      EstRcpLineRec."Quantity (Sales)":= EstRcpLineRec.Quantity;  //DP00381
      EstRcpLineRec.InitSurcharge(FALSE);  //DP00381
      //DP00594.sn
      GetEstimate("Estimate No.", FALSE);
      IF EstRec."Apply Surcharge Recipe" THEN BEGIN
        IF StdRcpLineRec."Surcharge % Labor" <> 0 THEN
          EstRcpLineRec."Surcharge % Labor" := StdRcpLineRec."Surcharge % Labor";
        IF StdRcpLineRec."Surcharge % Price" <> 0 THEN
          EstRcpLineRec."Surcharge % Price" := StdRcpLineRec."Surcharge % Price";
      END;
      //DP00594.sn
      IF EstRcpLineRec."Trade Item" <> '' THEN BEGIN
        IF EstRcpLineRec."Price Agreement" = FALSE THEN  //db, 17-06-08
          EstRcpLineRec."Trade Item" := '';
        EstRcpLineRec.VALIDATE("Trade Item", StdRcpLineRec."Trade Item");
      END ELSE BEGIN
        IF EstRcpLineRec."Basic Item" <> '' THEN BEGIN
          IF EstRcpLineRec."Price Agreement" = FALSE THEN  //db, 17-06-08
            EstRcpLineRec."Basic Item" := '';
          EstRcpLineRec.VALIDATE("Basic Item", StdRcpLineRec."Basic Item");
        END ELSE BEGIN
          IF EstRcpLineRec."Item No." <> '' THEN BEGIN
            IF EstRcpLineRec."Price Agreement" = FALSE THEN  //db, 17-06-08
              EstRcpLineRec."Item No." := '';
            EstRcpLineRec.VALIDATE("Item No.", StdRcpLineRec."Item No.");
          END;
        END;
      END;
      IF EstRcpLineRec."Price Agreement (Sales)" = FALSE THEN BEGIN
        IF StdRcpLineRec."Price Agreement (Sales)" = TRUE THEN BEGIN  //db, 05-05-15: C022775
          EstRcpLineRec."Price Agreement (Sales)" := TRUE;  //reset by ValidateItem if price agreement (cost) = false
          EstRcpLineRec."Sales Discount %" := StdRcpLineRec."Sales Discount %";
          EstRcpLineRec."Nett Sales Price" := StdRcpLineRec."Nett Sales Price";
        END ELSE BEGIN
          EstRcpLineRec.CalcItemSalesPriceAndDiscount(EstRec);  //db, 19-12-14: C018758
        END;
      END;

      IF EstRcpLineRec."Plant Type" <> '' THEN BEGIN  //DP01047
        EstRcpLineRec."Nett Cost Price" := 0;
        EstRcpLineRec."Nett Sales Price" := 0;
        EstRcpLineRec."Plant Type" := '';  //due to check on xRec
        EstRcpLineRec.VALIDATE("Plant Type", StdRcpLineRec."Plant Type");
      END;

      //mg.sn, 08-02-11: M25396
      RecipeLine := EstRcpLineRec;
      EstRcpLineRec.VALIDATE("Unit of Measure", StdRcpLineRec."Unit of Measure");
      IF RecipeLine."Unit of Measure" <> EstRcpLineRec."Unit of Measure" THEN BEGIN
        EstRcpLineRec.CheckItemUnitConversion(EstRcpLineRec, RecipeLine);
        EstRcpLineRec.VALIDATE(Quantity, StdRcpLineRec.Quantity);
      END;
      //mg.en, 08-02-11: M25396

      IF EstRcpLineRec."Cost Type (Hours)" = EstRcpLineRec."Cost Type (Hours)"::Labor THEN BEGIN  //DP01047
        IF EstRcpLineRec."Rate Code" = '' THEN
          EstRcpLineRec."Rate Code" := EstRec."Rate Code";
        EstRcpLineRec.VALIDATE("Rate Code");
      END;
      IF StdRcpLineRec."Sub Operation Code" <> '' THEN BEGIN
        EstRcpLineRec."Sub Operation Code" := StdRcpLineRec."Sub Operation Code";  //db, 21-11-11: M30942
      END ELSE BEGIN
        //DP00381.sn
        EstRcpLineRec."Norm (Sales)" := EstRcpLineRec.Norm;
        IF EstRcpLineRec."Norm (Sales)" <> 0 THEN
          EstRcpLineRec."Production Rate (Sales)" := 1 / EstRcpLineRec."Norm (Sales)"
        ELSE
          EstRcpLineRec."Production Rate (Sales)" := 0;
        //DP00381.en
      END;
      EstRcpLineRec.VALIDATE("Sub Operation Code");
      EstRcpLineRec."Cost Object Price" := StdRcpLineRec."Cost Object Price";  //db, 17-06-08
      EstRcpLineRec.Description := StdRcpLineRec.Description;  //db, 17-06-08
      EstRcpLineRec."Cost Component" := StdRcpLineRec."Cost Component";  //db, 03-11-11: M30335
      EstRcpLineRec.InitAdjustmentFactor;
      IF EstRcpLineRec."Item No." + EstRcpLineRec."Basic Item" + EstRcpLineRec."Trade Item" = '' THEN BEGIN
        IF NOT Estimate.GET(EstRcpLineRec."Estimate No.") THEN
          Estimate.INIT;
        IF StdRcpLineRec."Purchase Discount %" <> 0 THEN
          EstRcpLineRec.VALIDATE("Purchase Discount %", StdRcpLineRec."Purchase Discount %");
        IF StdRcpLineRec."Sales Discount %" <> 0 THEN
          EstRcpLineRec.VALIDATE("Sales Discount %", StdRcpLineRec."Sales Discount %");
      END;

      EstRcpLineRec.SetSkipCalculateTotals(FALSE);
      EstRcpLineRec.CalculateTotals;
      EstRcpLineRec.Code := CopyPartCodes(
        EstRcpLineRec."Estimate No.", EstRcpLineRec."Sub-Estimate No.",
        EstRcpLineRec."Part Group", EstRcpLineRec.Part,
        EstRcpLineRec."Recipe Group", EstRcpLineRec.Recipe,
        EstRcpLineRec."Line No.", EstRcpLineRec."Estimate Line");
      // 34595.sn
      InitRecord;
      EstRcpLineRec."Project No." := "Project No.";
      IF StdRcpLineRec.Element <> '' THEN  //db, 21-09-12: C002436
        EstRcpLineRec.Element := StdRcpLineRec.Element
      ELSE
        EstRcpLineRec.Element := Element;
      // 34595.en
      IF "Project No." <> '' THEN
        EstRcpLineRec."Extension Contract" := "Extension Contract";  //DP00260
      IF StdRcpLineRec."Project Planning Activity Code" <> '' THEN
        EstRcpLineRec."Project Planning Activity Code" := StdRcpLineRec."Project Planning Activity Code"
      ELSE
        EstRcpLineRec."Project Planning Activity Code" := "Project Planning Activity Code";
      EstRcpLineRec.VALIDATE("Quantity Sheet Feature", StdRcpLineRec."Quantity Sheet Feature");  //DP00686

      EstRcpLineRec.INSERT; //Call 23762
      EstRcpLineRec.CopyRecipeLineText;  //DP00686

      EstLineRec.SetSkipBlockedItem(FALSE);  //db, 11-11-13: DP00260 (C002164)

      IF EstRcpLineRec."Recipe (Child)" <> '' THEN
        ChildRcp := TRUE;  //db, 08-10-10: M22182

      //search original surcharge line:
      IF StdRcpLineRec."Surcharge Type" <> StdRcpLineRec."Surcharge Type"::" " THEN BEGIN  //db, 08-06-10: M19367
        //Call 23762.sn
        IF UseTempTables THEN BEGIN
          TmpStdChrgRec.RESET;
          TmpStdChrgRec.SETRANGE("Recipe Group", StdRcpLineRec."Recipe Group");
          TmpStdChrgRec.SETRANGE(Recipe, StdRcpLineRec.Recipe);
          TmpStdChrgRec.SETRANGE("Surcharge Line", StdRcpLineRec."Line No.");
          IF TmpStdChrgRec.FINDSET THEN
            REPEAT
              CopyChrgLine(TmpStdChrgRec, TmpChrgRec, ChrgPresent);
            UNTIL TmpStdChrgRec.NEXT = 0;
        END ELSE BEGIN
        //Call 23762.en
          //Call 23762 ChrgRec1.SETCURRENTKEY("Recipe Group", Recipe);  //db, 31-05-10: M19367
          ChrgRec1.SETFILTER("Estimate No.", '%1', '');
          ChrgRec1.SETFILTER("Sub-Estimate No.", '%1', '');
          ChrgRec1.SETFILTER("Part Group", '%1', '');
          ChrgRec1.SETFILTER(Part, '%1', '');
          ChrgRec1.SETRANGE("Recipe Line", 0);
          ChrgRec1.SETRANGE("Recipe Group", StdRcpLineRec."Recipe Group");
          ChrgRec1.SETRANGE(Recipe, StdRcpLineRec.Recipe);
          ChrgRec1.SETRANGE("Surcharge Line", StdRcpLineRec."Line No.");
          //db.sn, 19-01-16
          ChrgRec1.SETFILTER("Sales Document No.", '%1', '');
          ChrgRec1.SETRANGE("Sales Line No.", 0);
          //db.en, 19-01-16
          IF ChrgRec1.FINDSET(FALSE, FALSE) THEN
            REPEAT
              CopyChrgLine(ChrgRec1, TmpChrgRec, ChrgPresent);
            UNTIL ChrgRec1.NEXT = 0;
        END;
      END;

      CopyRecipeQuantityRelations(
        EstRcpLineRec."Estimate No.", EstRcpLineRec."Sub-Estimate No.",
        EstRcpLineRec."Part Group", EstRcpLineRec.Part, EstRcpLineRec."Estimate Line",
        EstRcpLineRec."Recipe Group", EstRcpLineRec.Recipe,
        StdRcpLineRec."Line No.", EstRcpLineRec."Line No.");  //DP00686
    END;

    PROCEDURE CopyChrgLine@1210190017(StdChrgRec@1210190003 : Record 11229771;VAR TmpChrgRec@1210190001 : Record 11229771;VAR ChrgPresent@1210190000 : Boolean);
    VAR
      ChrgRec2@1210190002 : Record 11229771;
    BEGIN
      ChrgRec2.INIT;
      ChrgRec2."Estimate No." := "Estimate No.";
      ChrgRec2."Sub-Estimate No." := "Sub-Estimate No.";
      ChrgRec2."Part Group" := "Part Group";
      ChrgRec2.Part := Part;
      ChrgRec2."Recipe Group" := "Recipe Group";
      ChrgRec2.Recipe := Recipe;
      ChrgRec2."Recipe Line" := "Line No.";
      ChrgRec2."Basic Line" := StdChrgRec."Basic Line";
      ChrgRec2."Surcharge Line" := StdChrgRec."Surcharge Line";
      ChrgRec2.INSERT;
      //db.sn, 16-06-10: M19367
      ChrgPresent := TRUE;
      TmpChrgRec := ChrgRec2;
      TmpChrgRec.INSERT;
      //db.en, 16-06-10: M19367
    END;

    PROCEDURE CopyLine@5();
    BEGIN
      //EstRcpLineRec.COPY(StdRcpLineRec);
      EstRcpLineRec.INIT;  //db, 11-09-15: C025547 (initialize missing Sales-data from Base Recipe)
      EstRcpLineRec.TRANSFERFIELDS(StdRcpLineRec);

      EstRcpLineRec."Estimate No." := "Estimate No.";
      EstRcpLineRec."Sub-Estimate No." := "Sub-Estimate No.";
      EstRcpLineRec."Part Group" := "Part Group";
      EstRcpLineRec.Part := Part;
      EstRcpLineRec."Estimate Line" := "Line No.";
      EstRcpLineRec."Recipe Group" := "Recipe Group";
      EstRcpLineRec.Recipe := Recipe;
    END;

    PROCEDURE CalculateNettPrice@13();
    BEGIN
      VALIDATE("Nett Cost Price","Gross Price" - (("Gross Price"/100) * "Purchase Discount %"));
      "Nett Cost Price (FCY)" := "Gross Price (FCY)" - (("Gross Price (FCY)"/100) * "Purchase Discount %");
      VALIDATE("Nett Sales Price","Gross Price" - (("Gross Price"/100) * "Sales Discount %"));
      "Nett Sales Price (FCY)" := "Gross Price (FCY)" - (("Gross Price (FCY)"/100) * "Sales Discount %");
    END;

    PROCEDURE CalculateDiscount@1210190012(SalesBln@1100528900 : Boolean);
    BEGIN
      IF "Gross Price" <> 0 THEN BEGIN
        IF  ("Item No." + "Basic Item" + "Trade Item" + "Plant Type" = '') AND ("Purchase Discount %" = 0) THEN BEGIN
          "Gross Price" := "Nett Cost Price";
          "Gross Price (FCY)" := "Nett Cost Price (FCY)";
          //db.sn, 11-11-13: DP00260 (C005807)
          IF NOT SalesBln THEN BEGIN
            VALIDATE("Nett Sales Price","Gross Price" - (("Gross Price"/100) * "Sales Discount %"));
            "Nett Sales Price (FCY)" := "Gross Price (FCY)" - (("Gross Price (FCY)"/100) * "Sales Discount %");
          END;
          //db.en, 11-11-13: DP00260 (C005807)
        END ELSE BEGIN
          IF SalesBln THEN
            "Sales Discount %" := (("Gross Price" - "Nett Sales Price") / "Gross Price") * 100
          ELSE
            "Purchase Discount %" := (("Gross Price" - "Nett Cost Price") / "Gross Price") * 100;
        END;
      END ELSE BEGIN
        //db.sn, 11-11-13: DP00260 (C005807)
        IF NOT SalesBln THEN BEGIN
          IF "Purchase Discount %" = 0 THEN BEGIN
            "Gross Price" := "Nett Cost Price";
            "Gross Price (FCY)" := "Nett Cost Price (FCY)";
            VALIDATE("Nett Sales Price","Gross Price" - (("Gross Price"/100) * "Sales Discount %"));
            "Nett Sales Price (FCY)" := "Gross Price (FCY)" - (("Gross Price (FCY)"/100) * "Sales Discount %");
          END;
        END;
        //db.en, 11-11-13: DP00260 (C005807)
        IF "Purchase Discount %" <> 100 THEN BEGIN
          IF NOT (("Item No." + "Basic Item" + "Trade Item" + "Plant Type" = '') AND ("Purchase Discount %" = 0)) THEN BEGIN
            "Gross Price" := "Nett Cost Price" / ((100 - "Purchase Discount %") / 100);
            "Gross Price (FCY)" := "Nett Cost Price (FCY)" / ((100 - "Purchase Discount %") / 100);
          END;
        END ELSE BEGIN
          "Gross Price" := "Nett Cost Price";
          "Gross Price (FCY)" := "Nett Cost Price (FCY)";
        END;
      END;
    END;

    PROCEDURE CalculateGrossPrice@1100485000();
    BEGIN
      IF "Purchase Discount %" <> 100 THEN BEGIN
        "Gross Price" := "Nett Cost Price" * 100 / (100 - "Purchase Discount %");
        "Gross Price (FCY)" := "Nett Cost Price (FCY)" * 100 / (100 - "Purchase Discount %");  //db, 20-08-15
      END;
    END;

    PROCEDURE CalculateQuantity@11012000();
    VAR
      lv1@1210190000 : Decimal;
      lv2@1210190001 : Decimal;
      lv3@1210190002 : Decimal;
    BEGIN
      lv1 := Length;
      lv2 := Width;
      lv3 := Height;

      IF Length = 0 THEN lv1 := 1;
      IF Width = 0 THEN lv2 := 1;
      IF Height = 0 THEN lv3 := 1;

      VALIDATE(Quantity, lv1 * lv2 * lv3);
    END;

    PROCEDURE DetermineNormGroup@10();
    BEGIN
      IF "Norm Group" = '' THEN BEGIN
        IF EstPartRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part) THEN
          IF EstPartRec."Norm Group" = '' THEN BEGIN
            IF GetSubEstimate("Estimate No.", "Sub-Estimate No.", TRUE) THEN
              IF SubEstRec."Norm Group" = '' THEN BEGIN
                GetEstimate("Estimate No.", TRUE);
                IF EstRec."No." = "Estimate No." THEN
                  "Norm Group" := EstRec."Norm Group";
              END ELSE
                "Norm Group" := SubEstRec."Norm Group";
          END ELSE
            "Norm Group" := EstPartRec."Norm Group";
      END;

      IF "Norm Group (Sales)" = '' THEN BEGIN  //DP00381
        IF EstPartRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part) THEN
          IF EstPartRec."Norm Group (Sales)" = '' THEN BEGIN
            IF GetSubEstimate("Estimate No.", "Sub-Estimate No.", TRUE) THEN
              IF SubEstRec."Norm Group (Sales)" = '' THEN BEGIN
                GetEstimate("Estimate No.", TRUE);
                IF EstRec."No." = "Estimate No." THEN
                  "Norm Group (Sales)" := EstRec."Norm Group (Sales)";
              END ELSE
                "Norm Group (Sales)" := SubEstRec."Norm Group (Sales)";
          END ELSE
            "Norm Group (Sales)" := EstPartRec."Norm Group (Sales)";
      END;
    END;

    PROCEDURE DetermineNorm@7();
    VAR
      NormRec@11012000 : Record 11012163;
    BEGIN
      IF NormRec.GET("Sub Operation Code","Norm Group") THEN BEGIN
        VALIDATE(Norm, NormRec.Norm);
        ConvertNorm(FALSE, FALSE);
      END ELSE BEGIN
        IF ("Norm Group" <> '') AND ("Sub Operation Code" <> '') THEN BEGIN
          VALIDATE(Norm, 0);
        END;
      END;
      CalculateTotals;
    END;

    PROCEDURE DetermineNormSales@1100528902();
    VAR
      NormRec@11012000 : Record 11012163;
    BEGIN
      //DP00381
      IF NormRec.GET("Sub Operation Code","Norm Group (Sales)") THEN BEGIN
        VALIDATE("Norm (Sales)", NormRec.Norm);
        ConvertNormSales(FALSE, FALSE);
      END ELSE BEGIN
        IF ("Norm Group (Sales)" <> '') AND ("Sub Operation Code" <> '') THEN BEGIN
          VALIDATE("Norm (Sales)", 0);
        END;
      END;
      CalculateTotals;
    END;

    PROCEDURE ConvertNorm@1210190002(SwitchType@1210190001 : Boolean;SwitchSize@1210190002 : Boolean);
    VAR
      NormGrpRec@1210190000 : Record 11012164;
    BEGIN
      IF (SwitchType = FALSE) AND (SwitchSize = FALSE) THEN BEGIN
        IF NormGrpRec.GET("Norm Group") THEN BEGIN
          IF NormGrpRec."Rate Type" <> "Rate Type" THEN
            SwitchType := TRUE;
          IF NormGrpRec."Team Size" <> "Team Size" THEN BEGIN
            SwitchSize := TRUE;
            xRec."Team Size" := NormGrpRec."Team Size";
          END;
        END;
      END;

      IF SwitchType = TRUE THEN
        IF "Rate Type" = "Rate Type"::Hours THEN
          Norm := Norm / 60
        ELSE
          Norm := Norm * 60;

      IF SwitchSize = TRUE THEN BEGIN
        IF "Team Size" <> 0 THEN
          Norm := Norm / "Team Size";
        IF xRec."Team Size" <> 0 THEN
          Norm := Norm * xRec."Team Size";
      END;

      IF SwitchType OR SwitchSize THEN
        IF Norm <> 0 THEN
          "Production Rate" := 1 / Norm
        ELSE
          "Production Rate" := 0;
    END;

    PROCEDURE ConvertNormSales@1100528903(SwitchType@1210190001 : Boolean;SwitchSize@1210190002 : Boolean);
    VAR
      NormGrpRec@1210190000 : Record 11012164;
    BEGIN
      //DP00381
      IF (SwitchType = FALSE) AND (SwitchSize = FALSE) THEN BEGIN
        IF NormGrpRec.GET("Norm Group (Sales)") THEN BEGIN
          IF NormGrpRec."Rate Type" <> "Rate Type" THEN
            SwitchType := TRUE;
          IF NormGrpRec."Team Size" <> "Team Size" THEN BEGIN
            SwitchSize := TRUE;
            xRec."Team Size" := NormGrpRec."Team Size";
          END;
        END;
      END;

      IF SwitchType = TRUE THEN
        IF "Rate Type" = "Rate Type"::Hours THEN
          "Norm (Sales)" := "Norm (Sales)"/ 60
        ELSE
          "Norm (Sales)" := "Norm (Sales)" * 60;

      IF SwitchSize = TRUE THEN BEGIN
        IF "Team Size" <> 0 THEN
          "Norm (Sales)" := "Norm (Sales)" / "Team Size";
        IF xRec."Team Size" <> 0 THEN
          "Norm (Sales)" := "Norm (Sales)" * xRec."Team Size";
      END;

      IF SwitchType OR SwitchSize THEN
        IF "Norm (Sales)" <> 0 THEN
          "Production Rate (Sales)" := 1 / "Norm (Sales)"
        ELSE
          "Production Rate (Sales)" := 0;
    END;

    PROCEDURE ValidateItem@3(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item,Trade Vendor';lvEstRec@1210190000 : Record 11012151;lvSwitchItem@1210190002 : Boolean);
    VAR
      Desc1Txt@1210190001 : Text[50];
      Desc2Txt@1210190003 : Text[50];
      lvItemOper@1100485002 : Code[20];
      lvRefDate@1100485001 : Date;
      lvDiscRef1@1100485004 : Code[20];
      lvDiscRef2@1100485003 : Code[20];
      lvRefPrio@1100525000 : Code[10];
      lvDiscType@1100525001 : 'Purchase,Sales';
    BEGIN
      IF lvSwitchItem = TRUE THEN BEGIN
        "Price Agreement" := FALSE;
        "Price Agreement (Sales)" := FALSE;  //DP00381
      END;

      IF ("Purchase Route Reference" = '') AND ("Price Agreement" = FALSE) THEN BEGIN
        CalcItemCostPriceAndDiscount(lvEstRec, LTypeArtOpt);  //db, 07-04-14: C013433
        IF "Cost Object Price" <> xRec."Cost Object Price" THEN
          GetDefaultsCostObject(gvCostType::Material, "Cost Object Price");

        ClearFields(2); //Buyback
        IF LTypeArtOpt = LTypeArtOpt::Item THEN BEGIN
          IF NOT ItemRec.GET("Item No.") THEN ItemRec.INIT;
          IF ItemRec."Sales/Buy-Back Item (Plant)" THEN BEGIN  //db, 06-06-11: M27669 (skip validate for normal items)
            //db.sn, 12-01-16
            lvRefDate := ValidateCu.GetRefDateEstimate(lvEstRec);
            ValidateCu.GetSalesBuyBackRates("Item No.", lvEstRec."Plant Location",lvRefDate,
              "Gross Price","Buy Back Price");  //db, 06-06-11: M27669 (use SalesRate as GrossPrice)
            //db.en, 12-01-16
            VALIDATE("Buy Back Price");
            VALIDATE("Nett Cost Price");
          END;
        END;
      END;
      IF ("Purchase Route Reference" = '') AND ("Price Agreement (Sales)" = FALSE) THEN BEGIN  //db, 19-12-14: C018758
        CalcItemSalesPriceAndDiscount(lvEstRec);  //db, 07-04-14: C013433
      END;

      IF lvSwitchItem = TRUE THEN BEGIN
        //db.sn, 26-05-14: C015031
        InitSurcharge(TRUE);
        CheckSurchargeMaterialPrice;  //db, 12-08-13: C005338
        //db.en, 26-05-14: C015031
        lvItemOper := '';  //db, 02-02-07: provisionally operation is not save per basis/trade item
        IF ItemRec.GET("Item No.") THEN BEGIN
          CopyItemText;  //DP00686
          VALIDATE("External Text", ItemRec.Text);
          lvItemOper := ItemRec."Sub Operation Code";
        END;
        IF (Recipe = '') AND ("Rate Code" = '') THEN
          VALIDATE("Rate Code", lvEstRec."Rate Code");

        CASE LTypeArtOpt OF
          LTypeArtOpt::Item:
            BEGIN
              IF NOT ItemRec.GET("Item No.") THEN ItemRec.INIT;
              IF ItemRec.Blocked THEN BEGIN  //db, 11-11-13: DP00260 (C002164)
                IF SkipBlockedItem THEN
                  MESSAGE(TABLECAPTION + ': ' + Description + '\' +
                    ItemRec.TABLECAPTION + ' ' + "Item No." + '='  + ItemRec.FIELDCAPTION(Blocked))
                ELSE
                  ItemRec.TESTFIELD(Blocked,FALSE);
              END;
              Weight := ItemRec.Weight;
            END;
          LTypeArtOpt::"Basic Item":
            BEGIN
              IF NOT BasicItemRec.GET(Manufacturer, "Basic Item") THEN BasicItemRec.INIT;
              IF BasicItemRec.Expired THEN BEGIN  //db, 11-11-13: DP00260 (C002164)
                IF SkipBlockedItem THEN
                  MESSAGE(TABLECAPTION + ': ' + Description + '\' +
                    BasicItemRec.TABLECAPTION + ' ' + "Basic Item" + '='  + BasicItemRec.FIELDCAPTION(Expired))
                ELSE
                  BasicItemRec.TESTFIELD(Expired,FALSE);
              END;
              Weight := BasicItemRec."Nett Weight";
              IF BasicItemRec."Sub Operation Code" <> '' THEN
                lvItemOper := BasicItemRec."Sub Operation Code";
            END;
          LTypeArtOpt::"Trade Item",
          LTypeArtOpt::"Trade Vendor":
            BEGIN
              IF NOT TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN TradeItemRec.INIT;
              IF TradeItemRec.Expired THEN BEGIN  //db, 11-11-13: DP00260 (C002164)
                IF SkipBlockedItem THEN
                  MESSAGE(TABLECAPTION + ': ' + Description + '\' +
                    TradeItemRec.TABLECAPTION + ' ' + "Trade Item" + '='  + TradeItemRec.FIELDCAPTION(Expired))
                ELSE
                  TradeItemRec.TESTFIELD(Expired,FALSE);
              END;
              Weight := TradeItemRec."Gross Weight";
              IF TradeItemRec."Sub Operation Code" <> '' THEN
                lvItemOper := TradeItemRec."Sub Operation Code";
            END;
        END;
        IF lvItemOper <> '' THEN   //db, 24-05-07 (call 9441 + problem at replacing trade item as a result of preferred vendor)
          VALIDATE("Sub Operation Code", lvItemOper);
      END;

      CalculateTotals;
    END;

    PROCEDURE CalcItemCostPriceAndDiscount@1100525029(lvEstRec@1100525005 : Record 11012151;LTypeArtOpt@1100525006 : 'Item,Basic Item,Trade Item,Trade Vendor');
    VAR
      lvRefDate@1100525003 : Date;
      lvDiscRef1@1100525002 : Code[20];
      lvDiscRef2@1100525001 : Code[20];
      lvRefPrio@1100525000 : Code[10];
      lvDiscType@1100525004 : 'Purchase,Sales';
      Desc1Txt@1100525008 : Text[50];
      Desc2Txt@1100525007 : Text[50];
    BEGIN
      //db, 07-04-14: C013433
      IF "Price Agreement" THEN EXIT;  //C030087
      GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, lvEstRec, lvDiscType::Purchase);
      lvRefPrio := ValidateCu.GetRefPrioEstimate(lvEstRec, lvDiscType::Purchase);
      IF GetSubEstimate("Estimate No.", "Sub-Estimate No.", TRUE) THEN //Call 23762
        ValidateCu.SetLanguageCode(SubEstRec."Language Code");

      //>> LAHE 130117
      IF NOT Estimate.GET("Estimate No.") THEN
        CLEAR(Estimate);
      ValidateCu.SetPriceListCode(Estimate."Price List Code");
      //<< LAHE 130117


      ValidateCu.ValidateItem(
        LTypeArtOpt, "Trade Item", "Item No.", Manufacturer, "Vendor (Trade Item)", "Basic Item",
        "Cost Object Price", Desc1Txt, "Unit of Measure", "Nett Cost Price",
        "Purchase Discount %", "Price Reference Date", "Gross Price", Desc2Txt, "Cost Component",
        lvDiscRef1, lvDiscRef2, lvRefDate, lvRefPrio);
      IF LTypeArtOpt = LTypeArtOpt::"Trade Item" THEN
        "Price History 0 Exists" := ValidateCu.PriceHistory0Exists("Trade Item", "Vendor (Trade Item)", lvRefDate)
      ELSE
        "Price History 0 Exists" := FALSE;

      "Price History Found" := ValidateCu.GetPriceHistFound(); // LAHE 130507
      "Price History Vendor No." := ValidateCu.GetPriceHistVendorNo(); // LAHE 130507

      IF Desc2Txt = '' THEN
        Description := Desc1Txt
      ELSE
        Description := COPYSTR((Desc1Txt + '\' + Desc2Txt), 1, MAXSTRLEN(Description));

      VALIDATE("Gross Price");
    END;

    PROCEDURE CalcItemSalesPriceAndDiscount@1100525024(lvEstRec@1100525005 : Record 11012151);
    VAR
      lvRefDate@1100525003 : Date;
      lvDiscRef1@1100525002 : Code[20];
      lvDiscRef2@1100525001 : Code[20];
      lvRefPrio@1100525000 : Code[10];
      lvDiscType@1100525004 : 'Purchase,Sales';
    BEGIN
      //db, 07-04-14: C013433
      IF "Price Agreement (Sales)" THEN EXIT;  //C030087
      GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, lvEstRec, lvDiscType::Sales);
      lvRefPrio := ValidateCu.GetRefPrioEstimate(lvEstRec, lvDiscType::Sales);
      "Sales Condition Present" := ValidateCu.GetSalesDiscount(  //db, 27-05-14: C015604
        lvEstRec."Customer No.", "Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)",
        "Nett Sales Price", "Sales Discount %", "Gross Price", lvRefDate, lvEstRec."Customer Disc. Group",
        lvDiscRef1, lvDiscRef2, lvRefPrio);
      VALIDATE("Nett Sales Price");
      //>> LAHE 130507 (same call but with PriceHistVendorNo)
      IF ("Sales Discount %" = 0) AND ("Price History Vendor No." <> '') THEN BEGIN
        "Sales Condition Present" := ValidateCu.GetSalesDiscount(  //db, 27-05-14: C015604
          lvEstRec."Customer No.", "Item No.", "Basic Item", "Trade Item", Manufacturer, "Price History Vendor No.",
          "Nett Sales Price", "Sales Discount %", "Gross Price", lvRefDate, lvEstRec."Customer Disc. Group",
          lvDiscRef1, lvDiscRef2, lvRefPrio);
      END;
      //<< LAHE 130507

      IF lvEstRec."Item Sales Price Based On" = lvEstRec."Item Sales Price Based On"::CostPrice THEN BEGIN
        //db, 03-03-15: C017681 (call from CopyMgt)
        SkipBasedOn := TRUE;
        UpdateSalesPriceFromCostPrice;  //db, 11-04-14: C014487
        SkipBasedOn := FALSE;
      END;
    END;

    PROCEDURE UpdateSalesPriceFromCostPrice@1100525026();
    BEGIN
      //db, 11-04-14: C014487
      IF NOT SkipBasedOn THEN BEGIN  //db, 03-03-15: C017681 (call from CopyMgt)
        GetEstimate("Estimate No.", FALSE);
        IF EstRec."Item Sales Price Based On" = EstRec."Item Sales Price Based On"::GrossMin THEN EXIT;
      END;

      IF "Price Agreement (Sales)" THEN EXIT;

      "Sales Discount %" := 0;
      "Nett Sales Price" := "Nett Cost Price";
      "Nett Sales Price (FCY)" := ExchangeAmtLCYToFCY("Nett Sales Price", TRUE, TRUE, FALSE);
    END;

    PROCEDURE ValidateStatus@1100485001();
    BEGIN
      IF Recipe = '' THEN EXIT;

      RecipeLineRec.RESET;
      RecipeLineRec.SETRANGE("Estimate No.","Estimate No.");
      RecipeLineRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
      RecipeLineRec.SETRANGE("Part Group","Part Group");
      RecipeLineRec.SETRANGE(Part,Part);
      RecipeLineRec.SETRANGE("Estimate Line","Line No.");
      RecipeLineRec.SETRANGE("Line Status",xRec."Line Status");
      RecipeLineRec.MODIFYALL("Line Status", "Line Status");
    END;

    PROCEDURE HandleLookupOperationNorm@1100528910(SalesBln@1100409000 : Boolean) lvRefresh : Boolean;
    VAR
      NormGroupFrm@1100528902 : Page 11012174;
      SubOperationCode@1100528900 : Code[20];
    BEGIN
      //DP00381
      IF (Recipe <> '') OR ("Surcharge Type" <> "Surcharge Type"::" ") THEN EXIT;

      CLEAR(NormGroupFrm);
      IF SalesBln THEN BEGIN  //db, 10-02-15
        NormGroupFrm.SetSubOperation("Sub Operation Code");
        NormGroupFrm.RUNMODAL;  //read only
        EXIT;
      END;
      NormGroupFrm.SetSelection(DATABASE::"Estimate Line NEW","Estimate No.","Sub-Estimate No.",
        "Part Group",Part,0,'','');
      //db.sn, 14-01-14
      NormGroupFrm.SetSubOperation("Sub Operation Code");
      NormGroupFrm.LOOKUPMODE(TRUE);
      IF NormGroupFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
        lvRefresh := NormGroupFrm.ApplySelection;
        IF lvRefresh = FALSE THEN BEGIN
          NormGroupFrm.GetSubOperation(SubOperationCode);
          IF SubOperationCode <> '' THEN BEGIN
            VALIDATE("Sub Operation Code", SubOperationCode);
            ProcessSubOperation;  //db, 28-02-14: C013489
          END;
        END;
      END;
      //db.en, 14-01-14

      EXIT(lvRefresh);
    END;

    PROCEDURE HandleLookupRecipe@1100528909() lvRefresh : Boolean;
    VAR
      RecipeFrm@1100528903 : Page 11125073;
      RecipeRec@1100528902 : Record 11020581;
      PartLineRec@1100528901 : Record 11072076;
      ShowPartLines@1100528900 : Boolean;
    BEGIN
      //DP00381
      IF ("Item No." <> '') OR ("Basic Item" <> '') OR ("Trade Item" <> '') OR
         ("Surcharge Type" <> "Surcharge Type"::" ")
      THEN EXIT;

      CLEAR(RecipeFrm);
      RecipeFrm.LOOKUPMODE(TRUE);
      RecipeFrm.SetSelection(DATABASE::"Estimate Line NEW",
        "Estimate No.","Sub-Estimate No.","Part Group",Part,'','','','','',TRUE,"Line No.");  //C027336

      RecipeRec.RESET;
      ShowPartLines := FALSE;
      EstRec.GET("Estimate No.");
      IF EstRec."Copy Part Lines" = FALSE THEN BEGIN
        PartLineRec.SETRANGE(Part, Part);
        PartLineRec.SETRANGE("Part Group", "Part Group");
        PartLineRec.SETFILTER(Recipe, '<>%1', '');
        IF PartLineRec.FIND('-') THEN BEGIN
          ShowPartLines := TRUE;
          REPEAT
            RecipeRec.GET(PartLineRec."Recipe Group", PartLineRec.Recipe);
            RecipeRec.MARK(TRUE);
          UNTIL PartLineRec.NEXT = 0;
          RecipeRec.MARKEDONLY(TRUE);
        END;
      END;

      IF EstRec.Condition <> '' THEN
        RecipeRec.SETRANGE(Condition, EstRec.Condition);
      RecipeRec.SETRANGE("Recipe Group","Recipe Group");
      IF RecipeRec.GET("Recipe Group",Recipe) THEN
        RecipeFrm.SETRECORD(RecipeRec);
      RecipeFrm.SETTABLEVIEW(RecipeRec);
      IF RecipeFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
        IF NOT EstLineRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Line No.") THEN EstLineRec.INIT;  //C027336
        xRec := EstLineRec;  //C027336
        //problem on page (where this function is called from) by use of SaveRecord follewed by another function with update of
        //estimate line from quantity sheet: if xrec refers to another line then current line, silly question about renaming record occured.
        RecipeFrm.GETRECORD(RecipeRec);
        "Recipe Group" := RecipeRec."Recipe Group";
        SkipUpdateFromQuantitySheet := TRUE;
        VALIDATE(Recipe, RecipeRec."No.");
        SkipUpdateFromQuantitySheet := FALSE;
      END ELSE BEGIN
        lvRefresh := RecipeFrm.CheckMultiCopy;
      END;

      EXIT(lvRefresh);
    END;

    PROCEDURE HandleLookupItem@1100525003(lvFieldNo@1100525004 : Integer) lvRefresh : Boolean;
    VAR
      ItemRec@1100525012 : Record 27;
      BasicItemRec@1100525011 : Record 11012316;
      TradeItemRec@1100525010 : Record 11012317;
      ItemFrm@1100525009 : Page 31;
      BasicItemFrm@1100525008 : Page 11012333;
      TradeItemFrm@1100525007 : Page 11012334;
      lvRefDate@1100525003 : Date;
      lvDiscRef1@1100525002 : Code[20];
      lvDiscRef2@1100525001 : Code[20];
      lvDiscType@1100525000 : 'Purchase,Sales';
      lvTempEstimateLine@1100525005 : TEMPORARY Record 11072072;
      g_ItemCode@1100525014 : Code[20];
      g_Vendor@1100525013 : Code[20];
    BEGIN
      IF Recipe <> '' THEN EXIT;

      GetEstimate("Estimate No.", FALSE); //Call 23762
      GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, EstRec, lvDiscType::Purchase);

      IF lvFieldNo = FIELDNO("Item No.") THEN BEGIN
        CLEAR(ItemFrm);
        ItemFrm.LOOKUPMODE(TRUE);
        ItemFrm.DetermineInterface(DATABASE::"Estimate Line NEW",
          "Estimate No.","Sub-Estimate No.",Part,'',0,'',"Part Group","Line No.",'','');

        IF ItemRec.GET("Item No.") THEN
          ItemFrm.SETRECORD(ItemRec);

        IF ItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ItemFrm.GETRECORD(ItemRec);
          VALIDATE("Item No.", ItemRec."No.");
        END ELSE BEGIN
          lvRefresh := ItemFrm.CheckMultiCopy;
        END;
      END;

      IF lvFieldNo = FIELDNO("Basic Item") THEN BEGIN
        CLEAR(BasicItemFrm);
        BasicItemFrm.LOOKUPMODE(TRUE);
        BasicItemFrm.SetSelection(DATABASE::"Estimate Line NEW",
          "Estimate No.","Sub-Estimate No.",Part,'',0,'',"Part Group","Line No.",'','');

        BasicItemFrm.SetReference(lvRefDate, lvDiscRef1, lvDiscRef2);

        BasicItemRec.InitLookup(BasicItemRec, "Basic Item", Manufacturer);
        BasicItemFrm.SETRECORD(BasicItemRec);

        IF BasicItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          BasicItemFrm.GETRECORD(BasicItemRec);
          Manufacturer := BasicItemRec.Manufacturer;
          VALIDATE("Basic Item", BasicItemRec."Product Code");
        END ELSE BEGIN
          lvRefresh := BasicItemFrm.CheckMultiCopy;
        END;
      END;

      IF lvFieldNo = FIELDNO("Trade Item") THEN BEGIN
        IF "Item No." <> '' THEN BEGIN
          lvTempEstimateLine.COPY(Rec);  //db, 10-07-09: M15801
          lvTempEstimateLine.VALIDATE("Item No.","Item No.");
          g_ItemCode := lvTempEstimateLine."Trade Item";
          g_Vendor := lvTempEstimateLine."Vendor (Trade Item)";
        END ELSE BEGIN
          g_ItemCode := '';
          g_Vendor := '';
        END;

        CLEAR(TradeItemFrm);
        TradeItemFrm.LOOKUPMODE(TRUE);
        TradeItemFrm.SetSelection(DATABASE::"Estimate Line NEW",
          "Estimate No.", "Sub-Estimate No.", Part, '', 0, '', "Part Group", "Line No.", '', '',
          "Vendor (Trade Item)", "Trade Item", Manufacturer, "Basic Item", g_ItemCode, g_Vendor);

        TradeItemFrm.SetReference(lvRefDate, lvDiscRef1, lvDiscRef2);

        TradeItemRec.InitLookup(TradeItemRec, "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)");
        TradeItemFrm.SETRECORD(TradeItemRec);

        IF TradeItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          TradeItemFrm.GETRECORD(TradeItemRec);
          Manufacturer := TradeItemRec.Manufacturer;
          "Basic Item" := TradeItemRec."Product Code";
          "Vendor (Trade Item)" := TradeItemRec.Vendor;
          VALIDATE("Trade Item", TradeItemRec."Item Code");
        END ELSE BEGIN
          lvRefresh := TradeItemFrm.CheckMultiCopy;
        END;
      END;
      EXIT(lvRefresh);
    END;

    PROCEDURE HandleAssistEditItem@1100528300(lvFieldNo@1210190000 : Integer) lvRefresh : Boolean;
    VAR
      ItemFrm@1210190003 : Page 31;
      BasicItemFrm@1210190002 : Page 11012333;
      TradeItemFrm@1210190001 : Page 11012334;
      lvRefDate@1100485002 : Date;
      lvDiscRef1@1100485001 : Code[20];
      lvDiscRef2@1100485000 : Code[20];
      GabiVendorRec@1210190004 : Record 11012304;
      "2baMgt"@1100528300 : Codeunit 11012306;
      RecRef@1100528301 : RecordRef;
    BEGIN
      IF lvFieldNo = FIELDNO("Trade Item") THEN BEGIN
        RecRef.GETTABLE(Rec);
        "2baMgt".RunModalDialogForMultipleItems("Vendor (Trade Item)", "Trade Item", RecRef);
        lvRefresh := TRUE;
      END;
    END;

    PROCEDURE HandleLookupUnit@1210190011();
    VAR
      ItemUnitRec@1210190000 : Record 5404;
      lvUnit@1210190001 : Code[10];
    BEGIN
      lvUnit := ItemUnitRec.HandleLookupUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)");
      IF (lvUnit <> '') AND (lvUnit <> "Unit of Measure") THEN BEGIN
        xRec."Unit of Measure" := "Unit of Measure";
        VALIDATE("Unit of Measure", lvUnit);
      END;
    END;

    PROCEDURE CheckItemUnitConversion@1210190010(VAR MainNewRec@1210190006 : Record 11072072;MainOldRec@1210190007 : Record 11072072);
    VAR
      ItemRec@1210190004 : Record 27;
      UnitFactor@1210190005 : Decimal;
      UnitFactorOld@1210190003 : Decimal;
      UnitFactorNew@1210190002 : Decimal;
      UnitControl@1210190001 : Codeunit 5402;
    BEGIN
      WITH MainNewRec DO BEGIN
        UnitFactorOld := 1;
        UnitFactorNew := 1;
        IF "Trade Item" <> '' THEN BEGIN
          ValidateCu.ValidateUnit(ItemTypeOpt::"Trade Item",
            "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
            Quantity,"Unit of Measure",UnitFactorNew);
        END ELSE BEGIN
          IF "Basic Item" <> '' THEN BEGIN
            ValidateCu.ValidateUnit(ItemTypeOpt::"Basic Item",
              "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
              Quantity,"Unit of Measure",UnitFactorNew);
          END ELSE BEGIN  //db, 07-04-08: M10070
            IF "Item No." <> '' THEN BEGIN
              ItemRec.GET("Item No.");
              UnitFactorOld := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, MainOldRec."Unit of Measure");
              UnitFactorNew := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, "Unit of Measure");
              UnitFactor := UnitFactorOld;
              ValidateCu.ValidateUnit(ItemTypeOpt::Item,
                "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
                Quantity,"Unit of Measure",UnitFactor);
            END;
          END;
        END;
        IF (UnitFactorNew * UnitFactorOld) <> 0 THEN BEGIN
          IF UnitFactorNew <> UnitFactorOld THEN BEGIN //db, 20-04-11: M26826
            VALIDATE("Gross Price", ("Gross Price" * UnitFactorNew / UnitFactorOld));
            VALIDATE(Weight,(Weight * UnitFactorNew / UnitFactorOld));
          END;
        END;
      END;
    END;

    PROCEDURE CheckSameValue@1210190009(lvCostType@1210190001 : Integer;lvCostObjectOld@1210190002 : Code[20]);
    VAR
      lvEstLineRec@1210190000 : Record 11072072;
    BEGIN
      lvEstLineRec.SETRANGE("Estimate No.", "Estimate No.");
      IF lvCostType = 1 THEN
        lvEstLineRec.SETFILTER("Cost Object Labor", '%1', lvCostObjectOld)
      ELSE
        lvEstLineRec.SETFILTER("Cost Object Price", '%1', lvCostObjectOld);
      lvEstLineRec.SETRANGE(Description, Description);
      lvEstLineRec.SETRANGE("Unit of Measure", "Unit of Measure");
      IF lvEstLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF lvCostType = 1 THEN
            lvEstLineRec."Cost Object Labor" := "Cost Object Labor"
          ELSE
            lvEstLineRec."Cost Object Price" := "Cost Object Price";
          lvEstLineRec.MODIFY;
        UNTIL lvEstLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckCostObject@1210190005(CostObject@1210190000 : Code[20]);
    BEGIN
      GetEstimate("Estimate No.", FALSE); //Call 23762
      //IF EstRec."Estimate Based On" <> EstRec."Estimate Based On"::CostObject THEN EXIT;  //db, 02-10-09: M15745

      IF CostObject <> '' THEN BEGIN
        DimMgt.GetDimValueRec(2, CostObject, DimValRec, TRUE,'');
        //db.sn, 02-10-09: M15745
        VALIDATE("Cost Component", DimValRec."Cost Component");
        IF EstRec."Estimate Based On" <> EstRec."Estimate Based On"::CostObject THEN EXIT;
        //db.en, 02-10-09: M15745
        IF "Sub Operation Code" <> '' THEN BEGIN
          ProcessSubOperation;
          EXIT;
        END;
        IF "Norm Agreement" OR "Price Agreement" THEN BEGIN
          IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN BEGIN
            IF DimValRec."Rate Code" = '' THEN
              VALIDATE("Rate Code", EstRec."Rate Code")
            ELSE
              VALIDATE("Rate Code", DimValRec."Rate Code");
          END;
          EXIT;
        END;
        Description := DimValRec.Name;
        InitNormPrice;  //db, 29-11-11
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN BEGIN
          IF DimValRec."Rate Code" = '' THEN
            VALIDATE("Rate Code", EstRec."Rate Code")
          ELSE
            VALIDATE("Rate Code", DimValRec."Rate Code");
          IF "Sub Operation Code" <> '' THEN
            DetermineNorm
          ELSE
            VALIDATE(Norm, DimValRec.Norm);
        END ELSE BEGIN
          TESTFIELD("Cost Type (Price)");  //DP00381
          VALIDATE("Gross Price", DimValRec.Price);
        END;
      END;
      //VALIDATE("Cost Component", DimValRec."Cost Component");  //db, 02-10-09: M15745
    END;

    PROCEDURE OldSubOperationDefault@1210190006() : Boolean;
    VAR
      OldSubOperRec@1210190001 : Record 11012166;
      OldOperRec@1210190000 : Record 11012165;
    BEGIN
      OldOperRec.INIT;
      IF OldSubOperRec.GET(xRec."Sub Operation Code") THEN
        IF NOT OldOperRec.GET(OldSubOperRec.Operation) THEN OldOperRec.INIT;

      EXIT(xRec."Cost Object Labor" = OldOperRec."Cost Object");
    END;

    PROCEDURE ProcessSubOperation@1100485002();
    VAR
      SubOperRec@1100485000 : Record 11012166;
    BEGIN
      IF "Item No." + "Basic Item" + "Trade Item" <> '' THEN EXIT;

      IF SubOperRec.GET("Sub Operation Code") THEN BEGIN
        Description := COPYSTR(SubOperRec.Description, 1, MAXSTRLEN(Description));
        IF SubOperRec."Unit of Measure" <> '' THEN
          "Unit of Measure" := SubOperRec."Unit of Measure";
      END;
    END;

    PROCEDURE EnterQuantity@1210190013(lvOrigin@1210190002 : Integer) : Boolean;
    VAR
      QuanRec@1210190000 : Record 11012186;
      EstModelRec@1100485000 : Record 11012196;
      QuantityRelation@1100525000 : Record 11020463;
    BEGIN
      //DP00686
      //lvOrigin:
      //  1 = Length, Width and Height
      //  2 = quantity (input)
      //  3 = house type
      //  4 = quantity (lookup)

      IF "Surcharge Type" <> "Surcharge Type"::" " THEN EXIT(FALSE);

      IF lvOrigin <> 1 THEN BEGIN
        IF Length <> 0 THEN EXIT(FALSE);
        IF Width <> 0 THEN EXIT(FALSE);
        IF Height <> 0 THEN EXIT(FALSE);
      END;

      EstSetup.GET;
      IF lvOrigin <> 4 THEN BEGIN
        IF NOT EstSetup."Quantity Sheet with Relations" THEN BEGIN
          QuanRec.SETRANGE("Estimate No.", "Estimate No.");
          QuanRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
          QuanRec.SETRANGE("Part Group", "Part Group");
          QuanRec.SETRANGE(Part, Part);
          QuanRec.SETRANGE("Estimate Line", "Line No.");
          IF QuanRec.FINDFIRST THEN EXIT(FALSE);
        END ELSE
          IF QuantityRelation.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Line No.",'','',0) THEN
            EXIT(FALSE);
      END;

      IF lvOrigin <> 3 THEN BEGIN
        EstModelRec.SETRANGE("Estimate No.", "Estimate No.");
        IF EstModelRec.FINDFIRST THEN EXIT(FALSE);
      END ELSE BEGIN
        EstModelRec.SETRANGE("Estimate No.", "Estimate No.");
        IF NOT EstModelRec.FINDFIRST THEN EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE EditQuanSheet@1210190008();
    VAR
      QuanRec@1210190000 : Record 11012186;
      QuanSheetRec@1100525001 : Record 11020462;
      QuanSheetFrm@1100525002 : Page 11020462;
      QuantityRelation@1100409002 : Record 11020463;
      RecipeLine@1100409001 : Record 11072075;
    BEGIN
      //DP00686
      IF "Line No." = 0 THEN
        ERROR(Text011);

      EstSetup.GET;
      IF NOT EstSetup."Quantity Sheet with Relations" THEN BEGIN
        QuanRec.SETRANGE("Estimate No.", "Estimate No.");
        QuanRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
        QuanRec.SETRANGE("Part Group", "Part Group");
        QuanRec.SETRANGE(Part, Part);
        QuanRec.SETRANGE("Estimate Line", "Line No.");
        QuanRec.SETFILTER("Recipe Group", '%1', '');
        QuanRec.SETFILTER(Recipe, '%1', '');
        QuanRec.SETRANGE("Recipe Line", 0);
        PAGE.RUNMODAL(PAGE::"Estimate Quantity Sheet", QuanRec);
        QuanRec.SETRANGE("Row No.", 0);
        IF QuanRec.FINDFIRST THEN
          VALIDATE(Quantity, QuanRec.Result);
      END ELSE BEGIN
        QuanSheetRec.SETRANGE("Estimate No.","Estimate No.");
        QuanSheetRec.SETFILTER("Sub-Estimate No.",'%1|%2', '', "Sub-Estimate No.");
        QuanSheetRec.SETFILTER("Part Group", '%1|%2', '',"Part Group");
        QuanSheetRec.SETFILTER(Part,'%1|%2', '',Part);
        QuanSheetFrm.SETTABLEVIEW(QuanSheetRec);
        IF NOT QuantityRelation.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Line No.",'','',0) THEN QuantityRelation.INIT;
        IF NOT QuanSheetRec.GET("Estimate No.", QuantityRelation."Quantity Sheet") THEN QuanSheetRec.INIT;
        QuanSheetFrm.SETRECORD(QuanSheetRec);
        QuanSheetFrm.SetDefaultNEW(Rec,RecipeLine,TRUE,QuantityRelation);
        QuanSheetFrm.RUNMODAL;
        IF QuantityRelation.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Line No.",'','',0) THEN
          IF GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Line No.") THEN
            VALIDATE(Quantity);
      END;
    END;

    PROCEDURE GetPartQuantity@1210190007() PartQuan@1210190000 : Decimal;
    VAR
      lvEstPartRec@1210190001 : Record 11072073;
      CurrLevel@1210190002 : Integer;
    BEGIN
      PartQuan := 1;

      //IF GetSubEstimate("Estimate No.", "Sub-Estimate No.", TRUE) THEN //Call 23762
      IF SubEstRec.GET("Estimate No.", "Sub-Estimate No.") THEN  //db, 09-11-11: M30437
        PartQuan := PartQuan * SubEstRec."Cumulative Frequency";

      IF "Ignore Part Quantity" THEN
        EXIT(PartQuan);

      IF lvEstPartRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part) THEN BEGIN
        PartQuan := PartQuan * lvEstPartRec.Quantity;
        CurrLevel := lvEstPartRec.Level;

        lvEstPartRec.RESET;
        lvEstPartRec.SETRANGE("Estimate No.", lvEstPartRec."Estimate No.");
        lvEstPartRec.SETRANGE("Sub-Estimate No.", lvEstPartRec."Sub-Estimate No.");
        lvEstPartRec.SETRANGE("Part Group", lvEstPartRec."Part Group");
        IF CurrLevel = 3 THEN BEGIN
          CurrLevel := CurrLevel - 1;
          lvEstPartRec.SETRANGE(Part, lvEstPartRec.Paragraph);
          IF lvEstPartRec.FINDFIRST THEN BEGIN
            PartQuan := PartQuan * lvEstPartRec.Quantity;
            CurrLevel := lvEstPartRec.Level;
          END;
        END;
        IF CurrLevel = 2 THEN BEGIN
          CurrLevel := CurrLevel - 1;
          lvEstPartRec.SETRANGE(Part, lvEstPartRec.Chapter);
          IF lvEstPartRec.FINDFIRST THEN BEGIN
            PartQuan := PartQuan * lvEstPartRec.Quantity;
            CurrLevel := lvEstPartRec.Level;
          END;
        END;
        IF CurrLevel = 1 THEN BEGIN
          CurrLevel := CurrLevel - 1;
          lvEstPartRec.SETRANGE(Part);
          lvEstPartRec.SETRANGE(Level, 0);
          IF lvEstPartRec.FINDFIRST THEN BEGIN
            PartQuan := PartQuan * lvEstPartRec.Quantity;
            CurrLevel := lvEstPartRec.Level;
          END;
        END;
      END;

      EXIT(PartQuan);
    END;

    PROCEDURE InitAdjustmentFactor@1210190003();
    VAR
      CumFactorPrice@1100528900 : Decimal;
    BEGIN
      //DP00381
      IF "Adjustment Factor Hours" = 0 THEN
        "Adjustment Factor Hours" := 1;
      IF "Adjustment Factor Price" = 0 THEN
        "Adjustment Factor Price" := 1;

      IF "Adj. Factor Hours (Sales)" = 0 THEN  //DP00555
        "Adj. Factor Hours (Sales)" := 1;

      IF ("Surcharge Type" <> "Surcharge Type"::" ") THEN BEGIN
        "Cum. Adj. Factor Hours" := "Adjustment Factor Hours";
        "Cum. Adj. Factor Price" := "Adjustment Factor Price";
        "Cum. Adj. Factor Hours (Sales)" := "Adj. Factor Hours (Sales)";   //DP00555
      END ELSE BEGIN
        EstPartRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part);
        IF (EstPartRec."Cum. Adj. Factor Hours" = 0) THEN
          "Cum. Adj. Factor Hours" := "Adjustment Factor Hours"
        ELSE
          "Cum. Adj. Factor Hours" := "Adjustment Factor Hours" * EstPartRec."Cum. Adj. Factor Hours";
        IF (EstPartRec."Cum. Adj. Factor Hours (Sales)" = 0) THEN  //DP00555
          "Cum. Adj. Factor Hours (Sales)" := "Adj. Factor Hours (Sales)"
        ELSE
          "Cum. Adj. Factor Hours (Sales)" := "Adj. Factor Hours (Sales)" * EstPartRec."Cum. Adj. Factor Hours (Sales)";

        IF "Cost Type (Price)" = "Cost Type (Price)"::Material THEN
          CumFactorPrice := EstPartRec."Cum. Adj. Factor Material";
        IF "Cost Type (Price)" = "Cost Type (Price)"::Subcontracting THEN
          CumFactorPrice := EstPartRec."Cum. Adj. Factor Subcontr.";
        IF "Cost Type (Price)" = "Cost Type (Price)"::Plant THEN
          CumFactorPrice := EstPartRec."Cum. Adj. Factor Plant";
        IF "Cost Type (Price)" = "Cost Type (Price)"::Sundry THEN
          CumFactorPrice := EstPartRec."Cum. Adj. Factor Sundry";

        IF CumFactorPrice = 0 THEN
          "Cum. Adj. Factor Price" := "Adjustment Factor Price"
        ELSE
          "Cum. Adj. Factor Price" := "Adjustment Factor Price" * CumFactorPrice;
      END;
    END;

    PROCEDURE ProcessAdjustmentFactor@1210190004(IAdjType@1210190000 : Integer;IEstType@1100525000 : Integer);
    BEGIN
      IF (IEstType = 0) OR (IEstType = 2) THEN BEGIN  //DP00555 (0=both, 1=cost, 2=sales)
        CASE IAdjType OF
          1:
            IF "Adj. Factor Hours (Sales)" = 0 THEN
              "Adj. Factor Hours (Sales)" := 1;
        END;
      END;
      IF (IEstType = 0) OR (IEstType = 1) THEN BEGIN  //DP00555 (0=both, 1=cost, 2=sales)
        CASE IAdjType OF
          1:
            IF "Adjustment Factor Hours" = 0 THEN
              "Adjustment Factor Hours" := 1;
          2:
            IF "Adjustment Factor Price" = 0 THEN
              "Adjustment Factor Price" := 1;
        END;
      END;
      MODIFY;

      UpdateEst.ResetAdjustmentFactor("Estimate No.", "Sub-Estimate No.", "Part Group", Part,
        "Line No.", TRUE, 3, IAdjType, IEstType);  //DP00555

      GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Line No.");
    END;

    PROCEDURE CheckRenameRecipe@1100485004();
    BEGIN
      EstRcpLineRec.RESET;
      EstRcpLineRec.SETRANGE("Estimate No.","Estimate No.");
      EstRcpLineRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
      EstRcpLineRec.SETRANGE("Part Group","Part Group");
      EstRcpLineRec.SETRANGE(Part,Part);
      EstRcpLineRec.SETRANGE("Estimate Line","Line No.");
      IF EstRcpLineRec.FINDFIRST THEN
        ERROR(Text000,xRec.Recipe);
    END;

    PROCEDURE CheckRecipeCondition@1100485005(lvEstLineRec@1100485000 : Record 11072072) : Boolean;
    BEGIN
      WITH lvEstLineRec DO BEGIN
        IF Recipe = '' THEN EXIT(TRUE);

        IF NOT RecipeRec.GET("Recipe Group", Recipe) THEN RecipeRec.INIT;
        IF RecipeRec.Condition = '' THEN EXIT(TRUE);

        GetSubEstimate("Estimate No.", "Sub-Estimate No.", TRUE); //Call 23762
        IF SubEstRec.Condition = RecipeRec.Condition THEN EXIT(TRUE);
        IF SubEstRec.Condition <> '' THEN EXIT(FALSE);

        GetEstimate("Estimate No.", TRUE); //Call 23762
        IF EstRec.Condition = RecipeRec.Condition THEN EXIT(TRUE);
        IF EstRec.Condition <> '' THEN EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE GetItemSpecifications@1100485006();
    BEGIN
      IF ItemRec.GET("Item No.") THEN BEGIN
        "Item Series" := ItemRec."Item Series";
        "Item Type" := ItemRec."Item Type";
        "Item Brand" := ItemRec."Item Brand";
      END;
    END;

    PROCEDURE CopyEntry@1100485008();
    VAR
      JobEntryRec@1210190000 : Record 11072005;
      JobEntryFrm@1210190001 : Page 11072005;
      lvSelection@1210190002 : Integer;
      lvText000@1210190003 : TextConst 'ENU=Job Entry,Service Entry';
      ServEntryRec@1210190005 : Record 11012819;
      ServEntryFrm@1210190004 : Page 11012826;
      lvCompName@1210190006 : Text[50];
    BEGIN
      lvSelection := STRMENU(lvText000, 1);  //1=Project; 2=Service
      IF lvSelection = 0 THEN EXIT;

      IF lvSelection = 1 THEN BEGIN
        GetEstimate("Estimate No.", FALSE); //Call 23762
        lvCompName := COMPANYNAME;

        CLEAR(JobEntryFrm);
        JobEntryFrm.SetSelection(DATABASE::"Estimate Line NEW",
          "Estimate No.","Sub-Estimate No.",Part,'',0,'',"Part Group","Line No.",
          lvCompName);

        JobEntryRec.SETCURRENTKEY("Job No.", "Cost Type", "Global Dimension 2 Code");  //db, 03-09-08
      //JobEntryRec.SETFILTER(Principal, EstRec."Customer No.");
        JobEntryRec.SETRANGE("Cost Type", JobEntryRec."Cost Type"::Material);
        JobEntryRec.SETRANGE(Surcharge, FALSE);

        JobEntryFrm.SETTABLEVIEW(JobEntryRec);
        JobEntryFrm.RUNMODAL;
      END;

      IF lvSelection = 2 THEN BEGIN
        CLEAR(ServEntryFrm);
        ServEntryFrm.SetSelection(DATABASE::"Estimate Line NEW",
          "Estimate No.","Sub-Estimate No.",Part,'',0,'',"Part Group","Line No.");

        ServEntryRec.SETCURRENTKEY("Service Contract No.", "Cost Type", "Global Dimension 2 Code");  //db, 03-09-08
      //ServEntryRec.SETFILTER("Customer No.", EstRec."Customer No.");
        ServEntryRec.SETRANGE("Cost Type", ServEntryRec."Cost Type"::Material);
        ServEntryRec.SETRANGE(Surcharge, FALSE);

        ServEntryFrm.SETTABLEVIEW(ServEntryRec);
        ServEntryFrm.RUNMODAL;
      END;
    END;

    PROCEDURE GetMinuts@1100485009(lvType@1100485002 : Integer;iCostSales@1100528900 : 'Cost,Sales') Result : Decimal;
    VAR
      RcpLineRec@1100485000 : Record 11072075;
      RcpTotal@1100485001 : Decimal;
      NormDec@1100528901 : Decimal;
      QuanDec@1100528902 : Decimal;
    BEGIN
      IF Recipe = '' THEN BEGIN
        IF iCostSales = iCostSales::Sales THEN  //DP00381
          NormDec := "Norm (Sales)"
        ELSE
          NormDec := Norm;
        IF "Rate Type" = "Rate Type"::Hours THEN
          Result := NormDec * 60
        ELSE
          Result := NormDec;
        IF "Surcharge Type" <> "Surcharge Type"::" " THEN
          Result := Result * "Surcharge %" / 100;
        IF iCostSales = iCostSales::Sales THEN BEGIN  //DP00381
          IF "Cum. Adj. Factor Hours (Sales)" <> 0 THEN
            Result := Result * "Cum. Adj. Factor Hours (Sales)";
        END ELSE BEGIN
          IF "Cum. Adj. Factor Hours" <> 0 THEN
            Result := Result * "Cum. Adj. Factor Hours";
        END;
        IF "Team Size" > 0 THEN
          Result := Result * "Team Size";
      END ELSE BEGIN
        RcpLineRec.SETRANGE("Estimate No.", "Estimate No.");
        RcpLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
        RcpLineRec.SETRANGE("Part Group", "Part Group");
        RcpLineRec.SETRANGE(Part, Part);
        RcpLineRec.SETRANGE("Estimate Line", "Line No.");
        IF RcpLineRec.FINDSET THEN BEGIN
          REPEAT
            IF iCostSales = iCostSales::Sales THEN BEGIN  //DP00381
              QuanDec := RcpLineRec."Quantity (Sales)";
              NormDec := RcpLineRec."Norm (Sales)";
            END ELSE BEGIN
              QuanDec := RcpLineRec.Quantity;
              NormDec := RcpLineRec.Norm;
            END;
            IF RcpLineRec."Rate Type" = "Rate Type"::Hours THEN
              RcpTotal := QuanDec * NormDec * 60
            ELSE
              RcpTotal := QuanDec * NormDec;
            IF RcpLineRec."Surcharge Type" <> RcpLineRec."Surcharge Type"::" " THEN
              RcpTotal := RcpTotal * RcpLineRec."Surcharge %" / 100;
            IF iCostSales = iCostSales::Sales THEN BEGIN  //DP00381
              IF RcpLineRec."Cum. Adj. Factor Hours (Sales)" <> 0 THEN
                RcpTotal := RcpTotal * RcpLineRec."Cum. Adj. Factor Hours (Sales)";
            END ELSE BEGIN
              IF RcpLineRec."Cum. Adj. Factor Hours" <> 0 THEN
                RcpTotal := RcpTotal * RcpLineRec."Cum. Adj. Factor Hours";
            END;
            IF RcpLineRec."Team Size" > 0 THEN
              RcpTotal := RcpTotal * RcpLineRec."Team Size";
            Result := Result + RcpTotal;
          UNTIL RcpLineRec.NEXT = 0;
        END;
      END;
      IF lvType = 1 THEN BEGIN
        IF iCostSales = iCostSales::Sales THEN  //DP00381
          Result := Result * "Quantity (Sales)"
        ELSE
          Result := Result * Quantity;
      END;
      EXIT(Result);
    END;

    PROCEDURE GetDefaultsPlantType@1100485010();
    VAR
      PlantTypeRec@1100485000 : Record 11012551;
    BEGIN
      PlantTypeRec.GET("Plant Type");
      Description := PlantTypeRec.Description;
      "Unit of Measure" := PlantTypeRec."Unit of Measure";
      "Cost Object Price" := PlantTypeRec."Cost Object";
      Weight := PlantTypeRec.Weight;
      CLEAR("Price Agreement");  //DP00381
      ClearFields(2); //Buyback
      IF NOT EstimateMgmt.IsLineDiscountMaterialOnly THEN
        ClearFields(3); //Discount
      DeterminePlantPrice;

      IF "Attached to Line No." <> 0 THEN
        GetRentalPeriodFromSet;
    END;

    PROCEDURE DeterminePlantPrice@1100485011();
    VAR
      SearchRateCu@1100485000 : Codeunit 11012567;
      RefDate@1100485001 : Date;
      RentalType@1100525000 : Option;
      DummyPlantPriceType@1100525002 : Option;
      DummyRentalType@1100525003 : Option;
      PlantDiscount@1100525004 : Decimal;
      SalesPrice@1100525005 : Decimal;
      BuyBackPrice@1100525006 : Decimal;
      PlantTypeRec@1100525001 : Record 11012551;
    BEGIN
      IF ("Plant Type" = '') OR "Price Agreement" THEN
        EXIT;

      GetEstimate("Estimate No.", TRUE);
      IF "Start Rental Period" <> 0D THEN
        RefDate := "Start Rental Period"
      ELSE BEGIN
        IF EstRec."Reference Date (Rate)" <> 0D THEN
          RefDate := EstRec."Reference Date (Rate)"
        ELSE
          RefDate := TODAY;
      END;

      //DP01047.sn
      RentalType := -1;  //0=rental, 1=sales, 2=buy-back, 3= hours
      PlantTypeRec.GET("Plant Type");
      IF EstRec."Plant Rates in Hours" THEN BEGIN
        "Cost Type (Hours)" := "Cost Type (Hours)"::Plant;
        "Rate Code" := '';
        InitRateRelatedFields;
        IF (PlantTypeRec."Rental Type" <> PlantTypeRec."Rental Type"::"Sales/Buy Back") THEN
          RentalType := 3;
      END;

      VALIDATE("Nett Cost Price", SearchRateCu.CostRateFromEstimate("Plant Type",'', EstRec."Plant Location",RefDate,RentalType,"Plant Price Type"));
      VALIDATE("Gross Price","Nett Cost Price");
      SalesPrice := SearchRateCu.SalesRateFromEstimate(
        "Plant Type",'',EstRec."Plant Location",EstRec."Customer No.",EstRec."Kind of Plant Rate"+1,RefDate,RentalType,"Plant Price Type");
      IF RentalType = 1 THEN BEGIN
        DummyRentalType := 2;
        BuyBackPrice := SearchRateCu.SalesRateFromEstimate("Plant Type",'',EstRec."Plant Location",EstRec."Customer No.",0,RefDate,DummyRentalType,DummyPlantPriceType);
      END;
      PlantDiscount := SearchRateCu.SalesDiscountFromEstimate("Plant Type",'',EstRec."Plant Location",EstRec."Customer No.",RefDate,RentalType);
      VALIDATE("Nett Sales Price", SalesPrice * (100-PlantDiscount)/100);
      VALIDATE("Buy Back Price", BuyBackPrice * (100-PlantDiscount)/100);
      //DP01047.en
    END;

    PROCEDURE GetDefaultsCostObject@1100485012(lvCostType@1100485000 : 'Labor,Material,Subcontracting,Plant,Sundry';lvCostObject@1100485001 : Code[20]);
    VAR
      lvDimValRec@1100485002 : Record 349;
      lvEstPurchActRec@1100485003 : Record 11012366;
    BEGIN
      EstSetup.GET;
      IF NOT EstSetup."Default Purchase Action" THEN
        EXIT;

      DimMgt.GetDimValueRec(2, lvCostObject, lvDimValRec, TRUE, '');
      lvDimValRec.TESTFIELD(Blocked, FALSE);

      CASE lvCostType OF
        lvCostType::Material:
          BEGIN
            IF ("Purchase Action Mat." = '') AND (lvDimValRec."Purchase Action" <> '') THEN
              IF NOT lvEstPurchActRec.GET("Estimate No.", lvDimValRec."Purchase Action") THEN
                MESSAGE(Text006, lvDimValRec."Purchase Action","Estimate No.")
              ELSE
                IF lvEstPurchActRec.Status >= lvEstPurchActRec.Status::Applied THEN
                  MESSAGE(Text007, FIELDCAPTION("Purchase Action Mat."), FIELDCAPTION("Cost Object Price"),
                                   FORMAT(lvEstPurchActRec.Status))
                ELSE
                  VALIDATE("Purchase Action Mat.", lvDimValRec."Purchase Action");
          END;
        lvCostType::Subcontracting:
          BEGIN
            IF ("Purchase Action Subc." = '') AND (lvDimValRec."Purchase Action" <> '') THEN
              IF NOT lvEstPurchActRec.GET("Estimate No.", lvDimValRec."Purchase Action") THEN
                MESSAGE(Text006, lvDimValRec."Purchase Action","Estimate No.")
              ELSE
                IF lvEstPurchActRec.Status >= lvEstPurchActRec.Status::Applied THEN
                  MESSAGE(Text007, FIELDCAPTION("Purchase Action Subc."), FIELDCAPTION("Cost Object Price"),
                                   FORMAT(lvEstPurchActRec.Status))
                ELSE
                  VALIDATE("Purchase Action Subc.", lvDimValRec."Purchase Action");
            END;
        lvCostType::Plant:
          BEGIN
            IF ("Purchase Action Plant" = '') AND (lvDimValRec."Purchase Action" <> '') THEN
              IF NOT lvEstPurchActRec.GET("Estimate No.", lvDimValRec."Purchase Action") THEN
                MESSAGE(Text006, lvDimValRec."Purchase Action","Estimate No.")
              ELSE
                IF lvEstPurchActRec.Status >= lvEstPurchActRec.Status::Applied THEN
                  MESSAGE(Text007, FIELDCAPTION("Purchase Action Subc."), FIELDCAPTION("Cost Object Price"),
                                   FORMAT(lvEstPurchActRec.Status))
                ELSE
                  VALIDATE("Purchase Action Plant", lvDimValRec."Purchase Action");
          END;
        lvCostType::Sundry: //DP00381
          BEGIN
          END;
      END;
    END;

    PROCEDURE UpdateProjElem@1100525000(lvAction@1100485000 : Integer);
    VAR
      lvRcpLineRec@1100485001 : Record 11072075;
    BEGIN
      IF "Project No." = '' THEN
        "Extension Contract" := '';  //DP00260

      lvRcpLineRec.SETRANGE("Estimate No.", "Estimate No.");
      lvRcpLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      lvRcpLineRec.SETRANGE("Part Group", "Part Group");
      lvRcpLineRec.SETRANGE(Part, Part);
      lvRcpLineRec.SETRANGE("Estimate Line", "Line No.");
      IF lvAction = 0 THEN
        lvRcpLineRec.SETFILTER("Project No.", '%1|%2', '', xRec."Project No.")
      ELSE
        lvRcpLineRec.SETFILTER(Element, '%1|%2', '', xRec.Element);
      IF lvRcpLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF lvAction = 0 THEN
            lvRcpLineRec.VALIDATE("Project No.", "Project No.")
          ELSE
            lvRcpLineRec.VALIDATE(Element, Element);
          IF "Project No."= '' THEN
            lvRcpLineRec."Extension Contract" := '';  //DP00260
          lvRcpLineRec.MODIFY;
        UNTIL lvRcpLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateTimeQuanRecipeLines@1100525001();
    VAR
      lvRcpLineRec@1100525000 : Record 11072075;
      lvDummyDF@1100525001 : DateFormula;
      NewInterval@1100525003 : DateFormula;
      NewTimeQuan@1100525002 : Decimal;
      lvText000@1100525004 : TextConst 'ENU="Changing %1 for Estimate Lines not allowed; update related Recipe Lines?"';
      lvFieldName@1100525005 : Text[100];
    BEGIN
      //db, 02-03-09: M14329
      NewTimeQuan := "Time Quantity";
      "Time Quantity" := 1;
      IF MODIFY THEN;
      COMMIT;

      IF CurrFieldNo = FIELDNO("Time Quantity") THEN
        lvFieldName := FIELDCAPTION("Time Quantity");
      IF NOT CONFIRM(lvText000, TRUE, lvFieldName) THEN EXIT;

      lvRcpLineRec.SETRANGE("Estimate No.", "Estimate No.");
      lvRcpLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      lvRcpLineRec.SETRANGE("Part Group", "Part Group");
      lvRcpLineRec.SETRANGE(Part, Part);
      lvRcpLineRec.SETRANGE("Estimate Line", "Line No.");
      lvRcpLineRec.SETRANGE("Surcharge Type", lvRcpLineRec."Surcharge Type"::" ");
      IF lvRcpLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF CurrFieldNo = FIELDNO("Time Quantity") THEN BEGIN
            lvRcpLineRec.VALIDATE("Time Quantity", NewTimeQuan);
          END;
          lvRcpLineRec.MODIFY;
        UNTIL lvRcpLineRec.NEXT = 0;
      END;

      lvRcpLineRec.SETFILTER("Surcharge Type", '<>%1', lvRcpLineRec."Surcharge Type"::" ");
      IF lvRcpLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          lvRcpLineRec.CheckRecipeCharge;
        UNTIL lvRcpLineRec.NEXT = 0;
      END;

      lvRcpLineRec.UpdateEstLines;
    END;

    PROCEDURE GetReferenceData@1100525002(VAR lvRefDate@1100525003 : Date;VAR lvDiscRef1@1100525002 : Code[20];VAR lvDiscRef2@1100525001 : Code[20];lvEstRec@1100525000 : Record 11012151;lvDiscType@1100525004 : 'Purchase,Sales');
    BEGIN
      lvRefDate := ValidateCu.GetRefDateEstimate(lvEstRec);
      ValidateCu.GetRefDiscEstimate(lvEstRec, lvDiscRef1, lvDiscRef2, lvDiscType);
    END;

    PROCEDURE CalcRentalUnits@1100525007();
    VAR
      PlantLocation@1100525000 : Record 11012554;
      RateTypeUsed@1100525002 : Option;
      CalcRentalPeriodsCu@1100525001 : Codeunit 11012568;
    BEGIN
      PlantLocation.INIT;
      PlantLocation.InitRecord;

      GetEstimate("Estimate No.", FALSE); //Call 23762
      IF EstRec."Plant Location" <> '' THEN
        PlantLocation.GET(EstRec."Plant Location");

      VALIDATE("Rental Time Units",
        CalcRentalPeriodsCu.NumberRentalPeriods(
          PlantLocation,"Start Rental Period","End Rental Period","Plant Type",'',RateTypeUsed));

      IF "Set Code" = '' THEN
        TESTFIELD("Plant Price Type",RateTypeUsed + 1);
    END;

    PROCEDURE ClearFields@1100525004(FieldGroup@1100525000 : 'Material,Plant,BuyBack,Discount');
    BEGIN
      CASE FieldGroup OF
        FieldGroup::Material:
          BEGIN
            CLEAR("Nett Cost Price");
            CLEAR("Item No.");
            CLEAR("Cost Object Price");
            CLEAR("Basic Item");
            CLEAR("Vendor (Trade Item)");
            CLEAR("Trade Item");
          END;
        FieldGroup::Plant:
          BEGIN
            CLEAR("Nett Cost Price");  //DP00381
            CLEAR("Plant Type");
            CLEAR("Plant Price Type");
            CLEAR("Cost Object Price")
          END;
        FieldGroup::BuyBack:
          BEGIN
            CLEAR("Buy Back Price");
            CLEAR("Buy Back %");
          END;
        FieldGroup::Discount:
          BEGIN
            CLEAR("Gross Price");
            CLEAR("Purchase Discount %");
          END;
      END;
    END;

    PROCEDURE ChkFieldsEmpty@1100525028(FieldGroup@1100525000 : 'Material,Plant,BuyBack,Discount');
    BEGIN
      CASE FieldGroup OF
        FieldGroup::Material:
          BEGIN
            //dbeekman, Currently not used
            //TESTFIELD("Material Price",0);
            //TESTFIELD("Item No.",0)
          END;
        FieldGroup::Plant:
          BEGIN
            //dbeekman, Currently not used
            //TESTFIELD("Plant Type",0);
            //TESTFIELD("Plant Price Type",0);
          END;
        FieldGroup::BuyBack:
          BEGIN
            TESTFIELD("Buy Back Price",0);
            TESTFIELD("Buy Back %",0);
          END;
        FieldGroup::Discount:
          BEGIN
            TESTFIELD("Purchase Discount %",0);
            TESTFIELD("Gross Price",0);
          END;
      END;
    END;

    PROCEDURE GetAttachedToLineNo@1100525005(Rec2@1100525000 : Record 11072072) : Integer;
    BEGIN
      Rec2.SETRANGE("Estimate No.",Rec2."Estimate No.");
      Rec2.SETRANGE("Sub-Estimate No.",Rec2."Sub-Estimate No.");
      Rec2.SETRANGE("Part Group",Rec2."Part Group");
      Rec2.SETRANGE(Part,Rec2.Part);

      IF Rec2.NEXT <> 0 THEN
        IF (Rec2."Attached to Line No." <> 0) THEN BEGIN
          "Set Level" := Rec2."Set Level";
          EXIT(Rec2."Attached to Line No.");
        END;
      "Set Level" := 0;
      EXIT(0);
    END;

    PROCEDURE GetTotalWeight@1100525009() : Decimal;
    BEGIN
      EXIT(TotalWeight);
    END;

    PROCEDURE GetTotalBuyBack@1100525010() : Decimal;
    BEGIN
      EXIT(TotalBuyBack);
    END;

    PROCEDURE CalcNonIndexedTotals@1100525011();
    BEGIN
      CLEAR(TotalWeight);
      CLEAR(TotalBuyBack);

      EstLineTotal.SETRANGE("Estimate No.", "Estimate No.");  //codeunit 11012153 sets filter on EstLineRec
      WITH EstLineTotal DO BEGIN
        IF FINDSET THEN BEGIN
          REPEAT
            TotalWeight := TotalWeight + "Cumulative Weight";
            TotalBuyBack := TotalBuyBack + "Cumulative Buy Back";
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE InitEstimateLine@1100525006(SaveOrig@1100525000 : Boolean);
    BEGIN
      InitRecord; // 34595.n

      "Object No." := '';
      "Object Customer" := '';
      "Service Order No." := '';

      "Purchase Route Reference" := '';
      "Assembly Project No." := '';
      IF SaveOrig = FALSE THEN BEGIN
        "Price Agreement" := FALSE;
        "Price Agreement (Sales)" := FALSE;  //DP00381
        "Norm Agreement" := FALSE;
        "Norm Agreement (Sales)" := FALSE;   //DP00381
      END;

      CLEAR("Purchase Action Mat.");
      CLEAR("Purchase Phase Mat.");
      CLEAR("Purchase Action Status Mat.");
      "Purch. Action Appr. Date Mat." := 0D;
      "Advised Mat." := FALSE;

      CLEAR("Purchase Action Subc.");
      CLEAR("Purchase Phase Subc.");
      CLEAR("Purchase Action Status Subc.");
      "Purch. Action Appr. Date Subc." := 0D;
      "Advised Subc." := FALSE;

      CLEAR("Purchase Action Plant");
      CLEAR("Purchase Phase Plant");
      CLEAR("Purchase Action Status Plant");
      "Purch. Action Appr. Date Plant" := 0D;
      "Advised Plant" := FALSE;

      //db, 21-02-11: disable BOM-Item data
      "Part of Line" := 0;
      "Original Quantity" := 0;
      "Level BOM" := 0;
      "BOM Item No." := '';
    END;

    LOCAL PROCEDURE GetRentalPeriodFromSet@1100525014();
    VAR
      EstimateLine2@1100525000 : Record 11072072;
    BEGIN
      IF "Attached to Line No." = 0 THEN
        EXIT;

      EstimateLine2.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Attached to Line No.");
      IF EstimateLine2."Set Code" = '' THEN
        EXIT;

      VALIDATE("Start Rental Period", EstimateLine2."Start Rental Period");
      VALIDATE("End Rental Period", EstimateLine2."End Rental Period");
      VALIDATE("Rental Period Formula", EstimateLine2."Rental Period Formula");
      VALIDATE("Rental Time Units", EstimateLine2."Rental Time Units");
    END;

    PROCEDURE CopyPartLineText@1100409005(EstLineRec@1100409003 : Record 11072072;PartLineRec@1100409004 : Record 11072076);
    VAR
      TextRec@1100485000 : Record 11020595;
      TextRec2@1100485001 : Record 11020595;
      CurrLino@1100525001 : Integer;
    BEGIN
      //DP00686
      IF NOT EstRec.GET(EstLineRec."Estimate No.") THEN EstRec.INIT;  //db, 09-06-15
      TextRec.SETRANGE("Table Name", TextRec."Table Name"::Estimate);
      TextRec.SETFILTER(Group, '%1', '');
      TextRec.SETFILTER("No.", '%1', '');
      TextRec.SETRANGE("Estimate No.", EstLineRec."Estimate No.");
      TextRec.SETRANGE("Sub-Estimate No.", EstLineRec."Sub-Estimate No.");
      TextRec.SETRANGE("Part Group", EstLineRec."Part Group");
      TextRec.SETRANGE(Part, EstLineRec.Part);
      TextRec.SETRANGE("Estimate Line No.", EstLineRec."Line No.");
      TextRec.SETRANGE("Recipe Line No.", 0);
      TextRec.SETRANGE("Part Line No.", 0);
      //TextRec.SETRANGE("Source Table", TextRec."Source Table"::PartLine);  //db, 17-02-15
      TextRec.DELETEALL;

      //TextRec.SETRANGE("Source Table");  //db, 17-02-15
      IF TextRec.FINDLAST THEN
        CurrLino := TextRec."Line No."
      ELSE
        CurrLino := 0;

      TextRec.SETRANGE("Part Group", PartLineRec."Part Group");
      TextRec.SETRANGE(Part, PartLineRec.Part);
      TextRec.SETRANGE("Part Line No.", PartLineRec."Line No.");
      TextRec.SETFILTER("Estimate No.", '%1', '');
      TextRec.SETFILTER("Sub-Estimate No.", '%1', '');
      TextRec.SETRANGE("Estimate Line No.", 0);
      //TextRec.SETRANGE("Source Table", TextRec."Source Table"::" ");  //db, 17-02-15
      IF EstRec."Language Code" <> '' THEN
        TextRec.SETFILTER("Language Code", '%1|%2', '', EstRec."Language Code");  //db, 24-02-15
      IF TextRec.FINDSET THEN BEGIN
        REPEAT
          TextRec2.COPY(TextRec);
          //TextRec2."Source Table" := TextRec2."Source Table"::PartLine;  //db, 17-02-15
          TextRec2."Created by" := USERID;
          TextRec2."Time Created" := TIME;

          TextRec2."Estimate No." := EstLineRec."Estimate No.";
          TextRec2."Sub-Estimate No." := EstLineRec."Sub-Estimate No.";
          TextRec2."Part Group" := EstLineRec."Part Group";
          TextRec2.Part := EstLineRec.Part;
          TextRec2."Estimate Line No." := EstLineRec."Line No.";
          TextRec2."Part Line No." := 0;
          CurrLino := CurrLino + 10000;
          TextRec2."Line No." := CurrLino;
          TextRec2.INSERT;
        UNTIL TextRec.NEXT = 0;
      END;
    END;

    PROCEDURE CopyItemText@1100409003();
    VAR
      TextRec@1100485000 : Record 11020595;
      TextRec2@1100485001 : Record 11020595;
      CurrLino@1100525001 : Integer;
      CommentLine@1100409000 : Record 97;
    BEGIN
      //DP00686
      IF "Line No." = 0 THEN EXIT;
      IF NOT EstRec.GET("Estimate No.") THEN EstRec.INIT;  //db, 09-06-15

      TextRec.SETRANGE("Table Name", TextRec."Table Name"::Estimate);
      TextRec.SETFILTER(Group, '%1', '');
      TextRec.SETFILTER("No.", '%1', '');
      TextRec.SETRANGE("Estimate No.", "Estimate No.");
      TextRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      TextRec.SETRANGE("Part Group", "Part Group");
      TextRec.SETRANGE(Part, Part);
      TextRec.SETRANGE("Estimate Line No.", "Line No.");
      TextRec.SETRANGE("Recipe Line No.", 0);
      TextRec.SETRANGE("Part Line No.", 0);
      //TextRec.SETRANGE("Source Table", TextRec."Source Table"::Item);  //db, 17-02-15
      IF EstRec."Language Code" <> '' THEN
        TextRec.SETFILTER("Language Code", '%1|%2', '', EstRec."Language Code");  //db, 22-05-15
      TextRec.DELETEALL;

      //TextRec.SETRANGE("Source Table");  //db, 17-02-15
      IF TextRec.FINDLAST THEN
        CurrLino := TextRec."Line No."
      ELSE
        CurrLino := 0;

      CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::Item);
      CommentLine.SETRANGE("No.", "Item No.");
      IF CommentLine.FINDSET THEN BEGIN
        REPEAT
          TextRec2.INIT;
          TextRec2."Table Name" := TextRec2."Table Name"::Estimate;
          //TextRec2."Source Table" := TextRec2."Source Table"::Item;  //db, 17-02-15
          TextRec2.Group := '';
          TextRec2."No." := '';

          TextRec2.Date := CommentLine.Date;
          TextRec2.Code := CommentLine.Code;
          TextRec2.Comment := CommentLine.Comment;
          TextRec2."Comment Code" := CommentLine."Comment Code";
          TextRec2."Language Code" := CommentLine."Language Code";  //db, 22-05-15
          TextRec2."Line Break" := CommentLine."Line Break";
          TextRec2."Created by" := USERID;
          TextRec2."Time Created" := TIME;

          TextRec2."Estimate No." := "Estimate No.";
          TextRec2."Sub-Estimate No." := "Sub-Estimate No.";
          TextRec2."Part Group" := "Part Group";
          TextRec2.Part := Part;
          TextRec2."Estimate Line No." := "Line No.";
          CurrLino := CurrLino + 10000;
          TextRec2."Line No." := CurrLino;
          TextRec2.INSERT;
        UNTIL CommentLine.NEXT = 0;
      END;
    END;

    PROCEDURE CopyRecipeText@1100485026();
    VAR
      TextRec@1100485000 : Record 11020595;
      TextRec2@1100485001 : Record 11020595;
      CurrLino@1100525001 : Integer;
    BEGIN
      //DP00686
      IF "Line No." = 0 THEN EXIT;
      IF NOT EstRec.GET(EstLineRec."Estimate No.") THEN EstRec.INIT;  //db, 09-06-15

      TextRec.SETRANGE("Table Name", TextRec."Table Name"::Estimate);
      TextRec.SETFILTER(Group, '%1', '');
      TextRec.SETFILTER("No.", '%1', '');
      TextRec.SETRANGE("Estimate No.", "Estimate No.");
      TextRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      TextRec.SETRANGE("Part Group", "Part Group");
      TextRec.SETRANGE(Part, Part);
      TextRec.SETRANGE("Estimate Line No.", "Line No.");
      TextRec.SETRANGE("Recipe Line No.", 0);
      TextRec.SETRANGE("Part Line No.", 0);
      //TextRec.SETRANGE("Source Table", TextRec."Source Table"::Recipe);  //db, 17-02-15
      TextRec.DELETEALL;

      //TextRec.SETRANGE("Source Table");  //db, 17-02-15
      IF TextRec.FINDLAST THEN
        CurrLino := TextRec."Line No."
      ELSE
        CurrLino := 0;

      TextRec.SETRANGE(Group, "Recipe Group");
      TextRec.SETRANGE("No.", Recipe);
      TextRec.SETFILTER("Estimate No.", '%1', '');
      TextRec.SETFILTER("Sub-Estimate No.", '%1', '');
      TextRec.SETFILTER("Part Group", '%1', '');
      TextRec.SETFILTER(Part, '%1', '');
      TextRec.SETRANGE("Estimate Line No.", 0);
      //TextRec.SETRANGE("Source Table", TextRec."Source Table"::" ");  //db, 17-02-15
      IF EstRec."Language Code" <> '' THEN
        TextRec.SETFILTER("Language Code", '%1|%2', '', EstRec."Language Code");  //db, 24-02-15
      IF TextRec.FINDSET THEN BEGIN
        REPEAT
          TextRec2.COPY(TextRec);
          //TextRec2."Source Table" := TextRec2."Source Table"::Recipe;  //db, 17-02-15
          TextRec2.Group := '';
          TextRec2."No." := '';

          TextRec2."Created by" := USERID;
          TextRec2."Time Created" := TIME;

          TextRec2."Estimate No." := "Estimate No.";
          TextRec2."Sub-Estimate No." := "Sub-Estimate No.";
          TextRec2."Part Group" := "Part Group";
          TextRec2.Part := Part;
          TextRec2."Estimate Line No." := "Line No.";
          CurrLino := CurrLino + 10000;
          TextRec2."Line No." := CurrLino;
          TextRec2.INSERT;
        UNTIL TextRec.NEXT = 0;
      END;
    END;

    PROCEDURE ExplodeRecipe@1100525015();
    VAR
      EstRcpLineRec@1100485004 : Record 11072075;
      EstChrgRec@1210190000 : Record 11229771;
      LastLino@1100485000 : Integer;
      CurrLevel@1100485001 : Integer;
    BEGIN
      //db, 08-10-10: M22182
      TmpRcpLineRec.DELETEALL;
      TmpChrgRec.DELETEALL;  //db, 28-03-11: M26527

      CurrLevel := -1;
      LastLino := 0;

      EstRcpLineRec.SETRANGE("Estimate No.", "Estimate No.");
      EstRcpLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      EstRcpLineRec.SETRANGE("Part Group", "Part Group");
      EstRcpLineRec.SETRANGE(Part, Part);
      EstRcpLineRec.SETRANGE("Estimate Line", "Line No.");
      IF EstRcpLineRec.FINDSET THEN BEGIN
        EstRcpLineRec.SetFromEstimateLineDelete(TRUE);  //db, 06-02-15
        REPEAT
          IF (EstRcpLineRec."Recipe (Child)" = '') OR (EstRcpLineRec."Recipe Exploded") THEN BEGIN  //db, 08-05-15: C023235
            TmpRcpLineRec.TRANSFERFIELDS(EstRcpLineRec);
            TmpRcpLineRec."Line No." := LastLino + 10000;
            LastLino := TmpRcpLineRec."Line No.";
            TmpRcpLineRec.INSERT;
          END ELSE BEGIN
            ProcessRecipeChild(EstRcpLineRec."Recipe Group (Child)", EstRcpLineRec."Recipe (Child)",
              EstRcpLineRec.Quantity, LastLino, CurrLevel, EstRcpLineRec);
          END;
          EstRcpLineRec.DELETE(TRUE);
        UNTIL EstRcpLineRec.NEXT = 0;
        EstRcpLineRec.SetFromEstimateLineDelete(FALSE);  //db, 06-02-15
      END;

      //db.sn, 28-03-11: M26527
      IF TmpChrgRec.FIND('-') THEN BEGIN
        REPEAT
          EstChrgRec := TmpChrgRec;
          EstChrgRec.INSERT;
        UNTIL TmpChrgRec.NEXT = 0;
      END;
      //db.en, 28-03-11: M26527

      EstRec.GET("Estimate No."); //db, 25-03-14: C013894 (DP00381)
      IF TmpRcpLineRec.FIND('-') THEN BEGIN
        REPEAT
          EstRcpLineRec := TmpRcpLineRec;
          EstRcpLineRec."Recipe Group" := "Recipe Group";
          EstRcpLineRec.Recipe := Recipe;
          IF TmpRcpLineRec."Rate Code" <> '' THEN
            EstRcpLineRec.VALIDATE("Rate Code", TmpRcpLineRec."Rate Code");
          //db.sn, 28-10-13: DP00381
          //EstRcpLineRec."Recipe Group (Child)" := '';
          //EstRcpLineRec."Recipe (Child)" := '';
          EstRcpLineRec.UpdateSalesQuantity;
          EstRcpLineRec.UpdateSalesNorm;
          //db.en, 28-10-13: DP00381
          //mg,sn, 10-10-12: C002271
          IF TmpRcpLineRec."Recipe Header" THEN BEGIN  //db, 24-06-14: C010709
            EstRcpLineRec."Norm Group" := '';
            EstRcpLineRec."Sub Operation Code" := '';
          END ELSE BEGIN
            EstRcpLineRec.DetermineNormGroup;
            EstRcpLineRec.VALIDATE("Sub Operation Code");
          END;
          //mg.en, 10-10-12: C002271
          //mg.sc, 06-12-06: C000053
          EstRcpLineRec.CalcItemSalesPriceAndDiscount(EstRec);  //db, 25-03-14: C013894 (DP00381)
          EstRcpLineRec.CalculateTotals;
          EstRcpLineRec.INSERT;
          IF EstRcpLineRec."Surcharge Type" <> EstRcpLineRec."Surcharge Type"::" " THEN
            EstRcpLineRec.CheckRecipeCharge;
          //mg.ec, 06-12-06: C000053
        UNTIL TmpRcpLineRec.NEXT = 0;
        CalculateTotals;  //DP00381
      END;
    END;

    PROCEDURE ProcessRecipeChild@1100525016(iRcpGrp@1100485000 : Code[20];iRcp@1100485001 : Code[20];iQuan@1100485004 : Decimal;VAR LastLino@1100485005 : Integer;VAR varLevel@1100485006 : Integer;EstRcpLineRec@1100485007 : Record 11072075);
    VAR
      RcpRec@1100485002 : Record 11020581;
      RcpLineRec@1100485003 : Record 11020582;
      ChrgRec1@1100525000 : Record 11229771;
      ChrgRec2@1100525001 : Record 11229771;
      TmpLineRec@1100525002 : TEMPORARY Record 11020582;
      HeaderLine@1100525003 : Integer;
    BEGIN
      //db, 08-10-10: M22182
      varLevel := varLevel + 1;
      IF RcpRec.GET(iRcpGrp, iRcp) THEN BEGIN
        TmpRcpLineRec.INIT;
        TmpRcpLineRec."Estimate No." := EstRcpLineRec."Estimate No.";
        TmpRcpLineRec."Sub-Estimate No." := EstRcpLineRec."Sub-Estimate No.";
        TmpRcpLineRec."Part Group" := EstRcpLineRec."Part Group";
        TmpRcpLineRec.Part := EstRcpLineRec.Part;
        TmpRcpLineRec."Estimate Line" := EstRcpLineRec."Estimate Line";
        TmpRcpLineRec."Recipe Group" := EstRcpLineRec."Recipe Group";
        TmpRcpLineRec.Recipe := EstRcpLineRec.Recipe;
        TmpRcpLineRec."Line No." := LastLino + 10000;
        LastLino := TmpRcpLineRec."Line No.";
        HeaderLine := TmpRcpLineRec."Line No.";  //db, 22-10-13: DP00381
        TmpRcpLineRec."Recipe Group (Child)" := iRcpGrp;
        TmpRcpLineRec."Recipe (Child)" := iRcp;
        TmpRcpLineRec."Recipe Header" := TRUE;
        TmpRcpLineRec."Recipe Exploded" := TRUE;  //db, 28-10-13: DP00381
        TmpRcpLineRec."Recipe Level" := varLevel;
        TmpRcpLineRec.Description := RcpRec.Description;
        TmpRcpLineRec."Unit of Measure" := RcpRec."Unit of Measure";
        TmpRcpLineRec.VALIDATE("Rate Code", '');
        IF TmpRcpLineRec.INSERT THEN
          TmpRcpLineRec.Quantity := 0;
        TmpRcpLineRec.Quantity := TmpRcpLineRec.Quantity + iQuan;
        TmpRcpLineRec."Ignore Recipe Quantity" := EstRcpLineRec."Ignore Recipe Quantity"; //mg, 19-09-11: M27994
        TmpRcpLineRec.MODIFY;
      END;

      RcpLineRec.SETRANGE("Recipe Group", iRcpGrp);
      RcpLineRec.SETRANGE(Recipe, iRcp);
      IF RcpLineRec.FINDSET THEN BEGIN
        REPEAT
          TmpRcpLineRec.TRANSFERFIELDS(RcpLineRec);
          TmpRcpLineRec."Estimate No." := EstRcpLineRec."Estimate No.";
          TmpRcpLineRec."Sub-Estimate No." := EstRcpLineRec."Sub-Estimate No.";
          TmpRcpLineRec."Part Group" := EstRcpLineRec."Part Group";
          TmpRcpLineRec.Part := EstRcpLineRec.Part;
          TmpRcpLineRec."Estimate Line" := EstRcpLineRec."Estimate Line";
          IF RcpLineRec."Recipe (Child)" <> '' THEN BEGIN
            IF NOT TmpRcpLineRec."Ignore Recipe Quantity" THEN //mg, 19-09-11: M27994
              ProcessRecipeChild(RcpLineRec."Recipe Group (Child)", RcpLineRec."Recipe (Child)",
                iQuan * RcpLineRec.Quantity, LastLino, varLevel, EstRcpLineRec)
            ELSE
              ProcessRecipeChild(RcpLineRec."Recipe Group (Child)", RcpLineRec."Recipe (Child)",
                RcpLineRec.Quantity, LastLino, varLevel, EstRcpLineRec);
          END ELSE BEGIN
            TmpRcpLineRec."Recipe Group" := EstRcpLineRec."Recipe Group";
            TmpRcpLineRec.Recipe := EstRcpLineRec.Recipe;
            TmpRcpLineRec."Line No." := LastLino + 10000;
            LastLino := TmpRcpLineRec."Line No.";
            TmpRcpLineRec."Attached to Line No." := HeaderLine;  //db, 22-10-13: DP00381 (original reserved for sets)
            TmpRcpLineRec."Recipe Group (Child)" := iRcpGrp;
            TmpRcpLineRec."Recipe (Child)" := iRcp;
            TmpRcpLineRec."Recipe Header" := FALSE;
            TmpRcpLineRec."Recipe Level" := varLevel + 1;
            //db.sn, 11-12-12: C003018
            //TmpRcpLineRec."Ignore Recipe Quantity" :=
            //  TmpRcpLineRec."Ignore Recipe Quantity" OR EstRcpLineRec."Ignore Recipe Quantity";  //mg, 19-09-11: M27994
            //db.en, 11-12-12: C003018
            IF TmpRcpLineRec.INSERT THEN
              TmpRcpLineRec.Quantity := 0;
            IF RcpLineRec."Surcharge Type" <> RcpLineRec."Surcharge Type"::" " THEN
              RcpLineRec.Quantity := RcpLineRec.Quantity * RcpLineRec."Surcharge %"/100;
            IF NOT TmpRcpLineRec."Ignore Recipe Quantity" THEN //mg, 19-09-11: M27994
              TmpRcpLineRec.Quantity := TmpRcpLineRec.Quantity + iQuan * RcpLineRec.Quantity
            ELSE
              TmpRcpLineRec.Quantity := TmpRcpLineRec.Quantity + RcpLineRec.Quantity;
            TmpRcpLineRec."Ignore Recipe Quantity" :=
              TmpRcpLineRec."Ignore Recipe Quantity" OR EstRcpLineRec."Ignore Recipe Quantity";  //db, 11-12-12: C003018
            IF TmpRcpLineRec."Rate Code" = '' THEN
              TmpRcpLineRec."Rate Code" := EstRec."Rate Code";  //db, 07-03-13: C006069
            //DP00594.sn
            TmpRcpLineRec.InitSurcharge(FALSE);
            GetEstimate(TmpRcpLineRec."Estimate No.", FALSE);
            IF EstRec."Apply Surcharge Recipe" THEN BEGIN
              IF RcpLineRec."Surcharge % Labor" <> 0 THEN
                TmpRcpLineRec."Surcharge % Labor" := RcpLineRec."Surcharge % Labor";
              IF RcpLineRec."Surcharge % Price" <> 0 THEN
                TmpRcpLineRec."Surcharge % Price" := RcpLineRec."Surcharge % Price";
            END;
            //DP00594.sn
            TmpRcpLineRec.MODIFY;

            //search original surcharge line:
            IF RcpLineRec."Surcharge Type" = RcpLineRec."Surcharge Type"::" " THEN BEGIN
              TmpLineRec := RcpLineRec;
              TmpLineRec.Quantity := LastLino;
              TmpLineRec.INSERT;
            END ELSE BEGIN
              ChrgRec1.SETCURRENTKEY("Recipe Group", Recipe);
              ChrgRec1.SETFILTER("Estimate No.", '%1', '');
              ChrgRec1.SETFILTER("Sub-Estimate No.", '%1', '');
              ChrgRec1.SETFILTER("Part Group", '%1', '');
              ChrgRec1.SETFILTER(Part, '%1', '');
              ChrgRec1.SETRANGE("Recipe Line", 0);
              ChrgRec1.SETRANGE("Recipe Group", RcpLineRec."Recipe Group");
              ChrgRec1.SETRANGE(Recipe, RcpLineRec.Recipe);
              ChrgRec1.SETRANGE("Surcharge Line", RcpLineRec."Line No.");
              IF ChrgRec1.FINDSET(FALSE, FALSE) THEN BEGIN
                REPEAT
                  ChrgRec2.INIT;
                  ChrgRec2."Estimate No." := EstRcpLineRec."Estimate No.";
                  ChrgRec2."Sub-Estimate No." := EstRcpLineRec."Sub-Estimate No.";
                  ChrgRec2."Part Group" := EstRcpLineRec."Part Group";
                  ChrgRec2.Part := EstRcpLineRec.Part;
                  ChrgRec2."Recipe Group" := EstRcpLineRec."Recipe Group";
                  ChrgRec2.Recipe := EstRcpLineRec.Recipe;
                  ChrgRec2."Recipe Line" := EstRcpLineRec."Estimate Line";
                  TmpLineRec.SETRANGE("Line No.", ChrgRec1."Basic Line");
                  IF TmpLineRec.FINDFIRST THEN
                    ChrgRec2."Basic Line" := TmpLineRec.Quantity
                  ELSE
                    ChrgRec2."Basic Line" := 0;
                  ChrgRec2."Surcharge Line" := TmpRcpLineRec."Line No.";
                  //db.sn, 28-03-11: M26527
                  //ChrgRec2.INSERT;
                  TmpChrgRec := ChrgRec2;
                  TmpChrgRec.INSERT;
                  //db.en, 28-03-11: M26527
                UNTIL ChrgRec1.NEXT = 0;
              END;
            END;
          END;
        UNTIL RcpLineRec.NEXT = 0;
      END;
      varLevel := varLevel - 1;
    END;

    PROCEDURE ChangeQuantityExplodedLines@1100525018(QuantityFactor@1100525000 : Decimal);
    VAR
      EstimateLine2@1100525001 : Record 11072072;
    BEGIN
      //**4PS
      EstimateLine2.RESET;
      EstimateLine2.SETRANGE("Project No.","Project No.");
      EstimateLine2.SETRANGE("Part of Line","Line No.");
      EstimateLine2.SETFILTER("Line No.", '<>%1', "Line No.");
      IF EstimateLine2.FINDSET(TRUE, FALSE) THEN
        REPEAT
          IF NOT ((EstimateLine2."Item No." = '') AND (EstimateLine2."Original Quantity" = 0)) THEN BEGIN
            IF EstimateLine2."Item No." = '' THEN BEGIN
              EstimateLine2.ChangeQuantityExplodedLines(QuantityFactor);
              EstimateLine2."Original Quantity" := QuantityFactor * EstimateLine2."Original Quantity";
            END ELSE
              EstimateLine2.VALIDATE(Quantity, QuantityFactor * EstimateLine2.Quantity);
            EstimateLine2.MODIFY;
          END;
        UNTIL EstimateLine2.NEXT = 0;
    END;

    PROCEDURE CalculateSalesDiscount@1100525017(lvEstRec@1100525001 : Record 11012151);
    VAR
      lvRefDate@1100525005 : Date;
      lvDiscRef1@1100525004 : Code[20];
      lvDiscRef2@1100525003 : Code[20];
      lvRefPrio@1100525002 : Code[10];
      lvDiscType@1100525000 : 'Purchase,Sales';
    BEGIN
      //mg, 12-11-10: M23481
      //IF lvEstRec."Estimate Type" = lvEstRec."Estimate Type"::Sales THEN BEGIN  //db, 28-10-13: DP00381
        GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, lvEstRec, lvDiscType::Sales);
        lvRefPrio := ValidateCu.GetRefPrioEstimate(lvEstRec, lvDiscType::Sales);
        "Sales Condition Present" := ValidateCu.GetSalesDiscount(  //db, 27-05-14: C015604
          lvEstRec."Customer No.", "Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)",
          "Nett Sales Price", "Sales Discount %", "Gross Price", lvRefDate, lvEstRec."Customer Disc. Group",
          lvDiscRef1, lvDiscRef2, lvRefPrio);
      //END;
        //>> LAHE 130507 (same call but with PriceHistVendorNo)
        // this fn isnt used in the table.. MESSAGE('CalcSalesDisc: "%1" "%2"',"Price History Vendor No.","Sales Discount %");
        IF ("Sales Discount %" = 0) AND ("Price History Vendor No." <> '') THEN BEGIN
          "Sales Condition Present" := ValidateCu.GetSalesDiscount(  //db, 27-05-14: C015604
            lvEstRec."Customer No.", "Item No.", "Basic Item", "Trade Item", Manufacturer, "Price History Vendor No.",
            "Nett Sales Price", "Sales Discount %", "Gross Price", lvRefDate, lvEstRec."Customer Disc. Group",
            lvDiscRef1, lvDiscRef2, lvRefPrio);
        END;
        //<< LAHE 130507
      CalculateTotals;
    END;

    PROCEDURE DetermineBOMLevel@1100525019(LineNo@1100525000 : Integer;VAR BOMLevel@1100525002 : Integer);
    VAR
      EstimateLine3@1100525003 : Record 11072072;
    BEGIN
      //**4PS
      EstimateLine3.SETRANGE("Estimate No.","Estimate No.");
      EstimateLine3.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
      EstimateLine3.SETRANGE("Part Group","Part Group");
      EstimateLine3.SETRANGE(Part,Part);
      EstimateLine3.SETRANGE("Line No.",LineNo);
      IF EstimateLine3.FINDFIRST THEN
        BOMLevel := EstimateLine3."Level BOM" + 1;
    END;

    PROCEDURE GetEstimate@1210190018(EstimateNo@1210190000 : Code[20];CatchRead@1210190001 : Boolean);
    BEGIN
      //Call 23762
      IF (EstRec."No." = EstimateNo) THEN
        EXIT;

      IF CatchRead THEN BEGIN
        IF NOT EstRec.GET(EstimateNo) THEN
          EstRec.INIT;
      END ELSE
        EstRec.GET(EstimateNo);
    END;

    PROCEDURE GetSubEstimate@1210190016(EstimateNo@1210190000 : Code[20];SubEstimateNo@1210190002 : Code[20];CatchRead@1210190001 : Boolean) : Boolean;
    BEGIN
      //Call 23762
      IF (SubEstRec."Estimate No." = EstimateNo) AND (SubEstRec."Sub-Estimate No." = SubEstimateNo) THEN
        EXIT(TRUE);  //db, 09-02-11: M32143

      IF CatchRead THEN BEGIN
        SubEstPresent := SubEstRec.GET(EstimateNo, SubEstimateNo);
        IF NOT SubEstPresent THEN
          SubEstRec.INIT;
      END ELSE
        SubEstPresent := SubEstRec.GET(EstimateNo, SubEstimateNo);

      EXIT(SubEstPresent);
    END;

    PROCEDURE GetRate@1210190015() : Boolean;
    BEGIN
      //Call 23762
      IF "Rate Code" = '' THEN
        EXIT(FALSE);

      //IF (RateRec."Estimate No." <> "Estimate No.") OR (RateRec."Rate Code" <> "Rate Code") THEN  //db, 15-04-13: C005855
        RatePresent := RateRec.GET("Estimate No.","Rate Code");

      EXIT(RatePresent);
    END;

    PROCEDURE GetDeliverableQuantity@1210190020(OrigQuan@1210190000 : Decimal) : Decimal;
    VAR
      NextQuan@1100525001 : Decimal;
      UnitFactor@1100525002 : Decimal;
      NextFactor@1100525003 : Decimal;
      ItemUnitRec@1100525004 : Record 5404;
    BEGIN
      //X007
      IF (OrigQuan <= 0) THEN
        EXIT(OrigQuan);

      IF ("Trade Item" = '') THEN BEGIN
        IF ItemRec.GET("Item No.") THEN BEGIN
          IF ItemUnitRec.GET("Item No.", "Unit of Measure") THEN BEGIN
            EXIT(OrigQuan * ItemUnitRec."Qty. per Unit of Measure");
          END;
        END;
        EXIT(OrigQuan);
      END;

      IF NOT TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN
        EXIT(OrigQuan);

      IF TradeItemRec."Application Unit Quantity" = 0 THEN
        TradeItemRec."Application Unit Quantity" := 1;
      IF TradeItemRec."Minimum Order Quantity" = 0 THEN
        TradeItemRec."Minimum Order Quantity" := 1;
      IF TradeItemRec."Lot Size Quantity" = 0 THEN
        TradeItemRec."Lot Size Quantity" := 1;
      UnitFactor := TradeItemRec."Application Unit Quantity" * TradeItemRec."Minimum Order Quantity";
      IF TradeItemRec."Application Unit Quantity" = 1 THEN
        NextFactor := TradeItemRec."Lot Size Quantity"
      ELSE
        NextFactor := UnitFactor;

      IF UnitFactor > 1 THEN BEGIN
        NextQuan := UnitFactor;
        IF OrigQuan <= NextQuan THEN
          EXIT( NextQuan);
        REPEAT
          NextQuan := NextQuan + NextFactor;
        UNTIL NextQuan >= OrigQuan;
        EXIT( NextQuan);
      END;

      EXIT( ROUND(OrigQuan, TradeItemRec."Lot Size Quantity", '>'));
    END;

    PROCEDURE InitNormPrice@1210190021();
    BEGIN
       //db, 29-11-11
       Norm := 0;
       "Norm (Sales)" := 0;
       "Production Rate" := 0;
       "Nett Cost Price" := 0;
       "Purchase Discount %" := 0;
       "Gross Price" := 0;
       "Nett Sales Price" := 0;
       "Sales Discount %" := 0;
    END;

    PROCEDURE UpdateProjPlanActCode@1210190022();
    VAR
      lvRcpLineRec@1100485001 : Record 11072075;
    BEGIN
      lvRcpLineRec.SETRANGE("Estimate No.", "Estimate No.");
      lvRcpLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      lvRcpLineRec.SETRANGE("Part Group", "Part Group");
      lvRcpLineRec.SETRANGE(Part, Part);
      lvRcpLineRec.SETRANGE("Estimate Line", "Line No.");
      lvRcpLineRec.SETFILTER("Project Planning Activity Code", '%1|%2', '', xRec."Project Planning Activity Code");
      IF lvRcpLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          lvRcpLineRec.VALIDATE("Project Planning Activity Code", "Project Planning Activity Code");
          lvRcpLineRec.MODIFY;
        UNTIL lvRcpLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateExtensionContract@1100525021();
    VAR
      lvRcpLineRec@1100485001 : Record 11072075;
    BEGIN
      //db, 12-11-13: DP00260 (13440)
      lvRcpLineRec.SETRANGE("Estimate No.", "Estimate No.");
      lvRcpLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      lvRcpLineRec.SETRANGE("Part Group", "Part Group");
      lvRcpLineRec.SETRANGE(Part, Part);
      lvRcpLineRec.SETRANGE("Estimate Line", "Line No.");
      lvRcpLineRec.SETFILTER("Extension Contract", '%1|%2', '', xRec."Extension Contract");
      IF lvRcpLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF lvRcpLineRec."Project No." <> '' THEN
            lvRcpLineRec.VALIDATE("Extension Contract", "Extension Contract");
          lvRcpLineRec.MODIFY;
        UNTIL lvRcpLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE InitRecord@1210190023();
    VAR
      BaseActRec@1100409000 : Record 11012434;
      Estimate@1100528600 : Record 11012151;
    BEGIN
      // 34595.n
      IF EstPartRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part) THEN BEGIN
        "Project No." := EstPartRec."Project No.";
        IF NOT ElemRec.GET(Element) THEN  //db, 28-09-12: C002764
          Element := EstPartRec.Element;
        IF "Project No." <> '' THEN
          "Extension Contract" := EstPartRec."Extension Contract";  //DP00260
        IF NOT BaseActRec.GET("Project Planning Activity Code") THEN
          "Project Planning Activity Code" := EstPartRec."Project Planning Activity Code";
      END;
      IF "Currency Code" = '' THEN
        IF Estimate.GET("Estimate No.") THEN
          "Currency Code" := Estimate."Currency Code";
      InitSurcharge(FALSE);  //DP00381
    END;

    PROCEDURE UpdateLineTotals@1100528901();
    BEGIN
      //DP00381
      //IF NOT EstLineRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Line No.") THEN EXIT;  //db, 05-08-14: C016233
      IF "Line No."= 0 THEN EXIT;  //db, 20-02-15: C021576

      IF "Part Quantity" = 0 THEN BEGIN  //db, 09-09-13: C005143
        //disable totals for flowfields SubEst+Part (on Chapter+Paragraph)
        Hours := 0;
        "Hours (Sales)" := 0;
        "Labor Cost Amount" := 0;
        "Labor Cost Amount (FCY)" := 0;
        "Labor Sales Amount" := 0;
        "Labor Sales Amount (FCY)" := 0;
        "Material Cost Amount" := 0;
        "Material Cost Amount (FCY)" := 0;
        "Material Sales Amount" := 0;
        "Material Sales Amount (FCY)" := 0;
        "Subcontracting Cost Amount" := 0;
        "Subcontr. Cost Amount (FCY)" := 0;
        "Subcontracting Sales Amount" := 0;
        "Subcontr. Sales Amount (FCY)" := 0;
        "Plant Cost Amount" := 0;
        "Plant Cost Amount (FCY)" := 0;
        "Plant Sales Amount" := 0;
        "Plant Sales Amount (FCY)" := 0;
        "Sundry Cost Amount" := 0;
        "Sundry Cost Amount (FCY)" := 0;
        "Sundry Sales Amount" := 0;
        "Sundry Sales Amount (FCY)" := 0;
        "Cost Amount" := 0;
        "Cost Amount (FCY)" := 0;
        "Sales Amount" := 0;
        "Sales Amount (FCY)" := 0;
        Weight := 0;
        "Buy Back Amount" := 0;
        "Buy Back Amount (FCY)" := 0;
      END;

      IF NOT EstLineTotal.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Line No.") THEN BEGIN
        EstLineTotal.INIT;
        EstLineTotal."Estimate No." := "Estimate No.";
        EstLineTotal."Sub-Estimate No." := "Sub-Estimate No.";
        EstLineTotal."Part Group" := "Part Group";
        EstLineTotal.Part := Part;
        EstLineTotal."Line No." := "Line No.";
        EstLineTotal.INSERT;
      END;
      EstLineTotal.Chapter := Chapter;
      EstLineTotal.Paragraph := Paragraph;
      EstLineTotal."Chapter (Sub-Estimate)" := "Chapter (Sub-Estimate)";
      EstLineTotal."Paragraph (Sub-Estimate)" := "Paragraph (Sub-Estimate)";

      //DP01047.sn
      IF "Cost Type (Hours)" = "Cost Type (Hours)"::Labor THEN BEGIN
        EstLineTotal.Hours := Hours;
        EstLineTotal."Hours (Sales)" := "Hours (Sales)";
      END ELSE BEGIN
        IF Recipe <> '' THEN BEGIN
          CALCFIELDS("Hours Recipe (Cost)", "Hours Recipe (Sales)");
          EstLineTotal.Hours := "Hours Recipe (Cost)";
          EstLineTotal."Hours (Sales)" := "Hours Recipe (Sales)";
        END ELSE BEGIN
          EstLineTotal.Hours := 0;
          EstLineTotal."Hours (Sales)" := 0;
        END;
      END;
      EstLineTotal."Cumulative Hours" := EstLineTotal.Hours * "Part Quantity";
      EstLineTotal."Cumulative Hours (Sales)" := EstLineTotal."Hours (Sales)" * "Part Quantity";
      //DP01047.en

      EstLineTotal."Cumulative Labor" := "Labor Cost Amount" * "Part Quantity";
      EstLineTotal."Cumulative Labor (FCY)" := "Labor Cost Amount (FCY)" * "Part Quantity";
      EstLineTotal."Cumulative Labor (Sales)" := "Labor Sales Amount" * "Part Quantity";
      EstLineTotal."Cumulative Labor (Sales) (FCY)" := "Labor Sales Amount (FCY)" * "Part Quantity";
      EstLineTotal."Cumulative Material" := "Material Cost Amount" * "Part Quantity";
      EstLineTotal."Cumulative Material (FCY)" := "Material Cost Amount (FCY)" * "Part Quantity";
      EstLineTotal."Cumulative Material (Sales)" := "Material Sales Amount" * "Part Quantity";
      EstLineTotal."Cum. Material (Sales) (FCY)" := "Material Sales Amount (FCY)" * "Part Quantity";
      EstLineTotal."Cumulative Subcontracting" := "Subcontracting Cost Amount" * "Part Quantity";
      EstLineTotal."Cum. Subcontracting (FCY)" := "Subcontr. Cost Amount (FCY)" * "Part Quantity";
      EstLineTotal."Cumulative Subcontr. (Sales)" := "Subcontracting Sales Amount" * "Part Quantity";
      EstLineTotal."Cum. Subcontr. (Sales) (FCY)" := "Subcontr. Sales Amount (FCY)" * "Part Quantity";
      EstLineTotal."Cumulative Plant" := "Plant Cost Amount" * "Part Quantity";
      EstLineTotal."Cumulative Plant (FCY)" := "Plant Cost Amount (FCY)" * "Part Quantity";
      EstLineTotal."Cumulative Plant (Sales)" := "Plant Sales Amount" * "Part Quantity";
      EstLineTotal."Cumulative Plant (Sales) (FCY)" := "Plant Sales Amount (FCY)" * "Part Quantity";
      EstLineTotal."Cumulative Sundry" := "Sundry Cost Amount" * "Part Quantity";
      EstLineTotal."Cumulative Sundry (FCY)" := "Sundry Cost Amount (FCY)" * "Part Quantity";
      EstLineTotal."Cumulative Sundry (Sales)" := "Sundry Sales Amount" * "Part Quantity";
      EstLineTotal."Cum. Sundry (Sales) (FCY)" := "Sundry Sales Amount (FCY)" * "Part Quantity";
      EstLineTotal."Cumulative Total" := "Cost Amount" * "Part Quantity";
      EstLineTotal."Cumulative Total (FCY)" := "Cost Amount (FCY)" * "Part Quantity";
      EstLineTotal."Cumulative Total (Sales)" := "Sales Amount" * "Part Quantity";
      EstLineTotal."Cumulative Total (Sales) (FCY)" := "Sales Amount (FCY)" * "Part Quantity";
      EstLineTotal."Cumulative Weight" := "Total Weight" * "Part Quantity";
      EstLineTotal."Cumulative Buy Back" := "Buy Back Amount" * "Part Quantity";
      EstLineTotal."Cumulative Buy Back (FCY)" := "Buy Back Amount (FCY)" * "Part Quantity";
      EstLineTotal.MODIFY;
    END;

    PROCEDURE UpdateSalesQuantity@1100528904();
    BEGIN
      //DP00381
      IF CalledFromUpdateTotals THEN EXIT;  //db, 26-02-15: C021215
      //IF (xRec.Quantity = "Quantity (Sales)") OR ("Quantity (Sales)" = 0) THEN //C026842.o
      IF (NOT "Deviating Sales Quantity") THEN //C026842.n
        "Quantity (Sales)" := Quantity;
    END;

    PROCEDURE UpdateSalesNorm@1100528905();
    BEGIN
      //DP00381
      IF (xRec.Norm = "Norm (Sales)") OR ("Norm (Sales)" = 0) THEN BEGIN
        "Norm (Sales)" := Norm;
        IF "Norm (Sales)" <> 0 THEN
          "Production Rate (Sales)" := 1 / "Norm (Sales)"
        ELSE
          "Production Rate (Sales)" := 0;
      END;
    END;

    PROCEDURE ProcessCostObject@1100528906(iAction@1210190000 : Integer;iCostType@1100528900 : Integer;iCostObject@1100528901 : Code[20]);
    VAR
      DimValRec@1100528902 : Record 349;
    BEGIN
      //DP00381
      IF (Recipe <> '') THEN EXIT;  //db, 30-01-15

      IF iAction = 1 THEN BEGIN   //validate
        IF iCostObject <> '' THEN BEGIN
          DimValRec.RESET;
          DimValRec.SETRANGE("Global Dimension No.",2);
          DimValRec.SETRANGE(Code, iCostObject);
          IF iCostType = 0 THEN BEGIN
            DimValRec.SETRANGE("Cost Type", DimValRec."Cost Type"::Labor);
          END ELSE BEGIN
            IF "Cost Type (Price)" = "Cost Type (Price)"::" " THEN
              DimValRec.SETRANGE("Cost Type", DimValRec."Cost Type"::Material, DimValRec."Cost Type"::Sundry)
            ELSE
              DimValRec.SETRANGE("Cost Type","Cost Type (Price)");
          END;
          DimValRec.FINDFIRST;
          IF iCostType <> 0 THEN
            IF "Item No." + "Basic Item" + "Trade Item" <> '' THEN
              DimValRec.TESTFIELD("Cost Type", DimValRec."Cost Type"::Material);
          DetermineCostObject(DimValRec);
        END;
      END;

      IF iAction = 2 THEN BEGIN   //lookup
        DimValRec.RESET;
        DimValRec.Code := iCostObject;
        DimValRec.SETRANGE("Global Dimension No.",2);
        IF iCostType = 0 THEN BEGIN
          DimValRec.SETRANGE("Cost Type", DimValRec."Cost Type"::Labor);
        END ELSE BEGIN
          IF "Cost Type (Price)" = "Cost Type (Price)"::" " THEN
            DimValRec.SETRANGE("Cost Type", DimValRec."Cost Type"::Material, DimValRec."Cost Type"::Sundry)
          ELSE
            DimValRec.SETRANGE("Cost Type","Cost Type (Price)");
        END;
        IF PAGE.RUNMODAL(PAGE::"Cost Object List", DimValRec) = ACTION::LookupOK THEN BEGIN
          iCostObject := DimValRec.Code;
          ProcessCostObject(1, iCostType, iCostObject);
        END;
      END;
    END;

    LOCAL PROCEDURE DetermineCostObject@1210190001(DimValRec@1100528900 : Record 349);
    BEGIN
      //DP00381
      IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN BEGIN
        VALIDATE("Cost Object Labor", DimValRec.Code);
      END ELSE BEGIN
        VALIDATE("Cost Type (Price)", DimValRec."Cost Type");
        VALIDATE("Cost Object Price", DimValRec.Code);
      END;

      CheckCostObject(DimValRec.Code);
      IF "Item No." + "Basic Item" + "Trade Item" = '' THEN BEGIN
        IF "Sub Operation Code" <> '' THEN BEGIN
          IF EstRec."Estimate Based On" = EstRec."Estimate Based On"::CostObject THEN  //db, 30-03-15: C020300
            ProcessSubOperation;
        END ELSE BEGIN
          IF EstRec."Estimate Based On" = EstRec."Estimate Based On"::CostObject THEN  //db, 26-08-14: C017158
            Description := DimValRec.Name;
        END;
      END;
    END;

    PROCEDURE GetMargin@1100528908(iSalesPrice@1100525000 : Decimal;iCostPrice@1100525001 : Decimal) Result : Decimal;
    BEGIN
      //DP00381
      IF (iSalesPrice <> 0)  THEN
        Result := ROUND(100*(iSalesPrice - iCostPrice)/iSalesPrice)
      ELSE
        Result := 0;

      EXIT(Result);
    END;

    PROCEDURE GetMarkup@1100528907(iSalesPrice@1100525000 : Decimal;iCostPrice@1100525001 : Decimal) Result : Decimal;
    BEGIN
      //DP00381: not implemented
      IF (iCostPrice <> 0)  THEN
        Result := ROUND(100*(iSalesPrice - iCostPrice)/iCostPrice)
      ELSE
        Result := 0;

      EXIT(Result);
    END;

    PROCEDURE InitSurcharge@1100528911(SwitchCostType@1100528900 : Boolean);
    BEGIN
      //DP00381
      IF "Surcharge Type" <> "Surcharge Type"::" " THEN EXIT;
      IF Recipe <> '' THEN EXIT;

      IF EstPartRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part) THEN BEGIN
        IF SwitchCostType = FALSE THEN
          "Surcharge % Labor" := EstPartRec."Surcharge % Labor";
        IF "Cost Type (Price)" = "Cost Type (Price)"::Material THEN BEGIN
          "Surcharge % Price" :=  EstPartRec."Surcharge % Material";
          CheckSurchargeMaterialPrice;  //db, 12-08-13: C005338
        END;
        IF "Cost Type (Price)" = "Cost Type (Price)"::Subcontracting THEN
          "Surcharge % Price" := EstPartRec."Surcharge % Subcontracting";
        IF "Cost Type (Price)" = "Cost Type (Price)"::Plant THEN
          "Surcharge % Price" := EstPartRec."Surcharge % Plant";
        IF "Cost Type (Price)" = "Cost Type (Price)"::Sundry THEN
          "Surcharge % Price" := EstPartRec."Surcharge % Sundry";
      END;
    END;

    PROCEDURE CheckSurchargeMaterialPrice@1100528912();
    VAR
      ProjSetup@1100528900 : Record 315;
      PriceHistRec@1100528902 : Record 11012315;
      RefDate@1100528901 : Date;
    BEGIN
      //DP00381
      IF "Cost Type (Price)" = "Cost Type (Price)"::Material THEN BEGIN
        ProjSetup.GET;
        IF ProjSetup."Apply Surch. MatPriceZero Only" THEN BEGIN  //db, 12-08-13: C005338
          //db.sn, 27-05-14: C015604
          IF "Trade Item" + "Basic Item" + "Item No." <> '' THEN BEGIN
            IF "Sales Condition Present" THEN
              "Surcharge % Price" := 0;
          END;
          //RefDate := ValidateCu.GetRefDateEstimate(EstRec);
          //IF "Trade Item" <> '' THEN BEGIN
          //  PriceHistRec.SETRANGE(Vendor, "Vendor (Trade Item)");
          //  PriceHistRec.SETRANGE("Item Code", "Trade Item");
          //  PriceHistRec.SETRANGE("Starting Date", 0D, RefDate);
          //  IF NOT PriceHistRec.FINDLAST THEN PriceHistRec.INIT;
          //  IF PriceHistRec."Gross Price" <> 0 THEN
          //    "Surcharge % Price" := 0;
          //END ELSE BEGIN
          //  IF "Item No." + "Basic Item" <> '' THEN
          //    "Surcharge % Price" := 0;
          //END;
          //db.en, 27-05-14: C015604
        END;
      END;
    END;

    PROCEDURE GetPartTotals@1100528913(VAR EstPartRec@1100528900 : Record 11072073;VAR TotalPartCost@1100528901 : Decimal;VAR TotalPartSales@1100528903 : Decimal;VAR TotalPartGross@1100528902 : Decimal);
    BEGIN
      //DP00381
      IF NOT EstPartRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part) THEN EstPartRec.INIT;
      EstPartRec.CALCFIELDS(
        "Hours Part", "Hours Sales Part",
        "Labor Part", "Labor Sales Part",
        "Material Part", "Material Sales Part", "Gross Price Part",
        "Subcontracting Part", "Subcontracting Sales Part", "Gross Price Part (Subc)",
        "Plant Part", "Plant Sales Part", "Gross Price Part (Plant)",
        "Sundry Part", "Sundry Sales Part", "Gross Price Part (Sundry)");

      TotalPartCost := EstPartRec."Labor Part" + EstPartRec."Material Part" +
        EstPartRec."Subcontracting Part" + EstPartRec."Plant Part" + EstPartRec."Sundry Part";
      TotalPartSales := EstPartRec."Labor Sales Part" + EstPartRec."Material Sales Part" +
        EstPartRec."Subcontracting Sales Part" + EstPartRec."Plant Sales Part" + EstPartRec."Sundry Sales Part";
      TotalPartGross := EstPartRec."Labor Part" + EstPartRec."Gross Price Part" +
        EstPartRec."Gross Price Part (Subc)" + EstPartRec."Gross Price Part (Plant)" + EstPartRec."Gross Price Part (Sundry)";
    END;

    PROCEDURE ChargePresent@1100528914(VAR chrg0@1100528900 : Boolean;VAR chrg1@1100528901 : Boolean;VAR chrg2@1100528902 : Boolean;VAR chrg3@1100528903 : Boolean;VAR chrg4@1100528904 : Boolean;VAR chrg5@1100528906 : Boolean);
    VAR
      ChrgRec@1100528905 : Record 11229771;
    BEGIN
      //DP00381
      chrg0 := FALSE;
      chrg1 := FALSE;
      chrg2 := FALSE;
      chrg3 := FALSE;
      chrg4 := FALSE;
      chrg5 := FALSE;

      ChrgRec.RESET;
      ChrgRec.SETRANGE("Estimate No.", "Estimate No.");
      ChrgRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      ChrgRec.SETRANGE("Part Group", "Part Group");
      ChrgRec.SETRANGE(Part, Part);
      ChrgRec.SETRANGE("Recipe Line", 0);
      ChrgRec.SETRANGE("Recipe Group", '');
      ChrgRec.SETRANGE(Recipe, '');
      ChrgRec.SETRANGE("Basic Line", "Line No.");
      ChrgRec.SETRANGE("Surcharge Line");
      IF ChrgRec.FINDSET THEN BEGIN
        REPEAT
          IF EstLineRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, ChrgRec."Surcharge Line") THEN BEGIN
            CASE EstLineRec."Surcharge Type" OF
              EstLineRec."Surcharge Type"::Labor:
                chrg1 := TRUE;
              EstLineRec."Surcharge Type"::Material:
                chrg2 := TRUE;
              EstLineRec."Surcharge Type"::Subcontracting:
                chrg3 := TRUE;
              EstLineRec."Surcharge Type"::Plant:
                chrg4 := TRUE;
              EstLineRec."Surcharge Type"::Sundry:
                chrg5 := TRUE;
            END;
          END;
        UNTIL ChrgRec.NEXT = 0;
      END;

      ChrgRec.SETRANGE("Basic Line");
      ChrgRec.SETRANGE("Surcharge Line", "Line No.");
      IF ChrgRec.FINDFIRST THEN
        chrg0 := TRUE;
    END;

    PROCEDURE EvaluateSurchargeCostType@1100525020();
    BEGIN
      //db, 14-11-13: DP00381
      "Cost Type (Price)" := "Surcharge Type" - 1;
      IF "Surcharge Type" = "Surcharge Type"::Labor THEN
        "Cost Object Price" := ''
      ELSE
        "Cost Object Labor" := '';

      EstSetup.GET;
      CASE "Surcharge Type" OF
        "Surcharge Type"::Labor: "Cost Object Labor" := EstSetup."Absence Value Labor";
        "Surcharge Type"::Material: "Cost Object Price" := EstSetup."Absence Value Material";
        "Surcharge Type"::Subcontracting: "Cost Object Price" := EstSetup."Absence Value Subcontracting";
        "Surcharge Type"::Plant: "Cost Object Price" := EstSetup."Absence Value Plant";
        "Surcharge Type"::Sundry: "Cost Object Price" := EstSetup."Absence Value Sundry Cost";
      END;
    END;

    PROCEDURE SetSkipBlockedItem@1100528915(iSkipBlockedItem@1100528900 : Boolean);
    BEGIN
      SkipBlockedItem := iSkipBlockedItem;  //db, 11-11-13: DP00260 (C002164)
    END;

    PROCEDURE CheckCostTypePriceAllowed@1100525022();
    BEGIN
      //db, 19-11-13: DP00381
      IF "Cost Type (Price)" <> "Cost Type (Price)"::" " THEN BEGIN
        IF ("Set Code" = '') AND ("Plant Type" = '') AND (Recipe = '') THEN BEGIN  //db, 06-02-15
          //db, 29-12-14: skip check on quantity; init value for set code is 1 to fill cumulative quantity on related lines
          TESTFIELD(Quantity, 0);
          TESTFIELD("Quantity (Sales)", 0);
        END;
        TESTFIELD("Nett Cost Price", 0);
        TESTFIELD("Nett Sales Price", 0);
      END;
      IF "Item No." + "Basic Item" + "Trade Item" <> '' THEN BEGIN
        TESTFIELD(Recipe, '');
        TESTFIELD("Plant Type", '');
        TESTFIELD("Set Code", '');
      END;
      IF Recipe <> '' THEN BEGIN
        TESTFIELD("Item No.", '');
        TESTFIELD("Basic Item", '');
        TESTFIELD("Trade Item", '');
        TESTFIELD("Plant Type", '');
        TESTFIELD("Set Code", '');
      END;
      IF "Plant Type" <> '' THEN BEGIN
        TESTFIELD("Item No.", '');
        TESTFIELD("Basic Item", '');
        TESTFIELD("Trade Item", '');
        TESTFIELD(Recipe, '');
        TESTFIELD("Set Code", '');
      END;
      IF "Set Code" <> '' THEN BEGIN
        TESTFIELD("Item No.", '');
        TESTFIELD("Basic Item", '');
        TESTFIELD("Trade Item", '');
        TESTFIELD(Recipe, '');
        TESTFIELD("Plant Type", '');
      END;

      "Cost Type (Price)" := "Cost Type (Price)"::" ";
      IF "Item No." + "Basic Item" + "Trade Item" <> '' THEN
        "Cost Type (Price)" := "Cost Type (Price)"::Material;
      IF "Plant Type" + "Set Code" <> '' THEN
        "Cost Type (Price)" := "Cost Type (Price)"::Plant;
    END;

    PROCEDURE SortLines@1100525023(VAR gvEstLineRec@1100525000 : Record 11072072;SortOption@1100525001 : 'SubEst,Part,Item,TradeItem,CostObject,CodingSystem,Recipe');
    VAR
      EstRec@1210190004 : Record 11012151;
      EstLineRec@1100525002 : Record 11072072;
      sep@1210190003 : Text[1];
    BEGIN
      //db, 26-11-13 (DP00260: Estimate Lines MF NEW)
      EstLineRec.COPY(gvEstLineRec);
      sep := '~';
      EstLineRec.SETCURRENTKEY("Estimate No.","Sub-Estimate No.","Part Group",Part);
      IF EstLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          EstLineRec."Text Composition" := '';
          IF SortOption = SortOption::SubEst THEN
            EstLineRec."Text Composition" := EstLineRec."Sub-Estimate No.";
          IF SortOption = SortOption::Part THEN
            EstLineRec."Text Composition" := EstLineRec."Part Group" + sep + EstLineRec.Part;
          IF SortOption = SortOption::Item THEN
            EstLineRec."Text Composition" := EstLineRec."Item No.";
          IF SortOption = SortOption::TradeItem THEN
            IF EstLineRec."Trade Item" <> '' THEN
              EstLineRec."Text Composition" := EstLineRec."Vendor (Trade Item)" + sep + EstLineRec."Trade Item";
          IF SortOption = SortOption::CostObject THEN BEGIN
            IF EstLineRec."Labor Cost Amount" > EstLineRec."Cost Amount"-EstLineRec."Labor Cost Amount" THEN
              EstLineRec."Text Composition" := EstLineRec."Cost Object Labor"
            ELSE
              EstLineRec."Text Composition" := EstLineRec."Cost Object Price";
          END;
          IF SortOption = SortOption::CodingSystem THEN BEGIN
            IF EstRec."No." <> EstLineRec."Estimate No." THEN
              EstRec.GET(EstLineRec."Estimate No.");
            IF EstLineRec.Code <> '' THEN
              EstLineRec."Text Composition" := EstRec."Coding System" + sep + EstLineRec.Code;
          END;
          IF SortOption = SortOption::Recipe THEN
            IF EstLineRec.Recipe <> '' THEN
              EstLineRec."Text Composition" := EstLineRec."Recipe Group" + sep + EstLineRec.Recipe;
          EstLineRec.MODIFY;
        UNTIL EstLineRec.NEXT = 0;
      END;
      SETCURRENTKEY("Estimate No.","Text Composition");
    END;

    PROCEDURE CopyPartQuantityRelations@1100409000(lvEst@1100409007 : Code[20];lvSubEst@1100409006 : Code[20];lvPartGrp@1100409005 : Code[20];lvPart@1100409004 : Code[20];lvOriginLine@1100409003 : Integer;lvEstLine@1100409002 : Integer);
    VAR
      QuantityRelation@1100409000 : Record 11020463;
      QuantityRelation2@1100409001 : Record 11020463;
      QuantitySheet@1100409008 : Record 11012186;
      QuantitySheet2@1100409009 : Record 11012186;
      QuantitySheetHeader@1100409010 : Record 11020462;
    BEGIN
      //DP00686
      //-sheet and rows already copied by validate Part; copy relations for Quantity Sheet with more then 1 relation
      QuantityRelation.SETFILTER("Estimate No.", '%1', '');
      QuantityRelation.SETFILTER("Sub-Estimate No.", '%1', '');
      QuantityRelation.SETRANGE("Part Group", lvPartGrp);
      QuantityRelation.SETRANGE(Part, lvPart);
      QuantityRelation.SETRANGE("Estimate Line", lvOriginLine);
      IF QuantityRelation.FINDSET THEN BEGIN
        REPEAT
          QuantitySheetHeader.SETRANGE("Estimate No.", lvEst);
          QuantitySheetHeader.SETRANGE("Sub-Estimate No.", lvSubEst);
          QuantitySheetHeader.SETRANGE("Part Group", lvPartGrp);
          QuantitySheetHeader.SETRANGE(Part, lvPart);
          QuantitySheetHeader.SETRANGE("Source Type", QuantitySheetHeader."Source Type"::Part);
          QuantitySheetHeader.SETRANGE("Source Group", QuantityRelation."Part Group");
          QuantitySheetHeader.SETRANGE("Source Code", QuantityRelation.Part);
          QuantitySheetHeader.SETRANGE("Source Sheet", QuantityRelation."Quantity Sheet");
          IF QuantitySheetHeader.FINDSET THEN BEGIN
            QuantityRelation2.COPY(QuantityRelation);
            QuantityRelation2."Quantity Sheet" := QuantitySheetHeader.Code;
            QuantityRelation2."Estimate No." := lvEst;
            QuantityRelation2."Sub-Estimate No." := lvSubEst;
            QuantityRelation2."Estimate Line" := lvEstLine;
            IF QuantityRelation2.INSERT THEN;
          END;
        UNTIL QuantityRelation.NEXT = 0;
      END;

      //-copy quantity sheet with 1 relation
      QuantitySheet.SETFILTER("Estimate No.", '%1', '');
      QuantitySheet.SETFILTER("Sub-Estimate No.", '%1', '');
      QuantitySheet.SETRANGE("Part Group", lvPartGrp);
      QuantitySheet.SETRANGE(Part, lvPart);
      QuantitySheet.SETRANGE("Estimate Line", lvOriginLine);
      IF QuantitySheet.FINDSET THEN BEGIN
        REPEAT
          QuantitySheet2.COPY(QuantitySheet);
          QuantitySheet2."Estimate No." := lvEst;
          QuantitySheet2."Sub-Estimate No." := lvSubEst;
          QuantitySheet2."Estimate Line" := lvEstLine;
          IF QuantitySheet2.INSERT THEN;
        UNTIL QuantitySheet.NEXT = 0;
      END;
    END;

    PROCEDURE CopyRecipeQuantitySheet@1100409002();
    VAR
      BaseRecipeQuantitySheet@1100409000 : Record 11020461;
      BaseRecipeQuantityRow@1100409001 : Record 11020465;
      EstimateQuantitySheet@1100409003 : Record 11020462;
      EstimateQuantityRow@1100409002 : Record 11020464;
      NoSeriesMgt@1100409005 : Codeunit 396;
      NewSheet@1100409004 : Code[20];
    BEGIN
      //DP00686
      BaseRecipeQuantitySheet.SETRANGE("Recipe Group", "Recipe Group");
      BaseRecipeQuantitySheet.SETRANGE(Recipe, Recipe);
      IF BaseRecipeQuantitySheet.FINDSET THEN BEGIN
        REPEAT
          EstSetup.GET;
          NewSheet := NoSeriesMgt.GetNextNo(EstSetup."Quantity Sheet Nos.",0D,TRUE);

          EstimateQuantitySheet.INIT;
          EstimateQuantitySheet."Estimate No." := "Estimate No.";
          EstimateQuantitySheet."Sub-Estimate No." := "Sub-Estimate No.";
          EstimateQuantitySheet."Part Group" := "Part Group";
          EstimateQuantitySheet.Part := Part;
          EstimateQuantitySheet.Code := NewSheet;
          EstimateQuantitySheet."Source Type" := EstimateQuantitySheet."Source Type"::Recipe;
          EstimateQuantitySheet."Source Group" := BaseRecipeQuantitySheet."Recipe Group";
          EstimateQuantitySheet."Source Code" := BaseRecipeQuantitySheet.Recipe;
          EstimateQuantitySheet."Source Sheet" := BaseRecipeQuantitySheet.Code;
          EstimateQuantitySheet.Description := BaseRecipeQuantitySheet.Description;
          EstimateQuantitySheet.INSERT;

          BaseRecipeQuantityRow.SETRANGE("Recipe Group", "Recipe Group");
          BaseRecipeQuantityRow.SETRANGE(Recipe, Recipe);
          BaseRecipeQuantityRow.SETRANGE("Quantity Sheet", BaseRecipeQuantitySheet.Code);
          IF BaseRecipeQuantityRow.FINDSET THEN BEGIN
            REPEAT
              EstimateQuantityRow.INIT;
              EstimateQuantityRow."Estimate No." := "Estimate No.";
              EstimateQuantityRow."Quantity Sheet" := NewSheet;
              EstimateQuantityRow."Row No." := BaseRecipeQuantityRow."Row No.";
              EstimateQuantityRow.Total := BaseRecipeQuantityRow.Total;
              EstimateQuantityRow.Quantity := BaseRecipeQuantityRow.Quantity;
              EstimateQuantityRow.Length := BaseRecipeQuantityRow.Length;
              EstimateQuantityRow.Width := BaseRecipeQuantityRow.Width;
              EstimateQuantityRow.Height := BaseRecipeQuantityRow.Height;
              EstimateQuantityRow.Result := BaseRecipeQuantityRow.Result;
              EstimateQuantityRow.Description := BaseRecipeQuantityRow.Description;
              EstimateQuantityRow.Formula := BaseRecipeQuantityRow.Formula;
              EstimateQuantityRow.Totaling := BaseRecipeQuantityRow.Totaling;
              EstimateQuantityRow.INSERT;
            UNTIL BaseRecipeQuantityRow.NEXT = 0;
          END;
        UNTIL BaseRecipeQuantitySheet.NEXT = 0;
      END;
    END;

    PROCEDURE CopyRecipeQuantityRelations@1100409001(lvEst@1100409007 : Code[20];lvSubEst@1100409006 : Code[20];lvPartGrp@1100409005 : Code[20];lvPart@1100409004 : Code[20];lvEstLine@1100409012 : Integer;lvRecipeGrp@1100409011 : Code[20];lvRecipe@1100409010 : Code[20];lvOriginLine@1100409003 : Integer;lvRcpLine@1100409002 : Integer);
    VAR
      QuantityRelation@1100409000 : Record 11020463;
      QuantityRelation2@1100409001 : Record 11020463;
      QuantitySheet@1100409008 : Record 11012186;
      QuantitySheet2@1100409009 : Record 11012186;
      QuantitySheetHeader@1100409013 : Record 11020462;
    BEGIN
      //DP00686
      //-sheet and rows already copied by validate Recipe; copy relations for Quantity Sheet with more then 1 relation
      QuantityRelation.SETFILTER("Estimate No.", '%1', '');
      QuantityRelation.SETFILTER("Sub-Estimate No.", '%1', '');
      QuantityRelation.SETFILTER("Part Group", '%1', '');
      QuantityRelation.SETFILTER(Part, '%1', '');
      QuantityRelation.SETRANGE("Estimate Line", 0);
      QuantityRelation.SETRANGE("Recipe Group", lvRecipeGrp);
      QuantityRelation.SETRANGE(Recipe, lvRecipe);
      QuantityRelation.SETRANGE("Recipe Line", lvOriginLine);
      IF QuantityRelation.FINDSET THEN BEGIN
        REPEAT
          QuantitySheetHeader.SETRANGE("Estimate No.", lvEst);
          QuantitySheetHeader.SETRANGE("Sub-Estimate No.", lvSubEst);
          QuantitySheetHeader.SETRANGE("Part Group", lvPartGrp);
          QuantitySheetHeader.SETRANGE(Part, lvPart);
          QuantitySheetHeader.SETRANGE("Source Type", QuantitySheetHeader."Source Type"::Recipe);
          QuantitySheetHeader.SETRANGE("Source Group", QuantityRelation."Recipe Group");
          QuantitySheetHeader.SETRANGE("Source Code", QuantityRelation.Recipe);
          QuantitySheetHeader.SETRANGE("Source Sheet", QuantityRelation."Quantity Sheet");
          IF QuantitySheetHeader.FINDSET THEN BEGIN
            QuantityRelation2.COPY(QuantityRelation);
            QuantityRelation2."Quantity Sheet" := QuantitySheetHeader.Code;
            QuantityRelation2."Estimate No." := lvEst;
            QuantityRelation2."Sub-Estimate No." := lvSubEst;
            QuantityRelation2."Part Group" := lvPartGrp;
            QuantityRelation2.Part := lvPart;
            QuantityRelation2."Estimate Line" := lvEstLine;
            QuantityRelation2."Recipe Line" := lvRcpLine;
            IF QuantityRelation2.INSERT THEN;
          END;
        UNTIL QuantityRelation.NEXT = 0;
      END;

      //-copy quantity sheet with 1 relation
      QuantitySheet.SETFILTER("Estimate No.", '%1', '');
      QuantitySheet.SETFILTER("Sub-Estimate No.", '%1', '');
      QuantitySheet.SETFILTER("Part Group", '%1', '');
      QuantitySheet.SETFILTER(Part, '%1', '');
      QuantitySheet.SETRANGE("Estimate Line", 0);
      QuantitySheet.SETRANGE("Recipe Group", lvRecipeGrp);
      QuantitySheet.SETRANGE(Recipe, lvRecipe);
      QuantitySheet.SETRANGE("Recipe Line", lvOriginLine);
      IF QuantitySheet.FINDSET THEN BEGIN
        REPEAT
          QuantitySheet2.COPY(QuantitySheet);
          QuantitySheet2."Estimate No." := lvEst;
          QuantitySheet2."Sub-Estimate No." := lvSubEst;
          QuantitySheet2."Part Group" := lvPartGrp;
          QuantitySheet2.Part := lvPart;
          QuantitySheet2."Estimate Line" := lvEstLine;
          QuantitySheet2."Recipe Line" := lvRcpLine;
          IF QuantitySheet2.INSERT THEN;
        UNTIL QuantitySheet.NEXT = 0;
      END;
    END;

    PROCEDURE CheckFeatureRelation@1100409004(i@1100409004 : Integer);
    VAR
      QuantityRelation@1100409003 : Record 11020463;
      QuantitySheetHeader@1100409002 : Record 11020462;
      QuantitySheetLine@1100409000 : Record 11020464;
      FieldCode@1100409001 : Code[10];
    BEGIN
      //DP00686
      IF "Quantity Sheet Feature" = '' THEN EXIT;
      IF "Line No."= 0 THEN EXIT;  //db, 20-01-15

      EstPartRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part);  //db, 23-12-14: T005586

      QuantitySheetHeader.SETRANGE("Estimate No.", "Estimate No.");
      QuantitySheetHeader.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      QuantitySheetHeader.SETRANGE("Part Group", "Part Group");
      CASE i OF  //db, 23-12-14: T005586
        0: QuantitySheetHeader.SETRANGE(Part, EstPartRec.Part);
        1: QuantitySheetHeader.SETRANGE(Part, EstPartRec.Chapter);
        2: QuantitySheetHeader.SETRANGE(Part, EstPartRec.Paragraph);
      END;
      IF QuantitySheetHeader.FINDSET THEN BEGIN
        REPEAT
          QuantitySheetLine.SETRANGE("Estimate No.", QuantitySheetHeader."Estimate No.");
          QuantitySheetLine.SETRANGE("Quantity Sheet", QuantitySheetHeader.Code);
          IF QuantitySheetLine.FINDSET THEN BEGIN
            REPEAT
              IF QuantitySheetLine.Feature = "Quantity Sheet Feature" THEN BEGIN
                CASE QuantitySheetLine."Related to Column" OF
                  QuantitySheetLine."Related to Column"::Quantity: FieldCode := 'A';
                  QuantitySheetLine."Related to Column"::Length: FieldCode := 'B';
                  QuantitySheetLine."Related to Column"::TotalLength: FieldCode := 'C';
                  QuantitySheetLine."Related to Column"::Width: FieldCode := 'D';
                  QuantitySheetLine."Related to Column"::TotalWidth: FieldCode := 'E';
                  QuantitySheetLine."Related to Column"::Height: FieldCode := 'F';
                  QuantitySheetLine."Related to Column"::TotalHeight: FieldCode := 'G';
                  QuantitySheetLine."Related to Column"::Result: FieldCode := 'R';
                END;
                IF FieldCode <> '' THEN BEGIN
                  QuantityRelation.EditRelation(
                    "Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Line No.", '', '', 0,
                    QuantitySheetLine."Quantity Sheet",
                    QuantitySheetLine."Row No.",
                    FieldCode);
                END;
              END;
            UNTIL QuantitySheetLine.NEXT = 0;
          END;
        UNTIL QuantitySheetHeader.NEXT = 0;
      END;
    END;

    PROCEDURE CheckUpdateQuantityFromRelation@1100409006(lvEst@1100409004 : Code[20];lvSubEst@1100409003 : Code[20];lvPartGrp@1100409002 : Code[20];lvPart@1100409001 : Code[20]);
    VAR
      QuantitySheetHeader@1100409000 : Record 11020462;
      QuantityRelation@1100409005 : Record 11020463;
    BEGIN
      //DP00686
      IF SkipUpdateFromQuantitySheet THEN EXIT;  //db, 06-02-15

      QuantityRelation.SETRANGE("Estimate No.", lvEst);
      QuantityRelation.SETRANGE("Sub-Estimate No.", lvSubEst);
      QuantityRelation.SETRANGE("Part Group", lvPartGrp);
      QuantityRelation.SETRANGE(Part, lvPart);
      IF QuantityRelation.FINDSET THEN BEGIN
        REPEAT
          IF QuantityRelation."Quantity Sheet" <> QuantitySheetHeader.Code THEN BEGIN  //db, 30-12-14
            IF QuantitySheetHeader.GET(QuantityRelation."Estimate No.", QuantityRelation."Quantity Sheet") THEN
              QuantitySheetHeader.WriteDataFromSheetToEstimate(QuantitySheetHeader."Estimate No.", QuantitySheetHeader.Code);
          END;
        UNTIL QuantityRelation.NEXT = 0;
      END;
    END;

    PROCEDURE InitSalesFromCost@1100409008();
    BEGIN
      //db, 03-02-15: C020959
      EstRec.GET("Estimate No.");
      EstPartRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part);
      "Surcharge % Labor" := EstPartRec."Surcharge % Labor";
      IF "Cost Type (Price)" = "Cost Type (Price)"::Material THEN
        "Surcharge % Price" := EstPartRec."Surcharge % Material";
      IF "Cost Type (Price)" = "Cost Type (Price)"::Subcontracting THEN
        "Surcharge % Price" := EstPartRec."Surcharge % Subcontracting";
      IF "Cost Type (Price)" = "Cost Type (Price)"::Plant THEN
        "Surcharge % Price" := EstPartRec."Surcharge % Plant";
      IF "Cost Type (Price)" = "Cost Type (Price)"::Sundry THEN
        "Surcharge % Price" := EstPartRec."Surcharge % Sundry";
      "Quantity (Sales)" := Quantity;
      "Norm Agreement (Sales)" := FALSE;
      "Price Agreement (Sales)" := FALSE;
      IF "Sub Operation Code" <> '' THEN
        DetermineNormSales
      ELSE
        VALIDATE("Norm (Sales)", Norm);
      CalcItemSalesPriceAndDiscount(EstRec);
      CalculateTotals;
    END;

    PROCEDURE ClearRecipeData@1100409009();
    VAR
      RecipeLineRec@1100409000 : Record 11072075;
    BEGIN
      //db, 06-02-15
      RecipeLineRec.SETRANGE("Estimate No.", "Estimate No.");
      RecipeLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      RecipeLineRec.SETRANGE("Part Group", "Part Group");
      RecipeLineRec.SETRANGE(Part, Part);
      RecipeLineRec.SETRANGE("Estimate Line", "Line No.");
      IF NOT RecipeLineRec.ISEMPTY THEN BEGIN
        RecipeLineRec.FINDSET;
        REPEAT
          RecipeLineRec.SetFromEstimateLineDelete(TRUE);
          RecipeLineRec.DELETE(TRUE);
        UNTIL RecipeLineRec.NEXT = 0;
        RecipeLineRec.SetFromEstimateLineDelete(FALSE);
      END;
    END;

    LOCAL PROCEDURE CheckCurrencyAgreement@1100525034();
    BEGIN
      //db, 08-03-16
      IF "Currency Code" = '' THEN BEGIN
        "Currency Agreement" := FALSE;
      END ELSE BEGIN
        EstRec.GET("Estimate No.");
        "Currency Agreement" := ("Currency Code" <> EstRec."Currency Code");
      END;
    END;

    PROCEDURE GetCurrencyFactor@1100528601(IUseSalesExchange@1100528600 : Boolean;IUseReportCurrency@1100528602 : Boolean) : Decimal;
    VAR
      CurrencyExchangeRate@1100528601 : Record 330;
      CurrencyCode@1100528603 : Code[10];
    BEGIN
      GetEstimate("Estimate No.", TRUE);
      IF IUseReportCurrency THEN
        CurrencyCode := EstRec."Report Currency Code"
      ELSE
        CurrencyCode := "Currency Code";
      EXIT(CurrencyExchangeRate.ExchangeRate(2, "Estimate No.", EstRec."Reference Date (Rate)", CurrencyCode, IUseSalesExchange));
    END;

    PROCEDURE ExchangeAmtLCYToFCY@1100528602(IAmount@1100528601 : Decimal;IUseSalesExchange@1100528602 : Boolean;IUsePriceRounding@1100528605 : Boolean;IUseReportCurrency@1100528607 : Boolean) : Decimal;
    VAR
      CurrencyExchangeRate@1100528600 : Record 330;
      Currency@1100528604 : Record 4;
      Amount@1100528603 : Decimal;
      CurrencyCode@1100528606 : Code[10];
    BEGIN
      IF "Currency Code" = '' THEN
        EXIT(IAmount);
      GetEstimate("Estimate No.", TRUE);
      IF IUseReportCurrency THEN
        CurrencyCode := EstRec."Report Currency Code"
      ELSE
        CurrencyCode := "Currency Code";
      Amount := CurrencyExchangeRate.ExchangeAmtLCYToFCY(
        2, "Estimate No.", EstRec."Reference Date (Rate)", CurrencyCode, IAmount, GetCurrencyFactor(IUseSalesExchange, IUseReportCurrency), IUseSalesExchange);
      IF NOT Currency.GET(CurrencyCode) THEN
        Currency.InitRoundingPrecision;
      IF IUsePriceRounding THEN
        Amount := ROUND(Amount, Currency."Unit-Amount Rounding Precision")
      ELSE
        Amount := ROUND(Amount, Currency."Amount Rounding Precision");
      EXIT(Amount);
    END;

    PROCEDURE ExchangeAmtFCYToLCY@1100528600(IAmount@1100528601 : Decimal;IUseSalesExchange@1100528602 : Boolean;IUsePriceRounding@1100528605 : Boolean;IUseReportCurrency@1100528606 : Boolean) : Decimal;
    VAR
      CurrencyExchangeRate@1100528600 : Record 330;
      Currency@1100528604 : Record 4;
      Amount@1100528603 : Decimal;
      CurrencyCode@1100528607 : Code[10];
    BEGIN
      IF "Currency Code" = '' THEN
        EXIT(IAmount);
      GetEstimate("Estimate No.", TRUE);
      IF IUseReportCurrency THEN
        CurrencyCode := EstRec."Report Currency Code"
      ELSE
        CurrencyCode := "Currency Code";
      Amount := CurrencyExchangeRate.ExchangeAmtFCYToLCY(
        2, "Estimate No.", EstRec."Reference Date (Rate)", CurrencyCode, IAmount, GetCurrencyFactor(IUseSalesExchange, IUseReportCurrency), IUseSalesExchange);
      Currency.InitRoundingPrecision;
      IF IUsePriceRounding THEN
        Amount := ROUND(Amount, Currency."Unit-Amount Rounding Precision")
      ELSE
        Amount := ROUND(Amount, Currency."Amount Rounding Precision");
      EXIT(Amount);
    END;

    PROCEDURE ExchangeAmtFCYToFCY@1100528604(IAmount@1100528606 : Decimal;IFromCurrencyCode@1100528604 : Code[10];IToCurrencyCode@1100528605 : Code[10];IUseSalesExchange@1100528607 : Boolean;IUsePriceRounding@1100528608 : Boolean) : Decimal;
    VAR
      CurrencyExchangeRate@1100528603 : Record 330;
      Currency@1100528602 : Record 4;
      CurrencyFactor@1100528609 : Decimal;
      Amount@1100528601 : Decimal;
      CurrencyCode@1100528600 : Code[10];
    BEGIN
      GetEstimate("Estimate No.", TRUE);
      Amount := IAmount;
      IF IFromCurrencyCode <> '' THEN BEGIN
        CurrencyFactor := CurrencyExchangeRate.ExchangeRate(2, "Estimate No.", EstRec."Reference Date (Rate)", IFromCurrencyCode, IUseSalesExchange);
        Amount := CurrencyExchangeRate.ExchangeAmtFCYToLCY(2, "Estimate No.", EstRec."Reference Date (Rate)", IFromCurrencyCode, Amount, CurrencyFactor, IUseSalesExchange);
      END;
      IF IToCurrencyCode <> '' THEN BEGIN
        CurrencyFactor := CurrencyExchangeRate.ExchangeRate(2, "Estimate No.", EstRec."Reference Date (Rate)", IToCurrencyCode, IUseSalesExchange);
        Amount := CurrencyExchangeRate.ExchangeAmtLCYToFCY(2, "Estimate No.", EstRec."Reference Date (Rate)", IToCurrencyCode, Amount, CurrencyFactor, IUseSalesExchange);
      END;
      IF NOT Currency.GET(IToCurrencyCode) THEN
        Currency.InitRoundingPrecision;
      IF IUsePriceRounding THEN
        Amount := ROUND(Amount, Currency."Unit-Amount Rounding Precision")
      ELSE
        Amount := ROUND(Amount, Currency."Amount Rounding Precision");
      EXIT(Amount);
    END;

    PROCEDURE SetSkipValidateFCY@1100528603(ISkipValidateFCY@1100528600 : Boolean);
    BEGIN
      SkipValidateFCY := ISkipValidateFCY;
    END;

    PROCEDURE IsLCYReportCurrency@1100528606() : Boolean;
    BEGIN
      GetEstimate("Estimate No.", TRUE);
      EXIT(EstRec."Report Currency Code" = '');
    END;

    PROCEDURE IsFCYandSameReportCurrency@1100528605(ICurrencyCode@1100528600 : Code[10]) : Boolean;
    BEGIN
      GetEstimate("Estimate No.", TRUE);
      EXIT((EstRec."Report Currency Code" <> '') AND (EstRec."Report Currency Code" = ICurrencyCode));
    END;

    PROCEDURE SetFromUpdateTotals@1100525030(FromUpdateTotals@1100525000 : Boolean);
    BEGIN
      //db, 26-02-15: C021215
      CalledFromUpdateTotals := FromUpdateTotals;
    END;

    PROCEDURE GetAttachedToSurcharge@1100525031() : Text[250];
    VAR
      ChrgRec@1100525000 : Record 11229771;
      lvText000@1100525001 : TextConst 'ENU=Attached to Surcharge Line (%1): %2';
      InfoTxt@1100525002 : Text[1024];
    BEGIN
      //db, 13-03-15: C020405
      ChrgRec.SETRANGE("Estimate No.", "Estimate No.");
      ChrgRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      ChrgRec.SETRANGE("Part Group", "Part Group");
      ChrgRec.SETRANGE(Part, Part);
      ChrgRec.SETRANGE("Recipe Line", 0);
      ChrgRec.SETRANGE("Recipe Group", '');
      ChrgRec.SETRANGE(Recipe, '');
      ChrgRec.SETRANGE("Basic Line", "Line No.");
      ChrgRec.SETRANGE("Surcharge Line");
      IF ChrgRec.FINDSET THEN BEGIN
        REPEAT
          ChrgRec.CALCFIELDS("Estimate Surcharge Desc.");
          IF InfoTxt <> '' THEN InfoTxt := InfoTxt + '; ';
          InfoTxt := InfoTxt +
            STRSUBSTNO(lvText000, ChrgRec."Surcharge Line", ChrgRec."Estimate Surcharge Desc.");
        UNTIL ChrgRec.NEXT = 0;
      END;
      InfoTxt := COPYSTR(InfoTxt, 1, 250);
      EXIT (InfoTxt);
    END;

    PROCEDURE SetFilterZeroLinesByUser@1100525025(VAR EstimateLine@1100525002 : Record 11072072);
    VAR
      UserSetup@1100525000 : Record 91;
    BEGIN
      //C025240
      WITH EstimateLine DO BEGIN
        UserSetup.GET(USERID);
        IF UserSetup."Hide Zero Lines" = FALSE THEN BEGIN
          UserSetup."Hide Zero Lines" := TRUE;
        END ELSE BEGIN
          UserSetup."Hide Zero Lines" := FALSE;
        END;
        UserSetup.MODIFY;
      END;
      GetFilterZeroLinesByUser(EstimateLine);
    END;

    PROCEDURE GetFilterZeroLinesByUser@1100525012(VAR EstimateLine@1100525002 : Record 11072072);
    VAR
      UserSetup@1100525001 : Record 91;
      EstRec@1100525000 : Record 11012151;
    BEGIN
      //C025240
      WITH EstimateLine DO BEGIN
        UserSetup.GET(USERID);
        IF NOT EstRec.GET("Estimate No.") THEN
          EstRec.INIT;  //due to problems with filter on mainpage (EstPart) with subpage-link (EstLine)
        EstRec.CALCFIELDS("Quantity Model Exist");
        IF UserSetup."Hide Zero Lines" = FALSE THEN BEGIN
          IF EstRec."Quantity Model Exist" THEN
            SETRANGE("Quantity Model Exist")
          ELSE
            SETRANGE(Quantity);
        END ELSE BEGIN
          IF EstRec."Quantity Model Exist" THEN
            SETRANGE("Quantity Model Exist", TRUE)
          ELSE
            SETFILTER(Quantity, '<>%1', 0);
        END;
      END;
    END;

    PROCEDURE CheckHideZeroLines@1100525008();
    VAR
      UserSetup@1100525000 : Record 91;
    BEGIN
      //C025240
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Hide Zero Lines", FALSE);
    END;

    PROCEDURE GetDataCaption@1100528000() : Text[250];
    BEGIN
      //DP00909
      EXIT(STRSUBSTNO('%1 - %2 - %3 - %4 - %5 - %6', "Estimate No.", "Sub-Estimate No.", "Part Group", Part, Recipe, Description));
    END;

    PROCEDURE AssistEditSalesCondition@1100525027();
    VAR
      lvEstRec@1100525000 : Record 11012151;
      lvRefDate@1100525005 : Date;
      lvDiscRef1@1100525004 : Code[20];
      lvDiscRef2@1100525003 : Code[20];
      lvRefPrio@1100525002 : Code[10];
      lvDiscType@1100525001 : 'Purchase,Sales';
      ValidateCu@1100525006 : Codeunit 11012033;
    BEGIN
      //db, 26-01-16: C015604
      lvEstRec.GET("Estimate No.");
      GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, lvEstRec, lvDiscType::Sales);
      lvRefPrio := ValidateCu.GetRefPrioEstimate(lvEstRec, lvDiscType::Sales);
      ValidateCu.ShowSalesCondition(
        lvEstRec."Customer No.", "Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)",
        "Nett Sales Price", "Sales Discount %", "Gross Price", lvRefDate, lvEstRec."Customer Disc. Group",
        lvDiscRef1, lvDiscRef2, lvRefPrio);
    END;

    PROCEDURE InitRateRelatedFields@1100525033();
    BEGIN
      //DP01047
      "Cost Rate" := 0;
      "Cost Rate (FCY)" := 0;
      "Sales Rate" := 0;
      "Sales Rate (FCY)" := 0;
      CLEAR("Rate Type");
      "Team Size" := 0;
      "Wage Component" := '';  //DP00236
    END;

    PROCEDURE InitNormRelatedFields@1100525032();
    BEGIN
      //DP01047
      Norm := 0;
      "Production Rate" := 0;
      "Norm (Sales)" := 0;
      "Production Rate (Sales)" := 0;
    END;

    LOCAL PROCEDURE CheckDefaultRate@1100525035();
    BEGIN
      GetEstimate("Estimate No.", FALSE); //Call 23762
      IF "Rate Code" = '' THEN
        "Rate Code" := EstRec."Rate Code";
    END;

    BEGIN
    {
      4PSSE, LAHE 130507 "Price History Found", "Price History Vendor No."
    }
    END.
  }
}

