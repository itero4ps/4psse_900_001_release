OBJECT Table 11072075 Estimate Recipe Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 91=rm;
    OnInsert=BEGIN
               IF "Recipe (Child)" = '' THEN BEGIN
                 IF "Cost Type (Hours)" <> "Cost Type (Hours)"::Labor THEN  //DP01047
                   "Rate Code" := ''  //db, 11-03-16: related fields will be cleared on validate
                 ELSE
                   CheckDefaultRate;
                 xRec."Rate Type" := "Rate Type";  //disable function ConvertNorm by next validate
                 xRec."Team Size" := "Team Size";
                 VALIDATE("Rate Code");            //get actual rate (if copied from old template)
                 DetermineNormGroup;
               END;

               InitRecipeLine(FALSE);  //db, 11-11-09: M16810
               InitAdjustmentFactor;
               IF Quantity <> 0 THEN BEGIN
                 IF CurrFieldNo = 0 THEN
                   CurrFieldNo := FIELDNO(Quantity);  //db, 05-08-14:C016233 (UpdateEstLines when copy+paste used)
                 VALIDATE(Quantity);  //if Ctrl C+V used, force update hours based on adjustment factor
               END;
               "Attached to Line No." := GetAttachedToLineNo(Rec);
             END;

    OnModify=BEGIN
               EstRec.UpdateLogbook("Estimate No.");
             END;

    OnDelete=VAR
               EstLineRec@11012000 : Record 11072072;
               QuanSheetRec@1210190001 : Record 11012186;
               QuantityRelation@1100409000 : Record 11020463;
               BufferRec@1100485002 : Record 11012195;
               SurchLine@1100485001 : Integer;
               TextRec@1100409001 : Record 11020595;
               ChrgRec2@1100409002 : Record 11229771;
             BEGIN
               IF NOT FromRecipeLineDelete THEN  //db, 22-10-13: skip check on Attached to Line; complete recipe will be deleted
                 EstimateMgmt.ModifyLinkedEstRcpLines(0,Rec,0); //0:delete

               EstCodeRec.RESET;
               EstCodeRec.SETRANGE("Estimate No.","Estimate No.");
               EstCodeRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               EstCodeRec.SETRANGE("Part Group","Part Group");
               EstCodeRec.SETRANGE(Part,Part);
               EstCodeRec.SETRANGE("Estimate Line","Estimate Line");
               EstCodeRec.SETRANGE("Recipe Group","Recipe Group");
               EstCodeRec.SETRANGE(Recipe,Recipe);
               EstCodeRec.SETRANGE("Recipe Line","Line No.");
               IF NOT EstCodeRec.ISEMPTY THEN //Call 23762
                 EstCodeRec.DELETEALL;

               //db.sn, 26-01-15: C020404
               ChrgRec.RESET;
               ChrgRec.SETRANGE("Estimate No.","Estimate No.");
               ChrgRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               ChrgRec.SETRANGE("Part Group","Part Group");
               ChrgRec.SETRANGE(Part,Part);
               ChrgRec.SETRANGE("Recipe Line","Estimate Line");
               ChrgRec.SETRANGE("Recipe Group","Recipe Group");
               ChrgRec.SETRANGE(Recipe,Recipe);
               ChrgRec.SETRANGE("Basic Line","Line No."); //remove estimated lines included in surcharge
               IF NOT ChrgRec.ISEMPTY THEN BEGIN  //C030221
                 ChrgRec.FINDSET;
                 REPEAT
                   SurchLine := ChrgRec."Surcharge Line";
                   ChrgRec.DELETE;
                   IF "Cost Amount" <> 0 THEN BEGIN  //skip calculate charge if current line will not change result
                     IF RcpLineRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part,
                       "Estimate Line", "Recipe Group", Recipe, SurchLine) THEN BEGIN
                       RcpLineRec.CheckRecipeCharge;
                       //db, 30-01-15: if last basic line deleted for surcharge, initialise surcharge line to disable totals
                       ChrgRec2.COPY(ChrgRec);
                       ChrgRec2.SETFILTER("Basic Line", '<>%1', "Line No.");
                       ChrgRec2.SETRANGE("Surcharge Line",SurchLine);
                       IF NOT ChrgRec2.FINDFIRST THEN BEGIN
                         RcpLineRec.InitNormPrice;
                         RcpLineRec.CalculateTotals;
                         RcpLineRec.MODIFY;
                       END;
                     END;
                   END;
                 UNTIL ChrgRec.NEXT = 0;
               END;

               ChrgRec.SETRANGE("Basic Line");
               ChrgRec.SETRANGE("Surcharge Line","Line No.");  //delete surcharge lines
               IF NOT ChrgRec.ISEMPTY THEN  //C030221
                 ChrgRec.DELETEALL;
               //db.en, 26-01-15: C020404

               QuanSheetRec.RESET;
               QuanSheetRec.SETRANGE("Estimate No.","Estimate No.");
               QuanSheetRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               QuanSheetRec.SETRANGE("Part Group","Part Group");
               QuanSheetRec.SETRANGE(Part,Part);
               QuanSheetRec.SETRANGE("Estimate Line","Estimate Line");
               QuanSheetRec.SETRANGE("Recipe Group","Recipe Group");
               QuanSheetRec.SETRANGE(Recipe,Recipe);
               QuanSheetRec.SETRANGE("Recipe Line","Line No.");
               IF NOT QuanSheetRec.ISEMPTY THEN //Call 23762
                 QuanSheetRec.DELETEALL;

               //DP00686.sn
               QuantityRelation.RESET;
               QuantityRelation.SETRANGE("Estimate No.","Estimate No.");
               QuantityRelation.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               QuantityRelation.SETRANGE("Part Group","Part Group");
               QuantityRelation.SETRANGE(Part,Part);
               QuantityRelation.SETRANGE("Estimate Line","Estimate Line");
               QuantityRelation.SETRANGE("Recipe Group","Recipe Group");
               QuantityRelation.SETRANGE(Recipe,Recipe);
               QuantityRelation.SETRANGE("Recipe Line","Line No.");
               IF NOT QuantityRelation.ISEMPTY THEN //Call 23762
                 QuantityRelation.DELETEALL;
               //DP00686.en

               BufferRec.RESET;
               BufferRec.SETRANGE("Estimate No.","Estimate No.");
               BufferRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               BufferRec.SETRANGE("Part Group","Part Group");
               BufferRec.SETRANGE(Part,Part);
               BufferRec.SETRANGE("Estimate Line","Estimate Line");
               BufferRec.SETRANGE("Recipe Group","Recipe Group");
               BufferRec.SETRANGE(Recipe,Recipe);
               BufferRec.SETRANGE("Recipe Line","Line No.");
               IF NOT BufferRec.ISEMPTY THEN //Call 23762
                 BufferRec.DELETEALL;

               TextRec.RESET;
               TextRec.SETRANGE("Table Name",TextRec."Table Name"::Estimate);
               TextRec.SETRANGE("Estimate No.","Estimate No.");
               TextRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               TextRec.SETRANGE("Part Group","Part Group");
               TextRec.SETRANGE(Part,Part);
               TextRec.SETRANGE("Estimate Line No.","Estimate Line");
               TextRec.SETRANGE("Recipe Line No.","Line No.");   //DP00686
               IF NOT TextRec.ISEMPTY THEN //Call 23762
                 TextRec.DELETEALL;

               //DP00381.sn
               DELETE;
               IF NOT FromRecipeLineDelete THEN BEGIN //Call 23762
                 IF EstLineRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Estimate Line") THEN BEGIN
                   EstLineRec.CalculateTotals;
                   EstLineRec.MODIFY;
                 END;
                 EstRec.UpdateLogbook("Estimate No.");
               END; //Call 23762
               INSERT;
               //DP00381.en
             END;

    CaptionML=ENU=Estimate Recipe Line;
  }
  FIELDS
  {
    { 10  ;   ;Estimate No.        ;Code20        ;TableRelation=Estimate.No.;
                                                   CaptionML=ENU=Estimate No. }
    { 20  ;   ;Sub-Estimate No.    ;Code20        ;TableRelation="Sub-Estimate NEW"."Sub-Estimate No." WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Sub-Estimate No. }
    { 21  ;   ;Sub-Estimate Description;Text50    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sub-Estimate NEW".Description WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                            Sub-Estimate No.=FIELD(Sub-Estimate No.)));
                                                   CaptionML=ENU=Sub-Estimate Description;
                                                   Editable=No }
    { 25  ;   ;Part Group          ;Code10        ;TableRelation="Estimate Part NEW"."Part Group" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                         Sub-Estimate No.=FIELD(Sub-Estimate No.));
                                                   CaptionML=ENU=Part Group }
    { 30  ;   ;Part                ;Code20        ;TableRelation="Estimate Part NEW".Part WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                 Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                 Part Group=FIELD(Part Group));
                                                   CaptionML=ENU=Part }
    { 31  ;   ;Part Description    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Estimate Part NEW".Description WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                             Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                             Part=FIELD(Part)));
                                                   CaptionML=ENU=Part Description;
                                                   Editable=No }
    { 40  ;   ;Estimate Line       ;Integer       ;TableRelation="Estimate Line NEW"."Line No." WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                       Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                       Part=FIELD(Part));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Estimate Line }
    { 41  ;   ;Recipe              ;Code20        ;TableRelation="Base Recipe".No. WHERE (Recipe Group=FIELD(Recipe Group));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Recipe }
    { 42  ;   ;Recipe Group        ;Code10        ;TableRelation="Recipe Group".No.;
                                                   CaptionML=ENU=Recipe Group }
    { 50  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 51  ;   ;Attached to Line No.;Integer       ;TableRelation="Estimate Recipe Line"."Line No." WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                          Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                          Part Group=FIELD(Part Group),
                                                                                                          Part=FIELD(Part),
                                                                                                          Estimate Line=FIELD(Estimate Line),
                                                                                                          Recipe=FIELD(Recipe),
                                                                                                          Recipe Group=FIELD(Recipe Group));
                                                   CaptionML=ENU=Attached to Line No. }
    { 52  ;   ;Set Level           ;Integer       ;CaptionML=ENU=Set Level }
    { 55  ;   ;Set Code            ;Code10        ;TableRelation="Plant Set";
                                                   OnValidate=VAR
                                                                PlantSet@1100525000 : Record 11012587;
                                                              BEGIN
                                                                IF "Set Code" <> xRec."Set Code" THEN
                                                                  IF "Cost Type (Price)" <> "Cost Type (Price)"::Plant THEN
                                                                    CheckCostTypePriceAllowed;
                                                                IF NOT PlantSet.GET("Set Code") THEN
                                                                  PlantSet.INIT;
                                                                Description := PlantSet.Description;
                                                                "Unit of Measure" := PlantSet."Unit of Measure";

                                                                IF "Line No." <> 0 THEN // T000129
                                                                  EstimateMgmt.ModifyLinkedEstRcpLines(0,Rec,0); //0:delete
                                                              END;

                                                   CaptionML=ENU=Set Code }
    { 60  ;   ;Description         ;Text100       ;OnValidate=BEGIN
                                                                UpdateMgt.CheckBackSlash(Description);  //DP00381
                                                              END;

                                                   CaptionML=ENU=Description }
    { 70  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec.Quantity = 0 THEN
                                                                  EstimateMgmt.SetQuantityRatio(1)
                                                                ELSE
                                                                  EstimateMgmt.SetQuantityRatio(Quantity / xRec.Quantity);
                                                                EstimateMgmt.ModifyLinkedEstRcpLines(1,Rec,0); //1:modify quantity

                                                                UpdateSalesQuantity;  //DP00381
                                                                CalculateTotals;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF EnterQuantity(4) THEN
                                                                EditQuanSheet;
                                                            END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 75  ;   ;Estimate Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Estimate Line NEW".Quantity WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                          Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                          Part Group=FIELD(Part Group),
                                                                                                          Part=FIELD(Part),
                                                                                                          Line No.=FIELD(Estimate Line)));
                                                   CaptionML=ENU=Estimate Quantity;
                                                   Editable=No }
    { 80  ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Unit of Measure") THEN BEGIN
                                                                  IF "Unit of Measure" <>  xRec."Unit of Measure" THEN
                                                                    CheckItemUnitConversion(Rec, xRec);
                                                                  CalculateTotals;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;
                                                            END;

                                                   CaptionML=ENU=Unit of Measure }
    { 85  ;   ;Norm Group          ;Code10        ;TableRelation="Norm Group".Code;
                                                   OnValidate=BEGIN
                                                                DetermineNorm;
                                                              END;

                                                   CaptionML=ENU=Norm Group }
    { 87  ;   ;Sub Operation Code  ;Code20        ;TableRelation="Sub Operation".Code;
                                                   OnValidate=VAR
                                                                ValidateNewCostObject@1210190000 : Boolean;
                                                              BEGIN
                                                                DetermineNormGroup;
                                                                DetermineNorm;
                                                                DetermineNormSales;  //DP00381

                                                                IF "Sub Operation Code" <> '' THEN //Call 23762
                                                                  IF SubOperRec.GET("Sub Operation Code") THEN BEGIN
                                                                    SubOperRec.TESTFIELD(Expired,FALSE);  //db, 07-12-09
                                                                    IF SubOperRec.Operation <> '' THEN //Call 23762
                                                                      IF OperRec.GET(SubOperRec.Operation) THEN BEGIN
                                                                        //Call 23762
                                                                        IF ("Cost Object Labor" = '') THEN
                                                                          ValidateNewCostObject := TRUE
                                                                        ELSE
                                                                          ValidateNewCostObject := OldSubOperationDefault;
                                                                        IF ValidateNewCostObject THEN BEGIN
                                                                        //Call 23762
                                                                          VALIDATE("Cost Object Labor", OperRec."Cost Object");
                                                                          CheckCostObject("Cost Object Labor");
                                                                        END;
                                                                        IF OperRec."Rate Code" <> '' THEN
                                                                          IF "Rate Code" <> OperRec."Rate Code" THEN //Call 23762
                                                                            VALIDATE("Rate Code", OperRec."Rate Code");
                                                                      END;
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Sub Operation Code }
    { 90  ;   ;Norm                ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> FIELDNO("Production Rate") THEN
                                                                  IF Norm <> 0 THEN
                                                                    "Production Rate" := 1 / Norm
                                                                  ELSE
                                                                    "Production Rate" := 0;

                                                                UpdateSalesNorm;  //DP00381
                                                                CalculateTotals;  //db, 24-09-12: norm and production rate used to calculate hours
                                                              END;

                                                   CaptionML=ENU=Norm;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 95  ;   ;Production Rate     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Production Rate" <> 0 THEN
                                                                  VALIDATE(Norm, 1 / "Production Rate")
                                                                ELSE
                                                                  VALIDATE(Norm,1);
                                                              END;

                                                   CaptionML=ENU=Production Rate;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 100 ;   ;Rate Code           ;Code10        ;TableRelation="Estimate Rate"."Rate Code" WHERE (Estimate No.=FIELD(Estimate No.));
                                                   OnValidate=BEGIN
                                                                IF "Rate Code" = '' THEN BEGIN
                                                                  IF ("Sub Operation Code" <> '') AND ("Estimate No." <> '') THEN //mg.c, 29-09-11: M28465
                                                                    TESTFIELD("Rate Code");
                                                                  InitRateRelatedFields;  //DP01047
                                                                  InitNormRelatedFields;  //DP01047
                                                                END;

                                                                GetEstSetup; //Call 23762
                                                                GetEstRate; //Call 23762
                                                                IF (EstSetup."Upd. Cost Object by Rate Code") OR ("Cost Object Labor" = '') THEN BEGIN
                                                                  IF RateRec."Cost Object" <> '' THEN BEGIN
                                                                    "Cost Object Labor" := RateRec."Cost Object";
                                                                    GetEstimate("Estimate No.", TRUE);
                                                                    IF EstRec."Estimate Based On" = EstRec."Estimate Based On"::CostObject THEN BEGIN  //db, 16-01-15: C016230
                                                                      DimMgt.GetDimValueRec(2, "Cost Object Labor", DimValRec, TRUE,'');
                                                                      Description := DimValRec.Name;
                                                                    END;
                                                                  END;
                                                                END;
                                                                IF RateRec."Currency Code" = '' THEN BEGIN
                                                                  VALIDATE("Cost Rate", RateRec."Cost Rate");
                                                                  VALIDATE("Sales Rate", RateRec."Sales Rate");
                                                                END ELSE BEGIN
                                                                  IF RateRec."Currency Code" = "Currency Code" THEN BEGIN
                                                                    VALIDATE("Cost Rate (FCY)", RateRec."Cost Rate (FCY)");
                                                                    VALIDATE("Sales Rate (FCY)", RateRec."Sales Rate (FCY)");
                                                                  END ELSE BEGIN
                                                                    VALIDATE("Cost Rate (FCY)", ExchangeAmtFCYToFCY(RateRec."Cost Rate (FCY)", RateRec."Currency Code", "Currency Code", FALSE, TRUE));
                                                                    VALIDATE("Sales Rate (FCY)", ExchangeAmtFCYToFCY(RateRec."Sales Rate (FCY)", RateRec."Currency Code", "Currency Code", TRUE, TRUE));
                                                                  END;
                                                                END;
                                                                "Rate Type" := RateRec."Rate Type";
                                                                IF "Rate Type" = "Rate Type"::Minuts THEN
                                                                  "Team Size" := RateRec."Team Size"
                                                                ELSE
                                                                  "Team Size" := 0;  //db, 21-03-13: C004083

                                                                //check conversion norm after change of rate type and team size:
                                                                IF ("Rate Type" <> xRec."Rate Type") OR ("Team Size" <> xRec."Team Size") THEN
                                                                  ConvertNorm(("Rate Type" <> xRec."Rate Type"), ("Team Size" <> xRec."Team Size"));

                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Rate Code }
    { 110 ;   ;Cost Rate           ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Code" = '' THEN
                                                                  "Cost Rate (FCY)" := ExchangeAmtLCYToFCY("Cost Rate", FALSE, TRUE, FALSE);
                                                              END;

                                                   CaptionML=ENU=Cost Rate;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 120 ;   ;Nett Cost Price     ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Nett Cost Price (FCY)" := ExchangeAmtLCYToFCY("Nett Cost Price", FALSE, TRUE, FALSE);
                                                                CalculateDiscount(FALSE);
                                                                EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",0,"Nett Cost Price","Buy Back Price","Buy Back %");
                                                                "Buy Back Price (FCY)" := ExchangeAmtLCYToFCY("Buy Back Price", FALSE, TRUE, FALSE);
                                                                UpdateSalesPriceFromCostPrice;  //db, 11-04-14: C014487
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Nett Cost Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 141 ;   ;Buy Back Price      ;Decimal       ;OnValidate=BEGIN
                                                                EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",1,"Nett Cost Price","Buy Back Price","Buy Back %");
                                                                "Buy Back Price (FCY)" := ExchangeAmtLCYToFCY("Buy Back Price", FALSE, TRUE, FALSE);
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Buy Back Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 144 ;   ;Buy Back %          ;Decimal       ;OnValidate=BEGIN
                                                                EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",2,"Nett Cost Price","Buy Back Price","Buy Back %");
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Buy Back %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 150 ;   ;Hours               ;Decimal       ;CaptionML=ENU=Hours;
                                                   DecimalPlaces=2:;
                                                   Editable=No }
    { 155 ;   ;Original Hours      ;Decimal       ;CaptionML=ENU=Original Hours;
                                                   DecimalPlaces=2:;
                                                   Editable=No }
    { 160 ;   ;Labor Cost Amount   ;Decimal       ;CaptionML=ENU=Labor Cost Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 170 ;   ;Nett Cost Amount    ;Decimal       ;CaptionML=ENU=Nett Cost Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 171 ;   ;Gross Amount        ;Decimal       ;CaptionML=ENU=Gross Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 175 ;   ;Original Nett Amount;Decimal       ;CaptionML=ENU=Original Nett Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 176 ;   ;Original Gross Amount;Decimal      ;CaptionML=ENU=Original Gross Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 191 ;   ;Buy Back Amount     ;Decimal       ;CaptionML=ENU=Buy Back Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 200 ;   ;Cost Amount         ;Decimal       ;CaptionML=ENU=Cost Amount;
                                                   NotBlank=No;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 270 ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   OnValidate=BEGIN
                                                                IF ("Plant Type" <> xRec."Plant Type") AND ("Plant Type" <> '') THEN BEGIN
                                                                  IF "Cost Type (Price)" <> "Cost Type (Price)"::Plant THEN
                                                                    CheckCostTypePriceAllowed;
                                                                  IF NOT EstimateMgmt.IsLineDiscountMaterialOnly THEN
                                                                    ClearFields(0); //Material
                                                                  GetDefaultsPlantType;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Plant Type }
    { 271 ;   ;Plant Price Type    ;Option        ;CaptionML=ENU=Plant Price Type;
                                                   OptionCaptionML=ENU=" ,Day,Week,,Month,,,,,Hour";
                                                   OptionString=[ ,Day,Week,,Month,,,,,Hour];
                                                   Editable=No }
    { 272 ;   ;Start Rental Period ;Date          ;OnValidate=BEGIN
                                                                CalcRentalUnits;
                                                                EstimateMgmt.ModifyLinkedEstRcpLines(3,Rec,FIELDNO("Start Rental Period")); //3:fields
                                                              END;

                                                   CaptionML=ENU=Start Rental Period }
    { 273 ;   ;End Rental Period   ;Date          ;OnValidate=BEGIN
                                                                CalcRentalUnits;
                                                                EstimateMgmt.ModifyLinkedEstRcpLines(3,Rec,FIELDNO("End Rental Period")); //3:fields
                                                              END;

                                                   CaptionML=ENU=End Rental Period }
    { 274 ;   ;Rental Period Formula;DateFormula  ;OnValidate=BEGIN
                                                                IF FORMAT("Rental Period Formula") <> '' THEN BEGIN
                                                                  IF "Set Code" = '' THEN
                                                                    TESTFIELD("Plant Price Type");
                                                                  VALIDATE("Time Quantity",EstimateMgmt.ConvPlantCalcPeriod("Rental Period Formula","Plant Price Type"));
                                                                END ELSE BEGIN
                                                                  IF "Rental Time Units" <> 0 THEN
                                                                    VALIDATE("Time Quantity","Rental Time Units")
                                                                  ELSE
                                                                    VALIDATE("Time Quantity",1);
                                                                END;
                                                                EstimateMgmt.ModifyLinkedEstRcpLines(3,Rec,FIELDNO("Rental Period Formula")); //3:fields
                                                              END;

                                                   CaptionML=ENU=Rental Period Formula }
    { 275 ;   ;Rental Time Units   ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Rental Period Formula");
                                                                EstimateMgmt.ModifyLinkedEstRcpLines(3,Rec,FIELDNO("Rental Time Units")); //3:fields
                                                              END;

                                                   CaptionML=ENU=Rental Time Units;
                                                   BlankZero=Yes }
    { 280 ;   ;Project No.         ;Code20        ;TableRelation=Job;
                                                   OnValidate=BEGIN
                                                                IF "Project No." = '' THEN
                                                                  "Extension Contract" := '';  //DP00260
                                                              END;

                                                   CaptionML=ENU=Project No. }
    { 290 ;   ;Element             ;Code20        ;TableRelation="Base Element";
                                                   OnValidate=BEGIN
                                                                FormatMgt.FormatElem(Element,2,'');
                                                                IF Element <> '' THEN
                                                                  IF "Project No." <> '' THEN BEGIN
                                                                    IF NOT ProjElemRec.GET("Project No.", Element) THEN
                                                                      ElemRec.GET(Element);
                                                                  END ELSE
                                                                    ElemRec.GET(Element);
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF "Project No." <> '' THEN BEGIN
                                                                ProjElemRec.SETRANGE("Project No.", "Project No.");
                                                                ProjElemRec.Element := Element;
                                                                IF PAGE.RUNMODAL(PAGE::"Project Element List", ProjElemRec) = ACTION::LookupOK THEN
                                                                  VALIDATE(Element, ProjElemRec.Element);
                                                              END ELSE BEGIN
                                                                ElemRec.Code := Element;
                                                                IF PAGE.RUNMODAL(PAGE::Elements, ElemRec) = ACTION::LookupOK THEN
                                                                  VALIDATE(Element, ElemRec.Code);
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 295 ;   ;Extension Contract  ;Code10        ;TableRelation="Extension Contract"."Contract No." WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Extension Contract }
    { 300 ;   ;Cost Object Labor   ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Labor),
                                                                                               Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Cost Object Labor }
    { 335 ;   ;Cost Object Price   ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=FILTER(Material..Sundry),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                EstSetup.GET;
                                                                IF EstSetup."Default Purchase Action" THEN BEGIN
                                                                  IF "Cost Object Price" <> '' THEN
                                                                    IF xRec."Cost Object Price" = '' THEN
                                                                      GetDefaultsCostObject(gvCostType::Sundry, "Cost Object Price")
                                                                    ELSE
                                                                      IF "Cost Object Price" <> xRec."Cost Object Price" THEN
                                                                          IF CONFIRM(Text008 + Text009) THEN
                                                                            GetDefaultsCostObject(gvCostType::Sundry, "Cost Object Price");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Object Price }
    { 400 ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." <> '') THEN BEGIN
                                                                  ClearFields(1); //Plant
                                                                  GetEstimate("Estimate No.", TRUE); //Call 23762
                                                                  ValidateItem(ItemTypeOpt::Item, EstRec, TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 410 ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN BEGIN
                                                                  GetEstimate("Estimate No.", TRUE); //Call 23762
                                                                  ValidateItem(ItemTypeOpt::"Basic Item", EstRec, TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Basic Item }
    { 411 ;   ;Item Type           ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Type" WHERE (Product Code=FIELD(Basic Item),
                                                                                                      Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Type;
                                                   Editable=No }
    { 412 ;   ;Item Brand          ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Brand" WHERE (Product Code=FIELD(Basic Item),
                                                                                                       Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Brand;
                                                   Editable=No }
    { 413 ;   ;Item Series         ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Series" WHERE (Product Code=FIELD(Basic Item),
                                                                                                        Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Series;
                                                   Editable=No }
    { 420 ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN BEGIN
                                                                  GetEstimate("Estimate No.", TRUE); //Call 23762
                                                                  ValidateItem(ItemTypeOpt::"Trade Item", EstRec, TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Trade Item }
    { 440 ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=VAR
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") AND ("Vendor (Trade Item)" <> '') THEN BEGIN
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  //db.sn, 17-12-10: M18021
                                                                  IF lvExecValidate THEN BEGIN
                                                                    GetEstimate("Estimate No.", TRUE); //Call 23762
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item",EstRec,TRUE)
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor",EstRec,TRUE);
                                                                  END;
                                                                  //db.en, 17-12-10: M18021
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 450 ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Manufacturer }
    { 460 ;   ;Gross Price         ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Gross Price (FCY)" := ExchangeAmtLCYToFCY("Gross Price", FALSE, TRUE, FALSE);
                                                                CalculateNettPrice;
                                                                UpdateSalesPriceFromCostPrice;  //db, 11-04-14: C014487
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Gross Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 468 ;   ;Purchase Discount % ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Purchase Discount %") THEN BEGIN
                                                                  TESTFIELD("Gross Price");  //db, 11-11-13: DP00260 (C005807)
                                                                END;

                                                                //DP00381.sn
                                                                CalculateNettPrice;
                                                                UpdateSalesPriceFromCostPrice;  //db, 11-04-14: C014487
                                                                CalculateTotals;
                                                                //DP00381.en
                                                              END;

                                                   CaptionML=ENU=Purchase Discount %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 469 ;   ;Sales Discount %    ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Sales Discount %") THEN BEGIN
                                                                  TESTFIELD("Gross Price");  //db, 11-11-13: DP00260 (C005807)
                                                                END;

                                                                //DP00381.sn
                                                                IF "Sales Discount %"<> 0 THEN BEGIN  //db, 11-04-14: C014487
                                                                  GetEstimate("Estimate No.", FALSE);
                                                                  IF "Surcharge Type" = "Surcharge Type"::" " THEN  //db, 05-11-15: C026570 (if SalesPrice=CostPrice+SurchPerc then SalesDisc<0)
                                                                    EstRec.TESTFIELD("Item Sales Price Based On", EstRec."Item Sales Price Based On"::GrossMin);
                                                                END;
                                                                CalculateNettPrice;
                                                                CalculateTotals;
                                                                //DP00381.en
                                                              END;

                                                   CaptionML=ENU=Sales Discount %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 480 ;   ;Price Reference Date;Date          ;CaptionML=ENU=Price Reference Date;
                                                   Editable=No }
    { 490 ;   ;Variable            ;Boolean       ;CaptionML=ENU=Variable }
    { 500 ;   ;Rate Type           ;Option        ;CaptionML=ENU=Rate Type;
                                                   OptionCaptionML=ENU=Hours,Minuts;
                                                   OptionString=Hours,Minuts;
                                                   Editable=No }
    { 510 ;   ;Team Size           ;Decimal       ;CaptionML=ENU=Team Size;
                                                   Editable=No }
    { 520 ;   ;Time Quantity       ;Decimal       ;InitValue=1;
                                                   OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Time Quantity;
                                                   BlankZero=Yes }
    { 530 ;   ;Unit of Time        ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=ENU=Unit of Time }
    { 540 ;   ;Surcharge %         ;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Surcharge %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 545 ;   ;Surcharge Type      ;Option        ;OnValidate=BEGIN
                                                                IF "Surcharge Type" <> "Surcharge Type"::" " THEN BEGIN
                                                                  IF (xRec."Surcharge Type" = xRec."Surcharge Type"::" ") AND
                                                                     (Quantity + Norm + "Nett Cost Price" <> 0) THEN
                                                                        ERROR(Text005);
                                                                  "Norm Group" := '';
                                                                  "Sub Operation Code" := '';
                                                                  InitAdjustmentFactor;
                                                                  EvaluateSurchargeCostType;  //db, 14-11-13:DP00381
                                                                END ELSE BEGIN
                                                                  ERROR(Text004);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Surcharge Type;
                                                   OptionCaptionML=ENU=" ,Labor,Material,Subcontracting,Plant,Sundry";
                                                   OptionString=[ ,Labor,Material,Subcontracting,Plant,Sundry] }
    { 547 ;   ;Recipe Level        ;Integer       ;CaptionML=ENU=Recipe Level }
    { 550 ;   ;Line Status         ;Code10        ;TableRelation="Line Status".Status;
                                                   CaptionML=ENU=Line Status }
    { 555 ;   ;Subcontractor       ;Code20        ;TableRelation=Vendor.No. WHERE (Subcontractor=CONST(Yes));
                                                   CaptionML=ENU=Subcontractor }
    { 556 ;   ;Subcontractor Name  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Subcontractor)));
                                                   CaptionML=ENU=Subcontractor Name;
                                                   Editable=No }
    { 560 ;   ;Cumulative Hours    ;Decimal       ;CaptionML=ENU=Cumulative Hours }
    { 565 ;   ;Cumulative Labor    ;Decimal       ;CaptionML=ENU=Cumulative Labor;
                                                   AutoFormatType=1 }
    { 566 ;   ;Cumulative Nett Amount;Decimal     ;CaptionML=ENU=Cumulative Nett Amount;
                                                   AutoFormatType=1 }
    { 569 ;   ;Cumulative Buy Back ;Decimal       ;CaptionML=ENU=Cumulative Buy Back;
                                                   AutoFormatType=1 }
    { 570 ;   ;Length              ;Decimal       ;OnValidate=BEGIN
                                                                CalculateQuantity;
                                                              END;

                                                   CaptionML=ENU=Length;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 571 ;   ;Width               ;Decimal       ;OnValidate=BEGIN
                                                                CalculateQuantity;
                                                              END;

                                                   CaptionML=ENU=Width;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 572 ;   ;Height              ;Decimal       ;OnValidate=BEGIN
                                                                CalculateQuantity;
                                                              END;

                                                   CaptionML=ENU=Height;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 573 ;   ;Estimate Part Quantity;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Estimate Line NEW"."Part Quantity" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                 Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                 Part Group=FIELD(Part Group),
                                                                                                                 Part=FIELD(Part),
                                                                                                                 Line No.=FIELD(Estimate Line)));
                                                   CaptionML=ENU=Estimate Part Quantity;
                                                   Editable=No }
    { 575 ;   ;Weight              ;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 576 ;   ;Total Weight        ;Decimal       ;CaptionML=ENU=Total Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 577 ;   ;Cumulative Weight   ;Decimal       ;CaptionML=ENU=Cumulative Weight;
                                                   DecimalPlaces=0:2 }
    { 580 ;   ;Uncoded Labor       ;Boolean       ;CaptionML=ENU=Uncoded Labor;
                                                   Editable=No }
    { 581 ;   ;Uncoded Material    ;Boolean       ;CaptionML=ENU=Uncoded Material;
                                                   Editable=No }
    { 582 ;   ;Uncoded Subcontracting;Boolean     ;CaptionML=ENU=Uncoded Subcontracting;
                                                   Editable=No }
    { 583 ;   ;Uncoded Plant       ;Boolean       ;CaptionML=ENU=Uncoded Plant;
                                                   Editable=No }
    { 584 ;   ;Uncoded Line        ;Boolean       ;CaptionML=ENU=Uncoded Line;
                                                   Editable=No }
    { 590 ;   ;Adjustment Factor Hours;Decimal    ;OnValidate=BEGIN
                                                                ProcessAdjustmentFactor(1,1);  //DP00555
                                                              END;

                                                   CaptionML=ENU=Hours Adjustment Factor;
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 591 ;   ;Adjustment Factor Price;Decimal    ;OnValidate=BEGIN
                                                                ProcessAdjustmentFactor(2,1);  //DP00555
                                                              END;

                                                   CaptionML=ENU=Price Adjustment Factor;
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 595 ;   ;Cum. Adj. Factor Hours;Decimal     ;CaptionML=ENU=Hours Cum. Adjustment Factor;
                                                   DecimalPlaces=0:6 }
    { 596 ;   ;Cum. Adj. Factor Price;Decimal     ;CaptionML=ENU=Price Cum. Adj. Factor;
                                                   DecimalPlaces=0:6 }
    { 600 ;   ;External Text       ;Text250       ;OnValidate=BEGIN
                                                                "External Text Block" := "External Text" <> '';
                                                              END;

                                                   CaptionML=ENU=External Text }
    { 601 ;   ;External Text Block ;Boolean       ;CaptionML=ENU=External Text Block;
                                                   Editable=No }
    { 605 ;   ;Internal Text       ;Text250       ;OnValidate=BEGIN
                                                                "Internal Text Block" := "Internal Text" <> '';
                                                              END;

                                                   CaptionML=ENU=Internal Text }
    { 606 ;   ;Internal Text Block ;Boolean       ;CaptionML=ENU=Internal Text Block;
                                                   Editable=No }
    { 620 ;   ;Ask for Quote       ;Boolean       ;OnValidate=BEGIN
                                                                IF "Ask for Quote" THEN BEGIN
                                                                  IF ("Estimate No." = '') THEN
                                                                    "Ask for Quote" := FALSE
                                                                  ELSE BEGIN
                                                                    IF ("Nett Cost Price" = 0) AND ("Cost Object Price" = '') THEN BEGIN
                                                                      "Ask for Quote" := FALSE;
                                                                      IF CurrFieldNo <> 0 THEN
                                                                        FIELDERROR("Ask for Quote", Text000);
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Ask for Quote }
    { 630 ;   ;Purchase Route Reference;Code20    ;OnLookup=VAR
                                                              lvRouteRefMgtCU@1210190000 : Codeunit 11012045;
                                                            BEGIN
                                                              IF ("Estimate No." <> '') THEN
                                                                lvRouteRefMgtCU.ShowReferenceList("Purchase Route Reference");
                                                            END;

                                                   CaptionML=ENU=Purchase Route Reference;
                                                   Editable=No }
    { 640 ;   ;Document No.        ;Code20        ;TableRelation="Document Properties";
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Document No. }
    { 650 ;   ;Code                ;Code20        ;OnValidate=VAR
                                                                CodingSystem@1210190005 : Record 11012088;
                                                              BEGIN
                                                                GetEstimate("Estimate No.", FALSE); //Call 23762
                                                                EstRec.TESTFIELD("Coding System");

                                                                IF Code <> '' THEN BEGIN
                                                                  CodingSystem.GET(EstRec."Coding System");
                                                                  IF CodingSystem."Deviant Code allowed" = FALSE THEN BEGIN  //db, 26-06-15
                                                                    FormatMgt.SetSelection(EstRec."Coding System");
                                                                    FormatMgt.FormatElem(Code,4,'');
                                                                    CodeRec.GET(EstRec."Coding System", Code);
                                                                  END;
                                                                END;

                                                                EstCodeRec.RESET;
                                                                EstCodeRec.SETRANGE("Estimate No.", "Estimate No.");
                                                                EstCodeRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
                                                                EstCodeRec.SETRANGE("Part Group", "Part Group");
                                                                EstCodeRec.SETRANGE(Part, Part);
                                                                EstCodeRec.SETRANGE("Estimate Line", "Estimate Line");
                                                                EstCodeRec.SETRANGE("Recipe Group", "Recipe Group");
                                                                EstCodeRec.SETRANGE(Recipe, Recipe);
                                                                EstCodeRec.SETRANGE("Recipe Line", "Line No.");
                                                                EstCodeRec.SETRANGE("Coding System", EstRec."Coding System");
                                                                EstCodeRec.DELETEALL;

                                                                IF Code <> '' THEN BEGIN
                                                                  EstCodeRec.INIT;
                                                                  EstCodeRec."Estimate No." := "Estimate No.";
                                                                  EstCodeRec."Sub-Estimate No." := "Sub-Estimate No.";
                                                                  EstCodeRec."Part Group" := "Part Group";
                                                                  EstCodeRec.Part := Part;
                                                                  EstCodeRec."Estimate Line" := "Estimate Line";
                                                                  EstCodeRec."Recipe Group" := "Recipe Group";
                                                                  EstCodeRec.Recipe := Recipe;
                                                                  EstCodeRec."Recipe Line" := "Line No.";
                                                                  EstCodeRec."Coding System" := EstRec."Coding System";
                                                                  EstCodeRec.Code := Code;
                                                                  EstCodeRec.INSERT;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              GetEstimate("Estimate No.", FALSE); //Call 23762
                                                              EstRec.TESTFIELD("Coding System");
                                                              CodeRec.SETRANGE("Coding System", EstRec."Coding System");
                                                              CodeRec.Code := Code;
                                                              IF PAGE.RUNMODAL(PAGE::"Codes per Coding System", CodeRec) = ACTION::LookupOK THEN
                                                                VALIDATE(Code, CodeRec.Code);
                                                            END;

                                                   CaptionML=ENU=Code }
    { 660 ;   ;Price Agreement     ;Boolean       ;CaptionML=ENU=Price Agreement }
    { 661 ;   ;Norm Agreement      ;Boolean       ;CaptionML=ENU=Norm Agreement }
    { 670 ;   ;Vendor              ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Vendor }
    { 671 ;   ;Vendor Name         ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Vendor)));
                                                   CaptionML=ENU=Vendor Name;
                                                   Editable=No }
    { 680 ;   ;Discipline          ;Code10        ;TableRelation=Discipline;
                                                   CaptionML=ENU=Discipline }
    { 685 ;   ;Trade Speciality    ;Code10        ;TableRelation="Trade Speciality".Code WHERE (Discipline=FIELD(Discipline));
                                                   CaptionML=ENU=Trade Speciality }
    { 690 ;   ;Trade Expertise     ;Code10        ;TableRelation="Trade Expertise";
                                                   OnValidate=BEGIN
                                                                TradeExpRec.GetRelatedValue(Discipline, "Trade Speciality", "Trade Expertise");
                                                              END;

                                                   CaptionML=ENU=Trade Expertise }
    { 700 ;   ;Recipe (Child)      ;Code20        ;TableRelation="Base Recipe".No. WHERE (Recipe Group=FIELD("Recipe Group (Child)"));
                                                   OnValidate=BEGIN
                                                                //CheckParentChildRecipe("Recipe Group (Child)", "Recipe (Child)");

                                                                IF "Recipe (Child)" <> '' THEN BEGIN
                                                                  IF "Cost Type (Price)" <> "Cost Type (Price)"::" " THEN
                                                                    CheckCostTypePriceAllowed;
                                                                  RecipeRec.GET("Recipe Group (Child)", "Recipe (Child)");
                                                                  RecipeRec.CALCFIELDS(Hours, "Labor Cost Amount",
                                                                    "Gross Amount", "Material Cost Amount", "Subcontracting Cost Amount", "Plant Cost Amount", "Sundry Cost Amount");
                                                                END ELSE BEGIN
                                                                  CLEAR(RecipeRec);
                                                                END;

                                                                Description := RecipeRec.Description;
                                                                "Unit of Measure" := RecipeRec."Unit of Measure";
                                                                Norm := RecipeRec.Hours;
                                                                IF Norm <> 0 THEN
                                                                  "Production Rate" := 1 / Norm
                                                                ELSE
                                                                  "Production Rate" := 0;

                                                                "Nett Cost Price" := RecipeRec."Material Cost Amount" + RecipeRec."Subcontracting Cost Amount" +
                                                                  RecipeRec."Plant Cost Amount" + RecipeRec."Sundry Cost Amount";
                                                                "Gross Price" := RecipeRec."Gross Amount";

                                                                //CheckDefaultRate;  //DP00381
                                                                IF "Rate Code" = '' THEN BEGIN
                                                                  IF RecipeRec.Hours = 0 THEN BEGIN
                                                                    "Cost Rate" := 0;
                                                                    "Cost Rate (FCY)" := 0;
                                                                  END ELSE BEGIN
                                                                    "Cost Rate" := RecipeRec."Labor Cost Amount" / RecipeRec.Hours;
                                                                    "Cost Rate (FCY)" := ExchangeAmtLCYToFCY(RecipeRec."Labor Cost Amount", FALSE, TRUE, FALSE) / RecipeRec.Hours;
                                                                  END;
                                                                END ELSE BEGIN
                                                                  xRec."Rate Type" := "Rate Type"::Hours;
                                                                  xRec."Team Size" := 0;
                                                                  VALIDATE("Rate Code");
                                                                END;

                                                                CalculateDiscount(FALSE);
                                                                CalculateTotals;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Recipe (Child) }
    { 705 ;   ;Recipe Header       ;Boolean       ;CaptionML=ENU=Recipe Header }
    { 710 ;   ;Recipe Group (Child);Code10        ;TableRelation="Recipe Group".No.;
                                                   CaptionML=ENU=Recipe Group (Child) }
    { 720 ;   ;Additional Cost     ;Boolean       ;CaptionML=ENU=Additional Cost }
    { 740 ;   ;Removal Contribution;Boolean       ;CaptionML=ENU=Removal Contribution }
    { 750 ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   CaptionML=ENU=Cost Component }
    { 755 ;   ;Comments            ;Text50        ;CaptionML=ENU=Comments }
    { 770 ;   ;Supply              ;Boolean       ;CaptionML=ENU=Supply }
    { 780 ;   ;Comments for Logistics;Text50      ;CaptionML=ENU=Comments for Logistics }
    { 790 ;   ;Material Sheet      ;Option        ;CaptionML=ENU=Material Sheet;
                                                   OptionCaptionML=ENU=Customer and Assemly,Customer Only,Assembly only,Do not report;
                                                   OptionString=Customer and Assemly,Customer Only,Assembly only,Do not report }
    { 791 ;   ;Scheme Code         ;Code15        ;CaptionML=ENU=Scheme Code }
    { 808 ;   ;Object Type         ;Text30        ;CaptionML=ENU=Object Type }
    { 809 ;   ;Object Brand        ;Text30        ;CaptionML=ENU=Object Brand }
    { 900 ;   ;Text Composition    ;Text50        ;CaptionML=ENU=Text Composition }
    { 930 ;   ;Admicode            ;Code10        ;TableRelation="Admi Code";
                                                   OnValidate=VAR
                                                                lvAdmiCodeRec@1100485000 : Record 11012390;
                                                              BEGIN
                                                                IF Admicode <> '' THEN BEGIN
                                                                  lvAdmiCodeRec.GET(Admicode);
                                                                  IF Description = '' THEN
                                                                    Description := lvAdmiCodeRec.Description;
                                                                  //DP00381.sn
                                                                  IF ("Cost Object Price" = '') THEN BEGIN
                                                                    IF ("Cost Type (Price)"= "Cost Type (Price)"::Material) AND (lvAdmiCodeRec."Cost Object Material" <> '') THEN
                                                                      GetDefaultsCostObject(gvCostType::Material, lvAdmiCodeRec."Cost Object Material");
                                                                    IF ("Cost Type (Price)"= "Cost Type (Price)"::Subcontracting) AND (lvAdmiCodeRec."Cost Object Subcontracting" <> '') THEN
                                                                      GetDefaultsCostObject(gvCostType::Subcontracting, lvAdmiCodeRec."Cost Object Subcontracting");
                                                                    IF ("Cost Type (Price)"= "Cost Type (Price)"::Plant) AND (lvAdmiCodeRec."Cost Object Plant" <> '') THEN
                                                                      GetDefaultsCostObject(gvCostType::Plant, lvAdmiCodeRec."Cost Object Plant");
                                                                    IF ("Cost Type (Price)"= "Cost Type (Price)"::Sundry) AND (lvAdmiCodeRec."Cost Object Sundry" <> '') THEN
                                                                      GetDefaultsCostObject(gvCostType::Sundry, lvAdmiCodeRec."Cost Object Sundry");
                                                                  END;
                                                                  //DP00381.en
                                                                 END;
                                                              END;

                                                   CaptionML=ENU=Admi Code }
    { 940 ;   ;Purchase Action Mat.;Code10        ;TableRelation="Estimate Purchase Action".Code WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Purchase Action Material }
    { 950 ;   ;Purchase Action Filter Mat.;Code10 ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Purchase Action Filter Material }
    { 960 ;   ;Purchase Phase Mat. ;Code10        ;CaptionML=ENU=Purchase Phase Material;
                                                   Numeric=Yes }
    { 970 ;   ;Purchase Action Status Mat.;Option ;CaptionML=ENU=Purchase Action Status Material;
                                                   OptionCaptionML=ENU=Concept,Applied,Approved,Definitive;
                                                   OptionString=Concept,Applied,Approved,Definitive;
                                                   Editable=No }
    { 980 ;   ;Purch. Action Appr. Date Mat.;Date ;CaptionML=ENU=Purch. Action Approval Date Material;
                                                   Editable=No }
    { 990 ;   ;Advised Mat.        ;Boolean       ;CaptionML=ENU=Advised Material }
    { 1000;   ;Purchase Action Subc.;Code10       ;TableRelation="Estimate Purchase Action".Code WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Purchase Action Subcontracting }
    { 1010;   ;Purchase Action Filter Subc.;Code10;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Purchase Action Filter Subcontracting }
    { 1020;   ;Purchase Phase Subc.;Code10        ;CaptionML=ENU=Purchase Phase Subcontracting;
                                                   Numeric=Yes }
    { 1030;   ;Purchase Action Status Subc.;Option;CaptionML=ENU=Purchase Action Status Subcontracting;
                                                   OptionCaptionML=ENU=Concept,Applied,Approved,Definitive;
                                                   OptionString=Concept,Applied,Approved,Definitive;
                                                   Editable=No }
    { 1040;   ;Purch. Action Appr. Date Subc.;Date;CaptionML=ENU=Purch. Action Approval Date Subcontracting;
                                                   Editable=No }
    { 1050;   ;Advised Subc.       ;Boolean       ;CaptionML=ENU=Advised Subcontracting }
    { 1060;   ;Purchase Action Plant;Code10       ;TableRelation="Estimate Purchase Action".Code WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Purchase Action Plant }
    { 1070;   ;Purchase Action Filter Plant;Code10;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Purchase Action Filter Plant }
    { 1080;   ;Purchase Phase Plant;Code10        ;CaptionML=ENU=Purchase Phase Plant;
                                                   Numeric=Yes }
    { 1090;   ;Purchase Action Status Plant;Option;CaptionML=ENU=Purchase Action Status Plant;
                                                   OptionCaptionML=ENU=Concept,Applied,Approved,Definitive;
                                                   OptionString=Concept,Applied,Approved,Definitive;
                                                   Editable=No }
    { 1100;   ;Purch. Action Appr. Date Plant;Date;CaptionML=ENU=Purch. Action Approval Date Plant;
                                                   Editable=No }
    { 1110;   ;Advised Plant       ;Boolean       ;CaptionML=ENU=Advised Plant }
    { 1120;   ;Ignore Recipe Quantity;Boolean     ;OnValidate=BEGIN
                                                                //db.so, 03-11-11: M27731
                                                                //IF MODIFY THEN;  //db, 27-05-10: M13221;
                                                                //db.eo, 03-11-11: M27731
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Ignore Recipe Quantity }
    { 1130;   ;Rates Based On      ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Estimate Setup"."Rates Based On");
                                                   CaptionML=ENU=Rates Based On;
                                                   OptionCaptionML=ENU=Rate Group,Budget Rate;
                                                   OptionString=Rate Group,Budget Rate;
                                                   Editable=No }
    { 1140;   ;Wage Component      ;Code10        ;TableRelation="Wage Component";
                                                   OnValidate=BEGIN
                                                                CalculateTotals;  //C026032
                                                              END;

                                                   CaptionML=ENU=Wage Component }
    { 1150;   ;Price History 0 Exists;Boolean     ;CaptionML=ENU=Price History 0 Exists;
                                                   Editable=No }
    { 1160;   ;Quantity Sheet Feature;Code10      ;TableRelation="Est. Quantity Sheet Feature";
                                                   OnValidate=VAR
                                                                i@1100409000 : Integer;
                                                              BEGIN
                                                                //DP00686
                                                                REPEAT
                                                                  CheckFeatureRelation(i);
                                                                  i := i + 1;
                                                                UNTIL i=3;
                                                              END;

                                                   CaptionML=ENU=Quantity Sheet Feature }
    { 2000;   ;Cost Type (Price)   ;Option        ;InitValue=Material;
                                                   OnValidate=BEGIN
                                                                //DP00381
                                                                IF CurrFieldNo = FIELDNO("Cost Type (Price)") THEN BEGIN  //db, 17-03-14: C012735
                                                                  EstSetup.GET;
                                                                  IF "Cost Type (Price)" <> "Cost Type (Price)"::" " THEN BEGIN
                                                                    TESTFIELD("Recipe (Child)", '');
                                                                    TESTFIELD("Item No.", '');
                                                                    TESTFIELD("Basic Item", '');
                                                                    TESTFIELD("Trade Item", '');
                                                                    TESTFIELD("Plant Type", '');
                                                                    TESTFIELD("Set Code", '');
                                                                  END ELSE BEGIN
                                                                    "Cost Object Price" := '';
                                                                  END;
                                                                  IF "Cost Type (Price)" = "Cost Type (Price)"::Material THEN
                                                                     VALIDATE("Cost Object Price", EstSetup."Absence Value Material");
                                                                  IF "Cost Type (Price)" = "Cost Type (Price)"::Subcontracting THEN
                                                                     VALIDATE("Cost Object Price", EstSetup."Absence Value Subcontracting");
                                                                  IF "Cost Type (Price)" = "Cost Type (Price)"::Plant THEN
                                                                     VALIDATE("Cost Object Price", EstSetup."Absence Value Plant");
                                                                  IF "Cost Type (Price)" = "Cost Type (Price)"::Sundry THEN
                                                                     VALIDATE("Cost Object Price", EstSetup."Absence Value Sundry Cost");
                                                                END;
                                                                //InitSurcharge(TRUE);  //db, 26-05-14: C015031
                                                                IF CurrFieldNo = FIELDNO("Cost Type (Price)") THEN BEGIN  //db, 17-03-14: C012735
                                                                  InitSurcharge(TRUE);  //db, 26-05-14: C015031
                                                                  CalculateTotals;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Type (Price);
                                                   OptionCaptionML=ENU=" ,Material,Subcontracting,Plant,Sundry";
                                                   OptionString=[ ,Material,Subcontracting,Plant,Sundry] }
    { 2005;   ;Cost Type (Hours)   ;Option        ;OnValidate=BEGIN
                                                                //DP01047
                                                                IF CurrFieldNo = FIELDNO("Cost Type (Hours)") THEN BEGIN
                                                                  IF "Cost Type (Hours)" <> "Cost Type (Hours)"::Labor THEN BEGIN
                                                                    EstRec.GET("Estimate No.");
                                                                    EstRec.TESTFIELD("Plant Rates in Hours",TRUE);
                                                                    VALIDATE("Rate Code", '');
                                                                  END;
                                                                  CalculateTotals;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Type (Hours);
                                                   OptionCaptionML=ENU=Labor,,,Plant;
                                                   OptionString=Labor,,,Plant;
                                                   Description=DP01047 }
    { 2010;   ;Nett Sales Price    ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Nett Sales Price (FCY)" := ExchangeAmtLCYToFCY("Nett Sales Price", TRUE, TRUE, FALSE);
                                                                CalculateDiscount(TRUE);
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Nett Sales Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 2015;No ;Sales Price         ;Decimal       ;OnValidate=VAR
                                                                CurrencyDate@1100528802 : Date;
                                                                CurrencyExchangeRate@1100528801 : Record 330;
                                                                Currency2@1100528800 : Record 4;
                                                              BEGIN
                                                              END;

                                                   CaptionML=ENU=Sales Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 2020;   ;Norm Group (Sales)  ;Code10        ;TableRelation="Norm Group".Code;
                                                   OnValidate=BEGIN
                                                                DetermineNormSales;
                                                              END;

                                                   CaptionML=ENU=Norm Group (Sales) }
    { 2030;   ;Norm (Sales)        ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> FIELDNO("Production Rate (Sales)") THEN
                                                                  IF "Norm (Sales)" <> 0 THEN
                                                                    "Production Rate (Sales)" := 1 / "Norm (Sales)"
                                                                  ELSE
                                                                    "Production Rate (Sales)" := 0;

                                                                CalculateTotals;  //db, 24-09-12: norm and production rate used to calculate hours
                                                              END;

                                                   CaptionML=ENU=Norm (Sales);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 2035;   ;Production Rate (Sales);Decimal    ;OnValidate=BEGIN
                                                                IF "Production Rate (Sales)" <> 0 THEN
                                                                  VALIDATE("Norm (Sales)", 1 / "Production Rate (Sales)")
                                                                ELSE
                                                                  VALIDATE("Norm (Sales)",1);
                                                              END;

                                                   CaptionML=ENU=Production Rate (Sales);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 2040;   ;Sales Rate          ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Code" = '' THEN
                                                                  "Sales Rate (FCY)" := ExchangeAmtLCYToFCY("Sales Rate", TRUE, TRUE, FALSE);
                                                              END;

                                                   CaptionML=ENU=Sales Rate;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 2050;   ;Quantity (Sales)    ;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Quantity (Sales);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 2055;   ;Deviating Sales Quantity;Boolean   ;CaptionML=ENU=Deviating Sales Quantity;
                                                   Editable=No }
    { 2060;   ;Surcharge % Labor   ;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Surcharge % Labor;
                                                   BlankZero=Yes }
    { 2065;   ;Surcharge % Price   ;Decimal       ;OnValidate=BEGIN
                                                                //CheckSurchargeMaterialPrice;  //db, 26-05-14: C015031
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Surcharge % Price;
                                                   BlankZero=Yes }
    { 2070;   ;Sales Condition Present;Boolean    ;CaptionML=ENU=Sales Condition Present;
                                                   Editable=No }
    { 2090;   ;Uncoded Sundry      ;Boolean       ;CaptionML=ENU=Uncoded Sundry;
                                                   Editable=No }
    { 2100;   ;Labor Sales Amount  ;Decimal       ;CaptionML=ENU=Labor Sales Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2110;   ;Nett Sales Amount   ;Decimal       ;CaptionML=ENU=Nett Sales Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2115;   ;Hours (Sales)       ;Decimal       ;CaptionML=ENU=Hours (Sales);
                                                   DecimalPlaces=2:;
                                                   Editable=No }
    { 2200;   ;Sales Amount        ;Decimal       ;CaptionML=ENU=Sales Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2210;   ;Cumulative Hours (Sales);Decimal   ;CaptionML=ENU=Cumulative Hours (Sales) }
    { 2220;   ;Cumulative Labor (Sales);Decimal   ;CaptionML=ENU=Cumulative Labo (Sales)r;
                                                   AutoFormatType=1 }
    { 2230;   ;Cumulative Nett Amount (Sales);Decimal;
                                                   CaptionML=ENU=Cumulative Nett Amount (Sales);
                                                   AutoFormatType=1 }
    { 2240;   ;Cumulative Buy Back (Sales);Decimal;CaptionML=ENU=Cumulative Buy Back (Sales);
                                                   AutoFormatType=1 }
    { 2250;   ;Recipe Cost Amount  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Cost Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                               Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                               Part Group=FIELD(Part Group),
                                                                                                               Part=FIELD(Part),
                                                                                                               Estimate Line=FIELD(Estimate Line),
                                                                                                               Attached to Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Recipe Cost Amount;
                                                   Description=total nested recipe;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2251;   ;Recipe Labor Cost Amount;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Labor Cost Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                     Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                     Part Group=FIELD(Part Group),
                                                                                                                     Part=FIELD(Part),
                                                                                                                     Estimate Line=FIELD(Estimate Line),
                                                                                                                     Attached to Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Recipe Labor Cost Amount;
                                                   Description=total nested recipe;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2252;   ;Recipe Hours        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line".Hours WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                       Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                       Part Group=FIELD(Part Group),
                                                                                                       Part=FIELD(Part),
                                                                                                       Estimate Line=FIELD(Estimate Line),
                                                                                                       Attached to Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Recipe Hours;
                                                   DecimalPlaces=2:;
                                                   Description=total nested recipe;
                                                   Editable=No }
    { 2253;   ;Recipe Nett Cost Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Nett Cost Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                    Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                    Part Group=FIELD(Part Group),
                                                                                                                    Part=FIELD(Part),
                                                                                                                    Estimate Line=FIELD(Estimate Line),
                                                                                                                    Attached to Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Recipe Nett Cost Amount;
                                                   Description=total nested recipe;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2254;   ;Recipe Gross Amount ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Gross Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                Part Group=FIELD(Part Group),
                                                                                                                Part=FIELD(Part),
                                                                                                                Estimate Line=FIELD(Estimate Line),
                                                                                                                Attached to Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Recipe Gross Cost Amount;
                                                   Description=total nested recipe;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2260;   ;Recipe Sales Amount ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Sales Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                Part Group=FIELD(Part Group),
                                                                                                                Part=FIELD(Part),
                                                                                                                Estimate Line=FIELD(Estimate Line),
                                                                                                                Attached to Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Recipe Sales Amount;
                                                   Description=total nested recipe;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2261;   ;Recipe Labor Sales Amount;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Labor Sales Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                      Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                      Part Group=FIELD(Part Group),
                                                                                                                      Part=FIELD(Part),
                                                                                                                      Estimate Line=FIELD(Estimate Line),
                                                                                                                      Attached to Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Recipe Labor Sales Amount;
                                                   Description=total nested recipe;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2262;   ;Recipe Hours (Sales);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Hours (Sales)" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                 Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                 Part Group=FIELD(Part Group),
                                                                                                                 Part=FIELD(Part),
                                                                                                                 Estimate Line=FIELD(Estimate Line),
                                                                                                                 Attached to Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Recipe Hours (Sales);
                                                   DecimalPlaces=2:;
                                                   Description=total nested recipe;
                                                   Editable=No }
    { 2263;   ;Recipe Nett Sales Amount;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Recipe Line"."Nett Sales Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                     Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                     Part Group=FIELD(Part Group),
                                                                                                                     Part=FIELD(Part),
                                                                                                                     Estimate Line=FIELD(Estimate Line),
                                                                                                                     Attached to Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Recipe Nett Sales Amount;
                                                   Description=total nested recipe;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2270;   ;Recipe Exploded     ;Boolean       ;CaptionML=ENU=Recipe Exploded }
    { 2300;   ;Material Cost Amount;Decimal       ;CaptionML=ENU=Material Cost Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2305;   ;Material Sales Amount;Decimal      ;CaptionML=ENU=Material Sales Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2310;   ;Subcontracting Cost Amount;Decimal ;CaptionML=ENU=Subcontracting Cost Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2315;   ;Subcontracting Sales Amount;Decimal;CaptionML=ENU=Subcontracting Sales Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2320;   ;Plant Cost Amount   ;Decimal       ;CaptionML=ENU=Plant Cost Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2325;   ;Plant Sales Amount  ;Decimal       ;CaptionML=ENU=Plant Sales Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2330;   ;Sundry Cost Amount  ;Decimal       ;CaptionML=ENU=Sundry Cost Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2335;   ;Sundry Sales Amount ;Decimal       ;CaptionML=ENU=Sundry Sales Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 2340;   ;Price Agreement (Sales);Boolean    ;CaptionML=ENU=Price Agreement (Sales) }
    { 2345;   ;Norm Agreement (Sales);Boolean     ;CaptionML=ENU=Norm Agreement (Sales) }
    { 2350;   ;Adj. Factor Hours (Sales);Decimal  ;OnValidate=BEGIN
                                                                ProcessAdjustmentFactor(1,2);  //DP00555
                                                              END;

                                                   CaptionML=ENU=Hours Adjustment Factor (Sales);
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 2360;   ;Cum. Adj. Factor Hours (Sales);Decimal;
                                                   CaptionML=ENU=Cum. Hours Adjustment Factor (Sales);
                                                   DecimalPlaces=0:6 }
    { 3000;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                CheckCurrencyAgreement;  //db, 08-03-16
                                                                VALIDATE("Rate Code");
                                                                VALIDATE("Gross Price");
                                                                "Gross Price (FCY)" := ExchangeAmtLCYToFCY("Gross Price", FALSE, TRUE, FALSE);  //db, 11-01-16
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Currency Code;
                                                   Editable=No }
    { 3001;   ;Currency Agreement  ;Boolean       ;CaptionML=ENU=Currency Agreement }
    { 3010;   ;Nett Cost Price (FCY);Decimal      ;OnValidate=BEGIN
                                                                SetSkipValidateFCY(TRUE);
                                                                VALIDATE("Nett Cost Price", ExchangeAmtFCYToLCY("Nett Cost Price (FCY)", FALSE, TRUE, FALSE));
                                                              END;

                                                   CaptionML=ENU=Nett Cost Price (FCY);
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 3020;   ;Nett Sales Price (FCY);Decimal     ;OnValidate=BEGIN
                                                                SetSkipValidateFCY(TRUE);
                                                                VALIDATE("Nett Sales Price", ExchangeAmtFCYToLCY("Nett Sales Price (FCY)", TRUE, TRUE, FALSE));
                                                              END;

                                                   CaptionML=ENU=Nett Sales Price (FCY);
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 3030;   ;Gross Price (FCY)   ;Decimal       ;OnValidate=VAR
                                                                SaveGrossPrice@1100525000 : Decimal;
                                                              BEGIN
                                                                //C026956.sn
                                                                //SetSkipValidateFCY(TRUE);
                                                                SaveGrossPrice := "Gross Price (FCY)";
                                                                VALIDATE("Gross Price", ExchangeAmtFCYToLCY("Gross Price (FCY)", FALSE, TRUE, FALSE));
                                                                IF CurrFieldNo = FIELDNO("Gross Price (FCY)") THEN
                                                                  "Gross Price (FCY)" := SaveGrossPrice;  //function CalculateDiscount cleared input on validate GrossPrice
                                                                //C026956.en
                                                              END;

                                                   CaptionML=ENU=Gross Price (FCY);
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 3040;   ;Cost Rate (FCY)     ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Cost Rate", ExchangeAmtFCYToLCY("Cost Rate (FCY)", FALSE, TRUE, FALSE));
                                                              END;

                                                   CaptionML=ENU=Cost Rate (FCY);
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 3050;   ;Sales Rate (FCY)    ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Sales Rate", ExchangeAmtFCYToLCY("Sales Rate (FCY)", TRUE, TRUE, FALSE));
                                                              END;

                                                   CaptionML=ENU=Sales Rate (FCY);
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 3060;   ;Material Cost Amount (FCY);Decimal ;CaptionML=ENU=Material Cost Amount (FCY);
                                                   Editable=No }
    { 3070;   ;Material Sales Amount (FCY);Decimal;CaptionML=ENU=Material Sales Amount (FCY);
                                                   Editable=No }
    { 3080;   ;Gross Amount (FCY)  ;Decimal       ;CaptionML=ENU=Gross Amount (FCY);
                                                   Editable=No }
    { 3090;   ;Subcontr. Cost Amount (FCY);Decimal;CaptionML=ENU=Subcontracting Cost Amount (FCY);
                                                   Editable=No }
    { 3100;   ;Subcontr. Sales Amount (FCY);Decimal;
                                                   CaptionML=ENU=Subcontracting Sales Amount (FCY);
                                                   Editable=No }
    { 3120;   ;Plant Cost Amount (FCY);Decimal    ;CaptionML=ENU=Plant Cost Amount (FCY);
                                                   Editable=No }
    { 3130;   ;Plant Sales Amount (FCY);Decimal   ;CaptionML=ENU=Plant Sales Amount (FCY);
                                                   Editable=No }
    { 3150;   ;Sundry Cost Amount (FCY);Decimal   ;Editable=No }
    { 3160;   ;Sundry Sales Amount (FCY);Decimal  ;Editable=No }
    { 3180;   ;Cost Amount (FCY)   ;Decimal       ;CaptionML=ENU=Cost Amount (FCY);
                                                   Editable=No }
    { 3190;   ;Sales Amount (FCY)  ;Decimal       ;CaptionML=ENU=Sales Amount (FCY);
                                                   Editable=No }
    { 3200;   ;Labor Cost Amount (FCY);Decimal    ;CaptionML=ENU=Labor Cost Amount (FCY);
                                                   Editable=No }
    { 3210;   ;Labor Sales Amount (FCY);Decimal   ;CaptionML=ENU=Labor Sales Amount (FCY);
                                                   Editable=No }
    { 3230;   ;Nett Cost Amount (FCY);Decimal     ;CaptionML=ENU=Nett Cost Amount (FCY);
                                                   Editable=No }
    { 3240;   ;Nett Sales Amount (FCY);Decimal    ;CaptionML=ENU=Nett Sales Amount (FCY);
                                                   Editable=No }
    { 3250;   ;Buy Back Price (FCY);Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Buy Back Price", ExchangeAmtFCYToLCY("Buy Back Price (FCY)", FALSE, TRUE, FALSE));
                                                              END;

                                                   CaptionML=ENU=Buy Back Price (FCY) }
    { 3260;   ;Buy Back Amount (FCY);Decimal      ;CaptionML=ENU=Buy Back Amount (FCY);
                                                   Editable=No }
    { 11012434;;Project Planning Activity Code;Code10;
                                                   TableRelation="Project Planning Base Activity";
                                                   OnValidate=VAR
                                                                ProjectPlanningActivity@1100528402 : Record 11012431;
                                                                ProjectPlanningBaseActivity@1100528401 : Record 11012434;
                                                                FormatManagement@1100528400 : Codeunit 11012022;
                                                              BEGIN
                                                                FormatManagement.FormatElem("Project Planning Activity Code", 20, '');
                                                                IF "Project Planning Activity Code" <> '' THEN
                                                                  IF "Project No." <> '' THEN BEGIN
                                                                    IF NOT ProjectPlanningActivity.GET("Project No." + "Project Planning Activity Code") THEN
                                                                      ProjectPlanningBaseActivity.GET("Project Planning Activity Code");
                                                                  END ELSE
                                                                    ProjectPlanningBaseActivity.GET("Project Planning Activity Code");
                                                              END;

                                                   OnLookup=VAR
                                                              ProjectPlanningActivity@1100528401 : Record 11012431;
                                                              ProjectPlanningBaseActivity@1100528400 : Record 11012434;
                                                            BEGIN
                                                              IF "Project No." <> '' THEN BEGIN
                                                                ProjectPlanningActivity.SETRANGE("Project No.", "Project No.");
                                                                ProjectPlanningActivity.Code := "Project Planning Activity Code";
                                                                IF PAGE.RUNMODAL(PAGE::"Project Planning Activity List", ProjectPlanningActivity) = ACTION::LookupOK THEN
                                                                  VALIDATE("Project Planning Activity Code", ProjectPlanningActivity.Code);
                                                              END ELSE BEGIN
                                                                ProjectPlanningBaseActivity.Code := "Project Planning Activity Code";
                                                                IF PAGE.RUNMODAL(PAGE::"Proj. Planning Base Activities", ProjectPlanningBaseActivity) = ACTION::LookupOK THEN
                                                                  VALIDATE("Project Planning Activity Code", ProjectPlanningBaseActivity.Code);
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Project Planning Activity Code;
                                                   Description=RAW }
    { 11125671;;VAT Prod. Posting Group;Code10    ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=VAR
                                                                GWWSetup@1100525000 : Record 11012260;
                                                              BEGIN
                                                                GWWSetup.GET;
                                                                CASE "VAT Prod. Posting Group" OF
                                                                  GWWSetup."VAT Prod. Posting Group (L)": "VAT Type" := "VAT Type"::Low;
                                                                  GWWSetup."VAT Prod. Posting Group (Z)": "VAT Type" := "VAT Type"::Zero;
                                                                  ELSE BEGIN
                                                                    "VAT Type" := "VAT Type"::High;
                                                                    IF "VAT Prod. Posting Group" <> '' THEN
                                                                      TESTFIELD("VAT Prod. Posting Group", GWWSetup."VAT Prod. Posting Group (H)");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=VAT Prod. Posting Group;
                                                   Description=RAW }
    { 11125672;;VAT Type           ;Option        ;CaptionML=ENU=VAT Type;
                                                   OptionCaptionML=ENU=High,Low,Zero;
                                                   OptionString=High,Low,Zero;
                                                   Description=RAW;
                                                   Editable=No }
    { 11125678;;Norm (Plant)       ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Norm (Plant)", 0);  //DP01047: expired
                                                              END;

                                                   CaptionML=ENU=Norm (Plant);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Description=DP01047: expired }
    { 11125679;;Production Rate (Plant);Decimal   ;OnValidate=BEGIN
                                                                TESTFIELD("Production Rate (Plant)", 0);  //DP01047: expired
                                                              END;

                                                   CaptionML=ENU=Production Rate (Plant);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Description=DP01047: expired }
    { 11125680;;Hours (Plant)      ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Hours (Plant)", 0);  //DP01047: expired
                                                              END;

                                                   CaptionML=ENU=Hours (Plant);
                                                   DecimalPlaces=2:5;
                                                   Description=DP01047: expired;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Estimate No.,Sub-Estimate No.,Part Group,Part,Estimate Line,Recipe Group,Recipe,Line No.;
                                                   SumIndexFields=Hours,Hours (Sales),Cost Amount,Labor Cost Amount,Labor Sales Amount,Nett Cost Amount,Nett Sales Amount,Gross Amount,Buy Back Amount,Total Weight;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Purchase Route Reference,Ask for Quote   }
    {    ;Recipe Group (Child),Recipe (Child)      }
    {    ;Recipe Group,Recipe                      }
    {    ;Project Planning Activity Code           }
    {    ;Estimate No.,Sub-Estimate No.,Part Group,Part,Estimate Line,Attached to Line No.;
                                                   SumIndexFields=Cost Amount,Sales Amount,Labor Cost Amount,Labor Sales Amount,Hours,Hours (Sales),Nett Cost Amount,Nett Sales Amount,Gross Amount;
                                                   MaintainSIFTIndex=No }
    {    ;Estimate No.,Sub-Estimate No.,Part Group,Part,Estimate Line,Cost Type (Price);
                                                   SumIndexFields=Hours,Labor Cost Amount,Nett Cost Amount,Nett Sales Amount,Gross Amount,Buy Back Amount,Total Weight,Original Hours,Original Nett Amount,Original Gross Amount }
    {    ;Estimate No.,Text Composition            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EstSetup@1210190001 : Record 11012150;
      EstRec@11012002 : Record 11012151;
      SubEstRec@11012003 : Record 11072074;
      EstPartRec@11012004 : Record 11072073;
      EstLineRec@1210190005 : Record 11072072;
      RecipeRec@11012005 : Record 11020581;
      RcpLineRec@1100485000 : Record 11072075;
      EstCodeRec@1210190014 : Record 11229772;
      CodeRec@1210190015 : Record 11012089;
      ChrgRec@1210190000 : Record 11229771;
      RateRec@1210190006 : Record 11012160;
      OperRec@11012006 : Record 11012165;
      SubOperRec@11012007 : Record 11012166;
      TradeItemRec@1210190019 : Record 11012317;
      BasicItemRec@11012008 : Record 11012316;
      ItemRec@1210190004 : Record 27;
      DimValRec@1210190002 : Record 349;
      ElemRec@1210190021 : Record 11012060;
      ProjElemRec@1210190020 : Record 11012010;
      TradeExpRec@1100485001 : Record 11020286;
      FormatMgt@11012009 : Codeunit 11012022;
      UpdateMgt@1210190009 : Codeunit 11012229;
      ValidateCu@11012010 : Codeunit 11012033;
      DimMgt@1210190003 : Codeunit 408;
      EstimateMgmt@1100525000 : Codeunit 11012232;
      ItemTypeOpt@1210190011 : 'Item,Basic Item,Trade Item,Trade Vendor';
      Text000@1210190013 : TextConst 'ENU=only allowed for material, subcontracting or plant (fill one of the prices or cost objects)';
      Text001@1210190012 : TextConst 'ENU=not allowed  for a combination of cost types (material, subcontracting and/or plant), split the recipe line';
      Text004@1210190016 : TextConst 'ENU=Remove Charge Line';
      Text005@1210190017 : TextConst 'ENU=Switch to Surcharge Line not allowed for Recipe Line with filled Quantity, Norm or Price';
      Text006@1100485004 : TextConst 'ENU=Default Purchase Action %1 not present for Estimate %2.';
      Text007@1100485003 : TextConst 'ENU=%1 of %2 is not adopted, because Status is %3.';
      gvCostType@1100485005 : 'Labor,Material,Subcontracting,Plant,Sundry';
      Text008@1100485007 : TextConst 'ENU=Copy Purchase action from new Cost Object?\\';
      Text009@1100485006 : TextConst 'ENU=Only empty fields will be filled. Existing data will not be changed.';
      Text010@1100525002 : TextConst 'ENU=Discount and/or Buy Back cannot be assigned properly. Cost type should be either Material or Plant (but not both).';
      EstSetupRead@1210190028 : Boolean;
      SkipCalculateTotals@1210190010 : Boolean;
      NormPresent@1210190018 : Boolean;
      NormGroupPresent@1210190022 : Boolean;
      SubEstPresent@1210190023 : Boolean;
      FromRecipeLineDelete@1210190024 : Boolean;
      SkipBlockedItem@1100525001 : Boolean;
      Text011@1100409000 : TextConst 'ENU=Add Line first.';
      SkipValidateFCY@1100528600 : Boolean;
      CalledFromUpdateTotals@1100409001 : Boolean;

    PROCEDURE CalculateTotals@1();
    VAR
      EstLineRec@1210190000 : Record 11072072;
      WageCompRec@1100528900 : Record 11012014;
      OverTimeFactorCost@1100528901 : Decimal;
      OverTimeFactorSales@1100528902 : Decimal;
    BEGIN
      //db, 25-03-2002:
      //-round labor amount on table level deleted and moved to page 11012158
      //-change format (2:) instead of AutoFormatType (was 1)
      //-purpose: prevent rounding problems on est.line by rate=totaal labor/hours from recipe
      //db, 29-07-10: M10904:
      //-problem not exist in AutoFormatType (reset to 1), but using Round on 2 decimals (deleted)
      //-disadvantage is that a difference can be observed at subtotals on higher level,
      // in particular when adjustment factors are applied.

      IF SkipCalculateTotals THEN //Call 23762
        EXIT; //Call 23762

      IF "Item No." + "Basic Item" + "Trade Item" <> '' THEN
        "Cost Type (Price)" := "Cost Type (Price)"::Material;  //DP00381

      IF "Surcharge Type" <> "Surcharge Type"::" " THEN BEGIN
        "Time Quantity" := 1;
        "Unit of Time" := '';
        Quantity := "Surcharge %" / 100;
        "Quantity (Sales)" := Quantity;
        "Surcharge % Labor" := 0;  //db, 05-11-15: C026570
        "Surcharge % Price" := 0;  //db, 05-11-15: C026570
      END;

      IF "Recipe Header" THEN BEGIN
        "Surcharge % Labor" := 0;  //db, 05-11-15: C026570
        "Surcharge % Price" := 0;  //db, 05-11-15: C026570
      END;

      //DP01047.sn
      IF "Production Rate" > 100000 THEN
        Hours := "Time Quantity" * Quantity / "Production Rate"
      ELSE
        Hours := "Time Quantity" * Quantity * Norm;
      IF "Production Rate (Sales)" > 100000 THEN
        "Hours (Sales)":= "Time Quantity" * "Quantity (Sales)" / "Production Rate (Sales)"
      ELSE
        "Hours (Sales)" := "Time Quantity" * "Quantity (Sales)" * "Norm (Sales)";
      //DP01047.en

      //db.sn, 03-11-11: M27731
      IF NOT EstLineRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Estimate Line") THEN
        EstLineRec.INIT;

      IF ("Ignore Recipe Quantity" = TRUE) THEN BEGIN
        IF (EstLineRec.Quantity <> 0) THEN
          Hours := Hours / EstLineRec.Quantity;
        IF (EstLineRec."Quantity (Sales)" <> 0) THEN
          "Hours (Sales)" := "Hours (Sales)" / EstLineRec."Quantity (Sales)";
      END;

      "Original Hours" := Hours;

      //"Cost Rate (FCY)" := ExchangeAmtLCYToFCY("Cost Rate", FALSE, TRUE, FALSE);
      //"Sales Rate (FCY)" := ExchangeAmtLCYToFCY("Sales Rate", TRUE, TRUE, FALSE);

      IF "Rate Type" = "Rate Type"::Minuts THEN
        "Original Hours" := "Original Hours" * "Team Size" / 60;
      //db.en, 03-11-11: M27731
      IF "Cum. Adj. Factor Hours" <> 0 THEN
        Hours := Hours * "Cum. Adj. Factor Hours";
      IF "Cum. Adj. Factor Hours (Sales)" <> 0 THEN  //DP00555
        "Hours (Sales)" := "Hours (Sales)" * "Cum. Adj. Factor Hours (Sales)";
      "Labor Cost Amount" := Hours * "Cost Rate";
      "Labor Cost Amount (FCY)" := Hours * "Cost Rate (FCY)";
      "Labor Sales Amount" := "Hours (Sales)" * "Sales Rate" * (1 + "Surcharge % Labor"/100);
      "Labor Sales Amount (FCY)" := "Hours (Sales)" * "Sales Rate (FCY)" * (1 + "Surcharge % Labor"/100);
      //DP00236.sn
      IF "Wage Component" <> '' THEN BEGIN
        WageCompRec.GetOverTimeFactors("Wage Component",OverTimeFactorCost, OverTimeFactorSales);
        IF OverTimeFactorCost <> 0 THEN BEGIN
          "Labor Cost Amount" := "Labor Cost Amount" * OverTimeFactorCost;
          "Labor Cost Amount (FCY)" := "Labor Cost Amount (FCY)" * OverTimeFactorCost;
        END;
        IF OverTimeFactorSales <> 0 THEN BEGIN
          "Labor Sales Amount" := "Labor Sales Amount" * OverTimeFactorSales;
          "Labor Sales Amount (FCY)" := "Labor Sales Amount (FCY)" * OverTimeFactorSales;
        END;
      END;
      //DP00236.en
      IF "Rate Type" = "Rate Type"::Minuts THEN BEGIN
        Hours := Hours * "Team Size" / 60;
        "Hours (Sales)" := "Hours (Sales)" * "Team Size" / 60;
      END;

      "Gross Amount" := "Time Quantity" * Quantity * "Gross Price";
      "Gross Amount (FCY)" := "Time Quantity" * Quantity * ExchangeAmtLCYToFCY("Gross Price", FALSE, TRUE, FALSE);
      "Nett Cost Amount" := "Time Quantity" * Quantity * "Nett Cost Price";
      "Nett Cost Amount (FCY)" := "Time Quantity" * Quantity * ExchangeAmtLCYToFCY("Nett Cost Price", FALSE, TRUE, FALSE);
      "Nett Sales Amount" := "Time Quantity" * "Quantity (Sales)" * "Nett Sales Price" * (1 + "Surcharge % Price"/100);
      "Nett Sales Amount (FCY)" := "Time Quantity" * "Quantity (Sales)" * ExchangeAmtLCYToFCY("Nett Sales Price", TRUE, TRUE, FALSE) * (1 + "Surcharge % Price"/100);

      //DP01047.sn
      IF "Cost Type (Hours)" = "Cost Type (Hours)"::Plant THEN BEGIN
        "Gross Amount" := Hours * "Gross Price";
        "Gross Amount (FCY)" := Hours * ExchangeAmtLCYToFCY("Gross Price", FALSE, TRUE, FALSE);
        "Nett Cost Amount" := Hours * "Nett Cost Price";
        "Nett Cost Amount (FCY)" := Hours * ExchangeAmtLCYToFCY("Nett Cost Price", FALSE, TRUE, FALSE);
        "Nett Sales Amount" := "Hours (Sales)" * "Nett Sales Price" * (1 + "Surcharge % Price"/100);
        "Nett Sales Amount (FCY)" := "Hours (Sales)" * ExchangeAmtLCYToFCY("Nett Sales Price", FALSE, TRUE, FALSE) * (1 + "Surcharge % Price"/100);
      END;
      //DP01047.en

      //db.sn, 03-11-11: M27731
      IF ("Ignore Recipe Quantity" = TRUE) THEN BEGIN
        IF (EstLineRec.Quantity <> 0) THEN BEGIN
          "Gross Amount" := "Gross Amount" / EstLineRec.Quantity;
          "Gross Amount (FCY)" := "Gross Amount (FCY)" / EstLineRec.Quantity;
          "Nett Cost Amount" := "Nett Cost Amount" / EstLineRec.Quantity;
          "Nett Cost Amount (FCY)" := "Nett Cost Amount (FCY)" / EstLineRec.Quantity;
        END;
        IF (EstLineRec."Quantity (Sales)" <> 0) THEN BEGIN
          "Nett Sales Amount" := "Nett Sales Amount" / EstLineRec."Quantity (Sales)";
          "Nett Sales Amount (FCY)" := "Nett Sales Amount (FCY)" / EstLineRec."Quantity (Sales)";
        END;
      END;
      "Original Nett Amount" := "Nett Cost Amount";
      "Original Gross Amount" := "Gross Amount";
      //db.en, 03-11-11: M27731
      IF "Cum. Adj. Factor Price" <> 0 THEN BEGIN
        "Nett Cost Amount" := "Nett Cost Amount" * "Cum. Adj. Factor Price";
        "Nett Cost Amount (FCY)" := "Nett Cost Amount (FCY)" * "Cum. Adj. Factor Price";
        "Nett Sales Amount" := "Nett Sales Amount" * "Cum. Adj. Factor Price";
        "Nett Sales Amount (FCY)" := "Nett Sales Amount (FCY)" * "Cum. Adj. Factor Price";
        "Gross Amount" := "Gross Amount" * "Cum. Adj. Factor Price";
        "Gross Amount (FCY)" := "Gross Amount (FCY)" * "Cum. Adj. Factor Price";
      END;
      //db.sn, 29-07-10: M10904
      //"Material Amount" := ROUND("Material Amount");
      //"Gross Amount" := ROUND("Gross Amount");
      //"Subcontracting Amount" := ROUND("Subcontracting Amount");
      //"Plant Amount" := ROUND("Plant Amount");
      //db.en, 29-07-10: M10904

      IF "Cost Type (Price)" = "Cost Type (Price)"::Material THEN BEGIN
        "Material Cost Amount" := "Nett Cost Amount";
        "Material Cost Amount (FCY)" := "Nett Cost Amount (FCY)";
        "Material Sales Amount" := "Nett Sales Amount";
        "Material Sales Amount (FCY)" := "Nett Sales Amount (FCY)";
      END ELSE BEGIN  //db, 17-03-14: C012735
        "Material Cost Amount" := 0;
        "Material Cost Amount (FCY)" := 0;
        "Material Sales Amount" := 0;
        "Material Sales Amount (FCY)" := 0;
      END;
      IF "Cost Type (Price)" = "Cost Type (Price)"::Subcontracting THEN BEGIN
        "Subcontracting Cost Amount" := "Nett Cost Amount";
        "Subcontr. Cost Amount (FCY)" := "Nett Cost Amount (FCY)";
        "Subcontracting Sales Amount" := "Nett Sales Amount";
        "Subcontr. Sales Amount (FCY)" := "Nett Sales Amount (FCY)";
      END ELSE BEGIN  //db, 17-03-14: C012735
        "Subcontracting Cost Amount" := 0;
        "Subcontr. Cost Amount (FCY)" := 0;
        "Subcontracting Sales Amount" := 0;
        "Subcontr. Sales Amount (FCY)" := 0;
      END;
      IF "Cost Type (Price)" = "Cost Type (Price)"::Plant THEN BEGIN
        "Plant Cost Amount" := "Nett Cost Amount";
        "Plant Cost Amount (FCY)" := "Nett Cost Amount (FCY)";
        "Plant Sales Amount" := "Nett Sales Amount";
        "Plant Sales Amount (FCY)" := "Nett Sales Amount (FCY)";
      END ELSE BEGIN  //db, 17-03-14: C012735
        "Plant Cost Amount" := 0;
        "Plant Cost Amount (FCY)" := 0;
        "Plant Sales Amount" := 0;
        "Plant Sales Amount (FCY)" := 0;
      END;
      IF "Cost Type (Price)" = "Cost Type (Price)"::Sundry THEN BEGIN
        "Sundry Cost Amount" := "Nett Cost Amount";
        "Sundry Cost Amount (FCY)" := "Nett Cost Amount (FCY)";
        "Sundry Sales Amount" := "Nett Sales Amount";
        "Sundry Sales Amount (FCY)" := "Nett Sales Amount (FCY)";
      END ELSE BEGIN  //db, 17-03-14: C012735
        "Sundry Cost Amount" := 0;
        "Sundry Cost Amount (FCY)" := 0;
        "Sundry Sales Amount" := 0;
        "Sundry Sales Amount (FCY)" := 0;
      END;

      "Cost Amount" := "Labor Cost Amount" + "Nett Cost Amount";
      "Cost Amount (FCY)" := "Labor Cost Amount (FCY)" + "Nett Cost Amount (FCY)";
      "Sales Amount" := "Labor Sales Amount" + "Nett Sales Amount";
      "Sales Amount (FCY)" := "Labor Sales Amount (FCY)" + "Nett Sales Amount (FCY)";

      "Total Weight" := ROUND(Quantity * Weight);
      "Buy Back Amount" := ROUND(Quantity * "Buy Back Price");
      "Buy Back Amount (FCY)" := ROUND(Quantity * ExchangeAmtLCYToFCY("Buy Back Price", FALSE, TRUE, FALSE));

      UpdateCumTotals(EstLineRec);

      IF CurrFieldNo <> 0 THEN
        UpdateEstLines;  //db, 27-05-10: moved from OnValidate several fields (as Quantity, Norm, Price)

      IF "Surcharge Type" <> "Surcharge Type"::" " THEN BEGIN
        Quantity := 1;
        "Quantity (Sales)" := 1;
      END;

      "Deviating Sales Quantity" := (Quantity <> "Quantity (Sales)");  //db, 03-02-15: C020959
    END;

    PROCEDURE CalculateQuantity@11012000();
    VAR
      lv1@1210190000 : Decimal;
      lv2@1210190001 : Decimal;
      lv3@1210190002 : Decimal;
    BEGIN
      lv1 := Length;
      lv2 := Width;
      lv3 := Height;

      IF Length = 0 THEN lv1 := 1;
      IF Width = 0 THEN lv2 := 1;
      IF Height = 0 THEN lv3 := 1;

      VALIDATE(Quantity, lv1 * lv2 * lv3);
    END;

    PROCEDURE CalculateNettPrice@13();
    BEGIN
      VALIDATE("Nett Cost Price","Gross Price" - (("Gross Price"/100) * "Purchase Discount %"));
      VALIDATE("Nett Sales Price","Gross Price" - (("Gross Price"/100) * "Sales Discount %"));
    END;

    PROCEDURE CalculateDiscount@1210190012(SalesBln@1100528900 : Boolean);
    BEGIN
      IF "Gross Price" <> 0 THEN BEGIN
        IF  ("Item No." + "Basic Item" + "Trade Item" + "Plant Type" = '') AND ("Purchase Discount %" = 0) THEN BEGIN
          "Gross Price" := "Nett Cost Price";
          "Gross Price (FCY)" := "Nett Cost Price (FCY)";
          //db.sn, 11-11-13: DP00260 (C005807)
          IF NOT SalesBln THEN
            VALIDATE("Nett Sales Price","Gross Price" - (("Gross Price"/100) * "Sales Discount %"));
          //db.en, 11-11-13: DP00260 (C005807)
        END ELSE BEGIN
          IF SalesBln THEN
            "Sales Discount %" := (("Gross Price" - "Nett Sales Price") / "Gross Price") * 100
          ELSE
            "Purchase Discount %" := (("Gross Price" - "Nett Cost Price") / "Gross Price") * 100;
        END;
      END ELSE BEGIN
        //db.sn, 11-11-13: DP00260 (C005807)
        IF NOT SalesBln THEN BEGIN
          IF "Purchase Discount %" = 0 THEN BEGIN
            "Gross Price" := "Nett Cost Price";
            "Gross Price (FCY)" := "Nett Cost Price (FCY)";
            VALIDATE("Nett Sales Price","Gross Price" - (("Gross Price"/100) * "Sales Discount %"));
          END;
        END;
        //db.en, 11-11-13: DP00260 (C005807)
        IF "Purchase Discount %" <> 100 THEN BEGIN
          IF NOT (("Item No." + "Basic Item" + "Trade Item" + "Plant Type" = '') AND ("Purchase Discount %" = 0)) THEN BEGIN
            "Gross Price" := "Nett Cost Price" / ((100 - "Purchase Discount %") / 100);
            "Gross Price (FCY)" := "Nett Cost Price (FCY)" / ((100 - "Purchase Discount %") / 100);
          END
        END ELSE BEGIN
          "Gross Price" := "Nett Cost Price";
          "Gross Price (FCY)" := "Nett Cost Price (FCY)";
        END;
      END;
    END;

    PROCEDURE CalculateGrossPrice@1100485000();
    BEGIN
      IF "Purchase Discount %" <> 100 THEN BEGIN
        "Gross Price" := "Nett Cost Price" * 100 / (100 - "Purchase Discount %");
        "Gross Price (FCY)" := "Nett Cost Price (FCY)" * 100 / (100 - "Purchase Discount %");  //db, 20-08-15
      END;
    END;

    PROCEDURE UpdateCumTotals@1210190001(EstLineRec@1210190000 : Record 11072072);
    BEGIN
      "Cumulative Hours" := Hours * EstLineRec.Quantity * EstLineRec."Part Quantity";
      "Cumulative Labor" := "Labor Cost Amount" * EstLineRec.Quantity * EstLineRec."Part Quantity";
      "Cumulative Nett Amount" := "Nett Cost Amount" * EstLineRec.Quantity * EstLineRec."Part Quantity";
      "Cumulative Buy Back" := "Buy Back Amount" * EstLineRec.Quantity * EstLineRec."Part Quantity";
      "Cumulative Weight" := "Total Weight" * EstLineRec.Quantity * EstLineRec."Part Quantity";
      //DP00381:
      "Cumulative Hours (Sales)" := "Hours (Sales)" * EstLineRec.Quantity * EstLineRec."Part Quantity";
      "Cumulative Labor (Sales)" := "Labor Sales Amount" * EstLineRec.Quantity * EstLineRec."Part Quantity";
      "Cumulative Nett Amount (Sales)" := "Nett Sales Amount" * EstLineRec.Quantity * EstLineRec."Part Quantity";
      //"Cumulative Buy Back (Sales)" := "Buy Back Amount" * EstLineRec.Quantity * EstLineRec."Part Quantity";
    END;

    PROCEDURE UpdateEstLines@2();
    VAR
      EstLineRec@11012000 : Record 11072072;
      EstimateLineOriginal@1210190005 : Record 11072072;
      RcpLineRec@1100525000 : Record 11072075;
      OrigHoursRecipe@1210190000 : Decimal;
      AdjustHoursRecipe@1210190002 : Decimal;
      AdjustMaterialRecipe@1210190004 : Decimal;
      AdjustSubcRecipe@1210190003 : Decimal;
      AdjustPlantRecipe@1210190001 : Decimal;
    BEGIN
      //DP00381
      IF EstLineRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Estimate Line") THEN BEGIN
        IF EstLineRec.Recipe = '' THEN
          EXIT;  //X055 (db, 19-10-11): problem on Page (LineEstimate) while timer on recipe lines activates this function
        EstimateLineOriginal := EstLineRec; //call 30195
        EstLineRec.CalculateTotals;
        IF FORMAT(EstLineRec) <> FORMAT(EstimateLineOriginal) THEN //call 30195
          EstLineRec.MODIFY;
        //check for surcharges over recipe lines in estimate (after update)
        EstLineRec.CheckEstimateCharge;
      END;
    END;

    PROCEDURE ValidateItem@3(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item,Trade Vendor';lvEstRec@1210190000 : Record 11012151;lvSwitchItem@1210190001 : Boolean);
    VAR
      Desc1Txt@1210190002 : Text[50];
      Desc2Txt@1210190003 : Text[50];
      lvRefDate@1100485001 : Date;
      lvDiscRef1@1100485004 : Code[20];
      lvDiscRef2@1100485003 : Code[20];
      lvRefPrio@1100525000 : Code[10];
      lvItemOper@1100485002 : Code[20];
      lvDiscType@1100525001 : 'Purchase,Sales';
    BEGIN
      IF lvSwitchItem = TRUE THEN BEGIN
        "Price Agreement" := FALSE;
        "Price Agreement (Sales)" := FALSE;  //DP00381
      END;

      IF ("Purchase Route Reference" = '') AND ("Price Agreement" = FALSE) THEN BEGIN
        CalcItemCostPriceAndDiscount(lvEstRec, LTypeArtOpt);  //db, 07-04-14: C013433
        IF "Cost Object Price" <> xRec."Cost Object Price" THEN
          GetDefaultsCostObject(gvCostType::Material, "Cost Object Price");

        ClearFields(2); //Buyback
        IF LTypeArtOpt = LTypeArtOpt::Item THEN BEGIN
          IF NOT ItemRec.GET("Item No.") THEN ItemRec.INIT;
          IF ItemRec."Sales/Buy-Back Item (Plant)" THEN BEGIN  //db, 06-06-11: M27669 (skip validate for normal items)
            //db.sn, 12-01-16
            lvRefDate := ValidateCu.GetRefDateEstimate(lvEstRec);
            ValidateCu.GetSalesBuyBackRates("Item No.", lvEstRec."Plant Location",lvRefDate,
              "Gross Price","Buy Back Price");  //db, 06-06-11: M27669 (use SalesRate as GrossPrice)
            //db.en, 12-01-16
            VALIDATE("Buy Back Price");
            VALIDATE("Nett Cost Price");
          END;
        END;
      END;
      IF ("Purchase Route Reference" = '') AND ("Price Agreement (Sales)" = FALSE) THEN BEGIN  //db, 19-12-14: C018758
        CalcItemSalesPriceAndDiscount(lvEstRec);  //db, 07-04-14: C013433
      END;

      IF lvSwitchItem = TRUE THEN BEGIN
        //db.sn, 26-05-14: C015031
        InitSurcharge(TRUE);
        CheckSurchargeMaterialPrice;  //db, 12-08-13: C005338
        //db.en, 26-05-14: C015031
        lvItemOper := '';  //db, 02-02-07: provisionally operation not saved per basis/trade item
        IF ItemRec.GET("Item No.") THEN BEGIN
          CopyItemText;  //DP00686
          VALIDATE("External Text", ItemRec.Text);
          lvItemOper := ItemRec."Sub Operation Code";
        END;
        IF "Rate Code" = '' THEN
          IF "Rate Code" <> lvEstRec."Rate Code" THEN //Call 23762
            VALIDATE("Rate Code", lvEstRec."Rate Code");

        CASE LTypeArtOpt OF
          LTypeArtOpt::Item:
            BEGIN
              IF NOT ItemRec.GET("Item No.") THEN ItemRec.INIT;
              IF ItemRec.Blocked THEN BEGIN  //db, 11-11-13: DP00260 (C002164)
                IF SkipBlockedItem THEN
                  MESSAGE(TABLECAPTION + ': ' + Description + '\' +
                    ItemRec.TABLECAPTION + ' ' + "Item No." + '='  + ItemRec.FIELDCAPTION(Blocked))
                ELSE
                  ItemRec.TESTFIELD(Blocked,FALSE);
              END;
              Weight := ItemRec.Weight;
            END;
          LTypeArtOpt::"Basic Item":
            BEGIN
              IF NOT BasicItemRec.GET(Manufacturer, "Basic Item") THEN BasicItemRec.INIT;
              IF BasicItemRec.Expired THEN BEGIN  //db, 11-11-13: DP00260 (C002164)
                IF SkipBlockedItem THEN
                  MESSAGE(TABLECAPTION + ': ' + Description + '\' +
                    BasicItemRec.TABLECAPTION + ' ' + "Basic Item" + '='  + BasicItemRec.FIELDCAPTION(Expired))
                ELSE
                   BasicItemRec.TESTFIELD(Expired,FALSE);
              END;
              Weight := BasicItemRec."Nett Weight";
              IF BasicItemRec."Sub Operation Code" <> '' THEN
                lvItemOper := BasicItemRec."Sub Operation Code";
            END;
          LTypeArtOpt::"Trade Item",
          LTypeArtOpt::"Trade Vendor":
            BEGIN
              IF NOT TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN TradeItemRec.INIT;
              IF TradeItemRec.Expired THEN BEGIN  //db, 11-11-13: DP00260 (C002164)
                IF SkipBlockedItem THEN
                  MESSAGE(TABLECAPTION + ': ' + Description + '\' +
                    TradeItemRec.TABLECAPTION + ' ' + "Trade Item" + '='  + TradeItemRec.FIELDCAPTION(Expired))
                ELSE
                  TradeItemRec.TESTFIELD(Expired,FALSE);
              END;
              Weight := TradeItemRec."Gross Weight";
              IF TradeItemRec."Sub Operation Code" <> '' THEN
                lvItemOper := TradeItemRec."Sub Operation Code";
            END;
        END;
        IF lvItemOper <> '' THEN   //db, 24-05-07 (call 9441 + problem at replacing trade item as a result of preferred vendor)
          VALIDATE("Sub Operation Code", lvItemOper);
      END;

      CalculateTotals;
    END;

    PROCEDURE CalcItemCostPriceAndDiscount@1100525011(lvEstRec@1100525005 : Record 11012151;LTypeArtOpt@1100525006 : 'Item,Basic Item,Trade Item,Trade Vendor');
    VAR
      lvRefDate@1100525003 : Date;
      lvDiscRef1@1100525002 : Code[20];
      lvDiscRef2@1100525001 : Code[20];
      lvRefPrio@1100525000 : Code[10];
      lvDiscType@1100525004 : 'Purchase,Sales';
      Desc1Txt@1100525008 : Text[50];
      Desc2Txt@1100525007 : Text[50];
    BEGIN
      //db, 07-04-14: C013433
      IF "Price Agreement" THEN EXIT;  //C030087
      GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, lvEstRec, lvDiscType::Purchase);
      lvRefPrio := ValidateCu.GetRefPrioEstimate(lvEstRec, lvDiscType::Purchase);
      IF GetSubEstimate("Estimate No.", "Sub-Estimate No.", TRUE) THEN //Call 23762
        ValidateCu.SetLanguageCode(SubEstRec."Language Code");

      ValidateCu.ValidateItem(
        LTypeArtOpt, "Trade Item", "Item No.", Manufacturer, "Vendor (Trade Item)", "Basic Item",
        "Cost Object Price", Desc1Txt, "Unit of Measure", "Nett Cost Price",
        "Purchase Discount %", "Price Reference Date", "Gross Price", Desc2Txt, "Cost Component",
        lvDiscRef1, lvDiscRef2, lvRefDate, lvRefPrio);

      IF LTypeArtOpt = LTypeArtOpt::"Trade Item" THEN
        "Price History 0 Exists" := ValidateCu.PriceHistory0Exists("Trade Item", "Vendor (Trade Item)", lvRefDate)
      ELSE
        "Price History 0 Exists" := FALSE;

      IF Desc2Txt = '' THEN
        Description := Desc1Txt
      ELSE
        Description := COPYSTR((Desc1Txt + '\' + Desc2Txt), 1, MAXSTRLEN(Description));

      VALIDATE("Gross Price");
    END;

    PROCEDURE CalcItemSalesPriceAndDiscount@1100525010(lvEstRec@1100525005 : Record 11012151);
    VAR
      lvRefDate@1100525003 : Date;
      lvDiscRef1@1100525002 : Code[20];
      lvDiscRef2@1100525001 : Code[20];
      lvRefPrio@1100525000 : Code[10];
      lvDiscType@1100525004 : 'Purchase,Sales';
    BEGIN
      //db, 07-04-14: C013433
      IF "Price Agreement (Sales)" THEN EXIT;  //C030087
      GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, lvEstRec, lvDiscType::Sales);
      lvRefPrio := ValidateCu.GetRefPrioEstimate(lvEstRec, lvDiscType::Sales);
      "Sales Condition Present" := ValidateCu.GetSalesDiscount(  //db, 27-05-14: C015604
        lvEstRec."Customer No.", "Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)",
        "Nett Sales Price", "Sales Discount %", "Gross Price", lvRefDate, lvEstRec."Customer Disc. Group",
        lvDiscRef1, lvDiscRef2, lvRefPrio);

      UpdateSalesPriceFromCostPrice;  //db, 11-04-14: C014487
    END;

    PROCEDURE UpdateSalesPriceFromCostPrice@1100525026();
    BEGIN
      //db, 11-04-14: C014487
      GetEstimate("Estimate No.", FALSE);
      IF EstRec."Item Sales Price Based On" = EstRec."Item Sales Price Based On"::GrossMin THEN EXIT;

      IF "Price Agreement (Sales)" THEN EXIT;

      "Sales Discount %" := 0;
      "Nett Sales Price" := "Nett Cost Price";
    END;

    PROCEDURE DetermineNormGroup@4();
    BEGIN
      IF "Norm Group" = '' THEN BEGIN
        IF GetEstPart THEN
          IF EstPartRec."Norm Group" = '' THEN BEGIN
            IF GetSubEstimate("Estimate No.", "Sub-Estimate No.", TRUE) THEN
              IF SubEstRec."Norm Group" = '' THEN BEGIN
                GetEstimate("Estimate No.", TRUE);
                IF EstRec."No." = "Estimate No." THEN
                  "Norm Group" := EstRec."Norm Group";
              END ELSE
                "Norm Group" := SubEstRec."Norm Group";
          END ELSE
            "Norm Group" := EstPartRec."Norm Group";
      END;

      IF "Norm Group (Sales)" = '' THEN BEGIN  //DP00381
        IF GetEstPart THEN
          IF EstPartRec."Norm Group (Sales)" = '' THEN BEGIN
            IF GetSubEstimate("Estimate No.", "Sub-Estimate No.", TRUE) THEN
              IF SubEstRec."Norm Group (Sales)" = '' THEN BEGIN
                GetEstimate("Estimate No.", TRUE);
                IF EstRec."No." = "Estimate No." THEN
                  "Norm Group (Sales)" := EstRec."Norm Group (Sales)";
              END ELSE
                "Norm Group (Sales)" := SubEstRec."Norm Group (Sales)";
          END ELSE
            "Norm Group (Sales)" := EstPartRec."Norm Group (Sales)";
      END;
    END;

    PROCEDURE DetermineNorm@7();
    VAR
      NormRec@11012000 : Record 11012163;
    BEGIN
      IF (NormRec."Sub Operation Code" <> "Sub Operation Code") OR (NormRec."Norm Group" <> "Norm Group") THEN //Call 23762
        NormPresent := NormRec.GET("Sub Operation Code","Norm Group"); //Call 23762
      IF NormPresent THEN BEGIN //Call 23762
        VALIDATE(Norm, NormRec.Norm);
        ConvertNorm(FALSE, FALSE);
      END ELSE BEGIN
        IF ("Norm Group" <> '') AND ("Sub Operation Code" <> '') THEN BEGIN
          VALIDATE(Norm, 0);
        END;
      END;
      CalculateTotals;
    END;

    PROCEDURE DetermineNormSales@1100528902();
    VAR
      NormRec@11012000 : Record 11012163;
    BEGIN
      //DP00381
      IF NormRec.GET("Sub Operation Code","Norm Group (Sales)") THEN BEGIN
        VALIDATE("Norm (Sales)", NormRec.Norm);
        ConvertNormSales(FALSE, FALSE);
      END ELSE BEGIN
        IF ("Norm Group (Sales)" <> '') AND ("Sub Operation Code" <> '') THEN BEGIN
          VALIDATE("Norm (Sales)", 0);
        END;
      END;
      CalculateTotals;
    END;

    PROCEDURE ConvertNorm@1210190002(SwitchType@1210190001 : Boolean;SwitchSize@1210190002 : Boolean);
    VAR
      NormGrpRec@1210190000 : Record 11012164;
    BEGIN
      IF (SwitchType = FALSE) AND (SwitchSize = FALSE) THEN BEGIN
        IF NormGrpRec.Code <> "Norm Group" THEN //Call 23762
          NormGroupPresent := NormGrpRec.GET("Norm Group"); //Call 23762
        IF NormGroupPresent THEN BEGIN //Call 23762
          IF NormGrpRec."Rate Type" <> "Rate Type" THEN
            SwitchType := TRUE;
          IF NormGrpRec."Team Size" <> "Team Size" THEN BEGIN
            SwitchSize := TRUE;
            xRec."Team Size" := NormGrpRec."Team Size";
          END;
        END;
      END;

      IF SwitchType = TRUE THEN
        IF "Rate Type" = "Rate Type"::Hours THEN
          Norm := Norm / 60
        ELSE
          Norm := Norm * 60;

      IF SwitchSize = TRUE THEN BEGIN
        IF "Team Size" <> 0 THEN
          Norm := Norm / "Team Size";
        IF xRec."Team Size" <> 0 THEN
          Norm := Norm * xRec."Team Size";
      END;

      IF SwitchSize OR SwitchType THEN
        IF Norm <> 0 THEN
          "Production Rate" := 1 / Norm
        ELSE
          "Production Rate" := 0;
    END;

    PROCEDURE ConvertNormSales@1100528903(SwitchType@1210190001 : Boolean;SwitchSize@1210190002 : Boolean);
    VAR
      NormGrpRec@1210190000 : Record 11012164;
    BEGIN
      //DP00381
      IF (SwitchType = FALSE) AND (SwitchSize = FALSE) THEN BEGIN
        IF NormGrpRec.GET("Norm Group (Sales)") THEN BEGIN
          IF NormGrpRec."Rate Type" <> "Rate Type" THEN
            SwitchType := TRUE;
          IF NormGrpRec."Team Size" <> "Team Size" THEN BEGIN
            SwitchSize := TRUE;
            xRec."Team Size" := NormGrpRec."Team Size";
          END;
        END;
      END;

      IF SwitchType = TRUE THEN
        IF "Rate Type" = "Rate Type"::Hours THEN
          "Norm (Sales)" := "Norm (Sales)"/ 60
        ELSE
          "Norm (Sales)" := "Norm (Sales)" * 60;

      IF SwitchSize = TRUE THEN BEGIN
        IF "Team Size" <> 0 THEN
          "Norm (Sales)" := "Norm (Sales)" / "Team Size";
        IF xRec."Team Size" <> 0 THEN
          "Norm (Sales)" := "Norm (Sales)" * xRec."Team Size";
      END;

      IF SwitchType OR SwitchSize THEN
        IF "Norm (Sales)" <> 0 THEN
          "Production Rate (Sales)" := 1 / "Norm (Sales)"
        ELSE
          "Production Rate (Sales)" := 0;
    END;

    PROCEDURE HandleLookupOperationNorm@1100528901(SalesBln@1100409000 : Boolean) lvRefresh : Boolean;
    VAR
      NormGroupFrm@1100528902 : Page 11012174;
      SubOperationCode@1100528900 : Code[20];
    BEGIN
      //DP00381
      IF ("Recipe (Child)" <> '') OR ("Surcharge Type" <> "Surcharge Type"::" ") THEN EXIT;

      CLEAR(NormGroupFrm);
      IF SalesBln THEN BEGIN  //db, 10-02-15
        NormGroupFrm.SetSubOperation("Sub Operation Code");
        NormGroupFrm.RUNMODAL;  //read only
        EXIT;
      END;
      NormGroupFrm.SetSelection(DATABASE::"Estimate Recipe Line","Estimate No.","Sub-Estimate No.",
        "Part Group",Part,"Estimate Line","Recipe Group",Recipe);
      //db.sn, 14-01-14
      NormGroupFrm.SetSubOperation("Sub Operation Code");
      NormGroupFrm.LOOKUPMODE(TRUE);
      IF NormGroupFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
        lvRefresh := NormGroupFrm.ApplySelection;
        IF lvRefresh = FALSE THEN BEGIN
          NormGroupFrm.GetSubOperation(SubOperationCode);
          IF SubOperationCode <> '' THEN BEGIN
            VALIDATE("Sub Operation Code", SubOperationCode);
            ProcessSubOperation;  //db, 28-02-14: C013489
          END;
        END;
      END;
      //db.en, 14-01-14

      EXIT(lvRefresh);
    END;

    PROCEDURE HandleLookupItem@1100525003(lvFieldNo@1100525004 : Integer) lvRefresh : Boolean;
    VAR
      ItemRec@1100525012 : Record 27;
      BasicItemRec@1100525011 : Record 11012316;
      TradeItemRec@1100525010 : Record 11012317;
      ItemFrm@1100525009 : Page 31;
      BasicItemFrm@1100525008 : Page 11012333;
      TradeItemFrm@1100525007 : Page 11012334;
      lvRefDate@1100525003 : Date;
      lvDiscRef1@1100525002 : Code[20];
      lvDiscRef2@1100525001 : Code[20];
      lvDiscType@1100525000 : 'Purchase,Sales';
      lvTempRecipeLine@1100525005 : TEMPORARY Record 11072075;
      g_ItemCode@1100525014 : Code[20];
      g_Vendor@1100525013 : Code[20];
    BEGIN
      IF "Recipe Header"  THEN EXIT;  //db, 28-03-14: C013896

      GetEstimate("Estimate No.", TRUE); //Call 23762
      GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, EstRec, lvDiscType::Purchase);

      IF lvFieldNo = FIELDNO("Item No.") THEN BEGIN
        CLEAR(ItemFrm);
        ItemFrm.LOOKUPMODE(TRUE);
        ItemFrm.DetermineInterface(DATABASE::"Estimate Recipe Line","Estimate No.","Sub-Estimate No.",
          Part,Recipe,"Estimate Line","Recipe Group","Part Group","Line No.",'','');

        IF ItemRec.GET("Item No.") THEN
          ItemFrm.SETRECORD(ItemRec);

        IF ItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ItemFrm.GETRECORD(ItemRec);
          VALIDATE("Item No.", ItemRec."No.");
        END ELSE BEGIN
          lvRefresh := ItemFrm.CheckMultiCopy;
        END;
      END;

      IF lvFieldNo = FIELDNO("Basic Item") THEN BEGIN
        CLEAR(BasicItemFrm);
        BasicItemFrm.LOOKUPMODE(TRUE);
        BasicItemFrm.SetSelection(DATABASE::"Estimate Recipe Line","Estimate No.","Sub-Estimate No.",
          Part,Recipe,"Estimate Line","Recipe Group","Part Group","Line No.",'','');

        BasicItemFrm.SetReference(lvRefDate, lvDiscRef1, lvDiscRef2);

        BasicItemRec.InitLookup(BasicItemRec, "Basic Item", Manufacturer);
        BasicItemFrm.SETRECORD(BasicItemRec);

        IF BasicItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          BasicItemFrm.GETRECORD(BasicItemRec);
          Manufacturer := BasicItemRec.Manufacturer;
          VALIDATE("Basic Item", BasicItemRec."Product Code");
        END ELSE BEGIN
          lvRefresh :=  BasicItemFrm.CheckMultiCopy;
        END;
      END;

      IF lvFieldNo = FIELDNO("Trade Item") THEN BEGIN
        IF "Item No." <> '' THEN BEGIN
          lvTempRecipeLine.COPY(Rec);  //db, 10-07-09: M15801
          lvTempRecipeLine.VALIDATE("Item No.","Item No.");
          g_ItemCode := lvTempRecipeLine."Trade Item";
          g_Vendor := lvTempRecipeLine."Vendor (Trade Item)";
        END ELSE BEGIN
          g_ItemCode := '';
          g_Vendor := '';
        END;

        CLEAR(TradeItemFrm);
        TradeItemFrm.LOOKUPMODE(TRUE);
        TradeItemFrm.SetSelection(DATABASE::"Estimate Recipe Line",
          "Estimate No.", "Sub-Estimate No.", Part, Recipe, "Estimate Line",
          "Recipe Group", "Part Group", "Line No.", '', '',
          "Vendor (Trade Item)", "Trade Item", Manufacturer, "Basic Item", g_ItemCode, g_Vendor);

        TradeItemFrm.SetReference(lvRefDate, lvDiscRef1, lvDiscRef2);

        TradeItemRec.InitLookup(TradeItemRec, "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)");
        TradeItemFrm.SETRECORD(TradeItemRec);

        IF TradeItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          TradeItemFrm.GETRECORD(TradeItemRec);
          Manufacturer := TradeItemRec.Manufacturer;
          "Basic Item" := TradeItemRec."Product Code";
          "Vendor (Trade Item)" := TradeItemRec.Vendor;
          VALIDATE("Trade Item", TradeItemRec."Item Code");
        END ELSE BEGIN
          lvRefresh := TradeItemFrm.CheckMultiCopy;
        END;
      END;

      EXIT(lvRefresh);
    END;

    PROCEDURE HandleAssistEditItem@1100528300(lvFieldNo@1210190000 : Integer) lvRefresh : Boolean;
    VAR
      ItemFrm@1210190003 : Page 31;
      BasicItemFrm@1210190002 : Page 11012333;
      TradeItemFrm@1210190001 : Page 11012334;
      lvRefDate@1100485002 : Date;
      lvDiscRef1@1100485001 : Code[20];
      lvDiscRef2@1100485000 : Code[20];
      GabiVendorRec@1210190004 : Record 11012304;
      "2baMgt"@1100528300 : Codeunit 11012306;
      RecRef@1100528301 : RecordRef;
    BEGIN
      IF lvFieldNo = FIELDNO("Trade Item") THEN BEGIN
        RecRef.GETTABLE(Rec);
        "2baMgt".RunModalDialogForMultipleItems("Vendor (Trade Item)", "Trade Item", RecRef);
        lvRefresh := TRUE;
      END;
    END;

    PROCEDURE HandleLookupUnit@1210190008();
    VAR
      ItemUnitRec@1210190000 : Record 5404;
      lvUnit@1210190001 : Code[10];
    BEGIN
      lvUnit := ItemUnitRec.HandleLookupUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)");
      IF (lvUnit <> '') AND (lvUnit <> "Unit of Measure") THEN BEGIN
        xRec."Unit of Measure" := "Unit of Measure";
        VALIDATE("Unit of Measure", lvUnit);
      END;
    END;

    PROCEDURE CheckItemUnitConversion@1210190010(VAR MainNewRec@1210190006 : Record 11072075;MainOldRec@1210190007 : Record 11072075);
    VAR
      ItemRec@1210190004 : Record 27;
      UnitFactor@1210190005 : Decimal;
      UnitFactorOld@1210190003 : Decimal;
      UnitFactorNew@1210190002 : Decimal;
      UnitControl@1210190001 : Codeunit 5402;
    BEGIN
      WITH MainNewRec DO BEGIN
        UnitFactorOld := 1;
        UnitFactorNew := 1;
        IF "Trade Item" <> '' THEN BEGIN
          ValidateCu.ValidateUnit(ItemTypeOpt::"Trade Item",
            "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
            Quantity,"Unit of Measure",UnitFactorNew);
        END ELSE BEGIN
          IF "Basic Item" <> '' THEN BEGIN
            ValidateCu.ValidateUnit(ItemTypeOpt::"Basic Item",
              "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
              Quantity,"Unit of Measure",UnitFactorNew);
          END ELSE BEGIN  //db, 07-04-08: M10070
            IF "Item No." <> '' THEN BEGIN
              ItemRec.GET("Item No.");
              UnitFactorOld := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, MainOldRec."Unit of Measure");
              UnitFactorNew := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, "Unit of Measure");
              UnitFactor := UnitFactorOld;
              ValidateCu.ValidateUnit(ItemTypeOpt::Item,
                "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
                Quantity,"Unit of Measure",UnitFactor);
            END;
          END;
        END;
        IF (UnitFactorNew * UnitFactorOld) <> 0 THEN
          IF UnitFactorNew <> UnitFactorOld THEN  //db, 20-04-11: M26826
            VALIDATE("Gross Price", ("Gross Price" * UnitFactorNew / UnitFactorOld));
      END;
    END;

    PROCEDURE CreateCharge@1100485005();
    VAR
      RecipeLine@1100485004 : Record 11072075;
      ChrgRec@11012000 : Record 11229771;
      ChrgLine@11012001 : Integer;
      ChrgDesc@11012002 : Text[100];
      lvText001@1100485003 : TextConst 'ENU=Current line is not a surcharge line.';
      lvText003@1100485001 : TextConst 'ENU=Are these recipe lines the basis for calculating surcharge for %1 ?';
      lvText004@1100525000 : TextConst 'ENU=First select Lines';
    BEGIN
      RecipeLine.COPY(Rec);

      WITH RecipeLine DO BEGIN
        ChrgLine := "Line No.";
        ChrgDesc := Description;
        IF "Surcharge Type" = "Surcharge Type"::" " THEN BEGIN
          MESSAGE(lvText001);
          EXIT;
        END;

        //db.sn, 29-01-15
        SETFILTER("Surcharge Type", '%1', "Surcharge Type"::" ");
        SETFILTER("Line No.", '<>%1', "Line No.");
        //db.en, 29-01-15

        IF NOT FINDFIRST THEN BEGIN
          MESSAGE(lvText004);
        END ELSE BEGIN
          IF CONFIRM(lvText003, TRUE, ChrgDesc) THEN BEGIN
            FINDSET(FALSE, FALSE);
            REPEAT;
              IF NOT ChrgRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line", 0, '', 0,  //DP00481
                                 "Recipe Group", Recipe, ChrgLine, "Line No.") THEN
              BEGIN
                ChrgRec.INIT;
                ChrgRec."Estimate No." := "Estimate No.";
                ChrgRec."Sub-Estimate No." := "Sub-Estimate No.";
                ChrgRec."Part Group" := "Part Group";
                ChrgRec.Part := Part;
                ChrgRec."Recipe Line" := "Estimate Line";
                ChrgRec."Recipe Group" := "Recipe Group";
                ChrgRec.Recipe := Recipe;
                ChrgRec."Surcharge Line" := ChrgLine;
                ChrgRec."Basic Line" := "Line No.";
                ChrgRec.INSERT(TRUE);
              END;
            UNTIL NEXT = 0;
          END;
        END;
        MARKEDONLY(FALSE);
      END;

      CLEARMARKS;
    END;

    PROCEDURE CheckRecipeCharge@8();
    VAR
      ChrgRec1@11012000 : Record 11229771;
      ChrgRec2@11012001 : Record 11229771;
      RcpLineRec1@11012002 : Record 11072075;
      RcpLineRec2@11012003 : Record 11072075;
      RecipeLineOriginal@1210190000 : Record 11072075;
    BEGIN
      //read with current recipe line in surcharge table whether this is a basic line for surcharge lines.
      ChrgRec1.SETRANGE("Estimate No.", "Estimate No.");
      ChrgRec1.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      ChrgRec1.SETRANGE("Part Group", "Part Group");
      ChrgRec1.SETRANGE(Part, Part);
      ChrgRec1.SETRANGE("Recipe Line", "Estimate Line");
      ChrgRec1.SETRANGE("Recipe Group", "Recipe Group");
      ChrgRec1.SETRANGE(Recipe, Recipe);
      IF "Surcharge Type" <> "Surcharge Type"::" " THEN
        ChrgRec1.SETRANGE("Surcharge Line", "Line No.")
      ELSE
        ChrgRec1.SETRANGE("Basic Line", "Line No.");
      IF ChrgRec1.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          //make surcharge line in estimate current
          RcpLineRec2.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line",
            "Recipe Group", Recipe, ChrgRec1."Surcharge Line");
          RecipeLineOriginal := RcpLineRec2; //call 30195
          RcpLineRec2.InitNormPrice;  //db, 29-11-11
          //check all basic lines in surcharge table for surcharge line
          ChrgRec2.COPY(ChrgRec1);  //db, 15-06-10
          ChrgRec2.SETRANGE("Surcharge Line", ChrgRec1."Surcharge Line");
          ChrgRec2.SETRANGE("Basic Line");
          IF ChrgRec2.FINDSET(FALSE, FALSE) THEN BEGIN
            REPEAT
              //determine Line Total per Cost Type for Basic Lines belonging to Surcharge
              IF RcpLineRec1.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line",
                 "Recipe Group", Recipe, ChrgRec2."Basic Line") THEN BEGIN
                IF RcpLineRec2."Surcharge Type" = RcpLineRec2."Surcharge Type"::Labor THEN BEGIN
                  RcpLineRec2.Norm := RcpLineRec2.Norm + RcpLineRec1.Hours;
                  RcpLineRec2."Norm (Sales)" := RcpLineRec2."Norm (Sales)" + RcpLineRec1."Hours (Sales)";
                END ELSE BEGIN
                  RcpLineRec2."Gross Price" := RcpLineRec2."Gross Price" + RcpLineRec1."Gross Amount";
                  RcpLineRec2."Nett Cost Price" := RcpLineRec2."Nett Cost Price" + RcpLineRec1."Nett Cost Amount";
                  RcpLineRec2."Nett Sales Price" := RcpLineRec2."Nett Sales Price" + RcpLineRec1."Nett Sales Amount";
                END;
              END;
            UNTIL ChrgRec2.NEXT = 0;
          END;
          //update surcharge line with totals by Cost Type of basic lines
          IF RcpLineRec2."Gross Price" <> 0 THEN BEGIN
            RcpLineRec2."Purchase Discount %" :=
              100 * (RcpLineRec2."Gross Price" - RcpLineRec2."Nett Cost Price") / RcpLineRec2."Gross Price";
            RcpLineRec2."Sales Discount %" :=
              100 * (RcpLineRec2."Gross Price" - RcpLineRec2."Nett Sales Price") / RcpLineRec2."Gross Price";
          END;
          IF RcpLineRec2."Surcharge Type" = RcpLineRec2."Surcharge Type"::Labor THEN BEGIN
            RateRec.GET(RcpLineRec2."Estimate No.",RcpLineRec2."Rate Code");
            IF RateRec."Rate Type" = RateRec."Rate Type"::Minuts THEN BEGIN
              RcpLineRec2.Norm := RcpLineRec2.Norm * 60;
              RcpLineRec2."Norm (Sales)" := RcpLineRec2."Norm (Sales)" * 60;
              IF RateRec."Team Size" <> 0 THEN BEGIN
                RcpLineRec2.Norm := RcpLineRec2.Norm / RateRec."Team Size";
                RcpLineRec2."Norm (Sales)" := RcpLineRec2."Norm (Sales)" / RateRec."Team Size";
              END;
            END;
            IF RcpLineRec2.Norm <> 0 THEN
              RcpLineRec2."Production Rate" := 1 / RcpLineRec2.Norm
            ELSE
              RcpLineRec2."Production Rate" := 0;
            IF RcpLineRec2."Norm (Sales)" <> 0 THEN
              RcpLineRec2."Production Rate (Sales)" := 1 / RcpLineRec2."Norm (Sales)"
            ELSE
              RcpLineRec2."Production Rate (Sales)" := 0;
          END;
          RcpLineRec2.CalculateTotals;
          IF FORMAT(RcpLineRec2) <> FORMAT(RecipeLineOriginal) THEN //call 30195
            RcpLineRec2.MODIFY("Estimate No."='');   //db, 20-04-10: M19083 (Central Mgt)
        UNTIL ChrgRec1.NEXT = 0;
      END;
    END;

    PROCEDURE CheckRecipeCharge2@1100525008(VAR ChrgRec1@1100525000 : Record 11229771);
    VAR
      ChrgRec2@11012001 : Record 11229771;
      RcpLineRec1@11012002 : Record 11072075;
      RcpLineRec2@11012003 : Record 11072075;
      RecipeLineOriginal@1210190000 : Record 11072075;
    BEGIN
      //db, 16-06-10: M19367: filter based on tmp-table (called from EstLineRec)

      //read with current recipe line in surcharge table whether this is a basic line for surcharge lines.
      IF ChrgRec1.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          //make surcharge line in estimate current
          RcpLineRec2.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line",
            "Recipe Group", Recipe, ChrgRec1."Surcharge Line");
          RecipeLineOriginal := RcpLineRec2; //call 30195
          RcpLineRec2.InitNormPrice;  //db, 29-11-11
          //check all basic lines in surcharge table for surcharge line
          ChrgRec2.SETRANGE("Estimate No.", "Estimate No.");
          ChrgRec2.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
          ChrgRec2.SETRANGE("Part Group", "Part Group");
          ChrgRec2.SETRANGE(Part, Part);
          ChrgRec2.SETRANGE("Recipe Line", "Estimate Line");
          ChrgRec2.SETRANGE("Recipe Group", "Recipe Group");
          ChrgRec2.SETRANGE(Recipe, Recipe);
          ChrgRec2.SETRANGE("Surcharge Line", ChrgRec1."Surcharge Line");
          ChrgRec2.SETRANGE("Basic Line");
          IF ChrgRec2.FINDSET(FALSE, FALSE) THEN BEGIN
            REPEAT
              //determine Line Total per Cost Type for Basic Lines belonging to Surcharge
              IF RcpLineRec1.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line",
                 "Recipe Group", Recipe, ChrgRec2."Basic Line") THEN BEGIN
                IF RcpLineRec2."Surcharge Type" = RcpLineRec2."Surcharge Type"::Labor THEN BEGIN
                  RcpLineRec2.Norm := RcpLineRec2.Norm + RcpLineRec1.Hours;
                  RcpLineRec2."Norm (Sales)" := RcpLineRec2."Norm (Sales)" + RcpLineRec1."Hours (Sales)";
                END ELSE BEGIN
                  RcpLineRec2."Gross Price" := RcpLineRec2."Gross Price" + RcpLineRec1."Gross Amount";
                  RcpLineRec2."Nett Cost Price" := RcpLineRec2."Nett Cost Price" + RcpLineRec1."Nett Cost Amount";
                  RcpLineRec2."Nett Sales Price" := RcpLineRec2."Nett Sales Price" + RcpLineRec1."Nett Sales Amount";
                END;
              END;
            UNTIL ChrgRec2.NEXT = 0;
          END;
          //update surcharge line with totals by Cost Type of basic lines
          IF RcpLineRec2."Gross Price" <> 0 THEN BEGIN
            RcpLineRec2."Purchase Discount %" :=
              100 * (RcpLineRec2."Gross Price" - RcpLineRec2."Nett Cost Price") / RcpLineRec2."Gross Price";
            RcpLineRec2."Sales Discount %" :=
              100 * (RcpLineRec2."Gross Price" - RcpLineRec2."Nett Sales Price") / RcpLineRec2."Gross Price";
          END;
          IF RcpLineRec2."Surcharge Type" = RcpLineRec2."Surcharge Type"::Labor THEN BEGIN
            RateRec.GET(RcpLineRec2."Estimate No.",RcpLineRec2."Rate Code");
            IF RateRec."Rate Type" = RateRec."Rate Type"::Minuts THEN BEGIN
              RcpLineRec2.Norm := RcpLineRec2.Norm * 60;
              RcpLineRec2."Norm (Sales)" := RcpLineRec2."Norm (Sales)" * 60;
              IF RateRec."Team Size" <> 0 THEN BEGIN
                RcpLineRec2.Norm := RcpLineRec2.Norm / RateRec."Team Size";
                RcpLineRec2."Norm (Sales)" := RcpLineRec2."Norm (Sales)" / RateRec."Team Size";
              END;
            END;
            IF RcpLineRec2.Norm <> 0 THEN
              RcpLineRec2."Production Rate" := 1 / RcpLineRec2.Norm
            ELSE
              RcpLineRec2."Production Rate" := 0;
            IF RcpLineRec2."Norm (Sales)" <> 0 THEN
              RcpLineRec2."Production Rate (Sales)" := 1 / RcpLineRec2."Norm (Sales)"
            ELSE
              RcpLineRec2."Production Rate (Sales)" := 0;
          END;
          RcpLineRec2.CalculateTotals;
          IF FORMAT(RcpLineRec2) <> FORMAT(RecipeLineOriginal) THEN //call 30195
            RcpLineRec2.MODIFY("Estimate No."='');
        UNTIL ChrgRec1.NEXT = 0;
      END;
    END;

    PROCEDURE CheckSameValue@1210190009(lvCostType@1210190001 : Integer;lvCostObjectOld@1210190002 : Code[20]);
    VAR
      lvRcpLineRec@1210190000 : Record 11072075;
    BEGIN
      lvRcpLineRec.SETRANGE("Estimate No.", "Estimate No.");
      IF lvCostType = 1 THEN
        lvRcpLineRec.SETFILTER("Cost Object Labor", '%1', lvCostObjectOld)
      ELSE
        lvRcpLineRec.SETFILTER("Cost Object Price", '%1', lvCostObjectOld);
      lvRcpLineRec.SETRANGE(Description, Description);
      lvRcpLineRec.SETRANGE("Unit of Measure", "Unit of Measure");
      IF lvRcpLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF lvCostType = 1 THEN
            lvRcpLineRec."Cost Object Labor" := "Cost Object Labor"
          ELSE
            lvRcpLineRec."Cost Object Price" := "Cost Object Price";
          lvRcpLineRec.MODIFY;
        UNTIL lvRcpLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckCostObject@1210190005(CostObject@1210190000 : Code[20]);
    VAR
      DefRate@1100485000 : Code[10];
    BEGIN
      GetEstimate("Estimate No.", FALSE); //Call 23762
      DefRate := EstRec."Rate Code";

      IF CostObject <> '' THEN BEGIN
        DimMgt.GetDimValueRec(2, CostObject, DimValRec, TRUE,'');
        //db.sn, 02-10-09: M15745
        VALIDATE("Cost Component", DimValRec."Cost Component");
        IF EstRec."Estimate Based On" <> EstRec."Estimate Based On"::CostObject THEN EXIT;
        //db.en, 02-10-09: M15745
        IF "Sub Operation Code" <> '' THEN BEGIN
          ProcessSubOperation;
          EXIT;
        END;
        IF "Norm Agreement" OR "Price Agreement" THEN BEGIN
          IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN BEGIN
            IF DimValRec."Rate Code" = '' THEN
              VALIDATE("Rate Code", DefRate)
            ELSE
              VALIDATE("Rate Code", DimValRec."Rate Code");
          END;
          EXIT;
        END;
        Description := DimValRec.Name;
        InitNormPrice;  //db, 29-11-11
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN BEGIN
          IF DimValRec."Rate Code" = '' THEN
            VALIDATE("Rate Code", DefRate)
          ELSE
            VALIDATE("Rate Code", DimValRec."Rate Code");
          IF "Sub Operation Code" <> '' THEN
            DetermineNorm
          ELSE
            VALIDATE(Norm, DimValRec.Norm);
        END ELSE BEGIN
          TESTFIELD("Cost Type (Price)");  //DP00381
          VALIDATE("Gross Price", DimValRec.Price);
        END;
      END;
      //VALIDATE("Cost Component", DimValRec."Cost Component");  //db, 02-10-09: M15745
    END;

    PROCEDURE OldSubOperationDefault@1210190006() : Boolean;
    VAR
      OldSubOperRec@1210190001 : Record 11012166;
      OldOperRec@1210190000 : Record 11012165;
    BEGIN
      IF xRec."Sub Operation Code" <> '' THEN //Call 23762
        IF OldSubOperRec.GET(xRec."Sub Operation Code") THEN
          IF OldSubOperRec.Operation <> '' THEN //Call 23762
            IF OldOperRec.GET(OldSubOperRec.Operation) THEN;

      EXIT(xRec."Cost Object Labor" = OldOperRec."Cost Object");
    END;

    PROCEDURE ProcessSubOperation@1100485002();
    VAR
      SubOperRec@1100485000 : Record 11012166;
    BEGIN
      IF "Item No." + "Basic Item" + "Trade Item" <> '' THEN EXIT;

      //IF "Sub Operation Code" <> '' THEN //Call 23762 //db, 09-02-12: M32143
      IF SubOperRec.GET("Sub Operation Code") THEN BEGIN
        Description := COPYSTR(SubOperRec.Description, 1, MAXSTRLEN(Description));
        IF SubOperRec."Unit of Measure" <> '' THEN
          "Unit of Measure" := SubOperRec."Unit of Measure";
      END;
    END;

    PROCEDURE EnterQuantity@1210190013(lvOrigin@1210190002 : Integer) : Boolean;
    VAR
      QuanRec@1210190000 : Record 11012186;
      QuantityRelation@1100409001 : Record 11020463;
    BEGIN
      //DP00686
      //lvOrigin:
      //  1 = Length, Width and Height
      //  2 = quantity (input)
      //  3 = house type
      //  4 = quantity (lookup)

      IF "Surcharge Type" <> "Surcharge Type"::" " THEN EXIT(FALSE);

      IF lvOrigin <> 1 THEN BEGIN
        IF Length <> 0 THEN EXIT(FALSE);
        IF Width <> 0 THEN EXIT(FALSE);
        IF Height <> 0 THEN EXIT(FALSE);
      END;

      EstSetup.GET;
      IF lvOrigin <> 4 THEN BEGIN
        IF NOT EstSetup."Quantity Sheet with Relations" THEN BEGIN
          QuanRec.SETRANGE("Estimate No.", "Estimate No.");
          QuanRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
          QuanRec.SETRANGE("Part Group", "Part Group");
          QuanRec.SETRANGE(Part, Part);
          QuanRec.SETRANGE("Estimate Line", "Estimate Line");
          QuanRec.SETRANGE("Recipe Group", "Recipe Group");
          QuanRec.SETRANGE(Recipe, Recipe);
          QuanRec.SETRANGE("Recipe Line", "Line No.");
          IF QuanRec.FINDFIRST THEN EXIT(FALSE);
        END ELSE
          IF QuantityRelation.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Estimate Line","Recipe Group",Recipe,"Line No.") THEN
            EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE EditQuanSheet@1210190007();
    VAR
      QuanRec@1210190000 : Record 11012186;
      QuanSheetRec@1100409004 : Record 11020462;
      QuanSheetFrm@1100409003 : Page 11020462;
      QuantityRelation@1100409002 : Record 11020463;
      EstimateLine@1100409005 : Record 11072072;
    BEGIN
      //DP00686
      IF "Line No." = 0 THEN
        ERROR(Text011);

      EstSetup.GET;
      IF NOT EstSetup."Quantity Sheet with Relations" THEN BEGIN
        QuanRec.SETRANGE("Estimate No.", "Estimate No.");
        QuanRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
        QuanRec.SETRANGE("Part Group", "Part Group");
        QuanRec.SETRANGE(Part, Part);
        QuanRec.SETRANGE("Estimate Line", "Estimate Line");
        QuanRec.SETRANGE("Recipe Group", "Recipe Group");
        QuanRec.SETRANGE(Recipe, Recipe);
        QuanRec.SETRANGE("Recipe Line", "Line No.");
        PAGE.RUNMODAL(PAGE::"Estimate Quantity Sheet", QuanRec);
        QuanRec.SETRANGE("Row No.", 0);
        IF QuanRec.FINDFIRST THEN
          VALIDATE(Quantity, QuanRec.Result);
      END ELSE BEGIN
        QuanSheetRec.SETRANGE("Estimate No.","Estimate No.");
        QuanSheetRec.SETFILTER("Sub-Estimate No.",'%1|%2', '', "Sub-Estimate No.");
        QuanSheetRec.SETFILTER("Part Group", '%1|%2', '',"Part Group");
        QuanSheetRec.SETFILTER(Part,'%1|%2', '',Part);
        QuanSheetFrm.SETTABLEVIEW(QuanSheetRec);
        IF NOT QuantityRelation.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Estimate Line","Recipe Group",Recipe,"Line No.") THEN QuantityRelation.INIT;
        IF NOT QuanSheetRec.GET("Estimate No.", QuantityRelation."Quantity Sheet") THEN QuanSheetRec.INIT;
        QuanSheetFrm.SETRECORD(QuanSheetRec);
        EstimateLine.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Estimate Line");
        QuanSheetFrm.SetDefaultNEW(EstimateLine,Rec,TRUE,QuantityRelation);
        QuanSheetFrm.RUNMODAL;
        IF QuantityRelation.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Estimate Line","Recipe Group",Recipe,"Line No.") THEN
          IF GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Estimate Line","Recipe Group",Recipe,"Line No.") THEN
            VALIDATE(Quantity);
      END;
    END;

    PROCEDURE InitAdjustmentFactor@1210190003();
    VAR
      CumFactorPrice@1100528900 : Decimal;
    BEGIN
      //DP00381
      IF "Adjustment Factor Hours" = 0 THEN
        "Adjustment Factor Hours" := 1;
      IF "Adjustment Factor Price" = 0 THEN
        "Adjustment Factor Price" := 1;

      IF "Adj. Factor Hours (Sales)" = 0 THEN  //DP00555
        "Adj. Factor Hours (Sales)" := 1;

      IF ("Surcharge Type" <> "Surcharge Type"::" ") THEN BEGIN
        "Cum. Adj. Factor Hours" := "Adjustment Factor Hours";
        "Cum. Adj. Factor Price" := "Adjustment Factor Price";
        "Cum. Adj. Factor Hours (Sales)" := "Adj. Factor Hours (Sales)";   //DP00555
      END ELSE BEGIN
        EstPartRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part);
        IF (EstPartRec."Cum. Adj. Factor Hours" = 0) THEN
          "Cum. Adj. Factor Hours" := "Adjustment Factor Hours"
        ELSE
          "Cum. Adj. Factor Hours" := "Adjustment Factor Hours" * EstPartRec."Cum. Adj. Factor Hours";
        IF (EstPartRec."Cum. Adj. Factor Hours (Sales)" = 0) THEN  //DP00555
          "Cum. Adj. Factor Hours (Sales)" := "Adj. Factor Hours (Sales)"
        ELSE
          "Cum. Adj. Factor Hours (Sales)" := "Adj. Factor Hours (Sales)" * EstPartRec."Cum. Adj. Factor Hours (Sales)";

        IF "Cost Type (Price)" = "Cost Type (Price)"::Material THEN
          CumFactorPrice := EstPartRec."Cum. Adj. Factor Material";
        IF "Cost Type (Price)" = "Cost Type (Price)"::Subcontracting THEN
          CumFactorPrice := EstPartRec."Cum. Adj. Factor Subcontr.";
        IF "Cost Type (Price)" = "Cost Type (Price)"::Plant THEN
          CumFactorPrice := EstPartRec."Cum. Adj. Factor Plant";
        IF "Cost Type (Price)" = "Cost Type (Price)"::Sundry THEN
          CumFactorPrice := EstPartRec."Cum. Adj. Factor Sundry";

        IF CumFactorPrice = 0 THEN
          "Cum. Adj. Factor Price" := "Adjustment Factor Price"
        ELSE
          "Cum. Adj. Factor Price" := "Adjustment Factor Price" * CumFactorPrice;
      END;
    END;

    PROCEDURE ProcessAdjustmentFactor@1210190004(IAdjType@1210190000 : Integer;IEstType@1100525000 : Integer);
    BEGIN
      IF (IEstType = 0) OR (IEstType = 2) THEN BEGIN  //DP00555 (0=both, 1=cost, 2=sales)
        CASE IAdjType OF
          1:
            IF "Adj. Factor Hours (Sales)" = 0 THEN
              "Adj. Factor Hours (Sales)" := 1;
        END;
      END;
      IF (IEstType = 0) OR (IEstType = 1) THEN BEGIN  //DP00555 (0=both, 1=cost, 2=sales)
        CASE IAdjType OF
          1:
            IF "Adjustment Factor Hours" = 0 THEN
              "Adjustment Factor Hours" := 1;
          2:
            IF "Adjustment Factor Price" = 0 THEN
              "Adjustment Factor Price" := 1;
        END;
      END;
      MODIFY;

      UpdateMgt.ResetAdjustmentFactor("Estimate No.", "Sub-Estimate No.", "Part Group", Part,
        "Estimate Line", TRUE, 4, IAdjType, IEstType);  //DP00555

      GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line",
          "Recipe Group", Recipe, "Line No.");
    END;

    PROCEDURE CheckDefaultRate@1100485003();
    BEGIN
      GetEstimate("Estimate No.", FALSE); //Call 23762
      IF "Rate Code" = '' THEN
        "Rate Code" := EstRec."Rate Code";
    END;

    PROCEDURE GetItemSpecifications@1100485006();
    BEGIN
      IF ItemRec.GET("Item No.") THEN BEGIN
        "Item Series" := ItemRec."Item Series";
        "Item Type" := ItemRec."Item Type";
        "Item Brand" := ItemRec."Item Brand";
      END;
    END;

    PROCEDURE GetDefaultsPlantType@1100485010();
    VAR
      PlantTypeRec@1100485000 : Record 11012551;
    BEGIN
      PlantTypeRec.GET("Plant Type");
      Description := PlantTypeRec.Description;
      "Unit of Measure" := PlantTypeRec."Unit of Measure";
      "Cost Object Price" := PlantTypeRec."Cost Object";
      Weight := PlantTypeRec.Weight;
      CLEAR("Price Agreement");
      ClearFields(2); //Buyback
      IF NOT EstimateMgmt.IsLineDiscountMaterialOnly THEN
        ClearFields(3); //Discount
      DeterminePlantPrice;

      IF "Attached to Line No." <> 0 THEN
        GetRentalPeriodFromSet;
    END;

    PROCEDURE DeterminePlantPrice@1100485011();
    VAR
      SearchRateCu@1100485000 : Codeunit 11012567;
      RefDate@1100485001 : Date;
      RentalType@1100525006 : Option;
      DummyPlantPriceType@1100525005 : Option;
      DummyRentalType@1100525004 : Option;
      PlantDiscount@1100525003 : Decimal;
      SalesPrice@1100525002 : Decimal;
      BuyBackPrice@1100525001 : Decimal;
      PlantTypeRec@1100525000 : Record 11012551;
    BEGIN
      IF ("Plant Type" = '') OR "Price Agreement" THEN
        EXIT;

      GetEstimate("Estimate No.", FALSE); //Call 23762

      IF "Start Rental Period" <> 0D THEN
        RefDate := "Start Rental Period"
      ELSE BEGIN
        IF EstRec."Reference Date (Rate)" <> 0D THEN
          RefDate := EstRec."Reference Date (Rate)"
        ELSE
          RefDate := TODAY;
      END;

      //DP01047.sn
      RentalType := -1;  //0=rental, 1=sales, 2=buy-back, 3= hours
      PlantTypeRec.GET("Plant Type");
      IF EstRec."Plant Rates in Hours" THEN BEGIN
        "Cost Type (Hours)" := "Cost Type (Hours)"::Plant;
        "Rate Code" := '';
        InitRateRelatedFields;
        IF (PlantTypeRec."Rental Type" <> PlantTypeRec."Rental Type"::"Sales/Buy Back") THEN
          RentalType := 3;
      END;

      VALIDATE("Nett Cost Price", SearchRateCu.CostRateFromEstimate("Plant Type",'', EstRec."Plant Location",RefDate,RentalType,"Plant Price Type"));
      VALIDATE("Gross Price","Nett Cost Price");
      SalesPrice := SearchRateCu.SalesRateFromEstimate(
        "Plant Type",'',EstRec."Plant Location",EstRec."Customer No.",EstRec."Kind of Plant Rate"+1,RefDate,RentalType,"Plant Price Type");
      IF RentalType = 1 THEN BEGIN
        DummyRentalType := 2;
        BuyBackPrice := SearchRateCu.SalesRateFromEstimate("Plant Type",'',EstRec."Plant Location",EstRec."Customer No.",0,RefDate,DummyRentalType,DummyPlantPriceType);
      END;
      PlantDiscount := SearchRateCu.SalesDiscountFromEstimate("Plant Type",'',EstRec."Plant Location",EstRec."Customer No.",RefDate,RentalType);
      VALIDATE("Nett Sales Price", SalesPrice * (100-PlantDiscount)/100);
      VALIDATE("Buy Back Price", BuyBackPrice * (100-PlantDiscount)/100);
      //DP01047.en
    END;

    PROCEDURE GetDefaultsCostObject@1100485012(lvCostType@1100485000 : 'Labor,Material,Subcontracting,Plant,Sundry';lvCostObject@1100485001 : Code[20]);
    VAR
      lvDimValRec@1100485002 : Record 349;
      lvEstPurchActRec@1100485003 : Record 11012366;
    BEGIN
      GetEstSetup; //Call 23762
      IF NOT EstSetup."Default Purchase Action" THEN
        EXIT;

      DimMgt.GetDimValueRec(2, lvCostObject, lvDimValRec, TRUE, '');
      lvDimValRec.TESTFIELD(Blocked, FALSE);

      CASE lvCostType OF
        lvCostType::Material:
          BEGIN
            IF ("Purchase Action Mat." = '') AND (lvDimValRec."Purchase Action" <> '') THEN
              IF NOT lvEstPurchActRec.GET("Estimate No.", lvDimValRec."Purchase Action") THEN
                MESSAGE(Text006, lvDimValRec."Purchase Action","Estimate No.")
              ELSE
                IF lvEstPurchActRec.Status >= lvEstPurchActRec.Status::Applied THEN
                  MESSAGE(Text007, FIELDCAPTION("Purchase Action Mat."), FIELDCAPTION("Cost Object Price"),
                                   FORMAT(lvEstPurchActRec.Status))
                ELSE
                  VALIDATE("Purchase Action Mat.", lvDimValRec."Purchase Action");
          END;
        lvCostType::Subcontracting:
          BEGIN
            IF ("Purchase Action Subc." = '') AND (lvDimValRec."Purchase Action" <> '') THEN
              IF NOT lvEstPurchActRec.GET("Estimate No.", lvDimValRec."Purchase Action") THEN
                MESSAGE(Text006, lvDimValRec."Purchase Action","Estimate No.")
              ELSE
                IF lvEstPurchActRec.Status >= lvEstPurchActRec.Status::Applied THEN
                  MESSAGE(Text007, FIELDCAPTION("Purchase Action Subc."), FIELDCAPTION("Cost Object Price"),
                                   FORMAT(lvEstPurchActRec.Status))
                ELSE
                  VALIDATE("Purchase Action Subc.", lvDimValRec."Purchase Action");
          END;
        lvCostType::Plant:
          BEGIN
            IF ("Purchase Action Plant" = '') AND (lvDimValRec."Purchase Action" <> '') THEN
              IF NOT lvEstPurchActRec.GET("Estimate No.", lvDimValRec."Purchase Action") THEN
                MESSAGE(Text006, lvDimValRec."Purchase Action","Estimate No.")
              ELSE
                IF lvEstPurchActRec.Status >= lvEstPurchActRec.Status::Applied THEN
                  MESSAGE(Text007, FIELDCAPTION("Purchase Action Subc."), FIELDCAPTION("Cost Object Price"),
                                   FORMAT(lvEstPurchActRec.Status))
                ELSE
                  VALIDATE("Purchase Action Plant", lvDimValRec."Purchase Action");
          END;
        lvCostType::Sundry: //DP00381
          BEGIN
          END;
      END;
    END;

    PROCEDURE GetReferenceData@1100525002(VAR lvRefDate@1100525003 : Date;VAR lvDiscRef1@1100525002 : Code[20];VAR lvDiscRef2@1100525001 : Code[20];lvEstRec@1100525000 : Record 11012151;lvDiscType@1100525004 : 'Purchase,Sales');
    BEGIN
      lvRefDate := ValidateCu.GetRefDateEstimate(lvEstRec);
      ValidateCu.GetRefDiscEstimate(lvEstRec, lvDiscRef1, lvDiscRef2, lvDiscType);
    END;

    PROCEDURE CalcRentalUnits@1100525007();
    VAR
      PlantLocation@1100525000 : Record 11012554;
      RateTypeUsed@1100525002 : Option;
      CalcRentalPeriodsCu@1100525001 : Codeunit 11012568;
    BEGIN
      PlantLocation.INIT;
      PlantLocation.InitRecord;

      GetEstimate("Estimate No.", FALSE); //Call 23762
      IF EstRec."Plant Location" <> '' THEN
        PlantLocation.GET(EstRec."Plant Location");

      VALIDATE("Rental Time Units",
        CalcRentalPeriodsCu.NumberRentalPeriods(
          PlantLocation,"Start Rental Period","End Rental Period","Plant Type",'',RateTypeUsed));

      IF "Set Code" = '' THEN
        TESTFIELD("Plant Price Type", RateTypeUsed + 1);
    END;

    PROCEDURE ClearFields@1100525004(FieldGroup@1100525000 : 'Item,PlantType,BuyBack');
    BEGIN
      CASE FieldGroup OF
        FieldGroup::Item:
          BEGIN
            VALIDATE("Nett Cost Price",0);
            VALIDATE("Item No.",'')
          END;
        FieldGroup::PlantType:
          BEGIN
            VALIDATE("Nett Cost Price",0);
            VALIDATE("Plant Type",'');
          END;
        FieldGroup::BuyBack:
          BEGIN
            CLEAR("Buy Back Price");
            CLEAR("Buy Back %");
          END;
      END;
    END;

    PROCEDURE ChkFieldsEmpty@1100525028(FieldGroup@1100525000 : 'Material,Plant,BuyBack,Discount');
    BEGIN
      CASE FieldGroup OF
        FieldGroup::Material:
          BEGIN
            //TESTFIELD("Material Price",0);
            //TESTFIELD("Item No.",0)
          END;
        FieldGroup::Plant:
          BEGIN
            //TESTFIELD("Plant Type",0);
            //TESTFIELD("Plant Price Type",0);
          END;
        FieldGroup::BuyBack:
          BEGIN
            TESTFIELD("Buy Back Price",0);
            TESTFIELD("Buy Back %",0);
          END;
        FieldGroup::Discount:
          BEGIN
            TESTFIELD("Purchase Discount %",0);
            TESTFIELD("Gross Price",0);
          END;
      END;
    END;

    PROCEDURE GetAttachedToLineNo@1100525005(Rec2@1100525000 : Record 11072075) : Integer;
    BEGIN
      Rec2.SETRANGE("Estimate No.",Rec2."Estimate No.");
      Rec2.SETRANGE("Sub-Estimate No.",Rec2."Sub-Estimate No.");
      Rec2.SETRANGE("Part Group",Rec2."Part Group");
      Rec2.SETRANGE(Part,Rec2.Part);
      Rec2.SETRANGE("Estimate Line",Rec2."Estimate Line");
      Rec2.SETRANGE("Recipe Group",Rec2."Recipe Group");
      Rec2.SETRANGE(Recipe,Rec2.Recipe);

      IF Rec2.NEXT <> 0 THEN
        IF (Rec2."Attached to Line No." <> 0) THEN BEGIN
          "Set Level" := Rec2."Set Level";
          EXIT(Rec2."Attached to Line No.");
        END;
      "Set Level" := 0;
      EXIT(0);
    END;

    PROCEDURE InitRecipeLine@1100525000(SaveOrig@1100525000 : Boolean);
    BEGIN
      InitRecord; // 34595.n

      "Purchase Route Reference" := '';
      IF SaveOrig = FALSE THEN BEGIN
        "Price Agreement" := FALSE;
        "Price Agreement (Sales)" := FALSE;  //DP00381
        "Norm Agreement" := FALSE;
        "Norm Agreement (Sales)" := FALSE;   //DP00381
      END;
    END;

    LOCAL PROCEDURE GetRentalPeriodFromSet@1100525014();
    VAR
      RecipeLine2@1100525000 : Record 11072075;
    BEGIN
      IF "Attached to Line No." = 0 THEN
        EXIT;

      RecipeLine2.GET(
        "Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line",
        "Recipe Group", Recipe, "Attached to Line No.");

      IF RecipeLine2."Set Code" = '' THEN
        EXIT;

      VALIDATE("Start Rental Period", RecipeLine2."Start Rental Period");
      VALIDATE("End Rental Period", RecipeLine2."End Rental Period");
      VALIDATE("Rental Period Formula", RecipeLine2."Rental Period Formula");
      VALIDATE("Rental Time Units", RecipeLine2."Rental Time Units");
    END;

    PROCEDURE GetEstSetup@1210190014();
    BEGIN
      //Call 23762
      IF NOT EstSetupRead THEN BEGIN
        EstSetup.GET;
        EstSetupRead := TRUE;
      END;
    END;

    PROCEDURE GetEstPart@1210190018() : Boolean;
    BEGIN
      //Call 23762
      IF (EstPartRec."Estimate No." = "Estimate No.") AND
         (EstPartRec."Sub-Estimate No." = "Sub-Estimate No.") AND
         (EstPartRec."Part Group" = "Part Group") AND
         (EstPartRec.Part = Part) THEN
        EXIT(TRUE);

      EXIT(EstPartRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part));
    END;

    PROCEDURE GetEstimate@1210190015(EstimateNo@1210190000 : Code[20];CatchRead@1210190001 : Boolean);
    BEGIN
      //Call 23762
      IF (EstRec."No." = EstimateNo) THEN
        EXIT;

      IF CatchRead THEN BEGIN
        IF NOT EstRec.GET(EstimateNo) THEN
          EstRec.INIT;
      END ELSE
        EstRec.GET(EstimateNo);
    END;

    PROCEDURE GetSubEstimate@1210190017(EstimateNo@1210190000 : Code[20];SubEstimateNo@1210190002 : Code[20];CatchRead@1210190001 : Boolean) : Boolean;
    BEGIN
      //Call 23762
      IF (SubEstRec."Estimate No." = EstimateNo) AND (SubEstRec."Sub-Estimate No." = SubEstimateNo) THEN
        EXIT(TRUE);  //db, 09-02-11: M32143

      IF CatchRead THEN BEGIN
        SubEstPresent := SubEstRec.GET(EstimateNo, SubEstimateNo);
        IF NOT SubEstPresent THEN
          SubEstRec.INIT;
      END ELSE
        SubEstPresent := SubEstRec.GET(EstimateNo, SubEstimateNo);

      EXIT(SubEstPresent);
    END;

    PROCEDURE GetEstRate@1210190019();
    BEGIN
      //Call 23762
      IF (RateRec."Estimate No." = "Estimate No.") AND (RateRec."Rate Code" = "Rate Code") THEN
        EXIT;

      IF "Rate Code" = '' THEN
        CLEAR(RateRec) //mg.c, 14-05-12: M34326
      ELSE
        RateRec.GET("Estimate No.","Rate Code");
    END;

    PROCEDURE SetSkipCalculateTotals@1210190016(SetCalculateTotals@1210190000 : Boolean);
    BEGIN
      //Call 23762
      SkipCalculateTotals := SetCalculateTotals;
    END;

    PROCEDURE SetFromEstimateLineDelete@1210190020(FromRecipeLine@1210190000 : Boolean);
    BEGIN
      //Call 23762
      FromRecipeLineDelete := FromRecipeLine;
    END;

    PROCEDURE CalculateSalesDiscount@1100525017(lvEstRec@1100525001 : Record 11012151);
    VAR
      lvRefDate@1100525005 : Date;
      lvDiscRef1@1100525004 : Code[20];
      lvDiscRef2@1100525003 : Code[20];
      lvRefPrio@1100525002 : Code[10];
      lvDiscType@1100525000 : 'Purchase,Sales';
    BEGIN
      //mg, 11-10-11: M29108
      //IF lvEstRec."Estimate Type" = lvEstRec."Estimate Type"::Sales THEN BEGIN  //db, 28-10-13: DP00381
        GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, lvEstRec, lvDiscType::Sales);
        lvRefPrio := ValidateCu.GetRefPrioEstimate(lvEstRec, lvDiscType::Sales);
        "Sales Condition Present" := ValidateCu.GetSalesDiscount(  //db, 27-05-14: C015604
          lvEstRec."Customer No.", "Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)",
          "Nett Cost Price", "Sales Discount %", "Gross Price", lvRefDate, lvEstRec."Customer Disc. Group",
          lvDiscRef1, lvDiscRef2, lvRefPrio);
      //END;
      CalculateTotals;
    END;

    PROCEDURE InitRecord@1210190023();
    VAR
      BaseActRec@1100409000 : Record 11012434;
      Estimate@1100528600 : Record 11012151;
    BEGIN
      // 34595.n
      IF EstPartRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part) THEN BEGIN
        "Project No." := EstPartRec."Project No.";
        IF NOT ElemRec.GET(Element) THEN  //db, 25-10-12: C002867
          Element := EstPartRec.Element;
        IF "Project No." <> '' THEN
          "Extension Contract" := EstPartRec."Extension Contract";  //DP00260
        IF NOT BaseActRec.GET("Project Planning Activity Code") THEN  //db, 26-10-12
          "Project Planning Activity Code" := EstPartRec."Project Planning Activity Code";
      END;
      IF EstLineRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Estimate Line") THEN BEGIN  //db, 30-06-14: T003580
        IF ("Plant Type" <> '') OR ("Set Code" <> '') THEN BEGIN
          VALIDATE("Rental Period Formula", EstLineRec."Rental Period Formula");
          "Start Rental Period" := EstLineRec."Start Rental Period";
          "End Rental Period" := EstLineRec."End Rental Period";
        END;
      END;
      IF NOT Estimate.GET("Estimate No.") THEN
        Estimate.INIT;
      IF Estimate.Converted AND (Estimate."Currency Code" <> '') THEN
        "Currency Code" := Estimate."Currency Code";
      InitSurcharge(FALSE);  //DP00381
    END;

    PROCEDURE IsFixed@1210190021() : Boolean;
    VAR
      Estimate@1210190000 : Record 11012151;
    BEGIN
      IF Estimate.GET("Estimate No.") THEN
        EXIT(Estimate.Fixed);
    END;

    PROCEDURE GetTotalQuantityEstimate@1100409001() TotalQuantity : Decimal;
    VAR
      RecipeQuantity@1100409000 : Decimal;
    BEGIN
      //db, 24-09-12: C002156
      IF "Ignore Recipe Quantity" THEN
        RecipeQuantity := 1
      ELSE
        RecipeQuantity := "Estimate Quantity";
      TotalQuantity := ROUND(RecipeQuantity * Quantity * "Estimate Part Quantity");
      EXIT(TotalQuantity);
    END;

    PROCEDURE UpdateSalesQuantity@1100528904();
    BEGIN
      //DP00381
      IF CalledFromUpdateTotals THEN EXIT;  //db, 26-02-15: C021215
      IF (xRec.Quantity = "Quantity (Sales)") OR ("Quantity (Sales)" = 0) THEN
        "Quantity (Sales)" := Quantity;
    END;

    PROCEDURE UpdateSalesNorm@1100528905();
    BEGIN
      //DP00381
      IF (xRec.Norm = "Norm (Sales)") OR ("Norm (Sales)" = 0) THEN BEGIN
        "Norm (Sales)" := Norm;
        IF "Norm (Sales)" <> 0 THEN
          "Production Rate (Sales)" := 1 / "Norm (Sales)"
        ELSE
          "Production Rate (Sales)" := 0;
      END;
    END;

    PROCEDURE ProcessCostObject@1100528906(iAction@1210190000 : Integer;iCostType@1100528900 : Integer;iCostObject@1100528901 : Code[20]);
    VAR
      DimValRec@1100528902 : Record 349;
    BEGIN
      //DP00381
      IF (("Recipe (Child)" <> '') AND ("Recipe Header"= TRUE)) THEN EXIT;  //db, 30-01-15

      IF iAction = 1 THEN BEGIN   //validate
        IF iCostObject <> '' THEN BEGIN
          DimValRec.RESET;
          DimValRec.SETRANGE("Global Dimension No.",2);
          DimValRec.SETRANGE(Code, iCostObject);
          IF iCostType = 0 THEN BEGIN
            DimValRec.SETRANGE("Cost Type", DimValRec."Cost Type"::Labor);
          END ELSE BEGIN
            IF "Cost Type (Price)" = "Cost Type (Price)"::" " THEN
              DimValRec.SETRANGE("Cost Type", DimValRec."Cost Type"::Material, DimValRec."Cost Type"::Sundry)
            ELSE
              DimValRec.SETRANGE("Cost Type","Cost Type (Price)");
          END;
          DimValRec.FINDFIRST;
          IF iCostType <> 0 THEN
            IF "Item No." + "Basic Item" + "Trade Item" <> '' THEN
              DimValRec.TESTFIELD("Cost Type", DimValRec."Cost Type"::Material);
          DetermineCostObject(DimValRec);
        END;
      END;

      IF iAction = 2 THEN BEGIN   //lookup
        DimValRec.RESET;
        DimValRec.Code := iCostObject;
        DimValRec.SETRANGE("Global Dimension No.",2);
        IF iCostType = 0 THEN BEGIN
          DimValRec.SETRANGE("Cost Type", DimValRec."Cost Type"::Labor);
        END ELSE BEGIN
          IF "Cost Type (Price)" = "Cost Type (Price)"::" " THEN
            DimValRec.SETRANGE("Cost Type", DimValRec."Cost Type"::Material, DimValRec."Cost Type"::Sundry)
          ELSE
            DimValRec.SETRANGE("Cost Type","Cost Type (Price)");
        END;
        IF PAGE.RUNMODAL(PAGE::"Cost Object List", DimValRec) = ACTION::LookupOK THEN BEGIN
          iCostObject := DimValRec.Code;
          ProcessCostObject(1, iCostType, iCostObject);
        END;
      END;
    END;

    LOCAL PROCEDURE DetermineCostObject@1100528900(DimValRec@1100528900 : Record 349);
    BEGIN
      //DP00381
      IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN BEGIN
        VALIDATE("Cost Object Labor", DimValRec.Code);
      END ELSE BEGIN
        VALIDATE("Cost Type (Price)", DimValRec."Cost Type");
        VALIDATE("Cost Object Price", DimValRec.Code);
      END;

      CheckCostObject(DimValRec.Code);
      IF "Item No." + "Basic Item" + "Trade Item" = '' THEN BEGIN
        IF "Sub Operation Code" <> '' THEN BEGIN
          ProcessSubOperation;
        END ELSE BEGIN
          IF EstRec."Estimate Based On" = EstRec."Estimate Based On"::CostObject THEN  //db, 26-08-14: C017158
            Description := DimValRec.Name;
        END;
      END;
    END;

    PROCEDURE InitSurcharge@1100528911(SwitchCostType@1100528900 : Boolean);
    VAR
      ApplySurchargeRecipe@1100525001 : Boolean;
      BaseRcpLineRec@1100525000 : Record 11020582;
    BEGIN
      //DP00381
      IF "Surcharge Type" <> "Surcharge Type"::" " THEN EXIT;

      IF EstPartRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part) THEN BEGIN
        IF SwitchCostType = FALSE THEN
          "Surcharge % Labor" := EstPartRec."Surcharge % Labor";
        IF "Cost Type (Price)" = "Cost Type (Price)"::Material THEN BEGIN
          "Surcharge % Price" :=  EstPartRec."Surcharge % Material";
          CheckSurchargeMaterialPrice;  //db, 12-08-13: C005338
        END;
        IF "Cost Type (Price)" = "Cost Type (Price)"::Subcontracting THEN
          "Surcharge % Price" := EstPartRec."Surcharge % Subcontracting";
        IF "Cost Type (Price)" = "Cost Type (Price)"::Plant THEN
          "Surcharge % Price" := EstPartRec."Surcharge % Plant";
        IF "Cost Type (Price)" = "Cost Type (Price)"::Sundry THEN
          "Surcharge % Price" := EstPartRec."Surcharge % Sundry";
      END;

      //db.sn, 03-06-14
      GetEstimate("Estimate No.", FALSE);
      ApplySurchargeRecipe := EstRec."Apply Surcharge Recipe";
      IF NOT BaseRcpLineRec.GET("Recipe Group", Recipe, "Line No.") THEN
        ApplySurchargeRecipe := FALSE;
      IF ApplySurchargeRecipe THEN BEGIN  //DP00594
        IF BaseRcpLineRec."Surcharge % Labor" <> 0 THEN
          "Surcharge % Labor" := BaseRcpLineRec."Surcharge % Labor";
        IF BaseRcpLineRec."Surcharge % Price" <> 0 THEN
          "Surcharge % Price" := BaseRcpLineRec."Surcharge % Price";
        IF "Cost Type (Price)" = "Cost Type (Price)"::Material THEN
          CheckSurchargeMaterialPrice;
      END;
      //db.en, 03-06-14
    END;

    PROCEDURE CheckSurchargeMaterialPrice@1100528912();
    VAR
      ProjSetup@1100528900 : Record 315;
      PriceHistRec@1100528902 : Record 11012315;
      RefDate@1100528901 : Date;
    BEGIN
      //DP00381
      IF "Cost Type (Price)" = "Cost Type (Price)"::Material THEN BEGIN
        ProjSetup.GET;
        IF ProjSetup."Apply Surch. MatPriceZero Only" THEN BEGIN  //db, 12-08-13: C005338
          //db.sn, 27-05-14: C015604
          IF "Trade Item" + "Basic Item" + "Item No." <> '' THEN BEGIN
            IF "Sales Condition Present" THEN
              "Surcharge % Price" := 0;
          END;
          //RefDate := ValidateCu.GetRefDateEstimate(EstRec);
          //IF "Trade Item" <> '' THEN BEGIN
          //  PriceHistRec.SETRANGE(Vendor, "Vendor (Trade Item)");
          //  PriceHistRec.SETRANGE("Item Code", "Trade Item");
          //  PriceHistRec.SETRANGE("Starting Date", 0D, RefDate);
          //  IF NOT PriceHistRec.FINDLAST THEN PriceHistRec.INIT;
          //  IF PriceHistRec."Gross Price" <> 0 THEN
          //    "Surcharge % Price" := 0;
          //END ELSE BEGIN
          //  IF "Item No." + "Basic Item" <> '' THEN
          //    "Surcharge % Price" := 0;
          //END;
          //db.en, 27-05-14: C015604
        END;
      END;
    END;

    PROCEDURE GetRecipeTotals@1100528907(VAR EstLineRec@1100528900 : Record 11072072;VAR TotalRecipeCost@1100528901 : Decimal;VAR TotalRecipeSales@1100528902 : Decimal;VAR TotalRecipeGross@1100528903 : Decimal);
    BEGIN
      //DP00381
      IF NOT EstLineRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line") THEN EstLineRec.INIT;
      EstLineRec.CALCFIELDS(
        "Hours Recipe (Cost)", "Hours Recipe (Sales)",
        "Labor Recipe (Cost)", "Labor Recipe (Sales)",
        "Material Recipe (Cost)", "Material Recipe (Sales)", "Gross Amount Recipe (Mat)",
        "Subcontracting Recipe (Cost)", "Subcontracting Recipe (Sales)", "Gross Amount Recipe (Subc)",
        "Plant Recipe (Cost)", "Plant Recipe (Sales)", "Gross Amount Recipe (Plant)",
        "Sundry Recipe (Cost)", "Sundry Recipe (Sales)","Gross Amount Recipe (Sundry)");

      TotalRecipeCost := EstLineRec."Labor Recipe (Cost)" + EstLineRec."Material Recipe (Cost)" +
        EstLineRec."Subcontracting Recipe (Cost)" + EstLineRec."Plant Recipe (Cost)" + EstLineRec."Sundry Recipe (Cost)";
      TotalRecipeSales := EstLineRec."Labor Recipe (Sales)" + EstLineRec."Material Recipe (Sales)" +
        EstLineRec."Subcontracting Recipe (Sales)" + EstLineRec."Plant Recipe (Sales)" + EstLineRec."Sundry Recipe (Sales)";
      TotalRecipeGross := EstLineRec."Labor Recipe (Cost)" + EstLineRec."Gross Amount Recipe (Mat)" +
        EstLineRec."Gross Amount Recipe (Subc)" + EstLineRec."Gross Amount Recipe (Plant)" + EstLineRec."Gross Amount Recipe (Sundry)";
    END;

    PROCEDURE ChargePresent@1100528908(VAR chrg0@1100528905 : Boolean;VAR chrg1@1100528904 : Boolean;VAR chrg2@1100528903 : Boolean;VAR chrg3@1100528902 : Boolean;VAR chrg4@1100528901 : Boolean;VAR chrg5@1100528900 : Boolean);
    VAR
      ChrgRec@1100528906 : Record 11229771;
    BEGIN
      //DP00381
      chrg0 := FALSE;
      chrg1 := FALSE;
      chrg2 := FALSE;
      chrg3 := FALSE;
      chrg4 := FALSE;
      chrg5 := FALSE;

      ChrgRec.RESET;
      ChrgRec.SETRANGE("Estimate No.", "Estimate No.");
      ChrgRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      ChrgRec.SETRANGE("Part Group", "Part Group");
      ChrgRec.SETRANGE(Part, Part);
      ChrgRec.SETRANGE("Recipe Line", "Estimate Line");
      ChrgRec.SETRANGE("Recipe Group", "Recipe Group");
      ChrgRec.SETRANGE(Recipe, Recipe);
      ChrgRec.SETRANGE("Basic Line", "Line No.");
      ChrgRec.SETRANGE("Surcharge Line");
      IF ChrgRec.FIND('-') THEN BEGIN
        REPEAT
          IF RcpLineRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line",
                            "Recipe Group", Recipe, ChrgRec."Surcharge Line") THEN BEGIN
            CASE RcpLineRec."Surcharge Type" OF
              RcpLineRec."Surcharge Type"::Labor:
                chrg1 := TRUE;
              RcpLineRec."Surcharge Type"::Material:
                chrg2 := TRUE;
              RcpLineRec."Surcharge Type"::Subcontracting:
                chrg3 := TRUE;
              RcpLineRec."Surcharge Type"::Plant:
                chrg4 := TRUE;
              RcpLineRec."Surcharge Type"::Sundry:
                chrg5 := TRUE;
            END;
          END;
        UNTIL ChrgRec.NEXT = 0;
      END;

      ChrgRec.SETRANGE("Basic Line");
      ChrgRec.SETRANGE("Surcharge Line", "Line No.");
      IF ChrgRec.FIND('-') THEN
        chrg0 := TRUE;
    END;

    PROCEDURE InitNormPrice@1100528909();
    BEGIN
       //db, 29-11-11
       Norm := 0;
       "Norm (Sales)" := 0;
       "Production Rate" := 0;
       "Nett Cost Price" := 0;
       "Purchase Discount %" := 0;
       "Gross Price" := 0;
       "Nett Sales Price" := 0;
       "Sales Discount %" := 0;
    END;

    PROCEDURE GetMinuts@1100485009(lvType@1100485002 : Integer;iCostSales@1100528900 : 'Cost,Sales') Result : Decimal;
    VAR
      RcpLineRec@1100485000 : Record 11072075;
      RcpTotal@1100485001 : Decimal;
      NormDec@1100528901 : Decimal;
      QuanDec@1100528902 : Decimal;
    BEGIN
      IF iCostSales = iCostSales::Sales THEN  //DP00381
        NormDec := "Norm (Sales)"
      ELSE
        NormDec := Norm;
      IF "Rate Type" = "Rate Type"::Hours THEN
        Result := NormDec * 60
      ELSE
        Result := NormDec;
      IF "Surcharge Type" <> "Surcharge Type"::" " THEN
        Result := Result * "Surcharge %" / 100;
      IF iCostSales = iCostSales::Sales THEN BEGIN  //DP00381
        IF "Cum. Adj. Factor Hours (Sales)" <> 0 THEN
          Result := Result * "Cum. Adj. Factor Hours (Sales)";
      END ELSE BEGIN
        IF "Cum. Adj. Factor Hours" <> 0 THEN
          Result := Result * "Cum. Adj. Factor Hours";
      END;
      IF "Team Size" > 0 THEN
        Result := Result * "Team Size";
      IF lvType = 1 THEN BEGIN
        IF iCostSales = iCostSales::Sales THEN  //DP00381
          Result := Result * "Quantity (Sales)"
        ELSE
          Result := Result * Quantity;
      END;
      EXIT(Result);
    END;

    PROCEDURE EvaluateSurchargeCostType@1100525020();
    BEGIN
      //db, 14-11-13: DP00381
      "Cost Type (Price)" := "Surcharge Type" - 1;
      IF "Surcharge Type" = "Surcharge Type"::Labor THEN
        "Cost Object Price" := ''
      ELSE
        "Cost Object Labor" := '';

      EstSetup.GET;
      CASE "Surcharge Type" OF
        "Surcharge Type"::Labor: "Cost Object Labor" := EstSetup."Absence Value Labor";
        "Surcharge Type"::Material: "Cost Object Price" := EstSetup."Absence Value Material";
        "Surcharge Type"::Subcontracting: "Cost Object Price" := EstSetup."Absence Value Subcontracting";
        "Surcharge Type"::Plant: "Cost Object Price" := EstSetup."Absence Value Plant";
        "Surcharge Type"::Sundry: "Cost Object Price" := EstSetup."Absence Value Sundry Cost";
      END;
    END;

    PROCEDURE SetSkipBlockedItem@1100528915(iSkipBlockedItem@1100528900 : Boolean);
    BEGIN
      SkipBlockedItem := iSkipBlockedItem;  //db, 11-11-13: DP00260 (C002164)
    END;

    PROCEDURE CheckCostTypePriceAllowed@1100525009();
    BEGIN
      //db, 19-11-13: DP00381
      IF "Cost Type (Price)" <> "Cost Type (Price)"::" " THEN BEGIN
        IF ("Set Code" = '') AND ("Plant Type" = '') THEN BEGIN
          //db, 29-12-14: skip check on quantity; init value for set code is 1 to fill cumulative quantity on related lines
          TESTFIELD(Quantity, 0);
          TESTFIELD("Quantity (Sales)", 0);
        END;
        TESTFIELD("Nett Cost Price", 0);
        TESTFIELD("Nett Sales Price", 0);
      END;
      IF "Item No." + "Basic Item" + "Trade Item" <> '' THEN BEGIN
        TESTFIELD("Recipe (Child)", '');
        TESTFIELD("Plant Type", '');
        TESTFIELD("Set Code", '');
      END;
      IF "Recipe (Child)" <> '' THEN BEGIN
        TESTFIELD("Item No.", '');
        TESTFIELD("Basic Item", '');
        TESTFIELD("Trade Item", '');
        TESTFIELD("Plant Type", '');
        TESTFIELD("Set Code", '');
      END;
      IF "Plant Type" <> '' THEN BEGIN
        TESTFIELD("Item No.", '');
        TESTFIELD("Basic Item", '');
        TESTFIELD("Trade Item", '');
        TESTFIELD("Recipe (Child)", '');
        TESTFIELD("Set Code", '');
      END;
      IF "Set Code" <> '' THEN BEGIN
        TESTFIELD("Item No.", '');
        TESTFIELD("Basic Item", '');
        TESTFIELD("Trade Item", '');
        TESTFIELD("Recipe (Child)", '');
        TESTFIELD("Plant Type", '');
      END;

      "Cost Type (Price)" := "Cost Type (Price)"::" ";
      IF "Item No." + "Basic Item" + "Trade Item" <> '' THEN
        "Cost Type (Price)" := "Cost Type (Price)"::Material;
      IF "Plant Type" + "Set Code" <> '' THEN
        "Cost Type (Price)" := "Cost Type (Price)"::Plant;
    END;

    PROCEDURE SortLines@1100525023(VAR gvRcpLineRec@1100525000 : Record 11072075;SortOption@1100525001 : 'SubEst,Part,Item,TradeItem,CostObject,CodingSystem,Recipe');
    VAR
      EstRec@1210190004 : Record 11012151;
      RcpLineRec@1100525002 : Record 11072075;
      sep@1210190003 : Text[1];
    BEGIN
      //db, 26-11-13 (DP00260: Estimate Lines MF NEW)
      RcpLineRec.COPY(gvRcpLineRec);
      sep := '~';
      RcpLineRec.SETCURRENTKEY("Estimate No.","Sub-Estimate No.","Part Group",Part);
      IF RcpLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          RcpLineRec."Text Composition" := '';
          IF SortOption = SortOption::SubEst THEN
            RcpLineRec."Text Composition" := RcpLineRec."Sub-Estimate No.";
          IF SortOption = SortOption::Part THEN
            RcpLineRec."Text Composition" := RcpLineRec."Part Group" + sep + RcpLineRec.Part;
          IF SortOption = SortOption::Item THEN
            RcpLineRec."Text Composition" := RcpLineRec."Item No.";
          IF SortOption = SortOption::TradeItem THEN
            IF RcpLineRec."Trade Item" <> '' THEN
              RcpLineRec."Text Composition" := RcpLineRec."Vendor (Trade Item)" + sep + RcpLineRec."Trade Item";
          IF SortOption = SortOption::CostObject THEN BEGIN
            IF RcpLineRec."Labor Cost Amount" > RcpLineRec."Cost Amount" - RcpLineRec."Labor Cost Amount" THEN
              RcpLineRec."Text Composition" := RcpLineRec."Cost Object Labor"
            ELSE
              RcpLineRec."Text Composition" := RcpLineRec."Cost Object Price";
          END;
          IF SortOption = SortOption::CodingSystem THEN BEGIN
            IF EstRec."No." <> RcpLineRec."Estimate No." THEN
              EstRec.GET(RcpLineRec."Estimate No.");
            IF RcpLineRec.Code <> '' THEN
              RcpLineRec."Text Composition" := EstRec."Coding System" + sep + RcpLineRec.Code;
          END;
          IF SortOption = SortOption::Recipe THEN
            IF RcpLineRec."Recipe (Child)" <> '' THEN
              RcpLineRec."Text Composition" := RcpLineRec."Recipe Group (Child)" + sep + RcpLineRec."Recipe (Child)";
          RcpLineRec.MODIFY;
        UNTIL RcpLineRec.NEXT = 0;
      END;
      SETCURRENTKEY("Estimate No.","Text Composition");
    END;

    PROCEDURE CheckFeatureRelation@1100409004(i@1100409004 : Integer);
    VAR
      QuantityRelation@1100409003 : Record 11020463;
      QuantitySheetHeader@1100409002 : Record 11020462;
      QuantitySheetLine@1100409000 : Record 11020464;
      FieldCode@1100409001 : Code[10];
    BEGIN
      //DP00686
      IF "Quantity Sheet Feature" = '' THEN EXIT;
      IF "Line No."= 0 THEN EXIT;  //db, 20-01-15

      EstPartRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part);  //db, 23-12-14: T005586

      QuantitySheetHeader.SETRANGE("Estimate No.", "Estimate No.");
      QuantitySheetHeader.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      QuantitySheetHeader.SETRANGE("Part Group", "Part Group");
      CASE i OF  //db, 23-12-14: T005586
        0: QuantitySheetHeader.SETRANGE(Part, EstPartRec.Part);
        1: QuantitySheetHeader.SETRANGE(Part, EstPartRec.Chapter);
        2: QuantitySheetHeader.SETRANGE(Part, EstPartRec.Paragraph);
      END;
      IF QuantitySheetHeader.FINDSET THEN BEGIN
        REPEAT
          QuantitySheetLine.SETRANGE("Estimate No.", QuantitySheetHeader."Estimate No.");
          QuantitySheetLine.SETRANGE("Quantity Sheet", QuantitySheetHeader.Code);
          IF QuantitySheetLine.FINDSET THEN BEGIN
            REPEAT
              IF QuantitySheetLine.Feature = "Quantity Sheet Feature" THEN BEGIN
                CASE QuantitySheetLine."Related to Column" OF
                  QuantitySheetLine."Related to Column"::Quantity: FieldCode := 'A';
                  QuantitySheetLine."Related to Column"::Length: FieldCode := 'B';
                  QuantitySheetLine."Related to Column"::TotalLength: FieldCode := 'C';
                  QuantitySheetLine."Related to Column"::Width: FieldCode := 'D';
                  QuantitySheetLine."Related to Column"::TotalWidth: FieldCode := 'E';
                  QuantitySheetLine."Related to Column"::Height: FieldCode := 'F';
                  QuantitySheetLine."Related to Column"::TotalHeight: FieldCode := 'G';
                  QuantitySheetLine."Related to Column"::Result: FieldCode := 'R';
                END;
                IF FieldCode <> '' THEN BEGIN
                  QuantityRelation.EditRelation(
                    "Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line", "Recipe Group", Recipe, "Line No.",
                    QuantitySheetLine."Quantity Sheet",
                    QuantitySheetLine."Row No.",
                    FieldCode);
                END;
              END;
            UNTIL QuantitySheetLine.NEXT = 0;
          END;
        UNTIL QuantitySheetHeader.NEXT = 0;
      END;
    END;

    PROCEDURE CopyItemText@1100409003();
    VAR
      TextRec@1100485000 : Record 11020595;
      TextRec2@1100485001 : Record 11020595;
      CurrLino@1100525001 : Integer;
      CommentLine@1100409000 : Record 97;
    BEGIN
      //DP00686
      IF "Line No." = 0 THEN EXIT;
      IF NOT EstRec.GET("Estimate No.") THEN EstRec.INIT;  //db, 09-06-15

      CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::Item);
      CommentLine.SETRANGE("No.", "Item No.");
      IF NOT CommentLine.FINDFIRST THEN EXIT;

      TextRec.SETRANGE("Table Name", TextRec."Table Name"::Estimate);
      TextRec.SETRANGE(Group, "Recipe Group");
      TextRec.SETRANGE("No.", Recipe);
      TextRec.SETRANGE("Estimate No.", "Estimate No.");
      TextRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      TextRec.SETRANGE("Part Group", "Part Group");
      TextRec.SETRANGE(Part, Part);
      TextRec.SETRANGE("Estimate Line No.", "Estimate Line");
      TextRec.SETRANGE("Recipe Line No.", "Line No.");
      TextRec.SETRANGE("Part Line No.", 0);
      //TextRec.SETRANGE("Source Table", TextRec."Source Table"::Item);  //db, 17-02-15
      IF EstRec."Language Code" <> '' THEN
        TextRec.SETFILTER("Language Code", '%1|%2', '', EstRec."Language Code");  //db, 22-05-15
      TextRec.DELETEALL;

      //TextRec.SETRANGE("Source Table");  //db, 17-02-15
      IF TextRec.FINDLAST THEN
        CurrLino := TextRec."Line No."
      ELSE
        CurrLino := 0;
      IF CommentLine.FINDSET THEN BEGIN
        REPEAT
          TextRec2.INIT;
          TextRec2."Table Name" := TextRec2."Table Name"::Estimate;
          //TextRec2."Source Table" := TextRec2."Source Table"::Item;  //db, 17-02-15
          TextRec2.Group := "Recipe Group";
          TextRec2."No." := Recipe;

          TextRec2.Date := CommentLine.Date;
          TextRec2.Code := CommentLine.Code;
          TextRec2.Comment := CommentLine.Comment;
          TextRec2."Comment Code" := CommentLine."Comment Code";
          TextRec2."Language Code" := CommentLine."Language Code";  //db, 22-05-15
          TextRec2."Line Break" := CommentLine."Line Break";
          TextRec2."Created by" := USERID;
          TextRec2."Time Created" := TIME;

          TextRec2."Estimate No." := "Estimate No.";
          TextRec2."Sub-Estimate No." := "Sub-Estimate No.";
          TextRec2."Part Group" := "Part Group";
          TextRec2.Part := Part;
          TextRec2."Estimate Line No." := "Estimate Line";
          TextRec2."Recipe Line No." := "Line No.";
          CurrLino := CurrLino + 10000;
          TextRec2."Line No." := CurrLino;
          TextRec2.INSERT;
        UNTIL CommentLine.NEXT = 0;
      END;
    END;

    PROCEDURE CopyRecipeLineText@1100409008();
    VAR
      TextRec@1100485000 : Record 11020595;
      TextRec2@1100485001 : Record 11020595;
      CurrLino@1100525001 : Integer;
    BEGIN
      //DP00686
      IF "Line No." = 0 THEN EXIT;
      IF NOT EstRec.GET("Estimate No.") THEN EstRec.INIT;  //db, 09-06-15

      TextRec.SETRANGE("Table Name", TextRec."Table Name"::Estimate);
      TextRec.SETRANGE(Group, "Recipe Group");
      TextRec.SETRANGE("No.", Recipe);
      TextRec.SETRANGE("Estimate No.", "Estimate No.");
      TextRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      TextRec.SETRANGE("Part Group", "Part Group");
      TextRec.SETRANGE(Part, Part);
      TextRec.SETRANGE("Estimate Line No.", "Estimate Line");
      TextRec.SETRANGE("Recipe Line No.", "Line No.");
      TextRec.SETRANGE("Part Line No.", 0);
      //TextRec.SETRANGE("Source Table", TextRec."Source Table"::RecipeLine);  //db, 17-02-15
      TextRec.DELETEALL;

      //TextRec.SETRANGE("Source Table");  //db, 17-02-15
      IF TextRec.FINDLAST THEN
        CurrLino := TextRec."Line No."
      ELSE
        CurrLino := 0;

      TextRec.SETFILTER("Estimate No.", '%1', '');
      TextRec.SETFILTER("Sub-Estimate No.", '%1', '');
      TextRec.SETFILTER("Part Group", '%1', '');
      TextRec.SETFILTER(Part, '%1', '');
      TextRec.SETRANGE("Estimate Line No.", 0);
      //TextRec.SETRANGE("Source Table", TextRec."Source Table"::" ");  //db, 17-02-15
      IF EstRec."Language Code" <> '' THEN
        TextRec.SETFILTER("Language Code", '%1|%2', '', EstRec."Language Code");  //db, 24-02-15
      IF TextRec.FINDSET THEN BEGIN
        REPEAT
          TextRec2.COPY(TextRec);
          //TextRec2."Source Table" := TextRec2."Source Table"::RecipeLine;  //db, 17-02-15
          TextRec2."Created by" := USERID;
          TextRec2."Time Created" := TIME;

          TextRec2."Estimate No." := "Estimate No.";
          TextRec2."Sub-Estimate No." := "Sub-Estimate No.";
          TextRec2."Part Group" := "Part Group";
          TextRec2.Part := Part;
          TextRec2."Estimate Line No." := "Estimate Line";
          CurrLino := CurrLino + 10000;
          TextRec2."Line No." := CurrLino;
          TextRec2.INSERT;
        UNTIL TextRec.NEXT = 0;
      END;
    END;

    PROCEDURE InitSalesFromCost@1100525029();
    BEGIN
      //db, 03-02-15: C020959
      EstRec.GET("Estimate No.");
      EstPartRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part);
      "Surcharge % Labor" := EstPartRec."Surcharge % Labor";
      IF "Cost Type (Price)" = "Cost Type (Price)"::Material THEN
        "Surcharge % Price" := EstPartRec."Surcharge % Material";
      IF "Cost Type (Price)" = "Cost Type (Price)"::Subcontracting THEN
        "Surcharge % Price" := EstPartRec."Surcharge % Subcontracting";
      IF "Cost Type (Price)" = "Cost Type (Price)"::Plant THEN
        "Surcharge % Price" := EstPartRec."Surcharge % Plant";
      IF "Cost Type (Price)" = "Cost Type (Price)"::Sundry THEN
        "Surcharge % Price" := EstPartRec."Surcharge % Sundry";
      "Quantity (Sales)" := Quantity;
      "Norm Agreement (Sales)" := FALSE;
      "Price Agreement (Sales)" := FALSE;
      IF "Sub Operation Code" <> '' THEN
        DetermineNormSales
      ELSE
        VALIDATE("Norm (Sales)", Norm);
      CalcItemSalesPriceAndDiscount(EstRec);
      CalculateTotals;
    END;

    LOCAL PROCEDURE CheckCurrencyAgreement@1100525034();
    BEGIN
      //db, 08-03-16
      IF "Currency Code" = '' THEN BEGIN
        "Currency Agreement" := FALSE;
      END ELSE BEGIN
        EstRec.GET("Estimate No.");
        "Currency Agreement" := ("Currency Code" <> EstRec."Currency Code");
      END;
    END;

    PROCEDURE GetCurrencyFactor@1100528601(IUseSalesExchange@1100528600 : Boolean;IUseReportCurrency@1100528602 : Boolean) : Decimal;
    VAR
      CurrencyExchangeRate@1100528601 : Record 330;
      CurrencyCode@1100528603 : Code[10];
    BEGIN
      GetEstimate("Estimate No.", TRUE);
      IF IUseReportCurrency THEN
        CurrencyCode := EstRec."Report Currency Code"
      ELSE
        CurrencyCode := "Currency Code";
      EXIT(CurrencyExchangeRate.ExchangeRate(2, "Estimate No.", EstRec."Reference Date (Rate)", CurrencyCode, IUseSalesExchange));
    END;

    PROCEDURE ExchangeAmtLCYToFCY@1100528602(IAmount@1100528601 : Decimal;IUseSalesExchange@1100528602 : Boolean;IUsePriceRounding@1100528605 : Boolean;IUseReportCurrency@1100528607 : Boolean) : Decimal;
    VAR
      CurrencyExchangeRate@1100528600 : Record 330;
      Currency@1100528604 : Record 4;
      Amount@1100528603 : Decimal;
      CurrencyCode@1100528606 : Code[10];
    BEGIN
      IF "Currency Code" = '' THEN
        EXIT(IAmount);
      GetEstimate("Estimate No.", TRUE);
      IF IUseReportCurrency THEN
        CurrencyCode := EstRec."Report Currency Code"
      ELSE
        CurrencyCode := "Currency Code";
      Amount := CurrencyExchangeRate.ExchangeAmtLCYToFCY(
        2, "Estimate No.", EstRec."Reference Date (Rate)", CurrencyCode, IAmount, GetCurrencyFactor(IUseSalesExchange, IUseReportCurrency), IUseSalesExchange);
      IF NOT Currency.GET(CurrencyCode) THEN
        Currency.InitRoundingPrecision;
      IF IUsePriceRounding THEN
        Amount := ROUND(Amount, Currency."Unit-Amount Rounding Precision")
      ELSE
        Amount := ROUND(Amount, Currency."Amount Rounding Precision");
      EXIT(Amount);
    END;

    PROCEDURE ExchangeAmtFCYToLCY@1100528600(IAmount@1100528601 : Decimal;IUseSalesExchange@1100528602 : Boolean;IUsePriceRounding@1100528605 : Boolean;IUseReportCurrency@1100528606 : Boolean) : Decimal;
    VAR
      CurrencyExchangeRate@1100528600 : Record 330;
      Currency@1100528604 : Record 4;
      Amount@1100528603 : Decimal;
      CurrencyCode@1100528607 : Code[10];
    BEGIN
      IF "Currency Code" = '' THEN
        EXIT(IAmount);
      GetEstimate("Estimate No.", TRUE);
      IF IUseReportCurrency THEN
        CurrencyCode := EstRec."Report Currency Code"
      ELSE
        CurrencyCode := "Currency Code";
      Amount := CurrencyExchangeRate.ExchangeAmtFCYToLCY(
        2, "Estimate No.", EstRec."Reference Date (Rate)", CurrencyCode, IAmount, GetCurrencyFactor(IUseSalesExchange, IUseReportCurrency), IUseSalesExchange);
      Currency.InitRoundingPrecision;
      IF IUsePriceRounding THEN
        Amount := ROUND(Amount, Currency."Unit-Amount Rounding Precision")
      ELSE
        Amount := ROUND(Amount, Currency."Amount Rounding Precision");
      EXIT(Amount);
    END;

    PROCEDURE ExchangeAmtFCYToFCY@1100528604(IAmount@1100528606 : Decimal;IFromCurrencyCode@1100528604 : Code[10];IToCurrencyCode@1100528605 : Code[10];IUseSalesExchange@1100528607 : Boolean;IUsePriceRounding@1100528608 : Boolean) : Decimal;
    VAR
      CurrencyExchangeRate@1100528603 : Record 330;
      Currency@1100528602 : Record 4;
      CurrencyFactor@1100528609 : Decimal;
      Amount@1100528601 : Decimal;
      CurrencyCode@1100528600 : Code[10];
    BEGIN
      GetEstimate("Estimate No.", TRUE);
      Amount := IAmount;
      IF IFromCurrencyCode <> '' THEN BEGIN
        CurrencyFactor := CurrencyExchangeRate.ExchangeRate(2, "Estimate No.", EstRec."Reference Date (Rate)", IFromCurrencyCode, IUseSalesExchange);
        Amount := CurrencyExchangeRate.ExchangeAmtFCYToLCY(2, "Estimate No.", EstRec."Reference Date (Rate)", IFromCurrencyCode, Amount, CurrencyFactor, IUseSalesExchange);
      END;
      IF IToCurrencyCode <> '' THEN BEGIN
        CurrencyFactor := CurrencyExchangeRate.ExchangeRate(2, "Estimate No.", EstRec."Reference Date (Rate)", IToCurrencyCode, IUseSalesExchange);
        Amount := CurrencyExchangeRate.ExchangeAmtLCYToFCY(2, "Estimate No.", EstRec."Reference Date (Rate)", IToCurrencyCode, Amount, CurrencyFactor, IUseSalesExchange);
      END;
      IF NOT Currency.GET(IToCurrencyCode) THEN
        Currency.InitRoundingPrecision;
      IF IUsePriceRounding THEN
        Amount := ROUND(Amount, Currency."Unit-Amount Rounding Precision")
      ELSE
        Amount := ROUND(Amount, Currency."Amount Rounding Precision");
      EXIT(Amount);
    END;

    PROCEDURE SetSkipValidateFCY@1100528603(ISkipValidateFCY@1100528600 : Boolean);
    BEGIN
      SkipValidateFCY := ISkipValidateFCY;
    END;

    PROCEDURE SetFromUpdateTotals@1100525030(FromUpdateTotals@1100525000 : Boolean);
    BEGIN
      //db, 26-02-15: C021215
      CalledFromUpdateTotals := FromUpdateTotals;
    END;

    PROCEDURE SetFilterZeroLinesByUser@1100525025(VAR RecipeLine@1100525001 : Record 11072075);
    VAR
      UserSetup@1100525000 : Record 91;
    BEGIN
      //C025240
      WITH RecipeLine DO BEGIN
        UserSetup.GET(USERID);
        IF UserSetup."Hide Zero Lines" = FALSE THEN BEGIN
          UserSetup."Hide Zero Lines" := TRUE;
        END ELSE BEGIN
          UserSetup."Hide Zero Lines" := FALSE;
        END;
        UserSetup.MODIFY;
      END;
      GetFilterZeroLinesByUser(RecipeLine);
    END;

    PROCEDURE GetFilterZeroLinesByUser@1100525012(VAR RecipeLine@1100525000 : Record 11072075);
    VAR
      UserSetup@1100525001 : Record 91;
    BEGIN
      //C025240
      WITH RecipeLine DO BEGIN
        UserSetup.GET(USERID);
        IF UserSetup."Hide Zero Lines" = FALSE THEN BEGIN
          SETRANGE(Quantity);
        END ELSE BEGIN
          SETFILTER(Quantity, '<>%1', 0);
        END;
      END;
    END;

    PROCEDURE CheckHideZeroLines@1100525001();
    VAR
      UserSetup@1100525000 : Record 91;
    BEGIN
      //C025240
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Hide Zero Lines", FALSE);
    END;

    PROCEDURE InitRateRelatedFields@1100525033();
    BEGIN
      //DP01047
      "Cost Rate" := 0;
      "Cost Rate (FCY)" := 0;
      "Sales Rate" := 0;
      "Sales Rate (FCY)" := 0;
      CLEAR("Rate Type");
      "Team Size" := 0;
      "Wage Component" := '';  //DP00236
    END;

    PROCEDURE InitNormRelatedFields@1100525006();
    BEGIN
      //DP01047
      Norm := 0;
      "Production Rate" := 0;
      "Norm (Sales)" := 0;
      "Production Rate (Sales)" := 0;
    END;

    BEGIN
    END.
  }
}

