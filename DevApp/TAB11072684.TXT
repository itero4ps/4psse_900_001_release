OBJECT Table 11072684 Plant Inspection Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD("Index Date");
             END;

    CaptionML=ENU=Plant Inspection Line;
  }
  FIELDS
  {
    { 10  ;   ;Level               ;Option        ;CaptionML=ENU=Level;
                                                   OptionCaptionML=ENU=Base Inspection List,Plant Type,Plant Number;
                                                   OptionString=Base Inspection List,Plant Type,Plant Number;
                                                   Editable=No }
    { 15  ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type".Code;
                                                   CaptionML=ENU=Plant Type;
                                                   Editable=No }
    { 20  ;   ;Level Code          ;Code20        ;TableRelation=IF (Level=CONST(Base Inspection List)) "Base Plant Inspection List".Code
                                                                 ELSE IF (Level=CONST(Plant Type)) "Plant Type".Code
                                                                 ELSE IF (Level=CONST(Plant Number)) "Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   CaptionML=ENU=Code;
                                                   Editable=No }
    { 25  ;   ;Maintenance Scheme  ;Code20        ;TableRelation="Plant Maintenance Scheme".Code;
                                                   CaptionML=ENU=Maintenance Scheme;
                                                   Editable=No }
    { 30  ;   ;Index Date          ;Date          ;CaptionML=ENU=Index Date;
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 40  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 50  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF (xRec.Type <> Type) AND (Type = Type::Group) THEN BEGIN
                                                                  "Field Type" := "Field Type"::" ";
                                                                  "Unit Of Measure" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Group,Line;
                                                   OptionString=Group,Line }
    { 60  ;   ;Inspection Code     ;Code20        ;TableRelation=IF (Type=CONST(Group)) "Plant Inspection Group"
                                                                 ELSE IF (Type=CONST(Line)) "Base Plant Inspection Line";
                                                   OnValidate=VAR
                                                                PlantInspectionGroup@1100528601 : Record 11072678;
                                                                BasePlantInspectionLine@1100528600 : Record 11072679;
                                                              BEGIN
                                                                CASE Type OF
                                                                  Type::Group:
                                                                    BEGIN
                                                                      PlantInspectionGroup.GET("Inspection Code");
                                                                      VALIDATE(Description, PlantInspectionGroup.Description);
                                                                    END;
                                                                  Type::Line:
                                                                    BEGIN
                                                                      BasePlantInspectionLine.GET("Inspection Code");
                                                                      VALIDATE(Description, BasePlantInspectionLine.Description);
                                                                      VALIDATE("Field Type", BasePlantInspectionLine."Field Type");
                                                                      VALIDATE("Unit Of Measure", BasePlantInspectionLine."Unit Of Measure");
                                                                      VALIDATE(Mandatory, BasePlantInspectionLine.Mandatory);
                                                                    END;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              PlantInspectionGroup@1100528601 : Record 11072678;
                                                              BasePlantInspectionLine@1100528600 : Record 11072679;
                                                              PlantInspectionGroupCode@1100528602 : Code[10];
                                                            BEGIN
                                                              CASE Type OF
                                                                Type::Group:
                                                                  BEGIN
                                                                    IF PlantInspectionGroup.GET("Inspection Code") THEN;
                                                                    IF PAGE.RUNMODAL(0, PlantInspectionGroup) = ACTION::LookupOK THEN
                                                                      VALIDATE("Inspection Code", PlantInspectionGroup.Code);
                                                                  END;
                                                                Type::Line:
                                                                  BEGIN
                                                                    PlantInspectionGroupCode := GetPlantInspectionGroupCode;
                                                                    IF PlantInspectionGroupCode <> '' THEN
                                                                      BasePlantInspectionLine.SETFILTER("Inspection Group Code", '%1|%2', '', PlantInspectionGroupCode);
                                                                    IF BasePlantInspectionLine.GET("Inspection Code") THEN;
                                                                    IF PAGE.RUNMODAL(0, BasePlantInspectionLine) = ACTION::LookupOK THEN
                                                                      VALIDATE("Inspection Code", BasePlantInspectionLine.Code);
                                                                  END;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Inspection Code }
    { 70  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 80  ;   ;Field Type          ;Option        ;OnValidate=BEGIN
                                                                IF "Field Type" = "Field Type"::" " THEN
                                                                  TESTFIELD(Type, Type::Group);

                                                                IF (CurrFieldNo = FIELDNO("Field Type")) AND
                                                                   ((("Field Type" IN ["Field Type"::Option, "Field Type"::"Yes/No"]) OR
                                                                     (xRec."Field Type" IN ["Field Type"::Option, "Field Type"::"Yes/No"])) AND
                                                                    ("Field Type" <> xRec."Field Type"))
                                                                THEN
                                                                  ERROR(Text000, FIELDCAPTION("Field Type"));
                                                              END;

                                                   CaptionML=ENU=Field Type;
                                                   OptionCaptionML=ENU="Date,Value,Text,Option,Yes/No,,,,, ";
                                                   OptionString=[Date,Value,Text,Option,Yes/No,,,,, ] }
    { 90  ;   ;Unit Of Measure     ;Code10        ;TableRelation="Unit of Measure";
                                                   CaptionML=ENU=Unit Of Measure }
    { 100 ;   ;Mandatory           ;Boolean       ;CaptionML=ENU=Mandatory }
    { 110 ;   ;Base Inspection List;Code20        ;TableRelation="Base Plant Inspection List".Code;
                                                   CaptionML=ENU=Base Inspection List }
    { 120 ;   ;Inspection Group Code;Code10       ;TableRelation="Plant Inspection Group";
                                                   CaptionML=ENU=Inspection Group Code;
                                                   Description=Used as buffer;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Level,Plant Type,Level Code,Maintenance Scheme,Base Inspection List,Index Date,Line No.;
                                                   Clustered=Yes }
    {    ;Inspection Group Code,Line No.           }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100525000 : TextConst 'ENU=%1 of type Option or Yes/No can only be modified on base level.';
      Text001@1100528603 : TextConst 'ENU=Cancel %1 not allowed for Base Inspection List';
      Text002@1100528602 : TextConst 'ENU=Can not modify line on this level';

    PROCEDURE GetPlantInspectionGroupCode@1100528601() : Code[10];
    VAR
      PlantInspectionLine@1100528600 : Record 11072684;
    BEGIN
      PlantInspectionLine := Rec;
      PlantInspectionLine.SETRECFILTER;
      PlantInspectionLine.SETFILTER("Line No.", '<%1', "Line No.");
      PlantInspectionLine.SETRANGE(Type, PlantInspectionLine.Type::Group);
      IF PlantInspectionLine.FINDLAST THEN
        EXIT(PlantInspectionLine."Inspection Code");
    END;

    PROCEDURE SetAsCancelled@1100528606(ICancelled@1100528600 : Boolean;ILevel@1100528602 : 'Base Inspection List,Standard Object,Contract Object,Standard Object (Calls),Object (Calls)';IPlantType@1100528606 : Code[20];ILevelCode@1100528603 : Code[20];IMaintenanceScheme@1100528607 : Code[20];IInspectionList@1100528608 : Code[20];IIndexDate@1100528604 : Date);
    VAR
      CancelledPlantInspectionLine@1100528601 : Record 11072683;
      PlantInspectionLine@1100528605 : Record 11072684;
    BEGIN
      IF ICancelled THEN BEGIN
        CancelledPlantInspectionLine.Level := ILevel;
        CancelledPlantInspectionLine."Plant Type" := IPlantType;
        CancelledPlantInspectionLine."Level Code" := ILevelCode;
        CancelledPlantInspectionLine."Maintenance Scheme" := IMaintenanceScheme;
        CancelledPlantInspectionLine."Base Inspection List" := IInspectionList;
        CancelledPlantInspectionLine."Index Date" := IIndexDate;
        CancelledPlantInspectionLine."Level (Cancelled)" := Level;
        CancelledPlantInspectionLine."Plant Type (Cancelled)" := "Plant Type";
        CancelledPlantInspectionLine."Level Code (Cancelled)" := "Level Code";
        CancelledPlantInspectionLine."Line No. (Cancelled)" := "Line No.";
        CancelledPlantInspectionLine."Maintenance Scheme (Cancelled)" := "Maintenance Scheme";
        CancelledPlantInspectionLine."Base Insp. List (Cancelled)" := "Base Inspection List";
        CancelledPlantInspectionLine.INSERT(TRUE);
      END ELSE BEGIN
        IF CancelledPlantInspectionLine.GET(
          ILevel, IPlantType, ILevelCode, IMaintenanceScheme, IInspectionList, IIndexDate,
          Level, "Plant Type", "Level Code", "Line No.", "Maintenance Scheme", "Base Inspection List")
        THEN
          CancelledPlantInspectionLine.DELETE(TRUE);
      END;
    END;

    PROCEDURE IsCancelled@1100528605(SourceLevel@1100528604 : 'Base Inspection List,Plant Type,Plant Number';SourcePlantType@1100528602 : Code[20];SourceLevelCode@1100528603 : Code[20];SourceMaintenanceScheme@1100528609 : Code[20];SourceInspectionList@1100528610 : Code[20];SourceIndexDate@1100528608 : Date;VAR OCancellationLevel@1100528803 : ' ,Plant Type, Plant Number') : Boolean;
    VAR
      CancelledPlantInspectionLine@1100528800 : Record 11072683;
      PlantMaintenanceManagement@1100528801 : Codeunit 11012872;
      IndexDate@1100528802 : Date;
    BEGIN
      OCancellationLevel := OCancellationLevel::" ";

      PlantMaintenanceManagement.GetApplicableBaseInspectionListIndexDate(
        SourcePlantType,
        SourceInspectionList,
        SourceIndexDate,
        IndexDate,
        SourceLevel,
        SourcePlantType,
        SourceMaintenanceScheme);

      IF CancelledPlantInspectionLine.GET(
        SourceLevel, SourcePlantType, SourceLevelCode, SourceMaintenanceScheme, SourceInspectionList, IndexDate,
        Level, "Plant Type", "Level Code", "Line No.", "Maintenance Scheme", "Base Inspection List") THEN BEGIN
          OCancellationLevel := SourceLevel;
          EXIT(TRUE);
      END;
      //Get index date for plant type level
      IndexDate := 0D;
      PlantMaintenanceManagement.GetApplicableBaseInspectionListIndexDate(
        SourcePlantType,
        SourceInspectionList,
        SourceIndexDate,
        IndexDate,
        SourceLevel-1,
        SourcePlantType,
        SourceMaintenanceScheme);


      IF SourceLevel = 2 THEN
        IF CancelledPlantInspectionLine.GET(
          SourceLevel-1, SourcePlantType, SourcePlantType, SourceMaintenanceScheme, SourceInspectionList, IndexDate,
          Level, "Plant Type", "Level Code", "Line No.", "Maintenance Scheme", "Base Inspection List") THEN BEGIN
            OCancellationLevel := SourceLevel-1;
            EXIT(TRUE);
        END;
    END;

    BEGIN
    END.
  }
}

