OBJECT Table 11125541 Plant Need Line (SMF)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               PlantNeed@1100409000 : Record 11012579;
             BEGIN
               TESTFIELD("Plant Type");
               "Copied Quantity" := 0;
               "Transf. from Estimate" := '';
               "Blocked for Modify" := FALSE;

               PlantNeed.CHANGECOMPANY("Plant Company");
               PlantNeed.INIT;
               PlantNeed.Location := "Plant Location";
               PlantNeed."Line No." := "Line No.";
               FillPlantNeedFields(PlantNeed);
               PlantNeed.INSERT(FALSE);  // FALSE!
             END;

    OnModify=VAR
               PlantNeed@1100409000 : Record 11012579;
             BEGIN
               TESTFIELD("Blocked for Modify", FALSE);
               PlantNeed.CHANGECOMPANY("Plant Company");
               PlantNeed.GET("Plant Location", "Line No.");
               FillPlantNeedFields(PlantNeed);
               PlantNeed.MODIFY(FALSE);  // FALSE!
             END;

    OnDelete=VAR
               PlantNeed@1210190000 : Record 11012579;
             BEGIN
               TESTFIELD("Blocked for Modify", FALSE);
               PlantNeed.CHANGECOMPANY("Plant Company");
               IF PlantNeed.GET("Plant Location", "Line No.") THEN BEGIN
                 PlantNeed.ResetCopiedNeedPlantOrderLines("Plant Company");
                 PlantNeed.DELETE(FALSE);  // FALSE!
               END;
             END;

    CaptionML=ENU=Plant Need Line (Site Manager Form);
  }
  FIELDS
  {
    { 10  ;   ;Plant Location      ;Code20        ;CaptionML=ENU=Plant Location }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 25  ;   ;Plant Company       ;Text30        ;TableRelation=Company;
                                                   CaptionML=ENU=Plant Company }
    { 30  ;   ;Plant Type          ;Code20        ;OnValidate=VAR
                                                                PlantType@1100409000 : Record 11012551;
                                                              BEGIN
                                                                TESTFIELD("Plant Location");
                                                                TESTFIELD("Plant Company");
                                                                TESTFIELD(Finished, FALSE);
                                                                TESTFIELD("Blocked for Modify", FALSE);
                                                                PlantType.CHANGECOMPANY("Plant Company");
                                                                PlantType.GET("Plant Type");
                                                                IF NOT (PlantType."Rental Type" IN [PlantType."Rental Type"::Rental, PlantType."Rental Type"::Both]) THEN
                                                                  PlantType.TESTFIELD("Rental Type");
                                                                FillPlantTypeRelatedFields(PlantType);
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupPlantType();
                                                            END;

                                                   CaptionML=ENU=Plant Type;
                                                   NotBlank=Yes }
    { 31  ;   ;Plant Description   ;Text50        ;CaptionML=ENU=Plant Description;
                                                   Editable=No }
    { 32  ;   ;Unit of Measure     ;Code10        ;CaptionML=ENU=Unit of Measure;
                                                   Editable=No }
    { 33  ;   ;Cost Object         ;Code20        ;CaptionML=ENU=Cost Object;
                                                   Editable=No }
    { 34  ;   ;Bulk                ;Boolean       ;CaptionML=ENU=Bulk;
                                                   Editable=No }
    { 40  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                IF "Starting Date" <> xRec."Starting Date" THEN BEGIN
                                                                  TESTFIELD(Finished, FALSE);
                                                                  TESTFIELD("Blocked for Modify", FALSE);
                                                                END;
                                                                IF ("Ending Date" <> 0D) AND ("Starting Date" <> xRec."Starting Date") THEN BEGIN
                                                                  IF CONFIRM(Text001,TRUE) THEN
                                                                    "Ending Date" := "Ending Date" + ("Starting Date" - xRec."Starting Date");
                                                                END;
                                                                VALIDATE("Ending Date")
                                                              END;

                                                   CaptionML=ENU=Starting Date;
                                                   NotBlank=Yes }
    { 50  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                IF "Ending Date" <> xRec."Ending Date" THEN BEGIN
                                                                  TESTFIELD(Finished, FALSE);
                                                                  TESTFIELD("Blocked for Modify", FALSE);
                                                                END;
                                                                IF ("Ending Date" <> 0D) AND ("Ending Date" < "Starting Date") THEN
                                                                  "Ending Date" := "Starting Date";
                                                              END;

                                                   CaptionML=ENU=Ending Date }
    { 60  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                IF Quantity <> xRec.Quantity THEN BEGIN
                                                                  TESTFIELD(Finished, FALSE);
                                                                  TESTFIELD("Blocked for Modify", FALSE);
                                                                  "Quantity To Copy" := Quantity;
                                                                  "Delete Remainder" := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 70  ;   ;Copied Quantity     ;Decimal       ;CaptionML=ENU=Copied Quantity (PO);
                                                   DecimalPlaces=0:5;
                                                   Description=Quantity copied to Plant Order(s);
                                                   Editable=No }
    { 80  ;   ;Quantity To Copy    ;Decimal       ;OnValidate=BEGIN
                                                                IF "Quantity To Copy" <> xRec."Quantity To Copy" THEN BEGIN
                                                                  TESTFIELD(Finished, FALSE);
                                                                  TESTFIELD("Blocked for Modify", FALSE);
                                                                  IF NOT "Line Exists in Plant Need" THEN  //* For new lines always filled with Quantity
                                                                    TESTFIELD("Quantity To Copy", Quantity);
                                                                  IF "Quantity To Copy" = 0 THEN BEGIN
                                                                    Finished := TRUE;
                                                                    "Delete Remainder" := FALSE;
                                                                  END ELSE BEGIN
                                                                    IF "Quantity To Copy" < (Quantity - "Copied Quantity") THEN
                                                                      "Delete Remainder" := TRUE;
                                                                    IF "Quantity To Copy" >= (Quantity - "Copied Quantity") THEN
                                                                      "Delete Remainder" := FALSE;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=To Copy;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 85  ;   ;Delete Remainder    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Delete Remainder" <> xRec."Delete Remainder" THEN BEGIN
                                                                  TESTFIELD(Finished, FALSE);
                                                                  TESTFIELD("Blocked for Modify", FALSE);
                                                                  IF NOT "Line Exists in Plant Need" THEN  //* Not done for new lines
                                                                    TESTFIELD("Delete Remainder", FALSE);
                                                                  IF "Delete Remainder" THEN BEGIN
                                                                    IF "Quantity To Copy" >= (Quantity - "Copied Quantity") THEN
                                                                      TESTFIELD("Delete Remainder", FALSE);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Delete Remainder }
    { 90  ;   ;Finished            ;Boolean       ;OnValidate=BEGIN
                                                                IF Finished <> xRec.Finished THEN BEGIN
                                                                  TESTFIELD("Blocked for Modify", FALSE);
                                                                  IF NOT "Line Exists in Plant Need" THEN  //* Not done for new lines
                                                                    TESTFIELD(Finished, FALSE);
                                                                  IF Finished THEN BEGIN
                                                                    "Quantity To Copy" := 0;
                                                                    "Delete Remainder" := FALSE;
                                                                  END ELSE BEGIN
                                                                    "Quantity To Copy" := Quantity - "Copied Quantity";
                                                                    IF "Quantity To Copy" < 0 THEN
                                                                      "Quantity To Copy" := 0;
                                                                    "Delete Remainder" := FALSE;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Finished }
    { 120 ;   ;Transf. from Estimate;Code20       ;CaptionML=ENU=Transf. from Estimate;
                                                   Editable=No }
    { 130 ;   ;Blocked for Modify  ;Boolean       ;CaptionML=ENU=Blocked for Modify;
                                                   Description=Modify/Delete;
                                                   Editable=No }
    { 140 ;   ;Line Exists in Plant Need;Boolean  ;CaptionML=ENU=Line Exist in Plant Need;
                                                   Description=At the moment the tmp table is build;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Plant Location,Line No.                 ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1210190000 : TextConst 'ENU=Also shift the End Dat';

    PROCEDURE InitRecord@1100409004();
    BEGIN
      "Copied Quantity" := 0;
      Finished := FALSE;
      "Delete Remainder":= FALSE;
      "Transf. from Estimate" := '';
      "Blocked for Modify" := FALSE;
      "Line Exists in Plant Need" := FALSE;
    END;

    PROCEDURE LookupPlantType@1100525001();
    VAR
      PlantType@1100525000 : Record 11012551;
    BEGIN
      TESTFIELD("Plant Location");
      TESTFIELD("Plant Company");

      PlantType.CHANGECOMPANY("Plant Company");
      PlantType.FILTERGROUP(9);
      PlantType.SETFILTER("Rental Type", '%1|%2', PlantType."Rental Type"::Rental, PlantType."Rental Type"::Both);
      PlantType.FILTERGROUP(0);
      PlantType.Code := "Plant Type";

      IF Finished OR "Blocked for Modify" THEN
        PAGE.RUNMODAL(0, PlantType)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, PlantType) = ACTION::LookupOK THEN
          VALIDATE("Plant Type", PlantType.Code);
      END;
    END;

    PROCEDURE BuildTmpTableFromPlantNeed@1100409001(VAR TmpPlantNeedLineSMF@1100409000 : TEMPORARY Record 11125541;PlantCompany@1100409001 : Text[30];PlantLocation@1100409002 : Code[20]);
    VAR
      PlantNeed@1100409003 : Record 11012579;
      PlantType@1100409004 : Record 11012551;
      PlantOrderLine@1100409005 : Record 11012557;
    BEGIN
      //* NOTE: TmpPlantNeedLineSMF must be Temporary in the calling process!
      TmpPlantNeedLineSMF.RESET;
      TmpPlantNeedLineSMF.DELETEALL;
      IF (PlantCompany <> '') AND (PlantLocation <> '') THEN BEGIN
        PlantNeed.CHANGECOMPANY(PlantCompany);
        PlantNeed.SETRANGE(Location, PlantLocation);
        PlantNeed.SETRANGE("Document No.", ''); //Skip Plant Need from granule 'Sales Rental Contract' (not allowed on Request)
        IF PlantNeed.FINDSET THEN BEGIN
          REPEAT
            TmpPlantNeedLineSMF.INIT;
            TmpPlantNeedLineSMF."Plant Location" := PlantLocation;
            TmpPlantNeedLineSMF."Plant Company" := PlantCompany;
            TmpPlantNeedLineSMF."Line No." := PlantNeed."Line No.";
            TmpPlantNeedLineSMF."Plant Type" := PlantNeed."Plant Type";
            TmpPlantNeedLineSMF."Starting Date" := PlantNeed."Starting Date";
            TmpPlantNeedLineSMF."Ending Date" := PlantNeed."Ending Date";
            TmpPlantNeedLineSMF.Quantity := PlantNeed.Quantity;
            TmpPlantNeedLineSMF."Quantity To Copy" := PlantNeed."Quantity To Copy";
            TmpPlantNeedLineSMF."Delete Remainder" := PlantNeed."Delete Remainder";
            TmpPlantNeedLineSMF.Finished := PlantNeed.Finished;
            TmpPlantNeedLineSMF."Transf. from Estimate" := PlantNeed."Transf. from Estimate";
            IF TmpPlantNeedLineSMF."Plant Type" <> '' THEN BEGIN
              PlantType.CHANGECOMPANY(PlantCompany);
              IF PlantType.GET(TmpPlantNeedLineSMF."Plant Type") THEN
                TmpPlantNeedLineSMF.FillPlantTypeRelatedFields(PlantType);
            END;
            PlantOrderLine.CHANGECOMPANY(PlantCompany);
            PlantOrderLine.SETCURRENTKEY("Location Copied Need", "Line No. Copied Need");
            PlantOrderLine.SETRANGE("Location Copied Need", PlantNeed.Location);
            PlantOrderLine.SETRANGE("Line No. Copied Need", PlantNeed."Line No.");
            IF PlantOrderLine.FINDSET THEN BEGIN
              REPEAT
                TmpPlantNeedLineSMF."Copied Quantity" := TmpPlantNeedLineSMF."Copied Quantity" + PlantOrderLine.Quantity;
              UNTIL PlantOrderLine.NEXT = 0;
            END;
            TmpPlantNeedLineSMF."Blocked for Modify" := TmpPlantNeedLineSMF.Finished OR ("Copied Quantity" <> 0);
            TmpPlantNeedLineSMF."Line Exists in Plant Need" := TRUE;
            TmpPlantNeedLineSMF.INSERT;
          UNTIL PlantNeed.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE FillPlantTypeRelatedFields@1100409005(PlantType@1100409000 : Record 11012551);
    BEGIN
      "Plant Description" := PlantType.Description;
      "Unit of Measure" := PlantType."Unit of Measure";
      "Cost Object" := PlantType."Cost Object";
      Bulk := PlantType.Bulk;
    END;

    PROCEDURE FillPlantNeedFields@1100409000(VAR PlantNeed@1100409000 : Record 11012579);
    BEGIN
      PlantNeed."Plant Type" := "Plant Type";
      PlantNeed."Starting Date" := "Starting Date";
      PlantNeed."Ending Date" := "Ending Date";
      PlantNeed.Quantity := Quantity;
      PlantNeed."Quantity To Copy" := "Quantity To Copy";
      PlantNeed."Delete Remainder" := "Delete Remainder";
      PlantNeed.Finished := Finished;
    END;

    PROCEDURE CopyLinesToPlantRequestSMF@1100525000(VAR TmpPlantNeedLineSMF@1100525000 : TEMPORARY Record 11125541;PlantRequestNo@1100525001 : Code[20]);
    VAR
      PlantRequestSMF@1100525002 : Record 11125529;
      PlantReqLineSMF@1100525003 : Record 11125530;
      NextLineNo@1100409000 : Integer;
    BEGIN
      IF NOT TmpPlantNeedLineSMF.FINDSET(FALSE,FALSE) THEN
        EXIT;

      PlantRequestSMF.GET(PlantRequestNo);

      PlantReqLineSMF.SETRANGE("Request No.", PlantRequestNo);
      IF PlantReqLineSMF.FINDLAST THEN
        NextLineNo :=  PlantReqLineSMF."Line No." + 10000
      ELSE
        NextLineNo := 10000;

      REPEAT
        IF (NOT TmpPlantNeedLineSMF.Finished) AND (TmpPlantNeedLineSMF."Quantity To Copy" > 0) THEN BEGIN
          PlantReqLineSMF.INIT;
          PlantReqLineSMF."Request No." := PlantRequestNo;
          PlantReqLineSMF."Line No." := NextLineNo;
          PlantReqLineSMF.Type := PlantReqLineSMF.Type::Plant;
          PlantReqLineSMF."Plant/Item" := TmpPlantNeedLineSMF."Plant Type";
          PlantReqLineSMF.Description := TmpPlantNeedLineSMF."Plant Description";
          PlantReqLineSMF.Bulk := TmpPlantNeedLineSMF.Bulk;
          PlantReqLineSMF."Expected return on" := TmpPlantNeedLineSMF."Ending Date";
          IF (PlantReqLineSMF."Expected return on" <> 0D) AND
             (PlantReqLineSMF."Expected return on" < PlantRequestSMF."Transfer Date")
          THEN
            PlantReqLineSMF."Expected return on" := PlantRequestSMF."Transfer Date";
          PlantReqLineSMF.Quantity := TmpPlantNeedLineSMF."Quantity To Copy";
          PlantReqLineSMF."Location Copied Need" := TmpPlantNeedLineSMF."Plant Location";
          PlantReqLineSMF."Line No. Copied Need" := TmpPlantNeedLineSMF."Line No.";
          PlantReqLineSMF.INSERT;
          NextLineNo :=NextLineNo + 10000;
        END;
      UNTIL (TmpPlantNeedLineSMF.NEXT = 0);
      COMMIT;
    END;

    BEGIN
    {
      This table may only be used as temporary!
    }
    END.
  }
}

