OBJECT Table 11125647 4PS Mobile Item Usage
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Last Modified Date" := CURRENTDATETIME;
             END;

    OnModify=BEGIN
               "Last Modified Date" := CURRENTDATETIME;
             END;

    CaptionML=ENU=4PS Mobile Item Usage;
  }
  FIELDS
  {
    { 10  ;   ;Service Order No.   ;Code20        ;TableRelation="Service Order".No.;
                                                   CaptionML=ENU=Service Order No. }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 30  ;   ;Source              ;Option        ;CaptionML=ENU=Source;
                                                   OptionCaptionML=ENU=Advice Order Line,Item Journal,Purchase Order;
                                                   OptionString=Advice Order Line,Item Journal,Purchase Order }
    { 35  ;   ;Advice Order Line No.;Integer      ;CaptionML=ENU=Advice Order Line No. }
    { 40  ;   ;Purchase Order No.  ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   CaptionML=ENU=Purchase Order No. }
    { 45  ;   ;Purchase Order Line No.;Integer    ;CaptionML=ENU=Purchase Order Line No. }
    { 50  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=ENU=Item No. }
    { 60  ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   CaptionML=ENU=Trade Item }
    { 70  ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 80  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 85  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 90  ;   ;Quantity            ;Decimal       ;CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 100 ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=ENU=Unit of Measure }
    { 110 ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Vendor No. }
    { 1000;   ;Source Deleted      ;Boolean       ;CaptionML=ENU=Source Deleted }
    { 1020;   ;Created by Employee No.;Code20     ;TableRelation=Employee.No.;
                                                   CaptionML=ENU=Created by Employee No.;
                                                   Editable=No }
    { 1021;   ;Created by Employee Company;Text30 ;TableRelation=Company;
                                                   CaptionML=ENU=Created by Employee Company;
                                                   Editable=No }
    { 1022;   ;Created by Work Order No.;Code20   ;TableRelation="Work Order";
                                                   CaptionML=ENU=Created by Work Order No.;
                                                   Editable=No }
    { 1030;   ;Decentral Created   ;Boolean       ;CaptionML=ENU=Decentral Created;
                                                   Editable=No }
    { 1035;   ;Decentral Created Guid;Text32      ;CaptionML=ENU=Decentral Created Guid }
    { 1040;   ;Last Modified Date  ;DateTime      ;CaptionML=ENU=Last Modified Date;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Service Order No.,Line No.              ;Clustered=Yes }
    {    ;Source,Purchase Order No.,Purchase Order Line No. }
    {    ;Source,Service Order No.,Advice Order Line No. }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE CreateModifyFromAdvOrdLine@1100528109(AdviceOrderLine@1100528100 : Record 11012055);
    VAR
      RouteRefMgtCU@1100528102 : Codeunit 11012045;
      updateExistingLine@1100528101 : Boolean;
      RefTxt@1100409001 : Text[30];
      PosInt@1100409000 : Integer;
    BEGIN
      IF NOT isMobileOrder(AdviceOrderLine."Service Order No.") THEN
        EXIT;
      IF NOT advOrdLineMustBeSentToMobile(AdviceOrderLine) THEN
        EXIT;

      updateExistingLine := findAdvOrdLineCopy(AdviceOrderLine);

      VALIDATE(Source, Source::"Advice Order Line");
      VALIDATE("Service Order No.", AdviceOrderLine."Service Order No.");
      VALIDATE("Advice Order Line No.", AdviceOrderLine."Line No.");
      //db.sn, 10-11-14: C018813
      RefTxt := RouteRefMgtCU.GetPurchOrderOfReference(AdviceOrderLine."Purchase Route Reference");
      PosInt := STRPOS(RefTxt, '<');
      IF PosInt = 0 THEN
        VALIDATE("Purchase Order No.", RefTxt);
      //db.en, 10-11-14: C018813
      VALIDATE("Item No.", AdviceOrderLine."Item No.");
      VALIDATE("Vendor (Trade Item)", AdviceOrderLine."Vendor (Trade Item)");  //db, 27-03-14: assign before validate TradeItem
      VALIDATE("Trade Item", AdviceOrderLine."Trade Item");  //db, 27-03-14: table relation changed (equal to Advice Order)
      //VALIDATE("Vendor (Trade Item)", AdviceOrderLine."Vendor (Trade Item)");
      VALIDATE(Description, AdviceOrderLine.Description);
      VALIDATE("Description 2", AdviceOrderLine."Description 2");
      VALIDATE(Quantity, AdviceOrderLine."Quantity (Advice)" + AdviceOrderLine."Quantity (Processed)");
      VALIDATE("Unit of Measure", AdviceOrderLine."Unit of Measure");
      VALIDATE("Vendor No.", AdviceOrderLine.Vendor);
      VALIDATE("Created by Employee No.", AdviceOrderLine."Created by Employee No.");
      VALIDATE("Created by Employee Company", AdviceOrderLine."Created by Employee Company");
      VALIDATE("Created by Work Order No.", AdviceOrderLine."Created by Work Order No.");
      VALIDATE("Decentral Created", AdviceOrderLine."Decentral Created");
      VALIDATE("Decentral Created Guid", AdviceOrderLine."Decentral Created Guid");

      IF updateExistingLine THEN BEGIN
        VALIDATE("Source Deleted", FALSE);
        MODIFY(TRUE);
      END ELSE BEGIN
        setLineNo();
        INSERT(TRUE);
      END;

      setExpToFSA;
    END;

    PROCEDURE DeleteFromAdvOrdLine@1100528111(AdviceOrderLine@1100528100 : Record 11012055);
    BEGIN
      IF NOT isMobileOrder(AdviceOrderLine."Service Order No.") THEN
        EXIT;
      IF NOT advOrdLineMustBeSentToMobile(AdviceOrderLine) THEN
        EXIT;

      IF NOT findAdvOrdLineCopy(AdviceOrderLine) THEN
        EXIT;

      VALIDATE(Source, Source::"Advice Order Line");
      VALIDATE("Service Order No.", AdviceOrderLine."Service Order No.");
      VALIDATE("Advice Order Line No.", AdviceOrderLine."Line No.");
      VALIDATE("Item No.", '');
      VALIDATE("Trade Item", '');
      VALIDATE("Vendor (Trade Item)", '');
      VALIDATE(Description, '');
      VALIDATE("Description 2", '');
      VALIDATE(Quantity, 0);
      VALIDATE("Unit of Measure", '');
      VALIDATE("Vendor No.", '');
      VALIDATE("Created by Employee No.", '');
      VALIDATE("Decentral Created", FALSE);
      VALIDATE("Decentral Created Guid", '');
      VALIDATE("Source Deleted", TRUE);

      MODIFY(TRUE);

      setExpToFSA;
    END;

    LOCAL PROCEDURE findAdvOrdLineCopy@1100528110(AdviceOrderLine@1100528100 : Record 11012055) : Boolean;
    BEGIN
      SETRANGE(Source, Source::"Advice Order Line");
      SETRANGE("Service Order No.", AdviceOrderLine."Service Order No.");
      SETRANGE("Advice Order Line No.", AdviceOrderLine."Line No.");
      SETCURRENTKEY(Source, "Service Order No.", "Advice Order Line No.");
      EXIT(FINDFIRST);
    END;

    PROCEDURE CreateFromItemJournal@1100528100(ItemJournalLine@1100528100 : Record 83);
    BEGIN
      IF NOT isMobileOrder(ItemJournalLine."Service Order No.") THEN
        EXIT;
      IF NOT itmJrnLnMustBeSentToMobile(ItemJournalLine) THEN
        EXIT;
      VALIDATE(Source, Source::"Item Journal");
      VALIDATE("Service Order No.", ItemJournalLine."Service Order No.");
      VALIDATE("Item No.", ItemJournalLine."Item No.");
      VALIDATE(Description, ItemJournalLine.Description);
      VALIDATE("Description 2", ItemJournalLine."Description 2");
      VALIDATE(Quantity, ItemJournalLine."Quantity to Post");
      VALIDATE("Unit of Measure", ItemJournalLine."Unit of Measure Code");
      setLineNo();
      INSERT(TRUE);
      setExpToFSA;
    END;

    PROCEDURE CreateModifyFromPurchaseLine@1100528101(PurchaseLine@1100528100 : Record 39);
    VAR
      PrevPurchaseLine@1100525000 : Record 39;
      updateExistingLine@1100528102 : Boolean;
    BEGIN
      updateExistingLine := findPurchLineCopy(PurchaseLine);
      IF (updateExistingLine) AND (PurchaseLine."Service Order No." <> "Service Order No.") THEN BEGIN
        //the service order no has been changed on the purchase line
        //now mark for delete the old Item Usage record and insert a new one below.
        PrevPurchaseLine := PurchaseLine;
        PrevPurchaseLine."Service Order No." := "Service Order No.";
        DeleteFromPurchaseLine(PrevPurchaseLine);
        updateExistingLine := FALSE;
      END;

      IF NOT isMobileOrder(PurchaseLine."Service Order No.") THEN
        EXIT;
      IF NOT purchLnMustBeSentToMobile(PurchaseLine) THEN
        EXIT;

      VALIDATE(Source, Source::"Purchase Order");
      VALIDATE("Service Order No.", PurchaseLine."Service Order No.");
      VALIDATE("Purchase Order No.", PurchaseLine."Document No.");
      VALIDATE("Purchase Order Line No.", PurchaseLine."Line No.");
      VALIDATE("Item No.", PurchaseLine."Item No.");
      VALIDATE("Vendor (Trade Item)", PurchaseLine."Vendor (Trade Item)");  //db, 27-03-14
      VALIDATE("Trade Item", PurchaseLine."Trade Item");
      //VALIDATE("Vendor (Trade Item)", PurchaseLine."Vendor (Trade Item)");
      VALIDATE(Description, PurchaseLine.Description);
      VALIDATE("Description 2", PurchaseLine."Description 2");
      VALIDATE(Quantity, PurchaseLine.Quantity);
      VALIDATE("Unit of Measure", PurchaseLine."Unit of Measure Code");
      VALIDATE("Vendor No.", PurchaseLine."Buy-from Vendor No.");
      VALIDATE("Source Deleted", FALSE); //Because it is possible that "Purchase Order Line No." is reused, or thiat flag is set to
                                          //in  DeleteFromPurchaseLine(PrevPurchaseLine) above

      IF updateExistingLine THEN BEGIN
        MODIFY(TRUE);
      END ELSE BEGIN
        setLineNo();
        INSERT(TRUE);
      END;

      setExpToFSA;
    END;

    PROCEDURE DeleteFromPurchaseLine@1100528107(PurchaseLine@1100528100 : Record 39);
    BEGIN
      IF NOT isMobileOrder(PurchaseLine."Service Order No.") THEN
        EXIT;
      IF NOT purchLnMustBeSentToMobile(PurchaseLine) THEN
        EXIT;

      IF NOT findPurchLineCopy(PurchaseLine) THEN
        EXIT;

      VALIDATE(Source, Source::"Purchase Order");
      VALIDATE("Service Order No.", PurchaseLine."Service Order No.");
      VALIDATE("Purchase Order No.", PurchaseLine."Document No.");
      VALIDATE("Purchase Order Line No.", PurchaseLine."Line No.");
      VALIDATE("Item No.", '');
      VALIDATE("Trade Item", '');
      VALIDATE("Vendor (Trade Item)", '');
      VALIDATE(Description, '');
      VALIDATE("Description 2", '');
      VALIDATE(Quantity, 0);
      VALIDATE("Unit of Measure", '');
      VALIDATE("Vendor No.", '');
      VALIDATE("Source Deleted", TRUE);

      MODIFY(TRUE);

      setExpToFSA;
    END;

    LOCAL PROCEDURE findPurchLineCopy@1100528108(PurchaseLine@1100528100 : Record 39) : Boolean;
    BEGIN
      SETRANGE(Source, Source::"Purchase Order");
      SETRANGE("Purchase Order No.", PurchaseLine."Document No.");
      SETRANGE("Purchase Order Line No.", PurchaseLine."Line No.");
      SETCURRENTKEY(Source, "Purchase Order No.", "Purchase Order Line No.");
      EXIT(FINDFIRST);
    END;

    LOCAL PROCEDURE setLineNo@1100528103();
    VAR
      FPSMobileItemUsage@1100528100 : Record 11125647;
    BEGIN
      TESTFIELD("Service Order No.");
      FPSMobileItemUsage.SETRANGE("Service Order No.", "Service Order No.");
      IF FPSMobileItemUsage.FINDLAST THEN
        "Line No." := FPSMobileItemUsage."Line No." + 10000
      ELSE
        "Line No." := 10000;
    END;

    LOCAL PROCEDURE isMobileOrder@1100528104(ServiceOrderNo@1100528100 : Code[20]) : Boolean;
    VAR
      JobSetupRec@1100528103 : Record 315;
      ServiceOrder@1100528101 : Record 11012823;
    BEGIN
      JobSetupRec.GET;
      IF NOT JobSetupRec."4PS-Mobile Active" THEN EXIT(FALSE);
      IF ServiceOrderNo = '' THEN EXIT(FALSE);
      IF NOT ServiceOrder.GET(ServiceOrderNo) THEN EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE itmJrnLnMustBeSentToMobile@1100528106(ItemJournalLine@1100528100 : Record 83) : Boolean;
    BEGIN
      EXIT (NOT (ItemJournalLine."Quantity to Post" = 0) AND
            NOT (ItemJournalLine."Origin Type Line" = ItemJournalLine."Origin Type Line"::AdviceOrderLine));
    END;

    LOCAL PROCEDURE advOrdLineMustBeSentToMobile@1100528112(AdviceOrderLine@1100528102 : Record 11012055) : Boolean;
    BEGIN
      EXIT (NOT (AdviceOrderLine."Quantity (Advice)" + AdviceOrderLine."Quantity (Processed)" = 0) AND
           (AdviceOrderLine."Record Type" = AdviceOrderLine."Record Type"::ServOrder) AND
           (NOT (AdviceOrderLine."Cost Type" = AdviceOrderLine."Cost Type"::Subcontracting)));
    END;

    LOCAL PROCEDURE purchLnMustBeSentToMobile@1100528102(PurchaseLine@1100528100 : Record 39) : Boolean;
    VAR
      PurchaseLineExtension@1100528101 : Record 11020644;
    BEGIN
      IF (PurchaseLine.Quantity = 0) OR
          NOT (PurchaseLine."Document Type" = PurchaseLine."Document Type"::Order) THEN
        EXIT(FALSE);
      IF PurchaseLineExtension.GET(PurchaseLine."Document Type", PurchaseLine."Document No.", PurchaseLine."Line No.") THEN
        IF PurchaseLineExtension."Source Advice Order" THEN
          EXIT(FALSE); //Because Advice Order Line are sent to mobile seperatly
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE setExpToFSA@1100528105();
    VAR
      WorkOrder@1100528100 : Record 11229279;
    BEGIN
      TESTFIELD("Service Order No.");
      //DP00465.so
      //EmployeeByServiceOrder.SETRANGE(Type, EmployeeByServiceOrder.Type::Order);
      //EmployeeByServiceOrder.SETRANGE("No.", "Service Order No.");
      //EmployeeByServiceOrder.SETRANGE("Actual Service Status", '20', '60');
      //EmployeeByServiceOrder.SETRANGE("Active in FSA", TRUE);
      //EmployeeByServiceOrder.SETRANGE("Export Item Usage to FSA", FALSE);
      //IF NOT EmployeeByServiceOrder.ISEMPTY THEN
      //  EmployeeByServiceOrder.MODIFYALL("Export Item Usage to FSA", TRUE, TRUE);
      //DP00465.eo

      //DP00465.n
      WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.", "Service Order No.");
      WorkOrder.SETRANGE("Actual Field Service Status", '20', '60');
      WorkOrder.SETRANGE("Active in FSA", TRUE);
      WorkOrder.SETRANGE("Export Item Usage to FSA", FALSE);
      WorkOrder.MODIFYALL("Export Item Usage to FSA", TRUE);
    END;

    PROCEDURE GenerateItemUsageForOrder@1100525003(serviceOrderNo@1100525000 : Code[20]);
    BEGIN
      generateItemUsageForPurchOrder(serviceOrderNo);
      generateItemUsageForAdvOrder(serviceOrderNo);
      generateItemUsageForItemJnl(serviceOrderNo);
    END;

    LOCAL PROCEDURE generateItemUsageForPurchOrder@1100525000(serviceOrderNo@1100525000 : Code[20]);
    VAR
      PurchaseLine@1100525001 : Record 39;
    BEGIN
      PurchaseLine.SETCURRENTKEY("Service Order No.");
      PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Service Order No.", serviceOrderNo);
      IF PurchaseLine.FINDFIRST THEN
        REPEAT
          CreateModifyFromPurchaseLine(PurchaseLine);
        UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE generateItemUsageForAdvOrder@1100525001(serviceOrderNo@1100525000 : Code[20]);
    VAR
      AdviceOrderLine@1100525003 : Record 11012055;
    BEGIN
      AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::ServOrder);
      AdviceOrderLine.SETFILTER("Project No.", '=%1', '');
      AdviceOrderLine.SETRANGE("Service Order No.", serviceOrderNo);
      IF AdviceOrderLine.FINDFIRST THEN
        REPEAT
          CreateModifyFromAdvOrdLine(AdviceOrderLine);
        UNTIL AdviceOrderLine.NEXT = 0;
    END;

    LOCAL PROCEDURE generateItemUsageForItemJnl@1100525002(serviceOrderNo@1100525000 : Code[20]);
    VAR
      ItemJournalLine@1100525002 : Record 83;
    BEGIN
      ItemJournalLine.SETCURRENTKEY("Service Order No.");
      ItemJournalLine.SETRANGE("Service Order No.", serviceOrderNo);
      IF ItemJournalLine.FINDFIRST THEN
        REPEAT
          CreateFromItemJournal(ItemJournalLine);
        UNTIL ItemJournalLine.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

