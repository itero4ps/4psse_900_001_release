OBJECT Table 11125680 Estimate Line (RAW)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               EstimateElementRAW@1100525000 : Record 11125679;
               EstimateElementRAW2@1100525002 : Record 11125679;
               EstimateElementRAW3@1100525003 : Record 11125679;
               EstimateLineRAW@1100525001 : Record 11125680;
               SaveDesc@1210190000 : Text[250];
             BEGIN
               Estimate.GET("Estimate No.");
               CheckEstLineAllowedForPercElements();  //C026965

               IF (NOT MessageAlreadyShown) THEN BEGIN
                 IF STRLEN("Element No.") = 6 THEN BEGIN
                   // Find corresponding estimate element
                   EstimateElementRAW.SETCURRENTKEY("Estimate No.", "Element No.", "Construction Spec. Line No.");
                   EstimateElementRAW.SETRANGE("Estimate No.", "Estimate No.");
                   EstimateElementRAW.SETRANGE("Element No.", "Element No.");
                   EstimateElementRAW.SETRANGE("Construction Spec. Line No.", '00');
                   EstimateElementRAW.FINDFIRST;

                   CASE EstimateElementRAW.Type OF
                     EstimateElementRAW.Type::"Commitment (Main Line)":
                       // User is adding an estimate line for a commitment; check for commitment description estimate elements
                       BEGIN
                         EstimateElementRAW3.SETCURRENTKEY("Estimate No.", "Element No.", "Construction Spec. Line No.");
                         EstimateElementRAW3.SETRANGE("Estimate No.", "Estimate No.");
                         EstimateElementRAW3.SETFILTER(
                           "Element No.",
                           '%1..%2',
                           COPYSTR("Element No.", 1, 5) + '1',
                           COPYSTR("Element No.", 1, 5) + '9');
                         EstimateElementRAW3.SETRANGE("Construction Spec. Line No.", '00');
                         IF EstimateElementRAW3.FINDFIRST THEN BEGIN
                           MESSAGE(
                             Text021,
                             TABLECAPTION,
                             EstimateElementRAW.TABLECAPTION,
                             EstimateElementRAW.FIELDCAPTION(Type),
                             EstimateElementRAW.Type,
                             EstimateElementRAW3.Type);
                           MessageAlreadyShown := ShowMessageOnce;
                         END;
                       END;
                     EstimateElementRAW.Type::"Commitment Description (Main Line)":
                       // User is adding an estimate line for a commitment description; check for commitment estimate lines
                       BEGIN
                         EstimateLineRAW.SETRANGE("Estimate No.", "Estimate No.");
                         EstimateLineRAW.SETRANGE("Element No.", COPYSTR("Element No.", 1, 5) + '0');
                         IF NOT EstimateLineRAW.ISEMPTY THEN BEGIN
                           EstimateElementRAW2.Type := EstimateElementRAW2.Type::"Commitment (Main Line)";
                           MESSAGE(
                             Text020,
                             TABLECAPTION,
                             EstimateElementRAW.TABLECAPTION,
                             EstimateElementRAW.FIELDCAPTION(Type),
                             EstimateElementRAW.Type,
                             EstimateElementRAW2.Type);
                           MessageAlreadyShown := ShowMessageOnce;
                         END;
                       END;
                   END;
                 END;
               END;

               IF "Recipe No." = '' THEN BEGIN
                 IF "Rate Code" = '' THEN
                   "Rate Code" := Estimate."Rate Code";
                 xRec."Rate Type" := "Rate Type";  //disable function ConvertNorm by next validate
                 xRec."Team Size" := "Team Size";
                 SaveDesc := Description;
                 VALIDATE("Rate Code");            //get actual rate (if copied from old template)
                 Description := SaveDesc;
                 DetermineNormGroup;
               END;

               IF "VAT Prod. Posting Group" = '' THEN
                 VALIDATE("VAT Prod. Posting Group", Estimate."VAT Prod. Posting Group (H)");  //ISS

               InitAdjustmentFactor;
               IF Quantity <> 0 THEN
                 VALIDATE(Quantity);  //if Ctrl C+V used, force update hours based on adjustment factor

               "Price Agreement" := FALSE;
               "Norm Agreement" := FALSE;
               "Subcontracting Agreement" := FALSE;
               "Plant Agreement" := FALSE;

               InitPurchaseFields();
               InsertSurcharge;//DP00433
             END;

    OnModify=BEGIN
               TESTFIELD("Summary Line", FALSE);  //ISS

               IF NOT SkipUpdateLogBook THEN
                 Estimate.UpdateLogbook("Estimate No.");
             END;

    OnDelete=VAR
               EstimateLineRAW@1210190000 : Record 11125680;
               CommentLineRAW@1100525000 : Record 11125684;
             BEGIN
               IF NOT SkipUpdateLogBook THEN
                 Estimate.UpdateLogbook("Estimate No.");

               IF "Line No." <> 0 THEN BEGIN   //when line no.=0 Navision will be closed; error possible as a result of import
                 IF ("Recipe Type" = "Recipe Type"::"Recipe Header") AND ("Recipe No." <> '') THEN BEGIN
                   EstimateLineRAW.SETRANGE("Estimate No.", "Estimate No.");
                   EstimateLineRAW.SETRANGE("Element No.", "Element No.");
                   EstimateLineRAW.SETRANGE("Attached to Recipe Line", "Line No.");
                   EstimateLineRAW.DELETEALL(TRUE);
                 END;
               END;

               CommentLineRAW.DeleteEstimateLineComment("Estimate No.", "Element No.", "Line No.");  //DP01086.n
             END;

    CaptionML=ENU=Estimate Line (RAW);
    DrillDownPageID=Page11125685;
  }
  FIELDS
  {
    { 10  ;   ;Estimate No.        ;Code20        ;TableRelation=Estimate;
                                                   CaptionML=ENU=Estimate No. }
    { 15  ;   ;Element No.         ;Code6         ;TableRelation="Estimate Element (RAW)"."Element No." WHERE (Estimate No.=FIELD(Estimate No.));
                                                   OnValidate=VAR
                                                                EstimateElementRAW@1100525000 : Record 11125679;
                                                              BEGIN
                                                                EstimateElementRAW.SETCURRENTKEY("Estimate No.", "Element No.", "Construction Spec. Line No.");
                                                                EstimateElementRAW.SETRANGE("Estimate No.", "Estimate No.");
                                                                EstimateElementRAW.SETRANGE("Element No.", "Element No.");
                                                                EstimateElementRAW.SETRANGE("Construction Spec. Line No.", '00');

                                                                IF NOT EstimateElementRAW.FINDFIRST THEN
                                                                  EstimateElementRAW.INIT;

                                                                VALIDATE("Part Quantity", EstimateElementRAW.Quantity);
                                                                "Surcharge % Labor" := EstimateElementRAW."Surcharge % Labor";
                                                                "Surcharge % Material" := EstimateElementRAW."Surcharge % Material";
                                                                "Surcharge % Subcontracting" := EstimateElementRAW."Surcharge % Subcontracting";
                                                                "Surcharge % Plant" := EstimateElementRAW."Surcharge % Plant";
                                                              END;

                                                   CaptionML=ENU=Element No. }
    { 20  ;   ;Estimate Description;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Estimate.Description WHERE (No.=FIELD(Estimate No.)));
                                                   CaptionML=ENU=Estimate Description;
                                                   Editable=No }
    { 65  ;   ;Recipe Group        ;Code10        ;TableRelation="Recipe Group";
                                                   CaptionML=ENU=Recipe Group;
                                                   Editable=No }
    { 70  ;   ;Recipe No.          ;Code20        ;TableRelation="Base Recipe".No. WHERE (Recipe Group=FIELD(Recipe Group));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Recipe No.;
                                                   Editable=No }
    { 80  ;   ;Line No.            ;Integer       ;ValidateTableRelation=No;
                                                   CaptionML=ENU=Line No. }
    { 87  ;   ;Line Level          ;Integer       ;CaptionML=ENU=Line Level }
    { 90  ;   ;Set Code            ;Code10        ;TableRelation="Plant Set";
                                                   OnValidate=VAR
                                                                PlantSet@1100525000 : Record 11012587;
                                                              BEGIN
                                                                IF NOT PlantSet.GET("Set Code") THEN
                                                                  PlantSet.INIT;
                                                                Description := PlantSet.Description;
                                                                "Unit of Measure" := PlantSet."Unit of Measure";
                                                              END;

                                                   CaptionML=ENU=Set Code }
    { 100 ;   ;Description         ;Text100       ;OnValidate=BEGIN
                                                                UpdateEst.CheckBackSlash(Description);
                                                              END;

                                                   CaptionML=ENU=Description }
    { 105 ;   ;Source              ;Option        ;CaptionML=ENU=Source;
                                                   OptionCaptionML=ENU=User,Recipe,,,Summary;
                                                   OptionString=User,Recipe,,,Summary;
                                                   Editable=No }
    { 110 ;   ;Time Quantity       ;Decimal       ;InitValue=1;
                                                   OnValidate=BEGIN
                                                                UpdateCumulativeQty;
                                                              END;

                                                   CaptionML=ENU=Time Quantity;
                                                   BlankZero=Yes }
    { 120 ;   ;Unit of Time        ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=ENU=Unit of Time }
    { 140 ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                //VALIDATE("Part Quantity");

                                                                IF xRec.Quantity = 0 THEN
                                                                  EstimateMgmt.SetQuantityRatio(1)
                                                                ELSE
                                                                  EstimateMgmt.SetQuantityRatio(Quantity / xRec.Quantity);

                                                                UpdateCumulativeQty;

                                                                IF CurrFieldNo = FIELDNO(Quantity) THEN
                                                                  CheckRecipeTotals;  //X001
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF EnterQuantity(4) THEN
                                                                EditQuanSheet;
                                                            END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 150 ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Unit of Measure") THEN BEGIN
                                                                  IF "Unit of Measure" <>  xRec."Unit of Measure" THEN
                                                                    CheckItemUnitConversion(Rec, xRec);
                                                                  CalculateTotals;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;
                                                            END;

                                                   CaptionML=ENU=Unit of Measure }
    { 155 ;   ;Norm Group          ;Code10        ;TableRelation="Norm Group".Code;
                                                   OnValidate=BEGIN
                                                                DetermineNorm;
                                                              END;

                                                   CaptionML=ENU=Norm Group }
    { 157 ;   ;Sub Operation Code  ;Code20        ;TableRelation="Sub Operation".Code;
                                                   OnValidate=VAR
                                                                SubOperRec@11012000 : Record 11012166;
                                                                OperRec@11012001 : Record 11012165;
                                                              BEGIN
                                                                DetermineNormGroup;
                                                                DetermineNorm;

                                                                IF SubOperRec.GET("Sub Operation Code") THEN BEGIN
                                                                  IF OperRec.GET(SubOperRec.Operation) THEN BEGIN
                                                                    IF ("Cost Object Labor" = '') OR (OldSubOperationDefault = TRUE) THEN BEGIN
                                                                      VALIDATE("Cost Object Labor", OperRec."Cost Object");
                                                                      CheckCostObject("Cost Object Labor",FALSE);
                                                                    END;
                                                                    IF OperRec."Rate Code" <> '' THEN
                                                                      VALIDATE("Rate Code", OperRec."Rate Code");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Sub Operation Code }
    { 160 ;   ;Norm                ;Decimal       ;OnValidate=BEGIN
                                                                Norm := ROUND(Norm, 0.00001);  //??

                                                                IF CurrFieldNo <> FIELDNO("Production Rate") THEN
                                                                  IF Norm <> 0 THEN
                                                                    "Production Rate" := 1 / Norm
                                                                  ELSE
                                                                    "Production Rate" := 0;

                                                                CalculateTotals;  //db, 24-09-12: norm and production rate used to calculate hours
                                                              END;

                                                   CaptionML=ENU=Norm;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 165 ;   ;Production Rate     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Production Rate" <> 0 THEN
                                                                  VALIDATE(Norm, 1 / "Production Rate")
                                                                ELSE
                                                                  VALIDATE(Norm,1);
                                                              END;

                                                   CaptionML=ENU=Production Rate;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 170 ;   ;Rate Code           ;Code10        ;TableRelation="Estimate Rate"."Rate Code" WHERE (Estimate No.=FIELD(Estimate No.));
                                                   OnValidate=BEGIN
                                                                EstSetup.GET;
                                                                IF RateRec.GET("Estimate No.","Rate Code") THEN BEGIN
                                                                  IF "Cost Object Labor" = '' THEN
                                                                    "Cost Object Labor" := RateRec."Cost Object";
                                                                  IF EstSetup."Rates Based On" = EstSetup."Rates Based On"::"Budget Rate" THEN
                                                                    IF RateRec."Cost Object" <> '' THEN
                                                                      "Cost Object Labor" := RateRec."Cost Object";
                                                                  IF "Plant Type" + "Item No." + "Basic Item" + "Trade Item" = '' THEN
                                                                    Description := RateRec.Description;
                                                                  Rate := RateRec."Cost Rate";
                                                                  "Rate Type" := RateRec."Rate Type";
                                                                  IF "Rate Type" = "Rate Type"::Minutes THEN
                                                                    "Team Size" := RateRec."Team Size"
                                                                  ELSE
                                                                    "Team Size" := 0;
                                                                  //check conversion norm after change of rate type and team size:
                                                                  IF ("Rate Type" <> xRec."Rate Type") OR ("Team Size" <> xRec."Team Size") THEN
                                                                    ConvertNorm(("Rate Type" <> xRec."Rate Type"), ("Team Size" <> xRec."Team Size"));
                                                                END ELSE BEGIN
                                                                  IF "Sub Operation Code" <> '' THEN
                                                                    TESTFIELD("Rate Code");
                                                                  Norm := 0;
                                                                  "Production Rate" := 0;
                                                                  Rate := 0;
                                                                  CLEAR("Rate Type");
                                                                  "Team Size" := 0;
                                                                END;
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Rate Code }
    { 180 ;   ;Rate                ;Decimal       ;CaptionML=ENU=Rate;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 190 ;   ;Material Price      ;Decimal       ;OnValidate=BEGIN
                                                                IF "Material Price" <> 0 THEN
                                                                IF EstimateMgmt.CostTypeEstLineRAWIsPlant(Rec) THEN BEGIN
                                                                    ChkFieldsEmpty(2); //BuyBack
                                                                    ChkFieldsEmpty(3); //Discount
                                                                END;
                                                                CalculateDiscount;
                                                                EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",0,"Material Price","Buy Back Price","Buy Back %");
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Material Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 200 ;   ;Subcontracting Price;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Subcontracting Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 210 ;   ;Plant Price         ;Decimal       ;OnValidate=BEGIN
                                                                IF "Plant Price" <> 0 THEN
                                                                IF EstimateMgmt.CostTypeEstLineRAWIsMat(Rec) THEN BEGIN
                                                                    ChkFieldsEmpty(2); //BuyBack
                                                                    ChkFieldsEmpty(3); //Discount
                                                                END;
                                                                CalculateDiscount;
                                                                EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",0,"Plant Price","Buy Back Price","Buy Back %");
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Plant Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 211 ;   ;Buy Back Price      ;Decimal       ;OnValidate=BEGIN
                                                                IF "Buy Back Price" <> 0 THEN
                                                                IF EstimateMgmt.CostTypeEstLineRAWIsMat(Rec) = EstimateMgmt.CostTypeEstLineRAWIsPlant(Rec) THEN
                                                                  ERROR(Text010);

                                                                IF EstimateMgmt.CostTypeEstLineRAWIsMat(Rec) THEN
                                                                  EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",1,"Material Price","Buy Back Price","Buy Back %")
                                                                ELSE
                                                                  EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",1,"Plant Price","Buy Back Price","Buy Back %");
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Buy Back Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 214 ;   ;Buy Back %          ;Decimal       ;OnValidate=BEGIN
                                                                IF "Buy Back %" <> 0 THEN
                                                                  IF EstimateMgmt.CostTypeEstLineRAWIsMat(Rec) = EstimateMgmt.CostTypeEstLineRAWIsPlant(Rec) THEN
                                                                    ERROR(Text010);

                                                                IF EstimateMgmt.CostTypeEstLineRAWIsMat(Rec) THEN
                                                                  EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",2,"Material Price","Buy Back Price","Buy Back %")
                                                                ELSE
                                                                  EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",2,"Plant Price","Buy Back Price","Buy Back %");
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Buy Back %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 220 ;   ;Hours               ;Decimal       ;CaptionML=ENU=Hours;
                                                   DecimalPlaces=2:;
                                                   Editable=No }
    { 230 ;   ;Labor Amount        ;Decimal       ;CaptionML=ENU=Labor Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 240 ;   ;Material Amount     ;Decimal       ;CaptionML=ENU=Material Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 241 ;   ;Gross Amount        ;Decimal       ;CaptionML=ENU=Gross Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 250 ;   ;Subcontracting Amount;Decimal      ;CaptionML=ENU=Subcontracting Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 260 ;   ;Plant Amount        ;Decimal       ;CaptionML=ENU=Plant Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 261 ;   ;Buy Back Amount     ;Decimal       ;CaptionML=ENU=Buy Back Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 270 ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 280 ;   ;Project No.         ;Code20        ;TableRelation=Job;
                                                   OnValidate=BEGIN
                                                                UpdateProjElem(0);
                                                              END;

                                                   CaptionML=ENU=Project No. }
    { 290 ;   ;Element             ;Code20        ;TableRelation="Base Element";
                                                   OnValidate=BEGIN
                                                                FormatMgt.FormatElem(Element,2,'');
                                                                IF Element <> '' THEN
                                                                  IF "Project No." <> '' THEN BEGIN
                                                                    IF NOT ProjElemRec.GET("Project No.", Element) THEN
                                                                      ElemRec.GET(Element);
                                                                  END ELSE
                                                                    ElemRec.GET(Element);

                                                                UpdateProjElem(1);
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF "Project No." <> '' THEN BEGIN
                                                                ProjElemRec.SETRANGE("Project No.", "Project No.");
                                                                ProjElemRec.Element := Element;
                                                                IF PAGE.RUNMODAL(PAGE::"Project Element List", ProjElemRec) = ACTION::LookupOK THEN
                                                                  VALIDATE(Element, ProjElemRec.Element);
                                                              END ELSE BEGIN
                                                                ElemRec.Code := Element;
                                                                IF PAGE.RUNMODAL(PAGE::Elements, ElemRec) = ACTION::LookupOK THEN
                                                                  VALIDATE(Element, ElemRec.Code);
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 480 ;   ;Cost Object Labor   ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Labor),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                UpdateSurchargePct; //DP00433
                                                              END;

                                                   CaptionML=ENU=Cost Object Labor }
    { 490 ;   ;Cost Object Material;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Material),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                EstSetup.GET;
                                                                IF EstSetup."Default Purchase Action" THEN BEGIN
                                                                  IF "Cost Object Material" <> '' THEN
                                                                    IF xRec."Cost Object Material" = '' THEN
                                                                      GetDefaultsCostObject(gvCostType::Material, "Cost Object Material" )
                                                                    ELSE
                                                                      IF "Cost Object Material" <> xRec."Cost Object Material" THEN
                                                                        IF "Item No." + "Basic Item" + "Trade Item" = '' THEN
                                                                          IF CONFIRM(Text008 + Text009) THEN
                                                                            GetDefaultsCostObject(gvCostType::Material, "Cost Object Material" );
                                                                END;
                                                                UpdateSurchargePct; //DP00433
                                                              END;

                                                   CaptionML=ENU=Cost Object Material }
    { 500 ;   ;Cost Object Subcontracting;Code20  ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Subcontracting),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                EstSetup.GET;
                                                                IF EstSetup."Default Purchase Action" THEN BEGIN
                                                                  IF "Cost Object Subcontracting" <> '' THEN
                                                                    IF xRec."Cost Object Subcontracting" = '' THEN
                                                                      GetDefaultsCostObject(gvCostType::Subcontracting, "Cost Object Subcontracting" )
                                                                    ELSE
                                                                      IF "Cost Object Subcontracting" <> xRec."Cost Object Subcontracting" THEN
                                                                          IF CONFIRM(Text008 + Text009) THEN
                                                                            GetDefaultsCostObject(gvCostType::Subcontracting, "Cost Object Subcontracting");
                                                                END;
                                                                UpdateSurchargePct; //DP00433
                                                              END;

                                                   CaptionML=ENU=Cost Object Subcontracting }
    { 510 ;   ;Cost Object Plant   ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Plant),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                EstSetup.GET;
                                                                IF EstSetup."Default Purchase Action" THEN BEGIN
                                                                  IF "Cost Object Plant" <> '' THEN
                                                                    IF xRec."Cost Object Plant" = '' THEN
                                                                      GetDefaultsCostObject(gvCostType::Plant, "Cost Object Plant")
                                                                    ELSE
                                                                      IF "Cost Object Plant" <> xRec."Cost Object Plant" THEN
                                                                          IF CONFIRM(Text008 + Text009) THEN
                                                                            GetDefaultsCostObject(gvCostType::Plant, "Cost Object Plant");
                                                                END;
                                                                UpdateSurchargePct; //DP00433
                                                              END;

                                                   CaptionML=ENU=Cost Object Plant }
    { 520 ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." <> '') THEN BEGIN
                                                                  ClearFields(1); //Plant
                                                                  Estimate.GET("Estimate No.");
                                                                  ValidateItem(ItemTypeOpt::Item, Estimate, TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 530 ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN BEGIN
                                                                  Estimate.GET("Estimate No.");
                                                                  ValidateItem(ItemTypeOpt::"Basic Item", Estimate, TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Basic Item }
    { 531 ;   ;Item Type           ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Type" WHERE (Product Code=FIELD(Basic Item),
                                                                                                      Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Type;
                                                   Editable=No }
    { 532 ;   ;Item Brand          ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Brand" WHERE (Product Code=FIELD(Basic Item),
                                                                                                       Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Brand;
                                                   Editable=No }
    { 533 ;   ;Item Series         ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Series" WHERE (Product Code=FIELD(Basic Item),
                                                                                                        Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Series;
                                                   Editable=No }
    { 540 ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN BEGIN
                                                                  Estimate.GET("Estimate No.");
                                                                  ValidateItem(ItemTypeOpt::"Trade Item", Estimate, TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Trade Item }
    { 560 ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=VAR
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") AND ("Vendor (Trade Item)" <> '') THEN BEGIN
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF lvExecValidate THEN BEGIN
                                                                    Estimate.GET("Estimate No.");
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item", Estimate, TRUE)
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor", Estimate, TRUE);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 570 ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Manufacturer }
    { 580 ;   ;Gross Price         ;Decimal       ;OnValidate=BEGIN
                                                                CalculateNettPrice;
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Gross Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 588 ;   ;Purchase Discount % ;Decimal       ;CaptionML=ENU=Purchase Discount %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 589 ;   ;Sales Discount %    ;Decimal       ;CaptionML=ENU=Sales Discount %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 590 ;   ;Discount %          ;Decimal       ;OnValidate=BEGIN
                                                                CalculateNettPrice;
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Discount %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 600 ;   ;Price Reference Date;Date          ;CaptionML=ENU=Price Reference Date;
                                                   Editable=No }
    { 610 ;   ;Part Quantity       ;Decimal       ;OnValidate=VAR
                                                                DummyFieldNo@1100529000 : Integer;
                                                              BEGIN
                                                                IF IsEstimateLineForPercentage(DummyFieldNo) THEN BEGIN  //C026965
                                                                  "Ignore Part Quantity" := TRUE;
                                                                  "Part Quantity" := 1;
                                                                END;
                                                                UpdateCumulativeQty;
                                                              END;

                                                   CaptionML=ENU=Part Quantity;
                                                   Editable=No }
    { 620 ;   ;Cumulative Hours    ;Decimal       ;CaptionML=ENU=Cumulative Hours;
                                                   Editable=No }
    { 630 ;   ;Cumulative Labor    ;Decimal       ;CaptionML=ENU=Cumulative Labor;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 640 ;   ;Cumulative Material ;Decimal       ;CaptionML=ENU=Cumulative Material;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 641 ;   ;Cumulative Gross Price;Decimal     ;CaptionML=ENU=Cumulative Gross Price;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 650 ;   ;Cumulative Subcontracting;Decimal  ;CaptionML=ENU=Cumulative Subcontracting;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 660 ;   ;Cumulative Plant    ;Decimal       ;CaptionML=ENU=Cumulative Plant;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 661 ;   ;Cumulative Buy Back ;Decimal       ;CaptionML=ENU=Cumulative Buy Back;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 670 ;   ;Cumulative Total    ;Decimal       ;CaptionML=ENU=Cumulative Total;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 671 ;   ;Cumulative Weight   ;Decimal       ;CaptionML=ENU=Cumulative Weight;
                                                   DecimalPlaces=0:2 }
    { 680 ;   ;Line Status         ;Code10        ;TableRelation="Line Status".Status;
                                                   CaptionML=ENU=Line Status }
    { 690 ;   ;External Text Block ;Boolean       ;CaptionML=ENU=External Text Block;
                                                   Editable=No }
    { 691 ;   ;Internal Text Block ;Boolean       ;CaptionML=ENU=Internal Text Block;
                                                   Editable=No }
    { 700 ;   ;Rate Type           ;Option        ;CaptionML=ENU=Rate Type;
                                                   OptionCaptionML=ENU=Hours,Minutes;
                                                   OptionString=Hours,Minutes;
                                                   Editable=No }
    { 710 ;   ;Team Size           ;Decimal       ;CaptionML=ENU=Team Size;
                                                   Editable=No }
    { 720 ;   ;Length              ;Decimal       ;OnValidate=BEGIN
                                                                CalculateQuantity;
                                                              END;

                                                   CaptionML=ENU=Length;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   CaptionClass='11125666,1' }
    { 730 ;   ;Width               ;Decimal       ;OnValidate=BEGIN
                                                                CalculateQuantity;
                                                              END;

                                                   CaptionML=ENU=Width;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   CaptionClass='11125666,2' }
    { 735 ;   ;Height              ;Decimal       ;OnValidate=BEGIN
                                                                CalculateQuantity;
                                                              END;

                                                   CaptionML=ENU=Height;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   CaptionClass='11125666,3' }
    { 740 ;   ;External Text       ;Text250       ;OnValidate=BEGIN
                                                                "External Text Block" := "External Text" <> '';
                                                              END;

                                                   CaptionML=ENU=External Text }
    { 741 ;   ;Internal Text       ;Text250       ;OnValidate=BEGIN
                                                                "Internal Text Block" := "Internal Text" <> '';
                                                              END;

                                                   CaptionML=ENU=Internal Text }
    { 750 ;   ;Volume              ;Decimal       ;CaptionML=ENU=Volume;
                                                   DecimalPlaces=2:;
                                                   Editable=No }
    { 755 ;   ;Weight              ;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 756 ;   ;Total Weight        ;Decimal       ;CaptionML=ENU=Total Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 760 ;   ;Uncoded Labor       ;Boolean       ;CaptionML=ENU=Uncoded Labor;
                                                   Editable=No }
    { 761 ;   ;Uncoded Material    ;Boolean       ;CaptionML=ENU=Uncoded Material;
                                                   Editable=No }
    { 762 ;   ;Uncoded Subcontracting;Boolean     ;CaptionML=ENU=Uncoded Subcontracting;
                                                   Editable=No }
    { 764 ;   ;Uncoded Plant       ;Boolean       ;CaptionML=ENU=Uncoded Plant;
                                                   Editable=No }
    { 765 ;   ;Uncoded Line        ;Boolean       ;CaptionML=ENU=Uncoded Line;
                                                   Editable=No }
    { 770 ;   ;Adjustment Factor Hours;Decimal    ;OnValidate=BEGIN
                                                                ProcessAdjustmentFactor(1);
                                                              END;

                                                   CaptionML=ENU=Hours Adjustment Factor;
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 771 ;   ;Adjustment Factor Material;Decimal ;OnValidate=BEGIN
                                                                ProcessAdjustmentFactor(2);
                                                              END;

                                                   CaptionML=ENU=Material Adjustment Factor;
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 772 ;   ;Adjustment Factor Subcontr.;Decimal;OnValidate=BEGIN
                                                                ProcessAdjustmentFactor(3);
                                                              END;

                                                   CaptionML=ENU=Subcontr. Adjustment Factor;
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 773 ;   ;Adjustment Factor Plant;Decimal    ;OnValidate=BEGIN
                                                                ProcessAdjustmentFactor(4);
                                                              END;

                                                   CaptionML=ENU=Plant Adjustment Factor;
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 775 ;   ;Cum. Adj. Factor Hours;Decimal     ;CaptionML=ENU=Hours Cum. Adj. Factor;
                                                   DecimalPlaces=0:6 }
    { 776 ;   ;Cum. Adj. Factor Material;Decimal  ;CaptionML=ENU=Material Cum. Adj. Factor;
                                                   DecimalPlaces=0:6 }
    { 777 ;   ;Cum. Adj. Factor Subcontr.;Decimal ;CaptionML=ENU=Subcontr. Cum. Adj. Factor;
                                                   DecimalPlaces=0:6 }
    { 778 ;   ;Cum. Adj. Factor Plant;Decimal     ;CaptionML=ENU=Plant Cum. Adj. Factor;
                                                   DecimalPlaces=0:6 }
    { 780 ;   ;Ask for Quote       ;Boolean       ;OnValidate=BEGIN
                                                                IF "Ask for Quote" THEN BEGIN
                                                                  IF (("Material Price" = 0) AND ("Cost Object Material" = '')) AND
                                                                     (("Subcontracting Price" = 0) AND ("Cost Object Subcontracting" = '')) AND
                                                                     (("Plant Price" = 0) AND ("Cost Object Plant" = '')) THEN BEGIN
                                                                    "Ask for Quote" := FALSE;
                                                                    IF CurrFieldNo <> 0 THEN
                                                                      FIELDERROR("Ask for Quote", Text002);
                                                                  END ELSE BEGIN
                                                                    IF ( (("Material Price" <> 0) OR ("Cost Object Material" <> '')) AND
                                                                         (("Subcontracting Price" <> 0) OR ("Cost Object Subcontracting" <> '')) ) OR
                                                                       ( (("Material Price" <> 0) OR ("Cost Object Material" <> '')) AND
                                                                         (("Plant Price" <> 0) OR ("Cost Object Plant" <> '')) ) OR
                                                                       ( (("Subcontracting Price" <> 0) OR ("Cost Object Subcontracting" <> '')) AND
                                                                         (("Plant Price" <> 0) OR ("Cost Object Plant" <> '')) ) THEN BEGIN
                                                                      "Ask for Quote" := FALSE;
                                                                      IF CurrFieldNo <> 0 THEN
                                                                        FIELDERROR("Ask for Quote", Text003);
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Ask for Quote }
    { 790 ;   ;Purchase Route Reference;Code20    ;OnLookup=VAR
                                                              lvRouteRefMgtCU@1210190000 : Codeunit 11012045;
                                                            BEGIN
                                                              lvRouteRefMgtCU.ShowReferenceList("Purchase Route Reference");
                                                            END;

                                                   CaptionML=ENU=Purchase Route Reference;
                                                   Editable=No }
    { 800 ;   ;Document No.        ;Code20        ;TableRelation="Document Properties";
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Document No. }
    { 820 ;   ;Price Agreement     ;Boolean       ;CaptionML=ENU=Price Agreement }
    { 821 ;   ;Norm Agreement      ;Boolean       ;CaptionML=ENU=Norm Agreement }
    { 822 ;   ;Subcontracting Agreement;Boolean   ;CaptionML=ENU=Subcontracting Agreement }
    { 823 ;   ;Plant Agreement     ;Boolean       ;CaptionML=ENU=Plant Agreement }
    { 830 ;   ;Vendor              ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Vendor }
    { 831 ;   ;Vendor Name         ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Vendor)));
                                                   CaptionML=ENU=Vendor Name;
                                                   Editable=No }
    { 840 ;   ;Condition           ;Code10        ;TableRelation=Condition.Code;
                                                   CaptionML=ENU=Condition;
                                                   Editable=No }
    { 850 ;   ;Removal Contribution;Boolean       ;CaptionML=ENU=Removal Contribution }
    { 860 ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   OnValidate=BEGIN
                                                                CalculateTotals;//DP00433
                                                              END;

                                                   CaptionML=ENU=Cost Component }
    { 870 ;   ;Discipline          ;Code10        ;TableRelation=Discipline;
                                                   CaptionML=ENU=Discipline }
    { 871 ;   ;Trade Speciality    ;Code10        ;TableRelation="Trade Speciality".Code WHERE (Discipline=FIELD(Discipline));
                                                   CaptionML=ENU=Trade Speciality }
    { 872 ;   ;Trade Expertise     ;Code10        ;TableRelation="Trade Expertise";
                                                   OnValidate=BEGIN
                                                                TradeExpRec.GetRelatedValue(Discipline, "Trade Speciality", "Trade Expertise");
                                                              END;

                                                   CaptionML=ENU=Trade Expertise }
    { 880 ;   ;Maintenance Interval;DateFormula   ;OnValidate=BEGIN
                                                                VALIDATE("Time Quantity",EstimateMgmt.ConvPeriodToTimesPerYear("Maintenance Interval"));
                                                              END;

                                                   CaptionML=ENU=Maintenance Interval }
    { 885 ;   ;Maintenance Relation;Code20        ;CaptionML=ENU=Maintenance Relation }
    { 890 ;   ;Subcontractor       ;Code20        ;TableRelation=Vendor.No. WHERE (Subcontractor=CONST(Yes));
                                                   CaptionML=ENU=Subcontractor }
    { 891 ;   ;Subcontractor Name  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Subcontractor)));
                                                   CaptionML=ENU=Subcontractor Name;
                                                   Editable=No }
    { 892 ;   ;Scheme Code         ;Code15        ;CaptionML=ENU=Scheme Code }
    { 893 ;   ;Comments            ;Text50        ;CaptionML=ENU=Comment }
    { 894 ;   ;Supply              ;Boolean       ;CaptionML=ENU=Supply }
    { 895 ;   ;Comments for Logistics;Text50      ;CaptionML=ENU=Comments for Logistics }
    { 896 ;   ;Material Sheet      ;Option        ;CaptionML=ENU=Material Sheet;
                                                   OptionCaptionML=ENU=Customer and Assemly,Customer Only,Assembly only,Do not report;
                                                   OptionString=Customer and Assemly,Customer Only,Assembly only,Do not report }
    { 897 ;   ;E-Plan Item         ;Code25        ;TableRelation="E-Plan Item".No.;
                                                   CaptionML=ENU=E-Plan Item;
                                                   Editable=No }
    { 920 ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   OnValidate=BEGIN
                                                                IF ("Plant Type" <> xRec."Plant Type") AND ("Plant Type" <> '') THEN BEGIN
                                                                  ClearFields(0); //Material
                                                                  GetDefaultsPlantType;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Plant Type }
    { 921 ;   ;Plant Price Type    ;Option        ;CaptionML=ENU=Plant Price Type;
                                                   OptionCaptionML=ENU=" ,Day,Week,,Month,,,,,Hour";
                                                   OptionString=[ ,Day,Week,,Month,,,,,Hour];
                                                   Editable=No }
    { 922 ;   ;Start Rental Period ;Date          ;OnValidate=BEGIN
                                                                xRec."Plant Type" := '';
                                                                VALIDATE("Plant Type");
                                                                CalcRentalUnits;
                                                              END;

                                                   CaptionML=ENU=Start Rental Period }
    { 923 ;   ;End Rental Period   ;Date          ;OnValidate=BEGIN
                                                                CalcRentalUnits;
                                                              END;

                                                   CaptionML=ENU=End Rental Period }
    { 924 ;   ;Rental Period Formula;DateFormula  ;OnValidate=BEGIN
                                                                IF FORMAT("Rental Period Formula") <> '' THEN BEGIN
                                                                  TESTFIELD("Plant Price Type");
                                                                  VALIDATE("Time Quantity",EstimateMgmt.ConvPlantCalcPeriod("Rental Period Formula","Plant Price Type"));
                                                                END ELSE BEGIN
                                                                  IF "Rental Time Units" <> 0 THEN
                                                                    VALIDATE("Time Quantity","Rental Time Units")
                                                                  ELSE
                                                                    VALIDATE("Time Quantity",1);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Rental Period Formula }
    { 925 ;   ;Rental Time Units   ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Rental Period Formula");
                                                              END;

                                                   CaptionML=ENU=Rental Time Units;
                                                   BlankZero=Yes }
    { 930 ;   ;Admicode            ;Code10        ;TableRelation="Admi Code";
                                                   OnValidate=VAR
                                                                lvAdmiCodeRec@1100485000 : Record 11012390;
                                                              BEGIN
                                                                IF Admicode <> '' THEN BEGIN
                                                                  lvAdmiCodeRec.GET(Admicode);
                                                                  IF Description = '' THEN
                                                                    Description := lvAdmiCodeRec.Description;

                                                                  IF ("Cost Object Material" = '') AND (lvAdmiCodeRec."Cost Object Material" <> '') THEN BEGIN
                                                                    GetDefaultsCostObject(gvCostType::Material, lvAdmiCodeRec."Cost Object Material");
                                                                  END;

                                                                  IF ("Cost Object Subcontracting" = '') AND (lvAdmiCodeRec."Cost Object Subcontracting" <> '') THEN BEGIN
                                                                    GetDefaultsCostObject(gvCostType::Subcontracting, lvAdmiCodeRec."Cost Object Subcontracting");
                                                                  END;

                                                                  IF ("Cost Object Plant" = '') AND (lvAdmiCodeRec."Cost Object Plant" <> '') THEN BEGIN
                                                                    GetDefaultsCostObject(gvCostType::Plant, lvAdmiCodeRec."Cost Object Plant");
                                                                  END;

                                                                 END;
                                                              END;

                                                   CaptionML=ENU=Admi Code }
    { 940 ;   ;Purchase Action Mat.;Code10        ;TableRelation="Estimate Purchase Action".Code WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Purchase Action Material }
    { 950 ;   ;Purchase Action Filter Mat.;Code10 ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Purchase Action Filter Mat. }
    { 960 ;   ;Purchase Phase Mat. ;Code10        ;CaptionML=ENU=Purchase Phase Material;
                                                   Numeric=Yes }
    { 970 ;   ;Purchase Action Status Mat.;Option ;CaptionML=ENU=Purchase Action Status Mat.;
                                                   OptionCaptionML=ENU=Concept,Applied,Approved,Definitive;
                                                   OptionString=Concept,Applied,Approved,Definitive;
                                                   Editable=No }
    { 980 ;   ;Purch. Action Appr. Date Mat.;Date ;CaptionML=ENU=Purch. Action Approval Date Mat.;
                                                   Editable=No }
    { 990 ;   ;Advised Mat.        ;Boolean       ;CaptionML=ENU=Advised Material }
    { 1000;   ;Purchase Action Subc.;Code10       ;TableRelation="Estimate Purchase Action".Code WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Purchase Action Subcontracting }
    { 1010;   ;Purchase Action Filter Subc.;Code10;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Purchase Action Filter Subc. }
    { 1020;   ;Purchase Phase Subc.;Code10        ;CaptionML=ENU=Purchase Phase Subcontracting;
                                                   Numeric=Yes }
    { 1030;   ;Purchase Action Status Subc.;Option;CaptionML=ENU=Purchase Action Status Subc.;
                                                   OptionCaptionML=ENU=Concept,Applied,Approved,Definitive;
                                                   OptionString=Concept,Applied,Approved,Definitive;
                                                   Editable=No }
    { 1040;   ;Purch. Action Appr. Date Subc.;Date;CaptionML=ENU=Purch. Action Approval Date Subc.;
                                                   Editable=No }
    { 1050;   ;Advised Subc.       ;Boolean       ;CaptionML=ENU=Advised Subcontracting }
    { 1060;   ;Purchase Action Plant;Code10       ;TableRelation="Estimate Purchase Action".Code WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Purchase Action Plant }
    { 1070;   ;Purchase Action Filter Plant;Code10;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Purchase Action Filter Plant }
    { 1080;   ;Purchase Phase Plant;Code10        ;CaptionML=ENU=Purchase Phase Plant;
                                                   Numeric=Yes }
    { 1090;   ;Purchase Action Status Plant;Option;CaptionML=ENU=Purchase Action Status Plant;
                                                   OptionCaptionML=ENU=Concept,Applied,Approved,Definitive;
                                                   OptionString=Concept,Applied,Approved,Definitive;
                                                   Editable=No }
    { 1100;   ;Purch. Action Appr. Date Plant;Date;CaptionML=ENU=Purch. Action Approval Date Plant;
                                                   Editable=No }
    { 1110;   ;Advised Plant       ;Boolean       ;CaptionML=ENU=Advised Plant }
    { 1120;   ;Ignore Part Quantity;Boolean       ;OnValidate=VAR
                                                                DummyFieldNo@1100529000 : Integer;
                                                              BEGIN
                                                                IF IsEstimateLineForPercentage(DummyFieldNo) THEN BEGIN  //C026965
                                                                  "Ignore Part Quantity" := TRUE;
                                                                  "Part Quantity" := 1;
                                                                END;
                                                                VALIDATE(Quantity);
                                                                UpdateCumulativeQty;
                                                              END;

                                                   CaptionML=ENU=Ignore Part Quantity }
    { 1130;   ;Rental Contract Type;Option        ;CaptionML=ENU=Rental Contract Type;
                                                   OptionCaptionML=ENU=Quote,Order;
                                                   OptionString=Quote,Order;
                                                   Editable=No }
    { 1131;   ;Rental Contract No. ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=FIELD(Rental Contract Type),
                                                                                           Sales Document Type=CONST(RentalContract));
                                                   CaptionML=ENU=Rental Contract No.;
                                                   Editable=No }
    { 1135;   ;Rental Contract Copied on;Date     ;CaptionML=ENU=Rental Contract Copied on;
                                                   Editable=No }
    { 1140;   ;Service Order No.   ;Code20        ;TableRelation="Service Order".No. WHERE (No.=FIELD(Service Order No.));
                                                   CaptionML=ENU=Service Order No. }
    { 1300;   ;Surcharge % Labor   ;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Surcharge % Labor;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1301;   ;Surcharge % Material;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Surcharge % Material;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1302;   ;Surcharge % Subcontracting;Decimal ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Surcharge % Subcontracting;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1303;   ;Surcharge % Plant   ;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Surcharge % Plant;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1400;   ;Surcharge Amount Labor;Decimal     ;CaptionML=ENU=Surcharge Amount Labor;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1401;   ;Surcharge Amount Material;Decimal  ;CaptionML=ENU=Surcharge Amount Material;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1402;   ;Surcharge Amount Subcontr.;Decimal ;CaptionML=ENU=Surcharge Amount Subcontr.;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1403;   ;Surcharge Amount Plant;Decimal     ;CaptionML=ENU=Surcharge Amount Plant;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1410;   ;Total Surcharge Amount;Decimal     ;CaptionML=ENU=Total Surcharge Amount;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 11012434;;Project Planning Activity Code;Code10;
                                                   TableRelation="Project Planning Base Activity";
                                                   OnValidate=VAR
                                                                ProjectPlanningActivity@1100528402 : Record 11012431;
                                                                ProjectPlanningBaseActivity@1100528401 : Record 11012434;
                                                                FormatManagement@1100528400 : Codeunit 11012022;
                                                              BEGIN
                                                                FormatManagement.FormatElem("Project Planning Activity Code", 20, '');
                                                                IF "Project Planning Activity Code" <> '' THEN
                                                                  IF "Project No." <> '' THEN BEGIN
                                                                    IF NOT ProjectPlanningActivity.GET("Project No." + "Project Planning Activity Code") THEN
                                                                      ProjectPlanningBaseActivity.GET("Project Planning Activity Code");
                                                                  END ELSE
                                                                    ProjectPlanningBaseActivity.GET("Project Planning Activity Code");

                                                                UpdateProjPlanActCode;
                                                              END;

                                                   OnLookup=VAR
                                                              ProjectPlanningActivity@1100528401 : Record 11012431;
                                                              ProjectPlanningBaseActivity@1100528400 : Record 11012434;
                                                            BEGIN
                                                              IF "Project No." <> '' THEN BEGIN
                                                                ProjectPlanningActivity.SETRANGE("Project No.", "Project No.");
                                                                ProjectPlanningActivity.Code := "Project Planning Activity Code";
                                                                IF PAGE.RUNMODAL(PAGE::"Project Planning Activity List", ProjectPlanningActivity) = ACTION::LookupOK THEN
                                                                  VALIDATE("Project Planning Activity Code", ProjectPlanningActivity.Code);
                                                              END ELSE BEGIN
                                                                ProjectPlanningBaseActivity.Code := "Project Planning Activity Code";
                                                                IF PAGE.RUNMODAL(PAGE::"Proj. Planning Base Activities", ProjectPlanningBaseActivity) = ACTION::LookupOK THEN
                                                                  VALIDATE("Project Planning Activity Code", ProjectPlanningBaseActivity.Code);
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Project Planning Activity Code }
    { 11012520;;Recipe Type        ;Option        ;CaptionML=ENU=Recipe Type;
                                                   OptionCaptionML=ENU=" ,Recipe Header,Recipe Line";
                                                   OptionString=[ ,Recipe Header,Recipe Line];
                                                   Description=X001 }
    { 11012521;;Attached to Recipe Line;Integer   ;TableRelation="Estimate Line (RAW)"."Line No." WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                         Element No.=FIELD(Element No.));
                                                   CaptionML=ENU=Attached to Recipe Line;
                                                   Description=X001;
                                                   Editable=No }
    { 11125522;;Adjustment Line    ;Boolean       ;CaptionML=ENU=Adjustment Line;
                                                   Description=X001 }
    { 11125666;;Summary Line       ;Boolean       ;CaptionML=ENU=Summary Line }
    { 11125667;;Sundry Price       ;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Sundry Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 11125668;;Sundry Amount      ;Decimal       ;CaptionML=ENU=Sundry Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11125669;;Cost Object Sundry ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Sundry),
                                                                                               Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Cost Object Sundry }
    { 11125670;;Cumulative Sundry  ;Decimal       ;CaptionML=ENU=Cumulative Sundry;
                                                   AutoFormatType=1 }
    { 11125671;;VAT Prod. Posting Group;Code10    ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=VAR
                                                                VATPostingSetup@1100525000 : Record 325;
                                                              BEGIN
                                                                Estimate.GET("Estimate No.");

                                                                CASE "VAT Prod. Posting Group" OF
                                                                  Estimate."VAT Prod. Posting Group (L)": "VAT Type" := "VAT Type"::Low;
                                                                  Estimate."VAT Prod. Posting Group (Z)": "VAT Type" := "VAT Type"::Zero;
                                                                ELSE
                                                                  "VAT Type" := "VAT Type"::High;
                                                                END;

                                                                "VAT %" := 0;

                                                                IF "VAT Prod. Posting Group" <> '' THEN BEGIN
                                                                  Estimate.TESTFIELD("VAT Bus. Posting Group");
                                                                  VATPostingSetup.GET(Estimate."VAT Bus. Posting Group", "VAT Prod. Posting Group");
                                                                  "VAT %" := VATPostingSetup."VAT %";
                                                                  "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                  IF NOT EstElemVaTSpec.GET("Estimate No.", "Element No.", "VAT Prod. Posting Group") THEN BEGIN
                                                                     EstElemVaTSpec.INIT;
                                                                     EstElemVaTSpec."Estimate No." := "Estimate No.";
                                                                     EstElemVaTSpec."Element No." := "Element No.";
                                                                     EstElemVaTSpec."VAT Prod. Posting Group" := "VAT Prod. Posting Group";
                                                                     EstElemVaTSpec.INSERT;
                                                                  END;
                                                                END;

                                                                "VAT Base Amount" := "Cumulative Total" + "Total Surcharge Amount";
                                                                "VAT Amount" := "VAT Base Amount" * ("VAT %" / 100);
                                                                "VAT Amount" := ROUND("VAT Amount");
                                                              END;

                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 11125672;;VAT Type           ;Option        ;CaptionML=ENU=VAT Type;
                                                   OptionCaptionML=ENU=High,Low,Zero;
                                                   OptionString=High,Low,Zero;
                                                   Editable=No }
    { 11125673;;VAT %              ;Decimal       ;CaptionML=ENU=VAT %;
                                                   Editable=No }
    { 11125674;;VAT Amount         ;Decimal       ;CaptionML=ENU=VAT Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11125675;;Cumulative Quantity;Decimal       ;CaptionML=ENU=Cumulative Quantity;
                                                   DecimalPlaces=0:2;
                                                   Editable=No }
    { 11125678;;Norm (Plant)       ;Decimal       ;OnValidate=VAR
                                                                Estimate@1100525000 : Record 11012151;
                                                              BEGIN
                                                                IF "Norm (Plant)" <> 0 THEN BEGIN
                                                                  Estimate.GET("Estimate No.");
                                                                  Estimate.TESTFIELD("Plant Rates in Hours");
                                                                END;

                                                                "Norm (Plant)" := ROUND("Norm (Plant)", 0.00001);

                                                                CalculateTotals;

                                                                IF CurrFieldNo <> FIELDNO("Production Rate (Plant)") THEN
                                                                  IF "Norm (Plant)" <> 0 THEN
                                                                    "Production Rate (Plant)" := 1 / "Norm (Plant)"
                                                                  ELSE
                                                                    "Production Rate (Plant)" := 0;
                                                              END;

                                                   CaptionML=ENU=Norm (Plant);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 11125679;;Production Rate (Plant);Decimal   ;OnValidate=BEGIN
                                                                IF "Norm (Plant)" <> 0 THEN BEGIN
                                                                  Estimate.GET("Estimate No.");
                                                                  Estimate.TESTFIELD("Plant Rates in Hours");
                                                                END;

                                                                IF "Production Rate (Plant)" <> 0 THEN
                                                                  VALIDATE("Norm (Plant)", 1 / "Production Rate (Plant)")
                                                                ELSE
                                                                  VALIDATE("Norm (Plant)",1);
                                                              END;

                                                   CaptionML=ENU=Production Rate (Plant);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 11125680;;Hours (Plant)      ;Decimal       ;CaptionML=ENU=Hours (Plant);
                                                   DecimalPlaces=2:5;
                                                   Editable=No }
    { 11125681;;Cumulative Hours (Plant);Decimal  ;CaptionML=ENU=Cumulative Hours (Plant);
                                                   Editable=No }
    { 11125682;;VAT Base Amount    ;Decimal       ;CaptionML=ENU=VAT Base Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11125683;;VAT Calculation Type;Option       ;CaptionML=ENU=VAT Calculation Type;
                                                   OptionCaptionML=ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax }
  }
  KEYS
  {
    {    ;Estimate No.,Element No.,Line No.       ;SumIndexFields=Hours,Labor Amount,Material Amount,Gross Amount,Subcontracting Amount,Plant Amount,Amount,Cumulative Hours,Cumulative Labor,Cumulative Material,Cumulative Gross Price,Cumulative Subcontracting,Cumulative Plant,Cumulative Total,Volume,Total Surcharge Amount,Cumulative Sundry;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Estimate No.,Recipe Group,Recipe No.    ;SumIndexFields=Surcharge Amount Labor,Surcharge Amount Material,Surcharge Amount Subcontr.,Surcharge Amount Plant }
    {    ;Purchase Route Reference,Ask for Quote   }
    {    ;Estimate No.,Purchase Action Mat.        }
    {    ;Estimate No.,Plant Type                 ;KeyGroups=PLTEST }
    {    ;Estimate No.,Element No.,Source          }
    {    ;Estimate No.,Element No.,VAT Prod. Posting Group;
                                                   SumIndexFields=VAT Amount,VAT Base Amount }
    {    ;Estimate No.,Element No.,VAT Type       ;SumIndexFields=Cumulative Total }
    {    ;Estimate No.,VAT Type,VAT Calculation Type;
                                                   SumIndexFields=VAT Amount,VAT Base Amount }
    {    ;Estimate No.,Summary Line                }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EstSetup@1100485004 : Record 11012150;
      Estimate@11012000 : Record 11012151;
      EstLineRec@1210190000 : Record 11125680;
      RateRec@11012007 : Record 11012160;
      TradeItemRec@1210190018 : Record 11012317;
      BasicItemRec@1210190005 : Record 11012316;
      ItemRec@1210190003 : Record 27;
      DimValRec@1210190001 : Record 349;
      ElemRec@1210190020 : Record 11012060;
      ProjElemRec@1210190019 : Record 11012010;
      TradeExpRec@1100485002 : Record 11020286;
      EstElemVaTSpec@1100525010 : Record 11125678;
      DimMgt@1210190002 : Codeunit 408;
      FormatMgt@11012008 : Codeunit 11012022;
      UpdateEst@1210190007 : Codeunit 11125671;
      ValidateCu@1210190008 : Codeunit 11012033;
      SearchRateCu@1100525001 : Codeunit 11012567;
      EstimateMgmt@1100525002 : Codeunit 11012153;
      ItemTypeOpt@11012010 : 'Item,Basic Item,Trade Item,Trade Vendor';
      Text002@1210190010 : TextConst 'ENU=only allowed for material, subcontracting or plant (fill one of the prices or cost objects)';
      Text003@1210190009 : TextConst 'ENU=not allowed  for a combination of cost types (material, subcontracting and/or plant), split the estimate line';
      gvCostType@1100485005 : 'Labor,Material,Subcontracting,Plant,Sundry';
      Text006@1100485007 : TextConst 'ENU=Default Purchase Action %1 not present for Estimate %2.';
      Text007@1100485006 : TextConst 'ENU=%1 of %2 is not adopted, because Status is %3.';
      Text008@1100485009 : TextConst 'ENU=Copy Purchase action from new Cost Object?\\';
      Text009@1100485008 : TextConst 'ENU=Only empty fields will be filled. Existing data will not be changed.';
      Text010@1100525003 : TextConst 'ENU=Cost type should be either Material or Plant (but not both).';
      TotalWeight@1100525005 : Decimal;
      TotalBuyBack@1100525006 : Decimal;
      Text020@1100525000 : TextConst 'ENU=Warning: you are creating %1 records for an %2 of %3 "%4", but %1 records already exist for the/an %2 of %3 "%5".';
      SkipUpdateLogBook@1100525004 : Boolean;
      MessageAlreadyShown@1100525007 : Boolean;
      ShowMessageOnce@1100525008 : Boolean;
      Text021@1100525009 : TextConst 'ENU=Warning: you are creating %1 records for an %2 of %3 "%4", but one or more %2 records exist of %3 "%5".';
      Text022@1100529000 : TextConst 'ENU=%1 is filled, estimate lines not allowed for %2 ''%3''';

    PROCEDURE CalculateTotals@1();
    VAR
      PartQty@1100525000 : Decimal;
    BEGIN
      //mg.sc, 21-03-12: M34148
      IF "Production Rate" < 1 THEN
        Hours := "Time Quantity" * Quantity * Norm
      ELSE
        Hours := "Time Quantity" * Quantity / "Production Rate";
      IF "Production Rate (Plant)" < 1 THEN
        "Hours (Plant)" := "Time Quantity" * Quantity * "Norm (Plant)"
      ELSE
        "Hours (Plant)" := "Time Quantity" * Quantity / "Production Rate (Plant)";
      //mg.ec, 21-03-12: M34148

      IF "Cum. Adj. Factor Hours" <> 0 THEN
        Hours := Hours * "Cum. Adj. Factor Hours";
      "Labor Amount"  := ROUND(Hours * Rate);
      IF "Rate Type" = "Rate Type"::Minutes THEN
        Hours := Hours * "Team Size" / 60;

      "Material Amount" := "Time Quantity" * Quantity * "Material Price";
      "Subcontracting Amount" := "Time Quantity" * Quantity * "Subcontracting Price";

      CASE "Norm (Plant)" = 0 OF
        TRUE:
           BEGIN
             "Plant Amount" := "Time Quantity" * Quantity * "Plant Price";
             "Gross Amount" := "Time Quantity" * Quantity * "Gross Price";
           END;
        FALSE:
          BEGIN
            "Plant Amount" := ROUND("Hours (Plant)" * "Plant Price");
            "Gross Amount" := ROUND("Hours (Plant)" * "Gross Price");
          END;
      END;

      "Sundry Amount" := "Time Quantity" * Quantity * "Sundry Price";  //ISS
      IF "Cum. Adj. Factor Material" <> 0 THEN BEGIN
        "Material Amount" := "Material Amount" * "Cum. Adj. Factor Material";
        "Gross Amount" := "Gross Amount" * "Cum. Adj. Factor Material";
      END;
      IF "Cum. Adj. Factor Subcontr." <> 0 THEN
        "Subcontracting Amount" := "Subcontracting Amount" * "Cum. Adj. Factor Subcontr.";
      IF "Cum. Adj. Factor Plant" <> 0 THEN
        "Plant Amount" := "Plant Amount" * "Cum. Adj. Factor Plant";

      // ISS.begin
      //"Labor Amount" := "Labor Amount" * (1 + ("Surcharge % Labor" / 100));
      //"Material Amount" := "Material Amount" * (1 + ("Surcharge % Material" / 100));
      //"Subcontracting Amount" := "Subcontracting Amount" * (1 + ("Surcharge % Subcontracting" / 100));
      //"Plant Amount" := "Plant Amount" * (1 + ("Surcharge % Plant" / 100));
      // ISS.end

      "Material Amount" := ROUND("Material Amount");
      "Gross Amount" := ROUND("Gross Amount");
      "Subcontracting Amount" := ROUND("Subcontracting Amount");
      "Plant Amount" := ROUND("Plant Amount");
      Amount := "Labor Amount" + "Material Amount" + "Subcontracting Amount" + "Plant Amount" + "Sundry Amount";  //ISS
      "Total Weight" := ROUND(Quantity * Weight);
      "Buy Back Amount" := ROUND(Quantity * "Buy Back Price");

      CASE "Ignore Part Quantity" OF
        TRUE: PartQty := 1;
        FALSE: PartQty := "Part Quantity";
      END;

      //mg.sc, 21-03-12: M34148
      IF "Production Rate" < 1 THEN
        "Cumulative Hours" := "Cumulative Quantity" * Norm
      ELSE
        "Cumulative Hours" := "Cumulative Quantity" / "Production Rate";
      IF "Production Rate (Plant)" < 1 THEN
        "Cumulative Hours (Plant)" := "Cumulative Quantity" * "Norm (Plant)"
      ELSE
        "Cumulative Hours (Plant)" := "Cumulative Quantity" / "Production Rate (Plant)";
      //mg.ec, 21-03-12: M34148

      "Cumulative Labor" := "Cumulative Hours" * Rate;
      "Cumulative Material" := "Cumulative Quantity" * "Material Price";
      "Cumulative Subcontracting" := "Cumulative Quantity" * "Subcontracting Price";
      "Cumulative Sundry" := "Cumulative Quantity" * "Sundry Price";  //ISS
      "Cumulative Gross Price" := "Gross Amount" * PartQty;

      CASE "Norm (Plant)" = 0 OF
        FALSE:
          "Cumulative Plant" := "Cumulative Hours (Plant)" * "Plant Price";
        TRUE:
          "Cumulative Plant" := "Cumulative Quantity" * "Plant Price";
      END;

      "Cumulative Total" :=
        "Cumulative Labor" + "Cumulative Material" + "Cumulative Subcontracting" + "Cumulative Plant" + "Cumulative Sundry";

      "Cumulative Weight" := "Total Weight" * PartQty;
      "Cumulative Buy Back" := "Buy Back Amount" * PartQty;

      "Surcharge Amount Labor" := "Cumulative Labor" * ("Surcharge % Labor" / 100);
      "Surcharge Amount Material" := "Cumulative Material" * ("Surcharge % Material" / 100);
      "Surcharge Amount Subcontr." := "Cumulative Subcontracting" * ("Surcharge % Subcontracting" / 100);
      "Surcharge Amount Plant" := "Cumulative Plant" * ("Surcharge % Plant" / 100);

      "Total Surcharge Amount" :=
        "Surcharge Amount Labor" +
        "Surcharge Amount Material" +
        "Surcharge Amount Subcontr." +
        "Surcharge Amount Plant";

      "VAT Base Amount" := "Cumulative Total" + "Total Surcharge Amount";
      "VAT Amount" := ("VAT Base Amount") * ("VAT %" / 100);
      "VAT Amount" := ROUND("VAT Amount");
    END;

    PROCEDURE CalculateNettPrice@13();
    BEGIN
      IF ("Gross Price" = 0) AND ("Discount %" = 0) THEN
        EXIT;

      IF EstimateMgmt.CostTypeEstLineRAWIsMat(Rec) = EstimateMgmt.CostTypeEstLineRAWIsPlant(Rec) THEN
        ERROR(Text010);

      IF EstimateMgmt.CostTypeEstLineRAWIsMat(Rec) THEN
        VALIDATE("Material Price", "Gross Price" - (("Gross Price"/100) * "Discount %"))
      ELSE
        VALIDATE("Plant Price","Gross Price" - (("Gross Price"/100) * "Discount %"));
    END;

    PROCEDURE CalculateDiscount@1210190012();
    VAR
      NettPrice@1100525000 : Decimal;
    BEGIN
      IF NOT (
        EstimateMgmt.CostTypeEstLineRAWIsMat(Rec) OR
        EstimateMgmt.CostTypeEstLineRAWIsPlant(Rec)) THEN BEGIN
          "Discount %" := 0;
          EXIT;
      END;

      IF EstimateMgmt.CostTypeEstLineRAWIsMat(Rec) THEN
        NettPrice := "Material Price"
      ELSE
        NettPrice := "Plant Price";

      IF "Gross Price" <> 0 THEN BEGIN
        IF  ("Item No." + "Basic Item" + "Trade Item" + "Plant Type" = '') AND ("Discount %" = 0) THEN
          "Gross Price" := NettPrice
        ELSE
          "Discount %" := (("Gross Price" - NettPrice) / "Gross Price") * 100;
      END ELSE BEGIN
        IF "Discount %" <> 100 THEN BEGIN
          IF NOT (("Item No." + "Basic Item" + "Trade Item" + "Plant Type" = '') AND ("Discount %" = 0)) THEN
            "Gross Price" := NettPrice / ((100 - "Discount %") / 100);
        END ELSE BEGIN
          "Gross Price" := NettPrice;
          NettPrice := 0;
        END;
      END;

      IF EstimateMgmt.CostTypeEstLineRAWIsMat(Rec) THEN
        "Material Price" := NettPrice
      ELSE
        "Plant Price" := NettPrice;
    END;

    PROCEDURE CalculateGrossPrice@1100485000();
    BEGIN
      IF "Discount %" <> 100 THEN
        "Gross Price" := ("Material Price" + "Plant Price") * 100 / (100 - "Discount %");
    END;

    PROCEDURE CalculateQuantity@11012000();
    VAR
      lv1@1210190000 : Decimal;
      lv2@1210190001 : Decimal;
      lv3@1210190002 : Decimal;
    BEGIN
      lv1 := Length;
      lv2 := Width;
      lv3 := Height;

      IF Length = 0 THEN lv1 := 1;
      IF Width = 0 THEN lv2 := 1;
      IF Height = 0 THEN lv3 := 1;

      VALIDATE(Quantity, lv1 * lv2 * lv3);
    END;

    PROCEDURE DetermineNormGroup@10();
    BEGIN
      IF "Norm Group" = '' THEN
        IF Estimate.GET("Estimate No.") THEN
          "Norm Group" := Estimate."Norm Group";
    END;

    PROCEDURE DetermineNorm@7();
    VAR
      NormRec@11012000 : Record 11012163;
    BEGIN
      IF NormRec.GET("Sub Operation Code","Norm Group") THEN BEGIN
        VALIDATE(Norm, NormRec.Norm);
        ConvertNorm(FALSE, FALSE);
      END ELSE BEGIN
        IF ("Norm Group" <> '') AND ("Sub Operation Code" <> '') THEN BEGIN
          VALIDATE(Norm, 0);
        END;
      END;
      CalculateTotals;
    END;

    PROCEDURE ConvertNorm@1210190002(SwitchType@1210190001 : Boolean;SwitchSize@1210190002 : Boolean);
    VAR
      NormGrpRec@1210190000 : Record 11012164;
    BEGIN
      IF (SwitchType = FALSE) AND (SwitchSize = FALSE) THEN BEGIN
        IF NormGrpRec.GET("Norm Group") THEN BEGIN
          IF NormGrpRec."Rate Type" <> "Rate Type" THEN
            SwitchType := TRUE;
          IF NormGrpRec."Team Size" <> "Team Size" THEN BEGIN
            SwitchSize := TRUE;
            xRec."Team Size" := NormGrpRec."Team Size";
          END;
        END;
      END;

      IF SwitchType = TRUE THEN
        IF "Rate Type" = "Rate Type"::Hours THEN
          Norm := Norm / 60
        ELSE
          Norm := Norm * 60;

      IF SwitchSize = TRUE THEN BEGIN
        IF "Team Size" <> 0 THEN
          Norm := Norm / "Team Size";
        IF xRec."Team Size" <> 0 THEN
          Norm := Norm * xRec."Team Size";
      END;

      IF SwitchType OR SwitchSize THEN
        IF Norm <> 0 THEN
          "Production Rate" := 1 / Norm
        ELSE
          "Production Rate" := 0;
    END;

    PROCEDURE ValidateItem@3(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item,Trade Vendor';lvEstRec@1210190000 : Record 11012151;lvSwitchItem@1210190002 : Boolean);
    VAR
      Desc1Txt@1210190001 : Text[50];
      Desc2Txt@1210190003 : Text[50];
      lvItemOper@1100485002 : Code[20];
      lvRefDate@1100485001 : Date;
      lvDiscRef1@1100485004 : Code[20];
      lvDiscRef2@1100485003 : Code[20];
      lvRefPrio@1100525000 : Code[10];
      lvDiscType@1100528000 : 'Purchase,Sales';
    BEGIN
      IF lvSwitchItem = TRUE THEN
        "Price Agreement" := FALSE;

      IF ("Purchase Route Reference" = '') AND ("Price Agreement" = FALSE) THEN BEGIN
        GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, lvEstRec, lvDiscType::Purchase);
        lvRefPrio := ValidateCu.GetRefPrioEstimate(lvEstRec, lvDiscType::Purchase);

        ValidateCu.ValidateItem(
          LTypeArtOpt, "Trade Item", "Item No.", Manufacturer, "Vendor (Trade Item)", "Basic Item",
          "Cost Object Material", Desc1Txt, "Unit of Measure", "Material Price",
          "Purchase Discount %", "Price Reference Date", "Gross Price", Desc2Txt, "Cost Component",
          lvDiscRef1, lvDiscRef2, lvRefDate, lvRefPrio);
        "Discount %" := "Purchase Discount %";

        IF "Cost Object Material" <> xRec."Cost Object Material" THEN
          GetDefaultsCostObject(gvCostType::Material, "Cost Object Material");

        ClearFields(2); //Buyback
        IF LTypeArtOpt = LTypeArtOpt::Item THEN BEGIN
          ValidateCu.GetSalesBuyBackRates("Item No.", Estimate."Plant Location",lvRefDate,"Material Price","Buy Back Price");
          VALIDATE("Buy Back Price");
          VALIDATE("Material Price");
        END;

        IF Desc2Txt = '' THEN
          Description := Desc1Txt
        ELSE
          Description := COPYSTR((Desc1Txt + '\' + Desc2Txt), 1, MAXSTRLEN(Description));
      END;

      IF lvSwitchItem = TRUE THEN BEGIN
        lvItemOper := '';
        IF ItemRec.GET("Item No.") THEN BEGIN
          VALIDATE("External Text", ItemRec.Text);
          lvItemOper := ItemRec."Sub Operation Code";
        END;
        IF ("Recipe No." = '') AND ("Rate Code" = '') THEN
          VALIDATE("Rate Code", lvEstRec."Rate Code");
        CASE LTypeArtOpt OF
          LTypeArtOpt::Item:
            BEGIN
              IF NOT ItemRec.GET("Item No.") THEN ItemRec.INIT;
              ItemRec.TESTFIELD(Blocked,FALSE);
              Weight := ItemRec.Weight;
              VALIDATE("VAT Prod. Posting Group", ItemRec."VAT Prod. Posting Group");
            END;
          LTypeArtOpt::"Basic Item":
            BEGIN
              IF NOT BasicItemRec.GET(Manufacturer, "Basic Item") THEN BasicItemRec.INIT;
              BasicItemRec.TESTFIELD(Expired,FALSE);
              Weight := BasicItemRec."Nett Weight";
              IF BasicItemRec."Sub Operation Code" <> '' THEN
                lvItemOper := BasicItemRec."Sub Operation Code";
            END;
          LTypeArtOpt::"Trade Item",
          LTypeArtOpt::"Trade Vendor":
            BEGIN
              IF NOT TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN TradeItemRec.INIT;
              TradeItemRec.TESTFIELD(Expired,FALSE);
              Weight := TradeItemRec."Gross Weight";
              IF TradeItemRec."Sub Operation Code" <> '' THEN
                lvItemOper := TradeItemRec."Sub Operation Code";
            END;
        END;
        IF lvItemOper <> '' THEN
          VALIDATE("Sub Operation Code", lvItemOper);
      END;

      CalculateTotals;
    END;

    PROCEDURE HandleLookupItem@1100525003(lvFieldNo@1100525004 : Integer) lvRefresh : Boolean;
    VAR
      BasicItemRec@1100525011 : Record 11012316;
      TradeItemRec@1100525010 : Record 11012317;
      ItemFrm@1100525009 : Page 31;
      BasicItemFrm@1100525008 : Page 11012333;
      TradeItemFrm@1100525007 : Page 11012334;
      lvRefDate@1100525003 : Date;
      lvDiscRef1@1100525002 : Code[20];
      lvDiscRef2@1100525001 : Code[20];
      lvDiscType@1100528000 : 'Purchase,Sales';
      lvTempEstimateLine@1100525005 : TEMPORARY Record 11125680;
      g_ItemCode@1100525014 : Code[20];
      g_Vendor@1100525013 : Code[20];
    BEGIN
      //IF "Recipe No." <> '' THEN EXIT; //mg.o, 19-07-11: M26760

      Estimate.GET("Estimate No.");
      GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, Estimate, lvDiscType::Purchase);

      IF lvFieldNo = FIELDNO("Item No.") THEN BEGIN
        CLEAR(ItemFrm);
        ItemFrm.LOOKUPMODE(TRUE);
        ItemFrm.DetermineInterface(DATABASE::"Estimate Line (RAW)",
          "Estimate No.","Element No.",'','',0,'','',"Line No.",'','');

        IF ItemRec.GET("Item No.") THEN
          ItemFrm.SETRECORD(ItemRec);

        IF ItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ItemFrm.GETRECORD(ItemRec);
          VALIDATE("Item No.", ItemRec."No.");
        END ELSE BEGIN
          lvRefresh := ItemFrm.CheckMultiCopy;
        END;
      END;

      IF lvFieldNo = FIELDNO("Basic Item") THEN BEGIN
        CLEAR(BasicItemFrm);
        BasicItemFrm.LOOKUPMODE(TRUE);
        BasicItemFrm.SetSelection(DATABASE::"Estimate Line (RAW)",
          "Estimate No.","Element No.",'','',0,'','',"Line No.",'','');

        BasicItemFrm.SetReference(lvRefDate, lvDiscRef1, lvDiscRef2);
        BasicItemRec.InitLookup(BasicItemRec, "Basic Item", Manufacturer);
        BasicItemFrm.SETRECORD(BasicItemRec);

        IF BasicItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          BasicItemFrm.GETRECORD(BasicItemRec);
          Manufacturer := BasicItemRec.Manufacturer;
          VALIDATE("Basic Item", BasicItemRec."Product Code");
        END ELSE BEGIN
          lvRefresh := BasicItemFrm.CheckMultiCopy;
        END;
      END;

      IF lvFieldNo = FIELDNO("Trade Item") THEN BEGIN
        IF "Item No." <> '' THEN BEGIN
          lvTempEstimateLine.COPY(Rec);
          lvTempEstimateLine.VALIDATE("Item No.","Item No.");
          g_ItemCode := lvTempEstimateLine."Trade Item";
          g_Vendor := lvTempEstimateLine."Vendor (Trade Item)";
        END ELSE BEGIN
          g_ItemCode := '';
          g_Vendor := '';
        END;

        CLEAR(TradeItemFrm);
        TradeItemFrm.LOOKUPMODE(TRUE);

        TradeItemFrm.SetSelection(DATABASE::"Estimate Line (RAW)",
          "Estimate No.","Element No.",'','',0,'','',"Line No.",'','',
          "Vendor (Trade Item)","Trade Item",Manufacturer,"Basic Item",g_ItemCode,g_Vendor);

        TradeItemFrm.SetReference(lvRefDate, lvDiscRef1, lvDiscRef2);
        TradeItemRec.InitLookup(TradeItemRec, "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)");
        TradeItemFrm.SETRECORD(TradeItemRec);

        IF TradeItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          TradeItemFrm.GETRECORD(TradeItemRec);
          Manufacturer := TradeItemRec.Manufacturer;
          "Basic Item" := TradeItemRec."Product Code";
          "Vendor (Trade Item)" := TradeItemRec.Vendor;
          VALIDATE("Trade Item", TradeItemRec."Item Code");
        END ELSE BEGIN
          lvRefresh := TradeItemFrm.CheckMultiCopy;
        END;
      END;

      EXIT(lvRefresh);
    END;

    PROCEDURE HandleLookupUnit@1210190011();
    VAR
      ItemUnitRec@1210190000 : Record 5404;
      lvUnit@1210190001 : Code[10];
    BEGIN
      lvUnit := ItemUnitRec.HandleLookupUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)");
      IF (lvUnit <> '') AND (lvUnit <> "Unit of Measure") THEN BEGIN
        xRec."Unit of Measure" := "Unit of Measure";
        VALIDATE("Unit of Measure", lvUnit);
      END;
    END;

    PROCEDURE CheckItemUnitConversion@1210190010(VAR MainNewRec@1210190006 : Record 11125680;MainOldRec@1210190007 : Record 11125680);
    VAR
      ItemRec@1210190004 : Record 27;
      UnitFactor@1210190005 : Decimal;
      UnitFactorOld@1210190003 : Decimal;
      UnitFactorNew@1210190002 : Decimal;
      UnitControl@1210190001 : Codeunit 5402;
    BEGIN
      WITH MainNewRec DO BEGIN
        UnitFactorOld := 1;
        UnitFactorNew := 1;
        IF "Trade Item" <> '' THEN BEGIN
          ValidateCu.ValidateUnit(ItemTypeOpt::"Trade Item",
            "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
            Quantity,"Unit of Measure",UnitFactorNew);
        END ELSE BEGIN
          IF "Basic Item" <> '' THEN BEGIN
            ValidateCu.ValidateUnit(ItemTypeOpt::"Basic Item",
              "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
              Quantity,"Unit of Measure",UnitFactorNew);
          END ELSE BEGIN
            IF "Item No." <> '' THEN BEGIN
              ItemRec.GET("Item No.");
              UnitFactorOld := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, MainOldRec."Unit of Measure");
              UnitFactorNew := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, "Unit of Measure");
              UnitFactor := UnitFactorOld;
              ValidateCu.ValidateUnit(ItemTypeOpt::Item,
                "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
                Quantity,"Unit of Measure",UnitFactor);
            END;
          END;
        END;
        IF (UnitFactorNew * UnitFactorOld) <> 0 THEN BEGIN
          IF UnitFactorNew <> UnitFactorOld THEN BEGIN
            VALIDATE("Gross Price", ("Gross Price" * UnitFactorNew / UnitFactorOld));
            VALIDATE(Weight,(Weight * UnitFactorNew / UnitFactorOld));
          END;
        END;
      END;
    END;

    PROCEDURE CheckSameValue@1210190009(lvCostType@1210190001 : Integer;lvCostObjectOld@1210190002 : Code[20]);
    VAR
      lvEstLineRec@1210190000 : Record 11125680;
    BEGIN
      lvEstLineRec.SETRANGE("Estimate No.", "Estimate No.");
      IF lvCostType = 1 THEN
        lvEstLineRec.SETFILTER("Cost Object Labor", '%1', lvCostObjectOld);
      IF lvCostType = 2 THEN
        lvEstLineRec.SETFILTER("Cost Object Material", '%1', lvCostObjectOld);
      IF lvCostType = 3 THEN
        lvEstLineRec.SETFILTER("Cost Object Subcontracting", '%1', lvCostObjectOld);
      IF lvCostType = 4 THEN
        lvEstLineRec.SETFILTER("Cost Object Plant", '%1', lvCostObjectOld);
      lvEstLineRec.SETRANGE(Description, Description);
      lvEstLineRec.SETRANGE("Unit of Measure", "Unit of Measure");
      IF lvEstLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF lvCostType = 1 THEN
            lvEstLineRec."Cost Object Labor" := "Cost Object Labor";
          IF lvCostType = 2 THEN
            lvEstLineRec."Cost Object Material" := "Cost Object Material";
          IF lvCostType = 3 THEN
            lvEstLineRec."Cost Object Subcontracting" := "Cost Object Subcontracting";
          IF lvCostType = 4 THEN
            lvEstLineRec."Cost Object Plant" := "Cost Object Plant";
          lvEstLineRec.MODIFY;
        UNTIL lvEstLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckCostObject@1210190005(CostObject@1210190000 : Code[20];DirectValidate@1210190001 : Boolean);
    BEGIN
      //Do not call function anymore through table field, but only from form field CostObject
      Estimate.GET("Estimate No.");
      IF Estimate."Estimate Based On" <> Estimate."Estimate Based On"::CostObject THEN EXIT;

      IF CostObject <> '' THEN BEGIN
        DimMgt.GetDimValueRec(2, CostObject, DimValRec, TRUE,'');
        IF ("Item No." + "Basic Item" + "Trade Item" <> '') THEN BEGIN
          IF DirectValidate = TRUE THEN BEGIN
            DimValRec.TESTFIELD("Cost Type", DimValRec."Cost Type"::Material);
            EXIT;
          END;
        END;
        IF "Sub Operation Code" <> '' THEN BEGIN
          ProcessSubOperation;
          EXIT;
        END;
        IF "Norm Agreement" OR "Price Agreement" OR "Subcontracting Agreement" OR "Plant Agreement" THEN BEGIN
          IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN BEGIN
            IF DimValRec."Rate Code" = '' THEN
              VALIDATE("Rate Code", Estimate."Rate Code")
            ELSE
              VALIDATE("Rate Code", DimValRec."Rate Code");
          END;
          EXIT;
        END;
        Description := DimValRec.Name;
        Norm := 0;
        "Production Rate" := 0;
        "Material Price" := 0;
        "Gross Price" := 0;
        "Subcontracting Price" := 0;
        "Plant Price" := 0;
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN BEGIN
          IF DimValRec."Rate Code" = '' THEN
            VALIDATE("Rate Code", Estimate."Rate Code")
          ELSE
            VALIDATE("Rate Code", DimValRec."Rate Code");
          IF "Sub Operation Code" <> '' THEN
            DetermineNorm
          ELSE
            VALIDATE(Norm, DimValRec.Norm);
        END;
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Material THEN
          VALIDATE("Gross Price", DimValRec.Price)
        ELSE
          "Discount %" := 0;
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Subcontracting THEN
          VALIDATE("Subcontracting Price", DimValRec.Price);
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Plant THEN
          VALIDATE("Plant Price", DimValRec.Price);
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Sundry THEN  //ISS
          VALIDATE("Sundry Price", DimValRec.Price);
      END;
      VALIDATE("Cost Component", DimValRec."Cost Component");
    END;

    PROCEDURE OldSubOperationDefault@1210190006() : Boolean;
    VAR
      OldSubOperRec@1210190001 : Record 11012166;
      OldOperRec@1210190000 : Record 11012165;
    BEGIN
      OldOperRec.INIT;
      IF OldSubOperRec.GET(xRec."Sub Operation Code") THEN
        IF NOT OldOperRec.GET(OldSubOperRec.Operation) THEN OldOperRec.INIT;

      EXIT(xRec."Cost Object Labor" = OldOperRec."Cost Object");
    END;

    PROCEDURE ProcessSubOperation@1100485002();
    VAR
      SubOperRec@1100485000 : Record 11012166;
    BEGIN
      IF "Item No." + "Basic Item" + "Trade Item" <> '' THEN EXIT;

      IF SubOperRec.GET("Sub Operation Code") THEN BEGIN
        Description := COPYSTR(SubOperRec.Description, 1, MAXSTRLEN(Description));
        IF SubOperRec."Unit of Measure" <> '' THEN
          "Unit of Measure" := SubOperRec."Unit of Measure";
      END;
    END;

    PROCEDURE EnterQuantity@1210190013(lvOrigin@1210190002 : Integer) : Boolean;
    VAR
      QuanSheetRec@1210190000 : Record 11012186;
      EstModelRec@1100485000 : Record 11012196;
    BEGIN
      //lvOrigin:
      //  1 = Length, Width and Height
      //  2 = quantity (input)
      //  3 = house type
      //  4 = quantity (lookup)

      IF lvOrigin <> 1 THEN BEGIN
        IF Length <> 0 THEN EXIT(FALSE);
        IF Width <> 0 THEN EXIT(FALSE);
        IF Height <> 0 THEN EXIT(FALSE);
      END;

      IF lvOrigin <> 4 THEN BEGIN
        QuanSheetRec.SETRANGE("Estimate No.", "Estimate No.");
        IF QuanSheetRec.FINDFIRST THEN EXIT(FALSE);  //not implemented for RAW
      END;

      IF lvOrigin <> 3 THEN BEGIN
        EstModelRec.SETRANGE("Estimate No.", "Estimate No.");
        IF EstModelRec.FINDFIRST THEN EXIT(FALSE);  //not implemented for RAW
      END ELSE BEGIN
        EstModelRec.SETRANGE("Estimate No.", "Estimate No.");
        IF NOT EstModelRec.FINDFIRST THEN EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE EditQuanSheet@1210190008();
    VAR
      QuanRec@1210190000 : Record 11012186;
    BEGIN
      EXIT;  //not implemented for RAW
    END;

    PROCEDURE InitAdjustmentFactor@1210190003();
    BEGIN
      IF "Adjustment Factor Hours" = 0 THEN
        "Adjustment Factor Hours" := 1;
      IF "Adjustment Factor Material" = 0 THEN
        "Adjustment Factor Material" := 1;
      IF "Adjustment Factor Subcontr." = 0 THEN
        "Adjustment Factor Subcontr." := 1;
      IF "Adjustment Factor Plant" = 0 THEN
        "Adjustment Factor Plant" := 1;
    END;

    PROCEDURE ProcessAdjustmentFactor@1210190004(IAdjType@1210190000 : Integer);
    BEGIN
      CASE IAdjType OF
        1:
          IF "Adjustment Factor Hours" = 0 THEN
            "Adjustment Factor Hours" := 1;
        2:
          IF "Adjustment Factor Material" = 0 THEN
            "Adjustment Factor Material" := 1;
        3:
          IF "Adjustment Factor Subcontr." = 0 THEN
            "Adjustment Factor Subcontr." := 1;
        4:
          IF "Adjustment Factor Plant" = 0 THEN
            "Adjustment Factor Plant" := 1;
      END;
      MODIFY;
    END;

    PROCEDURE GetItemSpecifications@1100485006();
    BEGIN
      IF ItemRec.GET("Item No.") THEN BEGIN
        "Item Series" := ItemRec."Item Series";
        "Item Type" := ItemRec."Item Type";
        "Item Brand" := ItemRec."Item Brand";
      END;
    END;

    PROCEDURE EvaluateTimeQuantity@1100485007();
    VAR
      HelpTxt1@1100485000 : Text[30];
      HelpTxt2@1100485001 : Text[30];
      HelpDec1@1100485002 : Decimal;
    BEGIN
      HelpTxt1 := FORMAT("Maintenance Interval");
      HelpTxt2 := DELCHR(HelpTxt1, '=', '0123456789');

      IF (HelpTxt1 = '') OR (HelpTxt2 = '') THEN EXIT;

      EVALUATE(HelpDec1, COPYSTR(HelpTxt1, 1, STRPOS(HelpTxt1, HelpTxt2)-1));
      IF HelpDec1 = 0 THEN EXIT;

      CASE HelpTxt2 OF
        'D':
          "Time Quantity" := 365 / HelpDec1;
        'W':
          "Time Quantity" := 52 / HelpDec1;
        'M':
          "Time Quantity" := 12 / HelpDec1;
        'K','Q':
          "Time Quantity" := 4 / HelpDec1;
        'J','Y':
          "Time Quantity" := 1 / HelpDec1;
      END;

      VALIDATE("Time Quantity");
    END;

    PROCEDURE CopyEntry@1100485008();
    VAR
      JobEntryRec@1210190000 : Record 11072005;
      JobEntryFrm@1210190001 : Page 11072005;
      lvSelection@1210190002 : Integer;
      lvText000@1210190003 : TextConst 'ENU=Job Entry,Service Entry';
      ServEntryRec@1210190005 : Record 11012819;
      ServEntryFrm@1210190004 : Page 11012826;
      lvCompName@1210190006 : Text[50];
    BEGIN
      EXIT;  //not implemented for RAW
    END;

    PROCEDURE GetDefaultsPlantType@1100485010();
    VAR
      PlantTypeRec@1100485000 : Record 11012551;
    BEGIN
      PlantTypeRec.GET("Plant Type");
      Description := PlantTypeRec.Description;
      "Unit of Measure" := PlantTypeRec."Unit of Measure";
      "Cost Object Plant" := PlantTypeRec."Cost Object";
      Weight := PlantTypeRec.Weight;
      CLEAR("Plant Agreement");
      ClearFields(2); //Buyback
      ClearFields(3); //Discount
      DeterminePlantPrice;
    END;

    PROCEDURE DeterminePlantPrice@1100485011();
    VAR
      EstRec@1100525007 : Record 11012151;
      SearchRateCu@1100485000 : Codeunit 11012567;
      RefDate@1100485001 : Date;
      RentalType@1100525006 : Option;
      DummyPlantPriceType@1100525005 : Option;
      DummyRentalType@1100525004 : Option;
      PlantDiscount@1100525003 : Decimal;
      PlantPrice@1100525002 : Decimal;
      BuyBackPrice@1100525001 : Decimal;
      PlantTypeRec@1100525000 : Record 11012551;
    BEGIN
      IF ("Plant Type" = '') OR "Plant Agreement" THEN
        EXIT;

      IF NOT EstRec.GET("Estimate No.") THEN
        EstRec.INIT;

      IF "Start Rental Period" <> 0D THEN
        RefDate := "Start Rental Period"
      ELSE BEGIN
        IF Estimate."Reference Date (Rate)" <> 0D THEN
          RefDate := Estimate."Reference Date (Rate)"
        ELSE
          RefDate := TODAY;
      END;

      //DP01047.sn
      RentalType := -1;  //0=rental, 1=sales, 2=buy-back, 3= hours
      PlantTypeRec.GET("Plant Type");
      IF EstRec."Plant Rates in Hours" AND (PlantTypeRec."Rental Type" <> PlantTypeRec."Rental Type"::"Sales/Buy Back") THEN
        RentalType := 3;

      IF EstRec."Estimate Type" = EstRec."Estimate Type"::Cost THEN
        PlantPrice := SearchRateCu.CostRateFromEstimate("Plant Type",'', EstRec."Plant Location",RefDate,RentalType,"Plant Price Type");
      IF EstRec."Estimate Type" = EstRec."Estimate Type"::Sales THEN
        PlantPrice := SearchRateCu.SalesRateFromEstimate(
          "Plant Type",'',EstRec."Plant Location",EstRec."Customer No.",EstRec."Kind of Plant Rate"+1,RefDate,RentalType,"Plant Price Type");
      IF RentalType = 1 THEN BEGIN
        DummyRentalType := 2;
        BuyBackPrice := SearchRateCu.SalesRateFromEstimate("Plant Type",'',EstRec."Plant Location",EstRec."Customer No.",0,RefDate,DummyRentalType,DummyPlantPriceType);
      END;
      PlantDiscount := SearchRateCu.SalesDiscountFromEstimate("Plant Type",'',EstRec."Plant Location",EstRec."Customer No.",RefDate,RentalType);
      VALIDATE("Buy Back Price", BuyBackPrice * (100-PlantDiscount)/100);
      IF EstRec."Estimate Type" = EstRec."Estimate Type"::Cost THEN
        VALIDATE("Plant Price", PlantPrice);
      IF EstRec."Estimate Type" = EstRec."Estimate Type"::Sales THEN
        VALIDATE("Plant Price", PlantPrice * (100-PlantDiscount)/100);
      IF NOT EstimateMgmt.IsLineDiscountMaterialOnly THEN
        VALIDATE("Gross Price","Plant Price");
      //DP01047.en
    END;

    PROCEDURE GetDefaultsCostObject@1100485012(lvCostType@1100485000 : 'Labor,Material,Subcontracting,Plant,Sundry';lvCostObject@1100485001 : Code[20]);
    VAR
      lvDimValRec@1100485002 : Record 349;
      lvEstPurchActRec@1100485003 : Record 11012366;
    BEGIN
      EstSetup.GET;
      IF NOT EstSetup."Default Purchase Action" THEN
        EXIT;

      DimMgt.GetDimValueRec(2, lvCostObject, lvDimValRec, TRUE, '');
      lvDimValRec.TESTFIELD(Blocked, FALSE);

      CASE lvCostType OF
        lvCostType::Material: BEGIN

          IF ("Purchase Action Mat." = '') AND (lvDimValRec."Purchase Action" <> '') THEN
            IF NOT lvEstPurchActRec.GET("Estimate No.", lvDimValRec."Purchase Action") THEN
              MESSAGE(Text006, lvDimValRec."Purchase Action","Estimate No.")
            ELSE
              IF lvEstPurchActRec.Status >= lvEstPurchActRec.Status::Applied THEN
                MESSAGE(Text007, FIELDCAPTION("Purchase Action Mat."), FIELDCAPTION("Cost Object Material"),
                                 FORMAT(lvEstPurchActRec.Status))
              ELSE
                VALIDATE("Purchase Action Mat.", lvDimValRec."Purchase Action");

          END;
        lvCostType::Subcontracting: BEGIN

          IF ("Purchase Action Subc." = '') AND (lvDimValRec."Purchase Action" <> '') THEN
            IF NOT lvEstPurchActRec.GET("Estimate No.", lvDimValRec."Purchase Action") THEN
              MESSAGE(Text006, lvDimValRec."Purchase Action","Estimate No.")
            ELSE
              IF lvEstPurchActRec.Status >= lvEstPurchActRec.Status::Applied THEN
                MESSAGE(Text007, FIELDCAPTION("Purchase Action Subc."), FIELDCAPTION("Cost Object Subcontracting"),
                                 FORMAT(lvEstPurchActRec.Status))
              ELSE
                VALIDATE("Purchase Action Subc.", lvDimValRec."Purchase Action");

          END;
        lvCostType::Plant: BEGIN

          IF ("Purchase Action Plant" = '') AND (lvDimValRec."Purchase Action" <> '') THEN
            IF NOT lvEstPurchActRec.GET("Estimate No.", lvDimValRec."Purchase Action") THEN
              MESSAGE(Text006, lvDimValRec."Purchase Action","Estimate No.")
            ELSE
              IF lvEstPurchActRec.Status >= lvEstPurchActRec.Status::Applied THEN
                MESSAGE(Text007, FIELDCAPTION("Purchase Action Subc."), FIELDCAPTION("Cost Object Plant"),
                                 FORMAT(lvEstPurchActRec.Status))
              ELSE
                VALIDATE("Purchase Action Plant", lvDimValRec."Purchase Action");

          END;
      END;
    END;

    PROCEDURE UpdateProjElem@1100525000(lvAction@1100485000 : Integer);
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE GetReferenceData@1100525002(VAR lvRefDate@1100525003 : Date;VAR lvDiscRef1@1100525002 : Code[20];VAR lvDiscRef2@1100525001 : Code[20];lvEstRec@1100525000 : Record 11012151;lvDiscType@1100525004 : 'Purchase,Sales');
    BEGIN
      lvRefDate := ValidateCu.GetRefDateEstimate(lvEstRec);
      ValidateCu.GetRefDiscEstimate(lvEstRec, lvDiscRef1, lvDiscRef2, lvDiscType);
    END;

    PROCEDURE CalcRentalUnits@1100525007();
    VAR
      PlantLocation@1100525000 : Record 11012554;
      RateTypeUsed@1100525002 : Option;
      CalcRentalPeriodsCu@1100525001 : Codeunit 11012568;
    BEGIN
      Estimate.GET("Estimate No.");
      IF Estimate."Plant Location" <> '' THEN
        PlantLocation.GET(Estimate."Plant Location")
      ELSE BEGIN
        PlantLocation.INIT;
        PlantLocation.InitRecord;
      END;

      VALIDATE("Rental Time Units",
        CalcRentalPeriodsCu.NumberRentalPeriods(
          PlantLocation,"Start Rental Period","End Rental Period","Plant Type",'',RateTypeUsed));

      TESTFIELD("Plant Price Type",RateTypeUsed + 1);
    END;

    PROCEDURE ClearFields@1100525004(FieldGroup@1100525000 : 'Material,Plant,BuyBack,Discount');
    BEGIN
      CASE FieldGroup OF
        FieldGroup::Material:
          BEGIN
            CLEAR("Material Price");
            CLEAR("Item No.");
            CLEAR("Cost Object Material");
            CLEAR("Basic Item");
            CLEAR("Vendor (Trade Item)");
            CLEAR("Trade Item");
          END;
        FieldGroup::Plant:
          BEGIN
            CLEAR("Plant Price");
            CLEAR("Plant Type");
            CLEAR("Plant Price Type");
            CLEAR("Cost Object Plant")
          END;
        FieldGroup::BuyBack:
          BEGIN
            CLEAR("Buy Back Price");
            CLEAR("Buy Back %");
          END;
        FieldGroup::Discount:
          BEGIN
            CLEAR("Gross Price");
            CLEAR("Discount %");
          END;
      END;
    END;

    PROCEDURE ChkFieldsEmpty@1100525028(FieldGroup@1100525000 : 'Material,Plant,BuyBack,Discount');
    BEGIN
      CASE FieldGroup OF
        FieldGroup::Material:
          BEGIN
            //dbeekman, Currently not used
            //TESTFIELD("Material Price",0);
            //TESTFIELD("Item No.",0)
          END;
        FieldGroup::Plant:
          BEGIN
            //dbeekman, Currently not used
            //TESTFIELD("Plant Price",0);
            //TESTFIELD("Plant Type",0);
            //TESTFIELD("Plant Price Type",0);
          END;
        FieldGroup::BuyBack:
          BEGIN
            TESTFIELD("Buy Back Price",0);
            TESTFIELD("Buy Back %",0);
          END;
        FieldGroup::Discount:
          BEGIN
            TESTFIELD("Discount %",0);
            TESTFIELD("Gross Price",0);
          END;
      END;
    END;

    PROCEDURE GetAttachedToLineNo@1100525005(Rec2@1100525000 : Record 11125680) : Integer;
    BEGIN
      //not implemented for RAW
      EXIT(0);
    END;

    PROCEDURE GetTotalWeight@1100525009() : Decimal;
    BEGIN
      EXIT(TotalWeight);
    END;

    PROCEDURE GetTotalBuyBack@1100525010() : Decimal;
    BEGIN
      EXIT(TotalBuyBack);
    END;

    PROCEDURE CalcNonIndexedTotals@1100525011();
    BEGIN
      CLEAR(TotalWeight);
      CLEAR(TotalBuyBack);

      IF FINDSET THEN
        REPEAT
          TotalWeight := TotalWeight + "Cumulative Weight";
          TotalBuyBack := TotalBuyBack + "Cumulative Buy Back";
        UNTIL NEXT = 0;
    END;

    PROCEDURE UpdateCumulativeQty@1100525006();
    BEGIN
      CASE "Ignore Part Quantity" OF
        TRUE: "Cumulative Quantity" := Quantity * "Time Quantity";
        FALSE: "Cumulative Quantity" := "Part Quantity" * Quantity * "Time Quantity";
      END;

      CalculateTotals;
    END;

    PROCEDURE SetSkipUpdateLogBook@1100525015(SkipUpdateLogBook2@1100525000 : Boolean);
    BEGIN
      SkipUpdateLogBook := SkipUpdateLogBook2;
    END;

    PROCEDURE SetShowMessageOnce@1100525013(ShowMessageOnce2@1100525000 : Boolean);
    BEGIN
      ShowMessageOnce := ShowMessageOnce2;
    END;

    PROCEDURE AddLineFromStandardRecipe@1210190000(iEstimate@1210190006 : Code[20];iElement@1210190007 : Code[20];iRecipeGroup@1210190003 : Code[20];iRecipe@1210190004 : Code[20];iAttachedToLine@1210190010 : Integer;iRecipeType@1210190009 : Integer;iQuantity@1210190008 : Decimal;iSource@1210190011 : Integer);
    VAR
      Recipe@1210190000 : Record 11020581;
      RecipeLine@1210190001 : Record 11020582;
      EstimateLineRAW@1210190002 : Record 11125680;
      CommentLineRAW@1100525000 : Record 11125684;
      NextLineNo@1210190005 : Integer;
    BEGIN
      //db, 29-03-16: assignment based on new recipe table
      SetShowMessageOnce(TRUE);

      EstimateLineRAW.SETRANGE("Estimate No.", iEstimate);
      EstimateLineRAW.SETRANGE("Element No.", iElement);
      IF NOT EstimateLineRAW.FINDLAST THEN;
      NextLineNo := EstimateLineRAW."Line No.";

      Recipe.GET(iRecipeGroup, iRecipe);
      Recipe.TESTFIELD(Blocked, FALSE);

      RecipeLine.RESET;
      RecipeLine.SETRANGE("Recipe Group", iRecipeGroup);
      RecipeLine.SETRANGE(Recipe, iRecipe);

      IF RecipeLine.FINDSET THEN BEGIN
        REPEAT
          NextLineNo := NextLineNo + 10000;

          INIT;
          "Estimate No." := iEstimate;
          VALIDATE("Element No.", iElement);
          "Line No." := NextLineNo;
          INSERT(TRUE);

          Source := iSource;
          "Recipe Type" := iRecipeType;
          "Recipe Group" := iRecipeGroup;
          "Recipe No." := iRecipe;
          "Attached to Recipe Line" := iAttachedToLine;

          "Project No." := RecipeLine."Project No.";
          Element := RecipeLine.Element;
          "Project Planning Activity Code" := RecipeLine."Project Planning Activity Code";
          "Ignore Part Quantity" := RecipeLine."Ignore Recipe Quantity";
          Quantity := RecipeLine.Quantity;
          "Time Quantity" := RecipeLine."Time Quantity";
          VALIDATE("Part Quantity", iQuantity);
          "Unit of Time" := RecipeLine."Unit of Time";
          "Line Status" := RecipeLine."Line Status";
          "Unit of Measure" := RecipeLine."Unit of Measure";
          "Norm Group" := RecipeLine."Norm Group";
          "Sub Operation Code" := RecipeLine."Sub Operation Code";
          IF RecipeLine."Cost Type (Hours)" = RecipeLine."Cost Type (Hours)"::Labor THEN BEGIN
             Norm := RecipeLine.Norm;
            "Production Rate" := RecipeLine."Production Rate";
            VALIDATE("Rate Code", RecipeLine."Rate Code");
            "Cost Object Labor" := RecipeLine."Cost Object Labor";
          END;
          IF RecipeLine."Cost Type (Hours)" = RecipeLine."Cost Type (Hours)"::Plant THEN BEGIN
            "Norm (Plant)" := RecipeLine.Norm;
            "Production Rate (Plant)" := RecipeLine."Production Rate";
          END;
          IF RecipeLine."Cost Type (Price)" = RecipeLine."Cost Type (Price)"::Material THEN BEGIN
            "Gross Price" := RecipeLine."Gross Price";
            "Discount %" := RecipeLine."Purchase Discount %";
            "Material Price" := RecipeLine."Nett Cost Price";
            "Cost Object Material" := RecipeLine."Cost Object Price";
          END;
          IF RecipeLine."Cost Type (Price)" = RecipeLine."Cost Type (Price)"::Subcontracting THEN BEGIN
            "Gross Price" := RecipeLine."Gross Price";
            "Discount %" := RecipeLine."Purchase Discount %";
            "Subcontracting Price" := RecipeLine."Nett Cost Price";
             "Cost Object Subcontracting" := RecipeLine."Cost Object Price";
          END;
          IF RecipeLine."Cost Type (Price)" = RecipeLine."Cost Type (Price)"::Plant THEN BEGIN
            "Gross Price" := RecipeLine."Gross Price";
            "Discount %" := RecipeLine."Purchase Discount %";
            "Plant Price" := RecipeLine."Nett Cost Price";
            "Cost Object Plant" := RecipeLine."Cost Object Price";
          END;
          IF RecipeLine."Cost Type (Price)" = RecipeLine."Cost Type (Price)"::Sundry THEN BEGIN
            "Gross Price" := RecipeLine."Gross Price";
            "Discount %" := RecipeLine."Purchase Discount %";
            "Sundry Price" := RecipeLine."Nett Cost Price";
            "Cost Object Sundry" := RecipeLine."Cost Object Price";
          END;
          "Price Reference Date" := RecipeLine."Price Reference Date";
          "Cost Component" := RecipeLine."Cost Component";
          "Item No." := RecipeLine."Item No.";
          "Basic Item" := RecipeLine."Basic Item";
          "Trade Item" := RecipeLine."Trade Item";
          "Vendor (Trade Item)" := RecipeLine."Vendor (Trade Item)";
          Manufacturer := RecipeLine.Manufacturer;
          Length := RecipeLine.Length;
          Width := RecipeLine.Width;
          Height := RecipeLine.Height;
          "External Text" := RecipeLine."External Text";
          "External Text Block" := RecipeLine."External Text Block";
          "Internal Text" := RecipeLine."Internal Text";
          "Internal Text Block" := RecipeLine."Internal Text Block";
          "Purchase Route Reference" := RecipeLine."Purchase Route Reference";
          "Document No." := RecipeLine."Document No.";
          "Price Agreement" := RecipeLine."Price Agreement";
          "Norm Agreement" := RecipeLine."Norm Agreement";
          Vendor := RecipeLine.Vendor;
          Subcontractor := RecipeLine.Subcontractor;
          "Plant Type" := RecipeLine."Plant Type";
          IF RecipeLine."VAT Prod. Posting Group" <> '' THEN
            VALIDATE("VAT Prod. Posting Group", RecipeLine."VAT Prod. Posting Group");
          Description := RecipeLine.Description;  //disturbed by validate (rate code)

          CalculateTotals;
          MODIFY;
          CommentLineRAW.CopyCommentRecipeToEstLine(RecipeLine."Recipe Group", RecipeLine.Recipe, RecipeLine."Line No.", Rec);  //DP01086
        UNTIL RecipeLine.NEXT = 0;
      END;
    END;

    PROCEDURE CheckRecipeTotals@1210190001();
    VAR
      MainRec@1210190000 : Record 11125680;
      OldQuan@1210190001 : Decimal;
      NewQuan@1210190002 : Decimal;
    BEGIN
      //X001
      IF "Recipe Type" <> "Recipe Type"::"Recipe Header" THEN EXIT;

      IF xRec.Quantity = 0 THEN
        OldQuan := 1
      ELSE
        OldQuan := xRec.Quantity;
      IF Quantity = 0 THEN
        NewQuan := 1
      ELSE
        NewQuan := Quantity;

      MainRec.SETRANGE("Estimate No.", "Estimate No.");
      MainRec.SETRANGE("Element No.", "Element No.");
      MainRec.SETRANGE("Recipe Type", MainRec."Recipe Type"::"Recipe Line");
      MainRec.SETRANGE("Recipe Group", "Recipe Group");
      MainRec.SETRANGE("Recipe No.", "Recipe No.");
      MainRec.SETRANGE("Attached to Recipe Line", "Line No.");
      IF MainRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          MainRec.VALIDATE(Quantity, (MainRec.Quantity * NewQuan / OldQuan));
          MainRec.CalculateTotals;
          MainRec.MODIFY(TRUE);
        UNTIL MainRec.NEXT = 0;
      END;
    END;

    PROCEDURE InitPurchaseFields@1100529000();
    BEGIN
      "Purchase Route Reference" := '';
      "Rental Contract No." := '';
      "Rental Contract Copied on" := 0D;

      CLEAR("Purchase Action Mat.");
      CLEAR("Purchase Phase Mat.");
      CLEAR("Purchase Action Status Mat.");
      "Purch. Action Appr. Date Mat." := 0D;
      "Advised Mat." := FALSE;

      CLEAR("Purchase Action Subc.");
      CLEAR("Purchase Phase Subc.");
      CLEAR("Purchase Action Status Subc.");
      "Purch. Action Appr. Date Subc." := 0D;
      "Advised Subc." := FALSE;

      CLEAR("Purchase Action Plant");
      CLEAR("Purchase Phase Plant");
      CLEAR("Purchase Action Status Plant");
      "Purch. Action Appr. Date Plant" := 0D;
      "Advised Plant" := FALSE;
    END;

    PROCEDURE UpdateProjPlanActCode@1210190022();
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE UpdateSurchargePct@1100529300();
    VAR
      EstimateRAWSurcharges@1100529300 : Record 11012236;
      EstimateRAW@1100529301 : Record 11012151;
    BEGIN
      //DP00433
      EstimateRAW.GET("Estimate No.");
      IF EstimateRAWSurcharges.GET("Cost Object Labor","Estimate No.") THEN
          VALIDATE("Surcharge % Labor",EstimateRAWSurcharges."Surcharge %")
      ELSE
        VALIDATE("Surcharge % Labor", EstimateRAW."Surcharge % Labor");

      IF EstimateRAWSurcharges.GET("Cost Object Material","Estimate No.") THEN
          VALIDATE("Surcharge % Material", EstimateRAWSurcharges."Surcharge %")
      ELSE
        VALIDATE("Surcharge % Material", EstimateRAW."Surcharge % Material");


      IF EstimateRAWSurcharges.GET("Cost Object Subcontracting","Estimate No.") THEN
          VALIDATE("Surcharge % Subcontracting", EstimateRAWSurcharges."Surcharge %")
      ELSE
        VALIDATE("Surcharge % Subcontracting", EstimateRAW."Surcharge % Subcontracting");

      IF EstimateRAWSurcharges.GET("Cost Object Plant","Estimate No.") THEN
          VALIDATE("Surcharge % Plant", EstimateRAWSurcharges."Surcharge %")
      ELSE
        VALIDATE("Surcharge % Plant", EstimateRAW."Surcharge % Plant");
    END;

    PROCEDURE InsertSurcharge@1100529301();
    VAR
      Estimate@1100529300 : Record 11012151;
    BEGIN
      //DP00433
      Estimate.GET("Estimate No.");
      "Surcharge % Labor" := Estimate."Surcharge % Labor";
      "Surcharge % Material" := Estimate."Surcharge % Material";
      "Surcharge % Subcontracting" := Estimate."Surcharge % Subcontracting";
      "Surcharge % Plant" := Estimate."Surcharge % Plant";
    END;

    PROCEDURE SetFilterZeroLinesByUser@1100525025(VAR EstimateLine@1100525002 : Record 11125680);
    VAR
      UserSetup@1100525000 : Record 91;
    BEGIN
      //C025240
      WITH EstimateLine DO BEGIN
        UserSetup.GET(USERID);
        IF UserSetup."Hide Zero Lines" = FALSE THEN BEGIN
          UserSetup."Hide Zero Lines" := TRUE;
        END ELSE BEGIN
          UserSetup."Hide Zero Lines" := FALSE;
        END;
        UserSetup.MODIFY;
      END;
      GetFilterZeroLinesByUser(EstimateLine);
    END;

    PROCEDURE GetFilterZeroLinesByUser@1100525012(VAR EstimateLine@1100525002 : Record 11125680);
    VAR
      UserSetup@1100525001 : Record 91;
      EstRec@1100525000 : Record 11012151;
    BEGIN
      //C025240
      WITH EstimateLine DO BEGIN
        UserSetup.GET(USERID);
        IF UserSetup."Hide Zero Lines" = FALSE THEN BEGIN
          SETRANGE(Quantity);
        END ELSE BEGIN
          SETFILTER(Quantity, '<>%1', 0);
        END;
      END;
    END;

    PROCEDURE CheckHideZeroLines@1100525008();
    VAR
      UserSetup@1100525000 : Record 91;
    BEGIN
      //C025240
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Hide Zero Lines", FALSE);
    END;

    LOCAL PROCEDURE CheckEstLineAllowedForPercElements@1100529001();
    VAR
      FieldNoPercentage@1100529000 : Integer;
    BEGIN
      //C026965
      IF NOT IsEstimateLineForPercentage(FieldNoPercentage) THEN
        EXIT;
      Estimate.GET("Estimate No.");
      CASE FieldNoPercentage OF
        Estimate.FIELDNO("Percentage (Surcharge)"):
          IF Estimate."Percentage (Surcharge)" <> 0 THEN
            ERROR(Text022, Estimate.FIELDCAPTION("Percentage (Surcharge)"), FIELDCAPTION("Element No."), "Element No.");
         Estimate.FIELDNO("Percentage (Profit/Risk)"):
          IF Estimate."Percentage (Profit/Risk)" <> 0 THEN
            ERROR(Text022, Estimate.FIELDCAPTION("Percentage (Profit/Risk)"), FIELDCAPTION("Element No."), "Element No.");
      END;
    END;

    LOCAL PROCEDURE IsEstimateLineForPercentage@1100529002(VAR FieldNoPercentage@1100529000 : Integer) : Boolean;
    VAR
      EstimateRAWSetup@1100529001 : Record 11125673;
    BEGIN
      //C026965
      FieldNoPercentage := 0;
      IF ("Element No." <> '') AND (NOT "Summary Line") THEN BEGIN
        EstimateRAWSetup.GET;
        CASE "Element No." OF
          EstimateRAWSetup."Element No.(Surcharge)":
            FieldNoPercentage := Estimate.FIELDNO("Percentage (Surcharge)");
          EstimateRAWSetup."Element No.(Profit/Risc)":
            FieldNoPercentage :=Estimate.FIELDNO("Percentage (Profit/Risk)");
        END;
      END;
      EXIT(FieldNoPercentage <> 0);
    END;

    BEGIN
    END.
  }
}

