OBJECT Table 11125683 Constr. Spec. Act. Line (RAW)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Constr. Spec. Activity Line (RAW);
  }
  FIELDS
  {
    { 5   ;   ;Part Group          ;Code10        ;TableRelation="Estimate Group".No. WHERE (Type=CONST(Part));
                                                   CaptionML=ENU=Part Group }
    { 10  ;   ;Activity            ;Code20        ;CaptionML=ENU=Activity }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 30  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 40  ;   ;Recipe Group        ;Code10        ;TableRelation="Recipe Group".No.;
                                                   OnValidate=BEGIN
                                                                IF ("Recipe Group" = '') AND (Recipe <> '') THEN BEGIN
                                                                  Recipe := '';
                                                                  "Rate Code" := '';
                                                                  "Sub Operation Code" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Recipe Group }
    { 50  ;   ;Recipe              ;Code20        ;TableRelation="Base Recipe".No. WHERE (Recipe Group=FIELD(Recipe Group));
                                                   OnValidate=VAR
                                                                RecipeRec@1210190000 : Record 11020581;
                                                              BEGIN
                                                                IF (Recipe <> xRec.Recipe) AND (Recipe <> '') THEN BEGIN
                                                                  RecipeRec.GET("Recipe Group", Recipe);
                                                                  RecipeRec.TESTFIELD(Blocked, FALSE);
                                                                  Description := RecipeRec.Description;
                                                                  "Unit of Measure" := RecipeRec."Unit of Measure";
                                                                  "Rate Code" := '';
                                                                  "Sub Operation Code" := '';
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Recipe }
    { 60  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::Item);
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 70  ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::"Basic Item");
                                                              END;

                                                   CaptionML=ENU=Basic Item }
    { 80  ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::"Trade Item");
                                                              END;

                                                   CaptionML=ENU=Trade Item }
    { 90  ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=VAR
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") AND ("Vendor (Trade Item)" <> '') THEN BEGIN
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF lvExecValidate THEN BEGIN
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item")
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 100 ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Manufacturer }
    { 110 ;   ;Time Quantity       ;Decimal       ;InitValue=1;
                                                   CaptionML=ENU=Time Quantity;
                                                   BlankZero=Yes }
    { 120 ;   ;Unit of Time        ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=ENU=Unit of Time }
    { 130 ;   ;Quantity            ;Decimal       ;CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 140 ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=ENU=Unit of Measure }
    { 150 ;   ;Cost Object Labor   ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Labor),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                FillDescriptionFromCostObject("Cost Object Labor",xRec."Cost Object Labor");
                                                              END;

                                                   CaptionML=ENU=Cost Object Labor }
    { 160 ;   ;Cost Object Price   ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=FILTER(Material..Sundry),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                FillDescriptionFromCostObject("Cost Object Price",xRec."Cost Object Price");
                                                              END;

                                                   CaptionML=ENU=Cost Object Price }
    { 170 ;   ;Sub Operation Code  ;Code20        ;TableRelation="Sub Operation".Code;
                                                   OnValidate=VAR
                                                                SubOperRec@1210190001 : Record 11012166;
                                                                OperRec@1210190000 : Record 11012165;
                                                              BEGIN
                                                                {
                                                                IF SubOperRec.GET("Sub Operation Code") THEN BEGIN
                                                                  SubOperRec.TESTFIELD(Expired,FALSE);
                                                                  IF OperRec.GET(SubOperRec.Operation) THEN BEGIN
                                                                    IF ("Cost Object Labor" = '') OR (OldSubOperationDefault = TRUE) THEN BEGIN
                                                                      VALIDATE("Cost Object Labor", OperRec."Cost Object");
                                                                      CheckCostObject("Cost Object Labor",FALSE);
                                                                    END;
                                                                    IF OperRec."Rate Code" <> '' THEN
                                                                      VALIDATE("Rate Code", OperRec."Rate Code");
                                                                  END;
                                                                END;
                                                                ProcessSubOperation;
                                                                }
                                                              END;

                                                   CaptionML=ENU=Sub Operation Code }
    { 180 ;   ;Rate Code           ;Code10        ;TableRelation="Rate by Group"."Rate Code";
                                                   OnValidate=BEGIN
                                                                CheckRateCode(0);
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckRateCode(1);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Rate Code }
    { 190 ;   ;Norm                ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> FIELDNO("Production Rate") THEN
                                                                  IF Norm <> 0 THEN
                                                                    "Production Rate" := 1 / Norm
                                                                  ELSE
                                                                    "Production Rate" := 0;
                                                              END;

                                                   CaptionML=ENU=Norm;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 195 ;   ;Production Rate     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Production Rate" <> 0 THEN
                                                                  VALIDATE(Norm, 1 / "Production Rate")
                                                                ELSE
                                                                  VALIDATE(Norm,1);
                                                              END;

                                                   CaptionML=ENU=Production Rate;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 200 ;   ;Nett Cost Price     ;Decimal       ;OnValidate=BEGIN
                                                                CalculateDiscount(Rec,FALSE);
                                                              END;

                                                   CaptionML=ENU=Nett Cost Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 210 ;   ;Gross Price         ;Decimal       ;OnValidate=BEGIN
                                                                CalculateNettPrice;
                                                              END;

                                                   CaptionML=ENU=Gross Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 220 ;   ;Purchase Discount % ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Purchase Discount %") THEN
                                                                  TESTFIELD("Gross Price");

                                                                CalculateNettPrice;
                                                              END;

                                                   CaptionML=ENU=Purchase Discount %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 230 ;   ;Nett Sales Price    ;Decimal       ;OnValidate=BEGIN
                                                                CalculateDiscount(Rec,TRUE);
                                                              END;

                                                   CaptionML=ENU=Nett Sales Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 240 ;   ;Sales Discount %    ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Sales Discount %") THEN
                                                                  TESTFIELD("Gross Price");

                                                                IF "Sales Discount %"<> 0 THEN BEGIN
                                                                  EstSetup.GET;
                                                                  EstSetup.TESTFIELD("Item Sales Price Based On", EstSetup."Item Sales Price Based On"::GrossMin);
                                                                END;
                                                                CalculateNettPrice;
                                                              END;

                                                   CaptionML=ENU=Sales Discount %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 250 ;   ;Cost Type (Price)   ;Option        ;InitValue=Material;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Cost Type (Price)") THEN BEGIN
                                                                  EstSetup.GET;
                                                                  IF "Cost Type (Price)" <> "Cost Type (Price)"::" " THEN BEGIN
                                                                    TESTFIELD("Item No.", '');
                                                                    TESTFIELD("Basic Item", '');
                                                                    TESTFIELD("Trade Item", '');
                                                                    TESTFIELD("Plant Type", '');
                                                                  END ELSE BEGIN
                                                                    "Cost Object Price" := '';
                                                                  END;
                                                                  IF "Cost Type (Price)" = "Cost Type (Price)"::Material THEN
                                                                     VALIDATE("Cost Object Price", EstSetup."Absence Value Material");
                                                                  IF "Cost Type (Price)" = "Cost Type (Price)"::Subcontracting THEN
                                                                     VALIDATE("Cost Object Price", EstSetup."Absence Value Subcontracting");
                                                                  IF "Cost Type (Price)" = "Cost Type (Price)"::Plant THEN
                                                                     VALIDATE("Cost Object Price", EstSetup."Absence Value Plant");
                                                                  IF "Cost Type (Price)" = "Cost Type (Price)"::Sundry THEN
                                                                     VALIDATE("Cost Object Price", EstSetup."Absence Value Sundry Cost");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Type (Price);
                                                   OptionCaptionML=ENU=" ,Material,Subcontracting,Plant,Sundry";
                                                   OptionString=[ ,Material,Subcontracting,Plant,Sundry] }
    { 260 ;   ;Cost Type (Hours)   ;Option        ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Cost Type (Hours)") THEN BEGIN
                                                                  IF "Cost Type (Hours)" <> "Cost Type (Hours)"::Labor THEN BEGIN
                                                                    EstSetup.GET;
                                                                    EstSetup.TESTFIELD("Plant Rates in Hours",TRUE);
                                                                    VALIDATE("Rate Code", '');
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Type (Hours);
                                                   OptionCaptionML=ENU=Labor,,,Plant;
                                                   OptionString=Labor,,,Plant }
    { 270 ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   OnValidate=BEGIN
                                                                IF ("Plant Type" <> xRec."Plant Type") AND ("Plant Type" <> '') THEN BEGIN
                                                                  IF "Cost Type (Price)" <> "Cost Type (Price)"::Plant THEN
                                                                    CheckCostTypePriceAllowed;
                                                                  GetDefaultsPlantType;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Plant Type }
    { 271 ;   ;Plant Price Type    ;Option        ;CaptionML=ENU=Plant Price Type;
                                                   OptionCaptionML=ENU=" ,Day,Week,,Month,,,,,Hour";
                                                   OptionString=[ ,Day,Week,,Month,,,,,Hour];
                                                   Editable=No }
    { 272 ;   ;Start Rental Period ;Date          ;OnValidate=BEGIN
                                                                CalcRentalUnits;
                                                              END;

                                                   CaptionML=ENU=Start Rental Period }
    { 273 ;   ;End Rental Period   ;Date          ;OnValidate=BEGIN
                                                                CalcRentalUnits;
                                                              END;

                                                   CaptionML=ENU=End Rental Period }
    { 274 ;   ;Rental Period Formula;DateFormula  ;OnValidate=VAR
                                                                EstimateMgmt@1100525000 : Codeunit 11012232;
                                                              BEGIN
                                                                IF FORMAT("Rental Period Formula") <> '' THEN BEGIN
                                                                  VALIDATE("Time Quantity",EstimateMgmt.ConvPlantCalcPeriod("Rental Period Formula","Plant Price Type"));
                                                                END ELSE BEGIN
                                                                  IF "Rental Time Units" <> 0 THEN
                                                                    VALIDATE("Time Quantity","Rental Time Units")
                                                                  ELSE
                                                                    VALIDATE("Time Quantity",1);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Rental Period Formula }
    { 275 ;   ;Rental Time Units   ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Rental Period Formula");
                                                              END;

                                                   CaptionML=ENU=Rental Time Units;
                                                   BlankZero=Yes }
    { 1000;   ;Defi Code Position 1;Code10        ;CaptionML=ENU=Defi Code Position 1 }
    { 1001;   ;Defi Code Position 2;Code10        ;CaptionML=ENU=Defi Code Position 2 }
    { 1002;   ;Defi Code Position 3;Code10        ;CaptionML=ENU=Defi Code Position 3 }
    { 1003;   ;Defi Code Position 4;Code10        ;CaptionML=ENU=Defi Code Position 4 }
    { 1004;   ;Defi Code Position 5;Code10        ;CaptionML=ENU=Defi Code Position 5 }
    { 1005;   ;Defi Code Position 6;Code10        ;CaptionML=ENU=Defi Code Position 6 }
  }
  KEYS
  {
    {    ;Part Group,Activity,Line No.            ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EstSetup@1100525004 : Record 11012150;
      ItemRec@1100525003 : Record 27;
      BasicItemRec@1100525002 : Record 11012316;
      TradeItemRec@1100525001 : Record 11012317;
      ItemTypeOpt@1100525000 : 'Item,Basic Item,Trade Item,Trade Vendor';

    PROCEDURE ValidateItem@3(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item');
    VAR
      DummyDec@1210190000 : Decimal;
      DummyDate@1210190002 : Date;
      DummyCode@1100485000 : Code[20];
      Desc1Txt@1210190001 : Text[50];
      Desc2Txt@1210190004 : Text[50];
      lvCostObject@1210190003 : Code[20];
      lvRefDate@1100485001 : Date;
      ValidateCu@1100525000 : Codeunit 11012033;
    BEGIN
      lvRefDate := ValidateCu.CheckRefDateLevel('');

      ValidateCu.ValidateItem(LTypeArtOpt,"Trade Item","Item No.",Manufacturer,"Vendor (Trade Item)",
                              "Basic Item",lvCostObject,Desc1Txt,"Unit of Measure",DummyDec,
                              DummyDec,DummyDate,DummyDec,Desc2Txt,DummyCode,
                              DummyCode,DummyCode,lvRefDate,'');
      IF Desc2Txt = '' THEN
        Description := Desc1Txt
      ELSE
        Description := COPYSTR((Desc1Txt + '\' + Desc2Txt), 1, MAXSTRLEN(Description));

      IF (lvCostObject <> '') AND (STRLEN(lvCostObject) <= MAXSTRLEN("Cost Object Price")) THEN
        "Cost Object Price" := lvCostObject;

      IF "Sub Operation Code" <> '' THEN
        Norm := 0;

      CASE LTypeArtOpt OF
        LTypeArtOpt::Item:
          BEGIN
            IF NOT ItemRec.GET("Item No.") THEN ItemRec.INIT;
            ItemRec.TESTFIELD(Blocked,FALSE);
            VALIDATE("Sub Operation Code", ItemRec."Sub Operation Code");
          END;
        LTypeArtOpt::"Basic Item":
          BEGIN
            IF NOT BasicItemRec.GET(Manufacturer, "Basic Item") THEN BasicItemRec.INIT;
            BasicItemRec.TESTFIELD(Expired,FALSE);
            VALIDATE("Sub Operation Code", BasicItemRec."Sub Operation Code");
          END;
        LTypeArtOpt::"Trade Item":
          BEGIN
            IF NOT TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN TradeItemRec.INIT;
            TradeItemRec.TESTFIELD(Expired,FALSE);
            VALIDATE("Sub Operation Code", TradeItemRec."Sub Operation Code");
          END;
      END;
    END;

    PROCEDURE FillDescriptionFromCostObject@1210190005(ICostObject@1210190000 : Code[20];IxCostObject@1210190001 : Code[20]);
    VAR
      DimMgt@1100525000 : Codeunit 408;
      DimValRec@1100525001 : Record 349;
    BEGIN
      IF (ICostObject <> '') AND ((ICostObject <> IxCostObject) OR (Description = '')) AND
         ("Item No." = '') AND ("Basic Item" = '') AND ("Trade Item" = '') THEN BEGIN
        IF Description = '' THEN BEGIN
          DimMgt.GetDimValueRec(2, ICostObject, DimValRec, FALSE,'');
          Description := DimValRec.Name;
          EXIT;
        END;
        IF IxCostObject <> '' THEN BEGIN
          DimMgt.GetDimValueRec(2, IxCostObject, DimValRec, FALSE,'');
          IF Description = DimValRec.Name THEN BEGIN
            DimMgt.GetDimValueRec(2, ICostObject, DimValRec, FALSE,'');
            IF DimValRec.Name <> '' THEN
              Description := DimValRec.Name;
          END
        END;
      END;
    END;

    PROCEDURE CheckRateCode@1100485006(lvAction@1210190000 : Integer);
    VAR
      EstSetup@1100485000 : Record 11012150;
      RateGroupRec@1210190002 : Record 11012162;
      BudgetRateRec@1210190003 : Record 11012000;
      RateType@1100485001 : 'Rate Group,Budget Rate';
    BEGIN
      EstSetup.GET;
      RateType := EstSetup."Rates Based On";

      IF lvAction = 0 THEN BEGIN
        IF "Rate Code" <> '' THEN BEGIN
          IF RateType = RateType::"Budget Rate" THEN BEGIN
            BudgetRateRec.SETRANGE(Code, "Rate Code");
            BudgetRateRec.FINDFIRST;
          END ELSE
            RateGroupRec.GET('', "Rate Code");
        END;
      END ELSE BEGIN
        IF RateType = RateType::"Budget Rate" THEN BEGIN
          IF PAGE.RUNMODAL(PAGE::"Budget Rates", BudgetRateRec) = ACTION::LookupOK THEN
            VALIDATE("Rate Code", BudgetRateRec.Code);
        END ELSE BEGIN
          RateGroupRec.SETFILTER("Rate Group", '%1', '');
          IF PAGE.RUNMODAL(PAGE::"Rates per Group",RateGroupRec) = ACTION::LookupOK THEN
            VALIDATE("Rate Code", RateGroupRec."Rate Code");
        END;
      END;
    END;

    PROCEDURE CalculateNettPrice@13();
    BEGIN
      VALIDATE("Nett Cost Price","Gross Price" - (("Gross Price"/100) * "Purchase Discount %"));
      VALIDATE("Nett Sales Price","Gross Price" - (("Gross Price"/100) * "Sales Discount %"));
    END;

    PROCEDURE CalculateDiscount@1210190012(VAR ActivityLineRec@1100485000 : Record 11125683;SalesBln@1100525000 : Boolean);
    BEGIN
      WITH ActivityLineRec DO BEGIN
        IF "Gross Price" <> 0 THEN BEGIN
          IF  ("Item No." + "Basic Item" + "Trade Item" = '') AND ("Purchase Discount %" = 0) THEN BEGIN
            "Gross Price" := "Nett Cost Price";
            IF SalesBln = FALSE THEN
              VALIDATE("Nett Sales Price","Gross Price" - (("Gross Price"/100) * "Sales Discount %"));
          END ELSE BEGIN
            IF SalesBln THEN
              "Sales Discount %" := (("Gross Price" - "Nett Sales Price") / "Gross Price") * 100
            ELSE
              "Purchase Discount %" := (("Gross Price" - "Nett Cost Price") / "Gross Price") * 100;
          END;
        END ELSE BEGIN
          IF NOT SalesBln THEN BEGIN
            IF "Purchase Discount %" = 0 THEN BEGIN
              "Gross Price" := "Nett Cost Price";
              VALIDATE("Nett Sales Price","Gross Price" - (("Gross Price"/100) * "Sales Discount %"));
            END;
          END;
          IF "Purchase Discount %" <> 100 THEN BEGIN
            IF NOT (("Item No." + "Basic Item" + "Trade Item" = '') AND ("Purchase Discount %" = 0)) THEN
              "Gross Price" := "Nett Cost Price" / ((100 - "Purchase Discount %") / 100);
          END ELSE BEGIN
            "Gross Price" := "Nett Cost Price";
          END;
        END;
      END;
    END;

    PROCEDURE CalculateGrossPrice@1100485007();
    BEGIN
      IF "Purchase Discount %" <> 100 THEN
        "Gross Price" := "Nett Cost Price" * 100 / (100 - "Purchase Discount %");
    END;

    PROCEDURE CheckCostTypePriceAllowed@1100525008();
    BEGIN
      IF "Cost Type (Price)" <> "Cost Type (Price)"::" " THEN BEGIN
        IF ("Plant Type" = '') THEN BEGIN
          //db, 29-12-14: skip check on quantity; init value for set code is 1 to fill cumulative quantity on related lines
          TESTFIELD(Quantity, 0);
        //TESTFIELD("Quantity (Sales)", 0);
        END;
        TESTFIELD("Nett Cost Price", 0);
        TESTFIELD("Nett Sales Price", 0);
      END;
      IF "Item No." + "Basic Item" + "Trade Item" <> '' THEN BEGIN
        TESTFIELD("Plant Type", '');
      END;
      IF "Plant Type" <> '' THEN BEGIN
        TESTFIELD("Item No.", '');
        TESTFIELD("Basic Item", '');
        TESTFIELD("Trade Item", '');
      END;

      "Cost Type (Price)" := "Cost Type (Price)"::" ";
      IF "Item No." + "Basic Item" + "Trade Item" <> '' THEN
        "Cost Type (Price)" := "Cost Type (Price)"::Material;
      IF "Plant Type" <> '' THEN
        "Cost Type (Price)" := "Cost Type (Price)"::Plant;
    END;

    PROCEDURE GetDefaultsPlantType@1100485010();
    VAR
      PlantTypeRec@1100485000 : Record 11012551;
    BEGIN
      PlantTypeRec.GET("Plant Type");
      Description := PlantTypeRec.Description;
      "Unit of Measure" := PlantTypeRec."Unit of Measure";
      "Cost Object Price" := PlantTypeRec."Cost Object";
      DeterminePlantPrice;
    END;

    PROCEDURE DeterminePlantPrice@1100485011();
    VAR
      SearchRateCu@1100485000 : Codeunit 11012567;
      RefDate@1100485001 : Date;
      RentalType@1100525007 : Option;
      DummyPlantPriceType@1100525006 : Option;
      DummyRentalType@1100525005 : Option;
      PlantDiscount@1100525004 : Decimal;
      SalesPrice@1100525003 : Decimal;
      BuyBackPrice@1100525002 : Decimal;
      PlantTypeRec@1100525001 : Record 11012551;
    BEGIN
      IF ("Plant Type" = '') THEN
        EXIT;

      IF "Start Rental Period" <> 0D THEN
        RefDate := "Start Rental Period"
      ELSE
        RefDate := TODAY;

      EstSetup.GET;
      //DP01047.sn
      RentalType := -1;  //0=rental, 1=sales, 2=buy-back, 3= hours
      PlantTypeRec.GET("Plant Type");
      IF EstSetup."Plant Rates in Hours" THEN BEGIN
        "Cost Type (Hours)" := "Cost Type (Hours)"::Plant;
        "Rate Code" := '';
        //InitRateRelatedFields;
        IF (PlantTypeRec."Rental Type" <> PlantTypeRec."Rental Type"::"Sales/Buy Back") THEN
          RentalType := 3;
      END;

      VALIDATE("Nett Cost Price", SearchRateCu.CostRateFromEstimate("Plant Type",'', '',RefDate,RentalType,"Plant Price Type"));
      VALIDATE("Gross Price","Nett Cost Price");
      SalesPrice := SearchRateCu.SalesRateFromEstimate(
        "Plant Type",'','','',EstSetup."Kind of Plant Rate"+1,RefDate,RentalType,"Plant Price Type");
      IF RentalType = 1 THEN BEGIN
        DummyRentalType := 2;
        BuyBackPrice := SearchRateCu.SalesRateFromEstimate("Plant Type",'','','',0,RefDate,DummyRentalType,DummyPlantPriceType);
      END;
      PlantDiscount := SearchRateCu.SalesDiscountFromEstimate("Plant Type",'','','',RefDate,RentalType);
      VALIDATE("Nett Sales Price", SalesPrice * (100-PlantDiscount)/100);
      //VALIDATE("Buy Back Price", BuyBackPrice * (100-PlantDiscount)/100);
      //DP01047.en
    END;

    PROCEDURE CalcRentalUnits@1100525007();
    VAR
      PlantLocation@1100525000 : Record 11012554;
      RateTypeUsed@1100525002 : Option;
      CalcRentalPeriodsCu@1100525001 : Codeunit 11012568;
    BEGIN
      PlantLocation.INIT;
      PlantLocation.InitRecord;

      VALIDATE("Rental Time Units",
        CalcRentalPeriodsCu.NumberRentalPeriods(
          PlantLocation,"Start Rental Period","End Rental Period","Plant Type",'',RateTypeUsed));

      TESTFIELD("Plant Price Type", RateTypeUsed + 1);
    END;

    BEGIN
    END.
  }
}

