OBJECT Table 11128100 Sales Price Budget Lines
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PSSE;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CheckModifyAllowed(TRUE); //**4PS01.n
               "Creation Date" := TODAY;
               "Last Date Modified" := 0D;
               "Entry No. Project Ledger" := 0;
               Invoiced := FALSE;
               "Source Document" := '';
               "Source Line" := 0;
               "Generated Surcharge Line" := FALSE;

               DetermineChargeable;
               //DetermineVATProdPostingGroup;
               IF "Reference Date" = 0D THEN
                 "Reference Date" := FillReferenceDate;
               CalcSalesAmount; // M19913, 10-08-2010
               CalcCostAmount; // jhoek.200611
             END;

    OnModify=BEGIN
               TESTFIELD(Invoiced,FALSE);
               CheckModifyAllowed(TRUE); //**4PS01.n
               "Last Date Modified" := TODAY;
               CalcSalesAmount; // M19913, 10-08-2010
               CalcCostAmount; // jhoek.200611
             END;

    OnDelete=VAR
               lvJobRec@1100485000 : Record 11072003;
             BEGIN
               // 15-01-2006: Melding weggehaald, want mutaties kunnen wel opnieuw worden aangemaakt.
               //             Was ingebouwd voor Controlec, niet meer nodig.
               //IF "Entry No. Project Ledger" <> 0 THEN
               //  IF NOT CONFIRM(Text007, TRUE) THEN
               //    ERROR('');

               IF NOT gDelCompleteProject THEN BEGIN  //*C001924.n
                 IF lvJobRec.GET("Project No.") THEN BEGIN                                           //**4PS02.n
                   IF lvJobRec."Project Status" < lvJobRec."Project Status"::Archived THEN BEGIN     //**4PS02.n
                     CheckModifyAllowed(TRUE); //**4PS01.n
                     CheckSourceDocument;  //db, 29-08-07
                   //20-11-2006: Bij geboekte uren gaat bij het verwijderen de link tussen projectpost kosten en projectpost opbrengsten verloren
                     IF ("Posted Hour Line No." <> 0) AND Invoiced THEN
                       IF NOT CONFIRM(Text007, TRUE) THEN
                         ERROR('');
                     TESTFIELD(Invoiced, FALSE); //16882
                   END;
                 END;

                 CheckRemovalContribution;  //db, 22-10-09: M16544
               END;

               DeleteCommentLines(); // **4PS MVOS
             END;

    OnRename=BEGIN
               TESTFIELD(Invoiced,FALSE);
               CheckModifyAllowed(TRUE); //**4PS01.n
               "Last Date Modified" := TODAY;
             END;

    CaptionML=ENU=Sales Price Budget Lines;
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   OnValidate=BEGIN
                                                                VALIDATE(Principal); //To determine miscellaneous data which have to be collected from the principal.
                                                              END;

                                                   CaptionML=ENU=Project No.;
                                                   NotBlank=Yes }
    { 11  ;   ;Adjustment          ;Code10        ;TableRelation="Budget Adjustment".No. WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Adjustment }
    { 13  ;   ;Plot No.            ;Code10        ;TableRelation=Plot."Plot No." WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Plot No. }
    { 14  ;   ;House Model         ;Code10        ;TableRelation="House Model".Model WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=House Model }
    { 16  ;   ;Main Group          ;Code20        ;TableRelation="Option Main Group".Code WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Main Group }
    { 17  ;   ;Group               ;Code20        ;TableRelation="Option Group".Code WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Group }
    { 18  ;   ;Sub Group           ;Code20        ;TableRelation="Option Sub Group".Code WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Sub Group }
    { 19  ;   ;Option              ;Code10        ;TableRelation=Option.Option WHERE (Project No.=FIELD(Project No.),
                                                                                      Plot No.=FIELD(Plot No.),
                                                                                      House Model=FIELD(House Model),
                                                                                      Main Group=FIELD(Main Group),
                                                                                      Group=FIELD(Group),
                                                                                      Sub Group=FIELD(Sub Group));
                                                   CaptionML=ENU=Option }
    { 20  ;   ;Principal           ;Code20        ;TableRelation="Project Principal".Principal WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                IF ("Project No." <> xRec."Project No.") OR (Principal <> xRec.Principal) THEN BEGIN
                                                                  IF TransferPrincipalData() THEN BEGIN
                                                                    IF "Budget Line No." <> 0 THEN  //db, 26-06-08: validate error when starting empty sheet from commission
                                                                      VALIDATE("Surcharge %", GetSurcharge);  //db, 23-06-08
                                                                    VALIDATE("Hour Rate Code");
                                                                    //"VAT Prod. Posting Group" := ProjPrincipalRec."VAT Prod. Posting Group"; //RFC 547 old
                                                                    "VAT Prod. Posting Group" := UpdateVatProdPostingGrp;  //RFC 547
                                                                  END;
                                                                  GetBasicPrice;
                                                                END;

                                                                CALCFIELDS("Principal Name"); // jhoek.210611: melding 21543
                                                              END;

                                                   CaptionML=ENU=Principal }
    { 22  ;   ;Principal Name      ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Principal)));
                                                   CaptionML=ENU=Principal Name;
                                                   Description=jhoek.210611: melding 21543;
                                                   Editable=No }
    { 25  ;   ;Commission No.      ;Code20        ;TableRelation=Commission.No. WHERE (Project No.=FIELD(Project No.),
                                                                                       Principal=FIELD(Principal));
                                                   CaptionML=ENU=Commission No. }
    { 40  ;   ;Budget Line No.     ;Integer       ;CaptionML=ENU=Line No. }
    { 50  ;   ;Cost Object         ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=FILTER(<>Revenue),
                                                                                               Global Dimension No.=CONST(2),
                                                                                               Project Filter=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Cost Type");
                                                                IF CheckItemLine() AND ("Cost Type" <> "Cost Type"::Material) THEN
                                                                  ERROR(Text004);

                                                                //GetCostObjectDesc := FALSE; //call 28753  //*31430.o
                                                                SkipGetCostObjectDesc := TRUE;  //*31430.n
                                                                IF TransferCostObjectData() THEN BEGIN
                                                                  //GetCostObjectDesc := TRUE; //call 28753  //*31430.o
                                                                  SkipGetCostObjectDesc := FALSE;  //*31430.n
                                                                  GetDescription;
                                                                  "Unit of Measure" := DimValRec."Unit of Measure";

                                                                  IF ("Cost Object" <> '') AND
                                                                     ("Cost Type" = "Cost Type"::Labor) AND
                                                                     (DimValRec."Wage Component" <> '') AND
                                                                     ("Wage Component" <> DimValRec."Wage Component") THEN
                                                                    VALIDATE("Wage Component", DimValRec."Wage Component");

                                                                  IF (("Cost Object" <> '') AND ("Entry No. Project Ledger" = 0)) OR
                                                                     ("Cost Component" = '') THEN
                                                                    VALIDATE("Cost Component", DimValRec."Cost Component");

                                                                  //**4PS04.sn
                                                                  IF (DimValRec.Element <> '') AND ("Project No." <> '') THEN
                                                                    VALIDATE(Element, DimValRec.Element);
                                                                  //**4PS04.en
                                                                END;

                                                                IF ("Cost Type" <> "Cost Type"::Labor) OR ("Cost Object" = '') THEN BEGIN
                                                                  "Hour Rate Code" := '';
                                                                  "Employee No." := '';
                                                                  "Wage Component" := '';
                                                                  CALCFIELDS("Social Security No.");
                                                                  "From Date" := 0D;
                                                                  "From Time" := 0T; // jhoek.140611
                                                                  "To Date" := 0D;
                                                                END;
                                                                GetBasicPrice;
                                                                "VAT Prod. Posting Group" := UpdateVatProdPostingGrp;  //RFC 547
                                                                //GetCostObjectDesc := FALSE; //call 28753  //31430.o
                                                              END;

                                                   CaptionML=ENU=Cost Object }
    { 55  ;   ;Cost Type           ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Dimension Value"."Cost Type" WHERE (Code=FIELD(Cost Object),
                                                                                                           Global Dimension No.=CONST(2)));
                                                   CaptionML=ENU=Cost Type;
                                                   OptionCaptionML=ENU=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                   Editable=No }
    { 60  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 65  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 70  ;   ;Wage Component      ;Code10        ;TableRelation="Wage Component".Code WHERE (Component Type=FILTER(Hours|Expenses));
                                                   OnValidate=BEGIN
                                                                GetBasicPrice;

                                                                IF ("Wage Component" <> xRec."Wage Component") THEN
                                                                  GetDescription;
                                                              END;

                                                   CaptionML=ENU=Wage Component }
    { 75  ;   ;Description Wage Component;Text30  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Wage Component".Description WHERE (Code=FIELD(Wage Component)));
                                                   CaptionML=ENU=Description Wage Component;
                                                   Editable=No }
    { 80  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                CheckIfTextLine;

                                                                IF "Means No." <> '' THEN
                                                                  UpdateMeansPrice;

                                                                IF CheckItemLine THEN BEGIN
                                                                  ProjRec.GET("Project No.");  //db, 16-06-10: M19385
                                                                  IF UPPERCASE(ValidateCu.GetBaseUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)")) =
                                                                    "Unit of Measure" THEN  //db, 20-12-10: M23993
                                                                    FindSalesPrice;  //db, 28-12-09: M16871
                                                                END;

                                                                CalcSalesAmount; // 06-08-2010, M19882
                                                                CalcCostAmount; // jhoek.200611
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 90  ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure";
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Cost Type");
                                                                //IF CurrFieldNo = FIELDNO("Unit of Measure") THEN
                                                                //db, 24-08-04: conversion required at import job entries if calc.method based on gross price
                                                                  IF ("Cost Type" = "Cost Type"::Material) THEN
                                                                    IF "Unit of Measure" <>  xRec."Unit of Measure" THEN  //db, 10-02-05
                                                                      CheckItemUnitConversion(Rec, xRec);
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;
                                                            END;

                                                   CaptionML=ENU=Unit of Measure }
    { 95  ;   ;Hour Rate Code      ;Code10        ;TableRelation="Hour Rate".Code WHERE (Project Filter=FIELD(Project No.),
                                                                                         Principal Filter=FIELD(Principal),
                                                                                         Service Contract Filter=FILTER(''));
                                                   OnValidate=BEGIN
                                                                IF ("Hour Rate Code" <> xRec."Hour Rate Code") OR
                                                                   ("Project No." <> xRec."Project No.") OR
                                                                   (Principal <> xRec.Principal) OR
                                                                   ("Reference Date" <> xRec."Reference Date")
                                                                THEN BEGIN
                                                                  GetDescription;
                                                                  GetBasicPrice;
                                                                END;

                                                                GetCostPrice;  //db, 21-08-07
                                                              END;

                                                   CaptionML=ENU=Hour Rate Code }
    { 100 ;   ;Basic Price         ;Decimal       ;OnValidate=BEGIN
                                                                CheckIfTextLine;
                                                                IF CurrFieldNo = FIELDNO("Basic Price") THEN
                                                                  "Basic Price Found at" := Text009;
                                                                IF CurrFieldNo = FIELDNO("Gross Price") THEN
                                                                  IF NOT CheckItemLine THEN
                                                                    "Basic Price Found at" := Text009;

                                                                IF ("Basic Price" <> 0) THEN BEGIN
                                                                  GlSetupRec.GET;
                                                                  GlSetupRec.TESTFIELD("Unit-Amount Rounding Precision");
                                                                  "Basic Price" := ROUND("Basic Price",GlSetupRec."Unit-Amount Rounding Precision");
                                                                END;

                                                                IF NOT CheckItemLine THEN
                                                                  IF CurrFieldNo <> FIELDNO("Gross Price") THEN
                                                                //  IF (ROUND("Gross Price" * (100 - "Sales Discount % (Item)")/100)) <> ROUND("Basic Price") THEN
                                                                    IF ROUND("Gross Price" * (100 - "Sales Discount % (Item)")/100 -"Basic Price" ) <> 0 THEN //call C001248
                                                                      VALIDATE("Gross Price", "Basic Price"/((100 - "Sales Discount % (Item)")/100));

                                                                IF "Basic Price" <> xRec."Basic Price" THEN
                                                                  VALIDATE("Surcharge %", GetSurcharge)  //db, 23-06-08
                                                                ELSE
                                                                  VALIDATE("Surcharge %");

                                                                GetSalesDiscount;  //db, 09-07-09
                                                              END;

                                                   CaptionML=ENU=Basic Price;
                                                   BlankZero=Yes;
                                                   Description=voormalig veld Unit Cost;
                                                   AutoFormatType=2 }
    { 105 ;   ;Cost Price          ;Decimal       ;OnValidate=BEGIN
                                                                GetPurchaseDiscount;  //db, 09-07-09
                                                                CalcCostAmount; // jhoek.200611
                                                              END;

                                                   CaptionML=ENU=Cost Price;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 106 ;   ;Cost Amount         ;Decimal       ;CaptionML=ENU=Cost Amount;
                                                   Description=jhoek.200611: melding C-019251;
                                                   Editable=No }
    { 110 ;   ;Surcharge %         ;Decimal       ;OnValidate=BEGIN
                                                                CheckIfTextLine;

                                                                "Sales Price" := "Basic Price" * (1 + ("Surcharge %" / 100));
                                                                VALIDATE("Sales Price");
                                                                VALIDATE("Surcharge Amount");  //db, 08-10-08: M10359
                                                              END;

                                                   CaptionML=ENU=Surcharge %;
                                                   BlankZero=Yes }
    { 115 ;   ;Surcharge Amount    ;Decimal       ;OnValidate=BEGIN
                                                                //db, 08-10-08: M10359
                                                                IF CurrFieldNo = FIELDNO("Surcharge Amount") THEN BEGIN
                                                                  IF "Basic Price" <> 0 THEN BEGIN
                                                                    "Sales Price" := "Basic Price" + "Surcharge Amount";
                                                                    "Surcharge %" := ("Sales Price"/"Basic Price" -1) * 100;
                                                                  END ELSE BEGIN
                                                                    "Surcharge %" := 0;
                                                                  END;
                                                                END ELSE BEGIN
                                                                  "Surcharge Amount" := "Sales Price" - "Basic Price";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Surcharge Amount;
                                                   BlankZero=Yes }
    { 120 ;   ;Sales Price         ;Decimal       ;OnValidate=BEGIN
                                                                CheckIfTextLine;

                                                                IF ExtRec.GET("Project No.", "Extension Contract") THEN
                                                                  IF ExtRec."Settlement Method" = ExtRec."Settlement Method"::"Fixed Price" THEN BEGIN
                                                                    //"Sales Price" := 0;  // 130717 CHANGED in Sales Budget Lines
                                                                  END;
                                                                IF ("Sales Price" <> 0) THEN BEGIN
                                                                  GlSetupRec.GET;
                                                                  GlSetupRec.TESTFIELD("Unit-Amount Rounding Precision");
                                                                  "Sales Price" := ROUND("Sales Price",GlSetupRec."Unit-Amount Rounding Precision");
                                                                END;

                                                                IF CurrFieldNo = FIELDNO("Sales Price") THEN BEGIN
                                                                  IF "Basic Price" <> 0 THEN
                                                                    "Surcharge %" := ("Sales Price"/"Basic Price" -1) * 100
                                                                  ELSE
                                                                    "Surcharge %" := 0;
                                                                  VALIDATE("Surcharge Amount");  //db, 08-10-08: M10359
                                                                END;

                                                                CalcSalesAmount; // 06-08-2010, M19882
                                                              END;

                                                   CaptionML=ENU=Sales Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 121 ;   ;Sales Amount        ;Decimal       ;OnValidate=BEGIN
                                                                CurrencyRec.InitRoundingPrecision();                                             // 06-08-2010, M19882
                                                                "Sales Amount" := ROUND("Sales Amount",CurrencyRec."Amount Rounding Precision"); // 06-08-2010, M19882
                                                              END;

                                                   CaptionML=ENU=Sales Amount;
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 130 ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group".Code;
                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 140 ;   ;Posting Date Costs  ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Job Ledger Entry"."Posting Date" WHERE (Entry No.=FIELD(Entry No. Project Ledger)));
                                                   CaptionML=ENU=Posting Date Costs;
                                                   Editable=No }
    { 160 ;   ;Creation Date       ;Date          ;CaptionML=ENU=Creation Date;
                                                   Editable=No }
    { 170 ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=No }
    { 180 ;   ;Entry No. Project Ledger;Integer   ;TableRelation="Job Ledger Entry"."Entry No.";
                                                   CaptionML=ENU=Entry No. Project Ledger;
                                                   Editable=No }
    { 185 ;   ;Quantity Project Ledger;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Job Ledger Entry".Quantity WHERE (Entry No.=FIELD(Entry No. Project Ledger)));
                                                   CaptionML=ENU=Quantity Project Ledger;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 186 ;   ;Invoiced Quantity Pr. Ledger;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job Ledger Entry".Quantity WHERE (Cost Entry No. Project Ledger=FIELD(Entry No. Project Ledger)));
                                                   CaptionML=ENU=Invoiced Quantity on Project Ledger Entry;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 187 ;   ;Invoiced Price Pr. Ledger;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job Ledger Entry"."Total Price (LCY)" WHERE (Cost Entry No. Project Ledger=FIELD(Entry No. Project Ledger)));
                                                   CaptionML=ENU=Invoiced Price on Project Ledger Entry;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 189 ;   ;Chargeable          ;Boolean       ;CaptionML=ENU=Chargeable }
    { 190 ;   ;Invoiced            ;Boolean       ;CaptionML=ENU=Invoiced;
                                                   Editable=No }
    { 240 ;   ;Employee No.        ;Code20        ;TableRelation=Employee.No.;
                                                   OnValidate=BEGIN
                                                                GetBasicPrice;
                                                              END;

                                                   CaptionML=ENU=Employee No. }
    { 250 ;   ;Social Security No. ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Social Security No." WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=ENU=Social Security No.;
                                                   Editable=No }
    { 260 ;   ;From Date           ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("To Date");
                                                              END;

                                                   CaptionML=ENU=From Date }
    { 261 ;   ;From Time           ;Time          ;CaptionML=ENU=From Time;
                                                   Description=jhoek.140611;
                                                   Editable=No }
    { 270 ;   ;To Date             ;Date          ;OnValidate=BEGIN
                                                                IF ("To Date" <> 0D) AND ("To Date" < "From Date") THEN
                                                                  FIELDERROR("To Date",STRSUBSTNO(Text000,FIELDCAPTION("From Date")));
                                                              END;

                                                   CaptionML=ENU=To Date }
    { 271 ;   ;To Time             ;Time          ;CaptionML=ENU=To Time;
                                                   Description=jhoek.160611;
                                                   Editable=No }
    { 280 ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." <> '') THEN BEGIN
                                                                  ValidateItem(ItemTypeOpt::Item);
                                                                  ItemRec.TESTFIELD("Logistics on Component Level",FALSE);  //**4PS.n
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 281 ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::"Basic Item");
                                                              END;

                                                   CaptionML=ENU=Basic Item }
    { 282 ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::"Trade Item");
                                                              END;

                                                   CaptionML=ENU=Trade Item }
    { 284 ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=VAR
                                                                TradeItemRec@1100525000 : Record 11012317;
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") AND ("Vendor (Trade Item)" <> '') THEN BEGIN
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  //db.sn, 17-12-10: M18021
                                                                  IF lvExecValidate THEN BEGIN
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item")
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor");
                                                                  END;
                                                                  //db.en, 17-12-10: M18021
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 285 ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Manufacturer }
    { 290 ;   ;Element             ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=VAR
                                                                ElemRec@11012000 : Record 11012010;
                                                                ElementFormat@11012001 : Codeunit 11012022;
                                                              BEGIN
                                                                ElementFormat.FormatElem(Element,2,'');
                                                                IF Element <> '' THEN BEGIN
                                                                  ElemRec.GET("Project No.",Element);
                                                                  ElemRec.TESTFIELD(Blocked, FALSE);            //**4PS03.n
                                                                END;
                                                                GetBasicPrice;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 295 ;   ;Extension Contract  ;Code10        ;TableRelation="Extension Contract"."Contract No." WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                GetBasicPrice;
                                                              END;

                                                   CaptionML=ENU=Extension Contract }
    { 300 ;   ;Text                ;Text250       ;OnValidate=BEGIN
                                                                "Text Block" := Text <> '';
                                                              END;

                                                   CaptionML=ENU=Text }
    { 301 ;   ;Text Block          ;Boolean       ;CaptionML=ENU=Text Block;
                                                   Editable=No }
    { 310 ;   ;Gross Price         ;Decimal       ;OnValidate=BEGIN
                                                                IF CheckItemLine AND (CurrFieldNo = FIELDNO("Gross Price")) AND ("Gross Price" <> xRec."Gross Price") THEN  //*23769
                                                                  GetPurchaseDiscount;  //*23769
                                                                VALIDATE("Purchase Discount % (Item)");
                                                                IF CurrFieldNo <> FIELDNO("Sales Discount % (Item)") THEN
                                                                  VALIDATE("Sales Discount % (Item)");
                                                              END;

                                                   CaptionML=ENU=Gross Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 314 ;   ;Purchase Discount % (Item);Decimal ;OnValidate=BEGIN
                                                                //db, 11-07-07
                                                                IF CheckItemLine OR ("Entry No. Project Ledger" = 0) THEN //Call 18326
                                                                  IF "Cost Type" <> "Cost Type"::Labor THEN   // 160324 ITERO.AC RFC082 (Same change as IME374 )
                                                                    VALIDATE("Cost Price", "Gross Price" * (100 - "Purchase Discount % (Item)")/100);
                                                              END;

                                                   CaptionML=ENU=Purchase Discount % (Item);
                                                   MaxValue=100;
                                                   BlankZero=Yes }
    { 315 ;   ;Sales Discount % (Item);Decimal    ;OnValidate=BEGIN
                                                                IF "Sales Discount % (Item)" <> xRec."Sales Discount % (Item)" THEN
                                                                  VALIDATE("Surcharge %", GetSurcharge);  //db, 23-06-08

                                                                VALIDATE("Basic Price", "Gross Price" * (100 - "Sales Discount % (Item)")/100);
                                                                //>> 160324 ITERO.AC RFC082 Added Check for Sales discount Or Existing text = ''
                                                                IF CheckItemLine THEN BEGIN
                                                                  IF ("Sales Discount % (Item)" <> 0) OR ("Basic Price Found at" = '') THEN
                                                                    "Basic Price Found at" := Text010;
                                                                //>> 161013 ITERO.AC RAD043 Use same logic as in Service Order
                                                                END ELSE BEGIN
                                                                  "Basic Price Found at" := Text009;
                                                                //<< 161013 ITERO.AC RAD043
                                                                END;
                                                                //<< 160324 ITERO.AC RFC082
                                                              END;

                                                   CaptionML=ENU=Sales Discount % (Item);
                                                   MaxValue=100;
                                                   BlankZero=Yes }
    { 320 ;   ;Attached to Line No.;Integer       ;CaptionML=ENU=Attached to Line No.;
                                                   Editable=No }
    { 330 ;   ;Standard Text Code  ;Code10        ;TableRelation="Standard Text".Code;
                                                   OnValidate=VAR
                                                                lvStandTextRec@1210190000 : Record 7;
                                                              BEGIN
                                                                IF "Standard Text Code" <> '' THEN BEGIN
                                                                  TESTFIELD(Quantity, 0);
                                                                  IF lvStandTextRec.GET("Standard Text Code") THEN
                                                                    Description := lvStandTextRec.Description;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Standard Text Code }
    { 340 ;   ;Operation           ;Code20        ;TableRelation="Operations by Small Project".Operation WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Operation }
    { 350 ;   ;Reference Date      ;Date          ;OnValidate=BEGIN
                                                                IF "Reference Date" <> xRec."Reference Date" THEN BEGIN
                                                                  //db.sn: M18589
                                                                  SaveUnit := "Unit of Measure";
                                                                  SaveQuan := Quantity;
                                                                  //db.en: M18589
                                                                  GetBasicPrice;
                                                                  //db.sn: M18589
                                                                //  IF (SaveUnit <> '') AND (SaveUnit <> "Unit of Measure") THEN BEGIN  // 160324 ITERO.AC RFC082 Removed IF (Same as IME-299 IME-355 )
                                                                  VALIDATE("Unit of Measure", SaveUnit);
                                                                  CheckItemUnitConversion(Rec, xRec);
                                                                  VALIDATE(Quantity, SaveQuan);
                                                                //  END;
                                                                  //db.en: M18589
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Reference Date }
    { 360 ;   ;Name Employee       ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=ENU=Name Employee;
                                                   Editable=No }
    { 361 ;   ;Employee Hours      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Project Cost Plus Entry".Quantity WHERE (Project No.=FIELD(Project No.),
                                                                                                             Employee No.=FIELD(Employee No.),
                                                                                                             Invoiced=CONST(No)));
                                                   CaptionML=ENU=Employee Hours;
                                                   Editable=No }
    { 362 ;   ;Employee Amount     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Project Cost Plus Entry"."Sales Amount" WHERE (Project No.=FIELD(Project No.),
                                                                                                                   Employee No.=FIELD(Employee No.),
                                                                                                                   Invoiced=CONST(No)));
                                                   CaptionML=ENU=Employee Amount;
                                                   Editable=No }
    { 370 ;   ;Source Document     ;Code20        ;CaptionML=ENU=Source Document;
                                                   Editable=No }
    { 371 ;   ;Source Line         ;Integer       ;CaptionML=ENU=Source Line }
    { 380 ;   ;Means No.           ;Code20        ;TableRelation=Means;
                                                   OnValidate=BEGIN
                                                                IF ("Means No." <> xRec."Means No.") AND ("Means No." <> '') THEN
                                                                  ValidateMeans;
                                                              END;

                                                   CaptionML=ENU=Means No. }
    { 390 ;   ;Posted Hour Year    ;Integer       ;CaptionML=ENU=Posted Hour Year;
                                                   Editable=No }
    { 400 ;   ;Posted Hour Week    ;Integer       ;CaptionML=ENU=Posted Hour Week;
                                                   Editable=No }
    { 410 ;   ;Posted Hour Line No.;Integer       ;TableRelation="Posted Hour Line"."Line No." WHERE (Year=FIELD(Posted Hour Year),
                                                                                                      Week=FIELD(Posted Hour Week),
                                                                                                      Employee No.=FIELD(Employee No.));
                                                   CaptionML=ENU=Posted Hour Line No.;
                                                   Editable=No }
    { 420 ;   ;Quantity Posted Hour Line;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Posted Hour Line"."Total Line" WHERE (Year=FIELD(Posted Hour Year),
                                                                                                             Week=FIELD(Posted Hour Week),
                                                                                                             Employee No.=FIELD(Employee No.),
                                                                                                             Line No.=FIELD(Posted Hour Line No.)));
                                                   CaptionML=ENU=Quantity Posted Hour Line;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 430 ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   CaptionML=ENU=Cost Component;
                                                   NotBlank=Yes }
    { 440 ;   ;Sales Surcharge Overtime %;Decimal ;CaptionML=ENU=Sales Surcharge Overtime %;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 450 ;   ;Reconcilation ID    ;Code10        ;CaptionML=ENU=Reconcilation ID }
    { 460 ;   ;Removal Contribution;Boolean       ;CaptionML=ENU=Removal Contribution }
    { 470 ;   ;Execution Date      ;Date          ;CaptionML=ENU=Execution Date }
    { 480 ;   ;Room                ;Code20        ;TableRelation=Room.Code;
                                                   CaptionML=ENU=Room }
    { 490 ;   ;Room Description    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Room.Description WHERE (Code=FIELD(Room)));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Room Description");
                                                              END;

                                                   CaptionML=ENU=Room Description }
    { 500 ;   ;Processed           ;Boolean       ;CaptionML=ENU=Processed }
    { 510 ;   ;Country/Region of Origin;Code10    ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region of Origin }
    { 520 ;   ;Basic Price Found at;Text250       ;CaptionML=ENU=Basic Price Found at;
                                                   Editable=No }
    { 530 ;   ;Vendor              ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Job Ledger Entry"."Vendor No." WHERE (Entry No.=FIELD(Entry No. Project Ledger)));
                                                   CaptionML=ENU=Vendor;
                                                   Editable=No }
    { 540 ;   ;Vendor Name         ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Vendor)));
                                                   CaptionML=ENU=Vendor Name;
                                                   Editable=No }
    { 560 ;   ;Attached to Line No. (RC);Integer  ;CaptionML=ENU=Attached to Line No. (Removal Contribution);
                                                   Editable=No }
    { 600 ;   ;Generated Surcharge Line;Boolean   ;CaptionML=ENU=Generated Surcharge Line }
    { 700 ;   ;Serial No.          ;Code40        ;CaptionML=ENU=Serial No.;
                                                   Description=DP00121 }
    { 710 ;   ;Lot No.             ;Code20        ;CaptionML=ENU=Lot No.;
                                                   Description=DP00121 }
    { 11128270;;Price History Found;Boolean       ;CaptionML=ENU=Price History Found;
                                                   Description=EVRY }
    { 11128271;;Price History Vendor No.;Code20   ;CaptionML=ENU=Price History Vendor no.;
                                                   Description=EVRY }
    { 11128272;;Price History PriceList;Code20    ;TableRelation="Customer Price List" WHERE (Display Price List=CONST(Yes));
                                                   CaptionML=ENU=Customer price list;
                                                   Description=ITERO }
    { 11128273;;Price History DiscountRef1;Code20 ;CaptionML=ENU=Sales Discount Term Group (Customer);
                                                   Description=ITERO }
    { 11128274;;Cost Price Adjustment;Decimal     ;CaptionML=ENU=Adjustment % (Cost Price);
                                                   Description=ITERO }
  }
  KEYS
  {
    {    ;Project No.,Adjustment,Extension Contract,Budget Line No.;
                                                   SumIndexFields=Cost Amount,Sales Amount;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@11012009 : TextConst 'ENU=may not before %1';
      Text001@11012010 : TextConst 'ENU=Copy Cost Object Data ?';
      Text003@11012012 : TextConst 'ENU=Copy Data from %1 ?';
      ProjSetup@1100485005 : Record 315;
      DimValRec@11012000 : Record 349;
      ProjRec@1100485006 : Record 11072003;
      ProjPrincipalRec@11012001 : Record 11012005;
      GlSetupRec@11012006 : Record 98;
      ExtRec@1210190006 : Record 11012004;
      ItemRec@1210190000 : Record 27;
      EmplRec@1210190009 : Record 5200;
      HourRateRec@1210190005 : Record 11012022;
      WageCompRec@1100485003 : Record 11012014;
      CustRec@1100485001 : Record 18;
      CurrencyRec@1100525005 : Record 4;
      ValidateCu@11012007 : Codeunit 11012033;
      DimMgt@11012013 : Codeunit 408;
      Text004@1210190007 : TextConst 'ENU=Only Cost Objects of Cost Type ''Material'' allowed.';
      Text006@1210190008 : TextConst 'ENU=Hours';
      Text007@1100485002 : TextConst 'ENU=Are you sure you want to delete the invoiced Cost Plus Entries?';
      Text008@1100485004 : TextConst 'ENU=It is not allowed to create or modify cost plus entries for a project that is already Administrative Finished.';
      Text11012001@1100485000 : TextConst 'ENU=Not permitted for text line';
      SalesPriceMgt@1100485007 : Codeunit 11012036;
      ItemTypeOpt@1100485008 : 'Item,Basic Item,Trade Item,Trade Vendor';
      Text009@1100485009 : TextConst 'ENU=Manually entered Price';
      Text010@1100485010 : TextConst 'ENU=Gross Price - Discount';
      BasicPriceCalcRunning@1100525000 : Boolean;
      ValidateHourRateCode@1100525001 : Boolean;
      gDelCompleteProject@1100409000 : Boolean;
      SaveUnit@1100525003 : Text[30];
      SaveQuan@1100525004 : Decimal;
      SkipGetCostObjectDesc@1210190001 : Boolean;
      "-EVRY-"@1100290000 : Integer;
      Job4PS@1100290001 : Record 11072003;
      TradeItem@1000000000 : Record 11012317;
      Text11128001@1100409003 : TextConst 'ENU=Cost Price + Surcharge Customer Price List';
      Text11128002@1100409002 : TextConst 'ENU=Cost Price + Cost Price adjustment';
      Text11128003@1100409001 : TextConst 'ENU=Vendor Gross Price';
      "--ITERO--"@1100409005 : Integer;
      gvUseManualPriceList@1100409004 : Code[20];
      Text11128004@1100525006 : TextConst 'ENU=Sales Price Warehouse Item';
      Text11128005@1100525002 : TextConst 'ENU=Unit Price Warehouse Item';

    PROCEDURE GetSurcharge@1100485012() lvPerc : Decimal;
    VAR
      CustSurchRec@1100485003 : Record 11020367;
      CustPriceList@1100285500 : Record 11128273;
    BEGIN
      //>> 150323 IME321 ITERO.SB
      CALCFIELDS("Cost Type");
      IF ("Cost Type" = "Cost Type"::Material) THEN BEGIN
        ProjRec.GET("Project No.");
        IF CustPriceList.GET(ProjRec."Price List Code") THEN
          IF CustPriceList."Apply Material Surcharge" THEN BEGIN
            IF NOT ProjPrincipalRec.GET("Project No.",Principal) THEN
              CLEAR(ProjPrincipalRec);
            EXIT(ProjPrincipalRec."Surcharge % Material");
          END;
      END;
      //<<



      //>> LAHE 130117
      IF NOT ProjPrincipalRec.GET("Project No.",Principal) THEN
        CLEAR(ProjPrincipalRec);
      IF "Price History Found" THEN
        EXIT(0)
      ELSE
        IF "Trade Item" <> '' THEN
          IF NOT ProjPrincipalRec."Cost Price Behaviour" THEN
            EXIT(0);
      //<< LAHE 130117

      //db, 23-06-08
      lvPerc := 0;

      CALCFIELDS("Cost Type");
      IF ("Cost Object" = '') THEN BEGIN
        IF CheckItemLine() THEN
          "Cost Type" := "Cost Type"::Material
        ELSE
          EXIT(0);
      END;

      IF lvPerc = 0 THEN BEGIN
        CustSurchRec.RESET;
        CustSurchRec.SETRANGE("Record Type", CustSurchRec."Record Type"::ProjCust);
        CustSurchRec.SETRANGE("Customer No.", Principal);
        CustSurchRec.SETRANGE(Code, "Project No.");
        CustSurchRec.SETRANGE("Cost Type", "Cost Type");
        CustSurchRec.SETFILTER(Price, '%1..', "Basic Price");
        IF CustSurchRec.FINDFIRST THEN BEGIN
          lvPerc := CustSurchRec."Surcharge %";
        END ELSE BEGIN
          CustSurchRec.SETFILTER(Price, '..%1', "Basic Price");
          IF CustSurchRec.FINDLAST THEN
            lvPerc := CustSurchRec."Surcharge %";
        END;
      END;

      IF lvPerc = 0 THEN BEGIN
        IF ProjPrincipalRec.GET("Project No.",Principal) THEN BEGIN
          CASE "Cost Type" OF
            "Cost Type"::Labor:
              lvPerc := ProjPrincipalRec."Surcharge % Labor";
            "Cost Type"::Material:
              lvPerc := ProjPrincipalRec."Surcharge % Material";
            "Cost Type"::Subcontracting:
              lvPerc := ProjPrincipalRec."Surcharge % Subcontr.";
            "Cost Type"::Plant:
              lvPerc := ProjPrincipalRec."Surcharge % Plant";
            "Cost Type"::Sundry:
              lvPerc := ProjPrincipalRec."Surcharge % Sundry";
          END;
        END;
      END;

      EXIT(lvPerc);
    END;

    PROCEDURE CalcSurcharge@1100485013(lvProj@1100485001 : Code[20];lvCust@1100485002 : Code[20];lvComm@1100485003 : Code[20];lvSheet@1100485004 : Code[20]);
    VAR
      CostPlusRec@1100485000 : Record 11012019;
    BEGIN
      //db, 08-09-08
      CostPlusRec.SETRANGE("Project No.", lvProj);
      CostPlusRec.SETRANGE(Principal, lvCust);
      CostPlusRec.SETRANGE("Commission No.", lvComm);
      CostPlusRec.SETRANGE("Settl.Sheet No.", lvSheet);
      CostPlusRec.SETRANGE(Invoiced, FALSE);
      IF CostPlusRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          CostPlusRec.VALIDATE("Surcharge %", CostPlusRec.GetSurcharge);
          CostPlusRec.MODIFY;
        UNTIL CostPlusRec.NEXT = 0;
      END;
    END;

    PROCEDURE TransferCostObjectData@2() : Boolean;
    BEGIN
      IF CheckItemLine() THEN
        EXIT(FALSE);
      IF ("Source Document" <> '') THEN
        EXIT(FALSE);  //db, 04-06-07 (melding 9216)
      IF ("Cost Object" <> xRec."Cost Object") THEN BEGIN
        DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, "Project No.");
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetDescription@1210190000();
    VAR
      HelpDesc@1210190001 : Text[100];
      ProjLedgerEntryRec@1100525000 : Record 11072005;
    BEGIN
      IF "Item No." + "Basic Item" + "Trade Item" <> '' THEN EXIT;

      ProjSetup.GET;

      CALCFIELDS("Cost Type");
      IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
        CASE ProjSetup."Description Cost Plus Entry" OF
          ProjSetup."Description Cost Plus Entry"::Employee:
            IF ((CurrFieldNo = FIELDNO("Employee No.")) OR (CurrFieldNo = 0)) THEN
              IF EmplRec.GET("Employee No.") THEN BEGIN
                HelpDesc := Text006 + ' ' + EmplRec."Full Name";
                Description := COPYSTR(HelpDesc, 1, MAXSTRLEN(Description));
              END;
          ProjSetup."Description Cost Plus Entry"::RateCode:
            IF ((CurrFieldNo = FIELDNO("Hour Rate Code")) OR (CurrFieldNo = 0)) OR
              ("Hour Rate Code" <> xRec."Hour Rate Code")
            THEN BEGIN
              IF "Reference Date" = 0D THEN
                "Reference Date" := FillReferenceDate;
              HourRateRec.SETRANGE(Code,"Hour Rate Code");
              HourRateRec.SETRANGE("Starting Date",0D,"Reference Date");
              IF HourRateRec.FIND('+') THEN
                Description := HourRateRec.Description;
            END;
          ProjSetup."Description Cost Plus Entry"::CostObject:
            //IF GetCostObjectDesc THEN //call 28753  //*31430.o
            IF NOT ((CurrFieldNo = FIELDNO("Cost Object")) AND SkipGetCostObjectDesc) THEN BEGIN  //*31430.n
              IF ((CurrFieldNo = FIELDNO("Cost Object")) OR (CurrFieldNo = 0)) THEN BEGIN
                DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE, "Project No.");
                Description := DimValRec.Name;
              END;
            END;
          ProjSetup."Description Cost Plus Entry"::WageComponent:
            IF ((CurrFieldNo = FIELDNO("Wage Component")) OR (CurrFieldNo = 0) OR
                ("Wage Component" <> xRec."Wage Component")) THEN
              IF WageCompRec.GET("Wage Component") THEN
                Description := WageCompRec.Description;
        END;
        IF Description <> xRec.Description THEN BEGIN
          CALCFIELDS("Posting Date Costs");
          AddDateToDescription("Posting Date Costs");
        END;
      END ELSE BEGIN
        //IF GetCostObjectDesc THEN BEGIN //call 28753  //*31430.o
        IF NOT ((CurrFieldNo = FIELDNO("Cost Object")) AND SkipGetCostObjectDesc) THEN BEGIN  //*31430.n
          IF ("Source Document" = '') THEN BEGIN  //db, 04-06-07 (melding 9216)
            DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE, "Project No.");
            Description := DimValRec.Name;
          END ELSE BEGIN
            IF "Entry No. Project Ledger" <> 0 THEN BEGIN  //db, 19-06-07: M14663
              IF ProjLedgerEntryRec.GET("Entry No. Project Ledger") THEN BEGIN
                IF ProjLedgerEntryRec.Chargeable AND ProjLedgerEntryRec.Expense THEN BEGIN
                  DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE,'');
                  Description := DimValRec.Name;
                END;
              END;
            END;
          END;
        END; //call 28753
      END;
    END;

    PROCEDURE GetBasicPrice@1210190004();
    VAR
      BasicPrice@1100485002 : Decimal;
      BasicPriceFoundAt@1100525000 : Text[250];
    BEGIN
      IF BasicPriceCalcRunning OR "Generated Surcharge Line" THEN
        EXIT;

      IF ("Attached to Line No." <> 0) OR
         ("Standard Text Code" <> '') THEN
        EXIT;

      BasicPriceCalcRunning := TRUE;
      IF "Trade Item" <> '' THEN  //db, 17-11-08: M13384
        ItemTypeOpt := ItemTypeOpt::"Trade Item"
      ELSE
        IF "Basic Item" <> '' THEN
          ItemTypeOpt := ItemTypeOpt::"Basic Item"
        ELSE
          ItemTypeOpt := ItemTypeOpt::Item;

      IF "Reference Date" = 0D THEN
        "Reference Date" := FillReferenceDate;

      GetHourRateCode;

      CALCFIELDS("Cost Type");
      CASE TRUE OF
        ("Means No." <> ''):
          UpdateMeansPrice;
        (CheckItemLine):
          ValidateItem(ItemTypeOpt);  //db, 17-11-08: M13384
        ELSE BEGIN
          BasicPrice :=
            SalesPriceMgt.GetSalesPrice(
              0,"Project No.", '', '', Principal, "Cost Object",
              "Wage Component", '', "Employee No.", "Hour Rate Code",
              Element, "Extension Contract", '', '', "Reference Date",
              "Cost Price", BasicPriceFoundAt);

          IF BasicPriceFoundAt = '' THEN BEGIN
            IF (CurrFieldNo = 0) OR
               ((xRec."Basic Price Found at" <> Text009) AND
                (xRec."Basic Price Found at" <> '')) THEN BEGIN
              "Basic Price Found at" := '';
              VALIDATE("Basic Price", 0);
            END;
          END ELSE BEGIN
            CalcOvertimeSurcharge(BasicPrice);
            VALIDATE("Basic Price", BasicPrice);
            "Basic Price Found at" := BasicPriceFoundAt;  //db, 04-10-10: M21790
          END;
        END;
      END;

      BasicPriceCalcRunning := FALSE;
    END;

    PROCEDURE CalcOvertimeSurcharge@1100485004(VAR ioSalesPrice@1100485000 : Decimal);
    VAR
      lvOverTimeSurcharge@1100485001 : Record 11020256;
      lvWageCompRec@1100485002 : Record 11012014;
    BEGIN
      //Overtime Surcharge by Wage Component on General Level or on Customer Level
      "Sales Surcharge Overtime %" := 0;
      IF ("Wage Component" = '') OR (ioSalesPrice = 0) THEN
        EXIT;

      //4PS (BE)
      IF lvWageCompRec.GET("Wage Component") THEN  BEGIN
        IF lvWageCompRec."Sales Surcharge %" <> 0 THEN BEGIN
          ioSalesPrice := ROUND(ioSalesPrice * lvWageCompRec."Sales Surcharge %" / 100);
        END;
      END;
      //4PS (BE)

      lvOverTimeSurcharge.SETRANGE("Customer No.", Principal);
      lvOverTimeSurcharge.SETRANGE("Wage Component No.", "Wage Component");
      lvOverTimeSurcharge.SETRANGE("Start Date", 0D, "Reference Date");
      IF lvOverTimeSurcharge.FIND('+') THEN BEGIN
        IF lvOverTimeSurcharge."Surcharge %" > 0 THEN BEGIN
          ioSalesPrice := ROUND(ioSalesPrice * lvOverTimeSurcharge."Surcharge %" / 100);
          "Sales Surcharge Overtime %" := lvOverTimeSurcharge."Surcharge %";
        END;
      END ELSE BEGIN
        IF lvWageCompRec.GET("Wage Component") THEN
          IF lvWageCompRec."Sales Surcharge Overtime %" > 0 THEN BEGIN
            ioSalesPrice := ROUND(ioSalesPrice * lvWageCompRec."Sales Surcharge Overtime %" / 100);
            "Sales Surcharge Overtime %" := lvWageCompRec."Sales Surcharge Overtime %";
          END;
      END;
    END;

    PROCEDURE TransferPrincipalData@8() : Boolean;
    BEGIN
      IF ("Project No." <> xRec."Project No.") OR (Principal <> xRec.Principal) THEN
        IF ProjPrincipalRec.GET("Project No.",Principal) THEN BEGIN
          IF xRec.Principal <> '' THEN
            IF NOT CONFIRM(Text003,FALSE,
                            ProjPrincipalRec.TABLECAPTION)
            THEN
              EXIT(FALSE);
          EXIT(TRUE);
        END;
      EXIT(FALSE);
    END;

    PROCEDURE DetermineVATProdPostingGroup@4();
    VAR
      ProjPrincipalRec@11012000 : Record 11012005;
    BEGIN
      "VAT Prod. Posting Group" := UpdateVatProdPostingGrp;  //RFC 547
      //IF ProjPrincipalRec.GET("Project No.",Principal) THEN //RFC 547 old
      //  "VAT Prod. Posting Group" := ProjPrincipalRec."VAT Prod. Posting Group"; //RFC 547 old
    END;

    PROCEDURE CheckItemLine@1210190015() : Boolean;
    BEGIN
      EXIT(("Item No." <> '') OR ("Basic Item" <> '') OR ("Trade Item" <> ''));
    END;

    PROCEDURE ValidateItem@31(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item');
    VAR
      lvPriceHistoryFound@1100409004 : Boolean;
      lvDoSalesPriceCalulation@1100409003 : Boolean;
      lvSurchargeIfMissingArticles@1100409002 : Decimal;
      lvPriceFactor@1100409001 : Decimal;
      lvGrossPrice@1100409000 : Decimal;
      lvItemSalesPrice@1100525000 : Record 7002;
    BEGIN
      IF NOT CheckItemLine() THEN
        EXIT;

      ProjRec.GET("Project No.");
      IF "Reference Date" = 0D THEN
        "Reference Date" := FillReferenceDate;

      FindCostPrice(LTypeArtOpt);  //db, 28-12-09: M16871
      //>> 160324 ITERO.AC RFC082 Add CostSurcharge % from Project Principal
      CALCFIELDS("Cost Type");
      lvPriceFactor := GetPrincipalCostPriceFactor("Project No.", Principal, "Cost Type");
      // "Cost Price" := "Cost Price" * lvPriceFactor;  // 160414 ITERO.AC RFC082 Do not recalculate Cost Price
      //<< 160324 ITERO.AC RFC082
      "Basic Price" := "Cost Price";
      //>> 160317 ITERO.AC RFC082 Adjust text describing how Basic Price was calculated
      IF lvPriceFactor <> 1 THEN
        "Basic Price Found at" := Text11128002
      ELSE
      //<< 160317 ITERO.AC RFC082
        "Basic Price Found at" := FIELDCAPTION("Cost Price");


      //>> 160311 ITERO.AC RFC082 Check for Cost Price Behaviour
      lvDoSalesPriceCalulation := TRUE;
      lvPriceHistoryFound := FALSE;
      lvGrossPrice := 0;

      IF (LTypeArtOpt = LTypeArtOpt::"Trade Item") OR (LTypeArtOpt = LTypeArtOpt::Item) THEN BEGIN  // 161013 ITERO.AC RAD043 Added price calculation for NAV Items
        lvPriceHistoryFound := CheckIfPriceHistoryExists("Project No.", "Reference Date", "Trade Item", lvGrossPrice);

        IF CheckCostPriceBehaviour("Project No.", Principal ) THEN BEGIN
          IF lvPriceHistoryFound THEN BEGIN
            "Gross Price" := lvGrossPrice;
            "Basic Price Found at" := Text010;
          END
          ELSE BEGIN
            //>> 160414 ITERO.AC RFC082 Keep original Cost Price and adjust Gross Price and Basic price with price factor
            "Cost Price Adjustment" := (lvPriceFactor - 1) * 100;
            "Gross Price" := "Cost Price" * lvPriceFactor;
            "Basic Price" := "Gross Price";
            //<< 160401 ITERO.AC RFC082
          END;
        END
        ELSE BEGIN
          IF lvPriceHistoryFound THEN BEGIN
            "Basic Price Found at" := Text010;
          END
          ELSE BEGIN
            lvSurchargeIfMissingArticles := GetSurchargeIfMissingArticles("Project No.");
            IF lvSurchargeIfMissingArticles <> 1 THEN BEGIN
              "Cost Price Adjustment" := (lvSurchargeIfMissingArticles - 1) * 100;      // 160414 ITERO.AC RFC082
              "Gross Price" := "Cost Price" * lvSurchargeIfMissingArticles;
              VALIDATE("Sales Discount % (Item)", 0);
              "Basic Price Found at" := Text11128001;
              lvDoSalesPriceCalulation := FALSE;
            END
            ELSE BEGIN
              "Basic Price Found at" := Text11128003;
            END;
            //>> 161013 ITERO.AC RAD043 Get Sales price if Item not found in Customer pricelist or in Vendor Price List
            // Warehouse Items with no sales price
            IF (LTypeArtOpt = LTypeArtOpt::Item) AND ("Item No." <> '') AND ("Trade Item" = '') AND (lvPriceHistoryFound = FALSE) THEN BEGIN
              lvItemSalesPrice.SETRANGE( "Item No.", "Item No.");
              lvItemSalesPrice.SETRANGE("Starting Date", 0D, "Reference Date");
              IF lvItemSalesPrice.FINDLAST THEN BEGIN
                "Gross Price" := CalculatePriceWithoutVAT("Item No.", lvItemSalesPrice."Price Includes VAT", lvItemSalesPrice."Unit Price");
                "Price History Found" := TRUE;
                VALIDATE("Sales Discount % (Item)", 0);
                "Basic Price Found at" := Text11128004;   // Sales Price Warehouse Item
                lvDoSalesPriceCalulation := FALSE;
              END ELSE BEGIN
                "Basic Price Found at" := Text11128005;   // Price Warehouse Item
              END;
            END;
            //<< 161013 ITERO.AC RAD043
          END;
        END;
      END;

      IF lvDoSalesPriceCalulation THEN BEGIN
        "Price History Found" := lvPriceHistoryFound;
      //<< 160311 ITERO.AC RFC082
        FindSalesPrice;  //db, 28-12-09: M16871
      END;

      VALIDATE("Surcharge %", GetSurcharge);
      //VALIDATE("Basic Price");  //db, 12-06-09: M14751

      IF ("Item No." <> '') AND ("Item No." <> ItemRec."No.") THEN
        IF ItemRec.GET("Item No.") THEN
          VALIDATE(Text, ItemRec.Text);

      "VAT Prod. Posting Group" := UpdateVatProdPostingGrp;  //RFC 547
    END;

    PROCEDURE FindCostPrice@1100525007(LTypeArtOpt@1100525005 : 'Item,Basic Item,Trade Item');
    VAR
      lvRefDate@1100525004 : Date;
      lvDiscRef1@1100525003 : Code[20];
      lvDiscRef2@1100525002 : Code[20];
      lvRefPrio@1100525001 : Code[10];
      lvDiscType@1100525000 : 'Purchase,Sales';
      DummyDat@1100525006 : Date;
    BEGIN
      //db, 28-12-09: M16871
      ValidateCu.SetQuantity(Quantity);
      lvRefDate := "Reference Date";
      ValidateCu.GetRefDiscProject(ProjRec, lvDiscRef1, lvDiscRef2, lvDiscType::Purchase);
      lvRefPrio := ValidateCu.GetRefPrioProject(ProjRec, lvDiscType::Purchase);
      //>> 160324 ITERO.AC Removed code for RFC-082 (Same as IME299, IME355)
      //>> LAHE 130117
      //IF NOT Job4PS.GET("Project No.") THEN
      //  CLEAR(Job4PS);
      //ValidateCu.SetPriceListCode(Job4PS."Price List Code");
      ValidateCu.SetPriceListCode('');
      //<< LAHE 130117
      //<< 160324 ITERO.AC
      ValidateCu.SetDontUseSingleGTIN(TRUE); // 160324 ITERO.AC RFC082 (Same as IME420 )
      ValidateCu.ValidateItem(LTypeArtOpt, "Trade Item", "Item No.", Manufacturer, "Vendor (Trade Item)",
        "Basic Item", "Cost Object", Description, "Unit of Measure", "Cost Price", "Purchase Discount % (Item)",
        DummyDat, "Gross Price", "Description 2", "Cost Component",
        lvDiscRef1, lvDiscRef2, lvRefDate, lvRefPrio);
      // "Price History Found" := ValidateCu.GetPriceHistFound(); // LAHE 130117 - 160324 Removed by ITERO.AC RFC082   (Same as IME-299 IME-355)
      // "Price History Vendor No." := ValidateCu.GetPriceHistVendorNo(); // LAHE 130425 - 160324 Removed by ITERO.AC RFC082   (Same as IME-299 IME-355)
      //>> 160324 ITERO.AC RFC082 If not FindSalesPrice calculation is executed or article not found in customer price list, this value will remain as an information
      "Price History Vendor No." := ValidateCu.GetPriceHistVendorNo();
      //<< 160324 ITERO.AC RFC082
    END;

    PROCEDURE FindSalesPrice@1100525006();
    VAR
      lvRefDate@1100525004 : Date;
      lvDiscRef1@1100525003 : Code[20];
      lvDiscRef2@1100525002 : Code[20];
      lvRefPrio@1100525001 : Code[10];
      lvDiscType@1100525000 : 'Purchase,Sales';
      lvCustPriceListFromPrio@1100525005 : Code[20];
      lvTempPriceHistVendor@1100409000 : Code[20];
    BEGIN
      //db, 28-12-09: M16871
      IF NOT CustRec.GET(Principal) THEN CustRec.INIT;  //db, 08-12-10: M23704
      //IF CustRec."Item Price Cost Plus Entry" = CustRec."Item Price Cost Plus Entry"::GrossMin THEN BEGIN
      IF NOT UseCostPrice(CustRec) THEN BEGIN // LAHE 130117
        ValidateCu.SetQuantity(Quantity);
        lvRefDate := "Reference Date";
        ValidateCu.GetRefDiscProject(ProjRec, lvDiscRef1, lvDiscRef2, lvDiscType::Sales);
        lvRefPrio := ValidateCu.GetRefPrioProject(ProjRec, lvDiscType::Sales);
        //>> 160324 ITERO.AC RFC082 (Same as IME-299 IME-355 and RFC001-2)
        IF NOT Job4PS.GET("Project No.") THEN
          CLEAR(Job4PS);
        IF gvUseManualPriceList = '' THEN BEGIN
          ValidateCu.SetPriceListCode(Job4PS."Price List Code");
        END ELSE BEGIN
          ValidateCu.SetPriceListCode(gvUseManualPriceList);
        END;
        //<< 160324 ITERO.AC RFC082
        ValidateCu.GetSalesDiscount(CustRec."No.", "Item No.", "Basic Item", "Trade Item",
        Manufacturer, "Vendor (Trade Item)", "Basic Price", "Sales Discount % (Item)", "Gross Price", "Reference Date", '',
          lvDiscRef1, lvDiscRef2, lvRefPrio);
        //>> 161013 ITERO.AC * Search for alternative Customer Price List
        //                   * RAD043 Use new field "Sales Discount Term Percent" if entered and Curent Trade Item exists in Customer price list
        IF ValidateCu.GetPriceHistFound() THEN BEGIN
          IF Job4PS."Sales Discount Term Percent" <> 0 THEN BEGIN
            "Basic Price" := "Gross Price" - ("Gross Price" * Job4PS."Sales Discount Term Percent" / 100);
            "Sales Discount % (Item)" := Job4PS."Sales Discount Term Percent";
          END;
        END;
        // Check for alternative price list
        IF NOT ValidateCu.GetPriceHistFound() THEN BEGIN
          lvCustPriceListFromPrio := GetCustPriceListFromPriority("Trade Item", lvRefDate, lvDiscRef1);
          IF lvCustPriceListFromPrio <> '' THEN BEGIN
            ValidateCu.SetPriceListCode(lvCustPriceListFromPrio);
            ValidateCu.GetSalesDiscount(CustRec."No.", "Item No.", "Basic Item", "Trade Item",
              Manufacturer, "Vendor (Trade Item)", "Basic Price", "Sales Discount % (Item)", "Gross Price", "Reference Date", '',
              lvDiscRef1, lvDiscRef2, lvRefPrio);
              // Use new filed "Sales Discount Term Percent" if entered
              IF Job4PS."Sales Discount Term Percent" <> 0 THEN BEGIN
                "Basic Price" := "Gross Price" - ("Gross Price" * Job4PS."Sales Discount Term Percent" / 100);
                "Sales Discount % (Item)" := Job4PS."Sales Discount Term Percent";
              END
          END;
        END;
        //<< 161013 ITERO.AC RAD043

        //>> 160324 ITERO.AC RFC082 (Same as IME-299 IME-355, RFC001-2 plus changes in RFC082)
        "Price History Found" := ValidateCu.GetPriceHistFound();
        lvTempPriceHistVendor := ValidateCu.GetPriceHistVendorNo();
        IF lvTempPriceHistVendor <> '' THEN
          "Price History Vendor No." := lvTempPriceHistVendor;
        "Gross Price" :=  ValidateCu.GetLatestCustGrossPrice();

        IF gvUseManualPriceList = '' THEN BEGIN
          IF ("Price History Found") THEN
            "Price History PriceList" := Job4PS."Price List Code"
          ELSE
            "Price History PriceList" := '';
        END;
        "Price History DiscountRef1" := ValidateCu.GetFoundSalesDiscRef;
        //<< 160324 ITERO.AC

        VALIDATE("Sales Discount % (Item)");
        //>> LAHE 130425 (same call but with PriceHistVendorNo)
        IF ("Sales Discount % (Item)" = 0) AND ("Price History Vendor No." <> '') THEN BEGIN
          ValidateCu.GetSalesDiscount(CustRec."No.", "Item No.", "Basic Item", "Trade Item",
            Manufacturer, "Price History Vendor No.", "Basic Price", "Sales Discount % (Item)", "Gross Price", "Reference Date", '',
            lvDiscRef1, lvDiscRef2, lvRefPrio);
          VALIDATE("Sales Discount % (Item)");
        END;
        //<< LAHE 130425
        //IF NOT CONFIRM('FindSalesPrice Gross Price: %1',TRUE,"Gross Price") THEN ERROR(''); // LAHE WIP
      END ELSE BEGIN
        GetSalesDiscount;  //db, 09-07-09: M10954
      END;
    END;

    PROCEDURE FillReferenceDate@1210190005() lvRefDate : Date;
    VAR
      SettlSheetRec@1210190000 : Record 11012021;
    BEGIN
      IF SettlSheetRec.GET("Project No.",Principal,"Commission No.",'') THEN
        lvRefDate := SettlSheetRec."Reference Date";

      IF lvRefDate = 0D THEN BEGIN  //db, 17-09-08
        IF NOT ProjRec.GET("Project No.") THEN ProjRec.INIT;
        lvRefDate := ValidateCu.GetRefDateProject(ProjRec);
      END;

      EXIT(lvRefDate);
    END;

    PROCEDURE HandleLookupUnit@1210190008();
    VAR
      ItemUnitRec@1210190000 : Record 5404;
      lvUnit@1210190001 : Code[10];
    BEGIN
      lvUnit := ItemUnitRec.HandleLookupUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)");
      IF (lvUnit <> '') AND (lvUnit <> "Unit of Measure") THEN BEGIN
        xRec."Unit of Measure" := "Unit of Measure";  //db, 01-07-04: standard bug
        VALIDATE("Unit of Measure", lvUnit);
      END;
    END;

    PROCEDURE CheckItemUnitConversion@1210190006(VAR MainNewRec@1210190006 : Record 11128100;MainOldRec@1210190007 : Record 11128100);
    VAR
      ItemRec@1210190004 : Record 27;
      UnitFactor@1210190005 : Decimal;
      UnitFactorOld@1210190003 : Decimal;
      UnitFactorNew@1210190002 : Decimal;
      UnitControl@1210190001 : Codeunit 5402;
    BEGIN
      WITH MainNewRec DO BEGIN
        UnitFactorOld := 1;
        UnitFactorNew := 1;
        IF "Trade Item" <> '' THEN BEGIN
          ValidateCu.ValidateUnit(ItemTypeOpt::"Trade Item",
            "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
            Quantity,"Unit of Measure",UnitFactorNew);
        END ELSE BEGIN
          IF "Basic Item" <> '' THEN BEGIN
            ValidateCu.ValidateUnit(ItemTypeOpt::"Basic Item",
              "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
              Quantity,"Unit of Measure",UnitFactorNew);
          END ELSE BEGIN  //db, 07-04-08: M10070
            IF "Item No." <> '' THEN BEGIN
              ItemRec.GET("Item No.");
              UnitFactorOld := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, MainOldRec."Unit of Measure");
              UnitFactorNew := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, "Unit of Measure");
              UnitFactor := UnitFactorOld;
              ValidateCu.ValidateUnit(ItemTypeOpt::Item,
                "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
                Quantity,"Unit of Measure",UnitFactor);
            END;
          END;
        END;
        IF (UnitFactorNew <> 0) AND
           (UnitFactorOld <> 0) AND
           (UnitFactorNew <> UnitFactorOld) THEN BEGIN  //db, 02-03-10: M18270
          GlSetupRec.GET;
          GlSetupRec.TESTFIELD("Unit-Amount Rounding Precision");

          IF "Gross Price" <> 0 THEN
            VALIDATE("Gross Price", ROUND("Gross Price" * UnitFactorNew / UnitFactorOld, GlSetupRec."Unit-Amount Rounding Precision"))
          ELSE
            VALIDATE("Basic Price", ROUND("Basic Price" * UnitFactorNew / UnitFactorOld, GlSetupRec."Unit-Amount Rounding Precision"));
        END;
      END;
    END;

    PROCEDURE AddDateToDescription@1100485000(lDate@1100485001 : Date);
    VAR
      DateTxt@1100485000 : Text[30];
    BEGIN
      IF (lDate = 0D) OR (Description = '') THEN
        EXIT;

      ProjSetup.GET;

      IF NOT ProjSetup."Add Entry Posting Date to CPE" THEN
        EXIT;

      CALCFIELDS("Cost Type");
      IF "Cost Type" <> "Cost Type"::Labor THEN
        EXIT;

      DateTxt := STRSUBSTNO(' %1', lDate);

      IF STRLEN(Description + DateTxt) > MAXSTRLEN(Description) THEN
        Description := COPYSTR(Description, 1, MAXSTRLEN(Description) - STRLEN(DateTxt));

      Description := Description + DateTxt;
    END;

    PROCEDURE CheckIfTextLine@1100485001();
    BEGIN
      IF ("Attached to Line No." <> 0) OR
         ("Standard Text Code" <> '')
      THEN
        ERROR(Text11012001);
    END;

    PROCEDURE ValidateMeans@1100485002();
    VAR
      MeansRec@1100485000 : Record 11020245;
    BEGIN
      MeansRec.GET("Means No.");
      MeansRec.TESTFIELD("Cost Object");
      VALIDATE("Cost Object", MeansRec."Cost Object");

      Description := MeansRec.Description;
      "Unit of Measure" := MeansRec."Unit of Measure";
      IF (Description = '') THEN
        Description := MeansRec.Description;

      UpdateMeansPrice;
    END;

    PROCEDURE UpdateMeansPrice@1100485003();
    VAR
      MeansRec@1100485004 : Record 11020245;
      MeansPriceCalcMgtcu@1100485001 : Codeunit 11012064;
    BEGIN
      MeansRec.GET("Means No.");

      IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
        VALIDATE("Hour Rate Code",MeansRec."Hours Rate Code");
        VALIDATE("Gross Price",
          MeansPriceCalcMgtcu.FindSalesPrice2(
            Principal,'',"Means No.",Quantity,"Unit of Measure",'',"Reference Date",FALSE)); //kzwerver, 120712, n, #32331
      END;

      IF "Cost Type" <> "Cost Type"::Labor THEN BEGIN
        VALIDATE("Gross Price",
          MeansPriceCalcMgtcu.FindSalesPrice2(
            Principal,'',"Means No.",Quantity,"Unit of Measure",'',"Reference Date",FALSE));
        //>> 160324 ITERO.AC RFC082 (Same change as IME374 Calculate Cost price for means )
        IF MeansRec.Costprice <> 0 THEN
          VALIDATE("Cost Price", MeansRec.Costprice);
        //<< 160324 ITERO.AC RFC082
      END;
    END;

    PROCEDURE GetReconcilationID@1100485005() : Code[10];
    VAR
      lvProjectCostPlusEntryRec@1100485000 : Record 11012019;
    BEGIN
      //Find the previously used Reconcilation ID

      IF ("Entry No. Project Ledger" > 0) THEN BEGIN
        lvProjectCostPlusEntryRec.SETCURRENTKEY("Entry No. Project Ledger");
        lvProjectCostPlusEntryRec.SETRANGE("Entry No. Project Ledger", "Entry No. Project Ledger" );
        lvProjectCostPlusEntryRec.SETFILTER("Reconcilation ID", '<>%1', '');
        IF lvProjectCostPlusEntryRec.FIND('-') THEN
          EXIT(lvProjectCostPlusEntryRec."Reconcilation ID");
      END;

      IF ("Posted Hour Line No." > 0) THEN BEGIN
        lvProjectCostPlusEntryRec.SETCURRENTKEY("Posted Hour Year","Posted Hour Week","Employee No.","Posted Hour Line No.");
        lvProjectCostPlusEntryRec.SETRANGE("Posted Hour Year", "Posted Hour Year" );
        lvProjectCostPlusEntryRec.SETRANGE("Posted Hour Week", "Posted Hour Week" );
        lvProjectCostPlusEntryRec.SETRANGE("Posted Hour Line No.", "Posted Hour Line No." );
        lvProjectCostPlusEntryRec.SETRANGE("Employee No.", "Employee No.");
        lvProjectCostPlusEntryRec.SETFILTER("Reconcilation ID", '<>%1', '');
        IF lvProjectCostPlusEntryRec.FIND('-') THEN
          EXIT(lvProjectCostPlusEntryRec."Reconcilation ID");
      END;
    END;

    PROCEDURE Navigate@1100485006();
    VAR
      NavigateForm@1100285000 : Page 344;
    BEGIN
      NavigateForm.SetDoc(0D,"Source Document");
      NavigateForm.RUN;
    END;

    PROCEDURE CalculateGrossPrice@1100485007(lvPrice@1100485001 : Decimal;lvDisc@1100485000 : Decimal);
    BEGIN
      //db, 05-12-07 (melding 7913 + 10572)
      IF lvDisc <> 100 THEN
        "Gross Price" := lvPrice * 100 / (100 - lvDisc);
    END;

    PROCEDURE CheckModifyAllowed@1100485008(GiveError@1100485001 : Boolean) : Boolean;
    VAR
      lvJobRec@1100485000 : Record 11072003;
    BEGIN
      //**4PS01.sn
      IF lvJobRec.GET("Project No.") THEN BEGIN
        ProjSetup.GET;
        IF NOT ProjSetup."Provisions at Closure" AND (lvJobRec."Project Status" > lvJobRec."Project Status"::"Technical Finished")
        THEN BEGIN
          //Modification not allowed anymore
          IF GiveError THEN
            ERROR(Text008);
          EXIT(FALSE);
        END;
      END;

      IF CurrFieldNo > 0 THEN
        TESTFIELD("Generated Surcharge Line", FALSE);

      EXIT(TRUE);
      //**4PS01.en
    END;

    PROCEDURE DetermineRemovalContribution@1100485009();
    VAR
      lvCostPlusRec@1100485007 : Record 11012019;
      lvCostPlusRec2@1100485008 : Record 11012019;
      lvItemRec@1100485001 : Record 27;
      lvTradeItemRec@1100485000 : Record 11012317;
      lvCostObject@1100485004 : Code[20];
      lvRemovalContribution@1100485005 : Decimal;
      lvUnitFactor@1100485002 : Decimal;
      UnitControl@1100485003 : Codeunit 5402;
    BEGIN
      //db, 15-06-07
      lvCostPlusRec.SETRANGE("Project No.", "Project No.");
      lvCostPlusRec.SETRANGE(Principal, Principal);
      lvCostPlusRec.SETRANGE("Commission No.", "Commission No.");
      lvCostPlusRec.SETRANGE("Settl.Sheet No.", '');
      lvCostPlusRec.SETRANGE(Invoiced, FALSE);
      lvCostPlusRec.SETRANGE("Removal Contribution", TRUE);
      lvCostPlusRec.DELETEALL(TRUE);

      lvCostPlusRec.SETRANGE("Removal Contribution", FALSE);
      IF lvCostPlusRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          lvCostObject := '';
          lvRemovalContribution := 0;

          IF lvCostPlusRec."Trade Item" <> '' THEN BEGIN
            lvTradeItemRec.GET(lvCostPlusRec."Vendor (Trade Item)", lvCostPlusRec."Trade Item");
            lvCostObject := lvTradeItemRec."Cost Object (Removal)";
            lvRemovalContribution := lvTradeItemRec."Removal Contribution";
            IF lvRemovalContribution <> 0 THEN BEGIN
              lvTradeItemRec.TESTFIELD("Cost Object (Removal)");
              IF lvTradeItemRec."Application Unit" = lvCostPlusRec."Unit of Measure" THEN
                lvUnitFactor := 1
              ELSE
                lvUnitFactor := lvTradeItemRec."Qty. per Unit of Measure";
            END;
          END ELSE BEGIN  //db, 05-09-08
            IF lvCostPlusRec."Item No." <> '' THEN BEGIN
              IF lvItemRec.GET(lvCostPlusRec."Item No.") THEN BEGIN
                //IF needed in case of intercompany posting
                lvCostObject := lvItemRec."Cost Object (Removal)";
                lvRemovalContribution := lvItemRec."Removal Contribution";
                IF lvRemovalContribution <> 0 THEN BEGIN
                  lvItemRec.TESTFIELD("Cost Object (Removal)");
                  lvUnitFactor := UnitControl.GetQtyPerUnitOfMeasure(lvItemRec, lvCostPlusRec."Unit of Measure");
                END;
              END;
            END;
          END;

          IF lvRemovalContribution <> 0 THEN BEGIN
            DimMgt.GetDimValueRec(2, lvCostObject, DimValRec, TRUE, lvCostPlusRec."Project No.");
            lvCostPlusRec2.INIT;
            lvCostPlusRec2."Project No." := lvCostPlusRec."Project No.";
            lvCostPlusRec2.Principal := lvCostPlusRec.Principal;
            lvCostPlusRec2."Commission No." := lvCostPlusRec."Commission No.";
            lvCostPlusRec2."Settl.Sheet No." := lvCostPlusRec."Settl.Sheet No.";
            lvCostPlusRec2."Line No." := lvCostPlusRec."Line No.";
            REPEAT
              lvCostPlusRec2."Line No." := lvCostPlusRec2."Line No." + 1;
            UNTIL lvCostPlusRec2.INSERT(TRUE);

            lvCostPlusRec2.Element := lvCostPlusRec.Element;
            lvCostPlusRec2."Extension Contract" := lvCostPlusRec."Extension Contract";
            lvCostPlusRec2."Cost Object" := DimValRec.Code;
            lvCostPlusRec2.Description := DimValRec.Name;
            lvCostPlusRec2.Quantity := lvCostPlusRec.Quantity * lvUnitFactor;
            lvCostPlusRec2."Unit of Measure" := DimValRec."Unit of Measure";
            lvCostPlusRec2."Cost Component" := DimValRec."Cost Component";
            lvCostPlusRec2."Basic Price" := lvRemovalContribution;
            lvCostPlusRec2."Basic Price Found at" := FIELDCAPTION("Removal Contribution");
            lvCostPlusRec2."Surcharge %" := 0;  //db, 26-11-09: M17166
            lvCostPlusRec2."Sales Price" := lvCostPlusRec2."Basic Price" * (1 + lvCostPlusRec2."Surcharge %"/100);
            lvCostPlusRec2.CalcSalesAmount;
            lvCostPlusRec2."VAT Prod. Posting Group" := lvCostPlusRec."VAT Prod. Posting Group";
            lvCostPlusRec2."Removal Contribution" := TRUE;
            lvCostPlusRec2."Attached to Line No. (RC)" := lvCostPlusRec."Line No.";  //db, 22-10-09: M16544
            lvCostPlusRec2.MODIFY;
          END;
        UNTIL lvCostPlusRec.NEXT = 0;
      END;
    END;

    PROCEDURE GetCostPrice@1100485010();
    VAR
      lvHourLineRec@1100485000 : Record 11012039;
      lvPriceFactor@1100409000 : Decimal;
    BEGIN
      //>> 150324 ITERO.AC RFC082 ( Same as IME374 Allow calculation of Cost price for manual rows, Override call 18326 )
      // IF "Entry No. Project Ledger" = 0 THEN //Call 18326
      //  EXIT;
      //<< 150324 ITERO.AC RFC082

      IF ("Employee No." <> xRec."Employee No.") OR
         ("Project No." <> xRec."Project No.") OR
         (Element <> xRec.Element) OR
         ("Extension Contract" <> xRec."Extension Contract") OR
         ("Hour Rate Code" <> xRec."Hour Rate Code") OR
         ("Wage Component" <> xRec."Wage Component") OR
         ("Cost Component" <> xRec."Cost Component") OR
         ("Cost Object" <> xRec."Cost Object") THEN
      BEGIN
        lvHourLineRec.INIT;
        lvHourLineRec.Type := lvHourLineRec.Type::Project;
        lvHourLineRec."Employee No." := "Employee No.";
        lvHourLineRec."Project No." := "Project No.";
        lvHourLineRec.Element := Element;
        lvHourLineRec."Extension Contract" := "Extension Contract";
        lvHourLineRec."Posting Date" := TODAY;  //ipv "Posting Date";
        //lvHourLineRec."Plant Rate Code" := "Hour Rate Code"; //* "Hour Rate Code" is not the same as "Plant Rate Code"
        lvHourLineRec."Wage Component" := "Wage Component";
        lvHourLineRec."Cost Component" := "Cost Component";
        lvHourLineRec."Cost Object" := "Cost Object";
        lvHourLineRec."Cost Type" := lvHourLineRec."Cost Type"::Labor;
        IF EmplRec.GET("Employee No.") THEN
          lvHourLineRec.External := EmplRec.External;
        lvHourLineRec.CalcRateAndAmount;
        //>> 160324 ITERO.AC RFC082 Get Price Factor for current Cost Type
        lvPriceFactor := GetPrincipalCostPriceFactor( "Project No.", Principal, "Cost Type") ;
        //<< 160324 ITERO.AC RFC082
        "Cost Price" := lvHourLineRec."Unit Cost (LCY)" * lvPriceFactor;  // 160324 ITERO.AC RFC082 Added lvPriceFactor
      END;
    END;

    PROCEDURE CheckSourceDocument@1100485011();
    VAR
      lvHourLineRec@1100485000 : Record 11012039;
      lvPurchLineRec@1100485001 : Record 39;
    BEGIN
      IF ("Source Document" = '') OR ("Source Line" = 0) THEN EXIT;

      CALCFIELDS("Cost Type");
      IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
        lvHourLineRec.SETCURRENTKEY("Document No.", "Employee No.");
        lvHourLineRec.SETRANGE("Document No.", "Source Document");
        lvHourLineRec.SETRANGE("Line No.", "Source Line");
        lvHourLineRec.SETRANGE("Employee No.", "Employee No.");
        lvHourLineRec.MODIFYALL("Cost Plus Entry Created", FALSE);
      END ELSE BEGIN
        lvPurchLineRec.SETRANGE("Document Type", lvPurchLineRec."Document Type"::Order);
        lvPurchLineRec.SETRANGE("Document No.", "Source Document");
        lvPurchLineRec.SETRANGE("Line No.", "Source Line");
        lvPurchLineRec.MODIFYALL("Cost Plus Entry Created", FALSE);
      END;
    END;

    PROCEDURE GetHourRateCode@1100485014();
    VAR
      TradeGrpRec@1210190000 : Record 11012015;
      RateByTradeAssWageCompRec@1210190003 : Record 11012086;
      lvHourRateCode@1100485003 : Code[20];
      lvLoopCount@1100485004 : Integer;
    BEGIN
      IF (CurrFieldNo = FIELDNO("Hour Rate Code")) OR ValidateHourRateCode OR (CurrFieldNo = FIELDNO("Reference Date"))THEN
        EXIT;
      ValidateHourRateCode := FALSE;

      ProjSetup.GET;

      CALCFIELDS("Cost Type");
      IF ("Cost Type" = "Cost Type"::Labor) THEN BEGIN
        REPEAT
          lvLoopCount := lvLoopCount + 1;
          IF ((lvLoopCount = 1) AND (ProjSetup."Get Hour Rate Sequence" = ProjSetup."Get Hour Rate Sequence"::TradeGroup_CostObject)) OR
             ((lvLoopCount = 2) AND (ProjSetup."Get Hour Rate Sequence" = ProjSetup."Get Hour Rate Sequence"::CostObject_TradeGroup))
          THEN BEGIN
            IF EmplRec.GET("Employee No.") THEN BEGIN
              GetDescription;
              IF NOT TradeGrpRec.GET(EmplRec."Trade Association") THEN
                TradeGrpRec.INIT;
              IF NOT RateByTradeAssWageCompRec.GET(EmplRec."Trade Association", "Wage Component") THEN
                RateByTradeAssWageCompRec.INIT;
              lvHourRateCode := RateByTradeAssWageCompRec."Hour Rate Code";
              IF lvHourRateCode = '' THEN
                lvHourRateCode := TradeGrpRec."Hour Rate Code (Cost Plus)";
            END;
          END;

          IF (lvHourRateCode = '') AND (lvLoopCount = 1) AND ("Cost Object" <> '')THEN BEGIN
            DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE, "Project No.");
            IF DimValRec."Hour Rate Code (Cost Plus)" <> '' THEN
              lvHourRateCode := DimValRec."Hour Rate Code (Cost Plus)";
          END;
        UNTIL (lvHourRateCode <> '') OR (lvLoopCount = 2);

        IF lvHourRateCode <> "Hour Rate Code" THEN
          VALIDATE("Hour Rate Code", lvHourRateCode);
      END;
    END;

    PROCEDURE DetermineChargeable@1100525002();
    VAR
      JobSetup@1100525000 : Record 315;
    BEGIN
      JobSetup.GET;
      IF JobSetup."Release CPE Mandatory" = TRUE THEN
        Chargeable := FALSE
      ELSE
        Chargeable := TRUE;
    END;

    PROCEDURE SetInvoiceStatus@1100525000(VAR ProjectCostPlusEntry@1100525000 : Record 11012019);
    VAR
      CostPlusRec@1100485000 : Record 11012019;
    BEGIN
      CostPlusRec.COPY(ProjectCostPlusEntry); // 34599.n
      // 34599.so
      //CostPlusRec.RESET;
      //CostPlusRec.SETRANGE("Project No.", "Project No.");
      //CostPlusRec.SETRANGE(Principal, Principal);
      //CostPlusRec.SETRANGE("Commission No.", "Commission No.");
      //CostPlusRec.SETRANGE("Settl.Sheet No.", "Settl.Sheet No.");
      // 34599.eo
      CostPlusRec.SETRANGE(Chargeable, FALSE);
      CostPlusRec.SETRANGE(Invoiced, FALSE);
      IF CostPlusRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          CostPlusRec.VALIDATE(Chargeable, TRUE);
          CostPlusRec.MODIFY;
        UNTIL CostPlusRec.NEXT = 0;
      END;
    END;

    PROCEDURE SetCostPlusEntriesProcessed@1100525009(VAR ProjectCostPlusEntry@1100525000 : Record 11012019);
    VAR
      CostPlusRec@1100485000 : Record 11012019;
    BEGIN
      // 34599.n
      CostPlusRec.COPY(ProjectCostPlusEntry);
      CostPlusRec.SETRANGE(Processed, FALSE);
      CostPlusRec.SETRANGE(Invoiced, FALSE);
      IF CostPlusRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          CostPlusRec.Processed := TRUE;
          CostPlusRec.MODIFY;
        UNTIL CostPlusRec.NEXT = 0;
      END;
    END;

    PROCEDURE SetValidateHourRateCode@1100525001(lValidateHourRateCode@1100525000 : Boolean);
    BEGIN
      ValidateHourRateCode := lValidateHourRateCode;
    END;

    PROCEDURE GetSalesDiscount@1100525003();
    BEGIN
      //db, 09-07-09
      IF "Gross Price" <> 0 THEN
        "Sales Discount % (Item)" := (("Gross Price" - "Basic Price") / "Gross Price") * 100;
    END;

    PROCEDURE GetPurchaseDiscount@1100525004();
    BEGIN
      //db, 09-07-09
      IF "Gross Price" <> 0 THEN
        "Purchase Discount % (Item)" := (("Gross Price" - "Cost Price") / "Gross Price") * 100;
      IF NOT CheckItemLine THEN
        "Purchase Discount % (Item)" := 0;
    END;

    PROCEDURE CheckRemovalContribution@1100525005();
    VAR
      CostPlusRec@1100525000 : Record 11012019;
    BEGIN
    END;

    PROCEDURE CheckTravelData@1210190001();
    VAR
      ServSetup@1100525000 : Record 315;
      CostPlusRec@1210190000 : Record 11012019;
      ProjRec@1100525001 : Record 11072003;
      AdrsRec@1100525002 : Record 222;
      LastLino@1210190001 : Integer;
    BEGIN
      ProjSetup.GET;
      ProjSetup.TESTFIELD("Cost Object Travel Time");
      ProjSetup.TESTFIELD("Cost Object Travel Distance");
      ProjSetup.TESTFIELD("Cost Object Travel Cost");

      ProjRec.GET("Project No.");
      IF NOT AdrsRec.GET(ProjRec."Bill-to Customer No.", ProjRec."Project Address Code") THEN AdrsRec.INIT;

      CostPlusRec.RESET;
      CostPlusRec.SETRANGE("Project No.", "Project No.");
      CostPlusRec.SETRANGE(Principal, Principal);
      CostPlusRec.SETRANGE("Commission No.", "Commission No.");
      CostPlusRec.SETRANGE("Settl.Sheet No.", '');
      IF CostPlusRec.FINDLAST THEN
        LastLino := CostPlusRec."Line No."
      ELSE
        LastLino := 0;

      CostPlusRec.SETRANGE("Cost Object", ProjSetup."Cost Object Travel Time");
      IF NOT CostPlusRec.FINDFIRST THEN BEGIN
        DimMgt.GetDimValueRec(2, ProjSetup."Cost Object Travel Time", DimValRec, TRUE,'');

        IF AdrsRec."Travel Time" <> 0 THEN BEGIN
          CostPlusRec.INIT;
          CostPlusRec.VALIDATE("Project No.", "Project No.");
          CostPlusRec.Principal := ''; //mg, 08-03-11: M25683 force onvalidate
          CostPlusRec.VALIDATE(Principal, Principal);
          CostPlusRec."Commission No." := "Commission No.";
          CostPlusRec."Settl.Sheet No." := '';
          CostPlusRec."Line No." := LastLino + 10000;
          CostPlusRec.INSERT(TRUE);

          CostPlusRec.Element := DimValRec.Element; //mg, 07-01-11: M23984
          CostPlusRec."Cost Object" := DimValRec.Code;
          CostPlusRec.Description := DimValRec.Name;
          CostPlusRec.Quantity := AdrsRec."Travel Time";
          CostPlusRec."Unit of Measure" := DimValRec."Unit of Measure";
          CostPlusRec.VALIDATE("Cost Component", DimValRec."Cost Component");
          IF DimValRec."Rate Code" <> '' THEN
            CostPlusRec.VALIDATE("Hour Rate Code", DimValRec."Rate Code")
          ELSE
            CostPlusRec.GetBasicPrice;
          CostPlusRec.VALIDATE("Surcharge %", CostPlusRec.GetSurcharge);
          CostPlusRec.MODIFY;

          LastLino := CostPlusRec."Line No.";
        END;
      END;

      CostPlusRec.SETRANGE("Cost Object", ProjSetup."Cost Object Travel Distance");
      IF NOT CostPlusRec.FINDFIRST THEN BEGIN
        DimMgt.GetDimValueRec(2, ProjSetup."Cost Object Travel Distance", DimValRec, TRUE,'');

        IF AdrsRec."Travel Distance" <> 0 THEN BEGIN
          CostPlusRec.INIT;
          CostPlusRec.VALIDATE("Project No.", "Project No.");
          CostPlusRec.Principal := ''; //mg, 08-03-11: M25683 force onvalidate
          CostPlusRec.VALIDATE(Principal, Principal);
          CostPlusRec."Commission No." := "Commission No.";
          CostPlusRec."Settl.Sheet No." := '';
          CostPlusRec."Line No." := LastLino + 10000;
          CostPlusRec.INSERT(TRUE);

          CostPlusRec.Element := DimValRec.Element; //mg, 07-01-11: M23984
          CostPlusRec."Cost Object" := DimValRec.Code;
          CostPlusRec.Description := DimValRec.Name;
          CostPlusRec.Quantity := AdrsRec."Travel Distance";
          CostPlusRec."Unit of Measure" := DimValRec."Unit of Measure";
          CostPlusRec.VALIDATE("Cost Component", DimValRec."Cost Component");
          CostPlusRec.GetBasicPrice;
          CostPlusRec.VALIDATE("Surcharge %", CostPlusRec.GetSurcharge);
          CostPlusRec.MODIFY;

          LastLino := CostPlusRec."Line No.";
        END;
      END;

      CostPlusRec.SETRANGE("Cost Object", ProjSetup."Cost Object Travel Cost");
      IF NOT CostPlusRec.FINDFIRST THEN BEGIN
        DimMgt.GetDimValueRec(2, ProjSetup."Cost Object Travel Cost", DimValRec, TRUE,'');

        IF AdrsRec."Travel Cost" <> 0 THEN BEGIN
          CostPlusRec.INIT;
          CostPlusRec.VALIDATE("Project No.", "Project No.");
          CostPlusRec.Principal := ''; //mg, 08-03-11: M25683 force onvalidate
          CostPlusRec.VALIDATE(Principal, Principal);
          CostPlusRec."Commission No." := "Commission No.";
          CostPlusRec."Settl.Sheet No." := '';
          CostPlusRec."Line No." := LastLino + 10000;
          CostPlusRec.INSERT(TRUE);

          CostPlusRec.Element := DimValRec.Element; //mg, 07-01-11: M23984
          CostPlusRec."Cost Object" := DimValRec.Code;
          CostPlusRec.Description := DimValRec.Name;
          CostPlusRec.Quantity := 1;
          CostPlusRec."Unit of Measure" := DimValRec."Unit of Measure";
          CostPlusRec.VALIDATE("Cost Component", DimValRec."Cost Component");
          CostPlusRec."Basic Price" := AdrsRec."Travel Cost";
          CostPlusRec.VALIDATE("Surcharge %", CostPlusRec.GetSurcharge);
          CostPlusRec.MODIFY;

          LastLino := CostPlusRec."Line No.";
        END;
      END;
    END;

    PROCEDURE CalcCostAmount@1210190010();
    BEGIN
      VALIDATE("Cost Amount", "Cost Price" * Quantity); // jhoek.200611.begin
    END;

    PROCEDURE GetSalesAmount@1210190003() SalesAmnt : Decimal;
    VAR
      Currency@1210190003 : Record 4;
      CostPlusPrice@1210190000 : Decimal;
      CostPlusDisc@1210190001 : Decimal;
      LineAmountDisc@1210190002 : Decimal;
    BEGIN
      //mg, 01-08-11: M19658: Do a rounding of amounts like T37 Sales Line
      IF NOT CustRec.GET(Principal) THEN CustRec.INIT;

      CostPlusPrice := "Sales Price";
      CostPlusDisc := 0;
      //IF CustRec."Item Price Cost Plus Entry" = CustRec."Item Price Cost Plus Entry"::GrossMin THEN
      IF NOT UseCostPrice(CustRec) THEN // LAHE 130117
      BEGIN
        IF ("Gross Price" > "Sales Price") AND ("Gross Price" <> 0) THEN BEGIN
          CostPlusPrice := "Gross Price";
          CostPlusDisc := 100 * ("Gross Price" - "Sales Price") / "Gross Price";
        END ELSE BEGIN
          IF ("Basic Price" > "Sales Price") AND ("Basic Price" <> 0) THEN BEGIN
            CostPlusPrice := "Basic Price";
            CostPlusDisc := 100 * ("Basic Price" - "Sales Price") / "Basic Price";
          END;
        END;
      END;

      Currency.InitRoundingPrecision;  // 160324 ITERO.AC RFC082

      IF ProjPrincipalRec.GET("Project No.", Principal) THEN
        IF ProjPrincipalRec."Currency Code" <> '' THEN
          Currency.GET(ProjPrincipalRec."Currency Code");

      LineAmountDisc := ROUND(
        ROUND(Quantity * CostPlusPrice, Currency."Amount Rounding Precision") * CostPlusDisc / 100, Currency."Amount Rounding Precision"
      );
      SalesAmnt := ROUND(Quantity * CostPlusPrice, Currency."Amount Rounding Precision") - LineAmountDisc;
    END;

    PROCEDURE CalcSalesAmount@1100525008();
    BEGIN
      //VALIDATE("Sales Amount", "Sales Price" * Quantity); //mg.o, 01-08-11: M19658
      "Sales Amount" := GetSalesAmount(); //mg, 01-08-11: M19658
    END;

    PROCEDURE GetBasicAmount@1210190007() BasicAmnt : Decimal;
    VAR
      Currency@1210190003 : Record 4;
      Customer@1210190005 : Record 18;
      ProjectPrincipal@1210190006 : Record 11012005;
      CostPlusPrice@1210190000 : Decimal;
      CostPlusDisc@1210190001 : Decimal;
      LineAmountDisc@1210190002 : Decimal;
    BEGIN
      //mg, 01-08-11: M19658: Do a rounding of amounts like T37 Sales Line
      IF NOT Customer.GET(Principal) THEN Customer.INIT;

      CostPlusPrice := "Basic Price";
      CostPlusDisc := 0;
      //IF Customer."Item Price Cost Plus Entry" = Customer."Item Price Cost Plus Entry"::GrossMin THEN
      IF NOT UseCostPrice(Customer) THEN // LAHE 130117
      BEGIN
        IF ("Gross Price" > CostPlusPrice) AND ("Gross Price" <> 0) THEN BEGIN
          CostPlusPrice := "Gross Price";
          CostPlusDisc := 100 * ("Gross Price" - "Basic Price") / "Gross Price";
        END;
      END;

      IF ProjectPrincipal.GET("Project No.", Principal) THEN
        IF ProjectPrincipal."Currency Code" <> '' THEN
          Currency.GET(ProjectPrincipal."Currency Code");

      LineAmountDisc := ROUND(
        ROUND(Quantity * CostPlusPrice, Currency."Amount Rounding Precision") * CostPlusDisc / 100,
         Currency."Amount Rounding Precision");
      BasicAmnt := ROUND(Quantity * CostPlusPrice, Currency."Amount Rounding Precision") - LineAmountDisc;
    END;

    PROCEDURE GenerateCostPlusFromProjEntry@1100530000(VAR ProjEntryRec@1100530000 : Record 11072005;ProjCde@1100530002 : Code[20];CustCde@1100530003 : Code[20];CommCde@1100530004 : Code[20];SettlCde@1100530005 : Code[20];RestQuanLedgEntryAlso@1100530011 : Boolean;RestQuantityStartDate@1100530012 : Date;ConvertUnit@1100530018 : Boolean;AutoTranslate@1100530020 : Boolean;SerialNo@1100528500 : Code[40];LotNo@1100528501 : Code[20]);
    VAR
      CostPlusRec@1100530001 : Record 11012019;
      TradeItemRec@1100530017 : Record 11012317;
      BasicItemRec@1100530016 : Record 11012316;
      ItemRec@1100530015 : Record 27;
      JobRec@1100530019 : Record 11072003;
      ItemTranslation@1210190004 : Record 30;
      lvCostPrice@1100530010 : Decimal;
      lvMissUnit@1100530009 : Boolean;
      lvUnitFactor@1100530008 : Decimal;
      lvItemUnknown@1100530007 : Boolean;
      lvQuantity@1100530006 : Decimal;
      lvSavedQuantity@1100530014 : Decimal;
      HistCostPriceItem@1210190001 : Boolean;
      HistCostPriceCostObject@1210190000 : Boolean;
      UOMMgt@1210190002 : Codeunit 5402;
    BEGIN
      //db, 10-01-11: M22696 (removed from report 11012013)

      //db.sn, 07-07-11: M21954
      ProjSetup.GET;
      HistCostPriceItem := ProjSetup."Copy Price Item from Entry";
      HistCostPriceCostObject := ProjSetup."Copy Price C.Object from Entry";
      //db.en, 07-07-11: M21954

      WITH ProjEntryRec DO BEGIN
        JobRec.GET(ProjCde);  //db, 10-01-11

        CostPlusRec.INIT;
        CostPlusRec."Project No." := ProjCde;
        CostPlusRec.Principal := CustCde;
        CostPlusRec."Commission No." := CommCde;
        CostPlusRec."Settl.Sheet No." := SettlCde;

        //db.sn, 12-10-09: M16646
        IF Quantity = 0 THEN BEGIN
          IF "Unit Cost (LCY)" <> 0 THEN BEGIN
            lvQuantity := ROUND("Total Cost (LCY)"/ "Unit Cost (LCY)");  //expense (kilometer)
            lvCostPrice := "Unit Cost (LCY)";
          END ELSE BEGIN
            lvQuantity := 1;
            lvCostPrice := "Total Cost (LCY)";
          END;
        END ELSE BEGIN
          lvQuantity := Quantity;
          lvCostPrice := "Unit Cost (LCY)";
        END;
        IF "Qty. per Unit of Measure" <> 0 THEN  //*32947.n
          lvCostPrice := lvCostPrice / "Qty. per Unit of Measure";  //*32947.n
        //db.en, 12-10-09: M16646

        IF RestQuanLedgEntryAlso AND "Cost Plus Entry Created" THEN BEGIN
          IF ("Posting Date" < RestQuantityStartDate) THEN
            EXIT;  //db, 10-01-11
          CALCFIELDS("Quantity Invoiced");
          lvQuantity := lvQuantity - "Quantity Invoiced";
        END;

        IF lvQuantity <> 0 THEN BEGIN
          CostPlusRec."Line No." := GetCostPlusFirstFreeLine(ProjCde, CustCde, CommCde, SettlCde);  //db, 10-01-11
          CostPlusRec.INSERT(TRUE);  //db, 23-06-08
          CostPlusRec."Country/Region of Origin" := "Country of Origin/Destination";
          CostPlusRec.Quantity := lvQuantity;
          CostPlusRec."Unit of Measure" := "Unit of Measure Code";
          CostPlusRec."Employee No." := "Employee No.";
          DimMgt.GetDimValueRec(2, "Global Dimension 2 Code", DimValRec, TRUE, ProjCde);
          CostPlusRec."Cost Object" := "Global Dimension 2 Code";
          CostPlusRec."Cost Component" := "Cost Component";
          CostPlusRec.Element := Element;
          CostPlusRec."Extension Contract" := "Extension Contract";
          CostPlusRec."Wage Component" := "Wage Component";
          CostPlusRec."Item No." := "Item No.";
          CostPlusRec."Serial No." := SerialNo; //DP00121
          CostPlusRec."Lot No." := LotNo; //DP00121
          CostPlusRec."Basic Item" := "Basic Item";
          CostPlusRec."Trade Item" := "Trade Item";
          CostPlusRec.Manufacturer := Manufacturer;
          CostPlusRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
          CostPlusRec."Employee No." := "Employee No."; //call 27723/28625

          CostPlusRec.GetBasicPrice;

          IF "Basic Item" <> '' THEN BEGIN  //db, 13-11-08: M13337
            CostPlusRec."Basic Item" := "Basic Item";
            CostPlusRec.Manufacturer := Manufacturer;
          END;
          IF "Trade Item" <> '' THEN BEGIN  //db, 13-11-08: M13337
            CostPlusRec."Trade Item" := "Trade Item";
            CostPlusRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
          END;
          CustRec.GET(CostPlusRec.Principal);  //db, 18-07-06: check option GrossMin by customer instead common setup
          IF CostPlusRec.CheckItemLine THEN
            IF (CostPlusRec."Basic Price" = 0) OR (HistCostPriceItem = TRUE) THEN BEGIN  //db, 17-09-09: M14148+16524
              CostPlusRec."Cost Price" := lvCostPrice;  //db, 08-08-11
              //IF CustRec."Item Price Cost Plus Entry" = CustRec."Item Price Cost Plus Entry"::CostPrice THEN BEGIN
              IF UseCostPrice(CustRec) THEN BEGIN // LAHE 130117
                CostPlusRec."Basic Price" := lvCostPrice;
                CostPlusRec."Basic Price Found at" := TABLECAPTION;
              END;
            END;

          lvSavedQuantity := CostPlusRec.Quantity;  //validate item-data disturbes quantity/unit
          IF "Trade Item" <> '' THEN BEGIN
            TradeItemRec.GET("Vendor (Trade Item)", "Trade Item");
            IF ConvertUnit = TRUE THEN BEGIN
              IF (UPPERCASE(TradeItemRec."Packaging Unit") = "Unit of Measure Code") AND
                 (UPPERCASE(TradeItemRec."Packaging Unit") <> UPPERCASE(TradeItemRec."Application Unit")) THEN
                lvUnitFactor := TradeItemRec."Qty. per Unit of Measure";  //db, 13-06-08: M10185
            END;
            lvMissUnit := ((UPPERCASE(TradeItemRec."Application Unit") <> "Unit of Measure Code") AND
                           (UPPERCASE(TradeItemRec."Packaging Unit") <> "Unit of Measure Code"));  //db,13-06-08: M10310
            IF (lvMissUnit = FALSE) AND
               ((TradeItemRec."Removal Contribution" <> 0) OR
                //(CustRec."Item Price Cost Plus Entry" = CustRec."Item Price Cost Plus Entry"::GrossMin)) THEN BEGIN
                (NOT UseCostPrice(CustRec))) THEN BEGIN // LAHE 130117
              CostPlusRec.VALIDATE("Trade Item", "Trade Item");
              lvCostPrice := CostPlusRec."Cost Price";  //db, 20-08-07
              //32761.sn
              IF HistCostPriceItem AND ("Unit of Measure Code" <> CostPlusRec."Unit of Measure") AND
                 (TradeItemRec."Qty. per Unit of Measure" <> 0)
              THEN
                lvCostPrice := lvCostPrice /  TradeItemRec."Qty. per Unit of Measure";
              //32761.en
            END ELSE BEGIN  //db, 05-12-07 (melding 7913 + 10572)
              lvCostPrice := CostPlusRec."Cost Price";  //db, 10-02-09: M13987
              //mg.sc, 15-03-12: M33991
              CostPlusRec.FindCostPrice(2);
              CostPlusRec.GetSalesDiscount;
      //        CostPlusRec."Purchase Discount % (Item)" := TradeItemRec."Discount Percentage";
      //        CostPlusRec.CalculateGrossPrice(lvCostPrice, CostPlusRec."Purchase Discount % (Item)");
              //mg.ec, 15-03-12: M33991
            END;
          END ELSE BEGIN
            IF "Basic Item" <> '' THEN BEGIN
              BasicItemRec.GET(Manufacturer, "Basic Item");
              IF ConvertUnit = TRUE THEN BEGIN
                IF (UPPERCASE(BasicItemRec."Packaging Unit") = "Unit of Measure Code") AND
                   (UPPERCASE(BasicItemRec."Packaging Unit") <> UPPERCASE(BasicItemRec."Application Unit")) THEN
                  lvUnitFactor := BasicItemRec."Qty. per Unit of Measure";  //db, 13-06-08: M10185
              END;
              lvMissUnit := ((UPPERCASE(BasicItemRec."Application Unit") <> "Unit of Measure Code") AND
                             (UPPERCASE(BasicItemRec."Packaging Unit") <> "Unit of Measure Code"));  //db,13-06-08: M10310
              IF (lvMissUnit = FALSE) AND
                 ((BasicItemRec."Removal Contribution" <> 0) OR
                  //(CustRec."Item Price Cost Plus Entry" = CustRec."Item Price Cost Plus Entry"::GrossMin)) THEN BEGIN
                  (NOT UseCostPrice(CustRec))) THEN BEGIN  // LAHE 130117
                CostPlusRec.VALIDATE("Basic Item", "Basic Item");
                lvCostPrice := CostPlusRec."Cost Price";  //db, 20-08-07
                //32761.sn
                IF HistCostPriceItem AND ("Unit of Measure Code" <> CostPlusRec."Unit of Measure") AND
                   (BasicItemRec."Qty. per Unit of Measure" <> 0)
                THEN
                  lvCostPrice := lvCostPrice /  BasicItemRec."Qty. per Unit of Measure";
                //32761.en
              END ELSE BEGIN  //db, 05-12-07 (melding 7913 + 10572)
                lvCostPrice := CostPlusRec."Cost Price";  //db, 10-02-09: M13987
                //mg.sc, 15-03-12: M33991
                CostPlusRec.FindCostPrice(1);
                CostPlusRec.GetSalesDiscount;
      //          CostPlusRec."Purchase Discount % (Item)" := BasicItemRec."Discount Percentage";
      //          CostPlusRec.CalculateGrossPrice(lvCostPrice, CostPlusRec."Purchase Discount % (Item)");
                //mg.ec, 15-03-12: M33991
              END;
            END ELSE BEGIN
              IF "Item No." <> '' THEN BEGIN
                IF ItemRec.GET("Item No.") THEN BEGIN
                  //db.sn, 06-09-11: M22696
                  IF ConvertUnit = TRUE THEN BEGIN
                    IF (ItemRec."Purch. Unit of Measure" = "Unit of Measure Code") AND
                       (ItemRec."Purch. Unit of Measure" <> ItemRec."Base Unit of Measure") THEN
                      lvUnitFactor := UOMMgt.GetQtyPerUnitOfMeasure(ItemRec,"Unit of Measure Code");
                  END;
                  //db.en, 06-09-11: M22696
                  IF (ItemRec."Removal Contribution" <> 0) OR
                     //(CustRec."Item Price Cost Plus Entry" = CustRec."Item Price Cost Plus Entry"::GrossMin) THEN BEGIN
                     (NOT UseCostPrice(CustRec)) THEN BEGIN // LAHE 130117
                    CostPlusRec.VALIDATE("Item No.", "Item No.");
                    lvCostPrice := CostPlusRec."Cost Price";
                    //32761.sn
                    IF HistCostPriceItem AND ("Unit of Measure Code" <> CostPlusRec."Unit of Measure") AND
                       (UOMMgt.GetQtyPerUnitOfMeasure(ItemRec,"Unit of Measure Code") <> 0)
                    THEN
                      lvCostPrice := lvCostPrice /  UOMMgt.GetQtyPerUnitOfMeasure(ItemRec,"Unit of Measure Code");
                    //32761.en
                  END ELSE BEGIN  //db, 05-12-07 (melding 7913 + 10572)
                    lvCostPrice := CostPlusRec."Cost Price";  //db, 10-02-09: M13987
                    //mg.sc, 15-03-12: M33991
                    CostPlusRec.FindCostPrice(0);
                    CostPlusRec.GetSalesDiscount;
      //              CostPlusRec."Purchase Discount % (Item)" := ItemRec."Profit %";
      //              CostPlusRec.CalculateGrossPrice(lvCostPrice, CostPlusRec."Purchase Discount % (Item)");
                    //mg.sc, 15-03-12: M33991
                  END;
                END ELSE
                  lvItemUnknown := TRUE; //Item unknown, Probably intercompany posting
              END ELSE BEGIN
                CheckDocument("No. Series", "Document No.", "Document Line No.",
                  CostPlusRec."Gross Price", CostPlusRec."Basic Price", CostPlusRec."Sales Discount % (Item)",
                  CostPlusRec."Basic Price Found at", HistCostPriceCostObject);
              END;
            END;
          END;

          IF "Global Dimension 2 Code" <> '' THEN  //db, 19-06-09: M14973
            CostPlusRec."Cost Object" := "Global Dimension 2 Code";

          CostPlusRec.VALIDATE("Cost Price", lvCostPrice);
          IF NOT CostPlusRec.CheckItemLine AND (CostPlusRec."Basic Price" = 0) THEN
            CostPlusRec.GetBasicPrice;

          IF (CostPlusRec."Basic Price" = 0) AND (JobRec."Internal Project") THEN
          BEGIN
            CostPlusRec."Basic Price" := lvCostPrice;  //M21448 25-08-10
            CostPlusRec."Basic Price Found at" := TABLECAPTION;
          END;

          //validate item-data disturbes quantity/unit: evaluate function CheckItemUnitConversion
          IF lvMissUnit = FALSE THEN  //db,13-06-08: M10310
            IF ConvertUnit = FALSE THEN  //db, 13-06-08: M10185
              CostPlusRec.VALIDATE("Unit of Measure","Unit of Measure Code");
          IF lvUnitFactor <> 0 THEN  //db, 13-06-08: M10185
            CostPlusRec.VALIDATE(Quantity, lvSavedQuantity * lvUnitFactor)
          ELSE
            CostPlusRec.VALIDATE(Quantity, lvSavedQuantity);

          CostPlusRec."Surcharge %" := CostPlusRec.GetSurcharge;
          CostPlusRec."Sales Price" := CostPlusRec."Basic Price" * (1 + CostPlusRec."Surcharge %"/100);
          IF "Sales Price Purch. Order" <> 0 THEN BEGIN
            CostPlusRec.VALIDATE("Sales Price", "Sales Price Purch. Order");
            CostPlusRec."Basic Price Found at" := FIELDCAPTION("Sales Price Purch. Order");
            IF CostPlusRec."Basic Price" <> 0 THEN
              CostPlusRec."Surcharge %" := (CostPlusRec."Sales Price"/CostPlusRec."Basic Price" -1) * 100
            ELSE BEGIN
              CostPlusRec."Surcharge %" := 0;
              CostPlusRec."Basic Price" := CostPlusRec."Sales Price";
              IF CostPlusRec."Gross Price" <> 0 THEN
                 CostPlusRec."Sales Discount % (Item)" :=
                   ((CostPlusRec."Gross Price" - CostPlusRec."Basic Price") / CostPlusRec."Gross Price") * 100;
            END;
          END;
          CostPlusRec.CheckCustomer;   //db, 10-01-11
          CostPlusRec.DetermineVATProdPostingGroup;  //db, 10-01-11

          CostPlusRec."Execution Date" := "Execution Date";
          IF CostPlusRec."Execution Date" = 0D THEN           //* 10927.n
            CostPlusRec."Execution Date" := "Posting Date";

          CostPlusRec."Source Document" := "Document No.";
          IF "Entry No." = 0 THEN  //db, 10-01-11: fill source line for obligations only
            CostPlusRec."Source Line" := "Document Line No.";

          CostPlusRec."Entry No. Project Ledger" := "Entry No.";
          CostPlusRec."Reconcilation ID" := CostPlusRec.GetReconcilationID;
          CostPlusRec."Removal Contribution" := "Removal Contribution";

          IF lvItemUnknown THEN
            CostPlusRec."Item No." := '';

          { //*27670.so
          //call 27239 description determination changed
          IF (CostPlusRec."Item No." <> '') THEN BEGIN
            //db, 10-01-11: disable translation executed by validate item
            IF NOT AutoTranslate THEN BEGIN
              CostPlusRec.Description := Description;
              CostPlusRec."Description 2" := "Description 2";
            END;
          END ELSE BEGIN
            IF ProjSetup."Copy Entry Description to CPE" THEN BEGIN
              CostPlusRec.Description := Description;
              CostPlusRec."Description 2" := "Description 2";
            END ELSE
              CostPlusRec.GetDescription;
            CostPlusRec.AddDateToDescription("Posting Date");
          END;
          } //*27670.eo
          //*27670.sn  Tmp solution, as in hotfix-001 (R11012013). Follow-up action needed (29573)
          IF AutoTranslate THEN BEGIN
            IF  ("Item No." <> '') THEN BEGIN
              JobRec.GET("Job No.");  //db, 20-12-11: M29573 (language project activated)
              IF ItemTranslation.GET("Item No.",'',JobRec."Language Code") THEN BEGIN
                CostPlusRec.Description := ItemTranslation.Description;
                CostPlusRec."Description 2" := ItemTranslation."Description 2";
              END;
            END;
          END ELSE BEGIN
            CostPlusRec.Description := Description;
            CostPlusRec."Description 2" := "Description 2";
          END;

          IF ProjSetup."Copy Entry Description to CPE" THEN
            CostPlusRec.AddDateToDescription("Posting Date")
          ELSE
            CostPlusRec.GetDescription;
          //*27670.en

          CostPlusRec.MODIFY(TRUE);
          CostPlusRec.InsertCustPlusCommentLine(Comment);  //*31668.n

          CostPlusRec.DetermineRemovalContribution;
        END;
      END;
    END;

    PROCEDURE GetCostPlusFirstFreeLine@1100530001(ProjCde@1100530005 : Code[20];CustCde@1100530003 : Code[20];CommCde@1100530002 : Code[20];SettlCde@1100530001 : Code[20]) FirstFreeLine : Integer;
    VAR
      CostPlusRec@1100530004 : Record 11012019;
    BEGIN
      //db, 10-01-11: M22696 (removed from report 11012013)
      CostPlusRec.SETRANGE("Project No.", ProjCde);
      CostPlusRec.SETRANGE(Principal, CustCde);
      CostPlusRec.SETRANGE("Commission No.", CommCde);
      CostPlusRec.SETRANGE("Settl.Sheet No.", SettlCde);
      IF CostPlusRec.FINDLAST THEN
        FirstFreeLine :=  CostPlusRec."Line No.";

      EXIT(FirstFreeLine + 10000);
    END;

    PROCEDURE CheckDocument@1100530003(DocSeries@1210190003 : Code[20];DocNo@1210190000 : Code[20];LineNo@1210190001 : Integer;VAR GrossPrice@1210190005 : Decimal;VAR NettPrice@1210190006 : Decimal;VAR Discount@1210190007 : Decimal;VAR PriceFoundAt@1100485000 : Text[250];HistCostPriceCostObject@1100530000 : Boolean);
    VAR
      PurchInvLine@1210190002 : Record 123;
      PurchSetup@1210190004 : Record 312;
      SeriesRec@1100525000 : Record 310;
    BEGIN
      //db, 10-01-11: M22696 (removed from report 11012013)
      PurchSetup.GET;
      IF DocSeries <> PurchSetup."Posted Invoice Nos." THEN
        IF NOT SeriesRec.GET(PurchSetup."Posted Invoice Nos.", DocSeries) THEN  //db, 10-08-09: T3746
          EXIT;

      IF PurchInvLine.GET(DocNo, LineNo) THEN BEGIN
        Discount := PurchInvLine."Line Discount %";
        IF HistCostPriceCostObject THEN BEGIN  //db, 17-09-09: M14148+16524
          NettPrice := PurchInvLine."Unit Cost (LCY)";  //db, 12-09-07 (uit) + 12-03-08 (aan)
          IF NettPrice <> 0 THEN
            PriceFoundAt := PurchInvLine.TABLECAPTION;
        END;
        //(M9805: basis is bedrag uit post, dus exclusief indirecte kosten)
        GrossPrice := NettPrice;
        IF Discount <> 100 THEN
          GrossPrice := NettPrice * 100 / (100 - Discount);
      END;
    END;

    PROCEDURE CheckCustomer@1210190002();
    BEGIN
      //db, 10-01-11: M22696 (removed from report 11012013)
      IF "Extension Contract" = '' THEN BEGIN
        ProjPrincipalRec.GET("Project No.", Principal);
        ProjPrincipalRec.TESTFIELD("Cost Plus Customer", TRUE);
      END ELSE BEGIN
        ExtRec.GET("Project No.", "Extension Contract");
        ExtRec.TESTFIELD("Settlement Method", ExtRec."Settlement Method"::"Cost Plus");
      END;
    END;

    PROCEDURE UpdateVatProdPostingGrp@1100525018() VatProdPostingGrp : Code[20];
    VAR
      ItemRec@1100525002 : Record 27;
      DimValRec@1100525006 : Record 349;
      DimMgt@1100525000 : Codeunit 408;
    BEGIN
      // RFC 547
      VatProdPostingGrp := '';

      ProjSetup.GET;
      IF NOT ProjPrincipalRec.GET("Project No.",Principal) THEN
        ProjPrincipalRec.INIT;

      IF (ProjSetup."Source VAT Prod. Posting Group" =
          ProjSetup."Source VAT Prod. Posting Group"::"Item/CostObject") THEN
      BEGIN
        IF NOT ItemRec.GET("Item No.") THEN
          ItemRec.INIT;

        IF (ItemRec."VAT Prod. Posting Group" <> '') THEN
          VatProdPostingGrp := ItemRec."VAT Prod. Posting Group";

        IF VatProdPostingGrp = '' THEN BEGIN
          DimMgt.GetDimValueRec(2,"Cost Object",DimValRec,FALSE,'');
          IF (DimValRec."VAT Prod. Posting Group" <> '') THEN
            VatProdPostingGrp := DimValRec."VAT Prod. Posting Group";
        END;
      END;

      IF VatProdPostingGrp = '' THEN
        VatProdPostingGrp := ProjPrincipalRec."VAT Prod. Posting Group";
    END;

    PROCEDURE DeleteCommentLines@1100529800();
    VAR
      CommentLine@1100529800 : Record 11020634;
      RecRef@1100529801 : RecordRef;
    BEGIN
      // **4PS MVOS
      RecRef.GETTABLE(Rec);
      CommentLine.RESET;
      CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::"Settlement Sheet");
      CommentLine.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
      IF NOT CommentLine.ISEMPTY THEN //call 31694
        CommentLine.DELETEALL(TRUE);
    END;

    PROCEDURE CommentLineExist@1210190011() : Boolean;
    VAR
      RecRef@1210190000 : RecordRef;
      CommentLine@1210190001 : Record 11020634;
    BEGIN
      RecRef.GETTABLE(Rec);
      CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::"Settlement Sheet");
      CommentLine.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
      EXIT(NOT CommentLine.ISEMPTY);
    END;

    PROCEDURE ShowTextCommentLines@1210190009() CommentLinesText : Text[1024];
    VAR
      RecRef@1210190000 : RecordRef;
      CommentLine@1210190001 : Record 11020634;
    BEGIN
      //*31668.n
      RecRef.GETTABLE(Rec);
      CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::"Settlement Sheet");
      CommentLine.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
      CommentLine.SETFILTER(Comment, '<>%1', '');
      IF NOT CommentLine.FINDSET(FALSE,FALSE) THEN
        EXIT;
      REPEAT
        IF CommentLinesText <> '' THEN
          CommentLinesText := CommentLinesText + ' ';
        CommentLinesText := CommentLinesText + CommentLine.Comment;
      UNTIL (CommentLine.NEXT = 0) OR (STRLEN(CommentLinesText) > MAXSTRLEN(CommentLinesText) - MAXSTRLEN(CommentLine.Comment) - 1);
    END;

    PROCEDURE InsertCustPlusCommentLine@1210190013(CommentLineText@1210190002 : Text[80]);
    VAR
      RecRef@1210190000 : RecordRef;
      CommentLine@1210190001 : Record 11020634;
      NextLineNo@1210190003 : Integer;
    BEGIN
      //*31668.n
      RecRef.GETTABLE(Rec);
      CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::"Settlement Sheet");
      CommentLine.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
      NextLineNo := 10000;
      IF CommentLine.FINDLAST THEN
        NextLineNo := NextLineNo + CommentLine."Line No.";

      CommentLine.INIT;
      CommentLine."Table Name" := CommentLine."Table Name"::"Settlement Sheet";
      CommentLine."Record ID" :=  RecRef.RECORDID();
      CommentLine."Line No." := NextLineNo;
      CommentLine.Date := WORKDATE;
      CommentLine.Comment := CommentLineText;
      CommentLine."Time Created" := TIME;
      CommentLine.INSERT;
    END;

    PROCEDURE SetDeleteCompleteProject@1100409000();
    BEGIN
      //*C001924.n
      gDelCompleteProject := TRUE;
    END;

    LOCAL PROCEDURE "---EVRY---"@1100290000();
    BEGIN
    END;

    PROCEDURE UseCostPrice@1100290002(_customer@1100290000 : Record 18) : Boolean;
    VAR
      _projPrincipal@1100290001 : Record 11012005;
    BEGIN
      IF NOT _projPrincipal.GET("Project No.",Principal) THEN
        CLEAR(_projPrincipal);
      EXIT((_customer."Item Price Cost Plus Project" = _customer."Item Price Cost Plus Project"::CostPrice)
        OR (_projPrincipal."Cost Price Behaviour" AND NOT "Price History Found"));
    END;

    LOCAL PROCEDURE "---ITERO---"@1100285000();
    BEGIN
    END;

    PROCEDURE SetManualPriceList@1100285001(pUseManualPl@1100285000 : Code[10]);
    BEGIN
      // ITERO.AC 160324 This flag is used to handle process flow in FindSalesPrice
      BEGIN
        gvUseManualPriceList := pUseManualPl;
      END;
    END;

    PROCEDURE GetCustPriceListFromPriority@1100285005(lvTradeItem@1100285000 : Code[20];lvRefDate@1100285003 : Date;VAR lvDiscRef1@1100285004 : Code[20]) : Code[20];
    VAR
      lvCustPlPriority@1100285001 : Record 11128278;
      lvPriceHistRec@1100285002 : Record 11012315;
    BEGIN
      // 161011 ITERO.AC This function tries to find an alternative Trade Item Vendor by a loop through the table "Customer Price List priority"
      // and for each alternative price list: search if current article code exists in "Price History Trade Item"

      CLEAR(lvCustPlPriority);
      lvCustPlPriority.SETCURRENTKEY(Priority,"Price List Code");

      IF lvCustPlPriority.FINDSET THEN BEGIN
        REPEAT

          lvPriceHistRec.SETCURRENTKEY("Item Code", "Starting Date", "Price List Code");
          lvPriceHistRec.SETRANGE("Item Code", lvTradeItem);
          lvPriceHistRec.SETRANGE("Starting Date", 0D, lvRefDate);
          lvPriceHistRec.SETRANGE("Price List Code", lvCustPlPriority."Price List Code");

          IF lvPriceHistRec.FINDLAST THEN BEGIN
            IF lvCustPlPriority."Sales Discount Term Group 1" <> '' THEN
               lvDiscRef1 := lvCustPlPriority."Sales Discount Term Group 1";
            EXIT(lvPriceHistRec."Price List Code");
          END;

        UNTIL lvCustPlPriority.NEXT=0;
      END;

      EXIT('');
    END;

    PROCEDURE CheckCostPriceBehaviour@1100409005(pProjectNo@1100409001 : Code[20];pPrincipalNo@1100409002 : Code[20]) : Boolean;
    VAR
      lvProjPrincipal@1100290001 : Record 11012005;
      lvCustomer@1100409000 : Record 18;
    BEGIN
      // 160324 ITERO.AC RFC082 New function used to determine if Cost Price Behaviour should be used
      IF NOT lvCustomer.GET(pPrincipalNo) THEN
        CLEAR(lvCustomer);
      IF NOT lvProjPrincipal.GET(pProjectNo, pPrincipalNo) THEN
        CLEAR(lvProjPrincipal);
      EXIT((lvCustomer."Item Price Cost Plus Project" = lvCustomer."Item Price Cost Plus Project"::CostPrice)
        OR (lvProjPrincipal."Cost Price Behaviour"));
    END;

    PROCEDURE CheckIfPriceHistoryExists@1100409011(pProjectNo@1100409003 : Code[20];pReferenceDate@1100409004 : Date;pItemCode@1100409001 : Code[20];VAR pGrossPrice@1100409002 : Decimal) : Boolean;
    VAR
      lvPriceHistRec@1100409000 : Record 11012315;
    BEGIN
      // 160324 ITERO.AC RFC082 New function used to Determine if "Price History Trade Item" exists for Current Customer PriceList And Current Trade Item Code

      IF NOT ProjRec.GET(pProjectNo) THEN CLEAR(ProjRec);
      pGrossPrice := 0;

      IF ProjRec."Price List Code" <> '' THEN BEGIN
        lvPriceHistRec.SETCURRENTKEY("Item Code", "Starting Date", "Price List Code");
        lvPriceHistRec.SETRANGE("Item Code", pItemCode);
        lvPriceHistRec.SETRANGE("Starting Date", 0D, pReferenceDate);
        lvPriceHistRec.SETRANGE("Price List Code",ProjRec."Price List Code");

        IF lvPriceHistRec.FINDLAST THEN BEGIN
          pGrossPrice := lvPriceHistRec."Gross Price";
          EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE GetSurchargeIfMissingArticles@1100409001(pProjNo@1100409000 : Code[20]) : Decimal;
    VAR
      lvCustPriceList@1100409001 : Record 11128273;
    BEGIN
      // 160324 ITERO.AC RFC082 Get new Surcharge value from current Customer Price List as a factor
      // Return 1 if ther is no customer price list is selected or it doesnt exist

      IF NOT ProjRec.GET(pProjNo) THEN CLEAR(ProjRec);
      IF ProjRec."Price List Code" <> '' THEN BEGIN
        IF lvCustPriceList.GET(ProjRec."Price List Code") THEN
          EXIT( 1 + (lvCustPriceList.SurchargeIfMissingArticles / 100))
        ELSE
          EXIT(1);
      END;
      EXIT(1);
    END;

    PROCEDURE GetPrincipalCostPriceFactor@1100409002(pProjectNo@1100409000 : Code[20];pPrincipalNo@1100409001 : Code[20];pCostType@1100409002 : 'Labor,Material,Subcontracting,Plant,Sundry,Revenue') : Decimal;
    VAR
      lvProjPrincipal@1100409004 : Record 11012005;
      lvCustomer@1100409003 : Record 18;
      lvPerc@1100409005 : Decimal;
    BEGIN
      // 160324 ITERO.AC RFC082 Calculate Cost Price Factor if not Cost Price Behaviour is True
      IF NOT CheckCostPriceBehaviour( pProjectNo, pPrincipalNo ) THEN BEGIN
        EXIT(1);
      END
      ELSE BEGIN

        lvPerc := 0;

        IF NOT lvCustomer.GET(pPrincipalNo) THEN
          CLEAR(lvCustomer);
        IF NOT lvProjPrincipal.GET(pProjectNo, pPrincipalNo) THEN
          EXIT(1);

          CASE pCostType OF
            pCostType::Labor:
              lvPerc := lvProjPrincipal."CostSurcharge % Labor";
            pCostType::Material:
              lvPerc := lvProjPrincipal."CostSurcharge % Material";
            pCostType::Subcontracting:
              lvPerc := lvProjPrincipal."CostSurcharge % Subcontr.";
            pCostType::Plant:
              lvPerc := lvProjPrincipal."CostSurcharge % Plant";
            pCostType::Sundry:
              lvPerc := lvProjPrincipal."CostSurcharge % Sundry";
          END;

          EXIT( 1 + (lvPerc / 100))

      END;
    END;

    LOCAL PROCEDURE CalculatePriceWithoutVAT@1100525012(pItemCode@1100525002 : Code[10];pPriceIncludesVAT@1100525003 : Boolean;pUnitPrice@1100525001 : Integer) : Decimal;
    VAR
      lvItemRec@1100525004 : Record 27;
      lvInvetSetupRec@1100525005 : Record 313;
      lvVATPostingSetupRec@1100525007 : Record 325;
      lvVATProdPostingGroup@1100525006 : Code[10];
      lvVATBusPostingGroup@1100525008 : Code[10];
      lvRetVal@1100525009 : Decimal;
      lvVATPercent@1100525010 : Decimal;
    BEGIN
      // 161012 ITERO.AC RAD043 Calculate Item Sales Price excluding VAT amount

      lvRetVal := pUnitPrice;

      IF pPriceIncludesVAT THEN BEGIN
        IF NOT lvInvetSetupRec.GET() THEN lvInvetSetupRec.INIT;
        lvVATBusPostingGroup := lvInvetSetupRec."VAT Bus. Posting Group";

        IF NOT lvItemRec.GET(pItemCode) THEN lvItemRec.INIT;
        lvVATProdPostingGroup := lvItemRec."VAT Prod. Posting Group";

        // Key: VAT Bus. Posting Group,VAT Prod. Posting Group
        IF lvVATPostingSetupRec.GET(lvVATBusPostingGroup, lvVATProdPostingGroup) THEN BEGIN
          lvVATPercent := lvVATPostingSetupRec."VAT %";
          lvRetVal := pUnitPrice / (1 + lvVATPercent / 100);
        END;

      END;

      EXIT(lvRetVal);
    END;

    BEGIN
    {
      4PS01 JD 13 maart 2007, melding 8332, Bij wijzigen regiemutaties waarschuwing op projectstatus >technisch gereed
       (alleen als voorzieningen melden uit staat).
      4PS02 JD 13 aug 2007, melding 10140, Bij archiveren en verwijderen projecten is het wel mogelijk regiemutaties weg te gooien.
      4PS03 JD 30 aug 2007, testmelding 1906, Geblokkeerde elementen niet toestaan bij regiemutaties.
      4PS04 JD 09-10-07 Melding 5091, Element vullen vanuit kostendrager
      -SE EVRY-
      LAHE 130117 "Price List Code", "Price History Found"
      LAHE 130507 "Price History Vendor No."
      150323 IME321 ITERO.SB Apply material surcharge
      160324 ITERO.AC RFC082 Added same logic as in Project Cost Plus Entry (plus changes from IME-299 IME-355, RFC001-2 in ValidateItem, FindSalesPrice, FindCostPrice)
      160414 ITERO.AC RFC082 Added field Cost Price Adjustment and removed recalculation of Cost Price
      161013 * ITERO.AC RAD043 New field "Sales Discount Percent" in Project/Job (Use either Sales Discount Group or Sales Discount Percent or none)
             * ITERO.AC RAD043 Handle Sales Prices from Item Card for Items without Item Relation (No trade item)
    }
    END.
  }
}

