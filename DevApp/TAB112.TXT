OBJECT Table 112 Sales Invoice Header
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.43897,NAVFI9.DK9.NO9,4PS9.00,4PSSE.FI.DK.NO,4PSFI;
  }
  PROPERTIES
  {
    Permissions=TableData 6216=r;
    DataCaptionFields=No.,Sell-to Customer Name;
    OnInsert=BEGIN
               //**4PS Generated Code. Do Not Change.sn05
               //DPA_OnInsert;  //*26917.o  Do not determine default department for 'Posted' table
               //**4PS Generated Code.en05
             END;

    OnDelete=VAR
               PostedDeferralHeader@1002 : Record 1704;
               DeferralUtilities@1001 : Codeunit 1720;
               SalesOfferAmount@1100485000 : Record 11012786;
             BEGIN
               TESTFIELD("No. Printed");
               LOCKTABLE;
               PostSalesLinesDelete.DeleteSalesInvLines(Rec);

               SalesCommentLine.SETRANGE("Document Type",SalesCommentLine."Document Type"::"Posted Invoice");
               SalesCommentLine.SETRANGE("No.","No.");
               SalesCommentLine.DELETEALL;

               //**4PS.sn
               SalesOfferAmount.SETRANGE("Document Type",SalesOfferAmount."Document Type"::"Posted Invoice");
               SalesOfferAmount.SETRANGE("Document No.", "No.");
               SalesOfferAmount.DELETEALL;
               //**4PS.en

               ApprovalsMgmt.DeletePostedApprovalEntries(RECORDID);
               PostedDeferralHeader.DeleteForDoc(DeferralUtilities.GetSalesDeferralDocType,'','',
                 SalesCommentLine."Document Type"::"Posted Invoice","No.");
             END;

    CaptionML=ENU=Sales Invoice Header;
    LookupPageID=Page143;
    DrillDownPageID=Page143;
  }
  FIELDS
  {
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=ENU=Sell-to Customer No.;
                                                   NotBlank=Yes }
    { 3   ;   ;No.                 ;Code20        ;CaptionML=ENU=No. }
    { 4   ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=ENU=Bill-to Customer No.;
                                                   NotBlank=Yes }
    { 5   ;   ;Bill-to Name        ;Text50        ;CaptionML=ENU=Bill-to Name }
    { 6   ;   ;Bill-to Name 2      ;Text50        ;CaptionML=ENU=Bill-to Name 2 }
    { 7   ;   ;Bill-to Address     ;Text50        ;CaptionML=ENU=Bill-to Address }
    { 8   ;   ;Bill-to Address 2   ;Text50        ;CaptionML=ENU=Bill-to Address 2 }
    { 9   ;   ;Bill-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Bill-to City }
    { 10  ;   ;Bill-to Contact     ;Text50        ;CaptionML=ENU=Bill-to Contact }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=ENU=Your Reference }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   CaptionML=ENU=Ship-to Code }
    { 13  ;   ;Ship-to Name        ;Text50        ;CaptionML=ENU=Ship-to Name }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=ENU=Ship-to Name 2 }
    { 15  ;   ;Ship-to Address     ;Text50        ;CaptionML=ENU=Ship-to Address }
    { 16  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=ENU=Ship-to Address 2 }
    { 17  ;   ;Ship-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Ship-to City }
    { 18  ;   ;Ship-to Contact     ;Text50        ;CaptionML=ENU=Ship-to Contact }
    { 19  ;   ;Order Date          ;Date          ;CaptionML=ENU=Order Date }
    { 20  ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 21  ;   ;Shipment Date       ;Date          ;CaptionML=ENU=Shipment Date }
    { 22  ;   ;Posting Description ;Text50        ;CaptionML=ENU=Description }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   CaptionML=ENU=Payment Terms Code }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 25  ;   ;Payment Discount %  ;Decimal       ;CaptionML=ENU=Payment Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=ENU=Pmt. Discount Date }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=ENU=Shipment Method Code }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=ENU=Location Code }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Customer Posting Group;Code10      ;TableRelation="Customer Posting Group";
                                                   CaptionML=ENU=Customer Posting Group;
                                                   Editable=No }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code;
                                                   Editable=No }
    { 33  ;   ;Currency Factor     ;Decimal       ;CaptionML=ENU=Currency Factor;
                                                   DecimalPlaces=0:15;
                                                   MinValue=0 }
    { 34  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=ENU=Customer Price Group }
    { 35  ;   ;Prices Including VAT;Boolean       ;CaptionML=ENU=Prices Including VAT }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;CaptionML=ENU=Invoice Disc. Code }
    { 40  ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=ENU=Customer Disc. Group }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 43  ;   ;Salesperson Code    ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Salesperson Code }
    { 44  ;   ;Order No.           ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=CONST(Order));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Order No.;
                                                   Description=4PS: table relation added }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Comment Line" WHERE (Document Type=CONST(Posted Invoice),
                                                                                                 No.=FIELD(No.),
                                                                                                 Document Line No.=CONST(0)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=ENU=No. Printed;
                                                   Editable=No }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=ENU=On Hold }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=ENU=Applies-to Doc. Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnLookup=BEGIN
                                                              CustLedgEntry.SETCURRENTKEY("Document No.");
                                                              CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                              CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                              PAGE.RUN(0,CustLedgEntry);
                                                            END;

                                                   CaptionML=ENU=Applies-to Doc. No. }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   CaptionML=ENU=Bal. Account No. }
    { 60  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Invoice Line".Amount WHERE (Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Invoice Line"."Amount Including VAT" WHERE (Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Amount Including VAT;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=ENU=VAT Registration No. }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 75  ;   ;EU 3-Party Trade    ;Boolean       ;CaptionML=ENU=EU 3-Party Trade }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=ENU=Transaction Type }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=ENU=Transport Method }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=ENU=VAT Country/Region Code }
    { 79  ;   ;Sell-to Customer Name;Text50       ;CaptionML=ENU=Sell-to Customer Name }
    { 80  ;   ;Sell-to Customer Name 2;Text50     ;CaptionML=ENU=Sell-to Customer Name 2 }
    { 81  ;   ;Sell-to Address     ;Text50        ;CaptionML=ENU=Sell-to Address }
    { 82  ;   ;Sell-to Address 2   ;Text50        ;CaptionML=ENU=Sell-to Address 2 }
    { 83  ;   ;Sell-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Sell-to City }
    { 84  ;   ;Sell-to Contact     ;Text50        ;CaptionML=ENU=Sell-to Contact }
    { 85  ;   ;Bill-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Bill-to Post Code }
    { 86  ;   ;Bill-to County      ;Text30        ;CaptionML=ENU=Bill-to County }
    { 87  ;   ;Bill-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Bill-to Country/Region Code }
    { 88  ;   ;Sell-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Sell-to Post Code }
    { 89  ;   ;Sell-to County      ;Text30        ;CaptionML=ENU=Sell-to County }
    { 90  ;   ;Sell-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Sell-to Country/Region Code }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Ship-to Post Code }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=ENU=Ship-to County }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Ship-to Country/Region Code }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=ENU=Bal. Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Bank Account;
                                                   OptionString=G/L Account,Bank Account }
    { 97  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=ENU=Exit Point }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=ENU=Correction }
    { 99  ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date }
    { 100 ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No. }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=ENU=Area }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=ENU=Transaction Specification }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   CaptionML=ENU=Payment Method Code }
    { 105 ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=ENU=Shipping Agent Code }
    { 106 ;   ;Package Tracking No.;Text30        ;CaptionML=ENU=Package Tracking No. }
    { 107 ;   ;Pre-Assigned No. Series;Code10     ;TableRelation="No. Series";
                                                   CaptionML=ENU=Pre-Assigned No. Series }
    { 108 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 110 ;   ;Order No. Series    ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Order No. Series }
    { 111 ;   ;Pre-Assigned No.    ;Code20        ;CaptionML=ENU=Pre-Assigned No. }
    { 112 ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=ENU=User ID }
    { 113 ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=ENU=Source Code }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=ENU=Tax Area Code }
    { 115 ;   ;Tax Liable          ;Boolean       ;CaptionML=ENU=Tax Liable }
    { 116 ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;CaptionML=ENU=VAT Base Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 131 ;   ;Prepayment No. Series;Code10       ;TableRelation="No. Series";
                                                   CaptionML=ENU=Prepayment No. Series }
    { 136 ;   ;Prepayment Invoice  ;Boolean       ;CaptionML=ENU=Prepayment Invoice }
    { 137 ;   ;Prepayment Order No.;Code20        ;CaptionML=ENU=Prepayment Order No. }
    { 151 ;   ;Quote No.           ;Code20        ;CaptionML=ENU=Quote No.;
                                                   Editable=No }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=No }
    { 710 ;   ;Document Exchange Identifier;Text50;CaptionML=ENU=Document Exchange Identifier }
    { 711 ;   ;Document Exchange Status;Option    ;CaptionML=ENU=Document Exchange Status;
                                                   OptionCaptionML=ENU=Not Sent,Sent to Document Exchange Service,Delivered to Recipient,Delivery Failed,Pending Connection to Recipient;
                                                   OptionString=Not Sent,Sent to Document Exchange Service,Delivered to Recipient,Delivery Failed,Pending Connection to Recipient }
    { 712 ;   ;Doc. Exch. Original Identifier;Text50;
                                                   CaptionML=ENU=Doc. Exch. Original Identifier }
    { 720 ;   ;Coupled to CRM      ;Boolean       ;CaptionML=ENU=Coupled to Dynamics CRM }
    { 827 ;   ;Credit Card No.     ;Code20        ;TableRelation="DO Payment Credit Card" WHERE (Customer No.=FIELD(Bill-to Customer No.));
                                                   CaptionML=ENU=Credit Card No. }
    { 1200;   ;Direct Debit Mandate ID;Code35     ;TableRelation="SEPA Direct Debit Mandate" WHERE (Customer No.=FIELD(Bill-to Customer No.));
                                                   CaptionML=ENU=Direct Debit Mandate ID }
    { 1300;   ;Canceled By         ;Code20        ;TableRelation="Sales Cr.Memo Header";
                                                   CaptionML=ENU=Canceled By;
                                                   Editable=No }
    { 1301;   ;Canceled            ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Cr.Memo Header" WHERE (Canceled=CONST(Yes),
                                                                                                   Applies-to Doc. Type=CONST(Invoice),
                                                                                                   Applies-to Doc. No.=FIELD(No.)));
                                                   CaptionML=ENU=Canceled;
                                                   Editable=No }
    { 1302;   ;Paid                ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=-Exist("Cust. Ledger Entry" WHERE (Entry No.=FIELD(Cust. Ledger Entry No.),
                                                                                                  Open=FILTER(Yes)));
                                                   CaptionML=ENU=Paid;
                                                   Editable=No }
    { 1303;   ;Remaining Amount    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Cust. Ledger Entry No.=FIELD(Cust. Ledger Entry No.)));
                                                   CaptionML=ENU=Remaining Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 1304;   ;Cust. Ledger Entry No.;Integer     ;TableRelation="Cust. Ledger Entry"."Entry No.";
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Cust. Ledger Entry No.;
                                                   Editable=No }
    { 1305;   ;Invoice Discount Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Invoice Line"."Inv. Discount Amount" WHERE (Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Invoice Discount Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   CaptionML=ENU=Campaign No. }
    { 5052;   ;Sell-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   CaptionML=ENU=Sell-to Contact No. }
    { 5053;   ;Bill-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   CaptionML=ENU=Bill-to Contact No. }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=ENU=Responsibility Center }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;CaptionML=ENU=Allow Line Disc. }
    { 7200;   ;Get Shipment Used   ;Boolean       ;CaptionML=ENU=Get Shipment Used }
    { 11012000;;Project Invoice    ;Boolean       ;CaptionML=ENU=Project Invoice }
    { 11012005;;Job No.            ;Code20        ;TableRelation=Job;
                                                   CaptionML=ENU=Project No. }
    { 11012010;;Installment Invoice;Boolean       ;CaptionML=ENU=Installment Invoice;
                                                   Editable=No }
    { 11012011;;Consumption Invoice;Boolean       ;CaptionML=ENU=Consumption Invoice }
    { 11012015;;Production Motivation Date;Date   ;TableRelation="Unit Price Production Mot."."Production Date" WHERE (Project No.=FIELD(Job No.));
                                                   CaptionML=ENU=Production Motivation Date }
    { 11012016;;Production Motivation Code;Code10 ;CaptionML=ENU=Production Motivation Code }
    { 11012020;;Invoice Text       ;Text250       ;CaptionML=ENU=Invoice Text }
    { 11012030;;Interest Date      ;Date          ;CaptionML=ENU=Interest Date }
    { 11012040;;Related Sales Order No.;Code20    ;TableRelation="Sales Header".No. WHERE (Document Type=CONST(Order));
                                                   CaptionML=ENU=Related Sales Order No. }
    { 11012258;;Company VAT Registration No.;Text20;
                                                   CaptionML=ENU=Company VAT Registration No.;
                                                   Editable=No }
    { 11012259;;Country/Region of Origin;Code10   ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region of Origin;
                                                   Editable=No }
    { 11012260;;Country/Region of Destination;Code10;
                                                   TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region of Destination;
                                                   Editable=No }
    { 11012261;;Extended VAT Determination;Boolean;CaptionML=ENU=Extended VAT Determination;
                                                   Editable=No }
    { 11012280;;Invoice Layout Code;Code10        ;TableRelation="Invoice Layout";
                                                   CaptionML=ENU=Invoice Layout Code }
    { 11012550;;Plant Invoice      ;Boolean       ;CaptionML=ENU=Plant Invoice;
                                                   Editable=No }
    { 11012551;;Rental Periode to Date;Date       ;CaptionML=ENU=Rental Periode to Date;
                                                   Editable=No }
    { 11012552;;Company Name       ;Text30        ;TableRelation=Company;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Company Name;
                                                   Editable=No }
    { 11012554;;Service Invoice    ;Boolean       ;CaptionML=ENU=Service Invoice }
    { 11012555;;Alternative Bill-to Address;Code10;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Bill-to Customer No.),
                                                                                               Billing Address=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                CheckInvoiceAddress;
                                                              END;

                                                   CaptionML=ENU=Alternative Bill-to Address }
    { 11012556;;Exported on        ;Date          ;CaptionML=ENU=Exported on }
    { 11012557;;Rental Unit Invoice;Boolean       ;CaptionML=ENU=Rental Unit Invoice;
                                                   Editable=No }
    { 11012558;;Withhold % Last Installment;Decimal;
                                                   CaptionML=ENU=Withhold % Last Installment }
    { 11012559;;Public notary      ;Code20        ;TableRelation=Customer.No.;
                                                   CaptionML=ENU=Public notary }
    { 11012560;;Last Installment Amount;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Invoice Line"."Amount Including VAT" WHERE (Document No.=FIELD(No.),
                                                                                                                      Last Installment=CONST(Yes)));
                                                   CaptionML=ENU=Last Installment Amount;
                                                   Editable=No }
    { 11012561;;Notary Case Number ;Text30        ;CaptionML=ENU=Notary Case Number;
                                                   Editable=No }
    { 11012562;;Calculate B Amounts based on;Option;
                                                   CaptionML=ENU=Calculate B Amounts based on;
                                                   OptionCaptionML=ENU=Labor Amount,Invoice Amount;
                                                   OptionString=Labor Amount,Invoice Amount;
                                                   Editable=No }
    { 11012563;;Labor Amount (Subcontracting);Decimal;
                                                   CaptionML=ENU=Labor Amount (Subcontracting);
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012564;;Blocked Amount (Subcontracting;Decimal;
                                                   CaptionML=ENU=Blocked Amount (Subcontracting);
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012566;;Specific WKA Percentages;Boolean  ;CaptionML=ENU=Specific WKA Percentages }
    { 11012567;;% Labor            ;Decimal       ;CaptionML=ENU=% Labor;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   AutoFormatType=1 }
    { 11012568;;% to B Account     ;Decimal       ;CaptionML=ENU=% to B Account;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 11012570;;WKA Period         ;Text50        ;CaptionML=ENU=WKA Period }
    { 11012580;;Amount VAT         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Invoice Line"."Line VAT Amount" WHERE (Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Amount VAT;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012585;;Sales Document Type;Option        ;CaptionML=ENU=Sales Document Type;
                                                   OptionCaptionML=ENU=Standard,Sales Logistics Separated,Rental Contract;
                                                   OptionString=Standard,Sales Logistics Separated,RentalContract }
    { 11012590;;PDF Send Released  ;Boolean       ;CaptionML=ENU=PDF Send Released }
    { 11012591;;PDF Document is Send;Boolean      ;OnValidate=VAR
                                                                OldRec@1100485000 : Record 112;
                                                              BEGIN
                                                                OldRec := Rec;

                                                                "PDF Date Send" := TODAY;
                                                                "PDF Sent by" := USERID;

                                                                PDFCreate();
                                                              END;

                                                   CaptionML=ENU=PDF Document is Send;
                                                   Editable=No }
    { 11012592;;PDF Date Send      ;Date          ;CaptionML=ENU=PDF Date Send;
                                                   Editable=No }
    { 11012593;;PDF Sent by        ;Text50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=PDF Sent by;
                                                   Editable=No }
    { 11012594;;PDF Print Code     ;Boolean       ;CaptionML=ENU=PDF Print Code;
                                                   Editable=No }
    { 11012595;;XML-Export         ;Boolean       ;CaptionML=ENU=XML-Export }
    { 11012596;;XML Exported       ;Boolean       ;CaptionML=ENU=XML Exported;
                                                   Editable=No }
    { 11012597;;Open Complaints    ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Complaint Document" WHERE (Document Type=CONST(PI-S),
                                                                                                 Document No.=FIELD(No.),
                                                                                                 Complaint Status=FILTER(<>Finished)));
                                                   CaptionML=ENU=Open Complaints;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 11012598;;Complaints         ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Complaint Document" WHERE (Document Type=CONST(PI-S),
                                                                                                 Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Complaints;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 11012610;;Inserted By        ;Code50        ;TableRelation=User."User Name";
                                                   OnValidate=BEGIN
                                                                UserManagement.ValidateUserID("Inserted By"); //**4PS.n
                                                              END;

                                                   OnLookup=BEGIN
                                                              UserManagement.LookupUserID("Inserted By"); //**4PS.n
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Inserted By }
    { 11012804;;Service Contract No.;Code20       ;TableRelation=Service-Contract.No.;
                                                   CaptionML=ENU=Service Contract No.;
                                                   Editable=No }
    { 11012805;;Service Order No.  ;Code20        ;TableRelation="Service Order".No.;
                                                   CaptionML=ENU=Service Order No. }
    { 11012810;;Principal Reference;Text50        ;CaptionML=ENU=Principal Reference }
    { 11012820;;Order No. Customer ;Text50        ;CaptionML=ENU=Order No. Customer }
    { 11012830;;Commision Date Customer;Date      ;CaptionML=ENU=Commision Date Principal }
    { 11012840;;Ship-to Contact No.;Code20        ;TableRelation=Contact;
                                                   CaptionML=ENU=Ship-to Contact No. }
    { 11012860;;Amount Payment in Advance;Decimal ;CaptionML=ENU=Amount Payment in Advance;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012880;;Invoice Exported by XML;Boolean   ;CaptionML=ENU=Invoice Exported by XML;
                                                   Editable=No }
    { 11020254;;Credit Restriction ;Code20        ;TableRelation="Credit Restriction";
                                                   CaptionML=ENU=Credit Restriction }
    { 11020255;;Credit Restriction Date;Date      ;CaptionML=ENU=Credit Restriction Date }
    { 11020256;;Credit Restriction %;Decimal      ;CaptionML=ENU=Credit Restriction %;
                                                   DecimalPlaces=0:2 }
    { 11020257;;Credit Restriction Amount;Decimal ;CaptionML=ENU=Credit Restriction Amount;
                                                   DecimalPlaces=2:2 }
    { 11020280;;E-Mail (Invoices)  ;Text80        ;OnValidate=VAR
                                                                ContactDataValidation@1100528702 : Codeunit 11012275;
                                                                RecRef@1100528701 : RecordRef;
                                                                FldRef@1100528700 : FieldRef;
                                                              BEGIN
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("E-Mail (Invoices)"));
                                                                ContactDataValidation.ValidateEmail(FldRef, "E-Mail (Invoices)");

                                                                IF "E-Mail (Invoices)" = '' THEN BEGIN
                                                                  "Invoice per E-Mail" := FALSE;
                                                                  IF "Electronic Invoicing" = "Electronic Invoicing"::"E-Mail" THEN
                                                                    "Electronic Invoicing" := "Electronic Invoicing"::Print;
                                                                END;
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=E-Mail (Invoices) }
    { 11020281;;Invoice per E-Mail ;Boolean       ;OnValidate=BEGIN
                                                                IF "Invoice per E-Mail" THEN
                                                                  TESTFIELD("E-Mail (Invoices)");
                                                              END;

                                                   CaptionML=ENU=Invoice per E-Mail;
                                                   Description=Obsolete }
    { 11020282;;E-Mail Sent by     ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              LoginManagement@1100528700 : Codeunit 418;
                                                            BEGIN
                                                              LoginManagement.LookupUserID("E-Mail Sent by");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=E-Mail Sent by;
                                                   Editable=No }
    { 11020283;;E-Mail Sent on     ;Date          ;CaptionML=ENU=E-Mail Sent on;
                                                   Editable=No }
    { 11020285;;Electronic Invoicing;Option       ;OnValidate=BEGIN
                                                                IF "Electronic Invoicing" = "Electronic Invoicing"::"E-Mail" THEN
                                                                  TESTFIELD("E-Mail (Invoices)");
                                                              END;

                                                   CaptionML=ENU=Electronic Invoicing;
                                                   OptionCaptionML=ENU=Print,,E-Mail,,GLN (XML),Digipoort (XML),Svefaktura (XML),OIOUBL (DK);
                                                   OptionString=Print,,E-Mail,,GLN (XML),Digipoort (XML),Svefaktura (XML),OIOUBL (DK),UBL (NO) }
    { 11020286;;Combine E-Mail Attachments;Boolean;CaptionML=ENU=Combine E-Mail Attachments }
    { 11020287;;NAV 2009 Invoice   ;Boolean       ;CaptionML=ENU=NAV 2009 Invoice }
    { 11020290;;Batch Seq. No.     ;Code20        ;TableRelation="Invoice Proposal Batch Seq.";
                                                   CaptionML=ENU=Batch Seq. No.;
                                                   Editable=No }
    { 11126180;;Reference No.      ;Code20        ;CaptionML=ENU=Reference No.;
                                                   Description=NAVFI;
                                                   Editable=Yes }
    { 11128014;;E-Invoice Layout Code;Code10       }
    { 11128020;;ROT                ;Boolean       ;CaptionML=ENU=ROT;
                                                   Description=I.012 }
    { 11128505;;GLN                ;Code13        ;CaptionML=ENU=GLN No.;
                                                   Description=NAVNO }
    { 11128506;;Account Code NO    ;Text30        ;CaptionML=ENU=Account Code NO;
                                                   Description=NAVNO }
    { 11128512;;E-Invoice Created  ;Boolean       ;CaptionML=ENU=E-Invoice Created;
                                                   Description=NAVNO;
                                                   Editable=No }
    { 11128513;;E-Invoice          ;Boolean       ;CaptionML=ENU=E-Invoice;
                                                   Description=NAVNO }
    { 11128570;;EAN No.            ;Code13        ;CaptionML=ENU=EAN No.;
                                                   Description=NAVDK }
    { 11128571;;Electronic Invoice Created;Boolean;CaptionML=ENU=Electronic Invoice Created;
                                                   Description=NAVDK;
                                                   Editable=No }
    { 11128572;;Account Code DK    ;Text30        ;CaptionML=ENU=Account Code DK;
                                                   Description=NAVDK }
    { 11128574;;OIOUBL Profile Code;Code10        ;TableRelation="OIOUBL Profile";
                                                   CaptionML=ENU=OIOUBL Profile Code;
                                                   Description=NAVDK }
    { 11128575;;Sell-to Contact Phone No.;Text30  ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Sell-to Contact Phone No.;
                                                   Description=NAVDK }
    { 11128576;;Sell-to Contact Fax No.;Text30    ;CaptionML=ENU=Sell-to Contact Fax No.;
                                                   Description=NAVDK }
    { 11128577;;Sell-to Contact E-Mail;Text80     ;ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=Sell-to Contact E-Mail;
                                                   Description=NAVDK }
    { 11128578;;Sell-to Contact Role;Option       ;CaptionML=ENU=Sell-to Contact Role;
                                                   OptionCaptionML=ENU=" ,,,Purchase Responsible,,,Accountant,,,Budget Responsible,,,Requisitioner";
                                                   OptionString=[ ,,,Purchase Responsible,,,Accountant,,,Budget Responsible,,,Requisitioner];
                                                   Description=NAVDK }
    { 11128590;;Payment Channel    ;Option        ;CaptionML=ENU=Payment Channel;
                                                   OptionCaptionML=ENU=" ,Payment Slip,Account Transfer,National Clearing,Direct Debit";
                                                   OptionString=[ ,Payment Slip,Account Transfer,National Clearing,Direct Debit];
                                                   Description=NAVDK }
    { 11250712;;Finvoice Enabled   ;Boolean       ;CaptionML=ENU=Finvoice Enabled;
                                                   Description=4PSFI_FINVOICE }
    { 11250718;;Finvoice No. Exported;Integer     ;CaptionML=ENU=Finvoice No. Exported;
                                                   Description=4PSFI_FINVOICE }
    { 11250719;;Factoring No. Exported;Integer    ;CaptionML=ENU=Factoring No. Exported;
                                                   Description=4PSFI_FINVOICE }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Order No.                                }
    {    ;Pre-Assigned No.                         }
    {    ;Sell-to Customer No.,External Document No.;
                                                   MaintainSQLIndex=No }
    {    ;Sell-to Customer No.,Order Date         ;MaintainSQLIndex=No }
    {    ;Sell-to Customer No.                     }
    {    ;Prepayment Order No.,Prepayment Invoice  }
    {    ;Bill-to Customer No.                     }
    {    ;Service Contract No.                     }
    {    ;Batch Seq. No.                           }
    {    ;Invoice Exported by XML,Electronic Invoicing,Electronic Invoice Created }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Sell-to Customer No.,Bill-to Customer No.,Posting Date,Posting Description }
    { 2   ;Brick               ;No.,Sell-to Customer Name,Amount,Due Date,Amount Including VAT,Canceled }
  }
  CODE
  {
    VAR
      SalesCommentLine@1001 : Record 44;
      SalesSetup@1007 : Record 311;
      CustLedgEntry@1003 : Record 21;
      PostSalesLinesDelete@1004 : Codeunit 363;
      DimMgt@1005 : Codeunit 408;
      ApprovalsMgmt@1008 : Codeunit 1535;
      UserSetupMgt@1002 : Codeunit 5700;
      PaymentReferenceLbl@1060000 : TextConst '@@@=Translate to FIK-kode (FIK is danish abbreviation );ENU=FIK Code';
      CheckLatestQst@1006 : TextConst '@@@=%1 is Document Exchange Status;ENU=Do you want to check the latest status of the electronic document?';
      DPA_Management@1100000999 : Codeunit 11012783;
      Text11012001@1100528200 : TextConst 'ENU=No %1 sent, because the %2 is set to %3.';
      UserManagement@1100525000 : Codeunit 418;
      Text11012002@1100528400 : TextConst 'ENU=Invoice';
      GLSetup@1100285501 : Record 98;
      gotGLSetup@1100285500 : Boolean;
      txtCreateSvefaktura@1100285502 : TextConst 'ENU=Create and send Svefaktura?';
      txtAlreadyCreatedSvefaktura@1100285503 : TextConst 'ENU=Electronic invoice has already been created. Would you like to create and send it again?';

    PROCEDURE SendRecords@1();
    VAR
      DocumentSendingProfile@1001 : Record 60;
      TempDocumentSendingProfile@1000 : TEMPORARY Record 60;
      ReportDistributionManagement@1002 : Codeunit 452;
    BEGIN
      DocumentSendingProfile.GetDefaultForCustomer("Bill-to Customer No.",DocumentSendingProfile);
      COMMIT;

      TempDocumentSendingProfile.INIT;
      TempDocumentSendingProfile.Code := DocumentSendingProfile.Code;
      TempDocumentSendingProfile.VALIDATE("One Related Party Selected",IsSingleCustomerSelected);
      TempDocumentSendingProfile.SetDocumentUsage(Rec);
      TempDocumentSendingProfile.INSERT;

      IF PAGE.RUNMODAL(PAGE::"Select Sending Options",TempDocumentSendingProfile) = ACTION::LookupOK THEN
        ReportDistributionManagement.SendDocumentReport(TempDocumentSendingProfile,Rec);
    END;

    PROCEDURE PrintRecords@6(ShowRequestForm@1000 : Boolean);
    VAR
      TempDocumentSendingProfile@1001 : TEMPORARY Record 60;
      ReportDistributionManagement@1002 : Codeunit 452;
    BEGIN
      TempDocumentSendingProfile.INIT;

      IF ShowRequestForm THEN
        TempDocumentSendingProfile.Printer := TempDocumentSendingProfile.Printer::"Yes (Prompt for Settings)"
      ELSE
        TempDocumentSendingProfile.Printer := TempDocumentSendingProfile.Printer::"Yes (Use Default Settings)";

      TempDocumentSendingProfile.INSERT;

      ReportDistributionManagement.SendDocumentReport(TempDocumentSendingProfile,Rec);
    END;

    PROCEDURE EmailRecords@17(ShowRequestForm@1000 : Boolean);
    VAR
      TempDocumentSendingProfile@1002 : TEMPORARY Record 60;
      ReportDistributionManagement@1001 : Codeunit 452;
    BEGIN
      TempDocumentSendingProfile.INIT;

      IF ShowRequestForm THEN
        TempDocumentSendingProfile."E-Mail" := TempDocumentSendingProfile."E-Mail"::"Yes (Prompt for Settings)"
      ELSE
        TempDocumentSendingProfile."E-Mail" := TempDocumentSendingProfile."E-Mail"::"Yes (Use Default Settings)";

      TempDocumentSendingProfile."E-Mail Attachment" := TempDocumentSendingProfile."E-Mail Attachment"::PDF;

      TempDocumentSendingProfile.INSERT;

      ReportDistributionManagement.SendDocumentReport(TempDocumentSendingProfile,Rec);
    END;

    PROCEDURE EmailRecordFromBatchPost@1100528504();
    VAR
      SalesInvoiceHeader@1100528400 : Record 112;
    BEGIN
      //**4PS
      SalesInvoiceHeader.COPY(Rec);
      SalesInvoiceHeader.SETRECFILTER;
      SalesInvoiceHeader.EmailRecords(FALSE);
    END;

    PROCEDURE SendReports@1100528500(VAR TempEmailAttachment@1100528502 : TEMPORARY Record 11229294;VAR SalesInvoiceHeader@1100528501 : Record 112;ShowEmailDialog@1100528503 : Boolean);
    VAR
      CustomReportSelection@1100528400 : Record 9657;
      DocumentMailing@1100528500 : Codeunit 260;
    BEGIN
      //**4PS
      COMMIT;
      DocumentMailing.SetTempEmailAttachments(
        TempEmailAttachment);
      IF TempEmailAttachment.FINDFIRST THEN;
      DocumentMailing.EmailFileFromSalesInvoiceHeader(
        SalesInvoiceHeader, TempEmailAttachment."Attachment Server File Path",
        TempEmailAttachment."Attachment Name", CustomReportSelection, NOT ShowEmailDialog);

      IF DocumentMailing.IsSent THEN BEGIN
        SalesInvoiceHeader.FIND;
        SalesInvoiceHeader."E-Mail Sent by" := USERID;
        SalesInvoiceHeader."E-Mail Sent on" := TODAY;
        CODEUNIT.RUN(CODEUNIT::"Sales Invoice Header-Edit", SalesInvoiceHeader);
        COMMIT;
      END;
    END;

    PROCEDURE CreatePDF@1100528501(ReportID2@1100528501 : Integer;VAR TempEmailAttachment@1100528505 : TEMPORARY Record 11229294;VAR SalesInvoiceHeader@1100528500 : Record 112);
    VAR
      GenericReport@1100528506 : Record 11071914;
      EMailSetup@1100528400 : Record 11229911;
      DocumentPrint@1100528508 : Codeunit 229;
      GenericReportID@1100528502 : Integer;
      ReportID@1100528507 : Integer;
    BEGIN
      //**4PS
      IF GenericReport.GetCalledGenericReport(ReportID2, GenericReportID) THEN
        ReportID := GenericReportID
      ELSE
        ReportID := ReportID2;
      DocumentPrint.SaveAnyRecordReportAsPdf(
        SalesInvoiceHeader, EMailSetup.Usage::"Sales Invoice", SalesInvoiceHeader."Shortcut Dimension 1 Code",
        ReportID, TRUE, TempEmailAttachment);
    END;

    PROCEDURE Navigate@2();
    VAR
      NavigateForm@1000 : Page 344;
    BEGIN
      NavigateForm.SetDoc("Posting Date","No.");
      NavigateForm.RUN;
    END;

    PROCEDURE GetCreditcardNumber@52() : Text[20];
    VAR
      DOPaymentCreditCard@1001 : Record 827;
    BEGIN
      IF "Credit Card No." = '' THEN
        EXIT('');
      EXIT(DOPaymentCreditCard.GetCreditCardNumber("Credit Card No."));
    END;

    PROCEDURE LookupAdjmtValueEntries@3();
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      ValueEntry.SETCURRENTKEY("Document No.");
      ValueEntry.SETRANGE("Document No.","No.");
      ValueEntry.SETRANGE("Document Type",ValueEntry."Document Type"::"Sales Invoice");
      ValueEntry.SETRANGE(Adjustment,TRUE);
      PAGE.RUNMODAL(0,ValueEntry);
    END;

    PROCEDURE GetCustomerVATRegistrationNumber@14() : Text;
    BEGIN
      EXIT("VAT Registration No.");
    END;

    PROCEDURE GetCustomerVATRegistrationNumberLbl@15() : Text;
    BEGIN
      EXIT(FIELDCAPTION("VAT Registration No."));
    END;

    PROCEDURE GetCustomerGlobalLocationNumber@8() : Text;
    BEGIN
      //NAVDK
      IF GLSetup."Danish localization active" THEN
        EXIT("EAN No.");
      //NAVNO
      IF GLSetup."Norwegian Localization Active" THEN
        EXIT(GLN);
      EXIT('');
    END;

    PROCEDURE GetCustomerGlobalLocationNumberLbl@10() : Text;
    BEGIN
      //NAVDK
      IF GLSetup."Danish localization active" THEN
        EXIT(FIELDCAPTION("EAN No."));
      //NAVNO
      IF GLSetup."Norwegian Localization Active" THEN
        EXIT(FIELDCAPTION(GLN));
      EXIT('');
    END;

    PROCEDURE GetPaymentReference@9() : Text;
    BEGIN
      //NAVFI
      GetGLSetup;
      SalesSetup.GET;
      IF GLSetup."Finnish localization active" AND SalesSetup."Print Reference No." THEN
        EXIT("Reference No.");

      //NAVDK
      IF GLSetup."Danish localization active" THEN
        EXIT(GetFIK71String);
      EXIT('');
    END;

    PROCEDURE GetPaymentReferenceLbl@11() : Text;
    BEGIN
      //NAVFI
      GetGLSetup;
      IF GLSetup."Finnish localization active" THEN
        EXIT(FIELDCAPTION("Reference No."));

      //NAVDK
      IF GLSetup."Danish localization active" THEN
        EXIT(PaymentReferenceLbl);
      EXIT('');
    END;

    PROCEDURE GetLegalStatement@60() : Text;
    BEGIN
      //NAVFI
      GetGLSetup;
      IF GLSetup."Finnish localization active" AND "EU 3-Party Trade" THEN
        EXIT(FIELDCAPTION("EU 3-Party Trade"));

      SalesSetup.GET;
      EXIT(SalesSetup.GetLegalStatement);
    END;

    PROCEDURE ShowDimensions@4();
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"No."));
    END;

    PROCEDURE SetSecurityFilterOnRespCenter@5();
    BEGIN
      IF UserSetupMgt.GetSalesFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserSetupMgt.GetSalesFilter);
        FILTERGROUP(0);
      END;
    END;

    LOCAL PROCEDURE IsSingleCustomerSelected@7() : Boolean;
    VAR
      SelectedCount@1001 : Integer;
      CustomerCount@1000 : Integer;
      BillToCustomerNoFilter@1002 : Text;
    BEGIN
      SelectedCount := COUNT;

      IF SelectedCount < 1 THEN
        EXIT(FALSE);

      IF SelectedCount = 1 THEN
        EXIT(TRUE);

      BillToCustomerNoFilter := GETFILTER("Bill-to Customer No.");
      SETRANGE("Bill-to Customer No.","Bill-to Customer No.");
      CustomerCount := COUNT;
      SETFILTER("Bill-to Customer No.",BillToCustomerNoFilter);

      EXIT(SelectedCount = CustomerCount);
    END;

    PROCEDURE GetDocExchStatusStyle@13() : Text;
    BEGIN
      CASE "Document Exchange Status" OF
        "Document Exchange Status"::"Not Sent":
          EXIT('Standard');
        "Document Exchange Status"::"Sent to Document Exchange Service":
          EXIT('Ambiguous');
        "Document Exchange Status"::"Delivered to Recipient":
          EXIT('Favorable');
        ELSE
          EXIT('Unfavorable');
      END;
    END;

    PROCEDURE DocExchStatusDrillDown@16();
    VAR
      DocExchLinks@1001 : Codeunit 1411;
      DocExchServiceMgt@1000 : Codeunit 1410;
    BEGIN
      CASE "Document Exchange Status" OF
        "Document Exchange Status"::"Not Sent":
          EXIT;
        "Document Exchange Status"::"Sent to Document Exchange Service",
        "Document Exchange Status"::"Pending Connection to Recipient":
          IF CONFIRM(CheckLatestQst,TRUE) THEN
            DocExchLinks.CheckAndUpdateDocExchInvoiceStatus(Rec);
        "Document Exchange Status"::"Delivered to Recipient":
          BEGIN
            HYPERLINK(DocExchServiceMgt.GetExternalDocURL("Document Exchange Identifier"));
            EXIT;
          END;
      END;

      ShowActivityLog;
    END;

    PROCEDURE ShowActivityLog@116();
    VAR
      ActivityLog@1000 : Record 710;
    BEGIN
      ActivityLog.ShowEntries(RECORDID);
    END;

    PROCEDURE CheckInvoiceAddress@1210190002();
    VAR
      AdrsRec@1210190000 : Record 222;
    BEGIN
      //**4PS
      IF "Alternative Bill-to Address" <> '' THEN BEGIN
        IF NOT AdrsRec.GET("Bill-to Customer No.", "Alternative Bill-to Address") THEN
          AdrsRec.INIT;
        "Bill-to Name" := AdrsRec.Name;
        "Bill-to Name 2" := AdrsRec."Name 2";
        "Bill-to Address" := AdrsRec.Address;
        "Bill-to Address 2" := AdrsRec."Address 2";
        "Bill-to Post Code" := AdrsRec."Post Code";
        "Bill-to City" := AdrsRec.City;
        "Bill-to Contact" := AdrsRec.Contact;
      END;
    END;

    PROCEDURE PDFPrint@1100485010();
    VAR
      lvCustomerRec@1100485001 : Record 18;
      PrintedCU@1000000000 : Codeunit 315;
      SalesInvHeader@1100485000 : Record 112;
      SalesInvLine@1100485003 : Record 113;
      DocPrint@1100485004 : Codeunit 229;
      TempReportSelection@1100485005 : TEMPORARY Record 77;
      SalesSetup@1100525000 : Record 311;
    BEGIN
      //**4PS
      SalesSetup.GET;
      WITH SalesInvHeader DO BEGIN
        COPY(Rec);
        SETRECFILTER;
        PrintedCU."PDF-BEGIN"(SalesInvHeader);
        DocPrint.GetReportSelection(TempReportSelection.Usage::"S.Invoice",TempReportSelection,FALSE);
        TempReportSelection.FIND('-');
        REPEAT
          REPORT.RUNMODAL(TempReportSelection."Report ID",FALSE,TRUE,SalesInvHeader);
        UNTIL TempReportSelection.NEXT = 0;

        lvCustomerRec.GET("Sell-to Customer No.");

        IF "XML-Export" OR lvCustomerRec."XML-Export" THEN
          IF SalesSetup."Export XMLport Sales Inv." <> 0 THEN BEGIN
            SalesInvLine.SETRANGE("Document No.","No.");
            XMLPORT.RUN(SalesSetup."Export XMLport Sales Inv.", FALSE, FALSE ,SalesInvLine);
            GET(SalesInvHeader."No.");
            "XML Exported" := TRUE;
            PrintedCU."PDF-MODIFY"(SalesInvHeader);
          END;
        GET(SalesInvHeader."No.");
        PrintedCU."PDF-END"(SalesInvHeader);

      END;
    END;

    PROCEDURE PDFSend@1000000001();
    VAR
      PrintedCU@1100485000 : Codeunit 315;
    BEGIN
      //**4PS
      TESTFIELD("PDF Send Released",TRUE);
      IF NOT "PDF Document is Send" THEN
        BEGIN
          VALIDATE("PDF Document is Send",TRUE);
          PrintedCU."PDF-MODIFY"(Rec);
        END;
    END;

    PROCEDURE PDFSetSendOK@1000000003();
    VAR
      PrintedCU@1100485000 : Codeunit 315;
    BEGIN
      //**4PS
      IF NOT "PDF Document is Send" THEN
        BEGIN
          VALIDATE("PDF Send Released",TRUE);
          PrintedCU."PDF-MODIFY"(Rec);
        END;
    END;

    PROCEDURE PDFResetSendOK@1000000002();
    VAR
      PrintedCU@1100485000 : Codeunit 315;
    BEGIN
      //**4PS
      IF NOT "PDF Document is Send" THEN
        BEGIN
          VALIDATE("PDF Send Released",FALSE);
          PrintedCU."PDF-MODIFY"(Rec);
        END;
    END;

    PROCEDURE XMLExport@1107100000();
    VAR
      SalesSetup@1100485001 : Record 311;
      SalesInvLine@1100485000 : Record 113;
      PrintedCU@1100485002 : Codeunit 315;
    BEGIN
      //**4PS
      SalesSetup.GET;
      IF SalesSetup."Export XMLport Sales Inv." <> 0 THEN BEGIN
        SalesInvLine.SETRANGE("Document No.","No.");
        XMLPORT.RUN(SalesSetup."Export XMLport Sales Inv.", FALSE, FALSE, SalesInvLine);
        "XML Exported" := TRUE;
        PrintedCU."PDF-MODIFY"(Rec);
      END;
    END;

    PROCEDURE XMLSetExport@1100485000();
    VAR
      PrintedCU@1100485000 : Codeunit 315;
    BEGIN
      //**4PS
      IF NOT "PDF Document is Send" THEN
        BEGIN
          VALIDATE("XML-Export",TRUE);
          PrintedCU."PDF-MODIFY"(Rec);
        END;
    END;

    PROCEDURE XMLResetExport@1100485001();
    VAR
      PrintedCU@1100485000 : Codeunit 315;
    BEGIN
      //**4PS
      IF NOT "PDF Document is Send" THEN
        BEGIN
          VALIDATE("XML-Export",FALSE);
          PrintedCU."PDF-MODIFY"(Rec);
        END;
    END;

    PROCEDURE PDFCreate@1000000000();
    VAR
      lvPrintPDFRec@1100485000 : Record 11020304;
    BEGIN
      //**4PS
      lvPrintPDFRec.RESET;
      lvPrintPDFRec."Document Code" := 'INV';
      lvPrintPDFRec."Document No" := "No.";
      lvPrintPDFRec.INSERT;
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Shortcut Dimension 1 Code",
        "No. Series",
        xRec."No. Series" );
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(112) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 112');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Sales Invoice Header", "Shortcut Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Shortcut Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Shortcut Dimension 1 Code");
    END;

    PROCEDURE EditDocuments@1100528702(DocumentTemplateTypeFilter@1210190003 : Text[250];ContactNo@1210190004 : Code[20];ContactPersonNo@1210190005 : Code[20];SendMail@1210190002 : Boolean;Recipient@1100528700 : Text[120]);
    VAR
      SalesInvoiceLine@1100528701 : Record 113;
      Job@1100528704 : Record 11072003;
      ResponsibilityCenter@1100528705 : Record 5714;
      ProjectNo@1100528703 : Code[20];
      DocumentMailing@1210190000 : Codeunit 11012278;
      RecRef@1100525000 : RecordRef;
      DocumentLinkRIDs@1100525001 : ARRAY [5] OF RecordID;
    BEGIN
      //**4PS
      RecRef.GETTABLE(Rec);
      DocumentLinkRIDs[1] := RecRef.RECORDID;

      SalesInvoiceLine.SETRANGE("Document No.", "No.");
      IF SalesInvoiceLine.FINDSET THEN
        REPEAT
          ProjectNo := SalesInvoiceLine."Job No.";
        UNTIL (SalesInvoiceLine.NEXT = 0) OR (ProjectNo <> '');

      IF ProjectNo <> '' THEN BEGIN
        Job.GET(ProjectNo);
        RecRef.GETTABLE(Job);
        DocumentLinkRIDs[2] := RecRef.RECORDID;
      END;

      IF ResponsibilityCenter.GET("Responsibility Center") THEN BEGIN
        RecRef.GETTABLE(ResponsibilityCenter);
        DocumentLinkRIDs[3] := RecRef.RECORDID;
      END;

      DocumentMailing.EditDocuments(
        DocumentTemplateTypeFilter, DocumentLinkRIDs,
        "Shortcut Dimension 1 Code", ContactNo, ContactPersonNo, SendMail, Recipient);
    END;

    PROCEDURE SendInvoiceElectronic@1210190009(SelectSendOption@1100528701 : Boolean;FromBatchPost@1100528202 : Boolean);
    VAR
      SalesInvHeader@1210190002 : Record 112;
      SelectSendOptionSalesHdr@1210190004 : Page 11126492;
      SendSalesInvoiceGS1@1210190003 : Report 11020205;
      SendSalesInvoiceDigipoort@1100528201 : Report 11229762;
      ExportSvefaktura@1100285500 : Codeunit 11128055;
      CreateDKElectronicInvoices@1000 : Report 11128570;
      GLSetup@1100285501 : Record 98;
      SalesRecSetup@1100285000 : Record 311;
    BEGIN
      //**4PS, DP00141, Digipoort Invoice
      SalesInvHeader.COPY(Rec);
      SalesInvHeader.SETRECFILTER;

      IF (SalesInvHeader."Electronic Invoicing" = SalesInvHeader."Electronic Invoicing"::Print) THEN
      BEGIN
        IF GUIALLOWED THEN MESSAGE(Text11012001,
          SalesInvHeader.TABLECAPTION, SalesInvHeader.FIELDCAPTION("Electronic Invoicing"),
          SalesInvHeader."Electronic Invoicing");
        ERROR('');
      END;

      IF SelectSendOption THEN BEGIN
        SelectSendOptionSalesHdr.SetSelectEmail(
          SalesInvHeader."Electronic Invoicing" =
          SalesInvHeader."Electronic Invoicing"::"E-Mail");
        SelectSendOptionSalesHdr.SetSelectGLNXML(
          SalesInvHeader."Electronic Invoicing" =
          SalesInvHeader."Electronic Invoicing"::"GLN (XML)");
        SelectSendOptionSalesHdr.SetSelectDigipoort(
          SalesInvHeader."Electronic Invoicing" =
          SalesInvHeader."Electronic Invoicing"::"Digipoort (XML)");
          // 140702 <<
        SelectSendOptionSalesHdr.SetSelectSvefaktura(
          SalesInvHeader."Electronic Invoicing" =
          SalesInvHeader."Electronic Invoicing"::"Svefaktura (XML)");
          //140702 >>
        //>>NAVDK
        SelectSendOptionSalesHdr.SetSelectOIOUBL(
          SalesInvHeader."Electronic Invoicing" =
          SalesInvHeader."Electronic Invoicing"::"OIOUBL (DK)");
        //<<NAVDK
        IF (SelectSendOptionSalesHdr.RUNMODAL <> ACTION::LookupOK) THEN
          EXIT;
      END;

      //User must have option to stop te send option after the menu-choice in the page/form
      //For this "NOT SelectSendOption" can be used. because with selectoption the choice to stop is already there
      GLSetup.GET;  //NAVNO

      IF ((NOT SelectSendOption) AND (SalesInvHeader."Electronic Invoicing" = SalesInvHeader."Electronic Invoicing"::"E-Mail")) OR
         (SelectSendOptionSalesHdr.GetSelectEmail)
      THEN BEGIN
        IF FromBatchPost THEN
          SalesInvHeader.EmailRecordFromBatchPost
        ELSE
          SalesInvHeader.EmailRecords(TRUE);
      END;

      IF ((NOT SelectSendOption) AND
          (NOT GLSetup."Norwegian Localization Active") AND  //NAVNO
          (SalesInvHeader."Electronic Invoicing" = SalesInvHeader."Electronic Invoicing"::"GLN (XML)")) OR
         (SelectSendOptionSalesHdr.GetSelectGLNXML)
      THEN BEGIN
        SendSalesInvoiceGS1.USEREQUESTPAGE := NOT SelectSendOption;
        SendSalesInvoiceGS1.SetReportSelection(FromBatchPost);
        SendSalesInvoiceGS1.SETTABLEVIEW(SalesInvHeader);
        SendSalesInvoiceGS1.RUNMODAL;
      END;

      IF ((NOT SelectSendOption) AND
          (SalesInvHeader."Electronic Invoicing" = SalesInvHeader."Electronic Invoicing"::"Digipoort (XML)")) OR
         (SelectSendOptionSalesHdr.GetSelectDigipoort)
      THEN BEGIN
        SendSalesInvoiceDigipoort.USEREQUESTPAGE := NOT SelectSendOption;
        SendSalesInvoiceDigipoort.SetReportSelection(FromBatchPost);
        SendSalesInvoiceDigipoort.SETTABLEVIEW(SalesInvHeader);
        SendSalesInvoiceDigipoort.RUNMODAL;
      END;

      // 140702 ITERO.MH <<
      IF ((NOT SelectSendOption) AND
          (SalesInvHeader."Electronic Invoicing" = SalesInvHeader."Electronic Invoicing"::"Svefaktura (XML)")) OR
         (SelectSendOptionSalesHdr.GetSelectSvefaktura)
      THEN BEGIN
         // RFC001 150928 Commented
         // 140820 - Added confirmation if already created.
         //4PSSE 161202 uncommented
         IF (GUIALLOWED) THEN BEGIN
            IF (SalesInvHeader."Electronic Invoice Created") THEN BEGIN
               IF NOT (CONFIRM(txtAlreadyCreatedSvefaktura)) THEN EXIT;
            END ELSE BEGIN
               IF NOT (CONFIRM(txtCreateSvefaktura)) THEN EXIT;
            END;
         END;
         //ExportSvefaktura.CreateSveSalesInvoice(SalesInvHeader);
         // RFC 150928 New functionality:
         //4PSSE.so 161202
         //SalesRecSetup.GET();
         //IF (GUIALLOWED) THEN
         //   REPORT.RUNMODAL(SalesRecSetup."Svefaktura Invoice Report No.", TRUE , FALSE, SalesInvHeader)
         //ELSE
         //   REPORT.RUNMODAL(SalesRecSetup."Svefaktura Invoice Report No.", FALSE , FALSE, SalesInvHeader);
         CODEUNIT.RUN(11128033,SalesInvHeader);                            //4PSSE.n 161202
      END;
      // 140702 ITERO.MH >>

      //>>4PSSE.DK
      IF ((NOT SelectSendOption) AND
          (SalesInvHeader."Electronic Invoicing" = SalesInvHeader."Electronic Invoicing"::"OIOUBL (DK)")) OR
         (SelectSendOptionSalesHdr.GetSelectOIOUBL)
      THEN BEGIN
        CreateDKElectronicInvoices.USEREQUESTPAGE := NOT SelectSendOption;
        CreateDKElectronicInvoices.SETTABLEVIEW(SalesInvHeader);
        CreateDKElectronicInvoices.RUNMODAL;
      END;
      //<<4PSSE.DK
    END;

    PROCEDURE AccountCodeLineSpecified@1101100000(CountryCode@1100285500 : Code[10]) : Boolean;
    VAR
      SalesInvLine@1101100000 : Record 113;
    BEGIN
      //NAVDK
      //NAVNO
      SalesInvLine.RESET;
      SalesInvLine.SETRANGE("Document No.", "No.");
      SalesInvLine.SETFILTER(Type, '>%1', SalesInvLine.Type::" ");
      CASE CountryCode OF
        'DK': SalesInvLine.SETFILTER("Account Code DK", '<>%1&<>%2', '', "Account Code DK");
        'NO': SalesInvLine.SETFILTER("Account Code NO", '<>%1&<>%2', '', "Account Code NO");
      END;
      EXIT(NOT SalesInvLine.ISEMPTY);
    END;

    PROCEDURE TaxLineSpecified@1101100001() : Boolean;
    VAR
      SalesInvLine@1101100001 : Record 113;
    BEGIN
      //NAVDK
      SalesInvLine.RESET;
      SalesInvLine.SETRANGE("Document No.", "No.");
      SalesInvLine.SETFILTER(Type, '>%1', SalesInvLine.Type::" ");
      SalesInvLine.FIND('-');
      SalesInvLine.SETFILTER("VAT %", '<>%1', SalesInvLine."VAT %");
      EXIT(NOT SalesInvLine.ISEMPTY);
    END;

    PROCEDURE GetFIK71String@1060000() : Text;
    VAR
      CompanyInformation@1060004 : Record 79;
      FikManagement@1060005 : Codeunit 11128589;
      StringLen@1060002 : Integer;
      CheckSum@1060001 : Integer;
      Total@1060006 : Integer;
      Weight@1060003 : Text;
      String@1060000 : Text;
    BEGIN
      //NAVDK
      StringLen := 15;

      IF STRLEN("No.") > (StringLen - 1) THEN
        EXIT;

      IF DELCHR("No.",'=','0123456789') <> '' THEN
        EXIT;

      CompanyInformation.GET;
      IF CompanyInformation."Bank Creditor No." = '' THEN
        EXIT;

      String := PADSTR('',(StringLen - 1 - STRLEN("No.")),'0') + "No.";
      Weight := '12121212121212';
      FikManagement.CreateFIKCheckSum(String,Weight,Total,CheckSum);

      EXIT('+71<' + String + FORMAT(CheckSum) + '+' + CompanyInformation."Bank Creditor No.");
    END;

    PROCEDURE HasExternalDoc@1100285300() HasDocuments : Boolean;
    VAR
      RecordRef@1100285300 : RecordRef;
      DocumentLinkMgt@1100285301 : Codeunit 11012401;
    BEGIN
      //>>160121 ITERO.SB Added function "HasExternalDoc"
      RecordRef.GETTABLE(Rec);
      HasDocuments := DocumentLinkMgt.EntityHasDocumentLinks(RecordRef);
      //<<
    END;

    PROCEDURE AttachmentsMustBePrinted@1100528400() : Boolean;
    VAR
      DocumentProperties@1100528400 : Record 11012746;
    BEGIN
      //**4PS
      GetRelatedDocuments(Rec, DocumentProperties, FALSE);
      DocumentProperties.MARKEDONLY(TRUE);
      IF DocumentProperties.FINDSET THEN
        REPEAT
          IF NOT DocumentProperties.FileCanBeConvertedToPDF THEN
            DocumentProperties.MARK(FALSE);
        UNTIL DocumentProperties.NEXT = 0;

      EXIT(NOT DocumentProperties.ISEMPTY);
    END;

    PROCEDURE PrintInvoiceIncludingAttachments@1100528407(FromBatch@1100528402 : Boolean);
    VAR
      SalesInvoiceHeader@1100528400 : Record 112;
      TempReportSelections@1100528401 : TEMPORARY Record 77;
      TempEmailAttachment@1100528404 : TEMPORARY Record 11229294;
      DocumentPrint@1100528403 : Codeunit 229;
      PDFFileManagement@1100528405 : Codeunit 11020228;
      UserInteractionAllowed@1100528406 : Boolean;
    BEGIN
      //**4PS
      UserInteractionAllowed := NOT FromBatch;
      SalesInvoiceHeader.COPY(Rec);
      SalesInvoiceHeader.SETRECFILTER;
      IF UserInteractionAllowed THEN
        DocumentPrint.GetReportSelection(TempReportSelections.Usage::"S.Invoice", TempReportSelections, TRUE)
      ELSE
        DocumentPrint.GetDefaultReportSelection(TempReportSelections.Usage::"S.Invoice", TempReportSelections);
      TempReportSelections.FINDFIRST;
      REPEAT
        CreatePDF(TempReportSelections."Report ID", TempEmailAttachment, SalesInvoiceHeader);
      UNTIL TempReportSelections.NEXT = 0;
      AddRelatedDocuments(
        TempEmailAttachment,SalesInvoiceHeader,TRUE,FALSE);
      PDFFileManagement.MergePDFEmailAttachmentsOnServer(TempEmailAttachment);

      IF TempEmailAttachment.FINDFIRST THEN BEGIN
        TempEmailAttachment."Attachment Name" :=
          STRSUBSTNO('%1 %2.pdf', Text11012002, SalesInvoiceHeader."No.");
        IF UserInteractionAllowed THEN
          TempEmailAttachment.DownloadPdfAttachment
        ELSE
          TempEmailAttachment.PrintPdfAttachment;
        ERASE(TempEmailAttachment."Attachment Server File Path");
      END;
    END;

    PROCEDURE AddRelatedDocuments@1100528502(VAR TempEmailAttachment@1100528504 : TEMPORARY Record 11229294;SalesInvoiceHeader@1100528500 : Record 112;ConvertToPDF@1100528505 : Boolean;SendAsEmail@1100528508 : Boolean);
    VAR
      DocumentProperties@1100528501 : Record 11012746;
      DocumentPrint@1100528506 : Codeunit 229;
    BEGIN
      //**4PS
      GetRelatedDocuments(SalesInvoiceHeader, DocumentProperties, SendAsEmail);
      DocumentProperties.MARKEDONLY(TRUE);
      DocumentPrint.AddRelatedDocuments(TempEmailAttachment, DocumentProperties, FALSE, ConvertToPDF);
    END;

    LOCAL PROCEDURE GetRelatedDocuments@1100528703(SalesInvoiceHeader@1100528701 : Record 112;VAR DocumentProperties@1100528700 : Record 11012746;SendAsEmail@1100528500 : Boolean);
    VAR
      DocumentLinkMgt@1100528703 : Codeunit 11012401;
      DocumentRelation@1100528704 : Record 11012407;
      RecRef@1100528702 : RecordRef;
      SendOrPrintOption@1100409001 : 'Send,Print';
    BEGIN
      //**4PS
      RecRef.GETTABLE(SalesInvoiceHeader);
      DocumentLinkMgt.GetDocuments(DocumentProperties, RecRef);

      DocumentRelation.SETRANGE("Document Type", DocumentRelation."Document Type"::"Posted Sales Invoice");
      DocumentRelation.SETRANGE("No.", SalesInvoiceHeader."No.");
      IF SendAsEmail THEN
        DocumentRelation.SETRANGE("Send by E-Mail", TRUE)
      ELSE
        DocumentRelation.SETRANGE(Print, TRUE);
      IF DocumentRelation.FINDSET THEN
        REPEAT
          IF DocumentProperties.GET(DocumentRelation."Related Document No.") THEN
            DocumentProperties.MARK(TRUE);
        UNTIL DocumentRelation.NEXT = 0;
    END;

    LOCAL PROCEDURE GetGLSetup@1100285501();
    BEGIN
      //4PSSE.FI
      IF NOT gotGLSetup THEN
        gotGLSetup := GLSetup.GET;
    END;

    BEGIN
    {
      4PS, dbeekman, 22-10-2008:
            - Report selection handled by cod229.GetReportSelection

      *** 4PSSE.I012 ***
      130711 Added field "ROT"
      140702 ITERO.MH ENH021 Added new option for Electronic invoice: Svefaktura (XML)
      140820 ITERO.MH ENH021 Added confirmation if sent again
      150928 ITERO.MH RFC001 Changed svefaktura-functionality to use report no. from setup instead.
      151109 ITERO.DL IME424 new key: "Invoice Exported by XML","Electronic Invoicing","Electronic Invoice Created"
      160121 ITERO.SB Added function "HasExternalDoc"
      160121 ITERO.AC IME445 Added Field 11128514 "E-Invoice Layout Code"
      Version List=NAVW19.00.00.43897,NAVFI9.00.00.43897;
      Version List=NAVW19.00.00.43897,NAVDK9.00.00.43897;
      Version List=NAVW19.00.00.43897,NAVNO9.00.00.43897;
      161202 ITERO.WG Svefaktura changed to SweBase version
    }
    END.
  }
}

