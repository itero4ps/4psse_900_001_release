OBJECT Table 11229278 Resource (WOP)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    DataCaptionFields=No.,Name;
    OnInsert=VAR
               NoSeries@1100525000 : Code[10];
             BEGIN
               TESTFIELD(Company, COMPANYNAME);
               NoSeries := GetNoSeries();
               IF "No." = '' THEN
                 NoSeriesMgt.InitSeries(NoSeries,xRec."No. Series",0D,"No.","No. Series");
               IF Type = Type::" " THEN
                 Schedule := Schedule::ServiceOrder;
               UpdateResourceDiscipline;
               UpdateSubcontrPortalVendor(0);
             END;

    OnModify=BEGIN
               TESTFIELD(Company, COMPANYNAME);
               IF Type <> Type::" " THEN
                 TESTFIELD("Source No.");
               UpdateResourceDiscipline;
               UpdateSubcontrPortalVendor(1);
             END;

    OnDelete=VAR
               WorkOrder@1100527002 : Record 11229279;
               DeletedWorkOrderCache@1100527000 : Record 11229281;
               MobileDecentralWorkOrder@1100527001 : Record 11125649;
               ResourceDiscipline@1100528600 : Record 11229286;
               VisibleResourceWOP@1100528601 : Record 11229285;
               Companies@1100409000 : Record 2000000006;
             BEGIN
               IF Companies.GET(Company) THEN BEGIN
                 TESTFIELD(Company, COMPANYNAME);
                 UpdateSubcontrPortalVendor(2);
               END;

               WorkOrder.SETCURRENTKEY("Resource No.");
               WorkOrder.SETRANGE("Resource No.", "No.");
               IF NOT WorkOrder.ISEMPTY THEN
                 IF NOT CONFIRM(Text005, FALSE, "No.") THEN
                   ERROR('');
               WorkOrder.MODIFYALL("Resource No.", '');

               DeletedWorkOrderCache.SETRANGE("Resource No.", "No.");
               DeletedWorkOrderCache.DELETEALL;

               MobileDecentralWorkOrder.SETRANGE("Resource No. (Employee)", "No.");
               MobileDecentralWorkOrder.DELETEALL;

               ResourceDiscipline.SETRANGE("Resource No.", "No.");
               ResourceDiscipline.DELETEALL(TRUE);

               VisibleResourceWOP.SETCURRENTKEY("Resource No.");
               VisibleResourceWOP.SETRANGE("Resource No.", "No.");
               VisibleResourceWOP.DELETEALL;
             END;

    OnRename=BEGIN
               TESTFIELD(Company, COMPANYNAME);
               UpdateSubcontrPortalVendor(3);
             END;

    CaptionML=ENU=Resource;
    LookupPageID=Page11229278;
    DrillDownPageID=Page11229278;
  }
  FIELDS
  {
    { 10  ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  NoSeriesMgt.TestManual(GetNoSeries());
                                                                END;
                                                              END;

                                                   CaptionML=ENU=No.;
                                                   NotBlank=No }
    { 20  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF (xRec.Type <> Type) AND ("Source No." <> '') THEN
                                                                  ValidateSourceNo;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,Employee,Subcontractor";
                                                   OptionString=[ ,Employee,Subcontractor] }
    { 30  ;   ;Company             ;Text30        ;TableRelation=Company;
                                                   CaptionML=ENU=Company;
                                                   Editable=No }
    { 40  ;   ;Source No.          ;Code20        ;OnValidate=BEGIN
                                                                ValidateSourceNo();
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupSourceNo();
                                                            END;

                                                   CaptionML=ENU=Source No.;
                                                   NotBlank=Yes }
    { 50  ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                IF (Type <> Type::" ") AND (xRec.Name <> Name) THEN
                                                                  FIELDERROR(Type)
                                                                ELSE
                                                                  "Search Name" := UPPERCASE(Name);
                                                              END;

                                                   CaptionML=ENU=Name;
                                                   Description=Field not editable is update from source }
    { 60  ;   ;Search Name         ;Code50        ;OnValidate=BEGIN
                                                                IF (Type <> 0) AND (xRec.Name <> Name) THEN
                                                                  FIELDERROR(Type);
                                                              END;

                                                   CaptionML=ENU=Search Name;
                                                   Description=Field not editable is update from source }
    { 70  ;   ;Schedule            ;Option        ;OnValidate=BEGIN
                                                                IF Schedule <> Schedule::ServiceOrder THEN
                                                                  IF Type = Type::" " THEN
                                                                    FIELDERROR(Type);
                                                              END;

                                                   CaptionML=ENU=Schedule;
                                                   OptionCaptionML=ENU=Service Order,Project,Both;
                                                   OptionString=ServiceOrder,Project,Both }
    { 80  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 90  ;   ;Planner Company     ;Text30        ;TableRelation=Company;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Company, COMPANYNAME);
                                                                IF "Planner Company" <> xRec."Planner Company" THEN
                                                                  Planner := '';
                                                              END;

                                                   CaptionML=ENU=Planner Company }
    { 95  ;   ;Planner             ;Code20        ;OnValidate=VAR
                                                                Empl@1100525000 : Record 5200;
                                                              BEGIN
                                                                TESTFIELD(Company, COMPANYNAME);
                                                                IF Planner <> '' THEN BEGIN
                                                                  TESTFIELD("Planner Company");
                                                                  Empl.CHANGECOMPANY("Planner Company");
                                                                  Empl.GET(Planner);
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupPlanner();
                                                            END;

                                                   CaptionML=ENU=Planner }
    { 100 ;   ;Active in FSA       ;Boolean       ;OnValidate=VAR
                                                                MobileSetup@1100525006 : Record 11012676;
                                                                Resource@1100525004 : Record 11229278;
                                                                CustomLicense@1100525003 : Record 11012449;
                                                                LicenseChecker@1100525000 : Codeunit 11012196;
                                                              BEGIN
                                                                TESTFIELD(Company, COMPANYNAME);
                                                                IF "Active in FSA" THEN BEGIN
                                                                  TESTFIELD(Type, Type::Employee);
                                                                  MobileSetup.GET;
                                                                  MobileSetup.TESTFIELD("4PS-Mobile Active");

                                                                  IF NOT LicenseChecker.IsLicenseValid() THEN
                                                                    ERROR(Text002, CustomLicense.TABLECAPTION);
                                                                  CustomLicense.GET(CustomLicense."Licence Type"::"4PS Mobile");
                                                                  Resource.SETFILTER("No.", '<>%1', "No.");
                                                                  Resource.SETRANGE(Type, Type::Employee);
                                                                  Resource.SETRANGE("Active in FSA", TRUE);
                                                                  IF Resource.COUNT >= CustomLicense."Number of Licenses" THEN
                                                                    ERROR(Text003, FIELDCAPTION("Active in FSA"), CustomLicense."Number of Licenses");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Active in Field Service }
    { 110 ;   ;Filter Set (Mobile) ;Code20        ;OnValidate=VAR
                                                                ExportFilterSet@1100525000 : Record 11020440;
                                                              BEGIN
                                                                TESTFIELD(Company, COMPANYNAME);
                                                                IF "Filter Set (Mobile)" <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Employee);
                                                                  ExportFilterSet.GET("Filter Set (Mobile)");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupFilterSet();
                                                            END;

                                                   CaptionML=ENU=Filter Set (Mobile) }
    { 120 ;   ;Discipline          ;Code10        ;OnLookup=VAR
                                                              Discipl@1100529000 : Record 11020204;
                                                            BEGIN
                                                              Discipl.CHANGECOMPANY(Company);
                                                              Discipl.Code := Discipline;
                                                              PAGE.RUNMODAL(0, Discipl);
                                                            END;

                                                   CaptionML=ENU=Discipline;
                                                   Description=Field not editable is update from source;
                                                   Editable=No }
    { 130 ;   ;Territory Code      ;Code10        ;TableRelation=Territory.Code;
                                                   OnLookup=VAR
                                                              Territory@1100528600 : Record 286;
                                                            BEGIN
                                                              Territory.CHANGECOMPANY(Company);
                                                              Territory.Code := "Territory Code";
                                                              PAGE.RUNMODAL(0, Territory);
                                                            END;

                                                   CaptionML=ENU=Territory Code;
                                                   Description=Field not editable is update from source;
                                                   Editable=No }
    { 140 ;   ;Mobile Last Time Synchonized;DateTime;
                                                   CaptionML=ENU=Mobile Last Time Synchonized;
                                                   Editable=No }
    { 150 ;   ;User ID Filter      ;Code50        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=User ID Filter }
    { 160 ;   ;Visible in GWP      ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Visible Resource (WOP)" WHERE (User ID=FIELD(User ID Filter),
                                                                                                     Resource No.=FIELD(No.),
                                                                                                     Visible in GWP=CONST(Yes)));
                                                   CaptionML=ENU=Visible in GWP }
    { 165 ;   ;Visible in Navision ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Visible Resource (WOP)" WHERE (User ID=FIELD(User ID Filter),
                                                                                                     Resource No.=FIELD(No.),
                                                                                                     Visible in Navision=CONST(Yes)));
                                                   CaptionML=ENU=Visible in Navision }
    { 170 ;   ;Disciplines Exist   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Resource Discipline" WHERE (Resource No.=FIELD(No.)));
                                                   CaptionML=ENU=Disciplines Exist;
                                                   Editable=No }
    { 180 ;No ;Reserved 180 mg     ;Code20        ;Description=RESERVED }
    { 190 ;   ;Plan Data Exist     ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Resource Plan Data" WHERE (Resource No.=FIELD(No.)));
                                                   CaptionML=ENU=Plan Data Exist;
                                                   Editable=No }
    { 200 ;   ;Active in FLS       ;Boolean       ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                CommunicateToFLS;
                                                              END;

                                                   CaptionML=ENU=Active in FLS VisiTour }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Type,Company,No.                         }
    {    ;Type,Company,Source No.                  }
    {    ;Search Name                              }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NoSeriesMgt@1100525001 : Codeunit 396;
      Text001@1100525000 : TextConst 'ENU=(%1) %2 is already present';
      Text002@1100525002 : TextConst 'ENU=Table %1 is corrupted.';
      Text003@1100525003 : TextConst 'ENU=%1 not allowed, maximum number of licenses (%1) is already reached.';
      Text005@1100528601 : TextConst 'ENU=Resource %1 has linked Work Orders, continue?';
      Text006@1100528600 : TextConst 'ENU=Resource %1 is not part of Company Plan Group %2';

    PROCEDURE InitRecord@1100525004(ResourceType@1100525001 : Option);
    VAR
      WorkOrderPlanningSetup@1100525000 : Record 11229277;
    BEGIN
      Type := ResourceType;
      Company := COMPANYNAME;  //Insert always in the own Company!
      "Planner Company" := Company;  // Default own compan
      CASE Type OF
        Type::" ":
          BEGIN
            WorkOrderPlanningSetup.GET;
            Schedule := WorkOrderPlanningSetup."Default Schedule Other";
          END;
        Type::Employee:
          BEGIN
            WorkOrderPlanningSetup.GET;
            Schedule := WorkOrderPlanningSetup."Default Schedule Employee";
          END;
        Type::Subcontractor:
          BEGIN
            WorkOrderPlanningSetup.GET;
            Schedule := WorkOrderPlanningSetup."Default Schedule Subcontractor";
          END;
      END;
    END;

    PROCEDURE AssistEdit@2(OldResource@11012000 : Record 11229278) : Boolean;
    VAR
      Resource@1100525000 : Record 11229278;
    BEGIN
      WITH Resource DO BEGIN
        Resource := Rec;
        IF NoSeriesMgt.SelectSeries(GetNoSeries(), Resource."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := Resource;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE GetNoSeries@1100525002() : Code[10];
    VAR
      WorkOrderPlanningSetup@1100525000 : Record 11229277;
    BEGIN
      TESTFIELD(Company, COMPANYNAME);  //Insert resources only allowed for the own Company!
      WorkOrderPlanningSetup.GET;
      CASE Type OF
        Type::" ":
          BEGIN
            WorkOrderPlanningSetup.TESTFIELD("Other Resource Nos.");
            EXIT(WorkOrderPlanningSetup."Other Resource Nos.");
          END;
        Type::Employee:
          BEGIN
            WorkOrderPlanningSetup.TESTFIELD("Employee Resource Nos.");
            EXIT(WorkOrderPlanningSetup."Employee Resource Nos.");
          END;
        Type::Subcontractor:
          BEGIN
            WorkOrderPlanningSetup.TESTFIELD("Subcontractor Resource Nos.");
            EXIT(WorkOrderPlanningSetup."Subcontractor Resource Nos.");
          END;
        ELSE
          FIELDERROR(Type);
      END;
    END;

    PROCEDURE ValidateSourceNo@1100525000();
    VAR
      Empl@1100525000 : Record 5200;
      Resource@1100525001 : Record 11229278;
      Vendor@1100528600 : Record 23;
    BEGIN
      TESTFIELD(Company, COMPANYNAME);
      CASE Type OF
        Type::Employee:
          BEGIN
            Empl.GET("Source No.");
            Empl.TESTFIELD(Status, Empl.Status::Active);
            Name := COPYSTR(Empl."Full Name", 1, MAXSTRLEN(Name));
            "Search Name" := COPYSTR(Empl."Search Name", 1, MAXSTRLEN("Search Name"));
            Discipline := Empl.Discipline;
            "Territory Code" := Empl."Territory Code";
          END;
        Type::Subcontractor:
          BEGIN
            Vendor.GET("Source No.");
            Name := Vendor.Name;
            "Search Name" := Vendor."Search Name";
            Discipline := '';
            "Territory Code" := Vendor."Territory Code";
          END;
        ELSE
          FIELDERROR(Type);
      END;
      Resource.SETCURRENTKEY(Type, Company, "Source No.");
      Resource.SETRANGE(Type, Type);
      Resource.SETRANGE(Company, Company);
      Resource.SETRANGE("Source No.", "Source No.");
      Resource.SETFILTER("No.", '<>%1', "No.");
      IF Resource.FINDFIRST THEN
        Resource.FIELDERROR("Source No.", STRSUBSTNO(Text001, Type, "Source No."));
    END;

    PROCEDURE LookupSourceNo@1100525003();
    VAR
      Empl@1100525000 : Record 5200;
      Vendor@1100528600 : Record 23;
    BEGIN
      CASE Type OF
        Type::Employee:
          BEGIN
            Empl.CHANGECOMPANY(Company);
            Empl."No." := "Source No.";
            IF (Company <> COMPANYNAME) THEN
              PAGE.RUNMODAL(0, Empl)
            ELSE BEGIN
              IF PAGE.RUNMODAL(0, Empl) = ACTION::LookupOK THEN
                VALIDATE("Source No.", Empl."No.");
            END;
          END;
        Type::Subcontractor:
          BEGIN
            Vendor.CHANGECOMPANY(Company);
            Vendor."No." := "Source No.";
            IF (Company <> COMPANYNAME) THEN
              PAGE.RUNMODAL(0, Vendor)
            ELSE BEGIN
              IF PAGE.RUNMODAL(0, Vendor) = ACTION::LookupOK THEN
                VALIDATE("Source No.", Vendor."No.");
            END;
          END;
      END;
    END;

    PROCEDURE LookupPlanner@1100525008();
    VAR
      Empl@1100525000 : Record 5200;
    BEGIN
      Empl.CHANGECOMPANY("Planner Company");
      Empl."No." := Planner;
      IF (Company <> COMPANYNAME) THEN
        PAGE.RUNMODAL(0, Empl)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, Empl) = ACTION::LookupOK THEN
          VALIDATE(Planner, Empl."No.");
      END;
    END;

    PROCEDURE LookupFilterSet@1100525005();
    VAR
      ExportFilterSet@1100525000 : Record 11020440;
    BEGIN
      ExportFilterSet.CHANGECOMPANY(Company);
      ExportFilterSet.Code := "Filter Set (Mobile)";
      IF (Company <> COMPANYNAME) OR  (Type <> Type::Employee) THEN
        PAGE.RUNMODAL(0, ExportFilterSet)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, ExportFilterSet) = ACTION::LookupOK THEN
          VALIDATE("Filter Set (Mobile)", ExportFilterSet.Code);
      END;
    END;

    PROCEDURE ShowResourceCard@1100528600();
    BEGIN
      PAGE.RUNMODAL(PAGE::"Resource-Card", Rec);
    END;

    PROCEDURE UseVisibleResources@1100528602() : Boolean;
    VAR
      VisibleResourceWOP@1100528600 : Record 11229285;
    BEGIN
      VisibleResourceWOP.SETRANGE("User ID", USERID);
      VisibleResourceWOP.SETRANGE("Visible in Navision", TRUE);
      EXIT(NOT VisibleResourceWOP.ISEMPTY);
    END;

    PROCEDURE GetVendorNo@1100525001() : Code[20];
    VAR
      Vendor@1100525000 : Record 23;
    BEGIN
      IF Type <> Type::Subcontractor THEN
        EXIT;
      IF Company <> COMPANYNAME THEN
        EXIT;
      IF NOT Vendor.GET("Source No.") THEN
        EXIT;
      EXIT(Vendor."No.");
    END;

    PROCEDURE SetVisible@1100525010(IType@1100409000 : 'GWP,Navision,Both';INewVisible@1100528600 : Boolean);
    BEGIN
      SetVisibleByUserID(IType, INewVisible, USERID);
    END;

    PROCEDURE SetVisibleByUserID@1100528608(IType@1100409000 : 'GWP,Navision,Both';INewVisible@1100528600 : Boolean;IUserID@1100528602 : Code[50]);
    VAR
      VisibleResourceWOP@1100528601 : Record 11229285;
    BEGIN
      IF INewVisible THEN BEGIN
        IF NOT VisibleResourceWOP.GET(IUserID, "No.") THEN BEGIN
          VisibleResourceWOP."User ID" := IUserID;
          VisibleResourceWOP."Resource No." := "No.";
          VisibleResourceWOP.INSERT(TRUE);
        END;
        CASE IType OF
          IType::GWP:
            VisibleResourceWOP."Visible in GWP" := TRUE;
          IType::Navision:
            VisibleResourceWOP."Visible in Navision" := TRUE;
          IType::Both:
            BEGIN
              VisibleResourceWOP."Visible in GWP" := TRUE;
              VisibleResourceWOP."Visible in Navision" := TRUE;
            END;
        END;
        VisibleResourceWOP.MODIFY(TRUE);
      END ELSE BEGIN
        IF VisibleResourceWOP.GET(USERID, "No.") THEN BEGIN
          CASE IType OF
            IType::GWP:
              VisibleResourceWOP."Visible in GWP" := FALSE;
            IType::Navision:
              VisibleResourceWOP."Visible in Navision" := FALSE;
            IType::Both:
              BEGIN
                VisibleResourceWOP."Visible in GWP" := FALSE;
                VisibleResourceWOP."Visible in Navision" := FALSE;
              END;
          END;
          IF NOT VisibleResourceWOP."Visible in GWP" AND NOT VisibleResourceWOP."Visible in Navision" THEN
            VisibleResourceWOP.DELETE(TRUE)
          ELSE
            VisibleResourceWOP.MODIFY(TRUE);
        END;
      END;
    END;

    PROCEDURE GetDisciplineFilter@1100528601() DisciplineFilter : Text;
    VAR
      ResourceDiscipline@1100528600 : Record 11229286;
    BEGIN
      ResourceDiscipline.SETRANGE("Resource No.", "No.");
      IF ResourceDiscipline.FINDSET THEN
        REPEAT
          IF DisciplineFilter <> '' THEN
            DisciplineFilter += '|';
          DisciplineFilter += ResourceDiscipline.Discipline;
        UNTIL ResourceDiscipline.NEXT = 0;
    END;

    PROCEDURE GetResourceDSByDiscipline@1100528603(IDiscipline@1100528602 : Code[10];VAR OResourceWOP@1100528600 : Record 11229278);
    VAR
      ResourceDiscipline@1100528601 : Record 11229286;
    BEGIN
      OResourceWOP.RESET;
      ResourceDiscipline.SETRANGE(Discipline, IDiscipline);
      IF ResourceDiscipline.FINDSET THEN
        REPEAT
          OResourceWOP."No." := ResourceDiscipline."Resource No.";
          OResourceWOP.MARK(TRUE);
        UNTIL ResourceDiscipline.NEXT = 0;
      OResourceWOP.MARKEDONLY(TRUE);
    END;

    PROCEDURE UpdateResourceDiscipline@1100528604();
    VAR
      ResourceDiscipline@1100528601 : Record 11229286;
    BEGIN
      IF Discipline <> '' THEN
        IF NOT ResourceDiscipline.GET("No.", Discipline) THEN BEGIN
          ResourceDiscipline."Resource No." := "No.";
          ResourceDiscipline.Discipline := Discipline;
          ResourceDiscipline.INSERT(TRUE);
        END;
    END;

    LOCAL PROCEDURE UpdateSubcontrPortalVendor@1100528605(IAction@1100528602 : 'Insert,Modify,Delete,Rename');
    VAR
      SubcontPortSetup@1100528601 : Record 11126402;
      SubcontPortVendor@1100528600 : Record 11126400;
    BEGIN
      IF (Type = Type::Subcontractor) AND ("Source No." <> '') AND (Company = COMPANYNAME) THEN BEGIN
        IF NOT SubcontPortSetup.GET('1') THEN
          EXIT;
        IF NOT SubcontPortSetup."Subcontracting Portal Active" THEN
          EXIT;
        CASE IAction OF
          IAction::Insert, IAction::Rename:
            BEGIN
              SubcontPortVendor.SETRANGE("Vendor No.", "Source No.");
              SubcontPortVendor.SETFILTER("Resource No.", '<>%1', "No.");
              IF NOT SubcontPortVendor.ISEMPTY THEN
                SubcontPortVendor.MODIFYALL("Resource No.", "No.");
            END;
          IAction::Modify:
            BEGIN
              IF xRec."Source No." <> '' THEN BEGIN
                SubcontPortVendor.SETRANGE("Vendor No.", xRec."Source No.");
                SubcontPortVendor.SETRANGE("Resource No.", "No.");
                IF NOT SubcontPortVendor.ISEMPTY THEN
                  SubcontPortVendor.MODIFYALL("Resource No.", '');
              END;
              SubcontPortVendor.SETRANGE("Vendor No.", "Source No.");
              SubcontPortVendor.SETFILTER("Resource No.", '<>%1', "No.");
              IF NOT SubcontPortVendor.ISEMPTY THEN
                SubcontPortVendor.MODIFYALL("Resource No.", "No.");
            END;
          IAction::Delete:
            BEGIN
              SubcontPortVendor.SETRANGE("Vendor No.", "Source No.");
              SubcontPortVendor.SETRANGE("Resource No.", '<>%1', '');
              IF NOT SubcontPortVendor.ISEMPTY THEN
                SubcontPortVendor.MODIFYALL("Resource No.", '');
            END;
        END;
      END;
    END;

    PROCEDURE CommunicateToFLS@1100528300();
    VAR
      ServiceSetup@1100409000 : Record 11012800;
      FLSVisiTourInterface@1100528300 : Codeunit 11072090;
    BEGIN
      ServiceSetup.GET;
      IF (ServiceSetup."FLS VisiTour Active") THEN
        FLSVisiTourInterface.FieldManager(1, "Source No.", "Active in FLS");
    END;

    PROCEDURE GetResourceName@1100409000(IResourceNo@1100409000 : Code[20]) : Text[50];
    BEGIN
      IF Rec.GET(IResourceNo) THEN
        EXIT(Rec.Name);
    END;

    PROCEDURE SetCompanyPlanGroupFilters@1100528606();
    VAR
      CompanyPlanGroup@1100528603 : Record 11229300;
      CompanyPlanGroupLine@1100528601 : Record 11229301;
      CurrentCompanyPlanGroup@1100528600 : Code[10];
      CompanyFilter@1100528602 : Text;
    BEGIN
      CurrentCompanyPlanGroup := CompanyPlanGroup.GetCurrentCompanyPlanGroupCode;
      CompanyPlanGroupLine.SETRANGE("Group Code", CurrentCompanyPlanGroup);
      IF CompanyPlanGroupLine.ISEMPTY THEN
        EXIT;
      IF CompanyPlanGroupLine.FINDSET THEN
        REPEAT
          IF CompanyFilter <> '' THEN
            CompanyFilter += '|';
          CompanyFilter += CompanyPlanGroupLine."Company Name";
        UNTIL CompanyPlanGroupLine.NEXT = 0;
      FILTERGROUP(7);
      SETFILTER(Company, CompanyFilter);
      FILTERGROUP(0);
    END;

    PROCEDURE IsResourceWithinCompanyPlanGroup@1100528607() : Boolean;
    VAR
      CompanyPlanGroup@1100528600 : Record 11229300;
      CompanyPlanGroupLine@1100528602 : Record 11229301;
      ResourceWOP@1100528604 : Record 11229278;
      CompanyPlanGroupCode@1100528603 : Code[20];
    BEGIN
      CompanyPlanGroupCode := CompanyPlanGroup.GetCurrentCompanyPlanGroupCode;
      IF CompanyPlanGroupCode = '' THEN
        EXIT(TRUE);
      CompanyPlanGroupLine.SETRANGE("Group Code", CompanyPlanGroupCode);
      IF CompanyPlanGroupLine.ISEMPTY THEN
        EXIT(TRUE);
      CompanyPlanGroupLine.SETRANGE("Company Name", Company);
      EXIT(NOT CompanyPlanGroupLine.ISEMPTY);
    END;

    PROCEDURE TestResourceWithinCompanyPlanGroup@1100528609();
    VAR
      CompanyPlanGroup@1100528600 : Record 11229300;
    BEGIN
      IF NOT IsResourceWithinCompanyPlanGroup THEN
        ERROR(Text006, "No.", CompanyPlanGroup.GetCurrentCompanyPlanGroupCode);
    END;

    BEGIN
    {
      Only maintain (insert/modify/delete/rename) resources of the own company allowed!
    }
    END.
  }
}

