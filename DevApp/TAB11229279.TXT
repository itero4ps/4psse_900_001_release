OBJECT Table 11229279 Work Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    DataCaptionFields=No.,Source No.,Description;
    OnInsert=VAR
               WorkOrderPlanningSetup@1100525000 : Record 11229277;
               NoSeriesMgt@1100525001 : Codeunit 396;
             BEGIN
               TESTFIELD("Source Company", COMPANYNAME);
               WorkOrderPlanningSetup.GET;
               IF "No." = '' THEN BEGIN
                 WorkOrderPlanningSetup.TESTFIELD("Work Order Nos.");
                 NoSeriesMgt.InitSeries(WorkOrderPlanningSetup."Work Order Nos.", xRec."No. Series", 0D, "No.", "No. Series");
               END;
               "Actual Field Service Status" := '';
               GetInitialReferencePoint();
               "Export to FSA" := FALSE;
               "Date/Time Export to FSA" := 0DT;
               "Export Item Usage to FSA":= FALSE;
               "Modified On" := CURRENTDATETIME;
               UpdateServiceOrder('I');

               InsertWorkOrderRefPoint;//C016653
             END;

    OnModify=VAR
               WorkOrderRefPoint@1100409001 : Record 11229282;
               xWorkOrder@1100528700 : Record 11229279;
               DateTimeReg@1100409000 : DateTime;
             BEGIN
               TESTFIELD("Source Company", COMPANYNAME);
               "Modified On" := CURRENTDATETIME;
               IF NOT xWorkOrder.GET("No.") THEN
                 xWorkOrder.INIT;
               UpdateRefPointWO();
               UpdateServiceOrder('M');
               UpdateDeletedWorkOrderCache(xWorkOrder, 'M');
             END;

    OnDelete=VAR
               ReferencePoint@1100528632 : Record 11020271;
               WorkOrderSignature@1100525000 : Record 11229280;
               WorkOrderRefPoint@1100527000 : Record 11229282;
               WorkOrder@1100528600 : Record 11229279;
               MobileDecentralWorkOrder@1100527001 : Record 11125649;
               Company@1100409000 : Record 2000000006;
               xWorkOrder@1100528700 : Record 11229279;
               DebriefLogbook4PSMobile@1100528605 : Record 11012677;
               DebriefErrorMessageMobile@1100528606 : Record 11012678;
               DebriefWorkOrderMobile@1100528607 : Record 11012679;
               DebriefBudgetLineMobile@1100528608 : Record 11012680;
               DebriefCostPlusEntryMob@1100528609 : Record 11012681;
               DebriefAdviceOrderLineMob@1100528610 : Record 11012682;
               DebriefFSStatusMobile@1100528611 : Record 11012683;
               DebriefTextMobile@1100528612 : Record 11012684;
               DebriefHourAccountingMob@1100528613 : Record 11012685;
               MobileDecentralObject@1100528601 : Record 11012688;
               DebriefText@1100528616 : Record 11012886;
               DebriefReceivedMessage@1100528617 : Record 11020444;
               DebriefInspectionLinesMob@1100528618 : Record 11020447;
               DebriefObjSpecLinesMob@1100528619 : Record 11020448;
               DebriefWorkOrderTextsMob@1100528620 : Record 11020449;
               DebriefRestockItemMob@1100528623 : Record 11125645;
               DebriefPlanningMob@1100528624 : Record 11125646;
               DebriefCreatePurchOrdMob@1100528626 : Record 11125648;
               DebriefWUPProductionMob@1100528627 : Record 11125650;
               DebriefServOrdObjMob@1100528628 : Record 11125652;
               DeletedWorkOrderCache@1100528629 : Record 11229281;
               WorkOrderText@1100528630 : Record 11229284;
               DebriefCreateRestPOMob@1100528631 : Record 11229869;
               DebriefAdvOrdLnTextMob@1100528634 : Record 11229870;
               FieldServiceWorksheet@1100528635 : Record 11125878;
               MessageText@1100528633 : Text;
             BEGIN
               IF NOT xWorkOrder.GET("No.") THEN
                 xWorkOrder.INIT;
               IF Company.GET("Source Company") THEN BEGIN
                 TESTFIELD("Source Company", COMPANYNAME);
                 TestIfDeletionIsAllowed;

                 IF NOT gOnDeleteSource THEN BEGIN
                   UpdateServiceOrder('D');
                   UpdateDeletedWorkOrderCache(xWorkOrder, 'D');
                 END;
               END;

               WorkOrderSignature.SETRANGE("Work Order No.", "No.");
               WorkOrderSignature.DELETEALL;

               WorkOrderRefPoint.SETRANGE("Work Order No.", "No.");
               WorkOrderRefPoint.DELETEALL;

               WorkOrder.SETRANGE("Related Work Order No.", "No.");
               IF WorkOrder.FINDSET THEN
                 REPEAT
                   WorkOrder.VALIDATE("Schedule Relation", WorkOrder."Schedule Relation"::" ");
                   WorkOrder.MODIFY;
                 UNTIL WorkOrder.NEXT = 0;

               MobileDecentralWorkOrder.SETCURRENTKEY("Work Order No.");
               MobileDecentralWorkOrder.SETRANGE("Work Order No.", "No.");
               MobileDecentralWorkOrder.DELETEALL;

               DebriefLogbook4PSMobile.SETRANGE("Work Order No.", "No.");
               DebriefLogbook4PSMobile.DELETEALL(TRUE);

               DebriefWorkOrderMobile.SETRANGE("Work Order No.", "No.");
               DebriefWorkOrderMobile.DELETEALL(TRUE);

               DebriefBudgetLineMobile.SETRANGE("Work Order No.", "No.");
               DebriefBudgetLineMobile.DELETEALL(TRUE);

               DebriefCostPlusEntryMob.SETRANGE("Work Order No.", "No.");
               DebriefCostPlusEntryMob.DELETEALL(TRUE);

               DebriefAdviceOrderLineMob.SETRANGE("Work Order No.", "No.");
               DebriefAdviceOrderLineMob.DELETEALL(TRUE);

               DebriefFSStatusMobile.SETRANGE("Work Order No.", "No.");
               DebriefFSStatusMobile.DELETEALL(TRUE);

               DebriefTextMobile.SETRANGE("Work Order No.", "No.");
               DebriefTextMobile.DELETEALL(TRUE);

               DebriefHourAccountingMob.SETRANGE("Work Order No.", "No.");
               DebriefHourAccountingMob.DELETEALL(TRUE);

               MobileDecentralObject.SETRANGE("Work Order No.", "No.");
               MobileDecentralObject.DELETEALL(TRUE);

               DebriefText.SETRANGE("Work Order No.", "No.");
               DebriefText.DELETEALL(TRUE);

               DebriefReceivedMessage.SETRANGE("Work Order No.", "No.");
               DebriefReceivedMessage.DELETEALL(TRUE);

               DebriefInspectionLinesMob.SETRANGE("Work Order No.", "No.");
               DebriefInspectionLinesMob.DELETEALL(TRUE);

               DebriefObjSpecLinesMob.SETRANGE("Work Order No.", "No.");
               DebriefObjSpecLinesMob.DELETEALL(TRUE);

               DebriefWorkOrderTextsMob.SETRANGE("Work Order No.", "No.");
               DebriefWorkOrderTextsMob.DELETEALL(TRUE);

               DebriefRestockItemMob.SETRANGE("Work Order No.", "No.");
               DebriefRestockItemMob.DELETEALL(TRUE);

               DebriefPlanningMob.SETRANGE("Work Order No.", "No.");
               DebriefPlanningMob.DELETEALL(TRUE);

               DebriefCreatePurchOrdMob.SETRANGE("Work Order No.", "No.");
               DebriefCreatePurchOrdMob.DELETEALL(TRUE);

               DebriefWUPProductionMob.SETRANGE("Work Order No.", "No.");
               DebriefWUPProductionMob.DELETEALL(TRUE);

               DebriefServOrdObjMob.SETRANGE("Work Order No.", "No.");
               DebriefServOrdObjMob.DELETEALL(TRUE);

               DeletedWorkOrderCache.SETRANGE("Work Order No.", "No.");
               DeletedWorkOrderCache.DELETEALL(TRUE);

               WorkOrderText.SETRANGE("Table Name", WorkOrderText."Table Name"::"Work Order");
               WorkOrderText.SETRANGE("No.", "No.");
               WorkOrderText.DELETEALL(TRUE);

               DebriefCreateRestPOMob.SETRANGE("Work Order No.", "No.");
               DebriefCreateRestPOMob.DELETEALL(TRUE);

               DebriefAdvOrdLnTextMob.SETRANGE("Work Order No.", "No.");
               DebriefAdvOrdLnTextMob.DELETEALL(TRUE);

               FieldServiceWorksheet.SETRANGE("Work Order No.", "No.");
               FieldServiceWorksheet.MODIFYALL("Work Order No.", '');
             END;

    OnRename=BEGIN
               TESTFIELD("Actual Field Service Status", '');
               "Modified On" := CURRENTDATETIME;
             END;

    CaptionML=ENU=Work Order;
    PasteIsValid=No;
    LookupPageID=Page11229286;
    DrillDownPageID=Page11229286;
  }
  FIELDS
  {
    { 10  ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD("Source Company", COMPANYNAME);
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  WorkOrderPlanningSetup.GET;
                                                                  NoSeriesMgt.TestManual(WorkOrderPlanningSetup."Work Order Nos.");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 20  ;   ;Source Company      ;Text30        ;TableRelation=Company;
                                                   OnValidate=BEGIN
                                                                IF "Source Company" <> xRec."Source Company" THEN
                                                                  "Source No." := '';
                                                              END;

                                                   CaptionML=ENU=Source Company;
                                                   NotBlank=Yes }
    { 30  ;   ;Source Type         ;Option        ;OnValidate=BEGIN
                                                                IF "Source Type" <> xRec."Source Type" THEN BEGIN
                                                                  "Source No." := '';
                                                                  IF NOT CheckResourceSchedule(FALSE) THEN
                                                                    "Resource No." := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Source Type;
                                                   OptionCaptionML=ENU=,Service Order,,,,,,,,,,Project;
                                                   OptionString=,ServiceOrder,,,,,,,,,,Project;
                                                   NotBlank=Yes }
    { 40  ;   ;Source No.          ;Code20        ;OnValidate=BEGIN
                                                                IF  "Source No." <> '' THEN
                                                                  ValidateSourceNo();
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupSourceNo(TRUE);
                                                            END;

                                                   CaptionML=ENU=Source No.;
                                                   NotBlank=Yes }
    { 50  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 60  ;   ;Starting Date/Time  ;DateTime      ;OnValidate=BEGIN
                                                                CheckPlanDataFSA;
                                                                TESTFIELD("Source Company", COMPANYNAME);
                                                                IF "Starting Date/Time" = 0DT THEN
                                                                  "Ending Date/Time" := 0DT;
                                                                IF ("Starting Date/Time" >= "Ending Date/Time") AND ("Ending Date/Time" <> 0DT) AND (CurrFieldNo = FIELDNO("Starting Date/Time")) THEN
                                                                  "Ending Date/Time" := 0DT;   // Needed for webservice GWP
                                                                CheckEndAfterStart(FIELDNO("Starting Date/Time"));
                                                              END;

                                                   CaptionML=ENU=Starting Date/Time }
    { 65  ;   ;Ending Date/Time    ;DateTime      ;OnValidate=BEGIN
                                                                CheckPlanDataFSA;
                                                                TESTFIELD("Source Company", COMPANYNAME);
                                                                IF "Ending Date/Time" <> 0DT THEN
                                                                  TESTFIELD("Starting Date/Time");
                                                                CheckEndAfterStart(FIELDNO("Ending Date/Time"));
                                                              END;

                                                   CaptionML=ENU=Ending Date/Time }
    { 70  ;   ;First Possible Start.Date/Time;DateTime;
                                                   OnValidate=BEGIN
                                                                CheckPlanDataFSA;
                                                                IF "First Possible Start.Date/Time" = 0DT THEN
                                                                  "Last Possible Ending Date/Time" := 0DT;
                                                                IF ("First Possible Start.Date/Time" >= "Last Possible Ending Date/Time") AND ("Last Possible Ending Date/Time" <> 0DT) AND
                                                                   (CurrFieldNo = FIELDNO("First Possible Start.Date/Time"))
                                                                THEN
                                                                  "Last Possible Ending Date/Time" := 0DT;   // Needed for webservice GWP
                                                                CheckEndAfterStart(FIELDNO("First Possible Start.Date/Time"));
                                                              END;

                                                   CaptionML=ENU=First Possible Starting Date/Time }
    { 75  ;   ;Last Possible Ending Date/Time;DateTime;
                                                   OnValidate=BEGIN
                                                                CheckPlanDataFSA;
                                                                IF "Last Possible Ending Date/Time" <> 0DT THEN
                                                                  TESTFIELD("First Possible Start.Date/Time");
                                                                CheckEndAfterStart(FIELDNO("Last Possible Ending Date/Time"));
                                                              END;

                                                   CaptionML=ENU=Last Possible Ending Date/Time }
    { 80  ;   ;Expected Hours      ;Decimal       ;OnValidate=BEGIN
                                                                CheckPlanDataFSA;
                                                              END;

                                                   CaptionML=ENU=Expected Hours;
                                                   DecimalPlaces=0:5 }
    { 90  ;   ;Duration Time       ;Decimal       ;OnValidate=VAR
                                                                ServOrder@1100525000 : Record 11012823;
                                                              BEGIN
                                                                IF "Duration Time" < 0 THEN
                                                                  FIELDERROR("Duration Time");
                                                                CheckPlanDataFSA();
                                                              END;

                                                   CaptionML=ENU=Duration Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 100 ;   ;Plan during Clock Time;Boolean     ;OnValidate=BEGIN
                                                                CheckPlanDataFSA;
                                                              END;

                                                   CaptionML=ENU=Plan during Clock Time }
    { 110 ;   ;Actual Field Service Status;Text30 ;TableRelation="Field Service Code".Code WHERE (Type=CONST(Status));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Source Company", COMPANYNAME);
                                                                IF NOT ("Resource Type" IN ["Resource Type"::Employee, "Resource Type"::Subcontractor]) THEN
                                                                  FIELDERROR("Resource Type");
                                                                CALCFIELDS("Actual Field Serv. Status Desc");
                                                              END;

                                                   CaptionML=ENU=Actual Field Service Status;
                                                   Editable=No }
    { 111 ;   ;Actual Field Serv. Status Desc;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Field Service Code".Description WHERE (Type=CONST(Status),
                                                                                                              Code=FIELD(Actual Field Service Status)));
                                                   CaptionML=ENU=Actual Field Service Status Description;
                                                   Editable=No }
    { 120 ;   ;Resource No.        ;Code20        ;TableRelation=IF (Source Type=CONST(Project)) "Resource (WOP)" WHERE (Type=FIELD(Resource Type),
                                                                                                                         Schedule=FILTER(Project|Both))
                                                                                                                         ELSE IF (Source Type=CONST(ServiceOrder)) "Resource (WOP)" WHERE (Type=FIELD(Resource Type),
                                                                                                                                                                                           Schedule=FILTER(ServiceOrder|Both));
                                                   OnValidate=VAR
                                                                ResourceMgtWorkOrderPlan@1100528600 : Codeunit 11229277;
                                                              BEGIN
                                                                IF NOT GUIALLOWED AND (CurrFieldNo = 0) THEN //Call from GWP
                                                                  CurrFieldNo := FIELDNO("Resource No.");
                                                                CheckPlanDataFSA;
                                                                ResourceMgtWorkOrderPlan.TestResourceWithinCompanyPlanGroup("Resource No.");
                                                                IF (xRec."Resource No." <> '') AND (xRec."Resource No." <> "Resource No.") THEN BEGIN
                                                                  "Actual Field Service Status" := '';
                                                                  GetInitialReferencePoint;
                                                                END;
                                                                CALCFIELDS("Resource Name", "Resource Company");
                                                                DetermineLeadingResource;
                                                                CheckResourceSchedule(TRUE);
                                                                UpdateAdviceOrder;
                                                              END;

                                                   CaptionML=ENU=Resource No. }
    { 130 ;   ;Resource Name       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Resource (WOP)".Name WHERE (No.=FIELD(Resource No.)));
                                                   CaptionML=ENU=Resource Name;
                                                   Editable=No }
    { 140 ;   ;Resource Company    ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Resource (WOP)".Company WHERE (No.=FIELD(Resource No.)));
                                                   TableRelation=Company;
                                                   CaptionML=ENU=Resource Company;
                                                   Editable=No }
    { 150 ;   ;Resource Type       ;Option        ;OnValidate=BEGIN
                                                                IF xRec."Resource Type" <> "Resource Type" THEN BEGIN
                                                                  VALIDATE("Resource No.", '');
                                                                  CALCFIELDS("Resource Name", "Resource Company");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Resource Type;
                                                   OptionCaptionML=ENU=" ,Employee,Subontractor";
                                                   OptionString=[ ,Employee,Subcontractor];
                                                   Description=Must be normal field, because needed for anonymous order (Resource No. empty) }
    { 160 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 170 ;   ;Project Planning Activity No.;Code30;
                                                   OnValidate=VAR
                                                                ProjPlanActivity@1100525000 : Record 11012431;
                                                              BEGIN
                                                                IF "Source Type" <> "Source Type"::Project THEN
                                                                  TESTFIELD("Project Planning Activity No.", '')
                                                                ELSE BEGIN
                                                                  IF "Project Planning Activity No." <> '' THEN BEGIN
                                                                    TESTFIELD("Source Company");
                                                                    TESTFIELD("Source No.");
                                                                    ProjPlanActivity.CHANGECOMPANY("Source Company");
                                                                    ProjPlanActivity.GET("Project Planning Activity No.");
                                                                    ProjPlanActivity.TESTFIELD("Project No.", "Source No.");
                                                                    ProjPlanActivity.TESTFIELD(Type, ProjPlanActivity.Type::Activity);
                                                                    Description := COPYSTR(ProjPlanActivity.Description, 1, MAXSTRLEN(Description));
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ProjPlanActivity@1100525000 : Record 11012431;
                                                            BEGIN
                                                              TESTFIELD("Source Type", "Source Type"::Project);
                                                              TESTFIELD("Source Company");
                                                              TESTFIELD("Source No.");
                                                              ProjPlanActivity.CHANGECOMPANY("Source Company");
                                                              ProjPlanActivity.SETCURRENTKEY("Project No.", Code);
                                                              ProjPlanActivity.SETRANGE("Project No.", "Source No.");
                                                              ProjPlanActivity.SETRANGE(Type, ProjPlanActivity.Type::Activity);
                                                              IF "Project Planning Activity No." <> '' THEN
                                                                IF ProjPlanActivity.GET("Project Planning Activity No.") THEN;
                                                              IF PAGE.RUNMODAL(0, ProjPlanActivity) = ACTION::LookupOK THEN
                                                                VALIDATE("Project Planning Activity No.", ProjPlanActivity."No.");
                                                            END;

                                                   CaptionML=ENU=Project Planning Activity No. }
    { 200 ;   ;Export to FSA       ;Boolean       ;OnValidate=VAR
                                                                Resource@1210190000 : Record 11229278;
                                                                ServiceOrder@1100525001 : Record 11012823;
                                                                MandatoryFields@1100525000 : Record 11125651;
                                                              BEGIN
                                                                IF "Export to FSA" THEN BEGIN
                                                                  TESTFIELD("Resource Type", "Resource Type"::Employee);
                                                                  TESTFIELD("Resource No.");
                                                                  Resource.GET("Resource No.");
                                                                  Resource.TESTFIELD("Active in FSA", TRUE);
                                                                  CheckPlanDataFSA;
                                                                  IF "Source Type" = "Source Type"::ServiceOrder THEN BEGIN
                                                                    ServiceOrder.CHANGECOMPANY("Source Company");
                                                                    ServiceOrder.GET("Source No.");
                                                                    MandatoryFields.CheckMandatoryFieldsServiceOrder(ServiceOrder, Rec, "Source Company");
                                                                    UpdateSOObjectSpecificationLines;
                                                                    UpdateSOObjectInspectionLines;
                                                                  END;
                                                                  "Export Item Usage to FSA" := TRUE;
                                                                  GetExportReferencePoint();  // 15
                                                                END ELSE
                                                                  GetInitialReferencePoint();  // 10
                                                              END;

                                                   CaptionML=ENU=Export to Field Service }
    { 205 ;   ;Active in FSA       ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Resource (WOP)"."Active in FSA" WHERE (No.=FIELD(Resource No.)));
                                                   CaptionML=ENU=Active in Field Service;
                                                   Editable=No }
    { 210 ;   ;Date/Time Export to FSA;DateTime   ;CaptionML=ENU=Date/Time Export to Field Service;
                                                   Editable=No }
    { 220 ;   ;Signer              ;Text50        ;OnValidate=BEGIN
                                                                TESTFIELD("Resource Type", "Resource Type"::Employee);
                                                              END;

                                                   CaptionML=ENU=Signer }
    { 225 ;   ;Signature Mandatory ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Resource Type", "Resource Type"::Employee);
                                                              END;

                                                   CaptionML=ENU=Signature Mandatory }
    { 230 ;   ;Actual Reference Point;Integer     ;TableRelation="Reference Point" WHERE (Apply=CONST(ServOrder));
                                                   OnValidate=BEGIN
                                                                "Actual Ref. Point Set Manually" := CurrFieldNo = FIELDNO("Actual Reference Point");
                                                              END;

                                                   CaptionML=ENU=Actual Reference Point }
    { 240 ;   ;Actual Reference Point Desc.;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Reference Point".Description WHERE (No.=FIELD(Actual Reference Point)));
                                                   CaptionML=ENU=Actual Reference Point Description;
                                                   Editable=No }
    { 250 ;   ;Schedule Relation   ;Option        ;OnValidate=BEGIN
                                                                IF "Schedule Relation" = "Schedule Relation"::" " THEN
                                                                  "Related Work Order No." := '';
                                                              END;

                                                   CaptionML=ENU=Schedule Relation;
                                                   OptionCaptionML=ENU=" ,Start-Start,,End-Start";
                                                   OptionString=[ ,Start-Start,,End-Start] }
    { 260 ;   ;Related Work Order No.;Code20      ;TableRelation="Work Order";
                                                   OnValidate=BEGIN
                                                                TestRecursiveness;
                                                                IF "Related Work Order No." <> '' THEN BEGIN
                                                                  IF "Related Work Order No." = "No." THEN
                                                                    FIELDERROR("Related Work Order No.");
                                                                  TESTFIELD("Schedule Relation");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupRelatedWorkOrder(TRUE);
                                                            END;

                                                   CaptionML=ENU=Related Work Order No. }
    { 270 ;   ;Modified On         ;DateTime      ;CaptionML=ENU=Modified On }
    { 280 ;   ;Export Item Usage to FSA;Boolean   ;CaptionML=ENU=Export Item Usage to Field Service;
                                                   Editable=No }
    { 285 ;   ;Item Used Exported On;DateTime     ;CaptionML=ENU=Item Usage Exported On;
                                                   Editable=No }
    { 290 ;   ;Target Company      ;Text30        ;TableRelation=Company;
                                                   CaptionML=ENU=Target Company }
    { 300 ;   ;Work Order Text     ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Work Order Text" WHERE (Table Name=CONST(Work Order),
                                                                                              No.=FIELD(No.)));
                                                   CaptionML=ENU=Work Order Text;
                                                   Editable=No }
    { 310 ;   ;Expected Starting Date;Date        ;OnValidate=BEGIN
                                                                TestExpectedDateTimes;
                                                                VALIDATE("Expected Dates Modified on", CREATEDATETIME(TODAY, TIME));
                                                              END;

                                                   CaptionML=ENU=Expected Starting Date }
    { 320 ;   ;Expected Starting Time;Time        ;OnValidate=BEGIN
                                                                TestExpectedDateTimes;
                                                                VALIDATE("Expected Dates Modified on", CREATEDATETIME(TODAY, TIME));
                                                              END;

                                                   CaptionML=ENU=Expected Starting Time }
    { 330 ;   ;Expected Ending Date;Date          ;OnValidate=BEGIN
                                                                TestExpectedDateTimes;
                                                                VALIDATE("Expected Dates Modified on", CREATEDATETIME(TODAY, TIME));
                                                              END;

                                                   CaptionML=ENU=Expected Ending Date }
    { 340 ;   ;Expected Ending Time;Time          ;OnValidate=BEGIN
                                                                TestExpectedDateTimes;
                                                                VALIDATE("Expected Dates Modified on", CREATEDATETIME(TODAY, TIME));
                                                              END;

                                                   CaptionML=ENU=Expected Ending Time }
    { 350 ;   ;Expected Dates Modified on;DateTime;OnValidate=VAR
                                                                ServiceOrderStatusMail@1100409000 : Codeunit 11012816;
                                                              BEGIN
                                                                IF ("Source Type" = "Source Type"::ServiceOrder) AND ("Source Company" = COMPANYNAME) THEN
                                                                  IF "Expected Dates Modified on" <> xRec."Expected Dates Modified on" THEN BEGIN
                                                                    MODIFY;
                                                                    ServiceOrderStatusMail.SetMailAction(3);
                                                                    ServiceOrderStatusMail.WorkOrderMail("No.");
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Expected Dates Modified on;
                                                   Editable=No }
    { 360 ;   ;Publish on Subcontr. Portal;Boolean;OnValidate=VAR
                                                                SubcontPortSetup@1100528600 : Record 11126402;
                                                                ResourceWOP@1100528601 : Record 11229278;
                                                                WorkOrderReferencePoint@1100528602 : Record 11229282;
                                                                SubcontrPortLocation@1100528603 : Record 11126403;
                                                                ServiceOrder@1100528604 : Record 11012823;
                                                                SubcontPortVendor@1100528605 : Record 11126400;
                                                              BEGIN
                                                                TESTFIELD("Source Company", COMPANYNAME);
                                                                IF "Publish on Subcontr. Portal" THEN BEGIN
                                                                  IF NOT SubcontPortSetup.READPERMISSION THEN
                                                                    EXIT;
                                                                  SubcontPortSetup.GET('1');
                                                                  SubcontPortSetup.TESTFIELD("Subcontracting Portal Active");

                                                                  TESTFIELD("Resource No.");
                                                                  TESTFIELD("Resource Type", "Resource Type"::Subcontractor);
                                                                  ResourceWOP.GET("Resource No.");
                                                                  ResourceWOP.TESTFIELD(Company, "Source Company");

                                                                  InsertSubcontrPortLocation;
                                                                  GetPublishOnSubcontrPort;

                                                                  IF ServiceOrder.GET("Source No.") THEN BEGIN
                                                                    SubcontrPortLocation.SETRANGE("Vendor No.", ResourceWOP.GetVendorNo);
                                                                    IF NOT SubcontrPortLocation.ISEMPTY AND (ServiceOrder."Service Location No." <> '') THEN
                                                                      IF NOT SubcontrPortLocation.GET(ResourceWOP.GetVendorNo, '', ServiceOrder."Service Location No.") THEN
                                                                        ERROR(Text010, TABLECAPTION, "No.", SubcontPortVendor.TABLECAPTION, ResourceWOP.GetVendorNo);
                                                                  END;
                                                                  CreateSubcontrPurchaseOrder;
                                                                END ELSE
                                                                  DeleteSubcontrPortLocation;
                                                              END;

                                                   CaptionML=ENU=Publish on Subcontractor Portal }
    { 370 ;   ;Project Element     ;Code20        ;OnValidate=VAR
                                                                ProjectElement@1100528600 : Record 11012010;
                                                                ProjectElementManagement@1100528601 : Codeunit 11012285;
                                                              BEGIN
                                                                IF "Source Type" <> "Source Type"::Project THEN
                                                                  TESTFIELD("Project Element", '')
                                                                ELSE BEGIN
                                                                  IF "Project Element" <> '' THEN BEGIN
                                                                    ProjectElementManagement.TestProjectElementPlanFunctionality;
                                                                    TESTFIELD("Source Company");
                                                                    TESTFIELD("Source No.");
                                                                    ProjectElement.CHANGECOMPANY("Source Company");
                                                                    ProjectElement.GET("Source No.", "Project Element");
                                                                    Description := COPYSTR(ProjectElement.Description, 1, MAXSTRLEN(Description));
                                                                    VALIDATE("Starting Date/Time", CREATEDATETIME(ProjectElement."Starting Date", ProjectElement."Starting Time"));
                                                                    VALIDATE("Ending Date/Time", CREATEDATETIME(ProjectElement."Ending Date", ProjectElement."Ending Time"));
                                                                    VALIDATE("Expected Hours", ProjectElement."Estimated Hours");
                                                                    VALIDATE("Duration Time", ProjectElement."Estimated Hours");
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ProjectElement@1100528600 : Record 11012010;
                                                            BEGIN
                                                              TESTFIELD("Source Type", "Source Type"::Project);
                                                              TESTFIELD("Source Company");
                                                              TESTFIELD("Source No.");
                                                              ProjectElement.CHANGECOMPANY("Source Company");
                                                              ProjectElement.SETRANGE("Project No.", "Source No.");
                                                              IF "Project Element" <> '' THEN
                                                                IF ProjectElement.GET("Source No.", "Project Element") THEN;
                                                              IF PAGE.RUNMODAL(0, ProjectElement) = ACTION::LookupOK THEN
                                                                VALIDATE("Project Element", ProjectElement.Element);
                                                            END;

                                                   CaptionML=ENU=Project Element }
    { 380 ;   ;Date/Time Export Work Sheet;DateTime;
                                                   CaptionML=ENU=Date/Time Export Work Sheet;
                                                   Editable=No }
    { 390 ;   ;WO Finished (Field Service);Boolean;CaptionML=ENU=Work Order Finished (Field Service);
                                                   Editable=No }
    { 400 ;   ;Fld Srv Status Reason Desc.;Text50 ;CaptionML=ENU=Field Service Status Reason Description;
                                                   Editable=No }
    { 410 ;   ;Leading Resource    ;Boolean       ;OnValidate=VAR
                                                                WorkOrder@1100528600 : Record 11229279;
                                                              BEGIN
                                                                IF "Leading Resource" THEN BEGIN
                                                                  TESTFIELD("Resource Type", "Resource Type"::Employee);
                                                                  TESTFIELD("Resource No.");
                                                                  WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
                                                                  WorkOrder.SETRANGE("Source Company", "Source Company");
                                                                  WorkOrder.SETRANGE("Source Type", "Source Type");
                                                                  WorkOrder.SETRANGE("Source No.", "Source No.");
                                                                  WorkOrder.SETRANGE("Leading Resource", TRUE);
                                                                  WorkOrder.SETFILTER("No.", '<>%1', "No.");
                                                                  IF NOT WorkOrder.ISEMPTY THEN
                                                                    WorkOrder.MODIFYALL("Leading Resource", FALSE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Leading Resource }
    { 420 ;   ;Actual Ref. Point Set Manually;Boolean;
                                                   CaptionML=ENU=Actual Ref. Point Set Manually;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Source Company,Source Type,Source No.   ;SumIndexFields=Expected Hours }
    {    ;Resource No.,Export to FSA               }
    {    ;Source Type,Source No.                   }
    {    ;Related Work Order No.                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      WorkOrderPlanningSetup@1100525000 : Record 11229277;
      gDocRefPoint@1100527004 : Record 11020296;
      NoSeriesMgt@1100525001 : Codeunit 396;
      Text001@1100525004 : TextConst 'ENU=(%1) must be greater than %2 (%3)';
      Text002@1100525003 : TextConst 'ENU=may not be modified due to choosen blockade by actual Reference Point';
      Text003@1100525002 : TextConst 'ENU=Renaming not allowed.';
      AdviceOrderManagement@1100409003 : Codeunit 11012041;
      gDateTimeRefPointRegistr@1100527000 : DateTime;
      gOnDeleteSource@1100527005 : Boolean;
      gUpdateRefPointFromMobile@1100527001 : Boolean;
      gNewDocRefPoint@1100527003 : Boolean;
      gCollectivePublishSubcPortalRun@1100409000 : Boolean;
      gSkipCreatPurchOrder@1100409002 : Boolean;
      gModifiedByEmployeeNoMobile@1100527002 : Code[20];
      Text004@1100525005 : TextConst 'ENU=''%1'' with %2 ''%3'' not allowed forr %4 ''%5''';
      Text005@1100528600 : TextConst 'ENU=Deleting not Allowed. %1 in use in table %2.';
      Text007@1100528601 : TextConst 'ENU=%1 must be within %2 en %3';
      Text008@1100528603 : TextConst 'ENU=%1 cannot precede %2';
      Text009@1100528602 : TextConst 'ENU=%1 must be before %2';
      Text010@1100528604 : TextConst 'ENU=%1 %2 cannot be published on Subcontractors Portal, because the service location is not visible for %3 %4.';
      Text012@1100528605 : TextConst 'ENU=Actueel Reference Point is blocked for export of Work Order %1 to Field Service.';
      Text013@1100528606 : TextConst 'ENU=Work Order %1 cannot be deleted due to limitations on Actual Reference Point';
      Text014@1100525006 : TextConst 'ENU=Assignment not accepted: the result would be a never ending chain of Work Orders';
      Text015@1100528607 : TextConst 'ENU=Work Order %1 cannot be modified due to limitations on Actual Reference Point';
      Text016@1100528609 : TextConst 'ENU="%1 cannot be %2 in %3 "';
      Text017@1100528608 : TextConst 'ENU=Work Order %1 is not part of Company Plan Group %2';
      Text018@1100528610 : TextConst 'ENU=%1 %2 of company %3 has status %4, creating or changing work order not allowed';

    PROCEDURE AssistEdit@2(OldWorkOrder@11012000 : Record 11229279) : Boolean;
    VAR
      WorkOrder@1100525000 : Record 11229279;
    BEGIN
      WITH WorkOrder DO BEGIN
        WorkOrder := Rec;
        WorkOrderPlanningSetup.GET;
        WorkOrderPlanningSetup.TESTFIELD("Work Order Nos.");
        IF NoSeriesMgt.SelectSeries(WorkOrderPlanningSetup."Work Order Nos.",WorkOrder."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := WorkOrder;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE ValidateSourceNo@1100525000();
    VAR
      ServOrder@1100525000 : Record 11012823;
      Proj@1100525001 : Record 11072003;
    BEGIN
      TESTFIELD("Source Company");
      CASE "Source Type" OF
        "Source Type"::ServiceOrder:
          BEGIN
            ServOrder.CHANGECOMPANY("Source Company");
            ServOrder.GET("Source No.");
            Description := COPYSTR(ServOrder.Description, 1, MAXSTRLEN(Description));
            IF ServOrder."Starting Date" <> 0D THEN
              "Starting Date/Time" := DATI2VARIANT(ServOrder."Starting Date", ServOrder."Starting Time");
            IF ServOrder."Ending Date" <> 0D THEN
              "Ending Date/Time" := DATI2VARIANT(ServOrder."Ending Date", ServOrder."Ending Time");
            IF ServOrder."First Possible Starting Date" <> 0D THEN
              "First Possible Start.Date/Time" :=
                DATI2VARIANT(ServOrder."First Possible Starting Date", ServOrder."First Possible Starting Time");
            IF ServOrder."Last Possible Ending Date" <> 0D THEN
              "Last Possible Ending Date/Time" :=
                DATI2VARIANT(ServOrder."Last Possible Ending Date", ServOrder."Last Possible Ending Time");
            "Expected Hours" := ServOrder."Expected Hours";
            "Duration Time" := ServOrder."Duration Time";
          END;
        "Source Type"::Project:
          BEGIN
            Proj.CHANGECOMPANY("Source Company");
            Proj.GET("Source No.");
            Description := COPYSTR(Proj.Description, 1, MAXSTRLEN(Description));
          END;
        ELSE
          FIELDERROR("Source Type");
      END;

      "Signature Mandatory" := GetSignatureMandatory;
    END;

    PROCEDURE LookupSourceNo@1100525002(EditableMode@1100525002 : Boolean);
    VAR
      ServOrder@1100525001 : Record 11012823;
      Proj@1100525000 : Record 11072003;
    BEGIN
      TESTFIELD("Source Company");
      CASE "Source Type" OF
        "Source Type"::ServiceOrder:
          BEGIN
            ServOrder.CHANGECOMPANY("Source Company");
            ServOrder."No." := "Source No.";
            IF NOT EditableMode THEN
              PAGE.RUNMODAL(0, ServOrder)
            ELSE BEGIN
              IF PAGE.RUNMODAL(0, ServOrder) = ACTION::LookupOK THEN BEGIN
                IF ServOrder."No." <> "Source No."  THEN
                  VALIDATE("Source No.", ServOrder."No.");
              END;
            END;
          END;
        "Source Type"::Project:
          BEGIN
            Proj.CHANGECOMPANY("Source Company");
            Proj."No." := "Source No.";
            IF NOT EditableMode THEN
              PAGE.RUNMODAL(0, Proj)
            ELSE BEGIN
              IF PAGE.RUNMODAL(0, Proj) = ACTION::LookupOK THEN BEGIN
                IF  Proj."No." <> "Source No." THEN
                  VALIDATE("Source No.", Proj."No.");
              END;
            END;
          END;
      END;
    END;

    PROCEDURE LookupRelatedWorkOrder@1100527003(EditableMode@1100527000 : Boolean);
    VAR
      WorkOrder@1100527001 : Record 11229279;
    BEGIN
      WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
      WorkOrder.SETRANGE("Source Company", "Source Company");
      WorkOrder.SETRANGE("Source Type", "Source Type");
      WorkOrder.SETRANGE("Source No.", "Source No.");
      WorkOrder.SETFILTER("No.", '<>%1', "No.");
      WorkOrder."Source Company" := "Source Company";
      WorkOrder."Source Type" := "Source Type";
      WorkOrder."Source No." := "Source No.";
      WorkOrder."No." := "Related Work Order No.";
      IF NOT EditableMode THEN
        PAGE.RUNMODAL(0, WorkOrder)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, WorkOrder) = ACTION::LookupOK THEN BEGIN
          IF (WorkOrder."No." <> "Related Work Order No.") AND (WorkOrder."No." <> "No.") THEN
            VALIDATE("Related Work Order No.", WorkOrder."No.");
        END;
      END;
    END;

    PROCEDURE GetSourceNoDescription@1100525001() : Text[100];
    VAR
      ServOrder@1100525000 : Record 11012823;
      Proj@1100525001 : Record 11072003;
    BEGIN
      IF ("Source Company" <> '') AND ("Source No." <> '') THEN BEGIN
        CASE "Source Type" OF
          "Source Type"::ServiceOrder:
            BEGIN
              ServOrder.CHANGECOMPANY("Source Company");
              IF ServOrder.GET("Source No.") THEN
                EXIT(ServOrder.Description);
            END;
          "Source Type"::Project:
            BEGIN
              Proj.CHANGECOMPANY("Source Company");
              IF Proj.GET("Source No.") THEN
                EXIT(Proj.Description);
            END;
        END;
      END;
      EXIT('');
    END;

    PROCEDURE SetFiltersOnSource@1100525004(SourceCompany@1100527000 : Text[30];SourceType@1100525001 : Option;SourceNo@1100525000 : Code[20];VAR WorkOrder@1100525002 : Record 11229279);
    BEGIN
      FILTERGROUP(FilterGroupSourceFilter);
      IF SourceCompany = '' THEN
        SourceCompany := COMPANYNAME;
      SETRANGE("Source Company", SourceCompany);
      SETRANGE("Source Type", SourceType);
      SETRANGE("Source No.", SourceNo);
      FILTERGROUP(0);
    END;

    PROCEDURE InitRecordOnNew@1100525003(SourceType@1100525000 : Option;SourceNo@1100525001 : Code[20];ResourceType@1100525002 : Option);
    BEGIN
      "Source Company" := COMPANYNAME;
      IF SourceType >= 0 THEN BEGIN
        "Source Type" := SourceType;
        VALIDATE("Source No.", SourceNo);
      END;
      "Resource Type" := ResourceType;
    END;

    PROCEDURE DetermineSourceNoFromFilter@1100525005() : Code[20];
    VAR
      SourceNoFilter@1100525001 : Text[1024];
    BEGIN
      FILTERGROUP(FilterGroupSourceFilter);
      SourceNoFilter := GETFILTER("Source No.");
      FILTERGROUP(0);
      IF (SourceNoFilter <> '') AND (STRLEN(SourceNoFilter) <= MAXSTRLEN("Source No.")) THEN
        EXIT(SourceNoFilter);
      EXIT('');
    END;

    PROCEDURE FilterGroupSourceFilter@1100525006() : Integer;
    BEGIN
      EXIT(2);
      // Note: Filtergroup 0/5.. (platformbug acc. to Peter), problem with New in Card. Because filters empty Source No.
      //       can not be determined. Therefore tried/used filtergroup 2, that works.
    END;

    PROCEDURE HasSignature@1100525007() : Boolean;
    VAR
      WorkOrderSignature@1100525000 : Record 11229280;
    BEGIN
      IF "No." <> '' THEN BEGIN
        IF WorkOrderSignature.GET("No.") THEN
          EXIT(WorkOrderSignature.Signature.HASVALUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetInitialReferencePoint@1100525008();
    VAR
      ReferencePoint@1100525000 : Record 11020271;
    BEGIN
      ReferencePoint.CHANGECOMPANY("Source Company");
      ReferencePoint.SETRANGE(Apply, ReferencePoint.Apply::ServOrder);
      ReferencePoint.SETRANGE("Triggered by Status ServOrder", ReferencePoint."Triggered by Status ServOrder"::Open);
      IF ReferencePoint.FINDFIRST THEN
        "Actual Reference Point" := ReferencePoint."No.";
    END;

    LOCAL PROCEDURE GetExportReferencePoint@1100525012();
    VAR
      MobileSetup@1100525000 : Record 11012676;
    BEGIN
      IF MobileSetup.GET THEN BEGIN
        MobileSetup.TESTFIELD("Ref. Point Sending SO");
        "Actual Reference Point" := MobileSetup."Ref. Point Sending SO";
      END;
    END;

    PROCEDURE CheckEndAfterStart@1100527002(CurrFieldNo@1100527000 : Integer);
    BEGIN
      CASE CurrFieldNo OF
        FIELDNO("Starting Date/Time"),
        FIELDNO("Ending Date/Time"):
          BEGIN
            IF ("Ending Date/Time" <> 0DT) AND ("Ending Date/Time" <= "Starting Date/Time") THEN
              FIELDERROR("Ending Date/Time", STRSUBSTNO(Text001,
                "Ending Date/Time", FIELDCAPTION("Starting Date/Time"), "Starting Date/Time"));
          END;
        FIELDNO("First Possible Start.Date/Time"),
        FIELDNO("Last Possible Ending Date/Time"):
          BEGIN
            IF ("Last Possible Ending Date/Time" <> 0DT) AND ("Last Possible Ending Date/Time" <= "First Possible Start.Date/Time") THEN
              FIELDERROR("Last Possible Ending Date/Time", STRSUBSTNO(Text001,
                "Last Possible Ending Date/Time", FIELDCAPTION("First Possible Start.Date/Time"), "First Possible Start.Date/Time"));
          END;
      END;
    END;

    PROCEDURE CheckPlanDataFSA@1100485032();
    VAR
      ReferencePoint@1100485000 : Record 11020271;
    BEGIN
      IF "Actual Reference Point" = 0 THEN
        EXIT;
      IF CurrFieldNo = 0 THEN
        EXIT;
      CASE CurrFieldNo OF
        FIELDNO("Starting Date/Time"):
          IF "Starting Date/Time" = xRec."Starting Date/Time" THEN
            EXIT;
        FIELDNO("Ending Date/Time"):
          IF "Ending Date/Time" = xRec."Ending Date/Time" THEN
            EXIT;
        FIELDNO("First Possible Start.Date/Time"):
          IF "First Possible Start.Date/Time" = xRec."First Possible Start.Date/Time" THEN
            EXIT;
        FIELDNO("Last Possible Ending Date/Time"):
          IF "Last Possible Ending Date/Time" = xRec."Last Possible Ending Date/Time" THEN
            EXIT;
        FIELDNO("Expected Hours"):
          IF "Expected Hours" = xRec."Expected Hours" THEN
            EXIT;
        FIELDNO("Duration Time"):
          IF "Duration Time" = xRec."Duration Time" THEN
            EXIT;
        FIELDNO("Plan during Clock Time"):
          IF "Plan during Clock Time" = xRec."Plan during Clock Time" THEN
            EXIT;
        FIELDNO("Resource No."):
          IF "Resource No." = xRec."Resource No." THEN
            EXIT;
        FIELDNO("Export to FSA"):
          IF "Export to FSA" = xRec."Export to FSA" THEN
            EXIT;
      END;

      ReferencePoint.CHANGECOMPANY("Source Company");
      IF NOT ReferencePoint.GET("Actual Reference Point") THEN
        EXIT;
      IF (CurrFieldNo = FIELDNO("Export to FSA")) AND "Export to FSA" AND ReferencePoint."Skip Export to FSA" THEN
        ERROR(Text012, "No.");
      IF NOT ReferencePoint."Block Modify Service Order" THEN
        EXIT;

      CASE CurrFieldNo OF
        FIELDNO("Starting Date/Time"):
          FIELDERROR("Starting Date/Time", Text002);
        FIELDNO("Ending Date/Time"):
          FIELDERROR("Ending Date/Time", Text002);
        FIELDNO("First Possible Start.Date/Time"):
          FIELDERROR("First Possible Start.Date/Time", Text002);
        FIELDNO("Last Possible Ending Date/Time"):
          FIELDERROR("Last Possible Ending Date/Time", Text002);
        FIELDNO("Expected Hours"):
          FIELDERROR("Expected Hours", Text002);
        FIELDNO("Duration Time"):
          FIELDERROR("Duration Time", Text002);
        FIELDNO("Plan during Clock Time"):
          FIELDERROR("Plan during Clock Time", Text002);
        FIELDNO("Resource No."):
          FIELDERROR("Resource No.", Text002);
        FIELDNO("Export to FSA"):
          FIELDERROR("Export to FSA", Text002);
      END;
    END;

    PROCEDURE CheckResourceSchedule@1100525011(ErrorMode@1100525001 : Boolean) : Boolean;
    VAR
      Resource@1100525000 : Record 11229278;
    BEGIN
      IF "Resource No." = '' THEN
        EXIT(TRUE);
      Resource.GET("Resource No.");
      IF (("Source Type" = "Source Type"::ServiceOrder) AND
          (Resource.Schedule IN [Resource.Schedule::ServiceOrder, Resource.Schedule::Both])) OR
         (("Source Type" = "Source Type"::Project) AND
          (Resource.Schedule IN [Resource.Schedule::Project, Resource.Schedule::Both]))
      THEN
        EXIT(TRUE);

      IF ErrorMode THEN BEGIN
        FIELDERROR("Resource No.", STRSUBSTNO(Text004,
          "Resource No.", Resource.FIELDCAPTION(Schedule), Resource.Schedule, FIELDCAPTION("Source Type"),  "Source Type"));
      END;
      EXIT(FALSE);
    END;

    PROCEDURE DuplicateWorkorder@1100525009(ICopyResource@1100528600 : Boolean) : Code[20];
    VAR
      WorkOrder@1100525000 : Record 11229279;
    BEGIN
      TESTFIELD("No.");
      WorkOrder := Rec;
      WorkOrder."No." := '';
      WorkOrder."Export to FSA" := FALSE;
      WorkOrder."Publish on Subcontr. Portal" := FALSE;
      WorkOrder."WO Finished (Field Service)" := FALSE;
      WorkOrder."Leading Resource" := FALSE;
      IF NOT ICopyResource THEN
        WorkOrder.VALIDATE("Resource No.", '');
      WorkOrder.INSERT(TRUE);
      EXIT(WorkOrder."No.");
    END;

    PROCEDURE RepeatWorkorder@1100528601();
    VAR
      WorkOrder@1100525000 : Record 11229279;
      RepeatWorkOrderPAGE@1100528600 : Page 11229294;
    BEGIN
      RepeatWorkOrderPAGE.SetOriginalWorkOrder(Rec);
      RepeatWorkOrderPAGE.StdDialogRunModal;
    END;

    PROCEDURE SetOnDeleteSource@1100527011();
    BEGIN
      gOnDeleteSource := TRUE;
    END;

    PROCEDURE SetDateTimeRefPointRegistr@1100527005(DateTimeRefPointRegistration@1100527000 : DateTime);
    BEGIN
      gDateTimeRefPointRegistr := DateTimeRefPointRegistration;
    END;

    PROCEDURE SetUpdateRefPointFromMobile@1100527006(ModifiedByEmployeeNoMobile@1100527000 : Code[20]);
    BEGIN
      gUpdateRefPointFromMobile := TRUE;
      gNewDocRefPoint := FALSE;
      gModifiedByEmployeeNoMobile := ModifiedByEmployeeNoMobile;
    END;

    PROCEDURE GetNewDocRefPoint@1100527009(VAR DocRefPoint@1100527001 : Record 11020296) : Boolean;
    BEGIN
      DocRefPoint := gDocRefPoint;
      EXIT(gNewDocRefPoint);
    END;

    LOCAL PROCEDURE UpdateRefPointWO@1100527000();
    VAR
      RefPoint@1100527000 : Record 11020271;
      WorkOrderRefPoint@1100485000 : Record 11229282;
      xWorkOrder@1100527001 : Record 11229279;
      DateTimeReg@1100527002 : DateTime;
      RefPointNumber@1100409000 : Decimal;
    BEGIN
      IF NOT xWorkOrder.GET("No.") THEN  //Read xRec
        xWorkOrder.INIT;
      IF ("Actual Field Service Status" = xWorkOrder."Actual Field Service Status") AND
         ("Actual Reference Point" = xWorkOrder."Actual Reference Point" )
      THEN //C016653
        EXIT;
      TESTFIELD("Source Company", COMPANYNAME);

      IF ("Actual Field Service Status" <> '') AND ("Actual Field Service Status" <> xWorkOrder."Actual Field Service Status") THEN BEGIN
        RefPoint.RESET;
        RefPoint.SETRANGE(Apply, RefPoint.Apply::ServOrder);
        RefPoint.SETRANGE("Triggered by Field Service", "Actual Field Service Status");
        IF NOT RefPoint.FINDFIRST THEN  //* FS-trigger may occur only once, so only read first
          EXIT;
        RefPointNumber := RefPoint."No."; //C016653
      END ELSE BEGIN
        IF "Actual Reference Point" = xWorkOrder."Actual Reference Point" THEN
          EXIT;
        IF NOT RefPoint.GET("Actual Reference Point") THEN
          EXIT;
        RefPointNumber := RefPoint."No.";  //C016653
      END;

      IF gDateTimeRefPointRegistr <> 0DT THEN
        DateTimeReg := gDateTimeRefPointRegistr
      ELSE
        DateTimeReg := CURRENTDATETIME;
      IF WorkOrderRefPoint.GET("No.", DateTimeReg) THEN BEGIN
        WorkOrderRefPoint.SETRANGE("Work Order No.", "No.");
        REPEAT
          // Can be 2 with in the same debrief message with the same time (sec).
          DateTimeReg := DateTimeReg + 1;  //Add 1 msec
        UNTIL NOT WorkOrderRefPoint.GET("No.", DateTimeReg);
      END;

      MODIFY;

      WorkOrderRefPoint.INIT;
      WorkOrderRefPoint."Work Order No." := "No.";
      WorkOrderRefPoint."Date/Time Registrated" := DateTimeReg;
      WorkOrderRefPoint."Reference Point" := RefPointNumber;//C016653
      WorkOrderRefPoint."Field Service Status" := "Actual Field Service Status";
      IF "Actual Ref. Point Set Manually" THEN BEGIN
        WorkOrderRefPoint.VALIDATE("Created by", USERID);
        WorkOrderRefPoint.Manually := TRUE;
      END;
      WorkOrderRefPoint.INSERT(TRUE);

      FIND('=');

      IF "Actual Ref. Point Set Manually" THEN BEGIN
        "Actual Ref. Point Set Manually" := FALSE;
        MODIFY;
      END;

      WorkOrderRefPoint.RESET;
      WorkOrderRefPoint.SETRANGE("Work Order No.", "No.");
      IF WorkOrderRefPoint.FINDLAST THEN
        IF NOT RefPoint."N/A for Actual Reference Point" THEN
          "Actual Reference Point" := WorkOrderRefPoint."Reference Point";

      IF RefPoint.IsOrderFinished THEN
        "WO Finished (Field Service)" := TRUE;

      UpdateRefPointSO(RefPoint, DateTimeReg);
    END;

    LOCAL PROCEDURE UpdateRefPointSO@1100527004(RefPoint@1100527005 : Record 11020271;DateTimeReg@1100527007 : DateTime);
    VAR
      ServOrder@1100527003 : Record 11012823;
      RelatedWorkOrder@1100527000 : Record 11229279;
      DocRefPoint@1100527006 : Record 11020296;
      ProgPhase@1100527004 : Record 11020251;
      WorkOrderPlanningSetup@1100409000 : Record 11229277;
      WorkOrderInfoManagement@1100528600 : Codeunit 11229278;
      DateReg@1100527009 : Date;
      TimeReg@1100527010 : Time;
      UpdateSO@1100527002 : Boolean;
      ActRefPoint@1100527008 : Integer;
      MaxFieldServiceStatus@1100527001 : Text[30];
      CompareMode@1100525000 : Text[2];
    BEGIN
      IF ("Source Type" <> "Source Type"::ServiceOrder) OR ("Source No." = '') THEN
        EXIT;
      IF NOT ServOrder.GET("Source No.") THEN
        EXIT;

      IF "Actual Field Service Status" <> '' THEN BEGIN
        RelatedWorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
        RelatedWorkOrder.SETRANGE("Source Company", "Source Company");
        RelatedWorkOrder.SETRANGE("Source Type", "Source Type");
        RelatedWorkOrder.SETRANGE("Source No.", "Source No.");
        RelatedWorkOrder.SETFILTER("No.", '<>%1', "No.");
        IF RelatedWorkOrder.FINDSET THEN BEGIN
          REPEAT
            IF CompareFieldServiceStatusr1And2(RelatedWorkOrder."Actual Field Service Status", MaxFieldServiceStatus, '>') THEN
              MaxFieldServiceStatus := RelatedWorkOrder."Actual Field Service Status";
          UNTIL RelatedWorkOrder.NEXT = 0;
        END;
        CompareMode := '>';
        IF "Actual Field Service Status" IN ['20', '30', '40', '90', '100'] THEN
          CompareMode := '>=';
        IF "Actual Field Service Status" <> '70' THEN
          IF NOT CompareFieldServiceStatusr1And2("Actual Field Service Status", MaxFieldServiceStatus, CompareMode) THEN
            EXIT;

        CASE "Actual Field Service Status" OF
          '20':  // Received in Mobile
            BEGIN
              RelatedWorkOrder.SETRANGE("Active in FSA", TRUE);
              RelatedWorkOrder.SETFILTER("Actual Field Service Status", '<>%1&<>%2', '20', '25');
              IF RelatedWorkOrder.ISEMPTY THEN
                UpdateSO := TRUE;

              RelatedWorkOrder.SETRANGE("Active in FSA");
              RelatedWorkOrder.SETRANGE("Resource Type", RelatedWorkOrder."Resource Type"::Subcontractor);
              IF RelatedWorkOrder.ISEMPTY THEN
                UpdateSO := TRUE;
            END;
          '25':  // Resended and received in Mobile
            EXIT; // No update in SO
          '30':  // Declined
            BEGIN
              RelatedWorkOrder.SETFILTER("Actual Field Service Status", '<>%1', '30');
              IF RelatedWorkOrder.ISEMPTY THEN
                UpdateSO := TRUE;
            END;
          '40':  // Accepted
            UpdateSO := TRUE;
          '45':  // Decentral created
            UpdateSO := TRUE;
          '50':  // Start Travel
            UpdateSO := TRUE;
          '60':  // Start Work (In Process)
            UpdateSO := TRUE;
          '65':  // Ready, follow up needed
            UpdateSO := TRUE;
          '70':  // Ready (Technical Finished)
            BEGIN
              RelatedWorkOrder.SETRANGE("WO Finished (Field Service)", FALSE);
              RelatedWorkOrder.SETFILTER("Actual Reference Point", '<>%1', RefPoint."No.");
              IF RelatedWorkOrder.ISEMPTY THEN BEGIN
                WorkOrderPlanningSetup.GET;
                RelatedWorkOrder.SETRANGE("WO Finished (Field Service)");
                //RelatedWorkOrder.SETFILTER("Actual Field Service Status", '<>%1&<>%2', '70', '100');
                RelatedWorkOrder.SETFILTER("Actual Reference Point", '<>%1&<>%2&<>%3',
                  WorkOrderPlanningSetup."Ref. Point Next Work Order", RefPoint."No.", WorkOrderInfoManagement.GetRefPointNoOfFieldServiceFinished);
                IF RelatedWorkOrder.ISEMPTY THEN
                  UpdateSO := TRUE;
              END;
            END;
          '90':  // On Hold
            BEGIN
              RelatedWorkOrder.SETFILTER("Actual Field Service Status", '<>%1', '90');
              IF RelatedWorkOrder.ISEMPTY THEN
                UpdateSO := TRUE;
            END;
          '100':  // Completed (Ready)
            BEGIN
              RelatedWorkOrder.SETFILTER("Actual Field Service Status", '<>%1&<>%2', '100', '500');
              IF RelatedWorkOrder.ISEMPTY THEN
                UpdateSO := TRUE;
            END;
          '500':  // Already Completed (error resended while already completed)
            EXIT; // No update in SO
          ELSE
            EXIT;
        END;
      END ELSE BEGIN
        CASE RefPoint."Triggered by Status ServOrder" OF
          RefPoint."Triggered by Status ServOrder"::"In Process":
            UpdateSO := TRUE;
          RefPoint."Triggered by Status ServOrder"::"Technical Finished":
            BEGIN
              RelatedWorkOrder.SETFILTER("Actual Reference Point", GetReferencePointFilterBySOStatus(RefPoint."Triggered by Status ServOrder"::"Technical Finished" -1, '<>'));
              IF RelatedWorkOrder.ISEMPTY THEN
                UpdateSO := TRUE;
            END;
        END;
      END;
      IF NOT UpdateSO THEN
        EXIT;

      DocRefPoint.INIT;
      DocRefPoint.Type := DocRefPoint.Type::ServOrder;
      DocRefPoint."Document No." := ServOrder."No.";
      DocRefPoint."Date-Time (registrated)" := DateTimeReg;
      DocRefPoint."Reference Point" := RefPoint."No.";
      DocRefPoint.INSERT(TRUE);
      IF gUpdateRefPointFromMobile THEN BEGIN
        gNewDocRefPoint := TRUE;
        gDocRefPoint := DocRefPoint;
        IF gModifiedByEmployeeNoMobile <> '' THEN BEGIN
          DocRefPoint."Modified by Employee" := gModifiedByEmployeeNoMobile;
          DocRefPoint.MODIFY(FALSE);
        END;
      END;
      ActRefPoint := DocRefPoint.GetNewActRefPoint;
      ServOrder.GET("Source No.");
      IF (ActRefPoint > 0) AND (ActRefPoint <> ServOrder."Actual Reference Point (Gantt)") THEN BEGIN
        ServOrder."Actual Reference Point (Gantt)" := ActRefPoint;
        ServOrder.MODIFY(FALSE);
      END;
      IF (RefPoint."Triggered by Status ServOrder" > 0) AND (ServOrder.Status <= ServOrder.Status::"Technical Finished") THEN BEGIN
        ServOrder.VALIDATE(Status, RefPoint."Triggered by Status ServOrder" - 1);
        ServOrder.SetSkipUpdateDocRefPoint(TRUE);
        ServOrder.MODIFY(TRUE);
        DateReg := VARIANT2DATE(DateTimeReg);
        TimeReg := VARIANT2TIME(DateTimeReg);
        ProgPhase.CheckProgressScheme(
          ProgPhase.Type::ServOrder, ServOrder."Progress Scheme",
          ServOrder."No.", ServOrder.Status, DateReg, TimeReg);
        ServOrder.SetSkipUpdateDocRefPoint(FALSE);
      END;
      ServOrder.UpdateServiceOrderFinished;
      ServOrder.UpdateNextDeadline;
      ServOrder.MODIFY(FALSE);
    END;

    PROCEDURE CompareFieldServiceStatusr1And2@1100527007(FSStatus1@1100527000 : Text[30];FSStatus2@1100527001 : Text[30];CompareMode@1100525000 : Text[2]) : Boolean;
    BEGIN
      IF STRLEN(FSStatus1) <> STRLEN(FSStatus2) THEN BEGIN
        IF STRLEN(FSStatus1) < STRLEN(FSStatus2) THEN
          FSStatus1 := COPYSTR('0000000000',1, STRLEN(FSStatus2) - STRLEN(FSStatus1)) + FSStatus1
        ELSE
          FSStatus2 := COPYSTR('0000000000',1, STRLEN(FSStatus1) - STRLEN(FSStatus2)) + FSStatus2;
      END;
      CASE CompareMode OF
        '>':
          EXIT(FSStatus1 > FSStatus2);
        '<':
          EXIT(FSStatus1 < FSStatus2);
        '>=':
          EXIT(FSStatus1 >= FSStatus2);
        '<=':
           EXIT(FSStatus1 <= FSStatus2);
        '=':
          EXIT(FSStatus1 = FSStatus2);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE UpdateDeletedWorkOrderCache@1100529002(xWorkOrder@1100528700 : Record 11229279;UpdateMode@1100529001 : Code[1]);
    VAR
      DeletedWorkOrderCache@1100529002 : Record 11229281;
    BEGIN
      IF xWorkOrder."Resource No." = '' THEN
        EXIT;
      xWorkOrder.CALCFIELDS("Active in FSA");
      IF (xWorkOrder."Resource Type" <> "Resource Type"::Employee) OR (NOT xWorkOrder."Active in FSA") THEN
        EXIT;

      IF (UpdateMode = 'D')  OR
         ((UpdateMode = 'M') AND ("Resource No." <> xWorkOrder."Resource No."))
      THEN BEGIN
        DeletedWorkOrderCache."Resource No." := xWorkOrder."Resource No.";
        DeletedWorkOrderCache."Work Order No." := "No.";
        IF DeletedWorkOrderCache.INSERT THEN;
        // When the order is deleted, or the resource (employee) is removed from the order,
        // then the order may still exist in Mobile for the resource (empl). The DeletedWorkOrderCache
        // is used to delete these orders.

      END;

      IF (UpdateMode = 'M') AND ("Resource No." <> '') THEN BEGIN
        CALCFIELDS("Active in FSA");
        IF ("Resource Type" = "Resource Type"::Employee) AND ("Active in FSA") AND ("Export to FSA") THEN BEGIN
          //delete cache when current resoruce was deleted form this order before, but cache still exists when exporting to FSA again to same resource (tablet)
          IF DeletedWorkOrderCache.GET("Resource No.","No.") THEN BEGIN
            DeletedWorkOrderCache.DELETE(TRUE);
          END;
        END;
      END;
    END;

    PROCEDURE UpdateServiceOrder@1100527001(UpdateMode@1100527002 : Code[1]);
    VAR
      WorkOrder@1100527000 : Record 11229279;
      ServOrder@1100527001 : Record 11012823;
      ResourceWOP@1100409001 : Record 11229278;
      LimitBudgetManagement@1100528601 : Codeunit 11012878;
      StartDateTime@1100527003 : DateTime;
      EndDateTime@1100527004 : DateTime;
      NewStartDate@1100527005 : Date;
      NewEndDate@1100527006 : Date;
      NewStartTime@1100527007 : Time;
      NewEndTime@1100527008 : Time;
      CommonResourceNo@1100409000 : Code[20];
      LeadingResourceNo@1100528600 : Code[20];
      DifferentResourceNo@1100409002 : Boolean;
      CUFunc@1000000000 : Codeunit 11128007;
      LimitBudgetExceeded@1100528606 : Boolean;
      LimitBudgetHoursExceedance@1100528602 : Decimal;
      LimitBudgetLaborExceedance@1100528603 : Decimal;
      LimitBudgetMaterialExceedance@1100528604 : Decimal;
      LimitBudgetTotalExceedance@1100528605 : Decimal;
    BEGIN
      IF ("No." = '') OR ("Source Type" <> "Source Type"::ServiceOrder) OR ("Source No." = '') OR ("Source Company" = '') THEN
        EXIT;
      TESTFIELD("Source Company", COMPANYNAME);

      StartDateTime := 0DT;
      EndDateTime := 0DT;
      IF (UpdateMode <> 'D') THEN BEGIN
        StartDateTime := "Starting Date/Time";
        EndDateTime := "Ending Date/Time";
        CommonResourceNo := "Resource No.";
        IF "Leading Resource" THEN
          LeadingResourceNo := "Resource No.";
      END;

      //Read related work orders
      WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
      WorkOrder.SETRANGE("Source Company", "Source Company");
      WorkOrder.SETRANGE("Source Type", "Source Type");
      WorkOrder.SETRANGE("Source No.", "Source No.");
      WorkOrder.SETFILTER("No.", '<>%1', "No.");
      IF WorkOrder.FINDSET THEN BEGIN
        REPEAT
          IF (WorkOrder."Starting Date/Time" <> 0DT) AND ((StartDateTime = 0DT) OR (WorkOrder."Starting Date/Time" < StartDateTime)) THEN
            StartDateTime := WorkOrder."Starting Date/Time";
          IF (WorkOrder."Ending Date/Time" <> 0DT) AND (WorkOrder."Ending Date/Time" > EndDateTime) THEN
            EndDateTime := WorkOrder."Ending Date/Time";
          IF CommonResourceNo = '' THEN
            CommonResourceNo := WorkOrder."Resource No.";
          IF (WorkOrder."Resource No." <> '') AND (CommonResourceNo <> WorkOrder."Resource No.") THEN
            DifferentResourceNo := TRUE;
          IF WorkOrder."Leading Resource" THEN
            LeadingResourceNo := WorkOrder."Resource No.";
        UNTIL WorkOrder.NEXT = 0;
      END;
      IF DifferentResourceNo THEN
        CommonResourceNo := LeadingResourceNo;

      NewStartDate := VARIANT2DATE(StartDateTime);
      NewStartTime := VARIANT2TIME(StartDateTime);
      NewEndDate := VARIANT2DATE(EndDateTime);
      NewEndTime := VARIANT2TIME(EndDateTime);

      IF NewStartTime = 000000T THEN
        CLEAR(NewStartTime);

      ServOrder.CHANGECOMPANY("Source Company");
      IF ServOrder.GET("Source No.") THEN BEGIN
        IF UpdateMode <> 'D' THEN
          IF ServOrder.Status >= ServOrder.Status::"Administrative Finished" THEN
            ERROR(Text018, ServOrder.TABLECAPTION, ServOrder."No.", "Source Company", ServOrder.Status);
        IF (ServOrder."Starting Date" <> NewStartDate) OR (ServOrder."Starting Time" <> NewStartTime) OR
           (ServOrder."Ending Date" <> NewEndDate) OR (ServOrder."Ending Time" <> NewEndTime) OR DifferentResourceNo OR
           (CommonResourceNo <> '')
        THEN BEGIN
          ServOrder."Starting Date" := NewStartDate;
          ServOrder."Starting Time" := NewStartTime;
          ServOrder."Ending Date" := NewEndDate;
          ServOrder."Ending Time" := NewEndTime;
          IF CommonResourceNo <> '' THEN BEGIN
            ResourceWOP.GET(CommonResourceNo);
            CASE ResourceWOP.Type OF
              ResourceWOP.Type::Employee:
                ServOrder."Employee No." := CommonResourceNo;
              ResourceWOP.Type::Subcontractor:
                ServOrder.Subcontractor := CommonResourceNo;
            END;
          END ELSE BEGIN
            ServOrder."Employee No." := '';
            ServOrder.Subcontractor := '';
          END;
          //<< ITERO.SB 160105
          IF ServOrder."Employee No." <> '' THEN BEGIN
            CUFunc.SOEmployee(ServOrder,ServOrder."Employee No.");
          END;
          //>> ITERO.SB 160105

          IF UpdateMode <> 'D' THEN
            ServOrder.MODIFY
          ELSE BEGIN
            ServOrder.SetSkipStatusCheck(TRUE);
            ServOrder.MODIFY(TRUE);
          END;
        END;

        CASE UpdateMode OF
          'I': LimitBudgetHoursExceedance := "Expected Hours";
          'D': LimitBudgetHoursExceedance := -"Expected Hours";
          'M': LimitBudgetHoursExceedance := "Expected Hours" - xRec."Expected Hours";
        END;
        LimitBudgetExceeded := LimitBudgetManagement.IsServiceOrderLimitBudgetExceeded(
          ServOrder, FALSE, LimitBudgetHoursExceedance, LimitBudgetLaborExceedance, LimitBudgetMaterialExceedance, LimitBudgetTotalExceedance);
        IF LimitBudgetExceeded <> ServOrder."Limit Budget Exceedance" THEN BEGIN
          ServOrder.VALIDATE("Limit Budget Exceedance", LimitBudgetExceeded);
          ServOrder.MODIFY(UpdateMode = 'D');
        END;
      END;
    END;

    PROCEDURE GetURLForCardOfSource@1100525010() : Text;
    VAR
      ServiceOrder@1100525001 : Record 11012823;
      Job@1100525002 : Record 11072003;
      PageNo@1100525000 : Integer;
    BEGIN
      CASE "Source Type" OF
        "Source Type"::ServiceOrder:
        BEGIN
          ServiceOrder.CHANGECOMPANY("Source Company");
          IF ServiceOrder.GET("Source No.") THEN
            PageNo := ServiceOrder.GetServiceOrderCard();
          EXIT(STRSUBSTNO('%1&mode=edit',GETURL(CLIENTTYPE::Windows, "Source Company",OBJECTTYPE::Page, PageNo, ServiceOrder)));
        END;
        "Source Type"::Project:
        BEGIN
          Job.CHANGECOMPANY("Source Company");
          IF Job.GET("Source No.") THEN
            PageNo := PAGE::"Job Card";
          EXIT(STRSUBSTNO('%1&mode=edit',GETURL(CLIENTTYPE::Windows, "Source Company",OBJECTTYPE::Page, PageNo, Job)));
        END;
        ELSE
          ERROR('GetURLForServiceOrder does not support Source Type %1', "Source Type");
      END;
    END;

    PROCEDURE UpdateAdviceOrder@1100528617();
    VAR
      ServiceSetup@1100528600 : Record 11012800;
      AdviceOrderLine@1100528601 : Record 11012055;
      Resource@1100528602 : Record 11229278;
      ServiceContract@1100528605 : Record 11012812;
      ServiceOrder@1100528606 : Record 11012823;
      OldSubcontractor@1100528603 : Code[20];
      NewSubcontractor@1100528604 : Code[20];
      CreateAdvPurchOrderSubc@1100528607 : Boolean;
    BEGIN
      IF "Source Type" <> "Source Type"::ServiceOrder THEN
        EXIT;
      IF NOT Resource.GET("Resource No.") THEN
        EXIT;
      IF Resource.Type <> Resource.Type::Subcontractor THEN
        EXIT;
      IF Resource.Company <> COMPANYNAME THEN
        EXIT;
      IF Resource."Source No." = '' THEN
        EXIT;
      ServiceSetup.GET;
      IF ServiceOrder.GET("Source No.") THEN BEGIN
        CASE ServiceOrder."Source Type" OF
          ServiceOrder."Source Type"::Call:
            CreateAdvPurchOrderSubc := ServiceSetup."Create Adv./Purch. Subc. Call";
          ServiceOrder."Source Type"::Contract:
            CreateAdvPurchOrderSubc := ServiceSetup."Create Adv./Purch. Subc. Con.";
          ServiceOrder."Source Type"::Direct:
            CreateAdvPurchOrderSubc := ServiceSetup."Create Adv./Purch. Subc. Dir.";
        END;
        IF ServiceContract.GET(ServiceOrder."Service Contract No.") THEN
          CASE ServiceOrder."Source Type" OF
            ServiceOrder."Source Type"::Call:
              CASE ServiceContract."Create Adv./Purch. Subc. Call" OF
                ServiceContract."Create Adv./Purch. Subc. Call"::Yes:
                  CreateAdvPurchOrderSubc := TRUE;
                ServiceContract."Create Adv./Purch. Subc. Call"::No:
                  CreateAdvPurchOrderSubc := FALSE;
              END;
            ServiceOrder."Source Type"::Contract:
              CASE ServiceContract."Create Adv./Purch. Subc. Con." OF
                ServiceContract."Create Adv./Purch. Subc. Con."::Yes:
                  CreateAdvPurchOrderSubc := TRUE;
                ServiceContract."Create Adv./Purch. Subc. Con."::No:
                  CreateAdvPurchOrderSubc := FALSE;
              END;
            ServiceOrder."Source Type"::Direct:
              CASE ServiceContract."Create Adv./Purch. Subc. Dir." OF
                ServiceContract."Create Adv./Purch. Subc. Dir."::Yes:
                  CreateAdvPurchOrderSubc := TRUE;
                ServiceContract."Create Adv./Purch. Subc. Dir."::No:
                  CreateAdvPurchOrderSubc := FALSE;
              END;
          END;
      END;
      IF NOT CreateAdvPurchOrderSubc THEN
        EXIT;

      ServiceSetup.TESTFIELD("Cost Object Subcontracting");
      NewSubcontractor := Resource."Source No.";

      AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::ServOrder);
      AdviceOrderLine.SETRANGE("Service Order No.", "Source No.");
      AdviceOrderLine.SETRANGE("Work Order No.", "No.");
      AdviceOrderLine.SETRANGE(Vendor, OldSubcontractor);
      AdviceOrderLine.SETRANGE("Cost Object", ServiceSetup."Cost Object Subcontracting");
      IF NOT AdviceOrderLine.ISEMPTY THEN
        IF Resource.GET(xRec."Resource No.") THEN
          IF Resource.Type = Resource.Type::Subcontractor THEN
            OldSubcontractor := Resource."Source No.";

      IF CurrFieldNo = FIELDNO("Resource No.") THEN
        IF (OldSubcontractor <> '') AND (OldSubcontractor <> NewSubcontractor) THEN BEGIN
          AdviceOrderLine.SETRANGE(Processed, FALSE);
          AdviceOrderLine.MODIFYALL(Vendor, NewSubcontractor, TRUE);
        END;

      IF OldSubcontractor = '' THEN BEGIN
        AdviceOrderLine.RESET;
        AdviceOrderLine.INIT;
        AdviceOrderLine.VALIDATE("Record Type", AdviceOrderLine."Record Type"::ServOrder);
        AdviceOrderLine.VALIDATE("Service Order No.", "Source No.");
        AdviceOrderLine.VALIDATE("Line No.", 0);
        AdviceOrderLine.INSERT(TRUE);

        AdviceOrderLine.VALIDATE("Cost Type", AdviceOrderLine."Cost Type"::Subcontracting);
        AdviceOrderLine.VALIDATE("Cost Object", ServiceSetup."Cost Object Subcontracting");
        AdviceOrderLine.VALIDATE(Vendor, NewSubcontractor);
        AdviceOrderLine.VALIDATE("Quantity (Advice)", 1);
        AdviceOrderLine.VALIDATE(Description, Description);
        AdviceOrderLine."Work Order No." := "No.";
        AdviceOrderLine.EvaluateStartDate(AdviceOrderLine."Receipt Date");
        AdviceOrderLine.MODIFY(TRUE);
      END;
    END;

    PROCEDURE TestIfDeletionIsAllowed@1100528600();
    VAR
      MessageText@1100528600 : Text;
    BEGIN
      IF NOT CanBeRemoved(MessageText) THEN
        ERROR(MessageText);
    END;

    PROCEDURE IsModificationAllowed@1100528609() : Boolean;
    VAR
      ReferencePoint@1100528600 : Record 11020271;
    BEGIN
      ReferencePoint.CHANGECOMPANY("Source Company");
      IF NOT ReferencePoint.GET("Actual Reference Point") THEN
        ReferencePoint.INIT;
      EXIT(NOT ReferencePoint."Block Modify Service Order");
    END;

    PROCEDURE TestIfModificationIsAllowed@1100528608();
    BEGIN
      IF NOT IsModificationAllowed THEN
        ERROR(Text015, "No.");
    END;

    LOCAL PROCEDURE InsertWorkOrderRefPoint@1100409005();
    VAR
      WorkOrderRefPoint@1100409001 : Record 11229282;
      DateTimeReg@1100409000 : DateTime;
    BEGIN
      IF gDateTimeRefPointRegistr <> 0DT THEN
        DateTimeReg := gDateTimeRefPointRegistr
      ELSE
        DateTimeReg := CURRENTDATETIME;

      WorkOrderRefPoint.INIT;
      WorkOrderRefPoint."Work Order No." := "No.";
      WorkOrderRefPoint."Date/Time Registrated" := DateTimeReg;
      WorkOrderRefPoint."Reference Point" := "Actual Reference Point";
      WorkOrderRefPoint."Field Service Status" := "Actual Field Service Status";
      WorkOrderRefPoint.INSERT(TRUE);
    END;

    PROCEDURE TestExpectedDateTimes@1100528602();
    BEGIN
      IF ("First Possible Start.Date/Time" = 0DT) AND ("Last Possible Ending Date/Time" = 0DT) THEN
        EXIT;
      IF ("Expected Starting Date" = 0D) AND ("Expected Ending Date" = 0D) THEN
        EXIT;

      IF ("Expected Starting Date" <> 0D) AND
         (("Expected Starting Date" < DT2DATE("First Possible Start.Date/Time")) OR
          ("Expected Starting Date" > DT2DATE("Last Possible Ending Date/Time")))
      THEN
        ERROR(Text007, FIELDCAPTION("Expected Starting Date"),
          FIELDCAPTION("First Possible Start.Date/Time"), FIELDCAPTION("Last Possible Ending Date/Time"));

      IF ("Expected Ending Date" <> 0D) AND
         (("Expected Ending Date" < DT2DATE("First Possible Start.Date/Time")) OR
          ("Expected Ending Date" > DT2DATE("Last Possible Ending Date/Time")))
      THEN
        ERROR(Text007, FIELDCAPTION("Expected Ending Date"),
          FIELDCAPTION("First Possible Start.Date/Time"), FIELDCAPTION("Last Possible Ending Date/Time"));

      IF ("Expected Starting Date" <> 0D) AND
         ("Expected Starting Time" <> 0T) AND
         (DT2TIME("First Possible Start.Date/Time") <> 0T) AND
         ("Expected Starting Date" = DT2DATE("First Possible Start.Date/Time")) AND
         ("Expected Starting Time" < DT2TIME("First Possible Start.Date/Time"))
      THEN
        ERROR(Text008, FIELDCAPTION("Expected Starting Time"), FIELDCAPTION("First Possible Start.Date/Time"));

      IF ("Expected Ending Date" <> 0D) AND
         ("Expected Ending Time" <> 0T) AND
         (DT2TIME("Last Possible Ending Date/Time") <> 0T) AND
         ("Expected Ending Date" = DT2DATE("Last Possible Ending Date/Time")) AND
         ("Expected Ending Time" > DT2TIME("Last Possible Ending Date/Time"))
      THEN
        ERROR(Text009, FIELDCAPTION("Expected Ending Time"), FIELDCAPTION("Last Possible Ending Date/Time"));
    END;

    LOCAL PROCEDURE GetReferencePointFilterBySOStatus@1100409001(IServiceOrderStatus@1100409000 : 'Open,,In Process,Technical Finished,Administrative Finished,Finished,Cancelled';ICompareSigns@1100409001 : Text) ReferencePointFilter : Text;
    VAR
      ReferencePoint@1100409002 : Record 11020271;
    BEGIN
      ReferencePoint.SETFILTER(Apply, '%1|%2', ReferencePoint.Apply::Common, ReferencePoint.Apply::ServOrder);
      ReferencePoint.SETRANGE("Triggered by Status ServOrder", IServiceOrderStatus +1);
      IF ReferencePoint.FINDSET THEN
        REPEAT
          IF ReferencePointFilter <> '' THEN
            ReferencePointFilter := ReferencePointFilter + ICompareSigns;
          ReferencePointFilter := ReferencePointFilter + FORMAT(ReferencePoint."No.");
        UNTIL ReferencePoint.NEXT = 0;
    END;

    PROCEDURE GetSignatureMandatory@1100409007() : Boolean;
    VAR
      ServiceOrder@1100528700 : Record 11012823;
      SignatureSetupMob@1100409000 : Record 11229866;
      JobsSetup@1100525000 : Record 315;
    BEGIN
      JobsSetup.GET;
      IF NOT JobsSetup."4PS-Mobile Active" THEN
        EXIT(FALSE);

      IF "Source Type" <> "Source Type"::ServiceOrder THEN
        EXIT(FALSE);

      IF "Source No." = '' THEN
        EXIT(FALSE);

      ServiceOrder.CHANGECOMPANY("Source Company");
      ServiceOrder.GET("Source No.");

      SignatureSetupMob.CHANGECOMPANY("Source Company");
      SignatureSetupMob.SETRANGE("Source Type", ServiceOrder."Source Type");
      SignatureSetupMob.SETRANGE(Decentral, ServiceOrder."Decentral Created");
      IF SignatureSetupMob.FINDFIRST THEN
        EXIT(SignatureSetupMob."Signature Mandatory");
      EXIT(TRUE); // default
    END;

    PROCEDURE GetPublishOnSubcontrPort@1100528603();
    VAR
      SubcontPortSetup@1100528600 : Record 11126402;
      ReferencePoint@1100528601 : Record 11020271;
    BEGIN
      SubcontPortSetup.CHANGECOMPANY("Source Company");
      IF NOT SubcontPortSetup.READPERMISSION THEN
        EXIT;
      SubcontPortSetup.GET('1');
      IF SubcontPortSetup."Ref. Point Sending WO" <> 0 THEN BEGIN
        ReferencePoint.CHANGECOMPANY("Source Company");
        IF NOT ReferencePoint.GET(SubcontPortSetup."Ref. Point Sending WO") THEN
          ReferencePoint.INIT;
        "Actual Reference Point" := SubcontPortSetup."Ref. Point Sending WO";
        "Actual Field Service Status" := ReferencePoint."Triggered by Field Service";
      END;
    END;

    PROCEDURE CollPublishOnSubcontrPortal@1100525044();
    VAR
      WorkOrder@1100525000 : Record 11229279;
    BEGIN
      IF ("Resource Type" = "Resource Type"::Subcontractor) AND ("Resource No." <> '') THEN
        WorkOrder.SETRANGE("Resource No.", "Resource No.");
      REPORT.RUNMODAL(REPORT::"Publish WO on Subcontr. Portal",TRUE, FALSE, WorkOrder);
    END;

    LOCAL PROCEDURE CreateSubcontrPurchaseOrder@1100528621();
    VAR
      Vendor@1100528604 : Record 23;
      AdviceOrderLine@1100528602 : Record 11012055;
      TmpAdviceOrderLine@1100528605 : TEMPORARY Record 11012055;
      PurchaseLine@1100528603 : Record 39;
      PurchaseHeader@1100528601 : Record 38;
      ResourceWOP@1100528607 : Record 11229278;
      JobsSetup@1100409000 : Record 315;
      VendorNo@1100528606 : Code[20];
    BEGIN
      IF "Resource No." = '' THEN
        EXIT;
      IF "Source Type" <> "Source Type"::ServiceOrder THEN
        EXIT;
      IF "Source Company" <> COMPANYNAME THEN
        EXIT;
      IF gCollectivePublishSubcPortalRun AND gSkipCreatPurchOrder THEN
        EXIT;
      IF NOT ResourceWOP.GET("Resource No.") THEN
        EXIT;
      IF ResourceWOP.Company <> COMPANYNAME THEN
        EXIT;
      IF NOT Vendor.GET(ResourceWOP."Source No.") THEN
        EXIT;

      AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::ServOrder);
      AdviceOrderLine.SETRANGE(Vendor, Vendor."No.");
      AdviceOrderLine.SETRANGE("Project No.", '');
      AdviceOrderLine.SETRANGE("Service Order No.", "Source No.");
      AdviceOrderLine.SETRANGE(Transaction, AdviceOrderLine.Transaction::Purchase);
      AdviceOrderLine.SETFILTER("Quantity (Advice)", '<>0');
      JobsSetup.GET;
      IF JobsSetup."Release Advice Order Mandatory" THEN
        AdviceOrderLine.SETRANGE("Process Status", AdviceOrderLine."Process Status"::Released)
      ELSE
        AdviceOrderLine.SETFILTER("Process Status", '<%1', AdviceOrderLine."Process Status"::Cancelled);
      IF AdviceOrderLine.FINDSET THEN BEGIN
        MODIFY(TRUE); //C026742.n
        IF Vendor."Direct Post Order ICM" THEN
          REPEAT
            TmpAdviceOrderLine := AdviceOrderLine;
            TmpAdviceOrderLine.INSERT;
          UNTIL AdviceOrderLine.NEXT = 0;
        COMMIT; // Next process has a runmodal
        IF gCollectivePublishSubcPortalRun THEN
          AdviceOrderManagement.SetCollectiveRun();  //AdviceOrderManagement must be a global!
        AdviceOrderManagement.ProcessPurchase(AdviceOrderLine, FALSE, FALSE);

        IF TmpAdviceOrderLine.FINDSET THEN BEGIN
          REPEAT
            AdviceOrderLine.GET(
              TmpAdviceOrderLine."Record Type", TmpAdviceOrderLine."Project No.",
              TmpAdviceOrderLine."Service Order No.", TmpAdviceOrderLine."Line No.");

            IF AdviceOrderLine."Purchase Route Reference" <> '' THEN BEGIN
              PurchaseLine.SETCURRENTKEY("Document Type", "Purchase Route Reference");
              PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
              PurchaseLine.SETRANGE("Purchase Route Reference", AdviceOrderLine."Purchase Route Reference");
              IF PurchaseLine.FINDSET THEN
                REPEAT
                  IF PurchaseHeader.GET(PurchaseLine."Document Type", PurchaseLine."Document No.") THEN
                    PurchaseHeader.MARK(TRUE);
                UNTIL PurchaseLine.NEXT = 0;
            END;
          UNTIL TmpAdviceOrderLine.NEXT = 0;
          PurchaseHeader.MARKEDONLY(TRUE);
          PurchaseHeader.DirectPosting;
        END;
      END;
    END;

    PROCEDURE CanPublishOnSubcontrPortal@1100528604() : Boolean;
    VAR
      SubcontPortSetup@1100528600 : Record 11126402;
      ResourceWOP@1100528601 : Record 11229278;
    BEGIN
      IF NOT SubcontPortSetup.READPERMISSION THEN
        EXIT(FALSE);
      IF NOT SubcontPortSetup.GET('1') THEN
        EXIT(FALSE);
      IF NOT SubcontPortSetup."Subcontracting Portal Active" THEN
        EXIT(FALSE);
      IF "Resource No." = '' THEN
        EXIT(FALSE);
      IF "Resource Type" <> "Resource Type"::Subcontractor THEN
        EXIT(FALSE);
      IF NOT ResourceWOP.GET("Resource No.") THEN
        EXIT(FALSE);
      IF ResourceWOP.Company <> COMPANYNAME THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE InsertSubcontrPortLocation@1100528606();
    VAR
      SubcontrPortLocation@1100528601 : Record 11126403;
      ServiceOrder@1100528600 : Record 11012823;
      ResourceWOP@1100528602 : Record 11229278;
    BEGIN
      IF NOT AutomaticUpdateApplies THEN
        EXIT;
      IF "Source Type" <> "Source Type"::ServiceOrder THEN
        EXIT;
      IF "Source No." = '' THEN
        EXIT;
      IF "Source Company" <> COMPANYNAME THEN
        EXIT;
      IF NOT ResourceWOP.GET("Resource No.") THEN
        EXIT;
      IF ResourceWOP.Company <> COMPANYNAME THEN
        EXIT;
      ServiceOrder.GET("Source No.");
      IF SubcontrPortLocation.GET(ResourceWOP.GetVendorNo, '', ServiceOrder."Service Location No.") THEN
        EXIT;
      IF NOT ResourceWOP.GET("Resource No.") THEN
        ResourceWOP.INIT;
      SubcontrPortLocation."Vendor No." := ResourceWOP.GetVendorNo;
      SubcontrPortLocation.Login := '';
      SubcontrPortLocation."Service Location No." := ServiceOrder."Service Location No.";
      SubcontrPortLocation.INSERT(TRUE);
    END;

    LOCAL PROCEDURE DeleteSubcontrPortLocation@1100528605() : Boolean;
    VAR
      SubcontrPortLocation@1100528601 : Record 11126403;
      ServiceOrder@1100409000 : Record 11012823;
      ResourceWOP@1100528600 : Record 11229278;
      WorkOrder@1100528602 : Record 11229279;
      LocationFoundElseWhere@1100528603 : Boolean;
      ServiceLocationNo@1100528604 : Code[20];
    BEGIN
      IF NOT AutomaticUpdateApplies THEN
        EXIT;
      IF "Resource No." = '' THEN
        EXIT;
      IF "Source Company" <> COMPANYNAME THEN
        EXIT;
      IF NOT ResourceWOP.GET("Resource No.") THEN
        EXIT;
      IF ResourceWOP.Company <> COMPANYNAME THEN
        EXIT;
      ServiceOrder.GET("Source No.");
      ServiceLocationNo := ServiceOrder."Service Location No.";
      IF ServiceLocationNo = '' THEN
        EXIT;
      IF NOT SubcontrPortLocation.GET(ResourceWOP.GetVendorNo, '', ServiceLocationNo) THEN
        EXIT;
      WorkOrder.SETCURRENTKEY("Resource No.");
      WorkOrder.SETRANGE("Resource No.", "Resource No.");
      WorkOrder.SETRANGE("Publish on Subcontr. Portal", TRUE);
      WorkOrder.SETFILTER("No.", '<>%1', "No.");
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      IF WorkOrder.FINDSET THEN
        REPEAT
          IF NOT ServiceOrder.GET(WorkOrder."Source No.") THEN
            ServiceOrder.INIT;
          IF ServiceOrder."Service Location No." = ServiceLocationNo THEN
            LocationFoundElseWhere := TRUE;
        UNTIL (WorkOrder.NEXT = 0) OR LocationFoundElseWhere;

      IF NOT LocationFoundElseWhere THEN BEGIN
        SubcontrPortLocation.SETRECFILTER;
        SubcontrPortLocation.SETRANGE(Login);
        SubcontrPortLocation.DELETE(FALSE);
      END;
    END;

    LOCAL PROCEDURE AutomaticUpdateApplies@1100528610() : Boolean;
    VAR
      SubcontPortSetup@1100528600 : Record 11126402;
      ServiceOrder@1100528601 : Record 11012823;
    BEGIN
      SubcontPortSetup.GET('1');
      IF NOT SubcontPortSetup."Automatically Update Locations" THEN
        EXIT(FALSE);
      IF "Source Type" <> "Source Type"::ServiceOrder THEN
        EXIT;
      IF "Source Company" <> COMPANYNAME THEN
        EXIT;
      IF NOT ServiceOrder.GET("Source No.") THEN
        EXIT(FALSE);
      IF ServiceOrder."Service Location No." = '' THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE CreateNextWorkOrder@1100409000() : Code[20];
    VAR
      WorkOrderPlanningSetup@1100409000 : Record 11229277;
      ReferencePoint@1100409002 : Record 11020271;
      ServiceOrder@1100528600 : Record 11012823;
      NextWorkOrderNo@1100409001 : Code[20];
    BEGIN
      ReferencePoint.SETRANGE("Triggered by Field Service", '65');
      ReferencePoint.SETRANGE(Apply, ReferencePoint.Apply::ServOrder);
      ReferencePoint.FINDFIRST;

      TESTFIELD("Actual Reference Point", ReferencePoint."No.");
      TESTFIELD("WO Finished (Field Service)", TRUE);
      WorkOrderPlanningSetup.GET;
      WorkOrderPlanningSetup.TESTFIELD("Ref. Point Next Work Order");

      NextWorkOrderNo := DuplicateWorkorder(WorkOrderPlanningSetup."Copy Res. to Next Work Order");

      VALIDATE("Actual Reference Point", WorkOrderPlanningSetup."Ref. Point Next Work Order");
      MODIFY(TRUE);

      IF "Source Type" = "Source Type"::ServiceOrder THEN BEGIN
        ServiceOrder.CHANGECOMPANY("Source Company");
        IF ServiceOrder.GET("Source No.") THEN BEGIN
          ServiceOrder."SO Finished (Field Service)" := FALSE;
          ServiceOrder.MODIFY;
        END;
      END;

      EXIT(NextWorkOrderNo);
    END;

    PROCEDURE SetCollectivePublishSubcPortalRun@1100409002(SkipCreatPurchOrder@1100409000 : Boolean);
    BEGIN
      gCollectivePublishSubcPortalRun := TRUE;
      gSkipCreatPurchOrder := SkipCreatPurchOrder;
    END;

    PROCEDURE FieldServiceStatusReasonDescription@1100525013() : Text;
    VAR
      WorkOrderReferencePoint@1100525000 : Record 11229282;
    BEGIN
      // DP00816
      WorkOrderReferencePoint.SETRANGE("Work Order No.", "No.");
      WorkOrderReferencePoint.SETRANGE("Field Service Status", "Actual Field Service Status");
      IF WorkOrderReferencePoint.FINDLAST THEN
        EXIT(WorkOrderReferencePoint."Fld Srv Status Reason Desc.");
    END;

    LOCAL PROCEDURE TestRecursiveness@1100525014();
    VAR
      WorkOrder@1100525001 : Record 11229279;
      RelatedWorkOrderNo@1100525000 : Code[20];
    BEGIN
      RelatedWorkOrderNo := "Related Work Order No.";
      WHILE RelatedWorkOrderNo <> '' DO BEGIN
        IF RelatedWorkOrderNo = "No." THEN
          ERROR(Text014);
        IF NOT WorkOrder.GET(RelatedWorkOrderNo) THEN
          EXIT;
        RelatedWorkOrderNo := WorkOrder."Related Work Order No.";
      END;
    END;

    LOCAL PROCEDURE DetermineLeadingResource@1100528607();
    VAR
      WorkOrder@1100528600 : Record 11229279;
    BEGIN
      IF ("Resource Type" <> "Resource Type"::Employee) OR ("Resource No." = '') THEN BEGIN
        "Leading Resource" := FALSE;
        EXIT;
      END;
      WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
      WorkOrder.SETRANGE("Source Company", "Source Company");
      WorkOrder.SETRANGE("Source Type", "Source Type");
      WorkOrder.SETRANGE("Source No.", "Source No.");
      WorkOrder.SETRANGE("Resource Type", WorkOrder."Resource Type"::Employee);
      IF WorkOrder.FINDSET THEN BEGIN
        IF (WorkOrder.NEXT = 0) AND (WorkOrder."No." = "No.") THEN
          "Leading Resource" := "Resource No." <> '';
      END ELSE
        "Leading Resource" := "Resource No." <> '';
    END;

    LOCAL PROCEDURE UpdateSOObjectSpecificationLines@1100528700();
    VAR
      ObjectSpecificationMgt@1100528701 : Codeunit 11012848;
      MobileSetup@1100528705 : Record 11012676;
      ServiceOrderObject@1100528702 : Record 11071724;
      ServiceOrderObjSpecLine@1100528704 : Record 11071782;
      WorkOrder@1100528703 : Record 11229279;
    BEGIN
      IF "Source Type" <> "Source Type"::ServiceOrder THEN
        EXIT;

      MobileSetup.GET;
      IF NOT MobileSetup."Refr. Insp. and Spec before Ex" THEN
        EXIT;

      ServiceOrderObjSpecLine.SETRANGE("Service Order No.", "Source No.");
      ServiceOrderObjSpecLine.SETFILTER("New Value", '<>%1', '');
      IF NOT ServiceOrderObjSpecLine.ISEMPTY THEN
        EXIT;

      ServiceOrderObjSpecLine.RESET;
      ServiceOrderObjSpecLine.SETRANGE("Service Order No.", "Source No.");
      ServiceOrderObjSpecLine.SETFILTER(Status, '<>%1', ServiceOrderObjSpecLine.Status::" ");
      IF NOT ServiceOrderObjSpecLine.ISEMPTY THEN
        EXIT;

      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.", "Source No.");
      WorkOrder.SETFILTER("No.", '<>%1', "No.");
      WorkOrder.SETFILTER("Date/Time Export to FSA", '<>%1', 0DT);
      IF NOT WorkOrder.ISEMPTY THEN
        EXIT;

      ServiceOrderObject.SETRANGE("Service Order No.", "Source No.");
      IF ServiceOrderObject.FINDSET THEN
        REPEAT
          ObjectSpecificationMgt.DeleteSOSpecificationLines(ServiceOrderObject."Service Order No.", ServiceOrderObject."Object No.");
          ObjectSpecificationMgt.CreateSOSpecificationLines(ServiceOrderObject."Service Order No.", ServiceOrderObject."Object No.");
        UNTIL ServiceOrderObject.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateSOObjectInspectionLines@1100528701();
    VAR
      ServiceInspectionManagement@1100528705 : Codeunit 11012844;
      MobileSetup@1100528703 : Record 11012676;
      ServiceOrderObject@1100528702 : Record 11071724;
      ServiceOrderObjSpecLine@1100528701 : Record 11071782;
      WorkOrder@1100528700 : Record 11229279;
    BEGIN
      IF "Source Type" <> "Source Type"::ServiceOrder THEN
        EXIT;

      MobileSetup.GET;
      IF NOT MobileSetup."Refr. Insp. and Spec before Ex" THEN
        EXIT;

      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.", "Source No.");
      WorkOrder.SETFILTER("No.", '<>%1', "No.");
      WorkOrder.SETFILTER("Date/Time Export to FSA", '<>%1', 0DT);
      IF NOT WorkOrder.ISEMPTY THEN
        EXIT;

      ServiceOrderObject.SETRANGE("Service Order No.", "Source No.");
      IF ServiceOrderObject.FINDSET THEN
        REPEAT
          ServiceInspectionManagement.DeleteSOInspectionLines(ServiceOrderObject."Service Order No.", ServiceOrderObject."Object No.",
            ServiceOrderObject."Maintenance Scheme");
          ServiceInspectionManagement.CreateSOInspectionLines(ServiceOrderObject."Service Order No.", ServiceOrderObject."Service Contract No.",
            ServiceOrderObject."Object No.", ServiceOrderObject."Maintenance Scheme", ServiceOrderObject.Code);
        UNTIL ServiceOrderObject.NEXT = 0;
    END;

    PROCEDURE CanBeRemoved@1100528611(VAR OMessageText@1100528619 : Text) : Boolean;
    VAR
      ReferencePoint@1100528618 : Record 11020271;
      DebriefLogbook4PSMobile@1100528600 : Record 11012677;
      DebriefWorkOrderMobile@1100528601 : Record 11012679;
      DebriefBudgetLineMobile@1100528602 : Record 11012680;
      DebriefCostPlusEntryMob@1100528603 : Record 11012681;
      DebriefAdviceOrderLineMob@1100528604 : Record 11012682;
      DebriefFSStatusMobile@1100528605 : Record 11012683;
      DebriefTextMobile@1100528606 : Record 11012684;
      DebriefHourAccountingMob@1100528607 : Record 11012685;
      DebriefText@1100528608 : Record 11012886;
      DebriefInspectionLinesMob@1100528609 : Record 11020447;
      DebriefObjSpecLinesMob@1100528610 : Record 11020448;
      DebriefWorkOrderTextsMob@1100528611 : Record 11020449;
      DebriefRestockItemMob@1100528612 : Record 11125645;
      DebriefPlanningMob@1100528613 : Record 11125646;
      DebriefCreatePurchOrdMob@1100528614 : Record 11125648;
      DebriefWUPProductionMob@1100528615 : Record 11125650;
      DebriefServOrdObjMob@1100528616 : Record 11125652;
      DebriefCreateRestPOMob@1100528617 : Record 11229869;
      AdviceOrderLine@1100528621 : Record 11012055;
      PurchaseLineExtension@1100528622 : Record 11020644;
      SUPRecordingLine@1100528623 : Record 11071772;
      RecRef@1100528620 : RecordRef;
    BEGIN
      IF "Actual Reference Point" <> 0 THEN
        IF ReferencePoint.GET("Actual Reference Point") THEN
          IF ReferencePoint."Block Modify Service Order" THEN BEGIN
            RecRef.GETTABLE(ReferencePoint);
            OMessageText := GetTestFieldErrorMessage(RecRef, ReferencePoint.FIELDNO("Block Modify Service Order"));
            EXIT(FALSE);
          END;

      DebriefLogbook4PSMobile.SETRANGE("Work Order No.", "No.");
      DebriefLogbook4PSMobile.SETFILTER("No. of Errors", '<>%1', 0);
      IF DebriefLogbook4PSMobile.FINDFIRST THEN BEGIN
        RecRef.GETTABLE(DebriefLogbook4PSMobile);
        OMessageText := GetTestFieldErrorMessage(RecRef, DebriefLogbook4PSMobile.FIELDNO("No. of Errors"));
        EXIT(FALSE);
      END;

      DebriefWorkOrderMobile.SETRANGE("Work Order No.", "No.");
      DebriefWorkOrderMobile.SETFILTER(Status, '<>%1', DebriefWorkOrderMobile.Status::Processed);
      IF DebriefWorkOrderMobile.FINDFIRST THEN BEGIN
        RecRef.GETTABLE(DebriefWorkOrderMobile);
        OMessageText := GetTestFieldErrorMessage(RecRef, DebriefWorkOrderMobile.FIELDNO(Status));
        EXIT(FALSE);
      END;

      DebriefBudgetLineMobile.SETRANGE("Work Order No.", "No.");
      DebriefBudgetLineMobile.SETFILTER(Status, '<>%1', DebriefBudgetLineMobile.Status::Processed);
      IF DebriefBudgetLineMobile.FINDFIRST THEN BEGIN
        RecRef.GETTABLE(DebriefBudgetLineMobile);
        OMessageText := GetTestFieldErrorMessage(RecRef, DebriefBudgetLineMobile.FIELDNO(Status));
        EXIT(FALSE);
      END;

      DebriefCostPlusEntryMob.SETRANGE("Work Order No.", "No.");
      DebriefCostPlusEntryMob.SETFILTER(Status, '<>%1', DebriefCostPlusEntryMob.Status::Processed);
      IF DebriefCostPlusEntryMob.FINDFIRST THEN BEGIN
        RecRef.GETTABLE(DebriefCostPlusEntryMob);
        OMessageText := GetTestFieldErrorMessage(RecRef, DebriefCostPlusEntryMob.FIELDNO(Status));
        EXIT(FALSE);
      END;

      DebriefAdviceOrderLineMob.SETRANGE("Work Order No.", "No.");
      DebriefAdviceOrderLineMob.SETFILTER(Status, '<>%1', DebriefAdviceOrderLineMob.Status::Processed);
      IF DebriefAdviceOrderLineMob.FINDFIRST THEN BEGIN
        RecRef.GETTABLE(DebriefAdviceOrderLineMob);
        OMessageText := GetTestFieldErrorMessage(RecRef, DebriefAdviceOrderLineMob.FIELDNO(Status));
        EXIT(FALSE);
      END;

      DebriefFSStatusMobile.SETRANGE("Work Order No.", "No.");
      DebriefFSStatusMobile.SETFILTER(Status, '<>%1', DebriefFSStatusMobile.Status::Processed);
      IF DebriefFSStatusMobile.FINDFIRST THEN BEGIN
        RecRef.GETTABLE(DebriefFSStatusMobile);
        OMessageText := GetTestFieldErrorMessage(RecRef, DebriefFSStatusMobile.FIELDNO(Status));
        EXIT(FALSE);
      END;

      DebriefTextMobile.SETRANGE("Work Order No.", "No.");
      DebriefTextMobile.SETFILTER(Status, '<>%1', DebriefTextMobile.Status::Processed);
      IF DebriefTextMobile.FINDFIRST THEN BEGIN
        RecRef.GETTABLE(DebriefTextMobile);
        OMessageText := GetTestFieldErrorMessage(RecRef, DebriefTextMobile.FIELDNO(Status));
        EXIT(FALSE);
      END;

      DebriefHourAccountingMob.SETRANGE("Work Order No.", "No.");
      DebriefHourAccountingMob.SETFILTER(Status, '<>%1', DebriefHourAccountingMob.Status::Processed);
      IF DebriefHourAccountingMob.FINDFIRST THEN BEGIN
        RecRef.GETTABLE(DebriefHourAccountingMob);
        OMessageText := GetTestFieldErrorMessage(RecRef, DebriefHourAccountingMob.FIELDNO(Status));
        EXIT(FALSE);
      END;

      DebriefText.SETRANGE("Work Order No.", "No.");
      DebriefText.SETRANGE(Finished, FALSE);
      IF DebriefText.FINDFIRST THEN BEGIN
        RecRef.GETTABLE(DebriefText);
        OMessageText := GetTestFieldErrorMessage(RecRef, DebriefText.FIELDNO(Finished));
        EXIT(FALSE);
      END;

      DebriefInspectionLinesMob.SETRANGE("Work Order No.", "No.");
      DebriefInspectionLinesMob.SETFILTER(Status, '<>%1', DebriefInspectionLinesMob.Status::Processed);
      IF DebriefInspectionLinesMob.FINDFIRST THEN BEGIN
        RecRef.GETTABLE(DebriefInspectionLinesMob);
        OMessageText := GetTestFieldErrorMessage(RecRef, DebriefInspectionLinesMob.FIELDNO(Status));
        EXIT(FALSE);
      END;

      DebriefObjSpecLinesMob.SETRANGE("Work Order No.", "No.");
      DebriefObjSpecLinesMob.SETFILTER(Status, '<>%1', DebriefObjSpecLinesMob.Status::Processed);
      IF DebriefObjSpecLinesMob.FINDFIRST THEN BEGIN
        RecRef.GETTABLE(DebriefObjSpecLinesMob);
        OMessageText := GetTestFieldErrorMessage(RecRef, DebriefObjSpecLinesMob.FIELDNO(Status));
        EXIT(FALSE);
      END;

      DebriefWorkOrderTextsMob.SETRANGE("Work Order No.", "No.");
      DebriefWorkOrderTextsMob.SETFILTER(Status, '<>%1', DebriefWorkOrderTextsMob.Status::Processed);
      IF DebriefWorkOrderTextsMob.FINDFIRST THEN BEGIN
        RecRef.GETTABLE(DebriefWorkOrderTextsMob);
        OMessageText := GetTestFieldErrorMessage(RecRef, DebriefWorkOrderTextsMob.FIELDNO(Status));
        EXIT(FALSE);
      END;

      DebriefRestockItemMob.SETRANGE("Work Order No.", "No.");
      DebriefRestockItemMob.SETFILTER(Status, '<>%1', DebriefRestockItemMob.Status::Processed);
      IF DebriefRestockItemMob.FINDFIRST THEN BEGIN
        RecRef.GETTABLE(DebriefRestockItemMob);
        OMessageText := GetTestFieldErrorMessage(RecRef, DebriefRestockItemMob.FIELDNO(Status));
        EXIT(FALSE);
      END;

      DebriefPlanningMob.SETRANGE("Work Order No.", "No.");
      DebriefPlanningMob.SETFILTER(Status, '<>%1', DebriefPlanningMob.Status::Processed);
      IF DebriefPlanningMob.FINDFIRST THEN BEGIN
        RecRef.GETTABLE(DebriefPlanningMob);
        OMessageText := GetTestFieldErrorMessage(RecRef, DebriefPlanningMob.FIELDNO(Status));
        EXIT(FALSE);
      END;

      DebriefCreatePurchOrdMob.SETRANGE("Work Order No.", "No.");
      DebriefCreatePurchOrdMob.SETFILTER(Status, '<>%1', DebriefCreatePurchOrdMob.Status::Processed);
      IF DebriefCreatePurchOrdMob.FINDFIRST THEN BEGIN
        RecRef.GETTABLE(DebriefCreatePurchOrdMob);
        OMessageText := GetTestFieldErrorMessage(RecRef, DebriefCreatePurchOrdMob.FIELDNO(Status));
        EXIT(FALSE);
      END;

      DebriefWUPProductionMob.SETRANGE("Work Order No.", "No.");
      DebriefWUPProductionMob.SETFILTER(Status, '<>%1', DebriefWUPProductionMob.Status::Processed);
      IF DebriefWUPProductionMob.FINDFIRST THEN BEGIN
        RecRef.GETTABLE(DebriefWUPProductionMob);
        OMessageText := GetTestFieldErrorMessage(RecRef, DebriefWUPProductionMob.FIELDNO(Status));
        EXIT(FALSE);
      END;

      DebriefServOrdObjMob.SETRANGE("Work Order No.", "No.");
      DebriefServOrdObjMob.SETFILTER(Status, '<>%1', DebriefServOrdObjMob.Status::Processed);
      IF DebriefServOrdObjMob.FINDFIRST THEN BEGIN
        RecRef.GETTABLE(DebriefServOrdObjMob);
        OMessageText := GetTestFieldErrorMessage(RecRef, DebriefServOrdObjMob.FIELDNO(Status));
        EXIT(FALSE);
      END;

      DebriefCreateRestPOMob.SETRANGE("Work Order No.", "No.");
      DebriefCreateRestPOMob.SETFILTER(Status, '<>%1', DebriefCreateRestPOMob.Status::Processed);
      IF DebriefCreateRestPOMob.FINDFIRST THEN BEGIN
        RecRef.GETTABLE(DebriefCreateRestPOMob);
        OMessageText := GetTestFieldErrorMessage(RecRef, DebriefCreateRestPOMob.FIELDNO(Status));
        EXIT(FALSE);
      END;

      CASE "Source Type" OF
        "Source Type"::ServiceOrder:
          BEGIN
            AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::ServOrder);
            AdviceOrderLine.SETRANGE("Service Order No.", "Source No.");
            AdviceOrderLine.SETRANGE("Work Order No.", "No.");
            IF NOT AdviceOrderLine.ISEMPTY THEN BEGIN
              OMessageText := STRSUBSTNO(Text005, TABLECAPTION, AdviceOrderLine.TABLECAPTION);
              EXIT(FALSE);
            END;

            PurchaseLineExtension.SETRANGE("Work Order No.", "No.");
            IF NOT PurchaseLineExtension.ISEMPTY THEN BEGIN
              OMessageText := STRSUBSTNO(Text005, TABLECAPTION, PurchaseLineExtension.TABLECAPTION);
              EXIT(FALSE);
            END;

            SUPRecordingLine.SETRANGE("Service Order No.", "Source No.");
            SUPRecordingLine.SETRANGE("Work Order No.", "No.");
            IF NOT SUPRecordingLine.ISEMPTY THEN BEGIN
              OMessageText := STRSUBSTNO(Text005, TABLECAPTION, SUPRecordingLine.TABLECAPTION);
              EXIT(FALSE);
            END;
          END;
        "Source Type"::Project:
          BEGIN
            AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::Project);
            AdviceOrderLine.SETRANGE("Service Order No.", "Source No.");
            AdviceOrderLine.SETRANGE("Work Order No.", "No.");
            IF NOT AdviceOrderLine.ISEMPTY THEN
              OMessageText := STRSUBSTNO(Text005, TABLECAPTION, AdviceOrderLine.TABLECAPTION);

            PurchaseLineExtension.SETRANGE("Work Order No.", "No.");
            IF NOT PurchaseLineExtension.ISEMPTY THEN
              OMessageText := STRSUBSTNO(Text005, TABLECAPTION, PurchaseLineExtension.TABLECAPTION);
          END;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetTestFieldErrorMessage@1100528612(IRecRef@1100528600 : RecordRef;IFieldNo@1100528605 : Integer) MessageText : Text;
    VAR
      KeyRef@1100528601 : KeyRef;
      FieldRef@1100528604 : FieldRef;
      i@1100528602 : Integer;
    BEGIN
      FieldRef := IRecRef.FIELD(IFieldNo);
      MessageText := STRSUBSTNO(Text016, FieldRef.CAPTION, FieldRef.VALUE, IRecRef.CAPTION);
      KeyRef := IRecRef.KEYINDEX(1);
      FOR i := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(i);
        IF i > 1 THEN
          MessageText := MessageText + ', ';
        MessageText := MessageText + STRSUBSTNO('%1=''%2''', FieldRef.CAPTION, FieldRef.VALUE);
      END;
    END;

    PROCEDURE SetCompanyPlanGroupFilters@1100528613();
    VAR
      CompanyPlanGroup@1100528604 : Record 11229300;
      CompanyPlanGroupLine@1100528601 : Record 11229301;
      CurrentCompanyPlanGroup@1100528600 : Code[10];
      CompanyFilter@1100528602 : Text;
    BEGIN
      CurrentCompanyPlanGroup := CompanyPlanGroup.GetCurrentCompanyPlanGroupCode;
      CompanyPlanGroupLine.SETRANGE("Group Code", CurrentCompanyPlanGroup);
      IF CompanyPlanGroupLine.ISEMPTY THEN
        EXIT;
      IF CompanyPlanGroupLine.FINDSET THEN
        REPEAT
          IF CompanyFilter <> '' THEN
            CompanyFilter += '|';
          CompanyFilter += CompanyPlanGroupLine."Company Name";
        UNTIL CompanyPlanGroupLine.NEXT = 0;
      FILTERGROUP(7);
      SETFILTER("Source Company", CompanyFilter);
      FILTERGROUP(0);
    END;

    PROCEDURE IsWorkOrderWithinCompanyPlanGroup@1100528615() : Boolean;
    VAR
      CompanyPlanGroup@1100528600 : Record 11229300;
      CompanyPlanGroupLine@1100528602 : Record 11229301;
      CompanyPlanGroupCode@1100528603 : Code[20];
    BEGIN
      CompanyPlanGroupCode := CompanyPlanGroup.GetCurrentCompanyPlanGroupCode;
      IF CompanyPlanGroupCode = '' THEN
        EXIT(TRUE);
      CompanyPlanGroupLine.SETRANGE("Group Code", CompanyPlanGroupCode);
      IF CompanyPlanGroupLine.ISEMPTY THEN
        EXIT(TRUE);
      CompanyPlanGroupLine.SETRANGE("Company Name", "Source Company");
      EXIT(NOT CompanyPlanGroupLine.ISEMPTY);
    END;

    PROCEDURE TestWorkOrderWithinCompanyPlanGroup@1100528614();
    VAR
      CompanyPlanGroup@1100528600 : Record 11229300;
    BEGIN
      IF NOT IsWorkOrderWithinCompanyPlanGroup THEN
        ERROR(Text017, "No.", CompanyPlanGroup.GetCurrentCompanyPlanGroupCode);
    END;

    BEGIN
    {
      ITERO.SB 160105 Added function to fill order manager and assigned to
    }
    END.
  }
}

