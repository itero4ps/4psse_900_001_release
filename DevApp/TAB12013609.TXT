OBJECT Table 12013609 EX Document Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF350001;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    Permissions=TableData 12013609=rimd;
    OnInsert=BEGIN
               DocumentStatus(Rec,'New');
             END;

    OnModify=BEGIN
               DocumentStatus(Rec,'Update');
             END;

    OnDelete=BEGIN
               DeleteLine(0);

               DocumentStatus(Rec,'Delete');
             END;

    CaptionML=ENU=Document Line;
  }
  FIELDS
  {
    { 1   ;   ;Company Name        ;Text30        ;TableRelation=Company;
                                                   CaptionML=ENU=Company Name }
    { 2   ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Posted Invoice,Posted Credit Memo,Requisition,Receipt;
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Posted Invoice,Posted Credit Memo,Requisition,Receipt }
    { 3   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 10  ;   ;Flowstatus          ;Option        ;CaptionML=ENU=ExFlow Status;
                                                   OptionCaptionML=ENU='',Active,Approved,Rejected;
                                                   OptionString='',Active,Approved,Rejected }
    { 11  ;   ;Line Type           ;Option        ;OnValidate=BEGIN
                                                                Changeable;
                                                                ConnectedToReceipt(FALSE);

                                                                IF NOT ExFlow.LineTypeAllowed("Line Type", TRUE) THEN
                                                                  ERROR(STRSUBSTNO(EXF49,"Line Type"));

                                                                IF ("Line Type" = 0) OR (xRec."Line Type" <> "Line Type") THEN
                                                                  BEGIN
                                                                    "No." := '';
                                                                    Description := '';
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Line Type;
                                                   OptionCaptionML=ENU=" ,G/L Account,Item,,Fixed Asset,Charge (Item)";
                                                   OptionString=[ ,G/L Account,Item,,Fixed Asset,Charge (Item)] }
    { 12  ;   ;No.                 ;Code20        ;TableRelation=IF (Line Type=CONST(" ")) "Standard Text"
                                                                 ELSE IF (Line Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Line Type=CONST(Item)) Item
                                                                 ELSE IF (Line Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Line Type=CONST("Charge (Item)")) "Item Charge";
                                                   OnValidate=BEGIN
                                                                Changeable;
                                                                ConnectedToReceipt(FALSE);
                                                              END;

                                                   ValidateTableRelation=Yes;
                                                   TestTableRelation=Yes;
                                                   CaptionML=ENU=No. }
    { 13  ;   ;Description         ;Text100       ;OnValidate=BEGIN
                                                                Changeable;
                                                              END;

                                                   CaptionML=ENU=Description }
    { 14  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                Changeable;
                                                                ConnectedToReceipt(TRUE);

                                                                IF (CurrFieldNo = FIELDNO(Quantity)) AND
                                                                  ("Connected Line ID" <> 0) THEN BEGIN
                                                                  IF ABS(Quantity) > ABS(xRec.Quantity) THEN
                                                                    ERROR(EXF53);

                                                                  IF Quantity > 0 THEN
                                                                    Quantity := -Quantity;
                                                                END;

                                                                CalcAmount;

                                                                IF CurrFieldNo = FIELDNO(Quantity) THEN
                                                                  UndoReceipt(FALSE);
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 15  ;   ;Direct Unit Cost    ;Decimal       ;OnValidate=BEGIN
                                                                Changeable;
                                                                CalcAmount;
                                                              END;

                                                   CaptionML=ENU=Direct Unit Cost;
                                                   DecimalPlaces=2:5 }
    { 16  ;   ;Line Discount %     ;Decimal       ;InitValue=0;
                                                   OnValidate=BEGIN
                                                                Changeable;
                                                                CalcAmount;
                                                              END;

                                                   CaptionML=ENU=Line Discount %;
                                                   DecimalPlaces=2:5 }
    { 18  ;   ;Line Difference     ;Boolean       ;InitValue=No;
                                                   CaptionML=ENU=Line Difference }
    { 20  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   OnValidate=BEGIN
                                                                Changeable;
                                                              END;

                                                   CaptionML=ENU=Job No. }
    { 21  ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount;
                                                   DecimalPlaces=2:5 }
    { 30  ;   ;New Line            ;Boolean       ;CaptionML=ENU=New Line }
    { 31  ;   ;Finish Comment      ;Text120       ;CaptionML=ENU=Comments }
    { 32  ;   ;Finish Code         ;Option        ;CaptionML=ENU=Finish Code;
                                                   OptionCaptionML=ENU=Complete Invoice line,Complete Invoice line and update,Complete all Invoice lines,Complete all Invoice lines and update,Hold line,Hold all lines;
                                                   OptionString=Complete Invoice line,Complete Invoice line and update,Complete all Invoice lines,Complete all Invoice lines and update,Hold line,Hold all lines }
    { 33  ;   ;Unit of Measure     ;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=ENU=Unit of Measure }
    { 100 ;   ;Periodic Template Code;Code10      ;TableRelation="Periodic Template";
                                                   OnValidate=BEGIN
                                                                Changeable;
                                                              END;

                                                   CaptionML=ENU=Periodic Template Code }
    { 101 ;   ;Periodic Starting Date;Date        ;OnValidate=BEGIN
                                                                Changeable;
                                                              END;

                                                   CaptionML=ENU=Periodic Starting Date }
    { 110 ;   ;Base Starting Date  ;Date          ;CaptionML=ENU=Base Starting Date }
    { 111 ;   ;Base Temporary Account No.;Text20  ;InitValue=<Empty>;
                                                   TableRelation="G/L Account";
                                                   CaptionML=ENU=Base Temporary Account No. }
    { 112 ;   ;Base No. of Periods ;Integer       ;InitValue=0;
                                                   CaptionML=ENU=Base No. of Periods }
    { 113 ;   ;Document ID         ;Integer       ;CaptionML=ENU=Document ID }
    { 114 ;   ;ID                  ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=ENU=ID }
    { 115 ;   ;Connected Line ID   ;Integer       ;CaptionML=ENU=Connected Line ID }
    { 116 ;   ;Order No.           ;Code20        ;OnLookup=VAR
                                                              PurchHeader@1100285000 : Record 38;
                                                            BEGIN
                                                              IF "Order No." <> '' THEN
                                                                IF PurchHeader.GET(PurchHeader."Document Type"::Order,"Order No.") THEN
                                                                  PAGE.RUN(0,PurchHeader)
                                                                ELSE
                                                                  IF PurchHeader.GET(PurchHeader."Document Type"::"Return Order","Order No.") THEN
                                                                    PAGE.RUN(0,PurchHeader);
                                                            END;

                                                   CaptionML=ENU=Order No. }
    { 117 ;   ;Order Unit Cost     ;Decimal       ;CaptionML=ENU=Order Unit Cost;
                                                   DecimalPlaces=2:5 }
    { 500 ;   ;Requisition No.     ;Code20        ;CaptionML=ENU=Requisition No. }
    { 501 ;   ;Error Message       ;Text250       ;CaptionML=ENU=Error Message }
    { 600 ;   ;Changed By          ;Code50        ;CaptionML=ENU=Changed By;
                                                   Editable=No }
    { 601 ;   ;Change Date         ;DateTime      ;CaptionML=ENU=Change Date;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=Yes }
    {    ;Document No.                             }
    {    ;Document No.,Line No.                    }
    {    ;Flowstatus,Document Type                 }
    {    ;Company Name,Document Type,Document No.,Line No. }
    {    ;Document ID                              }
    {    ;Document ID,Flowstatus                   }
    {    ;Connected Line ID                        }
    {    ;Order No.                               ;SumIndexFields=Order Unit Cost }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ExFlow@1100285002 : Codeunit 12013601;
      EXF03@1100285005 : TextConst 'ENU=Approvers copied to %1 line/ lines';
      EXF05@1100285003 : TextConst 'ENU=Restart Approver,Restart from marked Approver,Restart line,Restart all lines,Restart from marked Approver for all lines';
      EXF06@1100285009 : TextConst 'ENU=The Document is on hold!';
      EXF08@1100285014 : TextConst 'ENU=The Line is approved!';
      EXF09@1100285015 : TextConst 'ENU=The Line is on hold!';
      EXF10@1100285016 : TextConst 'ENU=The line is connected to a Receipt line!';
      EXF11@1100285017 : TextConst 'ENU="Max. Quantity =  %1!"';
      EXF13@1100285019 : TextConst 'ENU="Quote and Order can not be changed here!  "';
      EXF41@1100285000 : TextConst 'ENU=Warning! The line has been approved!\\Do you still want to update line?';
      EXF42@1100285023 : TextConst 'ENU=The Line is Ready for Posting and needs to be restarted before it can be changed!';
      GLSetupShortcutDimCode@1100285024 : ARRAY [8] OF Code[20];
      HasGotGLSetup@1100285022 : Boolean;
      DoByPassControl@1100285025 : Boolean;
      EXF45@1100285027 : TextConst 'ENU=ExFlow do not use Dimension %1!';
      EXF46@1100285010 : TextConst 'ENU="The document must belong to the company currently opened. "';
      EXF47@1100285011 : TextConst 'ENU=The status of the document cannot be Invoiced.';
      EXF48@1100285026 : TextConst 'ENU=Operation aborted.';
      EXF49@1100285028 : TextConst 'ENU=Line Type %1 is not setup for ExFlow.';
      EXF50@1100285004 : TextConst 'ENU=Restarting line:  #1###############';
      Number@1100285001 : Integer;
      EXF51@1100285013 : TextConst 'ENU=Finishing line:  #1###############';
      EXF52@1100285018 : TextConst 'ENU=Quantity received cannot be changed to a lesser value than what is already invoiced.';
      EXF53@1100285006 : TextConst 'ENU=Quantity received cannot be increased, only decreased.';
      "* EXF4PS *"@1024 : Integer;
      GLSetup@1025 : Record 98;
      EXDoc@1030 : Record 12013608;
      Dim2Value@1023 : Code[20];
      "* 4PS *"@1000 : Integer;
      PurchSetup@1001 : Record 312;
      PurchHeader@1002 : Record 38;
      Currency@1003 : Record 4;
      "** 4PS **"@1004 : TextConst;
      Text11012020@1005 : TextConst 'ENU=Reopen %1 %2 of %3 %4 ?';
      PurchLine2@1006 : Record 39;
      ICProjSetupRec@1008 : Record 315;
      ProjElemRec@1011 : Record 11012010;
      ProjTypeRec@1010 : Record 11012009;
      ExtensionContract@1017 : Record 11012004;
      PlantSetup@1016 : Record 11012550;
      PlantTypeRec@1015 : Record 11012551;
      PlantNoRec@1014 : Record 11012552;
      CostCompPlantRec@1013 : Record 11012575;
      PlantPostingSetup@1012 : Record 11012570;
      InvtSetup@1026 : Record 313;
      ItemRec@1027 : Record 27;
      ItemVend@1029 : Record 99;
      ProjRec@1031 : Record 11072003;
      PlantVendorRec@1042 : Record 11012596;
      PlantVendorType@1007 : Option;
      ElementFormat@1009 : Codeunit 11012022;
      ValidateCu@1022 : Codeunit 11012033;
      Text11012017@1018 : TextConst 'ENU=not allowed for acquisition/rent of plant';
      UOMMgt@1028 : Codeunit 5402;
      HideDialog@1019 : Boolean;
      SaveFieldNo@1020 : Integer;
      ItemTypeOpt@1021 : 'Item,Basic Item,Trade Item,Trade Vendor';
      Text11012000@1041 : TextConst 'ENU=does not match that of the Cost Object';
      Text11012001@1040 : TextConst 'ENU=%1 %2 is not available at %3.';
      Text11012002@1039 : TextConst 'ENU=Record attached to Receipt %1 line %2, quantity is outside the range %3 ... %4, continue ?';
      Text11012003@1038 : TextConst 'ENU=%1 %2 has %3 %4.';
      Text11012004@1037 : TextConst 'ENU=Change Cost Type ?';
      Text11012005@1036 : TextConst 'ENU=%1 should not be larger then %2';
      Text11012008@1035 : TextConst 'ENU=You cannot invoice more than %1.';
      Text11012009@1034 : TextConst 'ENU=You cannot receive more than %1.';
      Text11012010@1033 : TextConst 'ENU=Record attached to Receipt %1 line %2, amount is larger then open amount %3, continue ?';
      Text11012011@1032 : TextConst 'ENU=Record attached to Receipt %1 line %2, amount is larger then invoiced amount %3, continue ?';
      Text11012036@1043 : TextConst 'ENU=may not be negative for purchase or rent of Plant';

    PROCEDURE ShowNextApprover@1000000000(ShowForm@1100285006 : Text[30]);
    VAR
      DocHead@1100285009 : Record 12013608;
      DocLine@1100285001 : Record 12013609;
      DocLineApp@1100285000 : Record 12013610;
      DocLineApp2@1100285008 : Record 12013610;
      PurchHeader@1100285005 : Record 38;
      TempDate@1100285010 : Date;
    BEGIN
      DocLineApp.RESET;
      DocLineApp.SETCURRENTKEY("Company Name",Flowstatus,"Days to Due Date",Approver);
      DocLineApp.SETRANGE("Company Name",COMPANYNAME);
      DocLineApp.SETRANGE(Flowstatus,DocLineApp.Flowstatus::Current);
      IF DocLineApp.FIND('-') THEN
        REPEAT
          IF NOT PurchHeader.GET(DocLineApp."Document Type",DocLineApp."Document No.") THEN BEGIN
            IF DocHead.RetrieveRecord(DocHead,DocLineApp."Company Name",DocLineApp."Document Type",DocLineApp."Document No.") THEN BEGIN
              PurchHeader.INIT;
              PurchHeader."Due Date" := DocHead."Due Date";
              PurchHeader."Document Date" := DocHead."Document Date";
            END;
          END;

          DocLine.GET(DocLineApp."Document Line ID");
          DocHead.GET(DocLine."Document ID");

          DocLineApp."Due Date" := PurchHeader."Due Date";
          DocLineApp."Document Date" := PurchHeader."Document Date";
          DocLineApp."No." := DocLine."No.";
          IF DocLine.Description = '' THEN
            DocLineApp.Description := DocLine.GetName
          ELSE
            DocLineApp.Description := DocLine.Description;
          DocLineApp."Line Amount" := DocLine.Amount;

          IF PurchHeader."Due Date" <> 0D THEN
            DocLineApp."Days to Due Date" :=PurchHeader."Due Date" - WORKDATE
          ELSE
            DocLineApp."Days to Due Date" := 0;

          DocLineApp2.RESET;
          DocLineApp2.SETCURRENTKEY("Company Name","Document Type","Document No.","Line No.","Approver Order");
          DocLineApp2.SETRANGE("Company Name",DocLineApp."Company Name");
          DocLineApp2.SETRANGE("Document Type",DocLineApp."Document Type");
          DocLineApp2.SETRANGE("Document No.",DocLineApp."Document No.");
          DocLineApp2.SETRANGE("Line No.",DocLineApp."Line No.");
          DocLineApp2.SETFILTER("Approved By",'<>%1','');
          IF DocLineApp2.FIND('+') THEN BEGIN
            TempDate := DT2DATE(DocLineApp2."Approval Date");
            DocLineApp."Processing Days" := WORKDATE - TempDate;
          END
          ELSE
            IF DocHead."Create Date" <> 0D THEN
              DocLineApp."Processing Days" := WORKDATE - DocHead."Create Date";

          DocLineApp.MODIFY;
        UNTIL DocLineApp.NEXT = 0;

      IF ShowForm = 'NEXT' THEN
        PAGE.RUN(12013621,DocLineApp)
      ELSE
        PAGE.RUN(12013620,DocLineApp);
    END;

    PROCEDURE CopyApprover@1000000003(DocLineIn@1100285001 : Record 12013609);
    VAR
      DocLine@1000000000 : Record 12013609;
      PurchLine@1100285002 : Record 39;
      DocLineApp@1100285000 : Record 12013610;
    BEGIN
      DocLineApp.IsUserAllowedToChange(0);

      Number := 0;

      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type",DocLineIn."Document Type");
      PurchLine.SETRANGE("Document No.",DocLineIn."Document No.");
      PurchLine.SETFILTER("Line No.",'<>%1',DocLineIn."Line No.");
      IF PurchLine.FINDSET(TRUE) THEN
        REPEAT
          IF PurchLine.Approve THEN
            BEGIN
             IF DocLine.RetrieveRecord(DocLine,"Company Name",PurchLine."Document Type",PurchLine."Document No.",
                                       PurchLine."Line No.") THEN
               BEGIN
                 IF NOT Approved(DocLine) THEN BEGIN
                   UpdateApp(DocLine,DocLineIn);

                   PurchLine."Approval Flow Modified" := TRUE;
                   PurchLine.MODIFY;
                 END;

               END
             ELSE
               BEGIN
                 ExFlow.CreateDocumentLine(PurchLine,FALSE,TRUE);
                 DocLine.RetrieveRecord(DocLine,"Company Name",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
                 UpdateApp(DocLine,DocLineIn);

                 PurchLine."Approval Flow Modified" := TRUE;
                 PurchLine.MODIFY;
               END;
            END;
        UNTIL PurchLine.NEXT = 0;

      MESSAGE(EXF03,Number);
    END;

    PROCEDURE Approved@1100285002(DocLine@1100285000 : Record 12013609) : Boolean;
    VAR
      DocLineApp@1100285001 : Record 12013610;
    BEGIN
      DocLineApp.RESET;
      DocLineApp.SETCURRENTKEY("Document Line ID","Approver Order");
      DocLineApp.SETRANGE("Document Line ID",DocLine.ID);
      DocLineApp.SETFILTER("Approved By",'<>%1','');
      IF DocLineApp.FINDFIRST THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE UpdateApp@1000000006(ToDocLine@1000000000 : Record 12013609;FromDocLine@1100285001 : Record 12013609);
    VAR
      DocLineApp@1100285002 : Record 12013610;
      DocLineApp2@1100285003 : Record 12013610;
      First@1100285004 : Boolean;
    BEGIN
      Number := Number + 1;

      // Remove line Approvers
      DocLineApp.RESET;
      DocLineApp.SETCURRENTKEY("Document Line ID");
      DocLineApp.SETRANGE("Document Line ID",ToDocLine.ID);
      DocLineApp.DELETEALL;

      // Read org. line and make copies
      First := TRUE;

      DocLineApp.RESET;
      DocLineApp.SETCURRENTKEY("Document Line ID");
      DocLineApp.SETRANGE("Document Line ID",FromDocLine.ID);
      IF DocLineApp.FINDSET(TRUE) THEN BEGIN
        REPEAT
          DocLineApp2 := DocLineApp;
          DocLineApp2."Line No." := ToDocLine."Line No.";
          DocLineApp2.Comment := '';
          DocLineApp2."Approval Date" := CREATEDATETIME(0D, 0T);
          DocLineApp2."Approved By" := '';
          DocLineApp2."Reminder Sent Date" := CREATEDATETIME(0D, 0T);
          DocLineApp2."Reminder Status" := 0;
          DocLineApp2."No. of Reminders" := 0;
          DocLineApp2.ID := 0;
          DocLineApp2.Flowstatus := 0;

          IF First THEN
            BEGIN
              First := FALSE;
              DocLineApp2.Flowstatus := 1;
            END;

          DocLineApp2."Document Line ID" := ToDocLine.ID;
          DocLineApp2."Document ID" := ToDocLine."Document ID";
          DocLineApp2.INSERT;
        UNTIL DocLineApp.NEXT = 0;

        DocLineApp2.ApprovalStatus(DocLineApp2,'Update');
      END;
    END;

    PROCEDURE FinishApprover@1100285000(DocLineIn@1100285004 : Record 12013609);
    VAR
      FinishApprovalOption@1100285002 : Report 12013635;
    BEGIN
      FinishApprovalOption.SetDocLine(DocLineIn);
      FinishApprovalOption.RUNMODAL;
    END;

    PROCEDURE FinishApproverUpdate@1100285019(DocLineIn@1100285005 : Record 12013609;FinishComment@1100285004 : Text[250];FinishCode@1100285003 : Integer);
    VAR
      DocLine@1100285002 : Record 12013609;
      DocHead@1100285000 : Record 12013608;
      cu609@1100285006 : Codeunit 12013609;
      Window@1100285001 : Dialog;
    BEGIN
      CASE FinishCode OF
        0 : BEGIN
              ExFlow.FinishApprover(DocLineIn,FinishComment);
              SetDocumentStatus(DocLineIn);
            END;

        1 : BEGIN
              ExFlow.FinishApprover(DocLineIn,FinishComment);
              SetDocumentStatus(DocLineIn);
              cu609.CreateJournalLine;
            END;

        2 : BEGIN
              Window.OPEN(EXF51);

              DocLine.RESET;
              DocLine.SETCURRENTKEY("Document ID");
              DocLine.SETRANGE("Document ID",DocLineIn."Document ID");
              IF DocLine.FINDSET(TRUE) THEN BEGIN
                REPEAT
                  Window.UPDATE(1,DocLine."Line No.");

                  ExFlow.FinishApprover(DocLine,FinishComment);
                UNTIL DocLine.NEXT = 0;

                SetDocumentStatus(DocLine);
              END;

              DocHead.GET(DocLine."Document ID");
              DocHead.Status := DocHead.Status::Approved;
              DocHead.MODIFY(TRUE);
            END;

        3 : BEGIN
              Window.OPEN(EXF51);

              DocLine.RESET;
              DocLine.SETCURRENTKEY("Document ID");
              DocLine.SETRANGE("Document ID",DocLineIn."Document ID");
              IF DocLine.FINDSET(TRUE) THEN BEGIN
                REPEAT
                  Window.UPDATE(1,DocLine."Line No.");

                  ExFlow.FinishApprover(DocLine,FinishComment);
                UNTIL DocLine.NEXT = 0;

                SetDocumentStatus(DocLine);
              END;

              cu609.CreateJournalLine;
            END;
      END;
    END;

    PROCEDURE RestartApprover@1100285003(DocLineIn@1100285000 : Record 12013609;WorkingLine@1100285004 : Integer);
    VAR
      Restart@1100285002 : Integer;
      DocHead@1100285001 : Record 12013608;
      DocLine@1100285003 : Record 12013609;
      Window@1100285005 : Dialog;
    BEGIN
      Restart := STRMENU(EXF05);
      IF Restart = 0 THEN
        ERROR(EXF48);

      DocLine.GET(DocLineIn.ID);

      CASE Restart OF
        1 : ExFlow.RestartApprover(DocLine,WorkingLine,TRUE);
        2 : ExFlow.RestartApprover(DocLine,WorkingLine,FALSE);
        3 : ExFlow.RestartApprover(DocLine,0,FALSE);
        4 : BEGIN
              Window.OPEN(EXF50);

              DocLine.RESET;
              DocLine.SETCURRENTKEY("Document ID");
              DocLine.SETRANGE("Document ID", DocLineIn."Document ID");
              IF DocLine.FINDSET THEN
                REPEAT
                  Window.UPDATE(1,DocLine."Line No.");

                  ExFlow.RestartApprover(DocLine,0,FALSE);
                UNTIL DocLine.NEXT = 0;

              Window.CLOSE;
            END;
        5 : BEGIN
              Window.OPEN(EXF50);

              DocLine.RESET;
              DocLine.SETCURRENTKEY("Document ID");
              DocLine.SETRANGE("Document ID", DocLineIn."Document ID");
              IF DocLine.FINDSET THEN
                REPEAT
                  Window.UPDATE(1,DocLine."Line No.");

                  ExFlow.RestartApprover(DocLine,WorkingLine,FALSE);
                UNTIL DocLine.NEXT = 0;

              Window.CLOSE;
            END;
      END;

      IF DocLine.Flowstatus = DocLine.Flowstatus::Rejected THEN
        BEGIN
          DocLine.GET(DocLine.ID);
          DocLine.Flowstatus := DocLine.Flowstatus::Active;
          DocLine.MODIFY(FALSE);
        END;

      DocHead.GET(DocLine."Document ID");
      IF DocHead.Status = DocHead.Status::"Ready for posting" THEN
        BEGIN
          DocHead.Status := DocHead.Status::Active;
          DocHead."Error Message" := '';
          DocHead.MODIFY(TRUE);
        END
        ELSE BEGIN
          DocHead."Error Message" := '';
          DocHead.MODIFY(TRUE);
        END;
    END;

    PROCEDURE DocumentStatus@1100285005(VAR DocLine@1100285000 : Record 12013609;Action@1100285001 : Text[10]);
    VAR
      DocLine2@1100285002 : Record 12013609;
      DocHead@1100285004 : Record 12013608;
      PurchHeader@1100285012 : Record 38;
      NoOfLines@1100285011 : Integer;
      NoOfZero@1100285010 : Integer;
      NoOfApproved@1100285009 : Integer;
      NoOfActive@1100285008 : Integer;
    BEGIN
      IF NOT DocHead.GET(DocLine."Document ID") THEN
        EXIT;

      //348870
      DocHead.CALCFIELDS("Hold by Approver");
      IF DocHead."Hold by Approver" THEN
      //348870
        ERROR(EXF06);

      IF (DocHead.Status = DocHead.Status::Inactive) AND (DocHead."Document Type" = DocHead."Document Type"::Order) THEN
        EXIT;

      IF DocHead."Document Type" IN [DocHead."Document Type"::Quote,
                                     DocHead."Document Type"::Order] THEN BEGIN
        PurchHeader.GET(DocHead."Document Type",DocHead."Document No.");
        IF PurchHeader.Status = PurchHeader.Status::Open THEN
          EXIT;
      END;

      IF (DocHead.Status >= DocHead.Status::"On hold") THEN
        EXIT;

      DocLine2.RESET;
      DocLine2.SETCURRENTKEY("Document ID",Flowstatus);
      DocLine2.SETRANGE("Document ID", DocLine."Document ID");
      NoOfLines := DocLine2.COUNT;
      DocLine2.SETRANGE(Flowstatus, 0);
      NoOfZero := DocLine2.COUNT;
      DocLine2.SETRANGE(Flowstatus, DocLine2.Flowstatus::Approved);
      NoOfApproved := DocLine2.COUNT;
      DocLine2.SETRANGE(Flowstatus, DocLine2.Flowstatus::Active);
      NoOfActive := DocLine2.COUNT;

      IF Action = 'Delete' THEN BEGIN
        NoOfLines := NoOfLines - 1;
        IF Flowstatus = 0 THEN
          NoOfZero := NoOfZero - 1
        ELSE
          IF Flowstatus = Flowstatus::Approved THEN
            NoOfApproved := NoOfApproved - 1
          ELSE
            IF Flowstatus = Flowstatus::Active THEN
              NoOfActive := NoOfActive - 1;
      END
      ELSE
        IF Action = 'New' THEN BEGIN
          NoOfLines := NoOfLines + 1;
          IF Flowstatus = 0 THEN
            NoOfZero := NoOfZero + 1
          ELSE
            IF Flowstatus = Flowstatus::Approved THEN
              NoOfApproved := NoOfApproved + 1
            ELSE
              IF Flowstatus = Flowstatus::Active THEN
                NoOfActive := NoOfActive + 1;
        END;

      IF (NoOfLines = 0) OR (NoOfLines = NoOfZero) OR (NoOfZero <> 0) THEN
        BEGIN
          DocHead.Status := DocHead.Status::Inactive;
          DocHead."Change Jnl Processed PO" := FALSE;
          DocHead.MODIFY(TRUE);

          EXIT;
        END;

      IF NoOfLines = NoOfApproved THEN
        BEGIN
         IF DocHead.Status <> DocHead.Status::"Ready for posting" THEN
           BEGIN
             DocHead.Status := DocHead.Status::Approved;
             DocHead."Change Jnl Processed PO" := FALSE;
             DocHead.MODIFY(TRUE);
           END;

         EXIT;
        END;

      DocHead.Status := DocHead.Status::Active;
      DocHead."Change Jnl Processed PO" := FALSE;
      DocHead.MODIFY(TRUE);
    END;

    PROCEDURE SetDocumentStatus@1100285006(DocLineIn@1100285000 : Record 12013609);
    VAR
      DocHead@1100285001 : Record 12013608;
      DocLine@1100285003 : Record 12013609;
      PurchHeader@1100285009 : Record 38;
      NoOfLines@1100285004 : Integer;
      NoOfZero@1100285005 : Integer;
      NoOfApproved@1100285006 : Integer;
    BEGIN
      DocHead.GET(DocLineIn."Document ID");

      //348870
      DocHead.CALCFIELDS("Hold by Approver");
      IF DocHead."Hold by Approver" THEN
      //348870
        EXIT;

      IF DocHead."Document Type" IN [DocHead."Document Type"::Quote,
                                     DocHead."Document Type"::Order] THEN BEGIN
        PurchHeader.GET(DocHead."Document Type",DocHead."Document No.");
        IF PurchHeader.Status = PurchHeader.Status::Open THEN
          EXIT;
      END;

      DocLine.RESET;
      DocLine.SETCURRENTKEY("Document ID",Flowstatus);
      DocLine.SETRANGE("Document ID",DocLineIn."Document ID");
      NoOfLines := DocLine.COUNT;
      DocLine.SETRANGE(Flowstatus, 0);
      NoOfZero := DocLine.COUNT;
      DocLine.SETRANGE(Flowstatus, DocLine.Flowstatus::Approved);
      NoOfApproved := DocLine.COUNT;

      IF (NoOfLines = 0) OR (NoOfLines = NoOfZero) THEN
        BEGIN
          DocHead.Status := DocHead.Status::Inactive;
          DocHead."Change Jnl Processed PO" := FALSE;
          DocHead.MODIFY(TRUE);

          EXIT;
        END;

      IF NoOfLines = NoOfApproved THEN
        BEGIN
          IF (DocHead.Status <> DocHead.Status::"Ready for posting") AND
            //348875
             (DocHead.Status <> DocHead.Status::Received) THEN
            //348875
            BEGIN
              DocHead.GET(DocLineIn."Document ID");
              DocHead.Status := DocHead.Status::Approved;
              DocHead."Change Jnl Processed PO" := FALSE;
              DocHead.MODIFY(TRUE);
            END;

          EXIT;
        END;

      DocHead.Status := DocHead.Status::Active;
      DocHead."Change Jnl Processed PO" := FALSE;
      DocHead.MODIFY(TRUE);
    END;

    PROCEDURE FinishOneLine@1100285007(DocLineIn@1100285000 : Record 12013609;VAR DocLineApp@1100285002 : Record 12013610);
    VAR
      FinishApprovalOneLineOption@1100285001 : Report 12013636;
    BEGIN
      FinishApprovalOneLineOption.SetDocLine(DocLineIn,DocLineApp);
      FinishApprovalOneLineOption.SetFlowStatus(0);
      FinishApprovalOneLineOption.RUNMODAL;
    END;

    PROCEDURE RejectOneLine@1100285024(DocLineIn@1100285000 : Record 12013609;VAR DocLineApp@1100285002 : Record 12013610);
    VAR
      FinishApprovalOneLineOption@1100285001 : Report 12013636;
    BEGIN
      FinishApprovalOneLineOption.SetDocLine(DocLineIn,DocLineApp);
      FinishApprovalOneLineOption.SetFlowStatus(1);
      FinishApprovalOneLineOption.RUNMODAL;
    END;

    PROCEDURE FinishOneLineUpdate@1100285020(DocLineIn@1100285000 : Record 12013609;VAR DocLineApp@1100285002 : Record 12013610;FinishComment@1100285003 : Text[250];FlowStatus@1100285001 : Integer);
    BEGIN
      DocLineApp."Approval Date" := CREATEDATETIME(WORKDATE, TIME);
      DocLineApp."Approved By" := USERID;
      IF FlowStatus = 0 THEN
        DocLineApp.Flowstatus := DocLineApp.Flowstatus::Approved
      ELSE
        IF FlowStatus = 1 THEN
          DocLineApp.Flowstatus := DocLineApp.Flowstatus::Rejected;

      DocLineApp.Comment := FinishComment;
      DocLineApp.MODIFY(FALSE);

      IF DocLineApp.Flowstatus <> DocLineApp.Flowstatus::Rejected THEN BEGIN
        DocLineApp.ApprovalStatus(DocLineApp,'Update');

        DocLineApp.RESET;
        DocLineApp.SETCURRENTKEY("Document Line ID");
        DocLineApp.SETRANGE("Document Line ID", DocLineIn.ID);
        DocLineApp.SETFILTER(Flowstatus,'<>%1',DocLineApp.Flowstatus);
        IF NOT DocLineApp.FINDFIRST THEN
          BEGIN
            DocLineIn.GET(DocLineIn.ID);
            DocLineIn.Flowstatus := DocLineApp.Flowstatus;
            DocLineIn.MODIFY(TRUE);

            DocLineIn.SetDocumentStatus(DocLineIn);
          END;
      END
      ELSE BEGIN
        DocLineIn.GET(DocLineIn.ID);
        DocLineIn.Flowstatus := DocLineApp.Flowstatus;
        DocLineIn.MODIFY(TRUE);

        DocLineIn.SetDocumentStatus(DocLineIn);
      END;
    END;

    PROCEDURE CalcAmount@1100285008();
    BEGIN
      Amount := Quantity * "Direct Unit Cost" * (1 - "Line Discount %"/100);
    END;

    PROCEDURE HoldLine@1100285001(DocLineApp@1100285002 : Record 12013610);
    VAR
      HoldLineOption@1100285001 : Report 12013634;
      ReleaseLineOption@1100285004 : Report 12013637;
    BEGIN
      IF DocLineApp.Flowstatus = DocLineApp.Flowstatus::"On hold" THEN BEGIN
        ReleaseLineOption.SetDocLine(DocLineApp);
        ReleaseLineOption.RUNMODAL;
      END
      ELSE BEGIN
        HoldLineOption.SetDocLine(DocLineApp);
        HoldLineOption.RUNMODAL;
      END;
    END;

    PROCEDURE HoldLineUpdate@1100285021(DocLineApp@1100285002 : Record 12013610;FinishComment@1100285001 : Text[250];FinishCode@1100285005 : Option);
    VAR
      DocLineApp2@1100285000 : Record 12013610;
      DocLineApp3@1100285004 : Record 12013610;
    BEGIN
      CASE FinishCode OF
        0: // Hold line
          BEGIN
            DocLineApp.Comment := FinishComment;
            DocLineApp.Flowstatus := DocLineApp.Flowstatus::"On hold";
            DocLineApp."Approval Date" := CREATEDATETIME(WORKDATE, TIME);
            DocLineApp."Approved By" := USERID;
            DocLineApp.MODIFY(FALSE);
          END;
        1: // Hold all lines
          BEGIN
            DocLineApp2.RESET;
            DocLineApp2.SETCURRENTKEY("Document No.");
            DocLineApp2.SETRANGE("Company Name",DocLineApp."Company Name");
            DocLineApp2.SETRANGE("Document Type",DocLineApp."Document Type");
            DocLineApp2.SETRANGE("Document No.",DocLineApp."Document No.");
            DocLineApp2.SETRANGE(Flowstatus,DocLineApp2.Flowstatus::Current);
            IF DocLineApp2.FINDSET(TRUE,TRUE) THEN
              REPEAT
                DocLineApp3 := DocLineApp2;
                DocLineApp3.Comment := FinishComment;
                DocLineApp3.Flowstatus := DocLineApp.Flowstatus::"On hold";
                DocLineApp3."Approval Date" := CREATEDATETIME(WORKDATE, TIME);
                DocLineApp3."Approved By" := USERID;
                DocLineApp3.MODIFY(FALSE);
              UNTIL DocLineApp2.NEXT = 0;
          END;
      END;
    END;

    PROCEDURE ReleaseLineUpdate@1100285022(DocLineApp@1100285002 : Record 12013610;FinishCode@1100285000 : Option);
    VAR
      DocLineApp2@1100285001 : Record 12013610;
      DocLineApp3@1100285003 : Record 12013610;
      DocLineApp4@1100285004 : Record 12013610;
    BEGIN
      CASE FinishCode OF
        0: // Release line
          BEGIN
            DocLineApp.Flowstatus := DocLineApp.Flowstatus::Current;
            DocLineApp."Approval Date" := CREATEDATETIME(0D, 0T);
            DocLineApp."Approved By" := '';
            DocLineApp.MODIFY(FALSE);

            DocLineApp2.RESET;
            DocLineApp2.SETCURRENTKEY("Document Line ID","Approver Order");
            DocLineApp2.SETRANGE("Document Line ID",DocLineApp2."Document Line ID");
            DocLineApp2.SETFILTER("Approver Order",'>%1',DocLineApp."Approver Order");
            IF DocLineApp2.FINDSET(TRUE) THEN
              REPEAT
                DocLineApp2.Flowstatus := DocLineApp2.Flowstatus::"Not processed";
                DocLineApp2.MODIFY(FALSE);
              UNTIL DocLineApp2.NEXT = 0;
          END;

        1: // Release all lines
          BEGIN
            DocLineApp2.RESET;
            DocLineApp2.SETCURRENTKEY("Document No.");
            DocLineApp2.SETRANGE("Company Name",DocLineApp."Company Name");
            DocLineApp2.SETRANGE("Document Type",DocLineApp."Document Type");
            DocLineApp2.SETRANGE("Document No.",DocLineApp."Document No.");
            DocLineApp2.SETRANGE(Flowstatus,DocLineApp2.Flowstatus::"On hold");
            IF DocLineApp2.FINDSET(TRUE,TRUE) THEN
              REPEAT
                DocLineApp4 := DocLineApp2;
                DocLineApp4.Flowstatus := DocLineApp4.Flowstatus::Current;
                DocLineApp4."Approval Date" := CREATEDATETIME(0D, 0T);
                DocLineApp4."Approved By" := '';
                DocLineApp4.MODIFY(FALSE);

                DocLineApp3.RESET;
                DocLineApp3.SETCURRENTKEY("Document Line ID","Approver Order");
                DocLineApp3.SETRANGE("Document Line ID",DocLineApp2."Document Line ID");
                DocLineApp3.SETFILTER("Approver Order",'>%1',DocLineApp2."Approver Order");
                IF DocLineApp3.FINDSET(TRUE) THEN
                  BEGIN
                    DocLineApp3.Flowstatus := DocLineApp3.Flowstatus::"Not processed";
                    DocLineApp3.MODIFY(FALSE);
                  END;
              UNTIL DocLineApp2.NEXT = 0;
          END;
      END;
    END;

    PROCEDURE UpdateExtraFromDocLine@1100285009(LineField@1100285000 : Code[10];DocLineXrec@1100285001 : Record 12013609;DocLine@1100285002 : Record 12013609);
    VAR
      DocLineDim@1100285006 : Record 12013611;
      Column@1100285005 : Record 12013661;
      Empty@1100285003 : Boolean;
      ColumnID@1100285004 : Integer;
    BEGIN
      Empty := FALSE;

      DocLineDim.RESET;
      DocLineDim.SETCURRENTKEY("Document Line ID");
      DocLineDim.SETRANGE("Document Line ID", DocLine.ID);

      CASE LineField OF
        'G_LACCOUNT','LINETYPE':
          BEGIN
            CASE DocLineXrec."Line Type" OF
              1 : DocLineDim.SETRANGE("Dimension Code",'G_LACCOUNT');
              2 : DocLineDim.SETRANGE("Dimension Code",'ITEM');
              4 : DocLineDim.SETRANGE("Dimension Code",'FIXEDASSET');
              5 : DocLineDim.SETRANGE("Dimension Code",'CHARGE');
            END;

           IF (DocLine."Line Type" = 0) OR (DocLine."No." = '') THEN
             Empty := TRUE;
          END;

        'JOB':
           BEGIN
             IF DocLine."Job No." = '' THEN
               Empty := TRUE;

             DocLineDim.SETRANGE("Dimension Code",'JOB');
           END;

        'PERCODE':
           BEGIN
             IF DocLine."Periodic Template Code" = '' THEN
               Empty := TRUE;

             DocLineDim.SETRANGE("Dimension Code",'PERCODE');
           END;

        'PERDATE':
           BEGIN
             IF DocLine."Periodic Starting Date" = 0D THEN
               Empty := TRUE;

             DocLineDim.SETRANGE("Dimension Code",'PERDATE');
           END;
      END;

      IF DocLineDim.FIND('-') THEN
        BEGIN
          IF Empty THEN
            DocLineDim.DELETE
          ELSE
            BEGIN
              CASE LineField OF
                'LINETYPE':
                   BEGIN
                     CASE DocLine."Line Type" OF
                       1 : DocLineDim."Dimension Code" := 'G_LACCOUNT';
                       2 : DocLineDim."Dimension Code" := 'ITEM';
                       4 : DocLineDim."Dimension Code" := 'FIXEDASSET';
                       5 : DocLineDim."Dimension Code" := 'CHARGE';
                     END;

                     DocLineDim."Dimension Value" := DocLine."No.";
                   END;

                'JOB': DocLineDim."Dimension Value" := DocLine."Job No.";

                'PERCODE': DocLineDim."Dimension Value" := DocLine."Periodic Template Code";

                'PERDATE':
                  IF DocLine."Periodic Starting Date" <> 0D THEN
                    DocLineDim."Dimension Value" := '20' + FORMAT(DocLine."Periodic Starting Date");
              END;

              DocLineDim.MODIFY(FALSE);
           END;
        END
      ELSE
        BEGIN
          IF (NOT Empty) THEN
            BEGIN
              DocLineDim.INIT;
              DocLineDim.ID := 0;
              DocLineDim."Company Name" := COMPANYNAME;
              DocLineDim."Document Type" := DocLine."Document Type";
              DocLineDim."Document No." := DocLine."Document No.";
              DocLineDim."Line No." := DocLine."Line No.";

              IF LineField = 'LINETYPE' THEN
                BEGIN
                  CASE DocLine."Line Type" OF
                    1 : DocLineDim."Dimension Code" := 'G_LACCOUNT';
                    2 : DocLineDim."Dimension Code" := 'ITEM';
                    4 : DocLineDim."Dimension Code" := 'FIXEDASSET';
                    5 : DocLineDim."Dimension Code" := 'CHARGE';
                  END;
                END
              ELSE
                DocLineDim."Dimension Code" := LineField;

              DocLineDim."Document Line ID" := DocLine.ID;
              DocLineDim."Document ID" := DocLine."Document ID";

              CASE LineField OF
                'LINETYPE':
                  DocLineDim."Dimension Value" := DocLine."No.";

                'JOB':
                  DocLineDim."Dimension Value" := DocLine."Job No.";

                'PERCODE':
                  DocLineDim."Dimension Value" := DocLine."Periodic Template Code";

                'PERDATE':
                  IF DocLine."Periodic Starting Date" <> 0D THEN
                    DocLineDim."Dimension Value" := '20' + FORMAT(DocLine."Periodic Starting Date");
              END;

              ColumnID := ExFlow.GetColumnID(DocLineDim."Dimension Code");

              IF ColumnID <> 0 THEN
                IF Column.GET(COMPANYNAME,ColumnID) THEN
                  BEGIN
                    DocLineDim."Column ID" := Column.ID;
                    DocLineDim.INSERT;
                  END;
            END;
        END;
    END;

    PROCEDURE Changeable@1100285010();
    VAR
      AppSetup@1100285001 : Record 12013601;
      DocHead@1100285000 : Record 12013608;
    BEGIN
      IF NOT DoByPassControl THEN
        IF CurrFieldNo = 0 THEN
          EXIT;

      IF "Connected Line ID" <> 0 THEN
        EXIT;

      AppSetup.GET(COMPANYNAME, 0);

      DocHead.GET("Document ID");

      DocHead.CALCFIELDS("Hold by Approver");

      IF DocHead."Hold by Approver" THEN
        ERROR(EXF09);

      IF Flowstatus > Flowstatus::Active THEN BEGIN
        IF DocHead.Status = DocHead.Status::"Ready for posting" THEN
          ERROR(EXF42);

        IF NOT ExFlow.IsUserSuperior(COMPANYNAME, USERID) THEN
          ERROR(EXF08);

        IF Flowstatus <> Flowstatus::Rejected THEN
          IF NOT AppSetup."Suppress Approved Message" THEN
            IF NOT CONFIRM(EXF41) THEN
              ERROR(EXF48);
      END;

      IF (("Document Type" = "Document Type"::Quote) OR
         (("Document Type" = "Document Type"::Order) AND ("Connected Line ID" = 0))) THEN
        ERROR(EXF13);
    END;

    PROCEDURE ConnectedToReceipt@1100285011(FieldQuantity@1100285000 : Boolean);
    VAR
      PurchLine@1100285001 : Record 39;
      ReceiptLine@1100285002 : Record 121;
    BEGIN
      IF PurchLine.GET("Document Type", "Document No.", "Line No.") THEN
        IF PurchLine."Receipt No." <> '' THEN
          BEGIN
            IF FieldQuantity THEN
              BEGIN
                IF ReceiptLine.GET(PurchLine."Receipt No.", PurchLine."Receipt Line No.") THEN
                  IF Quantity > ReceiptLine."Qty. Rcd. Not Invoiced" THEN
                    ERROR(STRSUBSTNO(EXF11, ReceiptLine."Qty. Rcd. Not Invoiced"));
              END
            ELSE
              ERROR(EXF10);
          END;
    END;

    PROCEDURE ShowShortcutDimCode@1100285012(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    VAR
      ExDocLineDim@1100285000 : Record 12013611;
      i@1100285001 : Integer;
    BEGIN
      GetGLSetup;

      ExDocLineDim.RESET;
      ExDocLineDim.SETCURRENTKEY("Document Line ID");
      ExDocLineDim.SETRANGE("Document Line ID", ID);
      FOR i := 1 TO 8 DO BEGIN
        ShortcutDimCode[i] := '';
        IF GLSetupShortcutDimCode[i] <> '' THEN BEGIN
          ExDocLineDim.SETRANGE("Dimension Code", GLSetupShortcutDimCode[i]);
          IF ExDocLineDim.FINDFIRST THEN
            ShortcutDimCode[i] := ExDocLineDim."Dimension Value";
        END;
      END;
    END;

    PROCEDURE LookupShortcutDimCode@30(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimMgt@1100285001 : Codeunit 408;
      TempShortcutDimCode@1100285000 : Code[20];
    BEGIN
      TempShortcutDimCode := ShortcutDimCode;
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);

      IF TempShortcutDimCode <> ShortcutDimCode THEN
        ValidateShortcutDimCode(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      ExDocLineDim@1100285000 : Record 12013611;
      DimMgt@1100285003 : Codeunit 408;
    BEGIN
      DoByPassControl := TRUE;
      Changeable;

      GetGLSetup;

      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);

      ExDocLineDim.RESET;
      ExDocLineDim.SETCURRENTKEY("Document Line ID");
      ExDocLineDim.SETRANGE("Document Line ID", ID);
      ExDocLineDim.SETRANGE("Dimension Code", GLSetupShortcutDimCode[FieldNumber]);
      IF ExDocLineDim.FIND('-') THEN BEGIN
        ExDocLineDim."Dimension Value" := ShortcutDimCode;
        ExDocLineDim.MODIFY;
      END
      ELSE BEGIN
        ExDocLineDim.INIT;
        ExDocLineDim."Company Name" := "Company Name";
        ExDocLineDim."Document Type" := "Document Type";
        ExDocLineDim."Document No." := "Document No.";
        ExDocLineDim."Line No." := "Line No.";
        ExDocLineDim."Dimension Code" := GLSetupShortcutDimCode[FieldNumber];
        ExDocLineDim."Dimension Value" := ShortcutDimCode;
        ExDocLineDim."Column ID" := ExFlow.GetColumnID(GLSetupShortcutDimCode[FieldNumber]);
        IF ExDocLineDim."Column ID" = 0 THEN
          ERROR(EXF45);

        ExDocLineDim."Document Line ID" := ID;
        ExDocLineDim."Document ID" := "Document ID";
        ExDocLineDim.ID := 0;
        ExDocLineDim.INSERT;
      END;
    END;

    LOCAL PROCEDURE GetGLSetup@52();
    VAR
      GLSetup@1000 : Record 98;
    BEGIN
      IF NOT HasGotGLSetup THEN BEGIN
        GLSetup.GET;
        GLSetupShortcutDimCode[1] := GLSetup."Shortcut Dimension 1 Code";
        GLSetupShortcutDimCode[2] := GLSetup."Shortcut Dimension 2 Code";
        GLSetupShortcutDimCode[3] := GLSetup."Shortcut Dimension 3 Code";
        GLSetupShortcutDimCode[4] := GLSetup."Shortcut Dimension 4 Code";
        GLSetupShortcutDimCode[5] := GLSetup."Shortcut Dimension 5 Code";
        GLSetupShortcutDimCode[6] := GLSetup."Shortcut Dimension 6 Code";
        GLSetupShortcutDimCode[7] := GLSetup."Shortcut Dimension 7 Code";
        GLSetupShortcutDimCode[8] := GLSetup."Shortcut Dimension 8 Code";
        HasGotGLSetup := TRUE;
      END;
    END;

    PROCEDURE ShowCard@1100285014();
    BEGIN
      IF COMPANYNAME <> "Company Name" THEN
        ERROR(EXF46);

      Card;
    END;

    LOCAL PROCEDURE Card@1100285004();
    VAR
      PurchHeader@1100285000 : Record 38;
      PurchInvHeader@1100285001 : Record 122;
      PurchCrMemoHeader@1100285002 : Record 124;
    BEGIN
      PurchHeader.RESET;
      PurchHeader.SETRANGE("No.","Document No.");

      CASE "Document Type" OF
        "Document Type"::Invoice :
          BEGIN
            PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::Invoice);
            PAGE.RUNMODAL(51,PurchHeader);
          END;
        "Document Type"::"Credit Memo" :
          BEGIN
            PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::"Credit Memo");
            PAGE.RUNMODAL(52,PurchHeader);
          END;
        "Document Type"::Order :
          BEGIN
            PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::Order);
            PAGE.RUNMODAL(50,PurchHeader);
          END;
        "Document Type"::Quote :
          BEGIN
            PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::Quote);
            PAGE.RUNMODAL(49,PurchHeader);
          END;
        "Document Type"::"Posted Invoice" :
          BEGIN
            PurchInvHeader.SETRANGE("No.", "Document No.");
            PAGE.RUNMODAL(138,PurchInvHeader);
          END;
        "Document Type"::"Posted Credit Memo" :
          BEGIN
            PurchCrMemoHeader.SETRANGE("No.", "Document No.");
            PAGE.RUNMODAL(140,PurchCrMemoHeader);
          END;
      END;
    END;

    PROCEDURE RetrieveRecord@1100285013(VAR ExDocLine@1100285004 : Record 12013609;CompName@1100285000 : Text[30];DocType@1100285001 : Integer;DocNo@1100285002 : Code[20];LineNo@1100285003 : Integer) : Boolean;
    BEGIN
      WITH ExDocLine DO BEGIN
        RESET;
        CLEAR(ExDocLine);
        SETCURRENTKEY("Document No.");
        SETRANGE("Company Name", CompName);
        SETRANGE("Document Type", DocType);
        SETRANGE("Document No.", DocNo);
        SETRANGE("Line No.", LineNo);
        EXIT(FINDFIRST);
      END;
    END;

    PROCEDURE GetName@1100285015() : Text[50];
    VAR
      GLAccount@1100285000 : Record 15;
      Item@1100285001 : Record 27;
      FixedAsset@1100285002 : Record 5600;
      ItemCharge@1100285003 : Record 5800;
    BEGIN
      IF "No." = '' THEN
        EXIT('');

      CASE "Line Type" OF
        "Line Type"::"G/L Account":
          BEGIN
            IF GLAccount.GET("No.") THEN
              EXIT(GLAccount.Name);
          END;
        "Line Type"::Item:
          BEGIN
            IF Item.GET("No.") THEN
              EXIT(Item.Description);
          END;
        "Line Type"::"Fixed Asset":
          BEGIN
            IF FixedAsset.GET("No.") THEN
              EXIT(FixedAsset.Description);
          END;
        "Line Type"::"G/L Account":
          BEGIN
            IF ItemCharge.GET("No.") THEN
              EXIT(ItemCharge.Description);
          END;
      END;

      EXIT('');
    END;

    PROCEDURE DeleteLine@1100285016(NewDocID@1100285001 : Integer);
    VAR
      ExDeletedDoc@1100285007 : Record 12013622;
      ExDeletedDocLine@1100285004 : Record 12013623;
      ExDocLineApp@1100285003 : Record 12013610;
      ExDeletedDocLineApp@1100285005 : Record 12013624;
      ExDocLineDim@1100285002 : Record 12013611;
      ExDeletedDocLineDim@1100285000 : Record 12013625;
    BEGIN
      ExDeletedDocLine.INIT;
      ExDeletedDocLine.TRANSFERFIELDS(Rec);
      ExDeletedDocLine.ID := 0;
      IF NewDocID <> 0 THEN
        ExDeletedDocLine."Document ID" := NewDocID
      ELSE BEGIN
        ExDeletedDoc.RESET;
        ExDeletedDoc.SETCURRENTKEY("Document No.");
        ExDeletedDoc.SETRANGE("Company Name", "Company Name");
        ExDeletedDoc.SETRANGE("Document Type", "Document Type");
        ExDeletedDoc.SETRANGE("Document No.", "Document No.");
        IF ExDeletedDoc.FINDFIRST THEN
          ExDeletedDocLine."Document ID" := ExDeletedDoc.ID;
      END;
      ExDeletedDocLine."Deleted By" := USERID;
      ExDeletedDocLine."Deleted Date" := CREATEDATETIME(TODAY,TIME);
      ExDeletedDocLine."Old ID" := ID;
      ExDeletedDocLine."Old Document ID" := "Document ID";
      ExDeletedDocLine.INSERT;

      UndoReceipt(TRUE);

      ExDocLineApp.RESET;
      ExDocLineApp.SETCURRENTKEY("Document Line ID");
      ExDocLineApp.SETRANGE("Document Line ID", ID);
      IF ExDocLineApp.FINDSET(TRUE) THEN BEGIN
        REPEAT
          ExDeletedDocLineApp.INIT;
          ExDeletedDocLineApp.TRANSFERFIELDS(ExDocLineApp);
          ExDeletedDocLineApp."Document Line ID" := ExDeletedDocLine.ID;
          ExDeletedDocLineApp.ID := 0;
          ExDeletedDocLineApp."Deleted By" := USERID;
          ExDeletedDocLineApp."Deleted Date" := CREATEDATETIME(TODAY,TIME);
          ExDeletedDocLineApp."Old ID" := ExDocLineApp.ID;
          ExDeletedDocLineApp."Old Document Line ID" := ExDocLineApp."Document Line ID";
          ExDeletedDocLineApp.INSERT;
        UNTIL ExDocLineApp.NEXT = 0;

        ExDocLineApp.DELETEALL;
      END;

      ExDocLineDim.RESET;
      ExDocLineDim.SETCURRENTKEY("Document Line ID");
      ExDocLineDim.SETRANGE("Document Line ID", ID);
      IF ExDocLineDim.FINDSET(TRUE) THEN BEGIN
        REPEAT
          ExDeletedDocLineDim.INIT;
          ExDeletedDocLineDim.TRANSFERFIELDS(ExDocLineDim);
          ExDeletedDocLineDim."Document Line ID" := ExDeletedDocLine.ID;
          ExDeletedDocLineDim.ID := 0;
          ExDeletedDocLineDim."Deleted By" := USERID;
          ExDeletedDocLineDim."Deleted Date" := CREATEDATETIME(TODAY,TIME);
          ExDeletedDocLineDim."Old ID" := ExDocLineDim.ID;
          ExDeletedDocLineDim."Old Document Line ID" := ExDocLineDim."Document Line ID";
          ExDeletedDocLineDim.INSERT;
        UNTIL ExDocLineDim.NEXT = 0;

        ExDocLineDim.DELETEALL;
      END;
    END;

    PROCEDURE InitRecord@1100285017(xDocLine@1100285000 : Record 12013609;BelowxRec@1100285002 : Boolean);
    VAR
      DocHead@1100285001 : Record 12013608;
      TempLineNo@1100285003 : Integer;
    BEGIN
      IF DocHead.GET("Document ID") THEN BEGIN
        "Company Name" := DocHead."Company Name";
        "Document Type" := DocHead."Document Type";
        "Document No." := DocHead."Document No.";
        IF xDocLine.GET(xDocLine.ID) THEN BEGIN
          IF BelowxRec THEN
            "Line No." := xDocLine."Line No." + 10000
          ELSE BEGIN
            TempLineNo := GetPreviousLineNo(Rec,xDocLine."Line No.");
            "Line No." := TempLineNo + ((xDocLine."Line No." -  TempLineNo) / 2);
          END;
        END;

        IF "Line No." = 0 THEN
          "Line No." := 10000;
      END;
    END;

    PROCEDURE GetPreviousLineNo@1100285018(ExDocLine@1100285000 : Record 12013609;xLineNo@1100285002 : Integer) : Integer;
    VAR
      ExDocLine2@1100285001 : Record 12013609;
    BEGIN
      WITH ExDocLine2 DO BEGIN
        SETCURRENTKEY("Company Name","Document Type","Document No.","Line No.");
        SETRANGE("Company Name", ExDocLine."Company Name");
        SETRANGE("Document Type", ExDocLine."Document Type");
        SETRANGE("Document No.", ExDocLine."Document No.");
        SETFILTER("Line No.", '<%1', xLineNo);
        IF FINDLAST THEN
          EXIT("Line No.")
        ELSE
          EXIT(0);
      END;
    END;

    PROCEDURE UndoReceipt@1100285023(Delete@1100285005 : Boolean);
    VAR
      DocHead@1100285002 : Record 12013608;
      ConnExDoc@1100285001 : Record 12013609;
      ConnExDoc2@1100285003 : Record 12013609;
      ConnPurchLine@1100285000 : Record 39;
      TotalQtyReceived@1100285004 : Decimal;
    BEGIN
      IF "Connected Line ID" <> 0 THEN BEGIN
        IF ConnExDoc.GET("Connected Line ID") THEN BEGIN
          ConnExDoc2.RESET;
          ConnExDoc2.SETCURRENTKEY("Connected Line ID");
          ConnExDoc2.SETRANGE("Connected Line ID", "Connected Line ID");
          IF ConnExDoc2.FINDSET THEN
            REPEAT
              IF ConnExDoc2.ID = ID THEN BEGIN
                IF NOT Delete THEN
                  TotalQtyReceived := TotalQtyReceived + ABS(Quantity);
              END
              ELSE
                TotalQtyReceived := TotalQtyReceived + ABS(ConnExDoc2.Quantity);
            UNTIL ConnExDoc2.NEXT = 0;

          ConnPurchLine.CHANGECOMPANY("Company Name");
          ConnPurchLine.GET(ConnExDoc."Document Type",ConnExDoc."Document No.",ConnExDoc."Line No.");
          IF ConnPurchLine."Quantity Invoiced" > TotalQtyReceived THEN
            ERROR(EXF52);

          DocHead.GET("Document ID");
          IF DocHead.Status = DocHead.Status::Invoiced THEN
            ERROR(EXF47);

          IF ConnPurchLine."Document Type" = ConnPurchLine."Document Type"::"Return Order" THEN BEGIN
            IF ConnPurchLine."Return Qty. Shipped" >= Quantity THEN BEGIN
              ConnPurchLine."Return Qty. Shipped" := TotalQtyReceived;
              ConnPurchLine."Return Qty. Shipped (Base)" := TotalQtyReceived;
              ConnPurchLine.InitOutstanding;
              ConnPurchLine.InitQtyToShip;
              ConnPurchLine.MODIFY;

              IF DocHead.Status = DocHead.Status::Received THEN BEGIN
                DocHead.Status := DocHead.Status::Approved;
                DocHead.MODIFY;
              END;
            END;
          END
          ELSE
            IF ConnPurchLine."Document Type" = ConnPurchLine."Document Type"::Order THEN BEGIN
              IF ConnPurchLine."Quantity Received" >= Quantity THEN BEGIN
                ConnPurchLine."Quantity Received" := TotalQtyReceived;
                ConnPurchLine."Qty. Received (Base)" := TotalQtyReceived;
                ConnPurchLine.InitOutstanding;
                ConnPurchLine.InitQtyToReceive;
                ConnPurchLine.MODIFY;

                IF DocHead.Status = DocHead.Status::Received THEN BEGIN
                  DocHead.Status := DocHead.Status::Approved;
                  DocHead.MODIFY;
                END;
              END;
            END;
        END;
      END;
    END;

    PROCEDURE ShowDim@1100285025();
    VAR
      DocLineDim@1100285004 : Record 12013611;
    BEGIN
      DocLineDim.RESET;
      DocLineDim.SETCURRENTKEY("Document Line ID");
      DocLineDim.SETRANGE("Document Line ID",ID);
      PAGE.RUN(12013611,DocLineDim);
    END;

    PROCEDURE ChangedRow@1100285026();
    VAR
      DocLine@1100285000 : Record 12013609;
    BEGIN
      DocLine.RESET;
      DocLine.SETCURRENTKEY("Document ID");
      DocLine.SETRANGE("Document ID", "Document ID");
      IF DocLine.FINDFIRST THEN
        PAGE.RUNMODAL(12013616, DocLine);
    END;

    PROCEDURE ShowNonDimCodes@1100285028();
    VAR
      ExDocLineDim@1100285000 : Record 12013611;
      UpdatePurchLine@1100285002 : Codeunit 12013609;
    BEGIN
      ExDocLineDim.RESET;
      ExDocLineDim.SETCURRENTKEY("Document Line ID");
      ExDocLineDim.SETRANGE("Document Line ID", ID);
      // IF "Periodic Template Code" = '' THEN BEGIN
      // fields not updated from the web
      ExDocLineDim.SETRANGE("Dimension Code", 'PERCODE');
      IF ExDocLineDim.FINDFIRST THEN
        "Periodic Template Code" := ExDocLineDim."Dimension Value";
      // END;

      // IF "Periodic Starting Date" = 0D THEN BEGIN
      ExDocLineDim.SETRANGE("Dimension Code", 'PERDATE');
      IF ExDocLineDim.FINDFIRST THEN
        "Periodic Starting Date" := UpdatePurchLine.GetAddDateFromDocLineDim(Rec,ExDocLineDim."Dimension Value");
      // END;

      // IF "Job No." = '' THEN BEGIN
      ExDocLineDim.SETRANGE("Dimension Code", 'JOB');
      IF ExDocLineDim.FINDFIRST THEN
        "Job No." := ExDocLineDim."Dimension Value";
      // END;
    END;

    PROCEDURE GetInvoiceToCustValue@1100285027() : Boolean;
    VAR
      UpdatePurchLine@1100285001 : Codeunit 12013609;
    BEGIN
      EXIT(UpdatePurchLine.GetAddBooleanFromDocLineDim(Rec,'CUSTOMERINV'));
    END;

    PROCEDURE GetInvoicingAmtValue@1100285029() : Decimal;
    VAR
      UpdatePurchLine@1100285001 : Codeunit 12013609;
    BEGIN
      EXIT(UpdatePurchLine.GetAddDecimalFromDocLineDim(Rec,'AMOUNTINV'));
    END;

    PROCEDURE GetStartDateForInvValue@1100285030() : Date;
    VAR
      UpdatePurchLine@1100285001 : Codeunit 12013609;
    BEGIN
      EXIT(UpdatePurchLine.GetAddDateFromDocLineDim(Rec,'INVDATE'));
    END;

    PROCEDURE GetInvCodeValue@1100285031() : Code[20];
    VAR
      UpdatePurchLine@1100285001 : Codeunit 12013609;
    BEGIN
      EXIT(UpdatePurchLine.GetAddFromDocLineDim(Rec,'INV_CODE'));
    END;

    PROCEDURE GetCustomerValue@1100285033() : Code[20];
    VAR
      UpdatePurchLine@1100285000 : Codeunit 12013609;
    BEGIN
      EXIT(UpdatePurchLine.GetAddFromDocLineDim(Rec,'CUSTOMER'));
    END;

    PROCEDURE "*** EXF4PS ***"@3();
    BEGIN
    END;

    PROCEDURE GetDim2@4(VAR _code@1000 : Code[20]);
    VAR
      _exDocLineDim@1002 : Record 12013611;
      _colID@1001 : Integer;
    BEGIN
      GLSetup.GET();
      _colID := ExFlow.GetColumnID(GLSetup."Global Dimension 2 Code");
      _exDocLineDim.SETRANGE("Company Name","Company Name");
      _exDocLineDim.SETRANGE("Document Type","Document Type");
      _exDocLineDim.SETRANGE("Document No.","Document No.");
      _exDocLineDim.SETRANGE("Line No.","Line No.");
      _exDocLineDim.SETRANGE("Dimension Code",GLSetup."Global Dimension 2 Code");
      IF NOT _exDocLineDim.FINDFIRST() THEN
        CLEAR(_exDocLineDim);
      _code := _exDocLineDim."Dimension Value";
    END;

    PROCEDURE GetHeader@5(VAR _exDoc@1000 : Record 12013608);
    BEGIN
      IF _exDoc.ID <> "Document ID" THEN
        _exDoc.GET("Document ID");
    END;

    BEGIN
    END.
  }
}

