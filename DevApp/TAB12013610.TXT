OBJECT Table 12013610 EX Document Line Approver
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF350000;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=VAR
               DocLine@1100285000 : Record 12013609;
             BEGIN
               ApprovalStatus(Rec,'New');
               DocLine.RetrieveRecord(DocLine,"Company Name", "Document Type", "Document No.", "Line No.");
               "Document Line ID" := DocLine.ID;
               "Document ID" := DocLine."Document ID";
             END;

    OnModify=BEGIN
               ApprovalStatus(Rec,'Update');
             END;

    OnDelete=BEGIN
               ApprovalStatus(Rec,'Delete');

               UpdatePurchLineOnDelete;
             END;

    CaptionML=ENU=Approvers;
  }
  FIELDS
  {
    { 1   ;   ;Company Name        ;Text30        ;TableRelation=Company;
                                                   CaptionML=ENU=Company Name }
    { 2   ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Posted Invoice,Posted Credit Memo;
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Posted Invoice,Posted Credit Memo }
    { 3   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 5   ;   ;Approver Order      ;Integer       ;CaptionML=ENU=Approver Order }
    { 10  ;   ;Approver            ;Code50        ;TableRelation="EX User Group".Code WHERE (Company Name=FIELD(Company Name),
                                                                                             Blocked=CONST(No));
                                                   OnValidate=VAR
                                                                GroupName@1100285000 : Text[100];
                                                              BEGIN
                                                                Changeable;

                                                                Approver := ExFlow.FindUserGroup(Approver,GroupName,FALSE);

                                                                IF CurrFieldNo = FIELDNO(Approver) THEN
                                                                  UpdatePurchLine;

                                                                IF Flowstatus = Flowstatus::Current THEN
                                                                  "Flowstatus Change Date" := CURRENTDATETIME;
                                                              END;

                                                   CaptionML=ENU=Approver Group }
    { 12  ;   ;Approval Date       ;DateTime      ;CaptionML=ENU=Approval Date }
    { 13  ;   ;Approved By         ;Code50        ;CaptionML=ENU=Approved By }
    { 14  ;   ;Comment             ;Text180       ;OnValidate=BEGIN
                                                                Changeable;
                                                              END;

                                                   CaptionML=ENU=Comments }
    { 15  ;   ;Reminder Sent Date  ;DateTime      ;CaptionML=ENU=Reminder Sent }
    { 16  ;   ;Reminder Status     ;Integer       ;CaptionML=ENU=Reminder Status }
    { 17  ;   ;No. of Reminders    ;Integer       ;CaptionML=ENU=No. of Reminders }
    { 18  ;   ;Flowstatus          ;Option        ;OnValidate=BEGIN
                                                                IF (Flowstatus = Flowstatus::Current) THEN
                                                                  "Flowstatus Change Date" := CURRENTDATETIME
                                                                ELSE
                                                                  IF (Flowstatus = Flowstatus::"Not processed") THEN
                                                                    CLEAR("Flowstatus Change Date");
                                                              END;

                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Not processed,Current,Approved,Rejected,On hold;
                                                   OptionString=Not processed,Current,Approved,Rejected,On hold }
    { 19  ;   ;No.                 ;Code20        ;CaptionML=ENU=No.;
                                                   Description=Nav int }
    { 20  ;   ;Days to Due Date    ;Integer       ;CaptionML=ENU=Days to Due Date;
                                                   Description=Nav int }
    { 21  ;   ;Processing Days     ;Integer       ;CaptionML=ENU=Processing Days;
                                                   Description=Nav int }
    { 24  ;   ;Approver Name       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("EX User Group".Name WHERE (Company Name=FIELD(Company Name),
                                                                                                  Code=FIELD(Approver)));
                                                   CaptionML=ENU=Approver Group Name;
                                                   Description=Nav int;
                                                   Editable=No }
    { 25  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date;
                                                   Description=Nav int }
    { 26  ;   ;Description         ;Text100       ;CaptionML=ENU=Description;
                                                   Description=Nav int }
    { 27  ;   ;Line Amount         ;Decimal       ;CaptionML=ENU=Line Amount;
                                                   Description=Nav int }
    { 28  ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date;
                                                   Description=Nav int }
    { 29  ;   ;Document Line ID    ;Integer       ;CaptionML=ENU=Document Line ID }
    { 30  ;   ;ID                  ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=ENU=ID }
    { 31  ;   ;Document ID         ;Integer       ;CaptionML=ENU=Document ID }
    { 500 ;   ;Auto Approved       ;Boolean       ;CaptionML=ENU=Auto Approved }
    { 600 ;   ;Changed By          ;Code50        ;CaptionML=ENU=Changed By;
                                                   Editable=No }
    { 601 ;   ;Change Date         ;DateTime      ;CaptionML=ENU=Change Date;
                                                   Editable=No }
    { 602 ;   ;Flowstatus Change Date;DateTime    ;CaptionML=ENU=Flowstatus Change Date }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=Yes }
    {    ;Document No.                             }
    {    ;Document No.,Line No.                    }
    {    ;Flowstatus,Document Type                 }
    {    ;Company Name,Document Type,Document No.,Line No.,Approver Order }
    {    ;Company Name,Flowstatus,Days to Due Date,Approver }
    {    ;Company Name,Approver,Days to Due Date   }
    {    ;Document Line ID                         }
    {    ;Document ID                              }
    {    ;Document Line ID,Approver Order          }
    {    ;Approval Date,Approved By                }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EXF03@1100285004 : TextConst 'ENU=Restart flow before changing template.';
      EXF04@1100285006 : TextConst 'ENU=The Document is on hold!';
      EXF05@1100285007 : TextConst 'ENU=The Document is rejected.';
      EXF08@1100285011 : TextConst 'ENU=The Line is approved!';
      EXF41@1100285012 : TextConst 'ENU=Warning! The line has been approved!\\Do you still want to update line?';
      EXF42@1100285013 : TextConst 'ENU=The Line is Ready for Posting and needs to be restarted before it can be changed!';
      EXF43@1100285016 : TextConst 'ENU=You are not allowed to insert approvers!';
      EXF44@1100285015 : TextConst 'ENU=You are not allowed to change approvers!';
      EXF45@1100285014 : TextConst 'ENU=You are not allowed to delete approvers!';
      ExFlow@1100285005 : Codeunit 12013601;
      ExDimMgt@1100285019 : Codeunit 12013605;
      EXF47@1100285002 : TextConst 'ENU=Operation aborted.';

    PROCEDURE ApprovalStatus@1100285000(VAR DocLineApp@1100285000 : Record 12013610;Action@1100285001 : Text[10]);
    VAR
      TempDocLineApp@1100285008 : TEMPORARY Record 12013610;
      AppSetup@1100285007 : Record 12013601;
      DocLineApp2@1100285002 : Record 12013610;
      DocHead@1100285004 : Record 12013608;
      DocLine@1100285005 : Record 12013609;
      PurchHeader@1100285006 : Record 38;
      First@1100285003 : Boolean;
    BEGIN
      AppSetup.GET(COMPANYNAME,0);

      IF (Action <> 'Delete') AND (DocLineApp.Flowstatus = DocLineApp.Flowstatus::"On hold") THEN
        EXIT;

      IF DocHead.RetrieveRecord(DocHead,DocLineApp."Company Name",DocLineApp."Document Type",DocLineApp."Document No.") THEN BEGIN
        //348870
        DocHead.CALCFIELDS("Hold by Approver");
        IF DocHead."Hold by Approver" THEN
        //348870
          ERROR(EXF04);

        IF (DocHead.Status >= DocHead.Status::Approved) AND (NOT AppSetup."Purchase Order") AND
           (DocHead."Document Type" = DocHead."Document Type"::Order)THEN
          EXIT;

        IF (DocHead.Status = DocHead.Status::Inactive) AND
           (DocHead."Document Type" = DocHead."Document Type"::Order) THEN
          BEGIN
            PurchHeader.GET(DocHead."Document Type",DocHead."Document No.");
            IF PurchHeader.Status = PurchHeader.Status::Open THEN
              EXIT;
          END;
      END;

      IF (Action <> 'Delete') AND (DocLineApp.Flowstatus = DocLineApp.Flowstatus::Rejected) THEN
        ERROR(EXF05);

      TempDocLineApp.RESET;
      TempDocLineApp.DELETEALL;

      DocLineApp2.RESET;
      DocLineApp2.SETCURRENTKEY("Document No.");
      DocLineApp2.SETRANGE("Company Name",DocLineApp."Company Name");
      DocLineApp2.SETRANGE("Document Type",DocLineApp."Document Type");
      DocLineApp2.SETRANGE("Document No.",DocLineApp."Document No.");
      DocLineApp2.SETRANGE("Line No.",DocLineApp."Line No.");
      DocLineApp2.SETFILTER(Flowstatus,'<%1',2);

      IF DocLineApp2.FINDSET THEN
        REPEAT
          TempDocLineApp.COPY(DocLineApp2);
          TempDocLineApp.INSERT(FALSE);
        UNTIL DocLineApp2.NEXT = 0;

      IF Action = 'Delete' THEN
        IF TempDocLineApp.GET(DocLineApp.ID) THEN
          TempDocLineApp.DELETE(FALSE);

      IF Action = 'New' THEN
        BEGIN
          TempDocLineApp.COPY(DocLineApp);
          TempDocLineApp.INSERT(FALSE);
        END;

      IF Action = 'Update' THEN
        BEGIN
          IF TempDocLineApp.GET(DocLineApp.ID) THEN BEGIN
            TempDocLineApp.Flowstatus := DocLineApp.Flowstatus;
            TempDocLineApp.MODIFY(FALSE);
          END;
        END;

      TempDocLineApp.RESET;
      TempDocLineApp.SETCURRENTKEY("Company Name","Document Type","Document No.","Line No.","Approver Order");
      TempDocLineApp.SETRANGE("Company Name",DocLineApp."Company Name");
      TempDocLineApp.SETRANGE("Document Type",DocLineApp."Document Type");
      TempDocLineApp.SETRANGE("Document No.",DocLineApp."Document No.");
      TempDocLineApp.SETRANGE("Line No.",DocLineApp."Line No.");
      TempDocLineApp.SETFILTER(Flowstatus,'<%1',2);

      First := TRUE;
      IF TempDocLineApp.FIND('-') THEN
        REPEAT
          IF First THEN
            BEGIN
              First := FALSE;

              IF (DocLineApp."Approver Order" = TempDocLineApp."Approver Order") THEN
                 DocLineApp.VALIDATE(Flowstatus,1)
              ELSE
                BEGIN
                  DocLineApp2.GET(TempDocLineApp.ID);
                  DocLineApp2.VALIDATE(Flowstatus,1);
                  DocLineApp2.MODIFY(FALSE);

                  IF (DocLineApp2.ID = DocLineApp.ID) THEN
                    DocLineApp.VALIDATE(Flowstatus,1);
                END
            END
          ELSE
            BEGIN
              IF (DocLineApp."Approver Order" = TempDocLineApp."Approver Order") THEN
                DocLineApp.VALIDATE(Flowstatus,0)
              ELSE
                BEGIN
                  DocLineApp2.GET(TempDocLineApp.ID);
                  DocLineApp2.VALIDATE(Flowstatus,0);
                  DocLineApp2.MODIFY(FALSE);

                  IF (DocLineApp2.ID = DocLineApp.ID) THEN
                    DocLineApp.VALIDATE(Flowstatus,0);
                END;
            END;

          TempDocLineApp.Flowstatus := DocLineApp2.Flowstatus;
          TempDocLineApp.MODIFY(FALSE);
        UNTIL TempDocLineApp.NEXT = 0
      ELSE
        BEGIN
          // It did not find any TempDocLineApp lines, which only included lines with status Current and Not Processed (<2)
          DocLineApp2.RESET;
          DocLineApp2.SETCURRENTKEY("Company Name","Document Type","Document No.","Line No.","Approver Order");
          DocLineApp2.SETRANGE("Company Name",DocLineApp."Company Name");
          DocLineApp2.SETRANGE("Document Type",DocLineApp."Document Type");
          DocLineApp2.SETRANGE("Document No.",DocLineApp."Document No.");
          DocLineApp2.SETRANGE("Line No.",DocLineApp."Line No.");
          IF Action = 'Delete' THEN
            DocLineApp2.SETFILTER("Approver Order", '<>%1', DocLineApp."Approver Order");

          IF NOT DocLineApp2.FIND('-') THEN BEGIN
            IF DocLine.GET(DocLineApp."Document Line ID") THEN
              BEGIN
                DocLine.Flowstatus := 0;
                DocLine.MODIFY(FALSE);
                DocLine.SetDocumentStatus(DocLine);
              END;
            EXIT;
          END
          ELSE
            BEGIN
              // Here it finds lines of type >=2, which means Approved, Rejected, or On Hold
              DocLineApp2.SETRANGE(Flowstatus, DocLineApp2.Flowstatus::Rejected);
              IF DocLineApp2.FIND('-') THEN BEGIN
                IF DocLine.GET(DocLineApp."Document Line ID") THEN
                  BEGIN
                    DocLine.Flowstatus := DocLine.Flowstatus::Rejected;
                    DocLine.MODIFY(FALSE);
                    DocLine.SetDocumentStatus(DocLine);
                  END;
              END
              ELSE BEGIN
                DocLineApp2.SETRANGE(Flowstatus, DocLineApp2.Flowstatus::"On hold");
                IF DocLineApp2.FIND('-') THEN BEGIN
                  IF DocLine.GET(DocLineApp."Document Line ID") THEN
                    BEGIN
                      DocLine.Flowstatus := DocLine.Flowstatus::Active;
                      DocLine.MODIFY(FALSE);
                      DocLine.SetDocumentStatus(DocLine);
                    END;
                END
                ELSE BEGIN
                  // If no rejected/On Hold lines are found, it must be only approved lines
                  IF DocLine.GET(DocLineApp."Document Line ID") THEN
                    BEGIN
                      DocLine.Flowstatus := DocLine.Flowstatus::Approved;
                      DocLine.MODIFY(FALSE);
                      DocLine.SetDocumentStatus(DocLine);
                    END;
                END;
              END;

              EXIT;
            END;
        END;

      // DocLine Status
      DocLine.GET(DocLineApp."Document Line ID");

      DocLineApp2.RESET;
      DocLineApp2.SETCURRENTKEY("Company Name","Document Type","Document No.","Line No.","Approver Order");
      DocLineApp2.SETRANGE("Company Name",DocLineApp."Company Name");
      DocLineApp2.SETRANGE("Document Type",DocLineApp."Document Type");
      DocLineApp2.SETRANGE("Document No.",DocLineApp."Document No.");
      DocLineApp2.SETRANGE("Line No.",DocLineApp."Line No.");
      DocLineApp2.SETRANGE(Flowstatus,DocLineApp2.Flowstatus::"On hold");
      IF DocLineApp2.FIND('-') THEN BEGIN
        IF DocLineApp2."Approver Order" < DocLineApp."Approver Order" THEN
          DocLineApp.Flowstatus := DocLineApp.Flowstatus::"Not processed";
        // ELSE
          // not defined

        EXIT;
      END;

      TempDocLineApp.RESET;
      TempDocLineApp.SETCURRENTKEY("Company Name","Document Type","Document No.","Line No.","Approver Order");
      TempDocLineApp.SETRANGE("Company Name",DocLineApp."Company Name");
      TempDocLineApp.SETRANGE("Document Type",DocLineApp."Document Type");
      TempDocLineApp.SETRANGE("Document No.",DocLineApp."Document No.");
      TempDocLineApp.SETRANGE("Line No.",DocLineApp."Line No.");
      TempDocLineApp.SETRANGE(Flowstatus,DocLineApp2.Flowstatus::Rejected);

      // Some Line rejected
      IF TempDocLineApp.FIND('-') THEN
        BEGIN
          DocLine.Flowstatus := DocLine.Flowstatus::Rejected;
          DocLine.MODIFY(FALSE);
          DocLine.SetDocumentStatus(DocLine);
          EXIT;
        END;

      // There is no Approver
      TempDocLineApp.RESET;
      TempDocLineApp.SETCURRENTKEY("Company Name","Document Type","Document No.","Line No.","Approver Order");
      TempDocLineApp.SETRANGE("Company Name",DocLineApp."Company Name");
      TempDocLineApp.SETRANGE("Document Type",DocLineApp."Document Type");
      TempDocLineApp.SETRANGE("Document No.",DocLineApp."Document No.");
      TempDocLineApp.SETRANGE("Line No.",DocLineApp."Line No.");
      IF NOT TempDocLineApp.FIND('-') THEN
        BEGIN
          DocLineApp2.RESET;
          DocLineApp2.SETCURRENTKEY("Company Name","Document Type","Document No.","Line No.","Approver Order");
          DocLineApp2.SETRANGE("Company Name",DocLineApp."Company Name");
          DocLineApp2.SETRANGE("Document Type",DocLineApp."Document Type");
          DocLineApp2.SETRANGE("Document No.",DocLineApp."Document No.");
          DocLineApp2.SETRANGE("Line No.",DocLineApp."Line No.");

          IF Action = 'Delete' THEN
            DocLineApp2.SETFILTER("Approver Order",'<>%1',DocLineApp."Approver Order");

          IF NOT DocLineApp2.FIND('-') THEN
            BEGIN
              DocLine.Flowstatus := 0;
              DocLine.MODIFY(FALSE);
              DocLine.SetDocumentStatus(DocLine);
              EXIT;
            END;
        END;

      TempDocLineApp.SETFILTER(Flowstatus,'<>%1',TempDocLineApp.Flowstatus::Approved);
      IF TempDocLineApp.FIND('-') THEN
        DocLine.Flowstatus := DocLine.Flowstatus::Active
      ELSE
        DocLine.Flowstatus := DocLine.Flowstatus::Approved;

      DocLine.MODIFY(FALSE);
      DocLine.SetDocumentStatus(DocLine);
    END;

    PROCEDURE ChangeTemplate@1100285001();
    VAR
      DocLine@1100285001 : Record 12013609;
      DocLineApp@1100285000 : Record 12013610;
      TemplateForm@1100285002 : Page 12013648;
      TemplateRule@1100285003 : Record 12013645;
      PurchLine@1100285004 : Record 39;
    BEGIN
      DocLineApp.RESET;
      DocLineApp.SETCURRENTKEY("Company Name","Document Type","Document No.","Line No.","Approver Order");
      DocLineApp.SETRANGE("Company Name","Company Name");
      DocLineApp.SETRANGE("Document Type","Document Type");
      DocLineApp.SETRANGE("Document No.","Document No.");
      DocLineApp.SETRANGE("Line No.","Line No.");
      DocLineApp.SETRANGE(Flowstatus,DocLineApp.Flowstatus::Approved);
      IF DocLineApp.FIND('-') THEN
        ERROR(EXF03);

      TemplateForm.EDITABLE(FALSE);
      TemplateForm.SETTABLEVIEW(TemplateRule);
      TemplateForm.LOOKUPMODE := TRUE;

      IF TemplateForm.RUNMODAL = ACTION::LookupOK THEN
        BEGIN
          DocLineApp.RESET;
          DocLineApp.SETRANGE("Company Name","Company Name");
          DocLineApp.SETRANGE("Document Type","Document Type");
          DocLineApp.SETRANGE("Document No.","Document No.");
          DocLineApp.SETRANGE("Line No.","Line No.");
          DocLineApp.SETFILTER(Flowstatus, '<>%1', DocLineApp.Flowstatus::Rejected);
          DocLineApp.DELETEALL;

          TemplateForm.GETRECORD(TemplateRule);
          DocLine.RetrieveRecord(DocLine,"Company Name","Document Type","Document No.","Line No.");
          PurchLine.GET("Document Type","Document No.","Line No.");
          ExFlow.CreateApprovers(DocLine,PurchLine,TemplateRule.Code,FALSE,'','',FALSE);
        END;
    END;

    PROCEDURE ChangeDimension@1100285004(ApproverCode@1100285000 : Code[50]);
    VAR
      ExFlowSetup@1100285003 : Record 12013601;
      PurchLine@1100285001 : Record 39;
      EXUserGroup@1100285005 : Record 12013606;
    BEGIN
      IF PurchLine.GET("Document Type","Document No.","Line No.") THEN BEGIN
        IF EXUserGroup.GET(COMPANYNAME,ApproverCode) THEN BEGIN
          IF EXUserGroup."Dimension Value" <> '' THEN BEGIN
            ExFlowSetup.GET(COMPANYNAME);
            ExDimMgt.UpdateDimFromUser(PurchLine,ExFlowSetup,EXUserGroup)
          END;
        END;
      END;
    END;

    PROCEDURE Changeable@1100285002();
    VAR
      DocHead@1100285000 : Record 12013608;
      AppSetup@1100285001 : Record 12013601;
    BEGIN
      IF "Approved By" <> '' THEN BEGIN
        DocHead.RetrieveRecord(DocHead,"Company Name","Document Type","Document No.");

        IF DocHead.Status = DocHead.Status::"Ready for posting" THEN
          ERROR(EXF42);

        IF NOT ExFlow.IsUserSuperior(COMPANYNAME, USERID) THEN
          ERROR(EXF08);

        AppSetup.GET("Company Name",0);
        IF NOT AppSetup."Suppress Approved Message" THEN
          IF NOT CONFIRM(EXF41) THEN
            ERROR(EXF47);
      END;
    END;

    PROCEDURE InsertDimension@1100285005();
    VAR
      DocLineApp@1100285000 : Record 12013610;
    BEGIN
      DocLineApp.RESET;
      DocLineApp.SETCURRENTKEY("Document No.");
      DocLineApp.SETRANGE("Company Name", "Company Name");
      DocLineApp.SETRANGE("Document Type", "Document Type");
      DocLineApp.SETRANGE("Document No.", "Document No.");
      DocLineApp.SETRANGE("Line No.", "Line No.");
      DocLineApp.SETFILTER("Approver Order",'<%1', "Approver Order");
      IF NOT DocLineApp.FINDFIRST THEN  // this line is the first approver
        ChangeDimension(Approver);
    END;

    PROCEDURE UpdatePurchLine@1100285006();
    VAR
      PurchLine@1100285000 : Record 39;
    BEGIN
      IF NOT PurchLine.GET("Document Type","Document No.","Line No.") THEN
        EXIT;

      IF PurchLine."Approval Flow Modified" THEN
        EXIT;

      PurchLine."Approval Flow Modified" := TRUE;
      PurchLine."Applied Template Rule" := '';
      PurchLine.MODIFY;
    END;

    PROCEDURE UpdatePurchLineOnDelete@1100285007();
    VAR
      PurchLine@1100285000 : Record 39;
      DocLineApp@1100285001 : Record 12013610;
    BEGIN
      IF NOT PurchLine.GET("Document Type","Document No.","Line No.") THEN
        EXIT;

      IF PurchLine."Approval Flow Modified" THEN BEGIN
        DocLineApp.RESET;
        DocLineApp.SETCURRENTKEY("Document No.");
        DocLineApp.SETRANGE("Company Name", "Company Name");
        DocLineApp.SETRANGE("Document Type", "Document Type");
        DocLineApp.SETRANGE("Document No.", "Document No.");
        DocLineApp.SETRANGE("Line No.", "Line No.");
        DocLineApp.SETFILTER("Approver Order", '<>%1', "Approver Order");
        IF DocLineApp.ISEMPTY THEN BEGIN
          PurchLine."Approval Flow Modified" := FALSE;
          PurchLine."Applied Template Rule" := '';
          PurchLine.MODIFY;
        END;
      END;
    END;

    PROCEDURE IsUserAllowedToChange@1100285008(TypeOfChange@1100285001 : 'Insert,Modify,Delete');
    BEGIN
      IF NOT ExFlow.IsUserSuperior(COMPANYNAME, USERID) THEN
        CASE TypeOfChange OF
          TypeOfChange::Insert: ERROR(EXF43);
          TypeOfChange::Modify: ERROR(EXF44);
          TypeOfChange::Delete: ERROR(EXF45);
        END;
    END;

    PROCEDURE RetrieveRecord@1100285010(VAR ExDocLineApp@1100285005 : Record 12013610;CompName@1100285000 : Text[30];DocType@1100285001 : Integer;DocNo@1100285002 : Code[20];LineNo@1100285003 : Integer;AppOrder@1100285004 : Integer) : Boolean;
    BEGIN
      WITH ExDocLineApp DO BEGIN
        RESET;
        CLEAR(ExDocLineApp);
        SETCURRENTKEY("Document No.");
        SETRANGE("Company Name", CompName);
        SETRANGE("Document Type", DocType);
        SETRANGE("Document No.", DocNo);
        SETRANGE("Line No.", LineNo);
        SETRANGE("Approver Order", AppOrder);
        EXIT(FINDFIRST);
      END;
    END;

    PROCEDURE GetPreviousApproverOrder@1100285012(ExDocLine@1100285000 : Record 12013609;xApproverOrder@1100285002 : Integer) : Integer;
    VAR
      ExDocLineApp@1100285001 : Record 12013610;
    BEGIN
      WITH ExDocLineApp DO BEGIN
        SETCURRENTKEY("Company Name","Document Type","Document No.","Line No.","Approver Order");
        SETRANGE("Company Name", ExDocLine."Company Name");
        SETRANGE("Document Type", ExDocLine."Document Type");
        SETRANGE("Document No.", ExDocLine."Document No.");
        SETRANGE("Line No.", ExDocLine."Line No.");
        SETFILTER("Approver Order", '<%1', xApproverOrder);
        IF FINDLAST THEN
          EXIT("Approver Order")
        ELSE
          EXIT(0);
      END;
    END;

    PROCEDURE InitRecord@1100285011(xDocLineApp@1100285000 : Record 12013610;BelowxRec@1100285002 : Boolean);
    VAR
      DocLine@1100285001 : Record 12013609;
      TempApproverOrder@1100285003 : Integer;
    BEGIN
      IF DocLine.GET("Document Line ID") THEN BEGIN
        "Company Name" := DocLine."Company Name";
        "Document Type" := DocLine."Document Type";
        "Document No." := DocLine."Document No.";
        "Line No." := DocLine."Line No.";
        "Document ID" := DocLine."Document ID";
        IF xDocLineApp.GET(xDocLineApp.ID) THEN BEGIN
          IF BelowxRec THEN
            "Approver Order" := xDocLineApp."Approver Order" + 10000
          ELSE BEGIN
            TempApproverOrder := GetPreviousApproverOrder(DocLine,xDocLineApp."Approver Order");
            "Approver Order" := ROUND(TempApproverOrder +
                                      ((xDocLineApp."Approver Order" -  TempApproverOrder) / 2),1);
          END;
        END;

        IF "Approver Order" = 0 THEN
          "Approver Order" := 10000;
      END;
    END;

    PROCEDURE UpdateDimensionAfterDelete@1100285013();
    VAR
      DocLineApp@1100285000 : Record 12013610;
    BEGIN
      DocLineApp.RESET;
      DocLineApp.SETCURRENTKEY("Document No.");
      DocLineApp.SETRANGE("Company Name", "Company Name");
      DocLineApp.SETRANGE("Document Type", "Document Type");
      DocLineApp.SETRANGE("Document No.", "Document No.");
      DocLineApp.SETRANGE("Line No.", "Line No.");
      DocLineApp.SETFILTER("Approver Order",'<%1',"Approver Order");
      IF NOT DocLineApp.FINDFIRST THEN BEGIN
        DocLineApp.RESET;
        DocLineApp.SETCURRENTKEY("Company Name","Document Type","Document No.","Line No.","Approver Order");
        DocLineApp.SETRANGE("Company Name", "Company Name");
        DocLineApp.SETRANGE("Document Type", "Document Type");
        DocLineApp.SETRANGE("Document No.", "Document No.");
        DocLineApp.SETRANGE("Line No.", "Line No.");
        DocLineApp.SETFILTER("Approver Order",'>%1',"Approver Order");
        IF DocLineApp.FINDSET THEN BEGIN
          ChangeDimension(DocLineApp.Approver);
        END;
      END;
    END;

    BEGIN
    END.
  }
}

