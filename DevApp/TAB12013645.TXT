OBJECT Table 12013645 Template Rule
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF350000,4PS;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               "Company Name" := COMPANYNAME;
             END;

    OnDelete=VAR
               RuleLine@1100285001 : Record 12013603;
             BEGIN
               RuleLine.RESET;
               RuleLine.SETRANGE("Company Name", "Company Name");
               RuleLine.SETRANGE(Code, Code);
               RuleLine.DELETEALL;
             END;

    OnRename=VAR
               RuleLine@1100285001 : Record 12013603;
               RuleLine2@1100285000 : Record 12013603;
             BEGIN
               RuleLine.RESET;
               RuleLine.SETRANGE("Company Name","Company Name");
               RuleLine.SETRANGE(Code,xRec.Code);
               IF RuleLine.FIND('-') THEN
                 REPEAT
                   RuleLine2.GET(RuleLine."Company Name",RuleLine.Code,RuleLine."Line No.");
                   RuleLine2.RENAME(RuleLine."Company Name",Code,RuleLine."Line No.");
                 UNTIL RuleLine.NEXT = 0;
             END;

    CaptionML=ENU=Template Rule;
    LookupPageID=Page12013648;
  }
  FIELDS
  {
    { 1   ;   ;Company Name        ;Text30        ;TableRelation=Company;
                                                   CaptionML=ENU=Company Name }
    { 2   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 10  ;   ;Name                ;Text30        ;CaptionML=ENU=Name }
    { 11  ;   ;Dimension 1         ;Boolean       ;CaptionML=ENU=Dimension 1 }
    { 12  ;   ;Dimension Code 1    ;Code20        ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                Disabled := FALSE;

                                                                "Dimension 1" := "Dimension Code 1" <> '';
                                                              END;

                                                   CaptionML=ENU=Dimension Code 1 }
    { 13  ;   ;Dimension Value 1 Filter;Code250   ;OnValidate=BEGIN
                                                                IF ("Dimension Code 1" = '') AND ("Dimension Value 1 Filter" <> '') THEN
                                                                  ERROR(EXF01);
                                                              END;

                                                   CaptionML=ENU=Dimension Value 1 Filter }
    { 14  ;   ;Rule for            ;Option        ;OnValidate=BEGIN
                                                                IF NOT ("Rule for" IN ["Rule for"::Invoice,"Rule for"::" "]) THEN
                                                                  "Rule for Invoices" := "Rule for Invoices"::All;
                                                              END;

                                                   CaptionML=ENU=Rule for;
                                                   OptionCaptionML=ENU=" ,Order,Invoice,Requisition";
                                                   OptionString=[ ,Order,Invoice,Requisition] }
    { 15  ;   ;Rule for Invoices   ;Option        ;OnValidate=BEGIN
                                                                IF "Rule for Invoices" <> "Rule for Invoices"::All THEN
                                                                  IF NOT ("Rule for" IN ["Rule for"::Invoice,"Rule for"::" "]) THEN
                                                                    ERROR(STRSUBSTNO(EXF02,FIELDCAPTION("Rule for")));
                                                              END;

                                                   CaptionML=ENU=Rule for Invoices;
                                                   OptionCaptionML=ENU=All,Cost account Invoices,Matched against Purchase Order,PO Connected with Difference,PO Connected without Difference;
                                                   OptionString=All,Cost account Invoices,PO Connected Invoices,PO Connected with Diff,PO Connected without Diff }
    { 21  ;   ;Dimension 2         ;Boolean       ;CaptionML=ENU=Dimension 2 }
    { 22  ;   ;Dimension Code 2    ;Code20        ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                Disabled := FALSE;

                                                                "Dimension 2" := "Dimension Code 2" <> '';
                                                              END;

                                                   CaptionML=ENU=Dimension Code 2 }
    { 23  ;   ;Dimension Value 2 Filter;Code250   ;CaptionML=ENU=Dimension Value 2 Filter }
    { 31  ;   ;First Approver      ;Boolean       ;CaptionML=ENU=First Approver }
    { 32  ;   ;First Approver Filter;Code250      ;OnValidate=BEGIN
                                                                Disabled := FALSE;

                                                                "First Approver" := "First Approver Filter" <> '';
                                                              END;

                                                   CaptionML=ENU=First Approver Filter }
    { 41  ;   ;Vendor              ;Boolean       ;CaptionML=ENU=Vendor }
    { 42  ;   ;Vendor Filter       ;Code250       ;OnValidate=BEGIN
                                                                Disabled := FALSE;

                                                                Vendor := "Vendor Filter" <> '';
                                                              END;

                                                   CaptionML=ENU=Vendor Filter }
    { 51  ;   ;Line Type           ;Boolean       ;CaptionML=ENU=Line Type }
    { 52  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                Disabled := FALSE;

                                                                "Line Type" := Type <> 0;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,G/L Account,Item,,Fixed Asset,Charge (Item)";
                                                   OptionString=[ ,G/L Account,Item,,Fixed Asset,Charge (Item)] }
    { 53  ;   ;Line Type Filter    ;Code250       ;CaptionML=ENU=Line Type Filter }
    { 54  ;   ;Total Invoice Amount;Boolean       ;CaptionML=ENU=Use Total Invoice Amount }
    { 55  ;   ;JobTag              ;Boolean       ;CaptionML=ENU=Job }
    { 56  ;   ;Job Filter          ;Code250       ;OnValidate=BEGIN
                                                                Disabled := FALSE;

                                                                JobTag := "Job Filter" <> '';
                                                              END;

                                                   CaptionML=ENU=Job Filter }
    { 60  ;   ;Purchaser Tag       ;Boolean       ;CaptionML=ENU=Purchaser }
    { 61  ;   ;Purchaser Filter    ;Code250       ;OnValidate=BEGIN
                                                                Disabled := FALSE;

                                                                "Purchaser Tag" := "Purchaser Filter" <> '';
                                                              END;

                                                   CaptionML=ENU=Purchaser Filter }
    { 70  ;   ;Person Responsible Tag;Boolean     ;CaptionML=ENU=Person Responsible (Job) }
    { 71  ;   ;Person Responsible Filter;Code250  ;OnValidate=BEGIN
                                                                Disabled := FALSE;

                                                                "Person Responsible Tag" := "Person Responsible Filter" <> '';
                                                              END;

                                                   CaptionML=ENU=Person Responsible Filter }
    { 80  ;   ;Vendor Posting Group Tag;Boolean   ;CaptionML=ENU=Vendor Posting Group }
    { 81  ;   ;Vendor Posting Group Filter;Code250;OnValidate=BEGIN
                                                                Disabled := FALSE;

                                                                "Vendor Posting Group Tag" := "Vendor Posting Group Filter" <> '';
                                                              END;

                                                   CaptionML=ENU=Vendor Posting Group Filter }
    { 100 ;   ;Disabled            ;Boolean       ;CaptionML=ENU=Disabled }
    { 110 ;   ;Priority            ;Integer       ;CaptionML=ENU=Priority }
  }
  KEYS
  {
    {    ;Company Name,Code                       ;Clustered=Yes }
    {    ;Company Name,Name                        }
    {    ;Code                                     }
    {    ;Name                                     }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Code,Name                                }
  }
  CODE
  {
    VAR
      EXF01@1100285001 : TextConst 'ENU=Dimension code missing!';
      EXF02@1100285000 : TextConst 'ENU=Field %1 must be set to Blank or Invoice.';

    PROCEDURE FindTemplate@1100285000(PurchLine@1100285002 : Record 39;VAR TemplateRule@1100285000 : Record 12013645;DimCodeTab@1100285005 : ARRAY [8] OF Code[20];DimValueTab@1100285006 : ARRAY [8] OF Code[20];RuleFor@1100285008 : ' ,Order,Invoice,Requisition';PurchaserCode@1100285010 : Code[20]) : Boolean;
    VAR
      TempExPriority@1100285001 : TEMPORARY Record 12013647;
    BEGIN
      CreateTemplateList(TempExPriority,PurchLine,DimCodeTab,DimValueTab,RuleFor,PurchaserCode);

      TempExPriority.RESET;
      TempExPriority.SETCURRENTKEY(Hits,Priority);
      TempExPriority.ASCENDING(FALSE);
      IF TempExPriority.FIND('-') THEN
        BEGIN
          TemplateRule.GET(COMPANYNAME, TempExPriority."Template Code");
          EXIT(TRUE)
        END
      ELSE
        BEGIN
          CLEAR(TemplateRule);
          EXIT(FALSE)
        END;
    END;

    PROCEDURE CreateTemplateList@1100285009(VAR TempExPriority@1100285009 : TEMPORARY Record 12013647;PurchLine@1100285014 : Record 39;DimCodeTab@1100285013 : ARRAY [8] OF Code[20];DimValueTab@1100285012 : ARRAY [8] OF Code[20];RuleFor@1100285011 : ' ,Order,Invoice,Requisition';PurchaserCode@1100285010 : Code[20]);
    VAR
      Hit@1100285008 : Integer;
      FilterHit@1100285006 : Integer;
      PurchOrderLine@1100285003 : Record 39;
      PurchImportLine@1100285002 : Record 12013588;
      TemplateRule@1100285015 : Record 12013645;
      ExFlowWorkFlowMgt@1100285001 : Codeunit 12013593;
      DiffExists@1100285000 : Boolean;
    BEGIN
      TempExPriority.RESET;
      TempExPriority.DELETEALL;

      TemplateRule.RESET;
      TemplateRule.SETRANGE("Company Name",COMPANYNAME);

      IF RuleFor <> 0 THEN
        IF RuleFor = 1 THEN  // Order
          TemplateRule.SETFILTER("Rule for",'%1|%2|%3',0,1,3) // when Order search for both Order and Requisition
        ELSE
          TemplateRule.SETFILTER("Rule for",'%1|%2',0,RuleFor);

      TemplateRule.SETRANGE(Disabled, FALSE);

      // Go through document, check for diff
      DiffExists := FALSE;
      IF PurchLine."ExFlow Order No." <> '' THEN BEGIN
        TemplateRule.SETFILTER("Rule for Invoices", '%1|%2', TemplateRule."Rule for Invoices"::"PO Connected with Diff",
                                                             TemplateRule."Rule for Invoices"::"PO Connected without Diff");
        IF TemplateRule.FINDFIRST THEN BEGIN
          CASE PurchLine."Document Type" OF
            PurchLine."Document Type"::Invoice:
              PurchOrderLine.GET(PurchOrderLine."Document Type"::Order,PurchLine."ExFlow Order No.",PurchLine."ExFlow Order Line No.");
            PurchLine."Document Type"::"Credit Memo":
              PurchOrderLine.GET(PurchOrderLine."Document Type"::"Return Order",PurchLine."ExFlow Order No.",
                                 PurchLine."ExFlow Order Line No.");
            PurchLine."Document Type"::Order:
              PurchOrderLine.GET(PurchOrderLine."Document Type"::Order,PurchLine."ExFlow Order No.",PurchLine."ExFlow Order Line No.");
            PurchLine."Document Type"::"Return Order":
              PurchOrderLine.GET(PurchOrderLine."Document Type"::"Return Order",PurchLine."ExFlow Order No.",
                                 PurchLine."ExFlow Order Line No.");
          END;

          PurchImportLine.INIT;
          PurchImportLine."Order No." := PurchLine."ExFlow Order No.";
          PurchImportLine."Direct Unit Cost (Order)" := PurchOrderLine."Direct Unit Cost";
          PurchImportLine."Buy-from Vendor No." := PurchLine."Buy-from Vendor No.";
          PurchImportLine."Line Amount" := PurchLine."Line Amount";
          PurchImportLine."Line Discount % (Order)" := PurchOrderLine."Line Discount %";
          PurchImportLine.Quantity := PurchLine.Quantity;
          DiffExists := NOT ExFlowWorkFlowMgt.PurchPriceOK(PurchImportLine);
        END;
      END;

      TemplateRule.SETFILTER("Rule for Invoices", '%1|%2', TemplateRule."Rule for Invoices"::All,
                                                           TemplateRule."Rule for Invoices"::"Cost account Invoices");

      IF PurchLine."PO Matched Document" THEN BEGIN
        IF DiffExists THEN
          TemplateRule.SETFILTER("Rule for Invoices", '%1|%2|%3', TemplateRule."Rule for Invoices"::All,
                                                                  TemplateRule."Rule for Invoices"::"PO Connected Invoices",
                                                                  TemplateRule."Rule for Invoices"::"PO Connected with Diff")
        ELSE
          TemplateRule.SETFILTER("Rule for Invoices", '%1|%2|%3', TemplateRule."Rule for Invoices"::All,
                                                                  TemplateRule."Rule for Invoices"::"PO Connected Invoices",
                                                                  TemplateRule."Rule for Invoices"::"PO Connected without Diff");
      END;

      IF TemplateRule.FINDSET THEN
        REPEAT
          Hit := 0;
          FilterHit := 0;

          IF NOT TemplateRule."Dimension 1" THEN
            Hit := Hit + 1
          ELSE
            IF DimMatch(TRUE, TemplateRule, DimCodeTab, DimValueTab) THEN
              BEGIN
                Hit := Hit + 1;
                FilterHit := FilterHit + 1;
              END;

          IF NOT TemplateRule."Dimension 2" THEN
            Hit := Hit + 1
          ELSE
            IF DimMatch(FALSE, TemplateRule, DimCodeTab, DimValueTab) THEN
              BEGIN
                Hit := Hit + 1;
                FilterHit := FilterHit + 1;
              END;

          IF NOT TemplateRule."First Approver" THEN
            Hit := Hit + 1
          ELSE
            IF FirstMatch(PurchLine."First Approver", TemplateRule) THEN
              BEGIN
                Hit := Hit + 1;
                FilterHit := FilterHit + 1;
              END;

          IF NOT TemplateRule.Vendor THEN
            Hit := Hit + 1
          ELSE
            IF VendorMatch(PurchLine."Buy-from Vendor No.", TemplateRule) THEN
              BEGIN
                Hit := Hit + 1;
                FilterHit := FilterHit + 1;
              END;

          IF NOT TemplateRule."Line Type" THEN
            Hit := Hit + 1
          ELSE
            IF LineMatch(PurchLine, TemplateRule) THEN
              BEGIN
                Hit := Hit + 1;
                FilterHit := FilterHit + 1;
              END;

          IF NOT TemplateRule.JobTag THEN
            Hit := Hit + 1
          ELSE
            IF JobMatch(PurchLine."Job No.", TemplateRule) THEN
              BEGIN
                Hit := Hit + 1;
                FilterHit := FilterHit + 1;
              END;

          IF NOT TemplateRule."Purchaser Tag" THEN
            Hit := Hit + 1
          ELSE
            BEGIN
                IF PurchaserMatch(PurchaserCode, TemplateRule) THEN
                  BEGIN
                    Hit := Hit + 1;
                    FilterHit := FilterHit + 1;
                  END;
            END;

          IF NOT TemplateRule."Person Responsible Tag" THEN
            Hit := Hit + 1
          ELSE
            BEGIN
              IF PersonRespMatch(PurchLine."Job No.", TemplateRule) THEN
                BEGIN
                  Hit := Hit + 1;
                  FilterHit := FilterHit + 1;
                END;
            END;

          IF NOT TemplateRule."Vendor Posting Group Tag" THEN
            Hit := Hit + 1
          ELSE
            BEGIN
              IF VendorPostGroupMatch(PurchLine."Pay-to Vendor No.", TemplateRule) THEN
                BEGIN
                  Hit := Hit + 1;
                END;
            END;

          IF Hit = 9 THEN
            BEGIN
              TempExPriority.INIT;
              TempExPriority."Template Code" := TemplateRule.Code;
              TempExPriority.Hits := FilterHit;
              TempExPriority.Priority := TemplateRule.Priority;
              TempExPriority.INSERT;
            END;
        UNTIL TemplateRule.NEXT = 0;
    END;

    PROCEDURE ShowPotentialTemplatesWksh@1100285012(ExfPurchDocLine@1100285006 : Record 12013588);
    VAR
      TempExPriority@1100285000 : TEMPORARY Record 12013647;
      PurchLine@1100285011 : Record 39;
      ExFlowDimMgt@1100285007 : Codeunit 12013605;
      CurrentDocDimFound@1100285008 : Boolean;
      CurrDocDimCode@1100285009 : Code[20];
      CurrDocDimValue@1100285010 : Code[20];
      DimCodeTab@1100285002 : ARRAY [8] OF Code[20];
      DimValueTab@1100285001 : ARRAY [8] OF Code[20];
      RuleFor@1100285003 : Integer;
    BEGIN
      CLEAR(DimCodeTab);
      CLEAR(DimValueTab);

      ExFlowDimMgt.GetDimFromExFPurchLine(ExfPurchDocLine,DimCodeTab,DimValueTab,CurrentDocDimFound,
                                          CurrDocDimCode,CurrDocDimValue);

      PurchLine.INIT;
      PurchLine.TRANSFERFIELDS(ExfPurchDocLine);
      PurchLine."Document Type" := PurchLine."Document Type"::Order;
      PurchLine."Document No." := ExfPurchDocLine."Order No.";

      RuleFor := 0;
      CASE ExfPurchDocLine."Document Type" OF
        ExfPurchDocLine."Document Type"::Quote: RuleFor := 3;
        ExfPurchDocLine."Document Type"::Order: RuleFor := 1;
        ExfPurchDocLine."Document Type"::Invoice: RuleFor := 2;
        ExfPurchDocLine."Document Type"::"Credit Memo": RuleFor := 2;
      END;

      CreateTemplateList(TempExPriority,PurchLine,DimCodeTab,DimValueTab,RuleFor,ExfPurchDocLine."Purchaser Code");

      TempExPriority.RESET;
      TempExPriority.SETCURRENTKEY(Hits,Priority);
      TempExPriority.ASCENDING(FALSE);
      IF TempExPriority.FIND('-') THEN
        PAGE.RUN(PAGE::"Available template rules",TempExPriority);
    END;

    PROCEDURE DimMatch@1100285002(First@1100285005 : Boolean;TempRule@1100285003 : Record 12013645;DimCodeTab@1100285001 : ARRAY [8] OF Code[20];DimValueTab@1100285000 : ARRAY [8] OF Code[20]) : Boolean;
    VAR
      DimValue@1100285004 : Record 349;
      i@1100285006 : Integer;
      TargetValue@1100285007 : Code[20];
    BEGIN
      i := 1;
      TargetValue := '';

      REPEAT
        IF First THEN
          BEGIN
            IF DimCodeTab[i] = TempRule."Dimension Code 1" THEN
              TargetValue := DimValueTab[i];
          END
        ELSE
          BEGIN
            IF DimCodeTab[i] = TempRule."Dimension Code 2" THEN
              TargetValue := DimValueTab[i];
          END;

        i := i + 1;
      UNTIL (i = 9) OR (TargetValue <> '');

      IF TargetValue = '' THEN
        EXIT(FALSE);

      DimValue.RESET;

      IF First THEN
        BEGIN
          DimValue.SETRANGE("Dimension Code", TempRule."Dimension Code 1");
          DimValue.SETFILTER(Code, TempRule."Dimension Value 1 Filter");
        END
      ELSE
        BEGIN
          DimValue.SETRANGE("Dimension Code", TempRule."Dimension Code 2");
          DimValue.SETFILTER(Code, TempRule."Dimension Value 2 Filter");
        END;

      DimValue."Dimension Code" := DimCodeTab[i-1];
      DimValue.Code := TargetValue;

      IF DimValue.FIND('=') THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE FirstMatch@1100285005(LineApprover@1100285000 : Code[50];TempRule@1100285001 : Record 12013645) : Boolean;
    VAR
      UserGroup@1100285003 : Record 12013606;
    BEGIN
      UserGroup.RESET;
      UserGroup.SETRANGE("Company Name",COMPANYNAME);
      UserGroup.SETFILTER(Code,TempRule."First Approver Filter");

      UserGroup."Company Name" := COMPANYNAME;
      UserGroup.Code := LineApprover;

      IF UserGroup.FIND('=') THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE VendorMatch@1100285006(LineVendor@1100285001 : Code[20];TempRule@1100285000 : Record 12013645) : Boolean;
    VAR
      Vend@1100285002 : Record 23;
    BEGIN
      Vend.RESET;
      Vend.SETFILTER("No.", TempRule."Vendor Filter");
      Vend."No." := LineVendor;

      IF Vend.FIND('=') THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE LineMatch@1100285007(PurchLine@1100285000 : Record 39;TempRule@1100285002 : Record 12013645) : Boolean;
    VAR
      Account@1100285001 : Record 15;
      Item@1100285003 : Record 27;
      Fixed@1100285004 : Record 5600;
      Charge@1100285005 : Record 5800;
    BEGIN
      CASE PurchLine.Type OF
        PurchLine.Type::"G/L Account" :
          BEGIN
            IF TempRule.Type = PurchLine.Type THEN
              BEGIN
                Account.RESET;
                Account.SETFILTER("No.", TempRule."Line Type Filter");
                Account."No." := PurchLine."No.";
                IF Account.FIND('=') THEN
                  EXIT(TRUE)
                ELSE
                  EXIT(FALSE);
              END
            ELSE
              EXIT(FALSE);
          END;

        PurchLine.Type::Item :
          BEGIN
            IF TempRule.Type = PurchLine.Type THEN
              BEGIN
                Item.RESET;
                Item.SETFILTER("No.", TempRule."Line Type Filter");
                Item."No." := PurchLine."No.";

                IF Item.FIND('=') THEN
                  EXIT(TRUE)
                ELSE
                  EXIT(FALSE);
              END
            ELSE
              EXIT(FALSE);
          END;

        PurchLine.Type::"Fixed Asset" :
          BEGIN
            IF TempRule.Type = PurchLine.Type THEN
              BEGIN
                Fixed.RESET;
                Fixed.SETFILTER("No.", TempRule."Line Type Filter");
                Fixed."No." := PurchLine."No.";

                IF Fixed.FIND('=') THEN
                  EXIT(TRUE)
                ELSE
                  EXIT(FALSE);
              END
            ELSE
              EXIT(FALSE);
          END;


        PurchLine.Type::"Charge (Item)" :
          BEGIN
            IF TempRule.Type = PurchLine.Type THEN
              BEGIN
                Charge.RESET;
                Charge.SETFILTER("No.", TempRule."Line Type Filter");
                Charge."No." := PurchLine."No.";

                IF Charge.FIND('=') THEN
                  EXIT(TRUE)
                ELSE
                  EXIT(FALSE);
              END
            ELSE
              EXIT(FALSE);
          END
        ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE CopyRule@1100285001(FromRule@1100285001 : Record 12013645);
    VAR
      TempRule@1100285003 : TEMPORARY Record 12013645;
      RuleLine@1100285000 : Record 12013603;
      FromRuleLine@1100285002 : Record 12013603;
    BEGIN
      TempRule := Rec;
      TRANSFERFIELDS(FromRule,FALSE);
      IF TempRule.Name <> '' THEN
        Name := TempRule.Name;
      MODIFY;
      GET(TempRule."Company Name",TempRule.Code);

      RuleLine.RESET;
      RuleLine.SETRANGE("Company Name", "Company Name");
      RuleLine.SETRANGE(Code, Code);
      RuleLine.DELETEALL;

      FromRuleLine.RESET;
      FromRuleLine.SETRANGE("Company Name", FromRule."Company Name");
      FromRuleLine.SETRANGE(Code, FromRule.Code);
      IF FromRuleLine.FIND('-') THEN
        REPEAT
          RuleLine.INIT;
          RuleLine."Company Name" := "Company Name";
          RuleLine.Code := Code;
          RuleLine."Line No." := FromRuleLine."Line No.";
          RuleLine."Approver Group" := FromRuleLine."Approver Group";
          RuleLine."Group Name" := FromRuleLine."Group Name";
          RuleLine."Over Amount" := FromRuleLine."Over Amount";
          RuleLine.INSERT(FALSE);
        UNTIL FromRuleLine.NEXT = 0;
    END;

    PROCEDURE JobMatch@1100285003(LineJob@1100285001 : Code[20];TempRule@1100285000 : Record 12013645) : Boolean;
    VAR
      Job@1100285002 : Record 11072003;
    BEGIN
      Job.RESET;
      Job.SETFILTER("No.", TempRule."Job Filter");
      Job."No." := LineJob;

      IF Job.FIND('=') THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE PurchaserMatch@1100285008(LinePurchaser@1100285001 : Code[10];TempRule@1100285000 : Record 12013645) : Boolean;
    VAR
      PurchaserTab@1100285002 : Record 13;
    BEGIN
      PurchaserTab.RESET;
      PurchaserTab.SETFILTER(Code, TempRule."Purchaser Filter");
      PurchaserTab.Code := LinePurchaser;

      IF PurchaserTab.FIND('=') THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE PersonRespMatch@1100285010(JobNo@1100285001 : Code[20];TempRule@1100285000 : Record 12013645) : Boolean;
    VAR
      Job@1100285002 : Record 11072003;
    BEGIN
      Job.RESET;
      IF Job.SETCURRENTKEY("Person Responsible") THEN;
      Job.SETFILTER("Person Responsible", TempRule."Person Responsible Filter");
      Job.SETRANGE("No.", JobNo);
      IF Job.FINDFIRST THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE VendorPostGroupMatch@1100285011(PayToVendorNo@1100285001 : Code[20];TempRule@1100285000 : Record 12013645) : Boolean;
    VAR
      Vendor@1100285002 : Record 23;
    BEGIN
      Vendor.RESET;
      IF Vendor.SETCURRENTKEY("Vendor Posting Group") THEN;
      Vendor.SETFILTER("Vendor Posting Group", TempRule."Vendor Posting Group Filter");
      Vendor.SETRANGE("No.", PayToVendorNo);
      IF Vendor.FINDFIRST THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE LookUpExFlow@1100285004(VAR FilterText@1100285021 : Text[1024];"Column Source"@1100285014 : Code[20]) : Boolean;
    VAR
      Dim1List@1100285001 : Page 560;
      AccountList@1100285002 : Page 18;
      Account@1100285003 : Record 15;
      Item@1100285004 : Record 27;
      DimValue@1100285010 : Record 349;
      ItemList@1100285008 : Page 31;
      FixedList@1100285007 : Page 5601;
      FixedAsset@1100285011 : Record 5600;
      ChargeList@1100285006 : Page 5800;
      Charge@1100285012 : Record 5800;
      JobList@1100285005 : Page 11072004;
      Job@1100285013 : Record 11072003;
      FirstList@1100285015 : Page 12013618;
      First@1100285016 : Record 12013606;
      VendorList@1100285017 : Page 27;
      Vend@1100285018 : Record 23;
      PurchaserList@1100285020 : Page 14;
      Purchaser@1100285019 : Record 13;
      ResourceList@1100285022 : Page 77;
      Resource@1100285000 : Record 156;
      VendorPostingGroupList@1100285024 : Page 111;
      VendorPostingGroup@1100285023 : Record 93;
    BEGIN
      CASE "Column Source" OF
        'ACCOUNT' :
          BEGIN
            CLEAR(AccountList);
            AccountList.LOOKUPMODE(TRUE);
            AccountList.SETTABLEVIEW(Account);
            IF AccountList.RUNMODAL = ACTION::LookupOK THEN
              BEGIN
                AccountList.GETRECORD(Account);
                FilterText := FilterText + AccountList.GetSelectionFilter;
                EXIT(TRUE);
              END;
        END;

        'DIM1':
          BEGIN
            CLEAR(Dim1List);
            Dim1List.LOOKUPMODE(TRUE);
            DimValue.RESET;
            DimValue.SETRANGE("Dimension Code", "Dimension Code 1");
            Dim1List.SETTABLEVIEW(DimValue);
            IF Dim1List.RUNMODAL = ACTION::LookupOK THEN
              BEGIN
                Dim1List.GETRECORD(DimValue);
                FilterText := FilterText + DimValue.Code;
                EXIT(TRUE);
              END;
        END;

        'DIM2':
          BEGIN
            CLEAR(Dim1List);
            Dim1List.LOOKUPMODE(TRUE);
            DimValue.RESET;
            DimValue.SETRANGE("Dimension Code", "Dimension Code 2");
            Dim1List.SETTABLEVIEW(DimValue);
            IF Dim1List.RUNMODAL = ACTION::LookupOK THEN
              BEGIN
                Dim1List.GETRECORD(DimValue);
                FilterText := FilterText + DimValue.Code;
                EXIT(TRUE);
              END;
        END;

        'ITEM':
           BEGIN
             CLEAR(ItemList);
             ItemList.LOOKUPMODE(TRUE);
             Item.RESET;
             ItemList.SETTABLEVIEW(Item);
             IF ItemList.RUNMODAL = ACTION::LookupOK THEN
               BEGIN
                 ItemList.GETRECORD(Item);
                 FilterText := FilterText + Item."No.";
                 EXIT(TRUE);
               END;
           END;

        'FIXED':
           BEGIN
             CLEAR(FixedList);
             FixedList.LOOKUPMODE(TRUE);
             FixedAsset.RESET;
             FixedList.SETTABLEVIEW(FixedAsset);
             IF FixedList.RUNMODAL = ACTION::LookupOK THEN
               BEGIN
                 FixedList.GETRECORD(FixedAsset);
                 FilterText := FilterText + FixedAsset."No.";
                 EXIT(TRUE);
               END;
           END;

        'CHARGE':
           BEGIN
             CLEAR(ChargeList);
             ChargeList.LOOKUPMODE(TRUE);
             Charge.RESET;
             ChargeList.SETTABLEVIEW(Charge);
             IF ChargeList.RUNMODAL = ACTION::LookupOK THEN
               BEGIN
                 ChargeList.GETRECORD(Charge);
                 FilterText := FilterText + Charge."No.";
                 EXIT(TRUE);
               END;
           END;

        'FIRST':
           BEGIN
             CLEAR(FirstList);
             FirstList.LOOKUPMODE(TRUE);
             First.RESET;
             FirstList.SETTABLEVIEW(First);
             IF FirstList.RUNMODAL = ACTION::LookupOK THEN
               BEGIN
                 FirstList.GETRECORD(First);
                 FilterText := FilterText + First.Code;
                 EXIT(TRUE);
               END;
           END;

        'VENDOR':
           BEGIN
             CLEAR(VendorList);
             VendorList.LOOKUPMODE(TRUE);
             Vend.RESET;
             VendorList.SETTABLEVIEW(Vend);
             IF VendorList.RUNMODAL = ACTION::LookupOK THEN
               BEGIN
                 VendorList.GETRECORD(Vend);
                 FilterText := FilterText + Vend."No.";
                 EXIT(TRUE);
               END;
           END;

        'JOB':
           BEGIN
             CLEAR(JobList);
             JobList.LOOKUPMODE(TRUE);
             Job.RESET;
             JobList.SETTABLEVIEW(Job);
             IF JobList.RUNMODAL = ACTION::LookupOK THEN
               BEGIN
                 JobList.GETRECORD(Job);
                 FilterText := FilterText + Job."No.";
                 EXIT(TRUE);
               END;
           END;

        'PURCHASER':
           BEGIN
             CLEAR(PurchaserList);
             PurchaserList.LOOKUPMODE(TRUE);
             Purchaser.RESET;
             PurchaserList.SETTABLEVIEW(Purchaser);
             IF PurchaserList.RUNMODAL = ACTION::LookupOK THEN
               BEGIN
                 PurchaserList.GETRECORD(Purchaser);
                 FilterText := FilterText + Purchaser.Code;
                 EXIT(TRUE);
               END
           END;

        'PERSRESP':
           BEGIN
             CLEAR(ResourceList);
             ResourceList.LOOKUPMODE(TRUE);
             Resource.RESET;
             ResourceList.SETTABLEVIEW(Resource);
             IF ResourceList.RUNMODAL = ACTION::LookupOK THEN
               BEGIN
                 ResourceList.GETRECORD(Resource);
                 FilterText := FilterText + Resource."No.";
                 EXIT(TRUE);
               END
           END;

        'VENDPOSTGROUP':
           BEGIN
             CLEAR(VendorPostingGroupList);
             VendorPostingGroupList.LOOKUPMODE(TRUE);
             VendorPostingGroup.RESET;
             VendorPostingGroupList.SETTABLEVIEW(VendorPostingGroup);
             IF VendorPostingGroupList.RUNMODAL = ACTION::LookupOK THEN
               BEGIN
                 VendorPostingGroupList.GETRECORD(VendorPostingGroup);
                 FilterText := FilterText + VendorPostingGroup.Code;
                 EXIT(TRUE);
               END
           END;
      END;

      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}

