OBJECT Table 12013663 Ex Coding Rule Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF348000;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    CaptionML=ENU=Coding Rule Line;
  }
  FIELDS
  {
    { 1   ;   ;Company Name        ;Text30        ;TableRelation=Company;
                                                   CaptionML=ENU=Company Name }
    { 2   ;   ;ID                  ;Integer       ;AutoIncrement=No;
                                                   CaptionML=ENU=ID }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 10  ;   ;Column Code         ;Text50        ;CaptionML=ENU=Column Code }
    { 11  ;   ;Column ID           ;Integer       ;CaptionML=ENU=Column ID }
    { 12  ;   ;All                 ;Boolean       ;OnValidate=BEGIN
                                                                UpdateExpression;
                                                              END;

                                                   CaptionML=ENU=All }
    { 13  ;   ;Empty               ;Boolean       ;OnValidate=BEGIN
                                                                UpdateExpression;
                                                              END;

                                                   CaptionML=ENU=Empty }
    { 15  ;   ;Text Range          ;Text250       ;OnValidate=BEGIN
                                                                UpdateExpression;
                                                              END;

                                                   CaptionML=ENU=Text Range }
    { 16  ;   ;Column Source       ;Text50        ;CaptionML=ENU=Source }
  }
  KEYS
  {
    {    ;Company Name,ID,Line No.                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EXF01@1100285002 : TextConst 'ENU=Expression too long!';

    PROCEDURE UpdateExpression@1100285000() : Text[250];
    VAR
      CodingRule@1100285003 : Record 12013660;
      CodingRuleLine@1100285002 : Record 12013663;
      Last@1100285000 : Integer;
      txtExpression@1100285001 : Text[250];
      LocalExpression@1100285004 : Text[250];
      Expr@1100285005 : Integer;
    BEGIN
      MODIFY;
      //342464
      CodingRule.GET("Company Name", ID);
      //342464
      CodingRule.Expression := '';
      CodingRule.Expression2 := '';
      CodingRule.Expression3 := '';
      CodingRule.Expression4 := '';

      Expr := 1;

      CodingRuleLine.RESET;
      //342464
      CodingRuleLine.SETRANGE("Company Name", "Company Name");
      //342464
      CodingRuleLine.SETRANGE(ID, ID);
      IF CodingRuleLine.FIND('-') THEN
        REPEAT
          IF CodingRuleLine.All OR CodingRuleLine.Empty OR (CodingRuleLine."Text Range" <> '') THEN
            BEGIN

              TestLength(CodingRule,
                (';'+ FORMAT(CodingRuleLine."Column ID") + '=')+ ('=<ALL>|<EMPTY>;') + CodingRuleLine."Text Range",Expr);


              IF STRLEN(CodingRule.Expression) <> 0 THEN
                txtExpression := AddToExpression(CodingRule, ';' + FORMAT(CodingRuleLine."Column ID") + '=',Expr)
              ELSE
                txtExpression := AddToExpression(CodingRule, FORMAT(CodingRuleLine."Column ID") + '=',Expr);

              IF CodingRuleLine.All THEN
                BEGIN
                  Last := STRLEN(txtExpression);
                  IF txtExpression[Last] = '=' THEN
                    txtExpression := AddToExpression(CodingRule, '<ALL>', Expr)
                  ELSE
                    txtExpression := AddToExpression(CodingRule, '|<ALL>', Expr);
                END;

              IF CodingRuleLine.Empty THEN
                BEGIN
                  Last := STRLEN(txtExpression);

                  IF txtExpression[Last] = '=' THEN
                    txtExpression := AddToExpression(CodingRule, '<EMPTY>', Expr)
                  ELSE
                    txtExpression := AddToExpression(CodingRule, '|<EMPTY>', Expr);
                END;

              IF CodingRuleLine."Text Range" <> '' THEN
                BEGIN
                  Last := STRLEN(txtExpression);

                  IF txtExpression[Last] = '=' THEN
                    txtExpression := AddToExpression(CodingRule, CodingRuleLine."Text Range", Expr)
                  ELSE
                    txtExpression := AddToExpression(CodingRule, '|' + CodingRuleLine."Text Range", Expr);
                END;
            END;
        UNTIL CodingRuleLine.NEXT = 0;

      LocalExpression := CodingRule.Expression;
      CodingRule.MODIFY;
    END;

    PROCEDURE AddToExpression@1100285001(VAR CodingRule@1100285000 : Record 12013660;AddText@1100285001 : Text[250];VAR Expr@1100285002 : Integer) : Text[250];
    BEGIN
      CASE Expr OF
        1:
          BEGIN
            CodingRule.Expression  := CodingRule.Expression  + AddText;
            EXIT(CodingRule.Expression);
          END;
        2:
          BEGIN
            CodingRule.Expression2 := CodingRule.Expression2 + AddText;
            EXIT(CodingRule.Expression2);
          END;
        3:
          BEGIN
            CodingRule.Expression3 := CodingRule.Expression3 + AddText;
            EXIT(CodingRule.Expression3);
          END;
        4:
          BEGIN
            CodingRule.Expression4 := CodingRule.Expression4 + AddText;
            EXIT(CodingRule.Expression4);
          END;
      END;
    END;

    PROCEDURE TestLength@1100285002(VAR CodingRule@1100285001 : Record 12013660;AddText@1100285000 : Text[250];VAR Expr@1100285007 : Integer);
    VAR
      LenExpression@1100285005 : Integer;
      LenExpression2@1100285004 : Integer;
      LenExpression3@1100285003 : Integer;
      LenExpression4@1100285006 : Integer;
      LenAddText@1100285002 : Integer;
    BEGIN
      LenExpression := STRLEN(CodingRule.Expression);
      LenExpression2 := STRLEN(CodingRule.Expression2);
      LenExpression3 := STRLEN(CodingRule.Expression3);
      LenExpression4 := STRLEN(CodingRule.Expression4);
      LenAddText := STRLEN(AddText);

      IF (Expr = 1) AND ((LenAddText + LenExpression) > 250) THEN
        Expr := 2;
      IF (Expr = 2) AND ((LenAddText + LenExpression2) > 250) THEN
        Expr := 3;
      IF (Expr = 3) AND ((LenAddText + LenExpression3) > 250) THEN
        Expr := 4;
      IF (Expr = 4) AND ((LenAddText + LenExpression4) > 250) THEN
        ERROR(EXF01);
    END;

    BEGIN
    END.
  }
}

