OBJECT Table 12013684 Add EX Column
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF400007,4PS;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    CaptionML=ENU=Add ExFlow Column;
  }
  FIELDS
  {
    { 5   ;   ;Type                ;Option        ;CaptionML=ENU=Column Type;
                                                   OptionCaptionML=ENU=Line Type,Dimension,Misc.;
                                                   OptionString=Line Type,Dimension,Misc;
                                                   Editable=No }
    { 6   ;   ;Source              ;Text50        ;CaptionML=ENU=Source;
                                                   Editable=No }
    { 10  ;   ;Code                ;Text50        ;CaptionML=ENU=Code;
                                                   Editable=Yes }
    { 12  ;   ;Format              ;Text250       ;CaptionML=ENU=Format;
                                                   Editable=Yes }
    { 14  ;   ;Use Auto Completion ;Boolean       ;CaptionML=ENU=Use Auto Completion }
    { 15  ;   ;Is Free Text        ;Boolean       ;CaptionML=ENU=Is Free Text }
    { 16  ;   ;Current Sort Order  ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("EX Column"."Sort Order" WHERE (Source=FIELD(Source)));
                                                   CaptionML=ENU=Current Sort Order;
                                                   Editable=No }
    { 17  ;   ;Document Display Expr;Text250      ;CaptionML=ENU=Document Display Expr }
    { 18  ;   ;Line Display Expr   ;Text250       ;CaptionML=ENU=Line Display Expr }
    { 19  ;   ;Data Type           ;Text30        ;CaptionML=ENU=Data Type }
    { 20  ;   ;Dimension Code      ;Code20        ;TableRelation=Dimension;
                                                   CaptionML=ENU=Dimension }
    { 22  ;   ;Exists              ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("EX Column" WHERE (Source=FIELD(Source)));
                                                   CaptionML=ENU=Exists;
                                                   Editable=No }
    { 23  ;   ;Description         ;Text250       ;CaptionML=ENU=Description;
                                                   Editable=No }
    { 24  ;   ;New Sort Order      ;Integer       ;CaptionML=ENU=New Sort Order }
    { 25  ;   ;ExFlow Base Version ;Integer       ;CaptionML=ENU=ExFlow Base Version;
                                                   Editable=No }
    { 26  ;   ;New Visibility      ;Option        ;CaptionML=ENU=New Visibility;
                                                   OptionCaptionML=ENU=,Visible,Hidden;
                                                   OptionString=0,Visible,Hidden;
                                                   BlankZero=Yes }
    { 100 ;   ;Purchase Line Field ID;Integer     ;TableRelation=Field.No. WHERE (TableNo=CONST(39));
                                                   CaptionML=ENU=Purchase Line Field ID;
                                                   Description=736 }
  }
  KEYS
  {
    {    ;Type,Source                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text009@1100285003 : TextConst 'ENU=The column %1 is Added/modified';
      Text010@1100285002 : TextConst 'ENU=Sorting %1 already assigned';
      Text011@1100285001 : TextConst 'ENU=Sorting must be > 0';
      Text012@1100285000 : TextConst 'ENU=The Column %1 already exists';
      Text013@1100285004 : TextConst 'ENU=Do you wish to proceed adding Column %1?';
      Text014@1100285005 : TextConst 'ENU=Aborted';
      Text015@1100285006 : TextConst 'ENU=The Column %1 doesnt exist.';
      Text017@1100285007 : TextConst 'ENU=Financial Short Cut Dimension %1';
      Text018@1100285009 : TextConst 'ENU=Sort Order Must be 0 for Line Type';
      Text019@1100285010 : TextConst 'ENU=Can not verify ExFlow version.';
      Text020@1100285011 : TextConst 'ENU=Column requires ExFlow version %1. You are currently running %2';
      Text028@1100285013 : TextConst 'ENU=Job (Project Granule)';
      Text022@1100285014 : TextConst 'ENU=G/L Account';
      Text023@1100285015 : TextConst 'ENU=Item';
      Text024@1100285016 : TextConst 'ENU=Fixed Asset';
      Text025@1100285017 : TextConst 'ENU=Item Charges';
      Text026@1100285018 : TextConst 'ENU=SE Periodic Codes (Requires Swedish ExFlow Version)';
      Text027@1100285019 : TextConst 'ENU=SE Periodic Date (Requires Swedish NAV/ExFlow ver.)';
      Text029@1100285021 : TextConst 'ENU=You may not modify settings for Line Types.';
      Text030@1100285022 : TextConst 'ENU=An Error occured uppdating visibilty setting. No changes saved.';
      Text031@1100285012 : TextConst 'ENU=Job Task (Project Granule)';
      Text032@1100285020 : TextConst 'ENU=Customer (Invoicing)';
      Text033@1100285023 : TextConst 'ENU=Invoicing code';
      Text034@1100285024 : TextConst 'ENU=Customer Invoice (Yes/No)';
      Text035@1100285025 : TextConst 'ENU=Invoicing Amount';
      Text036@1100285026 : TextConst 'ENU=Invoicing Date';
      Text037@1100285008 : TextConst 'ENU=Deferral code (NAV2016 and higher)';

    PROCEDURE InitTable@1100285000();
    VAR
      GLSetup@1100285000 : Record 98;
      lRecRef@1100285001 : RecordRef;
      lNdx@1100285002 : Integer;
      lFldRef@1100285003 : FieldRef;
      DimCode@1100285004 : Code[50];
      DimSource@1100285005 : Code[50];
    BEGIN
      DELETEALL;
      RESET;
      InitLineType;
      InsertColumn;

      GLSetup.GET;
      lRecRef.GETTABLE(GLSetup);
      FOR lNdx := 0 TO 7 DO BEGIN
        lFldRef := lRecRef.FIELD(GLSetup.FIELDNO("Shortcut Dimension 1 Code") + lNdx);
        DimCode := lFldRef.VALUE;
        DimSource := 'DIM' + SYSTEM.FORMAT(lNdx+1);
        IF DimCode <> '' THEN
          InsertDim(DimCode,DimSource);
      END;
    END;

    PROCEDURE InsertDim@1100285001(DimCode@1100285000 : Code[50];DimSource@1100285001 : Code[50]);
    VAR
      DividerChar@1100285002 : Char;
    BEGIN
      DividerChar := 8212;

      INIT;
      Type := Type::Dimension;
      "Dimension Code" := DimCode;
      Source := DimSource;
      Code := DimCode;
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := STRSUBSTNO(Text017,DimCode);
      "ExFlow Base Version" := 342000;
      "Use Auto Completion" := TRUE;
      INSERT(TRUE);
    END;

    PROCEDURE InsertColumn@1100285011();
    VAR
      Object@1100285001 : Record 2000000001;
      DividerChar@1100285000 : Char;
    BEGIN
      DividerChar := 8212;

      // GL
      INIT;
      Type := Type::"Line Type";
      Source := 'G_LACCOUNT';
      Code := 'G_LACCOUNT';
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := STRSUBSTNO(Text022);
      "Line Display Expr" := 'LineType=1';
      "ExFlow Base Version" := 342000;
      "Use Auto Completion" := TRUE;
      INSERT(TRUE);

      // Item
      INIT;
      Type := Type::"Line Type";
      Source := 'ITEM';
      Code := 'ITEM';
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := STRSUBSTNO(Text023);
      "Line Display Expr" := 'LineType=2';
      "ExFlow Base Version" := 342000;
      "Use Auto Completion" := TRUE;
      INSERT(TRUE);

      // FA
      INIT;
      Type := Type::"Line Type";
      Source := 'FIXEDASSET';
      Code := 'FIXEDASSET';
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := STRSUBSTNO(Text024);
      "Line Display Expr" := 'LineType=4';
      "ExFlow Base Version" := 342000;
      "Use Auto Completion" := TRUE;
      INSERT(TRUE);

      // Charge
      INIT;
      Type := Type::"Line Type";
      Source := 'CHARGE';
      Code := 'CHARGE';
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := STRSUBSTNO(Text025);
      "Line Display Expr" := 'LineType=5';
      "ExFlow Base Version" := 342000;
      "Use Auto Completion" := TRUE;
      INSERT(TRUE);

      // Deferral codes in 2016 and Periodic Code in 2015
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, 1700);
      IF Object.FINDFIRST THEN BEGIN
        // Deferral Code
        INIT;
        Type := Type::Misc;
        Source := 'PERCODE';
        Code := 'PERCODE';
        Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
        Description := STRSUBSTNO(Text037);
        "ExFlow Base Version" := 400000;
        "Use Auto Completion" := TRUE;
        INSERT(TRUE);
      END
      ELSE BEGIN
        // Periodic Code
        INIT;
        Type := Type::Misc;
        Source := 'PERCODE';
        Code := 'PERCODE';
        Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
        Description := STRSUBSTNO(Text026);
        "ExFlow Base Version" := 342000;
        "Use Auto Completion" := TRUE;
        INSERT(TRUE);

        // Periodic Date
        INIT;
        Type := Type::Misc;
        Source := 'PERDATE';
        Code := 'PERDATE';
        Format := '{0:d}';
        Description := STRSUBSTNO(Text027);
        "ExFlow Base Version" := 342000;
        "Use Auto Completion" := FALSE;
        "Is Free Text" := FALSE;
        "Data Type" := 'System.DateTime';
        INSERT(TRUE);
      END;

      // Job
      INIT;
      Type := Type::Misc;
      Source := 'JOB';
      Code := 'JOB';
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := STRSUBSTNO(Text028);
      "ExFlow Base Version" := 344000;
      "Use Auto Completion" := TRUE;
      INSERT(TRUE);

      // Job task
      INIT;
      Type := Type::Misc;
      Source := 'JOBTASK';
      Code := 'JOBTASK';
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := STRSUBSTNO(Text031);
      "ExFlow Base Version" := 344000;
      "Use Auto Completion" := TRUE;
      INSERT(TRUE);

      // Customer
      INIT;
      Type := Type::Misc;
      Source := 'CUSTOMER';
      Code := 'CUSTOMER';
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := STRSUBSTNO(Text032);
      "ExFlow Base Version" := 344000;
      "Use Auto Completion" := TRUE;
      INSERT(TRUE);

      // Invoicing code
      INIT;
      Type := Type::Misc;
      Source := 'INV_CODE';
      Code := 'INV_CODE';
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := STRSUBSTNO(Text033);
      "ExFlow Base Version" := 344000;
      "Use Auto Completion" := TRUE;
      "Purchase Line Field ID" := 12013614;
      INSERT(TRUE);

      // Customer invoice
      INIT;
      Type := Type::Misc;
      Source := 'CUSTOMERINV';
      Code := 'CUSTOMERINV';
      Format := '{0}';
      Description := STRSUBSTNO(Text034);
      "ExFlow Base Version" := 344000;
      "Use Auto Completion" := FALSE;
      "Data Type" := 'System.Boolean';
      "Purchase Line Field ID" := 12013611;
      INSERT(TRUE);

      // Invoicing amount
      INIT;
      Type := Type::Misc;
      Source := 'AMOUNTINV';
      Code := 'AMOUNTINV';
      Format := '{0:N}';
      Description := STRSUBSTNO(Text035);
      "ExFlow Base Version" := 344000;
      "Use Auto Completion" := FALSE;
      "Data Type" := 'System.Decimal';
      "Purchase Line Field ID" := 12013612;
      INSERT(TRUE);

      // Invoicing date
      INIT;
      Type := Type::Misc;
      Source := 'INVDATE';
      Code := 'INVDATE';
      Format := '{0:d}';
      Description := STRSUBSTNO(Text036);
      "ExFlow Base Version" := 344000;
      "Use Auto Completion" := FALSE;
      "Data Type" := 'System.DateTime';
      "Purchase Line Field ID" := 12013613;
      INSERT(TRUE);
    END;

    PROCEDURE CreateColumn@1100285002(pAddNewColumn@1100285006 : Record 12013684);
    VAR
      lEXColumn@1100285002 : Record 12013661;
      lEXCodingRule@1100285001 : Record 12013660;
      lEXCodingRuleLine@1100285000 : Record 12013663;
      lNextLineNo@1100285003 : Integer;
      IntBaseVersion@1100285007 : Integer;
    BEGIN
      IF pAddNewColumn.Exists THEN
        ERROR(Text012,pAddNewColumn.Code);

      IF pAddNewColumn.Type = Type::"Line Type" THEN
        pAddNewColumn."New Sort Order" := 0
      ELSE BEGIN
        IF pAddNewColumn."New Sort Order" <> 0 THEN
          CheckSortOrderOk(pAddNewColumn.Type,pAddNewColumn."New Sort Order")
        ELSE
          pAddNewColumn."New Sort Order" := GetNextSortOrder;
      END;

      IF NOT CONFIRM(Text013,TRUE,pAddNewColumn.Code) THEN
        ERROR(Text014);

      IF pAddNewColumn.Type = Type::Misc THEN BEGIN
        GetBaseVersion(IntBaseVersion);
        IF pAddNewColumn."ExFlow Base Version" > IntBaseVersion THEN
          ERROR(Text020,pAddNewColumn."ExFlow Base Version",IntBaseVersion);
      END;

      lEXColumn.INIT;
      lEXColumn.TRANSFERFIELDS(pAddNewColumn);
      lEXColumn.ID := GetNextID;
      lEXColumn.Source :=  pAddNewColumn.Source;
      lEXColumn."Sort Order" := pAddNewColumn."New Sort Order";
      IF pAddNewColumn.Type = Type::"Line Type" THEN
        ActivateLineType(pAddNewColumn.Code);

      lEXColumn.INSERT(TRUE);

      lEXCodingRule.RESET;
      IF lEXCodingRule.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          lEXCodingRuleLine.RESET;
          lEXCodingRuleLine.SETRANGE(ID,lEXCodingRule.ID);
          IF lEXCodingRuleLine.FINDLAST THEN
            lNextLineNo := lEXCodingRuleLine."Line No." + 10000
          ELSE
            lNextLineNo := 10000;

          lEXCodingRuleLine.RESET;
          lEXCodingRuleLine.INIT;
          lEXCodingRuleLine.ID := lEXCodingRule.ID;
          lEXCodingRuleLine."Line No." := lNextLineNo;
          lEXCodingRuleLine."Column Code" := lEXColumn.Code;
          lEXCodingRuleLine."Column ID" := lEXColumn.ID;
          IF NOT lEXCodingRule.IsDeny THEN BEGIN
            lEXCodingRuleLine.All := TRUE;
            lEXCodingRuleLine.Empty := (lEXCodingRule."Is Validation") OR (lEXCodingRule."Is Filter");
          END;
          // Exception for job task
          IF lEXCodingRule."Is Filter" THEN
            IF lEXCodingRuleLine."Column Code" = 'JOBTASK' THEN BEGIN
              lEXCodingRuleLine.All := FALSE;
              lEXCodingRuleLine.Empty := FALSE;
            END;
          lEXCodingRuleLine."Column Source":= lEXColumn.Source;
          lEXCodingRuleLine.INSERT(TRUE);
          lEXCodingRuleLine.UpdateExpression;
        UNTIL lEXCodingRule.NEXT = 0;
      END;

      MESSAGE(Text009,pAddNewColumn.Code);
    END;

    PROCEDURE UpdateColumn@1100285009(pAddNewColumn@1100285006 : Record 12013684);
    VAR
      lEXColumn@1100285002 : Record 12013661;
    BEGIN
      IF NOT pAddNewColumn.Exists THEN
        ERROR(Text015,pAddNewColumn.Code);

      IF pAddNewColumn.Type = Type::"Line Type" THEN
        ERROR(Text029);

      IF pAddNewColumn."New Sort Order" <> 0 THEN BEGIN
        CheckSortOrderOk(pAddNewColumn.Type,pAddNewColumn."New Sort Order");
        lEXColumn.RESET;
        lEXColumn.SETRANGE(Source,pAddNewColumn.Source);
        lEXColumn.FINDFIRST;
        lEXColumn."Sort Order" := pAddNewColumn."New Sort Order";
        lEXColumn.MODIFY(TRUE);
      END;

      IF pAddNewColumn."New Visibility" = "New Visibility"::Visible THEN BEGIN
        lEXColumn.RESET;
        lEXColumn.SETRANGE(Source,pAddNewColumn.Source);
        lEXColumn.FINDFIRST;
        IF UPPERCASE(lEXColumn."Document Display Expr") = 'FALSE' THEN
          lEXColumn."Document Display Expr" := '';
        IF UPPERCASE(lEXColumn."Line Display Expr") = 'FALSE' THEN
          lEXColumn."Line Display Expr" := '';
        lEXColumn.MODIFY(TRUE);
      END;

      IF pAddNewColumn."New Visibility" = "New Visibility"::Hidden THEN BEGIN
        lEXColumn.RESET;
        lEXColumn.SETRANGE(Source,pAddNewColumn.Source);
        lEXColumn.FINDFIRST;
        IF UPPERCASE(lEXColumn."Line Display Expr") = '' THEN
          lEXColumn."Line Display Expr" := 'FALSE'
        ELSE IF UPPERCASE(lEXColumn."Document Display Expr") = '' THEN
          lEXColumn."Document Display Expr" := 'FALSE'
        ELSE
          ERROR(Text030);
        lEXColumn.MODIFY(TRUE);
      END;

      MESSAGE(Text009,pAddNewColumn.Code);
    END;

    PROCEDURE InitLineType@1100285004();
    VAR
      ExLineType@1100285000 : Record 12013642;
      ExLineType2@1100285001 : Record 12013642;
    BEGIN
      ExLineType.RESET;
      ExLineType.SETRANGE("Line Type",'G_LACCOUNT');
      IF NOT ExLineType.FINDFIRST THEN BEGIN
        ExLineType2.INIT;
        ExLineType2.Code := 1;
        ExLineType2."Line Type" := 'G_LACCOUNT';
        ExLineType2.Value := 1;
        ExLineType2."Document Display Expr" := 'FALSE';
        ExLineType2."Line Display Expr" := 'LineType>0';
        ExLineType2.INSERT(TRUE);
      END;

      ExLineType.RESET;
      ExLineType.SETRANGE("Line Type",'ITEM');
      IF NOT ExLineType.FINDFIRST THEN BEGIN
        ExLineType2.INIT;
        ExLineType2.Code := 2;
        ExLineType2."Line Type" := 'ITEM';
        ExLineType2.Value := 2;
        ExLineType2."Document Display Expr" := 'FALSE';
        ExLineType2.INSERT(TRUE);
      END;

      ExLineType.RESET;
      ExLineType.SETRANGE("Line Type",'FIXEDASSET');
      IF NOT ExLineType.FINDFIRST THEN BEGIN
        ExLineType2.INIT;
        ExLineType2.Code := 3;
        ExLineType2."Line Type" := 'FIXEDASSET';
        ExLineType2.Value := 3;
        ExLineType2."Document Display Expr" := 'FALSE';
        ExLineType2.INSERT(TRUE);
      END;

      ExLineType.RESET;
      ExLineType.SETRANGE("Line Type",'CHARGE');
      IF NOT ExLineType.FINDFIRST THEN BEGIN
        ExLineType2.INIT;
        ExLineType2.Code := 4;
        ExLineType2."Line Type" := 'CHARGE';
        ExLineType2.Value := 4;
        ExLineType2."Document Display Expr" := 'FALSE';
        ExLineType2.INSERT(TRUE);
      END;
    END;

    PROCEDURE ActivateLineType@1100285003(pCode@1100285000 : Code[50]);
    VAR
      ExLineType@1100285001 : Record 12013642;
    BEGIN
      ExLineType.RESET;
      ExLineType.SETRANGE("Line Type",pCode);
      ExLineType.FIND('-');
      ExLineType."Document Display Expr" := 'TRUE';
      ExLineType.MODIFY(TRUE);
    END;

    PROCEDURE GetNextID@1100285005() : Integer;
    VAR
      ExColumn@1100285001 : Record 12013661;
    BEGIN
      ExColumn.RESET;
      ExColumn.SETCURRENTKEY(ID);
      IF ExColumn.FINDLAST THEN
        EXIT(ExColumn.ID + 1)
      ELSE
        EXIT(1);
    END;

    PROCEDURE GetNextSortOrder@1100285006() : Integer;
    VAR
      ExColumn@1100285000 : Record 12013661;
      lNdx@1100285001 : Integer;
    BEGIN
      lNdx := 0;
      ExColumn.RESET;
      ExColumn.SETCURRENTKEY(ID);
      IF ExColumn.FINDSET THEN
        REPEAT
          IF ExColumn."Sort Order" > lNdx THEN
            lNdx := ExColumn."Sort Order";
        UNTIL ExColumn.NEXT = 0;
      EXIT(lNdx + 1);
    END;

    PROCEDURE CheckSortOrderOk@1100285007(LineType@1100285003 : Integer;pSortOrder@1100285000 : Integer) : Boolean;
    VAR
      ExColumn@1100285001 : Record 12013661;
    BEGIN
      IF (LineType = 0) THEN BEGIN
        IF (pSortOrder <> 0) THEN
          ERROR(Text018);
      END ELSE BEGIN
        IF pSortOrder = 0 THEN
          ERROR(Text011);

        ExColumn.RESET;
        ExColumn.SETRANGE("Sort Order", pSortOrder);
        IF NOT ExColumn.ISEMPTY THEN
          ERROR(Text010,pSortOrder);
      END;
    END;

    PROCEDURE GetBaseVersion@1100285010(VAR IntBaseVer@1100285013 : Integer);
    VAR
      ExAppSetup@1100285012 : Record 12013601;
      BaseVersion@1100285011 : Text[250];
      HotfixNumbers@1100285010 : Text[250];
      DateForBaseVersion@1100285009 : Date;
      ModifiedObjectsExists@1100285008 : Boolean;
      VersionListForFirstModifiedObj@1100285007 : Text[250];
      DateForModObj@1100285006 : Date;
      BaseVersionStd@1100285005 : Text[250];
      HotfixNumbersStd@1100285004 : Text[250];
      DateForBaseVersionStd@1100285003 : Date;
      ModifiedObjectsExistsStd@1100285002 : Boolean;
      VersionListForFirstModObjStd@1100285001 : Text[250];
      DateForModObjStd@1100285000 : Date;
    BEGIN
      ExAppSetup.ReturnExFlowVersionData(BaseVersion,HotfixNumbers,DateForBaseVersion,
                                         ModifiedObjectsExists,VersionListForFirstModifiedObj,
                                         DateForModObj,BaseVersionStd,HotfixNumbersStd,DateForBaseVersionStd,ModifiedObjectsExistsStd,
                                         VersionListForFirstModObjStd,DateForModObjStd);
      IF NOT(EVALUATE(IntBaseVer,BaseVersion)) THEN
        ERROR(Text019);
    END;

    PROCEDURE IsVisible@1100285012() : Boolean;
    VAR
      ExColumn@1100285001 : Record 12013661;
    BEGIN
      ExColumn.RESET;
      ExColumn.SETRANGE(Source,Source);

      IF NOT ExColumn.FINDFIRST THEN
        EXIT(FALSE);

      IF (UPPERCASE(ExColumn."Document Display Expr") = 'FALSE') OR (UPPERCASE(ExColumn."Line Display Expr") = 'FALSE') THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

