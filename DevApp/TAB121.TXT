OBJECT Table 121 Purch. Rcpt. Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.45243,4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 32=r,
                TableData 121=m,
                TableData 5802=r;
    OnDelete=VAR
               PurchDocLineComments@1000 : Record 43;
             BEGIN
               PurchDocLineComments.SETRANGE("Document Type",PurchDocLineComments."Document Type"::Receipt);
               PurchDocLineComments.SETRANGE("No.","Document No.");
               PurchDocLineComments.SETRANGE("Document Line No.","Line No.");
               IF NOT PurchDocLineComments.ISEMPTY THEN
                 PurchDocLineComments.DELETEALL;

               DeletePurchaseLineDetails; //**4PS.n
             END;

    CaptionML=ENU=Purch. Rcpt. Line;
    LookupPageID=Page528;
    DrillDownPageID=Page11012073;
  }
  FIELDS
  {
    { 2   ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Buy-from Vendor No.;
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Purch. Rcpt. Header";
                                                   CaptionML=ENU=Document No. }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 5   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,G/L Account,Item,,Fixed Asset,Charge (Item)";
                                                   OptionString=[ ,G/L Account,Item,,Fixed Asset,Charge (Item)] }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Type=CONST("Charge (Item)")) "Item Charge";
                                                   CaptionML=ENU=No. }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=ENU=Location Code }
    { 8   ;   ;Posting Group       ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group"
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   CaptionML=ENU=Posting Group;
                                                   Editable=No }
    { 10  ;   ;Expected Receipt Date;Date         ;CaptionML=ENU=Expected Receipt Date }
    { 11  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 12  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 13  ;   ;Unit of Measure     ;Text10        ;CaptionML=ENU=Unit of Measure }
    { 15  ;   ;Quantity            ;Decimal       ;CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Direct Unit Cost    ;Decimal       ;CaptionML=ENU=Direct Unit Cost;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;CaptionML=ENU=Unit Cost (LCY);
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=ENU=VAT %;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 27  ;   ;Line Discount %     ;Decimal       ;CaptionML=ENU=Line Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 31  ;   ;Unit Price (LCY)    ;Decimal       ;CaptionML=ENU=Unit Price (LCY);
                                                   AutoFormatType=2 }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   CaptionML=ENU=Allow Invoice Disc. }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=ENU=Gross Weight;
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=ENU=Net Weight;
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=ENU=Units per Parcel;
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=ENU=Unit Volume;
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;AccessByPermission=TableData 27=R;
                                                   CaptionML=ENU=Appl.-to Item Entry }
    { 39  ;   ;Item Rcpt. Entry No.;Integer       ;CaptionML=ENU=Item Rcpt. Entry No. }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 45  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=ENU=Project No. }
    { 54  ;   ;Indirect Cost %     ;Decimal       ;CaptionML=ENU=Indirect Cost %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 58  ;   ;Qty. Rcd. Not Invoiced;Decimal     ;AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Qty. Rcd. Not Invoiced;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 61  ;   ;Quantity Invoiced   ;Decimal       ;CaptionML=ENU=Quantity Invoiced;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 65  ;   ;Order No.           ;Code20        ;AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Order No. }
    { 66  ;   ;Order Line No.      ;Integer       ;AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Order Line No. }
    { 68  ;   ;Pay-to Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Pay-to Vendor No. }
    { 70  ;   ;Vendor Item No.     ;Text20        ;CaptionML=ENU=Vendor Item No. }
    { 71  ;   ;Sales Order No.     ;Code20        ;CaptionML=ENU=Sales Order No. }
    { 72  ;   ;Sales Order Line No.;Integer       ;CaptionML=ENU=Sales Order Line No. }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 75  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=ENU=VAT Calculation Type;
                                                   OptionCaptionML=ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=ENU=Transaction Type }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=ENU=Transport Method }
    { 80  ;   ;Attached to Line No.;Integer       ;TableRelation="Purch. Rcpt. Line"."Line No." WHERE (Document No.=FIELD(Document No.));
                                                   CaptionML=ENU=Attached to Line No. }
    { 81  ;   ;Entry Point         ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=ENU=Entry Point }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=ENU=Area }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=ENU=Transaction Specification }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=ENU=Tax Area Code }
    { 86  ;   ;Tax Liable          ;Boolean       ;CaptionML=ENU=Tax Liable }
    { 87  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   CaptionML=ENU=Tax Group Code }
    { 88  ;   ;Use Tax             ;Boolean       ;CaptionML=ENU=Use Tax }
    { 89  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 90  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 91  ;   ;Currency Code       ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purch. Rcpt. Header"."Currency Code" WHERE (No.=FIELD(Document No.)));
                                                   CaptionML=ENU=Currency Code;
                                                   Editable=No }
    { 97  ;   ;Blanket Order No.   ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=CONST(Blanket Order));
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Blanket Order No.;
                                                   Description=[4PS: Raam  -> Afroep  ] }
    { 98  ;   ;Blanket Order Line No.;Integer     ;TableRelation="Purchase Line"."Line No." WHERE (Document Type=CONST(Blanket Order),
                                                                                                   Document No.=FIELD(Blanket Order No.));
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Blanket Order Line No.;
                                                   Description=[4PS: Raam  -> Afroep  ] }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=ENU=VAT Base Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=ENU=Unit Cost;
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 131 ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=No }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   CaptionML=ENU=Job Task No. }
    { 1002;   ;Job Line Type       ;Option        ;CaptionML=ENU=Job Line Type;
                                                   OptionCaptionML=ENU=" ,Schedule,Contract,Both Schedule and Contract";
                                                   OptionString=[ ,Schedule,Contract,Both Schedule and Contract] }
    { 1003;   ;Job Unit Price      ;Decimal       ;CaptionML=ENU=Job Unit Price;
                                                   BlankZero=Yes }
    { 1004;   ;Job Total Price     ;Decimal       ;CaptionML=ENU=Job Total Price;
                                                   BlankZero=Yes }
    { 1005;   ;Job Line Amount     ;Decimal       ;CaptionML=ENU=Job Line Amount;
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1006;   ;Job Line Discount Amount;Decimal   ;CaptionML=ENU=Job Line Discount Amount;
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1007;   ;Job Line Discount % ;Decimal       ;CaptionML=ENU=Job Line Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   BlankZero=Yes }
    { 1008;   ;Job Unit Price (LCY);Decimal       ;CaptionML=ENU=Job Unit Price (LCY);
                                                   BlankZero=Yes }
    { 1009;   ;Job Total Price (LCY);Decimal      ;CaptionML=ENU=Job Total Price (LCY);
                                                   BlankZero=Yes }
    { 1010;   ;Job Line Amount (LCY);Decimal      ;CaptionML=ENU=Job Line Amount (LCY);
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 1011;   ;Job Line Disc. Amount (LCY);Decimal;CaptionML=ENU=Job Line Disc. Amount (LCY);
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 1012;   ;Job Currency Factor ;Decimal       ;CaptionML=ENU=Job Currency Factor;
                                                   BlankZero=Yes }
    { 1013;   ;Job Currency Code   ;Code20        ;CaptionML=ENU=Job Currency Code }
    { 5401;   ;Prod. Order No.     ;Code20        ;TableRelation="Production Order".No. WHERE (Status=FILTER(Released|Finished));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Prod. Order No. }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=ENU=Variant Code;
                                                   Description=4PS: TableRelation changed }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                 Item Filter=FIELD(No.),
                                                                                 Variant Filter=FIELD(Variant Code));
                                                   CaptionML=ENU=Bin Code }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE "Unit of Measure";
                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;  //**4PS.n
                                                            END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 5415;   ;Quantity (Base)     ;Decimal       ;CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 5461;   ;Qty. Invoiced (Base);Decimal       ;CaptionML=ENU=Qty. Invoiced (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5600;   ;FA Posting Date     ;Date          ;CaptionML=ENU=FA Posting Date }
    { 5601;   ;FA Posting Type     ;Option        ;CaptionML=ENU=FA Posting Type;
                                                   OptionCaptionML=ENU=" ,Acquisition Cost,Maintenance";
                                                   OptionString=[ ,Acquisition Cost,Maintenance] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   CaptionML=ENU=Depreciation Book Code }
    { 5603;   ;Salvage Value       ;Decimal       ;CaptionML=ENU=Salvage Value;
                                                   AutoFormatType=1 }
    { 5605;   ;Depr. until FA Posting Date;Boolean;CaptionML=ENU=Depr. until FA Posting Date }
    { 5606;   ;Depr. Acquisition Cost;Boolean     ;CaptionML=ENU=Depr. Acquisition Cost }
    { 5609;   ;Maintenance Code    ;Code10        ;TableRelation=Maintenance;
                                                   CaptionML=ENU=Maintenance Code }
    { 5610;   ;Insurance No.       ;Code20        ;TableRelation=Insurance;
                                                   CaptionML=ENU=Insurance No. }
    { 5611;   ;Budgeted FA No.     ;Code20        ;TableRelation="Fixed Asset";
                                                   CaptionML=ENU=Budgeted FA No. }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   CaptionML=ENU=Duplicate in Depreciation Book }
    { 5613;   ;Use Duplication List;Boolean       ;CaptionML=ENU=Use Duplication List }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=ENU=Responsibility Center }
    { 5705;   ;Cross-Reference No. ;Code20        ;AccessByPermission=TableData 5717=R;
                                                   CaptionML=ENU=Cross-Reference No. }
    { 5706;   ;Unit of Measure (Cross Ref.);Code10;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=ENU=Unit of Measure (Cross Ref.) }
    { 5707;   ;Cross-Reference Type;Option        ;CaptionML=ENU=Cross-Reference Type;
                                                   OptionCaptionML=ENU=" ,Customer,Vendor,Bar Code";
                                                   OptionString=[ ,Customer,Vendor,Bar Code] }
    { 5708;   ;Cross-Reference Type No.;Code30    ;CaptionML=ENU=Cross-Reference Type No. }
    { 5709;   ;Item Category Code  ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Category";
                                                   CaptionML=ENU=Item Category Code }
    { 5710;   ;Nonstock            ;Boolean       ;CaptionML=ENU=Nonstock }
    { 5711;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   CaptionML=ENU=Purchasing Code }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=ENU=Product Group Code }
    { 5714;   ;Special Order Sales No.;Code20     ;CaptionML=ENU=Special Order Sales No. }
    { 5715;   ;Special Order Sales Line No.;Integer;
                                                   CaptionML=ENU=Special Order Sales Line No. }
    { 5790;   ;Requested Receipt Date;Date        ;AccessByPermission=TableData 99000880=R;
                                                   CaptionML=ENU=Requested Receipt Date }
    { 5791;   ;Promised Receipt Date;Date         ;CaptionML=ENU=Promised Receipt Date }
    { 5792;   ;Lead Time Calculation;DateFormula  ;AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Lead Time Calculation }
    { 5793;   ;Inbound Whse. Handling Time;DateFormula;
                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=ENU=Inbound Whse. Handling Time }
    { 5794;   ;Planned Receipt Date;Date          ;CaptionML=ENU=Planned Receipt Date }
    { 5795;   ;Order Date          ;Date          ;AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Order Date }
    { 5811;   ;Item Charge Base Amount;Decimal    ;CaptionML=ENU=Item Charge Base Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 5817;   ;Correction          ;Boolean       ;CaptionML=ENU=Correction;
                                                   Editable=No }
    { 6608;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   CaptionML=ENU=Return Reason Code }
    { 11012002;;Purchase Order Type;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purchase Header"."Purchase Order Type" WHERE (Document Type=CONST(Order),
                                                                                                                     No.=FIELD(Order No.)));
                                                   CaptionML=ENU=Purchase Order Type;
                                                   OptionCaptionML=ENU=Purchase Order,Blanket Order,Return Order;
                                                   OptionString=Purchase Order,Blanket Order,Return Order;
                                                   Editable=No }
    { 11012040;;Purchase Action    ;Code10        ;TableRelation="Project Purchase Action".Code WHERE (Project No.=FIELD(Job No.));
                                                   CaptionML=ENU=Purchase Action }
    { 11012050;;Purchase Phase     ;Code10        ;CaptionML=ENU=Purchase Phase;
                                                   Numeric=Yes }
    { 11012060;;Cost Type          ;Option        ;FieldClass=Normal;
                                                   CaptionML=ENU=Cost Type;
                                                   OptionCaptionML=ENU=" ,Labor,Material,Subcontracting,Plant,Sundry";
                                                   OptionString=[ ,Labor,Material,Subcontracting,Plant,Sundry] }
    { 11012070;;Element            ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                ElementFormat.FormatElem(Element,2,'');
                                                                IF Element <> '' THEN
                                                                  ProjElemRec.GET("Job No.",Element);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 11012080;;Extension Contract ;Code10        ;TableRelation="Extension Contract"."Contract No." WHERE (Project No.=FIELD(Job No.));
                                                   CaptionML=ENU=Extension Contract }
    { 11012085;;Plot No.           ;Code10        ;TableRelation=Plot."Plot No." WHERE (Project No.=FIELD(Job No.));
                                                   CaptionML=ENU=Plot No. }
    { 11012090;;Received (line)    ;Decimal       ;CaptionML=ENU=Received (line);
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 11012100;;Invoiced (line)    ;Decimal       ;CaptionML=ENU=Invoiced (line);
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 11012101;;Invoiced (LCY) (line);Decimal     ;CaptionML=ENU=Invoiced (LCY) (line);
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012121;;Amount (LCY)       ;Decimal       ;CaptionML=ENU=Amount (LCY) }
    { 11012150;;Item No.           ;Code20        ;TableRelation=Item.No.;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::Item);
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 11012151;;Basic Item         ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN
                                                                  ValidateItem((ItemTypeOpt::"Basic Item"));
                                                              END;

                                                   CaptionML=ENU=Basic Item }
    { 11012152;;Trade Item         ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN
                                                                  ValidateItem((ItemTypeOpt::"Trade Item"));
                                                              END;

                                                   CaptionML=ENU=Trade Item }
    { 11012154;;Manufacturer       ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Manufacturer }
    { 11012155;;Vendor (Trade Item);Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 11012156;;Amnt. Rcd. Not Invoiced;Decimal   ;CaptionML=ENU=Amnt. Rcd. Not Invoiced;
                                                   Editable=No }
    { 11012157;;Amnt. Rcd. Not Invoiced (LCY);Decimal;
                                                   CaptionML=ENU=Amnt. Rcd. Not Invoiced (LCY);
                                                   Editable=No }
    { 11012173;;Expected Back Order Date;Date     ;CaptionML=ENU=Expected Back Order Date }
    { 11012195;;Approve Receipt    ;Option        ;CaptionML=ENU=Approve Receipt;
                                                   OptionCaptionML=ENU=" ,Yes,No";
                                                   OptionString=[ ,Yes,No] }
    { 11012196;;Comment Receipt    ;Text30        ;CaptionML=ENU=Comment Receipt }
    { 11012200;;Text               ;Text250       ;OnValidate=BEGIN
                                                                "Text Block" := Text <> '';
                                                              END;

                                                   CaptionML=ENU=Text }
    { 11012201;;Text Block         ;Boolean       ;CaptionML=ENU=Text Block;
                                                   Editable=No }
    { 11012210;;Employee No.       ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No. }
    { 11012215;;Wage Component     ;Code10        ;TableRelation="Wage Component";
                                                   CaptionML=ENU=Wage Component }
    { 11012220;;Price Agreement    ;Boolean       ;CaptionML=ENU=Price Agreement }
    { 11012230;;Purchase Route Reference;Code20   ;OnLookup=VAR
                                                              lvRouteRefMgtCU@1210190000 : Codeunit 11012045;
                                                            BEGIN
                                                              lvRouteRefMgtCU.ShowReferenceList("Purchase Route Reference");
                                                            END;

                                                   CaptionML=ENU=Purchase Route Reference;
                                                   Editable=No }
    { 11012240;;Shelf No.          ;Code20        ;TableRelation="Shelf per Location".Code WHERE (Location Code=FIELD(Location Code));
                                                   CaptionML=ENU=Shelf No. }
    { 11012250;;Cost Component     ;Code20        ;TableRelation="Cost Component".Code;
                                                   CaptionML=ENU=Cost Component;
                                                   NotBlank=Yes }
    { 11012280;;Tender Paragraph   ;Text10        ;TableRelation="Project Tender Paragraph"."Tender Paragraph" WHERE (Project No.=FIELD(Job No.),
                                                                                                                      Level=CONST(Tender Paragraph));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                GWWMgtCU.FormatTenderElement("Tender Paragraph");
                                                              END;

                                                   CaptionML=ENU=Tender Paragraph }
    { 11012285;;Description Tender Paragraph;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Tender Paragraph".Description WHERE (Project No.=FIELD(Job No.),
                                                                                                                    Tender Paragraph=FIELD(Tender Paragraph)));
                                                   CaptionML=ENU=Description Tender Paragraph;
                                                   Editable=No }
    { 11012286;;Tender Paragraph Text;Text80      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Tender Paragraph Text".Text WHERE (Project No.=FIELD(Job No.),
                                                                                                                  Tender Paragraph=FIELD(Tender Paragraph)));
                                                   CaptionML=ENU=Tender Paragraph Text;
                                                   Editable=No }
    { 11012290;;Tender Paragraph Part;Text10      ;TableRelation="Project Tender Paragraph Part"."Tender Paragraph Part" WHERE (Project No.=FIELD(Job No.),
                                                                                                                                Tender Paragraph=FIELD(Tender Paragraph));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                GWWMgtCU.FormatTenderElementPart("Tender Paragraph Part");
                                                              END;

                                                   CaptionML=ENU=Tender Paragraph Part }
    { 11012295;;Descr Tender Paragraph Part;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Tender Paragraph Part".Description WHERE (Project No.=FIELD(Job No.),
                                                                                                                         Tender Paragraph=FIELD(Tender Paragraph),
                                                                                                                         Tender Paragraph Part=FIELD(Tender Paragraph Part)));
                                                   CaptionML=ENU=Description Tender Paragraph Part;
                                                   Editable=No }
    { 11012300;;Order Status       ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purchase Header".Status WHERE (No.=FIELD(Order No.),
                                                                                                      Document Type=CONST(Order)));
                                                   CaptionML=ENU=Order Status;
                                                   OptionCaptionML=ENU=Open,Released,,,,,,,Closed;
                                                   OptionString=Open,Released,Pending Approval,Pending Prepayment,,,,,Closed;
                                                   Editable=No }
    { 11012310;;FSC Type Code      ;Code10        ;TableRelation="FSC Type";
                                                   CaptionML=ENU=FSC Type Code }
    { 11012351;;Requested Receipt Date differs;Integer;
                                                   CaptionML=ENU=Difference Requested Receipt Date with Posting Date;
                                                   Editable=No }
    { 11012352;;Promised Receipt Date differs;Integer;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  IF "Promised Receipt Date" <> 0D THEN
                                                                    VALIDATE("Planned Receipt Date","Promised Receipt Date")
                                                                  ELSE
                                                                    VALIDATE("Requested Receipt Date")
                                                                ELSE
                                                                  VALIDATE("Planned Receipt Date","Promised Receipt Date");
                                                              END;

                                                   CaptionML=ENU=Difference Promised Receipt Date with Posting Date;
                                                   Editable=No }
    { 11012440;;Plant Location     ;Code20        ;TableRelation="Plant Location" WHERE (Depot=CONST(No));
                                                   CaptionML=ENU=Plant Location }
    { 11012441;;Close Pl.Ext.Rent Ord. on Rcpt;Boolean;
                                                   CaptionML=ENU=Close Plant External Rent Order on Receipt }
    { 11012550;;Plant Type         ;Code20        ;TableRelation="Plant Type";
                                                   CaptionML=ENU=Plant Type }
    { 11012551;;Plant No.          ;Code10        ;TableRelation=IF (Bulk=CONST(No)) "Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   CaptionML=ENU=Plant No. }
    { 11012552;;Bulk               ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Type".Bulk WHERE (Code=FIELD(Plant Type)));
                                                   CaptionML=ENU=Bulk;
                                                   Editable=No }
    { 11012553;;Cost Component Plant;Code10       ;TableRelation="Cost Component Plant";
                                                   CaptionML=ENU=Cost Component Plant }
    { 11012585;;Vendor Qualification;Code10       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor."Vendor Qualification" WHERE (No.=FIELD(Buy-from Vendor No.)));
                                                   TableRelation="Vendor Qualification";
                                                   CaptionML=ENU=Vendor Qualification;
                                                   Editable=No }
    { 11012586;;Account No.        ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purch. Rcpt. Line".No. WHERE (Document No.=FIELD(Document No.),
                                                                                                     Line No.=FIELD(Line No.),
                                                                                                     Type=CONST(G/L Account)));
                                                   CaptionML=ENU=Account No.;
                                                   Editable=No }
    { 11012600;;Budget Adjustment  ;Code10        ;TableRelation="Budget Adjustment".No. WHERE (Project No.=FIELD(Job No.));
                                                   CaptionML=ENU=Budget Adjustment }
    { 11012800;;Service Order No.  ;Code20        ;TableRelation="Service Order".No. WHERE (No.=FIELD(Service Order No.));
                                                   CaptionML=ENU=Service Order No.;
                                                   Editable=No }
    { 11012801;;Service Location No.;Code20       ;TableRelation="Service Location".No.;
                                                   CaptionML=ENU=Service Location No. }
    { 11012804;;Service Contract No.;Code20       ;TableRelation=Service-Contract.No.;
                                                   CaptionML=ENU=Service Contract No. }
    { 11012807;;Removal Contribution;Boolean      ;CaptionML=ENU=Removal Contribution }
    { 11012840;;Service Control Year;Integer      ;CaptionML=ENU=Service Control Year }
    { 11012940;;Rental Unit        ;Code20        ;TableRelation="Rental Unit"."Rental Unit" WHERE (Project No.=FIELD(Job No.));
                                                   CaptionML=ENU=Rental Unit }
    { 11012950;;Scheme Code        ;Code15        ;CaptionML=ENU=Scheme Code }
    { 11012970;;Tariff No.         ;Code20        ;TableRelation="Tariff Number";
                                                   CaptionML=ENU=Tariff No. }
    { 11012975;;Comments for Logistics;Text50     ;CaptionML=ENU=Comments for Logistics }
    { 11012980;;Entity Type        ;Option        ;CaptionML=ENU=Entity Type;
                                                   OptionCaptionML=ENU=None,Cable,Device,Extra Need,Cable Transit,,,,,Position;
                                                   OptionString=None,Cable,Device,ExtraNeed,CableTransit,,,,,Position;
                                                   Description=Engineering;
                                                   Editable=No }
    { 11012981;;System No.         ;Code20        ;CaptionML=ENU=System No.;
                                                   Description=Engineering;
                                                   Editable=No }
    { 11012982;;Entity No.         ;Code20        ;CaptionML=ENU=Entity No.;
                                                   Description=Engineering;
                                                   Editable=No }
    { 11012983;;Cable Transit Pos. ;Option        ;CaptionML=ENU=Cable Transit Postion;
                                                   OptionCaptionML=ENU=" ,From Side,To Side";
                                                   OptionString=[ ,From,To];
                                                   Description=Engineering;
                                                   Editable=No }
    { 11012984;;Yard No.           ;Code20        ;CaptionML=ENU=Yard No.;
                                                   Description=Engineering;
                                                   Editable=No }
    { 11012991;;Number of Labels   ;Integer       ;CaptionML=ENU=Number of labels per goods }
    { 11012996;;Parcels Qty. per UoM;Decimal      ;CaptionML=ENU=Parcels Qty. per Purchase UoM;
                                                   DecimalPlaces=0:0 }
    { 99000750;;Routing No.        ;Code20        ;TableRelation="Routing Header";
                                                   CaptionML=ENU=Routing No. }
    { 99000751;;Operation No.      ;Code10        ;TableRelation="Prod. Order Routing Line"."Operation No." WHERE (Status=FILTER(Released..),
                                                                                                                   Prod. Order No.=FIELD(Prod. Order No.),
                                                                                                                   Routing No.=FIELD(Routing No.));
                                                   CaptionML=ENU=Operation No. }
    { 99000752;;Work Center No.    ;Code20        ;TableRelation="Work Center";
                                                   CaptionML=ENU=Work Center No. }
    { 99000754;;Prod. Order Line No.;Integer      ;TableRelation="Prod. Order Line"."Line No." WHERE (Status=FILTER(Released..),
                                                                                                      Prod. Order No.=FIELD(Prod. Order No.));
                                                   CaptionML=ENU=Prod. Order Line No. }
    { 99000755;;Overhead Rate      ;Decimal       ;CaptionML=ENU=Overhead Rate;
                                                   DecimalPlaces=0:5 }
    { 99000759;;Routing Reference No.;Integer     ;CaptionML=ENU=Routing Reference No. }
  }
  KEYS
  {
    {    ;Document No.,Line No.                   ;Clustered=Yes }
    {    ;Order No.,Order Line No.                 }
    {    ;Blanket Order No.,Blanket Order Line No. }
    {    ;Item Rcpt. Entry No.                     }
    {    ;Pay-to Vendor No.                        }
    {    ;Buy-from Vendor No.,Document No.,Order No.;
                                                   SumIndexFields=Received (line),Invoiced (line) }
    {    ;Job No.,Shortcut Dimension 2 Code,Expected Receipt Date;
                                                   SumIndexFields=Invoiced (LCY) (line) }
    {    ;Purchase Route Reference                 }
    {    ;Job No.,Element,Cost Type,Posting Date  ;SumIndexFields=Invoiced (LCY) (line);
                                                   MaintainSIFTIndex=No }
    {    ;Document No.,Item No.                   ;KeyGroups=PurchSort;
                                                   MaintainSQLIndex=No }
    {    ;Document No.,Location Code,Shelf No.    ;KeyGroups=PurchSort;
                                                   MaintainSQLIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Receipt No. %1:';
      Text001@1001 : TextConst 'ENU=The program cannot find this purchase line.';
      PurchaseLineExtension@1210190001 : Record 11020644;
      Currency@1005 : Record 4;
      PurchRcptHeader@1004 : Record 120;
      DimMgt@1003 : Codeunit 408;
      CurrencyRead@1002 : Boolean;
      ProjElemRec@11012000 : Record 11012010;
      PurchHeader@11012004 : Record 38;
      ElementFormat@11012001 : Codeunit 11012022;
      ValidateCu@11012002 : Codeunit 11012033;
      ItemTypeOpt@11012003 : 'Item,Basic Item,Trade Item';
      Text11012000@1000000000 : TextConst 'ENU=Order No. %1, Receipt No. %2:';
      PurchReceiptHeader@1000000001 : Record 120;
      PurchInvHeader@1000000002 : Record 122;
      PurchCredHeader@1000000003 : Record 124;
      PurchSetup@1000000004 : Record 312;
      GenJnlRec@1000000005 : Record 80;
      ItemRec@1000000007 : Record 27;
      GenPostingSetup@1210190000 : Record 252;
      GWWMgtCU@1100525000 : Codeunit 11012163;
      DPA_Management@1100000999 : Codeunit 11012783;
      Text11012001@1100528400 : TextConst 'ENU=%1 or %2 should be filled.';

    PROCEDURE GetCurrencyCodeFromHeader@1() : Code[10];
    VAR
      PurchRcptHeader@1000 : Record 120;
    BEGIN
      IF "Document No." = PurchRcptHeader."No." THEN
        EXIT(PurchRcptHeader."Currency Code");
      IF PurchRcptHeader.GET("Document No.") THEN
        EXIT(PurchRcptHeader."Currency Code");
      EXIT('');
    END;

    PROCEDURE ShowDimensions@25();
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',TABLECAPTION,"Document No.","Line No."));
    END;

    PROCEDURE ShowItemTrackingLines@3();
    VAR
      ItemTrackingDocMgt@1000 : Codeunit 6503;
    BEGIN
      ItemTrackingDocMgt.ShowItemTrackingForShptRcptLine(DATABASE::"Purch. Rcpt. Line",0,"Document No.",'',0,"Line No.");
    END;

    PROCEDURE InsertInvLineFromRcptLine@2(VAR PurchLine@1000 : Record 39);
    VAR
      PurchInvHeader@1010 : Record 38;
      PurchOrderHeader@1007 : Record 38;
      PurchOrderLine@1005 : Record 39;
      TempPurchLine@1003 : Record 39;
      lJobRec@1210190000 : Record 11072003;
      PurchCommentLine@1100409000 : Record 43;
      PurchCommentLine2@1100409001 : Record 43;
      TransferOldExtLines@1002 : Codeunit 379;
      ItemTrackingMgt@1004 : Codeunit 6500;
      lvRouteRefMgtCU@1210190008 : Codeunit 11012045;
      NextLineNo@1001 : Integer;
      ExtTextLine@1006 : Boolean;
      lsaveQtyRcdNotInvoiced@1210190002 : Decimal;
      lsaveQuantityReceived@1210190001 : Decimal;
      lsaveReservedQuantity@1210190003 : Decimal;
      lsaveAmtRcdNotInvoicedLCY@1210190004 : Decimal;
      lsaveAmtRcdNotInvoiced@1210190009 : Decimal;
      lsaveAmntReceived@1210190005 : Decimal;
      lsaveReceiptNo@1210190006 : Code[20];
      lvLastRefNo@1210190007 : Code[20];
      lvTypeNo@1100485000 : Integer;
    BEGIN
      SETRANGE("Document No.","Document No.");

      TempPurchLine := PurchLine;
      IF PurchLine.FIND('+') THEN
        NextLineNo := PurchLine."Line No." + 10000
      ELSE
        NextLineNo := 10000;

      IF PurchInvHeader."No." <> TempPurchLine."Document No." THEN
        PurchInvHeader.GET(TempPurchLine."Document Type",TempPurchLine."Document No.");

      IF PurchLine."Receipt No." <> "Document No." THEN BEGIN
        PurchLine.INIT;
        PurchLine."Line No." := NextLineNo;
        PurchLine."Document Type" := TempPurchLine."Document Type";
        PurchLine."Document No." := TempPurchLine."Document No.";
        //**4PS.sn
        //PurchLine.Description := STRSUBSTNO(Text000,"Document No.");
        PurchReceiptHeader.GET("Document No.");
        PurchLine.Description :=
          COPYSTR(
            STRSUBSTNO(
              Text11012000,PurchReceiptHeader."Order No.","Document No."),1,
              MAXSTRLEN(PurchLine.Description));
        PurchLine.FillMainProject;
        //**4PS.en
        //**4PS.sn
        PurchLine."Input by" := USERID; //DP00469
        PurchLine."Input Date" := TODAY; //DP00469
        //**4PS.en
        PurchLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;

      TransferOldExtLines.ClearLineNumbers;

      REPEAT
        ExtTextLine := (TransferOldExtLines.GetNewLineNumber("Attached to Line No.") <> 0);

        IF PurchOrderLine.GET(
             PurchOrderLine."Document Type"::Order,"Order No.","Order Line No.")
        THEN BEGIN
          IF (PurchOrderHeader."Document Type" <> PurchOrderLine."Document Type"::Order) OR
             (PurchOrderHeader."No." <> PurchOrderLine."Document No.")
          THEN
            PurchOrderHeader.GET(PurchOrderLine."Document Type"::Order,"Order No.");

          InitCurrency("Currency Code");

          IF PurchInvHeader."Prices Including VAT" THEN BEGIN
            IF NOT PurchOrderHeader."Prices Including VAT" THEN
              PurchOrderLine."Direct Unit Cost" :=
                ROUND(
                  PurchOrderLine."Direct Unit Cost" * (1 + PurchOrderLine."VAT %" / 100),
                  Currency."Unit-Amount Rounding Precision");
          END ELSE BEGIN
            IF PurchOrderHeader."Prices Including VAT" THEN
              PurchOrderLine."Direct Unit Cost" :=
                ROUND(
                  PurchOrderLine."Direct Unit Cost" / (1 + PurchOrderLine."VAT %" / 100),
                  Currency."Unit-Amount Rounding Precision");
          END;
        END ELSE BEGIN
          IF ExtTextLine THEN BEGIN
            PurchOrderLine.INIT;
            PurchOrderLine."Line No." := "Order Line No.";
            PurchOrderLine.Description := Description;
            PurchOrderLine."Description 2" := "Description 2";
          END ELSE
            ERROR(Text001);
        END;
        PurchLine := PurchOrderLine;
        PurchLine."Line No." := NextLineNo;
        PurchLine."Document Type" := TempPurchLine."Document Type";
        PurchLine."Document No." := TempPurchLine."Document No.";
        PurchLine."Variant Code" := "Variant Code";
        PurchLine."Location Code" := "Location Code";
        PurchLine."Quantity (Base)" := 0;
        PurchLine.Quantity := 0;
        PurchLine."Outstanding Qty. (Base)" := 0;
        PurchLine."Outstanding Quantity" := 0;
        PurchLine."Quantity Received" := 0;
        PurchLine."Qty. Received (Base)" := 0;
        PurchLine."Quantity Invoiced" := 0;
        PurchLine."Qty. Invoiced (Base)" := 0;
        PurchLine.Amount := 0;
        PurchLine."Amount Including VAT" := 0;
        PurchLine."Sales Order No." := '';
        PurchLine."Sales Order Line No." := 0;
        PurchLine."Drop Shipment" := FALSE;
        PurchLine."Special Order Sales No." := '';
        PurchLine."Special Order Sales Line No." := 0;
        PurchLine."Special Order" := FALSE;
        PurchLine."Receipt No." := "Document No.";
        PurchLine."Receipt Line No." := "Line No.";
        PurchLine."Appl.-to Item Entry" := 0;
        //**4PS.sn
        PurchHeader.GET(TempPurchLine."Document Type",TempPurchLine."Document No.");
        PurchLine."Posting Date" := PurchHeader."Posting Date";
        //**4PS.en
        IF NOT ExtTextLine THEN BEGIN
        //**4PS.so
        //  PurchLine.VALIDATE(Quantity,Quantity - "Quantity Invoiced");
        //  PurchLine.VALIDATE("Direct Unit Cost",PurchOrderLine."Direct Unit Cost");
        //**4PS.eo
        //**4PS.sn
          IF (PurchLine."Plant Type" <> '') AND (PurchLine."Plant No." = '') AND (PurchLine."Cost Component Plant" <> '') THEN BEGIN
            lvTypeNo := PurchLine.CheckPlantAcquisitionOrRent(PurchLine);
            IF (lvTypeNo <> 0) THEN BEGIN  //* 1=Aanschaf, 2=Inhuur
              PurchLine."Plant No." := "Plant No.";
              IF (lvTypeNo = 1) AND (PurchLine."No." = '') AND ("No." <> '') THEN BEGIN
                PurchLine."No." := "No.";
                PurchLine."Depreciation Book Code" := '';
                PurchLine.GetFAPostingGroup();
              END;
            END;
          //26690.sn
          END ELSE BEGIN
            IF (PurchLine."Plant Type" <> '') AND (PurchLine."Plant No." <> '') AND (PurchLine."Cost Component Plant" <> '') AND
               (PurchLine.Type = PurchLine.Type::"Fixed Asset") AND (PurchLine."No." <> '') AND (PurchLine."Depreciation Book Code" = '')
            THEN BEGIN
              IF PurchLine.CheckPlantAcquisitionOrRent(PurchLine) = 1 THEN
                PurchLine.GetFAPostingGroup();
            END;
          //26690.en
          END;
          IF PurchHeader."Amounts only" THEN BEGIN
      //C027348.so
      //      IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN
      //        PurchLine."Line Amount" := "Received (line)" - "Invoiced (line)"
      //      ELSE
      //        PurchLine."Line Amount" := -("Received (line)" - "Invoiced (line)");  //*C-25868.n
      //C027348.eo
      //C027348.sn
            IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN
              PurchLine.Amount := "Received (line)" - "Invoiced (line)"
            ELSE
              PurchLine.Amount := -("Received (line)" - "Invoiced (line)");
            PurchLine.VALIDATE(Amount);
            IF PurchOrderLine.Amount <> 0 THEN
              PurchLine."Line Amount" :=
                ROUND(PurchOrderLine."Line Amount" * PurchLine.Amount / PurchOrderLine.Amount,Currency."Amount Rounding Precision");
      //C027348.en
            PurchLine."Direct Unit Cost" := PurchLine."Line Amount"; //C-012629
            IF PurchLine."Line Discount %" <> 0 THEN BEGIN
              InitCurrency("Currency Code");
              PurchLine."Direct Unit Cost" :=
                ROUND(PurchLine."Line Amount" / (1 - PurchLine."Line Discount %"/100), Currency."Unit-Amount Rounding Precision")
            END;
      //C027348.so
      //    PurchLine."Amnt. Received" := PurchLine."Line Amount";
      //C027348.eo
            PurchLine."Amnt. Received" := PurchLine.Amount; //C027348.n
            PurchLine.VALIDATE("Amnt. Invoiced", 0);
      //**4PS.sn C027348
            IF PurchOrderLine."Line Amount" <> 0 THEN
              PurchLine."Inv. Discount Amount" :=
                ROUND(
                  PurchOrderLine."Inv. Discount Amount" * PurchLine."Line Amount" / PurchOrderLine."Line Amount",
                  Currency."Amount Rounding Precision");
      //**4PS.enn C027348
            PurchLine.VALIDATE("Line Amount");
          END ELSE BEGIN
            IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN
              PurchLine.VALIDATE(Quantity,Quantity - "Quantity Invoiced")
            ELSE
              PurchLine.VALIDATE(Quantity,-(Quantity - "Quantity Invoiced"));  //*18693.n
              //IF (Quantity < 0) OR IFromReturnOrder THEN           //*18693.so Input argument 'IFromReturnOrder' also deleted
              //  PurchLine.VALIDATE(Quantity,-(Quantity - "Quantity Invoiced"))
              //ELSE
              //  PurchLine.VALIDATE(Quantity,"Quantity Invoiced");  //*18693.eo
            PurchLine."Direct Unit Cost" := "Direct Unit Cost"; //db, 11-07-08: C-013221
          END;

          IF PurchHeader."Amounts only" THEN BEGIN
            IF PurchOrderLine."Line Amount" <> 0 THEN
              PurchOrderLine."Line Discount Amount" :=
                ROUND(
                  PurchOrderLine."Line Discount Amount" * PurchLine."Line Amount" / PurchOrderLine."Line Amount",
                  Currency."Amount Rounding Precision");
          END ELSE
          //**4PS.en
            PurchOrderLine."Line Discount Amount" :=
              ROUND(
                PurchOrderLine."Line Discount Amount" * PurchLine.Quantity / PurchOrderLine.Quantity,
                Currency."Amount Rounding Precision");
          IF PurchInvHeader."Prices Including VAT" THEN BEGIN
            IF NOT PurchOrderHeader."Prices Including VAT" THEN
              PurchOrderLine."Line Discount Amount" :=
                ROUND(
                  PurchOrderLine."Line Discount Amount" *
                  (1 + PurchOrderLine."VAT %" / 100),Currency."Amount Rounding Precision");
          END ELSE
            IF PurchOrderHeader."Prices Including VAT" THEN
              PurchOrderLine."Line Discount Amount" :=
                ROUND(
                  PurchOrderLine."Line Discount Amount" /
                  (1 + PurchOrderLine."VAT %" / 100),Currency."Amount Rounding Precision");
          PurchLine.VALIDATE("Line Discount Amount",PurchOrderLine."Line Discount Amount");
          PurchLine."Line Discount %" := PurchOrderLine."Line Discount %";
          IF NOT PurchHeader."Amounts only" THEN BEGIN //**4PS Call C008530 new
            PurchLine.UpdatePrePaymentAmounts;
            IF PurchOrderLine.Quantity = 0 THEN
              PurchLine.VALIDATE("Inv. Discount Amount",0)
            ELSE
              PurchLine.VALIDATE(
                "Inv. Discount Amount",
                ROUND(
                  PurchOrderLine."Inv. Discount Amount" * PurchLine.Quantity / PurchOrderLine.Quantity,
                  Currency."Amount Rounding Precision"));
          END; //**4PS.n
        END;

        PurchLine."Attached to Line No." :=
          TransferOldExtLines.TransferExtendedText(
            "Line No.",
            NextLineNo,
            "Attached to Line No.");
        PurchLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        PurchLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        PurchLine."Dimension Set ID" := "Dimension Set ID";
        PurchLine."Cost Component" := PurchOrderLine."Cost Component"; //**4PS.n

        IF "Sales Order No." = '' THEN
          PurchLine."Drop Shipment" := FALSE
        ELSE
          PurchLine."Drop Shipment" := TRUE;

        //**4PS.sn
        PurchLine.CheckProjectStatus(FALSE);
        PurchLine.CheckServiceOrderStatus(FALSE);

        IF (PurchLine."Job No." <> '') AND (PurchLine."Shortcut Dimension 2 Code" <> '') THEN
          IF lJobRec.GET(PurchLine."Job No.") THEN
            IF lJobRec."Project Status" > lJobRec."Project Status"::"Administrative Finished" THEN BEGIN

              lsaveQtyRcdNotInvoiced := PurchLine."Qty. Rcd. Not Invoiced";
              lsaveQuantityReceived := PurchLine."Quantity Received";
              lsaveReservedQuantity := PurchLine."Reserved Quantity";
              lsaveReceiptNo := PurchLine."Receipt No.";
              lsaveAmtRcdNotInvoicedLCY := PurchLine."Amt. Rcd. Not Invoiced (LCY)";
              lsaveAmntReceived := PurchLine."Amnt. Received";
              lsaveAmtRcdNotInvoiced := PurchLine."Amt. Rcd. Not Invoiced";  //M28420 n

              PurchLine."Qty. Rcd. Not Invoiced" := 0;
              PurchLine."Quantity Received" := 0;
              PurchLine."Reserved Quantity" := 0;
              PurchLine."Receipt No." := '';
              PurchLine."Amt. Rcd. Not Invoiced (LCY)"  := 0;
              PurchLine."Amnt. Received" := 0;
              PurchLine."Amt. Rcd. Not Invoiced" := 0;                      //M28420 n

              PurchLine.VALIDATE("Shortcut Dimension 2 Code",PurchLine."Shortcut Dimension 2 Code");

              PurchLine."Qty. Rcd. Not Invoiced" := lsaveQtyRcdNotInvoiced;
              PurchLine."Quantity Received" := lsaveQuantityReceived;
              PurchLine."Reserved Quantity" := lsaveReservedQuantity;
              PurchLine."Receipt No." := lsaveReceiptNo;
              PurchLine."Receipt Line No." := "Line No.";
              PurchLine."Amt. Rcd. Not Invoiced (LCY)" := lsaveAmtRcdNotInvoicedLCY;
              PurchLine."Amnt. Received" := lsaveAmntReceived;
              PurchLine."Amt. Rcd. Not Invoiced" := lsaveAmtRcdNotInvoiced;     //M28420 n
              IF PurchHeader."Amounts only" THEN PurchLine.VALIDATE("Unit Price (LCY)") //MC006330

            END;

        PurchLine."Entity Type" := "Entity Type";
        //PurchLine."OLD System No." := "System No."; //**4PS.o
        //PurchLine."OLD Entity No." := "Entity No."; //**4PS.o
        //PurchLine."OLD Cable Transit Pos." := "Cable Transit Pos."; //**4PS.o
        PurchLine."FSC Type Code" := "FSC Type Code";  //DP00129
        //**4PS.en
        //**4PS.sn
        PurchLine."Input by" := USERID; //DP00469
        PurchLine."Input Date" := TODAY; //DP00469
        //**4PS.en
        PurchLine.INSERT;

        PurchaseLineExtension."Yard No." := "Yard No.";
        PurchaseLineExtension."System No." := "System No.";
        PurchaseLineExtension."Entity No." := "Entity No.";
        PurchaseLineExtension."Cable Transit Pos." := "Cable Transit Pos.";
        PurchaseLineExtension.UpdatePurchLineExtension(
          PurchLine."Document Type", PurchLine."Document No.", PurchLine."Line No."); //**4PS.en

        //**4PS.sn
        IF ("Purchase Route Reference" = '') THEN BEGIN
          lvLastRefNo := lvRouteRefMgtCU.GetLastRefNo();
          lvLastRefNo := INCSTR(lvLastRefNo);
          "Purchase Route Reference" := lvLastRefNo;
          MODIFY;
          PurchLine."Purchase Route Reference" := lvLastRefNo;
          //**4PS.sn
          PurchLine."Modified by" := USERID; //DP00469
          PurchLine."Last Date Modified" := TODAY;//DP00469
          //**4PS.en
          PurchLine.MODIFY;
          lvRouteRefMgtCU.WriteLastRefNo(lvLastRefNo);
        END;
        //**4PS.en

        ItemTrackingMgt.CopyHandledItemTrkgToInvLine2(PurchOrderLine,PurchLine);

        //*34602.sn
        IF PurchLine."Document Type" <> PurchLine."Document Type"::"Credit Memo" THEN
          PurchCommentLine2.SETRANGE("Document Type", PurchCommentLine2."Document Type"::Invoice)
        ELSE
          PurchCommentLine2.SETRANGE("Document Type", PurchCommentLine2."Document Type"::"Credit Memo");
        PurchCommentLine2.SETRANGE("No.", PurchLine."Document No.");
        PurchCommentLine2.SETRANGE("Document Line No.", PurchLine."Line No.");
        PurchCommentLine2.DELETEALL;
        //
        PurchCommentLine.SETRANGE("Document Type", PurchCommentLine."Document Type"::Order);
        PurchCommentLine.SETRANGE("No.", PurchOrderLine."Document No.");
        PurchCommentLine.SETRANGE("Document Line No.", PurchOrderLine."Line No.");
        IF PurchCommentLine.FINDSET THEN BEGIN
          REPEAT
            PurchCommentLine2 := PurchCommentLine;
            IF PurchLine."Document Type" <> PurchLine."Document Type"::"Credit Memo" THEN
              PurchCommentLine2."Document Type" := PurchCommentLine2."Document Type"::Invoice
            ELSE
              PurchCommentLine2."Document Type" := PurchCommentLine2."Document Type"::"Credit Memo";
            PurchCommentLine2."No." := PurchLine."Document No.";
            PurchCommentLine2."Document Line No." := PurchLine."Line No.";
            PurchCommentLine2.INSERT;
          UNTIL PurchCommentLine.NEXT = 0;
        END;
        //*34602.en

        NextLineNo := NextLineNo + 10000;
        IF "Attached to Line No." = 0 THEN
          SETRANGE("Attached to Line No.","Line No.");
      UNTIL (NEXT = 0) OR ("Attached to Line No." = 0);
    END;

    LOCAL PROCEDURE GetPurchInvLines@4(VAR TempPurchInvLine@1000 : TEMPORARY Record 123);
    VAR
      PurchInvLine@1003 : Record 123;
      ItemLedgEntry@1002 : Record 32;
      ValueEntry@1001 : Record 5802;
    BEGIN
      TempPurchInvLine.RESET;
      TempPurchInvLine.DELETEALL;

      IF Type <> Type::Item THEN
        EXIT;

      FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
      ItemLedgEntry.SETFILTER("Invoiced Quantity",'<>0');
      IF ItemLedgEntry.FINDSET THEN BEGIN
        ValueEntry.SETCURRENTKEY("Item Ledger Entry No.","Entry Type");
        ValueEntry.SETRANGE("Entry Type",ValueEntry."Entry Type"::"Direct Cost");
        ValueEntry.SETFILTER("Invoiced Quantity",'<>0');
        REPEAT
          ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
          IF ValueEntry.FINDSET THEN
            REPEAT
              IF ValueEntry."Document Type" = ValueEntry."Document Type"::"Purchase Invoice" THEN
                IF PurchInvLine.GET(ValueEntry."Document No.",ValueEntry."Document Line No.") THEN BEGIN
                  TempPurchInvLine.INIT;
                  TempPurchInvLine := PurchInvLine;
                  IF TempPurchInvLine.INSERT THEN;
                END;
            UNTIL ValueEntry.NEXT = 0;
        UNTIL ItemLedgEntry.NEXT = 0;
      END;
    END;

    PROCEDURE CalcReceivedPurchNotReturned@6(VAR RemainingQty@1003 : Decimal;VAR RevUnitCostLCY@1005 : Decimal;ExactCostReverse@1006 : Boolean);
    VAR
      ItemLedgEntry@1000 : Record 32;
      TotalCostLCY@1007 : Decimal;
      TotalQtyBase@1002 : Decimal;
    BEGIN
      RemainingQty := 0;
      IF (Type <> Type::Item) OR (Quantity <= 0) THEN BEGIN
        RevUnitCostLCY := "Unit Cost (LCY)";
        EXIT;
      END;

      RevUnitCostLCY := 0;
      FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
      IF ItemLedgEntry.FINDSET THEN
        REPEAT
          RemainingQty := RemainingQty + ItemLedgEntry."Remaining Quantity";
          IF ExactCostReverse THEN BEGIN
            ItemLedgEntry.CALCFIELDS("Cost Amount (Expected)","Cost Amount (Actual)");
            TotalCostLCY :=
              TotalCostLCY + ItemLedgEntry."Cost Amount (Expected)" + ItemLedgEntry."Cost Amount (Actual)";
            TotalQtyBase := TotalQtyBase + ItemLedgEntry.Quantity;
          END;
        UNTIL ItemLedgEntry.NEXT = 0;

      IF ExactCostReverse AND (RemainingQty <> 0) AND (TotalQtyBase <> 0) THEN
        RevUnitCostLCY := ABS(TotalCostLCY / TotalQtyBase) * "Qty. per Unit of Measure"
      ELSE
        RevUnitCostLCY := "Unit Cost (LCY)";

      RemainingQty := CalcQty(RemainingQty);
    END;

    LOCAL PROCEDURE CalcQty@10(QtyBase@1000 : Decimal) : Decimal;
    BEGIN
      IF "Qty. per Unit of Measure" = 0 THEN
        EXIT(QtyBase);
      EXIT(ROUND(QtyBase / "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE FilterPstdDocLnItemLedgEntries@5(VAR ItemLedgEntry@1000 : Record 32);
    BEGIN
      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Document No.");
      ItemLedgEntry.SETRANGE("Document No.","Document No.");
      ItemLedgEntry.SETRANGE("Document Type",ItemLedgEntry."Document Type"::"Purchase Receipt");
      ItemLedgEntry.SETRANGE("Document Line No.","Line No.");
    END;

    LOCAL PROCEDURE ShowItemLedgEntries@8();
    VAR
      ItemLedgEntry@1000 : Record 32;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
        PAGE.RUNMODAL(0,ItemLedgEntry);
      END;
    END;

    PROCEDURE ShowItemPurchInvLines@9();
    VAR
      TempPurchInvLine@1001 : TEMPORARY Record 123;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        GetPurchInvLines(TempPurchInvLine);
        PAGE.RUNMODAL(PAGE::"Posted Purchase Invoice Lines",TempPurchInvLine);
      END;
    END;

    LOCAL PROCEDURE InitCurrency@7(CurrencyCode@1001 : Code[10]);
    BEGIN
      IF (Currency.Code = CurrencyCode) AND CurrencyRead THEN
        EXIT;

      IF CurrencyCode <> '' THEN
        Currency.GET(CurrencyCode)
      ELSE
        Currency.InitRoundingPrecision;
      CurrencyRead := TRUE;
    END;

    PROCEDURE ShowLineComments@11();
    VAR
      PurchDocLineComments@1002 : Record 43;
      PurchDocCommentSheet@1000 : Page 66;
    BEGIN
      PurchDocLineComments.SETRANGE("Document Type",PurchDocLineComments."Document Type"::Receipt);
      PurchDocLineComments.SETRANGE("No.","Document No.");
      PurchDocLineComments.SETRANGE("Document Line No.","Line No.");
      PurchDocCommentSheet.SETTABLEVIEW(PurchDocLineComments);
      PurchDocCommentSheet.RUNMODAL;
    END;

    PROCEDURE InitFromPurchLine@12(PurchRcptHeader@1001 : Record 120;PurchLine@1002 : Record 39);
    VAR
      Factor@1000 : Decimal;
    BEGIN
      INIT;
      TRANSFERFIELDS(PurchLine);
      "Posting Date" := PurchRcptHeader."Posting Date";
      "Document No." := PurchRcptHeader."No.";
      Quantity := PurchLine."Qty. to Receive";
      "Quantity (Base)" := PurchLine."Qty. to Receive (Base)";
      IF ABS(PurchLine."Qty. to Invoice") > ABS(PurchLine."Qty. to Receive") THEN BEGIN
        "Quantity Invoiced" := PurchLine."Qty. to Receive";
        "Qty. Invoiced (Base)" := PurchLine."Qty. to Receive (Base)";
      END ELSE BEGIN
        "Quantity Invoiced" := PurchLine."Qty. to Invoice";
        "Qty. Invoiced (Base)" := PurchLine."Qty. to Invoice (Base)";
      END;
      "Qty. Rcd. Not Invoiced" := Quantity - "Quantity Invoiced";
      IF PurchLine."Document Type" = PurchLine."Document Type"::Order THEN BEGIN
        "Order No." := PurchLine."Document No.";
        "Order Line No." := PurchLine."Line No.";
      END;
      IF (PurchLine.Quantity <> 0) AND ("Job No." <> '') THEN BEGIN
        Factor := PurchLine."Qty. to Receive" / PurchLine.Quantity;
        IF Factor <> 1 THEN
          UpdateJobPrices(Factor);
      END;
    END;

    LOCAL PROCEDURE UpdateJobPrices@13(Factor@1000 : Decimal);
    BEGIN
      "Job Total Price" :=
        ROUND("Job Total Price" * Factor,Currency."Amount Rounding Precision");
      "Job Total Price (LCY)" :=
        ROUND("Job Total Price (LCY)" * Factor,Currency."Amount Rounding Precision");
      "Job Line Amount" :=
        ROUND("Job Line Amount" * Factor,Currency."Amount Rounding Precision");
      "Job Line Amount (LCY)" :=
        ROUND("Job Line Amount (LCY)" * Factor,Currency."Amount Rounding Precision");
      "Job Line Discount Amount" :=
        ROUND("Job Line Discount Amount" * Factor,Currency."Amount Rounding Precision");
      "Job Line Disc. Amount (LCY)" :=
        ROUND("Job Line Disc. Amount (LCY)" * Factor,Currency."Amount Rounding Precision");
    END;

    PROCEDURE LineCommentPresent@1210190001() : Boolean;
    VAR
      PurchCommentLine@1210190000 : Record 43;
    BEGIN
      //**4PS 22575
      EXIT(PurchCommentLine.CommentPresent(PurchCommentLine."Document Type"::Receipt, "Document No.", "Line No."));
    END;

    PROCEDURE ValidateItem@1101290000(LTypeArtOpt@11012005 : 'Item,Basic Item,Trade Item');
    VAR
      DummyDat@11012006 : Date;
      DummyDec@1210190001 : Decimal;
      lvRefDate@1100485002 : Date;
      lvDiscRef1@1100485001 : Code[20];
      lvDiscRef2@1100485000 : Code[20];
      ServOrderRec@1100485003 : Record 11012823;
      ProjRec@1100485004 : Record 11072003;
    BEGIN
      //**4PS
      IF "Service Order No." <>'' THEN BEGIN
        ServOrderRec.GET("Service Order No.");
        lvRefDate := ValidateCu.GetRefDateServOrder(ServOrderRec);
      //  lvDiscRef1 := ServOrderRec."Purch Discount Term Group 1";
      //  lvDiscRef2 := ServOrderRec."Purch Discount Term Group 2";
      END ELSE BEGIN
        IF "Job No." <>'' THEN BEGIN
          ProjRec.GET("Job No.");
          lvRefDate := ValidateCu.GetRefDateProject(ProjRec);
          lvDiscRef1 := ProjRec."Purch Discount Term Group 1";
          lvDiscRef2 := ProjRec."Purch Discount Term Group 2";
        END;
      END;

      ValidateCu.ValidateItem(LTypeArtOpt,"Trade Item","Item No.",Manufacturer,"Buy-from Vendor No.",
                              "Basic Item","Shortcut Dimension 2 Code",Description,"Unit of Measure Code","Direct Unit Cost",
                              "Line Discount %",DummyDat,DummyDec,"Description 2","Cost Component",
                              lvDiscRef1,lvDiscRef2,lvRefDate,'');
    END;

    PROCEDURE InsertInvApprLineFromRcptLine@1101290001(VAR InvApprLine@1000 : Record 11012032);
    VAR
      PurchOrderLine@1005 : Record 39;
      TempInvApprLine@1003 : Record 11012032;
      TransferOldExtLines@1002 : Codeunit 379;
      lvRouteRefMgtCU@1210190002 : Codeunit 11012045;
      ItemTrackingMgt@1100529000 : Codeunit 6500;
      NextLineNo@1001 : Integer;
      ExtTextLine@1006 : Boolean;
      AmountsOnly@1210190000 : Boolean;
      lvLastRefNo@1210190001 : Code[20];
      ReasonCode@1100525000 : Text[30];
    BEGIN
      //**4PS
      PurchSetup.GET;

      TempInvApprLine := InvApprLine;
      IF InvApprLine.FIND('+') THEN
        NextLineNo := InvApprLine."Line No." + 10000
      ELSE
        NextLineNo := 10000;

      IF InvApprLine."Receipt No." <> "Document No." THEN BEGIN
        InvApprLine.INIT;
        InvApprLine."Line No." := NextLineNo;
        IF TempInvApprLine."Document Type" = TempInvApprLine."Document Type"::"Purchase Invoice" THEN BEGIN
          PurchInvHeader.GET(TempInvApprLine."Document No.");
          InvApprLine."Journal Template Name" := PurchInvHeader."Journal Template";
        END ELSE BEGIN
          PurchCredHeader.GET(TempInvApprLine."Document No.");
          InvApprLine."Journal Template Name" := PurchCredHeader."Journal Template";
        END;
        InvApprLine."Document Type" := TempInvApprLine."Document Type";
        InvApprLine."Document No." := TempInvApprLine."Document No.";
        PurchReceiptHeader.GET("Document No.");
        InvApprLine.Description :=
          COPYSTR(
            STRSUBSTNO(
              Text11012000,PurchReceiptHeader."Order No.","Document No."),1,
              MAXSTRLEN(InvApprLine.Description));
        InvApprLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;

      TransferOldExtLines.ClearLineNumbers;

      REPEAT
        ExtTextLine := (TransferOldExtLines.GetNewLineNumber("Attached to Line No.") <> 0);

        IF NOT PurchOrderLine.GET(
          PurchOrderLine."Document Type"::Order,"Order No.","Order Line No.")
        THEN BEGIN
          IF ExtTextLine THEN BEGIN
            PurchOrderLine.INIT;
            PurchOrderLine."Line No." := "Order Line No.";
            PurchOrderLine.Description := Description;
            PurchOrderLine."Description 2" := "Description 2";
          END ELSE
            ERROR(Text001);

          InitCurrency("Currency Code"); //28919

        END;

        InvApprLine.INIT;
        IF TempInvApprLine."Document Type" = TempInvApprLine."Document Type"::"Purchase Invoice" THEN BEGIN
          PurchInvHeader.GET(TempInvApprLine."Document No.");
          GenJnlRec.GET(PurchInvHeader."Journal Template");
          InvApprLine."Journal Template Name" := PurchInvHeader."Journal Template";
          AmountsOnly := PurchInvHeader."Amounts only";
          ReasonCode := PurchInvHeader."Reason Code";  //db, 07-05-15: C019819
        END ELSE BEGIN
          PurchCredHeader.GET(TempInvApprLine."Document No.");
          GenJnlRec.GET(PurchCredHeader."Journal Template");
          InvApprLine."Journal Template Name" := PurchCredHeader."Journal Template";
          AmountsOnly := PurchCredHeader."Amounts only";
          ReasonCode := PurchCredHeader."Reason Code";  //db, 07-05-15: C019819
        END;
        InvApprLine."Line No." := NextLineNo;
        InvApprLine."Document Type" := TempInvApprLine."Document Type";
        InvApprLine."Document No." := TempInvApprLine."Document No.";
        //call 25856 InvApprLine."Receipt No." := "Document No.";
        //call 25856 InvApprLine."Receipt Line No." := "Line No.";

        IF PurchSetup."Posting Date Invoice Approvals" =
          PurchSetup."Posting Date Invoice Approvals"::"Invoice Posting Date"
        THEN BEGIN
          IF InvApprLine."Document Type" = InvApprLine."Document Type"::"Purchase Invoice" THEN
            InvApprLine."Posting Date" := PurchInvHeader."Posting Date"
          ELSE
            InvApprLine."Posting Date" := PurchCredHeader."Posting Date";
        END ELSE
          InvApprLine."Posting Date" := WORKDATE;

        InvApprLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";  //*27112
        InvApprLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";  //*27112
        InvApprLine."Posting Group" := "Posting Group";  //*27112
        InvApprLine."System-Created Entry" := ("Service Order No." <> '') OR ("Job No." <> '') OR ("Plant Type" <> ''); //*26911
        IF ("Job No." = '') AND ("Service Order No." = '') THEN BEGIN
          InvApprLine.Type := Type;
          InvApprLine.VALIDATE("Account No.", "No.");
        END;

        InvApprLine."Bal. Account No." := GenJnlRec."Bal. Account No.";
        InvApprLine."Source Code" := GenJnlRec."Source Code";
        IF ReasonCode <> '' THEN
          InvApprLine."Reason Code" := ReasonCode  //db, 07-05-15: C019819
        ELSE
          InvApprLine."Reason Code" := GenJnlRec."Reason Code";
        InvApprLine."Receiving Company" := PurchOrderLine."Receiving Company";
        InvApprLine."Cost Type" := PurchOrderLine."Cost Type";  //db, 19-05-10: M19466
        IF "Service Order No." <> '' THEN  //*26911
          InvApprLine.VALIDATE("Service Order No.", "Service Order No.");
        InvApprLine.CheckAdditionalCostService(FIELDNO("Service Order No."));  //db, 19-05-10: M19466
        IF "Job No." <> '' THEN  //*26911
          InvApprLine.VALIDATE("Project No.","Job No.");
        InvApprLine.Element := Element;
        InvApprLine."Shortcut Dimension 2 Code" := ''; //mve, 25-09-2015: C023652
        InvApprLine."Extension Contract" := "Extension Contract";
        InvApprLine."Plot No." := "Plot No."; //**4PS01.n
        InvApprLine."Employee No." := "Employee No.";
        InvApprLine."Wage Component" := "Wage Component";
        InvApprLine."Plant Type" := "Plant Type";
        InvApprLine."Plant No." := "Plant No.";
        InvApprLine.VALIDATE("Cost Component Plant", "Cost Component Plant");
        InvApprLine."Plant Location" := "Plant Location";  //C001519
        InvApprLine."Rental Unit" := "Rental Unit";
        InvApprLine."Item No." := "Item No.";
        //GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");  //*27112.o
        InvApprLine."Basic Item" := "Basic Item";
        InvApprLine."Trade Item" := "Trade Item";
        InvApprLine.Manufacturer := Manufacturer;
        InvApprLine.Vendor := "Buy-from Vendor No.";
        InvApprLine."Vendor (Trade Item)" := "Vendor (Trade Item)";
        InvApprLine."Vendor Item No." := "Vendor Item No.";
        InvApprLine."Unit of Measure Code" := "Unit of Measure Code";
        //InvApprLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";  //*27112.o
        //InvApprLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";  //*27112.o
        GenPostingSetup.GET(InvApprLine."Gen. Bus. Posting Group",InvApprLine."Gen. Prod. Posting Group");  //*27112
        IF PurchSetup."VAT Indicator (Purchase)" = PurchSetup."VAT Indicator (Purchase)"::"No VAT" THEN BEGIN
          InvApprLine."VAT Bus. Posting Group" := "VAT Bus. Posting Group";
          InvApprLine.VALIDATE("VAT Prod. Posting Group", "VAT Prod. Posting Group");
        END;
        //InvApprLine."Posting Group" := "Posting Group";  //*27112.o
        InvApprLine."Appl.-to Item Entry" := "Appl.-to Item Entry";
        InvApprLine."Transaction Type" := "Transaction Type";
        InvApprLine."Transport Method" := "Transport Method";
        InvApprLine."Entry Point" := "Entry Point";
        InvApprLine.Area := Area;
        InvApprLine."Transaction Specification" := "Transaction Specification";
        InvApprLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        InvApprLine."Unit Cost (LCY)" := "Unit Cost (LCY)";
        InvApprLine."Buy-from Vendor No." := "Buy-from Vendor No.";
        InvApprLine."Indirect Cost %" := "Indirect Cost %";
        InvApprLine."Return Reason Code" := "Return Reason Code";
        InvApprLine."Unit Cost" := "Unit Cost";
        InvApprLine."Location Code" := "Location Code";
        //call 25856 InvApprLine."Receipt No." := "Document No.";
        //call 25856 InvApprLine."Receipt Line No." := "Line No.";
        InvApprLine."Item Rcpt. Entry No." := "Item Rcpt. Entry No.";
        //InvApprLine."Cost Component" := PurchOrderLine."Cost Component";  Must be filled after Validate Cost Object
        InvApprLine."Cost Plus Entry Created" := PurchOrderLine."Cost Plus Entry Created";
        InvApprLine."Yard No." := "Yard No.";
        InvApprLine."System No." := "System No.";
        InvApprLine."Entity Type" := "Entity Type";
        InvApprLine."Entity No." := "Entity No.";
        InvApprLine."Gland Position" := "Cable Transit Pos.";

        IF NOT ExtTextLine THEN BEGIN
        //C027348.so
        //IF AmountsOnly THEN BEGIN
        //  IF InvApprLine."Document Type" = InvApprLine."Document Type"::"Purchase Invoice" THEN
        //    InvApprLine.Amount := "Received (line)" - "Invoiced (line)"
        //  ELSE
        //    InvApprLine.Amount := -("Received (line)" - "Invoiced (line)");
        //  InvApprLine.VALIDATE(Amount);
        //END ELSE BEGIN
        //C027348.eo
          IF NOT AmountsOnly THEN BEGIN
            IF InvApprLine."Document Type" = InvApprLine."Document Type"::"Purchase Invoice" THEN
              InvApprLine.VALIDATE(Quantity,Quantity - "Quantity Invoiced")
            ELSE
              InvApprLine.VALIDATE(Quantity,-(Quantity - "Quantity Invoiced"));
          END;
        //C027348.so
        //  InvApprLine.Price := "Direct Unit Cost";
        //  IF "Line Discount %" <> 0 THEN
        //     InvApprLine.Price := ROUND("Direct Unit Cost" * (1 - "Line Discount %"/100), Currency."Unit-Amount Rounding Precision")
        //END;
        //InvApprLine.VALIDATE(Price);
        //C027348.eo
        //C027348.sn
          IF InvApprLine."Document Type" = InvApprLine."Document Type"::"Purchase Invoice" THEN
            InvApprLine.Amount := "Received (line)" - "Invoiced (line)"
          ELSE
            InvApprLine.Amount := -("Received (line)" - "Invoiced (line)");
          InvApprLine.VALIDATE(Amount);
        //C027348.en
        END;

      //PS24-04-06 Moved AFTER validate("Account No") because then dimensions are determined again
      //  InvApprLine.VALIDATE("Shortcut Dimension 1 Code", PurchOrderLine."Shortcut Dimension 1 Code");
      //  InvApprLine.VALIDATE("Shortcut Dimension 2 Code", PurchOrderLine."Shortcut Dimension 2 Code");

        IF "Job No." <> '' THEN
          InvApprLine.DetermineAccount
        ELSE BEGIN
          IF Type = Type::"G/L Account" THEN
            InvApprLine.VALIDATE("Account No.", "No.");
          IF Type = Type::Item THEN BEGIN
            ItemRec.GET("No.");
            GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
            InvApprLine."Cost Type" := InvApprLine."Cost Type"::Material;
            InvApprLine."Item No." := "No.";
            InvApprLine.Type := InvApprLine.Type::"Account (G/L)";  //db, 14-12-04
            InvApprLine.VALIDATE("Account No.",GenPostingSetup."Purch. Account");
          END;
        END;
        //PS24-04-06.sn
        IF (InvApprLine."Posting Group" = '') AND ("Posting Group" <> '') THEN  //*27112
          InvApprLine."Posting Group" := "Posting Group"; //PS 24-04-06

        // Validation of Dim. 2 can overwrite Dim. 1, therefore Dim. 2 is validated first. (kkleermaker, C009342, 131125)
        InvApprLine.VALIDATE("Shortcut Dimension 2 Code", PurchOrderLine."Shortcut Dimension 2 Code");
        InvApprLine.VALIDATE("Shortcut Dimension 1 Code", PurchOrderLine."Shortcut Dimension 1 Code");
        InvApprLine."Dimension Set ID" := PurchOrderLine."Dimension Set ID";
        //PS24-04-06.en
        InvApprLine."Cost Component" := PurchOrderLine."Cost Component";
        InvApprLine.Description := Description;
        InvApprLine."Description 2" := "Description 2";
        InvApprLine."Unit of Measure Code" := "Unit of Measure Code"; //again because it's changed in func DeterminAccount
        IF InvApprLine.Element <> Element THEN  //* Is filled before, but can be changed in validates
          InvApprLine.Element := Element;

        InvApprLine."Attached to Line No." :=
          TransferOldExtLines.TransferExtendedText(
            "Line No.",
            NextLineNo,
            "Attached to Line No.");

        InvApprLine."Removal Contribution" := "Removal Contribution";  //db, 07-12-10: M22790
        InvApprLine."Purchase Route Reference" := "Purchase Route Reference";
        InvApprLine."Purchase Action" := "Purchase Action";
        InvApprLine."Sales Price" := PurchOrderLine."Sales Price";
        InvApprLine."Receipt No." := "Document No."; //call 25856
        InvApprLine."Receipt Line No." := "Line No."; //call 25856
        InvApprLine."FSC Type Code" := "FSC Type Code";  //DP00129
        InvApprLine.INSERT;

        IF ("Purchase Route Reference" = '') THEN BEGIN
          lvLastRefNo := lvRouteRefMgtCU.GetLastRefNo();
          lvLastRefNo := INCSTR(lvLastRefNo);
          "Purchase Route Reference" := lvLastRefNo;
          MODIFY;
          InvApprLine."Purchase Route Reference" := lvLastRefNo;
          InvApprLine.MODIFY;
          lvRouteRefMgtCU.WriteLastRefNo(lvLastRefNo);
        END;

        ItemTrackingMgt.CopyHandledItemTrkgToInvApprLn(PurchOrderLine,InvApprLine);  //**4PS.n C004829

        NextLineNo := NextLineNo + 10000;
      UNTIL (NEXT = 0) OR ("Attached to Line No." = 0);
    END;

    PROCEDURE HandleLookupUnit@1210190016();
    VAR
      ItemUnitRec@1210190000 : Record 5404;
      lvUnit@1210190001 : Code[10];
    BEGIN
      //**4PS
      ItemUnitRec.SetDocument(DATABASE::"Purch. Rcpt. Line", 0, "Document No.", "Line No.");
      lvUnit := ItemUnitRec.HandleLookupUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)");
    END;

    PROCEDURE GetBaseQuanUnit@1100525012(VAR QuanBase@1100525002 : Decimal;VAR BaseUnit@1100525003 : Code[20]);
    VAR
      ItemRec@1100525000 : Record 27;
      TradeItemRec@1100525001 : Record 11012317;
    BEGIN
      //**4PS
      QuanBase := "Quantity (Base)";
      IF "Trade Item" <> '' THEN BEGIN
        IF NOT TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN TradeItemRec.INIT;
        BaseUnit := UPPERCASE(TradeItemRec."Application Unit");
      END ELSE BEGIN
        IF NOT ItemRec.GET("Item No.") THEN ItemRec.INIT;
        BaseUnit := ItemRec."Base Unit of Measure";
      END;
    END;

    PROCEDURE EditPurchaseLineDetails@1210190003();
    VAR
      PurchaseLineDetail@1210190000 : Record 11020660;
      RecordType@1100528400 : Integer;
    BEGIN
      //**4PS
      CASE TRUE OF
        ("Job No." <> ''):
          RecordType := PurchaseLineDetail."Record Type"::Project;
        ("Service Order No." <> ''):
          RecordType := PurchaseLineDetail."Record Type"::ServOrder;
        ELSE
          ERROR(Text11012001, FIELDCAPTION("Job No."), FIELDCAPTION("Service Order No."));
      END;

      PurchaseLineDetail.ShowCard(
        PurchaseLineDetail."Line Type"::"Purchase Receipt",
        RecordType,
        "Job No.",
        "Yard No.",
        "System No.",
        "Entity Type",
        "Entity No.",
        "Service Order No.",
        "Document No.",
        "Line No.");
    END;

    LOCAL PROCEDURE DeletePurchaseLineDetails@1100528400();
    VAR
      PurchaseLineDetail@1210190000 : Record 11020660;
    BEGIN
      //**4PS
      PurchaseLineDetail.SETRANGE("Line Type", PurchaseLineDetail."Line Type"::"Purchase Receipt");
      PurchaseLineDetail.SETRANGE("Document No.", "Document No.");
      PurchaseLineDetail.SETRANGE("Line No.", "Line No.");
      IF NOT PurchaseLineDetail.ISEMPTY THEN
        PurchaseLineDetail.DELETEALL;
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(121) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 121');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Purch. Rcpt. Line", "Shortcut Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Shortcut Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Shortcut Dimension 1 Code");
    END;

    BEGIN
    {
      4PS01 JD 30-11-2006 Call 6733 Plot No. added to several Line tables
      4PS02 HBK 03-08-2009 Added Objectfields
      4PS03 MMA 19-02-2010 Changes RFC Vendor rating
        Field added 11012351 Requested Receipt Date differs
        Field added 11012352 Promised Receipt Date differs
    }
    END.
  }
}

