OBJECT Table 1230 SEPA Direct Debit Mandate
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW18.00,4PS9.00;
  }
  PROPERTIES
  {
    DataCaptionFields=ID,Customer Bank Account Code;
    OnInsert=BEGIN
               InsertNoSeries
             END;

    OnModify=BEGIN
               IF xRec.Blocked THEN
                 TESTFIELD(Blocked,FALSE);
             END;

    CaptionML=ENU=SEPA Direct Debit Mandate;
    LookupPageID=Page1230;
    DrillDownPageID=Page1230;
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Code35        ;OnValidate=VAR
                                                                SalesSetup@1001 : Record 311;
                                                                NoSeriesMgt@1000 : Codeunit 396;
                                                              BEGIN
                                                                IF ID <> xRec.ID THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  NoSeriesMgt.TestManual(SalesSetup."Direct Debit Mandate Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=ID }
    { 2   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                IF (xRec."Customer No." <> '') AND ("Customer No." <> xRec."Customer No.") THEN BEGIN
                                                                  TESTFIELD("Date of Signature",0D);
                                                                  TESTFIELD("Debit Counter",0);
                                                                  "Customer Bank Account Code" := '';
                                                                END;
                                                                //**4PS.sn
                                                                IF ("Mandate for" = "Mandate for"::Customer) AND ("No. Mandate for" <> "Customer No.") THEN  //DP00640
                                                                  "No. Mandate for" := "Customer No.";
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Customer No.;
                                                   NotBlank=Yes }
    { 3   ;   ;Customer Bank Account Code;Code10  ;TableRelation="Customer Bank Account".Code WHERE (Customer No.=FIELD(Customer No.));
                                                   CaptionML=ENU=Customer Bank Account Code;
                                                   NotBlank=Yes }
    { 4   ;   ;Valid From          ;Date          ;OnValidate=BEGIN
                                                                ValidateDates;
                                                              END;

                                                   CaptionML=ENU=Valid From }
    { 5   ;   ;Valid To            ;Date          ;OnValidate=BEGIN
                                                                ValidateDates;
                                                              END;

                                                   CaptionML=ENU=Valid To }
    { 6   ;   ;Date of Signature   ;Date          ;CaptionML=ENU=Date of Signature;
                                                   NotBlank=Yes }
    { 7   ;   ;Type of Payment     ;Option        ;OnValidate=BEGIN
                                                                IF ("Type of Payment" = "Type of Payment"::OneOff) AND ("Debit Counter" > 1) THEN
                                                                  ERROR(MandateChangeErr);
                                                                //"Expected Number of Debits" := 1;  //**4PS.o DP00640 (SEPA-2)
                                                                //**4PS.sn DP00640 (SEPA-2)
                                                                IF ("Type of Payment" = "Type of Payment"::OneOff) THEN
                                                                  "Expected Number of Debits" := 1
                                                                ELSE BEGIN
                                                                  IF ("Type of Payment" = "Type of Payment"::Recurrent) AND ("Type of Payment" <> xRec."Type of Payment") THEN
                                                                    "Expected Number of Debits" := 999999;
                                                                END;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Type of Payment;
                                                   OptionCaptionML=ENU=OneOff,Recurrent;
                                                   OptionString=OneOff,Recurrent }
    { 8   ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
    { 9   ;   ;Expected Number of Debits;Integer  ;InitValue=1;
                                                   OnValidate=BEGIN
                                                                IF "Expected Number of Debits" < "Debit Counter" THEN
                                                                  ERROR(InvalidNumberOfDebitsTxt);
                                                                IF ("Type of Payment" = "Type of Payment"::OneOff) AND ("Expected Number of Debits" > 1) THEN
                                                                  ERROR(InvalidOneOffNumOfDebitsErr);

                                                                Closed := "Expected Number of Debits" <= "Debit Counter";
                                                              END;

                                                   CaptionML=ENU=Expected Number of Debits;
                                                   MinValue=1 }
    { 10  ;   ;Debit Counter       ;Integer       ;OnValidate=BEGIN
                                                                IF "Expected Number of Debits" < "Debit Counter" THEN BEGIN
                                                                  MESSAGE(InvalidNumberOfDebitsTxt);
                                                                  FIELDERROR("Debit Counter");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Debit Counter;
                                                   Editable=No }
    { 11  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
    { 12  ;   ;Closed              ;Boolean       ;CaptionML=ENU=Closed;
                                                   Editable=No }
    { 11012000;;Last Mandate Date  ;Date          ;CaptionML=ENU=Last Mandate Date }
    { 11012010;;Mandate for        ;Option        ;OnValidate=BEGIN
                                                                //**4PS DP00640
                                                                IF "Mandate for" <> xRec."Mandate for" THEN
                                                                  "No. Mandate for" := '';
                                                                IF "Mandate for" = "Mandate for"::Customer THEN
                                                                  "No. Mandate for" := "Customer No.";
                                                              END;

                                                   CaptionML=ENU=Mandate for;
                                                   OptionCaptionML=ENU=Customer,,,,,Project,,,,,Service Contract,Service Order;
                                                   OptionString=Customer,,,,,Project,,,,,ServiceContract,ServiceOrder }
    { 11012011;;Mandate for Filter ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Mandate for Filter;
                                                   OptionCaptionML=ENU=Customer,,,,,Project,,,,,Service Contract,Service Order;
                                                   OptionString=Customer,,,,,Project,,,,,ServiceContract,ServiceOrder }
    { 11012020;;No. Mandate for    ;Code20        ;TableRelation=IF (Mandate for=CONST(Customer)) Customer
                                                                 ELSE IF (Mandate for=CONST(Project)) Job
                                                                 ELSE IF (Mandate for=CONST(ServiceContract)) Service-Contract
                                                                 ELSE IF (Mandate for=CONST(ServiceOrder)) "Service Order";
                                                   OnValidate=BEGIN
                                                                //**4PS DP00640
                                                                IF "Mandate for" = "Mandate for"::Customer THEN
                                                                  TESTFIELD("No. Mandate for", "Customer No.");
                                                                IF "No. Mandate for" <> '' THEN
                                                                  TESTFIELD("Customer No.");
                                                                CheckNoMandateForCustLink("Mandate for", "No. Mandate for", TRUE);
                                                              END;

                                                   CaptionML=ENU=No. Mandate for }
    { 11012021;;No. Mandate for Filter;Code20     ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=No. Mandate for }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=Yes }
    {    ;Customer No.                             }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;ID,Customer Bank Account Code,Valid From,Valid To,Type of Payment }
  }
  CODE
  {
    VAR
      DateErr@1006 : TextConst 'ENU=The Valid To date must be after the Valid From date.';
      InvalidNumberOfDebitsTxt@1005 : TextConst 'ENU=The Debit Counter cannot be greater than the Number of Debits.';
      InvalidOneOffNumOfDebitsErr@1004 : TextConst 'ENU=The Number of Debits for OneOff Sequence Type cannot be greater than one.';
      MandateChangeErr@1003 : TextConst 'ENU=SequenceType cannot be set to OneOff, since the Mandate has already been used.';
      Text11012001@1100409000 : TextConst 'ENU=: %1 ''%2'' is not linked to %3 ''%4''';

    LOCAL PROCEDURE InsertNoSeries@1();
    VAR
      SalesSetup@1001 : Record 311;
      NoSeriesMgt@1000 : Codeunit 396;
      NewNo@1002 : Code[20];
    BEGIN
      IF ID = '' THEN BEGIN
        SalesSetup.GET;
        SalesSetup.TESTFIELD("Direct Debit Mandate Nos.");
        NoSeriesMgt.InitSeries(SalesSetup."Direct Debit Mandate Nos.",xRec."No. Series",0D,NewNo,"No. Series");
        ID := NewNo;
      END;
    END;

    PROCEDURE IsMandateActive@2(TransactionDate@1000 : Date) : Boolean;
    BEGIN
      IF ("Valid To" <> 0D) AND ("Valid To" < TransactionDate) OR ("Valid From" > TransactionDate) OR Blocked OR Closed THEN
        EXIT(FALSE);
      EXIT(TRUE)
    END;

    PROCEDURE GetDefaultMandate@58(CustomerNo@1001 : Code[20];DueDate@1002 : Date) : Code[35];
    VAR
      SEPADirectDebitMandate@1000 : Record 1230;
    BEGIN
      SEPADirectDebitMandate.SETRANGE("Customer No.",CustomerNo);
      SEPADirectDebitMandate.SETFILTER("Valid From",'%1|<=%2',0D,DueDate);
      SEPADirectDebitMandate.SETFILTER("Valid To",'%1|>=%2',0D,DueDate);
      SEPADirectDebitMandate.SETRANGE(Blocked,FALSE);
      SEPADirectDebitMandate.SETRANGE(Closed,FALSE);
      IF SEPADirectDebitMandate.FINDFIRST THEN
        EXIT(SEPADirectDebitMandate.ID);
      EXIT('');
    END;

    PROCEDURE UpdateCounter@5();
    BEGIN
      TESTFIELD(Blocked,FALSE);
      VALIDATE("Debit Counter","Debit Counter" + 1);
      Closed := "Debit Counter" >= "Expected Number of Debits";
      MODIFY;
    END;

    PROCEDURE GetSequenceType@4() : Integer;
    VAR
      DirectDebitCollectionEntry@1000 : Record 1208;
    BEGIN
      DirectDebitCollectionEntry.INIT;
      IF "Type of Payment" = "Type of Payment"::OneOff THEN
        EXIT(DirectDebitCollectionEntry."Sequence Type"::"One Off");
      IF "Debit Counter" = 0 THEN
        EXIT(DirectDebitCollectionEntry."Sequence Type"::First);
      IF "Debit Counter" >= "Expected Number of Debits" - 1 THEN
        EXIT(DirectDebitCollectionEntry."Sequence Type"::Last);
      EXIT(DirectDebitCollectionEntry."Sequence Type"::Recurring);
    END;

    PROCEDURE RollBackSequenceType@6();
    BEGIN
      IF "Debit Counter" <= 0 THEN
        EXIT;

      "Debit Counter" -= 1;
      Closed := "Debit Counter" >= "Expected Number of Debits";
      MODIFY;
    END;

    LOCAL PROCEDURE ValidateDates@3();
    BEGIN
      IF ("Valid To" <> 0D) AND ("Valid From" > "Valid To") THEN
        ERROR(DateErr);
    END;

    PROCEDURE CheckNoMandateForCustLink@1100409000(MandateFor@1100409000 : Option;NomandateFor@1100409001 : Code[20];ErrorMode@1100409002 : Boolean) : Boolean;
    VAR
      ProjPrin@1100409005 : Record 11012005;
      ServContr@1100409004 : Record 11012812;
      ServOrder@1100409003 : Record 11012823;
    BEGIN
      //**4PS DP00640 (SEPA-2)
      IF NomandateFor <> '' THEN BEGIN
        CASE MandateFor OF
          "Mandate for"::Project:
            BEGIN
              ProjPrin.SETRANGE("Project No.", NomandateFor);
              ProjPrin.SETRANGE("Bill-to Customer No.", "Customer No.");
              IF ProjPrin.ISEMPTY THEN BEGIN
                ProjPrin.SETRANGE("Bill-to Customer No.", '');
                ProjPrin.SETRANGE(Principal, "Customer No.");
                IF ProjPrin.ISEMPTY THEN BEGIN
                  IF ErrorMode THEN
                    FIELDERROR("No. Mandate for",
                      STRSUBSTNO(Text11012001, "Mandate for", "No. Mandate for", FIELDCAPTION("Customer No."), "Customer No."));
                  EXIT(FALSE);
                END;
              END;
            END;
          "Mandate for"::ServiceContract:
            BEGIN
              ServContr.SETRANGE("No.", NomandateFor);
              ServContr.SETRANGE("Bill-to Customer No. (Contr.)", "Customer No.");
              IF ServContr.ISEMPTY THEN BEGIN
                ServContr.SETRANGE("Bill-to Customer No. (Contr.)", '');
                ServContr.SETRANGE("Customer No.", "Customer No.");
                IF ServContr.ISEMPTY THEN BEGIN
                  IF ErrorMode THEN
                    FIELDERROR("No. Mandate for",
                      STRSUBSTNO(Text11012001, "Mandate for", "No. Mandate for", FIELDCAPTION("Customer No."), "Customer No."));
                  EXIT(FALSE);
                END;
              END;
            END;
          "Mandate for"::ServiceOrder:
            BEGIN
              ServOrder.SETRANGE("No.", NomandateFor);
              ServOrder.SETRANGE("Bill-to Customer No.", "Customer No.");
              IF ServOrder.ISEMPTY THEN BEGIN
                ServOrder.SETRANGE("Bill-to Customer No.", '');
                ServOrder.SETRANGE("Customer No.", "Customer No.");
                IF ServOrder.ISEMPTY THEN BEGIN
                  IF ErrorMode THEN
                    FIELDERROR("No. Mandate for",
                      STRSUBSTNO(Text11012001, "Mandate for", "No. Mandate for", FIELDCAPTION("Customer No."), "Customer No."));
                  EXIT(FALSE);
                END;
              END;
            END;
        END;
      END;
      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

