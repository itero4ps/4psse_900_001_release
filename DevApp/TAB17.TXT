OBJECT Table 17 G/L Entry
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.45834,4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               DimensionValueChains@1100285000 : Record 11128020;
               GenJnlPostPreview@1000 : Codeunit 19;
             BEGIN
               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05

               //>>4PSSE.I009
               DimensionValueChains.ExtendDimSet("Dimension Set ID");
               //<<4PSSE

               GenJnlPostPreview.SaveGLEntry(Rec);
             END;

    CaptionML=ENU=G/L Entry;
    LookupPageID=Page20;
    DrillDownPageID=Page20;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=ENU=Entry No. }
    { 3   ;   ;G/L Account No.     ;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=ENU=G/L Account No. }
    { 4   ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date;
                                                   ClosingDates=Yes }
    { 5   ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 6   ;   ;Document No.        ;Code20        ;OnLookup=VAR
                                                              IncomingDocument@1000 : Record 130;
                                                            BEGIN
                                                              IncomingDocument.HyperlinkToDocument("Document No.","Posting Date");
                                                            END;

                                                   CaptionML=ENU=Document No. }
    { 7   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 10  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Bal. Account Type=CONST(IC Partner)) "IC Partner";
                                                   CaptionML=ENU=Bal. Account No. }
    { 17  ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount;
                                                   AutoFormatType=1 }
    { 23  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 24  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 27  ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=User ID }
    { 28  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=ENU=Source Code }
    { 29  ;   ;System-Created Entry;Boolean       ;CaptionML=ENU=System-Created Entry }
    { 30  ;   ;Prior-Year Entry    ;Boolean       ;CaptionML=ENU=Prior-Year Entry }
    { 41  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=ENU=Project No. }
    { 42  ;   ;Quantity            ;Decimal       ;CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 43  ;   ;VAT Amount          ;Decimal       ;CaptionML=ENU=VAT Amount;
                                                   AutoFormatType=1 }
    { 45  ;   ;Business Unit Code  ;Code10        ;TableRelation="Business Unit";
                                                   CaptionML=ENU=Business Unit Code }
    { 46  ;   ;Journal Batch Name  ;Code10        ;CaptionML=ENU=Journal Batch Name }
    { 47  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 48  ;   ;Gen. Posting Type   ;Option        ;CaptionML=ENU=Gen. Posting Type;
                                                   OptionCaptionML=ENU=" ,Purchase,Sale,Settlement";
                                                   OptionString=[ ,Purchase,Sale,Settlement] }
    { 49  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 50  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 51  ;   ;Bal. Account Type   ;Option        ;CaptionML=ENU=Bal. Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner }
    { 52  ;   ;Transaction No.     ;Integer       ;CaptionML=ENU=Transaction No. }
    { 53  ;   ;Debit Amount        ;Decimal       ;CaptionML=ENU=Debit Amount;
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 54  ;   ;Credit Amount       ;Decimal       ;CaptionML=ENU=Credit Amount;
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 55  ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date;
                                                   ClosingDates=Yes }
    { 56  ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No. }
    { 57  ;   ;Source Type         ;Option        ;CaptionML=ENU=Source Type;
                                                   OptionCaptionML=ENU=" ,Customer,Vendor,Bank Account,Fixed Asset";
                                                   OptionString=[ ,Customer,Vendor,Bank Account,Fixed Asset] }
    { 58  ;   ;Source No.          ;Code20        ;TableRelation=IF (Source Type=CONST(Customer)) Customer
                                                                 ELSE IF (Source Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Source Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Source Type=CONST(Fixed Asset)) "Fixed Asset";
                                                   CaptionML=ENU=Source No. }
    { 59  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
    { 60  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=ENU=Tax Area Code }
    { 61  ;   ;Tax Liable          ;Boolean       ;CaptionML=ENU=Tax Liable }
    { 62  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   CaptionML=ENU=Tax Group Code }
    { 63  ;   ;Use Tax             ;Boolean       ;CaptionML=ENU=Use Tax }
    { 64  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 65  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 68  ;   ;Additional-Currency Amount;Decimal ;AccessByPermission=TableData 4=R;
                                                   CaptionML=ENU=Additional-Currency Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 69  ;   ;Add.-Currency Debit Amount;Decimal ;CaptionML=ENU=Add.-Currency Debit Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 70  ;   ;Add.-Currency Credit Amount;Decimal;CaptionML=ENU=Add.-Currency Credit Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 71  ;   ;Close Income Statement Dim. ID;Integer;
                                                   CaptionML=ENU=Close Income Statement Dim. ID }
    { 72  ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   CaptionML=ENU=IC Partner Code }
    { 73  ;   ;Reversed            ;Boolean       ;CaptionML=ENU=Reversed }
    { 74  ;   ;Reversed by Entry No.;Integer      ;TableRelation="G/L Entry";
                                                   CaptionML=ENU=Reversed by Entry No.;
                                                   BlankZero=Yes }
    { 75  ;   ;Reversed Entry No.  ;Integer       ;TableRelation="G/L Entry";
                                                   CaptionML=ENU=Reversed Entry No.;
                                                   BlankZero=Yes }
    { 76  ;   ;G/L Account Name    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("G/L Account".Name WHERE (No.=FIELD(G/L Account No.)));
                                                   CaptionML=ENU=G/L Account Name;
                                                   Editable=No }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=No }
    { 5400;   ;Prod. Order No.     ;Code20        ;CaptionML=ENU=Prod. Order No. }
    { 5600;   ;FA Entry Type       ;Option        ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=ENU=FA Entry Type;
                                                   OptionCaptionML=ENU=" ,Fixed Asset,Maintenance";
                                                   OptionString=[ ,Fixed Asset,Maintenance] }
    { 5601;   ;FA Entry No.        ;Integer       ;TableRelation=IF (FA Entry Type=CONST(Fixed Asset)) "FA Ledger Entry"
                                                                 ELSE IF (FA Entry Type=CONST(Maintenance)) "Maintenance Ledger Entry";
                                                   CaptionML=ENU=FA Entry No.;
                                                   BlankZero=Yes }
    { 11012060;;Positive           ;Boolean       ;CaptionML=ENU=Positive }
    { 11012070;;Interest Calculated;Boolean       ;CaptionML=ENU=Interest Calculated }
    { 11012075;;Interest Date      ;Date          ;CaptionML=ENU=Interest Date;
                                                   ClosingDates=Yes }
    { 11012080;;Service Contract No.;Code20       ;TableRelation=Service-Contract.No.;
                                                   CaptionML=ENU=Service Contract No.;
                                                   Description=Already created for future use;
                                                   Editable=No }
    { 11012090;;Service Order No.  ;Code20        ;TableRelation="Service Order";
                                                   CaptionML=ENU=Service Order No.;
                                                   Description=Already created for future use }
    { 11012100;;Intercompany Transaction;Boolean  ;CaptionML=ENU=Intercompany Transaction }
    { 11012105;;Receiving Company  ;Text30        ;TableRelation=Company;
                                                   CaptionML=ENU=Receiving Company }
    { 11012110;;Employee No.       ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No. }
    { 11012120;;Description 2      ;Text50        ;CaptionML=ENU=Description 2 }
    { 11012130;;Unit of Measure Code;Code10       ;TableRelation="Unit of Measure";
                                                   CaptionML=ENU=Unit of Measure Code }
    { 11012140;;Supplying Company  ;Text30        ;TableRelation=Company;
                                                   CaptionML=ENU=Supplying Company }
    { 11012891;;VAT-Indication     ;Boolean       ;CaptionML=ENU=VAT-Indication }
    { 11012900;;Expense Allowance Scheme;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Expense Allowance Scheme Entry" WHERE (G/L Entry No.=FIELD(Entry No.)));
                                                   CaptionML=ENU=Expense Allowance Scheme;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;G/L Account No.,Posting Date            ;SumIndexFields=Amount,Debit Amount,Credit Amount,Additional-Currency Amount,Add.-Currency Debit Amount,Add.-Currency Credit Amount }
    {    ;G/L Account No.,Global Dimension 1 Code,Global Dimension 2 Code,Posting Date;
                                                   SumIndexFields=Amount,Debit Amount,Credit Amount,Additional-Currency Amount,Add.-Currency Debit Amount,Add.-Currency Credit Amount }
    {    ;G/L Account No.,Business Unit Code,Posting Date;
                                                   SumIndexFields=Amount,Debit Amount,Credit Amount,Additional-Currency Amount,Add.-Currency Debit Amount,Add.-Currency Credit Amount }
    {    ;G/L Account No.,Business Unit Code,Global Dimension 1 Code,Global Dimension 2 Code,Posting Date;
                                                   SumIndexFields=Amount,Debit Amount,Credit Amount,Additional-Currency Amount,Add.-Currency Debit Amount,Add.-Currency Credit Amount }
    {    ;Document No.,Posting Date                }
    {    ;Transaction No.                          }
    {    ;Posting Date,No. Series,Document No.    ;SumIndexFields=Debit Amount,Credit Amount }
    {    ;IC Partner Code                          }
    {    ;G/L Account No.,Job No.,Posting Date    ;SumIndexFields=Amount }
    {    ;Posting Date,G/L Account No.,Dimension Set ID;
                                                   SumIndexFields=Amount }
    {    ;G/L Account No.,Interest Date,Interest Calculated;
                                                   SumIndexFields=Amount;
                                                   KeyGroups=InterestIC }
    {    ;Job No.,G/L Account No.,Posting Date    ;SumIndexFields=Amount }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Entry No.,Description,G/L Account No.,Posting Date,Document Type,Document No. }
  }
  CODE
  {
    VAR
      GLSetup@1000 : Record 98;
      GLSetupRead@1002 : Boolean;
      DPA_Management@1100000999 : Codeunit 11012783;
      ProgressWindow@1100525001 : Dialog;
      Progress@1100525000 : Integer;
      Text11012001@1100525002 : TextConst 'ENU=Compress Entries @1@@@@@@@@@@@@@';

    PROCEDURE GetCurrencyCode@1() : Code[10];
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        GLSetupRead := TRUE;
      END;
      EXIT(GLSetup."Additional Reporting Currency");
    END;

    PROCEDURE ShowValueEntries@8();
    VAR
      GLItemLedgRelation@1000 : Record 5823;
      ValueEntry@1002 : Record 5802;
      TempValueEntry@1001 : TEMPORARY Record 5802;
    BEGIN
      GLItemLedgRelation.SETRANGE("G/L Entry No.","Entry No.");
      IF GLItemLedgRelation.FINDSET THEN
        REPEAT
          ValueEntry.GET(GLItemLedgRelation."Value Entry No.");
          TempValueEntry.INIT;
          TempValueEntry := ValueEntry;
          TempValueEntry.INSERT;
        UNTIL GLItemLedgRelation.NEXT = 0;

      PAGE.RUNMODAL(0,TempValueEntry);
    END;

    PROCEDURE ShowDimensions@2();
    VAR
      DimMgt@1000 : Codeunit 408;
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"Entry No."));
    END;

    PROCEDURE UpdateDebitCredit@3(Correction@1000 : Boolean);
    BEGIN
      IF ((Amount > 0) AND (NOT Correction)) OR
         ((Amount < 0) AND Correction)
      THEN BEGIN
        "Debit Amount" := Amount;
        "Credit Amount" := 0
      END ELSE BEGIN
        "Debit Amount" := 0;
        "Credit Amount" := -Amount;
      END;

      IF (("Additional-Currency Amount" > 0) AND (NOT Correction)) OR
         (("Additional-Currency Amount" < 0) AND Correction)
      THEN BEGIN
        "Add.-Currency Debit Amount" := "Additional-Currency Amount";
        "Add.-Currency Credit Amount" := 0
      END ELSE BEGIN
        "Add.-Currency Debit Amount" := 0;
        "Add.-Currency Credit Amount" := -"Additional-Currency Amount";
      END;
    END;

    PROCEDURE CopyFromGenJnlLine@4(GenJnlLine@1000 : Record 81);
    BEGIN
      "Posting Date" := GenJnlLine."Posting Date";
      "Document Date" := GenJnlLine."Document Date";
      "Document Type" := GenJnlLine."Document Type";
      "Document No." := GenJnlLine."Document No.";
      "External Document No." := GenJnlLine."External Document No.";
      Description := GenJnlLine.Description;
      "Description 2" := GenJnlLine."Description 2"; //**4PS.n
      "Business Unit Code" := GenJnlLine."Business Unit Code";
      "Global Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
      "Global Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
      "Dimension Set ID" := GenJnlLine."Dimension Set ID";
      "Source Code" := GenJnlLine."Source Code";
      IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::"G/L Account" THEN BEGIN
        "Source Type" := GenJnlLine."Source Type";
        "Source No." := GenJnlLine."Source No.";
      END ELSE BEGIN
        "Source Type" := GenJnlLine."Account Type";
        "Source No." := GenJnlLine."Account No.";
      END;
      IF (GenJnlLine."Account Type" = GenJnlLine."Account Type"::"IC Partner") OR
         (GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::"IC Partner")
      THEN
        "Source Type" := "Source Type"::" ";
      //**4PS.sn
      IF GenJnlLine."Job No." = '' THEN
        "Job No." := GenJnlLine."Closed Project No."
      ELSE
      //**4PS.en
        "Job No." := GenJnlLine."Job No.";
      Quantity := GenJnlLine.Quantity;
      "Journal Batch Name" := GenJnlLine."Journal Batch Name";
      "Reason Code" := GenJnlLine."Reason Code";
      "User ID" := USERID;
      "No. Series" := GenJnlLine."Posting No. Series";
      "IC Partner Code" := GenJnlLine."IC Partner Code";

      //**4PS.sn
      "Unit of Measure Code" := GenJnlLine."Unit of Measure Code";  // 33113.n
      IF GenJnlLine."Service Contract No." = '' THEN
        "Service Contract No." := GenJnlLine."Closed Service Contract No."  //db, 29-10-07 (call 10445)
      ELSE
        "Service Contract No." := GenJnlLine."Service Contract No.";  //db, 15-08-05 (call 6491)
      IF GenJnlLine."Service Order No." = '' THEN
        "Service Order No." := GenJnlLine."Closed Service Order No."  //db, 29-10-07 (call 10445)
      ELSE
        "Service Order No." := GenJnlLine."Service Order No.";  //db, 15-08-05 (call 6491)
      "Intercompany Transaction" := GenJnlLine."Intercompany Transaction";
      IF "Intercompany Transaction" THEN BEGIN //Testcall 2565 No IC for VAT FIXME
        "Receiving Company" := GenJnlLine."Receiving Company";
        "Supplying Company" := GenJnlLine."Supplying Company";
      END;
      "Employee No." := GenJnlLine."Employee No.";
      "VAT-Indication" := GenJnlLine."VAT-Indication";
      "Interest Date" := GenJnlLine."Interest Date"; //12-03-2014
      //**4PS.en

      OnAfterCopyGLEntryFromGenJnlLine(Rec,GenJnlLine);
    END;

    PROCEDURE CopyPostingGroupsFromGLEntry@5(GLEntry@1000 : Record 17);
    BEGIN
      "Gen. Posting Type" := GLEntry."Gen. Posting Type";
      "Gen. Bus. Posting Group" := GLEntry."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := GLEntry."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := GLEntry."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := GLEntry."VAT Prod. Posting Group";
      "Tax Area Code" := GLEntry."Tax Area Code";
      "Tax Liable" := GLEntry."Tax Liable";
      "Tax Group Code" := GLEntry."Tax Group Code";
      "Use Tax" := GLEntry."Use Tax";
    END;

    PROCEDURE CopyPostingGroupsFromVATEntry@96(VATEntry@1001 : Record 254);
    BEGIN
      "Gen. Posting Type" := VATEntry.Type;
      "Gen. Bus. Posting Group" := VATEntry."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := VATEntry."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := VATEntry."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := VATEntry."VAT Prod. Posting Group";
      "Tax Area Code" := VATEntry."Tax Area Code";
      "Tax Liable" := VATEntry."Tax Liable";
      "Tax Group Code" := VATEntry."Tax Group Code";
      "Use Tax" := VATEntry."Use Tax";
    END;

    PROCEDURE CopyPostingGroupsFromGenJnlLine@19(GenJnlLine@1000 : Record 81);
    BEGIN
      "Gen. Posting Type" := GenJnlLine."Gen. Posting Type";
      "Gen. Bus. Posting Group" := GenJnlLine."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := GenJnlLine."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := GenJnlLine."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := GenJnlLine."VAT Prod. Posting Group";
      "Tax Area Code" := GenJnlLine."Tax Area Code";
      "Tax Liable" := GenJnlLine."Tax Liable";
      "Tax Group Code" := GenJnlLine."Tax Group Code";
      "Use Tax" := GenJnlLine."Use Tax";
    END;

    PROCEDURE CopyPostingGroupsFromDtldCVBuf@94(DtldCVLedgEntryBuf@1001 : Record 383;GenPostingType@1002 : ' ,Purchase,Sale,Settlement');
    BEGIN
      "Gen. Posting Type" := GenPostingType;
      "Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
      "Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
      "Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
      "Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
      "Use Tax" := DtldCVLedgEntryBuf."Use Tax";
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyGLEntryFromGenJnlLine@6(VAR GLEntry@1000 : Record 17;VAR GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    PROCEDURE CopyFromDeferralPostBuffer@46(DeferralPostBuffer@1001 : Record 1703);
    BEGIN
      "System-Created Entry" := DeferralPostBuffer."System-Created Entry";
      "Gen. Bus. Posting Group" := DeferralPostBuffer."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := DeferralPostBuffer."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := DeferralPostBuffer."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := DeferralPostBuffer."VAT Prod. Posting Group";
      "Tax Area Code" := DeferralPostBuffer."Tax Area Code";
      "Tax Liable" := DeferralPostBuffer."Tax Liable";
      "Tax Group Code" := DeferralPostBuffer."Tax Group Code";
      "Use Tax" := DeferralPostBuffer."Use Tax";
    END;

    PROCEDURE ShowCompressedEntries@1100528200(VAR GLAccount@1100528201 : Record 15);
    VAR
      GLEntry@1100528200 : Record 17;
      TempEntry@1100528202 : TEMPORARY Record 17;
      TempEntryNo@1100528203 : Integer;
      NoOfRecords@1100525000 : Integer;
      LineCount@1100525001 : Integer;
    BEGIN
      //**4PS
      GLEntry.SETCURRENTKEY("G/L Account No.", "Posting Date");
      GLEntry.SETRANGE("G/L Account No.", GLAccount."No.");

      IF GLAccount.GETFILTER("Date Filter") <> '' THEN
        GLEntry.SETFILTER("Posting Date",'%1',GLAccount."Date Filter");

      TempEntry.SETCURRENTKEY("G/L Account No.","Posting Date");

      NoOfRecords := GLEntry.COUNT;

      ProgressWindow.OPEN(Text11012001);

      IF GLEntry.FINDSET(FALSE,FALSE) THEN
        REPEAT
          LineCount += 1;
          UpdateProgressWindow(LineCount, NoOfRecords);
          TempEntry.SETRANGE("G/L Account No.", GLEntry."G/L Account No.");
          TempEntry.SETRANGE("Posting Date", GLEntry."Posting Date");
          TempEntry.SETRANGE("Document No.", GLEntry."Document No.");

          IF NOT TempEntry.FINDFIRST THEN BEGIN
            TempEntry.INIT;
            TempEntryNo := TempEntryNo + 1;
            TempEntry."Entry No." := TempEntryNo;
            TempEntry."G/L Account No." := GLEntry."G/L Account No.";
            TempEntry."Posting Date" := GLEntry."Posting Date";
            TempEntry."Document Type" := GLEntry."Document Type";
            TempEntry."Document Date" := GLEntry."Document Date";
            TempEntry."Document No." := GLEntry."Document No.";
            TempEntry.INSERT;
          END;

          TempEntry.Amount := TempEntry.Amount + GLEntry.Amount;
          TempEntry."VAT Amount" := TempEntry."VAT Amount" + GLEntry."VAT Amount";
          TempEntry.MODIFY;

        UNTIL GLEntry.NEXT = 0;

      ProgressWindow.CLOSE;

      TempEntry.SETRANGE("G/L Account No.");
      TempEntry.SETRANGE("Document No.");
      TempEntry.SETRANGE("Posting Date");

      COMMIT;

      TempEntry.FINDFIRST;
      PAGE.RUNMODAL(PAGE::"Compr. General Ledger Entries",TempEntry);
    END;

    LOCAL PROCEDURE UpdateProgressWindow@9(NewProgress@11012000 : Integer;NoOfRecords@1100525000 : Integer);
    BEGIN
      IF NoOfRecords > 0 THEN BEGIN
        NewProgress := ROUND(NewProgress / NoOfRecords * 100,1);
        IF (NewProgress <> Progress) THEN BEGIN
          ProgressWindow.UPDATE(1,100 * NewProgress);
        END;
        Progress := NewProgress;
      END;
    END;

    PROCEDURE FilterGLEntries@1100525003();
    VAR
      UserSetup@1100409000 : Record 91;
      ApplyFilter@1100525001 : Boolean;
    BEGIN
      //**4PS DP00664
      GLSetup.GET;
      IF GLSetup."Source Code Filter G/L Entries" = '' THEN
        EXIT;

      IF UserSetup.GET(USERID) THEN
        ApplyFilter := NOT UserSetup."Ignore Source Code Filter"
      ELSE
        ApplyFilter := TRUE;

      IF ApplyFilter THEN BEGIN
        FILTERGROUP(11);
        SETFILTER("Source Code", GLSetup."Source Code Filter G/L Entries");
        FILTERGROUP(0);
      END;
    END;

    PROCEDURE GetSourceName@1100528400() : Text[50];
    VAR
      Customer@1100528400 : Record 18;
      Vendor@1100528401 : Record 23;
      BankAccount@1100528402 : Record 270;
      FixedAsset@1100528403 : Record 5600;
    BEGIN
      //**4PS
      CASE "Source Type" OF
        "Source Type"::Customer:
          IF Customer.GET("Source No.") THEN
            EXIT(Customer.Name);
        "Source Type"::Vendor:
          IF Vendor.GET("Source No.") THEN
            EXIT(Vendor.Name);
        "Source Type"::"Bank Account":
          IF BankAccount.GET("Source No.") THEN
            EXIT(BankAccount.Name);
        "Source Type"::"Fixed Asset":
          IF FixedAsset.GET("Source No.") THEN
            EXIT(FixedAsset.Description);
      END;
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Global Dimension 1 Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::"G/L Entry");
      IF Dimension1Code <> '' THEN
        "Global Dimension 1 Code" := Dimension1Code;

      IF "Global Dimension 1 Code" <> '' THEN BEGIN
        VALIDATE("Global Dimension 1 Code");
      END;
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(17) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 17');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"G/L Entry", "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    PROCEDURE DPA_GetDimFilters@1100525000(StdDimFilter@1100525000 : Boolean) : Boolean;
    VAR
      UseDimFilter@1100525002 : Boolean;
      i@1100525003 : Integer;
    BEGIN
      //kkleermaker.sn, 110926, M27772
      IF StdDimFilter THEN
        EXIT(TRUE);
      //kkleermaker.en, 110926, M27772

      //dbeekman.sn: 23512
      IF NOT DPA_IsActive THEN
        EXIT(StdDimFilter);
      //dbeekman.en

      FOR i := 10 DOWNTO 0 DO BEGIN;
        UseDimFilter := (DPA_GetFiltersFltrGrp(i) <> '');
        IF UseDimFilter THEN EXIT(TRUE);
      END;
    END;

    BEGIN
    END.
  }
}

