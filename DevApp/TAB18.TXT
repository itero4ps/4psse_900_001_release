OBJECT Table 18 Customer
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.45480,NAVDK9.NO9,4PS9.00,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 21=r,
                TableData 167=r,
                TableData 249=rd,
                TableData 5900=r,
                TableData 5940=rm,
                TableData 5965=rm,
                TableData 7002=rd,
                TableData 7004=rd,
                TableData 287=rm;
    DataCaptionFields=No.,Name;
    OnInsert=VAR
               lvCustTemplateRec@1100525000 : Record 5105;
               ServiceSetup@1100525002 : Record 11012800;
               ServiceSourceEMail@1100525003 : Record 11071711;
               lvCreateFromTemplate@1100525001 : Boolean;
             BEGIN
               //**4PS.sn
               "Modified by" := USERID;

               IF GUIALLOWED THEN
                 IF "No. Series" = '' THEN
                   GetCustomerTemplate(lvCreateFromTemplate, lvCustTemplateRec);
               //**4PS.en

               IF "No." = '' THEN BEGIN
                 SalesSetup.GET;
                 SalesSetup.TESTFIELD("Customer Nos.");
                 NoSeriesMgt.InitSeries(SalesSetup."Customer Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               //**4PS.sn
               IF lvCreateFromTemplate THEN BEGIN
                 CreateCustFromTemplate(lvCustTemplateRec);
                 IF lvCustTemplateRec."Create Contact" = lvCustTemplateRec."Create Contact"::Manual THEN
                   InsertFromContact := TRUE;  //skip generating contact
               END;

               InitRecord(COMPANYNAME, lvCreateFromTemplate);
               //**4PS.en

               IF "Invoice Disc. Code" = '' THEN
                 "Invoice Disc. Code" := "No.";

               //IF NOT InsertFromContact THEN       //**4PS.o
               //  UpdateContFromCust.OnInsert(Rec); //**4PS.o
               //**4PS.sn
               IF NOT InsertFromContact THEN BEGIN
                 IF lvCreateFromTemplate THEN
                   UpdateContFromCust.OnInsert2(Rec, lvCustTemplateRec."Create Contact as")
                 ELSE
                   UpdateContFromCust.OnInsert(Rec);
               END;
               //**4PS.en

               DimMgt.UpdateDefaultDim(
                 DATABASE::Customer,"No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");

               //**4PS.sn
               ExchangeFSA('I');
               SalesSetup.GET;
               GetLogisticsCompanySeparated(FALSE);
               IF CompanyLogistics <> '' THEN BEGIN
                 IF SalesSetup."Plant Depot Logistics" <> '' THEN
                   VALIDATE("Plant Depot Logistics", SalesSetup."Plant Depot Logistics");
                 IF SalesSetup."Location Code Logistics" <>  '' THEN
                   VALIDATE("Location Code Logistics", SalesSetup."Location Code Logistics");
               END;
               InsertCentralManagement;
               //**4PS.en
               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05

               //**4PS.sn
               IF ServiceSetup.GET THEN
                 ServiceSourceEMail.CopyToCustomer("No.");
               //**4PS.en
               "Last Date Modified" := TODAY; // 4PSHM 140416
               "Time Last Modified" := TIME; // 4PSHM 140416
             END;

    OnModify=VAR
               OldRecRef@1100528700 : RecordRef;
               ExceptionFields@1210190000 : ARRAY [20] OF Integer;
             BEGIN
               "Time Last Modified" := TIME; // 4PSHM 140416
               "Last Date Modified" := TODAY;
               "Modified by" := USERID;
               IF (Name <> xRec.Name) OR
                  ("Search Name" <> xRec."Search Name") OR
                  ("Name 2" <> xRec."Name 2") OR
                  (Address <> xRec.Address) OR
                  ("Address 2" <> xRec."Address 2") OR
                  (City <> xRec.City) OR
                  ("Phone No." <> xRec."Phone No.") OR
                  ("Telex No." <> xRec."Telex No.") OR
                  ("Territory Code" <> xRec."Territory Code") OR
                  ("Currency Code" <> xRec."Currency Code") OR
                  ("Language Code" <> xRec."Language Code") OR
                  ("Salesperson Code" <> xRec."Salesperson Code") OR
                  ("Country/Region Code" <> xRec."Country/Region Code") OR
                  ("Sales Representative Code" <> xRec."Sales Representative Code") OR //**4PS.n
                  ("Fax No." <> xRec."Fax No.") OR
                  ("Telex Answer Back" <> xRec."Telex Answer Back") OR
                  ("VAT Registration No." <> xRec."VAT Registration No.") OR
                  ("Post Code" <> xRec."Post Code") OR
                  (County <> xRec.County) OR
                  ("E-Mail" <> xRec."E-Mail") OR
                  ("Home Page" <> xRec."Home Page") OR
                  //(Contact <> xRec.Contact) //**4PS.o
                  //**4PS.sn
                  ("Phone No. 2" <> xRec."Phone No. 2") OR
                  ("Mobile Phone No." <> xRec."Mobile Phone No.") OR
                  ("COC Registration No." <> xRec."COC Registration No.") OR
                  ("Due Date COC Statement" <> xRec."Due Date COC Statement") OR
                  ("EORI No." <> xRec."EORI No.")
                  //**4PS.en
                  //("Partner Type" <> xRec."Partner Type")  //**4PS.o C011140
               THEN BEGIN

                 //**4PS.sn
                 RecRef.GETTABLE(Rec);
                 OldRecRef.GETTABLE(xRec);
                 ExceptionFields[1] := 54;
                 ExceptionFields[2] := 11012941;
                 IF NOT CentrDataMgt.ChangeOfFieldsIsAllowed(RecRef, OldRecRef, ExceptionFields) THEN
                   ERROR(Text11012004, TABLECAPTION, "No.", CentrDataMgt.CentralCompany);
                 //**4PS.en
                 MODIFY;
                 UpdateContFromCust.OnModify(Rec);
                 IF NOT FIND THEN BEGIN
                   RESET;
                   IF FIND THEN;
                 END;
               END;

               ExchangeFSA('M');  //**4PS.n

               //**4PS.sn
               CheckRelatedAddress;  //db, 18-12-07
               CentrDataMgt.UpdateCustomer(Rec,2,xRec);
               //**4PS.en
             END;

    OnDelete=VAR
               CampaignTargetGr@1000 : Record 7030;
               ContactBusRel@1001 : Record 5054;
               Job@1004 : Record 11072003;
               DOPaymentCreditCard@1005 : Record 827;
               SocialListeningSearchTopic@1007 : Record 871;
               StdCustSalesCode@1003 : Record 172;
               CustomReportSelection@1008 : Record 9657;
               CampaignTargetGrMgmt@1002 : Codeunit 7030;
               VATRegistrationLogMgt@1006 : Codeunit 249;
               ProjRec@1210190004 : Record 11072003;
               ProjPrincipalRec@11012000 : Record 11012005;
               ServCallRec@1210190000 : Record 11012822;
               ServOrderRec@1210190001 : Record 11012823;
               ServLocRec@1210190002 : Record 11012801;
               ServContractRec@1210190003 : Record 11012812;
               EstimateRec@1210190005 : Record 11012151;
               EstPrincipalRec@1210190006 : Record 11012170;
               lvCustHourRateRec@1210190007 : Record 11012023;
               lvCustSalesPriceCostObjRec@1210190008 : Record 11012080;
               lvDefCustAgreeRec@1210190009 : Record 11020203;
               UrgencyCodesbyCustomerRec@1100525000 : Record 11012090;
               CustomerGLNRelation@1100525001 : Record 11020562;
               ServPortCustomerRights@1210190010 : Record 11126062;
               ReferenceNorm@1100409000 : Record 11012856;
               ServiceExtraCost@1100409001 : Record 11020344;
               CreditLimitByDate@1100409002 : Record 11071869;
               DocsToBeLinkedtoSlsInv@1100528700 : Record 11229792;
               cuCreditSafeMgmt@1100285000 : Codeunit 11128106;
             BEGIN
               ApprovalsMgmt.OnCancelCustomerApprovalRequest(Rec);

               IF DOPaymentCreditCard.FINDFIRST THEN
                 DOPaymentCreditCard.DeleteByCustomer(Rec);

               ServiceItem.SETRANGE("Customer No.","No.");
               IF ServiceItem.FINDFIRST THEN
                 IF CONFIRM(
                      Text008,
                      FALSE,
                      TABLECAPTION,
                      "No.",
                      ServiceItem.FIELDCAPTION("Customer No."))
                 THEN
                   ServiceItem.MODIFYALL("Customer No.",'')
                 ELSE
                   ERROR(Text009);

               Job.SETRANGE("Bill-to Customer No.","No.");
               IF Job.FINDFIRST THEN
                 ERROR(Text015,TABLECAPTION,"No.",Job.TABLECAPTION);

               MoveEntries.MoveCustEntries(Rec);

               CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Customer);
               CommentLine.SETRANGE("No.","No.");
               CommentLine.DELETEALL;

               CustBankAcc.SETRANGE("Customer No.","No.");
               CustBankAcc.DELETEALL;

               ShipToAddr.SETRANGE("Customer No.","No.");
               ShipToAddr.DELETEALL;

               CreditLimitByDate.SETRANGE("Customer No.", "No."); //**4PS.n
               CreditLimitByDate.DELETEALL;                       //**4PS.n

               SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::Customer);
               SalesPrice.SETRANGE("Sales Code","No.");
               SalesPrice.DELETEALL;

               SalesLineDisc.SETRANGE("Sales Type",SalesLineDisc."Sales Type"::Customer);
               SalesLineDisc.SETRANGE("Sales Code","No.");
               SalesLineDisc.DELETEALL;

               SalesPrepmtPct.SETCURRENTKEY("Sales Type","Sales Code");
               SalesPrepmtPct.SETRANGE("Sales Type",SalesPrepmtPct."Sales Type"::Customer);
               SalesPrepmtPct.SETRANGE("Sales Code","No.");
               SalesPrepmtPct.DELETEALL;

               StdCustSalesCode.SETRANGE("Customer No.","No.");
               StdCustSalesCode.DELETEALL(TRUE);

               ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
               ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Customer);
               ItemCrossReference.SETRANGE("Cross-Reference Type No.","No.");
               ItemCrossReference.DELETEALL;

               IF NOT SocialListeningSearchTopic.ISEMPTY THEN BEGIN
                 SocialListeningSearchTopic.FindSearchTopic(SocialListeningSearchTopic."Source Type"::Customer,"No.");
                 SocialListeningSearchTopic.DELETEALL;
               END;

               SalesOrderLine.SETCURRENTKEY("Document Type","Bill-to Customer No.");
               SalesOrderLine.SETFILTER(
                 "Document Type",'%1|%2',
                 SalesOrderLine."Document Type"::Order,
                 SalesOrderLine."Document Type"::"Return Order");
               SalesOrderLine.SETRANGE("Bill-to Customer No.","No.");
               IF SalesOrderLine.FINDFIRST THEN
                 ERROR(
                   Text000,
                   TABLECAPTION,"No.",SalesOrderLine."Document Type");

               SalesOrderLine.SETRANGE("Bill-to Customer No.");
               SalesOrderLine.SETRANGE("Sell-to Customer No.","No.");
               IF SalesOrderLine.FINDFIRST THEN
                 ERROR(
                   Text000,
                   TABLECAPTION,"No.",SalesOrderLine."Document Type");

               CampaignTargetGr.SETRANGE("No.","No.");
               CampaignTargetGr.SETRANGE(Type,CampaignTargetGr.Type::Customer);
               IF CampaignTargetGr.FIND('-') THEN BEGIN
                 ContactBusRel.SETRANGE("Link to Table", ContactBusRel."Link to Table"::Customer);
                 ContactBusRel.SETRANGE("No.","No.");
                 ContactBusRel.FINDFIRST;
                 REPEAT
                   CampaignTargetGrMgmt.ConverttoContact(Rec,ContactBusRel."Contact No.");
                 UNTIL CampaignTargetGr.NEXT = 0;
               END;

               ServContract.SETFILTER(Status,'<>%1',ServContract.Status::Canceled);
               ServContract.SETRANGE("Customer No.","No.");
               IF ServContract.FINDFIRST THEN
                 ERROR(
                   Text007,
                   TABLECAPTION,"No.");

               ServContract.SETRANGE(Status);
               ServContract.MODIFYALL("Customer No.",'');

               ServContract.SETFILTER(Status,'<>%1',ServContract.Status::Canceled);
               ServContract.SETRANGE("Bill-to Customer No.","No.");
               IF ServContract.FINDFIRST THEN
                 ERROR(
                   Text007,
                   TABLECAPTION,"No.");

               ServContract.SETRANGE(Status);
               ServContract.MODIFYALL("Bill-to Customer No.",'');

               ServHeader.SETCURRENTKEY("Customer No.","Order Date");
               ServHeader.SETRANGE("Customer No.","No.");
               IF ServHeader.FINDFIRST THEN
                 ERROR(
                   Text013,
                   TABLECAPTION,"No.",ServHeader."Document Type");

               ServHeader.SETRANGE("Bill-to Customer No.");
               IF ServHeader.FINDFIRST THEN
                 ERROR(
                   Text013,
                   TABLECAPTION,"No.",ServHeader."Document Type");

               //**4PS.sn
               ServCallRec.SETCURRENTKEY("Customer No.");
               ServCallRec.SETRANGE("Customer No.", "No.");
               ServCallRec.SETFILTER(Status, '<%1', ServCallRec.Status::Finished);
               IF ServCallRec.FINDFIRST THEN
                 ERROR(Text11012002, TABLECAPTION, "No.", ServCallRec.TABLECAPTION, ServCallRec."No.");

               ServOrderRec.RESET;
               ServOrderRec.SETCURRENTKEY("Customer No.");
               ServOrderRec.SETRANGE("Customer No.", "No.");
               ServOrderRec.SETFILTER(Status, '<%1', ServOrderRec.Status::Finished);
               IF ServOrderRec.FINDFIRST THEN
                 ERROR(Text11012002, TABLECAPTION, "No.", ServOrderRec.TABLECAPTION, ServOrderRec."No.");

               ServOrderRec.RESET;
               ServOrderRec.SETRANGE("Bill-to Customer No.", "No.");
               ServOrderRec.SETFILTER(Status, '<%1', ServOrderRec.Status::Finished);
               IF ServOrderRec.FINDFIRST THEN
                 ERROR(Text11012002, TABLECAPTION, "No.", ServOrderRec.TABLECAPTION, ServOrderRec."No.");

               ServLocRec.SETCURRENTKEY("Customer No.");
               ServLocRec.SETRANGE("Customer No.", "No.");
               IF ServLocRec.FINDFIRST THEN
                 ERROR(Text11012001, TABLECAPTION, "No.", ServLocRec.TABLECAPTION, ServLocRec."No.");

               ServContractRec.SETRANGE("Customer No.", "No.");
               IF ServContractRec.FINDFIRST THEN
                 ERROR(Text11012001, TABLECAPTION, "No.", ServContractRec.TABLECAPTION, ServContractRec."No.");

               ServiceExtraCost.SETRANGE("Entity Type", ServiceExtraCost."Entity Type"::Customer);
               ServiceExtraCost.SETRANGE("Entity Code", "No.");
               IF NOT ServiceExtraCost.ISEMPTY THEN
                 ServiceExtraCost.DELETEALL(TRUE);

               ReferenceNorm.SETCURRENTKEY("Customer No.");
               ReferenceNorm.SETRANGE("Customer No.", "No.");
               IF NOT ReferenceNorm.ISEMPTY THEN
                 ReferenceNorm.DELETEALL(TRUE);
               //**4PS.en

               UpdateContFromCust.OnDelete(Rec);

               CustomReportSelection.SETRANGE("Source Type",DATABASE::Customer);
               CustomReportSelection.SETRANGE("Source No.","No.");
               CustomReportSelection.DELETEALL;

               VATRegistrationLogMgt.DeleteCustomerLog(Rec);

               DimMgt.DeleteDefaultDim(DATABASE::Customer,"No.");

               //**4PS.sn
               ProjRec.SETCURRENTKEY("Bill-to Customer No.");
               ProjRec.SETRANGE("Bill-to Customer No.", "No.");
               IF ProjRec.FINDFIRST THEN
                 ERROR(Text11012001, TABLECAPTION, "No.", ProjRec.TABLECAPTION, ProjRec."No.");

               ProjPrincipalRec.SETCURRENTKEY(Principal);
               ProjPrincipalRec.SETRANGE(Principal,"No.");
               IF ProjPrincipalRec.FINDFIRST THEN
                 ERROR(Text11012001, TABLECAPTION, "No.", ProjRec.TABLECAPTION, ProjPrincipalRec."Project No.");

               lvCustHourRateRec.SETRANGE("Customer No.", "No.");
               lvCustHourRateRec.DELETEALL;

               lvCustSalesPriceCostObjRec.SETCURRENTKEY("Customer No.");
               lvCustSalesPriceCostObjRec.SETRANGE("Customer No.", "No.");
               lvCustSalesPriceCostObjRec.DELETEALL;

               lvDefCustAgreeRec.SETRANGE("Customer No.", "No.");
               lvDefCustAgreeRec.DELETEALL;

               CustSurchRec.RESET;  //db, 23-06-08
               CustSurchRec.SETRANGE("Record Type", CustSurchRec."Record Type"::Customer);
               CustSurchRec.SETRANGE("Customer No.", "No.");
               CustSurchRec.SETFILTER(Code, '%1', '');
               CustSurchRec.DELETEALL;

               CentrDataMgt.RemoveCustUpdateProspect(Rec);
               CentrDataMgt.RemoveCustomer(Rec);

               EstimateRec.SETCURRENTKEY("Customer No.");
               EstimateRec.SETRANGE("Customer No.", "No.");
               IF EstimateRec.FINDFIRST THEN
                 ERROR(Text11012001, TABLECAPTION, "No.", EstimateRec.TABLECAPTION, EstimateRec."No.");

               EstPrincipalRec.SETRANGE(Principal, "No.");
               IF EstPrincipalRec.FINDFIRST THEN
                 ERROR(Text11012001, TABLECAPTION, "No.", EstimateRec.TABLECAPTION, EstPrincipalRec."Estimate No.");

               UrgencyCodesbyCustomerRec.SETRANGE("Customer No.", "No.");
               UrgencyCodesbyCustomerRec.DELETEALL;

               CustomerGLNRelation.SETRANGE("Customer No.", "No.");
               CustomerGLNRelation.DELETEALL;

               ServPortCustomerRights.SETRANGE("Customer No.", "No.");
               ServPortCustomerRights.DELETEALL(TRUE);

               DocsToBeLinkedtoSlsInv.SETRANGE("Customer No.", "No.");
               DocsToBeLinkedtoSlsInv.DELETEALL;

               ExchangeFSA('D');  //**4PS.n

               cuCreditSafeMgmt.CheckCOCNo(1,'', "COC Registration No.", "No.");
             END;

    OnRename=BEGIN
               ApprovalsMgmt.RenameApprovalEntries(xRec.RECORDID,RECORDID);
               "Last Date Modified" := TODAY;
               "Modified by" := USERID;
               ExchangeFSA('R');  //**4PS.n
             END;

    CaptionML=ENU=Customer;
    LookupPageID=Page22;
    DrillDownPageID=Page22;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   OnValidate=VAR
                                                                Cust@1210190000 : Record 18;
                                                              BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  NoSeriesMgt.TestManual(SalesSetup."Customer Nos.");
                                                                  "No. Series" := '';
                                                                  //**4PS.sn
                                                                  Cust := xRec;
                                                                  IF Cust.FIND THEN
                                                                    CentrDataMgt.UpdateCustomer(Rec,3,xRec);
                                                                  //**4PS.en
                                                                END;
                                                                IF "Invoice Disc. Code" = '' THEN
                                                                  "Invoice Disc. Code" := "No.";
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                IF ("Search Name" = UPPERCASE(xRec.Name)) OR ("Search Name" = '') THEN
                                                                  "Search Name" := Name;
                                                              END;

                                                   CaptionML=ENU=Name }
    { 3   ;   ;Search Name         ;Code50        ;CaptionML=ENU=Search Name }
    { 4   ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 5   ;   ;Address             ;Text50        ;OnValidate=BEGIN
                                                                CheckPostCodeHouseNo; //**4PS.n
                                                                DetermineTravelCostCode;
                                                              END;

                                                   CaptionML=ENU=Address }
    { 6   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                DetermineTravelCostCode; //**4PS.n
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City }
    { 8   ;   ;Contact             ;Text50        ;OnValidate=BEGIN
                                                                IF RMSetup.GET THEN
                                                                  IF RMSetup."Bus. Rel. Code for Customers" <> '' THEN
                                                                    IF (xRec.Contact = '') AND (xRec."Primary Contact No." = '') THEN BEGIN
                                                                      MODIFY;
                                                                      UpdateContFromCust.OnModify(Rec);
                                                                      UpdateContFromCust.InsertNewContactPerson(Rec,FALSE);
                                                                      MODIFY(TRUE);
                                                                    END
                                                              END;

                                                   CaptionML=ENU=Contact }
    { 9   ;   ;Phone No.           ;Text30        ;OnValidate=BEGIN
                                                                PhoneNumberFormatting.ValidatePhoneNumber("Country/Region Code", "Phone No."); //**4PS.n
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 10  ;   ;Telex No.           ;Text30        ;CaptionML=ENU=Telex No. }
    { 11  ;   ;Document Sending Profile;Code20    ;TableRelation="Document Sending Profile".Code;
                                                   CaptionML=ENU=Document Sending Profile }
    { 14  ;   ;Our Account No.     ;Text20        ;CaptionML=ENU=Our Account No. }
    { 15  ;   ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   CaptionML=ENU=Territory Code }
    { 16  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 17  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 18  ;   ;Chain Name          ;Code10        ;CaptionML=ENU=Chain Name }
    { 19  ;   ;Budgeted Amount     ;Decimal       ;CaptionML=ENU=Budgeted Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 20  ;   ;Credit Limit (LCY)  ;Decimal       ;CaptionML=ENU=Credit Limit (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 21  ;   ;Customer Posting Group;Code10      ;TableRelation="Customer Posting Group";
                                                   CaptionML=ENU=Customer Posting Group }
    { 22  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 23  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=ENU=Customer Price Group }
    { 24  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 26  ;   ;Statistics Group    ;Integer       ;CaptionML=ENU=Statistics Group }
    { 27  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   CaptionML=ENU=Payment Terms Code }
    { 28  ;   ;Fin. Charge Terms Code;Code10      ;TableRelation="Finance Charge Terms";
                                                   CaptionML=ENU=Fin. Charge Terms Code }
    { 29  ;   ;Salesperson Code    ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Salesperson Code }
    { 30  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=ENU=Shipment Method Code }
    { 31  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=ENU=Shipping Agent Code }
    { 32  ;   ;Place of Export     ;Code20        ;CaptionML=ENU=Place of Export }
    { 33  ;   ;Invoice Disc. Code  ;Code20        ;TableRelation=Customer;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Invoice Disc. Code }
    { 34  ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=ENU=Customer Disc. Group }
    { 35  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region Code }
    { 36  ;   ;Collection Method   ;Code20        ;CaptionML=ENU=Collection Method }
    { 37  ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 38  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Customer),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 39  ;   ;Blocked             ;Option        ;CaptionML=ENU=Blocked;
                                                   OptionCaptionML=ENU=" ,Ship,Invoice,All";
                                                   OptionString=[ ,Ship,Invoice,All] }
    { 40  ;   ;Invoice Copies      ;Integer       ;CaptionML=ENU=Invoice Copies;
                                                   Description=**4PS** (NLD Factuurexemplaren changed to Aantal kopiefacturen) }
    { 41  ;   ;Last Statement No.  ;Integer       ;CaptionML=ENU=Last Statement No. }
    { 42  ;   ;Print Statements    ;Boolean       ;CaptionML=ENU=Print Statements }
    { 45  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=ENU=Bill-to Customer No. }
    { 46  ;   ;Priority            ;Integer       ;CaptionML=ENU=Priority }
    { 47  ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=VAR
                                                                PaymentMethod@1000 : Record 289;
                                                              BEGIN
                                                                IF "Payment Method Code" = '' THEN
                                                                  EXIT;
                                                                PaymentMethod.GET("Payment Method Code");
                                                                IF PaymentMethod."Direct Debit" AND ("Payment Terms Code" = '') THEN
                                                                  "Payment Terms Code" := PaymentMethod."Direct Debit Pmt. Terms Code";
                                                              END;

                                                   CaptionML=ENU=Payment Method Code }
    { 54  ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=No }
    { 55  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 56  ;   ;Global Dimension 1 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Global Dimension 1 Filter;
                                                   CaptionClass='1,3,1' }
    { 57  ;   ;Global Dimension 2 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Global Dimension 2 Filter;
                                                   CaptionClass='1,3,2' }
    { 58  ;   ;Balance             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Balance;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 59  ;   ;Balance (LCY)       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Balance (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 60  ;   ;Net Change          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Net Change;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Net Change (LCY)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Net Change (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 62  ;   ;Sales (LCY)         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cust. Ledger Entry"."Sales (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                             Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                             Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                             Posting Date=FIELD(Date Filter),
                                                                                                             Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Sales (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 63  ;   ;Profit (LCY)        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cust. Ledger Entry"."Profit (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                              Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                              Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Profit (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 64  ;   ;Inv. Discounts (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cust. Ledger Entry"."Inv. Discount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                     Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                     Posting Date=FIELD(Date Filter),
                                                                                                                     Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Inv. Discounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 65  ;   ;Pmt. Discounts (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(Payment Discount..'Payment Discount (VAT Adjustment)'),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Pmt. Discounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 66  ;   ;Balance Due         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Customer No.=FIELD(No.),
                                                                                                              Posting Date=FIELD(UPPERLIMIT(Date Filter)),
                                                                                                              Initial Entry Due Date=FIELD(Date Filter),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Balance Due;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 67  ;   ;Balance Due (LCY)   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                      Posting Date=FIELD(UPPERLIMIT(Date Filter)),
                                                                                                                      Initial Entry Due Date=FIELD(Date Filter),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Balance Due (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 69  ;   ;Payments            ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Payment),
                                                                                                               Entry Type=CONST(Initial Entry),
                                                                                                               Customer No.=FIELD(No.),
                                                                                                               Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                               Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                               Posting Date=FIELD(Date Filter),
                                                                                                               Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Payments;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 70  ;   ;Invoice Amounts     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Invoice),
                                                                                                              Entry Type=CONST(Initial Entry),
                                                                                                              Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Invoice Amounts;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 71  ;   ;Cr. Memo Amounts    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Credit Memo),
                                                                                                               Entry Type=CONST(Initial Entry),
                                                                                                               Customer No.=FIELD(No.),
                                                                                                               Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                               Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                               Posting Date=FIELD(Date Filter),
                                                                                                               Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Cr. Memo Amounts;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 72  ;   ;Finance Charge Memo Amounts;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Finance Charge Memo),
                                                                                                              Entry Type=CONST(Initial Entry),
                                                                                                              Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Finance Charge Memo Amounts;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 74  ;   ;Payments (LCY)      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Payment),
                                                                                                                       Entry Type=CONST(Initial Entry),
                                                                                                                       Customer No.=FIELD(No.),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Payments (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 75  ;   ;Inv. Amounts (LCY)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Invoice),
                                                                                                                      Entry Type=CONST(Initial Entry),
                                                                                                                      Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Inv. Amounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 76  ;   ;Cr. Memo Amounts (LCY);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Credit Memo),
                                                                                                                       Entry Type=CONST(Initial Entry),
                                                                                                                       Customer No.=FIELD(No.),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Cr. Memo Amounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 77  ;   ;Fin. Charge Memo Amounts (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Finance Charge Memo),
                                                                                                                      Entry Type=CONST(Initial Entry),
                                                                                                                      Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Fin. Charge Memo Amounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 78  ;   ;Outstanding Orders  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount" WHERE (Document Type=CONST(Order),
                                                                                                            Bill-to Customer No.=FIELD(No.),
                                                                                                            Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                            Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                            Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Outstanding Orders;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 79  ;   ;Shipped Not Invoiced;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Shipped Not Invoiced" WHERE (Document Type=CONST(Order),
                                                                                                              Bill-to Customer No.=FIELD(No.),
                                                                                                              Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                              Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Shipped Not Invoiced;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 80  ;   ;Application Method  ;Option        ;CaptionML=ENU=Application Method;
                                                   OptionCaptionML=ENU=Manual,Apply to Oldest;
                                                   OptionString=Manual,Apply to Oldest }
    { 82  ;   ;Prices Including VAT;Boolean       ;CaptionML=ENU=Prices Including VAT }
    { 83  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=ENU=Location Code }
    { 84  ;   ;Fax No.             ;Text30        ;OnValidate=BEGIN
                                                                PhoneNumberFormatting.ValidatePhoneNumber("Country/Region Code", "Fax No."); //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Fax No. }
    { 85  ;   ;Telex Answer Back   ;Text20        ;CaptionML=ENU=Telex Answer Back }
    { 86  ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                VATRegNoFormat@1000 : Record 381;
                                                                VATRegistrationLogMgt@1002 : Codeunit 249;
                                                              BEGIN
                                                                IF VATRegNoFormat.Test("VAT Registration No.","Country/Region Code","No.",DATABASE::Customer) THEN
                                                                  IF "VAT Registration No." <> xRec."VAT Registration No." THEN
                                                                    VATRegistrationLogMgt.LogCustomer(Rec);
                                                              END;

                                                   CaptionML=ENU=VAT Registration No. }
    { 87  ;   ;Combine Shipments   ;Boolean       ;AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Combine Shipments }
    { 88  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 89  ;   ;Picture             ;BLOB          ;CaptionML=ENU=Picture;
                                                   SubType=Bitmap }
    { 90  ;   ;GLN                 ;Code13        ;OnValidate=VAR
                                                                GLNCalculator@1000 : Codeunit 1607;
                                                              BEGIN
                                                                IF GLN <> '' THEN
                                                                  GLNCalculator.AssertValidCheckDigit13(GLN);
                                                              END;

                                                   CaptionML=ENU=GLN;
                                                   Numeric=Yes }
    { 91  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                CheckPostCodeHouseNo; //**4PS.n
                                                                DetermineTravelCostCode;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code }
    { 92  ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 97  ;   ;Debit Amount        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Debit Amount" WHERE (Customer No.=FIELD(No.),
                                                                                                                      Entry Type=FILTER(<>Application),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Debit Amount;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 98  ;   ;Credit Amount       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Credit Amount" WHERE (Customer No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(<>Application),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Credit Amount;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 99  ;   ;Debit Amount (LCY)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Debit Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                            Entry Type=FILTER(<>Application),
                                                                                                                            Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                            Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                            Posting Date=FIELD(Date Filter),
                                                                                                                            Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Debit Amount (LCY);
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 100 ;   ;Credit Amount (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Credit Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                             Entry Type=FILTER(<>Application),
                                                                                                                             Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                             Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                             Posting Date=FIELD(Date Filter),
                                                                                                                             Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Credit Amount (LCY);
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 102 ;   ;E-Mail              ;Text80        ;OnValidate=VAR
                                                                RecRef@1100528700 : RecordRef;
                                                                FldRef@1100528701 : FieldRef;
                                                              BEGIN
                                                                //**4PS.sn
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("E-Mail"));
                                                                ContactDataValidation.ValidateEmail(FldRef, "E-Mail");
                                                                //**4PS.en
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=E-Mail }
    { 103 ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=Home Page }
    { 104 ;   ;Reminder Terms Code ;Code10        ;TableRelation="Reminder Terms";
                                                   CaptionML=ENU=Reminder Terms Code }
    { 105 ;   ;Reminder Amounts    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Reminder),
                                                                                                              Entry Type=CONST(Initial Entry),
                                                                                                              Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Reminder Amounts;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 106 ;   ;Reminder Amounts (LCY);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Reminder),
                                                                                                                      Entry Type=CONST(Initial Entry),
                                                                                                                      Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Reminder Amounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 107 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 108 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=ENU=Tax Area Code }
    { 109 ;   ;Tax Liable          ;Boolean       ;CaptionML=ENU=Tax Liable }
    { 110 ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 111 ;   ;Currency Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Currency;
                                                   CaptionML=ENU=Currency Filter }
    { 113 ;   ;Outstanding Orders (LCY);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                                  Bill-to Customer No.=FIELD(No.),
                                                                                                                  Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                  Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                  Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Outstanding Orders (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 114 ;   ;Shipped Not Invoiced (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Shipped Not Invoiced (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                                    Bill-to Customer No.=FIELD(No.),
                                                                                                                    Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                    Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                    Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Shipped Not Invoiced (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 115 ;   ;Reserve             ;Option        ;InitValue=Optional;
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Reserve;
                                                   OptionCaptionML=ENU=Never,Optional,Always;
                                                   OptionString=Never,Optional,Always }
    { 116 ;   ;Block Payment Tolerance;Boolean    ;OnValidate=BEGIN
                                                                UpdatePaymentTolerance((CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   CaptionML=ENU=Block Payment Tolerance }
    { 117 ;   ;Pmt. Disc. Tolerance (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(Payment Discount Tolerance|'Payment Discount Tolerance (VAT Adjustment)'|'Payment Discount Tolerance (VAT Excl.)'),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Pmt. Disc. Tolerance (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 118 ;   ;Pmt. Tolerance (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(Payment Tolerance|'Payment Tolerance (VAT Adjustment)'|'Payment Tolerance (VAT Excl.)'),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Pmt. Tolerance (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 119 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   OnValidate=VAR
                                                                CustLedgEntry@1001 : Record 21;
                                                                AccountingPeriod@1000 : Record 50;
                                                                ICPartner@1002 : Record 413;
                                                              BEGIN
                                                                IF xRec."IC Partner Code" <> "IC Partner Code" THEN BEGIN
                                                                  IF NOT CustLedgEntry.SETCURRENTKEY("Customer No.",Open) THEN
                                                                    CustLedgEntry.SETCURRENTKEY("Customer No.");
                                                                  CustLedgEntry.SETRANGE("Customer No.","No.");
                                                                  CustLedgEntry.SETRANGE(Open,TRUE);
                                                                  IF CustLedgEntry.FINDLAST THEN
                                                                    ERROR(Text012,FIELDCAPTION("IC Partner Code"),TABLECAPTION);

                                                                  CustLedgEntry.RESET;
                                                                  CustLedgEntry.SETCURRENTKEY("Customer No.","Posting Date");
                                                                  CustLedgEntry.SETRANGE("Customer No.","No.");
                                                                  AccountingPeriod.SETRANGE(Closed,FALSE);
                                                                  IF AccountingPeriod.FINDFIRST THEN BEGIN
                                                                    CustLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
                                                                    IF CustLedgEntry.FINDFIRST THEN
                                                                      IF NOT CONFIRM(Text011,FALSE,TABLECAPTION) THEN
                                                                        "IC Partner Code" := xRec."IC Partner Code";
                                                                  END;
                                                                END;

                                                                IF "IC Partner Code" <> '' THEN BEGIN
                                                                  ICPartner.GET("IC Partner Code");
                                                                  IF (ICPartner."Customer No." <> '') AND (ICPartner."Customer No." <> "No.") THEN
                                                                    ERROR(Text010,FIELDCAPTION("IC Partner Code"),"IC Partner Code",TABLECAPTION,ICPartner."Customer No.");
                                                                  ICPartner."Customer No." := "No.";
                                                                  ICPartner.MODIFY;
                                                                END;

                                                                IF (xRec."IC Partner Code" <> "IC Partner Code") AND ICPartner.GET(xRec."IC Partner Code") THEN BEGIN
                                                                  ICPartner."Customer No." := '';
                                                                  ICPartner.MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=IC Partner Code }
    { 120 ;   ;Refunds             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Refund),
                                                                                                              Entry Type=CONST(Initial Entry),
                                                                                                              Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Refunds }
    { 121 ;   ;Refunds (LCY)       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Refund),
                                                                                                                      Entry Type=CONST(Initial Entry),
                                                                                                                      Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Refunds (LCY) }
    { 122 ;   ;Other Amounts       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(" "),
                                                                                                              Entry Type=CONST(Initial Entry),
                                                                                                              Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Other Amounts }
    { 123 ;   ;Other Amounts (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(" "),
                                                                                                                      Entry Type=CONST(Initial Entry),
                                                                                                                      Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Other Amounts (LCY) }
    { 124 ;   ;Prepayment %        ;Decimal       ;CaptionML=ENU=Prepayment %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 125 ;   ;Outstanding Invoices (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount (LCY)" WHERE (Document Type=CONST(Invoice),
                                                                                                                  Bill-to Customer No.=FIELD(No.),
                                                                                                                  Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                  Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                  Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Outstanding Invoices (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 126 ;   ;Outstanding Invoices;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount" WHERE (Document Type=CONST(Invoice),
                                                                                                            Bill-to Customer No.=FIELD(No.),
                                                                                                            Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                            Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                            Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Outstanding Invoices;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 130 ;   ;Bill-to No. Of Archived Doc.;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header Archive" WHERE (Document Type=CONST(Order),
                                                                                                   Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=Bill-to No. Of Archived Doc. }
    { 131 ;   ;Sell-to No. Of Archived Doc.;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header Archive" WHERE (Document Type=CONST(Order),
                                                                                                   Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=Sell-to No. Of Archived Doc. }
    { 132 ;   ;Partner Type        ;Option        ;CaptionML=ENU=Partner Type;
                                                   OptionCaptionML=ENU=" ,Company,Person";
                                                   OptionString=[ ,Company,Person] }
    { 288 ;   ;Preferred Bank Account;Code10      ;TableRelation="Customer Bank Account".Code WHERE (Customer No.=FIELD(No.));
                                                   CaptionML=ENU=Preferred Bank Account }
    { 840 ;   ;Cash Flow Payment Terms Code;Code10;TableRelation="Payment Terms";
                                                   CaptionML=ENU=Cash Flow Payment Terms Code }
    { 5049;   ;Primary Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                Cont@1000 : Record 5050;
                                                                ContBusRel@1001 : Record 5054;
                                                              BEGIN
                                                                Contact := '';
                                                                IF "Primary Contact No." <> '' THEN BEGIN
                                                                  Cont.GET("Primary Contact No.");
                                                                  Cont.TESTFIELD(Blocked, FALSE); //**4PS.n

                                                                  ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
                                                                  ContBusRel.SETRANGE("No.","No.");
                                                                  ContBusRel.FINDFIRST;

                                                                  IF Cont."Company No." <> ContBusRel."Contact No." THEN
                                                                    ERROR(Text003,Cont."No.",Cont.Name,"No.",Name);

                                                                  IF Cont.Type = Cont.Type::Person THEN
                                                                    Contact := Cont.Name
                                                                END;
                                                                CALCFIELDS("Mobile Phone Primairy Contact");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1000 : Record 5050;
                                                              ContBusRel@1001 : Record 5054;
                                                              TempCust@1002 : TEMPORARY Record 18;
                                                            BEGIN
                                                              ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                              ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
                                                              ContBusRel.SETRANGE("No.","No.");
                                                              IF ContBusRel.FINDFIRST THEN
                                                                Cont.SETRANGE("Company No.",ContBusRel."Contact No.")
                                                              ELSE
                                                                Cont.SETRANGE("No.",'');

                                                              IF "Primary Contact No." <> '' THEN
                                                                IF Cont.GET("Primary Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                TempCust.COPY(Rec);
                                                                FIND;
                                                                TRANSFERFIELDS(TempCust,FALSE);
                                                                VALIDATE("Primary Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Primary Contact No. }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=ENU=Responsibility Center }
    { 5750;   ;Shipping Advice     ;Option        ;AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Shipping Advice;
                                                   OptionCaptionML=ENU=Partial,Complete;
                                                   OptionString=Partial,Complete }
    { 5790;   ;Shipping Time       ;DateFormula   ;AccessByPermission=TableData 5790=R;
                                                   CaptionML=ENU=Shipping Time }
    { 5792;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   OnValidate=BEGIN
                                                                IF ("Shipping Agent Code" <> '') AND
                                                                   ("Shipping Agent Service Code" <> '')
                                                                THEN
                                                                  IF ShippingAgentService.GET("Shipping Agent Code","Shipping Agent Service Code") THEN
                                                                    "Shipping Time" := ShippingAgentService."Shipping Time"
                                                                  ELSE
                                                                    EVALUATE("Shipping Time",'<>');
                                                              END;

                                                   CaptionML=ENU=Shipping Agent Service Code }
    { 5900;   ;Service Zone Code   ;Code10        ;TableRelation="Service Zone";
                                                   CaptionML=ENU=Service Zone Code }
    { 5902;   ;Contract Gain/Loss Amount;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Contract Gain/Loss Entry".Amount WHERE (Customer No.=FIELD(No.),
                                                                                                            Ship-to Code=FIELD(Ship-to Filter),
                                                                                                            Change Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=Contract Gain/Loss Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5903;   ;Ship-to Filter      ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(No.));
                                                   CaptionML=ENU=Ship-to Filter }
    { 5910;   ;Outstanding Serv. Orders (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Line"."Outstanding Amount (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                                    Bill-to Customer No.=FIELD(No.),
                                                                                                                    Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                    Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                    Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Outstanding Serv. Orders (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5911;   ;Serv Shipped Not Invoiced(LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Line"."Shipped Not Invoiced (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                                      Bill-to Customer No.=FIELD(No.),
                                                                                                                      Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                      Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Serv Shipped Not Invoiced(LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5912;   ;Outstanding Serv.Invoices(LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Line"."Outstanding Amount (LCY)" WHERE (Document Type=CONST(Invoice),
                                                                                                                    Bill-to Customer No.=FIELD(No.),
                                                                                                                    Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                    Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                    Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Outstanding Serv.Invoices(LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=ENU=Allow Line Disc. }
    { 7171;   ;No. of Quotes       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Quote),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Quotes;
                                                   Editable=No }
    { 7172;   ;No. of Blanket Orders;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Blanket Order),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=No. of Blanket Orders;
                                                   Editable=No }
    { 7173;   ;No. of Orders       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Order),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=No. of Orders;
                                                   Editable=No }
    { 7174;   ;No. of Invoices     ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Invoice),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Invoices;
                                                   Editable=No }
    { 7175;   ;No. of Return Orders;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Return Order),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   AccessByPermission=TableData 6660=R;
                                                   CaptionML=ENU=No. of Return Orders;
                                                   Editable=No }
    { 7176;   ;No. of Credit Memos ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Credit Memo),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Credit Memos;
                                                   Editable=No }
    { 7177;   ;No. of Pstd. Shipments;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Shipment Header" WHERE (Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Pstd. Shipments;
                                                   Editable=No }
    { 7178;   ;No. of Pstd. Invoices;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Invoice Header" WHERE (Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Pstd. Invoices;
                                                   Editable=No }
    { 7179;   ;No. of Pstd. Return Receipts;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Return Receipt Header" WHERE (Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Pstd. Return Receipts;
                                                   Editable=No }
    { 7180;   ;No. of Pstd. Credit Memos;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Cr.Memo Header" WHERE (Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Pstd. Credit Memos;
                                                   Editable=No }
    { 7181;   ;No. of Ship-to Addresses;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Count("Ship-to Address" WHERE (Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Ship-to Addresses;
                                                   Editable=No }
    { 7182;   ;Bill-To No. of Quotes;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Quote),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=Bill-To No. of Quotes;
                                                   Editable=No }
    { 7183;   ;Bill-To No. of Blanket Orders;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Blanket Order),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Bill-To No. of Blanket Orders;
                                                   Editable=No }
    { 7184;   ;Bill-To No. of Orders;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Order),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Bill-To No. of Orders;
                                                   Editable=No }
    { 7185;   ;Bill-To No. of Invoices;Integer    ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Invoice),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=Bill-To No. of Invoices;
                                                   Editable=No }
    { 7186;   ;Bill-To No. of Return Orders;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Return Order),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   AccessByPermission=TableData 6660=R;
                                                   CaptionML=ENU=Bill-To No. of Return Orders;
                                                   Editable=No }
    { 7187;   ;Bill-To No. of Credit Memos;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Credit Memo),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=Bill-To No. of Credit Memos;
                                                   Editable=No }
    { 7188;   ;Bill-To No. of Pstd. Shipments;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Shipment Header" WHERE (Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=Bill-To No. of Pstd. Shipments;
                                                   Editable=No }
    { 7189;   ;Bill-To No. of Pstd. Invoices;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Invoice Header" WHERE (Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=Bill-To No. of Pstd. Invoices;
                                                   Editable=No }
    { 7190;   ;Bill-To No. of Pstd. Return R.;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Return Receipt Header" WHERE (Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=Bill-To No. of Pstd. Return R.;
                                                   Editable=No }
    { 7191;   ;Bill-To No. of Pstd. Cr. Memos;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Cr.Memo Header" WHERE (Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=Bill-To No. of Pstd. Cr. Memos;
                                                   Editable=No }
    { 7600;   ;Base Calendar Code  ;Code10        ;TableRelation="Base Calendar";
                                                   CaptionML=ENU=Base Calendar Code }
    { 7601;   ;Copy Sell-to Addr. to Qte From;Option;
                                                   AccessByPermission=TableData 5050=R;
                                                   CaptionML=ENU=Copy Sell-to Addr. to Qte From;
                                                   OptionCaptionML=ENU=Company,Person;
                                                   OptionString=Company,Person }
    { 11012000;;Surcharge % Labor  ;Decimal       ;CaptionML=ENU=Surcharge % Labor }
    { 11012001;;Surcharge % Material;Decimal      ;CaptionML=ENU=Surcharge % Material }
    { 11012002;;Surcharge % Subcontr.;Decimal     ;CaptionML=ENU=Surcharge % Subcontracting }
    { 11012003;;Surcharge % Plant  ;Decimal       ;CaptionML=ENU=Surcharge % Plant }
    { 11012004;;Surcharge % Sundry ;Decimal       ;CaptionML=ENU=Surcharge % Sundry }
    { 11012005;;Surcharge % Labor (Est);Decimal   ;CaptionML=ENU=Surcharge % Labor (Estimate);
                                                   Description=DP00381 }
    { 11012006;;Surcharge % Material (Est);Decimal;CaptionML=ENU=Surcharge % Material (Estimate);
                                                   Description=DP00381 }
    { 11012007;;Surcharge % Subcontr. (Est);Decimal;
                                                   CaptionML=ENU=Surcharge % Subcontracting (Estimate);
                                                   Description=DP00381 }
    { 11012008;;Surcharge % Plant (Est);Decimal   ;CaptionML=ENU=Surcharge % Plant (Estimate);
                                                   Description=DP00381 }
    { 11012009;;Surcharge % Sundry (Est);Decimal  ;CaptionML=ENU=Surcharge % Sundry (Estimate);
                                                   Description=DP00381 }
    { 11012010;;Project Settlement Method;Option  ;CaptionML=ENU=Project Settlement Method;
                                                   OptionCaptionML=ENU=Fixed Price,Cost Plus;
                                                   OptionString=Fixed Price,Cost Plus }
    { 11012020;;Project Contract Type;Option      ;CaptionML=ENU=Project Contract Type;
                                                   OptionCaptionML=ENU=Maincontracting,Subcontracting;
                                                   OptionString=Maincontracting,Subcontracting }
    { 11012040;;Balance Document Date LCY;Decimal ;FieldClass=Normal;
                                                   CaptionML=ENU=Balance Document Date LCY;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012050;;Credit Insurance   ;Boolean       ;CaptionML=ENU=Credit Insurance }
    { 11012051;;Credit Insurance End Date;Date    ;CaptionML=ENU=Credit Insurance End Date }
    { 11012052;;Credit Insurer ID  ;Code20        ;CaptionML=ENU=Credit Insurer ID }
    { 11012059;;City COC           ;Text30        ;CaptionML=ENU=City COC }
    { 11012060;;COC Registration No.;Text20       ;OnValidate=VAR
                                                                cuCreditSafeMgmt@1100285000 : Codeunit 11128106;
                                                              BEGIN
                                                                // 131212 IMSE023 <<
                                                                cuCreditSafeMgmt.CheckCOCNo(0,xRec."COC Registration No.", "COC Registration No.", "No.");
                                                                // 131212 >>
                                                              END;

                                                   CaptionML=ENU=COC Registration No. }
    { 11012061;;Due Date COC Statement;Date       ;CaptionML=ENU=Due Date COC Statement }
    { 11012062;;COC Location No.   ;Text30        ;CaptionML=ENU=COC Location No. }
    { 11012070;;VAT Prod. Posting Group;Code10    ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 11012075;;Customer folder    ;Text150       ;CaptionML=ENU=Customer Folder }
    { 11012080;;Cost Object        ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Revenue),
                                                                                               Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Cost Object }
    { 11012090;;Direct Delivery    ;Option        ;InitValue=No;
                                                   CaptionML=ENU=Direct Delivery;
                                                   OptionCaptionML=ENU=No,Yes,Yes - project/service only;
                                                   OptionString=No,Yes,Yes - project/service only }
    { 11012100;;Rate Group (Nett)  ;Code10        ;TableRelation="Rate Group".No.;
                                                   CaptionML=ENU=Rate Group (Nettt) }
    { 11012101;;Rate Group (Gross) ;Code10        ;TableRelation="Rate Group".No.;
                                                   CaptionML=ENU=Rate Group (Gross) }
    { 11012160;;Extended VAT Determination;Boolean;CaptionML=ENU=Extended VAT Determination }
    { 11012270;;Bank Account No.   ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Customer Bank Account"."Bank Account No." WHERE (Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=Bank Account No.;
                                                   Editable=No }
    { 11012271;;Phone No. 2        ;Text30        ;OnValidate=BEGIN
                                                                PhoneNumberFormatting.ValidatePhoneNumber("Country/Region Code", "Phone No. 2"); //**4PS.n
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. 2 }
    { 11012272;;Mobile Phone No.   ;Text30        ;OnValidate=BEGIN
                                                                PhoneNumberFormatting.ValidatePhoneNumber("Country/Region Code", "Mobile Phone No."); //**4PS.n
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Mobile Phone No. }
    { 11012273;;Collect Cost Plus Entry;Boolean   ;CaptionML=ENU=Collect Cost Plus Entry }
    { 11012274;;Cost Plus Sales Prices;Boolean    ;CaptionML=ENU=Cost Plus Sales Prices }
    { 11012275;;Cost Plus Sales Prices From;Date  ;CaptionML=ENU=Cost Plus Sales Prices From }
    { 11012280;;Quantities on Settlement Sheet;Boolean;
                                                   CaptionML=ENU=Quantities on Settlement Sheet;
                                                   Description=Small Projects Operations }
    { 11012290;;Total Line on Settlement Sheet;Boolean;
                                                   CaptionML=ENU=Total Line on Settlement Sheet;
                                                   Description=Small Projects Oprerations }
    { 11012300;;Invoice Text Installments;Text250 ;CaptionML=ENU=Invoice Text Installments }
    { 11012310;;Invoice Text Cost Plus;Text250    ;CaptionML=ENU=Invoice Text Cost Plus }
    { 11012331;;% Labor            ;Decimal       ;CaptionML=ENU=% Labor;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   AutoFormatType=1 }
    { 11012332;;% to B Account     ;Decimal       ;CaptionML=ENU=% to B Account;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 11012340;;Item Price Cost Plus Project;Option;
                                                   CaptionML=ENU=Item Price Cost Plus Project;
                                                   OptionCaptionML=ENU=CostPrice,Gross Price - Sales Discount;
                                                   OptionString=CostPrice,GrossMin }
    { 11012341;;Item Price Estimate;Option        ;CaptionML=ENU=Item Price Estimate;
                                                   OptionCaptionML=ENU=CostPrice,Gross Price - Sales Discount;
                                                   OptionString=CostPrice,GrossMin;
                                                   Description=DP00381 }
    { 11012342;;Item Price Cost Plus Service;Option;
                                                   CaptionML=ENU=Item Price Cost Plus Service;
                                                   OptionCaptionML=ENU=CostPrice,Gross Price - Sales Discount;
                                                   OptionString=CostPrice,GrossMin }
    { 11012345;;Item Price Unit Price;Option      ;CaptionML=ENU=Item Price Unit Price;
                                                   OptionCaptionML=ENU=CostPrice,Gross Price;
                                                   OptionString=CostPrice,GrossPrice }
    { 11012350;;Invoice Layout Code;Code10        ;TableRelation="Invoice Layout";
                                                   CaptionML=ENU=Invoice Layout Code }
    { 11012360;;Default Collect Invoices By;Option;CaptionML=ENU=Default Collect Invoices By;
                                                   OptionCaptionML=ENU=Supervisor,Principal,Project,Commission,Settlement Sheet,Main Project;
                                                   OptionString=Supervisor,Principal,Project,Commission,Settlement Sheet,Main Project;
                                                   Description=Default for Project Commission (T11012020, field 11012960) }
    { 11012370;;Mobile Phone Primairy Contact;Text30;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Mobile Phone No." WHERE (No.=FIELD(Primary Contact No.)));
                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Mobile Phone Primairy Contact;
                                                   Editable=No }
    { 11012500;;XML-Export         ;Boolean       ;CaptionML=ENU=XML-Export Invoices (Sales);
                                                   Description=CP }
    { 11012510;;Plant Depot Logistics;Code20      ;OnValidate=VAR
                                                                lvPlantLocRec@1100485000 : Record 11012554;
                                                              BEGIN
                                                                //**4PS
                                                                IF "Plant Depot Logistics" = '' THEN
                                                                  EXIT;
                                                                GetLogisticsCompanySeparated(TRUE);
                                                                lvPlantLocRec.CHANGECOMPANY(CompanyLogistics);
                                                                lvPlantLocRec.GET("Plant Depot Logistics");
                                                                lvPlantLocRec.TESTFIELD(Depot, TRUE);
                                                              END;

                                                   OnLookup=VAR
                                                              lvPlantLocRec@1100485000 : Record 11012554;
                                                            BEGIN
                                                              //**4PS
                                                              GetLogisticsCompanySeparated(TRUE);
                                                              lvPlantLocRec.CHANGECOMPANY(CompanyLogistics);
                                                              lvPlantLocRec.FILTERGROUP(6);
                                                              lvPlantLocRec.SETRANGE(Depot, TRUE);
                                                              lvPlantLocRec.FILTERGROUP(0);
                                                              lvPlantLocRec.Code := "Plant Depot Logistics";
                                                              IF PAGE.RUNMODAL(0, lvPlantLocRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Plant Depot Logistics", lvPlantLocRec.Code);
                                                            END;

                                                   CaptionML=ENU=Plant Depot Logistics;
                                                   Description=Granule 'Separated Sales / Logistic' + Rental Contracts }
    { 11012520;;Location Code Logistics;Code10    ;OnValidate=VAR
                                                                lvLocRec@1100485000 : Record 14;
                                                              BEGIN
                                                                //**4PS
                                                                IF "Location Code Logistics" = '' THEN
                                                                  EXIT;
                                                                GetLogisticsCompanySeparated(TRUE);
                                                                lvLocRec.CHANGECOMPANY(CompanyLogistics);
                                                                lvLocRec.GET("Location Code Logistics");
                                                                lvLocRec.TESTFIELD("Use As In-Transit", FALSE);
                                                              END;

                                                   OnLookup=VAR
                                                              lvLocRec@1100485000 : Record 14;
                                                            BEGIN
                                                              //**4PS
                                                              GetLogisticsCompanySeparated(TRUE);
                                                              lvLocRec.CHANGECOMPANY(CompanyLogistics);
                                                              lvLocRec.FILTERGROUP(6);
                                                              lvLocRec.SETRANGE("Use As In-Transit", FALSE);
                                                              lvLocRec.FILTERGROUP(0);
                                                              lvLocRec.Code := "Location Code Logistics";
                                                              IF PAGE.RUNMODAL(0, lvLocRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Location Code Logistics", lvLocRec.Code);
                                                            END;

                                                   CaptionML=ENU=Location Code Logistics;
                                                   Description=Granule 'Separated Sales / Logistic" + Rental Contracts }
    { 11012540;;One Location per Plant Invoice;Boolean;
                                                   InitValue=Yes;
                                                   CaptionML=ENU=One Location per Plant Invoice }
    { 11012610;;Contact No.        ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Contact Business Relation"."Contact No." WHERE (Link to Table=CONST(Customer),
                                                                                                                       No.=FIELD(No.)));
                                                   CaptionML=ENU=Contact No.;
                                                   Editable=No }
    { 11012620;;Summary (Cost)     ;Code10        ;TableRelation="Summary Sheet".Summary WHERE (Summary Type=CONST(Cost));
                                                   CaptionML=ENU=Summary (Cost) }
    { 11012625;;Summary (Sales)    ;Code10        ;TableRelation="Summary Sheet".Summary WHERE (Summary Type=CONST(Sales));
                                                   CaptionML=ENU=Summary (Sales) }
    { 11012630;;Serv. Summary (Cost);Code10       ;TableRelation="Summary Sheet".Summary WHERE (Summary Type=CONST(Cost));
                                                   CaptionML=ENU=Service Summary (Cost) }
    { 11012635;;Serv. Summary (Sales);Code10      ;TableRelation="Summary Sheet".Summary WHERE (Summary Type=CONST(Sales));
                                                   CaptionML=ENU=Service Summary (Sales) }
    { 11012650;;Transaction Type   ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=ENU=Transaction Type }
    { 11012660;;Transaction Specification;Code10  ;TableRelation="Transaction Specification";
                                                   CaptionML=ENU=Transaction Specification }
    { 11012670;;Transport Method   ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=ENU=Transport Method }
    { 11012680;;Exit Point         ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=ENU=Exit Point }
    { 11012700;;Service Warranty Code;Code10      ;TableRelation="Service Warranty";
                                                   CaptionML=ENU=Service Warranty Code }
    { 11012750;;E-Mail (Invoices)  ;Text80        ;OnValidate=VAR
                                                                RecRef@1100528701 : RecordRef;
                                                                FldRef@1100528700 : FieldRef;
                                                              BEGIN
                                                                //**4PS.sn
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("E-Mail (Invoices)"));
                                                                ContactDataValidation.ValidateEmail(FldRef, "E-Mail (Invoices)");

                                                                IF "E-Mail (Invoices)" = '' THEN BEGIN
                                                                  IF "Electronic Invoicing" = "Electronic Invoicing"::"E-Mail" THEN
                                                                    "Electronic Invoicing" := "Electronic Invoicing"::Print;
                                                                END;
                                                                //**4PS.en
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=E-Mail (Invoices);
                                                   Description=E-mail address for sending electronic invoices to [jhoek] }
    { 11012755;;Invoice per E-Mail ;Boolean       ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Invoice per E-Mail" THEN
                                                                  TESTFIELD("E-Mail (Invoices)");
                                                              END;

                                                   CaptionML=ENU=Invoice per E-Mail;
                                                   Description=Obsolete }
    { 11012756;;Electronic Invoicing;Option       ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Electronic Invoicing" = "Electronic Invoicing"::"E-Mail" THEN
                                                                  TESTFIELD("E-Mail (Invoices)");
                                                              END;

                                                   CaptionML=ENU=Electronic Invoicing;
                                                   OptionCaptionML=ENU=Print,,E-Mail,,GLN (XML),Digipoort (XML),Svefaktura (XML),OIOUBL (DK);
                                                   OptionString=Print,,E-Mail,,GLN (XML),Digipoort (XML),Svefaktura (XML),OIOUBL (DK),UBL (NO) }
    { 11012759;;E-Mail (Reminders) ;Text80        ;OnValidate=VAR
                                                                RecRef@1100528701 : RecordRef;
                                                                FldRef@1100528700 : FieldRef;
                                                              BEGIN
                                                                //**4PS.sn
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("E-Mail (Reminders)"));
                                                                ContactDataValidation.ValidateEmail(FldRef, "E-Mail (Reminders)");

                                                                IF "E-Mail (Reminders)" = '' THEN
                                                                  "Reminder per E-Mail" := FALSE;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=E-Mail (Reminders) }
    { 11012760;;Reminder per E-Mail;Boolean       ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Reminder per E-Mail" THEN
                                                                  TESTFIELD("E-Mail (Reminders)");
                                                              END;

                                                   CaptionML=ENU=Reminder per E-Mail }
    { 11012761;;E-Mail (Shipments) ;Text80        ;OnValidate=VAR
                                                                RecRef@1100528701 : RecordRef;
                                                                FldRef@1100528700 : FieldRef;
                                                              BEGIN
                                                                //**4PS.sn
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("E-Mail (Shipments)"));
                                                                ContactDataValidation.ValidateEmail(FldRef, "E-Mail (Shipments)");

                                                                IF "E-Mail (Shipments)" = '' THEN
                                                                  "Shipment per E-Mail" := FALSE;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=E-Mail (Shipments) }
    { 11012762;;Shipment per E-Mail;Boolean       ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Shipment per E-Mail" THEN
                                                                  TESTFIELD("E-Mail (Shipments)");
                                                              END;

                                                   CaptionML=ENU=Shipment per E-Mail }
    { 11012763;;E-Mail (Order Confirmations);Text80;
                                                   OnValidate=VAR
                                                                RecRef@1100528701 : RecordRef;
                                                                FldRef@1100528700 : FieldRef;
                                                              BEGIN
                                                                //**4PS.sn
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("E-Mail (Order Confirmations)"));
                                                                ContactDataValidation.ValidateEmail(FldRef, "E-Mail (Order Confirmations)");

                                                                IF "E-Mail (Order Confirmations)" = '' THEN
                                                                  "Order Confirmation per E-Mail" := FALSE;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=E-Mail (Order Confirmations) }
    { 11012764;;Order Confirmation per E-Mail;Boolean;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Order Confirmation per E-Mail" THEN
                                                                  TESTFIELD("E-Mail (Order Confirmations)");
                                                              END;

                                                   CaptionML=ENU=Order Confirmation per E-Mail }
    { 11012770;;Combine E-Mail Attachments;Boolean;CaptionML=ENU=Combine E-Mail Attachments (Invoice) }
    { 11012880;;Reference Date (Item);Date        ;CaptionML=ENU=Reference Date Item Prices }
    { 11012881;;Purch Discount Term Group;Code20  ;TableRelation="Discount Term Group".Code WHERE (Level=CONST(Customer),
                                                                                                   Type=FILTER(Common|Purchase));
                                                   CaptionML=ENU=Purchase Discount Term Group }
    { 11012882;;Sales Discount Term Group;Code20  ;TableRelation="Discount Term Group".Code WHERE (Level=CONST(Customer),
                                                                                                   Type=FILTER(Common|Sales));
                                                   CaptionML=ENU=Sales Discount Term Group }
    { 11012890;;Export to FSA      ;Boolean       ;CaptionML=ENU=Export to Field Service;
                                                   Description=Indication new/changed. BDA= Buitendienstadmin. (Field Service Admin.) }
    { 11012891;;Date/Time Export to FSA;DateTime  ;CaptionML=ENU=Date/Time Export to Field Service }
    { 11012892;;Active in FSA      ;Boolean       ;CaptionML=ENU=Available for in Field Service;
                                                   Description=DB: range 11012900-999 reserved for transferfield with relation }
    { 11012941;;Modified by        ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              LoginMgt@1100485000 : Codeunit 418;
                                                              UserCode@1100485001 : Code[50];
                                                            BEGIN
                                                              UserCode := "Modified by";
                                                              LoginMgt.LookupUserID(UserCode);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Modified by;
                                                   Editable=No }
    { 11012950;;Outstanding Cred. Memo's (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount (LCY)" WHERE (Document Type=CONST(Credit Memo),
                                                                                                                  Bill-to Customer No.=FIELD(No.),
                                                                                                                  Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                  Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                  Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Outstanding Cred. Memo's (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012951;;Outstanding Credit Memo's;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount" WHERE (Document Type=CONST(Invoice),
                                                                                                            Bill-to Customer No.=FIELD(No.),
                                                                                                            Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                            Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                            Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Outstanding Credit Memo's;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012998;;Sales Representative Code;Code10  ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Sales Representative Code }
    { 11012999;;Name Sales Representative;Text50  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Sales Representative Code)));
                                                   CaptionML=ENU=Name Sales Representative;
                                                   Editable=No }
    { 11020254;;Credit Restriction ;Code20        ;TableRelation="Credit Restriction";
                                                   CaptionML=ENU=Credit Restriction }
    { 11020255;;No. of Service Contracts;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Count(Service-Contract WHERE (Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Service Contracts;
                                                   Editable=No }
    { 11020256;;No. of Service Locations;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Count("Service Location" WHERE (Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Service Locations;
                                                   Editable=No }
    { 11020259;;No. of Projects    ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Job WHERE (Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Projects;
                                                   Editable=No }
    { 11020260;;No. of Estimates   ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Estimate WHERE (Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Estimates;
                                                   Editable=No }
    { 11020261;;No. of Principals  ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Project Principal" WHERE (Principal=FIELD(No.)));
                                                   CaptionML=ENU=No. of Project Principals;
                                                   Editable=No }
    { 11125762;;Fixed Price Contract (Glazing);Boolean;
                                                   CaptionML=ENU=Fixed Price Contract (Glazing) }
    { 11125770;;Collect SO Invoices By;Option     ;CaptionML=ENU=Collect Service Order Invoices By;
                                                   OptionCaptionML=ENU=Customer,Service Contract,Service Location,Service Order,Complex,Customer - Bill-to Contact Person;
                                                   OptionString=Customer,Service Contract,Service Location,Service Order,Complex,Customer - Bill-to Contact Person }
    { 11125780;;Send Mail SO Status Update;Boolean;CaptionML=ENU=Send Mail at SO Status update }
    { 11125790;;Send Mail SO Work Sheet;Boolean   ;CaptionML=ENU=Send Mail SO Work Sheet }
    { 11125800;;SO Appointment Letter Code;Code10 ;TableRelation="SO Appointment Letter";
                                                   OnValidate=BEGIN
                                                                IF "SO Appointment Letter Code" <> '' THEN
                                                                  TESTFIELD("Maintenance Appointments by", "Maintenance Appointments by"::Letter);
                                                              END;

                                                   CaptionML=ENU=SO Appointment Letter }
    { 11125810;;Collect Project Invoices By;Option;CaptionML=ENU=Collect Project Invoices on Collective List by;
                                                   OptionCaptionML=ENU=Collective-List,Main Project,Project,Commission,Settlement Sheet,Cost Plus Entry;
                                                   OptionString=Collective-List,Main Project,Project,Commission,Settlement Sheet,Cost Plus Entry;
                                                   Description=Default for Project Collective List }
    { 11125820;;Use Bill-to as Sell-to Custom.;Boolean;
                                                   CaptionML=ENU=Use Bill-to Customer as Sell-to Customer on Sales Invoice (Service) }
    { 11125821;;Calculate B Amounts based on;Option;
                                                   CaptionML=ENU=Calculate B Amounts based on;
                                                   OptionCaptionML=ENU=Labor Amount,Invoice Amount;
                                                   OptionString=Labor Amount,Invoice Amount }
    { 11125830;;Invoice Period (Coll. List);DateFormula;
                                                   CaptionML=ENU=Invoice Period (Collective List) }
    { 11125840;;Min. Inv. Amount (Coll. List);Decimal;
                                                   CaptionML=ENU=Minimal Invoice Amount (Collective List) }
    { 11125850;;Maintenance Appointments by;Option;OnValidate=BEGIN
                                                                IF "Maintenance Appointments by" <> "Maintenance Appointments by"::Letter THEN
                                                                  "SO Appointment Letter Code" := '';
                                                              END;

                                                   CaptionML=ENU=Maintenance Appointments by;
                                                   OptionCaptionML=ENU=" ,Letter,E-Mail";
                                                   OptionString=[ ,Letter,E-Mail] }
    { 11125861;;EORI No.           ;Text20        ;CaptionML=ENU=EORI No. }
    { 11125870;;Travel Cost Code (Service);Code10 ;TableRelation="Travel Cost Code";
                                                   CaptionML=ENU=Travel Cost Code (Service) }
    { 11125871;;Generic Filter     ;Text50        ;CaptionML=ENU=Generic Filter;
                                                   Editable=No }
    { 11125880;;Business Relation Contact No.;Code20;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Contact Business Relation"."Contact No." WHERE (Link to Table=CONST(Customer),
                                                                                                                       No.=FIELD(No.)));
                                                   CaptionML=ENU=Business Relation Contact No. }
    { 11125885;;Visit Address      ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Visit Address" WHERE (No.=FIELD(Business Relation Contact No.)));
                                                   CaptionML=ENU=Visit Address }
    { 11125890;;Visit Address 2    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Visit Address 2" WHERE (No.=FIELD(Business Relation Contact No.)));
                                                   CaptionML=ENU=Visit Address 2 }
    { 11125895;;Visit Address Post Code;Code20    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Visit Address Post Code" WHERE (No.=FIELD(Business Relation Contact No.)));
                                                   CaptionML=ENU=Visit Address Post Code }
    { 11125900;;Visit Address City ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Visit Address City" WHERE (No.=FIELD(Business Relation Contact No.)));
                                                   CaptionML=ENU=Visit Address City }
    { 11125905;;Visit Address Country/Region;Code10;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Visit Address Country/Region" WHERE (No.=FIELD(Business Relation Contact No.)));
                                                   CaptionML=ENU=Visit Address Country/Region }
    { 11125910;;Visit Address County;Text30       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Visit Address County" WHERE (No.=FIELD(Business Relation Contact No.)));
                                                   CaptionML=ENU=Visit Address County }
    { 11125920;;Price Book Type    ;Option        ;OnValidate=VAR
                                                                ServiceUnitPriceManagement@1100528600 : Codeunit 11012846;
                                                              BEGIN
                                                                CASE "Price Book Type" OF
                                                                  "Price Book Type"::None:
                                                                    VALIDATE("Price Book Code", '');
                                                                  "Price Book Type"::Customer:
                                                                    BEGIN
                                                                      "Price Book Code" := "No.";
                                                                      "Price Book Index Date" :=
                                                                        ServiceUnitPriceManagement.GetLatestPriceBookIndexDate("Price Book Type", "Price Book Code");
                                                                      IF "Price Book Index Date" = 0D THEN
                                                                        "Price Book Code" := '';
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Price Book Type;
                                                   OptionCaptionML=ENU=None,Internal,Customer;
                                                   OptionString=None,Internal,Customer }
    { 11125930;;Price Book Code    ;Code20        ;TableRelation="Service Price Book".Code WHERE (Type=FIELD(Price Book Type));
                                                   OnValidate=BEGIN
                                                                IF ("Price Book Code" = '') OR ("Price Book Code" <> xRec."Price Book Code") THEN BEGIN
                                                                  VALIDATE("Price Book Index Date", 0D);
                                                                  VALIDATE("Unit Price Set", '');
                                                                  VALIDATE("Unit Price Status", "Unit Price Status"::" ");
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ServicePriceBook@1100528600 : Record 11071768;
                                                              ServicePriceBookList@1100528601 : Page 11125269;
                                                            BEGIN
                                                              ServicePriceBook.SETRANGE(Type, "Price Book Type");
                                                              ServicePriceBookList.LOOKUPMODE(TRUE);
                                                              ServicePriceBookList.SETTABLEVIEW(ServicePriceBook);
                                                              IF ServicePriceBookList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                ServicePriceBookList.GETRECORD(ServicePriceBook);
                                                                VALIDATE("Price Book Code", ServicePriceBook.Code);
                                                                VALIDATE("Price Book Index Date", ServicePriceBook."Index Date");
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Price Book Code }
    { 11125940;;Price Book Index Date;Date        ;OnValidate=BEGIN
                                                                IF "Price Book Index Date" <> 0D THEN
                                                                  IF "Price Book Type" = "Price Book Type"::None THEN
                                                                    FIELDERROR("Price Book Index Date");
                                                              END;

                                                   CaptionML=ENU=Price Book Index Date }
    { 11125950;;Unit Price Set     ;Code20        ;TableRelation="Service Unit Price Set".Code WHERE (Price Book Type=FIELD(Price Book Type),
                                                                                                      Price Book Code=FIELD(Price Book Code),
                                                                                                      Price Book Index Date=FIELD(Price Book Index Date));
                                                   CaptionML=ENU=Unit Price Set }
    { 11125960;;Unit Price Status  ;Option        ;OnValidate=BEGIN
                                                                IF "Unit Price Status" <> "Unit Price Status"::" " THEN
                                                                  IF "Price Book Type" = "Price Book Type"::None THEN
                                                                    FIELDERROR("Unit Price Status");
                                                              END;

                                                   CaptionML=ENU=Unit Price Status;
                                                   OptionCaptionML=ENU=" ,Pre-Recording,Recording,Production Recording";
                                                   OptionString=[ ,Pre-Recording,Recording,Production Recording] }
    { 11128000;;VAT Prod. Posting Grp to lines;Boolean;
                                                   CaptionML=ENU=VAT Prod. Posting Group to purch.lines;
                                                   Description=PSSE, construction tax (Byggmoms) }
    { 11128010;;Plus Giro No.      ;Text20        ;CaptionML=ENU=Plus Giro No. }
    { 11128270;;Price List Code    ;Code10        ;TableRelation="Customer Price List";
                                                   CaptionML=ENU=Price List Code;
                                                   Description=SEEV }
    { 11128273;;Stripped E-Invoice ;Boolean       ;CaptionML=ENU=Stripped Sveinvoice;
                                                   Description=IME255 }
    { 11128274;;Time Last Modified ;Time          ;Description=4PSHM }
    { 11128501;;Account Code NO    ;Text30        ;CaptionML=ENU=Account Code NO;
                                                   Description=NAVNO 10601 }
    { 11128502;;E-Invoice          ;Boolean       ;CaptionML=ENU=E-Invoice;
                                                   Description=NAVNO 10602 }
    { 11128570;;EAN No.            ;Code13        ;OnValidate=BEGIN
                                                                IF "EAN No." = '' THEN
                                                                  EXIT;
                                                                IF NOT OIOXMLDocumentEncode.IsValidEANNo("EAN No.") THEN
                                                                  FIELDERROR("EAN No.",Text13606);
                                                                IF ("EAN No." <> '') AND ("OIOUBL Profile Code" = '') THEN
                                                                  SetDefaultProfileCode;
                                                              END;

                                                   CaptionML=ENU=EAN No.;
                                                   Description=NAVDK }
    { 11128571;;Account Code DK    ;Text30        ;CaptionML=ENU=Account Code;
                                                   Description=NAVDK }
    { 11128573;;OIOUBL Profile Code;Code10        ;TableRelation="OIOUBL Profile";
                                                   CaptionML=ENU=OIOUBL Profile Code;
                                                   Description=NAVDK }
    { 11128574;;OIOUBL Profile Code Required;Boolean;
                                                   CaptionML=ENU=OIOUBL Profile Code Required;
                                                   Description=NAVDK }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Name                              }
    {    ;Customer Posting Group                   }
    {    ;Currency Code                            }
    {    ;Country/Region Code                      }
    {    ;Gen. Bus. Posting Group                  }
    {    ;Name,Address,City                        }
    {    ;VAT Registration No.                     }
    {    ;Name                                     }
    {    ;City                                     }
    {    ;Post Code                                }
    {    ;Phone No.                                }
    {    ;Contact                                  }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Name,City,Post Code,Phone No.,Contact }
    { 2   ;Brick               ;No.,Name,Balance (LCY),Contact,Balance Due (LCY) }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one outstanding Sales %3 for this customer.';
      Text002@1001 : TextConst 'ENU=Do you wish to create a contact for %1 %2?';
      SalesSetup@1002 : Record 311;
      CommentLine@1004 : Record 97;
      SalesOrderLine@1005 : Record 37;
      CustBankAcc@1006 : Record 287;
      ShipToAddr@1007 : Record 222;
      PostCode@1008 : Record 225;
      GenBusPostingGrp@1009 : Record 250;
      ShippingAgentService@1010 : Record 5790;
      ItemCrossReference@1016 : Record 5717;
      RMSetup@1018 : Record 5079;
      SalesPrice@1021 : Record 7002;
      SalesLineDisc@1022 : Record 7004;
      SalesPrepmtPct@1003 : Record 459;
      ServContract@1026 : Record 5965;
      ServHeader@1034 : Record 5900;
      ServiceItem@1027 : Record 5940;
      PaymentToleranceMgt@1038 : Codeunit 426;
      ProjSetup@1210190000 : Record 315;
      UrgCodebyCustRec@1100485000 : Record 11012090;
      UrgCodebyCustRec2@1100485001 : Record 11012090;
      CustSurchRec@1100485005 : Record 11020367;
      CustTemplate@1100485004 : Record 5105;
      NoSeriesMgt@1011 : Codeunit 396;
      MoveEntries@1012 : Codeunit 361;
      UpdateContFromCust@1013 : Codeunit 5056;
      DimMgt@1014 : Codeunit 408;
      EInvoiceDocumentEncode@1080001 : Codeunit 11128502;
      ApprovalsMgmt@1039 : Codeunit 1535;
      ContactDataValidation@1100528700 : Codeunit 11012275;
      PhoneNumberFormatting@1100528701 : Codeunit 11012276;
      InsertFromContact@1015 : Boolean;
      Text003@1020 : TextConst 'ENU=Contact %1 %2 is not related to customer %3 %4.';
      Text004@1023 : TextConst 'ENU=post';
      Text005@1024 : TextConst 'ENU=create';
      Text006@1025 : TextConst 'ENU=You cannot %1 this type of document when Customer %2 is blocked with type %3';
      Text007@1028 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one not cancelled Service Contract for this customer.';
      Text008@1029 : TextConst 'ENU=Deleting the %1 %2 will cause the %3 to be deleted for the associated Service Items. Do you want to continue?';
      Text009@1030 : TextConst 'ENU=Cannot delete customer.';
      Text010@1031 : TextConst 'ENU=The %1 %2 has been assigned to %3 %4.\The same %1 cannot be entered on more than one %3. Enter another code.';
      Text011@1033 : TextConst 'ENU=Reconciling IC transactions may be difficult if you change IC Partner Code because this %1 has ledger entries in a fiscal year that has not yet been closed.\ Do you still want to change the IC Partner Code?';
      Text012@1032 : TextConst 'ENU=You cannot change the contents of the %1 field because this %2 has one or more open ledger entries.';
      Text013@1035 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one outstanding Service %3 for this customer.';
      Text014@1017 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      Text015@1036 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one %3 associated to this customer.';
      AllowPaymentToleranceQst@1037 : TextConst 'ENU=Do you want to allow payment tolerance for entries that are currently open?';
      RemovePaymentRoleranceQst@1019 : TextConst 'ENU=Do you want to remove payment tolerance from entries that are currently open?';
      Text11012000@1210190004 : TextConst 'ENU=The combination of %1 %2 and House No. %3 is already used at %4 %5';
      Text11012001@1210190005 : TextConst 'ENU=You cannot delete %1 ''%2'' because it is present at least at one %3 (f.i. ''%4).';
      Text11012002@1210190006 : TextConst 'ENU=You cannot delete %1 ''%2'' because it is present at least at one outstanding %3 (f.i. ''%4).';
      Text11012003@1210190007 : TextConst 'ENU=It is not allowed to create a %1 in this Company.';
      Text11012004@1210190008 : TextConst 'ENU=General data of %1 %2 may only be changed in the contact card of company %3.';
      CentrDataMgt@1210190009 : Codeunit 11012010;
      RecRef@1210190010 : RecordRef;
      Text11012005@1210190012 : TextConst 'ENU=Do you want to create the customer based on a template?';
      CompanyLogistics@1100485002 : Text[30];
      DPA_Management@1100000999 : Codeunit 11012783;
      SkipModify@1100528400 : Boolean;
      Text11012006@1100528600 : TextConst 'ENU=%1: %2 %3 is blocked for %4';
      Text11012007@1100528601 : TextConst 'ENU=, continue?';
      OIOXMLDocumentEncode@1101100000 : Codeunit 11128570;
      Text13606@1101100001 : TextConst 'ENU=does not contain a valid, 13-digit EAN no.';

    PROCEDURE AssistEdit@2(OldCust@1000 : Record 18) : Boolean;
    VAR
      Cust@1001 : Record 18;
      lvCustTemplateRec@1100525000 : Record 5105;
      lvCreateFromTemplate@1100525001 : Boolean;
    BEGIN
      WITH Cust DO BEGIN
        Cust := Rec;
        SalesSetup.GET;
        SalesSetup.TESTFIELD("Customer Nos.");
        IF NoSeriesMgt.SelectSeries(SalesSetup."Customer Nos.",OldCust."No. Series","No. Series") THEN BEGIN
          //**4PS.sn
          //Customer Template must be asked before transaction starts
          //23-01-2009 OLD GetCustomerTemplate;
          //* 23-01-2009 After calling 'GetCustomerTemplate' the values of 'CustTemplateRec' and 'CreateFromTemplate' were
          //* already lost. So pass values by arguments (var). And then immediately after determing the 'Customer No.' fill
          //* the fields with the template values.
          GetCustomerTemplate(lvCreateFromTemplate, lvCustTemplateRec);
          //**4PS.en
          NoSeriesMgt.SetSeries("No.");
          IF ("No." <> '') AND (lvCreateFromTemplate) THEN CreateCustFromTemplate(lvCustTemplateRec);  //**4PS.n 23-01-2009
          Rec := Cust;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.SaveDefaultDim(DATABASE::Customer,"No.",FieldNumber,ShortcutDimCode);
      IF NOT SkipModify THEN //**4PS.n
        MODIFY;
    END;

    PROCEDURE ShowContact@1();
    VAR
      ContBusRel@1000 : Record 5054;
      Cont@1001 : Record 5050;
    BEGIN
      IF "No." = '' THEN
        EXIT;

      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      ContBusRel.SETRANGE("No.","No.");
      IF NOT ContBusRel.FINDFIRST THEN BEGIN
        IF NOT CONFIRM(Text002,FALSE,TABLECAPTION,"No.") THEN
          EXIT;
        UpdateContFromCust.InsertNewContact(Rec,FALSE);
        //ContBusRel.FINDFIRST; //**4PS.o
        //**4PS.sn
        IF NOT ContBusRel.FINDFIRST THEN
          ERROR(Text11012003, Cont.TABLECAPTION);
        //**4PS.en
      END;
      COMMIT;

      Cont.SETCURRENTKEY("Company Name","Company No.",Type,Name);
      //Cont.SETRANGE("Company No.",ContBusRel."Contact No.");//**4PS.o
      Cont.SETRANGE("No.",ContBusRel."Contact No.");   //**4PS.sn
      PAGE.RUN(PAGE::"Contact List",Cont);
    END;

    PROCEDURE SetInsertFromContact@3(FromContact@1000 : Boolean);
    BEGIN
      InsertFromContact := FromContact;
    END;

    PROCEDURE CheckBlockedCustOnDocs@5(Cust2@1000 : Record 18;DocType@1001 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';Shipment@1005 : Boolean;Transaction@1003 : Boolean);
    BEGIN
      WITH Cust2 DO BEGIN
        IF ((Blocked = Blocked::All) OR
            ((Blocked = Blocked::Invoice) AND (DocType IN [DocType::Quote,DocType::Order,DocType::Invoice,DocType::"Blanket Order"])) OR
            ((Blocked = Blocked::Ship) AND (DocType IN [DocType::Quote,DocType::Order,DocType::"Blanket Order"]) AND
             (NOT Transaction)) OR
            ((Blocked = Blocked::Ship) AND (DocType IN [DocType::Quote,DocType::Order,DocType::Invoice,DocType::"Blanket Order"]) AND
             Shipment AND Transaction))
        THEN
          CustBlockedErrorMessage(Cust2,Transaction);
      END;
    END;

    PROCEDURE CheckBlockedCustOnJnls@7(Cust2@1003 : Record 18;DocType@1002 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';Transaction@1000 : Boolean);
    BEGIN
      WITH Cust2 DO BEGIN
        IF (Blocked = Blocked::All) OR
           ((Blocked = Blocked::Invoice) AND (DocType IN [DocType::Invoice,DocType::" "]))
        THEN
          CustBlockedErrorMessage(Cust2,Transaction)
      END;
    END;

    PROCEDURE CustBlockedErrorMessage@4(Cust2@1001 : Record 18;Transaction@1000 : Boolean);
    VAR
      Action@1002 : Text[30];
    BEGIN
      IF Transaction THEN
        Action := Text004
      ELSE
        Action := Text005;
      ERROR(Text006,Action,Cust2."No.",Cust2.Blocked);
    END;

    PROCEDURE DisplayMap@8();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::Customer,GETPOSITION)
      ELSE
        MESSAGE(Text014);
    END;

    PROCEDURE GetTotalAmountLCY@10() : Decimal;
    BEGIN
      CALCFIELDS("Balance (LCY)","Outstanding Orders (LCY)","Shipped Not Invoiced (LCY)","Outstanding Invoices (LCY)",
        "Outstanding Serv. Orders (LCY)","Serv Shipped Not Invoiced(LCY)","Outstanding Serv.Invoices(LCY)");

      EXIT(GetTotalAmountLCYCommon);
    END;

    PROCEDURE GetTotalAmountLCYUI@16() : Decimal;
    BEGIN
      SETAUTOCALCFIELDS("Balance (LCY)","Outstanding Orders (LCY)","Shipped Not Invoiced (LCY)","Outstanding Invoices (LCY)",
        "Outstanding Serv. Orders (LCY)","Serv Shipped Not Invoiced(LCY)","Outstanding Serv.Invoices(LCY)");

      EXIT(GetTotalAmountLCYCommon);
    END;

    LOCAL PROCEDURE GetTotalAmountLCYCommon@17() : Decimal;
    VAR
      SalesLine@1000 : Record 37;
      ServiceLine@1002 : Record 5902;
      SalesOutstandingAmountFromShipment@1001 : Decimal;
      ServOutstandingAmountFromShipment@1003 : Decimal;
      InvoicedPrepmtAmountLCY@1004 : Decimal;
    BEGIN
      SalesOutstandingAmountFromShipment := SalesLine.OutstandingInvoiceAmountFromShipment("No.");
      ServOutstandingAmountFromShipment := ServiceLine.OutstandingInvoiceAmountFromShipment("No.");
      InvoicedPrepmtAmountLCY := GetInvoicedPrepmtAmountLCY;

      EXIT("Balance (LCY)" + "Outstanding Orders (LCY)" + "Shipped Not Invoiced (LCY)" + "Outstanding Invoices (LCY)" +
        "Outstanding Serv. Orders (LCY)" + "Serv Shipped Not Invoiced(LCY)" + "Outstanding Serv.Invoices(LCY)" -
        SalesOutstandingAmountFromShipment - ServOutstandingAmountFromShipment - InvoicedPrepmtAmountLCY);
    END;

    PROCEDURE GetSalesLCY@13() : Decimal;
    VAR
      CustomerSalesYTD@1005 : Record 18;
      AccountingPeriod@1004 : Record 50;
      StartDate@1001 : Date;
      EndDate@1000 : Date;
    BEGIN
      StartDate := AccountingPeriod.GetFiscalYearStartDate(WORKDATE);
      EndDate := AccountingPeriod.GetFiscalYearEndDate(WORKDATE);
      CustomerSalesYTD := Rec;
      CustomerSalesYTD."SECURITYFILTERING"("SECURITYFILTERING");
      CustomerSalesYTD.SETRANGE("Date Filter",StartDate,EndDate);
      CustomerSalesYTD.CALCFIELDS("Sales (LCY)");
      EXIT(CustomerSalesYTD."Sales (LCY)");
    END;

    PROCEDURE CalcAvailableCredit@9() : Decimal;
    BEGIN
      EXIT(CalcAvailableCreditCommon(FALSE));
    END;

    PROCEDURE CalcAvailableCreditUI@15() : Decimal;
    BEGIN
      EXIT(CalcAvailableCreditCommon(TRUE));
    END;

    LOCAL PROCEDURE CalcAvailableCreditCommon@14(CalledFromUI@1000 : Boolean) : Decimal;
    BEGIN
      IF "Credit Limit (LCY)" = 0 THEN
        EXIT(0);
      IF CalledFromUI THEN
        EXIT("Credit Limit (LCY)" - GetTotalAmountLCYUI);
      EXIT("Credit Limit (LCY)" - GetTotalAmountLCY);
    END;

    PROCEDURE CalcOverdueBalance@11() OverDueBalance : Decimal;
    VAR
      CustLedgEntryRemainAmtQuery@1000 : Query 21 SECURITYFILTERING(Filtered);
    BEGIN
      CustLedgEntryRemainAmtQuery.SETRANGE(Customer_No,"No.");
      CustLedgEntryRemainAmtQuery.SETRANGE(IsOpen,TRUE);
      CustLedgEntryRemainAmtQuery.SETFILTER(Due_Date,'<%1',WORKDATE);
      CustLedgEntryRemainAmtQuery.OPEN;

      IF CustLedgEntryRemainAmtQuery.READ THEN
        OverDueBalance := CustLedgEntryRemainAmtQuery.Sum_Remaining_Amt_LCY;
    END;

    PROCEDURE GetLegalEntityType@6() : Text;
    BEGIN
      EXIT(FORMAT("Partner Type"));
    END;

    PROCEDURE GetLegalEntityTypeLbl@26() : Text;
    BEGIN
      EXIT(FIELDCAPTION("Partner Type"));
    END;

    PROCEDURE SetStyle@12() : Text;
    BEGIN
      IF CalcAvailableCredit < 0 THEN
        EXIT('Unfavorable');
      EXIT('');
    END;

    PROCEDURE SetDefaultProfileCode@1060000();
    BEGIN
      SalesSetup.GET;
      "OIOUBL Profile Code" := SalesSetup."Default OIOUBL Profile Code";
    END;

    PROCEDURE HasValidDDMandate@23(Date@1000 : Date) : Boolean;
    VAR
      SEPADirectDebitMandate@1001 : Record 1230;
    BEGIN
      EXIT(SEPADirectDebitMandate.GetDefaultMandate("No.",Date) <> '');
    END;

    PROCEDURE GetInvoicedPrepmtAmountLCY@18() : Decimal;
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      SalesLine.SETCURRENTKEY("Document Type","Bill-to Customer No.");
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Bill-to Customer No.","No.");
      SalesLine.CALCSUMS("Prepmt. Amount Inv. (LCY)","Prepmt. VAT Amount Inv. (LCY)");
      EXIT(SalesLine."Prepmt. Amount Inv. (LCY)" + SalesLine."Prepmt. VAT Amount Inv. (LCY)");
    END;

    PROCEDURE CalcCreditLimitLCYExpendedPct@19() : Decimal;
    BEGIN
      IF "Credit Limit (LCY)" = 0 THEN
        EXIT(0);

      IF "Balance (LCY)" / "Credit Limit (LCY)" < 0 THEN
        EXIT(0);

      IF "Balance (LCY)" / "Credit Limit (LCY)" > 1 THEN
        EXIT(10000);

      EXIT(ROUND("Balance (LCY)" / "Credit Limit (LCY)" * 10000,1));
    END;

    PROCEDURE CreateAndShowNewInvoice@21();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader."Document Type" := SalesHeader."Document Type"::Invoice;
      SalesHeader.SETRANGE("Sell-to Customer No.","No.");
      SalesHeader.INSERT(TRUE);
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Mini Sales Invoice",SalesHeader)
    END;

    PROCEDURE CreateAndShowNewCreditMemo@22();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader."Document Type" := SalesHeader."Document Type"::"Credit Memo";
      SalesHeader.SETRANGE("Sell-to Customer No.","No.");
      SalesHeader.INSERT(TRUE);
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Mini Sales Credit Memo",SalesHeader)
    END;

    PROCEDURE CreateAndShowNewQuote@24();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader."Document Type" := SalesHeader."Document Type"::Quote;
      SalesHeader.SETRANGE("Sell-to Customer No.","No.");
      SalesHeader.INSERT(TRUE);
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Mini Sales Quote",SalesHeader)
    END;

    LOCAL PROCEDURE UpdatePaymentTolerance@20(UseDialog@1000 : Boolean);
    BEGIN
      IF "Block Payment Tolerance" THEN BEGIN
        IF UseDialog THEN
          IF NOT CONFIRM(RemovePaymentRoleranceQst,FALSE) THEN
            EXIT;
        PaymentToleranceMgt.DelTolCustLedgEntry(Rec);
      END ELSE BEGIN
        IF UseDialog THEN
          IF NOT CONFIRM(AllowPaymentToleranceQst,FALSE) THEN
            EXIT;
        PaymentToleranceMgt.CalcTolCustLedgEntry(Rec);
      END;
    END;

    PROCEDURE GetBillToCustomerNo@27() : Code[20];
    BEGIN
      IF "Bill-to Customer No." <> '' THEN
        EXIT("Bill-to Customer No.");
      EXIT("No.");
    END;

    PROCEDURE CalcInvoicedPrepmtAmountLCY@1000() PrepaymentAmount : Decimal;
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Bill-to Customer No.","No.");
      SalesLine.SETFILTER("Prepayment %",'<>%1',0);
      IF SalesLine.FINDSET THEN
        REPEAT
          PrepaymentAmount += SalesLine."Prepmt. Amount Inv. (LCY)" + SalesLine."Prepmt. VAT Amount Inv. (LCY)";
        UNTIL SalesLine.NEXT = 0;
    END;

    PROCEDURE ShowContactName@1210190001(lvCust@1210190000 : Code[20];VAR ContRec@1210190006 : Record 5050);
    VAR
      ContBusRel@1000 : Record 5054;
    BEGIN
      //**4PS
      ContBusRel.SETCURRENTKEY("Link to Table", "No.");
      ContBusRel.SETRANGE("Link to Table", ContBusRel."Link to Table"::Customer);
      ContBusRel.SETRANGE("No.", lvCust);
      IF ContBusRel.FINDFIRST THEN BEGIN
        ContRec.GET(ContBusRel."Contact No.");
        //db.sn, 19-05-11: M25697
        ContRec.SETCURRENTKEY("Company Name", "Company No.", Type, Name);  //sorting used by form
        ContRec.SETRANGE("Company Name", ContRec."Company Name");
        ContRec.SETRANGE("Company No.", ContRec."No.");
        //db.en, 19-05-11: M25697
        ContRec.SETRANGE(Blocked, FALSE); //mg, 09-12-10: M24172
        IF PAGE.RUNMODAL(PAGE::"Contact List", ContRec) <> ACTION::LookupOK THEN
          CLEAR(ContRec);
      END;
    END;

    PROCEDURE InsertCentralManagement@30();
    BEGIN
      //**4PS
      CentrDataMgt.UpdateCustomer(Rec,1,xRec);
    END;

    PROCEDURE CheckPostCodeHouseNo@1210190000();
    VAR
      lCustRec@1210190000 : Record 18;
      lHousNo@1210190001 : Text[50];
      lFormatAddress@1210190002 : Codeunit 365;
    BEGIN
      //**4PS
      IF (Address = '') OR ("Post Code" ='') THEN
        EXIT;

      lHousNo := lFormatAddress.HouseNo(Address);
      IF lHousNo = '' THEN
        EXIT;

      lCustRec.SETFILTER("No.",'<>%1',"No.");
      lCustRec.SETRANGE("Post Code", "Post Code");
      IF lCustRec.FINDSET THEN
        REPEAT
          IF lFormatAddress.HouseNo(lCustRec.Address) = lHousNo THEN
            MESSAGE(Text11012000, FIELDCAPTION("Post Code"), "Post Code", lHousNo, TABLECAPTION, lCustRec."No.");
        UNTIL lCustRec.NEXT = 0;
    END;

    PROCEDURE CustIsPerson@1210190003() CustPerson : Boolean;
    VAR
      Cont@1210190002 : Record 5050;
      ContBusRel@1210190001 : Record 5054;
    BEGIN
      //**4PS.n
      CustPerson := FALSE;
      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      ContBusRel.SETRANGE("No.","No.");
      IF ContBusRel.FINDFIRST THEN BEGIN
        Cont.GET(ContBusRel."Contact No.");
        IF Cont.Type = Cont.Type::Person THEN
          CustPerson := TRUE;
      END;
    END;

    PROCEDURE CreateCustFromTemplate@1210190004(CustTemplate@1210190001 : Record 5105);
    VAR
      DefaultDim@1210190002 : Record 352;
      DefaultDim2@1210190003 : Record 352;
      lvCustSurchRec@1100485001 : Record 11020367;
      SCCustSourceTypeSetup@1100525000 : Record 11071800;
      SCCustSourceTypeSetup1@1100525001 : Record 11071800;
    BEGIN
      //**4PS (melding 6350)
      "Territory Code" := CustTemplate."Territory Code";
      "Global Dimension 1 Code" := CustTemplate."Global Dimension 1 Code";
      "Global Dimension 2 Code" := CustTemplate."Global Dimension 2 Code";
      "Customer Posting Group" := CustTemplate."Customer Posting Group";
      "Currency Code" := CustTemplate."Currency Code";
      "Customer Price Group" := CustTemplate."Customer Price Group";
      "Payment Terms Code" := CustTemplate."Payment Terms Code";
      "Shipment Method Code" := CustTemplate."Shipment Method Code";
      "Invoice Disc. Code" := CustTemplate."Invoice Disc. Code";
      "Customer Disc. Group" := CustTemplate."Customer Disc. Group";
      "Country/Region Code" := CustTemplate."Country/Region Code";
      "Language Code" := CustTemplate."Language Code";
      "Payment Method Code" := CustTemplate."Payment Method Code";
      "Gen. Bus. Posting Group" := CustTemplate."Gen. Bus. Posting Group";
      "VAT Bus. Posting Group" := CustTemplate."VAT Bus. Posting Group";
      "Allow Line Disc." := CustTemplate."Allow Line Disc.";
      "Reminder Terms Code" := CustTemplate."Reminder Terms Code";
      "VAT Prod. Posting Group" := CustTemplate."VAT Prod. Posting Group";
      "Fin. Charge Terms Code" := CustTemplate."Fin. Charge Terms Code";
      "Cost Object" := CustTemplate."Cost Object";
      "% Labor" := CustTemplate."% Labor";
      "% to B Account" := CustTemplate."% to B Account";
      "Item Price Cost Plus Project" := CustTemplate."Item Price Cost Plus Project";
      "Item Price Cost Plus Service" := CustTemplate."Item Price Cost Plus Service";  //db, 08-05-14: C015224
      "Credit Restriction" := CustTemplate."Credit Restriction";
      "Invoice Copies" := CustTemplate."Invoice Copies";
      "Project Contract Type" := CustTemplate."Project Contract Type";
      "Surcharge % Labor" := CustTemplate."Surcharge % Labor";
      "Surcharge % Material" := CustTemplate."Surcharge % Material";
      "Surcharge % Subcontr." := CustTemplate."Surcharge % Subcontr.";
      "Surcharge % Plant" := CustTemplate."Surcharge % Plant";
      "Surcharge % Sundry" := CustTemplate."Surcharge % Sundry";
      //DP00381.sn: C012287
      "Surcharge % Labor (Est)" := CustTemplate."Surcharge % Labor (Est)";
      "Surcharge % Material (Est)" := CustTemplate."Surcharge % Material (Est)";
      "Surcharge % Subcontr. (Est)" := CustTemplate."Surcharge % Subcontr. (Est)";
      "Surcharge % Plant (Est)" := CustTemplate."Surcharge % Plant (Est)";
      "Surcharge % Sundry (Est)" := CustTemplate."Surcharge % Sundry (Est)";
      "Item Price Estimate" := CustTemplate."Item Price Estimate";
      "Purch Discount Term Group" := CustTemplate."Purch Discount Term Group";
      "Sales Discount Term Group" := CustTemplate."Sales Discount Term Group";
      //DP00381.en: C012287
      "Prices Including VAT" := CustTemplate."Prices Including VAT";
      "Project Settlement Method" := CustTemplate."Settlement Method";
      "Invoice Layout Code" := CustTemplate."Invoice Layout Code";  // 30486.n
      "SO Appointment Letter Code" := CustTemplate."SO Appointment Letter Code";
      "Maintenance Appointments by" := CustTemplate."Maintenance Appointments by";
      "Partner Type" := CustTemplate."Partner Type"; //**4PS.n DP00613
      //C005810.sn
      "Default Collect Invoices By" := CustTemplate."Default Collect Invoices By";
      "Collect Project Invoices By" := CustTemplate."Collect Project Invoices By";
      "Collect SO Invoices By" := CustTemplate."Collect SO Invoices By";
      //C005810.en
      //>> 160122 ITERO.SB Added Price list code in customer template
      "Price List Code" := CustTemplate."Price List Code";
      //<<
      CustSurchRec.RESET;  //db, 23-06-08
      CustSurchRec.SETRANGE("Record Type", CustSurchRec."Record Type"::Common);
      CustSurchRec.SETFILTER("Customer No.", '%1', '');
      CustSurchRec.SETRANGE(Code, CustTemplate.Code);
      IF CustSurchRec.FINDSET(TRUE, TRUE) THEN BEGIN
        REPEAT
          lvCustSurchRec := CustSurchRec;
          lvCustSurchRec."Record Type" :=  lvCustSurchRec."Record Type"::Customer;
          lvCustSurchRec."Customer No." := "No.";
          lvCustSurchRec.Code := '';
          lvCustSurchRec.INSERT;
        UNTIL CustSurchRec.NEXT = 0;
      END;

      IF CustTemplate.Urgency <>'' THEN BEGIN
        UrgCodebyCustRec.INIT;
        UrgCodebyCustRec."Customer No." := "No.";
        UrgCodebyCustRec.Urgency := CustTemplate.Urgency;
        UrgCodebyCustRec2.RESET;
        UrgCodebyCustRec2.SETFILTER(Urgency,UrgCodebyCustRec.Urgency);
        IF UrgCodebyCustRec2.FIND('-') THEN;
        UrgCodebyCustRec.Description := UrgCodebyCustRec2.Description;
        UrgCodebyCustRec."Response Time (Hours)" := UrgCodebyCustRec2."Response Time (Hours)";
        UrgCodebyCustRec."Appointment Type" := UrgCodebyCustRec2."Appointment Type";
        UrgCodebyCustRec.INSERT;
      END;

      DefaultDim.SETRANGE("Table ID",DATABASE::"Customer Template");
      DefaultDim.SETRANGE(DefaultDim."No.",CustTemplate.Code);
      IF DefaultDim.FINDSET THEN
        REPEAT
          CLEAR(DefaultDim2);
          DefaultDim2.INIT;
          DefaultDim2.VALIDATE("Table ID",DATABASE::Customer);
          DefaultDim2."No." := "No.";
          DefaultDim2.VALIDATE("Dimension Code",DefaultDim."Dimension Code");
          DefaultDim2.VALIDATE("Dimension Value Code",DefaultDim."Dimension Value Code");
          DefaultDim2."Value Posting" := DefaultDim."Value Posting";
        //DefaultDim2.INSERT(TRUE); //C019254.o
          IF DefaultDim2.INSERT(TRUE) THEN; //C019254.n
        UNTIL DefaultDim.NEXT = 0;

      SCCustSourceTypeSetup.SETRANGE(Type, SCCustSourceTypeSetup.Type::"Customer Template");
      SCCustSourceTypeSetup.SETRANGE(Code, CustTemplate.Code);
      IF (SCCustSourceTypeSetup.FINDFIRST) THEN BEGIN
        REPEAT
          SCCustSourceTypeSetup1.COPY(SCCustSourceTypeSetup);
          SCCustSourceTypeSetup1.Type := SCCustSourceTypeSetup1.Type::Customer;
          SCCustSourceTypeSetup1.Code := "No.";
          IF (SCCustSourceTypeSetup1.INSERT) THEN;
        UNTIL (SCCustSourceTypeSetup.NEXT = 0);
      END;
    END;

    PROCEDURE CreateAddress@1100485000(Shipping@1100485000 : Boolean;Project@1100485001 : Boolean;Billing@1100485002 : Boolean);
    VAR
      AdrsRec@1100485003 : Record 222;
      NextCode@1100485004 : Code[10];
      lvText001@1100485006 : TextConst 'ENU=Do you want to change Ship-to Address Data: \\Old: \%1 \%2 \%3 \%4 \%5 \\New: \%6 \%7 \%8 \%9 \%10';
      AdrsExist@1100485007 : Boolean;
      lvText002@1100485005 : TextConst 'ENU=Ship-to Address created.';
      lvText003@1100485008 : TextConst 'ENU=Ship-to Address modified.';
    BEGIN
      //**4PS
      AdrsRec.RESET;
      AdrsRec.SETRANGE("Customer No.", "No.");
      AdrsRec.SETRANGE("Derived from Customer Card", TRUE);
      IF AdrsRec.FINDFIRST THEN BEGIN
        AdrsExist := TRUE;
        IF ((AdrsRec.Name + AdrsRec.Address + AdrsRec.City) <> (Name + Address + City)) AND
           ((AdrsRec.Name + AdrsRec.Address + AdrsRec.City) <> '') THEN
          IF CONFIRM(lvText001, TRUE,
            AdrsRec.Name, AdrsRec.Address, (AdrsRec."Post Code" + '  ' + AdrsRec.City), AdrsRec.Contact, AdrsRec."Phone No.",
            Name, Address, ("Post Code" + '  ' + City), Contact, "Phone No.") = FALSE THEN
            EXIT;
      END ELSE BEGIN
        AdrsExist := FALSE;
        AdrsRec.SETRANGE("Derived from Customer Card");
        IF AdrsRec.FINDLAST THEN
          NextCode := INCSTR(AdrsRec.Code)
        ELSE BEGIN
          NextCode := '001'
        END;
        WHILE AdrsRec.GET("No.", NextCode) DO
          NextCode := INCSTR(NextCode);
      END;

      IF AdrsExist = FALSE THEN BEGIN
        AdrsRec.INIT;
        AdrsRec."Customer No." := "No.";
        AdrsRec.Code := NextCode;
      END;
      AdrsRec.Name := Name;
      AdrsRec."Name 2" := "Name 2";
      AdrsRec.Address := Address;
      AdrsRec."Address 2" := "Address 2";
      AdrsRec.City := City;
      AdrsRec.Contact := Contact;
      AdrsRec."Phone No." := "Phone No.";
      AdrsRec."Telex No." := "Telex No.";
      AdrsRec."Country/Region Code" := "Country/Region Code";
      AdrsRec."Fax No." := "Fax No.";
      AdrsRec."Telex Answer Back" := "Telex Answer Back";
      AdrsRec."Post Code" := "Post Code";
      AdrsRec.County := County;
      AdrsRec."E-Mail" := "E-Mail";
      AdrsRec."Home Page" := "Home Page";
      AdrsRec."Shipping Address" := Shipping;
      AdrsRec."Project Address" := Project;
      AdrsRec."Billing Address" := Billing;
      IF AdrsExist = FALSE THEN
        AdrsRec.INSERT(TRUE);

      AdrsRec."Derived from Customer Card" := TRUE;
      AdrsRec.MODIFY(TRUE);

      IF AdrsExist = FALSE THEN
        MESSAGE(lvText002)
      ELSE
        MESSAGE(lvText003);
    END;

    PROCEDURE ExchangeFSA@1100485002(IMode@1100485003 : Code[1]);
    VAR
      lvProjSetupRec@1100485001 : Record 315;
      lvFieldVisionExchangeMgtCU@1100485000 : Codeunit 11012091;
    BEGIN
      //**4PS.n
      IF IMode = 'I' THEN BEGIN
        "Export to FSA" := FALSE;
        "Date/Time Export to FSA" := 0DT;
      END;
      lvProjSetupRec.GET;
      IF lvProjSetupRec."Field Service Active" THEN BEGIN
        IF IMode <> 'D' THEN BEGIN
          IF "Active in FSA" OR ((NOT "Active in FSA") AND ("Date/Time Export to FSA" <> 0DT)) THEN
            "Export to FSA" := TRUE;
          IF IMode = 'R' THEN
            lvFieldVisionExchangeMgtCU.StoreDeletedCustomer(xRec);
        END ELSE BEGIN
          lvFieldVisionExchangeMgtCU.StoreDeletedCustomer(Rec);
        END;
      END;
    END;

    PROCEDURE CheckCustomerStatus@1100485001(lvCust@1100485001 : Code[20]);
    VAR
      lvText000@1100485000 : TextConst 'ENU=Watch out, %1 %2 is %3.';
      CustRec@1100485002 : Record 18;
    BEGIN
      //**4PS
      CustRec.GET(lvCust);
      IF CustRec.Blocked = CustRec.Blocked::All THEN
        MESSAGE(lvText000, CustRec.TABLECAPTION, lvCust, CustRec.FIELDCAPTION(Blocked));
    END;

    PROCEDURE GetLogisticsCompanySeparated@1100485006(ErrorMode@1100525000 : Boolean);
    VAR
      PlantMgtCompRec@1100485000 : Record 11020586;
    BEGIN
      //**4PS
      IF CompanyLogistics = '' THEN
        CompanyLogistics := PlantMgtCompRec.GetPlantCompanySalesRental(ErrorMode);
    END;

    PROCEDURE CheckRelatedAddress@1100485003();
    VAR
      lvAdrsRec@1100485000 : Record 222;
    BEGIN
      //**4PS
      lvAdrsRec.UpdateRelatedAddress(Rec,lvAdrsRec);
    END;

    PROCEDURE GetCustomerTemplate@1100485004(VAR oCreateFromTemplate@1100525001 : Boolean;VAR oCustTemplateRec@1100525000 : Record 5105);
    BEGIN
      //**4PS
      oCreateFromTemplate := FALSE;
      IF NOT InsertFromContact THEN BEGIN
        IF oCustTemplateRec.FINDFIRST THEN BEGIN
          //>> 160216 ITERO.SB Create customer from template, set default value = true
          IF CONFIRM(Text11012005,TRUE) THEN BEGIN
          //<<
            IF oCustTemplateRec.COUNT = 1 THEN
              oCreateFromTemplate := TRUE
            ELSE
              IF PAGE.RUNMODAL(0, oCustTemplateRec) = ACTION::LookupOK THEN
                oCreateFromTemplate := TRUE;
          END;
        END;
      END;
    END;

    PROCEDURE ShowSalesPersons@1100525000();
    VAR
      ContBusRel@1000 : Record 5054;
      SalespersonByContact@1001 : Record 11012760;
    BEGIN
      //**4PS
      IF "No." = '' THEN
        EXIT;

      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      ContBusRel.SETRANGE("No.","No.");
      ContBusRel.FINDFIRST;

      SalespersonByContact.SETRANGE("Contact No.", ContBusRel."Contact No.");
      PAGE.RUNMODAL(0, SalespersonByContact);
    END;

    PROCEDURE InitRecord@1100525001(CompName@1100525000 : Text[50];CreatedFromTemplate@1100525001 : Boolean);
    VAR
      PlantSetup@1100525002 : Record 11012550;
      GLSetup@1100525003 : Record 98;
      ServiceSetup@1100528600 : Record 11012800;
    BEGIN
      //**4PS
      SalesSetup.CHANGECOMPANY(CompName);
      SalesSetup.GET;
      "Direct Delivery" := SalesSetup."Direct Delivery";
      "Calculate B Amounts based on" := SalesSetup."Calculate B Amounts based on";

      ProjSetup.CHANGECOMPANY(CompName);
      ProjSetup.GET;
      IF NOT CreatedFromTemplate THEN BEGIN
        "Item Price Cost Plus Project" := ProjSetup."Item Price Cost Plus Entry";
        ServiceSetup.CHANGECOMPANY(CompName);
        IF ServiceSetup.READPERMISSION THEN
          IF ServiceSetup.GET THEN
            "Item Price Cost Plus Service" := ServiceSetup."Item Price Cost Plus Entry";  //db, 08-05-14: C015224
        "Default Collect Invoices By" := ProjSetup."Default Collect Invoices By";  //C005810.n
      END;
      //"Default Collect Invoices By" := ProjSetup."Default Collect Invoices By";  //C005810.o

      PlantSetup.CHANGECOMPANY(CompName);
      IF PlantSetup.READPERMISSION THEN
        IF PlantSetup.GET THEN
          "One Location per Plant Invoice" := PlantSetup."One Location per Invoice";

      GLSetup.CHANGECOMPANY(CompName);
      GLSetup.GET;
      "Extended VAT Determination" := GLSetup."Default Ext. Sales VAT Determ.";

      ServiceSetup.CHANGECOMPANY(CompName);
      IF ServiceSetup.READPERMISSION THEN
        IF ServiceSetup.GET THEN
          "Use Bill-to as Sell-to Custom." := ServiceSetup."Use Bill-to as Sell-to Custom.";
      //**4PS.en
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Global Dimension 1 Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::Customer);
      IF Dimension1Code <> '' THEN
        "Global Dimension 1 Code" := Dimension1Code;

      IF "Global Dimension 1 Code" <> '' THEN BEGIN
        SkipModify := TRUE;
        VALIDATE("Global Dimension 1 Code");
        SkipModify := FALSE;
      END;
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Filter"));
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(18) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 18');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::Customer, "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    PROCEDURE DPA_SetFiltersForResource@1100525002(Context@1100525000 : Text[30];ResourceNo@1100525001 : Code[20]) : Boolean;
    VAR
      Resource@1100525002 : Record 11229278;
      UserSetup@1100525003 : Record 91;
    BEGIN
      //**4PS
      Resource.SETRANGE("No.", ResourceNo);
      Resource.SETRANGE(Type, Resource.Type::Employee);
      Resource.SETRANGE(Company, COMPANYNAME);
      IF Resource.FINDFIRST THEN BEGIN
        UserSetup.SETRANGE("Employee No.", Resource."Source No.");
        IF UserSetup.FINDFIRST THEN
          DPA_Management.SetUserWSEmployee(UserSetup."User ID");
      END;

      EXIT(DPA_SetFilters(Context));
    END;

    PROCEDURE EditDocuments@1100528702(ContactNo@1210190004 : Code[20];ContactPersonNo@1210190005 : Code[20];SendMail@1210190002 : Boolean;Recipient@1100528700 : Text[120]);
    VAR
      DocumentMailing@1210190000 : Codeunit 11012278;
      RecRef@1100525000 : RecordRef;
      DocumentLinkRIDs@1100525001 : ARRAY [5] OF RecordID;
    BEGIN
      //**4PS
      RecRef.GETTABLE(Rec);
      DocumentLinkRIDs[1] := RecRef.RECORDID;

      DocumentMailing.EditDocuments('', DocumentLinkRIDs, '', ContactNo, ContactPersonNo, SendMail, Recipient);
    END;

    PROCEDURE EditCreditLimitByDate@1100528300();
    VAR
      CreditLimitByDate@1100528300 : Record 11071869;
      CreditLimitsByDate@1100528301 : Page 11125060;
    BEGIN
      //**4PS
      CreditLimitByDate.FILTERGROUP(9);
      CreditLimitByDate.SETRANGE("Customer No.", "No.");
      CreditLimitByDate.FILTERGROUP(0);
      CreditLimitsByDate.SETTABLEVIEW(CreditLimitByDate);
      CreditLimitsByDate.RUNMODAL;
    END;

    PROCEDURE GetActualCreditLimit@1100528301(BaseDate@1100528301 : Date) : Decimal;
    VAR
      CreditLimitByDate@1100528300 : Record 11071869;
    BEGIN
      //**4PS
      CreditLimitByDate.SETRANGE("Customer No.", "No.");
      CreditLimitByDate.SETFILTER("Start Date", '<=%1', BaseDate);
      CreditLimitByDate.SETFILTER("End Date", '>=%1|%2', BaseDate, 0D);
      IF (CreditLimitByDate.FINDLAST) THEN
        EXIT(CreditLimitByDate."Credit Limit (LCY)");
      EXIT(0);
    END;

    LOCAL PROCEDURE DetermineTravelCostCode@1100528600();
    VAR
      PostCode@1100528600 : Record 225;
      PostCodeGroup@1100528601 : Record 11020599;
      TravelCostCode@1100528602 : Record 11071801;
    BEGIN
      IF NOT PostCode.GET("Post Code", City) THEN
        EXIT;
      IF PostCode.Group = '' THEN
        EXIT;
      IF NOT PostCodeGroup.GET(PostCode.Group) THEN
        EXIT;
      IF PostCodeGroup."Travel Cost Code (Service)" <> '' THEN
        VALIDATE("Travel Cost Code (Service)", PostCodeGroup."Travel Cost Code (Service)");
    END;

    PROCEDURE ShowContactCompany@1100285300();
    VAR
      ContBusRel@1000 : Record 5054;
      Cont@1001 : Record 5050;
    BEGIN
      //>>160216 ITERO.SB New function ShowContactCompany, filter on company no. (Copy of function ShowContact())

      IF "No." = '' THEN
        EXIT;

      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      ContBusRel.SETRANGE("No.","No.");
      IF NOT ContBusRel.FINDFIRST THEN BEGIN
        IF NOT CONFIRM(Text002,FALSE,TABLECAPTION,"No.") THEN
          EXIT;
        UpdateContFromCust.InsertNewContact(Rec,FALSE);
        //ContBusRel.FINDFIRST; //**4PS.o
        //**4PS.sn
        IF NOT ContBusRel.FINDFIRST THEN
          ERROR(Text11012003, Cont.TABLECAPTION);
        //**4PS.en
      END;
      COMMIT;

      Cont.SETCURRENTKEY("Company Name","Company No.",Type,Name);
      Cont.SETRANGE("Company No.",ContBusRel."Contact No.");//**4PS.o
      //Cont.SETRANGE("No.",ContBusRel."Contact No.");   //**4PS.sn
      PAGE.RUN(PAGE::"Contact List",Cont);
      //<<
    END;

    PROCEDURE CheckBlockedCustomerByTableNo@1100528601(ITableNo@1100528600 : Integer;IFieldNo@1100528601 : Integer);
    VAR
      RecRef@1100528602 : RecordRef;
      FieldRef@1100528603 : FieldRef;
    BEGIN
      IF (ITableNo <> 0) AND (IFieldNo <> 0) THEN BEGIN
        RecRef.OPEN(ITableNo);
        FieldRef := RecRef.FIELD(IFieldNo);
      END;
      CASE ITableNo OF
        DATABASE::"Service Call":
          IF Blocked = Blocked::All THEN
            IF GUIALLOWED THEN
              IF NOT CONFIRM(STRSUBSTNO(Text11012006 + Text11012007, RecRef.CAPTION, FieldRef.CAPTION, "No.", Blocked)) THEN
                ERROR('');
        DATABASE::"Service Order":
          IF Blocked = Blocked::All THEN
            ERROR(Text11012006, RecRef.CAPTION, FieldRef.CAPTION, "No.", Blocked);
      END;
    END;

    BEGIN
    {
      4PS01 HBK 17-08-09 Added Field "Contact No." for call no. 15828/16022

      -SE EVRY-
      LAHE 130117 "Price List Code"

      131212 IMSE023 Added code under COC Registration No. onValidate
      140416 4PSHM.MH Added new field "Time Last Modified" and corresponding code onInsert() and onModify()
      ITERO.MH 140702 ENH021 Added new option on E-Invoice: Svefaktura (XML)
      ITERO.MH 150109 IME255 Added new field "Stripped E-Invoice"
      160122 ITERO.SB Added Price list code in customer template
      160216 ITERO.SB Create customer from template, set default value = true (radiator,191)
      160216 ITERO.SB New function ShowContactCompany, filter on company no. (Copy of function ShowContact())
      Version List=NAVW19.00.00.45480,NAVDK9.00.00.45480;
    }
    END.
  }
}

