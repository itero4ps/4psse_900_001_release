OBJECT Table 2000000004 Permission Set
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00,4PS9.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    DataCaptionFields=Role ID,Name;
    OnModify=BEGIN
               //**4PS.sn
               Is4PSStandard;
               //**4PS.en
             END;

    OnDelete=BEGIN
               //**4PS.sn
               Is4PSStandard;
               CheckDependancies;
               DeleteUserRoleTree("Role ID");
               //**4PS.en
             END;

    OnRename=BEGIN
               //**4PS.sn
               Is4PSStandard;
               //**4PS.en
             END;

    CaptionML=ENU=Permission Set;
    LookupPageID=Page9802;
    DrillDownPageID=Page9802;
  }
  FIELDS
  {
    { 1   ;   ;Role ID             ;Code20        ;CaptionML=ENU=Role ID;
                                                   NotBlank=Yes }
    { 2   ;   ;Name                ;Text30        ;CaptionML=ENU=Name }
    { 11012000;;Role Type          ;Option        ;CaptionML=ENU=Role Type;
                                                   OptionCaptionML=ENU=Normal Role,Function Profile Role;
                                                   OptionString=Normal Role,Function Profile Role }
    { 11012010;;Standard 4PS       ;Boolean       ;CaptionML=ENU=Standard 4PS Role Group Role;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Role ID                                 ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE CheckDependancies@1100525000();
    VAR
      Text11012000@1100525001 : TextConst 'ENU=Delete not allowed, related line(s) exist in %1.';
      FunctionProfile@1100525000 : Record 11020569;
      FunctionProfileRole@1100525002 : Record 11020572;
      RoleGroupRole@1100525003 : Record 11020571;
      RoleFieldAuthorization@1100525004 : Record 11020568;
    BEGIN
      //**4PS
      FunctionProfile.SETRANGE("Role ID","Role ID");
      IF NOT FunctionProfile.ISEMPTY THEN
        ERROR(Text11012000,FunctionProfile.TABLECAPTION);

      FunctionProfileRole.SETRANGE("Function Profile Role ID","Role ID");
      IF NOT FunctionProfileRole.ISEMPTY THEN
        ERROR(Text11012000,FunctionProfileRole.TABLECAPTION);

      RoleGroupRole.SETRANGE("Role ID","Role ID");
      IF NOT RoleGroupRole.ISEMPTY THEN
        ERROR(Text11012000,RoleGroupRole.TABLECAPTION);

      RoleFieldAuthorization.SETRANGE("Role ID","Role ID");
      IF NOT RoleFieldAuthorization.ISEMPTY THEN
        ERROR(Text11012000,RoleFieldAuthorization.TABLECAPTION);
    END;

    LOCAL PROCEDURE DeleteUserRoleTree@1100525022(UserRole@1100525004 : Code[20]);
    VAR
      AccessControl@1100525001 : Record 2000000053;
      RoleFieldAuthorization@1100525006 : Record 11020568;
      Permission@1100525000 : Record 2000000005;
    BEGIN
      //**4PS
      IF (UserRole <> '') THEN BEGIN
        Permission.SETRANGE("Role ID",UserRole);
        Permission.DELETEALL;

        AccessControl.SETRANGE("Role ID",UserRole);
        AccessControl.DELETEALL;

        RoleFieldAuthorization.SETRANGE("Role ID",UserRole);
        RoleFieldAuthorization.DELETEALL;
      END;
    END;

    PROCEDURE Delete4PSStandardRoles@1100525001();
    VAR
      PermissionSet@1100525000 : Record 2000000004;
      Permission@1100525001 : Record 2000000005;
    BEGIN
      PermissionSet.SETRANGE("Standard 4PS",TRUE);
      IF PermissionSet.FINDSET THEN BEGIN
        REPEAT
          Permission.SETRANGE("Role ID",PermissionSet."Role ID");
          Permission.DELETEALL(FALSE);
          PermissionSet.DELETE(FALSE);               // Don't do the check dependency/DeleteUserRoleTRee...
        UNTIL PermissionSet.NEXT = 0;
      END;
    END;

    PROCEDURE Is4PSStandard@1100525007();
    BEGIN
      TESTFIELD("Standard 4PS",FALSE);
    END;

    BEGIN
    {
      4PS 20100420: Field authorisation
        Field added 11012000 "Role Type"
        Delete related tables only when no dependancies exist.
    }
    END.
  }
}

