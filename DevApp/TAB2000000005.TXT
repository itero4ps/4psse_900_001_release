OBJECT Table 2000000005 Permission
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.45480,4PS9.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               //**4PS.sn
               Is4PSStandardPermissionSet;
               UpdateFunctionProfileChanged;
               //**4PS.en
             END;

    OnModify=BEGIN
               //**4PS.sn
               Is4PSStandardPermissionSet;
               UpdateFunctionProfileChanged;
               //**4PS.en
             END;

    OnDelete=BEGIN
               //**4PS.sn
               Is4PSStandardPermissionSet;
               UpdateFunctionProfileChanged;
               //**4PS.en
             END;

    OnRename=BEGIN
               //**4PS.sn
               Is4PSStandardPermissionSet;
               UpdateFunctionProfileChanged;
               //**4PS.en
             END;

    CaptionML=ENU=Permission;
  }
  FIELDS
  {
    { 1   ;   ;Role ID             ;Code20        ;TableRelation="Permission Set"."Role ID";
                                                   CaptionML=ENU=Role ID }
    { 2   ;   ;Role Name           ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Permission Set".Name WHERE (Role ID=FIELD(Role ID)));
                                                   CaptionML=ENU=Role Name }
    { 3   ;   ;Object Type         ;Option        ;CaptionML=ENU=Object Type;
                                                   OptionCaptionML=ENU=Table Data,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query,System;
                                                   OptionString=Table Data,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query,System }
    { 4   ;   ;Object ID           ;Integer       ;TableRelation=IF (Object Type=CONST(Table Data)) AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Table))
                                                                 ELSE IF (Object Type=CONST(Table)) AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Table))
                                                                 ELSE IF (Object Type=CONST(Report)) AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Report))
                                                                 ELSE IF (Object Type=CONST(Codeunit)) AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Codeunit))
                                                                 ELSE IF (Object Type=CONST(XMLport)) AllObjWithCaption."Object ID" WHERE (Object Type=CONST(XMLport))
                                                                 ELSE IF (Object Type=CONST(MenuSuite)) AllObjWithCaption."Object ID" WHERE (Object Type=CONST(MenuSuite))
                                                                 ELSE IF (Object Type=CONST(Page)) AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Page))
                                                                 ELSE IF (Object Type=CONST(Query)) AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Query))
                                                                 ELSE IF (Object Type=CONST(System)) AllObjWithCaption."Object ID" WHERE (Object Type=CONST(System));
                                                   CaptionML=ENU=Object ID }
    { 5   ;   ;Object Name         ;Text249       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=FIELD(Object Type),
                                                                                                                Object ID=FIELD(Object ID)));
                                                   CaptionML=ENU=Object Name }
    { 6   ;   ;Read Permission     ;Option        ;InitValue=Yes;
                                                   CaptionML=ENU=Read Permission;
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect] }
    { 7   ;   ;Insert Permission   ;Option        ;InitValue=Yes;
                                                   CaptionML=ENU=Insert Permission;
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect] }
    { 8   ;   ;Modify Permission   ;Option        ;InitValue=Yes;
                                                   CaptionML=ENU=Modify Permission;
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect] }
    { 9   ;   ;Delete Permission   ;Option        ;InitValue=Yes;
                                                   CaptionML=ENU=Delete Permission;
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect] }
    { 10  ;   ;Execute Permission  ;Option        ;InitValue=Yes;
                                                   CaptionML=ENU=Execute Permission;
                                                   OptionCaptionML=ENU=" ,Yes,Indirect";
                                                   OptionString=[ ,Yes,Indirect] }
    { 11  ;   ;Security Filter     ;TableFilter   ;TableIDExpr="Object ID";
                                                   CaptionML=ENU=Security Filter }
  }
  KEYS
  {
    {    ;Role ID,Object Type,Object ID           ;Clustered=Yes }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Role ID,Role Name                        }
  }
  CODE
  {

    PROCEDURE Is4PSStandardPermissionSet@1100525007();
    VAR
      PermissionSet@1100530000 : Record 2000000004;
    BEGIN
      //**4PS
      IF "Role ID" <> '' THEN BEGIN
        PermissionSet.GET("Role ID");
        PermissionSet.TESTFIELD("Standard 4PS",FALSE);
      END;
    END;

    PROCEDURE UpdateFunctionProfileChanged@1210190000();
    VAR
      FunctionProfileRole@1210190000 : Record 11020572;
    BEGIN
      //**4PS
      FunctionProfileRole.UpdateFunctionProfileChanged(FunctionProfileRole.Type::Role,"Role ID");
    END;

    BEGIN
    END.
  }
}

