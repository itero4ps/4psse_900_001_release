OBJECT Table 222 Ship-to Address
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW18.00,4PS9.00,4PSFI;
  }
  PROPERTIES
  {
    DataCaptionFields=Customer No.,Name,Code;
    OnInsert=VAR
               lvShipToAddressRec@1100485000 : Record 222;
             BEGIN
               //**4PS.sn
               IF Code = '' THEN BEGIN
                 lvShipToAddressRec.SETRANGE("Customer No.","Customer No.");
                 IF lvShipToAddressRec.FINDLAST THEN
                   Code := INCSTR(lvShipToAddressRec.Code);
               //C027523.so
               //  ELSE
               //    Code := '001';
               //C027523.eo
               //C027523.sn
                 IF Code = '' THEN
                   Code := '001';
               //C027523.en

                 WHILE lvShipToAddressRec.GET("Customer No.", Code) DO
                   Code := INCSTR(Code);
               END;
               //**4PS.en

               Cust.GET("Customer No.");
               Name := Cust.Name;
               //**4PS.sn
               "Name 2" := Cust."Name 2" ;
               "Derived from Customer Card" := FALSE;
               "Base Calendar" := Cust."Base Calendar Code";
               CentrDataMngmt.EditShipToAddr(Rec,1,xRec);
               //**4PS.en
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;
               "Modified by" := USERID;

               //**4PS.sn
               CheckRelatedAddress;  //db, 18-12-07
               CentrDataMngmt.EditShipToAddr(Rec,2,xRec);
               //**4PS.en
             END;

    OnDelete=BEGIN
               //**4PS.sn
               CentrDataMngmt.EditShipToAddr(Rec,4,xRec);
               "Job Address Code" := '';
               UpdateJobLocationRelation();
               //**4PS.en
             END;

    OnRename=BEGIN
               "Last Date Modified" := TODAY;
             END;

    CaptionML=ENU=Address;
    LookupPageID=Page301;
  }
  FIELDS
  {
    { 1   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   CaptionML=ENU=Customer No.;
                                                   NotBlank=Yes }
    { 2   ;   ;Code                ;Code10        ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF (Code <> xRec.Code) AND (xRec.Code <> '') THEN
                                                                  CentrDataMngmt.EditShipToAddr(Rec,3,xRec);
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Code;
                                                   NotBlank=No }
    { 3   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 4   ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 5   ;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 6   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City }
    { 8   ;   ;Contact             ;Text50        ;CaptionML=ENU=Contact }
    { 9   ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 10  ;   ;Telex No.           ;Text30        ;CaptionML=ENU=Telex No. }
    { 30  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=ENU=Shipment Method Code }
    { 31  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=ENU=Shipping Agent Code }
    { 32  ;   ;Place of Export     ;Code20        ;CaptionML=ENU=Place of Export }
    { 35  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region Code }
    { 54  ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=No }
    { 83  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=ENU=Location Code }
    { 84  ;   ;Fax No.             ;Text30        ;CaptionML=ENU=Fax No. }
    { 85  ;   ;Telex Answer Back   ;Text20        ;CaptionML=ENU=Telex Answer Back }
    { 91  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code }
    { 92  ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 102 ;   ;E-Mail              ;Text80        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=E-Mail }
    { 103 ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=Home Page }
    { 108 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=ENU=Tax Area Code }
    { 109 ;   ;Tax Liable          ;Boolean       ;CaptionML=ENU=Tax Liable }
    { 5792;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   CaptionML=ENU=Shipping Agent Service Code }
    { 5900;   ;Service Zone Code   ;Code10        ;TableRelation="Service Zone";
                                                   CaptionML=ENU=Service Zone Code }
    { 11012000;;Shipping Address   ;Boolean       ;CaptionML=ENU=Shipping Address }
    { 11012010;;Project Address    ;Boolean       ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF (NOT "Project Address") THEN
                                                                  TESTFIELD("Job Address Code", '');
                                                              END;

                                                   CaptionML=ENU=Project Address }
    { 11012020;;Billing Address    ;Boolean       ;CaptionML=ENU=Billing Address }
    { 11012100;;Derived from Customer Card;Boolean;CaptionML=ENU=Derived from Customer Card }
    { 11012110;;Derived from Customer No.;Code20  ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                CheckDerivedFrom;  //**4PS
                                                              END;

                                                   CaptionML=ENU=Derived from Customer No. }
    { 11012120;;Derived from Address Code;Code10  ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Derived from Customer No.));
                                                   OnValidate=BEGIN
                                                                CheckDerivedFrom;  //**4PS
                                                              END;

                                                   CaptionML=ENU=Derived from Address Code }
    { 11012200;;Travel Distance    ;Decimal       ;CaptionML=ENU=Travel Distance;
                                                   MinValue=0 }
    { 11012210;;Travel Time        ;Decimal       ;CaptionML=ENU=Travel Time;
                                                   MinValue=0 }
    { 11012220;;Travel Cost        ;Decimal       ;CaptionML=ENU=Travel Cost;
                                                   MinValue=0 }
    { 11012230;;Travel Cost Code   ;Code10        ;TableRelation="Travel Cost Code";
                                                   CaptionML=ENU=Travel Cost Code }
    { 11012240;;Phone No. at Work  ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. at Work }
    { 11012250;;Mobile Phone No.   ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Mobile Phone No. }
    { 11012260;;Default Main Project;Code20       ;TableRelation=Job.No. WHERE (Single/Main/Sub Project=CONST(Main Project));
                                                   CaptionML=ENU=Default Main Project }
    { 11012270;;Estate Owner       ;Code20        ;TableRelation=Contact.No. WHERE (Type=CONST(Company));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Estate Owner Name");  //**4PS
                                                              END;

                                                   CaptionML=ENU=Estate Owner }
    { 11012280;;Estate Owner Name  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Estate Owner)));
                                                   CaptionML=ENU=Estate Owner Name;
                                                   Editable=No }
    { 11012290;;Estate No.         ;Code20        ;CaptionML=ENU=Estate No. }
    { 11012300;;Building           ;Text30        ;CaptionML=ENU=Building }
    { 11012310;;Floor              ;Text10        ;CaptionML=ENU=Floor }
    { 11012320;;Department         ;Text30        ;CaptionML=ENU=Department }
    { 11012330;;Room               ;Text10        ;CaptionML=ENU=Room }
    { 11012340;;Urgency Code       ;Code10        ;TableRelation="Urgency Codes by Customer".Urgency WHERE (Customer No.=FIELD(Customer No.));
                                                   CaptionML=ENU=Urgency Code }
    { 11012350;;Area Team          ;Text30        ;CaptionML=ENU=Area Team }
    { 11012360;;Phone No. Area Team;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. Area Team }
    { 11012370;;Base Calendar      ;Code10        ;TableRelation="Base Calendar";
                                                   CaptionML=ENU=Base Calendar }
    { 11012380;;Modified by        ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Modified by;
                                                   Editable=No }
    { 11012390;;Copy Contract Main Project;Boolean;CaptionML=ENU=Copy Contract Main Project }
    { 11012400;;Change address by Project;Boolean ;InitValue=Yes;
                                                   CaptionML=ENU=Change address by Project }
    { 11012750;;E-Mail (Invoices)  ;Text80        ;OnValidate=VAR
                                                                RecRef@1100528701 : RecordRef;
                                                                FldRef@1100528700 : FieldRef;
                                                              BEGIN
                                                                //**4PS.sn
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("E-Mail (Invoices)"));
                                                                ContactDataValidation.ValidateEmail(FldRef, "E-Mail (Invoices)");
                                                                //**4PS.en
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=E-Mail (Invoices);
                                                   Description=E-mail address for sending electronic invoices to [jhoek] }
    { 11012760;;E-Mail (Reminders) ;Text80        ;OnValidate=VAR
                                                                RecRef@1100528701 : RecordRef;
                                                                FldRef@1100528700 : FieldRef;
                                                              BEGIN
                                                                //**4PS.sn
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("E-Mail (Reminders)"));
                                                                ContactDataValidation.ValidateEmail(FldRef, "E-Mail (Reminders)");
                                                                //**4PS.en
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=E-Mail (Reminders) }
    { 11012770;;E-Mail (Shipments) ;Text80        ;OnValidate=VAR
                                                                RecRef@1100528701 : RecordRef;
                                                                FldRef@1100528700 : FieldRef;
                                                              BEGIN
                                                                //**4PS.sn
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("E-Mail (Shipments)"));
                                                                ContactDataValidation.ValidateEmail(FldRef, "E-Mail (Shipments)");
                                                                //**4PS.en
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=E-Mail (Shipments) }
    { 11012780;;E-Mail (Order Confirmations);Text80;
                                                   OnValidate=VAR
                                                                RecRef@1100528701 : RecordRef;
                                                                FldRef@1100528700 : FieldRef;
                                                              BEGIN
                                                                //**4PS.sn
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("E-Mail (Order Confirmations)"));
                                                                ContactDataValidation.ValidateEmail(FldRef, "E-Mail (Order Confirmations)");
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=E-Mail (Order Confirmations) }
    { 11012920;;Job Address Code   ;Code20        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Job Address Code" <> '') THEN BEGIN
                                                                  TESTFIELD("Project Address", TRUE);
                                                                  CheckJobLocationUnique();
                                                                END;
                                                                UpdateJobLocationRelation();
                                                              END;

                                                   CaptionML=ENU=Job Address Code }
    { 11250717;;EDI Code           ;Code10        ;CaptionML=ENU=EDI Code;
                                                   Description=4PSFI_FINVOICE }
    { 11250720;;VAT Registration No.;Text30       ;Description=4PSFI_FINVOICE }
  }
  KEYS
  {
    {    ;Customer No.,Code                       ;Clustered=Yes }
    {    ;Address                                  }
    {    ;City,Address                             }
    {    ;Job Address Code                         }
    {    ;Derived from Customer No.,Derived from Address Code }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Code,Name,Address,City,Post Code         }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=untitled';
      Cust@1001 : Record 18;
      PostCode@1002 : Record 225;
      Text001@1003 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      CentrDataMngmt@1210190002 : Codeunit 11012010;
      Text11012001@1100485000 : TextConst 'ENU=%1 ''%2'' is already present on Customer No. ''%3'', Address Code ''%4''.';
      Text11012002@1100525000 : TextConst 'ENU=c/o';
      ContactDataValidation@1100528700 : Codeunit 11012275;

    PROCEDURE Caption@1() : Text[150];
    BEGIN
      IF "Customer No." = '' THEN
        EXIT(Text000);
      Cust.GET("Customer No.");
      EXIT(STRSUBSTNO('%1 %2 %3 %4',Cust."No.",Cust.Name,Code,Name));
    END;

    PROCEDURE DisplayMap@8();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::"Ship-to Address",GETPOSITION)
      ELSE
        MESSAGE(Text001);
    END;

    PROCEDURE UpdateLocations@1100485000(lvCust@1100485002 : Code[20];lvCode@1100485005 : Code[20]);
    VAR
      ServLocRec@1100485000 : Record 11012801;
      ProjRec@1100485001 : Record 11072003;
      lvText000@1100485003 : TextConst 'ENU="Do you want to update related Project en Service Locations with changed Address Data ? "';
      AdrsRec@1100485004 : Record 222;
    BEGIN
      //**4PS
      IF NOT CONFIRM(lvText000, FALSE) THEN EXIT;

      AdrsRec.RESET;
      AdrsRec.SETRANGE("Customer No.", lvCust);
      IF lvCode <> '' THEN
        AdrsRec.SETRANGE(Code, lvCode);
      AdrsRec.SETRANGE("Project Address", TRUE);
      IF AdrsRec.FINDSET THEN BEGIN
        REPEAT
          IF ServLocRec.READPERMISSION THEN BEGIN
            ServLocRec.SETCURRENTKEY("Customer No.");
            ServLocRec.SETRANGE("Customer No.", AdrsRec."Customer No.");
            ServLocRec.SETRANGE("Address Code", AdrsRec.Code);
            IF ServLocRec.FINDSET(TRUE,FALSE) THEN BEGIN
              REPEAT
                ServLocRec.ValidateAddressData(2);
                ServLocRec.MODIFY;
              UNTIL ServLocRec.NEXT = 0;
            END;
          END;

          IF ProjRec.READPERMISSION THEN BEGIN
            ProjRec.SETCURRENTKEY("Bill-to Customer No.");
            ProjRec.SETRANGE("Bill-to Customer No.", AdrsRec."Customer No.");
            ProjRec.SETRANGE("Project Address Code", AdrsRec.Code);
            IF ProjRec.FINDSET(TRUE, FALSE) THEN BEGIN
              REPEAT
                ProjRec.Address := '';  //skip question
                ProjRec.UpdateProjectAddress;
                ProjRec.MODIFY;
              UNTIL ProjRec.NEXT = 0;
            END;
          END;
        UNTIL AdrsRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckJobLocationUnique@1100485001();
    VAR
      lvAddressRec@1100485000 : Record 222;
    BEGIN
      //**4PS
      IF ("Job Address Code" = '') THEN
        EXIT;

      lvAddressRec.SETCURRENTKEY("Job Address Code");
      lvAddressRec.SETRANGE("Job Address Code", "Job Address Code");
      IF lvAddressRec.FINDSET THEN BEGIN
        REPEAT
          IF (lvAddressRec."Customer No." <> "Customer No.") OR (lvAddressRec.Code <> Code) THEN
            ERROR(Text11012001,
              FIELDCAPTION("Job Address Code"),"Job Address Code",lvAddressRec."Customer No.",lvAddressRec.Code);
        UNTIL lvAddressRec.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateJobLocationRelation@1100485002();
    VAR
      lvJobLocRec@1100485000 : Record 11020249;
    BEGIN
      //**4PS
      lvJobLocRec.SETCURRENTKEY("Customer No.", "Address Code");
      lvJobLocRec.SETRANGE("Customer No.", "Customer No.");
      lvJobLocRec.SETRANGE("Address Code", Code);
      IF lvJobLocRec.FINDFIRST THEN BEGIN
        IF ("Job Address Code" = '') OR (NOT "Project Address") THEN
          lvJobLocRec.DELETE
        ELSE BEGIN
          IF (lvJobLocRec."Job Location Code" <> "Job Address Code") THEN
            lvJobLocRec.RENAME("Job Address Code");
        END;
      END ELSE BEGIN
        IF ("Job Address Code" <> '') AND ("Project Address") THEN BEGIN
          lvJobLocRec.INIT;
          lvJobLocRec."Job Location Code" := "Job Address Code";
          lvJobLocRec."Customer No." := "Customer No.";
          lvJobLocRec."Address Code" := Code;
          lvJobLocRec.INSERT;
        END;
      END;
    END;

    PROCEDURE CheckAvailableAddress@1100485018(lvCust@1100485003 : Code[20];lvType@1100485002 : Integer) : Text[30];
    VAR
      AdrsRec@1100485001 : Record 222;
      NumAdrs@1100485000 : Integer;
    BEGIN
      //**4PS
      AdrsRec.RESET;
      AdrsRec.SETRANGE("Customer No.", lvCust);
      IF lvType = 1 THEN
        AdrsRec.SETRANGE("Shipping Address", TRUE);
      IF lvType = 2 THEN
        AdrsRec.SETRANGE("Project Address", TRUE);
      IF lvType = 3 THEN
        AdrsRec.SETRANGE("Billing Address", TRUE);
      NumAdrs := AdrsRec.COUNT;  //db, 20-09-07
      IF NumAdrs = 0 THEN
        EXIT('')
      ELSE
        EXIT(STRSUBSTNO('[%1]', NumAdrs));
    END;

    PROCEDURE GetRelatedAddress@1100485003(VAR gvAdrsRec@1100485002 : Record 222;lvRead@1100485004 : Boolean;lvCustRec@1100485001 : Record 18;lvAdrsRec@1100485000 : Record 222);
    VAR
      lvText001@1100485003 : TextConst 'ENU=Recursion';
      lvCustRec2@1100485005 : Record 18;
    BEGIN
      //**4PS
      //db, 18-12-07: purpose is to save a project address of a customer (read: owner Service Location)
      //that should act as invoice address of the customer (read: Contract Owner) to define Name/Address/City on invoice

      WITH gvAdrsRec DO BEGIN
        IF ("Derived from Customer No." = '') AND ("Derived from Address Code" = '') THEN EXIT;

        IF ("Derived from Address Code" <> '') THEN BEGIN
          IF lvRead = TRUE THEN BEGIN
            IF ("Derived from Customer No." = "Customer No.") AND ("Derived from Address Code" = Code) THEN
              ERROR(lvText001);
            IF NOT lvAdrsRec.GET("Derived from Customer No.", "Derived from Address Code") THEN
              EXIT;
          END;
          Name := lvAdrsRec.Name;
          "Name 2" := lvAdrsRec."Name 2";
          Address := lvAdrsRec.Address;
          "Address 2" := lvAdrsRec."Address 2";
           City := lvAdrsRec.City;
          Contact := lvAdrsRec.Contact;
          County := lvAdrsRec.County;
          "Country/Region Code":= lvAdrsRec."Country/Region Code";
          "Post Code" := lvAdrsRec."Post Code";
          "Phone No." := lvAdrsRec."Phone No.";
          "Mobile Phone No." := lvAdrsRec."Mobile Phone No.";
          "Telex Answer Back" := lvAdrsRec."Telex Answer Back";
         "Telex No." := lvAdrsRec."Telex No.";
          "Fax No." := lvAdrsRec."Fax No.";
          "E-Mail" := lvAdrsRec."E-Mail";
          "Home Page" := lvAdrsRec."Home Page";
          IF ("Derived from Customer No." <> "Customer No.") THEN BEGIN  //db, 19-12-07
            IF lvCustRec2.GET("Customer No.") THEN BEGIN
              Name := lvCustRec2.Name;
              "Name 2" := Text11012002 + ' ' + COPYSTR(lvAdrsRec.Name, 1, 45);
            END;
          END;
        END ELSE BEGIN
          IF lvRead = TRUE THEN BEGIN
            IF NOT lvCustRec.GET("Derived from Customer No.") THEN
              EXIT;
          END;
          Name := lvCustRec.Name;
          "Name 2" := lvCustRec."Name 2";
          Address := lvCustRec.Address;
          "Address 2" := lvCustRec."Address 2";
          City := lvCustRec.City;
          Contact := lvCustRec.Contact;
          County := lvCustRec.County;
          "Country/Region Code":= lvCustRec."Country/Region Code";
          "Post Code" := lvCustRec."Post Code";
          "Phone No." := lvCustRec."Phone No.";
          "Mobile Phone No." := lvCustRec."Mobile Phone No.";
          "Telex Answer Back" := lvCustRec."Telex Answer Back";
          "Telex No." := lvCustRec."Telex No.";
          "Fax No." := lvCustRec."Fax No.";
          "E-Mail" := lvCustRec."E-Mail";
          "Home Page" := lvCustRec."Home Page";
          IF ("Derived from Customer No." <> "Customer No.") THEN BEGIN  //db, 19-12-07
            IF lvCustRec2.GET("Customer No.") THEN BEGIN
              Name := lvCustRec2.Name;
              "Name 2" := 'p/a ' + COPYSTR(lvCustRec.Name, 1, 45);
            END;
          END;
        END;
      END;
    END;

    PROCEDURE UpdateRelatedAddress@1100485004(gvCustRec@1100485005 : Record 18;gvAdrsRec@1100485004 : Record 222);
    VAR
      lvAdrsRec@1100485000 : Record 222;
    BEGIN
      //**4PS
      lvAdrsRec.RESET;
      lvAdrsRec.SETCURRENTKEY("Derived from Customer No.", "Derived from Address Code");
      IF gvAdrsRec.Code <> '' THEN BEGIN
        lvAdrsRec.SETRANGE("Derived from Customer No.", gvAdrsRec."Customer No.");
        lvAdrsRec.SETRANGE("Derived from Address Code", gvAdrsRec.Code);
      END ELSE BEGIN
        lvAdrsRec.SETRANGE("Derived from Customer No.", gvCustRec."No.");
        lvAdrsRec.SETFILTER("Derived from Address Code", '%1', '')
      END;
      IF lvAdrsRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          GetRelatedAddress(lvAdrsRec,FALSE,gvCustRec,gvAdrsRec);
          lvAdrsRec.MODIFY;
        UNTIL lvAdrsRec.NEXT = 0;
      END;

      IF gvAdrsRec.Code = '' THEN BEGIN
        lvAdrsRec.RESET;
        lvAdrsRec.SETCURRENTKEY("Customer No.", Code);
        lvAdrsRec.SETRANGE("Customer No.", gvCustRec."No.");
        lvAdrsRec.SETFILTER("Derived from Customer No.", '<>%1', '');
        IF lvAdrsRec.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            lvAdrsRec.Name := gvCustRec.Name;  //db, 31-03-08: M11439
            lvAdrsRec.MODIFY;
          UNTIL lvAdrsRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CheckDerivedFrom@1100485005();
    VAR
      lvCustRec@1100485001 : Record 18;
      lvAdrsRec@1100485000 : Record 222;
    BEGIN
      //**4PS
      GetRelatedAddress(Rec,TRUE,lvCustRec,lvAdrsRec);
    END;

    PROCEDURE CheckRelatedAddress@1100485006();
    VAR
      lvCustRec@1100485001 : Record 18;
    BEGIN
      //**4PS
      UpdateRelatedAddress(lvCustRec,Rec);
    END;

    PROCEDURE TravelTimeUnit@1100525000() : Code[10];
    VAR
      ProjSetup@1100525000 : Record 315;
      DimValRec@1100525002 : Record 349;
      DimMgt@1100525001 : Codeunit 408;
    BEGIN
      //**4PS
      ProjSetup.GET;
      DimMgt.GetDimValueRec(2,ProjSetup."Cost Object Travel Time",DimValRec,FALSE,'');
      EXIT(DimValRec."Unit of Measure");
    END;

    PROCEDURE TravelDistanceUnit@1100525001() : Code[10];
    VAR
      ProjSetup@1100525000 : Record 315;
      DimValRec@1100525002 : Record 349;
      DimMgt@1100525001 : Codeunit 408;
    BEGIN
      //**4PS
      ProjSetup.GET;
      DimMgt.GetDimValueRec(2,ProjSetup."Cost Object Travel Distance",DimValRec,FALSE,'');
      EXIT(DimValRec."Unit of Measure");
    END;

    BEGIN
    {
      14-04-2010 - Peter S: NotBlank set to No. to enable autonumbering in the OnInsert Trigger
    }
    END.
  }
}

