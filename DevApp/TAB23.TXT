OBJECT Table 23 Vendor
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.45480,NAVSE9.FI9.DK9.NO9,4PS9.00,4PSSE,EXF400001;
  }
  PROPERTIES
  {
    Permissions=TableData 25=r,
                TableData 288=rm;
    DataCaptionFields=No.,Name;
    OnInsert=VAR
               lvCreateFromTemplate@1100525001 : Boolean;
               lvVendorTemplateRec@1100525000 : Record 11020240;
             BEGIN
               //**4PS.sn
               "Last Date Modified" := TODAY;
               "Modified by" := USERID;
               IF ("No. Series" = '') OR InsertFromContact THEN //C015345.c
                 GetVendorTemplate(lvCreateFromTemplate, lvVendorTemplateRec);
               //**4PS.en

               IF "No." = '' THEN BEGIN
                 PurchSetup.GET;
                 PurchSetup.TESTFIELD("Vendor Nos.");
                 NoSeriesMgt.InitSeries(PurchSetup."Vendor Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               //**4PS.sn
               IF lvCreateFromTemplate THEN BEGIN
                 CreateVendorFromTemplate(lvVendorTemplateRec);
                 IF lvVendorTemplateRec."Create Contact" = lvVendorTemplateRec."Create Contact"::Manual THEN
                   InsertFromContact := TRUE;  //skip generating contact
               END;

               InitRecord(COMPANYNAME, lvCreateFromTemplate);
               //**4PS.en

               IF "Invoice Disc. Code" = '' THEN
                 "Invoice Disc. Code" := "No.";

               //IF NOT InsertFromContact THEN       //**4PS.o
               //  UpdateContFromVend.OnInsert(Rec); //**4PS.o

               //**4PS.sn
               IF NOT InsertFromContact THEN BEGIN
                 IF lvCreateFromTemplate THEN
                   UpdateContFromVend.OnInsert2(Rec, lvVendorTemplateRec."Create Contact as")
                 ELSE
                   UpdateContFromVend.OnInsert(Rec);
               END;
               //**4PS.en

               DimMgt.UpdateDefaultDim(
                 DATABASE::Vendor,"No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");


               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05

               //**4PS.sn
               InsertCentralManagement;
               //**4PS.en
             END;

    OnModify=VAR
               OldRecRef@1100528700 : RecordRef;
               ExceptionFields@1210190000 : ARRAY [20] OF Integer;
             BEGIN
               "Last Date Modified" := TODAY;
               "Modified by" := USERID; //**4PS.n

               // ExFlow
               IF ExFlowSetup.GET THEN
                 ExfVendIDMgt.UpdateVendorIDFromVend(Rec,FALSE);
               // ExFlow

               IF (Name <> xRec.Name) OR
                  ("Search Name" <> xRec."Search Name") OR
                  ("Name 2" <> xRec."Name 2") OR
                  (Address <> xRec.Address) OR
                  ("Address 2" <> xRec."Address 2") OR
                  (City <> xRec.City) OR
                  ("Phone No." <> xRec."Phone No.") OR
                  ("Telex No." <> xRec."Telex No.") OR
                  ("Territory Code" <> xRec."Territory Code") OR
                  ("Currency Code" <> xRec."Currency Code") OR
                  ("Language Code" <> xRec."Language Code") OR
                  ("Purchaser Code" <> xRec."Purchaser Code") OR
                  ("Country/Region Code" <> xRec."Country/Region Code") OR
                  ("Fax No." <> xRec."Fax No.") OR
                  ("Telex Answer Back" <> xRec."Telex Answer Back") OR
                  ("VAT Registration No." <> xRec."VAT Registration No.") OR
                  ("Post Code" <> xRec."Post Code") OR
                  (County <> xRec.County) OR
                  ("E-Mail" <> xRec."E-Mail") OR
                  // PEB0105
               //   ("Registration No." <> xRec."Registration No.") OR
                  // 0105
                  ("Home Page" <> xRec."Home Page")
                  //**4PS.sn
                  OR
                  ("Phone No. 2" <> xRec."Phone No. 2") OR
                  ("Mobile Phone No." <> xRec."Mobile Phone No.") OR
                  ("COC Registration No." <> xRec."COC Registration No.") OR
                  ("Due Date COC Statement" <> xRec."Due Date COC Statement") OR
                  ("EORI No." <> xRec."EORI No.")
                  //**4PS.en
               THEN BEGIN

                 //**4PS.sn
                 RecRef.GETTABLE(Rec);
                 OldRecRef.GETTABLE(xRec);
                 ExceptionFields[1] := 54;
                 ExceptionFields[2] := 11012941;
                 IF NOT CentrDataMgt.ChangeOfFieldsIsAllowed(RecRef, OldRecRef, ExceptionFields) THEN
                   ERROR(Text11012004, TABLECAPTION, "No.", CentrDataMgt.CentralCompany);
                 //**4PS.en

                 MODIFY;
                   UpdateContFromVend.OnModify(Rec);
                   IF NOT FIND THEN BEGIN
                     RESET;
                     IF FIND THEN;
                   END;
               END;


               //**4PS.sn
               CentrDataMgt.EditVendor(Rec,2,xRec);
               UpdateResource(1, xRec, Rec); //1=Modify
               //**4PS.en
             END;

    OnDelete=VAR
               ItemVendor@1000 : Record 99;
               PurchPrice@1001 : Record 7012;
               PurchLineDiscount@1002 : Record 7014;
               PurchPrepmtPct@1003 : Record 460;
               SocialListeningSearchTopic@1005 : Record 871;
               CustomReportSelection@1006 : Record 9657;
               VATRegistrationLogMgt@1004 : Codeunit 249;
               lvPaymentAgreeRec@1210190000 : Record 11012028;
               lvVendAssRec@1210190001 : Record 11012292;
               lvVendAssLineRec@1210190002 : Record 11012293;
               lvVendAssCritRec@1210190003 : Record 11012296;
               VendorCertificate@1100525000 : Record 11020413;
               lvSubcontPortVendor@1100528100 : Record 11126400;
               EmployeePerVendor@1100409000 : Record 11020693;
               VendorGS1Login@1100525001 : Record 11012132;
             BEGIN
               MoveEntries.MoveVendorEntries(Rec);

               CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Vendor);
               CommentLine.SETRANGE("No.","No.");
               CommentLine.DELETEALL;

               VendBankAcc.SETRANGE("Vendor No.","No.");
               VendBankAcc.DELETEALL;

               OrderAddr.SETRANGE("Vendor No.","No.");
               //OrderAddr.DELETEALL;      //**4PS02.o
               OrderAddr.DELETEALL(TRUE);  //**4PS02.n

               ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
               ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Vendor);
               ItemCrossReference.SETRANGE("Cross-Reference Type No.","No.");
               ItemCrossReference.DELETEALL;

               PurchOrderLine.SETCURRENTKEY("Document Type","Pay-to Vendor No.");
               PurchOrderLine.SETFILTER(
                 "Document Type",'%1|%2',
                 PurchOrderLine."Document Type"::Order,
                 PurchOrderLine."Document Type"::"Return Order");
               PurchOrderLine.SETRANGE("Pay-to Vendor No.","No.");
               IF PurchOrderLine.FINDFIRST THEN
                 ERROR(
                   Text000,
                   TABLECAPTION,"No.",
                   PurchOrderLine."Document Type");

               PurchOrderLine.SETRANGE("Pay-to Vendor No.");
               PurchOrderLine.SETRANGE("Buy-from Vendor No.","No.");
               IF PurchOrderLine.FINDFIRST THEN
                 ERROR(
                   Text000,
                   TABLECAPTION,"No.");

               UpdateContFromVend.OnDelete(Rec);

               DimMgt.DeleteDefaultDim(DATABASE::Vendor,"No.");

               ServiceItem.SETRANGE("Vendor No.","No.");
               ServiceItem.MODIFYALL("Vendor No.",'');

               ItemVendor.SETRANGE("Vendor No.","No.");
               ItemVendor.DELETEALL(TRUE);

               IF NOT SocialListeningSearchTopic.ISEMPTY THEN BEGIN
                 SocialListeningSearchTopic.FindSearchTopic(SocialListeningSearchTopic."Source Type"::Vendor,"No.");
                 SocialListeningSearchTopic.DELETEALL;
               END;

               PurchPrice.SETCURRENTKEY("Vendor No.");
               PurchPrice.SETRANGE("Vendor No.","No.");
               PurchPrice.DELETEALL(TRUE);

               PurchLineDiscount.SETCURRENTKEY("Vendor No.");
               PurchLineDiscount.SETRANGE("Vendor No.","No.");
               PurchLineDiscount.DELETEALL(TRUE);

               CustomReportSelection.SETRANGE("Source Type",DATABASE::Vendor);
               CustomReportSelection.SETRANGE("Source No.","No.");
               CustomReportSelection.DELETEALL;

               PurchPrepmtPct.SETCURRENTKEY("Vendor No.");
               PurchPrepmtPct.SETRANGE("Vendor No.","No.");
               PurchPrepmtPct.DELETEALL(TRUE);

               VATRegistrationLogMgt.DeleteVendorLog(Rec);

               //**4PS.sn
               VendorWKACheck.RESET;
               VendorWKACheck.SETRANGE("Vendor No.", "No.");
               VendorWKACheck.DELETEALL(TRUE);

               VendorCertificate.SETRANGE("Vendor No.", "No.");
               VendorCertificate.DELETEALL;

               ExchangeMOB('D', COMPANYNAME);

               CentrDataMgt.RemoveVendorUpdateProspect(Rec);
               CentrDataMgt.RemoveVendor(Rec);

               lvPaymentAgreeRec.SETCURRENTKEY("Sub Contractor");
               lvPaymentAgreeRec.SETRANGE("Sub Contractor","No.");
               IF lvPaymentAgreeRec.FIND('-') THEN
                 ERROR(Text11012001, TABLECAPTION, "No.", lvPaymentAgreeRec.TABLECAPTION, lvPaymentAgreeRec.Code);

               lvVendAssLineRec.SETCURRENTKEY("Vendor No.");
               lvVendAssLineRec.SETRANGE("Vendor No.", "No.");
               lvVendAssLineRec.DELETEALL;

               lvVendAssRec.SETCURRENTKEY("Vendor No.");
               lvVendAssRec.SETRANGE("Vendor No.", "No.");
               lvVendAssRec.DELETEALL;

               lvVendAssCritRec.SETRANGE("Vendor No.", "No.");
               lvVendAssCritRec.DELETEALL;

               lvSubcontPortVendor.SETRANGE("Vendor No.", "No.");
               lvSubcontPortVendor.DELETEALL(TRUE);

               EmployeePerVendor.SETRANGE("Vendor No.", "No.");
               EmployeePerVendor.DELETEALL;

               UpdateResource(2, xRec, Rec); // 2=Delete

               VendorGS1Login.SETRANGE("Vendor No.", "No.");
               VendorGS1Login.DELETEALL(TRUE);
               //**4PS.en
             END;

    OnRename=BEGIN
               "Last Date Modified" := TODAY;
               "Modified by" := USERID;
               //**4PS.sn
               UpdateResource(3, xRec, Rec); // 3=Rename

               IF NOT SkipCentralDataMgtInOnRename THEN BEGIN
                 ExchangeMOB('R', COMPANYNAME);
                 CentrDataMgt.EditVendor(Rec, 3, xRec);
               END;
               //**4PS.en
             END;

    CaptionML=ENU=Vendor;
    LookupPageID=Page27;
    DrillDownPageID=Page27;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  NoSeriesMgt.TestManual(PurchSetup."Vendor Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                                //IF "Invoice Disc. Code" = '' THEN //**4PS.o
                                                                  "Invoice Disc. Code" := "No.";
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                IF ("Search Name" = UPPERCASE(xRec.Name)) OR ("Search Name" = '') THEN
                                                                  "Search Name" := Name;
                                                              END;

                                                   CaptionML=ENU=Name }
    { 3   ;   ;Search Name         ;Code50        ;CaptionML=ENU=Search Name }
    { 4   ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 5   ;   ;Address             ;Text50        ;OnValidate=BEGIN
                                                                CheckPostCodeHouseNo; //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Address }
    { 6   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City }
    { 8   ;   ;Contact             ;Text50        ;OnValidate=BEGIN
                                                                IF RMSetup.GET THEN
                                                                  IF RMSetup."Bus. Rel. Code for Vendors" <> '' THEN
                                                                    IF (xRec.Contact = '') AND (xRec."Primary Contact No." = '') THEN BEGIN
                                                                      MODIFY;
                                                                      UpdateContFromVend.OnModify(Rec);
                                                                      UpdateContFromVend.InsertNewContactPerson(Rec,FALSE);
                                                                      MODIFY(TRUE);
                                                                    END
                                                              END;

                                                   CaptionML=ENU=Contact }
    { 9   ;   ;Phone No.           ;Text30        ;OnValidate=BEGIN
                                                                PhoneNumberFormatting.ValidatePhoneNumber("Country/Region Code", "Phone No."); //**4PS.n
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 10  ;   ;Telex No.           ;Text20        ;CaptionML=ENU=Telex No. }
    { 14  ;   ;Our Account No.     ;Text20        ;CaptionML=ENU=Our Account No. }
    { 15  ;   ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   CaptionML=ENU=Territory Code }
    { 16  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 17  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 19  ;   ;Budgeted Amount     ;Decimal       ;CaptionML=ENU=Budgeted Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 21  ;   ;Vendor Posting Group;Code10        ;TableRelation="Vendor Posting Group";
                                                   CaptionML=ENU=Vendor Posting Group }
    { 22  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 24  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 26  ;   ;Statistics Group    ;Integer       ;CaptionML=ENU=Statistics Group }
    { 27  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   CaptionML=ENU=Payment Terms Code }
    { 28  ;   ;Fin. Charge Terms Code;Code10      ;TableRelation="Finance Charge Terms";
                                                   CaptionML=ENU=Fin. Charge Terms Code }
    { 29  ;   ;Purchaser Code      ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Purchaser Code }
    { 30  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=ENU=Shipment Method Code }
    { 31  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   CaptionML=ENU=Shipping Agent Code }
    { 33  ;   ;Invoice Disc. Code  ;Code20        ;TableRelation=Vendor;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Invoice Disc. Code }
    { 35  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region Code }
    { 38  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Vendor),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 39  ;   ;Blocked             ;Option        ;OnValidate=BEGIN
                                                                //**4PS.n
                                                                IF Blocked = Blocked::All THEN BEGIN
                                                                  "Block Purchase Quote" := TRUE;
                                                                  "Block Purchase Order" := TRUE;
                                                                  "Block Autom. Payment Proposal" := TRUE;
                                                                END ELSE BEGIN
                                                                  IF Blocked <> xRec.Blocked THEN BEGIN
                                                                    "Block Purchase Quote" := FALSE;
                                                                    "Block Purchase Order" := FALSE;
                                                                    "Block Autom. Payment Proposal" := FALSE;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Blocked;
                                                   OptionCaptionML=ENU=" ,Payment,All";
                                                   OptionString=[ ,Payment,All] }
    { 45  ;   ;Pay-to Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Pay-to Vendor No. }
    { 46  ;   ;Priority            ;Integer       ;CaptionML=ENU=Priority }
    { 47  ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   CaptionML=ENU=Payment Method Code }
    { 54  ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=No }
    { 55  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 56  ;   ;Global Dimension 1 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Global Dimension 1 Filter;
                                                   CaptionClass='1,3,1' }
    { 57  ;   ;Global Dimension 2 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Global Dimension 2 Filter;
                                                   CaptionClass='1,3,2' }
    { 58  ;   ;Balance             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Vendor No.=FIELD(No.),
                                                                                                                Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Balance;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 59  ;   ;Balance (LCY)       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor No.=FIELD(No.),
                                                                                                                        Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                        Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                        Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Balance (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 60  ;   ;Net Change          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Vendor No.=FIELD(No.),
                                                                                                                Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                Posting Date=FIELD(Date Filter),
                                                                                                                Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Net Change;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Net Change (LCY)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor No.=FIELD(No.),
                                                                                                                        Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                        Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                        Posting Date=FIELD(Date Filter),
                                                                                                                        Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Net Change (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 62  ;   ;Purchases (LCY)     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Vendor Ledger Entry"."Purchase (LCY)" WHERE (Vendor No.=FIELD(No.),
                                                                                                                  Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                  Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                  Posting Date=FIELD(Date Filter),
                                                                                                                  Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Purchases (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 64  ;   ;Inv. Discounts (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Vendor Ledger Entry"."Inv. Discount (LCY)" WHERE (Vendor No.=FIELD(No.),
                                                                                                                       Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                       Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Inv. Discounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 65  ;   ;Pmt. Discounts (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(Payment Discount..'Payment Discount (VAT Adjustment)'),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Pmt. Discounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 66  ;   ;Balance Due         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Vendor No.=FIELD(No.),
                                                                                                                Posting Date=FIELD(UPPERLIMIT(Date Filter)),
                                                                                                                Initial Entry Due Date=FIELD(Date Filter),
                                                                                                                Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Balance Due;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 67  ;   ;Balance Due (LCY)   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor No.=FIELD(No.),
                                                                                                                        Posting Date=FIELD(UPPERLIMIT(Date Filter)),
                                                                                                                        Initial Entry Due Date=FIELD(Date Filter),
                                                                                                                        Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                        Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                        Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Balance Due (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 69  ;   ;Payments            ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Payment),
                                                                                                               Entry Type=CONST(Initial Entry),
                                                                                                               Vendor No.=FIELD(No.),
                                                                                                               Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                               Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                               Posting Date=FIELD(Date Filter),
                                                                                                               Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Payments;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 70  ;   ;Invoice Amounts     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Invoice),
                                                                                                                Entry Type=CONST(Initial Entry),
                                                                                                                Vendor No.=FIELD(No.),
                                                                                                                Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                Posting Date=FIELD(Date Filter),
                                                                                                                Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Invoice Amounts;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 71  ;   ;Cr. Memo Amounts    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Credit Memo),
                                                                                                               Entry Type=CONST(Initial Entry),
                                                                                                               Vendor No.=FIELD(No.),
                                                                                                               Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                               Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                               Posting Date=FIELD(Date Filter),
                                                                                                               Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Cr. Memo Amounts;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 72  ;   ;Finance Charge Memo Amounts;Decimal;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Finance Charge Memo),
                                                                                                                Entry Type=CONST(Initial Entry),
                                                                                                                Vendor No.=FIELD(No.),
                                                                                                                Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                Posting Date=FIELD(Date Filter),
                                                                                                                Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Finance Charge Memo Amounts;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 74  ;   ;Payments (LCY)      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Payment),
                                                                                                                       Entry Type=CONST(Initial Entry),
                                                                                                                       Vendor No.=FIELD(No.),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Payments (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 75  ;   ;Inv. Amounts (LCY)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Invoice),
                                                                                                                        Entry Type=CONST(Initial Entry),
                                                                                                                        Vendor No.=FIELD(No.),
                                                                                                                        Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                        Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                        Posting Date=FIELD(Date Filter),
                                                                                                                        Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Inv. Amounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 76  ;   ;Cr. Memo Amounts (LCY);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Credit Memo),
                                                                                                                       Entry Type=CONST(Initial Entry),
                                                                                                                       Vendor No.=FIELD(No.),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Cr. Memo Amounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 77  ;   ;Fin. Charge Memo Amounts (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Finance Charge Memo),
                                                                                                                        Entry Type=CONST(Initial Entry),
                                                                                                                        Vendor No.=FIELD(No.),
                                                                                                                        Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                        Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                        Posting Date=FIELD(Date Filter),
                                                                                                                        Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Fin. Charge Memo Amounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 78  ;   ;Outstanding Orders  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Outstanding Amount" WHERE (Document Type=CONST(Order),
                                                                                                               Pay-to Vendor No.=FIELD(No.),
                                                                                                               Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                               Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                               Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Outstanding Orders;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 79  ;   ;Amt. Rcd. Not Invoiced;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Amt. Rcd. Not Invoiced" WHERE (Document Type=CONST(Order),
                                                                                                                   Pay-to Vendor No.=FIELD(No.),
                                                                                                                   Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                   Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                   Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Amt. Rcd. Not Invoiced;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 80  ;   ;Application Method  ;Option        ;CaptionML=ENU=Application Method;
                                                   OptionCaptionML=ENU=Manual,Apply to Oldest;
                                                   OptionString=Manual,Apply to Oldest }
    { 82  ;   ;Prices Including VAT;Boolean       ;OnValidate=VAR
                                                                PurchPrice@1000 : Record 7012;
                                                                Item@1001 : Record 27;
                                                                VATPostingSetup@1002 : Record 325;
                                                                Currency@1003 : Record 4;
                                                              BEGIN
                                                                PurchPrice.SETCURRENTKEY("Vendor No.");
                                                                PurchPrice.SETRANGE("Vendor No.","No.");
                                                                IF PurchPrice.FIND('-') THEN BEGIN
                                                                  IF VATPostingSetup.GET('','') THEN;
                                                                  IF CONFIRM(
                                                                       STRSUBSTNO(
                                                                         Text002,
                                                                         FIELDCAPTION("Prices Including VAT"),"Prices Including VAT",PurchPrice.TABLECAPTION),TRUE)
                                                                  THEN
                                                                    REPEAT
                                                                      IF PurchPrice."Item No." <> Item."No." THEN
                                                                        Item.GET(PurchPrice."Item No.");
                                                                      IF ("VAT Bus. Posting Group" <> VATPostingSetup."VAT Bus. Posting Group") OR
                                                                         (Item."VAT Prod. Posting Group" <> VATPostingSetup."VAT Prod. Posting Group")
                                                                      THEN
                                                                        VATPostingSetup.GET("VAT Bus. Posting Group",Item."VAT Prod. Posting Group");
                                                                      IF PurchPrice."Currency Code" = '' THEN
                                                                        Currency.InitRoundingPrecision
                                                                      ELSE
                                                                        IF PurchPrice."Currency Code" <> Currency.Code THEN
                                                                          Currency.GET(PurchPrice."Currency Code");
                                                                      IF VATPostingSetup."VAT %" <> 0 THEN BEGIN
                                                                        IF "Prices Including VAT" THEN
                                                                          PurchPrice."Direct Unit Cost" :=
                                                                            ROUND(
                                                                              PurchPrice."Direct Unit Cost" * (1 + VATPostingSetup."VAT %" / 100),
                                                                              Currency."Unit-Amount Rounding Precision")
                                                                        ELSE
                                                                          PurchPrice."Direct Unit Cost" :=
                                                                            ROUND(
                                                                              PurchPrice."Direct Unit Cost" / (1 + VATPostingSetup."VAT %" / 100),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                        PurchPrice.MODIFY;
                                                                      END;
                                                                    UNTIL PurchPrice.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Prices Including VAT }
    { 84  ;   ;Fax No.             ;Text30        ;OnValidate=BEGIN
                                                                PhoneNumberFormatting.ValidatePhoneNumber("Country/Region Code", "Fax No."); //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Fax No. }
    { 85  ;   ;Telex Answer Back   ;Text20        ;CaptionML=ENU=Telex Answer Back }
    { 86  ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                VATRegNoFormat@1000 : Record 381;
                                                                VATRegistrationLogMgt@1002 : Codeunit 249;
                                                              BEGIN
                                                                IF VATRegNoFormat.Test("VAT Registration No.","Country/Region Code","No.",DATABASE::Vendor) THEN
                                                                  IF "VAT Registration No." <> xRec."VAT Registration No." THEN
                                                                    VATRegistrationLogMgt.LogVendor(Rec);
                                                              END;

                                                   CaptionML=ENU=VAT Registration No. }
    { 88  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 89  ;   ;Picture             ;BLOB          ;CaptionML=ENU=Picture;
                                                   SubType=Bitmap }
    { 90  ;   ;GLN                 ;Code13        ;OnValidate=VAR
                                                                GLNCalculator@1000 : Codeunit 1607;
                                                              BEGIN
                                                                IF GLN <> '' THEN
                                                                  GLNCalculator.AssertValidCheckDigit13(GLN);
                                                              END;

                                                   CaptionML=ENU=GLN;
                                                   Numeric=Yes }
    { 91  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                CheckPostCodeHouseNo; //**4PS.n
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code }
    { 92  ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 97  ;   ;Debit Amount        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Debit Amount" WHERE (Vendor No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(<>Application),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Debit Amount;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 98  ;   ;Credit Amount       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Credit Amount" WHERE (Vendor No.=FIELD(No.),
                                                                                                                        Entry Type=FILTER(<>Application),
                                                                                                                        Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                        Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                        Posting Date=FIELD(Date Filter),
                                                                                                                        Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Credit Amount;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 99  ;   ;Debit Amount (LCY)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Debit Amount (LCY)" WHERE (Vendor No.=FIELD(No.),
                                                                                                                             Entry Type=FILTER(<>Application),
                                                                                                                             Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                             Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                             Posting Date=FIELD(Date Filter),
                                                                                                                             Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Debit Amount (LCY);
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 100 ;   ;Credit Amount (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Credit Amount (LCY)" WHERE (Vendor No.=FIELD(No.),
                                                                                                                              Entry Type=FILTER(<>Application),
                                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Credit Amount (LCY);
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 102 ;   ;E-Mail              ;Text80        ;OnValidate=VAR
                                                                RecRef@1100528701 : RecordRef;
                                                                FldRef@1100528700 : FieldRef;
                                                              BEGIN
                                                                //**4PS.sn
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("E-Mail"));
                                                                ContactDataValidation.ValidateEmail(FldRef, "E-Mail");
                                                                //**4PS.en
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=E-Mail }
    { 103 ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=Home Page }
    { 104 ;   ;Reminder Amounts    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Reminder),
                                                                                                                Entry Type=CONST(Initial Entry),
                                                                                                                Vendor No.=FIELD(No.),
                                                                                                                Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                Posting Date=FIELD(Date Filter),
                                                                                                                Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Reminder Amounts;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 105 ;   ;Reminder Amounts (LCY);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Reminder),
                                                                                                                        Entry Type=CONST(Initial Entry),
                                                                                                                        Vendor No.=FIELD(No.),
                                                                                                                        Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                        Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                        Posting Date=FIELD(Date Filter),
                                                                                                                        Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Reminder Amounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 107 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 108 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=ENU=Tax Area Code }
    { 109 ;   ;Tax Liable          ;Boolean       ;CaptionML=ENU=Tax Liable }
    { 110 ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 111 ;   ;Currency Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Currency;
                                                   CaptionML=ENU=Currency Filter }
    { 113 ;   ;Outstanding Orders (LCY);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Outstanding Amount (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                                     Pay-to Vendor No.=FIELD(No.),
                                                                                                                     Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                     Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Outstanding Orders (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 114 ;   ;Amt. Rcd. Not Invoiced (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Amt. Rcd. Not Invoiced (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                                         Pay-to Vendor No.=FIELD(No.),
                                                                                                                         Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                         Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                         Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Amt. Rcd. Not Invoiced (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 116 ;   ;Block Payment Tolerance;Boolean    ;CaptionML=ENU=Block Payment Tolerance }
    { 117 ;   ;Pmt. Disc. Tolerance (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(Payment Discount Tolerance|'Payment Discount Tolerance (VAT Adjustment)'|'Payment Discount Tolerance (VAT Excl.)'),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Pmt. Disc. Tolerance (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 118 ;   ;Pmt. Tolerance (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(Payment Tolerance|'Payment Tolerance (VAT Adjustment)'|'Payment Tolerance (VAT Excl.)'),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Pmt. Tolerance (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 119 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   OnValidate=VAR
                                                                VendLedgEntry@1001 : Record 25;
                                                                AccountingPeriod@1000 : Record 50;
                                                                ICPartner@1002 : Record 413;
                                                              BEGIN
                                                                IF xRec."IC Partner Code" <> "IC Partner Code" THEN BEGIN
                                                                  IF NOT VendLedgEntry.SETCURRENTKEY("Vendor No.",Open) THEN
                                                                    VendLedgEntry.SETCURRENTKEY("Vendor No.");
                                                                  VendLedgEntry.SETRANGE("Vendor No.","No.");
                                                                  VendLedgEntry.SETRANGE(Open,TRUE);
                                                                  IF VendLedgEntry.FINDLAST THEN
                                                                    ERROR(Text010,FIELDCAPTION("IC Partner Code"),TABLECAPTION);

                                                                  VendLedgEntry.RESET;
                                                                  VendLedgEntry.SETCURRENTKEY("Vendor No.","Posting Date");
                                                                  VendLedgEntry.SETRANGE("Vendor No.","No.");
                                                                  AccountingPeriod.SETRANGE(Closed,FALSE);
                                                                  IF AccountingPeriod.FINDFIRST THEN BEGIN
                                                                    VendLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
                                                                    IF VendLedgEntry.FINDFIRST THEN
                                                                      IF NOT CONFIRM(Text009,FALSE,TABLECAPTION) THEN
                                                                        "IC Partner Code" := xRec."IC Partner Code";
                                                                  END;
                                                                END;

                                                                IF "IC Partner Code" <> '' THEN BEGIN
                                                                  ICPartner.GET("IC Partner Code");
                                                                  IF (ICPartner."Vendor No." <> '') AND (ICPartner."Vendor No." <> "No.") THEN
                                                                    ERROR(Text008,FIELDCAPTION("IC Partner Code"),"IC Partner Code",TABLECAPTION,ICPartner."Vendor No.");
                                                                  ICPartner."Vendor No." := "No.";
                                                                  ICPartner.MODIFY;
                                                                END;

                                                                IF (xRec."IC Partner Code" <> "IC Partner Code") AND ICPartner.GET(xRec."IC Partner Code") THEN BEGIN
                                                                  ICPartner."Vendor No." := '';
                                                                  ICPartner.MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=IC Partner Code }
    { 120 ;   ;Refunds             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Refund),
                                                                                                                Entry Type=CONST(Initial Entry),
                                                                                                                Vendor No.=FIELD(No.),
                                                                                                                Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                Posting Date=FIELD(Date Filter),
                                                                                                                Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Refunds }
    { 121 ;   ;Refunds (LCY)       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Refund),
                                                                                                                        Entry Type=CONST(Initial Entry),
                                                                                                                        Vendor No.=FIELD(No.),
                                                                                                                        Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                        Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                        Posting Date=FIELD(Date Filter),
                                                                                                                        Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Refunds (LCY) }
    { 122 ;   ;Other Amounts       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Initial Document Type=CONST(" "),
                                                                                                                Entry Type=CONST(Initial Entry),
                                                                                                                Vendor No.=FIELD(No.),
                                                                                                                Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                Posting Date=FIELD(Date Filter),
                                                                                                                Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Other Amounts }
    { 123 ;   ;Other Amounts (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(" "),
                                                                                                                        Entry Type=CONST(Initial Entry),
                                                                                                                        Vendor No.=FIELD(No.),
                                                                                                                        Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                        Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                        Posting Date=FIELD(Date Filter),
                                                                                                                        Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Other Amounts (LCY) }
    { 124 ;   ;Prepayment %        ;Decimal       ;CaptionML=ENU=Prepayment %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 125 ;   ;Outstanding Invoices;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Outstanding Amount" WHERE (Document Type=CONST(Invoice),
                                                                                                               Pay-to Vendor No.=FIELD(No.),
                                                                                                               Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                               Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                               Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Outstanding Invoices;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 126 ;   ;Outstanding Invoices (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Outstanding Amount (LCY)" WHERE (Document Type=CONST(Invoice),
                                                                                                                     Pay-to Vendor No.=FIELD(No.),
                                                                                                                     Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                     Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Outstanding Invoices (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 130 ;   ;Pay-to No. Of Archived Doc.;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header Archive" WHERE (Document Type=CONST(Order),
                                                                                                      Pay-to Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Pay-to No. Of Archived Doc. }
    { 131 ;   ;Buy-from No. Of Archived Doc.;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header Archive" WHERE (Document Type=CONST(Order),
                                                                                                      Buy-from Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Buy-from No. Of Archived Doc. }
    { 132 ;   ;Partner Type        ;Option        ;CaptionML=ENU=Partner Type;
                                                   OptionCaptionML=ENU=" ,Company,Person";
                                                   OptionString=[ ,Company,Person] }
    { 170 ;   ;Creditor No.        ;Code20        ;OnValidate=BEGIN
                                                                //>>NAVDK
                                                                GLSetup.GET;
                                                                IF GLSetup."Danish localization active" AND ("Creditor No." <> '') THEN
                                                                  "Creditor No." := PADSTR('',MAXSTRLEN("Creditor No.") - STRLEN("Creditor No."),'0') + "Creditor No.";
                                                                //<<NAVDK
                                                              END;

                                                   CaptionML=ENU=Creditor No.;
                                                   Numeric=Yes }
    { 288 ;   ;Preferred Bank Account;Code10      ;TableRelation="Vendor Bank Account".Code WHERE (Vendor No.=FIELD(No.),
                                                                                                   B-Account=CONST(No));
                                                   CaptionML=ENU=Preferred Bank Account }
    { 840 ;   ;Cash Flow Payment Terms Code;Code10;TableRelation="Payment Terms";
                                                   CaptionML=ENU=Cash Flow Payment Terms Code }
    { 5049;   ;Primary Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                Cont@1001 : Record 5050;
                                                                ContBusRel@1000 : Record 5054;
                                                              BEGIN
                                                                Contact := '';
                                                                IF "Primary Contact No." <> '' THEN BEGIN
                                                                  Cont.GET("Primary Contact No.");
                                                                  Cont.TESTFIELD(Blocked, FALSE); //**4PS.n

                                                                  ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
                                                                  ContBusRel.SETRANGE("No.","No.");
                                                                  ContBusRel.FINDFIRST;

                                                                  IF Cont."Company No." <> ContBusRel."Contact No." THEN
                                                                    ERROR(Text004,Cont."No.",Cont.Name,"No.",Name);

                                                                  IF Cont.Type = Cont.Type::Person THEN
                                                                    Contact := Cont.Name
                                                                END;

                                                                CALCFIELDS("Mobile Phone Primairy Contact");    //evdb.n
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusRel@1000 : Record 5054;
                                                              TempVend@1002 : TEMPORARY Record 23;
                                                            BEGIN
                                                              //**4PS.so
                                                              {
                                                              ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                              ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
                                                              ContBusRel.SETRANGE("No.","No.");
                                                              IF ContBusRel.FINDFIRST THEN
                                                                Cont.SETRANGE("Company No.",ContBusRel."Contact No.")
                                                              ELSE
                                                                Cont.SETRANGE("No.",'');

                                                              IF "Primary Contact No." <> '' THEN
                                                                IF Cont.GET("Primary Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                TempVend.COPY(Rec);
                                                                FIND;
                                                                TRANSFERFIELDS(TempVend,FALSE);
                                                                VALIDATE("Primary Contact No.",Cont."No.");
                                                              END;
                                                              } //**4PS.eo

                                                              OnLookupPrimaryContactNo(TRUE);  //**4PS.n
                                                            END;

                                                   CaptionML=ENU=Primary Contact No. }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=ENU=Responsibility Center }
    { 5701;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=ENU=Location Code }
    { 5790;   ;Lead Time Calculation;DateFormula  ;AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Lead Time Calculation }
    { 7177;   ;No. of Pstd. Receipts;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purch. Rcpt. Header" WHERE (Buy-from Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Pstd. Receipts;
                                                   Editable=No }
    { 7178;   ;No. of Pstd. Invoices;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purch. Inv. Header" WHERE (Buy-from Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Pstd. Invoices;
                                                   Editable=No }
    { 7179;   ;No. of Pstd. Return Shipments;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Return Shipment Header" WHERE (Buy-from Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Pstd. Return Shipments;
                                                   Editable=No }
    { 7180;   ;No. of Pstd. Credit Memos;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purch. Cr. Memo Hdr." WHERE (Buy-from Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Pstd. Credit Memos;
                                                   Editable=No }
    { 7181;   ;Pay-to No. of Orders;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Order),
                                                                                              Pay-to Vendor No.=FIELD(No.)));
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Pay-to No. of Orders;
                                                   Editable=No }
    { 7182;   ;Pay-to No. of Invoices;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Invoice),
                                                                                              Pay-to Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Pay-to No. of Invoices;
                                                   Editable=No }
    { 7183;   ;Pay-to No. of Return Orders;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Return Order),
                                                                                              Pay-to Vendor No.=FIELD(No.)));
                                                   AccessByPermission=TableData 6650=R;
                                                   CaptionML=ENU=Pay-to No. of Return Orders;
                                                   Editable=No }
    { 7184;   ;Pay-to No. of Credit Memos;Integer ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Credit Memo),
                                                                                              Pay-to Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Pay-to No. of Credit Memos;
                                                   Editable=No }
    { 7185;   ;Pay-to No. of Pstd. Receipts;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Purch. Rcpt. Header" WHERE (Pay-to Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Pay-to No. of Pstd. Receipts;
                                                   Editable=No }
    { 7186;   ;Pay-to No. of Pstd. Invoices;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Purch. Inv. Header" WHERE (Pay-to Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Pay-to No. of Pstd. Invoices;
                                                   Editable=No }
    { 7187;   ;Pay-to No. of Pstd. Return S.;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Return Shipment Header" WHERE (Pay-to Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Pay-to No. of Pstd. Return S.;
                                                   Editable=No }
    { 7188;   ;Pay-to No. of Pstd. Cr. Memos;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Purch. Cr. Memo Hdr." WHERE (Pay-to Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Pay-to No. of Pstd. Cr. Memos;
                                                   Editable=No }
    { 7189;   ;No. of Quotes       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Quote),
                                                                                              Buy-from Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Quotes;
                                                   Editable=No }
    { 7190;   ;No. of Blanket Orders;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Blanket Order),
                                                                                              Buy-from Vendor No.=FIELD(No.)));
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=No. of Blanket Orders;
                                                   Editable=No }
    { 7191;   ;No. of Orders       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Order),
                                                                                              Buy-from Vendor No.=FIELD(No.)));
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=No. of Orders }
    { 7192;   ;No. of Invoices     ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Invoice),
                                                                                              Buy-from Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Invoices;
                                                   Editable=No }
    { 7193;   ;No. of Return Orders;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Return Order),
                                                                                              Buy-from Vendor No.=FIELD(No.)));
                                                   AccessByPermission=TableData 6650=R;
                                                   CaptionML=ENU=No. of Return Orders;
                                                   Editable=No }
    { 7194;   ;No. of Credit Memos ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Credit Memo),
                                                                                              Buy-from Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Credit Memos;
                                                   Editable=No }
    { 7195;   ;No. of Order Addresses;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Order Address" WHERE (Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Order Addresses;
                                                   Editable=No }
    { 7196;   ;Pay-to No. of Quotes;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Quote),
                                                                                              Pay-to Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Pay-to No. of Quotes;
                                                   Editable=No }
    { 7197;   ;Pay-to No. of Blanket Orders;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Blanket Order),
                                                                                              Pay-to Vendor No.=FIELD(No.)));
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Pay-to No. of Blanket Orders }
    { 7600;   ;Base Calendar Code  ;Code10        ;TableRelation="Base Calendar";
                                                   CaptionML=ENU=Base Calendar Code }
    { 11012000;;COC Registration No.;Text20       ;OnValidate=BEGIN
                                                                // I024 130911 <<
                                                                UpdateBankgiro;
                                                                // I024 130911 >>
                                                              END;

                                                   CaptionML=ENU=COC Registration No. }
    { 11012005;;City COC           ;Text30        ;CaptionML=ENU=City COC }
    { 11012010;;Due Date COC Statement;Date       ;CaptionML=ENU=Due Date COC Statement }
    { 11012014;;Settlement Licence No.;Text20     ;CaptionML=ENU=Settlement Licence No. }
    { 11012015;;City COC (Settl. Licence);Text30  ;CaptionML=ENU=City COC (Settl. Licence) }
    { 11012016;;Date Settlement Licence;Date      ;CaptionML=ENU=Date Settlement Licence }
    { 11012020;;Subcontractor      ;Boolean       ;OnValidate=BEGIN
                                                                //**4PS
                                                                UpdateVendorWKAChecks;
                                                                IF NOT Subcontractor THEN
                                                                  TestIfNotLinkedToResource;
                                                              END;

                                                   CaptionML=ENU=Subcontractor }
    { 11012028;;Default Payment Agreement;Code20  ;TableRelation="Payment Agreement" WHERE (Sub Contractor=FIELD(No.));
                                                   CaptionML=ENU=Default Payment Agreement }
    { 11012040;;Security Fund      ;Boolean       ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Security Fund" THEN BEGIN
                                                                  TESTFIELD("Transaction Mode B Payments",'');
                                                                  TESTFIELD("Bank Account Code B Payments",'');
                                                                END;
                                                                UpdateVendorWKAChecks;
                                                              END;

                                                   CaptionML=ENU=Security Fund }
    { 11012050;;SWP                ;Boolean       ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF SWP THEN BEGIN
                                                                  TESTFIELD("Transaction Mode B Payments",'');
                                                                  TESTFIELD("Bank Account Code B Payments",'');
                                                                END;
                                                                UpdateVendorWKAChecks;
                                                              END;

                                                   CaptionML=ENU=SWP }
    { 11012062;;COC Location No.   ;Text30        ;CaptionML=ENU=COC Location No. }
    { 11012120;;Memo               ;Text250       ;CaptionML=ENU=Memo }
    { 11012130;;VAT Prod. Posting Group;Code10    ;TableRelation="VAT Product Posting Group".Code;
                                                   OnValidate=BEGIN
                                                                IF "VAT Prod. Posting Group" <> xRec."VAT Prod. Posting Group" THEN BEGIN
                                                                  ScanInvManagRec.RESET;
                                                                  ScanInvManagRec.SETRANGE(Processed,FALSE);
                                                                  ScanInvManagRec.SETRANGE("Buy-from Vendor No.","No.");
                                                                  IF ScanInvManagRec.FIND('-') THEN BEGIN
                                                                    REPEAT
                                                                      ScanInvManagRec."VAT Prod. Posting Group" := "VAT Prod. Posting Group";
                                                                      ScanInvManagRec.MODIFY;
                                                                    UNTIL ScanInvManagRec.NEXT = 0;
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 11012140;;Transaction Mode B Payments;Code20;CaptionML=ENU=Transaction Mode Code B Payments }
    { 11012150;;Bank Account Code B Payments;Code10;
                                                   TableRelation="Vendor Bank Account".Code WHERE (Vendor No.=FIELD(No.),
                                                                                                   B-Account=CONST(Yes));
                                                   CaptionML=ENU=Bank Account Code B Payments }
    { 11012240;;Inv.Appr.Journal Template;Code10  ;TableRelation="Gen. Journal Template".Name WHERE (Type=CONST(Purch.Invoice Approval));
                                                   CaptionML=ENU=Inv. Appr. Journal Template }
    { 11012270;;Bank Account No.   ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Vendor Bank Account"."Bank Account No." WHERE (Vendor No.=FIELD(No.),
                                                                                                                      Code=FIELD(Preferred Bank Account)));
                                                   CaptionML=ENU=Bank Account No.;
                                                   Editable=No }
    { 11012280;;B-Account No.      ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Vendor Bank Account"."Bank Account No." WHERE (Vendor No.=FIELD(No.),
                                                                                                                      Code=FIELD(Bank Account Code B Payments)));
                                                   CaptionML=ENU=B-Account No.;
                                                   Editable=No }
    { 11012290;;Project Supplier   ;Boolean       ;CaptionML=ENU=Project Supplier }
    { 11012300;;ICM Login Code     ;Code2         ;CaptionML=ENU=ICM Login Code }
    { 11012310;;ICM Customer No.   ;Code10        ;CaptionML=ENU=ICM Customer No. }
    { 11012311;;Directory EICB     ;Text30        ;CaptionML=ENU=Directory EICB }
    { 11012312;;Directory ICB      ;Text30        ;CaptionML=ENU=Directory ICB }
    { 11012313;;Directory ICM      ;Text30        ;CaptionML=ENU=Directory ICM }
    { 11012314;;Pathname Purchase Exchange;Text250;OnValidate=VAR
                                                                lvPath@1210190001 : Text[250];
                                                                lvBackup@1210190000 : Text[250];
                                                              BEGIN
                                                                //**4PS
                                                                IF "Pathname Purchase Exchange" = '' THEN EXIT;
                                                                FileMgt.AddBackSlashToDirectoryName("Pathname Purchase Exchange");

                                                                lvPath := "Pathname Purchase Exchange";
                                                                SetFoldersPurchaseExchange(lvBackup);  //db, 05-04-13: C006669

                                                                IF NOT FileMgt.ClientDirectoryExists(lvPath) THEN
                                                                  FileMgt.CreateClientFolder(lvPath, TRUE);

                                                                lvPath := "Pathname Purchase Exchange" + "Directory ICM";
                                                                IF NOT FileMgt.ClientDirectoryExists(lvPath) THEN
                                                                  FileMgt.CreateClientFolder(lvPath, TRUE);

                                                                lvPath := "Pathname Purchase Exchange" + "Directory ICK";
                                                                IF NOT FileMgt.ClientDirectoryExists(lvPath) THEN
                                                                  FileMgt.CreateClientFolder(lvPath, TRUE);

                                                                lvPath := "Pathname Purchase Exchange" + "Directory ICB";
                                                                IF NOT FileMgt.ClientDirectoryExists(lvPath) THEN
                                                                  FileMgt.CreateClientFolder(lvPath, TRUE);

                                                                lvPath := "Pathname Purchase Exchange" + "Directory EICB";
                                                                IF NOT FileMgt.ClientDirectoryExists(lvPath) THEN
                                                                  FileMgt.CreateClientFolder(lvPath, TRUE);

                                                                lvPath := "Pathname Purchase Exchange" + lvBackup;
                                                                IF NOT FileMgt.ClientDirectoryExists(lvPath) THEN
                                                                  FileMgt.CreateClientFolder(lvPath, TRUE);

                                                                lvPath := "Pathname Purchase Exchange" + "Directory Backup ICB";
                                                                IF NOT FileMgt.ClientDirectoryExists(lvPath) THEN
                                                                  FileMgt.CreateClientFolder(lvPath, TRUE);

                                                                lvPath := "Pathname Purchase Exchange" + "Directory Backup EICB";
                                                                IF NOT FileMgt.ClientDirectoryExists(lvPath) THEN
                                                                  FileMgt.CreateClientFolder(lvPath, TRUE);
                                                              END;

                                                   CaptionML=ENU=Pathname Purchase Exchange }
    { 11012315;;Main Vendor        ;Code20        ;TableRelation=Vendor.No.;
                                                   CaptionML=ENU=Main Vendor }
    { 11012316;;Directory Backup ICB;Text30       ;CaptionML=ENU=Directory Backup ICB }
    { 11012317;;Directory Backup EICB;Text30      ;CaptionML=ENU=Directory Backup EICB }
    { 11012318;;Vendor (Trade Item);Code15        ;TableRelation="ETIM Vendor (Central Mgt)".Code;
                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 11012321;;Blanket Contract Start Date;Date  ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF NOT ("Blanket Contract Type" IN ["Blanket Contract Type"::Contract,"Blanket Contract Type"::"Contract with Discount Terms"])
                                                                THEN
                                                                  ERROR(Text11012007,FIELDCAPTION("Blanket Contract Type"),"Blanket Contract Type"::"No Contract");
                                                                IF "Blanket Contract End Date" = xRec."Blanket Contract End Date" THEN
                                                                  VALIDATE("Blanket Contract Duration");
                                                                IF ("Blanket Contract Start Date" > "Blanket Contract End Date") AND ("Blanket Contract End Date" <> 0D) THEN
                                                                  FIELDERROR("Blanket Contract Start Date",STRSUBSTNO(Text11012002,FIELDCAPTION("Blanket Contract End Date")));
                                                              END;

                                                   CaptionML=ENU=Contract Start Date }
    { 11012322;;Blanket Contract Duration;DateFormula;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF NOT ("Blanket Contract Type" IN ["Blanket Contract Type"::Contract,"Blanket Contract Type"::"Contract with Discount Terms"])
                                                                THEN
                                                                  ERROR(Text11012007,FIELDCAPTION("Blanket Contract Type"),"Blanket Contract Type"::"No Contract");
                                                                IF (FORMAT("Blanket Contract Duration") <> '') AND ("Blanket Contract Start Date" <> 0D)  THEN
                                                                  "Blanket Contract End Date" := CALCDATE("Blanket Contract Duration", "Blanket Contract Start Date") - 1;
                                                              END;

                                                   CaptionML=ENU=Contract Duration }
    { 11012323;;Blanket Contract End Date;Date    ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF NOT ("Blanket Contract Type" IN ["Blanket Contract Type"::Contract,"Blanket Contract Type"::"Contract with Discount Terms"])
                                                                THEN
                                                                  ERROR(Text11012007,FIELDCAPTION("Blanket Contract Type"),"Blanket Contract Type"::"No Contract");
                                                                VALIDATE("Blanket Contract Start Date");
                                                              END;

                                                   CaptionML=ENU=Contract End Date }
    { 11012324;;B. Contract Termination Period;DateFormula;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF (FORMAT("B. Contract Termination Period") <> '') AND  ("B. Contract Termination Date" <> 0D) THEN
                                                                  VALIDATE("Blanket Contract Expiring Date", CALCDATE("B. Contract Termination Period", "B. Contract Termination Date") - 1);
                                                                IF ("Blanket Contract Expiring Date" < "Blanket Contract End Date") AND ("B. Contract Termination Date" <> 0D) THEN
                                                                  "Blanket Contract Expiring Date" := "Blanket Contract End Date";  //db, 17-09-09: T3795
                                                              END;

                                                   CaptionML=ENU=Termination Period }
    { 11012325;;B. Contract Termination Date;Date ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF NOT ("Blanket Contract Type" IN ["Blanket Contract Type"::Contract,"Blanket Contract Type"::"Contract with Discount Terms"])
                                                                THEN
                                                                  ERROR(Text11012007,FIELDCAPTION("Blanket Contract Type"),"Blanket Contract Type"::"No Contract");
                                                                IF "Blanket Contract Expiring Date" = xRec."Blanket Contract Expiring Date" THEN
                                                                  VALIDATE("B. Contract Termination Period");
                                                                IF ("B. Contract Termination Date" > "Blanket Contract Expiring Date") AND ("Blanket Contract Expiring Date" <> 0D) THEN
                                                                  FIELDERROR("B. Contract Termination Date",STRSUBSTNO(Text11012002,FIELDCAPTION("Blanket Contract Expiring Date")));
                                                              END;

                                                   CaptionML=ENU=Termination Date }
    { 11012326;;Blanket Contract Expiring Date;Date;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF NOT ("Blanket Contract Type" IN ["Blanket Contract Type"::Contract,"Blanket Contract Type"::"Contract with Discount Terms"])
                                                                THEN
                                                                  ERROR(Text11012007,FIELDCAPTION("Blanket Contract Type"),"Blanket Contract Type"::"No Contract");
                                                                IF "Blanket Contract Expiring Date" > "Blanket Contract End Date" THEN
                                                                  IF CONFIRM(Text11012003, TRUE) THEN
                                                                    "Blanket Contract Expiring Date" := CALCDATE("Blanket Contract Duration", "Blanket Contract End Date")
                                                                  ELSE
                                                                    "Blanket Contract Expiring Date" := "Blanket Contract End Date";
                                                              END;

                                                   CaptionML=ENU=Expiring Date }
    { 11012327;;Blanket Contract Reference;Text35 ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF NOT ("Blanket Contract Type" IN ["Blanket Contract Type"::Contract,"Blanket Contract Type"::"Contract with Discount Terms"])
                                                                THEN
                                                                  ERROR(Text11012007,FIELDCAPTION("Blanket Contract Type"),"Blanket Contract Type"::"No Contract");
                                                              END;

                                                   CaptionML=ENU=Reference }
    { 11012328;;Blanket Contract Type;Option      ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Blanket Contract Type" = "Blanket Contract Type"::"No Contract" THEN BEGIN
                                                                  "Blanket Contract Start Date" := 0D;
                                                                  CLEAR("Blanket Contract Duration");
                                                                  "Blanket Contract End Date" := 0D;
                                                                  CLEAR("B. Contract Termination Period");
                                                                  "B. Contract Termination Date" := 0D;
                                                                  "Blanket Contract Expiring Date" := 0D;
                                                                  "Blanket Contract Reference" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Contract Type;
                                                   OptionCaptionML=ENU=No Contract,Contract,Contract with Discount Terms;
                                                   OptionString=No Contract,Contract,Contract with Discount Terms }
    { 11012329;;Contract accepted  ;Option        ;CaptionML=ENU=Contract accepted;
                                                   OptionCaptionML=ENU=" ,No,Partial,Yes";
                                                   OptionString=[ ,No,Partial,Yes] }
    { 11012330;;Invoice/Receipt Margin Amount;Decimal;
                                                   CaptionML=ENU=Invoice/Receipt Margin Amount;
                                                   MinValue=0 }
    { 11012331;;Invoice/Receipt Margin Perc.;Decimal;
                                                   CaptionML=ENU=Invoice/Receipt Margin Perc.;
                                                   MinValue=0 }
    { 11012333;;Reserved 11012333 mve;Boolean      }
    { 11012334;;Block Purchase Quote;Boolean      ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF Blocked = Blocked::All THEN
                                                                  "Block Purchase Quote" := TRUE;
                                                              END;

                                                   CaptionML=ENU=Blocked for Purchase Quotes }
    { 11012335;;Block Purchase Order;Boolean      ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF Blocked = Blocked::All THEN
                                                                  "Block Purchase Order" := TRUE;
                                                              END;

                                                   CaptionML=ENU=Block Purchase }
    { 11012336;;Block Autom. Payment Proposal;Boolean;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF Blocked = Blocked::All THEN
                                                                  "Block Autom. Payment Proposal" := TRUE;
                                                              END;

                                                   CaptionML=ENU=Block Autom. Payment Proposal }
    { 11012338;;Reserved 11012338 mve;Boolean      }
    { 11012340;;Vendor Qualification;Code10       ;TableRelation="Vendor Qualification";
                                                   CaptionML=ENU=Vendor Qualification }
    { 11012350;;Direct Receipt     ;Option        ;InitValue=No;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Direct Receipt" = "Direct Receipt"::No THEN
                                                                  "Direct Post Order ICM" := FALSE;
                                                              END;

                                                   CaptionML=ENU=Direct Receipt;
                                                   OptionCaptionML=ENU=No,Yes,Yes - project/service only,Yes - not project/service,Yes - project location only;
                                                   OptionString=No,Yes,Yes - project/service only,Yes - not project/service,Yes - project location only }
    { 11012360;;Preference Account No.;Code20     ;TableRelation="G/L Account" WHERE (Direct Posting=CONST(Yes));
                                                   CaptionML=ENU=Preference Account No.;
                                                   Description=C-005887 }
    { 11012370;;Mobile Phone Primairy Contact;Text30;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Mobile Phone No." WHERE (No.=FIELD(Primary Contact No.)));
                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Mobile Phone Primairy Contact;
                                                   Editable=No }
    { 11012371;;Mobile Phone No.   ;Text30        ;OnValidate=BEGIN
                                                                PhoneNumberFormatting.ValidatePhoneNumber("Country/Region Code", "Mobile Phone No."); //**4PS.n
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Mobile Phone No. }
    { 11012380;;Hours Hire Order by Project;Boolean;
                                                   CaptionML=ENU=Hours Hire Order by Project;
                                                   Description=DP00824 }
    { 11012405;;Docket by E-mail   ;Boolean       ;CaptionML=ENU=Docket by E-mail }
    { 11012410;;E-Mail for Dockets ;Text80        ;OnValidate=VAR
                                                                RecRef@1100528701 : RecordRef;
                                                                FldRef@1100528700 : FieldRef;
                                                              BEGIN
                                                                //**4PS.sn
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("E-Mail for Dockets"));
                                                                ContactDataValidation.ValidateEmail(FldRef, "E-Mail for Dockets");
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=E-Mail for Dockets }
    { 11012425;;Reminder Terms Code;Code10        ;TableRelation="Purch. Reminder Terms";
                                                   CaptionML=ENU=Reminder Terms Code }
    { 11012430;;URL Vendor         ;Text150       ;OnValidate=VAR
                                                                lIntPos@1210190010 : Integer;
                                                              BEGIN
                                                                //**4PS
                                                                lIntPos := STRLEN("URL Vendor");
                                                                IF lIntPos = 0 THEN EXIT;
                                                              END;

                                                   CaptionML=ENU=URL Vendor }
    { 11012440;No;ICM Batch        ;Text100       ;CaptionML=ENU=ICM Batch Program }
    { 11012441;No;ICK Batch        ;Text100       ;CaptionML=ENU=ICK Batch Program }
    { 11012442;;Directory ICK      ;Text30        ;CaptionML=ENU=Directory ICK }
    { 11012450;;WKA Data Request by E-mail;Boolean;CaptionML=ENU=WKA data request by E-mail }
    { 11012460;;E-Mail for WKA Data Request;Text80;OnValidate=VAR
                                                                RecRef@1100528700 : RecordRef;
                                                                FldRef@1100528701 : FieldRef;
                                                              BEGIN
                                                                //**4PS.sn
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("E-Mail for WKA Data Request"));
                                                                ContactDataValidation.ValidateEmail(FldRef, "E-Mail for WKA Data Request");
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=E-Mail for WKA Data request }
    { 11012471;;Electronic Order Type;Option      ;CaptionML=ENU=Electronic Order Type;
                                                   OptionCaptionML=ENU=Standard,ICM/ICF,E-mail,GS1 (SOAP),GS1 (XML-RPC),GS1 INSBOU,,,,E-Mail Contact Person;
                                                   OptionString=Standard,ICM/ICF,E-mail,GS1 (SOAP),GS1 (XML-RPC),GS1 INSBOU,,,,E-Mail Contact Person }
    { 11012480;;E-Mail for Purch. Order;Text80    ;OnValidate=VAR
                                                                RecRef@1100528701 : RecordRef;
                                                                FldRef@1100528700 : FieldRef;
                                                              BEGIN
                                                                //**4PS.sn
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("E-Mail for Purch. Order"));
                                                                ContactDataValidation.ValidateEmail(FldRef, "E-Mail for Purch. Order");
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=E-Mail for Purch. Order }
    { 11012485;;E-Mail Subject     ;Text50        ;OnValidate=VAR
                                                                RecRef@1100528701 : RecordRef;
                                                                FldRef@1100528700 : FieldRef;
                                                              BEGIN
                                                                //**4PS.sn
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("E-Mail for Purch. Order"));
                                                                ContactDataValidation.ValidateEmail(FldRef, "E-Mail for Purch. Order");
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=E-Mail Subject }
    { 11012490;;WKA Requested Date ;Date          ;CaptionML=ENU=WKA Details Requested On }
    { 11012500;;WKA Check Not Active;Boolean      ;CaptionML=ENU=WKA Check Not Active }
    { 11012550;;Plant External Rent Calendar;Code10;
                                                   TableRelation="Plant Calendar";
                                                   CaptionML=ENU=Plant Ext. Rent Calendar }
    { 11012560;;Direct Post Order ICM;Boolean     ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Direct Post Order ICM") AND ("Direct Receipt" = "Direct Receipt"::No) THEN
                                                                  TESTFIELD("Direct Receipt", "Direct Receipt"::Yes);
                                                              END;

                                                   CaptionML=ENU=Direct Post Order ICM }
    { 11012570;;On Hold No Contract;Boolean       ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF "On Hold No Contract" THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD(PurchSetup."On Hold No Contract");
                                                                  PurchSetup.TESTFIELD(PurchSetup."On Hold Code No Contract");
                                                                END;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=On Hold No Contract }
    { 11012580;;URL GS1 Trial Order;Code10        ;TableRelation="Web Service URL".Code WHERE (Type=CONST(GS1));
                                                   CaptionML=ENU=URL GS1 Trial Order }
    { 11012581;;URL GS1 Purchase Order;Code10     ;TableRelation="Web Service URL".Code WHERE (Type=CONST(GS1));
                                                   CaptionML=ENU=URL GS1 Purchase Order }
    { 11012583;;GLN Code           ;Code20        ;CaptionML=ENU=GLN Code }
    { 11012584;;GS1 Change Request implemented;Boolean;
                                                   CaptionML=ENU=GS1 Change Request implemented }
    { 11012640;;Retention Balance (LCY);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Retention Ledg. Entry"."Amount (LCY)" WHERE (Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Retention Balance (LCY);
                                                   Description=Retention;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012650;;Transaction Type   ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=ENU=Transaction Type }
    { 11012660;;Transaction Specification;Code10  ;TableRelation="Transaction Specification";
                                                   CaptionML=ENU=Transaction Specification }
    { 11012670;;Transport Method   ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=ENU=Transport Method }
    { 11012680;;Entry Point        ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=ENU=Entry Point }
    { 11012690;;Default Only Amounts Orders;Boolean;
                                                   CaptionML=ENU=Default Only Amounts Purchase }
    { 11012700;;Service Warranty Code;Code10      ;TableRelation="Service Warranty";
                                                   CaptionML=ENU=Service Warranty Code }
    { 11012710;;Purchase Allocation Code;Code10   ;TableRelation="Purchase Allocation";
                                                   CaptionML=ENU=Purchase Allocation Code;
                                                   Description=DP00951 }
    { 11012770;;Ignore Block Inv. Mandatory;Boolean;
                                                   CaptionML=ENU=Ignore Block Invoices Mandatory }
    { 11012780;;Ignore Bank Account Check;Boolean ;CaptionML=ENU=Ignore Bank Account Check }
    { 11012904;;Phone No. 2        ;Text30        ;OnValidate=BEGIN
                                                                PhoneNumberFormatting.ValidatePhoneNumber("Country/Region Code", "Phone No. 2"); //**4PS.n
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. 2 }
    { 11012941;;Modified by        ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              LoginMgt@1100485000 : Codeunit 418;
                                                              UserCode@1100485001 : Code[50];
                                                            BEGIN
                                                              UserCode := "Modified by";
                                                              LoginMgt.LookupUserID(UserCode);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Modified by;
                                                   Editable=No }
    { 11012950;;Outstanding Credit Memo's;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Outstanding Amount" WHERE (Document Type=CONST(Credit Memo),
                                                                                                               Pay-to Vendor No.=FIELD(No.),
                                                                                                               Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                               Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                               Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Outstanding Credit Memo's;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012951;;Outstanding Cred. Memo's (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Outstanding Amount (LCY)" WHERE (Document Type=CONST(Credit Memo),
                                                                                                                     Pay-to Vendor No.=FIELD(No.),
                                                                                                                     Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                     Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Outstanding Cred. Memo's (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012952;;IBAN               ;Code50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Vendor Bank Account".IBAN WHERE (Vendor No.=FIELD(No.),
                                                                                                        Code=FIELD(Preferred Bank Account)));
                                                   CaptionML=ENU=IBAN;
                                                   Editable=No }
    { 11012953;;IBAN B-Acc.        ;Code50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Vendor Bank Account".IBAN WHERE (Vendor No.=FIELD(No.),
                                                                                                        Code=FIELD(Bank Account Code B Payments)));
                                                   CaptionML=ENU=IBAN B-Acc.;
                                                   Editable=No }
    { 11012956;;Temporary Vendor No.;Code20       ;CaptionML=ENU=Temporary Vendor No.;
                                                   Description=Use only with temporary tables }
    { 11125860;;Active in FSA      ;Boolean       ;CaptionML=ENU=Available for in Field Service }
    { 11125861;;EORI No.           ;Text20        ;CaptionML=ENU=EORI No. }
    { 11125880;;Business Relation Contact No.;Code20;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Contact Business Relation"."Contact No." WHERE (Link to Table=CONST(Vendor),
                                                                                                                       No.=FIELD(No.)));
                                                   CaptionML=ENU=Business Relation Contact No. }
    { 11125885;;Visit Address      ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Visit Address" WHERE (No.=FIELD(Business Relation Contact No.)));
                                                   CaptionML=ENU=Visit Address }
    { 11125890;;Visit Address 2    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Visit Address 2" WHERE (No.=FIELD(Business Relation Contact No.)));
                                                   CaptionML=ENU=Visit Address 2 }
    { 11125895;;Visit Address Post Code;Code20    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Visit Address Post Code" WHERE (No.=FIELD(Business Relation Contact No.)));
                                                   CaptionML=ENU=Visit Address Post Code }
    { 11125900;;Visit Address City ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Visit Address City" WHERE (No.=FIELD(Business Relation Contact No.)));
                                                   CaptionML=ENU=Visit Address City }
    { 11125905;;Visit Address Country/Region;Code10;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Visit Address Country/Region" WHERE (No.=FIELD(Business Relation Contact No.)));
                                                   CaptionML=ENU=Visit Address Country/Region }
    { 11125910;;Visit Address County;Text30       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Visit Address County" WHERE (No.=FIELD(Business Relation Contact No.)));
                                                   CaptionML=ENU=Visit Address County }
    { 11126180;;Business Identity Code;Text20     ;CaptionML=ENU=Business Identity Code;
                                                   Description=NAVFI }
    { 11128000;;VAT Prod. Posting Grp to lines;Boolean;
                                                   CaptionML=ENU=VAT Prod. Posting Group to purch.lines;
                                                   Description=PSSE, construction tax (Byggmoms) }
    { 11128010;;Plus Giro No.      ;Text20        ;OnValidate=VAR
                                                                PurchPaySetup@1000000000 : Record 312;
                                                              BEGIN
                                                                PurchPaySetup.GET;
                                                                IF ("Plus Giro No." <> '') AND PurchPaySetup."Accumulated Inward Reg. Lines" THEN
                                                                  IF NOT LBManagement.SumCheck10Control("Plus Giro No.") THEN
                                                                    ERROR(BA004);
                                                              END;

                                                   CaptionML=ENU=Plus Giro No. }
    { 11128011;;Payment Charge Paid by;Option     ;CaptionML=ENU=Payment Charge Paid by;
                                                   OptionCaptionML=ENU=Sender - Swedish Cost,Express Fee Receiver,Receiver,Sender - All Cost;
                                                   OptionString=Sender - Swedish Cost,Express Fee Receiver,Receiver,Sender - All Cost }
    { 11128012;;Payment Type       ;Option        ;InitValue=Account;
                                                   OnValidate=BEGIN
                                                                IF "LB Giro Type"="LB Giro Type"::"BG Foreign" THEN BEGIN
                                                                  IF ("Payment Type" = "Payment Type"::"Postal Check") THEN
                                                                    ERROR(BA003,FIELDCAPTION("Payment Type"),"Payment Type");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Payment Type;
                                                   OptionCaptionML=ENU=Check,Account,Postal Check;
                                                   OptionString=Check,Account,Postal Check }
    { 11128013;;Payment Method     ;Option        ;CaptionML=ENU=Payment Method;
                                                   OptionCaptionML=ENU=Normal,Express;
                                                   OptionString=Normal,Express }
    { 11128014;;SWIFT Address/BIC Code;Code12     ;CaptionML=ENU=SWIFT Address/BIC Code }
    { 11128015;;Currency Account   ;Boolean       ;CaptionML=ENU=Currency Account }
    { 11128016;;LB Giro Type       ;Option        ;OnValidate=BEGIN
                                                                VALIDATE("Payment Type");
                                                              END;

                                                   CaptionML=ENU=LB Giro Type;
                                                   OptionCaptionML=ENU=" ,BG Sweden,PG Sweden,BG Foreign,PG Foreign,,SEPA pain.001";
                                                   OptionString=[ ,BG Sweden,PG Sweden,BG Foreign,PG Foreign,SEPA,SEPA pain.001] }
    { 11128017;;Bank Giro No.      ;Text30        ;OnValidate=VAR
                                                                PurchPaySetup@1000000000 : Record 312;
                                                              BEGIN
                                                                PurchPaySetup.GET;
                                                                IF ("Bank Giro No." <> '') AND PurchPaySetup."Check Giro Account" THEN
                                                                  IF NOT LBManagement.SumCheck10Control("Bank Giro No.") THEN
                                                                    ERROR(BA004);
                                                              END;

                                                   CaptionML=ENU=Bank Giro No. }
    { 11128018;;Bank               ;Text30        ;CaptionML=ENU=Bank }
    { 11128020;;Bank Addr. (Post Code + City);Text22;
                                                   CaptionML=ENU=Bank Addr. (Post Code + City) }
    { 11128021;;Code for Bank of Sweden;Code3     ;CaptionML=ENU=Code for Bank of Sweden;
                                                   Numeric=Yes }
    { 11128022;;Payment No.        ;Code4         ;CaptionML=ENU=Payment No.;
                                                   Numeric=Yes }
    { 11128023;;Account Payment with Advising;Boolean;
                                                   OnValidate=BEGIN
                                                                IF "Account Payment with Advising" THEN BEGIN
                                                                  TESTFIELD(Name);
                                                                  TESTFIELD(City);
                                                                  TESTFIELD("Post Code");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Account Payment with Advising }
    { 11128031;;Inward Reg. Balance (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Inward Reg. Entry"."Amount Including VAT (LCY)" WHERE (Vendor No.=FIELD(No.),
                                                                                                                           Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                           Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                           Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Inward Reg. Balance (LCY);
                                                   Description=(11230);
                                                   Editable=No }
    { 11128060;No;No control of Ext. Doc. No.;Boolean;
                                                   OnValidate=BEGIN
                                                                CLEAR("External Document No.");
                                                              END;

                                                   CaptionML=ENU=No control of Ext. Doc. No.;
                                                   Description=PEB0008 }
    { 11128061;No;External Document No.;Code20    ;OnValidate=BEGIN
                                                                //"No control of Ext. Doc. No." := TRUE;
                                                              END;

                                                   CaptionML=ENU=External Document No.;
                                                   Description=PEB0008 (12047959) }
    { 11128062;No;Inward Reg. Net Change (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Inward Reg. Entry".Amount WHERE (Vendor No.=FIELD(No.),
                                                                                                     Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                     Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                     Posting Date=FIELD(Date Filter),
                                                                                                     Currency Date=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Inward Reg. Net Change (LCY);
                                                   Description=PEB0010 (12047960);
                                                   Editable=No }
    { 11128065;No;Registration No. ;Text20        ;CaptionML=ENU=Registration No.;
                                                   Description=PEB0105 (12047963) }
    { 11128105;;obsolete field     ;Boolean       ;Description=I024 }
    { 11128500;;Remittance         ;Boolean       ;CaptionML=ENU=Remittance;
                                                   NotBlank=Yes;
                                                   Description=NAVNO }
    { 11128501;;Remittance Account Code;Code10    ;TableRelation="Remittance Account".Code;
                                                   OnValidate=VAR
                                                                RemAccount@1080000 : Record 11128506;
                                                              BEGIN
                                                                IF "Remittance Account Code" = '' THEN
                                                                  EXIT;
                                                                RemAccount.GET("Remittance Account Code");
                                                                "Remittance Agreement Code" := RemAccount."Remittance Agreement Code";

                                                                // Default for expenses:
                                                                VALIDATE("Charges Domestic","Charges Domestic"::"Debit remitter");
                                                                VALIDATE("Charges Abroad","Charges Abroad"::"Debit recipient");

                                                                // Account No. is checked if the type is changed:
                                                                IF "Recipient Bank Account No." <> '' THEN
                                                                  VALIDATE("Recipient Bank Account No.");

                                                                // SWIFT for foreign use only:
                                                                VALIDATE("SWIFT Address/BIC Code");

                                                                // Warning if vendor is settled in foreign currency and payments are domestic:
                                                                IF ("Currency Code" <> '') AND (RemAccount.Type = RemAccount.Type::Domestic) THEN
                                                                  MESSAGE(DomesticRemittanceMsg,"Currency Code");
                                                              END;

                                                   CaptionML=ENU=Remittance Account Code;
                                                   Description=NAVNO }
    { 11128502;;Recipient Bank Account No.;Code35 ;OnValidate=VAR
                                                                RemAccount@1080000 : Record 11128506;
                                                                RemmTools@1080001 : Codeunit 11128515;
                                                                ErrorMess@1080002 : Text[250];
                                                              BEGIN
                                                                RemAccount.GET("Remittance Account Code");
                                                                IF "Recipient Bank Account No." <> '' THEN BEGIN
                                                                  ErrorMess := RemmTools.CheckAccountNo("Recipient Bank Account No.",RemAccount.Type);
                                                                  IF ErrorMess <> '' THEN
                                                                    ERROR(ErrorMess);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Recipient Bank Account No.;
                                                   Description=NAVNO }
    { 11128503;;Remittance Agreement Code;Code10  ;TableRelation="Remittance Agreement".Code;
                                                   OnValidate=VAR
                                                                RemAccount@1080000 : Record 11128506;
                                                                RemAgreement@1080001 : Record 11128503;
                                                              BEGIN
                                                                // If the agreement is changed and the current account is not in the agreement, the account code is deleted
                                                                IF "Remittance Agreement Code" = '' THEN
                                                                  EXIT;
                                                                IF "Remittance Account Code" = '' THEN
                                                                  EXIT;
                                                                RemAgreement.GET("Remittance Agreement Code");
                                                                RemAccount.GET("Remittance Account Code");
                                                                IF RemAccount."Remittance Agreement Code" <> RemAgreement.Code THEN
                                                                  VALIDATE("Remittance Account Code",'');
                                                              END;

                                                   CaptionML=ENU=Remittance Agreement Code;
                                                   Description=NAVNO }
    { 11128504;;BOLS Text Code     ;Option        ;CaptionML=ENU=BOLS Text Code;
                                                   OptionCaptionML=ENU=Transfer without advice,KID transfer,Transfer with advice,Money order,Salary,Seaman's pay,Agricultural settlement,Pension/ Social security,Advice sent from institution other than BBS,Tax,Free text mass payment,Free text, Self-produced money order;
                                                   OptionString=Transfer without advice,KID transfer,Transfer with advice,Money order,Salary,Seaman's pay,Agricultural settlement,Pension/ Social security, Advice sent from institution other than BBS,Tax,Free text mass payment,Free text, Self-produced money order;
                                                   Description=NAVNO }
    { 11128505;;Recipient ref. 1 - inv.;Code40    ;CaptionML=ENU=Recipient ref. 1 - inv.;
                                                   Description=NAVNO }
    { 11128506;;Recipient ref. 2 - inv.;Code40    ;CaptionML=ENU=Recipient ref. 2 - inv.;
                                                   Description=NAVNO }
    { 11128507;No;Recipient ref. 3 - inv.;Code40  ;CaptionML=ENU=Recipient ref. 3 - inv.;
                                                   Description=NAVNO }
    { 11128508;;Recipient ref. 1 - cred.;Code40   ;CaptionML=ENU=Recipient ref. 1 - cred.;
                                                   Description=NAVNO }
    { 11128509;;Recipient ref. 2 - cred.;Code40   ;CaptionML=ENU=Recipient ref. 2 - cred.;
                                                   Description=NAVNO }
    { 11128510;No;Recipient ref. 3 - cred.;Code40 ;CaptionML=ENU=Recipient ref. 3 - cred.;
                                                   Description=NAVNO }
    { 11128511;;Payment Type Code Domestic;Code2  ;CaptionML=ENU=Payment Type Code Domestic;
                                                   Description=NAVNO }
    { 11128512;;Charges Domestic   ;Option        ;CaptionML=ENU=Charges Domestic;
                                                   OptionCaptionML=ENU=Debit remitter,Debit recipient,Default;
                                                   OptionString=Debit remitter,Debit recipient,Default;
                                                   Description=NAVNO }
    { 11128513;;Warning Notice     ;Option        ;OnValidate=BEGIN
                                                                IF "Warning Notice" <> "Warning Notice"::Other THEN
                                                                  "Warning Text" := '';
                                                              END;

                                                   CaptionML=ENU=Warning Notice;
                                                   OptionCaptionML=ENU=None,Phone,Fax,Other;
                                                   OptionString=None,Phone,Fax,Other;
                                                   Description=NAVNO }
    { 11128514;;Warning Text       ;Code25        ;OnValidate=BEGIN
                                                                TESTFIELD("Warning Notice","Warning Notice"::Other);
                                                              END;

                                                   CaptionML=ENU=Warning Text;
                                                   Description=NAVNO }
    { 11128515;;Bank Name          ;Code35        ;CaptionML=ENU=Bank Name;
                                                   Description=NAVNO }
    { 11128516;;Bank Address 1     ;Code35        ;CaptionML=ENU=Bank Address 1;
                                                   Description=NAVNO }
    { 11128517;;Bank Address 2     ;Code26        ;CaptionML=ENU=Bank Address 2;
                                                   Description=NAVNO 35->26 }
    { 11128518;No;Bank Address 3   ;Code35        ;CaptionML=ENU=Bank Address 3;
                                                   Description=NAVNO }
    { 11128519;;SWIFT Remb. Bank   ;Code11        ;CaptionML=ENU=SWIFT Remb. Bank;
                                                   Description=NAVNO }
    { 11128520;;Rcpt. Bank Country/Region Code;Code2;
                                                   TableRelation=Country/Region.Code;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Rcpt. Bank Country/Region Code;
                                                   Description=NAVNO }
    { 11128521;;Recipient Confirmation;Option     ;CaptionML=ENU=Recipient Confirmation;
                                                   OptionCaptionML=ENU=None,Telex,Fax;
                                                   OptionString=None,Telex,Fax;
                                                   Description=NAVNO }
    { 11128522;;Telex Country/Region Code;Code2   ;TableRelation=Country/Region.Code;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Telex Country/Region Code;
                                                   Description=NAVNO }
    { 11128523;;Telex/Fax No.      ;Text18        ;CaptionML=ENU=Telex/Fax No.;
                                                   Description=NAVNO }
    { 11128524;;Recipient Contact  ;Text20        ;CaptionML=ENU=Recipient Contact;
                                                   Description=NAVNO }
    { 11128525;;Recipient Ref. Abroad;Code35      ;CaptionML=ENU=Recipient Ref. Abroad;
                                                   Description=NAVNO }
    { 11128526;;Payment Type Code Abroad;Code2    ;TableRelation="Payment Type Code Abroad";
                                                   OnValidate=VAR
                                                                PaymentTypeCodeAbroad@1080000 : Record 11128511;
                                                              BEGIN
                                                                IF "Payment Type Code Abroad" <> '' THEN
                                                                  PaymentTypeCodeAbroad.GET("Payment Type Code Abroad");
                                                                "Specification (Norges Bank)" := PaymentTypeCodeAbroad.Description;
                                                              END;

                                                   CaptionML=ENU=Payment Type Code Abroad;
                                                   Description=NAVNO }
    { 11128527;;Specification (Norges Bank);Code60;CaptionML=ENU=Specification (Norges Bank);
                                                   Description=NAVNO }
    { 11128528;;To Own Account     ;Boolean       ;CaptionML=ENU=To Own Account;
                                                   Description=NAVNO }
    { 11128529;;Charges Abroad     ;Option        ;CaptionML=ENU=Charges Abroad;
                                                   OptionCaptionML=ENU=Debit remitter,Debit recipient,Default;
                                                   OptionString=Debit remitter,Debit recipient,Default;
                                                   Description=NAVNO }
    { 11128530;;Own Vendor Recipient Ref.;Boolean ;OnValidate=VAR
                                                                RemAccount@1000000000 : Record 11128506;
                                                                RemTools@1000000001 : Codeunit 11128515;
                                                              BEGIN
                                                                IF "Own Vendor Recipient Ref." THEN BEGIN
                                                                  RemAccount.GET("Remittance Account Code");
                                                                  RemTools.VendorInitRecipientRef(Rec,RemAccount);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Own Vendor Recipient Ref.;
                                                   Description=NAVNO }
    { 11128620;;Giro Acc. No.      ;Code7         ;OnValidate=BEGIN
                                                                //NAVDK
                                                                IF "Giro Acc. No." <> '' THEN
                                                                  "Giro Acc. No." := PADSTR('',MAXSTRLEN("Giro Acc. No.") - STRLEN("Giro Acc. No."),'0') + "Giro Acc. No.";
                                                                //NAVDK
                                                              END;

                                                   CaptionML=ENU=Giro Acc. No.;
                                                   Description=NAVDK }
    { 12013601;;Factoring          ;Boolean       ;CaptionML=ENU=Factoring;
                                                   Description=ExFlow }
    { 12013602;;Predefined Account ;Code20        ;TableRelation="G/L Account";
                                                   OnValidate=BEGIN
                                                                // ExFlow
                                                                IF ExFlowSetup.GET THEN BEGIN
                                                                  ExfVendIDMgt.VendorPreDefCheck(Rec);

                                                                  IF "Predefined Account" <> '' THEN
                                                                    "Predefined Purch. Code" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Predefined Account ExFlow;
                                                   Description=ExFlow }
    { 12013603;;Approve Order      ;Boolean       ;CaptionML=ENU=Approve Order;
                                                   Description=ExFlow Order }
    { 12013606;;Vendor Type (Web Req.);Option     ;CaptionML=ENU=Vendor Type (Requisition);
                                                   OptionCaptionML=ENU=Preferred,Visible,Hidden;
                                                   OptionString=Preferred,Visible,Hidden;
                                                   Description=ExFlow }
    { 12013610;;Do not check Duplicate Invoice;Boolean;
                                                   CaptionML=ENU=Do not check Duplicate Invoice;
                                                   Description=ExFlow }
    { 12013611;;Vendor ID          ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Vendor ID" WHERE (Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Vendor IDs;
                                                   Description=ExFlow;
                                                   Editable=No }
    { 12013621;;Predefined Purch. Code;Code10     ;TableRelation="EX Standard Purchase Code".Code;
                                                   OnValidate=BEGIN
                                                                // ExFlow
                                                                IF ExFlowSetup.GET THEN
                                                                  IF "Predefined Purch. Code" <> '' THEN
                                                                    "Predefined Account" := '';
                                                              END;

                                                   CaptionML=ENU=Predefined ExFlow Purch. Code;
                                                   Description=ExFlow }
    { 12013622;;Ignore on Fraud List;Boolean      ;CaptionML=ENU=Ignore on Fraudulent Vendor ID List;
                                                   Description=ExFlow }
    { 12013623;;Latest Fraud Block ;DateTime      ;CaptionML=ENU=Latest Fraud Block;
                                                   Description=ExFlow;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Name                              }
    {    ;Vendor Posting Group                     }
    {    ;Currency Code                            }
    {    ;Priority                                 }
    {    ;Country/Region Code                      }
    {    ;Gen. Bus. Posting Group                  }
    {    ;VAT Registration No.                     }
    {    ;Name                                     }
    {    ;City                                     }
    {    ;Post Code                                }
    {    ;Phone No.                                }
    {    ;Contact                                  }
    {    ;Payment No.                              }
    {    ;Remittance,No.                           }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Name,City,Post Code,Phone No.,Contact }
    { 2   ;Brick               ;No.,Name,Balance (LCY),Contact,Balance Due (LCY) }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one outstanding Purchase %3 for this vendor.';
      Text002@1001 : TextConst 'ENU=You have set %1 to %2. Do you want to update the %3 price list accordingly?';
      Text003@1002 : TextConst 'ENU=Do you wish to create a contact for %1 %2?';
      PurchSetup@1003 : Record 312;
      CommentLine@1005 : Record 97;
      PurchOrderLine@1006 : Record 39;
      PostCode@1007 : Record 225;
      VendBankAcc@1008 : Record 288;
      OrderAddr@1009 : Record 224;
      GenBusPostingGrp@1010 : Record 250;
      ItemCrossReference@1016 : Record 5717;
      RMSetup@1020 : Record 5079;
      ServiceItem@1024 : Record 5940;
      WKACheck@1100485007 : Record 11020275;
      VendorWKACheck@1100485006 : Record 11020276;
      NoSeriesMgt@1011 : Codeunit 396;
      MoveEntries@1012 : Codeunit 361;
      UpdateContFromVend@1013 : Codeunit 5057;
      DimMgt@1014 : Codeunit 408;
      ContactDataValidation@1100528700 : Codeunit 11012275;
      PhoneNumberFormatting@1100528701 : Codeunit 11012276;
      CentrDataMgt@11012011 : Codeunit 11012010;
      RecRef@1100485000 : RecordRef;
      InsertFromContact@1015 : Boolean;
      Text004@1019 : TextConst 'ENU=Contact %1 %2 is not related to vendor %3 %4.';
      Text005@1021 : TextConst 'ENU=post';
      Text006@1022 : TextConst 'ENU=create';
      Text007@1023 : TextConst 'ENU=You cannot %1 this type of document when Vendor %2 is blocked with type %3';
      Text008@1025 : TextConst 'ENU=The %1 %2 has been assigned to %3 %4.\The same %1 cannot be entered on more than one %3.';
      Text009@1027 : TextConst 'ENU=Reconciling IC transactions may be difficult if you change IC Partner Code because this %1 has ledger entries in a fiscal year that has not yet been closed.\ Do you still want to change the IC Partner Code?';
      Text010@1026 : TextConst 'ENU=You cannot change the contents of the %1 field because this %2 has one or more open ledger entries.';
      Text011@1004 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      Text11012000@11012013 : TextConst 'ENU=The combination of %1 %2 and House No. %3 is already used at %4 %5';
      Text11012001@1210190002 : TextConst 'ENU=You cannot delete %1 ''%2'' because it is present at least at one %3 (f.i. ''%4).';
      Text11012002@1210190004 : TextConst 'ENU=must occur before %1';
      Text11012003@1210190005 : TextConst 'ENU="Expiring Date exceeds Contract End Date;CALCULATE=Date based on End Date + Contract Duration ?"';
      Text11012004@1100485001 : TextConst 'ENU=General data of %1 %2 may only be changed in the contact card of company %3.';
      Text11012005@1100485002 : TextConst 'ENU=Do you want to create the vendor based on a template?';
      Text11012006@1100485005 : TextConst 'ENU=It is not allowed to create a %1 in this Company.';
      Text11012007@1100525000 : TextConst 'ENU=Vendor must have a Blanket Contract. Field %1 can''t be %2.';
      Text11012008@1100528600 : TextConst 'ENU=Vendor is linked to %1, changes to field %2 not allowed';
      ScanInvManagRec@1100485008 : Record 11012133;
      DPA_Management@1100000999 : Codeunit 11012783;
      FileMgt@1210190000 : Codeunit 419;
      SkipModify@1100528400 : Boolean;
      LBManagement@1100285000 : Codeunit 11128015;
      BA003@1100285002 : TextConst 'ENU=%1 %2 can only be used with "PG Foreign"';
      BA004@1100285001 : TextConst 'ENU=Giro No. is not correct.';
      GLSetup@1017 : Record 98;
      DomesticRemittanceMsg@1080000 : TextConst 'ENU=Note: Vendor is settled in %1 and remittance is domestic.';
      "********ExFlow*********"@12013587 : Integer;
      ExfVendIDMgt@12013588 : Codeunit 12013667;
      ExFlowSetup@12013589 : Record 12013601;
      SkipCentralDataMgtInOnRename@1100528702 : Boolean;
      SelectVendorErr@1100525001 : TextConst 'ENU=You must select an existing vendor.';

    PROCEDURE AssistEdit@2(OldVend@1000 : Record 23) : Boolean;
    VAR
      Vend@1001 : Record 23;
      lvVendorTemplateRec@1100525000 : Record 11020240;
      lvCreateFromTemplate@1100525001 : Boolean;
    BEGIN
      WITH Vend DO BEGIN
        Vend := Rec;
        PurchSetup.GET;
        PurchSetup.TESTFIELD("Vendor Nos.");
        IF NoSeriesMgt.SelectSeries(PurchSetup."Vendor Nos.",OldVend."No. Series","No. Series") THEN BEGIN
          PurchSetup.GET;
          PurchSetup.TESTFIELD("Vendor Nos.");
          //**4PS.sn
          //* Vendor Template must be asked before transaction starts
          //23-01-2009 OLD GetVendorTemplate;
          //* 23-01-2009 After calling 'GetVendorTemplate' the values of 'VendorTemplateRec' and 'CreateFromTemplate' were
          //* already lost. So pass values by arguments (var). And then immediately after determing the 'Vendor No.' fill
          //* the fields with the template values.
          GetVendorTemplate(lvCreateFromTemplate, lvVendorTemplateRec);
          //**4PS.en
          NoSeriesMgt.SetSeries("No.");
          IF ("No." <> '') AND (lvCreateFromTemplate) THEN CreateVendorFromTemplate(lvVendorTemplateRec);  //**4PS.n 23-01-2009
          Rec := Vend;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.SaveDefaultDim(DATABASE::Vendor,"No.",FieldNumber,ShortcutDimCode);
      IF NOT SkipModify THEN //**4PS.n
        MODIFY;
    END;

    LOCAL PROCEDURE LookupShortcutDimCode@28(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.SaveDefaultDim(DATABASE::Vendor,"No.",FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShowContact@1();
    VAR
      ContBusRel@1000 : Record 5054;
      Cont@1001 : Record 5050;
    BEGIN
      IF "No." = '' THEN
        EXIT;

      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
      ContBusRel.SETRANGE("No.","No.");
      IF NOT ContBusRel.FINDFIRST THEN BEGIN
        IF NOT CONFIRM(Text003,FALSE,TABLECAPTION,"No.") THEN
          EXIT;
        UpdateContFromVend.InsertNewContact(Rec,FALSE);
        //ContBusRel.FIND('-'); //**4PS.o
        //**4PS.sn
        IF NOT ContBusRel.FINDFIRST THEN
          ERROR(Text11012006, Cont.TABLECAPTION);
        //**4PS.en
      END;
      COMMIT;

      Cont.SETCURRENTKEY("Company Name","Company No.",Type,Name);
      //Cont.SETRANGE("Company No.",ContBusRel."Contact No."); //**4PS.o
      Cont.SETRANGE("No.",ContBusRel."Contact No.");   //**4PS.sn
      PAGE.RUN(PAGE::"Contact List",Cont);
    END;

    PROCEDURE SetInsertFromContact@3(FromContact@1000 : Boolean);
    BEGIN
      InsertFromContact := FromContact;
    END;

    PROCEDURE CheckBlockedVendOnDocs@4(Vend2@1003 : Record 23;Transaction@1000 : Boolean);
    BEGIN
      IF Vend2.Blocked = Vend2.Blocked::All THEN
        VendBlockedErrorMessage(Vend2,Transaction);
    END;

    PROCEDURE CheckBlockedVendOnJnls@5(Vend2@1005 : Record 23;DocType@1004 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';Transaction@1003 : Boolean);
    BEGIN
      WITH Vend2 DO BEGIN
        IF (Blocked = Blocked::All) OR
           (Blocked = Blocked::Payment) AND (DocType = DocType::Payment)
        THEN
          VendBlockedErrorMessage(Vend2,Transaction);
      END;
    END;

    PROCEDURE CreateAndShowNewInvoice@21();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      PurchaseHeader."Document Type" := PurchaseHeader."Document Type"::Invoice;
      PurchaseHeader.SETRANGE("Buy-from Vendor No.","No.");
      PurchaseHeader.INSERT(TRUE);
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Mini Purchase Invoice",PurchaseHeader)
    END;

    PROCEDURE CreateAndShowNewCreditMemo@22();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      PurchaseHeader."Document Type" := PurchaseHeader."Document Type"::"Credit Memo";
      PurchaseHeader.SETRANGE("Buy-from Vendor No.","No.");
      PurchaseHeader.INSERT(TRUE);
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Mini Purchase Credit Memo",PurchaseHeader)
    END;

    PROCEDURE VendBlockedErrorMessage@6(Vend2@1001 : Record 23;Transaction@1002 : Boolean);
    VAR
      Action@1000 : Text[30];
    BEGIN
      IF Transaction THEN
        Action := Text005
      ELSE
        Action := Text006;
      ERROR(Text007,Action,Vend2."No.",Vend2.Blocked);
    END;

    PROCEDURE DisplayMap@7();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::Vendor,GETPOSITION)
      ELSE
        MESSAGE(Text011);
    END;

    PROCEDURE GetDefaultBankAcc@25(VAR VendorBankAccount@1002 : Record 288);
    BEGIN
      IF "Preferred Bank Account" <> '' THEN
        VendorBankAccount.GET("No.","Preferred Bank Account")
      ELSE BEGIN
        VendorBankAccount.SETRANGE("Vendor No.","No.");
        IF NOT VendorBankAccount.FINDFIRST THEN
          CLEAR(VendorBankAccount);
      END;
    END;

    PROCEDURE CalcOverDueBalance@8() OverDueBalance : Decimal;
    VAR
      VendLedgEntryRemainAmtQuery@1001 : Query 25 SECURITYFILTERING(Filtered);
    BEGIN
      VendLedgEntryRemainAmtQuery.SETRANGE(Vendor_No,"No.");
      VendLedgEntryRemainAmtQuery.SETRANGE(IsOpen,TRUE);
      VendLedgEntryRemainAmtQuery.SETFILTER(Due_Date,'<%1',WORKDATE);
      VendLedgEntryRemainAmtQuery.OPEN;

      IF VendLedgEntryRemainAmtQuery.READ THEN
        OverDueBalance := VendLedgEntryRemainAmtQuery.Sum_Remaining_Amt_LCY;
    END;

    PROCEDURE GetInvoicedPrepmtAmountLCY@18() : Decimal;
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      PurchLine.SETCURRENTKEY("Document Type","Pay-to Vendor No.");
      PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
      PurchLine.SETRANGE("Pay-to Vendor No.","No.");
      PurchLine.CALCSUMS("Prepmt. Amount Inv. (LCY)","Prepmt. VAT Amount Inv. (LCY)");
      EXIT(PurchLine."Prepmt. Amount Inv. (LCY)" + PurchLine."Prepmt. VAT Amount Inv. (LCY)");
    END;

    PROCEDURE GetTotalAmountLCY@10() : Decimal;
    BEGIN
      CALCFIELDS(
        "Balance (LCY)","Outstanding Orders (LCY)","Amt. Rcd. Not Invoiced (LCY)","Outstanding Invoices (LCY)");

      EXIT(
        "Balance (LCY)" + "Outstanding Orders (LCY)" +
        "Amt. Rcd. Not Invoiced (LCY)" + "Outstanding Invoices (LCY)" - GetInvoicedPrepmtAmountLCY);
    END;

    PROCEDURE InsertCentralManagement@30();
    BEGIN
      //**4PS
      CentrDataMgt.EditVendor(Rec,1,xRec);
    END;

    PROCEDURE CheckPostCodeHouseNo@1210190000();
    VAR
      lVendRec@1210190000 : Record 23;
      lHousNo@1210190001 : Text[50];
      lFormatAddress@1210190002 : Codeunit 365;
    BEGIN
      //**4PS
      IF (Address = '') OR ("Post Code" ='') THEN
        EXIT;

      lHousNo := lFormatAddress.HouseNo(Address);
      IF lHousNo = '' THEN
        EXIT;

      lVendRec.SETFILTER("No.",'<>%1',"No.");
      lVendRec.SETRANGE("Post Code", "Post Code");
      IF lVendRec.FINDSET THEN
        REPEAT
          IF lFormatAddress.HouseNo(lVendRec.Address) = lHousNo THEN
            MESSAGE(Text11012000, FIELDCAPTION("Post Code"), "Post Code", lHousNo, TABLECAPTION, lVendRec."No.");
        UNTIL lVendRec.NEXT = 0;
    END;

    PROCEDURE VendorIsPerson@1210190003() VendPerson : Boolean;
    VAR
      Cont@1210190002 : Record 5050;
      ContBusRel@1210190001 : Record 5054;
    BEGIN
      //**4PS.n
      VendPerson := FALSE;
      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
      ContBusRel.SETRANGE("No.","No.");
      IF ContBusRel.FIND('-') THEN BEGIN
        Cont.GET(ContBusRel."Contact No.");
        IF Cont.Type = Cont.Type::Person THEN
          VendPerson := TRUE;
      END;
    END;

    PROCEDURE CreateVendorFromTemplate@1210190004(VendorTemplate@1210190001 : Record 11020240);
    VAR
      DefaultDim@1210190002 : Record 352;
      DefaultDim2@1210190003 : Record 352;
    BEGIN
      //**4PS (call 6350)
      "Territory Code" := VendorTemplate."Territory Code";
      "Country/Region Code" := VendorTemplate."Country/Region Code";
      "Currency Code" := VendorTemplate."Currency Code";
      "Language Code" := VendorTemplate."Language Code";
      "Vendor Posting Group" := VendorTemplate."Vendor Posting Group";
      "Invoice Disc. Code" := VendorTemplate."Invoice Disc. Code";
      "Gen. Bus. Posting Group" := VendorTemplate."Gen. Bus. Posting Group";
      "VAT Bus. Posting Group" := VendorTemplate."VAT Bus. Posting Group";
      "Payment Terms Code" := VendorTemplate."Payment Terms Code";
      "Payment Method Code" := VendorTemplate."Payment Method Code";
      "Shipment Method Code" := VendorTemplate."Shipment Method Code";
      "Reminder Terms Code" := VendorTemplate."Reminder Terms Code";
      "VAT Prod. Posting Group" := VendorTemplate."VAT Prod. Posting Group";
      "Inv.Appr.Journal Template" := VendorTemplate."Inv.Appr.Journal Template";
      "VAT Prod. Posting Group" := VendorTemplate."VAT Prod. Posting Group";
      VALIDATE(Subcontractor, VendorTemplate.Subcontractor); //Validate is needed for adding WKA Checks
      "Vendor Qualification" := VendorTemplate."Vendor Qualification";
      "Transaction Mode B Payments" := VendorTemplate."Transaction Mode B Payments"; //**4PS01.n

      DefaultDim.SETRANGE("Table ID",DATABASE::"Vendor Template");
      DefaultDim.SETRANGE(DefaultDim."No.",VendorTemplate.Code);
      IF DefaultDim.FIND('-') THEN
        REPEAT
          CLEAR(DefaultDim2);
          DefaultDim2.INIT;
          DefaultDim2.VALIDATE("Table ID",DATABASE::Vendor);
          DefaultDim2."No." := "No.";
          DefaultDim2.VALIDATE("Dimension Code",DefaultDim."Dimension Code");
          DefaultDim2.VALIDATE("Dimension Value Code",DefaultDim."Dimension Value Code");
          DefaultDim2."Value Posting" := DefaultDim."Value Posting";
          DefaultDim2.INSERT(TRUE);
        UNTIL DefaultDim.NEXT = 0;
    END;

    PROCEDURE UpdateVendorWKAChecks@1100485000();
    BEGIN
      //**4PS
      IF NOT Subcontractor THEN BEGIN
        CleanupVendorWKAChecks;
        EXIT;
      END;

      WKACheck.RESET;
      IF WKACheck.FIND('-') THEN
        REPEAT
          IF WKACheck.WKACheckApplicable(WKACheck, Rec) THEN BEGIN
            VendorWKACheck.INIT;
            VendorWKACheck."Vendor No." := "No.";
            VendorWKACheck.Code := WKACheck.Code;
            IF VendorWKACheck.INSERT(TRUE) THEN;
          END ELSE
            IF VendorWKACheck.GET("No.", WKACheck.Code) THEN
              IF ((WKACheck."Check Type" = WKACheck."Check Type"::Value) AND (VendorWKACheck.Value = '')) OR
                 ((WKACheck."Check Type" = WKACheck."Check Type"::Date) AND (VendorWKACheck."Due Date" = 0D)) OR
                 ((WKACheck."Check Type" = WKACheck."Check Type"::Approved) AND (VendorWKACheck.Approved = FALSE)) THEN
                VendorWKACheck.DELETE(TRUE);
        UNTIL WKACheck.NEXT = 0;
    END;

    PROCEDURE CleanupVendorWKAChecks@1100525002();
    BEGIN
      VendorWKACheck.SETRANGE("Vendor No.", "No.");
      VendorWKACheck.DELETEALL(TRUE);
    END;

    PROCEDURE WKAChecksOK@1100485001() : Boolean;
    BEGIN
      //**4PS
      IF ("COC Registration No." = '') OR ("Due Date COC Statement" < WORKDATE) THEN
        EXIT(FALSE);

      WKACheck.RESET;
      WKACheck.SETRANGE(Mandatory, TRUE);
      WKACheck.SetWKAVendorFilters(Rec);
      IF WKACheck.FINDSET(FALSE, FALSE) THEN
        REPEAT
          IF NOT VendorWKACheck.GET("No.", WKACheck.Code) THEN
            EXIT(FALSE)
          ELSE
            IF NOT VendorWKACheck.DataIsValid(TODAY) THEN
              EXIT(FALSE);
        UNTIL WKACheck.NEXT = 0;

      VendorWKACheck.RESET;
      VendorWKACheck.SETRANGE("Vendor No.", "No.");
      VendorWKACheck.SETRANGE(Mandatory, FALSE);
      VendorWKACheck.SETRANGE("Extra Obligation Vendor", TRUE);
      IF VendorWKACheck.FINDSET(FALSE, FALSE) THEN
        REPEAT
          IF NOT VendorWKACheck.DataIsValid(TODAY) THEN
            EXIT(FALSE);
        UNTIL VendorWKACheck.NEXT = 0;
      EXIT(TRUE);
    END;

    PROCEDURE GetVendorTemplate@1100485003(VAR oCreateFromTemplate@1100525001 : Boolean;VAR oVendorTemplateRec@1100525000 : Record 11020240);
    BEGIN
      //**4PS
      oCreateFromTemplate := FALSE;
      //IF NOT InsertFromContact THEN BEGIN //C015345.o
      IF oVendorTemplateRec.FINDFIRST THEN
        IF CONFIRM(Text11012005) THEN
          IF oVendorTemplateRec.COUNT = 1 THEN
            oCreateFromTemplate := TRUE
          ELSE
            IF PAGE.RUNMODAL(0, oVendorTemplateRec) = ACTION::LookupOK THEN
              oCreateFromTemplate := TRUE;
      //END; //C015345.o
    END;

    PROCEDURE OnLookupPrimaryContactNo@1100525000(EditableMode@1100525000 : Boolean);
    VAR
      Cont@1100525002 : Record 5050;
      ContBusRel@1100525001 : Record 5054;
    BEGIN
      //**4PS
      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
      ContBusRel.SETRANGE("No.","No.");
      IF ContBusRel.FINDFIRST THEN
        Cont.SETRANGE("Company No.",ContBusRel."Contact No.")
      ELSE
        Cont.SETRANGE("No.",'');

      IF "Primary Contact No." <> '' THEN
        IF Cont.GET("Primary Contact No.") THEN ;
      IF NOT EditableMode THEN
        PAGE.RUNMODAL(0,Cont)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN
          VALIDATE("Primary Contact No.",Cont."No.");
      END;
    END;

    PROCEDURE FilterVendors@1100525003();
    VAR
      UserSetup@1100525000 : Record 91;
      ApplyVendorFilter@1100525001 : Boolean;
    BEGIN
      //**4PS
      PurchSetup.GET;
      IF PurchSetup."Vendor Filter" = '' THEN
        EXIT;

      IF UserSetup.GET(USERID) THEN
        ApplyVendorFilter := NOT UserSetup."Ignore Vendor Filter"
      ELSE
        ApplyVendorFilter := TRUE;

      IF ApplyVendorFilter THEN BEGIN
        FILTERGROUP(11);
        SETFILTER("Vendor Posting Group", PurchSetup."Vendor Filter");
        FILTERGROUP(0);
      END;
    END;

    PROCEDURE InitRecord@1100525004(CompName@1100525001 : Text[50];CreatedFromTemplate@1100525000 : Boolean);
    BEGIN
      //**4PS
      PurchSetup.CHANGECOMPANY(CompName);
      PurchSetup.GET;
      "Direct Receipt" := PurchSetup."Direct Receipt";
      "Direct Post Order ICM" := PurchSetup."Direct Post Order";
      "Default Only Amounts Orders" := PurchSetup."Default Only Amounts Orders";  //DP00477
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Global Dimension 1 Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::Vendor);
      IF Dimension1Code <> '' THEN
        "Global Dimension 1 Code" := Dimension1Code;

      IF "Global Dimension 1 Code" <> '' THEN BEGIN
        SkipModify := TRUE;
        VALIDATE("Global Dimension 1 Code");
        SkipModify := FALSE;
      END;
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Filter"));
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(23) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 23');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::Vendor, "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    PROCEDURE EditDocuments@1100528702(ContactNo@1210190004 : Code[20];ContactPersonNo@1210190005 : Code[20];SendMail@1210190002 : Boolean;Recipient@1100528700 : Text[120]);
    VAR
      DocumentMailing@1210190000 : Codeunit 11012278;
      RecRef@1100525000 : RecordRef;
      DocumentLinkRIDs@1100525001 : ARRAY [5] OF RecordID;
    BEGIN
      //**4PS
      RecRef.GETTABLE(Rec);
      DocumentLinkRIDs[1] := RecRef.RECORDID;

      DocumentMailing.EditDocuments('', DocumentLinkRIDs, '', ContactNo, ContactPersonNo, SendMail, Recipient);
    END;

    PROCEDURE SetFoldersPurchaseExchange@1100525001(VAR lvBackup@1100525000 : Text[30]);
    BEGIN
      //**4PS
      //db, 05-04-13: C006669
      lvBackup := 'IMPORT\';

      "Directory ICM" := 'ICM\';
      "Directory ICK" := 'ICK\';
      "Directory ICB" := 'ICB\';
      "Directory EICB" := 'EICB\';
      "Directory Backup ICB" := lvBackup + "Directory ICB";
      "Directory Backup EICB" := lvBackup + "Directory EICB";
    END;

    LOCAL PROCEDURE TestIfNotLinkedToResource@1100528602();
    VAR
      Resource@1100528600 : Record 11229278;
    BEGIN
      Resource.SETCURRENTKEY(Type, Company, "Source No.");
      Resource.SETRANGE(Type, Resource.Type::Subcontractor);
      Resource.SETRANGE(Company, COMPANYNAME);
      Resource.SETRANGE("Source No.", "No.");
      IF NOT Resource.ISEMPTY THEN
        ERROR(Text11012008, Resource.TABLENAME, FIELDCAPTION(Subcontractor));
    END;

    PROCEDURE GetResourceNo@1100528603() : Code[20];
    VAR
      Resource@1100525000 : Record 11229278;
    BEGIN
      IF "No." <> '' THEN BEGIN
        Resource.SETCURRENTKEY(Type, Company, "Source No.");
        Resource.SETRANGE(Type, Resource.Type::Subcontractor);
        Resource.SETRANGE(Company, COMPANYNAME);
        Resource.SETRANGE("Source No.", "No.");
        IF Resource.FINDFIRST THEN
          EXIT(Resource."No.");
      END;
      EXIT('');
    END;

    PROCEDURE ShowResources@1100528601();
    VAR
      Resource@1100525001 : Record 11229278;
    BEGIN
      TESTFIELD(Subcontractor, TRUE);
      Resource."No." := GetResourceNo();
      IF Resource."No." <> '' THEN
        Resource.GET(Resource."No.");
      Resource.SETRANGE(Company, COMPANYNAME);
      Resource.SETRANGE(Type, Resource.Type::Subcontractor);
      PAGE.RUNMODAL(PAGE::"Resource List (WOP)", Resource);
    END;

    PROCEDURE UpdateResource@1100528600(IUpdateMode@1100525002 : ',Modify,Delete,Rename';IxVendor@1100525003 : Record 23;IVendor@1100525004 : Record 23);
    VAR
      WorkOrderPlanningSetup@1100525000 : Record 11229277;
      ResourceMgt@1100525001 : Codeunit 11229277;
    BEGIN
      IF NOT WorkOrderPlanningSetup.ISEMPTY THEN
        ResourceMgt.UpdateResourceVendor(IUpdateMode, IxVendor, IVendor);
    END;

    PROCEDURE PurchaseOrdersAreSentByEMail@1100528400() : Boolean;
    BEGIN
      //**4PS C020365
      EXIT(
        ("Electronic Order Type" = "Electronic Order Type"::"E-mail") OR
        ("Electronic Order Type" = "Electronic Order Type"::"E-Mail Contact Person"));
    END;

    PROCEDURE UpdateBankgiro@1100285300();
    VAR
      MarketingSetup@1100285300 : Record 5079;
      BankgiroInformation@1100285000 : Record 11128105;
      RecRef@1100285001 : RecordRef;
      txtBankgiroNotFound@1100285003 : TextConst 'ENU=Did not find a Bankgiro for this vendor. Please check COC No. or unactivate Bankgiro integration';
      CentralDataMgt@1100285004 : Codeunit 11012010;
    BEGIN
      // Update 151118 - removed field "Not check Bankgiro"
      IF NOT MarketingSetup.GET THEN EXIT;
      IF NOT MarketingSetup."Activate Bankgiro" THEN EXIT;
      //IF ("Not Check Bankgiro") THEN EXIT;
      IF ("COC Registration No." = '') THEN EXIT;

      BankgiroInformation.SETRANGE("COC No.", "COC Registration No.");
      IF NOT (BankgiroInformation.FINDFIRST()) THEN BEGIN
         RecRef.GETTABLE(Rec);// Vendor
         IF (CentrDataMgt.DataInputAllowed(RecRef)) THEN // Check if allowed to change - if yes - give error.
            ERROR(txtBankgiroNotFound)
            ELSE
               EXIT; // Not allowed to change - hence - ignore possible error the user can not do anything about anyway.
      END;
      IF (BankgiroInformation."Vendor No." = "No.") THEN EXIT;

      BankgiroInformation."Vendor No." := "No.";
      BankgiroInformation.MODIFY();
      VALIDATE("Bank Giro No.", BankgiroInformation."Bankgiro No.");
      MODIFY(TRUE);
    END;

    PROCEDURE GetINSBOUAvailableMessages@1100528300();
    VAR
      INSBOUInterface@1100528300 : Codeunit 11012480;
    BEGIN
      //**4PS.n #DP00881
      INSBOUInterface.GetAvailableMessages("No.");
    END;

    PROCEDURE ExchangeMOB@1100528703(Mode@1100528702 : Code[1];Company@1100528703 : Text[50]);
    VAR
      JobsSetup@1100528700 : Record 315;
      DeletedDataMgtMobile@1100528701 : Codeunit 11012440;
    BEGIN
      //**4PS.n
      IF (Company <> '') THEN
        JobsSetup.CHANGECOMPANY(Company);
      JobsSetup.GET;
      IF NOT JobsSetup."4PS-Mobile Active" THEN
        EXIT;

      IF (Mode = 'D') THEN
        DeletedDataMgtMobile.StoreDeletedVendor(Rec, Company);

      IF (Mode = 'R') THEN
        IF (xRec."No." = '') THEN
          DeletedDataMgtMobile.StoreDeletedVendor(Rec, Company)
        ELSE
          DeletedDataMgtMobile.StoreDeletedVendor(xRec, Company);
    END;

    PROCEDURE SetSkipCentralDataMgtInOnRename@1100528700(Value@1100528700 : Boolean);
    BEGIN
      SkipCentralDataMgtInOnRename := Value;
    END;

    PROCEDURE GetVendorNoByName@56(VAR VendorName@1000 : Text[50]) : Code[20];
    VAR
      MarketingSetup@1100525000 : Record 5079;
      Vendor@1001 : Record 23;
      VendorNo@1002 : Code[20];
    BEGIN
      //**4PS
      MarketingSetup.GET;
      IF MarketingSetup."Tradenames in Name Validation" THEN BEGIN
        EXIT(GetVendorNoByNameAndTradename(VendorName));
      END;

      Vendor.SETRANGE(Name,VendorName);
      IF Vendor.COUNT = 1 THEN BEGIN
        Vendor.FINDFIRST;
        EXIT(Vendor."No.");
      END;

      CLEAR(Vendor);
      Vendor.SETFILTER(Name,'''@*' + VendorName + '*''');
      CASE Vendor.COUNT OF
        0: ERROR(SelectVendorErr);
        1:
          BEGIN
            Vendor.FINDFIRST;
            EXIT(Vendor."No.");
          END;
        ELSE BEGIN
          VendorNo := PickVendor(Vendor);
          IF VendorNo = '' THEN
            ERROR(SelectVendorErr);
          EXIT(VendorNo);
        END;
      END;
    END;

    PROCEDURE GetVendorNoByNameAndTradename@1100525007(VAR VendorName@1000 : Text[50]) : Code[20];
    VAR
      TempVendor@1001 : TEMPORARY Record 23;
      VendorNo@1002 : Code[20];
    BEGIN
      //**4PS
      FillTempVendorIncludingTradenames(TempVendor, VendorName);
      TempVendor.SETRANGE(Name,VendorName);
      IF TempVendor.COUNT = 1 THEN BEGIN
        TempVendor.FINDFIRST;
        VendorName := TempVendor.Name;
        EXIT(TempVendor."Temporary Vendor No.");
      END;

      CLEAR(TempVendor);
      TempVendor.SETFILTER(Name,'''@*' + VendorName + '*''');
      CASE TempVendor.COUNT OF
        0: ERROR(SelectVendorErr);
        1:
          BEGIN
            TempVendor.FINDFIRST;
            VendorName := TempVendor.Name;
            EXIT(TempVendor."Temporary Vendor No.");
          END;
        ELSE BEGIN
          VendorNo := PickVendorIncludingTradenames(TempVendor);
          IF VendorNo = '' THEN
            ERROR(SelectVendorErr);
          VendorName := TempVendor.Name;
          EXIT(VendorNo);
        END;
      END;
    END;

    LOCAL PROCEDURE PickVendor@58(VAR Vendor@1000 : Record 23) : Code[20];
    VAR
      VendorList@1100525000 : Page 27;
    BEGIN
      //**4PS
      VendorList.SETTABLEVIEW(Vendor);
      VendorList.SETRECORD(Vendor);
      VendorList.LOOKUPMODE := TRUE;
      IF VendorList.RUNMODAL = ACTION::LookupOK THEN
        VendorList.GETRECORD(Vendor);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE PickVendorIncludingTradenames@1100525009(VAR TempVendor@1000 : TEMPORARY Record 23) : Code[20];
    BEGIN
      //**4PS
      IF PAGE.RUNMODAL(PAGE::"Temp Vendor List Tradenames", TempVendor) = ACTION::LookupOK THEN
        EXIT(TempVendor."Temporary Vendor No.");
    END;

    PROCEDURE ValidateBuyFromVendor@60(VAR PurchaseHeader@1003 : Record 38;VAR OldPurchaseHeader@1002 : Record 38) : Boolean;
    VAR
      NewVendorNo@1001 : Code[20];
      VendorField@1100525000 : 'BuyFrom,PayTo';
    BEGIN
      //**4PS
      IF PurchaseHeader."Buy-from Vendor Name" <> OldPurchaseHeader."Buy-from Vendor Name" THEN BEGIN
        NewVendorNo := GetVendorNoByName(PurchaseHeader."Buy-from Vendor Name");
        IF NewVendorNo <> '' THEN BEGIN
          UpdateVendor(PurchaseHeader, NewVendorNo,VendorField::BuyFrom);
          EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE UpdateVendor@63(VAR PurchaseHeader@1004 : Record 38;NewVendorNo@1001 : Code[20];VendorField@1000 : 'BuyFrom,PayTo');
    VAR
      MiniPurchCalcDiscByType@1002 : Codeunit 1310;
      VendorTradeName@1100525000 : Text[50];
    BEGIN
      //**4PS
      IF VendorField = VendorField::BuyFrom THEN BEGIN
        VendorTradeName := PurchaseHeader."Buy-from Vendor Name";
        PurchaseHeader.VALIDATE("Buy-from Vendor No.",NewVendorNo);
        PurchaseHeader."Buy-from Vendor Name" := VendorTradeName;
      END ELSE BEGIN
        PurchaseHeader.VALIDATE("Pay-to Vendor No.",NewVendorNo);
      END;
    END;

    LOCAL PROCEDURE FillTempVendorIncludingTradenames@1100525008(VAR TempVendor@1100525000 : TEMPORARY Record 23;VendorName@1100528802 : Text);
    VAR
      Vendor@1100525001 : Record 23;
      Vendor2@1100528801 : Record 23;
      Contact@1100525003 : Record 5050;
      Contact2@1100525004 : Record 5050;
      ContactTradename@1100528800 : Record 11229299;
      counter@1100525005 : Integer;
    BEGIN
      //**4PS
      Vendor.SETFILTER(Name,'''@*' + VendorName + '*''');
      IF Vendor.FINDSET THEN
        REPEAT
          TempVendor.TRANSFERFIELDS(Vendor);
          TempVendor."Temporary Vendor No." := Vendor."No.";
          TempVendor.INSERT;
        UNTIL Vendor.NEXT = 0;

      ContactTradename.SETFILTER(Tradename,'''@*' + VendorName + '*''');
      IF ContactTradename.FINDSET THEN
        REPEAT
          IF Contact.GET(ContactTradename."Contact No.") THEN
            IF Contact.GetVendorByContact(Contact,Vendor2) THEN BEGIN
              TempVendor.INIT;
              TempVendor.TRANSFERFIELDS(Vendor2);
              TempVendor."No." := COPYSTR(Vendor2."No.", 1, 16) + 'TN' + FORMAT(counter);
              TempVendor.INSERT;
              TempVendor.Name := ContactTradename.Tradename;
              TempVendor."Temporary Vendor No." := Vendor2."No.";
              TempVendor.MODIFY;
              counter += 1;
            END;
        UNTIL ContactTradename.NEXT = 0;
    END;

    BEGIN
    {

      4PS01 JD, Call C-007220, 24-11-2006, Transaction Mode B Paymenys added to Vendor Template
      4PS02 JD 6 aug 2007, Call 8506, Extra tables to central management.
      4PS, PS, 03-12-09, Modify Permissions added for table Vendor Bank Account
      4PS, KK, 19-11-2010, On hold when no contract returned or when no letter of credit returned.

      *** I024 ***
      130911 Added field "Check bankgiro", added code under "onInsert and onModify to check bankgiro
      131010 Added fix for Bankgiro.
      131022 Added code on "Update Bankgiro" to make sure it is copied when company is created but not if central mgmt is on

      *** I016 ***
      131022 Added new option field 11128016: SEPA
      141014 ITERO.DL IME196 Altered IBAN.Ediable to No: Flowfield
      --- ExFlow  --->
      Field 12013601 : Factoring
      Field 12013602 : Predefined Account
      Field 12013603 : Approve Order
      Field 12013606 : Vendor Type (Web Req.)
      Field 12013610 : Do not check Duplicate Invoice
      Field 12013611 : Vendor ID
      Field 12013621 : Predefined Purch. Code
      Field 12013622 : Ignore on Fraud List
      Field 12013623 : Latest Fraud Block
      Code           : OnModify
      Globals
      <-- ExFlow ---

      141202 ITERO.WG Added UpdateContFromVend.OnModify(Rec);
      151118 ITERO.MH Deleted obsolete field "Do not check Bankgiro" - updated UpdateBankgiro - removed call from onModify and onInsert
      160726 ITERO.DL RFC114 added "SEPA pain.001.001.03"  to  "LB Giro Type"
      Version List=NAVW19.00.00.45480,NAVSE9.00.00.45480;
      Version List=NAVW19.00.00.45480,NAVFI9.00.00.45480;
      Version List=NAVW19.00.00.45480,NAVDK9.00.00.45480;
      Version List=NAVW19.00.00.45480,NAVNO9.00.00.45480;
    }
    END.
  }
}

