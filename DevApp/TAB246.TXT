OBJECT Table 246 Requisition Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.45480,4PS9.00;
  }
  PROPERTIES
  {
    DataCaptionFields=Journal Batch Name,Line No.;
    OnInsert=VAR
               Rec2@1000 : Record 246;
             BEGIN
               IF CURRENTKEY <> Rec2.CURRENTKEY THEN BEGIN
                 Rec2 := Rec;
                 Rec2.SETRECFILTER;
                 Rec2.SETRANGE("Line No.");
                 IF Rec2.FINDLAST THEN
                   "Line No." := Rec2."Line No." + 10000;
               END;

               ReserveReqLine.VerifyQuantity(Rec,xRec);

               ReqWkshTmpl.GET("Worksheet Template Name");
               ReqWkshName.GET("Worksheet Template Name","Journal Batch Name");

               ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
               ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");

               //**4PS.sn
               SetDefaultsInsert;
               VALIDATE("Cost Component");  //db, 24-02-10
               StrategicPurchMgt.FindContractForReqLine(Rec);
               GetItemComposition;
               //**4PS.en

               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05

               CheckLocation(ReqWkshTmpl); //**4PS.n, kkleermaker, 110817, M28649
             END;

    OnModify=VAR
               ReqWkshTemplate@1210190000 : Record 244;
             BEGIN
               ReserveReqLine.VerifyChange(Rec,xRec);
               //**4PS.sn
               "Modified by" := USERID;
               "Last Date Modified" := TODAY;
               StrategicPurchMgt.FindContractForReqLine(Rec);
               GetItemComposition;
               //**4PS.en

               //**4PS.sn, kkleermaker, 110817, M28649
               ReqWkshTemplate.GET("Worksheet Template Name");
               CheckLocation(ReqWkshTemplate);
               //**4PS.en, kkleermaker, 110817, M28649
             END;

    OnDelete=BEGIN
               ReqLine.RESET;
               ReqLine.GET("Worksheet Template Name","Journal Batch Name","Line No.");
               WHILE (ReqLine.NEXT <> 0) AND (ReqLine.Level > Level) DO
                 ReqLine.DELETE(TRUE);

               ReserveReqLine.DeleteLine(Rec);

               CALCFIELDS("Reserved Qty. (Base)");
               TESTFIELD("Reserved Qty. (Base)",0);

               DeleteRelations;
             END;

    OnRename=BEGIN
               ERROR(Text004,TABLECAPTION);
             END;

    CaptionML=ENU=Requisition Line;
    LookupPageID=Page517;
    DrillDownPageID=Page517;
  }
  FIELDS
  {
    { 1   ;   ;Worksheet Template Name;Code10     ;TableRelation="Req. Wksh. Template";
                                                   CaptionML=ENU=Worksheet Template Name }
    { 2   ;   ;Journal Batch Name  ;Code10        ;TableRelation="Requisition Wksh. Name".Name WHERE (Worksheet Template Name=FIELD(Worksheet Template Name));
                                                   CaptionML=ENU=Journal Batch Name }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 4   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  TempReqLine := Rec;

                                                                  DeleteRelations;
                                                                  "Dimension Set ID" := 0;
                                                                  "No." := '';
                                                                  "Variant Code" := '';
                                                                  //"Location Code" := ''; //**4PS.o
                                                                  ReqWkshTmpl.GET("Worksheet Template Name"); //**4PS.n
                                                                  "Location Code" := ReqWkshTmpl."Location Code"; //**4PS.n
                                                                  "Prod. Order No." := '';
                                                                  ReserveReqLine.VerifyChange(Rec,xRec);
                                                                  AddOnIntegrMgt.ResetReqLineFields(Rec);
                                                                  INIT;
                                                                  Type := TempReqLine.Type;
                                                                  //**4PS.sn
                                                                  "Location Code" := ReqWkshTmpl."Location Code";
                                                                  //VALIDATE("Location Code", ReqWkshTmpl."Location Code");  //db, 06-08-13: C008948
                                                                  DPA_SetDefaultDepartment;
                                                                  VALIDATE("Shortcut Dimension 1 Code");
                                                                  //**4PS.en
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,G/L Account,Item";
                                                   OptionString=[ ,G/L Account,Item] }
    { 5   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Type=CONST(Item)) Item WHERE (Type=CONST(Inventory));
                                                   OnValidate=BEGIN
                                                                CheckActionMessageNew;
                                                                ReserveReqLine.VerifyChange(Rec,xRec);
                                                                DeleteRelations;

                                                                IF "No." = '' THEN BEGIN
                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID3(Type),"No.",
                                                                    DATABASE::Vendor,"Vendor No.",
                                                                    DATABASE::Job,"Project No.",   //** 4PS 09-06-2010
                                                                    DATABASE::"Service Order","Service Order No.",  //** 4PS 09-06-2010
                                                                    DATABASE::Location,"Location Code");  //** 4PS.n
                                                                  INIT;
                                                                  Type := xRec.Type;
                                                                  EXIT;
                                                                END;

                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  "Variant Code" := '';
                                                                  "Prod. Order No." := '';
                                                                  AddOnIntegrMgt.ResetReqLineFields(Rec);
                                                                END;

                                                                TESTFIELD(Type);
                                                                CASE Type OF
                                                                  Type::"G/L Account":
                                                                    BEGIN
                                                                      GLAcc.GET("No.");
                                                                      GLAcc.CheckGLAcc;
                                                                      IF ("Project No." + "Service Order No." = '') THEN  //**4PS.n (db, 03-07-14: C002114, SpecialOrder TradeItem)
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      IF "Trade Item" = '' THEN  //**4PS.n
                                                                        Description := GLAcc.Name;
                                                                    END;
                                                                  Type::Item:
                                                                    BEGIN
                                                                      GetItem;
                                                                      IF PlanningResiliency AND Item.Blocked THEN
                                                                        TempPlanningErrorLog.SetError(
                                                                          STRSUBSTNO(Text031,Item.TABLECAPTION,Item."No."),
                                                                          DATABASE::Item,Item.GETPOSITION);
                                                                      IF ("Ref. Order Type" = "Ref. Order Type"::Purchase) AND (NOT SKIPTESTBLOCKED) THEN //**4PS CALL C018091
                                                                        Item.TESTFIELD("Purchase Blocked",FALSE); //**4PS.n
                                                                      Item.TESTFIELD(Blocked,FALSE);
                                                                      //**4PS.sn
                                                                      Item.TESTFIELD("Logistics on Component Level",FALSE);
                                                                      IF ("No." <> xRec."No.") AND ("No." <> '') THEN BEGIN
                                                                        ValidateItem(ItemTypeOpt::Item);
                                                                        IF CurrFieldNo = FIELDNO("No.") THEN  //db, 01-06-05: prevent other vendor choice at indirect validation
                                                                          ValidateVendor;
                                                                      END;
                                                                      IF CurrFieldNo > 0 THEN
                                                                        CALCFIELDS("Shelf No. (Item)", "Shelf No. (SKU)", "Order Multiple");
                                                                      //**4PS.en
                                                                      UpdateDescription;
                                                                      "Low-Level Code" := Item."Low-Level Code";
                                                                      "Scrap %" := Item."Scrap %";
                                                                      "Item Category Code" := Item."Item Category Code";
                                                                      "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
                                                                      "Gen. Business Posting Group" := '';
                                                                      IF PlanningResiliency AND (Item."Base Unit of Measure" = '') THEN
                                                                        TempPlanningErrorLog.SetError(
                                                                          STRSUBSTNO(Text032,Item.TABLECAPTION,Item."No.",
                                                                            Item.FIELDCAPTION("Base Unit of Measure")),
                                                                          DATABASE::Item,Item.GETPOSITION);
                                                                      Item.TESTFIELD("Base Unit of Measure");
                                                                      "Indirect Cost %" := Item."Indirect Cost %";
                                                                      GetPlanningParameters.AtSKU(SKU,"No.","Variant Code","Location Code");
                                                                      IF Subcontracting THEN
                                                                        SKU."Replenishment System" := SKU."Replenishment System"::"Prod. Order";
                                                                      VALIDATE("Replenishment System",SKU."Replenishment System");
                                                                      //"Accept Action Message" := TRUE; //**4PS.o
                                                                      //**4PS.sn
                                                                      MfgSetup.GET;
                                                                      "Accept Action Message" := NOT MfgSetup."Manual Set Action Message";
                                                                      //**4PS.en
                                                                      "Product Group Code" := Item."Product Group Code";
                                                                      GetDirectCost(FIELDNO("No."));
                                                                      IF ("Location Code" <> '') AND ("No." <> '') THEN BEGIN
                                                                        IF ("Bin Code" = '') AND ("Ref. Order Type" = "Ref. Order Type"::"Prod. Order") THEN
                                                                          "Bin Code" := WMSManagement.GetLastOperationFromBinCode("Routing No.","Routing Version Code","Location Code",FALSE,0);
                                                                        GetLocation("Location Code");
                                                                        IF ("Bin Code" = '') AND ("Ref. Order Type" = "Ref. Order Type"::"Prod. Order") THEN
                                                                          "Bin Code" := Location.GetBinCode(FALSE,0);
                                                                        IF ("Bin Code" = '') AND Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
                                                                          WMSManagement.GetDefaultBin("No.","Variant Code","Location Code","Bin Code")
                                                                      END;
                                                                    END;
                                                                END;

                                                                IF "Planning Line Origin" <> "Planning Line Origin"::"Order Planning" THEN
                                                                  IF ("Replenishment System" = "Replenishment System"::Purchase) AND
                                                                     (Item."Purch. Unit of Measure" <> '')
                                                                  THEN
                                                                    VALIDATE("Unit of Measure Code",Item."Purch. Unit of Measure")
                                                                  ELSE
                                                                    VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");

                                                                CreateDim(
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Vendor,"Vendor No.",
                                                                  DATABASE::Job,"Project No.",   //** 4PS 09-06-2010
                                                                  DATABASE::"Service Order","Service Order No.",  //** 4PS 09-06-2010
                                                                  DATABASE::Location,"Location Code");  //** 4PS.n

                                                                //**4PS.sn
                                                                StrategicPurchMgt.FindContractForReqLine(Rec);
                                                                "Use Blanket Order" := "Contract Type" IN [
                                                                   "Contract Type"::"General Blanket Order",
                                                                   "Contract Type"::"Project Blanket Order",
                                                                   "Contract Type"::"Service Blanket Order"];  //db, 25-09-14: C017462
                                                                SetRefOrderNo;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=No. }
    { 6   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 7   ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 8   ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                "Quantity (Base)" := CalcBaseQty(Quantity);
                                                                IF Type = Type::Item THEN BEGIN
                                                                  GetDirectCost(FIELDNO(Quantity));
                                                                  "Remaining Quantity" := Quantity - "Finished Quantity";
                                                                  "Remaining Qty. (Base)" := "Remaining Quantity" * "Qty. per Unit of Measure";

                                                                  IF (CurrFieldNo = FIELDNO(Quantity)) OR (CurrentFieldNo = FIELDNO(Quantity)) THEN
                                                                    SetActionMessage;

                                                                  "Net Quantity (Base)" := (Quantity - "Original Quantity") * "Qty. per Unit of Measure";

                                                                  VALIDATE("Unit Cost");
                                                                  IF ValidateFields THEN
                                                                    IF "Ending Date" <> 0D THEN
                                                                      VALIDATE("Ending Time")
                                                                    ELSE BEGIN
                                                                      IF "Starting Date" = 0D THEN
                                                                        "Starting Date" := WORKDATE;
                                                                      VALIDATE("Starting Time");
                                                                    END;
                                                                  ReserveReqLine.VerifyQuantity(Rec,xRec);
                                                                END;
                                                                VALIDATE("Cost Amount");  //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 9   ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=BEGIN
                                                                CheckActionMessageNew;
                                                                IF "Vendor No." <> '' THEN
                                                                BEGIN  //**4PS.n
                                                                  IF Vend.GET("Vendor No.") THEN BEGIN
                                                                    IF Vend.Blocked = Vend.Blocked::All THEN BEGIN
                                                                      IF PlanningResiliency THEN
                                                                        TempPlanningErrorLog.SetError(
                                                                          STRSUBSTNO(Text031,Vend.TABLECAPTION,Vend."No."),
                                                                          DATABASE::Vendor,Vend.GETPOSITION);
                                                                      Vend.VendBlockedErrorMessage(Vend,FALSE);
                                                                    END;
                                                                    IF "Order Date" = 0D THEN
                                                                      VALIDATE("Order Date",WORKDATE);

                                                                    VALIDATE("Currency Code",Vend."Currency Code");
                                                                    IF Type = Type::Item THEN
                                                                      UpdateDescription;
                                                                    VALIDATE(Quantity);
                                                                  END ELSE BEGIN
                                                                    IF ValidateFields THEN
                                                                      ERROR(Text005,FIELDCAPTION("Vendor No."),"Vendor No.");
                                                                    "Vendor No." := '';
                                                                  END;
                                                                //ELSE //**4PS.o
                                                                END ELSE BEGIN //**4PS.n
                                                                  UpdateDescription;
                                                                //**4PS.sn
                                                                  "Currency Code" := '';
                                                                  "Currency Factor" := 0;
                                                                END;
                                                                //**4PS.sn

                                                                "Order Address Code" := '';
                                                                //**4PS.sn
                                                                GetDefaultOrderAddress;
                                                                IF ("Vendor No." <> xRec."Vendor No.") AND ("Vendor No." <> '') THEN
                                                                  CheckVendorRelation(FIELDNO("Vendor No."));  //db, 05-07-09
                                                                //**4PS.en

                                                                IF (Type = Type::Item) AND ("No." <> '') AND ("Prod. Order No." = '') THEN BEGIN
                                                                  //**4PS.so
                                                                  //IF ItemVend.GET("Vendor No.","No.","Variant Code") THEN BEGIN
                                                                  //  "Vendor Item No." := ItemVend."Vendor Item No.";
                                                                  //  UpdateOrderReceiptDate(ItemVend."Lead Time Calculation");
                                                                  //END ELSE BEGIN
                                                                  //  IF "Vendor No." = Item."Vendor No." THEN
                                                                  //    "Vendor Item No." := Item."Vendor Item No."
                                                                  //  ELSE
                                                                  //    "Vendor Item No." := '';
                                                                  //**4PS.eo
                                                                  //**4PS.sn
                                                                  CLEAR(Item);
                                                                  "Vendor Item No." := '';
                                                                  IF (Item.GET("No.")) AND (Item."Vendor No." = "Vendor No.") THEN BEGIN
                                                                    "Vendor Item No." := Item."Vendor Item No.";
                                                                    UpdateOrderReceiptDate(Item."Lead Time Calculation");
                                                                  END ELSE BEGIN
                                                                    ItemVend.SETRANGE("Vendor No.", "Vendor No.");
                                                                    ItemVend.SETRANGE("Item No.", "No.");
                                                                    ItemVend.SETRANGE("Variant Code");
                                                                    IF (ItemVend.FINDLAST) THEN BEGIN
                                                                      "Vendor Item No." := ItemVend."Vendor Item No.";
                                                                      UpdateOrderReceiptDate(ItemVend."Lead Time Calculation");
                                                                    END;
                                                                  END;
                                                                  //**4PS.en
                                                                  GetDirectCost(FIELDNO("Vendor No."));
                                                                  VALIDATE("Direct Unit Cost");  //**4PS.n
                                                                END;
                                                                "Supply From" := "Vendor No.";

                                                                CreateDim(
                                                                  DATABASE::Vendor,"Vendor No.",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,"Project No.",                     //** 4PS 09-06-2010
                                                                  DATABASE::"Service Order","Service Order No.",  //** 4PS 09-06-2010
                                                                  DATABASE::Location,"Location Code");  //** 4PS.n

                                                                StrategicPurchMgt.FindContractForReqLine(Rec); //**4PS.n
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF LookupVendor(Vend) THEN
                                                                VALIDATE("Vendor No.",Vend."No.");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Vendor No. }
    { 10  ;   ;Direct Unit Cost    ;Decimal       ;OnValidate=VAR
                                                                lvUnitCost@1100525000 : Decimal;
                                                              BEGIN
                                                                //**4PS.sn
                                                                IF "Qty. per Unit of Measure" = 0 THEN
                                                                  lvUnitCost := "Direct Unit Cost"
                                                                ELSE
                                                                  lvUnitCost := "Direct Unit Cost" / "Qty. per Unit of Measure";
                                                                IF "Currency Code" <> '' THEN
                                                                  VALIDATE("Unit Cost (LCY)", CurrExchRate.ExchangeAmtFCYToLCY(
                                                                    0, '', "Order Date","Currency Code",lvUnitCost,"Currency Factor",FALSE))
                                                                ELSE
                                                                  VALIDATE("Unit Cost (LCY)", lvUnitCost);
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Direct Unit Cost;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 12  ;   ;Due Date            ;Date          ;OnValidate=BEGIN
                                                                IF (CurrFieldNo = FIELDNO("Due Date")) OR (CurrentFieldNo = FIELDNO("Due Date")) THEN
                                                                  SetActionMessage;

                                                                IF "Due Date" = 0D THEN
                                                                  EXIT;

                                                                IF (CurrFieldNo = FIELDNO("Due Date")) OR (CurrentFieldNo = FIELDNO("Due Date")) THEN
                                                                  IF (Type = Type::Item) AND
                                                                     ("Planning Level" = 0)
                                                                  THEN
                                                                    VALIDATE(
                                                                      "Ending Date",
                                                                      LeadTimeMgt.PlannedEndingDate("No.","Location Code","Variant Code","Due Date",'',"Ref. Order Type"))
                                                                  ELSE
                                                                    VALIDATE("Ending Date","Due Date");

                                                                CheckDueDateToDemandDate;
                                                              END;

                                                   CaptionML=ENU=Due Date }
    { 13  ;   ;Requester ID        ;Code50        ;TableRelation=User."User Name";
                                                   OnValidate=VAR
                                                                UserMgt@1000 : Codeunit 418;
                                                              BEGIN
                                                                UserMgt.ValidateUserID("Requester ID");
                                                              END;

                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("Requester ID");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Requester ID }
    { 14  ;   ;Confirmed           ;Boolean       ;CaptionML=ENU=Confirmed }
    { 15  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 16  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=VAR
                                                                lvDimValRec@1100485000 : Record 349;
                                                              BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");

                                                                //**4PS01.sn
                                                                IF ("Shortcut Dimension 2 Code" <> '') AND ("Project No." <> '') THEN BEGIN
                                                                  DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", lvDimValRec, TRUE, "Project No.");
                                                                  IF lvDimValRec.Element <> '' THEN
                                                                    VALIDATE(Element, lvDimValRec.Element);
                                                                END;
                                                                CheckAdditionalCostService;  //db, 24-02-10
                                                                //**4PS01.en
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 17  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No),
                                                                                 Project Filter=FIELD(Project No.));
                                                   OnValidate=VAR
                                                                ReqWkshTemplate@1210190000 : Record 244;
                                                              BEGIN
                                                                ValidateLocationChange;
                                                                CheckActionMessageNew;
                                                                "Bin Code" := '';
                                                                ReserveReqLine.VerifyChange(Rec,xRec);

                                                                IF Type = Type::Item THEN BEGIN
                                                                  GetPlanningParameters.AtSKU(SKU,"No.","Variant Code","Location Code");
                                                                  IF Subcontracting THEN
                                                                    SKU."Replenishment System" := SKU."Replenishment System"::"Prod. Order";
                                                                  VALIDATE("Replenishment System",SKU."Replenishment System");
                                                                  IF "Location Code" <> xRec."Location Code" THEN BEGIN
                                                                    IF ("Location Code" <> '') AND ("No." <> '') THEN BEGIN
                                                                      GetLocation("Location Code");
                                                                      IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
                                                                        WMSManagement.GetDefaultBin("No.","Variant Code","Location Code","Bin Code");
                                                                    END;
                                                                    IF "Location Code" = '' THEN
                                                                      UpdateDescription;
                                                                  END;
                                                                  IF ItemVend.GET("Vendor No.","No.","Variant Code") THEN
                                                                    "Vendor Item No." := ItemVend."Vendor Item No.";
                                                                END;

                                                                //**4PS.so
                                                                //GetDirectCost(FIELDNO("Location Code"));  //db, 21-12-10: for SKU price not relevant (ItemCostMgt.UpdateSKUFromItem)
                                                                //**4PS.eo

                                                                //**4PS.sn: 13902
                                                                IF "Location Code" <> '' THEN
                                                                  IF Deliver = Deliver::" " THEN
                                                                    Deliver := Deliver::Location;

                                                                IF Deliver = Deliver::Location THEN
                                                                  VALIDATE("Ship To Location", "Location Code");
                                                                //**4PS.en

                                                                //**4PS.sn, kkleermaker, 110817, M28649
                                                                ReqWkshTemplate.GET("Worksheet Template Name");
                                                                CheckLocation(ReqWkshTemplate);
                                                                //**4PS.en, kkleermaker, 110817, M28649

                                                                //**4PS.sn
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Vendor,"Vendor No.",
                                                                  DATABASE::Job,"Project No.",
                                                                  DATABASE::"Service Order","Service Order No.",
                                                                  DATABASE::Location,"Location Code");  //** 4PS.n
                                                                //**4PS.en

                                                                CALCFIELDS("Shelf No. (SKU)"); //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 18  ;   ;Recurring Method    ;Option        ;CaptionML=ENU=Recurring Method;
                                                   OptionCaptionML=ENU=,Fixed,Variable;
                                                   OptionString=,Fixed,Variable;
                                                   BlankZero=Yes }
    { 19  ;   ;Expiration Date     ;Date          ;CaptionML=ENU=Expiration Date }
    { 20  ;   ;Recurring Frequency ;DateFormula   ;CaptionML=ENU=Recurring Frequency }
    { 21  ;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                "Starting Date" := "Order Date";

                                                                GetDirectCost(FIELDNO("Order Date"));

                                                                IF CurrFieldNo = FIELDNO("Order Date") THEN
                                                                  VALIDATE("Starting Date");
                                                              END;

                                                   CaptionML=ENU=Order Date }
    { 22  ;   ;Vendor Item No.     ;Text20        ;CaptionML=ENU=Vendor Item No. }
    { 23  ;   ;Sales Order No.     ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=CONST(Order));
                                                   OnValidate=BEGIN
                                                                ReserveReqLine.VerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=ENU=Sales Order No.;
                                                   Editable=No }
    { 24  ;   ;Sales Order Line No.;Integer       ;OnValidate=BEGIN
                                                                ReserveReqLine.VerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=ENU=Sales Order Line No.;
                                                   Editable=No }
    { 25  ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                IF "Sell-to Customer No." = '' THEN
                                                                  "Ship-to Code" := ''
                                                                ELSE
                                                                  VALIDATE("Ship-to Code",'');

                                                                ReserveReqLine.VerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=ENU=Sell-to Customer No.;
                                                   Editable=No }
    { 26  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.),
                                                                                               Shipping Address=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                IF "Ship-to Code" <> '' THEN BEGIN
                                                                  ShipToAddr.GET("Sell-to Customer No.","Ship-to Code");
                                                                //  "Location Code" := ShipToAddr."Location Code";  //**4PS.o
                                                                  VALIDATE("Location Code", ShipToAddr."Location Code");  //**4PS.n
                                                                END ELSE BEGIN
                                                                  Cust.GET("Sell-to Customer No.");
                                                                //  "Location Code" := Cust."Location Code";    //**4PS.o
                                                                  VALIDATE("Location Code", Cust."Location Code");      //**4PS.n
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Ship-to Code;
                                                   Editable=No }
    { 28  ;   ;Order Address Code  ;Code10        ;TableRelation="Order Address".Code WHERE (Vendor No.=FIELD(Vendor No.));
                                                   CaptionML=ENU=Order Address Code }
    { 29  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                GetCurrency;
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  TESTFIELD("Order Date");
                                                                  IF PlanningResiliency THEN
                                                                    CheckExchRate;
                                                                  VALIDATE(
                                                                    "Currency Factor",CurrExchRate.ExchangeRate(
                                                                //    "Order Date","Currency Code")); //**4PS.o
                                                                      0, '',"Order Date","Currency Code",FALSE)); //**4PS.n
                                                                END ELSE
                                                                  VALIDATE("Currency Factor",0);
                                                                GetDirectCost(FIELDNO("Currency Code"));
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 30  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Code" <> '' THEN
                                                                  TESTFIELD("Currency Factor");
                                                                IF "Currency Factor" <> xRec."Currency Factor" THEN BEGIN
                                                                  IF xRec."Currency Factor" <> 0 THEN
                                                                    "Direct Unit Cost" :=
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                //      "Order Date",xRec."Currency Code","Direct Unit Cost",xRec."Currency Factor"); //**4PS.o
                                                                        0,'',"Order Date",xRec."Currency Code","Direct Unit Cost",xRec."Currency Factor",FALSE); //**4PS.n
                                                                  IF "Currency Factor" <> 0 THEN
                                                                    "Direct Unit Cost" :=
                                                                      CurrExchRate.ExchangeAmtLCYToFCY(
                                                                //      "Order Date","Currency Code","Direct Unit Cost","Currency Factor");  //**4PS.o
                                                                        0,'',"Order Date","Currency Code","Direct Unit Cost","Currency Factor",FALSE); //**4PS.n
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Currency Factor;
                                                   DecimalPlaces=0:15;
                                                   MinValue=0 }
    { 31  ;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Worksheet Template Name),
                                                                                                       Source Ref. No.=FIELD(Line No.),
                                                                                                       Source Type=CONST(246),
                                                                                                       Source Subtype=CONST(0),
                                                                                                       Source Batch Name=FIELD(Journal Batch Name),
                                                                                                       Source Prod. Order Line=CONST(0),
                                                                                                       Reservation Status=CONST(Reservation)));
                                                   CaptionML=ENU=Reserved Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=No }
    { 5401;   ;Prod. Order No.     ;Code20        ;TableRelation="Production Order".No. WHERE (Status=CONST(Released));
                                                   OnValidate=BEGIN
                                                                AddOnIntegrMgt.ValidateProdOrderOnReqLine(Rec);
                                                                VALIDATE("Unit of Measure Code");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Prod. Order No.;
                                                   Editable=No }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   OnValidate=BEGIN
                                                                IF "Variant Code" <> '' THEN
                                                                  TESTFIELD(Type,Type::Item);
                                                                CheckActionMessageNew;
                                                                ReserveReqLine.VerifyChange(Rec,xRec);

                                                                CALCFIELDS("Reserved Qty. (Base)");
                                                                TESTFIELD("Reserved Qty. (Base)",0);

                                                                //**4PS.so
                                                                //GetDirectCost(FIELDNO("Variant Code"));  //db, 21-12-10: for SKU price not relevant (ItemCostMgt.UpdateSKUFromItem)
                                                                //**4PS.eo

                                                                IF "Variant Code" <> '' THEN BEGIN
                                                                  UpdateDescription;
                                                                  GetPlanningParameters.AtSKU(SKU,"No.","Variant Code","Location Code");
                                                                  IF Subcontracting THEN
                                                                    SKU."Replenishment System" := SKU."Replenishment System"::"Prod. Order";
                                                                  VALIDATE("Replenishment System",SKU."Replenishment System");
                                                                  IF "Variant Code" <> xRec."Variant Code" THEN BEGIN
                                                                    //**4PS.sn
                                                                    IF (Type = Type::Item) AND ("No." <> '') AND ("Prod. Order No." = '') THEN BEGIN
                                                                      ItemVend.SETRANGE("Vendor No.", "Vendor No.");
                                                                      ItemVend.SETRANGE("Item No.", "No.");
                                                                      ItemVend.SETRANGE("Variant Code");
                                                                      IF (ItemVend.FINDLAST) THEN BEGIN
                                                                        "Vendor Item No." := ItemVend."Vendor Item No.";
                                                                        UpdateOrderReceiptDate(ItemVend."Lead Time Calculation");
                                                                      END ELSE
                                                                        "Vendor Item No." := '';
                                                                    END;
                                                                    //**4PS.en
                                                                    "Bin Code" := '';
                                                                    IF ("Location Code" <> '') AND ("No." <> '') THEN BEGIN
                                                                      GetLocation("Location Code");
                                                                      IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
                                                                        WMSManagement.GetDefaultBin("No.","Variant Code","Location Code","Bin Code")
                                                                    END;
                                                                  END;
                                                                  IF ItemVend.GET("Vendor No.","No.","Variant Code") THEN
                                                                    "Vendor Item No." := ItemVend."Vendor Item No.";
                                                                END ELSE
                                                                  VALIDATE("No.");

                                                                CALCFIELDS("Shelf No. (SKU)"); //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                 Item Filter=FIELD(No.),
                                                                                 Variant Filter=FIELD(Variant Code));
                                                   OnValidate=VAR
                                                                WMSManagement@1100526201 : Codeunit 7302;
                                                                LocCode@1100526200 : Code[20];
                                                              BEGIN
                                                                CheckActionMessageNew;
                                                                IF (CurrFieldNo = FIELDNO("Bin Code")) AND
                                                                   ("Action Message" <> "Action Message"::" ")
                                                                THEN
                                                                  TESTFIELD("Action Message","Action Message"::New);
                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("Location Code");
                                                                IF ("Bin Code" <> xRec."Bin Code") AND ("Bin Code" <> '') THEN BEGIN
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Bin Mandatory");
                                                                  Location.TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                  GetBin("Location Code","Bin Code");
                                                                  TESTFIELD("Location Code",Bin."Location Code");
                                                                END;
                                                                ReserveReqLine.VerifyChange(Rec,xRec);

                                                                //**4PS.sn
                                                                LocCode := SetLocationForBin(FALSE);  //db, 19-01-11: M25074 (true->false)
                                                                IF "Bin Code" <> '' THEN
                                                                  WMSManagement.FindBin(LocCode,"Bin Code",'');
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Bin Code }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE "Unit of Measure";
                                                   OnValidate=BEGIN
                                                                CheckActionMessageNew;
                                                                IF (Type = Type::Item) AND
                                                                   ("No." <> '') AND
                                                                   ("Prod. Order No." = '')
                                                                THEN BEGIN
                                                                  GetItem;
                                                                  "Unit Cost" := Item."Unit Cost";
                                                                  "Overhead Rate" := Item."Overhead Rate";
                                                                  "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                                                  IF "Unit of Measure Code" <> '' THEN BEGIN
                                                                    "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                                                    "Unit Cost" := ROUND(Item."Unit Cost" * "Qty. per Unit of Measure",0.00001);
                                                                    "Overhead Rate" := ROUND(Item."Overhead Rate" * "Qty. per Unit of Measure",0.00001);
                                                                  END ELSE
                                                                    "Qty. per Unit of Measure" := 1;
                                                                END ELSE
                                                                  IF "Prod. Order No." = '' THEN
                                                                    "Qty. per Unit of Measure" := 1
                                                                  ELSE
                                                                    "Qty. per Unit of Measure" := 0;
                                                                //**4PS.sn
                                                                IF "Trade Item" <> '' THEN BEGIN
                                                                  TradeItemRec.GET("Vendor (Trade Item)", "Trade Item");
                                                                  //IF TradeItemRec."Qty. per Unit of Measure" <> 1 THEN
                                                                  //  TESTFIELD("Unit of Measure Code", UPPERCASE(TradeItemRec."Application Unit"));  //db, 16-04-15: C020734
                                                                END;
                                                                IF CurrFieldNo = FIELDNO("Unit of Measure Code") THEN BEGIN  //db, 16-04-15: C020734
                                                                  IF "Qty. per Unit of Measure" > xRec."Qty. per Unit of Measure" THEN BEGIN
                                                                    IF "Qty. per Unit of Measure" <> 0 THEN
                                                                      Quantity := ROUND(Quantity / "Qty. per Unit of Measure", 1, '>');
                                                                  END ELSE BEGIN
                                                                    IF xRec."Qty. per Unit of Measure" <> 0 THEN
                                                                      Quantity := Quantity * xRec."Qty. per Unit of Measure";
                                                                  END;
                                                                END;
                                                                //**4PS.en
                                                                GetDirectCost(FIELDNO("Unit of Measure Code"));

                                                                IF "Planning Line Origin" = "Planning Line Origin"::"Order Planning" THEN
                                                                  SetSupplyQty("Demand Quantity (Base)","Needed Quantity (Base)")
                                                                ELSE
                                                                  VALIDATE(Quantity);
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;  //**4PS.n
                                                            END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 5408;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Prod. Order No.",'');
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                              END;

                                                   CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 5431;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Worksheet Template Name),
                                                                                                                Source Ref. No.=FIELD(Line No.),
                                                                                                                Source Type=CONST(246),
                                                                                                                Source Subtype=CONST(0),
                                                                                                                Source Batch Name=FIELD(Journal Batch Name),
                                                                                                                Source Prod. Order Line=CONST(0),
                                                                                                                Reservation Status=CONST(Reservation)));
                                                   CaptionML=ENU=Reserved Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5520;   ;Demand Type         ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Table));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Demand Type;
                                                   Editable=No }
    { 5521;   ;Demand Subtype      ;Option        ;CaptionML=ENU=Demand Subtype;
                                                   OptionCaptionML=ENU=0,1,2,3,4,5,6,7,8,9;
                                                   OptionString=0,1,2,3,4,5,6,7,8,9;
                                                   Editable=No }
    { 5522;   ;Demand Order No.    ;Code20        ;CaptionML=ENU=Demand Order No.;
                                                   Editable=No }
    { 5525;   ;Demand Line No.     ;Integer       ;CaptionML=ENU=Demand Line No.;
                                                   Editable=No }
    { 5526;   ;Demand Ref. No.     ;Integer       ;CaptionML=ENU=Demand Ref. No.;
                                                   Editable=No }
    { 5527;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                   OptionString=0,1,2,3,4,5,6,7,8,9,10;
                                                   Editable=No }
    { 5530;   ;Demand Date         ;Date          ;CaptionML=ENU=Demand Date;
                                                   Editable=No }
    { 5532;   ;Demand Quantity     ;Decimal       ;CaptionML=ENU=Demand Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5533;   ;Demand Quantity (Base);Decimal     ;CaptionML=ENU=Demand Quantity (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5538;   ;Needed Quantity     ;Decimal       ;CaptionML=ENU=Needed Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5539;   ;Needed Quantity (Base);Decimal     ;CaptionML=ENU=Needed Quantity (Base);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5540;   ;Reserve             ;Boolean       ;OnValidate=BEGIN
                                                                GetItem;
                                                                IF Item.Reserve <> Item.Reserve::Optional THEN
                                                                  TESTFIELD(Reserve,Item.Reserve = Item.Reserve::Always);
                                                                IF Reserve AND
                                                                   ("Demand Type" = DATABASE::"Prod. Order Component") AND
                                                                   ("Demand Subtype" = ProdOrderCapNeed.Status::Planned)
                                                                THEN
                                                                  ERROR(Text030);
                                                                TESTFIELD("Planning Level",0);
                                                                TESTFIELD("Planning Line Origin","Planning Line Origin"::"Order Planning");
                                                              END;

                                                   CaptionML=ENU=Reserve }
    { 5541;   ;Qty. per UOM (Demand);Decimal      ;CaptionML=ENU=Qty. per UOM (Demand);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5542;   ;Unit Of Measure Code (Demand);Code10;
                                                   TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=ENU=Unit Of Measure Code (Demand);
                                                   Editable=No }
    { 5552;   ;Supply From         ;Code20        ;TableRelation=IF (Replenishment System=CONST(Purchase)) Vendor
                                                                 ELSE IF (Replenishment System=CONST(Transfer)) Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                CASE "Replenishment System" OF
                                                                  "Replenishment System"::Purchase:
                                                                    VALIDATE("Vendor No.","Supply From");
                                                                  "Replenishment System"::Transfer:
                                                                    VALIDATE("Transfer-from Code","Supply From");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CASE "Replenishment System" OF
                                                                "Replenishment System"::Purchase:
                                                                  IF LookupVendor(Vend) THEN
                                                                    VALIDATE("Supply From",Vend."No.");
                                                                "Replenishment System"::Transfer:
                                                                  IF LookupFromLocation(Location) THEN
                                                                    VALIDATE("Supply From",Location.Code);
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Supply From }
    { 5553;   ;Original Item No.   ;Code20        ;TableRelation=Item;
                                                   CaptionML=ENU=Original Item No.;
                                                   Editable=No }
    { 5554;   ;Original Variant Code;Code10       ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Original Item No.));
                                                   CaptionML=ENU=Original Variant Code;
                                                   Editable=No }
    { 5560;   ;Level               ;Integer       ;CaptionML=ENU=Level;
                                                   Editable=No }
    { 5563;   ;Demand Qty. Available;Decimal      ;CaptionML=ENU=Demand Qty. Available;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5590;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=ENU=User ID;
                                                   Editable=No }
    { 5701;   ;Item Category Code  ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Category";
                                                   CaptionML=ENU=Item Category Code }
    { 5702;   ;Nonstock            ;Boolean       ;CaptionML=ENU=Nonstock }
    { 5703;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   CaptionML=ENU=Purchasing Code }
    { 5705;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=ENU=Product Group Code }
    { 5706;   ;Transfer-from Code  ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                CheckActionMessageNew;
                                                                "Supply From" := "Transfer-from Code";
                                                              END;

                                                   CaptionML=ENU=Transfer-from Code;
                                                   Editable=No }
    { 5707;   ;Transfer Shipment Date;Date        ;AccessByPermission=TableData 5740=R;
                                                   CaptionML=ENU=Transfer Shipment Date;
                                                   Editable=No }
    { 7002;   ;Line Discount %     ;Decimal       ;CaptionML=ENU=Line Discount %;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 7100;   ;Blanket Purch. Order Exists;Boolean;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purchase Line" WHERE (Document Type=CONST(Blanket Order),
                                                                                            Type=CONST(Item),
                                                                                            No.=FIELD(No.),
                                                                                            Outstanding Quantity=FILTER(<>0)));
                                                   CaptionML=ENU=Blanket Purch. Order Exists;
                                                   Editable=No }
    { 11012000;;Purchase Action    ;Code10        ;TableRelation="Project Purchase Action".Code WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Purchase Action }
    { 11012010;;Purchase Phase     ;Code10        ;CaptionML=ENU=Purchase Phase;
                                                   Numeric=Yes }
    { 11012020;;Project No.        ;Code20        ;TableRelation=Job.No.;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Project No." <> xRec."Project No.") AND ("Project No." <> '') THEN BEGIN
                                                                  IF CurrFieldNo = FIELDNO("Project No.") THEN  //db, 01-06-05: prevent other vendor choice at indirect validation
                                                                    ValidateVendor;
                                                                  IF CurrFieldNo = FIELDNO("Project No.") THEN
                                                                    GetDefaultLocation;   //db, 02-11-10
                                                                END;

                                                                CreateDim(
                                                                  DATABASE::Job,"Project No.",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Vendor,"Vendor No.",                   //** 4PS 09-06-2010
                                                                  DATABASE::"Service Order","Service Order No.",  //** 4PS 09-06-2010
                                                                  DATABASE::Location,"Location Code");  //** 4PS.n

                                                                StrategicPurchMgt.FindContractForReqLine(Rec); //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Project No. }
    { 11012030;;Element            ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                ElementFormat.FormatElem(Element,2,'');
                                                                IF Element <> '' THEN BEGIN
                                                                  ProjElemRec.GET("Project No.",Element);
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 11012035;;Extension Contract ;Code10        ;TableRelation="Extension Contract"."Contract No." WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=VAR
                                                                ExtensionContract@1210190000 : Record 11012004;
                                                              BEGIN
                                                                //Call 21488
                                                                IF "Extension Contract" <> '' THEN BEGIN
                                                                  ExtensionContract.GET("Project No.", "Extension Contract");
                                                                  IF ExtensionContract.Status = ExtensionContract.Status::Expired THEN
                                                                    ExtensionContract.FIELDERROR(Status);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Extension Contract }
    { 11012040;;Ship To Location   ;Code20        ;TableRelation=IF (Deliver=CONST(Project Location)) "Project Location".Code WHERE (Project No.=FIELD(Project No.))
                                                                 ELSE IF (Deliver=CONST(Location)) Location.Code
                                                                 ELSE IF (Deliver=CONST(Service Location)) "Service Order Location".Code WHERE (Service Order No.=FIELD(Service Order No.));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF Deliver = Deliver::"Service Location" THEN BEGIN
                                                                  ServOrderRec.GET("Service Order No.");
                                                                  ServOrderRec.TESTFIELD("Service Location No.");  //db, 22-09-09: M16539
                                                                END;

                                                                //db.sn, 02-11-10
                                                                IF Deliver = Deliver::Location THEN BEGIN
                                                                  IF ("Ship To Location" <> xRec."Ship To Location") AND ("Ship To Location" <> '') THEN BEGIN
                                                                    "Location Code":= "Ship To Location";
                                                                    "Bin Code" := GetDefaultBin("Ship To Location");
                                                                     SetLocationForBin(TRUE);  //check PrefLoc binding

                                                                     //** 4PS 09-06-2010 sn
                                                                     CreateDim(
                                                                       DATABASE::"Service Order","Service Order No.",
                                                                       DATABASE::Job,"Project No.",
                                                                       DimMgt.TypeToTableID3(Type),"No.",
                                                                       DATABASE::Vendor,"Vendor No.",
                                                                       DATABASE::Location,"Location Code");  //** 4PS.n
                                                                     //** 4PS 09-06-2010 en
                                                                  END;
                                                                END;
                                                                //db.en, 02-11-10
                                                              END;

                                                   CaptionML=ENU=Ship To Location }
    { 11012050;;Deliver            ;Option        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF Deliver <> xRec.Deliver THEN
                                                                  "Ship To Location" := '';

                                                                IF Deliver = Deliver::Location THEN
                                                                  "Ship To Location" := "Location Code";
                                                                IF Deliver = Deliver::"Service Location" THEN BEGIN
                                                                  ServOrderRec.GET("Service Order No.");
                                                                  ServOrderRec.TESTFIELD("Service Location No.");  //db, 22-09-09: M16539
                                                                END;
                                                                IF Deliver = Deliver::"Project Location" THEN
                                                                  TESTFIELD("Service Order No.", '');
                                                              END;

                                                   CaptionML=ENU=Deliver;
                                                   OptionCaptionML=ENU=" ,Location,Project Location,Service Location";
                                                   OptionString=[ ,Location,Project Location,Service Location] }
    { 11012070;;Basic Item         ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN BEGIN
                                                                  ValidateItem(ItemTypeOpt::"Basic Item");
                                                                  IF CurrFieldNo = FIELDNO("Basic Item") THEN  //db, 01-06-05: prevent other vendor choice at indirect validation
                                                                    ValidateVendor;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Basic Item }
    { 11012080;;Trade Item         ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::"Trade Item");

                                                                StrategicPurchMgt.FindContractForReqLine(Rec); //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Trade Item }
    { 11012100;;Manufacturer       ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Manufacturer }
    { 11012110;;Vendor (Trade Item);Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=VAR
                                                                TradeVendorRec@1100525000 : Record 11012304;
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                //**4PS
                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") AND ("Vendor (Trade Item)" <> '') THEN BEGIN
                                                                  TradeVendorRec.HandleVendorValidate("Vendor (Trade Item)");  //db, 23-02-10: T4165
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  //db.sn, 09-12-10: M22751
                                                                  IF lvExecValidate THEN BEGIN
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item")
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor");
                                                                  END;
                                                                  //db.en, 09-12-10: M22751
                                                                  CheckVendorRelation(FIELDNO("Vendor (Trade Item)"));  //db, 07-05-09
                                                                  VALIDATE("Cost Amount"); //**4PSmg, 29-03-11: M26385
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 11012120;;Sort Purchase      ;Code100       ;CaptionML=ENU=Sort Purchase;
                                                   Editable=No }
    { 11012125;;Item Composition   ;Text55        ;CaptionML=ENU=Item Composition }
    { 11012130;;Service Order No.  ;Code20        ;TableRelation="Service Order";
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Service Order No." <> '' THEN BEGIN
                                                                  ServOrderRec.GET("Service Order No.");
                                                                  IF CurrFieldNo <> 0 THEN
                                                                    ServOrderRec.CheckStatus(1)
                                                                  ELSE
                                                                    ServOrderRec.CheckStatus(0);
                                                                  CheckAdditionalCostService;  //db, 24-02-10
                                                                END;

                                                                //** 4PS 09-06-2010 sn
                                                                CreateDim(
                                                                  DATABASE::"Service Order","Service Order No.",
                                                                  DATABASE::Job,"Project No.",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Vendor,"Vendor No.",
                                                                  DATABASE::Location,"Location Code");  //** 4PS.n

                                                                //** 4PS 09-06-2010 en
                                                              END;

                                                   CaptionML=ENU=Service Order No. }
    { 11012140;;Decentral Created Guid;Text32     ;CaptionML=ENU=Decentral Created Guid;
                                                   Editable=No }
    { 11012160;;Text               ;Text250       ;OnValidate=BEGIN
                                                                //**4PS
                                                                "Text Block" := Text <> '';
                                                              END;

                                                   CaptionML=ENU=Text }
    { 11012161;;Text Block         ;Boolean       ;CaptionML=ENU=Text Block;
                                                   Editable=No }
    { 11012170;;Purchase Route Reference;Code20   ;CaptionML=ENU=Purchase Route Reference;
                                                   Editable=No }
    { 11012180;;Price Agreement    ;Boolean       ;OnValidate=BEGIN
                                                                //**4PS
                                                                PurchSetup.GET;
                                                                IF PurchSetup."Price Agreement" = PurchSetup."Price Agreement"::" " THEN
                                                                  TESTFIELD("Price Agreement", FALSE);
                                                                IF PurchSetup."Price Agreement" = PurchSetup."Price Agreement"::Company THEN
                                                                  TESTFIELD("Price Agreement", TRUE);
                                                              END;

                                                   CaptionML=ENU=Price Agreement }
    { 11012200;;Created by         ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1210190000 : Codeunit 418;
                                                            BEGIN
                                                              //**4PS
                                                              UserCode := "Created by";
                                                              UserMgt.LookupUserID(UserCode);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Created by;
                                                   Editable=No }
    { 11012205;;Date Created       ;Date          ;CaptionML=ENU=Date Created;
                                                   Editable=No }
    { 11012210;;Modified by        ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1210190000 : Codeunit 418;
                                                            BEGIN
                                                              //**4PS
                                                              UserCode := "Modified by";
                                                              UserMgt.LookupUserID(UserCode);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Modified by;
                                                   Editable=No }
    { 11012215;;Last Date Modified ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=No }
    { 11012220;;Cost Type          ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Dimension Value"."Cost Type" WHERE (Code=FIELD(Shortcut Dimension 2 Code),
                                                                                                           Global Dimension No.=CONST(2)));
                                                   CaptionML=ENU=Cost Type;
                                                   OptionCaptionML=ENU=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                   Editable=No }
    { 11012230;;Cost Component     ;Code20        ;TableRelation="Cost Component".Code;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                ValidateCostComponent;
                                                                IF CurrFieldNo <> FIELDNO("Cost Component") THEN BEGIN
                                                                  IF "Shortcut Dimension 2 Code" = '' THEN
                                                                    "Cost Type" := -1
                                                                  ELSE
                                                                    CALCFIELDS("Cost Type");
                                                                  CostCompRec.CheckDefaultCostComponent("Service Order No.", "Cost Component", '', "Cost Type",
                                                                    "Additional Cost (Service)");  //db, 24-02-10
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Component }
    { 11012240;;Shelf No. (Item)   ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Item."Shelf No." WHERE (No.=FIELD(No.)));
                                                   CaptionML=ENU=Shelf No. (Item);
                                                   Editable=No }
    { 11012245;;Shelf No. (SKU)    ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Stockkeeping Unit"."Shelf No." WHERE (Item No.=FIELD(No.),
                                                                                                             Variant Code=FIELD(Variant Code),
                                                                                                             Location Code=FIELD(Location Code)));
                                                   CaptionML=ENU=Shelf No. (SKU);
                                                   Editable=No }
    { 11012250;;Order Multiple     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Item."Order Multiple" WHERE (No.=FIELD(No.)));
                                                   CaptionML=ENU=Order Multiple;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 11012260;;Unit Cost (LCY)    ;Decimal       ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF (CurrFieldNo = FIELDNO("Direct Unit Cost")) OR (CurrFieldNo = FIELDNO("Unit Cost (LCY)")) THEN
                                                                  IF ("Trade Item" = '') AND (Type = Type::"G/L Account") THEN
                                                                    IF "Discount % (Item)" = 0 THEN
                                                                      "Unit Price (LCY)" := "Unit Cost (LCY)";  //db, 14-08-09: M15953

                                                                CalculateItemDiscount;
                                                                VALIDATE("Cost Amount");
                                                              END;

                                                   CaptionML=ENU=Unit Cost (LCY);
                                                   AutoFormatType=2 }
    { 11012270;;Unit Price (LCY)   ;Decimal       ;OnValidate=BEGIN
                                                                //**4PS
                                                                CalculateCostPriceLCY;
                                                              END;

                                                   CaptionML=ENU=Unit Price (LCY);
                                                   AutoFormatType=2 }
    { 11012275;;Discount % (Item)  ;Decimal       ;OnValidate=BEGIN
                                                                //**4PS
                                                                CalculateCostPriceLCY;
                                                              END;

                                                   CaptionML=ENU=Discount % (Item);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 11012280;;Comments for Logistics;Text50     ;CaptionML=ENU=Comments for Logistics }
    { 11012290;;Sales Price        ;Decimal       ;CaptionML=ENU=Sales Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 11012300;;Use Blanket Order  ;Boolean       ;OnValidate=BEGIN
                                                                SetRefOrderNo; //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Use Blanket Order }
    { 11012301;;Contract Type      ;Option        ;CaptionML=ENU=Contract Found In;
                                                   OptionCaptionML=ENU=No Contract,Contract,Contract with Discount Agreement,General Blanket Order,Project Blanket Order,Service Blanket Order;
                                                   OptionString=No Contract,Contract,Contract with Discount Agreement,General Blanket Order,Project Blanket Order,Service Blanket Order;
                                                   Editable=No }
    { 11012310;;FSC Type Code      ;Code10        ;TableRelation="FSC Type";
                                                   CaptionML=ENU=FSC Type Code }
    { 11012400;;Tender Paragraph   ;Text10        ;TableRelation="Project Tender Paragraph"."Tender Paragraph" WHERE (Project No.=FIELD(Project No.),
                                                                                                                      Level=CONST(Tender Paragraph));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                GWWMgtCU.FormatTenderElement("Tender Paragraph");
                                                              END;

                                                   CaptionML=ENU=Tender Paragraph }
    { 11012405;;Description Tender Paragraph;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Tender Paragraph".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                                    Tender Paragraph=FIELD(Tender Paragraph)));
                                                   CaptionML=ENU=Description Tender Paragraph;
                                                   Editable=No }
    { 11012406;;Tender Paragraph Text;Text80      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Tender Paragraph Text".Text WHERE (Project No.=FIELD(Project No.),
                                                                                                                  Tender Paragraph=FIELD(Tender Paragraph)));
                                                   CaptionML=ENU=Tender Paragraph Text;
                                                   Editable=No }
    { 11012410;;Tender Paragraph Part;Text10      ;TableRelation="Project Tender Paragraph Part"."Tender Paragraph Part" WHERE (Project No.=FIELD(Project No.),
                                                                                                                                Tender Paragraph=FIELD(Tender Paragraph));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                GWWMgtCU.FormatTenderElementPart("Tender Paragraph Part");
                                                              END;

                                                   CaptionML=ENU=Tender Paragraph Part }
    { 11012415;;Descr Tender Paragraph Part;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Tender Paragraph Part".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                                         Tender Paragraph=FIELD(Tender Paragraph),
                                                                                                                         Tender Paragraph Part=FIELD(Tender Paragraph Part)));
                                                   CaptionML=ENU=Description Tender Paragraph Part;
                                                   Editable=No }
    { 11012805;;Additional Cost (Service);Boolean ;OnValidate=BEGIN
                                                                //**4PS
                                                                ValidateAdditionalCost;
                                                              END;

                                                   CaptionML=ENU=Additional Cost (Service) }
    { 11012806;;Scheme Code        ;Code15        ;CaptionML=ENU=Scheme Code }
    { 11012807;;Plot No.           ;Code10        ;TableRelation=Plot."Plot No." WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Plot No. }
    { 11012810;;Requested Receipt Date;Date       ;CaptionML=ENU=Requested Receipt Date }
    { 11012900;;Entity Type        ;Option        ;CaptionML=ENU=Entity Type;
                                                   OptionCaptionML=ENU=None,Cable,Device,Extra Need,Cable Transit,,,,,Position;
                                                   OptionString=None,Cable,Device,ExtraNeed,CableTransit,,,,,Position;
                                                   Description=Engineering;
                                                   Editable=No }
    { 11012910;;System No.         ;Code20        ;CaptionML=ENU=System No.;
                                                   Description=Engineering;
                                                   Editable=No }
    { 11012920;;Entity No.         ;Code20        ;CaptionML=ENU=Entity No. 2;
                                                   Description=Engineering;
                                                   Editable=No }
    { 11012930;;Gland Position     ;Option        ;CaptionML=ENU=Cable Gland Postion;
                                                   OptionCaptionML=ENU=" ,From Side,To Side";
                                                   OptionString=[ ,From,To];
                                                   Description=Engineering;
                                                   Editable=No }
    { 11012940;;Yard No.           ;Code20        ;CaptionML=ENU=Yard No.;
                                                   Description=Engineering;
                                                   Editable=No }
    { 99000750;;Routing No.        ;Code20        ;TableRelation="Routing Header";
                                                   OnValidate=VAR
                                                                RtngDate@1000 : Date;
                                                              BEGIN
                                                                CheckActionMessageNew;
                                                                "Routing Version Code" := '';

                                                                IF "Routing No." = '' THEN
                                                                  EXIT;

                                                                IF CurrFieldNo = FIELDNO("Starting Date") THEN
                                                                  RtngDate := "Starting Date"
                                                                ELSE
                                                                  RtngDate := "Ending Date";

                                                                VALIDATE("Routing Version Code",VersionMgt.GetRtngVersion("Routing No.",RtngDate,TRUE));
                                                                IF "Routing Version Code" = '' THEN BEGIN
                                                                  RtngHeader.GET("Routing No.");
                                                                  IF PlanningResiliency AND (RtngHeader.Status <> RtngHeader.Status::Certified) THEN
                                                                    TempPlanningErrorLog.SetError(
                                                                      STRSUBSTNO(Text033,RtngHeader.TABLECAPTION,RtngHeader.FIELDCAPTION("No."),RtngHeader."No."),
                                                                      DATABASE::"Routing Header",RtngHeader.GETPOSITION);
                                                                  RtngHeader.TESTFIELD(Status,RtngHeader.Status::Certified);
                                                                  "Routing Type" := RtngHeader.Type;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Routing No. }
    { 99000751;;Operation No.      ;Code10        ;TableRelation="Prod. Order Routing Line"."Operation No." WHERE (Status=CONST(Released),
                                                                                                                   Prod. Order No.=FIELD(Prod. Order No.),
                                                                                                                   Routing No.=FIELD(Routing No.));
                                                   OnValidate=VAR
                                                                ProdOrderRtngLine@1000 : Record 5409;
                                                              BEGIN
                                                                IF "Operation No." = '' THEN
                                                                  EXIT;

                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("Prod. Order No.");
                                                                TESTFIELD("Routing No.");

                                                                ProdOrderRtngLine.GET(
                                                                  ProdOrderRtngLine.Status::Released,
                                                                  "Prod. Order No.",
                                                                  "Routing Reference No.",
                                                                  "Routing No.","Operation No.");

                                                                ProdOrderRtngLine.TESTFIELD(
                                                                  Type,
                                                                  ProdOrderRtngLine.Type::"Work Center");

                                                                "Due Date" := ProdOrderRtngLine."Ending Date";
                                                                CheckDueDateToDemandDate;

                                                                VALIDATE("Work Center No.",ProdOrderRtngLine."No.");

                                                                VALIDATE("Direct Unit Cost",ProdOrderRtngLine."Direct Unit Cost");
                                                              END;

                                                   CaptionML=ENU=Operation No. }
    { 99000752;;Work Center No.    ;Code20        ;TableRelation="Work Center";
                                                   OnValidate=BEGIN
                                                                GetWorkCenter;
                                                                VALIDATE("Vendor No.",WorkCenter."Subcontractor No.");
                                                              END;

                                                   CaptionML=ENU=Work Center No. }
    { 99000754;;Prod. Order Line No.;Integer      ;TableRelation="Prod. Order Line"."Line No." WHERE (Status=CONST(Finished),
                                                                                                      Prod. Order No.=FIELD(Prod. Order No.));
                                                   CaptionML=ENU=Prod. Order Line No.;
                                                   Editable=No }
    { 99000755;;MPS Order          ;Boolean       ;CaptionML=ENU=MPS Order }
    { 99000756;;Planning Flexibility;Option       ;OnValidate=BEGIN
                                                                IF "Planning Flexibility" <> xRec."Planning Flexibility" THEN
                                                                  ReserveReqLine.UpdatePlanningFlexibility(Rec);
                                                              END;

                                                   CaptionML=ENU=Planning Flexibility;
                                                   OptionCaptionML=ENU=Unlimited,None;
                                                   OptionString=Unlimited,None }
    { 99000757;;Routing Reference No.;Integer     ;CaptionML=ENU=Routing Reference No. }
    { 99000882;;Gen. Prod. Posting Group;Code10   ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 99000883;;Gen. Business Posting Group;Code10;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=ENU=Gen. Business Posting Group }
    { 99000884;;Low-Level Code     ;Integer       ;AccessByPermission=TableData 5405=R;
                                                   CaptionML=ENU=Low-Level Code;
                                                   Editable=No }
    { 99000885;;Production BOM Version Code;Code20;TableRelation="Production BOM Version"."Version Code" WHERE (Production BOM No.=FIELD(Production BOM No.));
                                                   OnValidate=BEGIN
                                                                CheckActionMessageNew;
                                                                IF "Production BOM Version Code" = '' THEN
                                                                  EXIT;

                                                                ProdBOMVersion.GET("Production BOM No.","Production BOM Version Code");
                                                                IF PlanningResiliency AND (ProdBOMVersion.Status <> ProdBOMVersion.Status::Certified) THEN
                                                                  TempPlanningErrorLog.SetError(
                                                                    STRSUBSTNO(
                                                                      Text034,ProdBOMVersion.TABLECAPTION,
                                                                      ProdBOMVersion.FIELDCAPTION("Production BOM No."),ProdBOMVersion."Production BOM No.",
                                                                      ProdBOMVersion.FIELDCAPTION("Version Code"),ProdBOMVersion."Version Code"),
                                                                    DATABASE::"Production BOM Version",ProdBOMVersion.GETPOSITION);
                                                                ProdBOMVersion.TESTFIELD(Status,ProdBOMVersion.Status::Certified);
                                                              END;

                                                   CaptionML=ENU=Production BOM Version Code }
    { 99000886;;Routing Version Code;Code20       ;TableRelation="Routing Version"."Version Code" WHERE (Routing No.=FIELD(Routing No.));
                                                   OnValidate=BEGIN
                                                                CheckActionMessageNew;
                                                                IF "Routing Version Code" = '' THEN
                                                                  EXIT;

                                                                RtngVersion.GET("Routing No.","Routing Version Code");
                                                                IF PlanningResiliency AND (RtngVersion.Status <> RtngVersion.Status::Certified) THEN
                                                                  TempPlanningErrorLog.SetError(
                                                                    STRSUBSTNO(
                                                                      Text034,RtngVersion.TABLECAPTION,
                                                                      RtngVersion.FIELDCAPTION("Routing No."),RtngVersion."Routing No.",
                                                                      RtngVersion.FIELDCAPTION("Version Code"),RtngVersion."Version Code"),
                                                                    DATABASE::"Routing Version",RtngVersion.GETPOSITION);
                                                                RtngVersion.TESTFIELD(Status,RtngVersion.Status::Certified);
                                                                "Routing Type" := RtngVersion.Type;
                                                              END;

                                                   CaptionML=ENU=Routing Version Code }
    { 99000887;;Routing Type       ;Option        ;CaptionML=ENU=Routing Type;
                                                   OptionCaptionML=ENU=Serial,Parallel;
                                                   OptionString=Serial,Parallel }
    { 99000888;;Original Quantity  ;Decimal       ;CaptionML=ENU=Original Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 99000889;;Finished Quantity  ;Decimal       ;CaptionML=ENU=Finished Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 99000890;;Remaining Quantity ;Decimal       ;CaptionML=ENU=Remaining Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 99000891;;Original Due Date  ;Date          ;CaptionML=ENU=Original Due Date;
                                                   Editable=No }
    { 99000892;;Scrap %            ;Decimal       ;AccessByPermission=TableData 5405=R;
                                                   CaptionML=ENU=Scrap %;
                                                   DecimalPlaces=0:5 }
    { 99000894;;Starting Date      ;Date          ;OnValidate=BEGIN
                                                                IF Type = Type::Item THEN BEGIN
                                                                  GetWorkCenter;
                                                                  IF NOT Subcontracting THEN BEGIN
                                                                    VALIDATE("Production BOM No.");
                                                                    VALIDATE("Routing No.");
                                                                  END;
                                                                  VALIDATE("Starting Time");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Starting Date }
    { 99000895;;Starting Time      ;Time          ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::Item);
                                                                IF ReqLine.GET("Worksheet Template Name","Journal Batch Name","Line No.") THEN
                                                                  PlngLnMgt.Recalculate(Rec,0)
                                                                ELSE
                                                                  CalcEndingDate('');

                                                                CheckEndingDate(ValidateFields);
                                                                SetDueDate;
                                                                SetActionMessage;
                                                                UpdateDatetime;
                                                              END;

                                                   CaptionML=ENU=Starting Time }
    { 99000896;;Ending Date        ;Date          ;OnValidate=BEGIN
                                                                CheckEndingDate(ValidateFields);

                                                                IF Type = Type::Item THEN BEGIN
                                                                  VALIDATE("Ending Time");
                                                                  GetWorkCenter;
                                                                  IF NOT Subcontracting THEN BEGIN
                                                                    VALIDATE("Production BOM No.");
                                                                    VALIDATE("Routing No.");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Ending Date }
    { 99000897;;Ending Time        ;Time          ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::Item);
                                                                IF ReqLine.GET("Worksheet Template Name","Journal Batch Name","Line No.") THEN
                                                                  PlngLnMgt.Recalculate(Rec,1)
                                                                ELSE
                                                                  CalcStartingDate('');

                                                                IF (CurrFieldNo IN [FIELDNO("Ending Date"),FIELDNO("Ending Date-Time")]) AND (CurrentFieldNo <> FIELDNO("Due Date")) THEN
                                                                  SetDueDate;
                                                                SetActionMessage;
                                                                IF "Ending Time" = 0T THEN BEGIN
                                                                  MfgSetup.GET;
                                                                  "Ending Time" := MfgSetup."Normal Ending Time";
                                                                END;
                                                                UpdateDatetime;
                                                              END;

                                                   CaptionML=ENU=Ending Time }
    { 99000898;;Production BOM No. ;Code20        ;TableRelation="Production BOM Header".No.;
                                                   OnValidate=VAR
                                                                BOMDate@1000 : Date;
                                                              BEGIN
                                                                TESTFIELD(Type,Type::Item);
                                                                CheckActionMessageNew;
                                                                "Production BOM Version Code" := '';
                                                                IF "Production BOM No." = '' THEN
                                                                  EXIT;

                                                                IF CurrFieldNo = FIELDNO("Starting Date") THEN
                                                                  BOMDate := "Starting Date"
                                                                ELSE
                                                                  BOMDate := "Ending Date";

                                                                VALIDATE("Production BOM Version Code",VersionMgt.GetBOMVersion("Production BOM No.",BOMDate,TRUE));
                                                                IF "Production BOM Version Code" = '' THEN BEGIN
                                                                  ProdBOMHeader.GET("Production BOM No.");
                                                                  IF PlanningResiliency AND (ProdBOMHeader.Status <> ProdBOMHeader.Status::Certified) THEN
                                                                    TempPlanningErrorLog.SetError(
                                                                      STRSUBSTNO(
                                                                        Text033,
                                                                        ProdBOMHeader.TABLECAPTION,
                                                                        ProdBOMHeader.FIELDCAPTION("No."),ProdBOMHeader."No."),
                                                                      DATABASE::"Production BOM Header",ProdBOMHeader.GETPOSITION);

                                                                  ProdBOMHeader.TESTFIELD(Status,ProdBOMHeader.Status::Certified);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Production BOM No. }
    { 99000899;;Indirect Cost %    ;Decimal       ;CaptionML=ENU=Indirect Cost %;
                                                   DecimalPlaces=0:5 }
    { 99000900;;Overhead Rate      ;Decimal       ;CaptionML=ENU=Overhead Rate;
                                                   DecimalPlaces=0:5 }
    { 99000901;;Unit Cost          ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("No.");

                                                                Item.GET("No.");
                                                                IF Item."Costing Method" = Item."Costing Method"::Standard THEN BEGIN
                                                                  IF CurrFieldNo = FIELDNO("Unit Cost") THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Unit Cost"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                  "Unit Cost" := Item."Unit Cost" * "Qty. per Unit of Measure";
                                                                END;
                                                                "Cost Amount" := ROUND("Unit Cost" * Quantity);
                                                              END;

                                                   CaptionML=ENU=Unit Cost;
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 99000902;;Cost Amount        ;Decimal       ;OnValidate=BEGIN
                                                                "Cost Amount" := ROUND("Unit Cost (LCY)" * Quantity * "Qty. per Unit of Measure");  //**4PS.n   (db, 16-04-15: C020734)
                                                              END;

                                                   CaptionML=ENU=Cost Amount;
                                                   MinValue=0;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 99000903;;Replenishment System;Option       ;OnValidate=VAR
                                                                AsmHeader@1000 : Record 900;
                                                                NoSeriesMgt@1001 : Codeunit 396;
                                                              BEGIN
                                                                TESTFIELD(Type,Type::Item);
                                                                CheckActionMessageNew;
                                                                IF ValidateFields AND
                                                                   ("Replenishment System" = xRec."Replenishment System") AND
                                                                   ("No." = xRec."No.") AND
                                                                   ("Location Code" = xRec."Location Code") AND
                                                                   ("Variant Code" = xRec."Variant Code")
                                                                THEN
                                                                  EXIT;

                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("No.");
                                                                GetItem;
                                                                GetPlanningParameters.AtSKU(SKU,"No.","Variant Code","Location Code");
                                                                IF Subcontracting THEN
                                                                  SKU."Replenishment System" := SKU."Replenishment System"::"Prod. Order";

                                                                "Supply From" := '';

                                                                CASE "Replenishment System" OF
                                                                  "Replenishment System"::Purchase:
                                                                    BEGIN
                                                                      "Ref. Order Type" := "Ref. Order Type"::Purchase;
                                                                      CLEAR("Ref. Order Status");
                                                                      "Ref. Order No." := '';
                                                                      DeleteRelations;
                                                                      VALIDATE("Production BOM No.",'');
                                                                      VALIDATE("Routing No.",'');
                                                                      IF Item."Purch. Unit of Measure" <> '' THEN
                                                                        IF "Trade Item" = '' THEN  //**4PS.n: M14267
                                                                          VALIDATE("Unit of Measure Code",Item."Purch. Unit of Measure");
                                                                      VALIDATE("Transfer-from Code",'');
                                                                      //**4PS.sn: M15654
                                                                      IF "Trade Item" <> '' THEN BEGIN
                                                                        CheckVendorRelation(FIELDNO("Vendor (Trade Item)"));
                                                                        VALIDATE("Vendor No.");
                                                                        "Vendor Item No." := "Trade Item";  //db, 06-05-09: M15266
                                                                      END ELSE
                                                                      //**4PS.en: M15654
                                                                        IF CurrFieldNo = FIELDNO("Location Code") THEN
                                                                          VALIDATE("Vendor No.")
                                                                        ELSE
                                                                          VALIDATE("Vendor No.",SKU."Vendor No.");
                                                                    END;
                                                                  "Replenishment System"::"Prod. Order":
                                                                    BEGIN
                                                                      IF ReqWkshTmpl.GET("Worksheet Template Name") AND (ReqWkshTmpl.Type = ReqWkshTmpl.Type::"Req.") AND
                                                                         (ReqWkshTmpl.Name <> '') AND NOT SourceDropShipment
                                                                      THEN
                                                                        ERROR(ReplenishmentErr);
                                                                      IF PlanningResiliency AND (Item."Base Unit of Measure" = '') THEN
                                                                        TempPlanningErrorLog.SetError(
                                                                          STRSUBSTNO(
                                                                            Text032,Item.TABLECAPTION,Item."No.",
                                                                            Item.FIELDCAPTION("Base Unit of Measure")),
                                                                          DATABASE::Item,Item.GETPOSITION);
                                                                      Item.TESTFIELD("Base Unit of Measure");
                                                                      IF "Ref. Order No." = '' THEN BEGIN
                                                                        "Ref. Order Type" := "Ref. Order Type"::"Prod. Order";
                                                                        "Ref. Order Status" := "Ref. Order Status"::Planned;

                                                                        MfgSetup.GET;
                                                                        IF PlanningResiliency AND (MfgSetup."Planned Order Nos." = '') THEN
                                                                          TempPlanningErrorLog.SetError(
                                                                            STRSUBSTNO(Text032,MfgSetup.TABLECAPTION,'',
                                                                              MfgSetup.FIELDCAPTION("Planned Order Nos.")),
                                                                            DATABASE::"Manufacturing Setup",MfgSetup.GETPOSITION);
                                                                        MfgSetup.TESTFIELD("Planned Order Nos.");

                                                                        IF PlanningResiliency THEN
                                                                          CheckNoSeries(MfgSetup."Planned Order Nos.","Due Date");
                                                                        IF NOT Subcontracting THEN
                                                                          NoSeriesMgt.InitSeries(
                                                                            MfgSetup."Planned Order Nos.",xRec."No. Series","Due Date","Ref. Order No.","No. Series");
                                                                      END;
                                                                      VALIDATE("Vendor No.",'');

                                                                      IF NOT Subcontracting THEN BEGIN
                                                                        IF PlanningResiliency AND
                                                                           ProdBOMHeader.GET(Item."Production BOM No.") AND
                                                                           (ProdBOMHeader.Status <> ProdBOMHeader.Status::Certified)
                                                                        THEN BEGIN
                                                                          TempPlanningErrorLog.SetError(
                                                                            STRSUBSTNO(
                                                                              Text033,ProdBOMHeader.TABLECAPTION,
                                                                              ProdBOMHeader.FIELDCAPTION("No."),ProdBOMHeader."No."),
                                                                            DATABASE::"Production BOM Header",ProdBOMHeader.GETPOSITION);
                                                                          ProdBOMHeader.TESTFIELD(Status,ProdBOMHeader.Status::Certified);
                                                                        END;
                                                                        VALIDATE("Production BOM No.",Item."Production BOM No.");
                                                                        VALIDATE("Routing No.",Item."Routing No.");
                                                                      END ELSE BEGIN
                                                                        "Production BOM No." := Item."Production BOM No.";
                                                                        "Routing No." := Item."Routing No.";
                                                                      END;
                                                                      VALIDATE("Transfer-from Code",'');
                                                                      VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");

                                                                      IF ("Planning Line Origin" = "Planning Line Origin"::"Order Planning") AND
                                                                         ValidateFields
                                                                      THEN
                                                                        PlngLnMgt.Calculate(Rec,1,TRUE,TRUE,0);
                                                                    END;
                                                                  "Replenishment System"::Assembly:
                                                                    BEGIN
                                                                      IF PlanningResiliency AND (Item."Base Unit of Measure" = '') THEN
                                                                        TempPlanningErrorLog.SetError(
                                                                          STRSUBSTNO(
                                                                            Text032,Item.TABLECAPTION,Item."No.",
                                                                            Item.FIELDCAPTION("Base Unit of Measure")),
                                                                          DATABASE::Item,Item.GETPOSITION);
                                                                      Item.TESTFIELD("Base Unit of Measure");
                                                                      IF "Ref. Order No." = '' THEN BEGIN
                                                                        "Ref. Order Type" := "Ref. Order Type"::Assembly;
                                                                        "Ref. Order Status" := AsmHeader."Document Type"::Order;
                                                                      END;
                                                                      VALIDATE("Vendor No.",'');
                                                                      VALIDATE("Production BOM No.",'');
                                                                      VALIDATE("Routing No.",'');
                                                                      VALIDATE("Transfer-from Code",'');
                                                                      VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");

                                                                      IF ("Planning Line Origin" = "Planning Line Origin"::"Order Planning") AND
                                                                         ValidateFields
                                                                      THEN
                                                                        PlngLnMgt.Calculate(Rec,1,TRUE,TRUE,0);
                                                                    END;
                                                                  "Replenishment System"::Transfer:
                                                                    BEGIN
                                                                      "Ref. Order Type" := "Ref. Order Type"::Transfer;
                                                                      CLEAR("Ref. Order Status");
                                                                      "Ref. Order No." := '';
                                                                      DeleteRelations;
                                                                      VALIDATE("Vendor No.",'');
                                                                      VALIDATE("Production BOM No.",'');
                                                                      VALIDATE("Routing No.",'');
                                                                      VALIDATE("Transfer-from Code",SKU."Transfer-from Code");
                                                                      VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Replenishment System;
                                                   OptionCaptionML=ENU="Purchase,Prod. Order,Transfer,Assembly, ";
                                                   OptionString=[Purchase,Prod. Order,Transfer,Assembly, ] }
    { 99000904;;Ref. Order No.     ;Code20        ;TableRelation=IF (Ref. Order Type=CONST(Prod. Order)) "Production Order".No. WHERE (Status=FIELD(Ref. Order Status))
                                                                 ELSE IF (Ref. Order Type=CONST(Purchase)) "Purchase Header".No. WHERE (Document Type=FILTER(Order|Blanket Order))
                                                                 ELSE IF (Ref. Order Type=CONST(Transfer)) "Transfer Header".No. WHERE (No.=FIELD(Ref. Order No.))
                                                                 ELSE IF (Ref. Order Type=CONST(Assembly)) "Assembly Header".No. WHERE (Document Type=CONST(Order));
                                                   OnValidate=VAR
                                                                BlanketOrder@1100525000 : Record 38;
                                                                ErrorNoBlanketOrder@1100525001 : TextConst 'ENU=Blanket Order %1 not Found.';
                                                                BlanketOrderLine@1100525002 : Record 39;
                                                                MsgNoLines@1100525003 : TextConst 'ENU=No lines found for item %1 in Blanket Order %2.';
                                                              BEGIN
                                                                //**4PS.sn
                                                                IF ("Ref. Order No." <> '') AND (xRec."Ref. Order No." <> "Ref. Order No.") THEN BEGIN
                                                                  TESTFIELD("Use Blanket Order",TRUE);
                                                                  TESTFIELD("Action Message","Action Message"::New);
                                                                  BlanketOrder.SETRANGE("Document Type",BlanketOrder."Document Type"::"Blanket Order");
                                                                  BlanketOrder.SETRANGE("No.","Ref. Order No.");
                                                                  IF NOT BlanketOrder.FINDFIRST THEN
                                                                    ERROR(ErrorNoBlanketOrder,"Ref. Order No.")
                                                                  ELSE BEGIN
                                                                    IF BlanketOrder.Status = BlanketOrder.Status::Closed THEN
                                                                      BlanketOrder.FIELDERROR(Status);
                                                                    IF BlanketOrder."Buy-from Vendor No." <> "Vendor No." THEN
                                                                      BlanketOrder.FIELDERROR("Buy-from Vendor No.");
                                                                    BlanketOrderLine.SETRANGE("Document Type",BlanketOrder."Document Type");
                                                                    BlanketOrderLine.SETRANGE("Document No.",BlanketOrder."No.");
                                                                    BlanketOrderLine.SETRANGE(Type,Type::Item);
                                                                    BlanketOrderLine.SETRANGE("No.","No.");
                                                                    IF BlanketOrderLine.ISEMPTY THEN
                                                                      MESSAGE(MsgNoLines,"No.","Ref. Order No.");
                                                                  END;
                                                                END;
                                                                //**4PS.en
                                                              END;

                                                   OnLookup=VAR
                                                              PurchHeader@1000 : Record 38;
                                                              ProdOrder@1001 : Record 5405;
                                                              TransHeader@1002 : Record 5740;
                                                              AsmHeader@1003 : Record 900;
                                                            BEGIN
                                                              CASE "Ref. Order Type" OF
                                                                "Ref. Order Type"::Purchase:
                                                                  //**4PS.sn
                                                                  IF "Use Blanket Order" AND ("Action Message" = "Action Message"::New) AND ("Vendor No." <> '') THEN BEGIN
                                                                    PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::"Blanket Order");
                                                                    PurchHeader.SETRANGE("Buy-from Vendor No.","Vendor No.");
                                                                    PurchHeader.SETFILTER(Status,'<>%1',PurchHeader.Status::Closed);
                                                                    IF PAGE.RUNMODAL(0,PurchHeader) = ACTION::LookupOK THEN
                                                                      VALIDATE("Ref. Order No.",PurchHeader."No.")
                                                                  END ELSE
                                                                    //**4PS.en
                                                                    IF PurchHeader.GET(PurchHeader."Document Type"::Order,"Ref. Order No.") THEN
                                                                      PAGE.RUN(PAGE::"Purchase Order",PurchHeader)
                                                                    ELSE
                                                                      //**4PS.sn
                                                                      IF PurchHeader.GET(PurchHeader."Document Type"::"Blanket Order","Ref. Order No.") THEN
                                                                        PAGE.RUN(PAGE::"Blanket Purchase Order",PurchHeader)
                                                                      ELSE
                                                                        //**4PS.en
                                                                        MESSAGE(Text007,PurchHeader.TABLECAPTION);
                                                                "Ref. Order Type"::"Prod. Order":
                                                                  IF ProdOrder.GET("Ref. Order Status","Ref. Order No.") THEN
                                                                    CASE ProdOrder.Status OF
                                                                      ProdOrder.Status::Planned:
                                                                        PAGE.RUN(PAGE::"Planned Production Order",ProdOrder);
                                                                      ProdOrder.Status::"Firm Planned":
                                                                        PAGE.RUN(PAGE::"Firm Planned Prod. Order",ProdOrder);
                                                                      ProdOrder.Status::Released:
                                                                        PAGE.RUN(PAGE::"Released Production Order",ProdOrder);
                                                                    END
                                                                  ELSE
                                                                    MESSAGE(Text007,ProdOrder.TABLECAPTION);
                                                                "Ref. Order Type"::Transfer:
                                                                  IF TransHeader.GET("Ref. Order No.") THEN
                                                                    PAGE.RUN(PAGE::"Transfer Order",TransHeader)
                                                                  ELSE
                                                                    MESSAGE(Text007,TransHeader.TABLECAPTION);
                                                                "Ref. Order Type"::Assembly:
                                                                  IF AsmHeader.GET("Ref. Order Status","Ref. Order No.") THEN
                                                                    PAGE.RUN(PAGE::"Assembly Order",AsmHeader)
                                                                  ELSE
                                                                    MESSAGE(Text007,AsmHeader.TABLECAPTION);
                                                                ELSE
                                                                  MESSAGE(Text008);
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Ref. Order No. }
    { 99000905;;Ref. Order Type    ;Option        ;CaptionML=ENU=Ref. Order Type;
                                                   OptionCaptionML=ENU=" ,Purchase,Prod. Order,Transfer,Assembly";
                                                   OptionString=[ ,Purchase,Prod. Order,Transfer,Assembly];
                                                   Editable=No }
    { 99000906;;Ref. Order Status  ;Option        ;CaptionML=ENU=Ref. Order Status;
                                                   OptionCaptionML=ENU=,Planned,Firm Planned,Released;
                                                   OptionString=,Planned,Firm Planned,Released;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 99000907;;Ref. Line No.      ;Integer       ;CaptionML=ENU=Ref. Line No.;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 99000908;;No. Series         ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 99000909;;Expected Operation Cost Amt.;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Planning Routing Line"."Expected Operation Cost Amt." WHERE (Worksheet Template Name=FIELD(Worksheet Template Name),
                                                                                                                                 Worksheet Batch Name=FIELD(Journal Batch Name),
                                                                                                                                 Worksheet Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Expected Operation Cost Amt.;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 99000910;;Expected Component Cost Amt.;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Planning Component"."Cost Amount" WHERE (Worksheet Template Name=FIELD(Worksheet Template Name),
                                                                                                             Worksheet Batch Name=FIELD(Journal Batch Name),
                                                                                                             Worksheet Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Expected Component Cost Amt.;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 99000911;;Finished Qty. (Base);Decimal      ;CaptionML=ENU=Finished Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 99000912;;Remaining Qty. (Base);Decimal     ;CaptionML=ENU=Remaining Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 99000913;;Related to Planning Line;Integer  ;CaptionML=ENU=Related to Planning Line;
                                                   Editable=No }
    { 99000914;;Planning Level     ;Integer       ;CaptionML=ENU=Planning Level;
                                                   Editable=No }
    { 99000915;;Planning Line Origin;Option       ;CaptionML=ENU=Planning Line Origin;
                                                   OptionCaptionML=ENU=" ,Action Message,Planning,Order Planning";
                                                   OptionString=[ ,Action Message,Planning,Order Planning];
                                                   Editable=No }
    { 99000916;;Action Message     ;Option        ;OnValidate=BEGIN
                                                                SetRefOrderNo; //**4PS.n
                                                                IF ("Action Message" = xRec."Action Message") OR
                                                                   (("Action Message" IN ["Action Message"::" ","Action Message"::New]) AND
                                                                    (xRec."Action Message" IN ["Action Message"::" ","Action Message"::New]))
                                                                THEN
                                                                  EXIT;
                                                                TESTFIELD("Action Message",xRec."Action Message");
                                                              END;

                                                   CaptionML=ENU=Action Message;
                                                   OptionCaptionML=ENU=" ,New,Change Qty.,Reschedule,Resched. & Chg. Qty.,Cancel";
                                                   OptionString=[ ,New,Change Qty.,Reschedule,Resched. & Chg. Qty.,Cancel] }
    { 99000917;;Accept Action Message;Boolean     ;OnValidate=BEGIN
                                                                IF "Action Message" = "Action Message"::" " THEN
                                                                  VALIDATE("Action Message","Action Message"::New);
                                                              END;

                                                   CaptionML=ENU=Accept Action Message }
    { 99000918;;Net Quantity (Base);Decimal       ;CaptionML=ENU=Net Quantity (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 99000919;;Starting Date-Time ;DateTime      ;OnValidate=BEGIN
                                                                "Starting Date" := DT2DATE("Starting Date-Time");
                                                                "Starting Time" := DT2TIME("Starting Date-Time");

                                                                VALIDATE("Starting Date");
                                                              END;

                                                   CaptionML=ENU=Starting Date-Time }
    { 99000920;;Ending Date-Time   ;DateTime      ;OnValidate=BEGIN
                                                                "Ending Date" := DT2DATE("Ending Date-Time");
                                                                "Ending Time" := DT2TIME("Ending Date-Time");

                                                                VALIDATE("Ending Date");
                                                              END;

                                                   CaptionML=ENU=Ending Date-Time }
    { 99000921;;Order Promising ID ;Code20        ;CaptionML=ENU=Order Promising ID }
    { 99000922;;Order Promising Line No.;Integer  ;CaptionML=ENU=Order Promising Line No. }
    { 99000923;;Order Promising Line ID;Integer   ;CaptionML=ENU=Order Promising Line ID }
  }
  KEYS
  {
    {    ;Worksheet Template Name,Journal Batch Name,Line No.;
                                                   Clustered=Yes }
    {    ;Worksheet Template Name,Journal Batch Name,Vendor No.,Sell-to Customer No.,Ship-to Code,Order Address Code,Currency Code,Ref. Order Type,Ref. Order Status,Ref. Order No.,Location Code,Transfer-from Code;
                                                   MaintainSQLIndex=No }
    {    ;Type,No.,Variant Code,Location Code,Sales Order No.,Planning Line Origin,Due Date,Shortcut Dimension 1 Code;
                                                   SumIndexFields=Quantity (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Type,No.,Variant Code,Location Code,Sales Order No.,Order Date,Shortcut Dimension 1 Code;
                                                   SumIndexFields=Quantity (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Type,No.,Variant Code,Location Code,Starting Date;
                                                   SumIndexFields=Quantity (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Worksheet Template Name,Journal Batch Name,Type,No.,Due Date;
                                                   MaintainSQLIndex=No }
    {    ;Ref. Order Type,Ref. Order Status,Ref. Order No.,Ref. Line No. }
    {    ;Replenishment System,Type,No.,Variant Code,Transfer-from Code,Transfer Shipment Date;
                                                   SumIndexFields=Quantity (Base);
                                                   MaintainSQLIndex=No }
    {    ;Order Promising ID,Order Promising Line ID,Order Promising Line No. }
    {    ;User ID,Demand Type,Worksheet Template Name,Journal Batch Name,Line No. }
    {    ;User ID,Demand Type,Demand Subtype,Demand Order No.,Demand Line No.,Demand Ref. No. }
    {    ;User ID,Worksheet Template Name,Journal Batch Name,Line No.;
                                                   MaintainSQLIndex=No }
    {    ;Worksheet Template Name,Journal Batch Name,Sort Purchase,Sell-to Customer No.,Ship-to Code,Order Address Code,Currency Code;
                                                   MaintainSQLIndex=No }
    {    ;Sort Purchase,Sell-to Customer No.,Ship-to Code,Order Address Code,Currency Code,Item Composition,Due Date }
    {    ;Sort Purchase,Sell-to Customer No.,Ship-to Code,Order Address Code,Currency Code }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text004@1001 : TextConst 'ENU=You cannot rename a %1.';
      Text005@1002 : TextConst 'ENU=%1 %2 does not exist.';
      Text006@1003 : TextConst 'ENU=You cannot change %1 when %2 is %3.';
      Text007@1004 : TextConst 'ENU=There is no %1 for this line.';
      Text008@1005 : TextConst 'ENU=There is no replenishment order for this line.';
      ReqWkshTmpl@1006 : Record 244;
      ReqWkshName@1007 : Record 245;
      ReqLine@1008 : Record 246;
      TempReqLine@1009 : Record 246;
      Item@1010 : Record 27;
      SKU@1011 : TEMPORARY Record 5700;
      GLAcc@1012 : Record 15;
      Vend@1013 : Record 23;
      ItemVend@1015 : Record 99;
      ItemTranslation@1016 : Record 30;
      Cust@1017 : Record 18;
      ShipToAddr@1018 : Record 222;
      Currency@1019 : Record 4;
      CurrExchRate@1020 : Record 330;
      ReservEntry@1021 : Record 337;
      ItemVariant@1022 : Record 5401;
      WorkCenter@1023 : Record 99000754;
      TransHeader@1024 : Record 5740;
      PlanningComponent@1047 : Record 99000829;
      PlanningRtngLine@1046 : Record 99000830;
      ProdOrderCapNeed@1045 : Record 5410;
      ProdBOMHeader@1044 : Record 99000771;
      ProdBOMVersion@1043 : Record 99000779;
      RtngHeader@1042 : Record 99000763;
      RtngVersion@1041 : Record 99000786;
      MfgSetup@1040 : Record 99000765;
      Location@1056 : Record 14;
      Bin@1058 : Record 7354;
      PlanningElement@1070 : Record 99000855;
      TempPlanningErrorLog@1030 : TEMPORARY Record 5430;
      Reservation@1025 : Page 498;
      PurchPriceCalcMgt@1014 : Codeunit 7010;
      ReservEngineMgt@1031 : Codeunit 99000831;
      ReserveReqLine@1032 : Codeunit 99000833;
      UOMMgt@1033 : Codeunit 5402;
      AddOnIntegrMgt@1034 : Codeunit 5403;
      DimMgt@1035 : Codeunit 408;
      LeadTimeMgt@1038 : Codeunit 5404;
      GetPlanningParameters@1039 : Codeunit 99000855;
      VersionMgt@1048 : Codeunit 99000756;
      PlngLnMgt@1049 : Codeunit 99000809;
      WMSManagement@1057 : Codeunit 7302;
      CurrentFieldNo@1000 : Integer;
      BlockReservation@1052 : Boolean;
      Text028@1055 : TextConst 'ENU=The %1 on this %2 must match the %1 on the sales order line it is associated with.';
      Subcontracting@1029 : Boolean;
      Text029@1036 : TextConst 'ENU=Line %1 has a %2 that exceeds the %3.';
      Text030@1037 : TextConst 'ENU=You cannot reserve components with status Planned.';
      PlanningResiliency@1063 : Boolean;
      Text031@1059 : TextConst 'ENU=%1 %2 is blocked.';
      Text032@1060 : TextConst 'ENU=%1 %2 has no %3 defined.';
      Text033@1068 : TextConst 'ENU=%1 %2 %3 is not certified.';
      Text034@1053 : TextConst 'ENU=%1 %2 %3 %4 %5 is not certified.';
      Text035@1071 : TextConst 'ENU=%1 %2 %3 specified on %4 %5 does not exist.';
      Text036@1072 : TextConst 'ENU=%1 %2 %3 does not allow default numbering.';
      Text037@1065 : TextConst 'ENU=The currency exchange rate for the %1 %2 that vendor %3 uses on the order date %4, does not have an %5 specified.';
      Text038@1067 : TextConst 'ENU=The currency exchange rate for the %1 %2 that vendor %3 uses on the order date %4, does not exist.';
      Text039@1066 : TextConst 'ENU=You cannot assign new numbers from the number series %1 on %2.';
      Text040@1064 : TextConst 'ENU=You cannot assign new numbers from the number series %1.';
      Text041@1062 : TextConst 'ENU=You cannot assign new numbers from the number series %1 on a date before %2.';
      Text042@1054 : TextConst 'ENU=You cannot assign new numbers from the number series %1 line %2 because the %3 is not defined.';
      Text043@1061 : TextConst 'ENU=The number %1 on number series %2 cannot be extended to more than 20 characters.';
      Text044@1069 : TextConst 'ENU=You cannot assign numbers greater than %1 from the number series %2.';
      ReplenishmentErr@1073 : TextConst 'ENU=Requisition Worksheet cannot be used to create Prod. Order replenishment.';
      SourceDropShipment@1026 : Boolean;
      Dim1@1000000000 : Code[20];
      Dim2@1000000001 : Code[20];
      ProjElemRec@1210190005 : Record 11012010;
      ServOrderRec@1210190006 : Record 11012823;
      OrderAddr@1100485001 : Record 224;
      PurchSetup@1100525000 : Record 312;
      TradeItemRec@1100525002 : Record 11012317;
      CostCompRec@1100525004 : Record 11012012;
      ElementFormat@1210190004 : Codeunit 11012022;
      ValidateCu@1210190003 : Codeunit 11012033;
      ItemTypeOpt@1210190002 : 'Item,Basic Item,Trade Item,Trade Vendor';
      UserCode@1100485000 : Code[50];
      StrategicPurchMgt@1100525001 : Codeunit 11020211;
      GWWMgtCU@1100525003 : Codeunit 11012163;
      DPA_Management@1100000999 : Codeunit 11012783;
      Text11012000@1210190000 : TextConst 'ENU=The entered %1 %2 is different from the %1 %3 in %4 %5.';
      SKIPTESTBLOCKED@1100525005 : Boolean;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      IF "Prod. Order No." = '' THEN
        TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE GetCurrency@3();
    BEGIN
      IF "Currency Code" = '' THEN BEGIN
        CLEAR(Currency);
        Currency.InitRoundingPrecision;
      END ELSE
        IF "Currency Code" <> Currency.Code THEN
          Currency.GET("Currency Code");
    END;

    LOCAL PROCEDURE GetItem@1();
    BEGIN
      TESTFIELD("No.");
      IF "No." <> Item."No." THEN
        Item.GET("No.");
    END;

    PROCEDURE ShowReservation@4();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      CLEAR(Reservation);
      Reservation.SetReqLine(Rec);
      Reservation.RUNMODAL;
    END;

    PROCEDURE ShowReservationEntries@6(Modal@1000 : Boolean);
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,TRUE);
      ReserveReqLine.FilterReservFor(ReservEntry,Rec);
      IF Modal THEN
        PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry)
      ELSE
        PAGE.RUN(PAGE::"Reservation Entries",ReservEntry);
    END;

    LOCAL PROCEDURE UpdateOrderReceiptDate@5(LeadTimeCalc@1000 : DateFormula);
    BEGIN
      CALCFIELDS("Reserved Qty. (Base)");
      IF "Reserved Qty. (Base)" = 0 THEN BEGIN
        IF "Order Date" <> 0D THEN
          "Starting Date" := "Order Date"
        ELSE BEGIN
          "Starting Date" := WORKDATE;
          "Order Date" := "Starting Date";
        END;
        CalcEndingDate(FORMAT(LeadTimeCalc));
        CheckEndingDate(ValidateFields);
        SetDueDate;
      END ELSE
        IF (FORMAT(LeadTimeCalc) = '') OR ("Due Date" = 0D) THEN
          "Order Date" := 0D
        ELSE
          IF "Due Date" <> 0D THEN BEGIN
            "Ending Date" :=
              LeadTimeMgt.PlannedEndingDate(
                "No.","Location Code","Variant Code","Due Date",'',"Ref. Order Type");
            CalcStartingDate(FORMAT(LeadTimeCalc));
          END;

      SetActionMessage;
      UpdateDatetime;
    END;

    PROCEDURE LookupVendor@43(VAR Vend@1000 : Record 23) : Boolean;
    BEGIN
      IF (Type = Type::Item) AND ItemVend.READPERMISSION THEN BEGIN
        ItemVend.INIT;
        ItemVend.SETRANGE("Item No.","No.");
        ItemVend.SETRANGE("Vendor No.","Vendor No.");
        IF "Variant Code" <> '' THEN
          ItemVend.SETRANGE("Variant Code","Variant Code");
        IF NOT ItemVend.FINDLAST THEN BEGIN
          ItemVend."Item No." := "No.";
          ItemVend."Variant Code" := "Variant Code";
          ItemVend."Vendor No." := "Vendor No.";
        END;
        ItemVend.SETRANGE("Vendor No.");
        IF PAGE.RUNMODAL(0,ItemVend) = ACTION::LookupOK THEN BEGIN
          Vend.GET(ItemVend."Vendor No.");
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;
      Vend."No." := "Vendor No.";
      EXIT(PAGE.RUNMODAL(0,Vend) = ACTION::LookupOK);
    END;

    LOCAL PROCEDURE LookupFromLocation@44(VAR Location@1001 : Record 14) : Boolean;
    BEGIN
      Location.Code := "Transfer-from Code";
      Location.SETRANGE("Use As In-Transit",FALSE);
      EXIT(PAGE.RUNMODAL(0,Location) = ACTION::LookupOK);
    END;

    LOCAL PROCEDURE UpdateDescription@8();
    VAR
      ItemVend@1000 : Record 99;
      ItemCrossRef@1001 : Record 5717;
    BEGIN
      IF (Type <> Type::Item) OR ("No." = '') THEN
        EXIT;
      IF "Variant Code" = '' THEN BEGIN
        GetItem;
        Description := Item.Description;
        "Description 2" := Item."Description 2";
      END ELSE BEGIN
        ItemVariant.GET("No.","Variant Code");
        Description := ItemVariant.Description;
        "Description 2" := ItemVariant."Description 2";
      END;
      IF "Vendor No." <> '' THEN BEGIN
        Vend.GET("Vendor No.");
        IF Vend."Language Code" <> '' THEN
          IF ItemTranslation.GET("No.","Variant Code",Vend."Language Code") THEN BEGIN
            Description := ItemTranslation.Description;
            "Description 2" := ItemTranslation."Description 2";
          END;
      END;

      IF (CurrFieldNo <> 0) AND (CurrFieldNo <> FIELDNO("Location Code")) AND
         ("Planning Line Origin" = "Planning Line Origin"::" ")
      THEN
        IF "Vendor No." <> '' THEN BEGIN
          "Location Code" := Vend."Location Code";
          IF ItemVend.GET("Vendor No.","No.","Variant Code") THEN
            IF ItemCrossRef.GET(
                 "No.","Variant Code","Unit of Measure Code",
                 ItemCrossRef."Cross-Reference Type"::Vendor,
                 "Vendor No.",ItemVend."Vendor Item No.")
            THEN BEGIN
              Description := ItemCrossRef.Description;
              "Description 2" := '';
            END
        END ELSE
          "Location Code" := '';
    END;

    PROCEDURE BlockDynamicTracking@17(SetBlock@1000 : Boolean);
    BEGIN
      ReserveReqLine.Block(SetBlock);
    END;

    PROCEDURE BlockDynamicTrackingOnComp@29(SetBlock@1000 : Boolean);
    BEGIN
      BlockReservation := SetBlock;
    END;

    LOCAL PROCEDURE CreateDim@2(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1100525003 : Integer;No3@1100525002 : Code[20];Type4@1100525001 : Integer;No4@1100525000 : Code[20];Type5@1100528251 : Integer;No5@1100528250 : Code[20]);
    VAR
      SourceCodeSetup@1004 : Record 242;
      TableID@1005 : ARRAY [10] OF Integer;
      No@1006 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      //** 4PS.sn
      TableID[3] := Type3; //** 4PS 09-06-2010 sn
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;        //** 4PS 09-06-2010 en
      TableID[5] := Type5;
      No[5] := No5;
      //** 4PS.en

      //**4PS.sn
      Dim1 := "Shortcut Dimension 1 Code";
      Dim2 := "Shortcut Dimension 2 Code";
      //**4PS.en

      //"Shortcut Dimension 1 Code" := ''; //**4PS.o Must be kept for Department Authorization
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,SourceCodeSetup.Purchases,
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

      IF "Ref. Order No." <> '' THEN
        GetDimFromRefOrderLine(TRUE);
      //**4PS.sn
      IF (Dim1 <> '') AND ("Shortcut Dimension 1 Code" = '') THEN
        "Shortcut Dimension 1 Code" := Dim1;
      ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");

      IF (Dim2 <> '') AND
         (("Shortcut Dimension 2 Code" = '') OR
          (CurrFieldNo = FIELDNO("Shortcut Dimension 2 Code")))
      THEN BEGIN
        "Shortcut Dimension 2 Code" := Dim2;
        ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
      END;
      //**4PS.en
    END;

    PROCEDURE ValidateShortcutDimCode@9(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      //**4PS.sn
      IF FieldNumber = 1 THEN
        DimMgt.CheckDepartmentAuthorization(DATABASE::"Requisition Line", ShortcutDimCode);
      //**4PS.en
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE LookupShortcutDimCode@10(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE ShowShortcutDimCode@11(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      TESTFIELD("Quantity (Base)");
      ReserveReqLine.CallItemTracking(Rec);
    END;

    PROCEDURE DeleteRelations@35();
    BEGIN
      IF Type <> Type::Item THEN
        EXIT;
      PlanningComponent.SETRANGE("Worksheet Template Name","Worksheet Template Name");
      PlanningComponent.SETRANGE("Worksheet Batch Name","Journal Batch Name");
      PlanningComponent.SETRANGE("Worksheet Line No.","Line No.");
      IF PlanningComponent.FIND('-') THEN
        REPEAT
          PlanningComponent.BlockDynamicTracking(BlockReservation);
          PlanningComponent.DELETE(TRUE);
        UNTIL PlanningComponent.NEXT = 0;

      PlanningRtngLine.SETRANGE("Worksheet Template Name","Worksheet Template Name");
      PlanningRtngLine.SETRANGE("Worksheet Batch Name","Journal Batch Name");
      PlanningRtngLine.SETRANGE("Worksheet Line No.","Line No.");
      IF PlanningRtngLine.FINDFIRST THEN
        PlanningRtngLine.DELETEALL;

      ProdOrderCapNeed.RESET;
      ProdOrderCapNeed.SETCURRENTKEY("Worksheet Template Name","Worksheet Batch Name","Worksheet Line No.");
      ProdOrderCapNeed.SETRANGE("Worksheet Template Name","Worksheet Template Name");
      ProdOrderCapNeed.SETRANGE("Worksheet Batch Name","Journal Batch Name");
      ProdOrderCapNeed.SETRANGE("Worksheet Line No.","Line No.");
      IF ProdOrderCapNeed.FINDFIRST THEN
        ProdOrderCapNeed.DELETEALL;
      ProdOrderCapNeed.RESET;
      ProdOrderCapNeed.SETCURRENTKEY(Status,"Prod. Order No.",Active);
      ProdOrderCapNeed.SETRANGE(Status,"Ref. Order Status");
      ProdOrderCapNeed.SETRANGE("Prod. Order No.","Ref. Order No.");
      ProdOrderCapNeed.SETRANGE(Active,FALSE);
      IF ProdOrderCapNeed.FINDFIRST THEN
        ProdOrderCapNeed.MODIFYALL(Active,TRUE);

      PlanningElement.SETRANGE("Worksheet Template Name","Worksheet Template Name");
      PlanningElement.SETRANGE("Worksheet Batch Name","Journal Batch Name");
      PlanningElement.SETRANGE("Worksheet Line No.","Line No.");
      IF NOT PlanningElement.ISEMPTY THEN
        PlanningElement.DELETEALL;
    END;

    PROCEDURE DeleteMultiLevel@34();
    VAR
      ReqLine2@1000 : Record 246;
    BEGIN
      ReqLine2.SETCURRENTKEY("Ref. Order Type","Ref. Order Status","Ref. Order No.","Ref. Line No.");
      ReqLine2.SETRANGE("Ref. Order Type","Ref. Order Type");
      ReqLine2.SETRANGE("Ref. Order Status","Ref. Order Status");
      ReqLine2.SETRANGE("Ref. Order No.","Ref. Order No.");
      ReqLine2.SETRANGE("Worksheet Template Name","Worksheet Template Name");
      ReqLine2.SETRANGE("Journal Batch Name","Journal Batch Name");
      ReqLine2.SETFILTER("Line No.",'<>%1',"Line No.");
      ReqLine2.SETFILTER("Planning Level",'>0');
      IF ReqLine2.FIND('-') THEN
        REPEAT
          ReserveReqLine.DeleteLine(ReqLine2);
          ReqLine2.CALCFIELDS("Reserved Qty. (Base)");
          ReqLine2.TESTFIELD("Reserved Qty. (Base)",0);
          ReqLine2.DeleteRelations;
          ReqLine2.DELETE;
        UNTIL ReqLine2.NEXT = 0;
    END;

    PROCEDURE SetUpNewLine@32(LastReqLine@1000 : Record 246);
    BEGIN
      ReqWkshTmpl.GET("Worksheet Template Name");
      ReqWkshName.GET("Worksheet Template Name","Journal Batch Name");
      ReqLine.SETRANGE("Worksheet Template Name","Worksheet Template Name");
      ReqLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      IF ReqLine.FIND('-') THEN BEGIN
        "Order Date" := LastReqLine."Order Date";
      END ELSE
        "Order Date" := WORKDATE;

      "Recurring Method" := LastReqLine."Recurring Method";

      //**4PS.sn, kkleermaker, 110817, M28649
      IF (ReqWkshTmpl."Location Code" <> '') THEN
        "Location Code" := ReqWkshTmpl."Location Code";
      //**4PS.en, kkleermaker, 110817, M28649
    END;

    LOCAL PROCEDURE CheckEndingDate@26(ShowWarning@1000 : Boolean);
    VAR
      CheckDateConflict@1001 : Codeunit 99000815;
    BEGIN
      CheckDateConflict.ReqLineCheck(Rec,ShowWarning);
      ReserveReqLine.VerifyChange(Rec,xRec);
    END;

    PROCEDURE SetDueDate@25();
    BEGIN
      //**4PS.sn
      IF ("No." = '') THEN EXIT;  //db, 31-12-13: C009800
      //**4PS.en
      IF "Ending Date" = 0D THEN
        EXIT;
      IF (Type = Type::Item) AND
         ("Planning Level" = 0)
      THEN
        "Due Date" :=
          LeadTimeMgt.PlannedDueDate("No.","Location Code","Variant Code","Ending Date",'',"Ref. Order Type")
      ELSE
        "Due Date" := "Ending Date";

      CheckDueDateToDemandDate;
    END;

    PROCEDURE SetCurrFieldNo@63(NewCurrFieldNo@1000 : Integer);
    BEGIN
      CurrentFieldNo := NewCurrFieldNo;
    END;

    LOCAL PROCEDURE CheckDueDateToDemandDate@41();
    BEGIN
      IF ("Planning Line Origin" = "Planning Line Origin"::"Order Planning") AND
         ("Due Date" > "Demand Date") AND
         ("Demand Date" <> 0D) AND
         ValidateFields
      THEN
        MESSAGE(Text029,"Line No.",FIELDCAPTION("Due Date"),FIELDCAPTION("Demand Date"));
    END;

    LOCAL PROCEDURE CheckActionMessageNew@24();
    BEGIN
      IF "Action Message" <> "Action Message"::" " THEN
        IF CurrFieldNo IN [FIELDNO(Type),
                           FIELDNO("No."),
                           FIELDNO("Variant Code"),
                           FIELDNO("Location Code"),
                           FIELDNO("Bin Code"),
                           FIELDNO("Production BOM Version Code"),
                           FIELDNO("Routing Version Code"),
                           FIELDNO("Production BOM No."),
                           FIELDNO("Routing No."),
                           FIELDNO("Replenishment System"),
                           FIELDNO("Unit of Measure Code"),
                           FIELDNO("Vendor No."),
                           FIELDNO("Transfer-from Code")]
        THEN
          TESTFIELD("Action Message","Action Message"::New);
    END;

    PROCEDURE SetActionMessage@23();
    BEGIN
      IF ValidateFields AND
         ("Action Message" <> "Action Message"::" ") AND
         ("Action Message" <> "Action Message"::New)
      THEN BEGIN
        IF (Quantity <> xRec.Quantity) AND ("Original Quantity" = 0) THEN
          "Original Quantity" := xRec.Quantity;
        IF ("Due Date" <> xRec."Due Date") AND ("Original Due Date" = 0D) THEN
          "Original Due Date" := xRec."Due Date";
        IF Quantity = 0 THEN
          "Action Message" := "Action Message"::Cancel
        ELSE
          IF "Original Quantity" <> 0 THEN
            IF "Original Due Date" <> 0D THEN
              "Action Message" := "Action Message"::"Resched. & Chg. Qty."
            ELSE
              "Action Message" := "Action Message"::"Change Qty."
          ELSE
            IF "Original Due Date" <> 0D THEN
              "Action Message" := "Action Message"::Reschedule;

        IF "Action Message" <> xRec."Action Message" THEN
          CLEAR("Planning Line Origin");
      END;
    END;

    LOCAL PROCEDURE ValidateFields@65() : Boolean;
    BEGIN
      EXIT((CurrFieldNo <> 0) OR (CurrentFieldNo <> 0));
    END;

    PROCEDURE GetProdOrderLine@22(ProdOrderLine@1000 : Record 5406);
    VAR
      ProdOrder@1001 : Record 5405;
    BEGIN
      ProdOrderLine.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
      ProdOrder.GET(ProdOrderLine.Status,ProdOrderLine."Prod. Order No.");
      Item.GET(ProdOrderLine."Item No.");

      TransferFromProdOrderLine(ProdOrderLine);
    END;

    PROCEDURE GetPurchOrderLine@21(PurchOrderLine@1000 : Record 39);
    VAR
      PurchHeader2@1001 : Record 38;
    BEGIN
      IF PurchOrderLine.Type <> PurchOrderLine.Type::Item THEN
        EXIT;
      PurchOrderLine.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
      PurchHeader2.GET(PurchOrderLine."Document Type",PurchOrderLine."Document No.");
      Item.GET(PurchOrderLine."No.");

      TransferFromPurchaseLine(PurchOrderLine);
    END;

    PROCEDURE GetTransLine@27(TransLine@1000 : Record 5741);
    BEGIN
      TransLine.CALCFIELDS(
        "Reserved Quantity Inbnd.",
        "Reserved Quantity Outbnd.",
        "Reserved Qty. Inbnd. (Base)",
        "Reserved Qty. Outbnd. (Base)");
      TransHeader.GET(TransLine."Document No.");
      Item.GET(TransLine."Item No.");

      TransferFromTransLine(TransLine);
    END;

    PROCEDURE GetAsmHeader@54(AsmHeader@1000 : Record 900);
    VAR
      AsmHeader2@1001 : Record 900;
    BEGIN
      AsmHeader.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
      AsmHeader2.GET(AsmHeader."Document Type",AsmHeader."No.");
      Item.GET(AsmHeader."Item No.");

      TransferFromAsmHeader(AsmHeader);
    END;

    PROCEDURE GetActionMessages@19();
    VAR
      GetActionMsgReport@1000 : Report 99001023;
    BEGIN
      GetActionMsgReport.SetTemplAndWorksheet("Worksheet Template Name","Journal Batch Name");
      GetActionMsgReport.RUNMODAL;
    END;

    PROCEDURE TransferFromProdOrderLine@18(VAR ProdOrderLine@1000 : Record 5406);
    VAR
      ProdOrder@1001 : Record 5405;
    BEGIN
      ProdOrder.GET(ProdOrderLine.Status,ProdOrderLine."Prod. Order No.");

      Type := Type::Item;
      "No." := ProdOrderLine."Item No.";
      "Variant Code" := ProdOrderLine."Variant Code";
      Description := ProdOrderLine.Description;
      "Description 2" := ProdOrderLine."Description 2";
      "Location Code" := ProdOrderLine."Location Code";
      "Dimension Set ID" := ProdOrderLine."Dimension Set ID";
      "Shortcut Dimension 1 Code" := ProdOrderLine."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := ProdOrderLine."Shortcut Dimension 2 Code";
      "Bin Code" := ProdOrderLine."Bin Code";
      "Gen. Prod. Posting Group" := ProdOrder."Gen. Prod. Posting Group";
      "Gen. Business Posting Group" := ProdOrder."Gen. Bus. Posting Group";
      "Scrap %" := ProdOrderLine."Scrap %";
      "Order Date" := ProdOrder."Creation Date";
      "Starting Time" := ProdOrderLine."Starting Time";
      "Starting Date" := ProdOrderLine."Starting Date";
      "Ending Time" := ProdOrderLine."Ending Time";
      "Ending Date" := ProdOrderLine."Ending Date";
      "Due Date" := ProdOrderLine."Due Date";
      "Production BOM No." := ProdOrderLine."Production BOM No.";
      "Routing No." := ProdOrderLine."Routing No.";
      "Production BOM Version Code" := ProdOrderLine."Production BOM Version Code";
      "Routing Version Code" := ProdOrderLine."Routing Version Code";
      "Routing Type" := ProdOrderLine."Routing Type";
      "Replenishment System" := "Replenishment System"::"Prod. Order";
      Quantity := ProdOrderLine.Quantity;
      "Finished Quantity" := ProdOrderLine."Finished Quantity";
      "Remaining Quantity" := ProdOrderLine."Remaining Quantity";
      "Unit Cost" := ProdOrderLine."Unit Cost";
      "Cost Amount" := ProdOrderLine."Cost Amount";
      "Low-Level Code" := ProdOrder."Low-Level Code";
      "Planning Level" := ProdOrderLine."Planning Level Code";
      "Unit of Measure Code" := ProdOrderLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := ProdOrderLine."Qty. per Unit of Measure";
      "Quantity (Base)" := ProdOrderLine."Quantity (Base)";
      "Finished Qty. (Base)" := ProdOrderLine."Finished Qty. (Base)";
      "Remaining Qty. (Base)" := ProdOrderLine."Remaining Qty. (Base)";
      "Indirect Cost %" := ProdOrderLine."Indirect Cost %";
      "Overhead Rate" := ProdOrderLine."Overhead Rate";
      "Expected Operation Cost Amt." := ProdOrderLine."Expected Operation Cost Amt.";
      "Expected Component Cost Amt." := ProdOrderLine."Expected Component Cost Amt.";
      "MPS Order" := ProdOrderLine."MPS Order";
      "Planning Flexibility" := ProdOrderLine."Planning Flexibility";
      "Ref. Order No." := ProdOrderLine."Prod. Order No.";
      "Ref. Order Type" := "Ref. Order Type"::"Prod. Order";
      "Ref. Order Status" := ProdOrderLine.Status;
      "Ref. Line No." := ProdOrderLine."Line No.";

      GetDimFromRefOrderLine(FALSE);
    END;

    PROCEDURE TransferFromPurchaseLine@15(VAR PurchLine@1000 : Record 39);
    VAR
      PurchHeader@1001 : Record 38;
    BEGIN
      PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.");
      //**4PS.sn
      IF PurchLine.Type = PurchLine.Type::"G/L Account" THEN
        Item.GET(PurchLine."Item No.")   //db, 30-03-10: M18052
      ELSE
      //**4PS.en
        Item.GET(PurchLine."No.");

      Type := Type::Item;
      //"No." := PurchLine."No.";   //**4PS.o
      "No." := Item."No.";  //**4PS.n  (db, 30-03-10: M18052)
      "Variant Code" := PurchLine."Variant Code";
      Description := PurchLine.Description;
      "Description 2" := PurchLine."Description 2";
      "Location Code" := PurchLine."Location Code";
      "Dimension Set ID" := PurchLine."Dimension Set ID";
      "Shortcut Dimension 1 Code" := PurchLine."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := PurchLine."Shortcut Dimension 2 Code";
      "Cost Component" := PurchLine."Cost Component"; //**4PS.n
      "Bin Code" := PurchLine."Bin Code";
      "Gen. Prod. Posting Group" := PurchLine."Gen. Prod. Posting Group";
      "Gen. Business Posting Group" := PurchLine."Gen. Bus. Posting Group";
      "Low-Level Code" := Item."Low-Level Code";
      "Order Date" := PurchHeader."Order Date";
      "Starting Date" := "Order Date";
      "Ending Date" := PurchLine."Planned Receipt Date";
      "Due Date" := PurchLine."Expected Receipt Date";
      Quantity := PurchLine.Quantity;
      "Finished Quantity" := PurchLine."Quantity Received";
      "Remaining Quantity" := PurchLine."Outstanding Quantity";
      BlockDynamicTracking(TRUE);
      VALIDATE("Unit Cost",PurchLine."Unit Cost (LCY)");
      BlockDynamicTracking(FALSE);
      "Indirect Cost %" := PurchLine."Indirect Cost %";
      "Overhead Rate" := PurchLine."Overhead Rate";
      "Unit of Measure Code" := PurchLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := PurchLine."Qty. per Unit of Measure";
      "Quantity (Base)" := PurchLine."Quantity (Base)";
      "Finished Qty. (Base)" := PurchLine."Qty. Received (Base)";
      "Remaining Qty. (Base)" := PurchLine."Outstanding Qty. (Base)";
      "Routing No." := PurchLine."Routing No.";
      "Replenishment System" := "Replenishment System"::Purchase;
      "MPS Order" := PurchLine."MPS Order";
      "Planning Flexibility" := PurchLine."Planning Flexibility";
      "Ref. Order No." := PurchLine."Document No.";
      "Ref. Order Type" := "Ref. Order Type"::Purchase;
      "Ref. Line No." := PurchLine."Line No.";
      "Vendor No." := PurchLine."Buy-from Vendor No.";

      GetDimFromRefOrderLine(FALSE);
    END;

    PROCEDURE TransferFromAsmHeader@52(VAR AsmHeader@1000 : Record 900);
    BEGIN
      Item.GET(AsmHeader."Item No.");

      Type := Type::Item;
      "No." := AsmHeader."Item No.";
      "Variant Code" := AsmHeader."Variant Code";
      Description := AsmHeader.Description;
      "Description 2" := AsmHeader."Description 2";
      "Location Code" := AsmHeader."Location Code";
      "Dimension Set ID" := AsmHeader."Dimension Set ID";
      "Shortcut Dimension 1 Code" := AsmHeader."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := AsmHeader."Shortcut Dimension 2 Code";
      "Bin Code" := AsmHeader."Bin Code";
      "Gen. Prod. Posting Group" := AsmHeader."Gen. Prod. Posting Group";
      "Low-Level Code" := Item."Low-Level Code";
      "Order Date" := AsmHeader."Due Date";
      "Starting Date" := "Order Date";
      "Ending Date" := AsmHeader."Due Date";
      "Due Date" := AsmHeader."Due Date";
      Quantity := AsmHeader.Quantity;
      "Finished Quantity" := AsmHeader."Assembled Quantity";
      "Remaining Quantity" := AsmHeader."Remaining Quantity";
      BlockDynamicTracking(TRUE);
      VALIDATE("Unit Cost",AsmHeader."Unit Cost");
      BlockDynamicTracking(FALSE);
      "Indirect Cost %" := AsmHeader."Indirect Cost %";
      "Overhead Rate" := AsmHeader."Overhead Rate";
      "Unit of Measure Code" := AsmHeader."Unit of Measure Code";
      "Qty. per Unit of Measure" := AsmHeader."Qty. per Unit of Measure";
      "Quantity (Base)" := AsmHeader."Quantity (Base)";
      "Finished Qty. (Base)" := AsmHeader."Assembled Quantity (Base)";
      "Remaining Qty. (Base)" := AsmHeader."Remaining Quantity (Base)";
      "Replenishment System" := "Replenishment System"::Assembly;
      "MPS Order" := AsmHeader."MPS Order";
      "Planning Flexibility" := AsmHeader."Planning Flexibility";
      "Ref. Order Type" := "Ref. Order Type"::Assembly;
      "Ref. Order Status" := AsmHeader."Document Type";
      "Ref. Order No." := AsmHeader."No.";
      "Ref. Line No." := 0;

      GetDimFromRefOrderLine(FALSE);
    END;

    PROCEDURE TransferFromTransLine@28(VAR TransLine@1000 : Record 5741);
    BEGIN
      TransHeader.GET(TransLine."Document No.");
      Item.GET(TransLine."Item No.");
      Type := Type::Item;
      "No." := TransLine."Item No.";
      "Variant Code" := TransLine."Variant Code";
      Description := TransLine.Description;
      "Description 2" := TransLine."Description 2";
      "Location Code" := TransLine."Transfer-to Code";
      "Dimension Set ID" := TransLine."Dimension Set ID";
      "Shortcut Dimension 1 Code" := TransLine."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := TransLine."Shortcut Dimension 2 Code";
      "Gen. Prod. Posting Group" := TransLine."Gen. Prod. Posting Group";
      "Low-Level Code" := Item."Low-Level Code";
      "Starting Date" := CALCDATE(TransLine."Outbound Whse. Handling Time",TransLine."Shipment Date");
      "Ending Date" := CALCDATE(TransLine."Shipping Time","Starting Date");
      "Due Date" := TransLine."Receipt Date";
      Quantity := TransLine.Quantity;
      "Finished Quantity" := TransLine."Quantity Received";
      "Remaining Quantity" := TransLine."Outstanding Quantity";
      BlockDynamicTracking(FALSE);
      "Unit of Measure Code" := TransLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := TransLine."Qty. per Unit of Measure";
      "Quantity (Base)" := TransLine."Quantity (Base)";
      "Finished Qty. (Base)" := TransLine."Qty. Received (Base)";
      "Remaining Qty. (Base)" := TransLine."Outstanding Qty. (Base)";
      "Replenishment System" := "Replenishment System"::Transfer;
      "Ref. Order No." := TransLine."Document No.";
      "Ref. Order Type" := "Ref. Order Type"::Transfer;
      "Ref. Line No." := TransLine."Line No.";
      "Transfer-from Code" := TransLine."Transfer-from Code";
      "Transfer Shipment Date" := TransLine."Shipment Date";
      GetDimFromRefOrderLine(FALSE);
    END;

    PROCEDURE GetDimFromRefOrderLine@30(AddToExisting@1000 : Boolean);
    VAR
      PurchLine@1001 : Record 39;
      ProdOrderLine@1002 : Record 5406;
      TransferLine@1003 : Record 5741;
      AsmHeader@1006 : Record 900;
      DimSetIDArr@1004 : ARRAY [10] OF Integer;
      i@1005 : Integer;
    BEGIN
      IF AddToExisting THEN BEGIN
        i := 1;
        DimSetIDArr[i] := "Dimension Set ID";
      END;
      i := i + 1;

      CASE "Ref. Order Type" OF
        "Ref. Order Type"::Purchase:
          BEGIN
            IF PurchLine.GET(PurchLine."Document Type"::Order,"Ref. Order No.","Ref. Line No.") THEN
              DimSetIDArr[i] := PurchLine."Dimension Set ID"
          END;
        "Ref. Order Type"::"Prod. Order":
          BEGIN
            IF ProdOrderLine.GET("Ref. Order Status","Ref. Order No.","Ref. Line No.") THEN
              DimSetIDArr[i] := ProdOrderLine."Dimension Set ID"
          END;
        "Ref. Order Type"::Transfer:
          BEGIN
            IF TransferLine.GET("Ref. Order No.","Ref. Line No.") THEN
              DimSetIDArr[i] := TransferLine."Dimension Set ID"
          END;
        "Ref. Order Type"::Assembly:
          BEGIN
            IF AsmHeader.GET(AsmHeader."Document Type"::Order,"Ref. Order No.") THEN
              DimSetIDArr[i] := AsmHeader."Dimension Set ID"
          END;
      END;
      "Dimension Set ID" := DimMgt.GetCombinedDimensionSetID(DimSetIDArr,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE TransferFromActionMessage@13(VAR ActionMessageEntry@1000 : Record 99000849);
    VAR
      ReservEntry@1001 : Record 337;
      EndDate@1002 : Date;
    BEGIN
      IF NOT ReservEntry.GET(ActionMessageEntry."Reservation Entry",TRUE) THEN
        ReservEntry.GET(ActionMessageEntry."Reservation Entry",FALSE);
      BlockDynamicTracking(TRUE);
      Type := Type::Item;
      VALIDATE("No.",ReservEntry."Item No.");
      BlockDynamicTracking(FALSE);
      VALIDATE("Variant Code",ReservEntry."Variant Code");
      VALIDATE("Location Code",ReservEntry."Location Code");
      Description := ReservEntry.Description;

      IF ReservEntry.Positive THEN
        EndDate := ReservEntry."Expected Receipt Date"
      ELSE
        EndDate := ReservEntry."Shipment Date";

      IF EndDate <> 0D THEN
        "Due Date" := EndDate
      ELSE
        "Due Date" := WORKDATE;

      CASE ReservEntry."Source Type" OF
        DATABASE::"Transfer Line",
        DATABASE::"Prod. Order Line",
        DATABASE::"Purchase Line",
        DATABASE::"Requisition Line",
        DATABASE::"Assembly Header":
          "Ending Date" :=
            LeadTimeMgt.PlannedEndingDate(
              ReservEntry."Item No.",
              ReservEntry."Location Code",
              ReservEntry."Variant Code",
              "Due Date",
              "Vendor No.",
              "Ref. Order Type");
      END;
    END;

    PROCEDURE TransferToTrackingEntry@16(VAR TrkgReservEntry@1000 : Record 337;PointerOnly@1001 : Boolean);
    BEGIN
      TrkgReservEntry."Source Type" := DATABASE::"Requisition Line";
      TrkgReservEntry."Source Subtype" := 0;
      TrkgReservEntry."Source ID" := "Worksheet Template Name";
      TrkgReservEntry."Source Batch Name" := "Journal Batch Name";
      TrkgReservEntry."Source Prod. Order Line" := 0;
      TrkgReservEntry."Source Ref. No." := "Line No.";

      IF PointerOnly THEN
        EXIT;
      TrkgReservEntry."Item No." := "No.";
      TrkgReservEntry."Location Code" := "Location Code";
      TrkgReservEntry.Description := '';
      TrkgReservEntry."Creation Date" := TODAY;
      TrkgReservEntry."Created By" := USERID;
      TrkgReservEntry."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
      TrkgReservEntry."Variant Code" := "Variant Code";
      CALCFIELDS("Reserved Quantity");
      TrkgReservEntry.Quantity := "Remaining Quantity" - "Reserved Quantity";
      TrkgReservEntry."Quantity (Base)" := TrkgReservEntry.Quantity * TrkgReservEntry."Qty. per Unit of Measure";

      TrkgReservEntry.Positive := TrkgReservEntry."Quantity (Base)" > 0;

      IF "Planning Level" > 0 THEN
        TrkgReservEntry."Reservation Status" := TrkgReservEntry."Reservation Status"::Reservation
      ELSE
        TrkgReservEntry."Reservation Status" := TrkgReservEntry."Reservation Status"::Tracking;

      IF TrkgReservEntry.Positive THEN
        TrkgReservEntry."Expected Receipt Date" := "Due Date"
      ELSE
        TrkgReservEntry."Shipment Date" := "Due Date";
    END;

    PROCEDURE UpdateDatetime@20();
    BEGIN
      "Starting Date-Time" := CREATEDATETIME("Starting Date","Starting Time");
      "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time");
    END;

    PROCEDURE GetDirectCost@12(CalledByFieldNo@1000 : Integer);
    BEGIN
      //**4PS function changed to global
      GetWorkCenter;
      IF ("Replenishment System" = "Replenishment System"::Purchase) AND NOT Subcontracting THEN BEGIN
        PurchPriceCalcMgt.FindReqLineDisc(Rec);
        PurchPriceCalcMgt.FindReqLinePrice(Rec,CalledByFieldNo);
      END;
    END;

    LOCAL PROCEDURE ValidateLocationChange@33();
    VAR
      Purchasing@1000 : Record 5721;
      SalesOrderLine@1001 : Record 37;
    BEGIN
      CASE TRUE OF
        "Location Code" = xRec."Location Code":
          EXIT;
        "Purchasing Code" = '':
          EXIT;
        NOT Purchasing.GET("Purchasing Code"):
          EXIT;
        NOT Purchasing."Special Order":
          EXIT;
        NOT SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,"Sales Order No.","Sales Order Line No."):
          EXIT;
        "Location Code" = SalesOrderLine."Location Code":
          EXIT;
      END;

      ERROR(Text028,FIELDCAPTION("Location Code"),TABLECAPTION);
    END;

    PROCEDURE RowID1@49() : Text[250];
    VAR
      ItemTrackingMgt@1000 : Codeunit 6500;
    BEGIN
      EXIT(ItemTrackingMgt.ComposeRowID(DATABASE::"Requisition Line",0,"Worksheet Template Name",
          "Journal Batch Name",0,"Line No."));
    END;

    PROCEDURE CalcEndingDate@37(LeadTime@1000 : Code[20]);
    BEGIN
      CASE "Ref. Order Type" OF
        "Ref. Order Type"::Purchase:
          IF LeadTime = '' THEN
            LeadTime := LeadTimeMgt.PurchaseLeadTime("No.","Location Code","Variant Code","Vendor No.");
        "Ref. Order Type"::"Prod. Order",
        "Ref. Order Type"::Assembly:
          BEGIN
            IF RoutingLineExists THEN
              EXIT;

            IF LeadTime = '' THEN
              LeadTime := LeadTimeMgt.ManufacturingLeadTime("No.","Location Code","Variant Code");
          END;
        "Ref. Order Type"::Transfer:
          CalcTransferShipmentDate;
        ELSE
          EXIT;
      END;

      "Ending Date" :=
        LeadTimeMgt.PlannedEndingDate2(
          "No.","Location Code","Variant Code","Vendor No.",LeadTime,"Ref. Order Type","Starting Date");
    END;

    PROCEDURE CalcStartingDate@51(LeadTime@1000 : Code[20]);
    VAR
      PurchasesPayablesSetup@1100525000 : Record 312;
    BEGIN
      CASE "Ref. Order Type" OF
        "Ref. Order Type"::Purchase:
          IF LeadTime = '' THEN
            LeadTime :=
              LeadTimeMgt.PurchaseLeadTime(
                "No.","Location Code","Variant Code","Vendor No.");
        "Ref. Order Type"::"Prod. Order",
        "Ref. Order Type"::Assembly:
          BEGIN
            IF RoutingLineExists THEN
              EXIT;

            IF LeadTime = '' THEN
              LeadTime := LeadTimeMgt.ManufacturingLeadTime("No.","Location Code","Variant Code");
          END;
        "Ref. Order Type"::" ":
          EXIT;
      END;

      "Starting Date" :=
        LeadTimeMgt.PlannedStartingDate(
          "No.","Location Code","Variant Code","Vendor No.",LeadTime,"Ref. Order Type","Ending Date");

      //**4PS.sn, kzwerver, 131003, #25388, #C005527
      PurchasesPayablesSetup.GET;
      IF (PurchasesPayablesSetup."Plan Req. Lines in the Past") AND
         ("Starting Date" < TODAY)
      THEN BEGIN
        "Starting Date" := TODAY;
        "Ending Date" := LeadTimeMgt.PlannedEndingDate2(
          "No.", "Location Code", "Variant Code", "Vendor No.", LeadTime, "Ref. Order Type", "Starting Date");
      END;
      //**4PS.en, kzwerver, 131003, #25388, #C005527

      VALIDATE("Order Date","Starting Date");

      IF "Ref. Order Type" = "Ref. Order Type"::Transfer THEN
        CalcTransferShipmentDate;
    END;

    PROCEDURE CalcTransferShipmentDate@31();
    VAR
      DateFormula@1000 : DateFormula;
      TransferRoute@1001 : Record 5742;
    BEGIN
      EVALUATE(DateFormula,LeadTimeMgt.WhseOutBoundHandlingTime("Transfer-from Code"));
      TransferRoute.CalcShipmentDateBackward("Transfer Shipment Date","Starting Date",DateFormula,"Transfer-from Code");
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetBin@7301(LocationCode@1000 : Code[10];BinCode@1001 : Code[20]);
    BEGIN
      IF BinCode = '' THEN
        CLEAR(Bin)
      ELSE
        IF Bin.Code <> BinCode THEN
          Bin.GET(LocationCode,BinCode);
    END;

    PROCEDURE SetSubcontracting@38(IsSubcontracting@1000 : Boolean);
    BEGIN
      Subcontracting := IsSubcontracting;
    END;

    PROCEDURE TransferFromUnplannedDemand@46(VAR UnplannedDemand@1000 : Record 5520);
    BEGIN
      INIT;
      "Line No." := "Line No." + 10000;
      "Planning Line Origin" := "Planning Line Origin"::"Order Planning";

      Type := Type::Item;
      "No." := UnplannedDemand."Item No.";
      "Location Code" := UnplannedDemand."Location Code";
      "Bin Code" := UnplannedDemand."Bin Code";
      VALIDATE("No.");
      VALIDATE("Variant Code",UnplannedDemand."Variant Code");
      UpdateDescription;
      "Unit Of Measure Code (Demand)" := UnplannedDemand."Unit of Measure Code";
      "Qty. per UOM (Demand)" := UnplannedDemand."Qty. per Unit of Measure";
      Reserve := UnplannedDemand.Reserve;

      CASE UnplannedDemand."Demand Type" OF
        UnplannedDemand."Demand Type"::Sales:
          "Demand Type" := DATABASE::"Sales Line";
        UnplannedDemand."Demand Type"::Production:
          "Demand Type" := DATABASE::"Prod. Order Component";
        UnplannedDemand."Demand Type"::Service:
          "Demand Type" := DATABASE::"Service Line";
        UnplannedDemand."Demand Type"::Job:
          "Demand Type" := DATABASE::"Job Planning Line";
        UnplannedDemand."Demand Type"::Assembly:
          "Demand Type" := DATABASE::"Assembly Line";
        //**4PS.sn
        UnplannedDemand."Demand Type"::Plant:
          "Demand Type" := DATABASE::"Plant Order Line";
        UnplannedDemand."Demand Type"::"Item Journal":
          "Demand Type" := DATABASE::"Item Journal Line";
        //**4PS.en
       END;
      "Demand Subtype" := UnplannedDemand."Demand SubType";
      "Demand Order No." := UnplannedDemand."Demand Order No.";
      "Demand Line No." := UnplannedDemand."Demand Line No.";
      "Demand Ref. No." := UnplannedDemand."Demand Ref. No.";
      IF UnplannedDemand."Special Order" THEN BEGIN
        "Sales Order No." := UnplannedDemand."Demand Order No.";
        "Sales Order Line No." := UnplannedDemand."Demand Line No.";
        "Sell-to Customer No." := UnplannedDemand."Sell-to Customer No.";
        "Purchasing Code" := UnplannedDemand."Purchasing Code";
      END;

      Status := UnplannedDemand.Status;

      Level := 1;
      "Action Message" := ReqLine."Action Message"::New;
      "User ID" := USERID;
    END;

    PROCEDURE SetSupplyDates@45(DemandDate@1000 : Date);
    VAR
      LeadTimeMgt@1001 : Codeunit 5404;
    BEGIN
      "Demand Date" := DemandDate;
      "Starting Date" := "Demand Date";
      "Order Date" := "Demand Date";
      VALIDATE("Due Date","Demand Date");

      IF "Planning Level" = 0 THEN BEGIN
        VALIDATE(
          "Ending Date",
          LeadTimeMgt.PlannedEndingDate(
            "No.","Location Code","Variant Code","Due Date",'',"Ref. Order Type"));
        IF ("Replenishment System" = "Replenishment System"::"Prod. Order") AND ("Starting Time" = 0T) THEN BEGIN
          MfgSetup.GET;
          "Starting Time" := MfgSetup."Normal Starting Time";
        END;
      END ELSE BEGIN
        VALIDATE("Ending Date","Due Date");
        VALIDATE("Ending Time",0T);
      END;
    END;

    PROCEDURE SetSupplyQty@42(DemandQtyBase@1002 : Decimal;NeededQtyBase@1001 : Decimal);
    BEGIN
      IF "Qty. per Unit of Measure" = 0 THEN
        "Qty. per Unit of Measure" := 1;

      "Demand Quantity" := ROUND(DemandQtyBase / "Qty. per Unit of Measure",0.00001);
      "Demand Quantity (Base)" := DemandQtyBase;
      "Needed Quantity" := ROUND(NeededQtyBase / "Qty. per Unit of Measure",0.00001);
      IF "Needed Quantity" < NeededQtyBase / "Qty. per Unit of Measure" THEN
        "Needed Quantity" := ROUND(NeededQtyBase / "Qty. per Unit of Measure",0.00001,'>');
      "Needed Quantity (Base)" := NeededQtyBase;
      "Demand Qty. Available" :=
        ROUND((DemandQtyBase - NeededQtyBase) / "Qty. per Unit of Measure",0.00001);
      VALIDATE(Quantity,"Needed Quantity");
    END;

    PROCEDURE SetResiliencyOn@48(WkshTemplName@1001 : Code[10];JnlBatchName@1000 : Code[10];ItemNo@1002 : Code[20]);
    BEGIN
      PlanningResiliency := TRUE;
      TempPlanningErrorLog.SetJnlBatch(WkshTemplName,JnlBatchName,ItemNo);
    END;

    PROCEDURE GetResiliencyError@47(VAR PlanningErrorLog@1000 : Record 5430) : Boolean;
    BEGIN
      EXIT(TempPlanningErrorLog.GetError(PlanningErrorLog));
    END;

    PROCEDURE SetResiliencyError@39(TheError@1002 : Text[250];TheTableID@1001 : Integer;TheTablePosition@1000 : Text[250]);
    BEGIN
      TempPlanningErrorLog.SetError(TheError,TheTableID,TheTablePosition);
    END;

    LOCAL PROCEDURE CheckExchRate@50();
    VAR
      CurrExchRate@1001 : Record 330;
    BEGIN
      CurrExchRate.SETRANGE("Currency Code","Currency Code");
      CurrExchRate.SETRANGE("Starting Date",0D,"Order Date");
      CASE TRUE OF
        NOT CurrExchRate.FINDLAST:
          TempPlanningErrorLog.SetError(
            STRSUBSTNO(
              Text038,
              Currency.TABLECAPTION,Currency.Code,"Vendor No.","Order Date"),
            DATABASE::Currency,Currency.GETPOSITION);
        CurrExchRate."Exchange Rate Amount" = 0:
          TempPlanningErrorLog.SetError(
            STRSUBSTNO(
              Text037,
              Currency.TABLECAPTION,Currency.Code,"Vendor No.",
              "Order Date",CurrExchRate.FIELDCAPTION("Exchange Rate Amount")),
            DATABASE::Currency,Currency.GETPOSITION);
        CurrExchRate."Relational Exch. Rate Amount" = 0:
          TempPlanningErrorLog.SetError(
            STRSUBSTNO(
              Text037,
              Currency.TABLECAPTION,Currency.Code,"Vendor No.",
              "Order Date",CurrExchRate.FIELDCAPTION("Relational Exch. Rate Amount")),
            DATABASE::Currency,Currency.GETPOSITION);
      END;
    END;

    LOCAL PROCEDURE CheckNoSeries@53(NoSeriesCode@1000 : Code[10];SeriesDate@1001 : Date);
    VAR
      NoSeries@1003 : Record 308;
      NoSeriesLine@1004 : Record 309;
      NoSeriesMgt@1002 : Codeunit 396;
    BEGIN
      CASE TRUE OF
        NOT NoSeries.GET(NoSeriesCode):
          TempPlanningErrorLog.SetError(
            STRSUBSTNO(
              Text035,
              NoSeries.TABLECAPTION,NoSeries.FIELDCAPTION(Code),NoSeriesCode,
              MfgSetup.TABLECAPTION,MfgSetup.FIELDCAPTION("Planned Order Nos.")),
            DATABASE::"No. Series",NoSeries.GETPOSITION);
        NOT NoSeries."Default Nos.":
          TempPlanningErrorLog.SetError(
            STRSUBSTNO(Text036,NoSeries.TABLECAPTION,NoSeries.FIELDCAPTION(Code),NoSeries.Code),
            DATABASE::"No. Series",NoSeries.GETPOSITION);
        ELSE
          IF SeriesDate = 0D THEN
            SeriesDate := WORKDATE;

          NoSeriesMgt.SetNoSeriesLineFilter(NoSeriesLine,NoSeriesCode,SeriesDate);
          IF NOT NoSeriesLine.FINDFIRST THEN BEGIN
            NoSeriesLine.SETRANGE("Starting Date");
            IF NoSeriesLine.FINDFIRST THEN BEGIN
              TempPlanningErrorLog.SetError(
                STRSUBSTNO(Text039,NoSeriesCode,SeriesDate),DATABASE::"No. Series",NoSeries.GETPOSITION);
              EXIT;
            END;
            TempPlanningErrorLog.SetError(
              STRSUBSTNO(Text040,NoSeriesCode),DATABASE::"No. Series",NoSeries.GETPOSITION);
            EXIT;
          END;

          IF NoSeries."Date Order" AND (SeriesDate < NoSeriesLine."Last Date Used") THEN BEGIN
            TempPlanningErrorLog.SetError(
              STRSUBSTNO(Text041,NoSeries.Code,NoSeriesLine."Last Date Used"),
              DATABASE::"No. Series",NoSeries.GETPOSITION);
            EXIT;
          END;
          NoSeriesLine."Last Date Used" := SeriesDate;
          IF NoSeriesLine."Last No. Used" = '' THEN BEGIN
            IF NoSeriesLine."Starting No." = '' THEN BEGIN
              TempPlanningErrorLog.SetError(
                STRSUBSTNO(
                  Text042,
                  NoSeries.Code,NoSeriesLine."Line No.",NoSeriesLine.FIELDCAPTION("Starting No.")),
                DATABASE::"No. Series",NoSeries.GETPOSITION);
              EXIT;
            END;
            NoSeriesLine."Last No. Used" := NoSeriesLine."Starting No.";
          END ELSE
            IF NoSeriesLine."Increment-by No." <= 1 THEN BEGIN
              IF STRLEN(INCSTR(NoSeriesLine."Last No. Used")) > 20 THEN BEGIN
                TempPlanningErrorLog.SetError(
                  STRSUBSTNO(
                    Text043,NoSeriesLine."Last No. Used",NoSeriesCode),
                  DATABASE::"No. Series",NoSeries.GETPOSITION);
                EXIT;
              END;
              NoSeriesLine."Last No. Used" := INCSTR(NoSeriesLine."Last No. Used")
            END ELSE
              IF NOT IncrementNoText(NoSeriesLine."Last No. Used",NoSeriesLine."Increment-by No.") THEN BEGIN
                TempPlanningErrorLog.SetError(
                  STRSUBSTNO(
                    Text043,NoSeriesLine."Last No. Used",NoSeriesCode),
                  DATABASE::"No. Series",NoSeries.GETPOSITION);
                EXIT;
              END;
          IF (NoSeriesLine."Ending No." <> '') AND
             (NoSeriesLine."Last No. Used" > NoSeriesLine."Ending No.")
          THEN
            TempPlanningErrorLog.SetError(
              STRSUBSTNO(Text044,NoSeriesLine."Ending No.",NoSeriesCode),
              DATABASE::"No. Series",NoSeries.GETPOSITION);
      END;
    END;

    LOCAL PROCEDURE IncrementNoText@56(VAR No@1000 : Code[20];IncrementByNo@1001 : Decimal) : Boolean;
    VAR
      DecimalNo@1002 : Decimal;
      StartPos@1003 : Integer;
      EndPos@1004 : Integer;
      NewNo@1005 : Text[30];
    BEGIN
      GetIntegerPos(No,StartPos,EndPos);
      EVALUATE(DecimalNo,COPYSTR(No,StartPos,EndPos - StartPos + 1));
      NewNo := FORMAT(DecimalNo + IncrementByNo,0,1);
      IF NOT ReplaceNoText(No,NewNo,0,StartPos,EndPos) THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ReplaceNoText@55(VAR No@1000 : Code[20];NewNo@1001 : Code[20];FixedLength@1002 : Integer;StartPos@1003 : Integer;EndPos@1004 : Integer) : Boolean;
    VAR
      StartNo@1005 : Code[20];
      EndNo@1006 : Code[20];
      ZeroNo@1007 : Code[20];
      NewLength@1008 : Integer;
      OldLength@1009 : Integer;
    BEGIN
      IF StartPos > 1 THEN
        StartNo := COPYSTR(No,1,StartPos - 1);
      IF EndPos < STRLEN(No) THEN
        EndNo := COPYSTR(No,EndPos + 1);
      NewLength := STRLEN(NewNo);
      OldLength := EndPos - StartPos + 1;
      IF FixedLength > OldLength THEN
        OldLength := FixedLength;
      IF OldLength > NewLength THEN
        ZeroNo := PADSTR('',OldLength - NewLength,'0');
      IF STRLEN(StartNo) + STRLEN(ZeroNo) + STRLEN(NewNo) + STRLEN(EndNo) > 20 THEN
        EXIT(FALSE);
      No := StartNo + ZeroNo + NewNo + EndNo;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetIntegerPos@57(No@1000 : Code[20];VAR StartPos@1001 : Integer;VAR EndPos@1002 : Integer);
    VAR
      IsDigit@1003 : Boolean;
      i@1004 : Integer;
    BEGIN
      StartPos := 0;
      EndPos := 0;
      IF No <> '' THEN BEGIN
        i := STRLEN(No);
        REPEAT
          IsDigit := No[i] IN ['0'..'9'];
          IF IsDigit THEN BEGIN
            IF EndPos = 0 THEN
              EndPos := i;
            StartPos := i;
          END;
          i := i - 1;
        UNTIL (i = 0) OR (StartPos <> 0) AND NOT IsDigit;
      END;
    END;

    LOCAL PROCEDURE FilterLinesWithItemToPlan@70(VAR Item@1000 : Record 27);
    BEGIN
      RESET;
      SETCURRENTKEY(Type,"No.");
      SETRANGE(Type,Type::Item);
      SETRANGE("No.",Item."No.");
      SETRANGE("Sales Order No.",'');
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SETFILTER("Due Date",Item.GETFILTER("Date Filter"));
      Item.COPYFILTER("Global Dimension 1 Filter","Shortcut Dimension 1 Code");
      Item.COPYFILTER("Global Dimension 2 Filter","Shortcut Dimension 2 Code");
      SETRANGE("Planning Line Origin","Planning Line Origin"::" ");
      SETFILTER("Quantity (Base)",'<>0');
    END;

    PROCEDURE FindLinesWithItemToPlan@68(VAR Item@1000 : Record 27) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item);
      EXIT(FIND('-'));
    END;

    LOCAL PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record 27) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item);
      EXIT(NOT ISEMPTY);
    END;

    PROCEDURE FindCurrForecastName@40(VAR ForecastName@1001 : Code[10]) : Boolean;
    VAR
      UntrackedPlngElement@1000 : Record 99000855;
    BEGIN
      IF (Type <> Type::Item) OR
         ("Planning Line Origin" <> "Planning Line Origin"::Planning)
      THEN
        EXIT(FALSE);
      UntrackedPlngElement.SETRANGE("Worksheet Template Name","Worksheet Template Name");
      UntrackedPlngElement.SETRANGE("Worksheet Batch Name","Journal Batch Name");
      UntrackedPlngElement.SETRANGE("Item No.","No.");
      UntrackedPlngElement.SETRANGE("Source Type",DATABASE::"Production Forecast Entry");
      IF UntrackedPlngElement.FINDFIRST THEN BEGIN
        ForecastName := COPYSTR(UntrackedPlngElement."Source ID",1,10);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE ShowDimensions@88();
    BEGIN
      DimMgt.SetTableID(DATABASE::"Requisition Line"); //**4PS.n
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Worksheet Template Name","Journal Batch Name","Line No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE ShowTimeline@7(ReqLine@1000 : Record 246);
    VAR
      ItemAvailByTimeline@1001 : Page 5540;
    BEGIN
      ReqLine.TESTFIELD(Type,Type::Item);
      ReqLine.TESTFIELD("No.");

      Item.GET("No.");
      Item.SETRANGE("No.",Item."No.");
      Item.SETRANGE("Variant Filter",ReqLine."Variant Code");
      Item.SETRANGE("Location Filter",ReqLine."Location Code");

      ItemAvailByTimeline.SetItem(Item);
      ItemAvailByTimeline.SetWorksheet(ReqLine."Worksheet Template Name",ReqLine."Journal Batch Name");
      ItemAvailByTimeline.RUN;
    END;

    PROCEDURE GetOriginalQtyBase@36() : Decimal;
    BEGIN
      EXIT(CalcBaseQty("Original Quantity"));
    END;

    PROCEDURE SetDropShipment@58(NewDropShipment@1000 : Boolean);
    BEGIN
      SourceDropShipment := NewDropShipment;
    END;

    LOCAL PROCEDURE GetWorkCenter@71();
    BEGIN
      IF WorkCenter."No." = "Work Center No." THEN
        EXIT;

      CLEAR(WorkCenter);
      IF WorkCenter.GET("Work Center No.") THEN
        SetSubcontracting(WorkCenter."Subcontractor No." <> '')
      ELSE
        SetSubcontracting(FALSE);
    END;

    LOCAL PROCEDURE RoutingLineExists@60() : Boolean;
    VAR
      RoutingLine@1000 : Record 99000764;
    BEGIN
      IF "Routing No." <> '' THEN BEGIN
        RoutingLine.SETRANGE("Routing No.","Routing No.");
        EXIT(NOT RoutingLine.ISEMPTY);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE ValidateItem@1210190000(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item');
    VAR
      DummyDat@11012001 : Date;
      NewNo@1210190000 : Code[20];
      lvRefDate@1100485004 : Date;
      lvDiscRef1@1100485003 : Code[20];
      lvDiscRef2@1100485002 : Code[20];
      ServOrderRec@1100485001 : Record 11012823;
      ProjRec@1100485000 : Record 11072003;
      VendorRelationRec@1100525000 : Record 11012313;
    BEGIN
      //**4PS
      MfgSetup.GET;
      "Accept Action Message" := NOT MfgSetup."Manual Set Action Message";
      IF Type = Type::Item THEN NewNo := "No.";

      IF "Service Order No." <>'' THEN BEGIN
        ServOrderRec.GET("Service Order No.");
        lvRefDate := ValidateCu.GetRefDateServOrder(ServOrderRec);
      //  lvDiscRef1 := ServOrderRec."Purch Discount Term Group 1";
      //  lvDiscRef2 := ServOrderRec."Purch Discount Term Group 2";
      END ELSE BEGIN
        IF "Project No." <>'' THEN BEGIN
          ProjRec.GET("Project No.");
          lvRefDate := ValidateCu.GetRefDateProject(ProjRec);
          lvDiscRef1 := ProjRec."Purch Discount Term Group 1";
          lvDiscRef2 := ProjRec."Purch Discount Term Group 2";
        END;
      END;

      ValidateCu.ValidateItem(LTypeArtOpt,"Trade Item",NewNo,Manufacturer,"Vendor (Trade Item)",
        "Basic Item","Shortcut Dimension 2 Code",Description,"Unit of Measure Code",
        "Unit Cost (LCY)","Discount % (Item)",DummyDat,"Unit Price (LCY)","Description 2","Cost Component",
        lvDiscRef1,lvDiscRef2,lvRefDate,'');

      VALIDATE("Cost Component");  //db, 24-02-10

      IF "Currency Factor" <> 0 THEN
        "Direct Unit Cost" := "Unit Cost (LCY)" * "Currency Factor"
      ELSE
        "Direct Unit Cost" := "Unit Cost (LCY)";

      IF (NewNo <> '') AND Item.GET(NewNo) THEN
        CheckIfItemIsBlocked(Item);  //db, 16-04-13: C006989
      IF Type = Type::Item THEN BEGIN
        "No." := NewNo;
        IF Item.GET("No.") AND (Item.Text <> '') THEN  //mg, 02-07-10: M19580
          VALIDATE(Text, Item.Text);
      END;

      GetVendorRelation;  //db, 03-07-14
      GetRefOrderTypeIFNoItem; //C018047.n
      GetDueDateTradeItem;  //db, 12-06-09: M14507

      //db.sn, 10-05-11: M26790
      IF ("Location Code" <> '') AND (LTypeArtOpt <> LTypeArtOpt::Item) THEN BEGIN
        GetLocation("Location Code");
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
          "Bin Code" := WMSManagement.GetDefaultBinLocation(
            "Project No.","Service Order No.","Location Code", '', '',TRUE);
      END;
      //db.en, 10-05-11: M26790
    END;

    PROCEDURE ValidateVendor@6506();
    VAR
      ProjRec@1210190010 : Record 11072003;
      VendorRec@1210190009 : Record 23;
    BEGIN
      //**4PS
      IF "Basic Item" = '' THEN EXIT;

      IF NOT ProjRec.GET("Project No.") THEN ProjRec.INIT;
      IF NOT VendorRec.GET(ProjRec."Project Supplier") THEN VendorRec.INIT;
      IF VendorRec."Vendor (Trade Item)" = '' THEN EXIT;

      xRec."Vendor (Trade Item)" := '';
      VALIDATE("Vendor (Trade Item)", VendorRec."Vendor (Trade Item)");

      IF "Trade Item" = '' THEN BEGIN
        xRec."Vendor (Trade Item)" := '';
        VALIDATE("Vendor (Trade Item)", Manufacturer);
      END;
    END;

    PROCEDURE HandleLookupUnit@1210190008();
    VAR
      ItemUnitRec@1210190000 : Record 5404;
      lvUnit@1210190001 : Code[10];
      ItemNo@1100525000 : Code[20];
    BEGIN
      //**4PS
      IF Type = Type::Item THEN //C009281
        ItemNo := "No.";

      lvUnit := ItemUnitRec.HandleLookupUnit(ItemNo, "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)");
      IF (lvUnit <> '') AND (lvUnit <> "Unit of Measure Code") THEN
        VALIDATE("Unit of Measure Code", lvUnit);
    END;

    PROCEDURE CheckVendorRelation@1100485004(lvFieldNo@1100525000 : Integer);
    VAR
      VendorRec@1100485001 : Record 23;
      VendorRelationRec@1100485000 : Record 11012313;
    BEGIN
      //**4PS
      IF lvFieldNo = FIELDNO("Vendor (Trade Item)") THEN BEGIN
        IF "Vendor (Trade Item)" <> '' THEN BEGIN
          IF VendorRelationRec.GET("Vendor (Trade Item)") THEN BEGIN
            IF VendorRelationRec."Vendor (Purchase)" <> '' THEN BEGIN
              "Vendor No." := VendorRelationRec."Vendor (Purchase)";
              GetDefaultOrderAddress;  //db, 07-05-09: M15276
            END;
          END;
        END;
      END;

      IF lvFieldNo = FIELDNO("Vendor No.") THEN BEGIN
        IF "Vendor No." <> '' THEN BEGIN
          IF VendorRec.GET("Vendor No.") THEN BEGIN
            IF VendorRec."Vendor (Trade Item)" <> '' THEN BEGIN
              IF "Trade Item" = '' THEN
                "Vendor (Trade Item)" := VendorRec."Vendor (Trade Item)";
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CalculateCostPriceLCY@1210190005();
    BEGIN
      //**4PS
      IF "Unit Price (LCY)" <> 0 THEN
        "Unit Cost (LCY)" := "Unit Price (LCY)" - (("Unit Price (LCY)"/100) * "Discount % (Item)");

      CalculateDirectUnitCost;
    END;

    PROCEDURE CalculateItemDiscount@1100525000();
    BEGIN
      //**4PS
      IF "Unit Price (LCY)" <> 0 THEN
        "Discount % (Item)" := (("Unit Price (LCY)" - "Unit Cost (LCY)") / "Unit Price (LCY)") * 100;

      CalculateDirectUnitCost;
    END;

    PROCEDURE CalculateDirectUnitCost@1100525001();
    VAR
      lvUnitCost@1100525000 : Decimal;
      CurrExchRate@1100525004 : Record 330;
    BEGIN
      //**4PS
      lvUnitCost := "Unit Cost (LCY)";
      IF "Currency Code" <> '' THEN BEGIN
        IF "Order Date" = 0D THEN
          "Order Date" := WORKDATE;
        lvUnitCost := CurrExchRate.ExchangeAmtLCYToFCY(
          0, '', "Order Date","Currency Code",lvUnitCost,"Currency Factor",FALSE);
      END;
      IF (CurrFieldNo = FIELDNO("Unit Cost (LCY)")) OR
         (CurrFieldNo = FIELDNO("Unit Price (LCY)")) OR
         (CurrFieldNo = FIELDNO("Discount % (Item)")) THEN BEGIN
        CurrFieldNo := 0;  //avoid recursion
        VALIDATE("Direct Unit Cost", lvUnitCost);
      END;
    END;

    PROCEDURE GetDefaultOrderAddress@1100525002();
    BEGIN
      //**4PS
      OrderAddr.SETRANGE("Vendor No.","Vendor No.");
      OrderAddr.SETRANGE("Default Order Address",TRUE);
      IF OrderAddr.FINDFIRST THEN
        "Order Address Code" := OrderAddr.Code;

      IF NOT OrderAddr.GET("Vendor No.", "Order Address Code") THEN
        "Order Address Code" := '';
    END;

    PROCEDURE GetDueDateTradeItem@1100525003();
    VAR
      lvPeriod@1100525000 : Text[30];
      lvReqLine@1100528000 : Record 246;
    BEGIN
      //**4PS
      IF ("Trade Item" = '') THEN EXIT;

      IF "Starting Date" = 0D THEN
        "Starting Date" := WORKDATE;
      lvPeriod := ValidateCu.GetDeliveryTimeItem('', Manufacturer, "Basic Item", "Vendor (Trade Item)", "Trade Item",
        0, '', "Vendor No.");
      IF lvPeriod = '' THEN EXIT;  //db, 02-07-09: M15891

      //"Ref. Order Type" := "Ref. Order Type"::Purchase;  //C018047.o
      //db.sn, 16-04-15: C020734
      lvReqLine := Rec;
      IF "Ref. Order Type" = "Ref. Order Type"::" " THEN
        "Ref. Order Type" := "Ref. Order Type"::Purchase; //required for calculating ending date to set due date
      //db.en, 16-04-15: C020734
      CalcEndingDate(lvPeriod);
      SetDueDate;
      "Ref. Order Type" := lvReqLine."Ref. Order Type";  //db, 16-04-15: C020734
    END;

    PROCEDURE SetDefaultsInsert@1100525004();
    BEGIN
      //**4PS
      PurchSetup.GET;
      IF PurchSetup."Price Agreement" = PurchSetup."Price Agreement"::Company THEN
        "Price Agreement" := TRUE
      ELSE
        "Price Agreement" := FALSE;
      "Created by" := USERID;
      "Date Created" := TODAY;
      "Modified by" := USERID;
      "Last Date Modified" := TODAY;
      "Purchase Route Reference" := '';
    END;

    PROCEDURE GetBaseQuanUnit@1100525012(VAR QuanBase@1100525002 : Decimal;VAR BaseUnit@1100525003 : Code[20]);
    VAR
      ItemRec@1100525000 : Record 27;
      TradeItemRec@1100525001 : Record 11012317;
    BEGIN
      //**4PS
      QuanBase := "Quantity (Base)";
      BaseUnit := '';
      IF "Trade Item" <> '' THEN BEGIN
        IF NOT TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN TradeItemRec.INIT;
        BaseUnit := UPPERCASE(TradeItemRec."Application Unit");
      END ELSE BEGIN
        IF Type = Type::Item THEN BEGIN
          IF NOT ItemRec.GET("No.") THEN ItemRec.INIT;
          BaseUnit := ItemRec."Base Unit of Measure";
        END;
      END;
    END;

    PROCEDURE GetServiceContract@1100525005() : Code[20];
    VAR
      ServiceOrder@1100525000 : Record 11012823;
    BEGIN
      //**4PS
      IF "Service Order No." = '' THEN
        EXIT;

      IF ServiceOrder.GET("Service Order No.") THEN
        EXIT(ServiceOrder."Service Contract No.");
    END;

    PROCEDURE CheckAdditionalCostService@1100525006();
    BEGIN
      //**4PS
      //db, 24-02-10
      IF "Service Order No." = '' THEN EXIT;
      IF NOT ServOrderRec.GET("Service Order No.") THEN EXIT;

      IF (CurrFieldNo = FIELDNO("Service Order No.")) OR (CurrFieldNo = FIELDNO("Shortcut Dimension 2 Code")) THEN BEGIN
        IF xRec."Shortcut Dimension 2 Code" = '' THEN
          xRec."Cost Type":= -1  //db, 16-03-10: disable default option
        ELSE
          xRec.CALCFIELDS("Cost Type");
        CALCFIELDS("Cost Type");
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Cost Type" <> xRec."Cost Type") THEN BEGIN
          "Additional Cost (Service)" :=
            ServOrderRec.GetAdditionalCostService("Service Order No.","Shortcut Dimension 2 Code","Cost Type"+1,'');
        END;
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Additional Cost (Service)" <> xRec."Additional Cost (Service)") THEN BEGIN
          IF "Additional Cost (Service)" = TRUE THEN
            VALIDATE("Shortcut Dimension 1 Code", ServOrderRec."Department Code (Other)")
          ELSE
            VALIDATE("Shortcut Dimension 1 Code", ServOrderRec."Global Dimension 1 Code");
        END;
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Cost Type" <> xRec."Cost Type") THEN BEGIN
          VALIDATE("Cost Component");
        END;
      END;
    END;

    PROCEDURE ValidateAdditionalCost@1100525008();
    VAR
      CostCompRec@1100525001 : Record 11012012;
      SaveCostComp@1100525000 : Text[30];
    BEGIN
      //**4PS
      SaveCostComp := "Cost Component";
      TESTFIELD("Service Order No.");
      VALIDATE("Service Order No.");
      IF CurrFieldNo <> FIELDNO("Additional Cost (Service)") THEN EXIT;  //db, 18-03-10: T4641

      IF CostCompRec.GET(SaveCostComp) THEN BEGIN
         "Cost Component" := SaveCostComp;
         IF ("Additional Cost (Service)" = TRUE) THEN BEGIN
           IF (CostCompRec."Cost Component (Add.Cost)" <> '') THEN
             "Cost Component" := CostCompRec."Cost Component (Add.Cost)";
         END ELSE BEGIN
           CostCompRec.SETRANGE("Cost Component (Add.Cost)", SaveCostComp);
           IF CostCompRec.FINDSET THEN BEGIN
             REPEAT
               IF (CostCompRec."Cost Component (Add.Cost)" = SaveCostComp) THEN
                 "Cost Component" := CostCompRec.Code;
             UNTIL CostCompRec.NEXT = 0;
           END;
         END;
      END;
    END;

    PROCEDURE ValidateCostComponent@1100525007();
    VAR
      CostCompRec@1100525000 : Record 11012012;
      CostCompRec2@1100525001 : Record 11012012;
    BEGIN
      //**4PS
      IF CurrFieldNo <> FIELDNO("Cost Component") THEN EXIT;  //db, 18-03-10: T4642

      IF CostCompRec.GET("Cost Component") THEN BEGIN
        //db.sn, 06-12-10: M24263
        IF CostCompRec."Additional Cost (Service)" THEN BEGIN
          CostCompRec2.SETRANGE("Cost Component (Add.Cost)", "Cost Component");
          IF NOT CostCompRec2.FINDFIRST THEN EXIT;
        END ELSE BEGIN
          IF CostCompRec."Cost Component (Add.Cost)" = '' THEN EXIT;
        END;
        //db.en, 06-12-10: M24263
        "Additional Cost (Service)" := CostCompRec."Additional Cost (Service)";
      END;
    END;

    PROCEDURE SetRefOrderNo@1100525009();
    VAR
      StrategicPurchMgt@1100525001 : Codeunit 11020211;
      PurchaseOrderNo@1100525000 : Code[20];
    BEGIN
      //**4PS
      IF (NOT "Use Blanket Order") OR ("Action Message" <> "Action Message"::New) THEN
        EXIT;

      PurchaseOrderNo := StrategicPurchMgt.NumberOfBlOrdersReqLine(Rec);
      IF (PurchaseOrderNo <> '') AND (COPYSTR(PurchaseOrderNo,1,1) <> '<') THEN BEGIN
        "Ref. Order No." := PurchaseOrderNo;
        "Ref. Order Type" := "Ref. Order Type"::Purchase;
      END;
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Shortcut Dimension 1 Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::"Requisition Line");
      IF Dimension1Code <> '' THEN
        "Shortcut Dimension 1 Code" := Dimension1Code;

      IF "Shortcut Dimension 1 Code" <> '' THEN
        VALIDATE("Shortcut Dimension 1 Code");
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(246) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 246');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Requisition Line", "Shortcut Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Shortcut Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Shortcut Dimension 1 Code");
    END;

    PROCEDURE SetLocationForBin@1100526201(ValidateBln@1100526200 : Boolean) LocCode : Code[20];
    VAR
      Location@1100526201 : Record 14;
    BEGIN
      //**4PS
      IF Type <> Type::Item THEN EXIT;  //db, 02-11-10

      LocCode := "Location Code";

      IF NOT ValidateBln THEN EXIT;
      IF LocCode = '' THEN EXIT;

      Location.GET(LocCode);
      IF Location."Bin Mandatory" THEN
        TESTFIELD("Bin Code");
    END;

    PROCEDURE GetDefaultBin@1100526200(iLoc@1100526202 : Code[20]) : Code[20];
    VAR
      Location@1100526204 : Record 14;
      WMSManagement@1100526203 : Codeunit 7302;
      BinCode@1100526201 : Code[20];
    BEGIN
      //**4PS
      IF Type <> Type::Item THEN EXIT;  //db, 02-11-10

      Location.GET(iLoc);
      IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN BEGIN
        BinCode := WMSManagement.GetDefaultBinLocation(
          "Project No.","Service Order No.","Location Code","No.","Variant Code",TRUE);  //db, 30-03-11
      END;

      EXIT(BinCode);
    END;

    PROCEDURE GetDefaultLocation@1100526202();
    VAR
      PrefLocRec@1100526200 : Record 11020353;
      CompInfo@1100526201 : Record 79;
    BEGIN
      //**4PS
      IF Type <> Type::Item THEN EXIT;  //db, 02-11-10

      PrefLocRec.SETCURRENTKEY(Priority);
      IF "Project No." <> '' THEN BEGIN
        PrefLocRec.SETRANGE(Type, PrefLocRec.Type::Job);
        PrefLocRec.SETRANGE("No.", "Project No.");
      END;
      IF "Service Order No." <> '' THEN BEGIN
        PrefLocRec.SETRANGE(Type, PrefLocRec.Type::"Service Order");
        PrefLocRec.SETRANGE("No.", "Service Order No.");
      END;
      IF PrefLocRec.FINDFIRST THEN BEGIN
        "Location Code" := PrefLocRec."Location Code";
      END ELSE BEGIN
        CompInfo.GET;
        IF CompInfo."Location Code" <> '' THEN
          "Location Code" := CompInfo."Location Code";
      END;

      IF "Location Code" <> '' THEN  BEGIN
        "Bin Code" := GetDefaultBin("Location Code");
        SetLocationForBin(TRUE);  //check PrefLoc binding
      END;
    END;

    PROCEDURE GetItemComposition@1100525011();
    VAR
      JobsSetup@1100525000 : Record 315;
      ItemComposition@1210190000 : Text[80];
    BEGIN
      JobsSetup.GET;
      IF "Trade Item" <> '' THEN
        "Item Composition" := "Vendor (Trade Item)" + "Trade Item"
      ELSE BEGIN
        ItemComposition := "No.";
        IF JobsSetup."Compress Adv Order by Variant" THEN
          ItemComposition := ItemComposition + "Variant Code";
        //IF JobsSetup."Compress Adv Order by Version" THEN
        //  ItemComposition := ItemComposition + Version;   //DP00137
        //IF JobsSetup."Compress Adv Order by Color" THEN
        //  ItemComposition := ItemComposition + Color;     //DP00137
        "Item Composition" := COPYSTR(ItemComposition,1,MAXSTRLEN("Item Composition"));
      END;
    END;

    PROCEDURE GetInventory@1210190001(Location@1100525000 : Code[10];VAR Item@1100525002 : Record 27;AllLocations@1100525001 : Boolean) Inventory : Decimal;
    VAR
      ItemAvailFormsMgt@1100525004 : Codeunit 353;
    BEGIN
      //**4PS, Call 19099
      EXIT(ItemAvailFormsMgt.GetInventory(Location,Item,AllLocations,"Due Date"));
    END;

    LOCAL PROCEDURE CheckLocation@1210190003(ReqWkshTemplate@1210190001 : Record 244);
    BEGIN
      //**4PS, kkleermaker, 110817, M28649
      IF ("Location Code" <> ReqWkshTemplate."Location Code") AND (ReqWkshTemplate."Location Code" <> '') THEN
        ERROR(
          Text11012000,
          FIELDCAPTION("Location Code"),
          "Location Code",
          ReqWkshTemplate."Location Code",
          ReqWkshTemplate.TABLECAPTION,
          "Worksheet Template Name");
    END;

    PROCEDURE CheckIfItemIsBlocked@1100528303(Item@1100528300 : Record 27);
    BEGIN
      //**4PS
      IF ("Ref. Order Type" = "Ref. Order Type"::Purchase) AND (NOT SKIPTESTBLOCKED) THEN //**4PS CALL C018091
        Item.TESTFIELD("Purchase Blocked",FALSE);
      Item.TESTFIELD(Blocked,FALSE);
    END;

    PROCEDURE SetSkipTest@1100525014(lSKIPTESTBLOCKED@1100525000 : Boolean);
    BEGIN
      SKIPTESTBLOCKED := lSKIPTESTBLOCKED;
    END;

    PROCEDURE GetWipAccount@1100525010();
    VAR
      ProjRec@1100525000 : Record 11072003;
      ProjTypeRec@1100525001 : Record 11012009;
      ServOrderRec@1100525002 : Record 11012823;
      ServTypeRec@1100525003 : Record 11012814;
      DimValRec@1100525004 : Record 349;
      DimMgt@1100525005 : Codeunit 408;
    BEGIN
      //**4PS
      //db, 03-07-14: C002114 (SpecialOrder TradeItem)
      GetVendorRelation;
      IF "Service Order No." <> '' THEN BEGIN
        ServOrderRec.GET("Service Order No.");
        ServOrderRec.TESTFIELD("Service Type");
        ServTypeRec.GET(ServOrderRec."Service Type");
        DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimValRec, TRUE, '');
        CALCFIELDS("Cost Type");
        "No." := ServTypeRec.GetWipAcc(
          ServTypeRec.Code,
          DimValRec."Cost Type",
          '',   //CompName,
          "Cost Type",  //CostTypeCostPlus (only relevant for revenue),
          "Vendor No.");
      END ELSE BEGIN
        IF "Project No." <> '' THEN BEGIN
          ProjRec.GET("Project No.");
          ProjRec.TESTFIELD("Project Type");
          ProjTypeRec.GET(ProjRec."Project Type");
          DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimValRec, TRUE, "Project No.");
          CALCFIELDS("Cost Type");
          "No." := ProjTypeRec.GetWipAcc(
            ProjTypeRec.Code,
            DimValRec."Cost Type",
            ProjRec."Project Status",
            FALSE, //Provisions at Closure
            '',    //CompName,
            "Cost Type",  //CostTypeCostPlus (only relevant for revenue),
            "Vendor No.");
         END;
      END;
    END;

    PROCEDURE GetVendorRelation@1100525013();
    VAR
      VendorRelationRec@1100525000 : Record 11012313;
    BEGIN
      //**4PS
      //db, 03-07-14
      IF "Vendor (Trade Item)" <> '' THEN BEGIN
        IF NOT VendorRelationRec.GET("Vendor (Trade Item)") THEN
          VendorRelationRec.INIT;
        IF VendorRelationRec."Vendor (Purchase)" <> '' THEN BEGIN
          "Vendor No." := VendorRelationRec."Vendor (Purchase)";
          GetDefaultOrderAddress;
        END;
        "Vendor Item No." := "Trade Item";
      END;
    END;

    PROCEDURE SetCurrentFieldNo@1100528000(NewCurrFieldNo@1100528000 : Integer);
    BEGIN
      //**4PS
      CurrentFieldNo := NewCurrFieldNo;
    END;

    LOCAL PROCEDURE GetRefOrderTypeIFNoItem@1100525015();
    BEGIN
      //**4PS C018047
      IF ("No." = '') AND ("Ref. Order Type" = "Ref. Order Type"::" ") THEN
        CASE "Replenishment System" OF
          "Replenishment System"::Purchase:
            "Ref. Order Type" := "Ref. Order Type"::Purchase;
          "Replenishment System"::"Prod. Order":
            "Ref. Order Type" := "Ref. Order Type"::"Prod. Order";
          "Replenishment System"::Transfer:
            "Ref. Order Type" := "Ref. Order Type"::Transfer;
        END;
    END;

    BEGIN
    {
      4PS02 HBK 07-07-09 Changed assigment of Accept Action Message
      4PS03 HBK 09-07-09 Added Fields "Use Blanket Order", "Blanket Order No." and "Blanket Order Line No."
      4PS02 HBK 10-08-09 Added Field: "Contract Found In"
      4PS03 HBK 14-04-10 Field: Ref. Order No. changed. Set Editable to <Yes> and added Ref. Order No. - OnValidate
      4PS04 HBK 22-04-10 Key changed: No.,Vendor (Trade Item),Trade Item added to key:
        Sort Purchase,Sell-to Customer No.,Ship-to Code,Order Address Code,Currency Code,No.,Vendor (Trade Item),Trade Item,Due Date
      DP00120: Dim1Code added to index 3 (for Table Item, Field 99000770) and index 4 (for Table Item, Field 99000771)
    }
    END.
  }
}

