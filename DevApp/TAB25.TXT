OBJECT Table 25 Vendor Ledger Entry
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00,NAVFI9.DK9.NO9,4PS9.00,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 122=rm,
                TableData 124=rm;
    OnInsert=VAR
               GenJnlPostPreview@1000 : Codeunit 19;
             BEGIN
               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05

               GenJnlPostPreview.SaveVendLedgEntry(Rec);
             END;

    CaptionML=ENU=Vendor Ledger Entry;
    LookupPageID=Page29;
    DrillDownPageID=Page29;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=ENU=Entry No. }
    { 3   ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Vendor No. }
    { 4   ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 5   ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 6   ;   ;Document No.        ;Code20        ;OnLookup=VAR
                                                              IncomingDocument@1000 : Record 130;
                                                            BEGIN
                                                              //IncomingDocument.HyperlinkToDocument("Document No.","Posting Date"); //**4PS.o
                                                              LookupDocument; //**4PS.n
                                                            END;

                                                   CaptionML=ENU=Document No. }
    { 7   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 11  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 13  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                               Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                               Posting Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 14  ;   ;Remaining Amount    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                               Posting Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=Remaining Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 15  ;   ;Original Amt. (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                       Entry Type=FILTER(Initial Entry),
                                                                                                                       Posting Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=Original Amt. (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 16  ;   ;Remaining Amt. (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                       Posting Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=Remaining Amt. (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 17  ;   ;Amount (LCY)        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                                       Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                       Posting Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=Amount (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 18  ;   ;Purchase (LCY)      ;Decimal       ;CaptionML=ENU=Purchase (LCY);
                                                   AutoFormatType=1 }
    { 20  ;   ;Inv. Discount (LCY) ;Decimal       ;CaptionML=ENU=Inv. Discount (LCY);
                                                   AutoFormatType=1 }
    { 21  ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Buy-from Vendor No. }
    { 22  ;   ;Vendor Posting Group;Code10        ;TableRelation="Vendor Posting Group";
                                                   CaptionML=ENU=Vendor Posting Group }
    { 23  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 24  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 25  ;   ;Purchaser Code      ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Purchaser Code }
    { 27  ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=ENU=User ID }
    { 28  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=ENU=Source Code }
    { 33  ;   ;On Hold             ;Code3         ;TableRelation="On Hold Code".Code;
                                                   OnValidate=VAR
                                                                ApprovalEntry@1100528200 : Record 454;
                                                              BEGIN
                                                                //**4PS.sn
                                                                //**4PS.sn DC
                                                                IF (CurrFieldNo = FIELDNO("On Hold")) AND ApprovalEntry.READPERMISSION AND
                                                                  ("Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"]) THEN
                                                                BEGIN
                                                                  IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                                                                    ApprovalEntry.SETRANGE("Table ID", 122);
                                                                    ApprovalEntry.SETRANGE("Document Type", ApprovalEntry."Document Type"::Invoice);
                                                                  END ELSE BEGIN
                                                                    ApprovalEntry.SETRANGE("Table ID",124);
                                                                    ApprovalEntry.SETRANGE("Document Type", ApprovalEntry."Document Type"::"Credit Memo");
                                                                  END;
                                                                  ApprovalEntry.SETRANGE("Document No.", "Document No.");
                                                                  ApprovalEntry.SETFILTER(Status, '%1|%2', ApprovalEntry.Status::Created, ApprovalEntry.Status::Open);
                                                                  IF NOT ApprovalEntry.ISEMPTY THEN
                                                                    ERROR(Text11012010);

                                                                  ApprovalEntry.SETFILTER(Status, '%1', ApprovalEntry.Status::Rejected);
                                                                  IF NOT ApprovalEntry.ISEMPTY THEN
                                                                    ERROR(Text11012011);

                                                                END;
                                                                //**4PS.sn DC

                                                                IF OnHoldRec.GET("On Hold") THEN
                                                                  "Approvement Initials" := OnHoldRec."Default Approvement Initials";

                                                                UpdatePostedDocument;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=On Hold }
    { 34  ;   ;Applies-to Doc. Type;Option        ;CaptionML=ENU=Applies-to Doc. Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 35  ;   ;Applies-to Doc. No. ;Code20        ;CaptionML=ENU=Applies-to Doc. No. }
    { 36  ;   ;Open                ;Boolean       ;CaptionML=ENU=Open }
    { 37  ;   ;Due Date            ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=ENU=Due Date }
    { 38  ;   ;Pmt. Discount Date  ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=ENU=Pmt. Discount Date }
    { 39  ;   ;Original Pmt. Disc. Possible;Decimal;
                                                   CaptionML=ENU=Original Pmt. Disc. Possible;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 40  ;   ;Pmt. Disc. Rcd.(LCY);Decimal       ;CaptionML=ENU=Pmt. Disc. Rcd.(LCY);
                                                   AutoFormatType=1 }
    { 43  ;   ;Positive            ;Boolean       ;CaptionML=ENU=Positive }
    { 44  ;   ;Closed by Entry No. ;Integer       ;TableRelation="Vendor Ledger Entry";
                                                   CaptionML=ENU=Closed by Entry No. }
    { 45  ;   ;Closed at Date      ;Date          ;CaptionML=ENU=Closed at Date }
    { 46  ;   ;Closed by Amount    ;Decimal       ;CaptionML=ENU=Closed by Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 47  ;   ;Applies-to ID       ;Code50        ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=ENU=Applies-to ID }
    { 49  ;   ;Journal Batch Name  ;Code10        ;TestTableRelation=No;
                                                   CaptionML=ENU=Journal Batch Name }
    { 50  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 51  ;   ;Bal. Account Type   ;Option        ;CaptionML=ENU=Bal. Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset;
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset }
    { 52  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Fixed Asset)) "Fixed Asset";
                                                   CaptionML=ENU=Bal. Account No. }
    { 53  ;   ;Transaction No.     ;Integer       ;CaptionML=ENU=Transaction No. }
    { 54  ;   ;Closed by Amount (LCY);Decimal     ;CaptionML=ENU=Closed by Amount (LCY);
                                                   AutoFormatType=1 }
    { 58  ;   ;Debit Amount        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Debit Amount" WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                                       Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                       Posting Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=Debit Amount;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 59  ;   ;Credit Amount       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Credit Amount" WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                                        Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                        Posting Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=Credit Amount;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 60  ;   ;Debit Amount (LCY)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Debit Amount (LCY)" WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                                             Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                             Posting Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=Debit Amount (LCY);
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 61  ;   ;Credit Amount (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Credit Amount (LCY)" WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                                              Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                              Posting Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=Credit Amount (LCY);
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 62  ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date }
    { 63  ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No. }
    { 64  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
    { 65  ;   ;Closed by Currency Code;Code10     ;TableRelation=Currency;
                                                   CaptionML=ENU=Closed by Currency Code }
    { 66  ;   ;Closed by Currency Amount;Decimal  ;AccessByPermission=TableData 4=R;
                                                   CaptionML=ENU=Closed by Currency Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Closed by Currency Code" }
    { 73  ;   ;Adjusted Currency Factor;Decimal   ;CaptionML=ENU=Adjusted Currency Factor;
                                                   DecimalPlaces=0:15 }
    { 74  ;   ;Original Currency Factor;Decimal   ;CaptionML=ENU=Original Currency Factor;
                                                   DecimalPlaces=0:15 }
    { 75  ;   ;Original Amount     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                               Entry Type=FILTER(Initial Entry),
                                                                                                               Posting Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=Original Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 76  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 77  ;   ;Remaining Pmt. Disc. Possible;Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                                CALCFIELDS(Amount,"Original Amount");

                                                                IF "Remaining Pmt. Disc. Possible" * Amount < 0 THEN
                                                                  FIELDERROR("Remaining Pmt. Disc. Possible",STRSUBSTNO(MustHaveSameSignErr,FIELDCAPTION(Amount)));

                                                                IF ABS("Remaining Pmt. Disc. Possible") > ABS("Original Amount") THEN
                                                                  FIELDERROR("Remaining Pmt. Disc. Possible",STRSUBSTNO(MustNotBeLargerErr,FIELDCAPTION("Original Amount")));
                                                              END;

                                                   CaptionML=ENU=Remaining Pmt. Disc. Possible;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 78  ;   ;Pmt. Disc. Tolerance Date;Date     ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=ENU=Pmt. Disc. Tolerance Date }
    { 79  ;   ;Max. Payment Tolerance;Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                                CALCFIELDS(Amount,"Remaining Amount");

                                                                IF "Max. Payment Tolerance" * Amount < 0 THEN
                                                                  FIELDERROR("Max. Payment Tolerance",STRSUBSTNO(MustHaveSameSignErr,FIELDCAPTION(Amount)));

                                                                IF ABS("Max. Payment Tolerance") > ABS("Remaining Amount") THEN
                                                                  FIELDERROR("Max. Payment Tolerance",STRSUBSTNO(MustNotBeLargerErr,FIELDCAPTION("Remaining Amount")));
                                                              END;

                                                   CaptionML=ENU=Max. Payment Tolerance;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 81  ;   ;Accepted Payment Tolerance;Decimal ;CaptionML=ENU=Accepted Payment Tolerance;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 82  ;   ;Accepted Pmt. Disc. Tolerance;Boolean;
                                                   CaptionML=ENU=Accepted Pmt. Disc. Tolerance }
    { 83  ;   ;Pmt. Tolerance (LCY);Decimal       ;CaptionML=ENU=Pmt. Tolerance (LCY);
                                                   AutoFormatType=1 }
    { 84  ;   ;Amount to Apply     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                                CALCFIELDS("Remaining Amount");

                                                                IF "Amount to Apply" * "Remaining Amount" < 0 THEN
                                                                  FIELDERROR("Amount to Apply",STRSUBSTNO(MustHaveSameSignErr,FIELDCAPTION("Remaining Amount")));

                                                                IF ABS("Amount to Apply") > ABS("Remaining Amount") THEN
                                                                  FIELDERROR("Amount to Apply",STRSUBSTNO(MustNotBeLargerErr,FIELDCAPTION("Remaining Amount")));
                                                              END;

                                                   CaptionML=ENU=Amount to Apply;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 85  ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   CaptionML=ENU=IC Partner Code }
    { 86  ;   ;Applying Entry      ;Boolean       ;CaptionML=ENU=Applying Entry }
    { 87  ;   ;Reversed            ;Boolean       ;CaptionML=ENU=Reversed }
    { 88  ;   ;Reversed by Entry No.;Integer      ;TableRelation="Vendor Ledger Entry";
                                                   CaptionML=ENU=Reversed by Entry No.;
                                                   BlankZero=Yes }
    { 89  ;   ;Reversed Entry No.  ;Integer       ;TableRelation="Vendor Ledger Entry";
                                                   CaptionML=ENU=Reversed Entry No.;
                                                   BlankZero=Yes }
    { 90  ;   ;Prepayment          ;Boolean       ;CaptionML=ENU=Prepayment }
    { 170 ;   ;Creditor No.        ;Code20        ;OnValidate=BEGIN
                                                                IF ("Creditor No." <> '') AND ("Recipient Bank Account" <> '') THEN
                                                                  FIELDERROR("Recipient Bank Account",
                                                                    STRSUBSTNO(FieldIsNotEmptyErr,FIELDCAPTION("Creditor No."),FIELDCAPTION("Recipient Bank Account")))
                                                                ELSE

                                                                //>>NAVDK
                                                                GLSetup.GET;
                                                                //>> PN-01
                                                                //IF GLSetup."Danish localization active" THEN
                                                                  IF GLSetup."Danish localization active" AND ("Recipient Bank Account" = '') AND ("Creditor No." <> '') THEN
                                                                //<< PN-01
                                                                  "Creditor No." := PADSTR('',MAXSTRLEN("Creditor No.") - STRLEN("Creditor No."),'0') + "Creditor No.";
                                                              END;

                                                   CaptionML=ENU=Creditor No.;
                                                   Numeric=Yes }
    { 171 ;   ;Payment Reference   ;Code50        ;OnValidate=VAR
                                                                PaymentMethod@1060001 : Record 289;
                                                                FIKManagement@1060000 : Codeunit 11128589;
                                                              BEGIN
                                                                IF "Payment Reference" <> '' THEN BEGIN
                                                                  TESTFIELD("Creditor No.");
                                                                  //>>NAVDK
                                                                  GLSetup.GET;
                                                                  IF GLSetup."Danish localization active" THEN BEGIN
                                                                    TESTFIELD("Payment Method Code");
                                                                    PaymentMethod.GET("Payment Method Code");
                                                                    BEGIN
                                                                      PaymentMethod.TESTFIELD("Payment Type Validation");
                                                                      CASE PaymentMethod."Payment Type Validation" OF
                                                                        PaymentMethod."Payment Type Validation"::"FIK 01",
                                                                        PaymentMethod."Payment Type Validation"::"FIK 73":
                                                                          ERROR(PmtReferenceErr,FIELDCAPTION("Payment Reference"),PaymentMethod.TABLECAPTION,"Payment Method Code");
                                                                      END;
                                                                      "Payment Reference" := FIKManagement.EvaluateFIK("Payment Reference","Payment Method Code");
                                                                    END;
                                                                  END;
                                                                  //<<NAVDK
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Payment Reference;
                                                   Numeric=Yes }
    { 172 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=VAR
                                                                BankAccount@1060001 : Record 270;
                                                                PaymentMethod@1060000 : Record 289;
                                                                VendBankAcc@1060002 : Record 288;
                                                                FIKManagement@1060003 : Codeunit 11128589;
                                                                PmtExportMgt@1060004 : Codeunit 1210;
                                                              BEGIN
                                                                IF GLSetup."Danish localization active" THEN BEGIN
                                                                  TESTFIELD(Open,TRUE);
                                                                  IF "Bal. Account Type" = "Bal. Account Type"::"Bank Account" THEN
                                                                    IF PaymentMethod.GET("Payment Method Code") THEN BEGIN
                                                                      IF PaymentMethod."Payment Type Validation" = PaymentMethod."Payment Type Validation"::" " THEN
                                                                        EXIT;
                                                                      BankAccount.GET("Bal. Account No.");
                                                                      CASE PaymentMethod."Payment Type Validation" OF
                                                                        PaymentMethod."Payment Type Validation"::"FIK 01",PaymentMethod."Payment Type Validation"::"FIK 73":
                                                                          "Payment Reference" := '';
                                                                        PaymentMethod."Payment Type Validation"::"FIK 04",PaymentMethod."Payment Type Validation"::"FIK 71":
                                                                          "Payment Reference" := FIKManagement.EvaluateFIK("Payment Reference","Payment Method Code");
                                                                      END;
                                                                      IF VendBankAcc.GET("Vendor No.","Recipient Bank Account") THEN
                                                                        PmtExportMgt.CheckBankTransferCountryRegion(BankAccount."Country/Region Code",VendBankAcc."Country/Region Code",PaymentMethod);
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Payment Method Code }
    { 173 ;   ;Applies-to Ext. Doc. No.;Code35    ;CaptionML=ENU=Applies-to Ext. Doc. No. }
    { 288 ;   ;Recipient Bank Account;Code10      ;TableRelation="Vendor Bank Account".Code WHERE (Vendor No.=FIELD(Vendor No.));
                                                   OnValidate=BEGIN
                                                                IF ("Recipient Bank Account" <> '') AND ("Creditor No." <> '') THEN
                                                                  FIELDERROR("Creditor No.",
                                                                    STRSUBSTNO(FieldIsNotEmptyErr,FIELDCAPTION("Recipient Bank Account"),FIELDCAPTION("Creditor No.")));
                                                              END;

                                                   CaptionML=ENU=Recipient Bank Account }
    { 289 ;   ;Message to Recipient;Text140       ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=ENU=Message to Recipient }
    { 290 ;   ;Exported to Payment File;Boolean   ;CaptionML=ENU=Exported to Payment File;
                                                   Editable=No }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=No }
    { 11012000;;Subcontracting Invoice;Boolean    ;OnValidate=BEGIN
                                                                IF NOT Open OR NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN
                                                                  FIELDERROR("Subcontracting Invoice",Text11012000);

                                                                IF ("Subcontracting Invoice" <> xRec."Subcontracting Invoice") AND ("Subcontracting Invoice" = FALSE) THEN
                                                                  "WKA approval" := FALSE;
                                                              END;

                                                   CaptionML=ENU=Subcontracting Invoice;
                                                   Editable=Yes }
    { 11012010;;Payment Agreement  ;Code20        ;TableRelation="Payment Agreement".Code WHERE (Sub Contractor=FIELD(Vendor No.));
                                                   OnValidate=VAR
                                                                AgreementRec@1000000000 : Record 11012028;
                                                              BEGIN
                                                                IF AgreementRec.GET("Payment Agreement") THEN BEGIN
                                                                  AgreementRec.TESTFIELD(Date);
                                                                  AgreementRec.TESTFIELD(Description);
                                                                  AgreementRec.TESTFIELD("Signed Return Date");
                                                                  IF "Currency Code" = '' THEN
                                                                    "Avg. Wage Rate" := AgreementRec."Avg. Wage Rate"
                                                                  ELSE
                                                                    "Avg. Wage Rate" :=
                                                                      ROUND(
                                                                        CurrencyExchRate.ExchangeAmtLCYToFCY(
                                                                          0,'',"Posting Date","Currency Code",
                                                                          AgreementRec."Avg. Wage Rate",
                                                                          CurrencyExchRate.ExchangeRate(0,'',"Posting Date","Currency Code",FALSE),FALSE));

                                                                  "Contribution Percentage Labor" := AgreementRec."Contribution Percentage Labor";
                                                                  "Contribution Percentage Total" := AgreementRec."Contribution Percentage Total";
                                                                  "Pay To Tax Authority" := AgreementRec."Pay To Tax Authority";
                                                                  "Actual Effective Date" := AgreementRec."Expected Effective Date";
                                                                  "Actual End Date" := AgreementRec."Expected Enddate";
                                                                END;

                                                                IF "Payment Agreement" <> '' THEN
                                                                  VALIDATE("Number of Hours", 1)
                                                                ELSE
                                                                  VALIDATE("Number of Hours", 0);
                                                              END;

                                                   CaptionML=ENU=Payment Agreement }
    { 11012020;;Actual Effective Date;Date        ;OnValidate=BEGIN
                                                                IF ("Actual Effective Date" > "Actual End Date") AND ("Actual End Date" <> 0D) THEN
                                                                  FIELDERROR("Actual Effective Date",STRSUBSTNO(Text11012001,FIELDCAPTION("Actual End Date")));
                                                              END;

                                                   CaptionML=ENU=Actual Effective Date }
    { 11012030;;Actual End Date    ;Date          ;OnValidate=BEGIN
                                                                IF ("Actual Effective Date" > "Actual End Date") AND ("Actual End Date" <> 0D) THEN
                                                                  FIELDERROR("Actual End Date",STRSUBSTNO(Text11012002,FIELDCAPTION("Actual Effective Date")));
                                                              END;

                                                   CaptionML=ENU=Actual End Date }
    { 11012033;;Applied Amount (LCY);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                       Entry Type=CONST(Application),
                                                                                                                       Posting Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=Applied Amount (LCY);
                                                   Editable=No }
    { 11012040;;Number of Hours    ;Decimal       ;OnValidate=BEGIN
                                                                WKACalculationCu.CalculateWageCharge("Number of Hours","Avg. Wage Rate","Currency Code","Labor Amount");
                                                                VALIDATE("Pay To Tax Authority");
                                                              END;

                                                   CaptionML=ENU=Number of Hours;
                                                   MinValue=0 }
    { 11012050;;Avg. Wage Rate     ;Decimal       ;OnValidate=BEGIN
                                                                WKACalculationCu.CalculateWageCharge("Number of Hours","Avg. Wage Rate","Currency Code","Labor Amount");
                                                                VALIDATE("Pay To Tax Authority");
                                                              END;

                                                   CaptionML=ENU=Avg. Wage Rate;
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 11012060;;Labor Amount       ;Decimal       ;OnValidate=BEGIN
                                                                WKACalculationCu.CalculateRate("Number of Hours","Labor Amount","Avg. Wage Rate");
                                                                VALIDATE("Pay To Tax Authority");
                                                              END;

                                                   CaptionML=ENU=Labor Amount;
                                                   MinValue=0;
                                                   AutoFormatType=1 }
    { 11012070;;Contribution Percentage Labor;Decimal;
                                                   OnValidate=BEGIN
                                                                IF (xRec."Contribution Percentage Labor" = 0) AND ("Contribution Percentage Labor" <> 0) THEN
                                                                  "Contribution Percentage Total" := 0;
                                                                VALIDATE("Pay To Tax Authority");
                                                              END;

                                                   OnLookup=VAR
                                                              ContBusRel@1000000001 : Record 5054;
                                                              ContIndustGroup@11012000 : Record 5058;
                                                            BEGIN
                                                              ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                              ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
                                                              ContBusRel.SETRANGE("No.", "Vendor No.");
                                                              IF NOT ContBusRel.FIND('-') THEN
                                                                ERROR(Text11012003,ContBusRel.TABLECAPTION,FIELDCAPTION("Vendor No."),"Vendor No.");

                                                              ContIndustGroup.SETRANGE("Contact No.",ContBusRel."Contact No.");
                                                              IF PAGE.RUNMODAL(PAGE::"Contact Industry Groups",ContIndustGroup) = ACTION::LookupOK THEN BEGIN
                                                                "Contribution Percentage Labor" := ContIndustGroup."Contribution Percentage Labor";
                                                                "Contribution Percentage Total" := ContIndustGroup."Contribution Percentage Total";
                                                                 VALIDATE("Contribution Percentage Labor");
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Contribution Percentage Labor;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 11012071;;Contribution Percentage Total;Decimal;
                                                   OnValidate=BEGIN
                                                                IF (xRec."Contribution Percentage Total" = 0) AND ("Contribution Percentage Total" <> 0) THEN
                                                                  "Contribution Percentage Labor" := 0;
                                                                VALIDATE("Pay To Tax Authority");
                                                              END;

                                                   OnLookup=VAR
                                                              ContBusRel@1000000001 : Record 5054;
                                                              ContIndustGroup@11012000 : Record 5058;
                                                            BEGIN
                                                              ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                              ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
                                                              ContBusRel.SETRANGE("No.", "Vendor No.");
                                                              IF NOT ContBusRel.FIND('-') THEN
                                                                ERROR(Text11012003,ContBusRel.TABLECAPTION,FIELDCAPTION("Vendor No."),"Vendor No.");

                                                              ContIndustGroup.SETRANGE("Contact No.",ContBusRel."Contact No.");
                                                              IF PAGE.RUNMODAL(PAGE::"Contact Industry Groups",ContIndustGroup) = ACTION::LookupOK THEN BEGIN
                                                                "Contribution Percentage Labor" := ContIndustGroup."Contribution Percentage Labor";
                                                                "Contribution Percentage Total" := ContIndustGroup."Contribution Percentage Total";
                                                                 VALIDATE("Contribution Percentage Total");
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Contribution Percentage Invoice Total;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 11012080;;Pay To Tax Authority;Boolean      ;OnValidate=BEGIN
                                                                WKACalculationCu.CalculateWageChart
                                                                  ("Vendor No.","Labor Amount","Contribution Percentage Labor","Pay To Tax Authority","Currency Code","Wage Charge (to B Account)"
                                                                ,
                                                                  "Wage Charge (to Tax Authority)","Contribution Percentage Total", GetInvoiceAmount);
                                                              END;

                                                   CaptionML=ENU=Pay To Tax Authority }
    { 11012090;;Wage Charge (to B Account);Decimal;OnValidate=BEGIN
                                                                WKACalculationCu.ValidateWageCharge(
                                                                  "Labor Amount","Currency Code","Wage Charge (to B Account)",
                                                                  "Contribution Percentage Labor","Contribution Percentage Total", GetInvoiceAmount);
                                                              END;

                                                   CaptionML=ENU=Wage Charge (to B Account);
                                                   MinValue=0;
                                                   AutoFormatType=1 }
    { 11012100;;Wage Charge (to Tax Authority);Decimal;
                                                   OnValidate=BEGIN
                                                                WKACalculationCu.ValidateWageTax(
                                                                  "Vendor No.","Labor Amount","Currency Code","Contribution Percentage Labor",
                                                                  "Wage Charge (to Tax Authority)","Contribution Percentage Total", GetInvoiceAmount);
                                                              END;

                                                   CaptionML=ENU=Wage Charge (to Tax Authority);
                                                   MinValue=0;
                                                   AutoFormatType=1 }
    { 11012110;;Nat.Ins.Contr.     ;Decimal       ;CaptionML=ENU=Nat.Ins.Contr.;
                                                   MinValue=0;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012120;;Memo               ;Text250       ;CaptionML=ENU=Memo }
    { 11012130;;Transaction Mode B Payments;Code20;CaptionML=ENU=Transaction Mode Code B Payments }
    { 11012140;;Bank Account Code B Payments;Code10;
                                                   TableRelation="Vendor Bank Account".Code WHERE (Vendor No.=FIELD(Vendor No.),
                                                                                                   B-Account=CONST(Yes));
                                                   CaptionML=ENU=Bank Account Code B Payments }
    { 11012150;;Approved           ;Boolean       ;CaptionML=ENU=Approved }
    { 11012160;;WKA approval       ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT (Open AND "Subcontracting Invoice" AND ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"])) THEN
                                                                  FIELDERROR("WKA approval",Text11012004);
                                                              END;

                                                   CaptionML=ENU=WKA approval }
    { 11012170;;Applies-to ID Tax  ;Code50        ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=ENU=Applies-to ID Tax }
    { 11012180;;Applies-to ID Enf.Inst.;Code50    ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=ENU=Applies-to ID Enf.Inst. }
    { 11012190;;Approvement Initials;Code10       ;TableRelation="Invoice Approval Initials".Code;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                UpdatePostedDocument;
                                                              END;

                                                   CaptionML=ENU=Approvement Initials }
    { 11012200;;Applies-to ID B    ;Code50        ;CaptionML=ENU=Applies-to ID B }
    { 11012220;;Remaining Amt. Due Date (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                       Due Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=Remaining Amt. Due Date (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012230;;Remaining Amt. Doc. Date (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                       Document Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=Remaining Amt. Doc. Date (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012235;;Consent Line Present;Boolean      ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Consent Line" WHERE (Document No.=FIELD(Document No.),
                                                                                           Consent=CONST(No)));
                                                   CaptionML=ENU=Consent Line Present;
                                                   Editable=No }
    { 11012240;;Comment Line Present;Boolean      ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purch. Comment Line" WHERE (No.=FIELD(Document No.)));
                                                   CaptionML=ENU=Comment Line Present;
                                                   Editable=No }
    { 11012250;;Your Reference     ;Text35        ;CaptionML=ENU=Your Reference }
    { 11012260;;Project No.        ;Code20        ;TableRelation=Job;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Project No.;
                                                   Editable=No }
    { 11012270;;Purchase Order No. ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purch. Inv. Header"."Order No." WHERE (No.=FIELD(Document No.)));
                                                   CaptionML=ENU=Purchase Order No.;
                                                   Editable=No }
    { 11012280;;Vendor Name        ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Vendor No.)));
                                                   CaptionML=ENU=Vendor Name;
                                                   Editable=No }
    { 11012290;;Description 2      ;Text50        ;CaptionML=ENU=Description 2 }
    { 11012291;;Pmt. Discount Date 2;Date         ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=ENU=Pmt. Discount Date 2;
                                                   Description=4PS }
    { 11012292;;Original Pmt. Disc. Possible 2;Decimal;
                                                   CaptionML=ENU=Original Pmt. Disc. Possible 2;
                                                   Description=4PS;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012293;;Pmt. Disc. Tolerance Date 2;Date  ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=ENU=Pmt. Disc. Tolerance Date 2;
                                                   Description=4PS }
    { 11012294;;Pmt. Discount Date 3;Date         ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=ENU=Pmt. Discount Date 3;
                                                   Description=4PS }
    { 11012295;;Original Pmt. Disc. Possible 3;Decimal;
                                                   CaptionML=ENU=Original Pmt. Disc. Possible 3;
                                                   Description=4PS;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012296;;Pmt. Disc. Tolerance Date 3;Date  ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=ENU=Pmt. Disc. Tolerance Date 3;
                                                   Description=4PS }
    { 11012297;;Remain. Pmt. Disc. Possible 2;Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                                CALCFIELDS(Amount,"Original Amount");

                                                                IF "Remaining Pmt. Disc. Possible" * Amount < 0 THEN
                                                                  FIELDERROR("Remaining Pmt. Disc. Possible",STRSUBSTNO(MustHaveSameSignErr,FIELDCAPTION(Amount)));

                                                                IF ABS("Remaining Pmt. Disc. Possible") > ABS("Original Amount") THEN
                                                                  FIELDERROR("Remaining Pmt. Disc. Possible",STRSUBSTNO(MustNotBeLargerErr,FIELDCAPTION("Original Amount")));
                                                              END;

                                                   CaptionML=ENU=Remaining Pmt. Disc. Possible 2;
                                                   Description=4PS;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012298;;Remain. Pmt. Disc. Possible 3;Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                                CALCFIELDS(Amount,"Original Amount");

                                                                IF "Remaining Pmt. Disc. Possible" * Amount < 0 THEN
                                                                  FIELDERROR("Remaining Pmt. Disc. Possible",STRSUBSTNO(MustHaveSameSignErr,FIELDCAPTION(Amount)));

                                                                IF ABS("Remaining Pmt. Disc. Possible") > ABS("Original Amount") THEN
                                                                  FIELDERROR("Remaining Pmt. Disc. Possible",STRSUBSTNO(MustNotBeLargerErr,FIELDCAPTION("Original Amount")));
                                                              END;

                                                   CaptionML=ENU=Remaining Pmt. Disc. Possible 3;
                                                   Description=4PS;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012300;;Last Application Date;Date        ;FieldClass=FlowField;
                                                   CalcFormula=Max("Detailed Vendor Ledg. Entry"."Posting Date" WHERE (Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                       Entry Type=FILTER(Application)));
                                                   CaptionML=ENU=Last Application Date;
                                                   Editable=No }
    { 11012310;;Subcontract No.    ;Code20        ;TableRelation="Subcontracter Contract".No. WHERE (Vendor No.=FIELD(Vendor No.),
                                                                                                     Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Subcontract No.;
                                                   Description=Retention }
    { 11012320;;Invoice DMS Status ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purch. Inv. Header"."DMS Status" WHERE (Buy-from Vendor No.=FIELD(Vendor No.),
                                                                                                               No.=FIELD(Document No.)));
                                                   CaptionML=ENU=Invoice DMS Status;
                                                   OptionCaptionML=ENU=" ,,,Awaiting Line Entry,,,Start Workflow,,,In Workflow,,,Approved,,,Rejected";
                                                   OptionString=[ ,,,Awaiting Line Entry,,,Start Workflow,,,In Workflow,,,Approved,,,Rejected];
                                                   Editable=No }
    { 11012321;;Invoice DMS Status Text;Text80    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purch. Inv. Header"."DMS Status Text" WHERE (Buy-from Vendor No.=FIELD(Vendor No.),
                                                                                                                    No.=FIELD(Document No.)));
                                                   CaptionML=ENU=Invoice DMS Status Text;
                                                   Editable=No }
    { 11012322;;Credit Memo DMS Status;Option     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purch. Cr. Memo Hdr."."DMS Status" WHERE (Buy-from Vendor No.=FIELD(Vendor No.),
                                                                                                                 No.=FIELD(Document No.)));
                                                   CaptionML=ENU=Credit Memo DMS Status;
                                                   OptionCaptionML=ENU=" ,,,Awaiting Line Entry,,,Start Workflow,,,In Workflow,,,Approved,,,Rejected";
                                                   OptionString=[ ,,,Awaiting Line Entry,,,Start Workflow,,,In Workflow,,,Approved,,,Rejected];
                                                   Editable=No }
    { 11012323;;Credit Memo DMS Status Text;Text80;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purch. Cr. Memo Hdr."."DMS Status Text" WHERE (Buy-from Vendor No.=FIELD(Vendor No.),
                                                                                                                      No.=FIELD(Document No.)));
                                                   CaptionML=ENU=Credit Memo DMS Status Text;
                                                   Editable=No }
    { 11126180;;Message Type       ;Option        ;InitValue=Reference No.;
                                                   CaptionML=ENU=Message Type;
                                                   OptionCaptionML=ENU=Reference No.,Invoice Information,Message,Long Message,Tax Message;
                                                   OptionString=Reference No.,Invoice Information,Message,Long Message,Tax Message;
                                                   Description=NAVFI }
    { 11126181;No;Invoice Message  ;Text250       ;CaptionML=ENU=Invoice Message;
                                                   Description=NAVFI }
    { 11126182;No;Invoice Message 2;Text250       ;CaptionML=ENU=Invoice Message 2;
                                                   Description=NAVFI }
    { 11126183;;Payment Date       ;Date          ;CaptionML=ENU=Payment Date;
                                                   Description=NAVFI }
    { 11128010;;Code for Bank of Sweden;Code3     ;CaptionML=ENU=Code for Bank of Sweden;
                                                   Numeric=Yes }
    { 11128011;;LB Giro Journal No.;Integer       ;TableRelation=LB-Pack;
                                                   CaptionML=ENU=LB Giro Journal No.;
                                                   BlankZero=Yes }
    { 11128012;;Initial Entry Due Date;Date       ;OnValidate=BEGIN
                                                                ERROR(''); //140304, forbidden to modify :)
                                                              END;

                                                   CaptionML=ENU=Initial Entry Due Date;
                                                   Editable=No }
    { 11128270;;Symbrio Export Date;Date          ;CaptionML=ENU=Symbrio Export Date;
                                                   Description=I045#P8;
                                                   Editable=No }
    { 11128500;;Remittance ID      ;Integer       ;TableRelation="Remittance Payment Order".ID;
                                                   CaptionML=ENU=Remittance ID;
                                                   Description=NAVNO }
    { 11128501;;KID                ;Code30        ;OnValidate=VAR
                                                                Tools@1000000001 : Codeunit 11128515;
                                                                ErrorMess@1000000000 : Text[250];
                                                              BEGIN
                                                                IF KID <> '' THEN BEGIN
                                                                  ErrorMess := Tools.CheckKID(KID);
                                                                  IF ErrorMess <> '' THEN
                                                                    ERROR(ErrorMess);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=KID;
                                                   Description=NAVNO }
    { 11128502;;Payment Type Code Abroad;Code2    ;TableRelation="Payment Type Code Abroad";
                                                   CaptionML=ENU=Payment Type Code Abroad;
                                                   Description=NAVNO }
    { 11128503;;Specification (Norges Bank);Code60;CaptionML=ENU=Specification (Norges Bank);
                                                   Description=NAVNO }
    { 11128620;;Giro Acc. No.      ;Code8         ;OnValidate=BEGIN
                                                                IF ("Giro Acc. No." <> '') THEN BEGIN
                                                                  IF ("Recipient Bank Account" <> '') THEN
                                                                    FIELDERROR("Recipient Bank Account",
                                                                      STRSUBSTNO(FieldIsNotEmptyErr,FIELDCAPTION("Giro Acc. No."),FIELDCAPTION("Recipient Bank Account")))
                                                                  ELSE
                                                                    "Giro Acc. No." := PADSTR('',MAXSTRLEN("Giro Acc. No.") - STRLEN("Giro Acc. No."),'0') + "Giro Acc. No.";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Giro Acc. No.;
                                                   Description=NAVDK }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Vendor No.,Posting Date,Currency Code   ;SumIndexFields=Purchase (LCY),Inv. Discount (LCY) }
    { No ;Vendor No.,Currency Code,Posting Date    }
    {    ;Document No.                             }
    {    ;External Document No.                    }
    {    ;Vendor No.,Open,Positive,Due Date,Currency Code }
    {    ;Open,Due Date                            }
    {    ;Document Type,Vendor No.,Posting Date,Currency Code;
                                                   SumIndexFields=Purchase (LCY),Inv. Discount (LCY);
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Closed by Entry No.                      }
    {    ;Transaction No.                          }
    { No ;Vendor No.,Global Dimension 1 Code,Global Dimension 2 Code,Posting Date,Currency Code;
                                                   SumIndexFields=Purchase (LCY),Inv. Discount (LCY) }
    { No ;Vendor No.,Open,Global Dimension 1 Code,Global Dimension 2 Code,Positive,Due Date,Currency Code }
    { No ;Open,Global Dimension 1 Code,Global Dimension 2 Code,Due Date }
    { No ;Document Type,Vendor No.,Global Dimension 1 Code,Global Dimension 2 Code,Posting Date,Currency Code;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Vendor No.,Applies-to ID,Open,Positive,Due Date }
    {    ;Open,Vendor No.,Currency Code,Posting Date }
    {    ;Open,Document No.,Global Dimension 1 Code,Global Dimension 2 Code,Document Date,Due Date }
    {    ;LB Giro Journal No.,Currency Code        }
    {    ;Open,Document Type,On Hold,Symbrio Export Date }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Entry No.,Description,Vendor No.,Posting Date,Document Type,Document No. }
    { 2   ;Brick               ;Document No.,Description,Remaining Amt. (LCY),Due Date }
  }
  CODE
  {
    VAR
      FieldIsNotEmptyErr@1002 : TextConst '@@@="%1=Field;%2=Field";ENU=%1 cannot be used while %2 has a value.';
      PmtReferenceErr@1060000 : TextConst '@@@="%1=Field;%2=Table;%3=Field";ENU=%1 should be blank for %2 %3.';
      MustHaveSameSignErr@1000 : TextConst 'ENU=must have the same sign as %1';
      MustNotBeLargerErr@1001 : TextConst 'ENU=must not be larger than %1';
      Text11012000@11012000 : TextConst 'ENU=only editable for Document Type Invoice or Credit Memo and Open';
      Text11012001@11012001 : TextConst 'ENU=must occur before %1';
      Text11012002@11012002 : TextConst 'ENU=must occur after  %1';
      Text11012003@11012003 : TextConst 'ENU=No %1 known for %2 %3';
      Text11012004@11012004 : TextConst 'ENU=only editable for Document Type Invoice or Credit Memo, Subcontracting and Open';
      CurrencyExchRate@11012007 : Record 330;
      OnHoldRec@1100525000 : Record 11012031;
      WKACalculationCu@11012005 : Codeunit 11012020;
      DPA_Management@1100000999 : Codeunit 11012783;
      Text11012005@1100528800 : TextConst 'ENU=On Hold Code may not be blank. This is taken from the Purchase Setup.';
      Text11012006@1100525001 : TextConst 'ENU=%1 %2 is already existing as a Proposal Entry';
      Text11012007@1100528400 : TextConst 'ENU=The %1 of %2 cannot be removed because the %3 of %4 %5 is empty.';
      Text11012008@1100528401 : TextConst 'ENU=The %1 of %2 cannot be removed because the %3 and %4 of %5 %6 are empty.';
      Text11012009@1100528402 : TextConst 'ENU=The %1 of %2 cannot be removed.';
      Text11012010@1100528200 : TextConst 'ENU=On Hold Code may not be blank. It is part of the approval flow.';
      Text11012011@1100409000 : TextConst 'ENU=On Hold Code may not be blank. Restart the approval pocedure.';
      DCSetupRead@1100525002 : Boolean;
      DocumentCaptureSetup@1100525003 : Record 6085573;
      GLSetup@1003 : Record 98;

    PROCEDURE ShowDoc@7() : Boolean;
    VAR
      PurchInvHeader@1003 : Record 122;
      PurchCrMemoHdr@1002 : Record 124;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Invoice:
          IF PurchInvHeader.GET("Document No.") THEN BEGIN
            PAGE.RUN(PAGE::"Posted Purchase Invoice",PurchInvHeader);
            EXIT(TRUE);
          END;
        "Document Type"::"Credit Memo":
          IF PurchCrMemoHdr.GET("Document No.") THEN BEGIN
            PAGE.RUN(PAGE::"Posted Purchase Credit Memo",PurchCrMemoHdr);
            EXIT(TRUE);
          END
      END;
    END;

    PROCEDURE DrillDownOnEntries@1(VAR DtldVendLedgEntry@1000 : Record 380);
    VAR
      VendLedgEntry@1001 : Record 25;
    BEGIN
      VendLedgEntry.RESET;
      DtldVendLedgEntry.COPYFILTER("Vendor No.",VendLedgEntry."Vendor No.");
      DtldVendLedgEntry.COPYFILTER("Currency Code",VendLedgEntry."Currency Code");
      DtldVendLedgEntry.COPYFILTER("Initial Entry Global Dim. 1",VendLedgEntry."Global Dimension 1 Code");
      DtldVendLedgEntry.COPYFILTER("Initial Entry Global Dim. 2",VendLedgEntry."Global Dimension 2 Code");
      VendLedgEntry.SETCURRENTKEY("Vendor No.","Posting Date");
      VendLedgEntry.SETRANGE(Open,TRUE);
      PAGE.RUN(0,VendLedgEntry);
    END;

    PROCEDURE DrillDownOnOverdueEntries@4(VAR DtldVendLedgEntry@1000 : Record 380);
    VAR
      VendLedgEntry@1001 : Record 25;
    BEGIN
      VendLedgEntry.RESET;
      DtldVendLedgEntry.COPYFILTER("Vendor No.",VendLedgEntry."Vendor No.");
      DtldVendLedgEntry.COPYFILTER("Currency Code",VendLedgEntry."Currency Code");
      DtldVendLedgEntry.COPYFILTER("Initial Entry Global Dim. 1",VendLedgEntry."Global Dimension 1 Code");
      DtldVendLedgEntry.COPYFILTER("Initial Entry Global Dim. 2",VendLedgEntry."Global Dimension 2 Code");
      VendLedgEntry.SETCURRENTKEY("Vendor No.","Posting Date");
      VendLedgEntry.SETFILTER("Date Filter",'..%1',WORKDATE);
      VendLedgEntry.SETFILTER("Due Date",'<%1',WORKDATE);
      VendLedgEntry.SETFILTER("Remaining Amount",'<>%1',0);
      PAGE.RUN(0,VendLedgEntry);
    END;

    PROCEDURE GetOriginalCurrencyFactor@2() : Decimal;
    BEGIN
      IF "Original Currency Factor" = 0 THEN
        EXIT(1);
      EXIT("Original Currency Factor");
    END;

    PROCEDURE ShowDimensions@3();
    VAR
      DimMgt@1000 : Codeunit 408;
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"Entry No."));
    END;

    PROCEDURE SetStyle@5() : Text;
    BEGIN
      IF Open THEN BEGIN
        IF WORKDATE > "Due Date" THEN
          EXIT('Unfavorable')
      END ELSE
        IF "Closed at Date" > "Due Date" THEN
          EXIT('Attention');
      EXIT('');
    END;

    PROCEDURE CopyFromGenJnlLine@6(GenJnlLine@1000 : Record 81);
    BEGIN
      "Vendor No." := GenJnlLine."Account No.";
      "Posting Date" := GenJnlLine."Posting Date";
      "Document Date" := GenJnlLine."Document Date";
      "Document Type" := GenJnlLine."Document Type";
      "Document No." := GenJnlLine."Document No.";
      "External Document No." := GenJnlLine."External Document No.";
      //>>NAVFI
      GLSetup.GET;
      IF GLSetup."Finnish localization active" THEN BEGIN
        "Message Type" := GenJnlLine."Message Type";
        //"Invoice Message" := GenJnlLine."Invoice Message";
        //"Invoice Message 2" := GenJnlLine."Invoice Message 2";
        "Payment Date" := GenJnlLine."Payment date";
        IF GenJnlLine."Payment date" = 0D THEN
          "Payment Date" := GenJnlLine."Due Date";
      END;
      //<<NAVFI
      Description := GenJnlLine.Description;
      "Currency Code" := GenJnlLine."Currency Code";
      "Purchase (LCY)" := GenJnlLine."Sales/Purch. (LCY)";
      "Inv. Discount (LCY)" := GenJnlLine."Inv. Discount (LCY)";
      "Buy-from Vendor No." := GenJnlLine."Sell-to/Buy-from No.";
      "Vendor Posting Group" := GenJnlLine."Posting Group";
      "Global Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
      "Global Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
      "Dimension Set ID" := GenJnlLine."Dimension Set ID";
      "Purchaser Code" := GenJnlLine."Salespers./Purch. Code";
      "Source Code" := GenJnlLine."Source Code";
      "On Hold" := GenJnlLine."On Hold";
      "Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type";
      "Applies-to Doc. No." := GenJnlLine."Applies-to Doc. No.";
      "Due Date" := GenJnlLine."Due Date";
      "Pmt. Discount Date" := GenJnlLine."Pmt. Discount Date";
      "Applies-to ID" := GenJnlLine."Applies-to ID";
      "Journal Batch Name" := GenJnlLine."Journal Batch Name";
      "Reason Code" := GenJnlLine."Reason Code";
      "User ID" := USERID;
      "Bal. Account Type" := GenJnlLine."Bal. Account Type";
      "Bal. Account No." := GenJnlLine."Bal. Account No.";
      "No. Series" := GenJnlLine."Posting No. Series";
      "IC Partner Code" := GenJnlLine."IC Partner Code";
      Prepayment := GenJnlLine.Prepayment;
      "Recipient Bank Account" := GenJnlLine."Recipient Bank Account";
      "Message to Recipient" := GenJnlLine."Message to Recipient";
      "Applies-to Ext. Doc. No." := GenJnlLine."Applies-to Ext. Doc. No.";
      "Creditor No." := GenJnlLine."Creditor No.";
      "Payment Reference" := GenJnlLine."Payment Reference";
      "Payment Method Code" := GenJnlLine."Payment Method Code";
      "Exported to Payment File" := GenJnlLine."Exported to Payment File";
      //NAVNO
      KID := GenJnlLine.KID;
      "Payment Type Code Abroad" := GenJnlLine."Payment Type Code Abroad";
      "Specification (Norges Bank)" := GenJnlLine."Specification (Norges Bank)";
      //NAVNO

      //**4PS.sn
      "Description 2" := GenJnlLine."Description 2";  //**4PS01.n
      "Pmt. Discount Date 2" := GenJnlLine."Pmt. Discount Date 2";
      "Pmt. Discount Date 3" := GenJnlLine."Pmt. Discount Date 3";
      "Subcontracting Invoice" := GenJnlLine."Subcontracting Invoice";
      "Payment Agreement" := GenJnlLine."Payment Agreement";
      "Actual Effective Date" := GenJnlLine."Expected Effective Date";
      "Actual End Date" := GenJnlLine."Expected Enddate";
      "Number of Hours" := GenJnlLine."Number of Hours";
      "Avg. Wage Rate" := GenJnlLine."Avg. Wage Rate";
      "Labor Amount" := GenJnlLine."Labor Amount";
      "Contribution Percentage Labor" := GenJnlLine."Contribution Percentage Labor";
      "Contribution Percentage Total" := GenJnlLine."Contribution Percentage Total"; // C002607
      "Pay To Tax Authority" := GenJnlLine."Pay To Tax Authority";
      "Wage Charge (to B Account)" := GenJnlLine."Wage Charge (to B Account)";
      "Wage Charge (to Tax Authority)" := GenJnlLine."Wage Charge (to Tax Authority)";
      Memo := GenJnlLine.Memo;
      "Transaction Mode B Payments" := GenJnlLine."Transaction Mode B Payments";
      "Bank Account Code B Payments" := GenJnlLine."Bank Account Code B Payments";
      Approved := GenJnlLine.Approved;
      "Approvement Initials" := GenJnlLine."Approvement Initials";
      "Your Reference" := GenJnlLine."Your Reference"; //20060706-JE
      "Project No." := GenJnlLine."Closed Project No."; //20090709
      "Subcontract No." := GenJnlLine."Subcontract No.";
      //**4PS.en
      "Giro Acc. No." := GenJnlLine."Giro Acc. No.";  //NAVDK

      OnAfterCopyVendLedgerEntryFromGenJnlLine(Rec,GenJnlLine);
    END;

    PROCEDURE RecalculateAmounts@36(FromCurrencyCode@1001 : Code[10];ToCurrencyCode@1002 : Code[10];PostingDate@1003 : Date);
    VAR
      CurrExchRate@1004 : Record 330;
    BEGIN
      IF ToCurrencyCode = FromCurrencyCode THEN
        EXIT;

      "Remaining Amount" :=
      //CurrExchRate.ExchangeAmount("Remaining Amount",FromCurrencyCode,ToCurrencyCode,PostingDate); //**4PS.o
        CurrExchRate.ExchangeAmount("Remaining Amount",FromCurrencyCode,ToCurrencyCode,PostingDate,FALSE); //**4PS.n
      "Remaining Pmt. Disc. Possible" :=
      //CurrExchRate.ExchangeAmount("Remaining Pmt. Disc. Possible",FromCurrencyCode,ToCurrencyCode,PostingDate); //**4PS.o
        CurrExchRate.ExchangeAmount("Remaining Pmt. Disc. Possible",FromCurrencyCode,ToCurrencyCode,PostingDate,FALSE); //**4PS.n
      //**4PS.sn
      "Remain. Pmt. Disc. Possible 2" :=
        CurrExchRate.ExchangeAmount("Remain. Pmt. Disc. Possible 2",FromCurrencyCode,ToCurrencyCode,PostingDate,FALSE);
      "Remain. Pmt. Disc. Possible 3" :=
        CurrExchRate.ExchangeAmount("Remain. Pmt. Disc. Possible 3",FromCurrencyCode,ToCurrencyCode,PostingDate,FALSE);
      //**4PS.en
      "Accepted Payment Tolerance" :=
      //CurrExchRate.ExchangeAmount("Accepted Payment Tolerance",FromCurrencyCode,ToCurrencyCode,PostingDate); //**4PS.o
        CurrExchRate.ExchangeAmount("Accepted Payment Tolerance",FromCurrencyCode,ToCurrencyCode,PostingDate,FALSE); //**4PS.n
      "Amount to Apply" :=
      //CurrExchRate.ExchangeAmount("Amount to Apply",FromCurrencyCode,ToCurrencyCode,PostingDate); //**4PS.o
        CurrExchRate.ExchangeAmount("Amount to Apply",FromCurrencyCode,ToCurrencyCode,PostingDate,FALSE); //**4PS.n
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyVendLedgerEntryFromGenJnlLine@8(VAR VendorLedgerEntry@1000 : Record 25;VAR GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    PROCEDURE UpdatePostedDocument@1100525000();
    VAR
      lPurchInvHeader@1100525001 : Record 122;
      lPurchCrMemoHeader@1100525000 : Record 124;
    BEGIN
      //**4PS
      // dp00206.sn
      IF "On Hold" = '' THEN BEGIN
        UpdatePostedDocWithSetupHold;
        EXIT;
      END;
      // dp00206.en

      CLEAR(OnHoldRec);
      IF "On Hold" <> '' THEN
        OnHoldRec.GET("On Hold");

      CASE "Document Type" OF
        "Document Type"::Invoice:
          IF lPurchInvHeader.GET("Document No.") THEN BEGIN
            lPurchInvHeader."On Hold" := "On Hold";
            lPurchInvHeader."Remain On Hold" := OnHoldRec."Remain On Hold";
            lPurchInvHeader."Approvement Initials" := "Approvement Initials";
            lPurchInvHeader.MODIFY;
          END;
        "Document Type"::"Credit Memo":
          IF lPurchCrMemoHeader.GET("Document No.") THEN BEGIN
            lPurchCrMemoHeader."On Hold" := "On Hold";
            lPurchCrMemoHeader."Remain On Hold" := OnHoldRec."Remain On Hold";
            lPurchCrMemoHeader."Approvement Initials" := "Approvement Initials";
            lPurchCrMemoHeader.MODIFY;
          END;
      END;
    END;

    PROCEDURE UpdatePostedDocumentWithoutChk@1100409000();
    VAR
      lPurchInvHeader@1100525001 : Record 122;
      lPurchCrMemoHeader@1100525000 : Record 124;
    BEGIN
      //**4PS.n
      // dp00206.n
      CLEAR(OnHoldRec);
      IF "On Hold" <> '' THEN
        OnHoldRec.GET("On Hold");

      CASE "Document Type" OF
        "Document Type"::Invoice:
          IF lPurchInvHeader.GET("Document No.") THEN BEGIN
            lPurchInvHeader."On Hold" := "On Hold";
            lPurchInvHeader."Remain On Hold" := OnHoldRec."Remain On Hold";
            lPurchInvHeader."Approvement Initials" := "Approvement Initials";
            lPurchInvHeader.MODIFY;
          END;
        "Document Type"::"Credit Memo":
          IF lPurchCrMemoHeader.GET("Document No.") THEN BEGIN
            lPurchCrMemoHeader."On Hold" := "On Hold";
            lPurchCrMemoHeader."Remain On Hold" := OnHoldRec."Remain On Hold";
            lPurchCrMemoHeader."Approvement Initials" := "Approvement Initials";
            lPurchCrMemoHeader.MODIFY;
          END;
      END;
    END;

    PROCEDURE UpdatePostedDocWithSetupHold@1100525022();
    VAR
      PurchInvHeader@1100528801 : Record 122;
      PurchCrMemoHeader@1100528800 : Record 124;
      PurchSetup@1100528802 : Record 312;
      PurchaseHeader@1100528803 : Record 38;
      RelatedDocPresent@1100528804 : Boolean;
      Modified@1100525000 : Boolean;
    BEGIN
      //**4PS
      // dp00206.n
      PurchSetup.GET;

      RelatedDocPresent := FALSE; // C006181.n

      CASE "Document Type" OF
        "Document Type"::Invoice:
          IF PurchInvHeader.GET("Document No.") THEN BEGIN
            IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Order, PurchInvHeader."Related Purch. Order No.") THEN
              RelatedDocPresent := TRUE; // C006181.n
          END;
        "Document Type"::"Credit Memo":
          IF PurchCrMemoHeader.GET("Document No.") THEN BEGIN
            IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Order, PurchCrMemoHeader."Related Purch. Order No.") THEN
              RelatedDocPresent := TRUE; // C006181.n
          END;
      END;

      // C006181.sn
      IF RelatedDocPresent = FALSE THEN BEGIN
        UpdatePostedDocumentWithoutChk;
        EXIT;
      END;
      // C006181.en

      Modified := FALSE;  // C006181.n
      IF PurchSetup."On Hold No Contract" AND
         PurchaseHeader."Contract Applicable" AND
         (PurchaseHeader."Return Date Signed Contract" = 0D)
      THEN BEGIN
        PurchSetup.TESTFIELD("On Hold Code No Contract");
        "On Hold" := PurchSetup."On Hold Code No Contract";
        MODIFY;
        Modified := TRUE; // C006181.n
        UpdatePostedDocument;
        MESSAGE(Text11012005);
      END;

      IF PurchaseHeader.LetterOfCreditIsApplicable AND
         (PurchaseHeader."Return Date Letter of Credit" = 0D)
      THEN BEGIN
        PurchSetup.TESTFIELD("On Hold Code No Letter of Cr.");
        "On Hold" := PurchSetup."On Hold Code No Letter of Cr.";
        MODIFY;
        Modified := TRUE; // C006181.n
        UpdatePostedDocument;
        MESSAGE(Text11012005);
      END;

      // C006181.sn
      IF NOT Modified THEN
        UpdatePostedDocumentWithoutChk;
      // C006181.en
    END;

    PROCEDURE GetInvoiceAmount@1210190000() InvoiceAmountDec : Decimal;
    VAR
      lPurchInvHeader@1210190001 : Record 122;
      lPurchCrMemoHeader@1210190000 : Record 124;
    BEGIN
      //**4PS
      InvoiceAmountDec := 0;
      CASE "Document Type" OF
        "Document Type"::Invoice:
          IF lPurchInvHeader.GET("Document No.") THEN BEGIN
            lPurchInvHeader.CALCFIELDS(Amount);
            InvoiceAmountDec := lPurchInvHeader.Amount;
          END;
        "Document Type"::"Credit Memo":
          IF lPurchCrMemoHeader.GET("Document No.") THEN BEGIN
            lPurchCrMemoHeader.CALCFIELDS(Amount);
            InvoiceAmountDec := lPurchCrMemoHeader.Amount;
          END;
      END;
    END;

    PROCEDURE HasOpenConsentLines@1100528400() : Boolean;
    VAR
      PurchInvHeader@1100528400 : Record 122;
      PurchCrMemoHdr@1100528401 : Record 124;
    BEGIN
      //**4PS
      CASE "Document Type" OF
        "Document Type"::Invoice:
          IF PurchInvHeader.GET("Document No.") THEN BEGIN
            PurchInvHeader.CALCFIELDS("Consent Lines");
            EXIT(PurchInvHeader."Consent Lines");
          END;
        "Document Type"::"Credit Memo":
          IF PurchCrMemoHdr.GET("Document No.") THEN BEGIN
            PurchCrMemoHdr.CALCFIELDS("Consent Lines");
            EXIT(PurchCrMemoHdr."Consent Lines");
          END;
      END;
    END;

    PROCEDURE OnHoldCodeCanBeRemoved@1100528401(VAR RelatedPurchOrderNo@1100528405 : Code[20];VAR OnHoldCodeNoContract@1100528403 : Code[3];VAR OnHoldCodeNoLetterOfCr@1100528404 : Code[3]) : Boolean;
    VAR
      RelatedPurchOrderHeader@1100528402 : Record 38;
      PurchInvHeader@1100528401 : Record 122;
      PurchCrMemoHdr@1100528400 : Record 124;
    BEGIN
      //**4PS, C008247
      CASE "Document Type" OF
        "Document Type"::Invoice:
          IF PurchInvHeader.GET("Document No.") THEN BEGIN
            IF NOT RelatedPurchOrderHeader.GET(
              RelatedPurchOrderHeader."Document Type"::Order,
              PurchInvHeader."Related Purch. Order No.")
            THEN
              EXIT(TRUE);
          END;
        "Document Type"::"Credit Memo":
          IF PurchCrMemoHdr.GET("Document No.") THEN BEGIN
            IF NOT RelatedPurchOrderHeader.GET(
              RelatedPurchOrderHeader."Document Type"::Order,
              PurchCrMemoHdr."Related Purch. Order No.")
            THEN
              EXIT(TRUE);
          END;
      END;

      IF RelatedPurchOrderHeader."No." = '' THEN
        EXIT(TRUE);

      RelatedPurchOrderNo := RelatedPurchOrderHeader."No.";
      OnHoldCodeNoContract := RelatedPurchOrderHeader.DetermineOnHoldNoContract;
      OnHoldCodeNoLetterOfCr := RelatedPurchOrderHeader.DetermineOnHoldNoLetterOfCr;
      IF (OnHoldCodeNoContract = '') AND
         (OnHoldCodeNoLetterOfCr = '')
      THEN
        EXIT(TRUE);
    END;

    PROCEDURE CheckIfOnHoldCodeCanBeRemoved@1100528402() ReturnOnHoldCode : Code[3];
    VAR
      PurchaseHeader@1100528403 : Record 38;
      OnHoldCode@1100528404 : Record 11012031;
      RelatedPurchOrderNo@1100528402 : Code[20];
      OnHoldCodeNoContract@1100528401 : Code[3];
      OnHoldCodeNoLetterOfCr@1100528400 : Code[3];
    BEGIN
      //**4PS, C008247
      ReturnOnHoldCode := '';   // C010724.n
      IF NOT OnHoldCodeCanBeRemoved(
        RelatedPurchOrderNo,
        OnHoldCodeNoContract,
        OnHoldCodeNoLetterOfCr)
      THEN
        CASE TRUE OF
          (OnHoldCodeNoContract <> '') AND (OnHoldCodeNoLetterOfCr = ''):
            MESSAGE(              //Call C010724.modify
              Text11012007, OnHoldCode.TABLECAPTION, "Document No.",
              PurchaseHeader.FIELDCAPTION("Return Date Signed Contract"),
              PurchaseHeader.FIELDCAPTION("Related Purch. Order No."),
              RelatedPurchOrderNo);
          (OnHoldCodeNoContract = '') AND (OnHoldCodeNoLetterOfCr <> ''):
            MESSAGE(              //Call C010724.modify
              Text11012007, OnHoldCode.TABLECAPTION, "Document No.",
              PurchaseHeader.FIELDCAPTION("Return Date Letter of Credit"),
              PurchaseHeader.FIELDCAPTION("Related Purch. Order No."),
              RelatedPurchOrderNo);
          (OnHoldCodeNoContract <> '') AND (OnHoldCodeNoLetterOfCr <> ''):
            MESSAGE(               //Call C010724.modify
              Text11012008, OnHoldCode.TABLECAPTION, "Document No.",
              PurchaseHeader.FIELDCAPTION("Return Date Signed Contract"),
              PurchaseHeader.FIELDCAPTION("Return Date Letter of Credit"),
              PurchaseHeader.FIELDCAPTION("Related Purch. Order No."),
              RelatedPurchOrderNo);
          ELSE
            ERROR(
              Text11012008, FIELDCAPTION("On Hold"), "Document No.");
        END;

      // C010724.sn
      ReturnOnHoldCode := OnHoldCodeNoLetterOfCr;
      ReturnOnHoldCode := OnHoldCodeNoContract;
      //Usually only one (or none) of the 2 codes above will be filled, if both are then OnHoldCodeNoContract has the priority
      // C010724.en
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Global Dimension 1 Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::"Vendor Ledger Entry");
      IF Dimension1Code <> '' THEN
        "Global Dimension 1 Code" := Dimension1Code;

      IF "Global Dimension 1 Code" <> '' THEN
        VALIDATE("Global Dimension 1 Code");
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(25) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 25');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Vendor Ledger Entry", "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    LOCAL PROCEDURE LookupDocument@1100528403();
    VAR
      PurchInvHeader@1100528403 : Record 122;
      PurchCrMemoHdr@1100528402 : Record 124;
      PostedPurchaseInvoice@1100528401 : Page 138;
      PostedPurchaseCreditMemo@1100528400 : Page 140;
      PostedPurchaseInvoiceDC@1100525000 : Page 11126507;
      PostedPurchaseCreditMemoDC@1100525001 : Page 11126508;
    BEGIN
      //**4PS
      CASE "Document Type" OF
        "Document Type"::Invoice:
          BEGIN
            PurchInvHeader.SETRANGE("No.","Document No.");
            IF PurchInvHeader.FINDFIRST THEN BEGIN
              //CALL C020437 sn
              IF IsDocumentCaptureActive THEN BEGIN
                PostedPurchaseInvoiceDC.SETRECORD(PurchInvHeader);
                PostedPurchaseInvoiceDC.RUNMODAL;
              END ELSE BEGIN
              //CALL C020437 en
                PostedPurchaseInvoice.SETRECORD(PurchInvHeader);
                PostedPurchaseInvoice.RUNMODAL;
              END;//CALL C020437
            END;
          END;
        "Document Type"::"Credit Memo":
          BEGIN
            PurchCrMemoHdr.SETRANGE("No.","Document No.");
            IF PurchCrMemoHdr.FINDFIRST THEN BEGIN
              //CALL C020437 sn
              IF IsDocumentCaptureActive THEN BEGIN
                PostedPurchaseCreditMemoDC.SETRECORD(PurchCrMemoHdr);
                PostedPurchaseCreditMemoDC.RUNMODAL;
              END ELSE BEGIN
              //CALL C020437 en
                PostedPurchaseCreditMemo.SETRECORD(PurchCrMemoHdr);
                PostedPurchaseCreditMemo.RUNMODAL;
              END;//CALL C020437
            END;
          END;
      END;
    END;

    PROCEDURE IsDocumentCaptureActive@1100528203() : Boolean;
    BEGIN
      //**4PS  CALL C020437
      IF NOT DCSetupRead THEN BEGIN
        IF NOT DocumentCaptureSetup.READPERMISSION THEN
          EXIT(FALSE);
        IF DocumentCaptureSetup.GET THEN;
          DCSetupRead := TRUE;
      END;
      EXIT(DocumentCaptureSetup."Document Nos." <> '');
    END;

    BEGIN
    {
      151109 ITERO.DL IME424 new key: Open,Document Type,On Hold
      Version List=NAVW19.00,NAVFI9.00;
      NAVFI: disabled fields "Invoice Message", "Invoice Message 2"
    }
    END.
  }
}

