OBJECT Table 288 Vendor Bank Account
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.45480,NAVFI9.DK9,4PS9.00,4PSSE.DK.FI,PE6.03.06,EXF400000;
  }
  PROPERTIES
  {
    DataCaptionFields=Vendor No.,Code,Name;
    OnInsert=BEGIN
               //**4PS.sn

               CentrProspMngmt.UpdateVendorBank(Rec,1,xRec);
               //**4PS.en
             END;

    OnModify=BEGIN
               // ExFlow->
               IF ExFlowSetup.GET THEN
                 ExfVendIDMgt.UpdateVendorIDFromVendBank(Rec,FALSE);
               // <-ExFlow
               //**4PS.sn
               SwiftCodeWarningCheck;
               CentrProspMngmt.UpdateVendorBank(Rec,2,xRec);
               //**4PS.en
             END;

    OnDelete=VAR
               VendorLedgerEntry@1000 : Record 25;
               Vendor@1001 : Record 23;
             BEGIN
               VendorLedgerEntry.SETRANGE("Vendor No.","Vendor No.");
               VendorLedgerEntry.SETRANGE("Recipient Bank Account",Code);
               VendorLedgerEntry.SETRANGE(Open,TRUE);
               IF NOT VendorLedgerEntry.ISEMPTY THEN
                 ERROR(BankAccDeleteErr);
               IF Vendor.GET("Vendor No.") AND (Vendor."Preferred Bank Account" = Code) THEN BEGIN
                 Vendor."Preferred Bank Account" := '';
               //Vendor.MODIFY; //**4PS.o
                 Vendor.MODIFY(TRUE); //**4PS.n
               END;

               //**4PS.sn
               CentrProspMngmt.UpdateVendorBank(Rec,4,xRec);
               //**4PS.en
             END;

    CaptionML=ENU=Vendor Bank Account;
    LookupPageID=Page426;
    DrillDownPageID=Page426;
  }
  FIELDS
  {
    { 1   ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Vendor No.;
                                                   NotBlank=Yes }
    { 2   ;   ;Code                ;Code10        ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF Code <> xRec.Code THEN BEGIN
                                                                  BankAccRec := xRec;
                                                                  IF BankAccRec.FIND THEN
                                                                    CentrProspMngmt.UpdateVendorBank(Rec,3,xRec);
                                                                END;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 3   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 5   ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 6   ;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 7   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 8   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City }
    { 9   ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code }
    { 10  ;   ;Contact             ;Text50        ;CaptionML=ENU=Contact }
    { 11  ;   ;Phone No.           ;Text30        ;OnValidate=BEGIN
                                                                PhoneNumberFormatting.ValidatePhoneNumber("Country/Region Code", "Phone No."); //**4PS.n
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 12  ;   ;Telex No.           ;Text20        ;CaptionML=ENU=Telex No. }
    { 13  ;   ;Bank Branch No.     ;Text20        ;OnValidate=BEGIN
                                                                //>>NAVDK
                                                                GLSetup.GET;
                                                                IF GLSetup."Danish localization active" THEN
                                                                  IF ("Bank Branch No." <> '') AND (STRLEN("Bank Branch No.") < 4) THEN
                                                                    "Bank Branch No." := PADSTR('',4 - STRLEN("Bank Branch No."),'0') + "Bank Branch No.";
                                                                //<<NAVDK
                                                              END;

                                                   CaptionML=ENU=Bank Branch No. }
    { 14  ;   ;Bank Account No.    ;Text30        ;OnValidate=VAR
                                                                lvBankAccountRec@1210190000 : Record 288;
                                                                lvMessage@1210190001 : Boolean;
                                                              BEGIN
                                                                //**4PS.sn
                                                                //**4PS.en
                                                                //**4PS.sn
                                                                IF "Bank Account No." <> '' THEN BEGIN
                                                                  lvBankAccountRec.SETCURRENTKEY("Bank Account No.");
                                                                  lvBankAccountRec.SETRANGE("Bank Account No.","Bank Account No.");
                                                                  IF lvBankAccountRec.FINDSET THEN BEGIN
                                                                    REPEAT
                                                                      IF (lvBankAccountRec."Vendor No." <> "Vendor No.") OR (lvBankAccountRec.Code <> Code) THEN BEGIN
                                                                        MESSAGE(Text11012000, FIELDCAPTION("Bank Account No."), "Bank Account No.",
                                                                                              FIELDCAPTION("Vendor No."), lvBankAccountRec."Vendor No.",
                                                                                              FIELDCAPTION(Code), lvBankAccountRec.Code) ;
                                                                        lvMessage := TRUE;
                                                                      END;
                                                                    UNTIL (lvBankAccountRec.NEXT = 0) OR lvMessage
                                                                  END;
                                                                END;
                                                                //**4PS.en

                                                                //>>NAVDK
                                                                GLSetup.GET;
                                                                IF GLSetup."Danish localization active" THEN
                                                                  IF ("Bank Account No." <> '') AND (STRLEN("Bank Account No.") < 10) THEN
                                                                    "Bank Account No." := PADSTR('',10 - STRLEN("Bank Account No."),'0') + "Bank Account No.";
                                                                //<<NAVDK
                                                                //>>NAVFI
                                                                IF GLSetup."Finnish localization active" THEN
                                                                  IF ("Country/Region Code" = '') OR ("Country/Region Code" = 'FI') THEN BEGIN
                                                                    IF STRLEN("Bank Account No.") > 15 THEN
                                                                      ERROR(Text1090000,FIELDCAPTION("Bank Account No."));
                                                                    IF "Bank Account No." <> '' THEN
                                                                      BankNosCheck.CheckBankAccount ("Bank Account No.",Code);
                                                                  END;
                                                                //<<NAVFI
                                                              END;

                                                   CaptionML=ENU=Bank Account No. }
    { 15  ;   ;Transit No.         ;Text20        ;CaptionML=ENU=Transit No. }
    { 16  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 17  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                //>>NAVFI
                                                                GLSetup.GET;
                                                                IF GLSetup."Finnish localization active" THEN
                                                                  VALIDATE("Bank Account No.");
                                                                //<<NAVFI
                                                              END;

                                                   CaptionML=ENU=Country/Region Code }
    { 18  ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 19  ;   ;Fax No.             ;Text30        ;CaptionML=ENU=Fax No. }
    { 20  ;   ;Telex Answer Back   ;Text20        ;CaptionML=ENU=Telex Answer Back }
    { 21  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 22  ;   ;E-Mail              ;Text80        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=E-Mail }
    { 23  ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=Home Page }
    { 24  ;   ;IBAN                ;Code50        ;OnValidate=VAR
                                                                CompanyInfo@1000 : Record 79;
                                                                lvBankAccountRec@1210190001 : Record 288;
                                                                lvMessage@1210190000 : Boolean;
                                                              BEGIN
                                                                CompanyInfo.CheckIBAN(IBAN);
                                                                //**4PS.sn
                                                                IF IBAN <> '' THEN BEGIN
                                                                  SwiftCodeWarningCheck();  //C016340.n
                                                                  lvBankAccountRec.SETCURRENTKEY(IBAN);
                                                                  lvBankAccountRec.SETRANGE(IBAN,IBAN);
                                                                  IF lvBankAccountRec.FINDSET THEN BEGIN
                                                                    REPEAT
                                                                      IF (lvBankAccountRec."Vendor No." <> "Vendor No.") OR (lvBankAccountRec.Code <> Code) THEN BEGIN
                                                                        MESSAGE(Text11012000, FIELDCAPTION(IBAN), IBAN,
                                                                                              FIELDCAPTION("Vendor No."), lvBankAccountRec."Vendor No.",
                                                                                              FIELDCAPTION(Code), lvBankAccountRec.Code) ;
                                                                        lvMessage := TRUE;
                                                                      END;
                                                                    UNTIL (lvBankAccountRec.NEXT = 0) OR lvMessage
                                                                  END;
                                                                END;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=IBAN }
    { 25  ;   ;SWIFT Code          ;Code20        ;OnValidate=BEGIN
                                                                SwiftCodeWarningCheck();  //C016340.n
                                                              END;

                                                   CaptionML=ENU=SWIFT Code }
    { 1211;   ;Bank Clearing Code  ;Text50        ;CaptionML=ENU=Bank Clearing Code }
    { 1212;   ;Bank Clearing Standard;Text50      ;TableRelation="Bank Clearing Standard";
                                                   CaptionML=ENU=Bank Clearing Standard }
    { 11012000;;B-Account          ;Boolean       ;CaptionML=ENU=B-Account }
    { 11012001;;Account Holder Search Name;Code50 ;CaptionML=ENU=Account Holder Search Name }
    { 11126170;;SEPA Payment       ;Boolean       ;CaptionML=ENU=SEPA Payment;
                                                   Description=NAVFI }
    { 11126181;;Clearing Code      ;Text35        ;CaptionML=ENU=Clearing Code;
                                                   Description=NAVFI }
    { 11128061;;Plus Giro No.      ;Text20        ;OnValidate=VAR
                                                                VPSetup@12047958 : Record 11128066;
                                                              BEGIN
                                                                // PEB0009
                                                                gBaseMgt.SearchNameFromGiro(Rec);
                                                                VPSetup.GET;
                                                                IF ("Plus Giro No." <> '') AND VPSetup."Check Giro Account" THEN
                                                                  IF NOT gVPManagement.SumCheck10Control("Plus Giro No.") THEN
                                                                    ERROR(PEB001,FIELDCAPTION("Plus Giro No."),"Vendor No.");
                                                                // 0009
                                                              END;

                                                   CaptionML=ENU=Plus Giro No.;
                                                   Description=PEB0091 }
    { 11128062;;Payment Charge Paid by;Option     ;CaptionML=ENU=Payment Charge Paid by;
                                                   OptionCaptionML=ENU=Sender - Swedish Cost,Express Fee Receiver,Receiver,Sender - All Cost;
                                                   OptionString=Sender - Swedish Cost,Express Fee Receiver,Receiver,Sender - All Cost;
                                                   Description=PEB0091 }
    { 11128063;;Payment Type       ;Option        ;InitValue=Account;
                                                   CaptionML=ENU=Payment Type;
                                                   OptionCaptionML=ENU=Check,Account,Postal Check;
                                                   OptionString=Check,Account,Postal Check;
                                                   Description=PEB0091 }
    { 11128064;;Payment Method     ;Option        ;CaptionML=ENU=Payment Method;
                                                   OptionCaptionML=ENU=Normal,Express;
                                                   OptionString=Normal,Express;
                                                   Description=PEB0091 }
    { 11128065;;Currency Account   ;Boolean       ;CaptionML=ENU=Currency Account;
                                                   Description=PEB0091 }
    { 11128066;;Giro Type Code     ;Code10        ;TableRelation="VP Giro Type";
                                                   CaptionML=ENU=Giro Type Code;
                                                   Description=PEB0091 }
    { 11128067;;Bank Giro No.      ;Text30        ;OnValidate=VAR
                                                                VPSetup@12047958 : Record 11128066;
                                                              BEGIN
                                                                // PEB0009
                                                                gBaseMgt.SearchNameFromGiro(Rec);
                                                                VPSetup.GET;
                                                                IF ("Bank Giro No." <> '') AND VPSetup."Check Giro Account" THEN
                                                                  IF NOT gVPManagement.SumCheck10Control("Bank Giro No.") THEN
                                                                    ERROR(PEB001,FIELDCAPTION("Bank Giro No."),"Vendor No.");
                                                                // 0009
                                                              END;

                                                   CaptionML=ENU=Bank Giro No.;
                                                   Description=PEB0091 }
    { 11128068;;Code for Bank of Sweden;Code3     ;CaptionML=ENU=Code for Bank of Sweden;
                                                   Numeric=Yes;
                                                   Description=PEB0091 }
    { 11128069;;Account Payment with Advising;Boolean;
                                                   OnValidate=VAR
                                                                Vendor@12047958 : Record 23;
                                                              BEGIN
                                                                IF "Account Payment with Advising" THEN BEGIN
                                                                  Vendor.GET("Vendor No.");
                                                                  Vendor.TESTFIELD(Name);
                                                                  Vendor.TESTFIELD(City);
                                                                  Vendor.TESTFIELD("Post Code");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Account Payment with Advising;
                                                   Description=PEB0091 }
    { 11128070;;Country Code ISO + Account No.;Code37;
                                                   CaptionML=ENU=Country Code ISO + Account No.;
                                                   Description=PEB0091 }
    { 11128071;;Payment Relation   ;Option        ;CaptionML=ENU=Payment Relation;
                                                   OptionCaptionML=ENU=" ,Domestic,Foreign";
                                                   OptionString=[ ,Domestic,Foreign];
                                                   Description=PEB0091 }
  }
  KEYS
  {
    {    ;Vendor No.,Code                         ;Clustered=Yes }
    {    ;Bank Account No.                         }
    {    ;IBAN                                     }
  }
  FIELDGROUPS
  {
    { 1   ;Brick               ;Code,Name,Phone No.,Contact              }
  }
  CODE
  {
    VAR
      PostCode@1000 : Record 225;
      BankAccRec@11012002 : Record 288;
      BankNosCheck@1090000 : Codeunit 11126182;
      Text1090000@1090001 : TextConst 'ENU=Domestic %1 must not exceed 15 characters.';
      CentrProspMngmt@11012003 : Codeunit 11012010;
      Text1000001@1100525000 : TextConst 'ENU=%1 %2 may be incorrect.';
      Text11012000@1210190000 : TextConst 'ENU=%1 %2 already exists at %3 %4 %5 %6';
      PhoneNumberFormatting@1100528700 : Codeunit 11012276;
      GLSetup@11001 : Record 98;
      "********ExFlow*********"@12013587 : Integer;
      ExfVendIDMgt@12013588 : Codeunit 12013667;
      ExFlowSetup@12013589 : Record 12013601;
      BankAccIdentifierIsEmptyErr@1001 : TextConst 'ENU=You must specify either a Bank Account No. or an IBAN.';
      BankAccDeleteErr@1002 : TextConst 'ENU=You cannot delete this bank account because there are one or more open ledger entries associated with the bank account.';
      "*** Base ***"@12047960 : Integer;
      PEB001@12047961 : TextConst 'ENU=%1 is not correct. For Vendor No. %2';
      gVPManagement@12047959 : Codeunit 11128061;
      gBaseMgt@12047958 : Codeunit 11128082;

    PROCEDURE GetBankAccountNoWithCheck@14() AccountNo : Text;
    BEGIN
      AccountNo := GetBankAccountNo;
      IF AccountNo = '' THEN
        ERROR(BankAccIdentifierIsEmptyErr);
    END;

    PROCEDURE GetBankAccountNo@1() : Text;
    BEGIN
      //>>NAVDK
      GLSetup.GET;
      IF GLSetup."Danish localization active" THEN BEGIN
        IF ("Bank Branch No." = '') OR ("Bank Account No." = '') THEN
          EXIT(DELCHR(IBAN,'=<>'));

        EXIT("Bank Branch No." + "Bank Account No.");
      END;
      //<<NAVDK
      IF IBAN <> '' THEN
        EXIT(DELCHR(IBAN,'=<>'));

      IF "Bank Account No." <> '' THEN
        EXIT("Bank Account No.");
    END;

    PROCEDURE SwiftCodeWarningCheck@1100409000();
    BEGIN
      //**4PS  (C016340)
      IF (IBAN <> '') AND (STRLEN("SWIFT Code") <> 8) THEN
        MESSAGE(Text1000001, FIELDCAPTION("SWIFT Code"), "SWIFT Code");
    END;

    BEGIN
    {
      --- ExFlow  --->
      Code           : OnModify
      Globals
      <-- ExFlow ---
      Version List=NAVW19.00.00.45480,NAVFI9.00.00.45480;
      Version List=NAVW19.00.00.45480,NAVDK9.00.00.45480;
        PEB *** Begin ***
        PEB0009 "Search Name" is Bankgiro No. or Postal Giro No.
        PEB0091 Banking
        PEB
        PEB *** End ***
    }
    END.
  }
}

