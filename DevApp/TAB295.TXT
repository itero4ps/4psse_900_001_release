OBJECT Table 295 Reminder Header
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.44365,NAVSE9.FI9.DK9.NO9,4PS9.00,4PSSE;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Name;
    OnInsert=BEGIN
               SalesSetup.GET;
               IF "No." = '' THEN BEGIN
                 SalesSetup.TESTFIELD("Reminder Nos.");
                 SalesSetup.TESTFIELD("Issued Reminder Nos.");
                 NoSeriesMgt.InitSeries(
                   SalesSetup."Reminder Nos.",xRec."No. Series","Posting Date",
                   "No.","No. Series");
               END;
               "Posting Description" := STRSUBSTNO(Text000,"No.");
               IF ("No. Series" <> '') AND
                  (SalesSetup."Reminder Nos." = SalesSetup."Issued Reminder Nos.")
               THEN
                 "Issuing No. Series" := "No. Series"
               ELSE
                 NoSeriesMgt.SetDefaultSeries("Issuing No. Series",SalesSetup."Issued Reminder Nos.");
               IF "Posting Date" = 0D THEN
                 "Posting Date" := WORKDATE;
               "Document Date" := WORKDATE;
               "Due Date" := WORKDATE;
               IF GETFILTER("Customer No.") <> '' THEN
                 IF GETRANGEMIN("Customer No.") = GETRANGEMAX("Customer No.") THEN
                   VALIDATE("Customer No.",GETRANGEMIN("Customer No."));

               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05
             END;

    OnDelete=BEGIN
               ReminderIssue.DeleteHeader(Rec,IssuedReminderHeader);

               ReminderLine.SETRANGE("Reminder No.","No.");
               ReminderLine.DELETEALL;

               ReminderCommentLine.SETRANGE(Type,ReminderCommentLine.Type::Reminder);
               ReminderCommentLine.SETRANGE("No.","No.");
               ReminderCommentLine.DELETEALL;

               IF IssuedReminderHeader."No." <> '' THEN BEGIN
                 COMMIT;
                 IF CONFIRM(
                      Text001,TRUE,
                      IssuedReminderHeader."No.")
                 THEN BEGIN
                   IssuedReminderHeader.SETRECFILTER;
                   IssuedReminderHeader.PrintRecords(TRUE,FALSE,FALSE);
                 END;
               END;
             END;

    CaptionML=ENU=Reminder Header;
    LookupPageID=Page436;
    DrillDownPageID=Page436;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  NoSeriesMgt.TestManual(SalesSetup."Reminder Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                                "Posting Description" := STRSUBSTNO(Text000,"No.");
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Customer No.") THEN
                                                                  IF Undo THEN BEGIN
                                                                    "Customer No." := xRec."Customer No.";
                                                                    CreateDim(DATABASE::Customer,"Customer No.");
                                                                    EXIT;
                                                                  END;
                                                                IF "Customer No." = '' THEN BEGIN
                                                                  CreateDim(DATABASE::Customer,"Customer No.");
                                                                  EXIT;
                                                                END;
                                                                VALIDATE("Alternative Bill-to Address",''); //**4PS.n
                                                                Cust.GET("Customer No.");
                                                                IF Cust.Blocked = Cust.Blocked::All THEN
                                                                  Cust.CustBlockedErrorMessage(Cust,FALSE);
                                                                Name := Cust.Name;
                                                                "Name 2" := Cust."Name 2";
                                                                Address := Cust.Address;
                                                                "Address 2" := Cust."Address 2";
                                                                "Post Code" := Cust."Post Code";
                                                                City := Cust.City;
                                                                County := Cust.County;
                                                                Contact := Cust.Contact;

                                                                //>>NAVDK
                                                                "Contact Phone No." := Cust."Phone No.";
                                                                "Contact Fax No." := Cust."Fax No.";
                                                                "Contact E-Mail" := Cust."E-Mail";
                                                                "Contact Role" := "Contact Role"::" ";
                                                                //<<NAVDK

                                                                "Country/Region Code" := Cust."Country/Region Code";
                                                                "Language Code" := Cust."Language Code";
                                                                "Currency Code" := Cust."Currency Code";
                                                                //"Shortcut Dimension 1 Code" := Cust."Global Dimension 1 Code";  //**4PS.o  28920
                                                                //"Shortcut Dimension 2 Code" := Cust."Global Dimension 2 Code";  //**4PS.o  If needed done in CreateDim
                                                                "VAT Registration No." := Cust."VAT Registration No.";
                                                                Cust.TESTFIELD("Customer Posting Group");
                                                                "Customer Posting Group" := Cust."Customer Posting Group";
                                                                "Gen. Bus. Posting Group" := Cust."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := Cust."VAT Bus. Posting Group";
                                                                "Tax Area Code" := Cust."Tax Area Code";
                                                                "Tax Liable" := Cust."Tax Liable";
                                                                "Reminder Terms Code" := Cust."Reminder Terms Code";
                                                                "Fin. Charge Terms Code" := Cust."Fin. Charge Terms Code";
                                                                //>>NAVNO
                                                                "Account Code NO" := Cust."Account Code NO";
                                                                GLN := Cust.GLN;
                                                                "E-Invoice" := Cust."E-Invoice";
                                                                //<<NAVNO
                                                                //>>NAVDK
                                                                "Account Code DK" := Cust."Account Code DK";
                                                                "EAN No." := Cust."EAN No.";
                                                                //<<NAVDK
                                                                VALIDATE("Reminder Terms Code");

                                                                "Electronic Invoicing" := Cust."Electronic Invoicing";

                                                                FillDefaultEMailReminder; //**4PS.n

                                                                CreateDim(DATABASE::Customer,"Customer No.");
                                                              END;

                                                   CaptionML=ENU=Customer No. }
    { 3   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 4   ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 5   ;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 6   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 7   ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code }
    { 8   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City }
    { 9   ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 10  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region Code }
    { 11  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 12  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Currency Code") THEN
                                                                  IF Undo THEN BEGIN
                                                                    "Currency Code" := xRec."Currency Code";
                                                                    EXIT;
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 13  ;   ;Contact             ;Text50        ;CaptionML=ENU=Contact }
    { 14  ;   ;Your Reference      ;Text35        ;CaptionML=ENU=Your Reference }
    { 15  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 16  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 17  ;   ;Customer Posting Group;Code10      ;TableRelation="Customer Posting Group";
                                                   CaptionML=ENU=Customer Posting Group;
                                                   Editable=No }
    { 18  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Bus. Posting Group;
                                                   Editable=No }
    { 19  ;   ;VAT Registration No.;Text20        ;CaptionML=ENU=VAT Registration No. }
    { 20  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 21  ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 22  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Document Date") THEN
                                                                  IF Undo THEN BEGIN
                                                                    "Document Date" := xRec."Document Date";
                                                                    EXIT;
                                                                  END;
                                                                VALIDATE("Reminder Level");
                                                              END;

                                                   CaptionML=ENU=Document Date }
    { 23  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 24  ;   ;Reminder Terms Code ;Code10        ;TableRelation="Reminder Terms";
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Reminder Terms Code") THEN
                                                                  IF Undo THEN BEGIN
                                                                    "Reminder Terms Code" := xRec."Reminder Terms Code";
                                                                    EXIT;
                                                                  END;
                                                                IF "Reminder Terms Code" <> '' THEN BEGIN
                                                                  ReminderTerms.GET("Reminder Terms Code");
                                                                  "Post Interest" := ReminderTerms."Post Interest";
                                                                  "Post Additional Fee" := ReminderTerms."Post Additional Fee";
                                                                  "Post Add. Fee per Line" := ReminderTerms."Post Add. Fee per Line";
                                                                  VALIDATE("Reminder Level");
                                                                  VALIDATE("Post Interest");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Reminder Terms Code }
    { 25  ;   ;Fin. Charge Terms Code;Code10      ;TableRelation="Finance Charge Terms";
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Fin. Charge Terms Code") THEN
                                                                  IF Undo THEN BEGIN
                                                                    "Fin. Charge Terms Code" := xRec."Fin. Charge Terms Code";
                                                                    EXIT;
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Fin. Charge Terms Code }
    { 26  ;   ;Post Interest       ;Boolean       ;CaptionML=ENU=Post Interest }
    { 27  ;   ;Post Additional Fee ;Boolean       ;CaptionML=ENU=Post Additional Fee }
    { 28  ;   ;Reminder Level      ;Integer       ;TableRelation="Reminder Level".No. WHERE (Reminder Terms Code=FIELD(Reminder Terms Code));
                                                   OnValidate=BEGIN
                                                                IF ("Reminder Level" <> 0) AND ("Reminder Terms Code" <> '') THEN BEGIN
                                                                  ReminderTerms.GET("Reminder Terms Code");
                                                                  ReminderLevel.SETRANGE("Reminder Terms Code","Reminder Terms Code");
                                                                  ReminderLevel.SETRANGE("No.",1,"Reminder Level");
                                                                  IF ReminderLevel.FINDLAST AND ("Document Date" <> 0D) THEN
                                                                    "Due Date" := CALCDATE(ReminderLevel."Due Date Calculation","Document Date");
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Reminder Level }
    { 29  ;   ;Posting Description ;Text50        ;CaptionML=ENU=Posting Description }
    { 30  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Reminder Comment Line" WHERE (Type=CONST(Reminder),
                                                                                                    No.=FIELD(No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 31  ;   ;Remaining Amount    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reminder Line"."Remaining Amount" WHERE (Reminder No.=FIELD(No.),
                                                                                                             Line Type=FILTER(<>Not Due),
                                                                                                             Multiple Interest Rates Entry=CONST(No)));
                                                   CaptionML=ENU=Remaining Amount;
                                                   DecimalPlaces=2:2;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 32  ;   ;Interest Amount     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reminder Line".Amount WHERE (Reminder No.=FIELD(No.),
                                                                                                 Type=CONST(Customer Ledger Entry),
                                                                                                 Line Type=FILTER(<>Not Due),
                                                                                                 Multiple Interest Rates Entry=CONST(No)));
                                                   CaptionML=ENU=Interest Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 33  ;   ;Additional Fee      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reminder Line".Amount WHERE (Reminder No.=FIELD(No.),
                                                                                                 Type=CONST(G/L Account),
                                                                                                 Line Type=FILTER(<>Not Due)));
                                                   CaptionML=ENU=Additional Fee;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 34  ;   ;VAT Amount          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reminder Line"."VAT Amount" WHERE (Reminder No.=FIELD(No.),
                                                                                                       Line Type=FILTER(<>Not Due),
                                                                                                       Multiple Interest Rates Entry=CONST(No)));
                                                   CaptionML=ENU=VAT Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 37  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 38  ;   ;Issuing No. Series  ;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Issuing No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Reminder Nos.");
                                                                  SalesSetup.TESTFIELD("Issued Reminder Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Issued Reminder Nos.","Issuing No. Series");
                                                                END;
                                                                TESTFIELD("Issuing No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH ReminderHeader DO BEGIN
                                                                ReminderHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Reminder Nos.");
                                                                SalesSetup.TESTFIELD("Issued Reminder Nos.");
                                                                IF NoSeriesMgt.LookupSeries(SalesSetup."Issued Reminder Nos.","Issuing No. Series") THEN
                                                                  VALIDATE("Issuing No. Series");
                                                                Rec := ReminderHeader;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Issuing No. Series }
    { 39  ;   ;Issuing No.         ;Code20        ;CaptionML=ENU=Issuing No. }
    { 41  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=ENU=Tax Area Code }
    { 42  ;   ;Tax Liable          ;Boolean       ;CaptionML=ENU=Tax Liable }
    { 43  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 44  ;   ;Use Header Level    ;Boolean       ;CaptionML=ENU=Use Header Level }
    { 45  ;   ;Add. Fee per Line   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reminder Line".Amount WHERE (Reminder No.=FIELD(No.),
                                                                                                 Type=CONST(Line Fee),
                                                                                                 Line Type=FILTER(<>Not Due)));
                                                   CaptionML=ENU=Add. Fee per Line;
                                                   AutoFormatExpr="Currency Code" }
    { 46  ;   ;Post Add. Fee per Line;Boolean     ;CaptionML=ENU=Post Add. Fee per Line }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=No }
    { 9000;   ;Assigned User ID    ;Code50        ;TableRelation="User Setup";
                                                   CaptionML=ENU=Assigned User ID }
    { 11012000;;Alternative Bill-to Address;Code10;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Customer No.),
                                                                                               Billing Address=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF CurrFieldNo = FIELDNO("Alternative Bill-to Address") THEN
                                                                  IF Undo THEN BEGIN
                                                                    "Alternative Bill-to Address" := xRec."Alternative Bill-to Address";
                                                                     EXIT;
                                                                  END;

                                                                CheckInvoiceAddress;
                                                                FillDefaultEMailReminder;
                                                              END;

                                                   CaptionML=ENU=Alternative Bill-to Address }
    { 11012010;;E-Mail (Reminders) ;Text80        ;OnValidate=VAR
                                                                ContactDataValidation@1100528702 : Codeunit 11012275;
                                                                RecRef@1100528701 : RecordRef;
                                                                FldRef@1100528700 : FieldRef;
                                                              BEGIN
                                                                //**4PS.sn
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("E-Mail (Reminders)"));
                                                                ContactDataValidation.ValidateEmail(FldRef, "E-Mail (Reminders)");

                                                                IF "E-Mail (Reminders)" = '' THEN
                                                                  "Reminder per E-Mail" := FALSE;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=E-Mail (Reminders) }
    { 11012020;;Reminder per E-Mail;Boolean       ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Reminder per E-Mail" THEN
                                                                  TESTFIELD("E-Mail (Reminders)");
                                                              END;

                                                   CaptionML=ENU=Reminder per E-Mail }
    { 11020285;;Electronic Invoicing;Option       ;OnValidate=BEGIN
                                                                //IF "Electronic Invoicing" = "Electronic Invoicing"::"E-Mail" THEN
                                                                //  TESTFIELD("E-Mail (Invoices)");
                                                              END;

                                                   CaptionML=ENU=Electronic Invoicing;
                                                   OptionCaptionML=ENU=Print,,,,,,Svefaktura (XML),OIOUBL (DK);
                                                   OptionString=Print,,E-Mail,,GLN (XML),Digipoort (XML),Svefaktura (XML),OIOUBL (DK),UBL (NO) }
    { 11128505;;GLN                ;Code13        ;OnValidate=BEGIN
                                                                IF NOT EInvoiceDocumentEncode.IsValidEANNo(GLN,TRUE) THEN
                                                                  FIELDERROR(GLN,Text10600);
                                                              END;

                                                   CaptionML=ENU=GLN No.;
                                                   Description=NAVNO }
    { 11128506;;Account Code NO    ;Text30        ;OnValidate=BEGIN
                                                                IF "Account Code NO" <> xRec."Account Code NO" THEN
                                                                  UpdateReminderLines(FIELDCAPTION("Account Code NO"));
                                                              END;

                                                   CaptionML=ENU=Account Code NO;
                                                   Description=NAVNO }
    { 11128513;;E-Invoice          ;Boolean       ;CaptionML=ENU=E-Invoice;
                                                   Description=NAVNO }
    { 11128570;;EAN No.            ;Code13        ;OnValidate=BEGIN
                                                                IF NOT OIOUBLDocumentEncode.IsValidEANNo("EAN No.") THEN
                                                                  FIELDERROR("EAN No.", Text11128576);
                                                              END;

                                                   CaptionML=ENU=EAN No.;
                                                   Description=NAVDK }
    { 11128572;;Account Code DK    ;Text30        ;OnValidate=BEGIN
                                                                ReminderLine.RESET;
                                                                ReminderLine.SETRANGE("Reminder No.","No.");
                                                                ReminderLine.SETFILTER(Type, '>%1', ReminderLine.Type::" ");
                                                                ReminderLine.SETFILTER("Account Code DK", '%1|%2', xRec."Account Code DK", '');
                                                                ReminderLine.MODIFYALL("Account Code DK", "Account Code DK");
                                                              END;

                                                   CaptionML=ENU=Account Code;
                                                   Description=NAVDK }
    { 11128575;;Contact Phone No.  ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Contact Phone No.;
                                                   Description=NAVDK }
    { 11128576;;Contact Fax No.    ;Text30        ;CaptionML=ENU=Contact Fax No.;
                                                   Description=NAVDK }
    { 11128577;;Contact E-Mail     ;Text80        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=Contact E-Mail;
                                                   Description=NAVDK }
    { 11128578;;Contact Role       ;Option        ;CaptionML=ENU=Contact Role;
                                                   OptionCaptionML=ENU=" ,,,Purchase Responsible,,,Accountant,,,Budget Responsible,,,Requisitioner";
                                                   OptionString=[ ,,,Purchase Responsible,,,Accountant,,,Budget Responsible,,,Requisitioner];
                                                   Description=NAVDK }
    { 11128590;;Payment Channel    ;Option        ;OnValidate=BEGIN
                                                                IF "Payment Channel" = "Payment Channel"::"Payment Slip" THEN
                                                                  ERROR(Text11128577, FIELDCAPTION("Payment Channel"),"Payment Channel");
                                                              END;

                                                   CaptionML=ENU=Payment Channel;
                                                   OptionCaptionML=ENU=" ,Payment Slip,Account Transfer,National Clearing,Direct Debit";
                                                   OptionString=[ ,Payment Slip,Account Transfer,National Clearing,Direct Debit];
                                                   Description=NAVDK }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Customer No.,Currency Code               }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Customer No.,Name,Due Date           }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Reminder %1';
      Text001@1001 : TextConst 'ENU=Do you want to print reminder %1?';
      Text002@1002 : TextConst 'ENU=This change will cause the existing lines to be deleted for this reminder.\\';
      Text003@1003 : TextConst 'ENU=Do you want to continue?';
      Text004@1004 : TextConst 'ENU=There is not enough space to insert the text.';
      Text005@1005 : TextConst 'ENU="Deleting this document will cause a gap in the number series for reminders. "';
      Text006@1006 : TextConst 'ENU=An empty reminder %1 will be created to fill this gap in the number series.\\';
      SalesSetup@1007 : Record 311;
      CustPostingGr@1008 : Record 92;
      ReminderTerms@1009 : Record 292;
      ReminderLevel@1010 : Record 293;
      ReminderText@1012 : Record 294;
      FinChrgTerms@1013 : Record 5;
      ReminderHeader@1014 : Record 295;
      ReminderLine@1015 : Record 296;
      ReminderCommentLine@1016 : Record 299;
      Cust@1017 : Record 18;
      PostCode@1018 : Record 225;
      IssuedReminderHeader@1019 : Record 297;
      GenBusPostingGrp@1020 : Record 250;
      ApplicationManagement@1031 : Codeunit 1;
      NoSeriesMgt@1022 : Codeunit 396;
      TransferExtendedText@1023 : Codeunit 378;
      ReminderIssue@1024 : Codeunit 393;
      DimMgt@1025 : Codeunit 408;
      NextLineNo@1026 : Integer;
      LineSpacing@1027 : Integer;
      ReminderTotal@1028 : Decimal;
      Currency@1032 : Record 4;
      DPA_Management@1100000999 : Codeunit 11012783;
      OIOUBLDocumentEncode@1100285000 : Codeunit 11128570;
      Text11128576@1100285001 : TextConst 'ENU=does not contain a valid, 13-digit EAN no.';
      Text11128577@1100285002 : TextConst 'ENU=%1 %2 is not supported in this version of OIOUBL.';
      EInvoiceDocumentEncode@1080000 : Codeunit 11128502;
      Text10600@1080001 : TextConst 'ENU=The GLN No. field does not contain a valid, 13-digit GLN  number';

    PROCEDURE AssistEdit@9(OldReminderHeader@1000 : Record 295) : Boolean;
    BEGIN
      WITH ReminderHeader DO BEGIN
        ReminderHeader := Rec;
        SalesSetup.GET;
        SalesSetup.TESTFIELD("Reminder Nos.");
        SalesSetup.TESTFIELD("Issued Reminder Nos.");
        IF NoSeriesMgt.SelectSeries(SalesSetup."Reminder Nos.",OldReminderHeader."No. Series","No. Series") THEN BEGIN
          SalesSetup.GET;
          SalesSetup.TESTFIELD("Reminder Nos.");
          SalesSetup.TESTFIELD("Issued Reminder Nos.");
          NoSeriesMgt.SetSeries("No.");
          Rec := ReminderHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE Undo@6() : Boolean;
    BEGIN
      ReminderLine.SETRANGE("Reminder No.","No.");
      IF ReminderLine.FIND('-') THEN BEGIN
        COMMIT;
        IF NOT
           CONFIRM(
             Text002 +
             Text003,
             FALSE)
        THEN
          EXIT(TRUE);
        ReminderLine.DELETEALL;
        MODIFY
      END;
    END;

    PROCEDURE InsertLines@3();
    VAR
      ReminderLine2@1000 : Record 296;
      CurrencyForReminderLevel@1002 : Record 329;
      CaptionManagement@1003 : Codeunit 42;
      AdditionalFee@1001 : Decimal;
    BEGIN
      CurrencyForReminderLevel.INIT;
      ReminderLevel.SETRANGE("Reminder Terms Code","Reminder Terms Code");
      ReminderLevel.SETRANGE("No.",1,"Reminder Level");
      IF ReminderLevel.FINDLAST THEN BEGIN
        CALCFIELDS("Remaining Amount");
        AdditionalFee := ReminderLevel.GetAdditionalFee("Remaining Amount","Currency Code",FALSE,"Posting Date");

        IF AdditionalFee > 0 THEN BEGIN
          ReminderLine.RESET;
          ReminderLine.SETRANGE("Reminder No.","No.");
          ReminderLine.SETRANGE("Line Type",ReminderLine."Line Type"::"Reminder Line");
          ReminderLine."Reminder No." := "No.";
          IF ReminderLine.FIND('+') THEN
            NextLineNo := ReminderLine."Line No."
          ELSE
            NextLineNo := 0;
          ReminderLine.SETRANGE("Line Type");
          ReminderLine2 := ReminderLine;
          ReminderLine2.COPYFILTERS(ReminderLine);
          ReminderLine2.SETFILTER("Line Type",'<>%1',ReminderLine2."Line Type"::"Line Fee");
          IF ReminderLine2.NEXT <> 0 THEN BEGIN
            LineSpacing := (ReminderLine2."Line No." - ReminderLine."Line No.") DIV 3;
          END ELSE
            LineSpacing := 10000;
          InsertBlankLine(ReminderLine."Line Type"::"Additional Fee");

          NextLineNo := NextLineNo + LineSpacing;
          ReminderLine.INIT;
          ReminderLine."Line No." := NextLineNo;
          ReminderLine.Type := ReminderLine.Type::"G/L Account";
          ReminderLine."Account Code DK" := "Account Code DK";  // NAVDK
          ReminderLine."Account Code NO" := "Account Code NO";  // NAVNO
          TESTFIELD("Customer Posting Group");
          CustPostingGr.GET("Customer Posting Group");
          CustPostingGr.TESTFIELD("Additional Fee Account");
          ReminderLine.VALIDATE("No.",CustPostingGr."Additional Fee Account");
          ReminderLine.Description :=
            COPYSTR(
              CaptionManagement.GetTranslatedFieldCaption(
                "Language Code",DATABASE::"Currency for Reminder Level",
                CurrencyForReminderLevel.FIELDNO("Additional Fee")),1,100);
          ReminderLine.VALIDATE(Amount,AdditionalFee);
          ReminderLine."Line Type" := ReminderLine."Line Type"::"Additional Fee";
          ReminderLine.INSERT;
          IF TransferExtendedText.ReminderCheckIfAnyExtText(ReminderLine,FALSE) THEN
            TransferExtendedText.InsertReminderExtText(ReminderLine);
        END;
      END;
      ReminderLine."Line No." := ReminderLine."Line No." + 10000;
      ReminderRounding(Rec);
      InsertBeginTexts(Rec);
      InsertEndTexts(Rec);
      MODIFY;
    END;

    PROCEDURE UpdateLines@13(ReminderHeader@1000 : Record 295;UpdateAdditionalFee@1001 : Boolean);
    BEGIN
      ReminderLine.RESET;
      ReminderLine.SETRANGE("Reminder No.",ReminderHeader."No.");
      ReminderLine.SETRANGE(
        "Line Type",
        ReminderLine."Line Type"::"Beginning Text",
        ReminderLine."Line Type"::"Ending Text");
      ReminderLine.SETRANGE(Type,ReminderLine.Type::" ");
      ReminderLine.SETRANGE("Attached to Line No.",0);
      ReminderLine.DELETEALL(TRUE);

      IF UpdateAdditionalFee THEN BEGIN
        ReminderLine.RESET;
        ReminderLine.SETRANGE("Reminder No.",ReminderHeader."No.");
        ReminderLine.SETRANGE("Line Type",ReminderLine."Line Type"::"Additional Fee");
        ReminderLine.DELETEALL;
        InsertLines;
      END ELSE BEGIN
        InsertBeginTexts(ReminderHeader);
        InsertEndTexts(ReminderHeader);
      END;
    END;

    LOCAL PROCEDURE InsertBeginTexts@11(ReminderHeader@1000 : Record 295);
    BEGIN
      ReminderLevel.SETRANGE("Reminder Terms Code",ReminderHeader."Reminder Terms Code");
      ReminderLevel.SETRANGE("No.",1,ReminderHeader."Reminder Level");
      IF ReminderLevel.FINDLAST THEN BEGIN
        ReminderText.RESET;
        ReminderText.SETRANGE("Reminder Terms Code",ReminderHeader."Reminder Terms Code");
        ReminderText.SETRANGE("Reminder Level",ReminderLevel."No.");
        ReminderText.SETRANGE(Position,ReminderText.Position::Beginning);

        ReminderLine.RESET;
        ReminderLine.SETRANGE("Reminder No.",ReminderHeader."No.");
        ReminderLine."Reminder No." := ReminderHeader."No.";
        IF ReminderLine.FIND('-') THEN BEGIN
          LineSpacing := ReminderLine."Line No." DIV (ReminderText.COUNT + 2);
          IF LineSpacing = 0 THEN
            ERROR(Text004);
        END ELSE
          LineSpacing := 10000;
        NextLineNo := 0;
        InsertTextLines(ReminderHeader);
      END;
    END;

    LOCAL PROCEDURE InsertEndTexts@12(ReminderHeader@1000 : Record 295);
    VAR
      ReminderLine2@1001 : Record 296;
    BEGIN
      ReminderLevel.SETRANGE("Reminder Terms Code",ReminderHeader."Reminder Terms Code");
      ReminderLevel.SETRANGE("No.",1,ReminderHeader."Reminder Level");
      IF ReminderLevel.FINDLAST THEN BEGIN
        ReminderText.SETRANGE(
          "Reminder Terms Code",ReminderHeader."Reminder Terms Code");
        ReminderText.SETRANGE("Reminder Level",ReminderLevel."No.");
        ReminderText.SETRANGE(Position,ReminderText.Position::Ending);
        ReminderLine.RESET;
        ReminderLine.SETRANGE("Reminder No.",ReminderHeader."No.");
        ReminderLine.SETFILTER(
          "Line Type",'%1|%2|%3',
          ReminderLine."Line Type"::"Reminder Line",
          ReminderLine."Line Type"::"Additional Fee",
          ReminderLine."Line Type"::Rounding);
        IF ReminderLine.FINDLAST THEN
          NextLineNo := ReminderLine."Line No."
        ELSE
          NextLineNo := 0;
        ReminderLine.SETRANGE("Line Type");
        ReminderLine2 := ReminderLine;
        ReminderLine2.COPYFILTERS(ReminderLine);
        ReminderLine2.SETFILTER("Line Type",'<>%1',ReminderLine2."Line Type"::"Line Fee");
        IF ReminderLine2.NEXT <> 0 THEN BEGIN
          LineSpacing :=
            (ReminderLine2."Line No." - ReminderLine."Line No.") DIV
            (ReminderText.COUNT + 2);
          IF LineSpacing = 0 THEN
            ERROR(Text004);
        END ELSE
          LineSpacing := 10000;
        InsertTextLines(ReminderHeader);
      END;
    END;

    LOCAL PROCEDURE InsertTextLines@4(ReminderHeader@1000 : Record 295);
    VAR
      CompanyInfo@1001 : Record 79;
    BEGIN
      IF ReminderText.FIND('-') THEN BEGIN
        IF ReminderText.Position = ReminderText.Position::Ending THEN
          InsertBlankLine(ReminderLine."Line Type"::"Ending Text");
        IF ReminderHeader."Fin. Charge Terms Code" <> '' THEN
          FinChrgTerms.GET(ReminderHeader."Fin. Charge Terms Code");
        IF NOT ReminderLevel."Calculate Interest" THEN
          FinChrgTerms."Interest Rate" := 0;
        ReminderHeader.CALCFIELDS(
          "Remaining Amount","Interest Amount","Additional Fee","VAT Amount","Add. Fee per Line");
        ReminderTotal :=
          ReminderHeader."Remaining Amount" + ReminderHeader."Interest Amount" +
          ReminderHeader."Additional Fee" + ReminderHeader."VAT Amount" +
          ReminderHeader."Add. Fee per Line";
        CompanyInfo.GET;

        REPEAT
          NextLineNo := NextLineNo + LineSpacing;
          ReminderLine.INIT;
          ReminderLine."Line No." := NextLineNo;
          ReminderLine.Type := ReminderLine.Type::" ";
          ReminderLine.Description :=
            COPYSTR(
              STRSUBSTNO(
                ReminderText.Text,
                ReminderHeader."Document Date",
                ReminderHeader."Due Date",
                FinChrgTerms."Interest Rate",
                FORMAT(ReminderHeader."Remaining Amount",0,ApplicationManagement.AutoFormatTranslate(1,ReminderHeader."Currency Code")),
                ReminderHeader."Interest Amount",
                ReminderHeader."Additional Fee",
                FORMAT(ReminderTotal,0,ApplicationManagement.AutoFormatTranslate(1,ReminderHeader."Currency Code")),
                ReminderHeader."Reminder Level",
                ReminderHeader."Currency Code",
                ReminderHeader."Posting Date",
                CompanyInfo.Name,
                ReminderHeader."Add. Fee per Line"),
              1,
              MAXSTRLEN(ReminderLine.Description));
          IF ReminderText.Position = ReminderText.Position::Beginning THEN
            ReminderLine."Line Type" := ReminderLine."Line Type"::"Beginning Text"
          ELSE
            ReminderLine."Line Type" := ReminderLine."Line Type"::"Ending Text";
          ReminderLine.INSERT;
        UNTIL ReminderText.NEXT = 0;
        IF ReminderText.Position = ReminderText.Position::Beginning THEN
          InsertBlankLine(ReminderLine."Line Type"::"Beginning Text");
      END;
    END;

    LOCAL PROCEDURE InsertBlankLine@5(LineType@1000 : Integer);
    BEGIN
      NextLineNo := NextLineNo + LineSpacing;
      ReminderLine.INIT;
      ReminderLine."Line No." := NextLineNo;
      ReminderLine."Line Type" := LineType;
      ReminderLine.INSERT;
    END;

    PROCEDURE PrintRecords@1();
    VAR
      ReminderHeader@1000 : Record 295;
      ReportSelection@1001 : Record 77;
      DocPrint@1100485000 : Codeunit 229;
      TempReportSelection@1100485001 : TEMPORARY Record 77;
    BEGIN
      WITH ReminderHeader DO BEGIN
        COPY(Rec);
        FINDFIRST;
      //**4PS
      //ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"Rem.Test");
      //ReportSelection.SETFILTER("Report ID",'<>0');
      //ReportSelection.ASCENDING := FALSE;
        DocPrint.GetReportSelection(TempReportSelection.Usage::"Rem.Test",TempReportSelection,TRUE);
        TempReportSelection.FIND('-');
        REPEAT
      //    REPORT.RUN(TempReportSelection."Report ID",TRUE,FALSE,ReminderHeader); 4PS.o, dbeekman: 16608
          REPORT.RUNMODAL(TempReportSelection."Report ID",TRUE,FALSE,ReminderHeader); //**4PS.n, dbeekman: 16608
        UNTIL TempReportSelection.NEXT = 0;
      END;
    END;

    PROCEDURE FormatAddr@30(VAR AddrLines@1000 : ARRAY [8] OF Text[50]);
    VAR
      Cust@1001 : Record 18;
      FormatAddrCodeunit@1002 : Codeunit 365;
    BEGIN
      Cust.Contact := Contact;
      Cust.Name := Name;
      Cust."Name 2" := "Name 2";
      Cust.Address := Address;
      Cust."Address 2" := "Address 2";
      Cust."Post Code" := "Post Code";
      Cust.City := City;
      Cust.County := County;
      Cust."Country/Region Code" := "Country/Region Code";
      FormatAddrCodeunit.Customer(AddrLines,Cust);
    END;

    PROCEDURE ConfirmDeletion@2() : Boolean;
    BEGIN
      ReminderIssue.TestDeleteHeader(Rec,IssuedReminderHeader);
      IF IssuedReminderHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text005 +
             Text006 +
             Text003,TRUE,
             IssuedReminderHeader."No.")
        THEN
          EXIT;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateDim@16(Type1@1000 : Integer;No1@1001 : Code[20]);
    VAR
      SourceCodeSetup@1003 : Record 242;
      TableID@1004 : ARRAY [10] OF Integer;
      No@1005 : ARRAY [10] OF Code[20];
      Dim1@1210190000 : Code[20];
      Dim2@1210190001 : Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      //**4PS.sn
      Dim1 := "Shortcut Dimension 1 Code";
      Dim2 := "Shortcut Dimension 2 Code";
      //**4PS.en
      //"Shortcut Dimension 1 Code" := ''; //**4PS.o Must be kept for Department Authorization
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,SourceCodeSetup.Reminder,
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      //**4PS.sn
      IF (Dim1 <> '') AND ("Shortcut Dimension 1 Code" = '') THEN BEGIN
        "Shortcut Dimension 1 Code" := Dim1;
        ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
      END;
      IF (Dim2 <> '') AND ("Shortcut Dimension 2 Code" = '') THEN BEGIN
        "Shortcut Dimension 2 Code" := Dim2;
        ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
      END;
      //**4PS.en
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@19(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      //**4PS.sn
      IF FieldNumber = 1 THEN
        DimMgt.CheckDepartmentAuthorization(DATABASE::"Reminder Header", ShortcutDimCode);
      //**4PS.en
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    LOCAL PROCEDURE ReminderRounding@7(ReminderHeader@1001 : Record 295);
    VAR
      TotalAmountInclVAT@1004 : Decimal;
      ReminderRoundingAmount@1000 : Decimal;
    BEGIN
      GetCurrency(ReminderHeader);
      IF Currency."Invoice Rounding Precision" = 0 THEN
        EXIT;

      ReminderHeader.CALCFIELDS(
        "Remaining Amount","Interest Amount","Additional Fee","VAT Amount","Add. Fee per Line");

      TotalAmountInclVAT := ReminderHeader."Remaining Amount" +
        ReminderHeader."Interest Amount" +
        ReminderHeader."Additional Fee" +
        ReminderHeader."Add. Fee per Line" +
        ReminderHeader."VAT Amount";
      ReminderRoundingAmount :=
        -ROUND(
          TotalAmountInclVAT -
          ROUND(
            TotalAmountInclVAT,
            Currency."Invoice Rounding Precision",
            Currency.InvoiceRoundingDirection),
          Currency."Amount Rounding Precision");
      IF ReminderRoundingAmount <> 0 THEN BEGIN
        CustPostingGr.GET(ReminderHeader."Customer Posting Group");
        CustPostingGr.TESTFIELD("Invoice Rounding Account");
        WITH ReminderLine DO BEGIN
          INIT;
          VALIDATE("Line No.",GetNextLineNo(ReminderHeader."No."));
          VALIDATE("Reminder No.",ReminderHeader."No.");
          VALIDATE(Type,Type::"G/L Account");
          "System-Created Entry" := TRUE;
          VALIDATE("No.",CustPostingGr."Invoice Rounding Account");
          VALIDATE(
            Amount,
            ROUND(
              ReminderRoundingAmount / (1 + ("VAT %" / 100)),
              Currency."Amount Rounding Precision"));
          "VAT Amount" := ReminderRoundingAmount - Amount;
          "Line Type" := "Line Type"::Rounding;
          INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE GetCurrency@17(ReminderHeader@1000 : Record 295);
    BEGIN
      WITH ReminderHeader DO
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
    END;

    PROCEDURE UpdateReminderRounding@8(ReminderHeader@1000 : Record 295);
    VAR
      OldLineNo@1001 : Integer;
    BEGIN
      ReminderLine.RESET;
      ReminderLine.SETRANGE("Reminder No.",ReminderHeader."No.");
      ReminderLine.SETRANGE("Line Type",ReminderLine."Line Type"::Rounding);
      IF ReminderLine.FINDFIRST THEN
        ReminderLine.DELETE(TRUE);

      ReminderLine.SETRANGE("Line Type");
      ReminderLine.SETFILTER(Type,'<>%1',ReminderLine.Type::" ");
      IF ReminderLine.FINDLAST THEN BEGIN
        OldLineNo := ReminderLine."Line No.";
        ReminderLine.SETRANGE(Type);
        IF ReminderLine.NEXT <> 0 THEN
          ReminderLine."Line No." := OldLineNo + ((ReminderLine."Line No." - OldLineNo) DIV 2)
        ELSE
          ReminderLine."Line No." := OldLineNo + 10000;
      END ELSE
        ReminderLine."Line No." := 10000;

      ReminderRounding(ReminderHeader);
    END;

    PROCEDURE ShowDocDim@10();
    BEGIN
      DimMgt.SetTableID(DATABASE::"Reminder Header"); //**4PS.n
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE CalculateLineFeeVATAmount@1000() : Decimal;
    VAR
      ReminderLine@1000 : Record 296;
    BEGIN
      ReminderLine.SETCURRENTKEY("Reminder No.",Type,"Line Type");
      ReminderLine.SETRANGE("Reminder No.","No.");
      ReminderLine.SETRANGE(Type,ReminderLine.Type::"Line Fee");
      ReminderLine.CALCSUMS("VAT Amount");
      EXIT(ReminderLine."VAT Amount");
    END;

    LOCAL PROCEDURE GetNextLineNo@1010(ReminderNo@1000 : Code[20]) : Integer;
    VAR
      ReminderLine@1001 : Record 296;
    BEGIN
      ReminderLine.SETRANGE("Reminder No.",ReminderNo);
      IF ReminderLine.FINDLAST THEN
        EXIT(ReminderLine."Line No." + 10000);
      EXIT(10000);
    END;

    PROCEDURE ReminderLinesExist@1080000() : Boolean;
    BEGIN
      //NAVNO
      ReminderLine.RESET;
      ReminderLine.SETRANGE("Reminder No.","No.");
      ReminderLine.SETFILTER(Type,'>%1',ReminderLine.Type::" ");
      EXIT(ReminderLine.FINDFIRST);
    END;

    PROCEDURE UpdateReminderLines@1080001(ChangedFieldName@1080002 : Text[100]);
    BEGIN
      //NAVNO
      IF ReminderLinesExist THEN BEGIN
        ReminderLine.LOCKTABLE;
        MODIFY;

        IF ChangedFieldName = FIELDCAPTION("Account Code NO") THEN BEGIN
          ReminderLine.RESET;
          ReminderLine.SETRANGE("Reminder No.","No.");
          ReminderLine.SETFILTER(Type,'>%1',ReminderLine.Type::" ");
          IF ReminderLine.FINDSET THEN
            REPEAT
              ReminderLine.VALIDATE("Account Code NO","Account Code NO");
              ReminderLine.MODIFY(TRUE);
          UNTIL ReminderLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CheckInvoiceAddress@1210190002();
    VAR
      AdrsRec@1210190002 : Record 222;
    BEGIN
      //**4PS
      IF "Alternative Bill-to Address" <> '' THEN BEGIN
        AdrsRec.GET("Customer No.", "Alternative Bill-to Address");
        Name := AdrsRec.Name;
        "Name 2" := AdrsRec."Name 2";
        Address := AdrsRec.Address;
        "Address 2" := AdrsRec."Address 2";
        City := AdrsRec.City;
        "Post Code" := AdrsRec."Post Code";
        County := AdrsRec.County;
        "Country/Region Code" := AdrsRec."Country/Region Code";
        Contact := AdrsRec.Contact;
      END ELSE BEGIN
        TESTFIELD("Customer No.");
        Cust.GET("Customer No.");
        Name := Cust.Name;
        "Name 2" := Cust."Name 2";
        Address := Cust.Address;
        "Address 2" := Cust."Address 2";
        City := Cust.City;
        "Post Code" := Cust."Post Code";
        County := Cust.County;
        "Country/Region Code" := Cust."Country/Region Code";
        Contact := Cust.Contact;
      END;
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Shortcut Dimension 1 Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::"Reminder Header");
      IF Dimension1Code <> '' THEN
        "Shortcut Dimension 1 Code" := Dimension1Code;

      IF "Shortcut Dimension 1 Code" <> '' THEN
        VALIDATE("Shortcut Dimension 1 Code");
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(295) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 295');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Reminder Header", "Shortcut Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Shortcut Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Shortcut Dimension 1 Code");
    END;

    PROCEDURE EditDocuments@1100528702(ContactNo@1210190004 : Code[20];ContactPersonNo@1210190005 : Code[20];SendMail@1210190002 : Boolean;Recipient@1100528700 : Text[120]);
    VAR
      DocumentTemplate@1210190001 : Record 11012401;
      DocumentMailing@1210190000 : Codeunit 11012278;
      RecRef@1100525000 : RecordRef;
      DocumentLinkRIDs@1100525001 : ARRAY [5] OF RecordID;
    BEGIN
      //**4PS
      RecRef.GETTABLE(Rec);
      DocumentLinkRIDs[1] := RecRef.RECORDID;

      DocumentMailing.EditDocuments(
        STRSUBSTNO('%1', DocumentTemplate.Type::Invoice), DocumentLinkRIDs,
        "Shortcut Dimension 1 Code", ContactNo, ContactPersonNo, SendMail, Recipient);
    END;

    PROCEDURE FillDefaultEMailReminder@1100528700();
    VAR
      Customer@1100528700 : Record 18;
      ShipToAddress@1100528702 : Record 222;
    BEGIN
      //**4PS
      IF "Customer No." = '' THEN
        EXIT;

      Customer.GET("Customer No.");

      "E-Mail (Reminders)" := Customer."E-Mail (Reminders)";
      "Reminder per E-Mail" := Customer."Reminder per E-Mail";

      IF "Alternative Bill-to Address" <> '' THEN
        IF ShipToAddress.GET("Customer No.", "Alternative Bill-to Address") THEN
          IF ShipToAddress."E-Mail (Reminders)" <> '' THEN
            "E-Mail (Reminders)" := ShipToAddress."E-Mail (Reminders)";
    END;

    BEGIN
    {
      4PS, dbeekman, 22-10-2008:
        - ReportSelection changed. cod229.GetReportSelection called to select reports to be printed
      Version List=NAVW19.00.00.44365,NAVSE9.00.00.44365;
      Version List=NAVW19.00.00.44365,NAVFI9.00.00.44365;
      Version List=NAVW19.00.00.44365,NAVDK9.00.00.44365;
      Version List=NAVW19.00.00.44365,NAVNO9.00.00.44365;
    }
    END.
  }
}

