OBJECT Table 36 Sales Header
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.45480,NAVSE9.FI9.DK9.NO9,4PS9.00,4PSSE.DK.FI.NO;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Sell-to Customer Name;
    OnInsert=BEGIN
               InitInsert;
               InsertMode := TRUE;
               "Inserted By" := USERID; //**4PS.n

               IF GetFilterCustNo <> '' THEN
                 VALIDATE("Sell-to Customer No.",GetFilterCustNo);

               IF GetFilterContNo <> '' THEN
                 VALIDATE("Sell-to Contact No.",GetFilterContNo);

               "Doc. No. Occurrence" := ArchiveManagement.GetNextOccurrenceNo(DATABASE::"Sales Header","Document Type","No.");

               //**4PS.sn
               SalesLogisticsSepaRentContract();
               "Calculate B Amounts based on" := SalesSetup."Calculate B Amounts based on";
               VALIDATE("Selection Code is Current Doc.");
               //**4PS.en

               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05
             END;

    OnModify=BEGIN
               VALIDATE("Selection Code is Current Doc.");  //**4PS.n
             END;

    OnDelete=VAR
               Opp@1000 : Record 5092;
               TempOpportunityEntry@1001 : TEMPORARY Record 5093;
               DOPaymentTransLogEntry@1002 : Record 829;
               lShippingDetailsRec@1210190000 : Record 11012120;
               PlantInventoryRec2@1100485000 : Record 11012555;
               PlantOrderRec2@1100485001 : Record 11012556;
               ExitOrderRec2@1100485002 : Record 11012559;
               ReturnLossOrderRec@1100525002 : Record 11012655;
               ReturnLossOrderRec2@1100525003 : Record 11012655;
               AdjRec2@1100485003 : Record 11012565;
               PlantHourLineRec2@1100485004 : Record 11012574;
               lvTransOrderRec@1100485005 : Record 11020507;
               lvTransOrderRec2@1100485006 : Record 11020507;
               lvSalesRentalInvoiceLine@1100485007 : Record 11012788;
               lvSalesRentalInvoiceLine2@1100485008 : Record 11012788;
               lvOfferAmountRec@1100485009 : Record 11012786;
               lvSalesRentalRemovalLineRec@1100485010 : Record 11012789;
               lvSalesRentalAppointmentRec@1100485012 : Record 11012991;
               UnitPriceProductionMot@1100485014 : Record 11020425;
               lvServiceContractRec@1100528600 : Record 11012812;
               SalesHeaderExtension@1100528700 : Record 11071868;
               ContractAmountsByDate@1100528800 : Record 11071708;
               ContractInstallment@1100528801 : Record 11071707;
               RentalPackage@1100529000 : Record 11012941;
               RentalPackage2@1100529002 : Record 11012941;
               RentalRateLine@1100529001 : Record 11012942;
               HistRentalPackage@1100529003 : Record 11229848;
               Complaint@1100409000 : Record 11012450;
               l_SalesHeaderDKinfo@1100285000 : Record 11128571;
             BEGIN
               IF DOPaymentTransLogEntry.FINDFIRST THEN
                 DOPaymentTransLogMgt.ValidateCanDeleteDocument("Payment Method Code","Document Type",FORMAT("Document Type"),"No.");

               IF NOT UserSetupMgt.CheckRespCenter(0,"Responsibility Center") THEN
                 ERROR(
                   Text022,
                   RespCenter.TABLECAPTION,UserSetupMgt.GetSalesFilter);

               SalesPost.TestDeleteHeader(
                 Rec,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,SalesInvHeaderPrepmt,SalesCrMemoHeaderPrepmt);

               IF (SalesShptHeader."No." <> '') OR
                  (SalesInvHeader."No." <> '') OR
                  (SalesCrMemoHeader."No." <> '') OR
                  (ReturnRcptHeader."No." <> '') OR
                  (SalesInvHeaderPrepmt."No." <> '') OR
                  (SalesCrMemoHeaderPrepmt."No." <> '')
               THEN BEGIN
                 IF SalesShptHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text000,TRUE,
                        SalesShptHeader."No.")
                   THEN BEGIN
                     SalesShptHeader.SETRECFILTER;
                     SalesShptHeader.PrintRecords(TRUE);
                   END;

                 IF SalesInvHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text001,TRUE,
                        SalesInvHeader."No.")
                   THEN BEGIN
                     SalesInvHeader.SETRECFILTER;
                     SalesInvHeader.PrintRecords(TRUE);
                   END;

                 IF SalesCrMemoHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text002,TRUE,
                        SalesCrMemoHeader."No.")
                   THEN BEGIN
                     SalesCrMemoHeader.SETRECFILTER;
                     SalesCrMemoHeader.PrintRecords(TRUE);
                   END;

                 IF ReturnRcptHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text023,TRUE,
                        ReturnRcptHeader."No.")
                   THEN BEGIN
                     ReturnRcptHeader.SETRECFILTER;
                     ReturnRcptHeader.PrintRecords(TRUE);
                   END;

                 IF SalesInvHeaderPrepmt."No." <> '' THEN
                   IF CONFIRM(
                        Text055,TRUE,
                        SalesInvHeader."No.")
                   THEN BEGIN
                     SalesInvHeaderPrepmt.SETRECFILTER;
                     SalesInvHeaderPrepmt.PrintRecords(TRUE);
                   END;

                 IF SalesCrMemoHeaderPrepmt."No." <> '' THEN
                   IF CONFIRM(
                        Text054,TRUE,
                        SalesCrMemoHeaderPrepmt."No.")
                   THEN BEGIN
                     SalesCrMemoHeaderPrepmt.SETRECFILTER;
                     SalesCrMemoHeaderPrepmt.PrintRecords(TRUE);
                   END;

                 SalesPost.DeleteHeader(
                   Rec,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,SalesInvHeaderPrepmt,SalesCrMemoHeaderPrepmt);
               END;

               IF ("Opportunity No." <> '') AND
                  ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order])
               THEN
                 IF Opp.GET("Opportunity No.") THEN BEGIN
                   IF "Document Type" = "Document Type"::Order THEN BEGIN
                     IF NOT CONFIRM(Text040,TRUE) THEN
                       ERROR(Text044);
                     TempOpportunityEntry.INIT;
                     TempOpportunityEntry.VALIDATE("Opportunity No.",Opp."No.");
                     TempOpportunityEntry."Sales Cycle Code" := Opp."Sales Cycle Code";
                     TempOpportunityEntry."Contact No." := Opp."Contact No.";
                     TempOpportunityEntry."Contact Company No." := Opp."Contact Company No.";
                     TempOpportunityEntry."Salesperson Code" := Opp."Salesperson Code";
                     TempOpportunityEntry."Campaign No." := Opp."Campaign No.";
                     TempOpportunityEntry."Action Taken" := TempOpportunityEntry."Action Taken"::Lost;
                     TempOpportunityEntry.INSERT;
                     TempOpportunityEntry.SETRANGE("Action Taken",TempOpportunityEntry."Action Taken"::Lost);
                     PAGE.RUNMODAL(PAGE::"Close Opportunity",TempOpportunityEntry);
                     IF Opp.GET("Opportunity No.") THEN
                       IF Opp.Status <> Opp.Status::Lost THEN
                         ERROR(Text043);
                   END;
                   Opp."Sales Document Type" := Opp."Sales Document Type"::" ";
                   Opp."Sales Document No." := '';
                   Opp.MODIFY;
                   "Opportunity No." := '';
                 END;

               //**4PS.sn
               IF ("Document Type" = "Document Type"::Order) AND
                  ("Sales Document Type" = "Sales Document Type"::"Sales Logistics Separated")
               THEN
                 ArchiveManagement.ArchSalesDocumentNoConfirm(Rec);
               //**4PS.en

               VALIDATE("Applies-to ID",'');
               VALIDATE("Incoming Document Entry No.",0);

               ApprovalsMgmt.DeleteApprovalEntry(DATABASE::"Sales Header","Document Type","No.");
               SalesLine.RESET;
               SalesLine.LOCKTABLE;

               WhseRequest.SETRANGE("Source Type",DATABASE::"Sales Line");
               WhseRequest.SETRANGE("Source Subtype","Document Type");
               WhseRequest.SETRANGE("Source No.","No.");
               WhseRequest.DELETEALL(TRUE);

               SalesLine.SETRANGE("Document Type","Document Type");
               SalesLine.SETRANGE("Document No.","No.");

               //**4PS.sn C025689
               SalesLine.SETFILTER("Production Motivation Date",'<>%1',0D);
               IF SalesLine.FINDSET THEN
                 REPEAT
                   IF UnitPriceProductionMot.GET(SalesLine."Job No.","Sell-to Customer No.",SalesLine."Production Motivation Date",SalesLine."Production Motivation Code") THEN
                     IF UnitPriceProductionMot.Invoiced THEN BEGIN
                       UnitPriceProductionMot.Invoiced := FALSE;
                       UnitPriceProductionMot.MODIFY;
                     END;
                 UNTIL SalesLine.NEXT = 0;
               SalesLine.SETRANGE("Production Motivation Date");

               //**4PSmg, 15-04-11: Delete Sales Line bottom-up for Service Invoice Proposal roll-back
               IF "Service Invoice" THEN BEGIN
                 DeleteSalesLines(TRUE);
                 IF "Consumption Invoice" THEN BEGIN
                   IF lvServiceContractRec.GET("Service Contract No.") THEN BEGIN
                     ContractInstallment.SETRANGE("Service Contract No.", lvServiceContractRec."No.");
                     ContractInstallment.SETFILTER("Invoice From", '<=%1', lvServiceContractRec."Invoiced Until");
                     ContractInstallment.SETFILTER("Ending Date", '>=%1|%2', lvServiceContractRec."Invoiced Until"+1, 0D);
                     IF ContractInstallment.FINDFIRST THEN BEGIN
                       ContractAmountsByDate.SETRANGE("Service Contract No.", lvServiceContractRec."No.");
                       ContractAmountsByDate.SETRANGE(Type, ContractAmountsByDate.Type::Installment);
                       ContractAmountsByDate.SETRANGE("Installment Line No.", ContractInstallment."Line No.");
                       ContractAmountsByDate.SETRANGE("Index Date", lvServiceContractRec."Invoiced Until"+1);
                       IF ContractAmountsByDate.FINDFIRST THEN
                         ContractAmountsByDate.DELETE(TRUE);
                     END;
                   END;
                 END;
               END;
               //**4PS.en

               SalesLine.SETRANGE(Type,SalesLine.Type::"Charge (Item)");
               DeleteSalesLines(FALSE);
               SalesLine.SETRANGE(Type);
               DeleteSalesLines(FALSE);

               SalesCommentLine.SETRANGE("Document Type","Document Type");
               SalesCommentLine.SETRANGE("No.","No.");
               SalesCommentLine.DELETEALL;

               //**4PS.sn
               CASE "Document Type" OF
                 "Document Type"::Order:
                   BEGIN
                     IF lShippingDetailsRec.READPERMISSION THEN BEGIN
                       lShippingDetailsRec.SETRANGE(Source, lShippingDetailsRec.Source::SalesOrder);
                       lShippingDetailsRec.SETRANGE("Order No.", "No.");
                       lShippingDetailsRec.DELETEALL(TRUE);
                     END;
                   END;
               END;

               IF "Plant Invoice" THEN BEGIN
                 PlantInventoryRec.RESET;
                 PlantInventoryRec.SETCURRENTKEY("Invoice Status","Last Invoice No.","Last Invoice Line No.");
                 IF "Document Type" = "Document Type"::"Invoice Proposal" THEN
                   PlantInventoryRec.SETRANGE("Invoice Status",PlantInventoryRec."Invoice Status"::Proposal)
                 ELSE
                   PlantInventoryRec.SETRANGE("Invoice Status",PlantInventoryRec."Invoice Status"::"Temporary");
                 PlantInventoryRec.SETRANGE("Last Invoice No.","No.");
                 IF PlantInventoryRec.FINDSET(TRUE, TRUE) THEN BEGIN
                   REPEAT
                     PlantInventoryRec2 := PlantInventoryRec;
                     PlantInventoryRec2."Last Invoice No." := PlantInventoryRec."Previous Invoice No.";
                     PlantInventoryRec2."Last Invoice Line No." := PlantInventoryRec."Previous Invoice Line No.";
                     PlantInventoryRec2."Invoiced until" := PlantInventoryRec."Previous Invoiced Until";
                     PlantInventoryRec2."No. of Invoiced Days" := PlantInventoryRec."Previous No. of Invoiced Days";
                     PlantInventoryRec2."Previous Invoice No." := '';
                     PlantInventoryRec2."Previous Invoice Line No." := 0;
                     PlantInventoryRec2."Previous Invoiced Until" := 0D;
                     PlantInventoryRec2."Previous No. of Invoiced Days" := 0;
                     IF PlantInventoryRec2."Last Invoice No." = '' THEN
                       PlantInventoryRec2."Invoice Status" := 0
                     ELSE
                       PlantInventoryRec2."Invoice Status" := PlantInventoryRec2."Invoice Status"::Posted;
                     PlantInventoryRec2."Completely Invoiced" := FALSE;
                     PlantInventoryRec2.MODIFY;
                   UNTIL PlantInventoryRec.NEXT = 0;
                 END;

                 PlantOrderRec.RESET;
                 PlantOrderRec.SETCURRENTKEY("From Location Invoice Status","From Location Invoice No.");
                 IF "Document Type" = "Document Type"::"Invoice Proposal" THEN
                   PlantOrderRec.SETRANGE("From Location Invoice Status",PlantOrderRec."From Location Invoice Status"::Proposal)
                 ELSE
                   PlantOrderRec.SETRANGE("From Location Invoice Status",PlantOrderRec."From Location Invoice Status"::"Temporary");
                 PlantOrderRec.SETRANGE("From Location Invoice No.","No.");
                 IF PlantOrderRec.FINDSET(TRUE, TRUE) THEN BEGIN
                   REPEAT
                     PlantOrderRec2 := PlantOrderRec;
                     PlantOrderRec2."From Location Invoiced" := FALSE;
                     PlantOrderRec2."From Location Invoice No." := '';
                     PlantOrderRec2."From Location Invoice Status" := 0;
                     PlantOrderRec2.MODIFY;
                   UNTIL PlantOrderRec.NEXT = 0;
                 END;

                 PlantOrderRec.RESET;
                 PlantOrderRec.SETCURRENTKEY("To Location Invoice Status","To Location Invoice No.");
                 PlantOrderRec.SETRANGE("To Location Invoice No.","No.");
                 IF "Document Type" = "Document Type"::"Invoice Proposal" THEN
                   PlantOrderRec.SETRANGE("To Location Invoice Status",PlantOrderRec."To Location Invoice Status"::Proposal)
                 ELSE
                   PlantOrderRec.SETRANGE("To Location Invoice Status",PlantOrderRec."To Location Invoice Status"::"Temporary");
                 IF PlantOrderRec.FINDSET(TRUE, TRUE) THEN BEGIN
                   REPEAT
                     PlantOrderRec2 := PlantOrderRec;
                     PlantOrderRec2."To Location Invoiced" := FALSE;
                     PlantOrderRec2."To Location Invoice No." := '';
                     PlantOrderRec2."To Location Invoice Status" := 0;
                     PlantOrderRec2.MODIFY;
                   UNTIL PlantOrderRec.NEXT = 0;
                 END;

                 PlantOrderRec.RESET;
                 PlantOrderRec.SETCURRENTKEY("Order Cost Invoice Status","Order Cost Invoice No.");
                 PlantOrderRec.SETRANGE("Order Cost Invoice No.","No.");
                 IF "Document Type" = "Document Type"::"Invoice Proposal" THEN
                   PlantOrderRec.SETRANGE("Order Cost Invoice Status",PlantOrderRec."Order Cost Invoice Status"::Proposal)
                 ELSE
                   PlantOrderRec.SETRANGE("Order Cost Invoice Status",PlantOrderRec."Order Cost Invoice Status"::"Temporary");
                 IF PlantOrderRec.FINDSET(TRUE, TRUE) THEN BEGIN
                   REPEAT
                     PlantOrderRec2 := PlantOrderRec;
                     PlantOrderRec2."Order Cost Invoiced" := FALSE;
                     PlantOrderRec2."Order Cost Invoice No." := '';
                     PlantOrderRec2."Order Cost Invoice Status" := 0;
                     PlantOrderRec2.MODIFY;
                   UNTIL PlantOrderRec.NEXT = 0;
                 END;

                 ExitOrderRec.RESET;
                 ExitOrderRec.SETCURRENTKEY("Invoice Status","Invoice No.");
                 ExitOrderRec.SETRANGE("Invoice No.","No.");
                 IF "Document Type" = "Document Type"::"Invoice Proposal" THEN
                   ExitOrderRec.SETRANGE("Invoice Status",ExitOrderRec."Invoice Status"::Proposal)
                 ELSE
                   ExitOrderRec.SETRANGE("Invoice Status",ExitOrderRec."Invoice Status"::"Temporary");
                 IF ExitOrderRec.FINDSET(TRUE, TRUE) THEN BEGIN
                   REPEAT
                     ExitOrderRec2 := ExitOrderRec;
                     ExitOrderRec2.Invoiced := FALSE;
                     ExitOrderRec2."Invoice No." := '';
                     ExitOrderRec2."Invoice Status" := ExitOrderRec."Invoice Status"::"0";
                     ExitOrderRec2.MODIFY;
                   UNTIL ExitOrderRec.NEXT = 0;
                 END;

                 ReturnLossOrderRec.RESET;
                 ReturnLossOrderRec.SETCURRENTKEY("Invoice Status","Invoice No.");
                 ReturnLossOrderRec.SETRANGE("Invoice No.","No.");
                 IF "Document Type" = "Document Type"::"Invoice Proposal" THEN
                   ReturnLossOrderRec.SETRANGE("Invoice Status",ReturnLossOrderRec."Invoice Status"::Proposal)
                 ELSE
                   ReturnLossOrderRec.SETRANGE("Invoice Status",ReturnLossOrderRec."Invoice Status"::"Temporary");
                 IF ReturnLossOrderRec.FINDSET(TRUE, TRUE) THEN BEGIN
                   REPEAT
                     ReturnLossOrderRec2 := ReturnLossOrderRec;
                     ReturnLossOrderRec2.Invoiced := FALSE;
                     ReturnLossOrderRec2."Invoice No." := '';
                     ReturnLossOrderRec2."Invoice Status" := ReturnLossOrderRec."Invoice Status"::"0";
                     ReturnLossOrderRec2.MODIFY;
                   UNTIL ReturnLossOrderRec.NEXT = 0;
                 END;

                 AdjRec.RESET;
                 AdjRec.SETCURRENTKEY("Invoice Status Debit Location","Invoice No. Debit Location");
                 IF "Document Type" = "Document Type"::"Invoice Proposal" THEN
                   AdjRec.SETRANGE("Invoice Status Debit Location",AdjRec."Invoice Status Debit Location"::Proposal)
                 ELSE
                   AdjRec.SETRANGE("Invoice Status Debit Location",AdjRec."Invoice Status Debit Location"::"Temporary");
                 AdjRec.SETRANGE("Invoice No. Debit Location","No.");
                 IF AdjRec.FINDSET(TRUE, TRUE) THEN BEGIN
                   REPEAT
                     AdjRec2 := AdjRec;
                     AdjRec2."Debet Location Invoiced" := FALSE;
                     AdjRec2."Invoice No. Debit Location" := '';
                     AdjRec2."Invoice Status Debit Location" := 0;
                     AdjRec2."Completely Invoiced" := FALSE;
                     AdjRec2.MODIFY;
                   UNTIL AdjRec.NEXT = 0;
                 END;

                 AdjRec.RESET;
                 AdjRec.SETCURRENTKEY("Invoice Status Credit Location","Invoice.No.Credit Location");
                 AdjRec.SETRANGE("Invoice.No.Credit Location","No.");
                 IF "Document Type" = "Document Type"::"Invoice Proposal" THEN
                   AdjRec.SETRANGE("Invoice Status Credit Location",AdjRec."Invoice Status Credit Location"::Proposal)
                 ELSE
                   AdjRec.SETRANGE("Invoice Status Credit Location",AdjRec."Invoice Status Credit Location"::"Temporary");
                 IF AdjRec.FINDSET(TRUE, TRUE) THEN BEGIN
                   REPEAT
                     AdjRec2 := AdjRec;
                     AdjRec2."Credit Location Invoiced" := FALSE;
                     AdjRec2."Invoice.No.Credit Location" := '';
                     AdjRec2."Invoice Status Credit Location" := 0;
                     AdjRec2."Completely Invoiced" := FALSE;
                     AdjRec2.MODIFY;
                   UNTIL AdjRec.NEXT = 0;
                 END;

                 PlantHourLineRec.RESET;
                 PlantHourLineRec.SETCURRENTKEY("Invoice Status","Invoice No.");
                 PlantHourLineRec.SETRANGE("Invoice No.","No.");
                 IF "Document Type" = "Document Type"::"Invoice Proposal" THEN
                   PlantHourLineRec.SETRANGE("Invoice Status",PlantHourLineRec."Invoice Status"::Proposal)
                 ELSE
                   PlantHourLineRec.SETRANGE("Invoice Status",PlantHourLineRec."Invoice Status"::"Temporary");
                 IF PlantHourLineRec.FINDSET(TRUE, TRUE) THEN BEGIN
                   REPEAT
                     PlantHourLineRec2 := PlantHourLineRec;
                     PlantHourLineRec2.Invoiced := FALSE;
                     PlantHourLineRec2."Invoice No." := '';
                     PlantHourLineRec2."Invoice Line No." := 0;
                     PlantHourLineRec2."Invoice Status" := PlantHourLineRec."Invoice Status"::"0";
                     PlantHourLineRec2.MODIFY;
                   UNTIL PlantHourLineRec.NEXT = 0;
                 END;

                 lvTransOrderRec.RESET;
                 lvTransOrderRec.SETCURRENTKEY("From Location Invoice Status","From Location Invoice No.");
                 IF "Document Type" = "Document Type"::"Invoice Proposal" THEN
                   lvTransOrderRec.SETRANGE("From Location Invoice Status",lvTransOrderRec."From Location Invoice Status"::Proposal)
                 ELSE
                   lvTransOrderRec.SETRANGE("From Location Invoice Status",lvTransOrderRec."From Location Invoice Status"::"Temporary");
                 lvTransOrderRec.SETRANGE("From Location Invoice No.","No.");
                 IF lvTransOrderRec.FINDSET(TRUE, TRUE) THEN BEGIN
                   REPEAT
                     lvTransOrderRec2 := lvTransOrderRec;
                     lvTransOrderRec2."From Location Invoiced" := FALSE;
                     lvTransOrderRec2."From Location Invoice No." := '';
                     lvTransOrderRec2."From Location Invoice Status" := 0;
                     lvTransOrderRec2.FillStatusInvoiced(TRUE);
                     lvTransOrderRec2.MODIFY;
                   UNTIL lvTransOrderRec.NEXT = 0;
                 END;

                 lvTransOrderRec.RESET;
                 lvTransOrderRec.SETCURRENTKEY("To Location Invoice Status","To Location Invoice No.");
                 lvTransOrderRec.SETRANGE("To Location Invoice No.","No.");
                 IF "Document Type" = "Document Type"::"Invoice Proposal" THEN
                   lvTransOrderRec.SETRANGE("To Location Invoice Status",lvTransOrderRec."To Location Invoice Status"::Proposal)
                 ELSE
                   lvTransOrderRec.SETRANGE("To Location Invoice Status",lvTransOrderRec."To Location Invoice Status"::"Temporary");
                 IF lvTransOrderRec.FINDSET(TRUE, TRUE) THEN BEGIN
                   REPEAT
                     lvTransOrderRec2 := lvTransOrderRec;
                     lvTransOrderRec2."To Location Invoiced" := FALSE;
                     lvTransOrderRec2."To Location Invoice No." := '';
                     lvTransOrderRec2."To Location Invoice Status" := 0;
                     lvTransOrderRec2.FillStatusInvoiced(TRUE);
                     lvTransOrderRec2.MODIFY;
                   UNTIL lvTransOrderRec.NEXT = 0;
                 END;

                 lvTransOrderRec.RESET;
                 lvTransOrderRec.SETCURRENTKEY("Internal Invoice Status","Internal Invoice No.");
                 lvTransOrderRec.SETRANGE("Internal Invoice No.","No.");
                 IF "Document Type" = "Document Type"::"Invoice Proposal" THEN
                   lvTransOrderRec.SETRANGE("Internal Invoice Status",lvTransOrderRec."Internal Invoice Status"::Proposal)
                 ELSE
                   lvTransOrderRec.SETRANGE("Internal Invoice Status",lvTransOrderRec."Internal Invoice Status"::"Temporary");
                 IF lvTransOrderRec.FINDSET(TRUE, TRUE) THEN BEGIN
                   REPEAT
                     lvTransOrderRec2 := lvTransOrderRec;
                     lvTransOrderRec2."Internal Invoiced" := FALSE;
                     lvTransOrderRec2."Internal Invoice No." := '';
                     lvTransOrderRec2."Internal Invoice Status" := 0;
                     lvTransOrderRec2.FillStatusInvoiced(TRUE);
                     lvTransOrderRec2.MODIFY;
                   UNTIL lvTransOrderRec.NEXT = 0;
                 END;

                 lvTransOrderRec.RESET;
                 lvTransOrderRec.SETCURRENTKEY("Project Invoice Status","Project Invoice No.");
                 lvTransOrderRec.SETRANGE("Project Invoice No.","No.");
                 IF "Document Type" = "Document Type"::"Invoice Proposal" THEN
                   lvTransOrderRec.SETRANGE("Project Invoice Status",lvTransOrderRec."Project Invoice Status"::Proposal)
                 ELSE
                   lvTransOrderRec.SETRANGE("Project Invoice Status",lvTransOrderRec."Project Invoice Status"::"Temporary");
                 IF lvTransOrderRec.FINDSET(TRUE, TRUE) THEN BEGIN
                   REPEAT
                     lvTransOrderRec2 := lvTransOrderRec;
                     lvTransOrderRec2."Project Invoiced" := FALSE;
                     lvTransOrderRec2."Project Invoice No." := '';
                     lvTransOrderRec2."Project Invoice Status" := 0;
                     lvTransOrderRec2.FillStatusInvoiced(TRUE);
                     lvTransOrderRec2.MODIFY;
                   UNTIL lvTransOrderRec.NEXT = 0;
                 END;
               END;

               IF "Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"] THEN BEGIN
                 IF "Sales Document Type" = "Sales Document Type"::"Sales Logistics Separated" THEN BEGIN
                   lvSalesRentalInvoiceLine.RESET;
                   lvSalesRentalInvoiceLine.SETCURRENTKEY("Invoice Status","Last Invoice No.","Last Invoice Line No.");
                   lvSalesRentalInvoiceLine.SETRANGE("Invoice Status",lvSalesRentalInvoiceLine."Invoice Status"::"Temporary");
                   lvSalesRentalInvoiceLine.SETRANGE("Last Invoice No.","No.");
                   IF lvSalesRentalInvoiceLine.FINDSET(TRUE, TRUE) THEN BEGIN
                     REPEAT
                       lvSalesRentalInvoiceLine2 := lvSalesRentalInvoiceLine;
                       lvSalesRentalInvoiceLine2."Last Invoice No." := lvSalesRentalInvoiceLine."Previous Invoice No.";
                       lvSalesRentalInvoiceLine2."Last Invoice Line No." := lvSalesRentalInvoiceLine."Previous Invoice Line No.";
                       lvSalesRentalInvoiceLine2."Invoiced until" := lvSalesRentalInvoiceLine."Previous Invoiced Until";
                       lvSalesRentalInvoiceLine2."Total Time Units Invoiced" := lvSalesRentalInvoiceLine."Previous No. of Time Units Inv";
                       lvSalesRentalInvoiceLine2."Previous Invoice No." := '';
                       lvSalesRentalInvoiceLine2."Previous Invoice Line No." := 0;
                       lvSalesRentalInvoiceLine2."Previous Invoiced Until" := 0D;
                       lvSalesRentalInvoiceLine2."Previous No. of Time Units Inv" := 0;
                       IF lvSalesRentalInvoiceLine2."Last Invoice No." = '' THEN
                         lvSalesRentalInvoiceLine2."Invoice Status" := 0
                       ELSE
                         lvSalesRentalInvoiceLine2."Invoice Status" := lvSalesRentalInvoiceLine2."Invoice Status"::Posted;
                       lvSalesRentalInvoiceLine2."Completely Invoiced" := FALSE;
                       lvSalesRentalInvoiceLine2.MODIFY;
                     UNTIL lvSalesRentalInvoiceLine.NEXT = 0;
                   END;
                 END;
               END;

               IF "Rental Unit Invoice" THEN BEGIN  //DP00617
                 RentalPackage.SETCURRENTKEY("Invoice Status", "Last Invoice No.");
                 RentalPackage.SETRANGE("Invoice Status", RentalPackage."Invoice Status"::"Temporary");
                 RentalPackage.SETRANGE("Last Invoice No.", "No.");
                 IF RentalPackage.FINDSET(TRUE, TRUE) THEN BEGIN
                   REPEAT
                     RentalPackage2 := RentalPackage;
                     RentalPackage2."Last Invoice No." := RentalPackage."Previous Invoice No.";
                     RentalPackage2."Invoice Type" := RentalPackage."Previous Invoice Type";
                     RentalPackage2."Invoiced Until" := RentalPackage."Previous Invoiced Until";
                     RentalPackage2."Previous Invoice No." := '';
                     RentalPackage2."Previous Invoiced Until" := 0D;
                     IF RentalPackage2."Last Invoice No." = '' THEN
                       RentalPackage2."Invoice Status" := 0
                     ELSE
                       RentalPackage2."Invoice Status" := RentalPackage2."Invoice Status"::Posted;
                     RentalPackage2."Completely Invoiced" := FALSE;
                     RentalPackage2.MODIFY;
                     //
                     RentalRateLine.SETRANGE("Project No.", RentalPackage."Project No.");
                     RentalRateLine.SETRANGE("Rental Unit", RentalPackage."Rental Unit");
                     RentalRateLine.SETRANGE("Starting Date Package", RentalPackage."Starting Date");
                     RentalRateLine.SETRANGE("Last Invoice No.", "No.");
                     RentalRateLine.SETRANGE("Invoice Status", RentalRateLine."Invoice Status"::"Temporary");
                     IF RentalRateLine.FINDSET(TRUE, FALSE) THEN BEGIN
                       REPEAT
                         RentalRateLine."Last Invoice No." := RentalRateLine."Previous Invoice No.";
                         RentalRateLine."Invoice Type" := RentalRateLine."Previous Invoice Type";
                         RentalRateLine."Invoiced Until" := RentalRateLine."Previous Invoiced Until";
                         RentalRateLine."Previous Invoice No." := '';
                         RentalRateLine."Previous Invoiced Until" := 0D;
                         IF RentalRateLine."Last Invoice No." = '' THEN
                           RentalRateLine."Invoice Status" := 0
                         ELSE
                           RentalRateLine."Invoice Status" := RentalRateLine."Invoice Status"::Posted;
                         RentalRateLine.MODIFY;
                       UNTIL RentalRateLine.NEXT = 0;
                     END;
                     //
                     HistRentalPackage.SETRANGE("Project No.", RentalPackage."Project No.");
                     HistRentalPackage.SETRANGE("Rental Unit", RentalPackage."Rental Unit");
                     HistRentalPackage.SETRANGE("Starting Date", RentalPackage."Starting Date");
                     HistRentalPackage.SETRANGE("Invoice Status", HistRentalPackage."Invoice Status"::"Temporary");
                     HistRentalPackage.SETRANGE("Invoice No.", "No.");
                     IF HistRentalPackage.FINDSET(TRUE,FALSE) THEN BEGIN
                       REPEAT
                         IF HistRentalPackage."Delayed Index. Invoice" THEN BEGIN
                           RentalPackage2."Invoice Delayed Indexation" := TRUE;
                           RentalPackage2.MODIFY;
                         END;
                         HistRentalPackage.DELETE(TRUE);  // True, including lines
                       UNTIL HistRentalPackage.NEXT = 0;
                     END;
                   UNTIL RentalPackage.NEXT = 0;
                 END;
               END;

               lvOfferAmountRec.SETRANGE("Document Type", "Document Type");
               lvOfferAmountRec.SETRANGE("Document No.", "No.");
               lvOfferAmountRec.DELETEALL;

               IF "Document Type" = "Document Type"::Order THEN BEGIN
                 lvSalesRentalRemovalLineRec.SETRANGE("Document No.", "No.");
                 lvSalesRentalRemovalLineRec.DELETEALL;
               END;

               lvSalesRentalAppointmentRec.SETRANGE("Document Type", "Document Type");
               lvSalesRentalAppointmentRec.SETRANGE("Document No.", "No.");
               lvSalesRentalAppointmentRec.DELETEALL(TRUE);

               SalesHeaderExtension.SETRANGE("Document Type", "Document Type");
               SalesHeaderExtension.SETRANGE("Document No.", "No.");
               SalesHeaderExtension.DELETEALL;

               //T005606.sn
               CASE "Document Type" OF
                 "Document Type"::Invoice:
                   BEGIN
                     Complaint.SETCURRENTKEY("Sales Invoice");
                     Complaint.SETRANGE("Sales Invoice","No.");
                     Complaint.MODIFYALL("Sales Invoice",'');
                   END;
                 "Document Type"::"Credit Memo":
                   BEGIN
                     Complaint.SETCURRENTKEY("Credit Memo");
                     Complaint.SETRANGE("Credit Memo","No.");
                     Complaint.MODIFYALL("Credit Memo",'');
                   END;
               END;
               //T005606.en
               //**4PS.en

               //4PPSEDK
               IF l_SalesHeaderDKinfo.WRITEPERMISSION THEN BEGIN
                 l_SalesHeaderDKinfo.SETRANGE(tableNo,36);
                 l_SalesHeaderDKinfo.SETRANGE("Document Type","Document Type");
                 l_SalesHeaderDKinfo.SETRANGE("No.","No.");
                 l_SalesHeaderDKinfo.DELETEALL;
               END;
             END;

    OnRename=BEGIN
               ERROR(Text003,TABLECAPTION);
             END;

    CaptionML=ENU=Sales Header;
    LookupPageID=Page45;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Invoice Proposal;
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Invoice Proposal;
                                                   Description=[4PS: Raam  -> Afroep  ] }
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                CheckCreditLimitIfLineNotInsertedYet;
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Sell-to Customer No." <> xRec."Sell-to Customer No.") AND
                                                                   (xRec."Sell-to Customer No." <> '')
                                                                THEN BEGIN
                                                                  IF ("Opportunity No." <> '') AND ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) THEN
                                                                    ERROR(
                                                                      Text062,
                                                                      FIELDCAPTION("Sell-to Customer No."),
                                                                      FIELDCAPTION("Opportunity No."),
                                                                      "Opportunity No.",
                                                                      "Document Type");
                                                                  IF HideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Sell-to Customer No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF "Sell-to Customer No." = '' THEN BEGIN
                                                                      IF SalesLine.FINDFIRST THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Sell-to Customer No."));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      InitNoSeries;
                                                                      EXIT;
                                                                    END;
                                                                    IF "Document Type" = "Document Type"::Order THEN
                                                                      SalesLine.SETFILTER("Quantity Shipped",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                                                                      SalesLine.SETRANGE("Sell-to Customer No.",xRec."Sell-to Customer No.");
                                                                      SalesLine.SETFILTER("Shipment No.",'<>%1','');
                                                                    END;

                                                                    IF SalesLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        SalesLine.TESTFIELD("Quantity Shipped",0)
                                                                      ELSE
                                                                        SalesLine.TESTFIELD("Shipment No.",'');
                                                                    SalesLine.SETRANGE("Shipment No.");
                                                                    SalesLine.SETRANGE("Quantity Shipped");

                                                                    IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                      SalesLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
                                                                      IF SalesLine.FIND('-') THEN
                                                                        SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      SalesLine.SETRANGE("Prepmt. Amt. Inv.");
                                                                    END;

                                                                    IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                      SalesLine.SETFILTER("Return Qty. Received",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                        SalesLine.SETRANGE("Sell-to Customer No.",xRec."Sell-to Customer No.");
                                                                        SalesLine.SETFILTER("Return Receipt No.",'<>%1','');
                                                                      END;

                                                                    IF SalesLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                        SalesLine.TESTFIELD("Return Qty. Received",0)
                                                                      ELSE
                                                                        SalesLine.TESTFIELD("Return Receipt No.",'');
                                                                    SalesLine.RESET;
                                                                    FillWKAPercentages; //**4PS.n
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Sell-to Customer No." <> "Sell-to Customer No.")
                                                                THEN BEGIN
                                                                  SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Purch. Order Line No.",'<>0');
                                                                  IF NOT SalesLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Sell-to Customer No."));
                                                                  SalesLine.RESET;
                                                                END;

                                                                GetCust("Sell-to Customer No.");

                                                                Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
                                                                Cust.TESTFIELD("Gen. Bus. Posting Group");
                                                                "Sell-to Customer Template Code" := '';
                                                                "Sell-to Customer Name" := Cust.Name;
                                                                "Sell-to Customer Name 2" := Cust."Name 2";
                                                                "Sell-to Address" := Cust.Address;
                                                                "Sell-to Address 2" := Cust."Address 2";
                                                                "Sell-to City" := Cust.City;
                                                                "Sell-to Post Code" := Cust."Post Code";
                                                                "Sell-to County" := Cust.County;
                                                                "Sell-to Country/Region Code" := Cust."Country/Region Code";
                                                                "Account Code DK" := Cust."Account Code (DK)";  //NAVDK
                                                                "Account Code NO" := Cust."Account Code NO"; //NAVNO
                                                                IF NOT SkipSellToContact THEN
                                                                  "Sell-to Contact" := Cust.Contact;
                                                                //**4PS.sn
                                                                IF NOT SkipSellToContact THEN
                                                                  "Sell-to Contact No." := '';
                                                                //**4PS.en
                                                                "Gen. Bus. Posting Group" := Cust."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := Cust."VAT Bus. Posting Group";
                                                                "Tax Area Code" := Cust."Tax Area Code";
                                                                "Tax Liable" := Cust."Tax Liable";
                                                                "VAT Registration No." := Cust."VAT Registration No.";
                                                                "VAT Country/Region Code" := Cust."Country/Region Code";
                                                                "Shipping Advice" := Cust."Shipping Advice";
                                                                 //**4PS.sn
                                                                "Transaction Type" := Cust."Transaction Type";
                                                                "Transaction Specification" := Cust."Transaction Specification";
                                                                "Transport Method" := Cust."Transport Method";
                                                                "Exit Point" := Cust."Exit Point";
                                                                FillDefaultServiceWarrantyCode; //**4PS.n DP00121
                                                                //**4PS.en
                                                                "Responsibility Center" := UserSetupMgt.GetRespCenter(0,Cust."Responsibility Center");

                                                                SkipRecreateSalesLines := TRUE; //**4PS C008869

                                                                VALIDATE("Location Code",UserSetupMgt.GetLocation(0,Cust."Location Code","Responsibility Center"));

                                                                IF "Sell-to Customer No." = xRec."Sell-to Customer No." THEN
                                                                  IF ShippedSalesLinesExist OR ReturnReceiptExist THEN BEGIN
                                                                    TESTFIELD("VAT Bus. Posting Group",xRec."VAT Bus. Posting Group");
                                                                    TESTFIELD("Gen. Bus. Posting Group",xRec."Gen. Bus. Posting Group");
                                                                  END;

                                                                "Sell-to IC Partner Code" := Cust."IC Partner Code";
                                                                "Send IC Document" := ("Sell-to IC Partner Code" <> '') AND ("IC Direction" = "IC Direction"::Outgoing);

                                                                //**4PS.sn
                                                                IF "Sales Document Type" = "Sales Document Type"::"Sales Logistics Separated" THEN BEGIN
                                                                  IF Cust."Plant Depot Logistics" <> '' THEN
                                                                    VALIDATE("Plant Depot Logistics", Cust."Plant Depot Logistics");
                                                                  IF Cust."Location Code Logistics" <>  '' THEN
                                                                    VALIDATE("Location Code Logistics", Cust."Location Code Logistics");
                                                                END;
                                                                "Extended VAT Determination" := Cust."Extended VAT Determination"; //hs, 12-11-2007
                                                                //**4PS.en
                                                                IF Cust."Bill-to Customer No." <> '' THEN
                                                                  VALIDATE("Bill-to Customer No.",Cust."Bill-to Customer No.")
                                                                ELSE BEGIN
                                                                  IF "Bill-to Customer No." = "Sell-to Customer No." THEN
                                                                    SkipBillToContact := TRUE;
                                                                  VALIDATE("Bill-to Customer No.","Sell-to Customer No.");
                                                                  SkipBillToContact := FALSE;
                                                                END;
                                                                VALIDATE("Ship-to Code",'');
                                                                GetShippingTime(FIELDNO("Sell-to Customer No."));

                                                                SkipRecreateSalesLines := FALSE; //**4PS C008869

                                                                IF (xRec."Sell-to Customer No." <> "Sell-to Customer No.") OR
                                                                   (xRec."Currency Code" <> "Currency Code") OR
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group") OR
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group") OR
                                                                   AskRecreateSalesLines //**4PS C008869
                                                                THEN
                                                                  RecreateSalesLines(FIELDCAPTION("Sell-to Customer No."));

                                                                AskRecreateSalesLines := FALSE; //**4PS C008869

                                                                IF NOT SkipSellToContact THEN
                                                                  UpdateSellToCont("Sell-to Customer No.");

                                                                "Inserted By" := USERID; //**4PS.n

                                                                ShowSalesOrders; //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Sell-to Customer No. }
    { 3   ;   ;No.                 ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=FIELD(Document Type));
                                                   OnValidate=BEGIN
                                                                //**4PS: Table relation added for lookup in reports like 11012565
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=No. }
    { 4   ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=VAR
                                                                ProjectPrincipal@1210190000 : Record 11012005;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                BilltoCustomerNoChanged := xRec."Bill-to Customer No." <> "Bill-to Customer No.";
                                                                IF BilltoCustomerNoChanged THEN
                                                                  IF xRec."Bill-to Customer No." = '' THEN
                                                                    InitRecord
                                                                  ELSE BEGIN
                                                                    VALIDATE("Credit Card No.",'');
                                                                    IF HideValidationDialog OR NOT GUIALLOWED THEN
                                                                      Confirmed := TRUE
                                                                    ELSE
                                                                      Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Bill-to Customer No."));
                                                                    IF Confirmed THEN BEGIN
                                                                      SalesLine.SETRANGE("Document Type","Document Type");
                                                                      SalesLine.SETRANGE("Document No.","No.");
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        SalesLine.SETFILTER("Quantity Shipped",'<>0')
                                                                      ELSE
                                                                        IF "Document Type" = "Document Type"::Invoice THEN
                                                                          SalesLine.SETFILTER("Shipment No.",'<>%1','');

                                                                      IF SalesLine.FINDFIRST THEN
                                                                        IF "Document Type" = "Document Type"::Order THEN
                                                                          SalesLine.TESTFIELD("Quantity Shipped",0)
                                                                        ELSE
                                                                          SalesLine.TESTFIELD("Shipment No.",'');
                                                                      SalesLine.SETRANGE("Shipment No.");
                                                                      SalesLine.SETRANGE("Quantity Shipped");

                                                                      IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                        SalesLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
                                                                        IF SalesLine.FIND('-') THEN
                                                                          SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                        SalesLine.SETRANGE("Prepmt. Amt. Inv.");
                                                                      END;

                                                                      IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                        SalesLine.SETFILTER("Return Qty. Received",'<>0')
                                                                      ELSE
                                                                        IF "Document Type" = "Document Type"::"Credit Memo" THEN
                                                                          SalesLine.SETFILTER("Return Receipt No.",'<>%1','');

                                                                      IF SalesLine.FINDFIRST THEN
                                                                        IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                          SalesLine.TESTFIELD("Return Qty. Received",0)
                                                                        ELSE
                                                                          SalesLine.TESTFIELD("Return Receipt No.",'');
                                                                      SalesLine.RESET
                                                                    END ELSE
                                                                      "Bill-to Customer No." := xRec."Bill-to Customer No.";
                                                                  END;

                                                                GetCust("Bill-to Customer No.");
                                                                Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
                                                                Cust.TESTFIELD("Customer Posting Group");
                                                                GLN := Cust.GLN;//NAVNO
                                                                "E-Invoice" := Cust."E-Invoice";  //NAVNO
                                                                CheckCrLimit;

                                                                "EAN No." := Cust."EAN No."; //NAVDK

                                                                VALIDATE("Alternative Bill-to Address",''); //**4PS.n
                                                                "Bill-to Customer Template Code" := '';
                                                                "Bill-to Name" := Cust.Name;
                                                                "Bill-to Name 2" := Cust."Name 2";
                                                                "Bill-to Address" := Cust.Address;
                                                                "Bill-to Address 2" := Cust."Address 2";
                                                                "Bill-to City" := Cust.City;
                                                                "Bill-to Post Code" := Cust."Post Code";
                                                                "Bill-to County" := Cust.County;
                                                                "Bill-to Country/Region Code" := Cust."Country/Region Code";
                                                                IF NOT SkipBillToContact THEN
                                                                  "Bill-to Contact" := Cust.Contact;
                                                                "Payment Terms Code" := Cust."Payment Terms Code";
                                                                "Prepmt. Payment Terms Code" := Cust."Payment Terms Code";

                                                                // 25692.sn
                                                                IF ProjectPrincipal.GET("Job No.", "Sell-to Customer No.") THEN BEGIN
                                                                  IF ProjectPrincipal."Payment Terms Code" <> '' THEN
                                                                    "Payment Terms Code" := ProjectPrincipal."Payment Terms Code";
                                                                END;
                                                                // 25692.en

                                                                IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                  "Payment Method Code" := '';
                                                                  IF PaymentTerms.GET("Payment Terms Code") THEN
                                                                    IF PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN
                                                                      "Payment Method Code" := Cust."Payment Method Code"
                                                                END ELSE
                                                                  "Payment Method Code" := Cust."Payment Method Code";
                                                                GLSetup.GET;
                                                                IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No." THEN BEGIN
                                                                  "VAT Bus. Posting Group" := Cust."VAT Bus. Posting Group";
                                                                  "VAT Country/Region Code" := Cust."Country/Region Code";
                                                                  "VAT Registration No." := Cust."VAT Registration No.";
                                                                  "Gen. Bus. Posting Group" := Cust."Gen. Bus. Posting Group";
                                                                END;
                                                                "Customer Posting Group" := Cust."Customer Posting Group";
                                                                "Currency Code" := Cust."Currency Code";
                                                                "Customer Price Group" := Cust."Customer Price Group";
                                                                "Prices Including VAT" := Cust."Prices Including VAT";
                                                                "Allow Line Disc." := Cust."Allow Line Disc.";
                                                                "Invoice Disc. Code" := Cust."Invoice Disc. Code";
                                                                "Customer Disc. Group" := Cust."Customer Disc. Group";
                                                                "Language Code" := Cust."Language Code";
                                                                //"Salesperson Code" := Cust."Salesperson Code";  //**4PS.o
                                                                FillDefaultSalesPerson();  //**4PS.n
                                                                FillDefaultInvoiceLayoutCode();  //**4PS.n

                                                                "Combine Shipments" := Cust."Combine Shipments";
                                                                Reserve := Cust.Reserve;
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  "Prepayment %" := Cust."Prepayment %";

                                                                IF NOT BilltoCustomerNoChanged THEN BEGIN
                                                                  IF ShippedSalesLinesExist THEN BEGIN
                                                                    TESTFIELD("Customer Disc. Group",xRec."Customer Disc. Group");
                                                                    TESTFIELD("Currency Code",xRec."Currency Code");
                                                                  END;
                                                                END;

                                                                CreateDim(
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::Job,"Job No.", //**4PS.n
                                                                  DATABASE::"Service Order","Service Order No.", //**4PS.n 09-06-2010
                                                                  DATABASE::"Service-Contract","Service Contract No.", //**4PS.n 09-06-2010
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");
                                                                  //DATABASE::Location,"Location Code"); //**4PS.n  //*C007227.o

                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                                VALIDATE("Payment Method Code");
                                                                VALIDATE("Currency Code");
                                                                VALIDATE("Prepayment %");

                                                                //**4PS.sn
                                                                VALIDATE("Credit Restriction", Cust."Credit Restriction");
                                                                //**4PS.en

                                                                IF (xRec."Sell-to Customer No." = "Sell-to Customer No.") AND
                                                                   BilltoCustomerNoChanged
                                                                THEN BEGIN
                                                                  RecreateSalesLines(FIELDCAPTION("Bill-to Customer No."));
                                                                  BilltoCustomerNoChanged := FALSE;
                                                                END;
                                                                IF NOT SkipBillToContact THEN
                                                                  UpdateBillToCont("Bill-to Customer No.");

                                                                "Bill-to IC Partner Code" := Cust."IC Partner Code";
                                                                "Send IC Document" := ("Bill-to IC Partner Code" <> '') AND ("IC Direction" = "IC Direction"::Outgoing);
                                                                "OIOUBL Profile Code" := Cust."OIOUBL Profile Code";  //NAVDK
                                                              END;

                                                   CaptionML=ENU=Bill-to Customer No.;
                                                   NotBlank=Yes }
    { 5   ;   ;Bill-to Name        ;Text50        ;CaptionML=ENU=Bill-to Name }
    { 6   ;   ;Bill-to Name 2      ;Text50        ;CaptionML=ENU=Bill-to Name 2 }
    { 7   ;   ;Bill-to Address     ;Text50        ;CaptionML=ENU=Bill-to Address }
    { 8   ;   ;Bill-to Address 2   ;Text50        ;CaptionML=ENU=Bill-to Address 2 }
    { 9   ;   ;Bill-to City        ;Text30        ;TableRelation=IF (Bill-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Bill-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Bill-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Bill-to City }
    { 10  ;   ;Bill-to Contact     ;Text50        ;CaptionML=ENU=Bill-to Contact }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=ENU=Your Reference }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.),
                                                                                               Shipping Address=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                THEN BEGIN
                                                                  SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Purch. Order Line No.",'<>0');
                                                                  IF NOT SalesLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Ship-to Code"));
                                                                  SalesLine.RESET;
                                                                END;

                                                                IF ("Document Type" <> "Document Type"::"Return Order") AND
                                                                   ("Document Type" <> "Document Type"::"Credit Memo")
                                                                THEN
                                                                  IF "Ship-to Code" <> '' THEN BEGIN
                                                                    IF xRec."Ship-to Code" <> '' THEN
                                                                    BEGIN
                                                                      GetCust("Sell-to Customer No.");
                                                                      IF Cust."Location Code" <> '' THEN
                                                                        VALIDATE("Location Code",Cust."Location Code");
                                                                      "Tax Area Code" := Cust."Tax Area Code";
                                                                    END;
                                                                    ShipToAddr.GET("Sell-to Customer No.","Ship-to Code");
                                                                    "Ship-to Name" := ShipToAddr.Name;
                                                                    "Ship-to Name 2" := ShipToAddr."Name 2";
                                                                    "Ship-to Address" := ShipToAddr.Address;
                                                                    "Ship-to Address 2" := ShipToAddr."Address 2";
                                                                    "Ship-to City" := ShipToAddr.City;
                                                                    "Ship-to Post Code" := ShipToAddr."Post Code";
                                                                    "Ship-to County" := ShipToAddr.County;
                                                                    VALIDATE("Ship-to Country/Region Code",ShipToAddr."Country/Region Code");
                                                                    "Ship-to Contact" := ShipToAddr.Contact;
                                                                    "Ship-to Contact No." := ''; //**4PS.n
                                                                    "Shipment Method Code" := ShipToAddr."Shipment Method Code";
                                                                    IF ShipToAddr."Location Code" <> '' THEN
                                                                      VALIDATE("Location Code",ShipToAddr."Location Code");
                                                                    "Shipping Agent Code" := ShipToAddr."Shipping Agent Code";
                                                                    "Shipping Agent Service Code" := ShipToAddr."Shipping Agent Service Code";
                                                                    IF ShipToAddr."Tax Area Code" <> '' THEN
                                                                      "Tax Area Code" := ShipToAddr."Tax Area Code";
                                                                    "Tax Liable" := ShipToAddr."Tax Liable";
                                                                  END ELSE
                                                                    IF "Sell-to Customer No." <> '' THEN BEGIN
                                                                      GetCust("Sell-to Customer No.");
                                                                      "Ship-to Name" := Cust.Name;
                                                                      "Ship-to Name 2" := Cust."Name 2";
                                                                      "Ship-to Address" := Cust.Address;
                                                                      "Ship-to Address 2" := Cust."Address 2";
                                                                      "Ship-to City" := Cust.City;
                                                                      "Ship-to Post Code" := Cust."Post Code";
                                                                      "Ship-to County" := Cust.County;
                                                                      VALIDATE("Ship-to Country/Region Code",Cust."Country/Region Code");
                                                                      "Ship-to Contact" := Cust.Contact;
                                                                      "Shipment Method Code" := Cust."Shipment Method Code";
                                                                      "Tax Area Code" := Cust."Tax Area Code";
                                                                      "Tax Liable" := Cust."Tax Liable";
                                                                      IF Cust."Location Code" <> '' THEN
                                                                        VALIDATE("Location Code",Cust."Location Code");
                                                                      "Shipping Agent Code" := Cust."Shipping Agent Code";
                                                                      "Shipping Agent Service Code" := Cust."Shipping Agent Service Code";
                                                                    END;

                                                                GetShippingTime(FIELDNO("Ship-to Code"));

                                                                IF (xRec."Sell-to Customer No." = "Sell-to Customer No.") AND
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                THEN
                                                                  IF (xRec."VAT Country/Region Code" <> "VAT Country/Region Code") OR
                                                                     (xRec."Tax Area Code" <> "Tax Area Code")
                                                                  THEN
                                                                    RecreateSalesLines(FIELDCAPTION("Ship-to Code"))
                                                                  ELSE BEGIN
                                                                    IF xRec."Shipping Agent Code" <> "Shipping Agent Code" THEN
                                                                      MessageIfSalesLinesExist(FIELDCAPTION("Shipping Agent Code"));
                                                                    IF xRec."Shipping Agent Service Code" <> "Shipping Agent Service Code" THEN
                                                                      MessageIfSalesLinesExist(FIELDCAPTION("Shipping Agent Service Code"));
                                                                    IF xRec."Tax Liable" <> "Tax Liable" THEN
                                                                      VALIDATE("Tax Liable");
                                                                  END;

                                                                FillDefaultEMailShipment; //**4PS.n
                                                                FillDefaultEMailOrderConfirm; //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Ship-to Code }
    { 13  ;   ;Ship-to Name        ;Text50        ;CaptionML=ENU=Ship-to Name }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=ENU=Ship-to Name 2 }
    { 15  ;   ;Ship-to Address     ;Text50        ;CaptionML=ENU=Ship-to Address }
    { 16  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=ENU=Ship-to Address 2 }
    { 17  ;   ;Ship-to City        ;Text30        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Ship-to City }
    { 18  ;   ;Ship-to Contact     ;Text50        ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF "Ship-to Contact" = '' THEN
                                                                  "Ship-to Contact No." := '';
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Ship-to Contact }
    { 19  ;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                IF ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND
                                                                   NOT ("Order Date" = xRec."Order Date")
                                                                THEN
                                                                  PriceMessageIfSalesLinesExist(FIELDCAPTION("Order Date"));
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Order Date }
    { 20  ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                TestNoSeriesDate(
                                                                  "Posting No.","Posting No. Series",
                                                                  FIELDCAPTION("Posting No."),FIELDCAPTION("Posting No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepayment No.","Prepayment No. Series",
                                                                  FIELDCAPTION("Prepayment No."),FIELDCAPTION("Prepayment No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepmt. Cr. Memo No.","Prepmt. Cr. Memo No. Series",
                                                                  FIELDCAPTION("Prepmt. Cr. Memo No."),FIELDCAPTION("Prepmt. Cr. Memo No. Series"));

                                                                IF "Incoming Document Entry No." = 0 THEN
                                                                  VALIDATE("Document Date","Posting Date");

                                                                VALIDATE("Interest Date"); //**4PS.n

                                                                IF ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
                                                                   NOT ("Posting Date" = xRec."Posting Date")
                                                                THEN
                                                                  PriceMessageIfSalesLinesExist(FIELDCAPTION("Posting Date"));

                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  UpdateCurrencyFactor;
                                                                  IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                    ConfirmUpdateCurrencyFactor;
                                                                END;

                                                                IF "Posting Date" <> xRec."Posting Date" THEN
                                                                  IF DeferralHeadersExist THEN
                                                                    ConfirmUpdateDeferralDate;
                                                                SynchronizeAsmHeader;
                                                              END;

                                                   CaptionML=ENU=Posting Date }
    { 21  ;   ;Shipment Date       ;Date          ;OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Shipment Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Shipment Date }
    { 22  ;   ;Posting Description ;Text50        ;CaptionML=ENU=Posting Description }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Payment Terms Code");
                                                                  IF (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                                                                      NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos")
                                                                  THEN BEGIN
                                                                    VALIDATE("Due Date","Document Date");
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                    //**4PS.sn
                                                                    VALIDATE("Pmt. Discount Date 2",0D);
                                                                    VALIDATE("Payment Discount % 2",0);
                                                                    VALIDATE("Pmt. Discount Date 3",0D);
                                                                    VALIDATE("Payment Discount % 3",0);
                                                                    //**4PS.en
                                                                  END ELSE BEGIN
                                                                    "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                    BEGIN //**4PS.n
                                                                      VALIDATE("Payment Discount %",PaymentTerms."Discount %");
                                                                    //**4PS.sn
                                                                      "Pmt. Discount Date 2" := CALCDATE(PaymentTerms."Discount Date Calculation 2","Document Date");
                                                                      IF xRec."Document Date" = "Document Date" THEN
                                                                        VALIDATE("Payment Discount % 2",PaymentTerms."Discount % 2");
                                                                      "Pmt. Discount Date 3" := CALCDATE(PaymentTerms."Discount Date Calculation 3","Document Date");
                                                                      IF xRec."Document Date" = "Document Date" THEN
                                                                        VALIDATE("Payment Discount % 3",PaymentTerms."Discount % 3");
                                                                    END;
                                                                    //**4PS.en
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                    //**4PS.sn
                                                                    VALIDATE("Pmt. Discount Date 2",0D);
                                                                    VALIDATE("Payment Discount % 2",0);
                                                                    VALIDATE("Pmt. Discount Date 3",0D);
                                                                    VALIDATE("Payment Discount % 3",0);
                                                                    //**4PS.en
                                                                  END;
                                                                END;
                                                                IF xRec."Payment Terms Code" = "Prepmt. Payment Terms Code" THEN BEGIN
                                                                  IF xRec."Prepayment Due Date" = 0D THEN
                                                                    "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                  VALIDATE("Prepmt. Payment Terms Code","Payment Terms Code");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Payment Terms Code }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 25  ;   ;Payment Discount %  ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=ENU=Payment Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=ENU=Pmt. Discount Date }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=ENU=Shipment Method Code }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Location Code" <> xRec."Location Code") AND
                                                                   (xRec."Sell-to Customer No." = "Sell-to Customer No.")
                                                                THEN
                                                                  MessageIfSalesLinesExist(FIELDCAPTION("Location Code"));

                                                                UpdateShipToAddress;
                                                                UpdateOutboundWhseHandlingTime;

                                                                //**4PS.sn
                                                                UpdateVATData;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Customer Posting Group;Code10      ;TableRelation="Customer Posting Group";
                                                   CaptionML=ENU=Customer Posting Group;
                                                   Editable=No }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=VAR
                                                                DOPaymentTransLogEntry@1001 : Record 829;
                                                              BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date")]) OR ("Currency Code" <> xRec."Currency Code") THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                IF DOPaymentTransLogEntry.FINDFIRST THEN
                                                                  DOPaymentTransLogMgt.ValidateHasNoValidTransactions("Document Type",FORMAT("Document Type"),"No.");
                                                                IF (CurrFieldNo <> FIELDNO("Currency Code")) AND ("Currency Code" = xRec."Currency Code") THEN
                                                                  UpdateCurrencyFactor
                                                                ELSE
                                                                  IF "Currency Code" <> xRec."Currency Code" THEN BEGIN
                                                                    UpdateCurrencyFactor;
                                                                    RecreateSalesLines(FIELDCAPTION("Currency Code"));
                                                                  END ELSE
                                                                    IF "Currency Code" <> '' THEN BEGIN
                                                                      UpdateCurrencyFactor;
                                                                      IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                        ConfirmUpdateCurrencyFactor;
                                                                    END;
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 33  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Currency Factor"),FALSE);
                                                              END;

                                                   CaptionML=ENU=Currency Factor;
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=No }
    { 34  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   OnValidate=BEGIN
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Customer Price Group"));
                                                              END;

                                                   CaptionML=ENU=Customer Price Group }
    { 35  ;   ;Prices Including VAT;Boolean       ;OnValidate=VAR
                                                                SalesLine@1000 : Record 37;
                                                                Currency@1001 : Record 4;
                                                                RecalculatePrice@1002 : Boolean;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF "Prices Including VAT" <> xRec."Prices Including VAT" THEN BEGIN
                                                                  SalesLine.SETRANGE("Document Type","Document Type");
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Job Contract Entry No.",'<>%1',0);
                                                                  IF SalesLine.FIND('-') THEN BEGIN
                                                                    SalesLine.TESTFIELD("Job No.",'');
                                                                    SalesLine.TESTFIELD("Job Contract Entry No.",0);
                                                                  END;

                                                                  SalesLine.RESET;
                                                                  SalesLine.SETRANGE("Document Type","Document Type");
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Unit Price",'<>%1',0);
                                                                  SalesLine.SETFILTER("VAT %",'<>%1',0);
                                                                  IF SalesLine.FINDFIRST THEN BEGIN
                                                                    RecalculatePrice :=
                                                                      CONFIRM(
                                                                        STRSUBSTNO(
                                                                          Text024,
                                                                          FIELDCAPTION("Prices Including VAT"),SalesLine.FIELDCAPTION("Unit Price")),
                                                                        TRUE);
                                                                    //>>NAVNO
                                                                    GLSetup.GET;
                                                                    IF GLSetup."Norwegian Localization Active" THEN
                                                                      IF NOT RecalculatePrice THEN
                                                                        ERROR('');
                                                                    //<<NAVNO
                                                                    SalesLine.SetSalesHeader(Rec);
                                                                    //>>NAVDK
                                                                    GLSetup.GET;
                                                                    IF GLSetup."Danish localization active" THEN
                                                                      IF RecalculatePrice AND "Prices Including VAT" THEN
                                                                        SalesLine.MODIFYALL(Amount,0,TRUE);
                                                                    //<<NAVDK

                                                                    IF RecalculatePrice AND "Prices Including VAT" THEN
                                                                      SalesLine.MODIFYALL(Amount,0,TRUE);

                                                                    IF "Currency Code" = '' THEN
                                                                      Currency.InitRoundingPrecision
                                                                    ELSE
                                                                      Currency.GET("Currency Code");
                                                                    SalesLine.LOCKTABLE;
                                                                    LOCKTABLE;
                                                                    SalesLine.FINDSET;
                                                                    REPEAT
                                                                      SalesLine.TESTFIELD("Quantity Invoiced",0);
                                                                      SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      IF NOT RecalculatePrice THEN BEGIN
                                                                        SalesLine."VAT Difference" := 0;
                                                                        SalesLine.UpdateAmounts;
                                                                      END ELSE
                                                                        IF "Prices Including VAT" THEN BEGIN
                                                                          SalesLine."Unit Price" :=
                                                                            ROUND(
                                                                              SalesLine."Unit Price" * (1 + (SalesLine."VAT %" / 100)),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          IF SalesLine.Quantity <> 0 THEN BEGIN
                                                                            SalesLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                SalesLine.Quantity * SalesLine."Unit Price" * SalesLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            SalesLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                SalesLine."Inv. Discount Amount" * (1 + (SalesLine."VAT %" / 100)),
                                                                                Currency."Amount Rounding Precision"));
                                                                          END;
                                                                        END ELSE BEGIN
                                                                          SalesLine."Unit Price" :=
                                                                            ROUND(
                                                                              SalesLine."Unit Price" / (1 + (SalesLine."VAT %" / 100)),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          IF SalesLine.Quantity <> 0 THEN BEGIN
                                                                            SalesLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                SalesLine.Quantity * SalesLine."Unit Price" * SalesLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            SalesLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                SalesLine."Inv. Discount Amount" / (1 + (SalesLine."VAT %" / 100)),
                                                                                Currency."Amount Rounding Precision"));
                                                                          END;
                                                                        END;
                                                                      SalesLine.MODIFY;
                                                                    UNTIL SalesLine.NEXT = 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Prices Including VAT }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Invoice Disc. Code"));
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 19=R;
                                                   CaptionML=ENU=Invoice Disc. Code }
    { 40  ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Customer Disc. Group"));
                                                              END;

                                                   CaptionML=ENU=Customer Disc. Group }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   OnValidate=BEGIN
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Language Code"));
                                                              END;

                                                   CaptionML=ENU=Language Code }
    { 43  ;   ;Salesperson Code    ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=VAR
                                                                ApprovalEntry@1001 : Record 454;
                                                                SaveDim1@1100525000 : Code[20];
                                                              BEGIN
                                                                ApprovalEntry.SETRANGE("Table ID",DATABASE::"Sales Header");
                                                                ApprovalEntry.SETRANGE("Document Type","Document Type");
                                                                ApprovalEntry.SETRANGE("Document No.","No.");
                                                                ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
                                                                IF NOT ApprovalEntry.ISEMPTY THEN
                                                                  ERROR(Text053,FIELDCAPTION("Salesperson Code"));

                                                                //**4PS.sn
                                                                IF (NOT DimMgt.HasDefaultDim(DATABASE::"Salesperson/Purchaser","Salesperson Code")) AND
                                                                   (NOT DimMgt.HasDefaultDim(DATABASE::"Salesperson/Purchaser",xRec."Salesperson Code"))
                                                                THEN
                                                                  EXIT;

                                                                SaveDim1 := "Shortcut Dimension 1 Code";
                                                                //**4PS.en

                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::Job,"Job No.", //**4PS.n
                                                                  DATABASE::"Service Order","Service Order No.", //**4PS.n 09-06-2010
                                                                  DATABASE::"Service-Contract","Service Contract No.", //**4PS.n 09-06-2010
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");
                                                                  //DATABASE::Location,"Location Code");  //**4PS.n  //*C007227.o

                                                                VALIDATE("Shortcut Dimension 1 Code", SaveDim1);   //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Salesperson Code }
    { 45  ;   ;Order Class         ;Code10        ;CaptionML=ENU=Order Class }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Comment Line" WHERE (Document Type=FIELD(Document Type),
                                                                                                 No.=FIELD(No.),
                                                                                                 Document Line No.=CONST(0)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=ENU=No. Printed;
                                                   Editable=No }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=ENU=On Hold }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=ENU=Applies-to Doc. Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnValidate=BEGIN
                                                                //18910 IF "Applies-to Doc. No." <> '' THEN  //**4PS.n
                                                                //        TESTFIELD("Installment Invoice", FALSE);  //**4PS.n

                                                                IF "Applies-to Doc. No." <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');

                                                                IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." <> '') AND
                                                                   ("Applies-to Doc. No." <> '')
                                                                THEN BEGIN
                                                                  SetAmountToApply("Applies-to Doc. No.","Bill-to Customer No.");
                                                                  SetAmountToApply(xRec."Applies-to Doc. No.","Bill-to Customer No.");
                                                                END ELSE
                                                                  IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." = '') THEN
                                                                    SetAmountToApply("Applies-to Doc. No.","Bill-to Customer No.")
                                                                  ELSE
                                                                    IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND ("Applies-to Doc. No." = '') THEN
                                                                      SetAmountToApply(xRec."Applies-to Doc. No.","Bill-to Customer No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //18910 IF "Installment Invoice" THEN EXIT;  //**4PS.n

                                                              TESTFIELD("Bal. Account No.",'');
                                                              CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive,"Due Date");
                                                              CustLedgEntry.SETRANGE("Customer No.","Bill-to Customer No.");
                                                              CustLedgEntry.SETRANGE(Open,TRUE);
                                                              IF "Applies-to Doc. No." <> '' THEN BEGIN
                                                                CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                IF CustLedgEntry.FINDFIRST THEN;
                                                                CustLedgEntry.SETRANGE("Document Type");
                                                                CustLedgEntry.SETRANGE("Document No.");
                                                              END ELSE
                                                                IF "Applies-to Doc. Type" <> 0 THEN BEGIN
                                                                  CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                  IF CustLedgEntry.FINDFIRST THEN;
                                                                  CustLedgEntry.SETRANGE("Document Type");
                                                                END ELSE
                                                                  IF Amount <> 0 THEN BEGIN
                                                                    CustLedgEntry.SETRANGE(Positive,Amount < 0);
                                                                    IF CustLedgEntry.FINDFIRST THEN;
                                                                    CustLedgEntry.SETRANGE(Positive);
                                                                  END;

                                                              ApplyCustEntries.SetSales(Rec,CustLedgEntry,SalesHeader.FIELDNO("Applies-to Doc. No."));
                                                              ApplyCustEntries.SETTABLEVIEW(CustLedgEntry);
                                                              ApplyCustEntries.SETRECORD(CustLedgEntry);
                                                              ApplyCustEntries.LOOKUPMODE(TRUE);
                                                              IF ApplyCustEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                ApplyCustEntries.GetCustLedgEntry(CustLedgEntry);
                                                                GenJnlApply.CheckAgainstApplnCurrency(
                                                                  "Currency Code",CustLedgEntry."Currency Code",GenJnILine."Account Type"::Customer,TRUE);
                                                                "Applies-to Doc. Type" := CustLedgEntry."Document Type";
                                                                "Applies-to Doc. No." := CustLedgEntry."Document No.";
                                                              END;
                                                              CLEAR(ApplyCustEntries);
                                                            END;

                                                   CaptionML=ENU=Applies-to Doc. No. }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account No." <> '' THEN
                                                                  CASE "Bal. Account Type" OF
                                                                    "Bal. Account Type"::"G/L Account":
                                                                      BEGIN
                                                                        GLAcc.GET("Bal. Account No.");
                                                                        GLAcc.CheckGLAcc;
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      END;
                                                                    "Bal. Account Type"::"Bank Account":
                                                                      BEGIN
                                                                        BankAcc.GET("Bal. Account No.");
                                                                        BankAcc.TESTFIELD(Blocked,FALSE);
                                                                        BankAcc.TESTFIELD("Currency Code","Currency Code");
                                                                      END;
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Bal. Account No. }
    { 56  ;   ;Recalculate Invoice Disc.;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Document No.=FIELD(No.),
                                                                                         Recalculate Invoice Disc.=CONST(Yes)));
                                                   CaptionML=ENU=Recalculate Invoice Disc.;
                                                   Editable=No }
    { 57  ;   ;Ship                ;Boolean       ;CaptionML=ENU=Ship;
                                                   Editable=No }
    { 58  ;   ;Invoice             ;Boolean       ;CaptionML=ENU=Invoice }
    { 59  ;   ;Print Posted Documents;Boolean     ;CaptionML=ENU=Print Posted Documents }
    { 60  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line".Amount WHERE (Document Type=FIELD(Document Type),
                                                                                              Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Amount Including VAT" WHERE (Document Type=FIELD(Document Type),
                                                                                                              Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Amount Including VAT;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 62  ;   ;Shipping No.        ;Code20        ;CaptionML=ENU=Shipping No. }
    { 63  ;   ;Posting No.         ;Code20        ;CaptionML=ENU=Posting No. }
    { 64  ;   ;Last Shipping No.   ;Code20        ;TableRelation="Sales Shipment Header";
                                                   CaptionML=ENU=Last Shipping No.;
                                                   Editable=No }
    { 65  ;   ;Last Posting No.    ;Code20        ;TableRelation="Sales Invoice Header";
                                                   CaptionML=ENU=Last Posting No.;
                                                   Editable=No }
    { 66  ;   ;Prepayment No.      ;Code20        ;CaptionML=ENU=Prepayment No. }
    { 67  ;   ;Last Prepayment No. ;Code20        ;TableRelation="Sales Invoice Header";
                                                   CaptionML=ENU=Last Prepayment No. }
    { 68  ;   ;Prepmt. Cr. Memo No.;Code20        ;CaptionML=ENU=Prepmt. Cr. Memo No. }
    { 69  ;   ;Last Prepmt. Cr. Memo No.;Code20   ;TableRelation="Sales Cr.Memo Header";
                                                   CaptionML=ENU=Last Prepmt. Cr. Memo No. }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=ENU=VAT Registration No. }
    { 71  ;   ;Combine Shipments   ;Boolean       ;CaptionML=ENU=Combine Shipments }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN BEGIN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    "VAT Bus. Posting Group" := GenBusPostingGrp."Def. VAT Bus. Posting Group";
                                                                  RecreateSalesLines(FIELDCAPTION("Gen. Bus. Posting Group"));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 75  ;   ;EU 3-Party Trade    ;Boolean       ;CaptionML=ENU=EU 3-Party Trade }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Transaction Type"),FALSE);
                                                              END;

                                                   CaptionML=ENU=Transaction Type }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Transport Method"),FALSE);
                                                              END;

                                                   CaptionML=ENU=Transport Method }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=ENU=VAT Country/Region Code }
    { 79  ;   ;Sell-to Customer Name;Text50       ;CaptionML=ENU=Sell-to Customer Name }
    { 80  ;   ;Sell-to Customer Name 2;Text50     ;CaptionML=ENU=Sell-to Customer Name 2 }
    { 81  ;   ;Sell-to Address     ;Text50        ;CaptionML=ENU=Sell-to Address }
    { 82  ;   ;Sell-to Address 2   ;Text50        ;CaptionML=ENU=Sell-to Address 2 }
    { 83  ;   ;Sell-to City        ;Text30        ;TableRelation=IF (Sell-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Sell-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Sell-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Sell-to City }
    { 84  ;   ;Sell-to Contact     ;Text50        ;CaptionML=ENU=Sell-to Contact }
    { 85  ;   ;Bill-to Post Code   ;Code20        ;TableRelation=IF (Bill-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Bill-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Bill-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Bill-to Post Code }
    { 86  ;   ;Bill-to County      ;Text30        ;CaptionML=ENU=Bill-to County }
    { 87  ;   ;Bill-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Bill-to Country/Region Code }
    { 88  ;   ;Sell-to Post Code   ;Code20        ;TableRelation=IF (Sell-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Sell-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Sell-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Sell-to Post Code }
    { 89  ;   ;Sell-to County      ;Text30        ;CaptionML=ENU=Sell-to County }
    { 90  ;   ;Sell-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                VALIDATE("Ship-to Country/Region Code");
                                                              END;

                                                   CaptionML=ENU=Sell-to Country/Region Code }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Ship-to Post Code }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=ENU=Ship-to County }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                UpdateCountryOfDestination; //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Ship-to Country/Region Code }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=ENU=Bal. Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Bank Account;
                                                   OptionString=G/L Account,Bank Account }
    { 97  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Exit Point"),FALSE);
                                                              END;

                                                   CaptionML=ENU=Exit Point }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=ENU=Correction }
    { 99  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                IF xRec."Document Date" <> "Document Date" THEN
                                                                  UpdateDocumentDate := TRUE;
                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                                //**4PS.sn
                                                                VALIDATE("Credit Restriction");
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Document Date }
    { 100 ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No. }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION(Area),FALSE);
                                                              END;

                                                   CaptionML=ENU=Area }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Transaction Specification"),FALSE);
                                                              END;

                                                   CaptionML=ENU=Transaction Specification }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=VAR
                                                                SEPADirectDebitMandate@1000 : Record 1230;
                                                                DOPaymentTransLogEntry@1001 : Record 829;
                                                              BEGIN
                                                                IF DOPaymentTransLogEntry.FINDFIRST THEN
                                                                  DOPaymentTransLogMgt.ValidateHasNoValidTransactions("Document Type",FORMAT("Document Type"),"No.");
                                                                IF DOPaymentMgt.IsValidPaymentMethod(xRec."Payment Method Code") AND NOT DOPaymentMgt.IsValidPaymentMethod("Payment Method Code")
                                                                THEN
                                                                  TESTFIELD("Credit Card No.",'');
                                                                PaymentMethod.INIT;
                                                                IF "Payment Method Code" <> '' THEN
                                                                  PaymentMethod.GET("Payment Method Code");
                                                                IF PaymentMethod."Direct Debit" THEN BEGIN
                                                                  "Direct Debit Mandate ID" := SEPADirectDebitMandate.GetDefaultMandate("Bill-to Customer No.","Due Date");
                                                                  IF "Payment Terms Code" = '' THEN
                                                                    "Payment Terms Code" := PaymentMethod."Direct Debit Pmt. Terms Code";
                                                                END;
                                                                "Bal. Account Type" := PaymentMethod."Bal. Account Type";
                                                                "Bal. Account No." := PaymentMethod."Bal. Account No.";
                                                                IF "Bal. Account No." <> '' THEN BEGIN
                                                                  TESTFIELD("Applies-to Doc. No.",'');
                                                                  TESTFIELD("Applies-to ID",'');
                                                                END;
                                                                "Payment Channel" := PaymentMethod."Payment Channel";  //NAVDK
                                                              END;

                                                   CaptionML=ENU=Payment Method Code }
    { 105 ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF xRec."Shipping Agent Code" = "Shipping Agent Code" THEN
                                                                  EXIT;

                                                                "Shipping Agent Service Code" := '';
                                                                GetShippingTime(FIELDNO("Shipping Agent Code"));
                                                                UpdateSalesLines(FIELDCAPTION("Shipping Agent Code"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=ENU=Shipping Agent Code }
    { 106 ;   ;Package Tracking No.;Text30        ;CaptionML=ENU=Package Tracking No. }
    { 107 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 108 ;   ;Posting No. Series  ;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Posting No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  TestNoSeries;
                                                                  NoSeriesMgt.TestSeries(GetPostingNoSeriesCode,"Posting No. Series");
                                                                END;
                                                                TESTFIELD("Posting No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                TestNoSeries;
                                                                IF NoSeriesMgt.LookupSeries(GetPostingNoSeriesCode,"Posting No. Series") THEN
                                                                  VALIDATE("Posting No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Posting No. Series }
    { 109 ;   ;Shipping No. Series ;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Shipping No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Shipment Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Posted Shipment Nos.","Shipping No. Series");
                                                                END;
                                                                TESTFIELD("Shipping No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Shipment Nos.");
                                                                IF NoSeriesMgt.LookupSeries(SalesSetup."Posted Shipment Nos.","Shipping No. Series") THEN
                                                                  VALIDATE("Shipping No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Shipping No. Series }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Tax Area Code"));
                                                              END;

                                                   CaptionML=ENU=Tax Area Code }
    { 115 ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Tax Liable"));
                                                              END;

                                                   CaptionML=ENU=Tax Liable }
    { 116 ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group" THEN
                                                                  RecreateSalesLines(FIELDCAPTION("VAT Bus. Posting Group"));
                                                              END;

                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 117 ;   ;Reserve             ;Option        ;InitValue=Optional;
                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=ENU=Reserve;
                                                   OptionCaptionML=ENU=Never,Optional,Always;
                                                   OptionString=Never,Optional,Always }
    { 118 ;   ;Applies-to ID       ;Code50        ;OnValidate=VAR
                                                                TempCustLedgEntry@1000 : Record 21;
                                                              BEGIN
                                                                IF "Applies-to ID" <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');
                                                                IF ("Applies-to ID" <> xRec."Applies-to ID") AND (xRec."Applies-to ID" <> '') THEN BEGIN
                                                                  CustLedgEntry.SETCURRENTKEY("Customer No.",Open);
                                                                  CustLedgEntry.SETRANGE("Customer No.","Bill-to Customer No.");
                                                                  CustLedgEntry.SETRANGE(Open,TRUE);
                                                                  CustLedgEntry.SETRANGE("Applies-to ID",xRec."Applies-to ID");
                                                                  IF CustLedgEntry.FINDFIRST THEN
                                                                    CustEntrySetApplID.SetApplId(CustLedgEntry,TempCustLedgEntry,'');
                                                                  CustLedgEntry.RESET;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Applies-to ID }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "VAT Base Discount %" > GLSetup."VAT Tolerance %" THEN
                                                                  ERROR(
                                                                    Text007,
                                                                    FIELDCAPTION("VAT Base Discount %"),
                                                                    GLSetup.FIELDCAPTION("VAT Tolerance %"),
                                                                    GLSetup.TABLECAPTION);

                                                                IF ("VAT Base Discount %" = xRec."VAT Base Discount %") AND
                                                                   (CurrFieldNo <> 0)
                                                                THEN
                                                                  EXIT;

                                                                SalesLine.SETRANGE("Document Type","Document Type");
                                                                SalesLine.SETRANGE("Document No.","No.");
                                                                SalesLine.SETFILTER(Type,'<>%1',SalesLine.Type::" ");
                                                                SalesLine.SETFILTER(Quantity,'<>0');
                                                                SalesLine.LOCKTABLE;
                                                                LOCKTABLE;
                                                                IF SalesLine.FINDSET THEN BEGIN
                                                                  //MODIFY; //**4PS.o
                                                                  MODIFY(TRUE); //**4PS.n
                                                                  REPEAT
                                                                    IF (SalesLine."Quantity Invoiced" <> SalesLine.Quantity) OR
                                                                       ("Shipping Advice" <> "Shipping Advice"::Partial) OR
                                                                       (SalesLine.Type <> SalesLine.Type::"Charge (Item)") OR
                                                                       (CurrFieldNo <> 0)
                                                                    THEN BEGIN
                                                                      SalesLine.UpdateAmounts;
                                                                      SalesLine.MODIFY;
                                                                    END;
                                                                  UNTIL SalesLine.NEXT = 0;
                                                                END;
                                                                SalesLine.RESET;
                                                              END;

                                                   CaptionML=ENU=VAT Base Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 120 ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Open,Released,,,,,,,Closed;
                                                   OptionString=Open,Released,Pending Approval,Pending Prepayment,,,,,Closed;
                                                   Editable=No }
    { 121 ;   ;Invoice Discount Calculation;Option;CaptionML=ENU=Invoice Discount Calculation;
                                                   OptionCaptionML=ENU=None,%,Amount;
                                                   OptionString=None,%,Amount;
                                                   Editable=No }
    { 122 ;   ;Invoice Discount Value;Decimal     ;CaptionML=ENU=Invoice Discount Value;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 123 ;   ;Send IC Document    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Send IC Document" THEN BEGIN
                                                                  IF "Bill-to IC Partner Code" = '' THEN
                                                                    TESTFIELD("Sell-to IC Partner Code");
                                                                  TESTFIELD("IC Direction","IC Direction"::Outgoing);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Send IC Document }
    { 124 ;   ;IC Status           ;Option        ;CaptionML=ENU=IC Status;
                                                   OptionCaptionML=ENU=New,Pending,Sent;
                                                   OptionString=New,Pending,Sent }
    { 125 ;   ;Sell-to IC Partner Code;Code20     ;TableRelation="IC Partner";
                                                   CaptionML=ENU=Sell-to IC Partner Code;
                                                   Editable=No }
    { 126 ;   ;Bill-to IC Partner Code;Code20     ;TableRelation="IC Partner";
                                                   CaptionML=ENU=Bill-to IC Partner Code;
                                                   Editable=No }
    { 129 ;   ;IC Direction        ;Option        ;OnValidate=BEGIN
                                                                IF "IC Direction" = "IC Direction"::Incoming THEN
                                                                  "Send IC Document" := FALSE;
                                                              END;

                                                   CaptionML=ENU=IC Direction;
                                                   OptionCaptionML=ENU=Outgoing,Incoming;
                                                   OptionString=Outgoing,Incoming }
    { 130 ;   ;Prepayment %        ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."Prepayment %" <> "Prepayment %" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Prepayment %"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Prepayment %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 131 ;   ;Prepayment No. Series;Code10       ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepayment No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                  NoSeriesMgt.TestSeries(GetPostingPrepaymentNoSeriesCode,"Prepayment No. Series");
                                                                END;
                                                                TESTFIELD("Prepayment No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                IF NoSeriesMgt.LookupSeries(GetPostingPrepaymentNoSeriesCode,"Prepayment No. Series") THEN
                                                                  VALIDATE("Prepayment No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Prepayment No. Series }
    { 132 ;   ;Compress Prepayment ;Boolean       ;InitValue=Yes;
                                                   CaptionML=ENU=Compress Prepayment }
    { 133 ;   ;Prepayment Due Date ;Date          ;CaptionML=ENU=Prepayment Due Date }
    { 134 ;   ;Prepmt. Cr. Memo No. Series;Code10 ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                  NoSeriesMgt.TestSeries(GetPostingPrepaymentNoSeriesCode,"Prepmt. Cr. Memo No. Series");
                                                                END;
                                                                TESTFIELD("Prepmt. Cr. Memo No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                IF NoSeriesMgt.LookupSeries(GetPostingPrepaymentNoSeriesCode,"Prepmt. Cr. Memo No. Series") THEN
                                                                  VALIDATE("Prepmt. Cr. Memo No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Prepmt. Cr. Memo No. Series }
    { 135 ;   ;Prepmt. Posting Description;Text50 ;CaptionML=ENU=Prepmt. Posting Description }
    { 138 ;   ;Prepmt. Pmt. Discount Date;Date    ;CaptionML=ENU=Prepmt. Pmt. Discount Date }
    { 139 ;   ;Prepmt. Payment Terms Code;Code10  ;TableRelation="Payment Terms";
                                                   OnValidate=VAR
                                                                PaymentTerms@1000 : Record 3;
                                                              BEGIN
                                                                IF ("Prepmt. Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Prepmt. Payment Terms Code");
                                                                  IF (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                                                                      NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos")
                                                                  THEN BEGIN
                                                                    VALIDATE("Prepayment Due Date","Document Date");
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    "Prepmt. Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                      VALIDATE("Prepmt. Payment Discount %",PaymentTerms."Discount %")
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Prepayment Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Prepmt. Payment Terms Code }
    { 140 ;   ;Prepmt. Payment Discount %;Decimal ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=ENU=Prepmt. Payment Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 151 ;   ;Quote No.           ;Code20        ;CaptionML=ENU=Quote No.;
                                                   Editable=No }
    { 160 ;   ;Job Queue Status    ;Option        ;OnLookup=VAR
                                                              JobQueueEntry@1000 : Record 472;
                                                            BEGIN
                                                              IF "Job Queue Status" = "Job Queue Status"::" " THEN
                                                                EXIT;
                                                              JobQueueEntry.ShowStatusMsg("Job Queue Entry ID");
                                                            END;

                                                   CaptionML=ENU=Job Queue Status;
                                                   OptionCaptionML=ENU=" ,Scheduled for Posting,Error,Posting";
                                                   OptionString=[ ,Scheduled for Posting,Error,Posting];
                                                   Editable=No }
    { 161 ;   ;Job Queue Entry ID  ;GUID          ;CaptionML=ENU=Job Queue Entry ID;
                                                   Editable=No }
    { 165 ;   ;Incoming Document Entry No.;Integer;TableRelation="Incoming Document";
                                                   OnValidate=VAR
                                                                IncomingDocument@1000 : Record 130;
                                                              BEGIN
                                                                IF "Incoming Document Entry No." = xRec."Incoming Document Entry No." THEN
                                                                  EXIT;
                                                                IF "Incoming Document Entry No." = 0 THEN
                                                                  IncomingDocument.RemoveReferenceToWorkingDocument(xRec."Incoming Document Entry No.")
                                                                ELSE
                                                                  IncomingDocument.SetSalesDoc(Rec);
                                                              END;

                                                   CaptionML=ENU=Incoming Document Entry No. }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=No }
    { 825 ;   ;Authorization Required;Boolean     ;CaptionML=ENU=Authorization Required }
    { 827 ;   ;Credit Card No.     ;Code20        ;TableRelation="DO Payment Credit Card" WHERE (Customer No.=FIELD(Bill-to Customer No.));
                                                   OnValidate=VAR
                                                                DOPaymentTransLogEntry@1000 : Record 829;
                                                              BEGIN
                                                                IF NOT DOPaymentTransLogEntry.ISEMPTY THEN
                                                                  DOPaymentTransLogMgt.ValidateHasNoValidTransactions("Document Type",FORMAT("Document Type"),"No.");

                                                                IF "Credit Card No." = '' THEN
                                                                  EXIT;

                                                                DOPaymentMgt.CheckCreditCardData("Credit Card No.");

                                                                IF NOT DOPaymentMgt.IsValidPaymentMethod("Payment Method Code") THEN
                                                                  FIELDERROR("Payment Method Code");
                                                              END;

                                                   CaptionML=ENU=Credit Card No. }
    { 1200;   ;Direct Debit Mandate ID;Code35     ;TableRelation="SEPA Direct Debit Mandate" WHERE (Customer No.=FIELD(Bill-to Customer No.),
                                                                                                    Closed=CONST(No),
                                                                                                    Blocked=CONST(No));
                                                   CaptionML=ENU=Direct Debit Mandate ID }
    { 1305;   ;Invoice Discount Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Inv. Discount Amount" WHERE (Document No.=FIELD(No.),
                                                                                                              Document Type=FIELD(Document Type)));
                                                   CaptionML=ENU=Invoice Discount Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5043;   ;No. of Archived Versions;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Max("Sales Header Archive"."Version No." WHERE (Document Type=FIELD(Document Type),
                                                                                                               No.=FIELD(No.),
                                                                                                               Doc. No. Occurrence=FIELD(Doc. No. Occurrence)));
                                                   CaptionML=ENU=No. of Archived Versions;
                                                   Editable=No }
    { 5048;   ;Doc. No. Occurrence ;Integer       ;CaptionML=ENU=Doc. No. Occurrence }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF (NOT DimMgt.HasDefaultDim(DATABASE::Campaign,"Campaign No.")) AND
                                                                   (NOT DimMgt.HasDefaultDim(DATABASE::Campaign,xRec."Campaign No."))
                                                                THEN
                                                                  EXIT;
                                                                //**4PS.en

                                                                CreateDim(
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::Job,"Job No.", //**4PS.n
                                                                  DATABASE::"Service Order","Service Order No.", //**4PS.n 09-06-2010
                                                                  DATABASE::"Service-Contract","Service Contract No.", //**4PS.n 09-06-2010
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");
                                                                  //DATABASE::Location,"Location Code");  //**4PS.n  //*C007227.o
                                                              END;

                                                   CaptionML=ENU=Campaign No. }
    { 5051;   ;Sell-to Customer Template Code;Code10;
                                                   TableRelation="Customer Template";
                                                   OnValidate=VAR
                                                                SellToCustTemplate@1000 : Record 5105;
                                                              BEGIN
                                                                TESTFIELD("Document Type","Document Type"::Quote);
                                                                TESTFIELD(Status,Status::Open);

                                                                IF NOT InsertMode AND
                                                                   ("Sell-to Customer Template Code" <> xRec."Sell-to Customer Template Code") AND
                                                                   (xRec."Sell-to Customer Template Code" <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Sell-to Customer Template Code"));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.RESET;
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF "Sell-to Customer Template Code" = '' THEN BEGIN
                                                                      IF NOT SalesLine.ISEMPTY THEN
                                                                        ERROR(Text005,FIELDCAPTION("Sell-to Customer Template Code"));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      InitNoSeries;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    "Sell-to Customer Template Code" := xRec."Sell-to Customer Template Code";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF SellToCustTemplate.GET("Sell-to Customer Template Code") THEN BEGIN
                                                                  SellToCustTemplate.TESTFIELD("Gen. Bus. Posting Group");
                                                                  "Gen. Bus. Posting Group" := SellToCustTemplate."Gen. Bus. Posting Group";
                                                                  "VAT Bus. Posting Group" := SellToCustTemplate."VAT Bus. Posting Group";
                                                                  IF "Bill-to Customer No." = '' THEN
                                                                    VALIDATE("Bill-to Customer Template Code","Sell-to Customer Template Code");
                                                                END;

                                                                IF NOT InsertMode AND
                                                                   ((xRec."Sell-to Customer Template Code" <> "Sell-to Customer Template Code") OR
                                                                    (xRec."Currency Code" <> "Currency Code"))
                                                                THEN
                                                                  RecreateSalesLines(FIELDCAPTION("Sell-to Customer Template Code"));
                                                              END;

                                                   CaptionML=ENU=Sell-to Customer Template Code }
    { 5052;   ;Sell-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                                Opportunity@1000 : Record 5092;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF ("Sell-to Contact No." <> xRec."Sell-to Contact No.") AND
                                                                   (xRec."Sell-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF ("Sell-to Contact No." = '') AND ("Opportunity No." <> '') THEN
                                                                    ERROR(Text049,FIELDCAPTION("Sell-to Contact No."));
                                                                  IF HideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Sell-to Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.RESET;
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF ("Sell-to Contact No." = '') AND ("Sell-to Customer No." = '') THEN BEGIN
                                                                      IF NOT SalesLine.ISEMPTY THEN
                                                                        ERROR(Text005,FIELDCAPTION("Sell-to Contact No."));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      InitNoSeries;
                                                                      EXIT;
                                                                    END;
                                                                    IF "Opportunity No." <> '' THEN BEGIN
                                                                      Opportunity.GET("Opportunity No.");
                                                                      IF Opportunity."Contact No." <> "Sell-to Contact No." THEN BEGIN
                                                                        MODIFY;
                                                                        Opportunity.VALIDATE("Contact No.","Sell-to Contact No.");
                                                                        Opportunity.MODIFY;
                                                                      END
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Sell-to Customer No." <> '') AND ("Sell-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Sell-to Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Sell-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Sell-to Customer No.");
                                                                END;

                                                                IF "Sell-to Contact No." <> '' THEN
                                                                  IF Cont.GET("Sell-to Contact No.") THEN
                                                                    IF ("Salesperson Code" = '') AND (Cont."Salesperson Code" <> '') THEN
                                                                      VALIDATE("Salesperson Code",Cont."Salesperson Code");

                                                                UpdateSellToCust("Sell-to Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusinessRelation@1000 : Record 5054;
                                                            BEGIN
                                                              IF "Sell-to Customer No." <> '' THEN
                                                                IF Cont.GET("Sell-to Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Sell-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');
                                                                END;

                                                              IF "Sell-to Contact No." <> '' THEN
                                                                IF Cont.GET("Sell-to Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Sell-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Sell-to Contact No. }
    { 5053;   ;Bill-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF ("Bill-to Contact No." <> xRec."Bill-to Contact No.") AND
                                                                   (xRec."Bill-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Bill-to Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.RESET;
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF ("Bill-to Contact No." = '') AND ("Bill-to Customer No." = '') THEN BEGIN
                                                                      IF NOT SalesLine.ISEMPTY THEN
                                                                        ERROR(Text005,FIELDCAPTION("Bill-to Contact No."));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      InitNoSeries;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    "Bill-to Contact No." := xRec."Bill-to Contact No.";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Bill-to Customer No." <> '') AND ("Bill-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Bill-to Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Bill-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Bill-to Customer No.");
                                                                END;

                                                                UpdateBillToCust("Bill-to Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusinessRelation@1000 : Record 5054;
                                                            BEGIN
                                                              IF "Bill-to Customer No." <> '' THEN
                                                                IF Cont.GET("Bill-to Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Bill-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');
                                                                END;

                                                              IF "Bill-to Contact No." <> '' THEN
                                                                IF Cont.GET("Bill-to Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Bill-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Bill-to Contact No. }
    { 5054;   ;Bill-to Customer Template Code;Code10;
                                                   TableRelation="Customer Template";
                                                   OnValidate=VAR
                                                                BillToCustTemplate@1001 : Record 5105;
                                                              BEGIN
                                                                TESTFIELD("Document Type","Document Type"::Quote);
                                                                TESTFIELD(Status,Status::Open);

                                                                IF NOT InsertMode AND
                                                                   ("Bill-to Customer Template Code" <> xRec."Bill-to Customer Template Code") AND
                                                                   (xRec."Bill-to Customer Template Code" <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Bill-to Customer Template Code"));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.RESET;
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF "Bill-to Customer Template Code" = '' THEN BEGIN
                                                                      IF NOT SalesLine.ISEMPTY THEN
                                                                        ERROR(Text005,FIELDCAPTION("Bill-to Customer Template Code"));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      InitNoSeries;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    "Bill-to Customer Template Code" := xRec."Bill-to Customer Template Code";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                VALIDATE("Ship-to Code",'');
                                                                IF BillToCustTemplate.GET("Bill-to Customer Template Code") THEN BEGIN
                                                                  BillToCustTemplate.TESTFIELD("Customer Posting Group");
                                                                  "Customer Posting Group" := BillToCustTemplate."Customer Posting Group";
                                                                  "Invoice Disc. Code" := BillToCustTemplate."Invoice Disc. Code";
                                                                  "Customer Price Group" := BillToCustTemplate."Customer Price Group";
                                                                  "Customer Disc. Group" := BillToCustTemplate."Customer Disc. Group";
                                                                  "Allow Line Disc." := BillToCustTemplate."Allow Line Disc.";
                                                                  VALIDATE("Payment Terms Code",BillToCustTemplate."Payment Terms Code");
                                                                  VALIDATE("Payment Method Code",BillToCustTemplate."Payment Method Code");
                                                                  "Shipment Method Code" := BillToCustTemplate."Shipment Method Code";
                                                                END;

                                                                CreateDim(
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::Job,"Job No.", //**4PS.n
                                                                  DATABASE::"Service Order","Service Order No.", //**4PS.n 09-06-2010
                                                                  DATABASE::"Service-Contract","Service Contract No.", //**4PS.n 09-06-2010
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                                  //DATABASE::Location,"Location Code");  //**4PS.n  //*C007227.o

                                                                IF NOT InsertMode AND
                                                                  (xRec."Sell-to Customer Template Code" = "Sell-to Customer Template Code") AND
                                                                  (xRec."Bill-to Customer Template Code" <> "Bill-to Customer Template Code")
                                                                THEN
                                                                  RecreateSalesLines(FIELDCAPTION("Bill-to Customer Template Code"));
                                                              END;

                                                   CaptionML=ENU=Bill-to Customer Template Code }
    { 5055;   ;Opportunity No.     ;Code20        ;TableRelation=IF (Document Type=FILTER(<>Order)) Opportunity.No. WHERE (Contact No.=FIELD(Sell-to Contact No.),
                                                                                                                           Closed=CONST(No))
                                                                                                                           ELSE IF (Document Type=CONST(Order)) Opportunity.No. WHERE (Contact No.=FIELD(Sell-to Contact No.),
                                                                                                                                                                                       Sales Document No.=FIELD(No.),
                                                                                                                                                                                       Sales Document Type=CONST(Order));
                                                   OnValidate=BEGIN
                                                                LinkSalesDocWithOpportunity(xRec."Opportunity No.");
                                                              END;

                                                   CaptionML=ENU=Opportunity No. }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF NOT UserSetupMgt.CheckRespCenter(0,"Responsibility Center") THEN
                                                                  ERROR(
                                                                    Text027,
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetSalesFilter);

                                                                "Location Code" := UserSetupMgt.GetLocation(0,'',"Responsibility Center");

                                                                //**4PS.sn
                                                                IF (xRec."Location Code" <> '') AND ("Location Code" = '') THEN
                                                                  "Location Code" := xRec."Location Code";  //db, 27-02-04: skip empty default
                                                                //**4PS.en

                                                                UpdateOutboundWhseHandlingTime;
                                                                UpdateShipToAddress;

                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::Job,"Job No.", //**4PS.n
                                                                  DATABASE::"Service Order","Service Order No.", //**4PS.n 09-06-2010
                                                                  DATABASE::"Service-Contract","Service Contract No.", //**4PS.n 09-06-2010
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");
                                                                  //DATABASE::Location,"Location Code");  //**4PS.n  //*C007227.o

                                                                IF xRec."Responsibility Center" <> "Responsibility Center" THEN BEGIN
                                                                //RecreateSalesLines(FIELDCAPTION("Responsibility Center"));        //**4PS.o
                                                                  MessageIfSalesLinesExist(FIELDCAPTION("Responsibility Center"));  //**4PS.n
                                                                  "Assigned User ID" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Responsibility Center }
    { 5750;   ;Shipping Advice     ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF InventoryPickConflict("Document Type","No.","Shipping Advice") THEN
                                                                  ERROR(Text066,FIELDCAPTION("Shipping Advice"),FORMAT("Shipping Advice"),TABLECAPTION);
                                                                IF WhseShpmntConflict("Document Type","No.","Shipping Advice") THEN
                                                                  ERROR(STRSUBSTNO(Text070,FIELDCAPTION("Shipping Advice"),FORMAT("Shipping Advice"),TABLECAPTION));
                                                                WhseSourceHeader.SalesHeaderVerifyChange(Rec,xRec);
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Shipping Advice;
                                                   OptionCaptionML=ENU=Partial,Complete;
                                                   OptionString=Partial,Complete }
    { 5751;   ;Shipped Not Invoiced;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Document No.=FIELD(No.),
                                                                                         Qty. Shipped Not Invoiced=FILTER(<>0)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Shipped Not Invoiced;
                                                   Editable=No }
    { 5752;   ;Completely Shipped  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Min("Sales Line"."Completely Shipped" WHERE (Document Type=FIELD(Document Type),
                                                                                                            Document No.=FIELD(No.),
                                                                                                            Type=FILTER(<>' '),
                                                                                                            Location Code=FIELD(Location Filter)));
                                                   CaptionML=ENU=Completely Shipped;
                                                   Editable=No }
    { 5753;   ;Posting from Whse. Ref.;Integer    ;AccessByPermission=TableData 14=R;
                                                   CaptionML=ENU=Posting from Whse. Ref. }
    { 5754;   ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   CaptionML=ENU=Location Filter }
    { 5755;   ;Shipped             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Document No.=FIELD(No.),
                                                                                         Qty. Shipped (Base)=FILTER(<>0)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Shipped;
                                                   Editable=No }
    { 5790;   ;Requested Delivery Date;Date       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Promised Delivery Date" <> 0D THEN
                                                                  ERROR(
                                                                    Text028,
                                                                    FIELDCAPTION("Requested Delivery Date"),
                                                                    FIELDCAPTION("Promised Delivery Date"));

                                                                IF "Requested Delivery Date" <> xRec."Requested Delivery Date" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Requested Delivery Date"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=ENU=Requested Delivery Date }
    { 5791;   ;Promised Delivery Date;Date        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Promised Delivery Date" <> xRec."Promised Delivery Date" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Promised Delivery Date"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=ENU=Promised Delivery Date }
    { 5792;   ;Shipping Time       ;DateFormula   ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Shipping Time" <> xRec."Shipping Time" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Shipping Time"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Shipping Time }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Outbound Whse. Handling Time" <> xRec."Outbound Whse. Handling Time") AND
                                                                   (xRec."Sell-to Customer No." = "Sell-to Customer No.")
                                                                THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Outbound Whse. Handling Time"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 7320=R;
                                                   CaptionML=ENU=Outbound Whse. Handling Time }
    { 5794;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                GetShippingTime(FIELDNO("Shipping Agent Service Code"));
                                                                UpdateSalesLines(FIELDCAPTION("Shipping Agent Service Code"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Shipping Agent Service Code }
    { 5795;   ;Late Order Shipping ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Sell-to Customer No.=FIELD(Sell-to Customer No.),
                                                                                         Document No.=FIELD(No.),
                                                                                         Shipment Date=FIELD(Date Filter),
                                                                                         Outstanding Quantity=FILTER(<>0)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Late Order Shipping;
                                                   Editable=No }
    { 5796;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 5800;   ;Receive             ;Boolean       ;CaptionML=ENU=Receive }
    { 5801;   ;Return Receipt No.  ;Code20        ;CaptionML=ENU=Return Receipt No. }
    { 5802;   ;Return Receipt No. Series;Code10   ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Return Receipt No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Return Receipt Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Posted Return Receipt Nos.","Return Receipt No. Series");
                                                                END;
                                                                TESTFIELD("Return Receipt No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Return Receipt Nos.");
                                                                IF NoSeriesMgt.LookupSeries(SalesSetup."Posted Return Receipt Nos.","Return Receipt No. Series") THEN
                                                                  VALIDATE("Return Receipt No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Return Receipt No. Series }
    { 5803;   ;Last Return Receipt No.;Code20     ;TableRelation="Return Receipt Header";
                                                   CaptionML=ENU=Last Return Receipt No.;
                                                   Editable=No }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Allow Line Disc."));
                                                              END;

                                                   CaptionML=ENU=Allow Line Disc. }
    { 7200;   ;Get Shipment Used   ;Boolean       ;CaptionML=ENU=Get Shipment Used;
                                                   Editable=No }
    { 9000;   ;Assigned User ID    ;Code50        ;TableRelation="User Setup";
                                                   OnValidate=BEGIN
                                                                IF NOT UserSetupMgt.CheckRespCenter2(0,"Responsibility Center","Assigned User ID") THEN
                                                                  ERROR(
                                                                    Text061,"Assigned User ID",
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetSalesFilter2("Assigned User ID"));
                                                              END;

                                                   CaptionML=ENU=Assigned User ID }
    { 11012000;;Project Invoice    ;Boolean       ;CaptionML=ENU=Project Invoice;
                                                   Editable=No }
    { 11012005;;Job No.            ;Code20        ;TableRelation=Job;
                                                   OnValidate=VAR
                                                                lvProjSetupRec@1210190000 : Record 315;
                                                                lvProjRec@1210190001 : Record 11072003;
                                                                lvProjPrinRec@1100485000 : Record 11012005;
                                                                lvPlantLocRec@1100485001 : Record 11012554;
                                                                lvBlockingCodeRec@1100485002 : Record 11012027;
                                                                lvCustRec@1210190002 : Record 18;
                                                                ROTInformation@1100285000 : Record 11128101;
                                                              BEGIN
                                                                //**4PS.sn
                                                                IF "Job No." <> '' THEN BEGIN
                                                                  lvProjRec.GET("Job No.");
                                                                  IF "Installment Invoice" = FALSE THEN
                                                                    IF NOT "Plant Invoice" AND
                                                                       NOT ("Project Invoice" AND lvProjRec."Small Project" AND lvProjRec."Plant Job Order") THEN BEGIN
                                                                      lvProjPrinRec.GET("Job No.", "Sell-to Customer No.");
                                                                    END;                                                                                         //** 4PS02.en

                                                                  IF ("Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"]) AND
                                                                     (NOT "Project Invoice") AND (NOT "Plant Invoice") AND (NOT "Service Invoice")
                                                                  THEN BEGIN
                                                                    lvProjSetupRec.GET;
                                                                    IF (lvProjRec."Blocking Code" <> '') AND
                                                                       (
                                                                        (lvProjRec."Project Status" = lvProjRec."Project Status"::"Technical Finished") OR
                                                                        (lvProjRec."Project Status" = lvProjRec."Project Status"::"Administrative Finished") OR
                                                                        ((lvProjRec."Project Status" = lvProjRec."Project Status"::Finished) AND lvProjSetupRec."Provisions at Closure")
                                                                        )
                                                                    THEN
                                                                      lvBlockingCodeRec.CheckBlocked(lvProjRec."Blocking Code", lvBlockingCodeRec.Switch::"Sales Invoice", lvProjRec, TRUE)
                                                                    ELSE
                                                                      IF (lvProjSetupRec."Provisions at Closure") THEN
                                                                        lvProjRec.CheckProjectStatus(-1)
                                                                      ELSE
                                                                        lvProjRec.CheckProjectStatus(1);
                                                                  END;
                                                                  TESTFIELD("Service Order No.", '');
                                                                END;
                                                                IF "Job No." <> xRec."Job No." THEN BEGIN
                                                                  FillDefaultSalesPerson();
                                                                  FillDefaultInvoiceLayoutCode();
                                                                  FillDefaultServiceWarrantyCode; //**4PS.n DP00121
                                                                END;
                                                                FillWKAPercentages;
                                                                //**4PS.en

                                                                // 25692.sn
                                                                IF ("Job No." <> '') THEN BEGIN
                                                                  IF lvProjPrinRec.GET("Job No.", "Sell-to Customer No.") THEN BEGIN
                                                                    IF lvProjPrinRec."Payment Terms Code" <> '' THEN BEGIN
                                                                      VALIDATE("Payment Terms Code", lvProjPrinRec."Payment Terms Code")
                                                                    END ELSE BEGIN
                                                                      IF lvCustRec.GET("Bill-to Customer No.") THEN BEGIN
                                                                        IF lvCustRec."Payment Terms Code" <> '' THEN
                                                                          VALIDATE("Payment Terms Code", lvCustRec."Payment Terms Code");
                                                                      END;
                                                                    END;
                                                                  END;
                                                                END;
                                                                IF ("Job No." = '') AND (xRec."Job No." <> '') THEN BEGIN
                                                                  IF lvCustRec.GET("Bill-to Customer No.") THEN BEGIN
                                                                    IF lvCustRec."Payment Terms Code" <> '' THEN
                                                                     VALIDATE("Payment Terms Code", lvCustRec."Payment Terms Code");
                                                                  END;
                                                                END;
                                                                // 25692.en

                                                                //** 4PS01.sn
                                                                IF lvProjPrinRec.GET("Job No.", "Sell-to Customer No.") THEN
                                                                  "Principal Reference" :=  lvProjPrinRec."Principal Reference";
                                                                //** 4PS01.en
                                                                //MessageIfSalesLinesExist(FIELDCAPTION("Job No."));  //**4PS.o
                                                                //**4PS01.sn
                                                                IF NOT SalesLogisticsSepaRentContract() THEN
                                                                  MessageIfSalesLinesExist(FIELDCAPTION("Job No."))
                                                                ELSE BEGIN
                                                                  TESTFIELD(Status,Status::Open);
                                                                  IF "Plant Location Code" <> '' THEN BEGIN
                                                                    lvPlantLocRec.CHANGECOMPANY(CompanyLogistics);
                                                                    lvPlantLocRec.GET("Plant Location Code");
                                                                    IF "Job No." <> lvPlantLocRec."Project No." THEN
                                                                      FIELDERROR("Job No.", STRSUBSTNO(Text11012002, lvPlantLocRec."Project No.", "Plant Location Code"));
                                                                  END;
                                                                END;
                                                                //**4PS01.en

                                                                // ****** 4PSSE.I012 130711 *** <<
                                                                // If Credit Memo or Invoice, trigger the ROT field if there is a ROT Information in the project (=Job)
                                                                IF ("Job No." <> '') THEN BEGIN
                                                                   IF ("Document Type" = SalesHeader."Document Type"::Invoice) OR
                                                                      ("Document Type" = SalesHeader."Document Type"::"Credit Memo") THEN BEGIN
                                                                      IF ("Document Type" = "Document Type"::Invoice) THEN BEGIN
                                                                      // Only create in RotInformation if Invoice, not Credit Memo
                                                                         ROTInformation.RESET();
                                                                         ROTInformation.SETRANGE(Type, ROTInformation.Type::Project);
                                                                         ROTInformation.SETRANGE("Document No.", "Job No.");
                                                                         IF (ROTInformation.FINDSET(TRUE)) THEN REPEAT
                                                                            ROTInformation.Type := ROTInformation.Type::Invoice;
                                                                            ROTInformation."Document No." := "No.";
                                                                            IF NOT ROTInformation.INSERT() THEN ROTInformation.MODIFY(); // If changing Job No. it may have been already created.
                                                                         UNTIL ROTInformation.NEXT = 0;
                                                                      END;
                                                                      ROT := TRUE;  // Sets the flag on Invoice and on Credit Memo
                                                                   END ELSE
                                                                      ROT := FALSE; // No ROT
                                                                END ELSE
                                                                   ROT := FALSE; // No ROT

                                                                // ****** 4PSSE.I012 130711 *** >>

                                                                CreateDim(
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Service Order","Service Order No.", //**4PS.n 09-06-2010
                                                                  DATABASE::"Service-Contract","Service Contract No.", //**4PS.n 09-06-2010
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");
                                                                  //DATABASE::Location,"Location Code");  //**4PS.n  //*C007227.o
                                                              END;

                                                   CaptionML=ENU=Project No. }
    { 11012010;;Installment Invoice;Boolean       ;CaptionML=ENU=Installment Invoice;
                                                   Editable=No }
    { 11012011;;Consumption Invoice;Boolean       ;CaptionML=ENU=Consumption Invoice }
    { 11012015;;Production Motivation Date;Date   ;TableRelation="Unit Price Production Mot."."Production Date" WHERE (Project No.=FIELD(Job No.));
                                                   CaptionML=ENU=Production Motivation Date;
                                                   Editable=No }
    { 11012016;;Production Motivation Code;Code10 ;CaptionML=ENU=Production Motivation Code;
                                                   Editable=No }
    { 11012020;;Invoice Text       ;Text250       ;CaptionML=ENU=Invoice Text }
    { 11012030;;Interest Date      ;Date          ;OnValidate=BEGIN
                                                                //**4PS.n
                                                                IF ("Interest Date" > "Posting Date") THEN
                                                                  FIELDERROR("Interest Date",STRSUBSTNO(Text11012001, "Interest Date", FIELDCAPTION("Posting Date"),"Posting Date"));
                                                              END;

                                                   CaptionML=ENU=Interest Date }
    { 11012040;;Related Sales Order No.;Code20    ;TableRelation="Sales Header".No. WHERE (Document Type=CONST(Order));
                                                   OnValidate=VAR
                                                                lvSalesHeader@1210190000 : Record 36;
                                                              BEGIN
                                                                //**4PS
                                                                IF lvSalesHeader.GET(lvSalesHeader."Document Type"::Order, "Related Sales Order No.") THEN BEGIN
                                                                  IF "Sell-to Customer No." = '' THEN
                                                                    VALIDATE("Sell-to Customer No.", lvSalesHeader."Sell-to Customer No.");
                                                                  TESTFIELD("Sell-to Customer No.", lvSalesHeader."Sell-to Customer No.");
                                                                  VALIDATE("Job No.", lvSalesHeader."Job No.");
                                                                //  VALIDATE("Received on Project", lvSalesHeader."Received on Project");
                                                                  VALIDATE("Payment Terms Code",lvSalesHeader."Payment Terms Code");
                                                                  "Invoice Text" := lvSalesHeader."Invoice Text";
                                                                  "Your Reference" := lvSalesHeader."Your Reference";  //C004230.n
                                                                  //**4PS.sn DP00613
                                                                  IF lvSalesHeader."Direct Debit Mandate ID" <> '' THEN
                                                                    "Direct Debit Mandate ID" := lvSalesHeader."Direct Debit Mandate ID";
                                                                  //**4PS.en DP00613
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              lvSalesHeader@1210190000 : Record 36;
                                                            BEGIN
                                                              //**4PS
                                                              lvSalesHeader.RESET;
                                                              lvSalesHeader.SETRANGE("Document Type", "Document Type"::Order);
                                                              IF "Sell-to Customer No." <> '' THEN
                                                                lvSalesHeader.SETRANGE("Sell-to Customer No.", "Sell-to Customer No.");
                                                              IF PAGE.RUNMODAL(PAGE::"Sales List", lvSalesHeader) = ACTION::LookupOK THEN
                                                                VALIDATE("Related Sales Order No.", lvSalesHeader."No.");
                                                            END;

                                                   CaptionML=ENU=Related Sales Order No. }
    { 11012258;;Company VAT Registration No.;Text20;
                                                   CaptionML=ENU=Company VAT Registration No.;
                                                   Editable=No }
    { 11012259;;Country of Origin  ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                UpdateVATGroup; //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Country of Origin;
                                                   Editable=No }
    { 11012260;;Country of Destination;Code10     ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                UpdateVATGroup; //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Country of Destination;
                                                   Editable=No }
    { 11012261;;Extended VAT Determination;Boolean;CaptionML=ENU=Extended VAT Determination;
                                                   Editable=No }
    { 11012262;;Invoice From       ;Option        ;CaptionML=ENU=Invoice From;
                                                   OptionCaptionML=ENU=" ,Logistic,Sales";
                                                   OptionString=[ ,Logistic,Sales] }
    { 11012265;;Offer Amount       ;Decimal       ;CaptionML=ENU=Offer Amount }
    { 11012270;;Selection Code     ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=FILTER(Quote|Order),
                                                                                           Sales Document Type=FIELD(Sales Document Type),
                                                                                           Selection Code=FILTER(<>''),
                                                                                           Selection Code is Current Doc.=CONST(Yes));
                                                   OnValidate=VAR
                                                                lvSalesHeadRec@1100485000 : Record 36;
                                                                lvText11012001@1100485001 : TextConst 'ENU=''%1'' is still used';
                                                              BEGIN
                                                                //**4PS
                                                                IF NOT ("Document Type" IN ["Document Type"::Quote, "Document Type"::Order]) THEN
                                                                  EXIT;

                                                                IF "Selection Code is Current Doc." AND ("Selection Code" <> xRec."Selection Code") THEN BEGIN
                                                                  lvSalesHeadRec.SETFILTER("Document Type", '%1|%2', "Document Type"::Quote, "Document Type"::Order);
                                                                  lvSalesHeadRec.SETRANGE("Sales Document Type", "Sales Document Type");
                                                                  lvSalesHeadRec.SETRANGE("Selection Code", xRec."Selection Code");
                                                                  lvSalesHeadRec.SETRANGE("Selection Code is Current Doc.", FALSE);  //* Do not check current record
                                                                  IF lvSalesHeadRec.FINDFIRST THEN
                                                                    lvSalesHeadRec.FIELDERROR("Selection Code", STRSUBSTNO(lvText11012001, xRec."Selection Code"));
                                                                END;

                                                                VALIDATE("Selection Code is Current Doc.");
                                                              END;

                                                   CaptionML=ENU=Selection Code }
    { 11012271;;Selection Code is Current Doc.;Boolean;
                                                   FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Document Type" IN ["Document Type"::Quote, "Document Type"::Order]) AND
                                                                   ("Selection Code" = "No.") AND ("Selection Code" <> '')
                                                                THEN
                                                                  "Selection Code is Current Doc." := TRUE
                                                                ELSE
                                                                  "Selection Code is Current Doc." := FALSE;
                                                              END;

                                                   CaptionML=ENU=Selection Code is Current Doc.;
                                                   Editable=No }
    { 11012280;;Invoice Layout Code;Code10        ;TableRelation="Invoice Layout";
                                                   CaptionML=ENU=Invoice Layout Code }
    { 11012377;;Valid Until        ;Date          ;CaptionML=ENU=Valid Until }
    { 11012390;;Extra Shipments Allowed;Boolean   ;CaptionML=ENU=Extra Shipments Allowed }
    { 11012391;;Shipping Details   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Shipping Details" WHERE (Source=FILTER(SalesOrder),
                                                                                               Order No.=FIELD(No.)));
                                                   CaptionML=ENU=Shipping Details;
                                                   Editable=No }
    { 11012495;;Rental Contract Modified on;Date  ;CaptionML=ENU=Rental Contract Modified on;
                                                   Editable=No }
    { 11012500;;Elected Alternative No.;Integer   ;OnValidate=BEGIN
                                                                //**4PS
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=ENU=Elected Alternative No.;
                                                   MinValue=0 }
    { 11012505;;Plant Location Code;Code20        ;OnValidate=BEGIN
                                                                //**4PS
                                                                ValidatePlantLocation();
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              LookupPlantLocation();
                                                            END;

                                                   CaptionML=ENU=Plant Location;
                                                   Description=Plant location in logistic company (to Location) }
    { 11012506;;Plant Depot Logistics;Code20      ;OnValidate=BEGIN
                                                                //**4PS
                                                                ValidatePlantDepotLogistics();
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              LookupPlantDepotLogistics();
                                                            END;

                                                   CaptionML=ENU=Plant Depot Logistics;
                                                   Description=Plant depot logistics (from location) }
    { 11012507;;Location Code Logistics;Code10    ;OnValidate=BEGIN
                                                                //**4PS
                                                                ValidateLocationCodeLogistics();
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              LookupLocationCodeLogistics();
                                                            END;

                                                   CaptionML=ENU=Location Code Logistics;
                                                   Description=Location/depot logistics (from location) for items }
    { 11012511;;Arrival Date       ;Date          ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Arrival Date" = 0D) THEN BEGIN
                                                                  "Removal Date" := 0D;
                                                                  "Rental Starting Date" := 0D;
                                                                  "Rental Ending Date" := 0D;
                                                                END ELSE BEGIN
                                                                  IF ("Rental Starting Date" < "Arrival Date") OR ("Rental Starting Date" = xRec."Arrival Date") THEN
                                                                    VALIDATE("Rental Starting Date", "Arrival Date");
                                                                  IF ("Removal Date" < "Arrival Date") AND ("Removal Date" <> 0D) THEN
                                                                    VALIDATE("Removal Date", "Arrival Date");
                                                                END;
                                                                "Shipment Date" := "Arrival Date";
                                                              END;

                                                   CaptionML=ENU=Arrival Date }
    { 11012512;;Removal Date       ;Date          ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Arrival Date" = 0D) THEN
                                                                  "Removal Date" := 0D
                                                                ELSE BEGIN
                                                                  IF ("Removal Date" < "Arrival Date") AND ("Removal Date" <> 0D) THEN
                                                                    FIELDERROR("Removal Date", STRSUBSTNO(Text11012003,FIELDCAPTION("Arrival Date")));
                                                                  IF ("Rental Ending Date" > "Removal Date") OR ("Rental Ending Date" = 0D) OR ("Rental Ending Date" = xRec."Removal Date") THEN
                                                                    VALIDATE("Rental Ending Date", "Removal Date");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Removal Date }
    { 11012513;;Rental Starting Date;Date         ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Arrival Date" = 0D) THEN
                                                                  "Rental Starting Date" := 0D
                                                                ELSE BEGIN
                                                                  IF "Rental Starting Date" < "Arrival Date" THEN
                                                                    FIELDERROR("Rental Starting Date", STRSUBSTNO(Text11012003,FIELDCAPTION("Arrival Date")));
                                                                  IF ("Rental Starting Date" > "Removal Date") AND ("Removal Date" <> 0D)THEN
                                                                    VALIDATE("Removal Date", "Rental Starting Date");
                                                                  IF ("Rental Starting Date" > "Rental Ending Date") AND ("Rental Ending Date" <> 0D) THEN
                                                                    VALIDATE("Rental Ending Date", "Rental Starting Date");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Rental Starting Date }
    { 11012514;;Rental Ending Date ;Date          ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Arrival Date" = 0D) THEN
                                                                  "Rental Ending Date" := 0D
                                                                ELSE BEGIN
                                                                  IF "Rental Ending Date" > "Removal Date" THEN
                                                                    FIELDERROR("Rental Ending Date", STRSUBSTNO(Text11012004,FIELDCAPTION("Removal Date")));
                                                                  IF ("Rental Ending Date" < "Rental Starting Date") AND ("Rental Ending Date" <> 0D)THEN
                                                                    FIELDERROR("Rental Ending Date", STRSUBSTNO(Text11012003,FIELDCAPTION("Rental Starting Date")));
                                                                  IF ("Rental Ending Date" < "Arrival Date") AND ("Rental Ending Date" <> 0D)THEN
                                                                    FIELDERROR("Rental Ending Date", STRSUBSTNO(Text11012003,FIELDCAPTION("Arrival Date")));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Rental Ending Date }
    { 11012515;;Rental Contract Invoice Status;Option;
                                                   OnValidate=BEGIN
                                                                //* Not allowed to manually change to Invoiced (or higher)
                                                                IF ("Rental Contract Invoice Status" >= "Rental Contract Invoice Status"::"Temporary") AND
                                                                   (xRec."Rental Contract Invoice Status" < "Rental Contract Invoice Status"::"Temporary")
                                                                THEN
                                                                  FIELDERROR("Rental Contract Invoice Status");

                                                                //* Not allowed to set status back to Invoiced
                                                                IF ("Rental Contract Invoice Status" < "Rental Contract Invoice Status"::"Temporary") AND
                                                                   (xRec."Rental Contract Invoice Status" >= "Rental Contract Invoice Status"::"Temporary")
                                                                THEN
                                                                  TESTFIELD("Rental Contract Invoice Status", xRec."Rental Contract Invoice Status");

                                                                IF ("Rental Contract Invoice Status" = "Rental Contract Invoice Status"::Chargeable) THEN
                                                                  TESTFIELD(Status, Status::Released);
                                                              END;

                                                   CaptionML=ENU=Rental Contract Invoice Status;
                                                   OptionCaptionML=ENU=Open,Chargeable,Temporary,Invoiced;
                                                   OptionString=Open,Chargeable,Temporary,Invoiced }
    { 11012548;;Plant Location Filter;Code250     ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Plant Location Filter }
    { 11012549;;Plant Loc. Filter On Invoice;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Document No.=FIELD(No.),
                                                                                         Plant Location=FIELD(Plant Location Filter)));
                                                   CaptionML=ENU=Plant Loc. Filter On Invoice;
                                                   Description=Indication location from filter present on invoice line(s), to search invoices of location;
                                                   Editable=No }
    { 11012550;;Plant Invoice      ;Boolean       ;CaptionML=ENU=Plant Invoice;
                                                   Editable=No }
    { 11012551;;Rental Periode to Date;Date       ;CaptionML=ENU=Rental Periode to Date;
                                                   Editable=No }
    { 11012552;;Company Name       ;Text30        ;TableRelation=Company;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Company Name;
                                                   Editable=No }
    { 11012554;;Service Invoice    ;Boolean       ;CaptionML=ENU=Service Invoice }
    { 11012555;;Alternative Bill-to Address;Code10;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Bill-to Customer No.),
                                                                                               Billing Address=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                CheckInvoiceAddress;
                                                                FillDefaultEMailInvoice;
                                                              END;

                                                   CaptionML=ENU=Alternative Bill-to Address }
    { 11012557;;Rental Unit Invoice;Boolean       ;CaptionML=ENU=Rental Unit Invoice;
                                                   Editable=No }
    { 11012558;;Withhold % Last Installment;Decimal;
                                                   CaptionML=ENU=Withhold % Last Installment;
                                                   Editable=No }
    { 11012559;;Public notary      ;Code20        ;TableRelation=Customer.No.;
                                                   CaptionML=ENU=Public notary;
                                                   Editable=No }
    { 11012561;;Notary Case Number ;Text30        ;CaptionML=ENU=Notary Case Number;
                                                   Editable=No }
    { 11012562;;Calculate B Amounts based on;Option;
                                                   CaptionML=ENU=Calculate B Amounts based on;
                                                   OptionCaptionML=ENU=Labor Amount,Invoice Amount;
                                                   OptionString=Labor Amount,Invoice Amount }
    { 11012566;;Specific WKA Percentages;Boolean  ;OnValidate=BEGIN
                                                                //**4PS
                                                                FillWKAPercentages;
                                                              END;

                                                   CaptionML=ENU=Specific WKA Percentages }
    { 11012567;;% Labor            ;Decimal       ;CaptionML=ENU=% Labor;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   AutoFormatType=1 }
    { 11012568;;% to B Account     ;Decimal       ;CaptionML=ENU=% to B Account;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 11012570;;WKA Period         ;Text50        ;CaptionML=ENU=WKA Period }
    { 11012580;;Amount VAT         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Line VAT Amount" WHERE (Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Amount VAT;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012585;;Sales Document Type;Option        ;CaptionML=ENU=Sales Document Type;
                                                   OptionCaptionML=ENU=Standard,Sales Logistics Separated,Rental Contract;
                                                   OptionString=Standard,Sales Logistics Separated,RentalContract }
    { 11012610;;Inserted By        ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Inserted By;
                                                   Editable=No }
    { 11012620;;Invoice Frequency Rental;DateFormula;
                                                   CaptionML=ENU=Invoice Frequency Rental }
    { 11012700;;Service Warranty Code;Code10      ;TableRelation="Service Warranty";
                                                   CaptionML=ENU=Service Warranty Code }
    { 11012800;;Service Call No.   ;Code20        ;TableRelation="Service Call".No.;
                                                   CaptionML=ENU=Service Call No.;
                                                   Editable=No }
    { 11012801;;Description Service Call;Text50   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Call".Description WHERE (No.=FIELD(Service Call No.)));
                                                   CaptionML=ENU=Description Service Call;
                                                   Editable=No }
    { 11012804;;Service Contract No.;Code20       ;TableRelation=Service-Contract.No.;
                                                   OnValidate=BEGIN
                                                                //**4PS.n
                                                                //** 09-06-2010 sn
                                                                CreateDim(
                                                                  DATABASE::"Service-Contract","Service Contract No.",
                                                                  DATABASE::"Service Order","Service Order No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");
                                                                  //DATABASE::Location,"Location Code");  //**4PS.n  //*C007227.o
                                                                //** 09-06-2010 en

                                                                //**4PS.sn, W051546
                                                                GetServicePaymentTermsCode;
                                                                //**4PS.en, W051546

                                                                //GetDirectDebitMandateServiceContract; //DP00613  DP00640.o Only for create serv.contract invoices of type Installment
                                                              END;

                                                   CaptionML=ENU=Service Contract No. }
    { 11012805;;Service Order No.  ;Code20        ;TableRelation="Service Order".No.;
                                                   OnValidate=BEGIN
                                                                //**4PS.n
                                                                IF "Service Order No." <> '' THEN BEGIN
                                                                  ServOrderRec.GET("Service Order No.");
                                                                  //db.sn, 09-06-10: M19719
                                                                  //call 29646.sn
                                                                  IF ServOrderRec.UseBilltoAsSelltoCustomer THEN
                                                                    ServOrderRec.TESTFIELD("Bill-to Customer No.", "Sell-to Customer No.")
                                                                  ELSE
                                                                    ServOrderRec.TESTFIELD("Customer No.", "Sell-to Customer No.");
                                                                  //call 29646.en
                                                                  IF (CurrFieldNo <> 0) THEN //kzwerver, 111005, n, #RfC Unit Price
                                                                    ServOrderRec.TESTFIELD("Bill-to Customer No.", "Bill-to Customer No.");
                                                                  //db.en, 09-06-10: M19719
                                                                  TESTFIELD("Job No.", '');
                                                                  "Service Contract No." := ServOrderRec."Service Contract No.";
                                                                  //db.sn, 04-03-09: M14478
                                                                  //**4PS.so, 12-01-11, call 23879
                                                                  //"Bill-to Name" := ServOrderRec."Bill-to Name";
                                                                  //"Bill-to Name 2" := ServOrderRec."Bill-to Name 2";
                                                                  //"Bill-to Address" := ServOrderRec."Bill-to Address";
                                                                  //"Bill-to Address 2" := ServOrderRec."Bill-to Address 2";
                                                                  //"Bill-to Post Code" := ServOrderRec."Bill-to Post Code";
                                                                  //"Bill-to City" := ServOrderRec."Bill-to City";
                                                                  //**4PS.eo
                                                                  //db.en, 04-03-09: M14478
                                                                  IF ("Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"]) AND
                                                                     (NOT "Project Invoice") AND (NOT "Plant Invoice") AND (NOT "Service Invoice") THEN
                                                                    ServOrderRec.CheckStatus(1);
                                                                  //**4PS.sn, W051546
                                                                  GetServicePaymentTermsCode;
                                                                  //**4PS.en, W051546
                                                                END ELSE BEGIN
                                                                  "Service Contract No." := '';
                                                                  CheckInvoiceAddress;  //db, 04-03-09: M14478
                                                                  //**4PS.sn, W051546
                                                                  GetServicePaymentTermsCode;
                                                                  //**4PS.en, W051546
                                                                END;

                                                                //** 4PS.n 09-06-2010 sn
                                                                CreateDim(
                                                                  DATABASE::"Service Order","Service Order No.",
                                                                  DATABASE::"Service-Contract","Service Contract No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");
                                                                  //DATABASE::Location,"Location Code");  //**4PS.n  //*C007227.o
                                                                //** 4PS.n 09-06-2010 en
                                                              END;

                                                   CaptionML=ENU=Service Order No. }
    { 11012810;;Principal Reference;Text50        ;CaptionML=ENU=Principal Reference }
    { 11012820;;Order No. Customer ;Text50        ;CaptionML=ENU=Order No. Customer }
    { 11012830;;Commision Date Customer;Date      ;CaptionML=ENU=Commision Date Principal }
    { 11012840;;Ship-to Contact No.;Code20        ;TableRelation=Contact;
                                                   CaptionML=ENU=Ship-to Contact No. }
    { 11012850;;Ship-to Phone No.  ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Ship-to Phone No. }
    { 11012860;;Amount Payment in Advance;Decimal ;CaptionML=ENU=Amount Payment in Advance;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012870;;Salesperson Name   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Salesperson Code)));
                                                   CaptionML=ENU=Salesperson Name;
                                                   Editable=No }
    { 11012998;;Sales Representative Code;Code10  ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Sales Representative Code }
    { 11012999;;Name Sales Representative;Text50  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Sales Representative Code)));
                                                   CaptionML=ENU=Name Sales Representative;
                                                   Editable=No }
    { 11020254;;Credit Restriction ;Code20        ;TableRelation="Credit Restriction";
                                                   OnValidate=VAR
                                                                CreditRestriction@1100485000 : Record 11020254;
                                                              BEGIN
                                                                //**4PS.sn
                                                                IF ("Credit Restriction" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  CreditRestriction.GET("Credit Restriction");
                                                                  //IF ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) THEN BEGIN  CALL 27619
                                                                  IF ("Document Type" = "Document Type"::"Return Order") THEN BEGIN  //CALL 27619
                                                                    VALIDATE("Credit Restriction Date",0D);
                                                                    VALIDATE("Credit Restriction %",0);
                                                                  END ELSE BEGIN
                                                                    "Credit Restriction Date" := CALCDATE(CreditRestriction."Due Dateformula", "Document Date");
                                                                    VALIDATE("Credit Restriction %", CreditRestriction."Credit Restriction %");
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Credit Restriction Date",0D);
                                                                  VALIDATE("Credit Restriction %",0);
                                                                END;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Credit Restriction }
    { 11020255;;Credit Restriction Date;Date      ;CaptionML=ENU=Credit Restriction Date }
    { 11020256;;Credit Restriction %;Decimal      ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                "Credit Restriction Amount" := "Amount Including VAT" * ("Credit Restriction %"/100);
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Credit Restriction %;
                                                   DecimalPlaces=0:2 }
    { 11020257;;Credit Restriction Amount;Decimal ;CaptionML=ENU=Credit Restriction Amount;
                                                   DecimalPlaces=2:2 }
    { 11020258;;Payment Discount % 2;Decimal      ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=ENU=Payment Discount % 2;
                                                   DecimalPlaces=0:5 }
    { 11020259;;Pmt. Discount Date 2;Date         ;CaptionML=ENU=Pmt. Discount Date 2 }
    { 11020260;;Payment Discount % 3;Decimal      ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=ENU=Payment Discount % 3;
                                                   DecimalPlaces=0:5 }
    { 11020261;;Pmt. Discount Date 3;Date         ;CaptionML=ENU=Pmt. Discount Date 3 }
    { 11020270;;Delivery Time      ;Time          ;CaptionML=ENU=Delivery Time }
    { 11020290;;Batch Seq. No.     ;Code20        ;TableRelation="Invoice Proposal Batch Seq.";
                                                   OnValidate=VAR
                                                                InvoiceProposalBatchSeq@1100528600 : Record 11229907;
                                                                PaymentMethod@1100528601 : Record 289;
                                                              BEGIN
                                                                IF "Batch Seq. No." <> '' THEN BEGIN
                                                                  IF NOT PaymentMethod.GET("Payment Method Code") THEN
                                                                    PaymentMethod.INIT;
                                                                  IF PaymentMethod."Direct Debit" THEN BEGIN
                                                                    InvoiceProposalBatchSeq.GET("Batch Seq. No.");
                                                                    InvoiceProposalBatchSeq.TESTFIELD("Transaction Date");
                                                                    VALIDATE("Due Date", InvoiceProposalBatchSeq."Transaction Date");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Batch Seq. No.;
                                                   Editable=No }
    { 11128010;;Source Inv. No.    ;Code20        ;OnValidate=BEGIN
                                                                IF FromSalesInvHeader.GET("Source Inv. No.") THEN BEGIN
                                                                  FromSalesInvHeader.CALCFIELDS("Amount Including VAT");
                                                                  FromSalesInvHeader.CALCFIELDS(Amount);
                                                                  "Source Inv. VAT" := FromSalesInvHeader."Amount Including VAT" - FromSalesInvHeader.Amount;
                                                                  "Source Inv. Total" := FromSalesInvHeader."Amount Including VAT";
                                                                END ELSE BEGIN
                                                                  "Source Inv. VAT" := 0;
                                                                  "Source Inv. Total" := 0;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF PAGE.RUNMODAL(0,FromSalesInvHeader) = ACTION::LookupOK THEN BEGIN
                                                                "Source Inv. No." := FromSalesInvHeader."No.";
                                                                "Source Inv. VAT" := FromSalesInvHeader."Amount Including VAT" - FromSalesInvHeader.Amount;
                                                                "Source Inv. Total" := FromSalesInvHeader."Amount Including VAT";
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Source Inv. No. }
    { 11128011;;Source Inv. VAT    ;Decimal       ;CaptionML=ENU=Source Inv. VAT;
                                                   Editable=No }
    { 11128012;;Source Inv. Total  ;Decimal       ;CaptionML=ENU=Source Inv. Total;
                                                   Editable=No }
    { 11128014;;E-Invoice Layout Code;Code10       }
    { 11128020;;ROT                ;Boolean       ;Description=I.012 }
    { 11128505;;GLN                ;Code13        ;OnValidate=BEGIN
                                                                     IF NOT EInvoiceDocumentEncode.IsValidEANNo(GLN,TRUE) THEN
                                                                     FIELDERROR(GLN,Text10606);
                                                              END;

                                                   CaptionML=ENU=GLN No.;
                                                   Description=NAVNO 10605 }
    { 11128506;;Account Code NO    ;Text30        ;OnValidate=BEGIN
                                                                //>>NAVNO
                                                                IF "Account Code NO" <> xRec."Account Code NO" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Account Code NO"),FALSE);
                                                                //<<NAVNO
                                                              END;

                                                   CaptionML=ENU=Account Code NO;
                                                   Description=NAVNO 10606;
                                                   Editable=No }
    { 11128513;;E-Invoice          ;Boolean       ;CaptionML=ENU=E-Invoice;
                                                   Description=NAVNO 10613 }
    { 11128570;;EAN No.            ;Code13        ;OnValidate=VAR
                                                                OIOUBLDocumentEncode@1100285000 : Codeunit 11128570;
                                                              BEGIN
                                                                IF NOT OIOUBLDocumentEncode.IsValidEANNo("EAN No.") THEN
                                                                  FIELDERROR("EAN No.", Text11128576);
                                                              END;

                                                   CaptionML=ENU=EAN No.;
                                                   Description=NAVDK }
    { 11128572;;Account Code DK    ;Text30        ;OnValidate=BEGIN
                                                                //SalesLine.RESET;
                                                                //SalesLine.SETRANGE("Document Type","Document Type");
                                                                //SalesLine.SETRANGE("Document No.","No.");
                                                                //SalesLine.SETFILTER(Type, '>%1', SalesLine.Type::" ");
                                                                //SalesLine.SETFILTER("Account Code DK", '%1|%2', xRec."Account Code DK", '');
                                                                //SalesLine.MODIFYALL("Account Code DK", "Account Code DK");
                                                                IF "Account Code DK" <> xRec."Account Code DK" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Account Code DK"),FALSE);
                                                              END;

                                                   CaptionML=ENU=Account Code DK;
                                                   Description=NAVDK;
                                                   Editable=No }
    { 11128574;;OIOUBL Profile Code;Code10        ;TableRelation="OIOUBL Profile";
                                                   CaptionML=ENU=OIOUBL Profile Code;
                                                   Description=NAVDK }
    { 11128575;;Sell-to Contact Phone No.;Text30  ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Sell-to Contact Phone No.;
                                                   Description=NAVDK;
                                                   Editable=No }
    { 11128576;;Sell-to Contact Fax No.;Text30    ;CaptionML=ENU=Sell-to Contact Fax No.;
                                                   Description=NAVDK;
                                                   Editable=No }
    { 11128577;;Sell-to Contact E-Mail;Text80     ;ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=Sell-to Contact E-Mail;
                                                   Description=NAVDK;
                                                   Editable=No }
    { 11128578;;Sell-to Contact Role;Option       ;CaptionML=ENU=Sell-to Contact Role;
                                                   OptionCaptionML=ENU=" ,,,Purchase Responsible,,,Accountant,,,Budget Responsible,,,Requisitioner";
                                                   OptionString=[ ,,,Purchase Responsible,,,Accountant,,,Budget Responsible,,,Requisitioner];
                                                   Description=NAVDK }
    { 11128590;;Payment Channel    ;Option        ;OnValidate=BEGIN
                                                                IF "Payment Channel" = "Payment Channel"::"Payment Slip" THEN
                                                                  ERROR(Text11128577, FIELDCAPTION("Payment Channel"),"Payment Channel");
                                                              END;

                                                   CaptionML=ENU=Payment Channel;
                                                   OptionCaptionML=ENU=" ,Payment Slip,Account Transfer,National Clearing,Direct Debit";
                                                   OptionString=[ ,Payment Slip,Account Transfer,National Clearing,Direct Debit];
                                                   Description=NAVDK }
  }
  KEYS
  {
    {    ;Document Type,No.                       ;Clustered=Yes }
    {    ;No.,Document Type                        }
    {    ;Document Type,Sell-to Customer No.       }
    {    ;Document Type,Bill-to Customer No.       }
    {    ;Document Type,Combine Shipments,Bill-to Customer No.,Currency Code,EU 3-Party Trade,Dimension Set ID }
    {    ;Sell-to Customer No.,External Document No. }
    {    ;Document Type,Sell-to Contact No.        }
    {    ;Bill-to Contact No.                      }
    {    ;Incoming Document Entry No.              }
    {    ;Service Contract No.                     }
    {    ;Batch Seq. No.                           }
  }
  FIELDGROUPS
  {
    { 1   ;Brick               ;No.,Sell-to Customer Name,Amount,Sell-to Contact,Amount Including VAT }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Do you want to print shipment %1?';
      Text001@1001 : TextConst 'ENU=Do you want to print invoice %1?';
      Text002@1002 : TextConst 'ENU=Do you want to print credit memo %1?';
      Text003@1003 : TextConst 'ENU=You cannot rename a %1.';
      Text004@1004 : TextConst 'ENU=Do you want to change %1?';
      Text005@1005 : TextConst 'ENU=You cannot reset %1 because the document still has one or more lines.';
      Text006@1006 : TextConst 'ENU=You cannot change %1 because the order is associated with one or more purchase orders.';
      Text007@1007 : TextConst 'ENU=%1 cannot be greater than %2 in the %3 table.';
      Text009@1009 : TextConst 'ENU=Deleting this document will cause a gap in the number series for shipments. An empty shipment %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text012@1012 : TextConst 'ENU=Deleting this document will cause a gap in the number series for posted invoices. An empty posted invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text014@1014 : TextConst 'ENU=Deleting this document will cause a gap in the number series for posted credit memos. An empty posted credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text015@1015 : TextConst 'ENU=If you change %1, the existing sales lines will be deleted and new sales lines based on the new information on the header will be created.\\Do you want to change %1?';
      Text017@1017 : TextConst 'ENU=You must delete the existing sales lines before you can change %1.';
      Text018@1018 : TextConst 'ENU=You have changed %1 on the sales header, but it has not been changed on the existing sales lines.\';
      Text019@1019 : TextConst 'ENU=You must update the existing sales lines manually.';
      Text020@1020 : TextConst 'ENU=The change may affect the exchange rate used in the price calculation of the sales lines.';
      Text021@1021 : TextConst 'ENU=Do you want to update the exchange rate?';
      Text022@1022 : TextConst 'ENU=You cannot delete this document. Your identification is set up to process from %1 %2 only.';
      Text023@1023 : TextConst 'ENU=Do you want to print return receipt %1?';
      Text024@1024 : TextConst 'ENU=You have modified the %1 field. The recalculation of VAT may cause penny differences, so you must check the amounts afterward. Do you want to update the %2 field on the lines to reflect the new value of %1?';
      Text027@1027 : TextConst 'ENU=Your identification is set up to process from %1 %2 only.';
      Text028@1028 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.';
      Text030@1030 : TextConst 'ENU=Deleting this document will cause a gap in the number series for return receipts. An empty return receipt %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text031@1031 : TextConst 'ENU=You have modified %1.\\';
      Text032@1032 : TextConst 'ENU=Do you want to update the lines?';
      Text067@2002 : TextConst 'ENU=%1 %4 with amount of %2 has already been authorized on %3 and is not expired yet. You must void the previous authorization before you can re-authorize this %1.';
      Text068@2003 : TextConst 'ENU=There is nothing to void.';
      Text069@2004 : TextConst 'ENU=The selected operation cannot complete with the specified %1.';
      SalesSetup@1033 : Record 311;
      GLSetup@1034 : Record 98;
      GLAcc@1035 : Record 15;
      SalesHeader@1036 : Record 36;
      SalesLine@1037 : Record 37;
      CustLedgEntry@1038 : Record 21;
      Cust@1039 : Record 18;
      PaymentTerms@1040 : Record 3;
      PaymentMethod@1041 : Record 289;
      CurrExchRate@1042 : Record 330;
      SalesCommentLine@1043 : Record 44;
      ShipToAddr@1044 : Record 222;
      PostCode@1045 : Record 225;
      BankAcc@1046 : Record 270;
      SalesShptHeader@1047 : Record 110;
      SalesInvHeader@1048 : Record 112;
      SalesCrMemoHeader@1049 : Record 114;
      ReturnRcptHeader@1050 : Record 6660;
      SalesInvHeaderPrepmt@1101 : Record 112;
      SalesCrMemoHeaderPrepmt@1100 : Record 114;
      GenBusPostingGrp@1051 : Record 250;
      GenJnILine@1052 : Record 81;
      RespCenter@1053 : Record 5714;
      InvtSetup@1054 : Record 313;
      Location@1055 : Record 14;
      WhseRequest@1056 : Record 5765;
      ShippingAgentService@1057 : Record 5790;
      TempReqLine@1089 : TEMPORARY Record 246;
      UserSetupMgt@1058 : Codeunit 5700;
      NoSeriesMgt@1059 : Codeunit 396;
      CustCheckCreditLimit@1060 : Codeunit 312;
      TransferExtendedText@1061 : Codeunit 378;
      GenJnlApply@1062 : Codeunit 225;
      SalesPost@1063 : Codeunit 80;
      CustEntrySetApplID@1064 : Codeunit 101;
      DimMgt@1065 : Codeunit 408;
      ApprovalsMgmt@1082 : Codeunit 1535;
      WhseSourceHeader@1073 : Codeunit 5781;
      ArchiveManagement@1075 : Codeunit 5063;
      SalesLineReserve@1066 : Codeunit 99000832;
      DOPaymentMgt@2000 : Codeunit 825;
      DOPaymentTransLogMgt@2001 : Codeunit 829;
      EInvoiceDocumentEncode@1080003 : Codeunit 11128502;
      ApplyCustEntries@1067 : Page 232;
      CurrencyDate@1068 : Date;
      HideValidationDialog@1069 : Boolean;
      Confirmed@1070 : Boolean;
      Text035@1076 : TextConst 'ENU=You cannot Release Quote or Make Order unless you specify a customer on the quote.\\Do you want to create customer(s) now?';
      Text037@1078 : TextConst 'ENU=Contact %1 %2 is not related to customer %3.';
      Text038@1074 : TextConst 'ENU=Contact %1 %2 is related to a different company than customer %3.';
      Text039@1086 : TextConst 'ENU=Contact %1 %2 is not related to a customer.';
      ReservEntry@1079 : Record 337;
      TempReservEntry@1080 : TEMPORARY Record 337;
      Text040@1083 : TextConst 'ENU=A won opportunity is linked to this order.\It has to be changed to status Lost before the Order can be deleted.\Do you want to change the status for this opportunity now?';
      Text043@1087 : TextConst 'ENU=Wizard Aborted';
      Text044@1088 : TextConst 'ENU=The status of the opportunity has not been changed. The program has aborted deleting the order.';
      UserSetupRec@1100485002 : Record 91;
      SkipSellToContact@1016 : Boolean;
      SkipBillToContact@1025 : Boolean;
      Text045@1081 : TextConst 'ENU="You can not change the %1 field because %2 %3 has %4 = %5 and the %6 has already been assigned %7 %8."';
      Text048@1091 : TextConst 'ENU=Sales quote %1 has already been assigned to opportunity %2. Would you like to reassign this quote?';
      Text049@1092 : TextConst 'ENU=The %1 field cannot be blank because this quote is linked to an opportunity.';
      PlantSetup@11012031 : Record 11012550;
      PlantHourLineRec@1210190000 : Record 11012574;
      PlantInventoryRec@11012032 : Record 11012555;
      PlantOrderRec@11012033 : Record 11012556;
      InsertMode@1093 : Boolean;
      ExitOrderRec@11012034 : Record 11012559;
      CompanyInfo@1094 : Record 79;
      AdjRec@11012035 : Record 11012565;
      HideCreditCheckDialogue@1097 : Boolean;
      Text051@1071 : TextConst 'ENU=The sales %1 %2 already exists.';
      Text052@1098 : TextConst 'ENU=The sales %1 %2 has item tracking. Do you want to delete it anyway?';
      Text053@1102 : TextConst 'ENU=You must cancel the approval process if you wish to change the %1.';
      Text055@1008 : TextConst 'ENU=Do you want to print prepayment invoice %1?';
      Text054@1010 : TextConst 'ENU=Do you want to print prepayment credit memo %1?';
      Text056@1105 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment invoices. An empty prepayment invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text057@1108 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment credit memos. An empty prepayment credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text061@1110 : TextConst 'ENU=%1 is set up to process from %2 %3 only.';
      Text062@1072 : TextConst 'ENU=You cannot change %1 because the corresponding %2 %3 has been assigned to this %4.';
      Text063@1077 : TextConst 'ENU=Reservations exist for this order. These reservations will be canceled if a date conflict is caused by this change.\\Do you want to continue?';
      Text064@1090 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?';
      UpdateDocumentDate@1120 : Boolean;
      Text066@1095 : TextConst 'ENU=You cannot change %1 to %2 because an open inventory pick on the %3.';
      Text070@1096 : TextConst 'ENU=You cannot change %1  to %2 because an open warehouse shipment exists for the %3.';
      BilltoCustomerNoChanged@1121 : Boolean;
      Text071@1011 : TextConst 'ENU=There are unpaid prepayment invoices that are related to the document of type %1 with the number %2.';
      Text072@1013 : TextConst 'ENU=There are unpaid prepayment invoices related to the document of type %1 with the number %2.';
      DeferralLineQst@1144 : TextConst 'ENU=Do you want to update the deferral schedules for the lines?';
      SynchronizingMsg@1026 : TextConst 'ENU=Synchronizing ...\ from: Sales Header with %1\ to: Assembly Header with %2.';
      ShippingAdviceErr@1029 : TextConst 'ENU=This order must be a complete shipment.';
      Text11012001@1210190004 : TextConst 'ENU=(%1) may not be greater than the de %2 (%3)';
      CompanyLogistics@1100485000 : Text[30];
      Text11012002@1100485001 : TextConst 'ENU=must be equal to the Project No. ''%1'' of the Plant Location ''%2''';
      Text11012003@1100485004 : TextConst 'ENU=may not be before the %1';
      Text11012004@1100485003 : TextConst 'ENU=may not be after the %1';
      ServOrderRec@1100485005 : Record 11012823;
      DPA_Management@1100000999 : Codeunit 11012783;
      TempDocumentEntry@1210190001 : TEMPORARY Record 265;
      ServiceSetup@1100526200 : Record 11012800;
      Text11012005@1100525000 : TextConst 'ENU=This function can not be used for generated Invoices';
      Text11012006@1100525001 : TextConst 'ENU=This function can not be used for generated credit memo''s';
      AskRecreateSalesLines@1100525003 : Boolean;
      SkipRecreateSalesLines@1100525002 : Boolean;
      Text11128576@1100285001 : TextConst 'ENU=does not contain a valid, 13-digit EAN no.';
      Text11128577@1100285000 : TextConst 'ENU=%1 %2 is not supported in this version of OIOUBL.';
      SkipModify@1100528400 : Boolean;
      Text10606@1080000 : TextConst 'ENU=The GLN No. field does not contain a valid, 13-digit GLN  number';
      Text11012007@1100528401 : TextConst 'ENU=Creating PDF File from %1 %2.';
      FromSalesInvHeader@1101100000 : Record 112;

    PROCEDURE InitInsert@61();
    BEGIN
      IF "No." = '' THEN BEGIN
        TestNoSeries;
        NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
      END;

      InitRecord;
    END;

    PROCEDURE InitRecord@10();
    BEGIN
      SalesSetup.GET;

      CASE "Document Type" OF
        "Document Type"::Quote,"Document Type"::Order:
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos.");
            NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Shipment Nos.");
            IF "Document Type" = "Document Type"::Order THEN BEGIN
              IF SalesSetup."Posted Prepmt. Inv. Nos." <> '' THEN  //**4PS.n (db, 13-09-10: M22836)
                NoSeriesMgt.SetDefaultSeries("Prepayment No. Series",SalesSetup."Posted Prepmt. Inv. Nos.");
              IF SalesSetup."Posted Prepmt. Cr. Memo Nos." <> '' THEN  //**4PS.n (db, 13-09-10: M22836)
                NoSeriesMgt.SetDefaultSeries("Prepmt. Cr. Memo No. Series",SalesSetup."Posted Prepmt. Cr. Memo Nos.");
            END;
          END;
        "Document Type"::Invoice:
          BEGIN
            //**4PS.sn
            IF "Plant Invoice" THEN BEGIN
              IF "Sell-to Customer No." = '' THEN BEGIN
                IF ("No. Series" <> '') AND
                   (SalesSetup."Internal Plant Invoice Nos." = SalesSetup."Posted Internal Plant Invoices")
                THEN
                  "Posting No. Series" := "No. Series"
                ELSE
                  NoSeriesMgt.SetDefaultSeries("Posting No. Series", SalesSetup."Posted Internal Plant Invoices");
              END ELSE BEGIN
                IF ("No. Series" <> '') AND
                   (SalesSetup."Plant Invoice Nos." = SalesSetup."Posted Plant Invoice Nos.")

                THEN
                  "Posting No. Series" := "No. Series"
                ELSE
                  NoSeriesMgt.SetDefaultSeries("Posting No. Series", SalesSetup."Posted Plant Invoice Nos.");
              END;
            END ELSE BEGIN
            //**4PS.en
              IF ("No. Series" <> '') AND
                 (SalesSetup."Invoice Nos." = SalesSetup."Posted Invoice Nos.")
              THEN
                "Posting No. Series" := "No. Series"
              ELSE
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos.");
            END;  //**4PS.n
            IF SalesSetup."Shipment on Invoice" THEN
              NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Shipment Nos.");
          END;
        "Document Type"::"Return Order":
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Credit Memo Nos.");
            NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",SalesSetup."Posted Return Receipt Nos.");
          END;
        "Document Type"::"Credit Memo":
          BEGIN
            //**4PS.sn
            IF "Plant Invoice" THEN BEGIN
              IF "Sell-to Customer No." = '' THEN BEGIN
                IF ("No. Series" <> '') AND
                   (SalesSetup."Internal Plant Credit Memos" = SalesSetup."Posted Int. Plant Credit Memos")
                THEN
                  "Posting No. Series" := "No. Series"
                ELSE
                  NoSeriesMgt.SetDefaultSeries("Posting No. Series", SalesSetup."Posted Int. Plant Credit Memos");
              END ELSE BEGIN
                IF ("No. Series" <> '') AND
                   (SalesSetup."Plant Credit Memo Nos." = SalesSetup."Posted Plant Credit Memos")
                THEN
                  "Posting No. Series" := "No. Series"
                ELSE
                  NoSeriesMgt.SetDefaultSeries("Posting No. Series", SalesSetup."Posted Plant Credit Memos");
              END;
            END ELSE BEGIN
            //**4PS.en
              IF ("No. Series" <> '') AND
                 (SalesSetup."Credit Memo Nos." = SalesSetup."Posted Credit Memo Nos.")
              THEN
                "Posting No. Series" := "No. Series"
              ELSE
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Credit Memo Nos.");
            END; //**4PS.n
            IF SalesSetup."Return Receipt on Credit Memo" THEN
              NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",SalesSetup."Posted Return Receipt Nos.");
          END;
      END;

      IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote] THEN
        BEGIN
          "Shipment Date" := WORKDATE;
          "Order Date" := WORKDATE;
          "Arrival Date" := "Shipment Date";  //**4PS.n
          "Rental Starting Date" := "Arrival Date";  //**4PS.n
        END;
      IF "Document Type" = "Document Type"::"Return Order" THEN
        "Order Date" := WORKDATE;

      IF NOT ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
         ("Posting Date" = 0D)
      THEN
        "Posting Date" := WORKDATE;

      IF SalesSetup."Default Posting Date" = SalesSetup."Default Posting Date"::"No Date" THEN
        "Posting Date" := 0D;

      "Document Date" := WORKDATE;

      VALIDATE("Location Code",UserSetupMgt.GetLocation(0,Cust."Location Code","Responsibility Center"));

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        GLSetup.GET;
        Correction := GLSetup."Mark Cr. Memos as Corrections";
      END;

      "Posting Description" := FORMAT("Document Type") + ' ' + "No.";

      UpdateOutboundWhseHandlingTime;

      "Responsibility Center" := UserSetupMgt.GetRespCenter(0,"Responsibility Center");

      //**4PS.sn
      IF "Salesperson Code" = '' THEN
        IF UserSetupRec.GET(USERID) THEN
          "Salesperson Code" := UserSetupRec.Salesperson;
      //**4PS.en
    END;

    LOCAL PROCEDURE InitNoSeries@77();
    BEGIN
      IF xRec."Shipping No." <> '' THEN BEGIN
        "Shipping No. Series" := xRec."Shipping No. Series";
        "Shipping No." := xRec."Shipping No.";
      END;
      IF xRec."Posting No." <> '' THEN BEGIN
        "Posting No. Series" := xRec."Posting No. Series";
        "Posting No." := xRec."Posting No.";
      END;
      IF xRec."Return Receipt No." <> '' THEN BEGIN
        "Return Receipt No. Series" := xRec."Return Receipt No. Series";
        "Return Receipt No." := xRec."Return Receipt No.";
      END;
      IF xRec."Prepayment No." <> '' THEN BEGIN
        "Prepayment No. Series" := xRec."Prepayment No. Series";
        "Prepayment No." := xRec."Prepayment No.";
      END;
      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
      END;
    END;

    PROCEDURE AssistEdit@1(OldSalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesHeader2@1001 : Record 36;
    BEGIN
      WITH SalesHeader DO BEGIN
        COPY(Rec);
        SalesSetup.GET;
        TestNoSeries;
        IF NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldSalesHeader."No. Series","No. Series") THEN BEGIN
          IF ("Sell-to Customer No." = '') AND ("Sell-to Contact No." = '') THEN BEGIN
            HideCreditCheckDialogue := FALSE;
            CheckCreditMaxBeforeInsert;
            HideCreditCheckDialogue := TRUE;
          END;
          NoSeriesMgt.SetSeries("No.");
          IF SalesHeader2.GET("Document Type","No.") THEN
            ERROR(Text051,LOWERCASE(FORMAT("Document Type")),"No.");
          Rec := SalesHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE TestNoSeries@6() : Boolean;
    BEGIN
      SalesSetup.GET;

      CASE "Document Type" OF
        //**4PS.sn
        "Document Type"::"Invoice Proposal":
          IF "Plant Invoice" THEN BEGIN
            PlantSetup.GET;
            PlantSetup.TESTFIELD("Invoice Suggestion Nos.");
          END ELSE IF "Service Invoice" THEN BEGIN
            ServiceSetup.GET;
            ServiceSetup.TESTFIELD("Invoice Proposal Nos.");
          END;
        //**4PS.en
        "Document Type"::Quote:
          SalesSetup.TESTFIELD("Quote Nos.");
        "Document Type"::Order:
          SalesSetup.TESTFIELD("Order Nos.");
        "Document Type"::Invoice:
          BEGIN
            //**4PS.sn
            IF "Plant Invoice" THEN
              IF "Sell-to Customer No." = '' THEN BEGIN
                SalesSetup.TESTFIELD("Internal Plant Invoice Nos.");
                SalesSetup.TESTFIELD("Posted Internal Plant Invoices");
              END ELSE BEGIN
                SalesSetup.TESTFIELD("Plant Invoice Nos.");
                SalesSetup.TESTFIELD("Posted Plant Invoice Nos.");
              END
            ELSE BEGIN
            //**4PS.en
            SalesSetup.TESTFIELD("Invoice Nos.");
            SalesSetup.TESTFIELD("Posted Invoice Nos.");
            END;  //**4PS.n
          END;
        "Document Type"::"Return Order":
          SalesSetup.TESTFIELD("Return Order Nos.");
        "Document Type"::"Credit Memo":
          BEGIN
            //**4PS.sn
            IF "Plant Invoice" THEN
              IF "Sell-to Customer No." = '' THEN BEGIN
                SalesSetup.TESTFIELD(SalesSetup."Internal Plant Credit Memos");
                SalesSetup.TESTFIELD(SalesSetup."Posted Int. Plant Credit Memos");
              END ELSE BEGIN
                SalesSetup.TESTFIELD(SalesSetup."Plant Credit Memo Nos.");
                SalesSetup.TESTFIELD(SalesSetup."Posted Plant Credit Memos");
              END
            ELSE BEGIN
            //**4PS.en
            SalesSetup.TESTFIELD("Credit Memo Nos.");
            SalesSetup.TESTFIELD("Posted Credit Memo Nos.");
            END;  //**4PS.n
          END;
        "Document Type"::"Blanket Order":
          SalesSetup.TESTFIELD("Blanket Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetNoSeriesCode@9() : Code[10];
    BEGIN
      CASE "Document Type" OF
        //**4PS.sn
        "Document Type"::"Invoice Proposal":
          BEGIN
            IF "Plant Invoice" THEN
              EXIT(PlantSetup."Invoice Suggestion Nos.");
            IF "Service Invoice" THEN
              EXIT(ServiceSetup."Invoice Proposal Nos.");
          END;
        //**4PS.en
        "Document Type"::Quote:
          EXIT(SalesSetup."Quote Nos.");
        "Document Type"::Order:
          EXIT(SalesSetup."Order Nos.");
        "Document Type"::Invoice:
          //**4PS.sn
          IF "Plant Invoice" THEN
            IF "Sell-to Customer No." = '' THEN
              EXIT(SalesSetup."Internal Plant Invoice Nos.")
            ELSE
              EXIT(SalesSetup."Plant Invoice Nos.")
          ELSE
          //**4PS.en
          EXIT(SalesSetup."Invoice Nos.");
        "Document Type"::"Return Order":
          EXIT(SalesSetup."Return Order Nos.");
        "Document Type"::"Credit Memo":
            //**4PS.sn
          IF "Plant Invoice" THEN
            IF "Sell-to Customer No." = '' THEN
              EXIT(SalesSetup."Internal Plant Credit Memos")
            ELSE
              EXIT(SalesSetup."Plant Credit Memo Nos.")
          ELSE
          //**4PS.en
          EXIT(SalesSetup."Credit Memo Nos.");
        "Document Type"::"Blanket Order":
          EXIT(SalesSetup."Blanket Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetPostingNoSeriesCode@8() : Code[10];
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT(SalesSetup."Posted Credit Memo Nos.");
      EXIT(SalesSetup."Posted Invoice Nos.");
    END;

    LOCAL PROCEDURE GetPostingPrepaymentNoSeriesCode@59() : Code[10];
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT(SalesSetup."Posted Prepmt. Cr. Memo Nos.");
      EXIT(SalesSetup."Posted Prepmt. Inv. Nos.");
    END;

    LOCAL PROCEDURE TestNoSeriesDate@40(No@1000 : Code[20];NoSeriesCode@1001 : Code[10];NoCapt@1002 : Text[1024];NoSeriesCapt@1004 : Text[1024]);
    VAR
      NoSeries@1005 : Record 308;
    BEGIN
      IF (No <> '') AND (NoSeriesCode <> '') THEN BEGIN
        NoSeries.GET(NoSeriesCode);
        IF NoSeries."Date Order" THEN
          ERROR(
            Text045,
            FIELDCAPTION("Posting Date"),NoSeriesCapt,NoSeriesCode,
            NoSeries.FIELDCAPTION("Date Order"),NoSeries."Date Order","Document Type",
            NoCapt,No);
      END;
    END;

    PROCEDURE ConfirmDeletion@11() : Boolean;
    BEGIN
      SalesPost.TestDeleteHeader(
        Rec,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,
        SalesInvHeaderPrepmt,SalesCrMemoHeaderPrepmt);
      IF SalesShptHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text009,TRUE,
             SalesShptHeader."No.")
        THEN
          EXIT;
      IF SalesInvHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text012,TRUE,
             SalesInvHeader."No.")
        THEN
          EXIT;
      IF SalesCrMemoHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text014,TRUE,
             SalesCrMemoHeader."No.")
        THEN
          EXIT;
      IF ReturnRcptHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text030,TRUE,
             ReturnRcptHeader."No.")
        THEN
          EXIT;
      IF "Prepayment No." <> '' THEN
        IF NOT CONFIRM(
             Text056,TRUE,
             SalesInvHeaderPrepmt."No.")
        THEN
          EXIT;
      IF "Prepmt. Cr. Memo No." <> '' THEN
        IF NOT CONFIRM(
             Text057,TRUE,
             SalesCrMemoHeaderPrepmt."No.")
        THEN
          EXIT;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetCust@2(CustNo@1000 : Code[20]);
    BEGIN
      IF NOT (("Document Type" = "Document Type"::Quote) AND (CustNo = '')) THEN BEGIN
        IF CustNo <> Cust."No." THEN
          Cust.GET(CustNo);
      END ELSE
        CLEAR(Cust);
    END;

    PROCEDURE SalesLinesExist@3() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      EXIT(SalesLine.FINDFIRST);
    END;

    LOCAL PROCEDURE RecreateSalesLines@4(ChangedFieldName@1000 : Text[100]);
    VAR
      SalesLineTmp@1001 : TEMPORARY Record 37;
      ItemChargeAssgntSales@1004 : Record 5809;
      TempItemChargeAssgntSales@1003 : TEMPORARY Record 5809;
      TempInteger@1006 : TEMPORARY Record 2000000026;
      TempATOLink@1009 : TEMPORARY Record 904;
      ATOLink@1010 : Record 904;
      ExtendedTextAdded@1002 : Boolean;
    BEGIN
      //**4PS C008869 sn
      IF SkipRecreateSalesLines THEN BEGIN
        AskRecreateSalesLines := TRUE;
        EXIT;
      END;
      //**4PS C008869 en

      IF SalesLinesExist THEN BEGIN
        IF HideValidationDialog OR NOT GUIALLOWED THEN
          Confirmed := TRUE
        ELSE
          Confirmed :=
            CONFIRM(
              Text015,FALSE,ChangedFieldName);
        IF Confirmed THEN BEGIN
          SalesLine.LOCKTABLE;
          ItemChargeAssgntSales.LOCKTABLE;
          ReservEntry.LOCKTABLE;
          //MODIFY; //**4PS.o
          MODIFY(TRUE); //**4PS.n

          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type","Document Type");
          SalesLine.SETRANGE("Document No.","No.");
          IF SalesLine.FINDSET THEN BEGIN
            TempReservEntry.DELETEALL;
            RecreateReservEntryReqLine(SalesLineTmp,TempATOLink,ATOLink);
            ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
            ItemChargeAssgntSales.SETRANGE("Document No.","No.");
            TransferItemChargeAssgntSalesToTemp(ItemChargeAssgntSales,TempItemChargeAssgntSales);
            SalesLine.DELETEALL(TRUE);
            TempDocumentEntry.DELETEALL;  //**4PS.n (26025)

            SalesLine.INIT;
            SalesLine."Line No." := 0;
            SalesLineTmp.FINDSET;
            ExtendedTextAdded := FALSE;
            SalesLine.BlockDynamicTracking(TRUE);
            REPEAT
              IF SalesLineTmp."Attached to Line No." = 0 THEN BEGIN
      //        CreateSalesLine(SalesLineTmp); //**4PS.o
                CreateSalesLine(SalesLineTmp,ChangedFieldName); //**4PS.n
                InsertOldLineNoAndNewLineNo(SalesLineTmp."Line No.",SalesLine."Line No.");  //**4PS.n (26025)
                ExtendedTextAdded := FALSE;

                IF SalesLine.Type = SalesLine.Type::Item THEN BEGIN
                  ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
                  TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type",SalesLineTmp."Document Type");
                  TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.",SalesLineTmp."Document No.");
                  TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.",SalesLineTmp."Line No.");
                  IF TempItemChargeAssgntSales.FINDSET THEN
                    REPEAT
                      IF NOT TempItemChargeAssgntSales.MARK THEN BEGIN
                        TempItemChargeAssgntSales."Applies-to Doc. Line No." := SalesLine."Line No.";
                        TempItemChargeAssgntSales.Description := SalesLine.Description;
                        TempItemChargeAssgntSales.MODIFY;
                        TempItemChargeAssgntSales.MARK(TRUE);
                      END;
                    UNTIL TempItemChargeAssgntSales.NEXT = 0;
                END;
                IF SalesLine.Type = SalesLine.Type::"Charge (Item)" THEN BEGIN
                  TempInteger.INIT;
                  TempInteger.Number := SalesLine."Line No.";
                  TempInteger.INSERT;
                END;
              END ELSE
                IF NOT ExtendedTextAdded THEN BEGIN
                  TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,TRUE);
                  TransferExtendedText.InsertSalesExtText(SalesLine);
                  SalesLine.FINDLAST;
                  ExtendedTextAdded := TRUE;
                END;
              RecreateReservEntry(SalesLineTmp,SalesLine."Line No.",FALSE);
              RecreateReqLine(SalesLineTmp,SalesLine."Line No.",FALSE);
              SynchronizeForReservations(SalesLine,SalesLineTmp);

              IF TempATOLink.AsmExistsForSalesLine(SalesLineTmp) THEN BEGIN
                ATOLink := TempATOLink;
                ATOLink.INSERT;
                SalesLine.AutoAsmToOrder;
                TempATOLink.DELETE;
              END;
            UNTIL SalesLineTmp.NEXT = 0;

            ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
            SalesLineTmp.SETRANGE(Type,SalesLine.Type::"Charge (Item)");
            CreateItemChargeAssgntSales(ItemChargeAssgntSales,TempItemChargeAssgntSales,SalesLineTmp,TempInteger);
            SalesLineTmp.SETRANGE(Type);
            SalesLineTmp.DELETEALL;
            ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
            TempItemChargeAssgntSales.DELETEALL;
          END;
        END ELSE
          ERROR(
            Text017,ChangedFieldName);
      END;
      SalesLine.BlockDynamicTracking(FALSE);
    END;

    LOCAL PROCEDURE MessageIfSalesLinesExist@5(ChangedFieldName@1000 : Text[100]);
    BEGIN
      IF SalesLinesExist AND NOT HideValidationDialog THEN
        MESSAGE(
          Text018 +
          Text019,
          ChangedFieldName);
    END;

    LOCAL PROCEDURE PriceMessageIfSalesLinesExist@7(ChangedFieldName@1000 : Text[100]);
    BEGIN
      IF SalesLinesExist AND NOT HideValidationDialog THEN
        MESSAGE(
          Text018 +
          Text020,ChangedFieldName);
    END;

    PROCEDURE UpdateCurrencyFactor@12();
    VAR
      lvJobNo@1100528200 : Code[20];
      lvProjectPrincipalRec@1100528201 : Record 11012005;
    BEGIN
      // dp00116.n, Changed Property 'Local' from Yes to No
      IF "Currency Code" <> '' THEN BEGIN
        IF "Posting Date" <> 0D THEN
          CurrencyDate := "Posting Date"
        ELSE
          CurrencyDate := WORKDATE;
       //  RFC 305 start n
        lvJobNo := '';
        IF ("Job No." <> '') THEN BEGIN
          IF NOT lvProjectPrincipalRec.GET("Job No.", "Sell-to Customer No.") THEN
            lvProjectPrincipalRec.INIT;
          IF (lvProjectPrincipalRec."Currency Code" = "Currency Code") THEN
            lvJobNo := "Job No.";
        END;
      //  RFC 305 en
      //"Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Currency Code"); //**4PS.o
        "Currency Factor" := CurrExchRate.ExchangeRate(1,lvJobNo,CurrencyDate,"Currency Code",TRUE); //**4PS.n
      END ELSE
        "Currency Factor" := 0;
    END;

    LOCAL PROCEDURE ConfirmUpdateCurrencyFactor@13();
    BEGIN
      IF HideValidationDialog THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(Text021,FALSE);
      IF Confirmed THEN
        VALIDATE("Currency Factor")
      ELSE
        "Currency Factor" := xRec."Currency Factor";
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE UpdateSalesLines@15(ChangedFieldName@1000 : Text[100];AskQuestion@1001 : Boolean);
    VAR
      JobTransferLine@1004 : Codeunit 11072016;
      Question@1002 : Text[250];
    BEGIN
      IF NOT SalesLinesExist THEN
        EXIT;
      IF AskQuestion THEN BEGIN
        Question := STRSUBSTNO(
            Text031 +
            Text032,ChangedFieldName);
        IF GUIALLOWED THEN
          IF DIALOG.CONFIRM(Question,TRUE) THEN
            CASE ChangedFieldName OF
              FIELDCAPTION("Shipment Date"),
              FIELDCAPTION("Shipping Agent Code"),
              FIELDCAPTION("Shipping Agent Service Code"),
              FIELDCAPTION("Shipping Time"),
              FIELDCAPTION("Requested Delivery Date"),
              FIELDCAPTION("Promised Delivery Date"),
              FIELDCAPTION("Outbound Whse. Handling Time"):
                ConfirmResvDateConflict;
            END
          ELSE
            EXIT;
      END;
      SalesLine.LOCKTABLE;
      //MODIFY; //**4PS.o
      MODIFY(TRUE); //**4PS.n
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      IF SalesLine.FINDSET THEN
        REPEAT
          CASE ChangedFieldName OF
            FIELDCAPTION("Shipment Date"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Shipment Date","Shipment Date");
            FIELDCAPTION("Currency Factor"):
              IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
                SalesLine.VALIDATE("Unit Price");
                SalesLine.VALIDATE("Unit Cost (LCY)");
                IF SalesLine."Job No." <> '' THEN
                  JobTransferLine.FromSalesHeaderToPlanningLine(SalesLine,"Currency Factor");
              END;
            FIELDCAPTION("Transaction Type"):
              SalesLine.VALIDATE("Transaction Type","Transaction Type");
            FIELDCAPTION("Transport Method"):
              SalesLine.VALIDATE("Transport Method","Transport Method");
            FIELDCAPTION("Exit Point"):
              SalesLine.VALIDATE("Exit Point","Exit Point");
            FIELDCAPTION(Area):
              SalesLine.VALIDATE(Area,Area);
            FIELDCAPTION("Transaction Specification"):
              SalesLine.VALIDATE("Transaction Specification","Transaction Specification");
            FIELDCAPTION("Shipping Agent Code"):
              SalesLine.VALIDATE("Shipping Agent Code","Shipping Agent Code");
            FIELDCAPTION("Shipping Agent Service Code"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Shipping Agent Service Code","Shipping Agent Service Code");
            FIELDCAPTION("Shipping Time"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Shipping Time","Shipping Time");
            FIELDCAPTION("Prepayment %"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Prepayment %","Prepayment %");
            FIELDCAPTION("Requested Delivery Date"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Requested Delivery Date","Requested Delivery Date");
            FIELDCAPTION("Promised Delivery Date"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Promised Delivery Date","Promised Delivery Date");
            FIELDCAPTION("Outbound Whse. Handling Time"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Outbound Whse. Handling Time","Outbound Whse. Handling Time");
            SalesLine.FIELDCAPTION("Deferral Code"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Deferral Code");
            //>>NAVDK
            FIELDCAPTION("Account Code DK"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Account Code DK","Account Code DK");
            //<<NAVDK
            //>>NAVNO
            FIELDCAPTION("Account Code NO"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Account Code NO","Account Code NO");
            //<<NAVNO
          END;
          SalesLineReserve.AssignForPlanning(SalesLine);
          SalesLine.MODIFY(TRUE);
        UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ConfirmResvDateConflict@41();
    VAR
      ResvEngMgt@1000 : Codeunit 99000831;
    BEGIN
      IF ResvEngMgt.ResvExistsForSalesHeader(Rec) THEN
        IF NOT CONFIRM(Text063,FALSE) THEN
          ERROR('');
    END;

    PROCEDURE CreateDim@16(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20];Type5@1008 : Integer;No5@1009 : Code[20];Type6@1100525000 : Integer;No6@1100525001 : Code[20];Type7@1100525005 : Integer;No7@1100525004 : Code[20];Type8@1100525003 : Integer;No8@1100525002 : Code[20]);
    VAR
      SourceCodeSetup@1010 : Record 242;
      TableID@1011 : ARRAY [10] OF Integer;
      No@1012 : ARRAY [10] OF Code[20];
      OldDimSetID@1013 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      TableID[5] := Type5;
      No[5] := No5;

      //**4PS.sn
      TableID[6] := Type6;
      No[6] := No6;
      TableID[7] := Type7;  //** 4PS.n 09-06-2010 sn
      No[7] := No7;
      TableID[8] := Type8;
      No[8] := No8;         //** 4PS.n 09-06-2010 en
      //TableID[9] := Type9;  //*C007227.o
      //No[9] := No9;         //*C007227.o
      //**4PS.en
      //"Shortcut Dimension 1 Code" := ''; //**4PS.o Must be kept for Department Authorization
      "Shortcut Dimension 2 Code" := '';
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(TableID,No,SourceCodeSetup.Sales,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      IF (OldDimSetID <> "Dimension Set ID") AND SalesLinesExist THEN BEGIN
        MODIFY;
        UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@19(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      OldDimSetID@1005 : Integer;
    BEGIN
      //**4PS.sn
      IF FieldNumber = 1 THEN
        DimMgt.CheckDepartmentAuthorization(DATABASE::"Sales Header", ShortcutDimCode);
      //**4PS.en

      OldDimSetID := "Dimension Set ID";
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      IF "No." <> '' THEN
        //MODIFY; //**4PS.o
        IF NOT SkipModify THEN //**4PS.n
          MODIFY(TRUE); //**4PS.n

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        //MODIFY; //**4PS.o
        IF NOT SkipModify THEN //**4PS.n
          MODIFY(TRUE); //**4PS.n
        IF SalesLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE ShippedSalesLinesExist@22() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Quantity Shipped",'<>0');
      EXIT(SalesLine.FINDFIRST);
    END;

    LOCAL PROCEDURE ReturnReceiptExist@5800() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Return Qty. Received",'<>0');
      EXIT(SalesLine.FINDFIRST);
    END;

    LOCAL PROCEDURE DeleteSalesLines@20(IBottomUp@1100528600 : Boolean);
    BEGIN
      IF NOT IBottomUp THEN BEGIN
        IF SalesLine.FINDSET THEN BEGIN
          HandleItemTrackingDeletion;
          REPEAT
            SalesLine.SuspendStatusCheck(TRUE);
            SalesLine.DELETE(TRUE);
          UNTIL SalesLine.NEXT = 0;
        END;
      END ELSE BEGIN
        IF SalesLine.FIND('+') THEN BEGIN
          HandleItemTrackingDeletion;
          REPEAT
            SalesLine.SuspendStatusCheck(TRUE);
            SalesLine.DELETE(TRUE);
          UNTIL SalesLine.NEXT(-1) = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE DeleteSalesLinesBottomUp@1100528600();
    BEGIN
      IF SalesLine.FINDSET THEN BEGIN
        HandleItemTrackingDeletion;
        REPEAT
          SalesLine.SuspendStatusCheck(TRUE);
          SalesLine.DELETE(TRUE);
        UNTIL SalesLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE HandleItemTrackingDeletion@36();
    VAR
      ReservEntry2@1000 : Record 337;
    BEGIN
      WITH ReservEntry DO BEGIN
        RESET;
        SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line","Reservation Status");
        SETRANGE("Source Type",DATABASE::"Sales Line");
        SETRANGE("Source Subtype","Document Type");
        SETRANGE("Source ID","No.");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
        SETFILTER("Item Tracking",'> %1',"Item Tracking"::None);
        IF ISEMPTY THEN
          EXIT;

        IF HideValidationDialog OR NOT GUIALLOWED THEN
          Confirmed := TRUE
        ELSE
          Confirmed := CONFIRM(Text052,FALSE,LOWERCASE(FORMAT("Document Type")),"No.");

        IF NOT Confirmed THEN
          ERROR('');

        IF FINDSET THEN
          REPEAT
            ReservEntry2 := ReservEntry;
            ReservEntry2.ClearItemTrackingFields;
            ReservEntry2.MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ClearItemAssgntSalesFilter@17(VAR TempItemChargeAssgntSales@1000 : Record 5809);
    BEGIN
      TempItemChargeAssgntSales.SETRANGE("Document Line No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.");
    END;

    PROCEDURE CheckCustomerCreated@18(Prompt@1000 : Boolean) : Boolean;
    VAR
      Cont@1001 : Record 5050;
    BEGIN
      IF ("Bill-to Customer No." <> '') AND ("Sell-to Customer No." <> '') THEN
        EXIT(TRUE);

      IF Prompt THEN
        IF NOT CONFIRM(Text035,TRUE) THEN
          EXIT(FALSE);

      IF "Sell-to Customer No." = '' THEN BEGIN
        TESTFIELD("Sell-to Contact No.");
        TESTFIELD("Sell-to Customer Template Code");
        Cont.GET("Sell-to Contact No.");
        Cont.CreateCustomer("Sell-to Customer Template Code");
        COMMIT;
        GET("Document Type"::Quote,"No.");
      END;

      IF "Bill-to Customer No." = '' THEN BEGIN
        TESTFIELD("Bill-to Contact No.");
        TESTFIELD("Bill-to Customer Template Code");
        Cont.GET("Bill-to Contact No.");
        Cont.CreateCustomer("Bill-to Customer Template Code");
        COMMIT;
        GET("Document Type"::Quote,"No.");
      END;

      EXIT(("Bill-to Customer No." <> '') AND ("Sell-to Customer No." <> ''));
    END;

    LOCAL PROCEDURE RecreateReservEntry@21(OldSalesLine@1000 : Record 37;NewSourceRefNo@1001 : Integer;ToTemp@1002 : Boolean);
    BEGIN
      IF ToTemp THEN BEGIN
        CLEAR(ReservEntry);
        ReservEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
        ReservEntry.SETRANGE("Source ID",OldSalesLine."Document No.");
        ReservEntry.SETRANGE("Source Ref. No.",OldSalesLine."Line No.");
        ReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
        ReservEntry.SETRANGE("Source Subtype",OldSalesLine."Document Type");
        IF ReservEntry.FINDSET THEN
          REPEAT
            TempReservEntry := ReservEntry;
            TempReservEntry.INSERT;
          UNTIL ReservEntry.NEXT = 0;
        ReservEntry.DELETEALL;
      END ELSE BEGIN
        CLEAR(TempReservEntry);
        TempReservEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
        TempReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
        TempReservEntry.SETRANGE("Source Subtype",OldSalesLine."Document Type");
        TempReservEntry.SETRANGE("Source ID",OldSalesLine."Document No.");
        TempReservEntry.SETRANGE("Source Ref. No.",OldSalesLine."Line No.");
        IF TempReservEntry.FINDSET THEN
          REPEAT
            ReservEntry := TempReservEntry;
            ReservEntry."Source Ref. No." := NewSourceRefNo;
            ReservEntry.INSERT;
          UNTIL TempReservEntry.NEXT = 0;
        TempReservEntry.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE RecreateReqLine@33(OldSalesLine@1000 : Record 37;NewSourceRefNo@1001 : Integer;ToTemp@1002 : Boolean);
    VAR
      ReqLine@1003 : Record 246;
    BEGIN
      IF ToTemp THEN BEGIN
        ReqLine.SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
        ReqLine.SETRANGE("Order Promising ID",OldSalesLine."Document No.");
        ReqLine.SETRANGE("Order Promising Line ID",OldSalesLine."Line No.");
        IF ReqLine.FINDSET THEN
          REPEAT
            TempReqLine := ReqLine;
            TempReqLine.INSERT;
          UNTIL ReqLine.NEXT = 0;
        ReqLine.DELETEALL;
      END ELSE BEGIN
        CLEAR(TempReqLine);
        TempReqLine.SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
        TempReqLine.SETRANGE("Order Promising ID",OldSalesLine."Document No.");
        TempReqLine.SETRANGE("Order Promising Line ID",OldSalesLine."Line No.");
        IF TempReqLine.FINDSET THEN
          REPEAT
            ReqLine := TempReqLine;
            ReqLine."Order Promising Line ID" := NewSourceRefNo;
            ReqLine.INSERT;
          UNTIL TempReqLine.NEXT = 0;
        TempReqLine.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE UpdateSellToCont@24(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Cust@1004 : Record 18;
    BEGIN
      //IF NOT "Project Invoice" THEN //**4PS.n
      IF NOT "Project Invoice" AND NOT "Service Invoice" THEN //**4PS.n call 33756
        IF Cust.GET(CustomerNo) THEN BEGIN
          IF Cust."Primary Contact No." <> '' THEN BEGIN
            // "Sell-to Contact No." := Cust."Primary Contact No."
            VALIDATE("Sell-to Contact No.",Cust."Primary Contact No.");
            EXIT;
          END;
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
          ContBusRel.SETRANGE("No.","Sell-to Customer No.");
                IF ContBusRel.FINDFIRST THEN BEGIN
                  // "Sell-to Contact No." := ContBusRel."Contact No.";
                  VALIDATE("Sell-to Contact No.",ContBusRel."Contact No.");
                  EXIT;
                END;
                VALIDATE("Sell-to Contact No.",'');
                "Sell-to Contact" := Cust.Contact;
                //NAVDK
                "Sell-to Contact Phone No." := Cust."Phone No.";
                "Sell-to Contact Fax No." := Cust."Fax No.";
                "Sell-to Contact E-Mail" := Cust."E-Mail";
                "Sell-to Contact Role" := "Sell-to Contact Role"::" ";
                //<<NAVDK
        END;
    END;

    LOCAL PROCEDURE UpdateBillToCont@27(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Cust@1001 : Record 18;
    BEGIN
      //IF NOT "Project Invoice" THEN //**4PS.n
      IF NOT "Project Invoice" AND NOT "Service Invoice" THEN //**4PS.n call 33756
        IF Cust.GET(CustomerNo) THEN BEGIN
          IF Cust."Primary Contact No." <> '' THEN
            "Bill-to Contact No." := Cust."Primary Contact No."
          ELSE BEGIN
            ContBusRel.RESET;
            ContBusRel.SETCURRENTKEY("Link to Table","No.");
            ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
            ContBusRel.SETRANGE("No.","Bill-to Customer No.");
            IF ContBusRel.FINDFIRST THEN
              "Bill-to Contact No." := ContBusRel."Contact No."
            ELSE
              "Bill-to Contact No." := '';
          END;
          "Bill-to Contact" := Cust.Contact;
        END;
    END;

    LOCAL PROCEDURE UpdateSellToCust@25(ContactNo@1002 : Code[20]);
    VAR
      ContBusinessRelation@1007 : Record 5054;
      Customer@1006 : Record 18;
      Cont@1005 : Record 5050;
      CustTemplate@1004 : Record 5105;
      ContComp@1003 : Record 5050;
    BEGIN
      //>>NAVDK,NAVNO
      //    IF Cont.GET(ContactNo) THEN
      //  "Sell-to Contact No." := Cont."No."
      //ELSE BEGIN
      //  "Sell-to Contact" := '';
      IF Cont.GET(ContactNo) THEN BEGIN
        "Sell-to Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          GetselltoCust(Cont.Name,Cont."Phone No.",Cont."Fax No.",Cont."E-Mail")
        ELSE
          IF Customer.GET("Sell-to Customer No.") THEN
            GetselltoCust(Customer.Name,Customer."Phone No.",Customer."Fax No.",Customer."E-Mail")
          ELSE
            ClearSellToCust;
      END ELSE BEGIN
        ClearSellToCust;
      //<<NAVDK
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF ("Sell-to Customer No." <> '') AND
           ("Sell-to Customer No." <> ContBusinessRelation."No.")
        THEN
          ERROR(Text037,Cont."No.",Cont.Name,"Sell-to Customer No.");
        IF "Sell-to Customer No." = '' THEN BEGIN
          SkipSellToContact := TRUE;
          VALIDATE("Sell-to Customer No.",ContBusinessRelation."No.");
          SkipSellToContact := FALSE;
        END;
      END ELSE BEGIN
        IF "Document Type" = "Document Type"::Quote THEN BEGIN
          Cont.TESTFIELD("Company No.");
          ContComp.GET(Cont."Company No.");
          "Sell-to Customer Name" := ContComp."Company Name";
          "Sell-to Customer Name 2" := ContComp."Name 2";
          "Ship-to Name" := ContComp."Company Name";
          "Ship-to Name 2" := ContComp."Name 2";
          "Ship-to Address" := ContComp.Address;
          "Ship-to Address 2" := ContComp."Address 2";
          "Ship-to City" := ContComp.City;
          "Ship-to Post Code" := ContComp."Post Code";
          "Ship-to County" := ContComp.County;
          VALIDATE("Ship-to Country/Region Code",ContComp."Country/Region Code");
          IF ("Sell-to Customer Template Code" = '') AND (NOT CustTemplate.ISEMPTY) THEN
            VALIDATE("Sell-to Customer Template Code",Cont.FindCustomerTemplate);
        END ELSE
          ERROR(Text039,Cont."No.",Cont.Name);
      END;

      IF Cont.Type = Cont.Type::Person THEN
        "Sell-to Contact" := Cont.Name
      ELSE
        IF Customer.GET("Sell-to Customer No.") THEN
          "Sell-to Contact" := Customer.Contact
        ELSE
          "Sell-to Contact" := '';

      IF "Document Type" = "Document Type"::Quote THEN BEGIN
        IF Customer.GET("Sell-to Customer No.") OR Customer.GET(ContBusinessRelation."No.") THEN BEGIN
          IF Customer."Copy Sell-to Addr. to Qte From" = Customer."Copy Sell-to Addr. to Qte From"::Company THEN BEGIN
            Cont.TESTFIELD("Company No.");
            Cont.GET(Cont."Company No.");
          END;
        END ELSE BEGIN
          Cont.TESTFIELD("Company No.");
          Cont.GET(Cont."Company No.");
        END;
        "Sell-to Address" := Cont.Address;
        "Sell-to Address 2" := Cont."Address 2";
        "Sell-to City" := Cont.City;
        "Sell-to Post Code" := Cont."Post Code";
        "Sell-to County" := Cont.County;
        "Sell-to Country/Region Code" := Cont."Country/Region Code";
      END;
      IF ("Sell-to Customer No." = "Bill-to Customer No.") OR
         ("Bill-to Customer No." = '')
      THEN
        IF "Service Contract No." = '' THEN //**4PS.n, call 31960
          VALIDATE("Bill-to Contact No.","Sell-to Contact No.");
    END;

    LOCAL PROCEDURE UpdateBillToCust@26(ContactNo@1000 : Code[20]);
    VAR
      ContBusinessRelation@1005 : Record 5054;
      Cust@1004 : Record 18;
      Cont@1003 : Record 5050;
      CustTemplate@1002 : Record 5105;
      ContComp@1001 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Bill-to Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Bill-to Contact" := Cont.Name
        ELSE
          IF Cust.GET("Bill-to Customer No.") THEN
            "Bill-to Contact" := Cust.Contact
          ELSE
            "Bill-to Contact" := '';
      END ELSE BEGIN
        "Bill-to Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF "Bill-to Customer No." = '' THEN BEGIN
          SkipBillToContact := TRUE;
          VALIDATE("Bill-to Customer No.",ContBusinessRelation."No.");
          SkipBillToContact := FALSE;
          "Bill-to Customer Template Code" := '';
        END ELSE
          IF "Bill-to Customer No." <> ContBusinessRelation."No." THEN
            ERROR(Text037,Cont."No.",Cont.Name,"Bill-to Customer No.");
      END ELSE BEGIN
        IF "Document Type" = "Document Type"::Quote THEN BEGIN
          Cont.TESTFIELD("Company No.");
          ContComp.GET(Cont."Company No.");
          "Bill-to Name" := ContComp."Company Name";
          "Bill-to Name 2" := ContComp."Name 2";
          "Bill-to Address" := ContComp.Address;
          "Bill-to Address 2" := ContComp."Address 2";
          "Bill-to City" := ContComp.City;
          "Bill-to Post Code" := ContComp."Post Code";
          "Bill-to County" := ContComp.County;
          "Bill-to Country/Region Code" := ContComp."Country/Region Code";
          "VAT Registration No." := ContComp."VAT Registration No.";
          VALIDATE("Currency Code",ContComp."Currency Code");
          "Language Code" := ContComp."Language Code";
          IF ("Bill-to Customer Template Code" = '') AND (NOT CustTemplate.ISEMPTY) THEN
            VALIDATE("Bill-to Customer Template Code",Cont.FindCustomerTemplate);
        END ELSE
          ERROR(Text039,Cont."No.",Cont.Name);
      END;
    END;

    LOCAL PROCEDURE GetShippingTime@23(CalledByFieldNo@1000 : Integer);
    BEGIN
      IF (CalledByFieldNo <> CurrFieldNo) AND (CurrFieldNo <> 0) THEN
        EXIT;

      IF ShippingAgentService.GET("Shipping Agent Code","Shipping Agent Service Code") THEN
        "Shipping Time" := ShippingAgentService."Shipping Time"
      ELSE BEGIN
        GetCust("Sell-to Customer No.");
        "Shipping Time" := Cust."Shipping Time"
      END;
      IF NOT (CalledByFieldNo IN [FIELDNO("Shipping Agent Code"),FIELDNO("Shipping Agent Service Code")]) THEN
        VALIDATE("Shipping Time");
    END;

    PROCEDURE CheckCreditMaxBeforeInsert@28();
    VAR
      SalesHeader@1001 : Record 36;
      ContBusinessRelation@1002 : Record 5054;
      Cont@1003 : Record 5050;
      CustCheckCreditLimit@1000 : Codeunit 312;
    BEGIN
      IF HideCreditCheckDialogue THEN
        EXIT;
      IF (GetFilterCustNo <> '') OR ("Sell-to Customer No." <> '') THEN BEGIN
        IF "Sell-to Customer No." <> '' THEN
          Cust.GET("Sell-to Customer No.")
        ELSE
          Cust.GET(GetFilterCustNo);
        IF Cust."Bill-to Customer No." <> '' THEN
          SalesHeader."Bill-to Customer No." := Cust."Bill-to Customer No."
        ELSE
          SalesHeader."Bill-to Customer No." := Cust."No.";
        CustCheckCreditLimit.SalesHeaderCheck(SalesHeader);
      END ELSE
        IF GetFilterContNo <> '' THEN BEGIN
          Cont.GET(GetFilterContNo);
          ContBusinessRelation.RESET;
          ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
          ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
          ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
          IF ContBusinessRelation.FINDFIRST THEN BEGIN
            Cust.GET(ContBusinessRelation."No.");
            IF Cust."Bill-to Customer No." <> '' THEN
              SalesHeader."Bill-to Customer No." := Cust."Bill-to Customer No."
            ELSE
              SalesHeader."Bill-to Customer No." := Cust."No.";
            CustCheckCreditLimit.SalesHeaderCheck(SalesHeader);
          END;
        END;
    END;

    PROCEDURE CreateInvtPutAwayPick@29();
    VAR
      WhseRequest@1000 : Record 5765;
    BEGIN
      TESTFIELD(Status,Status::Released);

      WhseRequest.RESET;
      WhseRequest.SETCURRENTKEY("Source Document","Source No.");
      CASE "Document Type" OF
        "Document Type"::Order:
          BEGIN
            IF "Shipping Advice" = "Shipping Advice"::Complete THEN
              CheckShippingAdvice;
            WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Sales Order");
          END;
        "Document Type"::"Return Order":
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Sales Return Order");
      END;
      WhseRequest.SETRANGE("Source No.","No.");
      REPORT.RUNMODAL(REPORT::"Create Invt Put-away/Pick/Mvmt",TRUE,FALSE,WhseRequest);
    END;

    PROCEDURE CreateTodo@30();
    VAR
      TempTodo@1000 : TEMPORARY Record 5080;
    BEGIN
      TESTFIELD("Sell-to Contact No.");
      TempTodo.CreateToDoFromSalesHeader(Rec);
    END;

    LOCAL PROCEDURE UpdateShipToAddress@31();
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        IF "Location Code" <> '' THEN BEGIN
          Location.GET("Location Code");
          "Ship-to Name" := Location.Name;
          "Ship-to Name 2" := Location."Name 2";
          "Ship-to Address" := Location.Address;
          "Ship-to Address 2" := Location."Address 2";
          "Ship-to City" := Location.City;
          "Ship-to Post Code" := Location."Post Code";
          "Ship-to County" := Location.County;
          "Ship-to Country/Region Code" := Location."Country/Region Code";
          "Ship-to Contact" := Location.Contact;
          "Ship-to Contact No." := ''; //**4PS.n
        END ELSE BEGIN
          CompanyInfo.GET;
          "Ship-to Code" := '';
          "Ship-to Name" := CompanyInfo."Ship-to Name";
          "Ship-to Name 2" := CompanyInfo."Ship-to Name 2";
          "Ship-to Address" := CompanyInfo."Ship-to Address";
          "Ship-to Address 2" := CompanyInfo."Ship-to Address 2";
          "Ship-to City" := CompanyInfo."Ship-to City";
          "Ship-to Post Code" := CompanyInfo."Ship-to Post Code";
          "Ship-to County" := CompanyInfo."Ship-to County";
          "Ship-to Country/Region Code" := CompanyInfo."Ship-to Country/Region Code";
          "Ship-to Contact" := CompanyInfo."Ship-to Contact";
          "Ship-to Contact No." := ''; //**4PS.n
        END;
      END;
    END;

    PROCEDURE ShowDocDim@32();
    VAR
      OldDimSetID@1000 : Integer;
    BEGIN
      DimMgt.SetTableID(DATABASE::"Sales Header"); //**4PS.n
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',"Document Type","No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF SalesLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE UpdateAllLineDim@34(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      ATOLink@1003 : Record 904;
      NewDimSetID@1002 : Integer;
    BEGIN
      // Update all lines with changed dimensions.

      IF NewParentDimSetID = OldParentDimSetID THEN
        EXIT;
      IF NOT HideValidationDialog AND GUIALLOWED THEN
        IF NOT CONFIRM(Text064) THEN
          EXIT;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.LOCKTABLE;
      IF SalesLine.FIND('-') THEN
        REPEAT
          NewDimSetID := DimMgt.GetDeltaDimSetID(SalesLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          IF SalesLine."Dimension Set ID" <> NewDimSetID THEN BEGIN
            SalesLine."Dimension Set ID" := NewDimSetID;
            DimMgt.UpdateGlobalDimFromDimSetID(
              SalesLine."Dimension Set ID",SalesLine."Shortcut Dimension 1 Code",SalesLine."Shortcut Dimension 2 Code");
            SalesLine.MODIFY;
            ATOLink.UpdateAsmDimFromSalesLine(SalesLine);
          END;
        UNTIL SalesLine.NEXT = 0;
    END;

    PROCEDURE SetAmountToApply@35(AppliesToDocNo@1000 : Code[20];CustomerNo@1001 : Code[20]);
    VAR
      CustLedgEntry@1002 : Record 21;
    BEGIN
      CustLedgEntry.SETCURRENTKEY("Document No.");
      CustLedgEntry.SETRANGE("Document No.",AppliesToDocNo);
      CustLedgEntry.SETRANGE("Customer No.",CustomerNo);
      CustLedgEntry.SETRANGE(Open,TRUE);
      IF CustLedgEntry.FINDFIRST THEN BEGIN
        IF CustLedgEntry."Amount to Apply" = 0 THEN  BEGIN
          CustLedgEntry.CALCFIELDS("Remaining Amount");
          CustLedgEntry."Amount to Apply" := CustLedgEntry."Remaining Amount";
        END ELSE
          CustLedgEntry."Amount to Apply" := 0;
        CustLedgEntry."Accepted Payment Tolerance" := 0;
        CustLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
        CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);
      END;
    END;

    PROCEDURE LookupAdjmtValueEntries@37(QtyType@1000 : 'General,Invoicing');
    VAR
      ItemLedgEntry@1004 : Record 32;
      SalesLine@1001 : Record 37;
      SalesShptLine@1005 : Record 111;
      ReturnRcptLine@1002 : Record 6661;
      TempValueEntry@1003 : TEMPORARY Record 5802;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      TempValueEntry.RESET;
      TempValueEntry.DELETEALL;

      CASE "Document Type" OF
        "Document Type"::Order,"Document Type"::Invoice:
          BEGIN
            IF SalesLine.FINDSET THEN
              REPEAT
                IF (SalesLine.Type = SalesLine.Type::Item) AND (SalesLine.Quantity <> 0) THEN
                  WITH SalesShptLine DO BEGIN
                    IF SalesLine."Shipment No." <> '' THEN BEGIN
                      SETRANGE("Document No.",SalesLine."Shipment No.");
                      SETRANGE("Line No.",SalesLine."Shipment Line No.");
                    END ELSE BEGIN
                      SETCURRENTKEY("Order No.","Order Line No.");
                      SETRANGE("Order No.",SalesLine."Document No.");
                      SETRANGE("Order Line No.",SalesLine."Line No.");
                    END;
                    SETRANGE(Correction,FALSE);
                    IF QtyType = QtyType::Invoicing THEN
                      SETFILTER("Qty. Shipped Not Invoiced",'<>0');

                    IF FINDSET THEN
                      REPEAT
                        FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
                        IF ItemLedgEntry.FINDSET THEN
                          REPEAT
                            CreateTempAdjmtValueEntries(TempValueEntry,ItemLedgEntry."Entry No.");
                          UNTIL ItemLedgEntry.NEXT = 0;
                      UNTIL NEXT = 0;
                  END;
              UNTIL SalesLine.NEXT = 0;
          END;
        "Document Type"::"Return Order","Document Type"::"Credit Memo":
          BEGIN
            IF SalesLine.FINDSET THEN
              REPEAT
                IF (SalesLine.Type = SalesLine.Type::Item) AND (SalesLine.Quantity <> 0) THEN
                  WITH ReturnRcptLine DO BEGIN
                    IF SalesLine."Return Receipt No." <> '' THEN BEGIN
                      SETRANGE("Document No.",SalesLine."Return Receipt No.");
                      SETRANGE("Line No.",SalesLine."Return Receipt Line No.");
                    END ELSE BEGIN
                      SETCURRENTKEY("Return Order No.","Return Order Line No.");
                      SETRANGE("Return Order No.",SalesLine."Document No.");
                      SETRANGE("Return Order Line No.",SalesLine."Line No.");
                    END;
                    SETRANGE(Correction,FALSE);
                    IF QtyType = QtyType::Invoicing THEN
                      SETFILTER("Return Qty. Rcd. Not Invd.",'<>0');

                    IF FINDSET THEN
                      REPEAT
                        FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
                        IF ItemLedgEntry.FINDSET THEN
                          REPEAT
                            CreateTempAdjmtValueEntries(TempValueEntry,ItemLedgEntry."Entry No.");
                          UNTIL ItemLedgEntry.NEXT = 0;
                      UNTIL NEXT = 0;
                  END;
              UNTIL SalesLine.NEXT = 0;
          END;
      END;
      PAGE.RUNMODAL(0,TempValueEntry);
    END;

    PROCEDURE GetCustomerVATRegistrationNumber@63() : Text;
    BEGIN
      EXIT("VAT Registration No.");
    END;

    PROCEDURE GetCustomerVATRegistrationNumberLbl@62() : Text;
    BEGIN
      EXIT(FIELDCAPTION("VAT Registration No."));
    END;

    PROCEDURE GetCustomerGlobalLocationNumber@164() : Text;
    BEGIN
      EXIT('');
    END;

    PROCEDURE GetCustomerGlobalLocationNumberLbl@161() : Text;
    BEGIN
      EXIT('');
    END;

    LOCAL PROCEDURE CreateTempAdjmtValueEntries@38(VAR TempValueEntry@1001 : TEMPORARY Record 5802;ItemLedgEntryNo@1000 : Integer);
    VAR
      ValueEntry@1002 : Record 5802;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item Ledger Entry No.");
        SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
        IF FINDSET THEN
          REPEAT
            IF Adjustment THEN BEGIN
              TempValueEntry := ValueEntry;
              IF TempValueEntry.INSERT THEN;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE GetPstdDocLinesToRevere@39();
    VAR
      SalesPostedDocLines@1000 : Page 5850;
    BEGIN
      GetCust("Sell-to Customer No.");
      SalesPostedDocLines.SetToSalesHeader(Rec);
      SalesPostedDocLines.SETRECORD(Cust);
      SalesPostedDocLines.LOOKUPMODE := TRUE;
      IF SalesPostedDocLines.RUNMODAL = ACTION::LookupOK THEN
        SalesPostedDocLines.CopyLineToDoc;

      CLEAR(SalesPostedDocLines);
    END;

    PROCEDURE CalcInvDiscForHeader@45();
    VAR
      SalesInvDisc@1000 : Codeunit 60;
    BEGIN
      SalesSetup.GET;
      IF SalesSetup."Calc. Inv. Discount" THEN
        SalesInvDisc.CalculateIncDiscForHeader(Rec);
    END;

    PROCEDURE SetSecurityFilterOnRespCenter@43();
    BEGIN
      IF UserSetupMgt.GetSalesFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserSetupMgt.GetSalesFilter);
        FILTERGROUP(0);
      END;

      SETRANGE("Date Filter",0D,WORKDATE - 1);
    END;

    PROCEDURE Authorize@50();
    VAR
      DOPaymentTransLogEntry@1001 : Record 829;
    BEGIN
      IF NOT DOPaymentMgt.IsValidPaymentMethod("Payment Method Code") THEN
        ERROR(Text069,FIELDCAPTION("Payment Method Code"));
      DOPaymentTransLogMgt.FindValidAuthorizationEntry("Document Type","No.",DOPaymentTransLogEntry);
      IF DOPaymentTransLogEntry."Entry No." = DOPaymentMgt.AuthorizeSalesDoc(Rec,0,TRUE) THEN
        ERROR(Text067,
          DOPaymentTransLogEntry."Document Type",
          DOPaymentTransLogEntry.Amount,
          DOPaymentTransLogEntry."Transaction Date-Time",
          DOPaymentTransLogEntry."Document No.");
      "Authorization Required" := TRUE;
      MODIFY;
    END;

    PROCEDURE Void@51();
    VAR
      DOPaymentTransLogEntry@1001 : Record 829;
      DOPaymentTransLogMgt@1002 : Codeunit 829;
    BEGIN
      IF NOT DOPaymentMgt.IsValidPaymentMethod("Payment Method Code") THEN
        ERROR(Text069,FIELDCAPTION("Payment Method Code"));
      CLEAR(DOPaymentMgt);
      DOPaymentMgt.CheckSalesDoc(Rec);
      IF DOPaymentTransLogMgt.FindValidAuthorizationEntry("Document Type","No.",DOPaymentTransLogEntry) THEN
        DOPaymentMgt.VoidSalesDoc(Rec,DOPaymentTransLogEntry)
      ELSE
        MESSAGE(Text068);
      "Authorization Required" := FALSE;
      MODIFY;
    END;

    PROCEDURE GetCreditcardNumber@44() : Text[20];
    VAR
      DOPaymentCreditCard@1001 : Record 827;
    BEGIN
      IF "Credit Card No." = '' THEN
        EXIT('');
      EXIT(DOPaymentCreditCard.GetCreditCardNumber("Credit Card No."));
    END;

    LOCAL PROCEDURE SynchronizeForReservations@42(VAR NewSalesLine@1000 : Record 37;OldSalesLine@1001 : Record 37);
    BEGIN
      NewSalesLine.CALCFIELDS("Reserved Quantity");
      IF NewSalesLine."Reserved Quantity" = 0 THEN
        EXIT;
      IF NewSalesLine."Location Code" <> OldSalesLine."Location Code" THEN
        NewSalesLine.VALIDATE("Location Code",OldSalesLine."Location Code");
      IF NewSalesLine."Bin Code" <> OldSalesLine."Bin Code" THEN
        NewSalesLine.VALIDATE("Bin Code",OldSalesLine."Bin Code");
      IF NewSalesLine.MODIFY THEN;
    END;

    PROCEDURE InventoryPickConflict@46(DocType@1002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocNo@1003 : Code[20];ShippingAdvice@1004 : 'Partial,Complete') : Boolean;
    VAR
      WarehouseActivityLine@1000 : Record 5767;
      SalesLine@1001 : Record 37;
    BEGIN
      IF ShippingAdvice <> ShippingAdvice::Complete THEN
        EXIT(FALSE);
      WarehouseActivityLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
      WarehouseActivityLine.SETRANGE("Source Type",DATABASE::"Sales Line");
      WarehouseActivityLine.SETRANGE("Source Subtype",DocType);
      WarehouseActivityLine.SETRANGE("Source No.",DocNo);
      IF WarehouseActivityLine.ISEMPTY THEN
        EXIT(FALSE);
      SalesLine.SETRANGE("Document Type",DocType);
      SalesLine.SETRANGE("Document No.",DocNo);
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      IF SalesLine.ISEMPTY THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE WhseShpmntConflict@52(DocType@1002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocNo@1001 : Code[20];ShippingAdvice@1000 : 'Partial,Complete') : Boolean;
    VAR
      WarehouseShipmentLine@1003 : Record 7321;
    BEGIN
      IF ShippingAdvice <> ShippingAdvice::Complete THEN
        EXIT(FALSE);
      WarehouseShipmentLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
      WarehouseShipmentLine.SETRANGE("Source Type",DATABASE::"Sales Line");
      WarehouseShipmentLine.SETRANGE("Source Subtype",DocType);
      WarehouseShipmentLine.SETRANGE("Source No.",DocNo);
      IF WarehouseShipmentLine.ISEMPTY THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckCrLimit@47();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader := Rec;
      IF GUIALLOWED AND
         (CurrFieldNo <> 0) AND
         ("Document Type" <= "Document Type"::Invoice) AND
         SalesHeader.FIND
      THEN BEGIN
        "Amount Including VAT" := 0;
        IF "Document Type" = "Document Type"::Order THEN
          IF BilltoCustomerNoChanged THEN BEGIN
            SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
            SalesLine.SETRANGE("Document No.","No.");
            SalesLine.CALCSUMS("Outstanding Amount","Shipped Not Invoiced");
            "Amount Including VAT" := SalesLine."Outstanding Amount" + SalesLine."Shipped Not Invoiced";
          END;
        CustCheckCreditLimit.SalesHeaderCheck(Rec);
        CALCFIELDS("Amount Including VAT");
      END;
    END;

    PROCEDURE QtyToShipIsZero@49() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Qty. to Ship",'<>0');
      EXIT(SalesLine.ISEMPTY);
    END;

    LOCAL PROCEDURE IsApprovedForPosting@53() : Boolean;
    VAR
      PrepaymentMgt@1001 : Codeunit 441;
    BEGIN
      IF ApprovalsMgmt.PrePostApprovalCheckSales(Rec) THEN BEGIN
        IF PrepaymentMgt.TestSalesPrepayment(Rec) THEN
          ERROR(STRSUBSTNO(Text071,"Document Type","No."));
        IF "Document Type" = "Document Type"::Order THEN
          IF PrepaymentMgt.TestSalesPayment(Rec) THEN
            ERROR(STRSUBSTNO(Text072,"Document Type","No."));
        EXIT(TRUE);
      END;
    END;

    PROCEDURE IsApprovedForPostingBatch@54() : Boolean;
    VAR
      PrepaymentMgt@1000 : Codeunit 441;
    BEGIN
      IF ApprovalsMgmt.PrePostApprovalCheckSales(Rec) THEN BEGIN
        IF PrepaymentMgt.TestSalesPrepayment(Rec) THEN
          EXIT(FALSE);
        IF PrepaymentMgt.TestSalesPayment(Rec) THEN
          EXIT(FALSE);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetLegalStatement@60() : Text;
    BEGIN
      //NAVFI
      GLSetup.GET;
      IF GLSetup."Finnish localization active" AND "EU 3-Party Trade" THEN
        EXIT(FIELDCAPTION("EU 3-Party Trade"));
      //NAVFI
      SalesSetup.GET;
      EXIT(SalesSetup.GetLegalStatement);
    END;

    PROCEDURE ClearSellToCust@1060000();
    BEGIN
      //NAVDK
      "Sell-to Contact" := '';
      "Sell-to Contact Phone No." := '';
      "Sell-to Contact Fax No." := '';
      "Sell-to Contact E-Mail" := '';
      "Sell-to Contact Role" := "Sell-to Contact Role"::" ";
    END;

    PROCEDURE GetselltoCust@1060002(Name@1102601004 : Text[50];PhoneNo@1060003 : Text[30];FaxNo@1060004 : Text[30];Email@1060005 : Text[80]);
    BEGIN
      //NAVDK
      "Sell-to Contact" := Name;
      "Sell-to Contact Phone No." := PhoneNo;
      "Sell-to Contact Fax No." := FaxNo;
      "Sell-to Contact E-Mail" := Email;
      "Sell-to Contact Role" := "Sell-to Contact Role"::" ";
    END;

    PROCEDURE SendToPosting@57(PostingCodeunitID@1000 : Integer);
    BEGIN
      IF NOT IsApprovedForPosting THEN
        EXIT;
      CODEUNIT.RUN(PostingCodeunitID,Rec);
    END;

    PROCEDURE CancelBackgroundPosting@48();
    VAR
      SalesPostViaJobQueue@1000 : Codeunit 88;
    BEGIN
      SalesPostViaJobQueue.CancelQueueEntry(Rec);
    END;

    PROCEDURE LinkSalesDocWithOpportunity@79(OldOpportunityNo@1000 : Code[20]);
    VAR
      SalesHeader@1001 : Record 36;
      Opportunity@1002 : Record 5092;
    BEGIN
      IF "Opportunity No." <> OldOpportunityNo THEN BEGIN
        IF "Opportunity No." <> '' THEN
          IF Opportunity.GET("Opportunity No.") THEN BEGIN
            Opportunity.TESTFIELD(Status,Opportunity.Status::"In Progress");
            IF Opportunity."Sales Document No." <> '' THEN BEGIN
              IF CONFIRM(Text048,FALSE,Opportunity."Sales Document No.",Opportunity."No.") THEN BEGIN
                IF SalesHeader.GET("Document Type"::Quote,Opportunity."Sales Document No.") THEN BEGIN
                  SalesHeader."Opportunity No." := '';
                  SalesHeader.MODIFY;
                END;
                UpdateOpportunityLink(Opportunity,Opportunity."Sales Document Type"::Quote,"No.");
              END ELSE
                "Opportunity No." := OldOpportunityNo;
            END ELSE
              UpdateOpportunityLink(Opportunity,Opportunity."Sales Document Type"::Quote,"No.");
          END;
        IF (OldOpportunityNo <> '') AND Opportunity.GET(OldOpportunityNo) THEN
          UpdateOpportunityLink(Opportunity,Opportunity."Sales Document Type"::" ",'');
      END;
    END;

    LOCAL PROCEDURE UpdateOpportunityLink@80(Opportunity@1000 : Record 5092;SalesDocumentType@1001 : Option;SalesHeaderNo@1002 : Code[20]);
    BEGIN
      Opportunity."Sales Document Type" := SalesDocumentType;
      Opportunity."Sales Document No." := SalesHeaderNo;
      Opportunity.MODIFY;
    END;

    LOCAL PROCEDURE SynchronizeAsmHeader@56();
    VAR
      AsmHeader@1003 : Record 900;
      ATOLink@1002 : Record 904;
      Window@1000 : Dialog;
    BEGIN
      ATOLink.SETCURRENTKEY(Type,"Document Type","Document No.");
      ATOLink.SETRANGE(Type,ATOLink.Type::Sale);
      ATOLink.SETRANGE("Document Type","Document Type");
      ATOLink.SETRANGE("Document No.","No.");
      IF ATOLink.FINDSET THEN
        REPEAT
          IF AsmHeader.GET(ATOLink."Assembly Document Type",ATOLink."Assembly Document No.") THEN
            IF "Posting Date" <> AsmHeader."Posting Date" THEN BEGIN
              Window.OPEN(STRSUBSTNO(SynchronizingMsg,"No.",AsmHeader."No."));
              AsmHeader.VALIDATE("Posting Date","Posting Date");
              AsmHeader.MODIFY;
              Window.CLOSE;
            END;
        UNTIL ATOLink.NEXT = 0;
    END;

    PROCEDURE CheckShippingAdvice@55();
    VAR
      SalesLine@1000 : Record 37;
      QtyToShipBaseTotal@1002 : Decimal;
      Result@1001 : Boolean;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETRANGE("Drop Shipment",FALSE);
      Result := TRUE;
      IF SalesLine.FINDSET THEN
        REPEAT
          IF SalesLine.IsShipment THEN BEGIN
            QtyToShipBaseTotal += SalesLine."Qty. to Ship (Base)";
            IF SalesLine."Quantity (Base)" <>
               SalesLine."Qty. to Ship (Base)" + SalesLine."Qty. Shipped (Base)"
            THEN
              Result := FALSE;
          END;
        UNTIL SalesLine.NEXT = 0;
      IF QtyToShipBaseTotal = 0 THEN
        Result := TRUE;
      IF NOT Result THEN
        ERROR(ShippingAdviceErr);
    END;

    LOCAL PROCEDURE GetFilterCustNo@64() : Code[20];
    BEGIN
      IF GETFILTER("Sell-to Customer No.") <> '' THEN
        IF GETRANGEMIN("Sell-to Customer No.") = GETRANGEMAX("Sell-to Customer No.") THEN
          EXIT(GETRANGEMAX("Sell-to Customer No."));
    END;

    LOCAL PROCEDURE GetFilterContNo@65() : Code[20];
    BEGIN
      IF GETFILTER("Sell-to Contact No.") <> '' THEN
        IF GETRANGEMIN("Sell-to Contact No.") = GETRANGEMAX("Sell-to Contact No.") THEN
          EXIT(GETRANGEMAX("Sell-to Contact No."));
    END;

    LOCAL PROCEDURE CheckCreditLimitIfLineNotInsertedYet@66();
    BEGIN
      IF "No." = '' THEN BEGIN
        HideCreditCheckDialogue := FALSE;
        CheckCreditMaxBeforeInsert;
        HideCreditCheckDialogue := TRUE;
        InitInsert;
      END;
    END;

    PROCEDURE InvoicedLineExists@156() : Boolean;
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER(Type,'<>%1',SalesLine.Type::" ");
      SalesLine.SETFILTER("Quantity Invoiced",'<>%1',0);
      EXIT(NOT SalesLine.ISEMPTY);
    END;

    PROCEDURE CreateDimSetForPrepmtAccDefaultDim@73();
    VAR
      SalesLine@1000 : Record 37;
      TempSalesLine@1003 : TEMPORARY Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Prepmt. Amt. Inv.",'<>%1',0);
      IF SalesLine.FINDSET THEN
        REPEAT
          CollectParamsInBufferForCreateDimSet(TempSalesLine,SalesLine);
        UNTIL SalesLine.NEXT = 0;
      TempSalesLine.RESET;
      TempSalesLine.MARKEDONLY(FALSE);
      IF TempSalesLine.FINDSET THEN
        REPEAT
          SalesLine.CreateDim(DATABASE::"G/L Account",TempSalesLine."No.",
            DATABASE::Job,TempSalesLine."Job No.",
            DATABASE::"Responsibility Center",TempSalesLine."Responsibility Center",
            0,'',0,'',0,'',0,''); //**4PS.n
        UNTIL TempSalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CollectParamsInBufferForCreateDimSet@72(VAR TempSalesLine@1000 : TEMPORARY Record 37;SalesLine@1001 : Record 37);
    VAR
      GenPostingSetup@1003 : Record 252;
      DefaultDimension@1002 : Record 352;
    BEGIN
      TempSalesLine.SETRANGE("Gen. Bus. Posting Group",SalesLine."Gen. Bus. Posting Group");
      TempSalesLine.SETRANGE("Gen. Prod. Posting Group",SalesLine."Gen. Prod. Posting Group");
      IF NOT TempSalesLine.FINDFIRST THEN BEGIN
        GenPostingSetup.GET(SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");
        GenPostingSetup.TESTFIELD("Sales Prepayments Account");
        DefaultDimension.SETRANGE("Table ID",DATABASE::"G/L Account");
        DefaultDimension.SETRANGE("No.",GenPostingSetup."Sales Prepayments Account");
        InsertTempSalesLineInBuffer(TempSalesLine,SalesLine,GenPostingSetup."Sales Prepayments Account",DefaultDimension.ISEMPTY);
      END ELSE
        IF NOT TempSalesLine.MARK THEN BEGIN
          TempSalesLine.SETRANGE("Job No.",SalesLine."Job No.");
          TempSalesLine.SETRANGE("Responsibility Center",SalesLine."Responsibility Center");
          IF TempSalesLine.ISEMPTY THEN
            InsertTempSalesLineInBuffer(TempSalesLine,SalesLine,TempSalesLine."No.",FALSE);
        END;
    END;

    LOCAL PROCEDURE InsertTempSalesLineInBuffer@71(VAR TempSalesLine@1001 : TEMPORARY Record 37;SalesLine@1000 : Record 37;AccountNo@1002 : Code[20];DefaultDimensionsNotExist@1003 : Boolean);
    BEGIN
      TempSalesLine.INIT;
      TempSalesLine."Line No." := SalesLine."Line No.";
      TempSalesLine."No." := AccountNo;
      TempSalesLine."Job No." := SalesLine."Job No.";
      TempSalesLine."Responsibility Center" := SalesLine."Responsibility Center";
      TempSalesLine."Gen. Bus. Posting Group" := SalesLine."Gen. Bus. Posting Group";
      TempSalesLine."Gen. Prod. Posting Group" := SalesLine."Gen. Prod. Posting Group";
      TempSalesLine.MARK := DefaultDimensionsNotExist;
      TempSalesLine.INSERT;
    END;

    PROCEDURE OpenSalesOrderStatistics@70();
    BEGIN
      CalcInvDiscForHeader;
      CreateDimSetForPrepmtAccDefaultDim;
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Sales Order Statistics",Rec);
    END;

    PROCEDURE GetCardpageID@58() : Integer;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          EXIT(PAGE::"Sales Quote");
        "Document Type"::Order:
          EXIT(PAGE::"Sales Order");
        "Document Type"::Invoice:
          EXIT(PAGE::"Sales Invoice");
        "Document Type"::"Credit Memo":
          EXIT(PAGE::"Sales Credit Memo");
        "Document Type"::"Blanket Order":
          EXIT(PAGE::"Blanket Sales Order");
        "Document Type"::"Return Order":
          EXIT(PAGE::"Sales Return Order");
      END;
    END;

    PROCEDURE CheckAvailableCreditLimit@67() : Decimal;
    VAR
      Customer@1000 : Record 18;
      AvailableCreditLimit@1002 : Decimal;
    BEGIN
      IF NOT Customer.GET("Bill-to Customer No.") THEN
        Customer.GET("Sell-to Customer No.");

      AvailableCreditLimit := Customer.CalcAvailableCredit;

      IF AvailableCreditLimit < 0 THEN
        OnCustomerCreditLimitExceeded
      ELSE
        OnCustomerCreditLimitNotExceeded;

      EXIT(AvailableCreditLimit);
    END;

    PROCEDURE SetStatus@99(NewStatus@1000 : Option);
    BEGIN
      Status := NewStatus;
      MODIFY;
    END;

    LOCAL PROCEDURE TestSalesLineFieldsBeforeRecreate@68();
    BEGIN
      SalesLine.TESTFIELD("Job No.",'');
      SalesLine.TESTFIELD("Job Contract Entry No.",0);
      SalesLine.TESTFIELD("Quantity Shipped",0);
      SalesLine.TESTFIELD("Quantity Invoiced",0);
      SalesLine.TESTFIELD("Return Qty. Received",0);
      SalesLine.TESTFIELD("Shipment No.",'');
      SalesLine.TESTFIELD("Return Receipt No.",'');
      SalesLine.TESTFIELD("Blanket Order No.",'');
      SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
    END;

    LOCAL PROCEDURE RecreateReservEntryReqLine@75(VAR TempSalesLine@1000 : TEMPORARY Record 37;VAR TempATOLink@1003 : TEMPORARY Record 904;VAR ATOLink@1002 : Record 904);
    BEGIN
      REPEAT
        TestSalesLineFieldsBeforeRecreate;
        IF (SalesLine."Location Code" <> "Location Code") AND NOT SalesLine.IsServiceItem THEN
          SalesLine.VALIDATE("Location Code","Location Code");
        TempSalesLine := SalesLine;
        IF SalesLine.Nonstock THEN BEGIN
          SalesLine.Nonstock := FALSE;
          SalesLine.MODIFY;
        END;

        IF ATOLink.AsmExistsForSalesLine(TempSalesLine) THEN BEGIN
          TempATOLink := ATOLink;
          TempATOLink.INSERT;
          ATOLink.DELETE;
        END;

        TempSalesLine.INSERT;
        RecreateReservEntry(SalesLine,0,TRUE);
        RecreateReqLine(SalesLine,0,TRUE);
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TransferItemChargeAssgntSalesToTemp@69(VAR ItemChargeAssgntSales@1001 : Record 5809;VAR TempItemChargeAssgntSales@1000 : TEMPORARY Record 5809);
    BEGIN
      IF ItemChargeAssgntSales.FINDSET THEN BEGIN
        REPEAT
          TempItemChargeAssgntSales.INIT;
          TempItemChargeAssgntSales := ItemChargeAssgntSales;
          TempItemChargeAssgntSales.INSERT;
        UNTIL ItemChargeAssgntSales.NEXT = 0;
        ItemChargeAssgntSales.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE CreateSalesLine@78(VAR TempSalesLine@1000 : TEMPORARY Record 37;ChangedFieldName@1100525000 : Text[100]);
    BEGIN
      SalesLine.INIT;
      SalesLine."Line No." := SalesLine."Line No." + 10000;
      SalesLine.VALIDATE(Type,TempSalesLine.Type);
      //IF TempSalesLine."No." = '' THEN BEGIN //**4PS.o
      IF (TempSalesLine."No." = '') AND (TempSalesLine."Plant Type" = '') THEN BEGIN //**4PS.n
        SalesLine.VALIDATE(Description,TempSalesLine.Description);
        SalesLine.VALIDATE("Description 2",TempSalesLine."Description 2");
      END ELSE BEGIN
        //**4PS.sn
        IF TempSalesLine."Plant Type" <> '' THEN BEGIN
          SalesLine.VALIDATE("Plant Type", TempSalesLine."Plant Type");
          SalesLine."Number of Time Units" := TempSalesLine."Number of Time Units";
        END ELSE
        //**4PS.en
          SalesLine.VALIDATE("No.",TempSalesLine."No.");
        IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
          SalesLine.VALIDATE("Unit of Measure Code",TempSalesLine."Unit of Measure Code");
          SalesLine.VALIDATE("Variant Code",TempSalesLine."Variant Code");
          IF TempSalesLine.Quantity <> 0 THEN BEGIN
            SalesLine.VALIDATE(Quantity,TempSalesLine.Quantity);
            SalesLine.VALIDATE("Qty. to Assemble to Order",TempSalesLine."Qty. to Assemble to Order");
          END;
          SalesLine."Purchase Order No." := TempSalesLine."Purchase Order No.";
          SalesLine."Purch. Order Line No." := TempSalesLine."Purch. Order Line No.";
          SalesLine."Drop Shipment" := SalesLine."Purch. Order Line No." <> 0;
        END;
      END;
      //**4PS.sn
      IF "Document Type" = "Document Type"::Quote THEN
        IF (SalesLine.Type <> 0) THEN
          IF ChangedFieldName = FIELDCAPTION("Sell-to Customer Template Code") THEN
            SalesLine.VALIDATE("Unit Price",TempSalesLine."Unit Price");
      SalesLine."Plant No." := TempSalesLine."Plant No.";
      SalesLine."Job No." := TempSalesLine."Job No.";
      SalesLine."Employee No." := TempSalesLine."Employee No." ;
      SalesLine."Shortcut Dimension 1 Code" := TempSalesLine."Shortcut Dimension 1 Code";
      SalesLine."Shortcut Dimension 2 Code" := TempSalesLine."Shortcut Dimension 2 Code";
      SalesLine."Project Invoice" := TempSalesLine."Project Invoice";
      SalesLine."Installment Invoice" := TempSalesLine."Installment Invoice";
      SalesLine."Service Invoice" := TempSalesLine."Service Invoice";
      SalesLine."Item No." := TempSalesLine."Item No.";
      SalesLine."Basic Item" := TempSalesLine."Basic Item";
      SalesLine."Trade Item" := TempSalesLine."Trade Item";
      SalesLine.Manufacturer := TempSalesLine.Manufacturer;
      SalesLine."Vendor (Trade Item)" := TempSalesLine."Vendor (Trade Item)";
      SalesLine."Service Contract No." := TempSalesLine."Service Contract No.";
      SalesLine."Service Order No." := TempSalesLine."Service Order No.";
      SalesLine."Service Location No." := TempSalesLine."Service Location No.";
      SalesLine."Rental Unit" := TempSalesLine."Rental Unit";
      SalesLine."Additional Cost (Service)" := TempSalesLine."Additional Cost (Service)";
      SalesLine."Removal Contribution" := TempSalesLine."Removal Contribution";
      SalesLine.Element := TempSalesLine.Element;
      SalesLine."Cost Component" := TempSalesLine."Cost Component";
      SalesLine."Extension Contract" := TempSalesLine."Extension Contract";
      SalesLine."Blanket Order No." := TempSalesLine."Blanket Order No.";
      SalesLine."Blanket Order Line No." := TempSalesLine."Blanket Order Line No.";
      SalesLine."Location Code" := TempSalesLine."Location Code";
      SalesLine."Employee No." := TempSalesLine."Employee No.";
      SalesLine."Rental Unit" := TempSalesLine."Rental Unit";
      SalesLine."Additional Cost (Service)" := TempSalesLine."Additional Cost (Service)";
      SalesLine."Removal Contribution" := TempSalesLine."Removal Contribution";
      SalesLine."Arrival Date" := TempSalesLine."Arrival Date";
      SalesLine."Removal Date" := TempSalesLine."Removal Date";
      SalesLine."Rental Starting Date" := TempSalesLine."Rental Starting Date";
      SalesLine."Rental Ending Date" := TempSalesLine."Rental Ending Date";
      SalesLine."Alternative No." := TempSalesLine."Alternative No.";
      SalesLine.Optional := TempSalesLine.Optional;
      SalesLine."Original Quantity" := TempSalesLine."Original Quantity";
      SalesLine."BOM Item No." := TempSalesLine."BOM Item No.";
      SalesLine."Level BOM" := TempSalesLine."Level BOM";
      IF TempSalesLine."Part of Line" <> 0 THEN
        ConvPartOfLinetoNewPartOfLine(TempSalesLine."Part of Line",SalesLine."Part of Line");
      //**4PS.en
      SalesLine.INSERT;
    END;

    LOCAL PROCEDURE CreateItemChargeAssgntSales@83(VAR ItemChargeAssgntSales@1001 : Record 5809;VAR TempItemChargeAssgntSales@1000 : TEMPORARY Record 5809;VAR TempSalesLine@1002 : TEMPORARY Record 37;VAR TempInteger@1003 : TEMPORARY Record 2000000026);
    BEGIN
      IF TempSalesLine.FINDSET THEN
        REPEAT
          TempItemChargeAssgntSales.SETRANGE("Document Line No.",TempSalesLine."Line No.");
          IF TempItemChargeAssgntSales.FINDSET THEN BEGIN
            REPEAT
              TempInteger.FINDFIRST;
              ItemChargeAssgntSales.INIT;
              ItemChargeAssgntSales := TempItemChargeAssgntSales;
              ItemChargeAssgntSales."Document Line No." := TempInteger.Number;
              ItemChargeAssgntSales.VALIDATE("Unit Cost",0);
              ItemChargeAssgntSales.INSERT;
            UNTIL TempItemChargeAssgntSales.NEXT = 0;
            TempInteger.DELETE;
          END;
        UNTIL TempSalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateOutboundWhseHandlingTime@84();
    BEGIN
      IF "Location Code" <> '' THEN BEGIN
        IF Location.GET("Location Code") THEN
          "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
      END ELSE
        IF InvtSetup.GET THEN
          "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
    END;

    [Integration(TRUE)]
    PROCEDURE OnCheckSalesPostRestrictions@115();
    BEGIN
    END;

    [Integration(TRUE)]
    PROCEDURE OnCustomerCreditLimitExceeded@74();
    BEGIN
    END;

    [Integration(TRUE)]
    PROCEDURE OnCustomerCreditLimitNotExceeded@76();
    BEGIN
    END;

    [Integration(TRUE)]
    PROCEDURE OnCheckSalesReleaseRestrictions@81();
    BEGIN
    END;

    PROCEDURE DeferralHeadersExist@82() : Boolean;
    VAR
      DeferralHeader@1000 : Record 1701;
      DeferralUtilities@1001 : Codeunit 1720;
    BEGIN
      DeferralHeader.SETRANGE("Deferral Doc. Type",DeferralUtilities.GetSalesDeferralDocType);
      DeferralHeader.SETRANGE("Gen. Jnl. Template Name",'');
      DeferralHeader.SETRANGE("Gen. Jnl. Batch Name",'');
      DeferralHeader.SETRANGE("Document Type","Document Type");
      DeferralHeader.SETRANGE("Document No.","No.");
      EXIT(NOT DeferralHeader.ISEMPTY);
    END;

    LOCAL PROCEDURE ConfirmUpdateDeferralDate@85();
    BEGIN
      IF HideValidationDialog THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(DeferralLineQst,FALSE);
      IF Confirmed THEN
        UpdateSalesLines(SalesLine.FIELDCAPTION("Deferral Code"),FALSE);
    END;

    PROCEDURE CheckInvoiceAddress@1210190002();
    VAR
      AdrsRec@1210190000 : Record 222;
    BEGIN
      //**4PS
      IF "Alternative Bill-to Address" <> '' THEN BEGIN
        AdrsRec.GET("Bill-to Customer No.", "Alternative Bill-to Address");
        "Bill-to Name" := AdrsRec.Name;
        "Bill-to Name 2" := AdrsRec."Name 2";
        "Bill-to Address" := AdrsRec.Address;
        "Bill-to Address 2" := AdrsRec."Address 2";
        "Bill-to City" := AdrsRec.City;
        "Bill-to Post Code" := AdrsRec."Post Code";
        "Bill-to County" := AdrsRec.County;
        "Bill-to Country/Region Code" := AdrsRec."Country/Region Code";
        "Bill-to Contact" := AdrsRec.Contact;
      END ELSE BEGIN
        TESTFIELD("Bill-to Customer No.");
        Cust.GET("Bill-to Customer No.");
        "Bill-to Name" := Cust.Name;
        "Bill-to Name 2" := Cust."Name 2";
        "Bill-to Address" := Cust.Address;
        "Bill-to Address 2" := Cust."Address 2";
        "Bill-to City" := Cust.City;
        "Bill-to Post Code" := Cust."Post Code";
        "Bill-to County" := Cust.County;
        "Bill-to Country/Region Code" := Cust."Country/Region Code";
        "Bill-to Contact" := Cust.Contact;
      END;
    END;

    PROCEDURE FillWKAPercentages@1100485000();
    VAR
      lProjPrincipalRec@1100485000 : Record 11012005;
      lProjRec@1100485001 : Record 11072003;
    BEGIN
      //**4PS
      IF NOT ("Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"]) THEN
        EXIT;

      IF (CurrFieldNo = 0) OR "Specific WKA Percentages" THEN
        EXIT;

      "% Labor" := 0;
      "% to B Account" := 0;
      IF ("Sell-to Customer No." = '') OR ("Job No." = '') THEN
        EXIT;

      lProjRec.GET("Job No.");
      IF lProjRec."Contract Type" <> lProjRec."Contract Type"::Subcontracting THEN
        EXIT;

      "% Labor" := lProjRec."% Labor";
      "% to B Account" := lProjRec."% to B Account";
      "Calculate B Amounts based on" := lProjRec."Calculate B Amounts based on";

      IF NOT lProjPrincipalRec.GET("Job No.", "Sell-to Customer No.") THEN
        EXIT;

      IF lProjPrincipalRec."Specific WKA Percentages" THEN BEGIN
        "% Labor" := lProjPrincipalRec."% Labor";
        "% to B Account" := lProjPrincipalRec."% to B Account";
      END;
    END;

    PROCEDURE DetermineRemovalContribution@1100485002();
    VAR
      lvSalesLineRec@1100485003 : Record 37;
      lvSalesLineRec2@1100485002 : Record 37;
      lvItemRec@1100485001 : Record 27;
      lvTradeItemRec@1100485000 : Record 11012317;
      lvCostObject@1100485004 : Code[20];
      lvRemovalContribution@1100485005 : Decimal;
      lvServSetup@1100485007 : Record 11012800;
      lvProjCustRec@1100485006 : Record 11012005;
      lvDimValRec@1100485009 : Record 349;
      lvPostingSetup@1100485008 : Record 252;
      lvSalesReceivablesSetup@1100525000 : Record 311;
    BEGIN
      //**4PS
      lvSalesLineRec.SETRANGE("Document Type", "Document Type");
      lvSalesLineRec.SETRANGE("Document No.", "No.");
      lvSalesLineRec.SETRANGE("Removal Contribution", TRUE);
      lvSalesLineRec.SETRANGE("Quantity Shipped", 0);  //db, 09-01-07 (skip processed lines after re-open order)
      lvSalesLineRec.SETRANGE("Cost Plus Line No.", 0);
      lvSalesLineRec.DELETEALL(TRUE);

      lvSalesReceivablesSetup.GET;                                       //CALL C025831 n
      IF NOT lvSalesReceivablesSetup."Charge Removal Contribution" THEN  //CALL C025831 n
        EXIT;                                                            //CALL C025831 n

      lvSalesLineRec.SETRANGE("Removal Contribution", FALSE);
      lvSalesLineRec.SETRANGE("Cost Plus Line No.");
      IF lvSalesLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          lvCostObject := '';
          lvRemovalContribution := 0;

          IF lvSalesLineRec."Trade Item" <> '' THEN BEGIN
            lvTradeItemRec.GET(lvSalesLineRec."Vendor (Trade Item)", lvSalesLineRec."Trade Item");
            lvCostObject := lvTradeItemRec."Cost Object (Removal)";
            lvRemovalContribution := lvTradeItemRec."Removal Contribution";
            IF lvRemovalContribution <> 0 THEN
              lvTradeItemRec.TESTFIELD("Cost Object (Removal)");
          END ELSE BEGIN
            IF lvSalesLineRec."Item No." <> '' THEN BEGIN
              lvItemRec.GET(lvSalesLineRec."Item No.");
              lvCostObject := lvItemRec."Cost Object (Removal)";
              lvRemovalContribution := lvItemRec."Removal Contribution";
              IF lvRemovalContribution <> 0 THEN
                lvItemRec.TESTFIELD("Cost Object (Removal)");
            END;
          END;

          IF lvRemovalContribution <> 0 THEN BEGIN
            lvSalesLineRec2.SETRANGE("Document Type", "Document Type");
            lvSalesLineRec2.SETRANGE("Document No.", "No.");
            lvSalesLineRec2.SETRANGE("Removal Contribution", TRUE);
            lvSalesLineRec2.SETRANGE("Attached to Line No. (RC)", lvSalesLineRec."Line No.");
            IF NOT lvSalesLineRec2.ISEMPTY THEN
              lvRemovalContribution := 0;
          END;

          IF lvRemovalContribution <> 0 THEN BEGIN
            lvSalesLineRec2.RESET;
            lvSalesLineRec2.SuspendUpdateVATAmounts(TRUE);
            lvSalesLineRec2.INIT;
            lvSalesLineRec2."System-Created Entry" := TRUE;
            lvSalesLineRec2."Document Type" := lvSalesLineRec."Document Type";
            lvSalesLineRec2."Document No." := lvSalesLineRec."Document No.";
            lvSalesLineRec2."Line No." := lvSalesLineRec."Line No.";
            REPEAT
              lvSalesLineRec2."Line No." := lvSalesLineRec2."Line No." + 1;
            UNTIL lvSalesLineRec2.INSERT;

            lvSalesLineRec2.Type := lvSalesLineRec2.Type::"G/L Account";
            lvSalesLineRec2."Additional Cost (Service)" := lvSalesLineRec."Additional Cost (Service)";  //db, 13-12-05
            lvSalesLineRec2.VALIDATE("Job No.", lvSalesLineRec."Job No.");
            lvSalesLineRec2.VALIDATE(Element, lvSalesLineRec.Element);
            lvSalesLineRec2."Extension Contract" := lvSalesLineRec."Extension Contract";
            lvSalesLineRec2.VALIDATE("Service Order No.", lvSalesLineRec."Service Order No.");
            lvSalesLineRec2.VALIDATE("Service Contract No.", lvSalesLineRec."Service Contract No.");
            lvSalesLineRec2."Service Location No." := lvSalesLineRec."Service Location No.";
            IF lvSalesLineRec."Shortcut Dimension 1 Code" <> '' THEN  //db, 28-05-09: M14732
              lvSalesLineRec2.VALIDATE("Shortcut Dimension 1 Code", lvSalesLineRec."Shortcut Dimension 1 Code");
            lvSalesLineRec2.VALIDATE("Shortcut Dimension 2 Code", lvCostObject);

            //db.sn, 09-01-07
            IF lvSalesLineRec."Service Order No." <> '' THEN BEGIN
              lvServSetup.GET;
              lvSalesLineRec2.VALIDATE("Shortcut Dimension 2 Code", lvServSetup."Cost Object Revenues");
            END ELSE BEGIN
              IF lvSalesLineRec."Job No." <> '' THEN BEGIN
                IF lvProjCustRec.GET(lvSalesLineRec."Job No.", lvSalesLineRec."Bill-to Customer No.") THEN
                  lvSalesLineRec2.VALIDATE("Shortcut Dimension 2 Code", lvProjCustRec."Cost Object");
              END;
            END;
            IF lvSalesLineRec2."No." = '' THEN BEGIN
              lvPostingSetup.GET(lvSalesLineRec."Gen. Bus. Posting Group", lvSalesLineRec."Gen. Prod. Posting Group");
              lvPostingSetup.TESTFIELD(lvPostingSetup."Sales Account Removal Contr.");
              lvSalesLineRec2.VALIDATE("No.", lvPostingSetup."Sales Account Removal Contr.");  //db, 25-05-07
            END;
            DimMgt.GetDimValueRec(2, lvCostObject, lvDimValRec, TRUE, lvSalesLineRec."Job No.");
            lvSalesLineRec2."Cost Object Cost Plus Line" := lvCostObject;
            lvSalesLineRec2."Cost Type Cost Plus Line" := lvDimValRec."Cost Type";
            lvSalesLineRec2.Description := lvDimValRec.Name;
            //db.en, 09-01-07

            lvSalesLineRec2.VALIDATE("Gen. Prod. Posting Group", lvSalesLineRec."Gen. Prod. Posting Group");  //db, 25-05-07
            lvSalesLineRec2.VALIDATE("VAT Prod. Posting Group", lvSalesLineRec."VAT Prod. Posting Group");  //db, 18-09-06
            lvSalesLineRec2.VALIDATE("VAT Bus. Posting Group", lvSalesLineRec."VAT Bus. Posting Group");  //db, 18-09-06
            lvSalesLineRec2.VALIDATE(Quantity, lvSalesLineRec.Quantity * lvSalesLineRec."Qty. per Unit of Measure");
            IF lvSalesLineRec."Document Type" = lvSalesLineRec."Document Type"::Order THEN BEGIN //**4PS, 23-11-2007 sn
              lvSalesLineRec2.VALIDATE("Qty. to Ship", lvSalesLineRec."Qty. to Ship" * lvSalesLineRec."Qty. per Unit of Measure");
              lvSalesLineRec2.VALIDATE("Qty. to Invoice", lvSalesLineRec."Qty. to Invoice" * lvSalesLineRec."Qty. per Unit of Measure");
            END;                                                                                 //**4PS, 23-11-2007 en
            lvSalesLineRec2.VALIDATE("Unit Price", lvRemovalContribution);
            lvSalesLineRec2."Commission No." := lvSalesLineRec."Commission No.";
            lvSalesLineRec2."Settl.Sheet No." := lvSalesLineRec."Settl.Sheet No.";
            lvSalesLineRec2."Removal Contribution" := TRUE;
            lvSalesLineRec2."Project Invoice" := lvSalesLineRec."Project Invoice";
            lvSalesLineRec2."Service Invoice" := lvSalesLineRec."Service Invoice";
            lvSalesLineRec2."Attached to Line No. (RC)" := lvSalesLineRec."Line No.";
            lvSalesLineRec2.SuspendUpdateVATAmounts(FALSE);
            lvSalesLineRec2.UpdateAmounts;
            lvSalesLineRec2."Return Reason Code" := lvSalesLineRec."Return Reason Code"; //#C011563
            lvSalesLineRec2.MODIFY(TRUE);
          END;
        UNTIL lvSalesLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateCountryOfDestination@1100485007();
    BEGIN
      //**4PS.n
      //VALIDATE("Country of Destination","VAT Country/Region Code");  //*22767.o

      //*22767.n
      IF "Ship-to Country/Region Code" <> '' THEN
        VALIDATE("Country of Destination","Ship-to Country/Region Code")
      ELSE
        VALIDATE("Country of Destination","Sell-to Country/Region Code");
    END;

    PROCEDURE UpdateVATData@1100485001();
    VAR
      Location@1100485000 : Record 14;
      CompanyInfo@1100485001 : Record 79;
    BEGIN
      //**4PS.n
      IF ("Location Code Logistics" <> '') THEN BEGIN
        IF SalesLogisticsSepaRentContract THEN
          Location.CHANGECOMPANY(CompanyLogistics);
        Location.GET("Location Code Logistics");
        "Company VAT Registration No." := Location."VAT Registration No.";
        IF NOT GLSetup."Default Ext. Sales VAT Determ." OR
           ("Invoice From" <> "Invoice From"::Sales)
        THEN
          VALIDATE("Country of Origin", Location."Country/Region Code");
      END ELSE BEGIN
        IF "Location Code" <> '' THEN BEGIN
          Location.GET("Location Code");
          "Company VAT Registration No." := Location."VAT Registration No.";
          IF NOT GLSetup."Default Ext. Sales VAT Determ." OR
             ("Invoice From" <> "Invoice From"::Sales)
          THEN
            VALIDATE("Country of Origin", Location."Country/Region Code");
        END ELSE BEGIN
          CompanyInfo.GET;
          "Company VAT Registration No." := CompanyInfo."VAT Registration No.";
          IF NOT GLSetup."Default Ext. Sales VAT Determ." OR
             ("Invoice From" <> "Invoice From"::Sales)
          THEN
            VALIDATE("Country of Origin", CompanyInfo."Country/Region Code");
        END;
      END;

      UpdateCountryOfDestination;
    END;

    PROCEDURE UpdateVATGroup@1100485003();
    VAR
      CountryOfOrigin@1100485000 : Record 9;
      CountryOfDestination@1100485001 : Record 9;
      Customer@1100485002 : Record 18;
    BEGIN
      //**4PS.n
      IF "Sell-to Customer No." = '' THEN
        EXIT;

      Customer.GET("Sell-to Customer No.");
      VALIDATE("VAT Bus. Posting Group",Customer."VAT Bus. Posting Group");

      IF NOT "Extended VAT Determination" THEN
        EXIT;

      IF "Country of Origin" = '' THEN
        EXIT;

      CountryOfOrigin.GET("Country of Origin");

      CountryOfOrigin.TESTFIELD("VAT Bus. Posting Group");
      CountryOfOrigin.TESTFIELD("VAT Bus. Posting Group EU");
      CountryOfOrigin.TESTFIELD("VAT Bus. Posting Group Imp/Exp");

      IF "Country of Origin" = "Country of Destination" THEN
        VALIDATE("VAT Bus. Posting Group",CountryOfOrigin."VAT Bus. Posting Group")
      ELSE
        IF CountryOfDestination.GET("Country of Destination") AND
           (CountryOfOrigin."Intrastat Code" <> '') AND
           (CountryOfDestination."Intrastat Code" <> '')
        THEN
          VALIDATE("VAT Bus. Posting Group",CountryOfOrigin."VAT Bus. Posting Group EU")
        ELSE
          VALIDATE("VAT Bus. Posting Group",CountryOfOrigin."VAT Bus. Posting Group Imp/Exp");
    END;

    PROCEDURE SalesLogisticsSepaRentContract@1100485006() : Boolean;
    VAR
      PlantMgtCompRec@1100485000 : Record 11020586;
    BEGIN
      //**4PS.n
      //* 'Sales/logistics separated' (Sales rental quotes/-orders) or 'rental contracts'
      IF ("Sales Document Type" = "Sales Document Type"::"Sales Logistics Separated") AND
         ("Document Type" IN ["Document Type"::Quote, "Document Type"::Order])
      THEN BEGIN
        IF CompanyLogistics = '' THEN BEGIN
          PlantMgtCompRec."Plant Company" := PlantMgtCompRec.GetPlantCompanySalesRental(TRUE);
          CompanyLogistics := PlantMgtCompRec."Plant Company";
        END;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE ValidatePlantLocation@1100485004();
    VAR
      lvPlantLocRec@1100485001 : Record 11012554;
    BEGIN
      //**4PS.n
      TESTFIELD(Status,Status::Open);
      IF "Plant Location Code" = '' THEN
        EXIT;

      TESTFIELD("Job No.");
      IF NOT SalesLogisticsSepaRentContract() THEN
        FIELDERROR("Plant Location Code");

      lvPlantLocRec.CHANGECOMPANY(CompanyLogistics);
      lvPlantLocRec.GET("Plant Location Code");
      lvPlantLocRec.TESTFIELD(Depot, FALSE);
      IF (CompanyLogistics <> COMPANYNAME) THEN
        lvPlantLocRec.TESTFIELD("Company Name", COMPANYNAME)
      ELSE
        lvPlantLocRec.TESTFIELD("Company Name", '');
      lvPlantLocRec.TESTFIELD("Project No.", "Job No.");
    END;

    PROCEDURE LookupPlantLocation@1100485005();
    VAR
      lvPlantLocRec@1100485001 : Record 11012554;
    BEGIN
      //**4PS.n
      IF NOT SalesLogisticsSepaRentContract() THEN
        EXIT;

      lvPlantLocRec.CHANGECOMPANY(CompanyLogistics);
      lvPlantLocRec.FILTERGROUP(6);
      lvPlantLocRec.SETRANGE(Depot, FALSE);
      IF (CompanyLogistics <> COMPANYNAME) THEN
        lvPlantLocRec.SETRANGE("Company Name", COMPANYNAME)
      ELSE
        lvPlantLocRec.SETRANGE("Company Name", '');
      lvPlantLocRec.FILTERGROUP(0);
      IF "Job No." <> '' THEN
        lvPlantLocRec.SETRANGE("Project No.", "Job No.");
      lvPlantLocRec.Code := "Plant Location Code";
      IF PAGE.RUNMODAL(0, lvPlantLocRec) = ACTION::LookupOK THEN
        VALIDATE("Plant Location Code", lvPlantLocRec.Code);
    END;

    PROCEDURE ValidatePlantDepotLogistics@1100485010();
    VAR
      lvPlantLocRec@1100485001 : Record 11012554;
    BEGIN
      //**4PS.n
      TESTFIELD(Status,Status::Open);
      IF "Plant Depot Logistics" = '' THEN
        EXIT;

      IF NOT SalesLogisticsSepaRentContract() THEN
        FIELDERROR("Plant Depot Logistics");

      lvPlantLocRec.CHANGECOMPANY(CompanyLogistics);
      lvPlantLocRec.GET("Plant Depot Logistics");
      lvPlantLocRec.TESTFIELD(Depot, TRUE);
    END;

    PROCEDURE LookupPlantDepotLogistics@1100485009();
    VAR
      lvPlantLocRec@1100485001 : Record 11012554;
    BEGIN
      //**4PS.n
      IF NOT SalesLogisticsSepaRentContract() THEN
        EXIT;

      lvPlantLocRec.CHANGECOMPANY(CompanyLogistics);
      lvPlantLocRec.FILTERGROUP(6);
      lvPlantLocRec.SETRANGE(Depot, TRUE);
      lvPlantLocRec.FILTERGROUP(0);
      lvPlantLocRec.Code := "Plant Depot Logistics";
      IF PAGE.RUNMODAL(0, lvPlantLocRec) = ACTION::LookupOK THEN
        VALIDATE("Plant Depot Logistics", lvPlantLocRec.Code);
    END;

    PROCEDURE ValidateLocationCodeLogistics@1100485019();
    VAR
      lvLocRec@1100485001 : Record 14;
    BEGIN
      //**4PS.n
      TESTFIELD(Status,Status::Open);
      IF "Location Code Logistics" = '' THEN
        EXIT;

      IF NOT SalesLogisticsSepaRentContract() THEN
        FIELDERROR("Location Code Logistics");

      lvLocRec.CHANGECOMPANY(CompanyLogistics);
      lvLocRec.GET("Location Code Logistics");
      lvLocRec.TESTFIELD("Use As In-Transit", FALSE);

      UpdateVATData; //hs
    END;

    PROCEDURE LookupLocationCodeLogistics@1100485018();
    VAR
      lvLocRec@1100485001 : Record 14;
    BEGIN
      //**4PS.n
      IF NOT SalesLogisticsSepaRentContract() THEN
        EXIT;

      lvLocRec.CHANGECOMPANY(CompanyLogistics);
      lvLocRec.FILTERGROUP(6);
      lvLocRec.SETRANGE("Use As In-Transit", FALSE);
      lvLocRec.FILTERGROUP(0);
      lvLocRec.Code := "Location Code Logistics";
      IF PAGE.RUNMODAL(0, lvLocRec) = ACTION::LookupOK THEN
        VALIDATE("Location Code Logistics", lvLocRec.Code);
    END;

    PROCEDURE LookupShipToContactPerson@1210190001();
    VAR
      ContBusinessRelation@1210190032 : Record 5054;
      Cont@1210190033 : Record 5050;
    BEGIN
      //**4PS
      IF ("Sell-to Customer No." <> '') AND (Cont.GET("Sell-to Contact No.")) THEN
        Cont.SETRANGE("Company No.",Cont."Company No.")
      ELSE
        IF "Sell-to Customer No." <> '' THEN BEGIN
          ContBusinessRelation.RESET;
          ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
          ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
          ContBusinessRelation.SETRANGE("No.","Sell-to Customer No.");
          IF ContBusinessRelation.FIND('-') THEN
            Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.");
        END ELSE
          Cont.SETFILTER("Company No.",'<>''''');

      IF "Sell-to Contact No." <> '' THEN
        IF Cont.GET("Sell-to Contact No.") THEN;
      IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
        "Ship-to Contact No." := Cont."No.";
        "Ship-to Phone No." := Cont."Phone No.";
        "Ship-to Contact" := Cont.Name;
      END;
    END;

    PROCEDURE ShowSalesOrders@1100485011();
    VAR
      lvSalesHeader@1100485000 : Record 36;
    BEGIN
      //**4PS
      IF NOT (CurrFieldNo IN [FIELDNO("Sell-to Customer No."), FIELDNO("Sell-to Contact No.")]) OR
        ("Sales Document Type" <> "Sales Document Type"::"Sales Logistics Separated")
      THEN
        EXIT;

      lvSalesHeader.SETCURRENTKEY("Document Type","Sell-to Customer No.");
      lvSalesHeader.SETRANGE("Document Type", lvSalesHeader."Document Type"::Order);
      lvSalesHeader.SETRANGE("Sell-to Customer No.", "Sell-to Customer No.");
      lvSalesHeader.SETRANGE("Sales Document Type", lvSalesHeader."Sales Document Type"::"Sales Logistics Separated");
      IF NOT lvSalesHeader.FINDLAST THEN
        EXIT;

      PAGE.RUN(0, lvSalesHeader);
    END;

    PROCEDURE LookupJobNo@1100525000(EditableMode@1100525001 : Boolean);
    VAR
      lProjRec@1100525000 : Record 11072003;
    BEGIN
      //**4PS
      lProjRec.CHANGECOMPANY("Company Name");
      lProjRec."No." := "Job No.";
      IF EditableMode THEN BEGIN
        IF ("Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"]) AND
           ("Project Invoice" OR "Plant Invoice" OR "Service Invoice")
        THEN  // Always field not editable in created invoices!
          EditableMode := FALSE;
      END;
      IF (NOT EditableMode) THEN
        PAGE.RUNMODAL(0,lProjRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0,lProjRec) = ACTION::LookupOK THEN
          VALIDATE("Job No.",lProjRec."No.")
      END;
    END;

    PROCEDURE LookupServiceOrderNo@1100525003(EditableMode@1100525001 : Boolean);
    VAR
      lServOrderRec@1100525000 : Record 11012823;
    BEGIN
      //**4PS
      lServOrderRec.CHANGECOMPANY("Company Name");
      lServOrderRec."No." := "Service Order No.";
      IF EditableMode THEN BEGIN
        IF ("Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"]) AND
           ("Project Invoice" OR "Plant Invoice" OR "Service Invoice")
        THEN  // Always field not editable in created invoices!
          EditableMode := FALSE;
      END;
      IF (NOT EditableMode) THEN
        PAGE.RUNMODAL(0,lServOrderRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0,lServOrderRec) = ACTION::LookupOK THEN
          VALIDATE("Service Order No.",lServOrderRec."No.")
      END;
    END;

    PROCEDURE FillDefaultSalesPerson@1100525001();
    VAR
      lCustRec@1100525000 : Record 18;
      lProjRec@1100525001 : Record 11072003;
    BEGIN
      //**4PS
      IF ("Job No." <> '') AND (NOT "Plant Invoice") AND ("Company Name" = '') THEN BEGIN
        IF lProjRec.GET("Job No.") THEN BEGIN
          IF lProjRec."Salesperson Code" <> '' THEN BEGIN
            "Salesperson Code" := lProjRec."Salesperson Code";
            EXIT;
          END;
        END;
      END;
      IF "Bill-to Customer No." <> '' THEN BEGIN
        IF lCustRec.GET("Bill-to Customer No.") THEN BEGIN
          IF lCustRec."Salesperson Code" <> '' THEN BEGIN
            "Salesperson Code" := lCustRec."Salesperson Code";
            EXIT;
          END;
        END;
      END;
    END;

    PROCEDURE FillDefaultInvoiceLayoutCode@1100525002();
    VAR
      lCustRec@1100525001 : Record 18;
      lProjRec@1100525000 : Record 11072003;
    BEGIN
      //**4PS  14022 / C004816
      IF NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo","Document Type"::"Invoice Proposal"]) THEN
        EXIT;
      IF ("Job No." <> '') AND (NOT "Plant Invoice") AND ("Company Name" = '') THEN BEGIN
        IF lProjRec.GET("Job No.") THEN BEGIN
          IF lProjRec."Invoice Layout Code" <> '' THEN BEGIN
            "Invoice Layout Code" := lProjRec."Invoice Layout Code";
            EXIT;
          END;
        END;
      END;
      IF "Bill-to Customer No." <> '' THEN BEGIN
        IF lCustRec.GET("Bill-to Customer No.") THEN
          "Invoice Layout Code" := lCustRec."Invoice Layout Code";
      END;
    END;

    LOCAL PROCEDURE FillDefaultEMailInvoice@1100528700();
    VAR
      Customer@1100528700 : Record 18;
      ShipToAddress@1100528702 : Record 222;
      SalesHeaderExtension@1100528701 : Record 11071868;
    BEGIN
      //**4PS
      IF NOT ("Document Type" IN ["Document Type"::Order, "Document Type"::"Return Order",
                                  "Document Type"::Invoice, "Document Type"::"Credit Memo",
                                  "Document Type"::"Invoice Proposal"])
      THEN
        EXIT;

      IF "Bill-to Customer No." = '' THEN
        EXIT;

      SalesHeaderExtension.GetSalesHeadExtension("Document Type", "No.");

      Customer.GET("Bill-to Customer No.");

      SalesHeaderExtension."E-Mail (Invoices)" := Customer."E-Mail (Invoices)";
      SalesHeaderExtension."Electronic Invoicing" := Customer."Electronic Invoicing";
      SalesHeaderExtension."Combine E-Mail Attachments" := Customer."Combine E-Mail Attachments";

      IF "Alternative Bill-to Address" <> '' THEN
        IF ShipToAddress.GET("Bill-to Customer No.", "Alternative Bill-to Address") THEN
          IF ShipToAddress."E-Mail (Invoices)" <> '' THEN
            SalesHeaderExtension."E-Mail (Invoices)" := ShipToAddress."E-Mail (Invoices)";

      SalesHeaderExtension.UpdateSalesHeadExtension("Document Type", "No.");
    END;

    LOCAL PROCEDURE FillDefaultEMailShipment@1100528701();
    VAR
      Customer@1100528700 : Record 18;
      ShipToAddress@1100528702 : Record 222;
      SalesHeaderExtension@1100528701 : Record 11071868;
    BEGIN
      //**4PS
      IF NOT ("Document Type" IN ["Document Type"::Order]) THEN
        EXIT;

      IF "Sell-to Customer No." = '' THEN
        EXIT;

      SalesHeaderExtension.GetSalesHeadExtension("Document Type", "No.");

      Customer.GET("Sell-to Customer No.");

      SalesHeaderExtension."E-Mail (Shipments)" := Customer."E-Mail (Shipments)";
      SalesHeaderExtension."Shipment per E-Mail" := Customer."Shipment per E-Mail";

      IF "Ship-to Code" <> '' THEN
        IF ShipToAddress.GET("Sell-to Customer No.", "Ship-to Code") THEN
          IF ShipToAddress."E-Mail (Shipments)" <> '' THEN
            SalesHeaderExtension."E-Mail (Shipments)" := ShipToAddress."E-Mail (Shipments)";

      SalesHeaderExtension.UpdateSalesHeadExtension("Document Type", "No.");
    END;

    LOCAL PROCEDURE FillDefaultEMailOrderConfirm@1100528705();
    VAR
      Customer@1100528700 : Record 18;
      ShipToAddress@1100528702 : Record 222;
      SalesHeaderExtension@1100528701 : Record 11071868;
    BEGIN
      //**4PS
      IF NOT ("Document Type" IN ["Document Type"::Order, "Document Type"::Quote]) THEN
        EXIT;

      IF "Sell-to Customer No." = '' THEN
        EXIT;

      SalesHeaderExtension.GetSalesHeadExtension("Document Type", "No.");

      Customer.GET("Sell-to Customer No.");

      SalesHeaderExtension."E-Mail (Order Confirmations)" := Customer."E-Mail (Order Confirmations)";
      SalesHeaderExtension."Order Confirmation per E-Mail" := Customer."Order Confirmation per E-Mail";

      IF "Ship-to Code" <> '' THEN
        IF ShipToAddress.GET("Sell-to Customer No.", "Ship-to Code") THEN
          IF ShipToAddress."E-Mail (Order Confirmations)" <> '' THEN
            SalesHeaderExtension."E-Mail (Order Confirmations)" := ShipToAddress."E-Mail (Order Confirmations)";

      SalesHeaderExtension.UpdateSalesHeadExtension("Document Type", "No.");
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Shortcut Dimension 1 Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::"Sales Header");
      IF Dimension1Code <> '' THEN
        "Shortcut Dimension 1 Code" := Dimension1Code;

      IF "Shortcut Dimension 1 Code" <> '' THEN BEGIN
        SkipModify := TRUE;
        VALIDATE("Shortcut Dimension 1 Code");
        SkipModify := FALSE;
      END;
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(36) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 36');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Sales Header", "Shortcut Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Shortcut Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Shortcut Dimension 1 Code");
    END;

    PROCEDURE ConvPartOfLinetoNewPartOfLine@1210190003(LineNoIn@1100525000 : Integer;VAR LineNoOut@1100525001 : Integer);
    BEGIN
      //**4PS
      TempDocumentEntry.SETRANGE("Entry No.",LineNoIn);
      IF TempDocumentEntry.FINDFIRST THEN
        LineNoOut := TempDocumentEntry."No. of Records";
    END;

    PROCEDURE InsertOldLineNoAndNewLineNo@1210190000(LineNoOld@1100525000 : Integer;LineNoNew@1100525001 : Integer);
    BEGIN
      //**4PS
      TempDocumentEntry."Entry No." := LineNoOld;
      TempDocumentEntry."No. of Records" := LineNoNew;
      TempDocumentEntry.INSERT;
    END;

    PROCEDURE EditDocuments@1100528702(DocumentType@1100528702 : Option;DocumentTemplateTypeFilter@1210190003 : Text[250];ContactNo@1210190004 : Code[20];ContactPersonNo@1210190005 : Code[20];SendMail@1210190002 : Boolean;Recipient@1100528700 : Text[120]);
    VAR
      SalesLine@1100528701 : Record 37;
      Job@1100528704 : Record 11072003;
      ServiceOrder@1100528706 : Record 11012823;
      ResponsibilityCenter@1100528705 : Record 5714;
      ProjectNo@1100528703 : Code[20];
      DocumentMailing@1210190000 : Codeunit 11012278;
      RecRef@1100525000 : RecordRef;
      DocumentLinkRIDs@1100525001 : ARRAY [5] OF RecordID;
    BEGIN
      //**4PS
      RecRef.GETTABLE(Rec);
      DocumentLinkRIDs[1] := RecRef.RECORDID;

      ProjectNo := "Job No.";
      IF ProjectNo = '' THEN BEGIN
        SalesLine.SETRANGE("Document Type", DocumentType);
        SalesLine.SETRANGE("Document No.", "No.");
        IF SalesLine.FINDSET THEN
          REPEAT
            ProjectNo := SalesLine."Job No.";
          UNTIL (SalesLine.NEXT = 0) OR (ProjectNo <> '');
      END;

      IF ProjectNo <> '' THEN BEGIN
        Job.GET(ProjectNo);
        RecRef.GETTABLE(Job);
        DocumentLinkRIDs[2] := RecRef.RECORDID;
      END ELSE BEGIN
        IF "Service Order No." <> '' THEN BEGIN
          ServiceOrder.GET("Service Order No.");
          RecRef.GETTABLE(ServiceOrder);
          DocumentLinkRIDs[2] := RecRef.RECORDID;
        END;
      END;

      IF ResponsibilityCenter.GET("Responsibility Center") THEN BEGIN
        RecRef.GETTABLE(ResponsibilityCenter);
        DocumentLinkRIDs[3] := RecRef.RECORDID;
      END;

      DocumentMailing.EditDocuments(
        DocumentTemplateTypeFilter, DocumentLinkRIDs,
        "Shortcut Dimension 1 Code", ContactNo, ContactPersonNo, SendMail, Recipient);
    END;

    PROCEDURE SendOrderElectronic@1210190009();
    VAR
      SalesHeader@1210190002 : Record 36;
      DocumentPrint@1100528500 : Codeunit 229;
    BEGIN
      //**4PS.n, RFC dp00113
      SalesHeader.COPY(Rec);
      SalesHeader.SETRECFILTER;
      DocumentPrint.EmailSalesHeader(SalesHeader);
    END;

    PROCEDURE FillDefaultServiceWarrantyCode@1100528500();
    VAR
      Project@1100528500 : Record 11072003;
    BEGIN
      //**4PS DP00121
      IF "Job No." <> '' THEN BEGIN
        Project.CHANGECOMPANY("Company Name");  //C003558
        Project.GET("Job No.");
        IF Project."Service Warranty Code" <> '' THEN BEGIN
          "Service Warranty Code" := Project."Service Warranty Code";
          EXIT;
        END;
      END;

      GetCust("Sell-to Customer No.");
      "Service Warranty Code" := Cust."Service Warranty Code";
    END;

    PROCEDURE CountNoOfShipments@1100528703() : Integer;
    VAR
      SalesShipmentHeader@1100528700 : Record 110;
    BEGIN
      //**4PS
      SalesShipmentHeader.SETCURRENTKEY("Order No.");
      SalesShipmentHeader.SETRANGE("Order No.", "No.");
      EXIT(SalesShipmentHeader.COUNT);
    END;

    PROCEDURE AssitEditPackageTracking@1100528704();
    VAR
      PostedSalesShipments@1100528700 : Page 142;
      SalesShipmentHeader@1100528701 : Record 110;
    BEGIN
      //**4PS
      SalesShipmentHeader.SETCURRENTKEY("Order No.");
      SalesShipmentHeader.SETRANGE("Order No.", "No.");
      PostedSalesShipments.SETTABLEVIEW(SalesShipmentHeader);
      PostedSalesShipments.RUNMODAL;
    END;

    PROCEDURE PostPlantInvoiceProposalViaIC@1100525004() : Boolean;
    BEGIN
      //**4PS
      IF ("Document Type" = "Document Type"::"Invoice Proposal") AND
         ("Plant Invoice") AND
         (("Company Name" <> COMPANYNAME) AND ("Company Name" <> '')) THEN
      BEGIN
        PlantSetup.GET;
        IF PlantSetup.CheckPostInvoiceProposalViaIC("Company Name") THEN
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE UpdatePostingAndDocDate@1100525005(NewPostingDate@1100525000 : Date);
    BEGIN
      //**4PS
      SalesSetup.GET;

      IF SalesSetup."Replace Posting Date" OR SalesSetup."Replace Document Date" THEN BEGIN
        IF NewPostingDate = 0D THEN
          NewPostingDate := WORKDATE;

        IF SalesSetup."Replace Posting Date" OR ("Posting Date" = 0D) THEN
          IF NewPostingDate <> "Posting Date" THEN BEGIN
            "Posting Date" := NewPostingDate;
            VALIDATE("Currency Code");
          END;

        IF SalesSetup."Replace Document Date" OR ("Document Date" = 0D) THEN
          IF "Document Date" <> NewPostingDate THEN
            VALIDATE("Document Date",NewPostingDate);
      END;
    END;

    PROCEDURE IsGeneratedInvoice@1100525006() : Boolean;
    BEGIN
      //**4PS
      EXIT("Project Invoice" OR "Plant Invoice" OR "Service Invoice");
    END;

    PROCEDURE CheckGeneratedInvoice@1100525007();
    BEGIN
      //**4PS
      IF IsGeneratedInvoice THEN
        IF "Document Type" = "Document Type"::Invoice THEN
          ERROR(Text11012005)
        ELSE
          ERROR(Text11012006);
    END;

    PROCEDURE GetSelectionFilter@1100525010(VAR SalesHeader@1100525000 : Record 36) : Code[250];
    VAR
      SelectionFilter@1003 : Code[250];
      RecordCount@1004 : Integer;
    BEGIN
      //**4PS.n
      RecordCount := SalesHeader.COUNT;
      IF RecordCount > 0 THEN BEGIN
        SalesHeader.FINDSET;
        WHILE RecordCount > 0 DO BEGIN
          RecordCount := RecordCount - 1;
          IF SelectionFilter <> '' THEN
            SelectionFilter := SelectionFilter + '|';
          SelectionFilter := SelectionFilter + SalesHeader."No.";
          IF RecordCount > 0 THEN
            SalesHeader.NEXT;
        END;
      END;
      EXIT(SelectionFilter);
    END;

    PROCEDURE GetServicePaymentTermsCode@1100529200();
    VAR
      PaymentTermsCode@1100529201 : Code[20];
      Customer@1100529204 : Record 18;
      ServiceContract@1100529200 : Record 11012812;
      ServiceOrder@1100529203 : Record 11012823;
    BEGIN
      //**4PS
      IF Customer.GET("Bill-to Customer No.") THEN
        PaymentTermsCode := Customer."Payment Terms Code";
      IF ServiceContract.GET("Service Contract No.") AND (ServiceContract."Payment Terms Code" <> '') THEN
        PaymentTermsCode := ServiceContract."Payment Terms Code";
      IF ServiceOrder.GET("Service Order No.") AND (ServiceOrder."Payment Terms Code" <> '') THEN
        PaymentTermsCode := ServiceOrder."Payment Terms Code";

      IF "Payment Terms Code" <> PaymentTermsCode THEN
        VALIDATE("Payment Terms Code",PaymentTermsCode);
    END;

    PROCEDURE ReleaseSalesDocuments@1100528400();
    VAR
      ReleaseSalesDocument@1100528400 : Codeunit 414;
    BEGIN
      //**4PS
      IF FINDSET THEN
        REPEAT
          ReleaseSalesDocument.PerformManualRelease(Rec);
        UNTIL NEXT = 0;
    END;

    PROCEDURE GetDirectDebitMandateServiceOrProject@1100528501(ServOrderNo@1100529000 : Code[20];ServContractNo@1100529001 : Code[20];ProjectNo@1100529002 : Code[20];ProjPrincipal@1100409000 : Code[20]);
    VAR
      ServiceOrder@1100529003 : Record 11012823;
      ServiceContract@1100528500 : Record 11012812;
      ProjectPrincipal@1100529004 : Record 11012005;
      SEPADirectDebitMandate@1100525001 : Record 1230;
      NewMandateID@1100525000 : Code[35];
    BEGIN
      //**4PS DP00613 + DP00640 (Also serv.order and project-principal. Only for create invoices)
      IF ServOrderNo <> '' THEN BEGIN
        IF ServiceOrder.GET(ServOrderNo) THEN BEGIN
          IF ServiceOrder."Direct Debit Mandate ID" <> '' THEN
            NewMandateID := ServiceOrder."Direct Debit Mandate ID";
        END;
      END ELSE BEGIN
        IF ServContractNo <> '' THEN BEGIN
          IF ServiceContract.GET(ServContractNo) THEN BEGIN
            IF ServiceContract."Direct Debit Mandate ID" <> '' THEN
              NewMandateID := ServiceContract."Direct Debit Mandate ID";
          END;
        END ELSE BEGIN
          IF (ProjectNo <> '') AND (ProjPrincipal <> '') THEN BEGIN
            IF ProjectPrincipal.GET(ProjectNo, ProjPrincipal) THEN BEGIN
              IF ProjectPrincipal."Direct Debit Mandate ID" <> '' THEN
                NewMandateID := ProjectPrincipal."Direct Debit Mandate ID";
            END;
          END;
        END;
      END;
      //C021139.sn
      IF NewMandateID = '' THEN
        EXIT;

      SEPADirectDebitMandate.GET(NewMandateID);
      VALIDATE("Direct Debit Mandate ID",NewMandateID);
      //C021139.en
    END;

    LOCAL PROCEDURE "--PSSEDK"@1100285001();
    BEGIN
    END;

    PROCEDURE UpdateDKinfo@1100285000(AccountCode@1100525001 : Text[30];SelltoContactPhoneNo@1100525002 : Text[30];SelltoContactFaxNo@1100525003 : Text[30];SelltoContactEMail@1100525004 : Text[80]);
    VAR
      SalesDKinfo@1100525000 : Record 11128571;
      modifLines@1100285000 : Boolean;
    BEGIN
      IF NOT SalesDKinfo.READPERMISSION THEN
        EXIT;
      IF NOT SalesDKinfo.WRITEPERMISSION THEN
        EXIT;

      IF NOT SalesDKinfo.GET(36,"Document Type","No.") THEN BEGIN
        SalesDKinfo.INIT;
        SalesDKinfo.tableNo := 36;
        SalesDKinfo."Document Type" := "Document Type";
        SalesDKinfo."No." := "No.";
        SalesDKinfo.INSERT;
      END;

      modifLines := SalesDKinfo."Account Code DK" <> AccountCode;
      SalesDKinfo."Account Code DK" := AccountCode;
      SalesDKinfo."Sell-to Contact Phone No." := SelltoContactPhoneNo;
      SalesDKinfo."Sell-to Contact Fax No." := SelltoContactFaxNo;
      SalesDKinfo."Sell-to Contact E-Mail" := SelltoContactEMail;
      SalesDKinfo.MODIFY;

      IF NOT modifLines THEN
        EXIT;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER(Type, '>%1', SalesLine.Type::" ");
      SalesLine.SETFILTER("Account Code DK", '%1|%2', xRec."Account Code DK", '');
      SalesLine.MODIFYALL("Account Code DK", "Account Code DK");
    END;

    PROCEDURE CreateTempClientFolderForPDF@1100528403() TempClientFolderName : Text;
    VAR
      OperatingSystemMgt@1100528401 : Codeunit 11012364;
      FileManagement@1100528400 : Codeunit 419;
    BEGIN
      //**4PS
      TempClientFolderName :=
        STRSUBSTNO('%1\%2', DELCHR(OperatingSystemMgt.ClientEnviron('TEMP'), '>', '\'), CREATEGUID);
      FileManagement.CreateClientFolderRecursively(TempClientFolderName);
    END;

    PROCEDURE DeleteTempClientFolderForPDF@1100528409(TempClientFolderName@1100528402 : Text);
    VAR
      FileManagement@1100528400 : Codeunit 419;
    BEGIN
      //**4PS
      IF FileManagement.ClientDirectoryExists(TempClientFolderName) THEN
        FileManagement.DeleteClientFolder(TempClientFolderName);
    END;

    PROCEDURE SaveInvoiceProposalAsPDF@1100528401(TempClientFolderName@1100528401 : Text;VAR DocumentDescription@1100528402 : Text[50];VAR FullPDFFileName@1100528405 : Text);
    VAR
      TempReportSelections@1100528404 : TEMPORARY Record 77;
      DocumentProperties@1100528408 : Record 11012746;
      SalesHeader@1100528411 : Record 36;
      EMailSetup@1100528400 : Record 11229911;
      DocumentPrint@1100528403 : Codeunit 229;
      DatetimeMgt@1100528409 : Codeunit 11020218;
      Window@1100528410 : Dialog;
      TempPDFFileName@1100528407 : Text;
    BEGIN
      //**4PS
      TESTFIELD("Document Type", "Document Type"::"Invoice Proposal");
      IF GUIALLOWED THEN
        Window.OPEN(STRSUBSTNO(Text11012007, "Document Type", "No."));
      IF "Plant Invoice" THEN
        DocumentPrint.GetReportSelection(1559, TempReportSelections, FALSE);
      IF "Service Invoice" THEN
        DocumentPrint.GetReportSelection(3017, TempReportSelections, FALSE);
      TempReportSelections.FINDFIRST;
      TempReportSelections.CALCFIELDS("Report Caption");
      DocumentDescription := COPYSTR(
        TempReportSelections."Report Caption", 1, MAXSTRLEN(DocumentProperties.Description));
      TempPDFFileName := STRSUBSTNO('%1 (%2)', "No.", DatetimeMgt.GetTimestamp);
      FullPDFFileName := STRSUBSTNO('%1\%2.pdf', TempClientFolderName, TempPDFFileName);
      SalesHeader.COPY(Rec);
      SalesHeader.SETRECFILTER;
      DocumentPrint.SaveAnyRecordReportAsPdfOnClient(
        SalesHeader, EMailSetup.Usage::"Sales Invoice", SalesHeader."Shortcut Dimension 1 Code",
        TempReportSelections."Report ID", FullPDFFileName);
      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    PROCEDURE AddProposalPDFToInvoice@1100528402(DocumentDescription@1100528400 : Text[50];FullPDFFileName@1100528401 : Text);
    VAR
      QueuedExternalDocument@1100528402 : Record 11012148;
      DocumentProperties@1100528403 : Record 11012746;
      MarketingSetup@1100528406 : Record 5079;
      FileManagement@1100528408 : Codeunit 419;
      RelateToType@1100528404 : 'Document,Purchase Quote,Purchase Order,Try-out Quote,Blanket Order,,,,Service Order,Sales Invoice,Sales Cr.Memo,Posted Sales Invoice,Posted Sales Cr.Memo,Sales Quote,Sales Order';
      ErrorMessage@1100528405 : Text;
      FullDestinationFileName@1100528407 : Text;
    BEGIN
      //**4PS
      TESTFIELD("Document Type", "Document Type"::Invoice);
      IF MarketingSetup.GET THEN BEGIN
        FullDestinationFileName :=
          MarketingSetup."Default Ext. Doc. Directory" + FileManagement.GetFileName(FullPDFFileName);
        IF FileManagement.ClientFileExists(FullDestinationFileName) THEN
          FileManagement.DeleteClientFile(FullDestinationFileName);
      END;
      ClearQueueTablesForCurrentUser;
      AddQueuedExternalDocument(QueuedExternalDocument, DocumentDescription, FullPDFFileName);
      AddQueuedDocumentLink;
      DocumentProperties."External Document" := TRUE;
      QueuedExternalDocument.RegisterDocument(
        DocumentProperties, TRUE, RelateToType::"Sales Invoice", "No.", ErrorMessage, DocumentProperties);
      ClearQueueTablesForCurrentUser;
    END;

    LOCAL PROCEDURE ClearQueueTablesForCurrentUser@1100528404();
    VAR
      QueuedExternalDocument@1100528400 : Record 11012148;
      QueuedDocumentLink@1100528401 : Record 11125736;
    BEGIN
      //**4PS
      QueuedExternalDocument.SETRANGE(User, USERID);
      QueuedExternalDocument.DELETEALL(TRUE);
      QueuedDocumentLink.SETRANGE(User, USERID);
      QueuedDocumentLink.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE AddQueuedExternalDocument@1100528407(VAR QueuedExternalDocument@1100528402 : Record 11012148;DocumentDescription@1100528403 : Text[50];FullPDFFileName@1100528400 : Text);
    VAR
      FileManagement@1100528401 : Codeunit 419;
    BEGIN
      //**4PS
      QueuedExternalDocument.Description := DocumentDescription;
      QueuedExternalDocument."Line No." := 0;
      QueuedExternalDocument.User := USERID;
      QueuedExternalDocument.Folder := FileManagement.GetDirectoryNameWithBackSlash(FullPDFFileName);
      QueuedExternalDocument."File Name" := FileManagement.GetFileName(FullPDFFileName);
      QueuedExternalDocument.Source := QueuedExternalDocument.Source::User;
      QueuedExternalDocument.INSERT(TRUE);
    END;

    LOCAL PROCEDURE AddQueuedDocumentLink@1100528413();
    VAR
      QueuedDocumentLink@1100528400 : Record 11125736;
      RecRef@1100528401 : RecordRef;
      DocumentLinkManagement@1100528402 : Codeunit 11012401;
    BEGIN
      //**4PS
      RecRef.GETTABLE(Rec);
      QueuedDocumentLink.User := USERID;
      QueuedDocumentLink."Seq. No." := 10000;
      QueuedDocumentLink."Table No." := RecRef.RECORDID.TABLENO;
      QueuedDocumentLink."Filter Expression" := DocumentLinkManagement.GetFilterExpression(RecRef.RECORDID);
      QueuedDocumentLink."Record ID" := RecRef.RECORDID;
      QueuedDocumentLink.Source := TRUE;
      QueuedDocumentLink.INSERT;
    END;

    BEGIN
    {
      4PS01 07-11-2006 JD The field Principal Reference (from table Project Principal) must be filled when the project number changes.
      4PS02 30-01-2008 JD Testcall 2374 Only allowed a Job no. in header of which customer is project-principal.
      4PS03 24-09-2009 PS Status options Pending Approval,Pending Prepayment removed (set empty).
      4PS DP00613, "Direct Debit Mandate ID" is copied from related Sales Order to the Invoice;

      *** 4PSSE.I012 ***
      130711 Added field "ROT"
             Added code under "Job No.".onValidate() to trigger "ROT" if Rot-project
      140121 Correction for making ROT-project

      160121 ITERO.AC IME445 Added Field 11128514 "E-Invoice Layout Code"
      Version List=NAVW19.00.00.45834,NAVSE9.00.00.45834;
      Version List=NAVW19.00.00.45834,NAVFI9.00.00.45834;
      Version List=NAVW19.00.00.45834,NAVDK9.00.00.45834;
      Version List=NAVW19.00.00.45834,NAVNO9.00.00.45834;
    }
    END.
  }
}

