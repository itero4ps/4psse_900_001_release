OBJECT Table 37 Sales Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.45480,4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               //**4PS.sn
               GetSalesHeader;
               IF SalesHeader.Status = SalesHeader.Status::Closed THEN
                 SalesHeader.FIELDERROR(Status);
               //**4PS.en
               TestStatusOpen;
               IF Quantity <> 0 THEN
                 ReserveSalesLine.VerifyQuantity(Rec,xRec);
               LOCKTABLE;
               SalesHeader."No." := '';
               IF Type = Type::Item THEN
                 IF SalesHeader.InventoryPickConflict("Document Type","Document No.",SalesHeader."Shipping Advice") THEN
                   ERROR(Text056,SalesHeader."Shipping Advice");
               IF ("Deferral Code" <> '') AND (GetDeferralAmount <> 0) THEN
                 UpdateDeferralAmounts;

               //**4PS.sn
               IF "Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"] THEN BEGIN
                 "Project Invoice" := SalesHeader."Project Invoice";
                 "Service Invoice" := SalesHeader."Service Invoice";
                 "Installment Invoice" := SalesHeader."Installment Invoice";
               END;
               IF "Rental Unit" = '' THEN
                 "Rental Unit Invoice" := FALSE
               ELSE
                 "Rental Unit Invoice" := TRUE;
               //**4PS.en
             END;

    OnModify=BEGIN
               //**4PS.sn
               GetSalesHeader;
               IF SalesHeader.Status = SalesHeader.Status::Closed THEN
                 SalesHeader.FIELDERROR(Status);
               IF "System-Created Entry" AND NOT "Removal Contribution" THEN BEGIN  //db, 05-07-07
                 SalesSetup.GET;
                 IF NOT SalesSetup."Generated Invoices Editable" THEN BEGIN
                   TESTFIELD("Project Invoice",FALSE);
                   IF Type <> Type::" " THEN
                     TESTFIELD("Service Invoice", FALSE);
                 END;
                 TESTFIELD("Plant Invoice",FALSE);
               END;
               IF "Rental Unit" = '' THEN
                 "Rental Unit Invoice" := FALSE
               ELSE
                 "Rental Unit Invoice" := TRUE;
               ModifyForLogisticsSeparated;
               //**4PS.en

               IF ("Document Type" = "Document Type"::"Blanket Order") AND
                  ((Type <> xRec.Type) OR ("No." <> xRec."No."))
               THEN BEGIN
                 SalesLine2.RESET;
                 SalesLine2.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
                 SalesLine2.SETRANGE("Blanket Order No.","Document No.");
                 SalesLine2.SETRANGE("Blanket Order Line No.","Line No.");
                 IF SalesLine2.FINDSET THEN
                   REPEAT
                     SalesLine2.TESTFIELD(Type,Type);
                     SalesLine2.TESTFIELD("No.","No.");
                   UNTIL SalesLine2.NEXT = 0;
               END;

               //IF ((Quantity <> 0) OR (xRec.Quantity <> 0)) AND ItemExists(xRec."No.") AND NOT FullReservedQtyIsForAsmToOrder THEN //**4PS.o DP00121
               IF ((Quantity <> 0) OR (xRec.Quantity <> 0)) AND (ItemExists(xRec."No.") OR NSItemExists(xRec."Item No.")) AND //**4PS.n DP00121
                  NOT FullReservedQtyIsForAsmToOrder THEN //**4PS.n DP00121
                 ReserveSalesLine.VerifyChange(Rec,xRec);
             END;

    OnDelete=VAR
               CapableToPromise@1000 : Codeunit 99000886;
               JobCreateInvoice@1002 : Codeunit 11072007;
               SalesCommentLine@1003 : Record 44;
               lvProjCostPlusRec@1100525001 : Record 11012019;
               lvServCostPlusRec@1100525000 : Record 11012825;
               lvServEntryRec@1100530000 : Record 11012819;
               lvContractObjectRec@1100526200 : Record 11071702;
               lvContractInstallmentRec@1100526201 : Record 11071707;
               lvServiceContractRec@1100528600 : Record 11012812;
               ServiceCollectiveList@1100528601 : Record 11071730;
               CollectiveListSCInvLine@1100528602 : Record 11071931;
               ProjectCollectiveList@1100528200 : Record 11071875;
               SalesRecipe@1100525002 : Record 11229788;
             BEGIN
               TestStatusOpen;

               //**4PS.sn
               IF PlantOrderIsProcessed(TRUE) THEN;

               GetSalesHeader;
               IF ("Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"]) AND
                  (SalesHeader."Sales Document Type" = SalesHeader."Sales Document Type"::"Sales Logistics Separated")
               THEN BEGIN
                 IF ("Item No." <> '') OR
                    (("Plant Type" <> '') AND ("Relate to" <> "Relate to"::Rental)) OR
                    (("Relate to" = "Relate to"::Transport) AND
                     (SalesHeader."Sales Document Type" = SalesHeader."Sales Document Type"::"Sales Logistics Separated"))
                 THEN BEGIN
                   SalesLine2.RESET;
                   SalesLine2.SETRANGE("Document Type", SalesLine2."Document Type"::Order);
                   SalesLine2.SETRANGE("Document No.", SalesHeader."Related Sales Order No.");
                   SalesLine2.SETRANGE("Line No.", "Line No.");
                   IF SalesLine2.FINDFIRST THEN BEGIN
                     IF "Document Type" = "Document Type"::"Credit Memo" THEN
                       SalesLine2."Quantity Invoiced" := SalesLine2."Quantity Invoiced" + Quantity
                     ELSE
                       SalesLine2."Quantity Invoiced" := SalesLine2."Quantity Invoiced" - Quantity;
                     IF SalesLine2."Quantity Invoiced" < 0 THEN
                       SalesLine2."Quantity Invoiced" := 0;
                     SalesLine2.MODIFY;
                     IF ("Item No." <> '') AND ("Arrival Date" = 0D) THEN BEGIN
                       SalesRentalRemovalLine.SETRANGE("Document No.", SalesLine2."Document No.");
                       SalesRentalRemovalLine.SETRANGE("Document Line No.", SalesLine2."Line No.");
                       SalesRentalRemovalLine.SETRANGE("Removed Item Invoiced", TRUE);
                       SalesRentalRemovalLine.MODIFYALL("Removed Item Invoiced", FALSE);
                     END;
                   END;
                 END;
               END;
               //**4PS.en

               IF NOT StatusCheckSuspended AND (SalesHeader.Status = SalesHeader.Status::Released) AND
                  (Type IN [Type::"G/L Account",Type::"Charge (Item)",Type::Resource])
               THEN
                 VALIDATE(Quantity,0);

               IF (Quantity <> 0) AND ItemExists("No.") THEN BEGIN
                 ReserveSalesLine.DeleteLine(Rec);
                 CALCFIELDS("Reserved Qty. (Base)");
                 TESTFIELD("Reserved Qty. (Base)",0);
                 IF "Shipment No." = '' THEN
                   TESTFIELD("Qty. Shipped Not Invoiced",0);
                 IF "Return Receipt No." = '' THEN
                   TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                 WhseValidateSourceLine.SalesLineDelete(Rec);
               END;

               IF ("Document Type" = "Document Type"::Order) AND (Quantity <> "Quantity Invoiced") THEN
                 TESTFIELD("Prepmt. Amt. Inv.","Prepmt Amt Deducted");

               CheckAssocPurchOrder('');
               NonstockItemMgt.DelNonStockSales(Rec);

               IF "Document Type" = "Document Type"::"Blanket Order" THEN BEGIN
                 SalesLine2.RESET;
                 SalesLine2.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
                 SalesLine2.SETRANGE("Blanket Order No.","Document No.");
                 SalesLine2.SETRANGE("Blanket Order Line No.","Line No.");
                 IF SalesLine2.FINDFIRST THEN
                   SalesLine2.TESTFIELD("Blanket Order Line No.",0);
               END;

               IF Type = Type::Item THEN BEGIN
                 ATOLink.DeleteAsmFromSalesLine(Rec);
                 DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");
               END;

               IF Type = Type::"Charge (Item)" THEN
                 DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");

               CapableToPromise.RemoveReqLines("Document No.","Line No.",0,FALSE);

               IF "Line No." <> 0 THEN BEGIN
                 SalesLine2.RESET;
                 SalesLine2.SETRANGE("Document Type","Document Type");
                 SalesLine2.SETRANGE("Document No.","Document No.");
                 SalesLine2.SETRANGE("Attached to Line No.","Line No.");
                 SalesLine2.SETFILTER("Line No.",'<>%1',"Line No.");
                 SalesLine2.DELETEALL(TRUE);
               END;

               IF "Job Contract Entry No." <> 0 THEN
                 JobCreateInvoice.DeleteSalesLine(Rec);

               SalesCommentLine.SETRANGE("Document Type","Document Type");
               SalesCommentLine.SETRANGE("No.","Document No.");
               SalesCommentLine.SETRANGE("Document Line No.","Line No.");
               IF NOT SalesCommentLine.ISEMPTY THEN
                 SalesCommentLine.DELETEALL;

               IF ("Line No." <> 0) AND ("Attached to Line No." = 0) THEN BEGIN
                 SalesLine2.RESET;
                 SalesLine2.SETRANGE("Document Type","Document Type");
                 SalesLine2.SETRANGE("Document No.","Document No.");
                 SalesLine2.SETFILTER("Line No.",'<>%1',"Line No.");
                 IF SalesLine2.FINDFIRST THEN BEGIN
                   SalesLine2.VALIDATE("Recalculate Invoice Disc.",TRUE);
                   SalesLine2.MODIFY;
                 END;
               END;

               IF "Deferral Code" <> '' THEN
                 DeferralUtilities.DeferralCodeOnDelete(
                   DeferralUtilities.GetSalesDeferralDocType,'','',
                   "Document Type","Document No.","Line No.");

               //**4PS.sn DP00481
               SalesRecipe.SETRANGE("Sales Document Type", "Document Type" );
               SalesRecipe.SETRANGE("Sales Document No.", "Document No.");
               SalesRecipe.SETRANGE("Sales Line No.", "Line No.");
               SalesRecipe.DELETEALL(TRUE);
               //**4PS.en DP00481

               //**4PS.sn
               IF "Project Invoice" THEN BEGIN
                 IF "Installment Invoice" THEN BEGIN
                   //Restore Installment Amounts to be invoiced
                   IF ProjInstalmRec.GET("Job No.","Sell-to Customer No.","Plot No.","Installment No.") THEN BEGIN
                     ProjInstalmRec.SetSuspendAmountCheck;
                     //*C-027814.so
                     //ProjInstalmRec.CALCFIELDS("Invoiced Price", "Invoice in Process", "Credit Memo in Process");
                     //ProjInstalmRec."Invoice Price" :=
                     //  ProjInstalmRec."Installment Amount" - ProjInstalmRec."Invoiced Price" -
                     //  ProjInstalmRec."Invoice in Process" - ProjInstalmRec."Credit Memo in Process";
                     //*C-027814.eo
                     IF "Document Type" = "Document Type"::"Credit Memo" THEN
                       ProjInstalmRec."Invoice Price" := ProjInstalmRec."Invoice Price" - Amount
                     ELSE
                       ProjInstalmRec."Invoice Price" := ProjInstalmRec."Invoice Price" + Amount;
                     IF (ProjInstalmRec."Invoice Price" <> 0) AND
                        (((ProjInstalmRec."Installment Amount" >= 0) AND (ProjInstalmRec."Invoice Price" < 0)) OR
                         ((ProjInstalmRec."Installment Amount" <  0) AND (ProjInstalmRec."Invoice Price" > 0)))
                     THEN
                       ProjInstalmRec."Invoice Price" := 0;
                     IF (ProjInstalmRec.Points > 0) AND (ProjInstalmRec."Installment Amount" <> 0) THEN
                       ProjInstalmRec."Points to be invoiced" :=
                         ROUND(ProjInstalmRec."Invoice Price" / ProjInstalmRec."Installment Amount" * ProjInstalmRec.Points , 1);
                     ProjInstalmRec.VALIDATE("Invoice Price");
                     ProjInstalmRec.Chargeable := TRUE;  //db, 05-09-13: C009275
                     ProjInstalmRec.MODIFY;
                   END;
                 END ELSE BEGIN
                   //Restore cost plus lines status as to be invoiced
                   IF CostPlusRec.GET(
                        "Job No.","Sell-to Customer No.","Commission No.","Settl.Sheet No.","Cost Plus Line No.") AND
                      ("Document Type" <> "Document Type"::"Credit Memo")
                   THEN BEGIN
                     IF CostPlusRec."Removal Contribution" = FALSE THEN BEGIN  //db, 26-08-08: M12497
                       CostPlusRec.Invoiced := FALSE;
                       CostPlusRec.Chargeable := TRUE;
                       CostPlusRec.MODIFY;
                       //db, 22-10-09: M16544
                       lvProjCostPlusRec.SETRANGE("Project No.", "Job No.");
                       lvProjCostPlusRec.SETRANGE(Principal, "Sell-to Customer No.");
                       lvProjCostPlusRec.SETRANGE("Commission No.", "Commission No.");
                       lvProjCostPlusRec.SETRANGE("Settl.Sheet No.", "Settl.Sheet No.");
                       lvProjCostPlusRec.SETRANGE("Removal Contribution", TRUE);
                       lvProjCostPlusRec.SETRANGE("Attached to Line No. (RC)", "Cost Plus Line No.");
                       IF lvProjCostPlusRec.FINDSET THEN BEGIN
                         REPEAT
                           lvProjCostPlusRec.Invoiced := FALSE;
                           lvProjCostPlusRec.Chargeable := TRUE;
                           lvProjCostPlusRec.MODIFY;
                         UNTIL lvProjCostPlusRec.NEXT = 0;

                         // Reset Collective List status
                         IF CostPlusRec."Collective List No." <> '' THEN
                           IF ProjectCollectiveList.GET(CostPlusRec."Collective List No.") THEN BEGIN
                             IF ProjectCollectiveList.Status <> ProjectCollectiveList.Status::Open THEN BEGIN
                               ProjectCollectiveList.Status := ProjectCollectiveList.Status::Open;
                               ProjectCollectiveList.MODIFY(TRUE);
                             END;
                           END;

                       END;
                     END;
                   END;
                 END;
               END;

               IF "Service Invoice" AND NOT "Copy of Document" THEN BEGIN
                 IF NOT lvServiceContractRec.GET("Service Contract No.") THEN
                   lvServiceContractRec.INIT;
                 IF "Document Type" <> "Document Type"::"Invoice Proposal" THEN BEGIN
                   IF "Installment Invoice" THEN BEGIN
                     //Restore Installment Amounts to be invoiced
                     IF lvContractInstallmentRec.GET("Service Contract No.", "Installment Line No.") THEN BEGIN
                       IF lvContractInstallmentRec."Last Invoiced Until" = "Prev. Invoiced Until" THEN BEGIN
                         lvContractInstallmentRec."Invoiced Until" := "Prev. Invoiced Until";
                         lvContractInstallmentRec."Last Invoiced Until" := "Prev. Last Invoiced Until";
                         lvContractInstallmentRec.MODIFY(TRUE);
                       END;
                     END;
                   END ELSE BEGIN
                     //Restore cost plus lines status as to be invoiced
                     IF ServCostPlusRec.GET("Service Order No.", "Cost Plus Line No.") THEN
                       MakeServiceCostPlusChargeable(ServCostPlusRec)
                     ELSE BEGIN
                       IF NOT IsConsumptionInvoice(Rec) THEN BEGIN
                         CASE "Collective-List Line Type" OF
                           "Collective-List Line Type"::" ":
                             BEGIN
                               IF lvContractObjectRec.GET("Service Contract No.", "Object No.") THEN BEGIN
                                 lvContractObjectRec."Invoiced Until" := "Prev. Invoiced Until";
                                 lvContractObjectRec."Last Invoiced Until" := "Prev. Last Invoiced Until";
                                 lvContractObjectRec.MODIFY(TRUE);
                                 lvServiceContractRec."Invoiced Until" := lvServiceContractRec."Last Invoiced Until";
                                 lvServiceContractRec.MODIFY(TRUE);
                               END;
                             END;
                           "Collective-List Line Type"::Dynamic:
                             BEGIN
                               CollectiveListSCInvLine.SETCURRENTKEY("Service Contract No.");
                               CollectiveListSCInvLine.SETRANGE("Service Contract No.", "Service Contract No.");
                               CollectiveListSCInvLine.SETRANGE("Service Object No.", "Object No.");
                               IF NOT CollectiveListSCInvLine.ISEMPTY THEN
                                 CollectiveListSCInvLine.MODIFYALL(Invoiced, FALSE, TRUE);
                             END;
                           "Collective-List Line Type"::Installment:
                             BEGIN
                               CollectiveListSCInvLine.SETCURRENTKEY("Service Contract No.");
                               CollectiveListSCInvLine.SETRANGE("Service Contract No.", "Service Contract No.");
                               CollectiveListSCInvLine.SETRANGE("Installment Line No.", "Installment Line No.");
                               IF NOT CollectiveListSCInvLine.ISEMPTY THEN
                                 CollectiveListSCInvLine.MODIFYALL(Invoiced, FALSE, TRUE);
                             END;
                         END;
                       END;
                     END;
                   END;
                 END ELSE BEGIN
                 //**4PSmg, 21-04-11: M26893
                   IF "Installment Invoice" THEN BEGIN
                     IF lvContractInstallmentRec.GET("Service Contract No.", "Installment Line No.") THEN BEGIN
                       IF lvContractInstallmentRec."Last Invoiced Until" = "Prev. Invoiced Until" THEN BEGIN
                         lvContractInstallmentRec."Invoiced Until" := "Prev. Invoiced Until";
                         lvContractInstallmentRec."Last Invoiced Until" := "Prev. Last Invoiced Until";
                         lvContractInstallmentRec.MODIFY(TRUE);
                       END;
                     END;
                   END ELSE BEGIN
                     IF NOT IsConsumptionInvoice(Rec) THEN BEGIN
                       IF lvContractObjectRec.GET("Service Contract No.", "Object No.") THEN BEGIN
                         IF lvContractObjectRec."Last Invoiced Until" = "Prev. Invoiced Until" THEN BEGIN
                           lvContractObjectRec."Invoiced Until" := "Prev. Invoiced Until";
                           lvContractObjectRec."Last Invoiced Until" := "Prev. Last Invoiced Until";
                           lvContractObjectRec.MODIFY(TRUE);
                         END;
                       END;
                       IF lvServiceContractRec."No." <> '' THEN BEGIN
                         lvServiceContractRec."Invoiced Until" := lvServiceContractRec."Last Invoiced Until";
                         lvServiceContractRec.MODIFY(TRUE);
                       END;
                     END;
                   END;
                 END;
               END;

               IF "Plant Invoice" AND ("Service Order No." <> '') AND NOT "Copy of Document" THEN
                 IF ServCostPlusRec.GET("Service Order No.", "Cost Plus Line No.") THEN
                   MakeServiceCostPlusChargeable(ServCostPlusRec);
               //**4PS.en
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=ENU=Sales Line;
    LookupPageID=Page11012065;
    DrillDownPageID=Page11012065;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Invoice Proposal;
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Invoice Proposal;
                                                   Description=[4PS: Raam  -> Afroep  ] }
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=ENU=Sell-to Customer No.;
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=FIELD(Document Type));
                                                   CaptionML=ENU=Document No. }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 5   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                GetSalesHeader;

                                                                TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Shipment No.",'');

                                                                TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                TESTFIELD("Return Qty. Received",0);
                                                                TESTFIELD("Return Receipt No.",'');

                                                                TESTFIELD("Prepmt. Amt. Inv.",0);

                                                                CheckAssocPurchOrder(FIELDCAPTION(Type));

                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  //**4PS.sn
                                                                  IF "Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"] THEN BEGIN
                                                                    GetSalesHeader;
                                                                    IF SalesHeader."Project Invoice" THEN
                                                                      TESTFIELD(Type,Type::" "); //Only textlines allowed to change
                                                                  END;
                                                                  //**4PS.en
                                                                  CASE xRec.Type OF
                                                                    Type::Item:
                                                                      BEGIN
                                                                        ATOLink.DeleteAsmFromSalesLine(Rec);
                                                                        IF Quantity <> 0 THEN BEGIN
                                                                          SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
                                                                          CALCFIELDS("Reserved Qty. (Base)");
                                                                          TESTFIELD("Reserved Qty. (Base)",0);
                                                                          //**4PS.sn DP00121
                                                                          CALCFIELDS("Reserved NS Qty. (Base)");
                                                                          TESTFIELD("Reserved NS Qty. (Base)",0);
                                                                          //**4PS.en
                                                                          ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                          WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                        END;
                                                                      END;
                                                                    Type::"Fixed Asset":
                                                                      IF Quantity <> 0 THEN
                                                                        SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
                                                                    Type::"Charge (Item)":
                                                                      DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");
                                                                  END;
                                                                  IF xRec."Deferral Code" <> '' THEN
                                                                    DeferralUtilities.RemoveOrSetDeferralSchedule('',
                                                                      DeferralUtilities.GetSalesDeferralDocType,'','',
                                                                      xRec."Document Type",xRec."Document No.",xRec."Line No.",
                                                                      xRec.GetDeferralAmount,xRec."Posting Date",'',xRec."Currency Code",TRUE);
                                                                END;
                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);
                                                                TempSalesLine := Rec;
                                                                IF NOT ("Project Invoice" OR "Service Invoice" OR "Plant Invoice" OR SalesLogisticsSepaRentContract) THEN BEGIN //**4PS.n
                                                                  INIT;
                                                                  IF xRec."Line Amount" <> 0 THEN
                                                                    "Recalculate Invoice Disc." := TRUE;
                                                                END; //**4PS.n
                                                                Type := TempSalesLine.Type;
                                                                "System-Created Entry" := TempSalesLine."System-Created Entry";

                                                                IF Type = Type::Item THEN
                                                                  "Allow Item Charge Assignment" := TRUE
                                                                ELSE
                                                                  "Allow Item Charge Assignment" := FALSE;
                                                                IF Type = Type::Item THEN BEGIN
                                                                  IF SalesHeader.InventoryPickConflict("Document Type","Document No.",SalesHeader."Shipping Advice") THEN
                                                                    ERROR(Text056,SalesHeader."Shipping Advice");
                                                                  IF SalesHeader.WhseShpmntConflict("Document Type","Document No.",SalesHeader."Shipping Advice") THEN
                                                                    ERROR(Text052,SalesHeader."Shipping Advice");
                                                                END;

                                                                //**4PS.sn
                                                                IF NOT ("Project Invoice" OR "Service Invoice" OR "Plant Invoice" OR SalesLogisticsSepaRentContract) THEN
                                                                  GetTemporarySalesLine;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)";
                                                   OptionString=[ ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)] }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(" ")) "Standard Text"
                                                                 ELSE IF (Type=CONST(G/L Account),
                                                                          System-Created Entry=CONST(No)) "G/L Account" WHERE (Direct Posting=CONST(Yes),
                                                                                                                               Account Type=CONST(Posting),
                                                                                                                               Blocked=CONST(No))
                                                                                                                               ELSE IF (Type=CONST(G/L Account),
                                                                                                                                        System-Created Entry=CONST(Yes)) "G/L Account"
                                                                                                                                        ELSE IF (Type=CONST(Item)) Item
                                                                                                                                        ELSE IF (Type=CONST(Resource)) Resource
                                                                                                                                        ELSE IF (Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                                                                                        ELSE IF (Type=CONST("Charge (Item)")) "Item Charge";
                                                   OnValidate=VAR
                                                                PrepaymentMgt@1002 : Codeunit 441;
                                                              BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                CheckItemAvailable(FIELDNO("No."));

                                                                IF (xRec."No." <> "No.") AND (Quantity <> 0) THEN BEGIN
                                                                  TESTFIELD("Qty. to Asm. to Order (Base)",0);
                                                                  CALCFIELDS("Reserved Qty. (Base)");
                                                                  TESTFIELD("Reserved Qty. (Base)",0);
                                                                  IF Type = Type::Item THEN
                                                                    WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;

                                                                TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Shipment No.",'');

                                                                TESTFIELD("Prepmt. Amt. Inv.",0);

                                                                TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                TESTFIELD("Return Qty. Received",0);
                                                                TESTFIELD("Return Receipt No.",'');

                                                                IF "No." = '' THEN
                                                                  ATOLink.DeleteAsmFromSalesLine(Rec);
                                                                CheckAssocPurchOrder(FIELDCAPTION("No."));
                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);

                                                                TempSalesLine := Rec;
                                                                IF NOT ("Project Invoice" OR "Service Invoice" OR "Plant Invoice" OR SalesLogisticsSepaRentContract) THEN BEGIN //**4PS.n
                                                                  INIT;
                                                                  IF xRec."Line Amount" <> 0 THEN
                                                                    "Recalculate Invoice Disc." := TRUE;
                                                                END; //**4PS.n
                                                                Type := TempSalesLine.Type;
                                                                "No." := TempSalesLine."No.";
                                                                IF "No." = '' THEN
                                                                  EXIT;
                                                                IF Type <> Type::" " THEN
                                                                  Quantity := TempSalesLine.Quantity;

                                                                "System-Created Entry" := TempSalesLine."System-Created Entry";
                                                                IF NOT ("Project Invoice" OR "Service Invoice" OR "Plant Invoice" OR SalesLogisticsSepaRentContract) THEN  //**4PS.n
                                                                  GetTemporarySalesLine;  //**4PS.n
                                                                GetSalesHeader;
                                                                InitHeaderDefaults(SalesHeader);
                                                                CALCFIELDS("Substitution Available");

                                                                "Promised Delivery Date" := SalesHeader."Promised Delivery Date";
                                                                "Requested Delivery Date" := SalesHeader."Requested Delivery Date";
                                                                //**4PS.sn
                                                                IF "Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"] THEN
                                                                  "Shipment Date" := SalesHeader."Shipment Date"
                                                                ELSE BEGIN
                                                                //**4PS.en
                                                                  "Shipment Date" :=
                                                                    CalendarMgmt.CalcDateBOC(
                                                                      '',
                                                                      SalesHeader."Shipment Date",
                                                                      CalChange."Source Type"::Location,
                                                                      "Location Code",
                                                                      '',
                                                                      CalChange."Source Type"::"Shipping Agent",
                                                                      "Shipping Agent Code",
                                                                      "Shipping Agent Service Code",
                                                                      FALSE);
                                                                  UpdateDates;
                                                                END; //**4PS.n

                                                                CASE Type OF
                                                                  Type::" ":
                                                                    BEGIN
                                                                      StdTxt.GET("No.");
                                                                      Description := StdTxt.Description;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                    END;
                                                                  Type::"G/L Account":
                                                                    BEGIN
                                                                      GLAcc.GET("No.");
                                                                      GLAcc.CheckGLAcc;
                                                                      IF NOT "System-Created Entry" THEN
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      Description := GLAcc.Name;
                                                                      //**4PS.sn
                                                                      IF ("Job No." = '') AND ("Service Order No." = '') AND ("Shortcut Dimension 2 Code" = '') THEN BEGIN
                                                                        SalesHeader.GET("Document Type","Document No.");
                                                                        IF "No." <> GetCPGInvRoundAcc(SalesHeader) THEN //C023319
                                                                          Description := SalesHeader."Bill-to Name";  //previously filled with GLAcc.Name;
                                                                      END;
                                                                      //**4PS.en
                                                                      IF GLAcc."Gen. Prod. Posting Group" <> '' THEN  //**4PS.n
                                                                        "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                                                                      IF GLAcc."VAT Prod. Posting Group" <> '' THEN  //**4PS.n
                                                                        "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
                                                                      IF GLAcc."Tax Group Code" <> '' THEN  //**4PS.n
                                                                        "Tax Group Code" := GLAcc."Tax Group Code";
                                                                      //"Allow Invoice Disc." := FALSE;  //**4PS.o
                                                                      //IF ("Project Invoice" OR "Service Invoice" OR "Plant Invoice") THEN //**4PS.o C021140
                                                                      //**4PS.sn
                                                                      IF ("Project Invoice" OR "Plant Invoice") THEN  //**4PS.n C021140
                                                                        "Allow Invoice Disc." := FALSE;
                                                                      //**4PS.en
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                      InitDeferralCode;
                                                                    END;
                                                                  Type::Item:
                                                                    BEGIN
                                                                      "Item No." := "No."; //**4PS.n
                                                                      GetItem;
                                                                      "Shortcut Dimension 2 Code" := Item."Global Dimension 2 Code";   //**4PS.n
                                                                      CheckIfItemIsBlocked(Item); //**4PS.n
                                                                      Item.TESTFIELD(Blocked,FALSE);
                                                                      Item.TESTFIELD("Gen. Prod. Posting Group");
                                                                      IF Item.Type = Item.Type::Inventory THEN BEGIN
                                                                        Item.TESTFIELD("Inventory Posting Group");
                                                                        "Posting Group" := Item."Inventory Posting Group";
                                                                      END;
                                                                      Description := Item.Description;
                                                                      "Description 2" := Item."Description 2";
                                                                      "Unit of Measure Code" := Item."Sales Unit of Measure";
                                                                //**4PS.n: if item changes, required for GetUnitCost (case C-006869)
                                                                      GetUnitCost;
                                                                      "Allow Invoice Disc." := Item."Allow Invoice Disc.";
                                                                      "Units per Parcel" := Item."Units per Parcel";
                                                                      "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := Item."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := Item."Tax Group Code";
                                                                      "Item Category Code" := Item."Item Category Code";
                                                                      "Product Group Code" := Item."Product Group Code";
                                                                      Nonstock := Item."Created From Nonstock Item";
                                                                      "Profit %" := Item."Profit %";
                                                                      "Allow Item Charge Assignment" := TRUE;
                                                                      PrepaymentMgt.SetSalesPrepaymentPct(Rec,SalesHeader."Posting Date");

                                                                      IF SalesHeader."Language Code" <> '' THEN
                                                                        GetItemTranslation;

                                                                      IF Item.Reserve = Item.Reserve::Optional THEN
                                                                        Reserve := SalesHeader.Reserve
                                                                      ELSE
                                                                        Reserve := Item.Reserve;

                                                                      "Unit of Measure Code" := Item."Sales Unit of Measure";
                                                                      InitDeferralCode;

                                                                      ValidateItem(ItemTypeOpt::Item); //**4PS.n
                                                                    END;
                                                                  Type::Resource:
                                                                    BEGIN
                                                                      Res.GET("No.");
                                                                      Res.TESTFIELD(Blocked,FALSE);
                                                                      Res.TESTFIELD("Gen. Prod. Posting Group");
                                                                      Description := Res.Name;
                                                                      "Description 2" := Res."Name 2";
                                                                      "Unit of Measure Code" := Res."Base Unit of Measure";
                                                                      "Unit Cost (LCY)" := Res."Unit Cost";
                                                                      "Gen. Prod. Posting Group" := Res."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := Res."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := Res."Tax Group Code";
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                      FindResUnitCost;
                                                                      InitDeferralCode;
                                                                    END;
                                                                  Type::"Fixed Asset":
                                                                    BEGIN
                                                                      FA.GET("No.");
                                                                      FA.TESTFIELD(Inactive,FALSE);
                                                                      FA.TESTFIELD(Blocked,FALSE);
                                                                      "Depreciation Book Code" := '';  //**4PS
                                                                      GetFAPostingGroup;
                                                                      Description := FA.Description;
                                                                      "Description 2" := FA."Description 2";
                                                                      "Allow Invoice Disc." := FALSE;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                    END;
                                                                  Type::"Charge (Item)":
                                                                    BEGIN
                                                                      ItemCharge.GET("No.");
                                                                      Description := ItemCharge.Description;
                                                                      "Gen. Prod. Posting Group" := ItemCharge."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := ItemCharge."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := ItemCharge."Tax Group Code";
                                                                      "Allow Invoice Disc." := FALSE;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                    END;
                                                                END;

                                                                IF NOT (Type IN [Type::" ",Type::"Fixed Asset"]) THEN
                                                                  VALIDATE("VAT Prod. Posting Group");

                                                                UpdatePrepmtSetupFields;

                                                                IF Type <> Type::" " THEN BEGIN
                                                                  VALIDATE("Unit of Measure Code");
                                                                  IF Quantity <> 0 THEN BEGIN
                                                                    InitOutstanding;
                                                                    IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                                                                      InitQtyToReceive
                                                                    ELSE
                                                                      InitQtyToShip;
                                                                    InitQtyToAsm;
                                                                    UpdateWithWarehouseShip;
                                                                  END;
                                                                  UpdateUnitPrice(FIELDNO("No."));
                                                                END;

                                                                IF NOT ISTEMPORARY THEN
                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID3(Type),"No.",
                                                                    DATABASE::"Plant Type", "Plant Type", //**4PS.n
                                                                    DATABASE::Job,"Job No.",
                                                                    DATABASE::"Service Order","Service Order No.", //**4PS.n
                                                                    DATABASE::"Service-Contract","Service Contract No.", //**4PS.n
                                                                    DATABASE::"Responsibility Center","Responsibility Center",
                                                                    DATABASE::"Service Group", GetServiceObjectGroup); //**4PS.n

                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  IF Type = Type::Item THEN
                                                                    IF (Quantity <> 0) AND ItemExists(xRec."No.") THEN BEGIN
                                                                      ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                      WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                    END;
                                                                  GetDefaultBin;
                                                                  AutoAsmToOrder;
                                                                  DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");
                                                                  IF Type = Type::"Charge (Item)" THEN
                                                                    DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");
                                                                END;

                                                                UpdateItemCrossRef;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No),
                                                                                 Project Filter=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                CheckAssocPurchOrder(FIELDCAPTION("Location Code"));
                                                                IF "Location Code" <> '' THEN
                                                                  IF IsServiceItem THEN
                                                                    Item.TESTFIELD(Type,Item.Type::Inventory);
                                                                IF xRec."Location Code" <> "Location Code" THEN BEGIN
                                                                  IF NOT FullQtyIsForAsmToOrder THEN BEGIN
                                                                    CALCFIELDS("Reserved Qty. (Base)");
                                                                    TESTFIELD("Reserved Qty. (Base)","Qty. to Asm. to Order (Base)");
                                                                  END;
                                                                  TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                  TESTFIELD("Shipment No.",'');
                                                                  TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                  TESTFIELD("Return Receipt No.",'');
                                                                END;

                                                                GetSalesHeader;
                                                                //**4PS.sn
                                                                IF "Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"] THEN
                                                                  "Shipment Date" := SalesHeader."Shipment Date"
                                                                ELSE
                                                                //**4PS.en
                                                                "Shipment Date" :=
                                                                  CalendarMgmt.CalcDateBOC(
                                                                    '',
                                                                    SalesHeader."Shipment Date",
                                                                    CalChange."Source Type"::Location,
                                                                    "Location Code",
                                                                    '',
                                                                    CalChange."Source Type"::"Shipping Agent",
                                                                    "Shipping Agent Code",
                                                                    "Shipping Agent Service Code",
                                                                    FALSE);

                                                                CheckItemAvailable(FIELDNO("Location Code"));

                                                                IF NOT "Drop Shipment" THEN BEGIN
                                                                  IF "Location Code" = '' THEN BEGIN
                                                                    IF InvtSetup.GET THEN
                                                                      "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
                                                                  END ELSE
                                                                    IF Location.GET("Location Code") THEN
                                                                      "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
                                                                END ELSE
                                                                  EVALUATE("Outbound Whse. Handling Time",'<0D>');

                                                                IF "Location Code" <> xRec."Location Code" THEN BEGIN
                                                                  InitItemAppl(TRUE);
                                                                  GetDefaultBin;
                                                                  InitQtyToAsm;
                                                                  AutoAsmToOrder;
                                                                  IF Quantity <> 0 THEN BEGIN
                                                                    IF NOT "Drop Shipment" THEN
                                                                      UpdateWithWarehouseShip;
                                                                    IF NOT FullReservedQtyIsForAsmToOrder THEN
                                                                      ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                    WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                  END;
                                                                END;

                                                                //**4PS.sn
                                                                //*C007227.so
                                                                //CreateDim(
                                                                //  DATABASE::Item, "Item No.",
                                                                //  DATABASE::"Plant Type", "Plant Type",
                                                                //  DATABASE::Job,"Job No.",
                                                                //  DATABASE::"Service Order","Service Order No.",
                                                                //  DATABASE::"Service-Contract","Service Contract No.",
                                                                //  DATABASE::"Responsibility Center","Responsibility Center",
                                                                //  DATABASE::Location,"Location Code");  //**4PS.n
                                                                //*C007227.eo
                                                                //**4PS.en

                                                                UpdateDates;

                                                                //**4PS.so
                                                                //IF (Type = Type::Item) AND ("No." <> '') THEN
                                                                //  GetUnitCost;  //db, 21-12-10: for SKU price not relevant (ItemCostMgt.UpdateSKUFromItem)
                                                                //**4PS.eo

                                                                CheckWMS;

                                                                IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                  ValidateReturnReasonCode(FIELDNO("Location Code"));
                                                              END;

                                                   CaptionML=ENU=Location Code;
                                                   Description=BIN }
    { 8   ;   ;Posting Group       ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group"
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   CaptionML=ENU=Posting Group;
                                                   Editable=No }
    { 10  ;   ;Shipment Date       ;Date          ;OnValidate=VAR
                                                                CheckDateConflict@1000 : Codeunit 99000815;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                IF CurrFieldNo <> 0 THEN
                                                                  AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);

                                                                IF "Shipment Date" <> 0D THEN BEGIN
                                                                  IF CurrFieldNo IN [
                                                                                     FIELDNO("Planned Shipment Date"),
                                                                                     FIELDNO("Planned Delivery Date"),
                                                                                     FIELDNO("Shipment Date"),
                                                                                     FIELDNO("Shipping Time"),
                                                                                     FIELDNO("Outbound Whse. Handling Time"),
                                                                                     FIELDNO("Requested Delivery Date")]
                                                                  THEN
                                                                    CheckItemAvailable(FIELDNO("Shipment Date"));

                                                                  IF ("Shipment Date" < WORKDATE) AND (Type <> Type::" ") THEN
                                                                    IF NOT (HideValidationDialog OR HasBeenShown) AND GUIALLOWED THEN BEGIN
                                                                      MESSAGE(
                                                                        Text014,
                                                                        FIELDCAPTION("Shipment Date"),"Shipment Date",WORKDATE);
                                                                      HasBeenShown := TRUE;
                                                                    END;
                                                                END;

                                                                AutoAsmToOrder;
                                                                IF (xRec."Shipment Date" <> "Shipment Date") AND
                                                                   (Quantity <> 0) AND
                                                                   NOT StatusCheckSuspended
                                                                THEN
                                                                  CheckDateConflict.SalesLineCheck(Rec,CurrFieldNo <> 0);

                                                                //**4PS.sn
                                                                IF "Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"] THEN
                                                                  "Shipment Date" := SalesHeader."Shipment Date"
                                                                ELSE BEGIN
                                                                //**4PS.en
                                                                  IF NOT PlannedShipmentDateCalculated THEN
                                                                    "Planned Shipment Date" := CalcPlannedShptDate(FIELDNO("Shipment Date"));
                                                                  IF NOT PlannedDeliveryDateCalculated THEN
                                                                    "Planned Delivery Date" := CalcPlannedDeliveryDate(FIELDNO("Shipment Date"));
                                                                END; //**4PS.n
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Shipment Date }
    { 11  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 12  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 13  ;   ;Unit of Measure     ;Text10        ;CaptionML=ENU=Unit of Measure }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;

                                                                CheckAssocPurchOrder(FIELDCAPTION(Quantity));

                                                                IF "Shipment No." <> '' THEN
                                                                  CheckShipmentRelation
                                                                ELSE
                                                                  IF "Return Receipt No." <> '' THEN
                                                                    CheckRetRcptRelation;

                                                                "Quantity (Base)" := CalcBaseQty(Quantity);

                                                                IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                                                                  IF (Quantity * "Return Qty. Received" < 0) OR
                                                                     ((ABS(Quantity) < ABS("Return Qty. Received")) AND ("Return Receipt No." = ''))
                                                                  THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text003,FIELDCAPTION("Return Qty. Received")));
                                                                  IF ("Quantity (Base)" * "Return Qty. Received (Base)" < 0) OR
                                                                     ((ABS("Quantity (Base)") < ABS("Return Qty. Received (Base)")) AND ("Return Receipt No." = ''))
                                                                  THEN
                                                                    FIELDERROR("Quantity (Base)",STRSUBSTNO(Text003,FIELDCAPTION("Return Qty. Received (Base)")));
                                                                END ELSE BEGIN
                                                                  IF (Quantity * "Quantity Shipped" < 0) OR
                                                                     ((ABS(Quantity) < ABS("Quantity Shipped")) AND ("Shipment No." = ''))
                                                                  THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text003,FIELDCAPTION("Quantity Shipped")));
                                                                  IF ("Quantity (Base)" * "Qty. Shipped (Base)" < 0) OR
                                                                     ((ABS("Quantity (Base)") < ABS("Qty. Shipped (Base)")) AND ("Shipment No." = ''))
                                                                  THEN
                                                                    FIELDERROR("Quantity (Base)",STRSUBSTNO(Text003,FIELDCAPTION("Qty. Shipped (Base)")));
                                                                END;

                                                                IF (Type = Type::"Charge (Item)") AND (CurrFieldNo <> 0) THEN BEGIN
                                                                  IF (Quantity = 0) AND ("Qty. to Assign" <> 0) THEN
                                                                    FIELDERROR("Qty. to Assign",STRSUBSTNO(Text009,FIELDCAPTION(Quantity),Quantity));
                                                                  IF (Quantity * "Qty. Assigned" < 0) OR (ABS(Quantity) < ABS("Qty. Assigned")) THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text003,FIELDCAPTION("Qty. Assigned")));
                                                                END;

                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);
                                                                IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") THEN BEGIN
                                                                  InitOutstanding;
                                                                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                                                                    InitQtyToReceive
                                                                  ELSE
                                                                    InitQtyToShip;
                                                                  InitQtyToAsm;
                                                                  SetDefaultQuantity;
                                                                END;

                                                                IF Item."Logistics on Component Level" = FALSE THEN  //**4PS.n
                                                                  CheckItemAvailable(FIELDNO(Quantity));

                                                                IF (Quantity * xRec.Quantity < 0) OR (Quantity = 0) THEN
                                                                  InitItemAppl(FALSE);

                                                                //IF (Type = Type::Item) AND (CurrFieldNo <> FIELDNO("No.")) THEN BEGIN //**4PS,o
                                                                IF ((Type = Type::Item) OR ("Item No." <> '')) AND (CurrFieldNo <> FIELDNO("No.")) AND (NOT "Plant Invoice") THEN BEGIN //**4PS.n
                                                                  UpdateUnitPrice(FIELDNO(Quantity));
                                                                  IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") THEN BEGIN
                                                                    ReserveSalesLine.VerifyQuantity(Rec,xRec);
                                                                    IF NOT "Drop Shipment" THEN
                                                                      UpdateWithWarehouseShip;
                                                                    WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                    IF ("Quantity (Base)" * xRec."Quantity (Base)" <= 0) AND ("No." <> '') THEN BEGIN
                                                                      GetItem;
                                                                      IF (Item."Costing Method" = Item."Costing Method"::Standard) AND NOT IsShipment THEN
                                                                        GetUnitCost;
                                                                    END;
                                                                  END;
                                                                  VALIDATE("Qty. to Assemble to Order");
                                                                  IF (Quantity = "Quantity Invoiced") AND (CurrFieldNo <> 0) THEN
                                                                    CheckItemChargeAssgnt;
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);
                                                                END ELSE
                                                                  VALIDATE("Line Discount %");

                                                                IF (xRec.Quantity <> Quantity) AND (Quantity = 0) AND
                                                                   ((Amount <> 0) OR ("Amount Including VAT" <> 0) OR ("VAT Base Amount" <> 0))
                                                                THEN BEGIN
                                                                  Amount := 0;
                                                                  "Amount Including VAT" := 0;
                                                                  "VAT Base Amount" := 0;
                                                                END;

                                                                UpdatePrePaymentAmounts;

                                                                CheckWMS;

                                                                CALCFIELDS("Reserved Qty. (Base)");
                                                                VALIDATE("Reserved Qty. (Base)");
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 16  ;   ;Outstanding Quantity;Decimal       ;CaptionML=ENU=Outstanding Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 17  ;   ;Qty. to Invoice     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Qty. to Invoice" = MaxQtyToInvoice THEN
                                                                  InitQtyToInvoice
                                                                ELSE
                                                                  "Qty. to Invoice (Base)" := CalcBaseQty("Qty. to Invoice");
                                                                IF ("Qty. to Invoice" * Quantity < 0) OR
                                                                   (ABS("Qty. to Invoice") > ABS(MaxQtyToInvoice))
                                                                THEN
                                                                  ERROR(
                                                                    Text005,
                                                                    MaxQtyToInvoice);
                                                                IF ("Qty. to Invoice (Base)" * "Quantity (Base)" < 0) OR
                                                                   (ABS("Qty. to Invoice (Base)") > ABS(MaxQtyToInvoiceBase))
                                                                THEN
                                                                  ERROR(
                                                                    Text006,
                                                                    MaxQtyToInvoiceBase);
                                                                "VAT Difference" := 0;
                                                                CalcInvDiscToInvoice;
                                                                CalcPrepaymentToDeduct;
                                                              END;

                                                   CaptionML=ENU=Qty. to Invoice;
                                                   DecimalPlaces=0:5 }
    { 18  ;   ;Qty. to Ship        ;Decimal       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                GetLocation("Location Code");
                                                                IF (CurrFieldNo <> 0) AND
                                                                // (Type = Type::Item) AND //**4PS.o
                                                                   ((Type = Type::Item) OR ("Item No." <> '')) AND //**4PS.n (db, 02-11-10)
                                                                   (NOT "Drop Shipment")
                                                                THEN BEGIN
                                                                  IF Location."Require Shipment" AND
                                                                     ("Qty. to Ship" <> 0)
                                                                  THEN
                                                                    CheckWarehouse;
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;

                                                                //**4PS.sn
                                                                IF ("Item No." <> '') AND ("Document Type" = "Document Type"::Order) AND  ("Qty. to Ship" <> 0) THEN BEGIN
                                                                  GetItem;
                                                                  Item.TESTFIELD("Logistics on Component Level",FALSE);
                                                                END;
                                                                //**4PS.en

                                                                IF "Qty. to Ship" = "Outstanding Quantity" THEN
                                                                BEGIN                        //**4PS.n
                                                                  OnlyCheckForOpen := TRUE;  //**4PS.n
                                                                  InitQtyToShip
                                                                END                          //**4PS.n
                                                                ELSE BEGIN
                                                                  "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");
                                                                  CheckServItemCreation;
                                                                  InitQtyToInvoice;
                                                                END;
                                                                IF ((("Qty. to Ship" < 0) XOR (Quantity < 0)) AND (Quantity <> 0) AND ("Qty. to Ship" <> 0)) OR
                                                                   (ABS("Qty. to Ship") > ABS("Outstanding Quantity")) OR
                                                                   (((Quantity < 0) XOR ("Outstanding Quantity" < 0)) AND (Quantity <> 0) AND ("Outstanding Quantity" <> 0))
                                                                THEN
                                                                  ERROR(
                                                                    Text007,
                                                                    "Outstanding Quantity");
                                                                IF ((("Qty. to Ship (Base)" < 0) XOR ("Quantity (Base)" < 0)) AND ("Qty. to Ship (Base)" <> 0) AND ("Quantity (Base)" <> 0)) OR
                                                                   (ABS("Qty. to Ship (Base)") > ABS("Outstanding Qty. (Base)")) OR
                                                                   ((("Quantity (Base)" < 0) XOR ("Outstanding Qty. (Base)" < 0)) AND ("Quantity (Base)" <> 0) AND ("Outstanding Qty. (Base)" <> 0))
                                                                THEN
                                                                  ERROR(
                                                                    Text008,
                                                                    "Outstanding Qty. (Base)");

                                                                IF (CurrFieldNo <> 0) AND (Type = Type::Item) AND ("Qty. to Ship" < 0) THEN
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);

                                                                ATOLink.UpdateQtyToAsmFromSalesLine(Rec);
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Qty. to Ship;
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Unit Price          ;Decimal       ;OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                VALIDATE("Line Discount %");
                                                              END;

                                                   CaptionML=ENU=Unit Price;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Unit Price")) }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;OnValidate=BEGIN
                                                                IF (CurrFieldNo = FIELDNO("Unit Cost (LCY)")) AND
                                                                   ("Unit Cost (LCY)" <> xRec."Unit Cost (LCY)")
                                                                THEN
                                                                  CheckAssocPurchOrder(FIELDCAPTION("Unit Cost (LCY)"));

                                                                IF (CurrFieldNo = FIELDNO("Unit Cost (LCY)")) AND
                                                                   (Type = Type::Item) AND ("No." <> '') AND ("Quantity (Base)" <> 0)
                                                                THEN BEGIN
                                                                  TestJobPlanningLine;
                                                                  GetItem;
                                                                  IF (Item."Costing Method" = Item."Costing Method"::Standard) AND NOT IsShipment THEN BEGIN
                                                                    IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                                                                      ERROR(
                                                                        Text037,
                                                                        FIELDCAPTION("Unit Cost (LCY)"),Item.FIELDCAPTION("Costing Method"),
                                                                        Item."Costing Method",FIELDCAPTION(Quantity));
                                                                    ERROR(
                                                                      Text038,
                                                                      FIELDCAPTION("Unit Cost (LCY)"),Item.FIELDCAPTION("Costing Method"),
                                                                      Item."Costing Method",FIELDCAPTION(Quantity));
                                                                  END;
                                                                END;

                                                                GetSalesHeader;
                                                                IF SalesHeader."Currency Code" <> '' THEN BEGIN
                                                                  Currency.TESTFIELD("Unit-Amount Rounding Precision");
                                                                  "Unit Cost" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtLCYToFCY(
                                                                        1, //**4PS.n
                                                                        "Job No.", //**4PS.n
                                                                        GetDate,SalesHeader."Currency Code",
                                                                //      "Unit Cost (LCY)",SalesHeader."Currency Factor"), //**4PS.o
                                                                        "Unit Cost (LCY)",SalesHeader."Currency Factor",TRUE), //**4PS.n
                                                                      Currency."Unit-Amount Rounding Precision")
                                                                END ELSE
                                                                  "Unit Cost" := "Unit Cost (LCY)";
                                                              END;

                                                   CaptionML=ENU=Unit Cost (LCY);
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=ENU=VAT %;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 27  ;   ;Line Discount %     ;Decimal       ;OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                "Line Discount Amount" :=
                                                                  ROUND(
                                                                //    //ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") * //**4PS.o
                                                                    ROUND(Quantity * "Unit Price" * RentalFactor,Currency."Amount Rounding Precision") * //**4PS.n
                                                                    "Line Discount %" / 100,Currency."Amount Rounding Precision");
                                                                "Inv. Discount Amount" := 0;
                                                                "Inv. Disc. Amount to Invoice" := 0;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Line Discount %;
                                                   DecimalPlaces=0:5;
                                                   MaxValue=100 }
    { 28  ;   ;Line Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                GetSalesHeader;
                                                                "Line Discount Amount" := ROUND("Line Discount Amount",Currency."Amount Rounding Precision");
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                TESTFIELD(Quantity);
                                                                IF xRec."Line Discount Amount" <> "Line Discount Amount" THEN
                                                                  //**4PS.so
                                                                  //IF ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") <> 0 THEN
                                                                  //  "Line Discount %" :=
                                                                  //     ROUND(
                                                                  //       "Line Discount Amount" / ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") * 100,
                                                                  //       0.00001)
                                                                  //**4PS.eo
                                                                  //**4PS.sn
                                                                  IF ROUND(Quantity * "Unit Price" * RentalFactor,Currency."Amount Rounding Precision") <> 0 THEN
                                                                    "Line Discount %" :=
                                                                      ROUND(
                                                                       "Line Discount Amount" / ROUND(Quantity * "Unit Price" * RentalFactor,Currency."Amount Rounding Precision") * 100,
                                                                        0.00001)
                                                                  //**4PS.en
                                                                  ELSE
                                                                    "Line Discount %" := 0;
                                                                "Inv. Discount Amount" := 0;
                                                                "Inv. Disc. Amount to Invoice" := 0;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Line Discount Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 29  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");

                                                                //**4PS.sn
                                                                IF "Manually VAT Posting" THEN
                                                                  "VAT Base Amount" := Amount
                                                                ELSE
                                                                //**4PS.en
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                                                                      "Amount Including VAT" :=
                                                                        ROUND(Amount + "VAT Base Amount" * "VAT %" / 100,Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    IF Amount <> 0 THEN
                                                                      FIELDERROR(Amount,
                                                                        STRSUBSTNO(
                                                                          Text009,FIELDCAPTION("VAT Calculation Type"),
                                                                          "VAT Calculation Type"));
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      SalesHeader.TESTFIELD("VAT Base Discount %",0);
                                                                      "VAT Base Amount" := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                      "Amount Including VAT" :=
                                                                        Amount +
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                                                                          "VAT Base Amount","Quantity (Base)",SalesHeader."Currency Factor");
                                                                      IF "VAT Base Amount" <> 0 THEN
                                                                        "VAT %" :=
                                                                          ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      "Amount Including VAT" := ROUND("Amount Including VAT",Currency."Amount Rounding Precision");
                                                                    END;
                                                                END;

                                                                "Line VAT Amount" := "Amount Including VAT" - Amount;   //**4PS.n

                                                                InitOutstandingAmount;
                                                              END;

                                                   CaptionML=ENU=Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 30  ;   ;Amount Including VAT;Decimal       ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF CurrFieldNo = FIELDNO("Amount Including VAT") THEN
                                                                  TESTFIELD("Manually VAT Posting",TRUE);
                                                                //**4PS.en

                                                                "Amount Including VAT" := ROUND("Amount Including VAT",Currency."Amount Rounding Precision");

                                                                //**4PS.sn
                                                                IF "Manually VAT Posting" THEN
                                                                  "VAT Base Amount" := Amount
                                                                ELSE
                                                                //**4PS.en

                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      Amount :=
                                                                        ROUND(
                                                                          "Amount Including VAT" /
                                                                          (1 + (1 - SalesHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
                                                                          Currency."Amount Rounding Precision");
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      Amount := 0;
                                                                      "VAT Base Amount" := 0;
                                                                    END;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      SalesHeader.TESTFIELD("VAT Base Discount %",0);
                                                                      Amount :=
                                                                        SalesTaxCalculate.ReverseCalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                                                                          "Amount Including VAT","Quantity (Base)",SalesHeader."Currency Factor");
                                                                      IF Amount <> 0 THEN
                                                                        "VAT %" :=
                                                                          ROUND(100 * ("Amount Including VAT" - Amount) / Amount,0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                      "VAT Base Amount" := Amount;
                                                                    END;
                                                                END;

                                                                //**4PS.sn
                                                                UpdateAmountLCY;
                                                                "Line VAT Amount" := "Amount Including VAT" - Amount;
                                                                //**4PS.en

                                                                InitOutstandingAmount;
                                                              END;

                                                   CaptionML=ENU=Amount Including VAT;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Allow Invoice Disc." <> xRec."Allow Invoice Disc.") AND
                                                                   (NOT "Allow Invoice Disc.")
                                                                THEN BEGIN
                                                                  "Inv. Discount Amount" := 0;
                                                                  "Inv. Disc. Amount to Invoice" := 0;
                                                                  UpdateAmounts;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Allow Invoice Disc. }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=ENU=Gross Weight;
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=ENU=Net Weight;
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=ENU=Units per Parcel;
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=ENU=Unit Volume;
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                                ItemTrackingLines@1001 : Page 6510;
                                                              BEGIN
                                                                IF "Appl.-to Item Entry" <> 0 THEN BEGIN
                                                                  AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);

                                                                  TESTFIELD(Type,Type::Item);
                                                                  TESTFIELD(Quantity);
                                                                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                                                                    IF Quantity > 0 THEN
                                                                      FIELDERROR(Quantity,Text030);
                                                                  END ELSE BEGIN
                                                                    IF Quantity < 0 THEN
                                                                      FIELDERROR(Quantity,Text029);
                                                                  END;
                                                                  ItemLedgEntry.GET("Appl.-to Item Entry");
                                                                  ItemLedgEntry.TESTFIELD(Positive,TRUE);
                                                                  IF ItemLedgEntry.TrackingExists THEN
                                                                    ERROR(Text040,ItemTrackingLines.CAPTION,FIELDCAPTION("Appl.-to Item Entry"));
                                                                  IF ABS("Qty. to Ship (Base)") > ItemLedgEntry.Quantity THEN
                                                                    ERROR(ShippingMoreUnitsThanReceivedErr,ItemLedgEntry.Quantity,ItemLedgEntry."Document No.");

                                                                  VALIDATE("Unit Cost (LCY)",CalcUnitCost(ItemLedgEntry));

                                                                  "Location Code" := ItemLedgEntry."Location Code";

                                                                  //**4PS.sn
                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID3(Type),"No.",
                                                                    DATABASE::"Plant Type", "Plant Type",
                                                                    DATABASE::Job,"Job No.",
                                                                    DATABASE::"Service Order","Service Order No.",
                                                                    DATABASE::"Service-Contract","Service Contract No.",
                                                                    DATABASE::"Responsibility Center","Responsibility Center",
                                                                    //DATABASE::Location,"Location Code");  //*C007227.o
                                                                    DATABASE::"Service Group", GetServiceObjectGroup);
                                                                  //**4PS.en

                                                                  IF NOT ItemLedgEntry.Open THEN
                                                                    MESSAGE(Text042,"Appl.-to Item Entry");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Appl.-to Item Entry"));
                                                            END;

                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=ENU=Appl.-to Item Entry }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                                ATOLink.UpdateAsmDimFromSalesLine(Rec);
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Project Filter=FIELD(Job No.));
                                                   OnValidate=VAR
                                                                CurrCostObject@1100525000 : Code[20];
                                                              BEGIN
                                                                //**4PS.sn
                                                                IF "Shortcut Dimension 2 Code" <> '' THEN BEGIN
                                                                  DimMgt.GetDimValueRec(2,"Shortcut Dimension 2 Code",DimVal,TRUE,"Job No.");
                                                                  DimVal.TESTFIELD(Blocked, FALSE);
                                                                  CheckAdditionalCostService;  //db, 24-02-10
                                                                  CurrCostObject := "Shortcut Dimension 2 Code";
                                                                  IF ("Item No." = '') AND ("Basic Item" = '') AND ("Trade Item" = '') THEN BEGIN
                                                                    Description := DimVal.Name;
                                                                    "Cost Component" := DimVal."Cost Component";
                                                                    // **4PS.n --> Obtain Revenue Account based on "Cost Type"
                                                                    IF ("Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"]) THEN BEGIN
                                                                      GetProjTypeRevenueAccount(FALSE, TRUE);
                                                                      GetServTypeRevenueAccount();
                                                                    END;
                                                                    IF (CurrFieldNo <> 0) AND (Type = Type::"G/L Account") THEN BEGIN
                                                                      VALIDATE("Unit Price",DimVal."Sales Price");
                                                                      VALIDATE("Unit of Measure Code",DimVal."Unit of Measure");
                                                                      UpdateUnitPrice(FIELDNO("Shortcut Dimension 2 Code"));
                                                                    END;
                                                                  END ELSE
                                                                    UpdateUnitPrice(FIELDNO("Shortcut Dimension 2 Code"));
                                                                  //**4PS01.sn
                                                                  IF (DimVal.Element <> '') AND ("Job No." <> '') THEN
                                                                    VALIDATE(Element, DimVal.Element);
                                                                  //**4PS01.en
                                                                  IF "Shortcut Dimension 2 Code" <> CurrCostObject THEN
                                                                    "Shortcut Dimension 2 Code" := CurrCostObject;
                                                                END;
                                                                CheckCostCompServOrderType; //** 4PS03.n
                                                                //**4PS.en

                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                                ATOLink.UpdateAsmDimFromSalesLine(Rec);
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 42  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   OnValidate=BEGIN
                                                                //IF Type = Type::Item THEN //**4PS.o
                                                                IF (Type = Type::Item) OR ("Item No." <> '') THEN //**4PS.n
                                                                  UpdateUnitPrice(FIELDNO("Customer Price Group"));
                                                              END;

                                                   CaptionML=ENU=Customer Price Group;
                                                   Editable=No }
    { 45  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   OnValidate=BEGIN
                                                                //**4PS.sn
                                                                TestStatusOpen;
                                                                TESTFIELD("Drop Shipment",FALSE);
                                                                IF (xRec."Job No." <> "Job No.") AND (Quantity <> 0) THEN BEGIN
                                                                  CALCFIELDS("Reserved Qty. (Base)");
                                                                  TESTFIELD("Reserved Qty. (Base)",0);
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;

                                                                IF Type IN [Type::"Fixed Asset",Type::"Charge (Item)"] THEN
                                                                  IF "Job No." <> '' THEN
                                                                    FIELDERROR(
                                                                      "Job No.",STRSUBSTNO(Text11012007,FIELDCAPTION(Type),Type));
                                                                IF ("Shortcut Dimension 1 Code" <> '') AND ("Job No." <> '') AND
                                                                   (CurrFieldNo = FIELDNO("Job No.")) AND ("Job No." <> xRec."Job No.") THEN
                                                                  "Shortcut Dimension 1 Code" := '';

                                                                FillSystemCreatedEntry;

                                                                //** DP0121
                                                                IF "Job No." <> xRec."Job No." THEN
                                                                  IF (Quantity <> 0) AND NSItemExists(xRec."Item No.") THEN
                                                                    ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                //**4PS.en

                                                                CreateDim(
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Plant Type", "Plant Type",
                                                                  DATABASE::"Service Order","Service Order No.", //**4PS.n 09-06-2010
                                                                  DATABASE::"Service-Contract","Service Contract No.", //**4PS.n 09-06-2010
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  //DATABASE::Location,"Location Code");  //**4PS.n  //*C007227.o
                                                                  DATABASE::"Service Group", GetServiceObjectGroup);


                                                                IF "Job No." <> '' THEN BEGIN
                                                                  //ProjSetupRec.GET;
                                                                  Type := Type::"G/L Account";
                                                                  ProjRec.GET("Job No.");

                                                                  //IF ("Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"]) AND
                                                                  //   (ProjRec."Blocking Code" <> '') AND
                                                                  //   ((ProjRec."Project Status" = ProjRec."Project Status"::"Technical Finished") OR
                                                                  //    (ProjRec."Project Status" = ProjRec."Project Status"::"Administrative Finished"))
                                                                  //THEN
                                                                  //  lvBlockingCodeRec.CheckBlocked(ProjRec."Blocking Code", lvBlockingCodeRec.Switch::"Sales Invoice", ProjRec);
                                                                  //IF (ProjSetupRec."Provisions at Closure") AND
                                                                  //   (("Document Type" > "Document Type"::Order) AND
                                                                  //    ("Document Type" <> "Document Type"::"Blanket Order"))
                                                                  //THEN
                                                                  //  ProjRec.CheckProjectStatus(-1)
                                                                  //ELSE
                                                                  //  ProjRec.CheckProjectStatus(1);
                                                                  CheckProjStatus(ProjRec);
                                                                  ProjRec.TESTFIELD("Project Type");
                                                                  GetProjTypeRevenueAccount(FALSE,FALSE);
                                                                  IF NOT ProjPrincipRec.GET("Job No.", "Sell-to Customer No.") THEN
                                                                    ProjPrincipRec.INIT;

                                                                  GetSalesHeader;
                                                                  IF NOT SalesHeader."Extended VAT Determination" THEN
                                                                    IF (ProjPrincipRec."VAT Bus. Posting Group" <> '') THEN
                                                                      VALIDATE("VAT Bus. Posting Group",ProjPrincipRec."VAT Bus. Posting Group")
                                                                    ELSE BEGIN
                                                                      IF (ProjRec."VAT Bus. Posting Group" = '') THEN
                                                                        ERROR(Text11012002, ProjRec.FIELDCAPTION("VAT Bus. Posting Group"), "Job No.", ProjPrincipRec.Principal);
                                                                      VALIDATE("VAT Bus. Posting Group",ProjRec."VAT Bus. Posting Group");
                                                                    END;

                                                                  IF "Installment Invoice" = FALSE THEN BEGIN
                                                                    IF NOT PlantRelatedInvoice("Job No.", SalesHeader) THEN
                                                                      ProjPrincipRec.GET("Job No.", "Sell-to Customer No.");
                                                                  END;
                                                                END ELSE BEGIN
                                                                  "No." := '';
                                                                  IF ("Item No." <> '') AND (Type = Type::"G/L Account") THEN BEGIN
                                                                    Type := Type::Item;
                                                                    VALIDATE("No.", "Item No.");  //beware of recursion between validate triggers
                                                                  END;
                                                                  ValidateItem(ItemTypeOpt::Item);
                                                                  "Rental Unit" := '';
                                                                  "Rental Unit Line Type" := 0;
                                                                END;
                                                                IF ("Shortcut Dimension 2 Code" <> '') AND
                                                                   ("Item No." = '') AND ("Basic Item" = '') AND ("Trade Item" = '') AND
                                                                   (CurrFieldNo = FIELDNO("Job No.")) AND ("Job No." <> xRec."Job No.") THEN BEGIN
                                                                  DimMgt.GetDimValueRec(2,"Shortcut Dimension 2 Code",DimVal,FALSE,"Job No.");
                                                                  Description := DimVal.Name;
                                                                END;
                                                                WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                CALCFIELDS("Job Description");
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Project No.;
                                                   Editable=Yes }
    { 52  ;   ;Work Type Code      ;Code10        ;TableRelation="Work Type";
                                                   OnValidate=BEGIN
                                                                IF Type = Type::Resource THEN BEGIN
                                                                  TestStatusOpen;
                                                                  IF WorkType.GET("Work Type Code") THEN
                                                                    VALIDATE("Unit of Measure Code",WorkType."Unit of Measure Code");
                                                                  UpdateUnitPrice(FIELDNO("Work Type Code"));
                                                                  VALIDATE("Unit Price");
                                                                  FindResUnitCost;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Work Type Code }
    { 56  ;   ;Recalculate Invoice Disc.;Boolean  ;CaptionML=ENU=Recalculate Invoice Disc.;
                                                   Editable=No }
    { 57  ;   ;Outstanding Amount  ;Decimal       ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF SalesHeader."Currency Code" <> '' THEN
                                                                  "Outstanding Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        1, //**4PS.n
                                                                        "Job No.", //**4PS.n
                                                                        GetDate,"Currency Code",
                                                                //      "Outstanding Amount",SalesHeader."Currency Factor"), //**4PS.o
                                                                        "Outstanding Amount",SalesHeader."Currency Factor",TRUE), //**4PS.n
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Outstanding Amount (LCY)" :=
                                                                    ROUND("Outstanding Amount",Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Outstanding Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 58  ;   ;Qty. Shipped Not Invoiced;Decimal  ;CaptionML=ENU=Qty. Shipped Not Invoiced;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 59  ;   ;Shipped Not Invoiced;Decimal       ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF SalesHeader."Currency Code" <> '' THEN
                                                                  "Shipped Not Invoiced (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        1, //**4PS.n
                                                                        "Job No.", //**4PS.n
                                                                        GetDate,"Currency Code",
                                                                //      "Shipped Not Invoiced",SalesHeader."Currency Factor"), //**4PS.o
                                                                        "Shipped Not Invoiced",SalesHeader."Currency Factor",TRUE), //**4PS.n
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Shipped Not Invoiced (LCY)" :=
                                                                    ROUND("Shipped Not Invoiced",Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Shipped Not Invoiced;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 60  ;   ;Quantity Shipped    ;Decimal       ;AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Quantity Shipped;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 61  ;   ;Quantity Invoiced   ;Decimal       ;CaptionML=ENU=Quantity Invoiced;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 63  ;   ;Shipment No.        ;Code20        ;CaptionML=ENU=Shipment No.;
                                                   Editable=No }
    { 64  ;   ;Shipment Line No.   ;Integer       ;CaptionML=ENU=Shipment Line No.;
                                                   Editable=No }
    { 67  ;   ;Profit %            ;Decimal       ;CaptionML=ENU=Profit %;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 68  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=ENU=Bill-to Customer No.;
                                                   Editable=No }
    { 69  ;   ;Inv. Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                CalcInvDiscToInvoice;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Inv. Discount Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 71  ;   ;Purchase Order No.  ;Code20        ;TableRelation=IF (Drop Shipment=CONST(Yes)) "Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Purchase Order No." <> "Purchase Order No.") AND (Quantity <> 0) THEN BEGIN
                                                                  ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Purchase Order No.;
                                                   Editable=No }
    { 72  ;   ;Purch. Order Line No.;Integer      ;TableRelation=IF (Drop Shipment=CONST(Yes)) "Purchase Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                                                 Document No.=FIELD(Purchase Order No.));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Purch. Order Line No." <> "Purch. Order Line No.") AND (Quantity <> 0) THEN BEGIN
                                                                  ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Purch. Order Line No.;
                                                   Editable=No }
    { 73  ;   ;Drop Shipment       ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Document Type","Document Type"::Order);
                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Job No.",'');
                                                                TESTFIELD("Qty. to Asm. to Order (Base)",0);

                                                                IF "Drop Shipment" THEN
                                                                  TESTFIELD("Special Order",FALSE);

                                                                CheckAssocPurchOrder(FIELDCAPTION("Drop Shipment"));

                                                                IF "Drop Shipment" THEN BEGIN
                                                                  Reserve := Reserve::Never;
                                                                  VALIDATE(Quantity,Quantity);
                                                                  IF "Drop Shipment" THEN BEGIN
                                                                    EVALUATE("Outbound Whse. Handling Time",'<0D>');
                                                                    EVALUATE("Shipping Time",'<0D>');
                                                                    UpdateDates;
                                                                    "Bin Code" := '';
                                                                  END;
                                                                END ELSE BEGIN
                                                                  GetItem;
                                                                  IF Item.Reserve = Item.Reserve::Optional THEN BEGIN
                                                                    GetSalesHeader;
                                                                    Reserve := SalesHeader.Reserve;
                                                                  END ELSE
                                                                    Reserve := Item.Reserve;
                                                                  IF "Special Order" THEN
                                                                    Reserve := Reserve::Never;
                                                                END;

                                                                IF "Drop Shipment" THEN
                                                                  "Bin Code" := '';

                                                                CheckItemAvailable(FIELDNO("Drop Shipment"));

                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);
                                                                IF (xRec."Drop Shipment" <> "Drop Shipment") AND (Quantity <> 0) THEN BEGIN
                                                                  IF NOT "Drop Shipment" THEN BEGIN
                                                                    InitQtyToAsm;
                                                                    AutoAsmToOrder;
                                                                    UpdateWithWarehouseShip
                                                                  END ELSE
                                                                    InitQtyToShip;
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                  IF NOT FullReservedQtyIsForAsmToOrder THEN
                                                                    ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=ENU=Drop Shipment;
                                                   Editable=Yes }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 75  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=ENU=VAT Calculation Type;
                                                   OptionCaptionML=ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=ENU=Transaction Type }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=ENU=Transport Method }
    { 80  ;   ;Attached to Line No.;Integer       ;TableRelation="Sales Line"."Line No." WHERE (Document Type=FIELD(Document Type),
                                                                                                Document No.=FIELD(Document No.));
                                                   CaptionML=ENU=Attached to Line No.;
                                                   Editable=No }
    { 81  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=ENU=Exit Point }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=ENU=Area }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=ENU=Transaction Specification }
    { 84  ;   ;Tax Category        ;Code10        ;CaptionML=ENU=Tax Category }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Tax Area Code }
    { 86  ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Tax Liable }
    { 87  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Tax Group Code }
    { 88  ;   ;VAT Clause Code     ;Code10        ;TableRelation="VAT Clause";
                                                   CaptionML=ENU=VAT Clause Code }
    { 89  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                //**4PS.sn
                                                                GetSalesHeader;
                                                                IF SalesHeader."Extended VAT Determination" THEN
                                                                  "VAT Bus. Posting Group" := SalesHeader."VAT Bus. Posting Group";
                                                                VALIDATE("VAT Prod. Posting Group");
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 90  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                //**4PS.sn
                                                                //VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");

                                                                IF NOT VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
                                                                  VATPostingSetup.INIT;
                                                                //**4PS.en
                                                                "VAT Difference" := 0;
                                                                "VAT %" := VATPostingSetup."VAT %";
                                                                "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                "Manually VAT Posting" := VATPostingSetup.Manually;        //**4PS.n
                                                                "VAT Identifier" := VATPostingSetup."VAT Identifier";
                                                                "VAT Clause Code" := VATPostingSetup."VAT Clause Code";
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Reverse Charge VAT",
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    "VAT %" := 0;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      TESTFIELD(Type,Type::"G/L Account");
                                                                      VATPostingSetup.TESTFIELD("Sales VAT Account");
                                                                      TESTFIELD("No.",VATPostingSetup."Sales VAT Account");
                                                                    END;
                                                                END;
                                                                IF SalesHeader."Prices Including VAT" AND (Type IN [Type::Item,Type::Resource]) THEN
                                                                  "Unit Price" :=
                                                                    ROUND(
                                                                      "Unit Price" * (100 + "VAT %") / (100 + xRec."VAT %"),
                                                                      Currency."Unit-Amount Rounding Precision");
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 91  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code;
                                                   Editable=No }
    { 92  ;   ;Outstanding Amount (LCY);Decimal   ;CaptionML=ENU=Outstanding Amount (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 93  ;   ;Shipped Not Invoiced (LCY);Decimal ;CaptionML=ENU=Shipped Not Invoiced (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 95  ;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Document No.),
                                                                                                        Source Ref. No.=FIELD(Line No.),
                                                                                                        Source Type=CONST(37),
                                                                                                        Source Subtype=FIELD(Document Type),
                                                                                                        Reservation Status=CONST(Reservation)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Reserved Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 96  ;   ;Reserve             ;Option        ;OnValidate=BEGIN
                                                                IF Reserve <> Reserve::Never THEN BEGIN
                                                                  TESTFIELD(Type,Type::Item);
                                                                  TESTFIELD("No.");
                                                                END;
                                                                CALCFIELDS("Reserved Qty. (Base)");
                                                                IF (Reserve = Reserve::Never) AND ("Reserved Qty. (Base)" > 0) THEN
                                                                  TESTFIELD("Reserved Qty. (Base)",0);

                                                                IF "Drop Shipment" OR "Special Order" THEN
                                                                  TESTFIELD(Reserve,Reserve::Never);
                                                                IF xRec.Reserve = Reserve::Always THEN BEGIN
                                                                  GetItem;
                                                                  IF Item.Reserve = Item.Reserve::Always THEN
                                                                    TESTFIELD(Reserve,Reserve::Always);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=ENU=Reserve;
                                                   OptionCaptionML=ENU=Never,Optional,Always;
                                                   OptionString=Never,Optional,Always }
    { 97  ;   ;Blanket Order No.   ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=CONST(Blanket Order));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                IF "Blanket Order No." = '' THEN
                                                                  "Blanket Order Line No." := 0
                                                                ELSE
                                                                  VALIDATE("Blanket Order Line No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Quantity Shipped",0);
                                                              BlanketOrderLookup;
                                                            END;

                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Blanket Order No.;
                                                   Description=[4PS: Raam  -> Afroep  ] }
    { 98  ;   ;Blanket Order Line No.;Integer     ;TableRelation="Sales Line"."Line No." WHERE (Document Type=CONST(Blanket Order),
                                                                                                Document No.=FIELD(Blanket Order No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                IF "Blanket Order Line No." <> 0 THEN BEGIN
                                                                  SalesLine2.GET("Document Type"::"Blanket Order","Blanket Order No.","Blanket Order Line No.");
                                                                  SalesLine2.TESTFIELD(Type,Type);
                                                                  SalesLine2.TESTFIELD("No.","No.");
                                                                  SalesLine2.TESTFIELD("Bill-to Customer No.","Bill-to Customer No.");
                                                                  SalesLine2.TESTFIELD("Sell-to Customer No.","Sell-to Customer No.");
                                                                  VALIDATE("Location Code",SalesLine2."Location Code");
                                                                  VALIDATE("Unit of Measure Code",SalesLine2."Unit of Measure Code");
                                                                  VALIDATE("Unit Price",SalesLine2."Unit Price");
                                                                  VALIDATE("Line Discount %",SalesLine2."Line Discount %");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              BlanketOrderLookup;
                                                            END;

                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Blanket Order Line No.;
                                                   Description=[4PS: Raam  -> Afroep  ] }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=ENU=VAT Base Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=ENU=Unit Cost;
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 101 ;   ;System-Created Entry;Boolean       ;CaptionML=ENU=System-Created Entry;
                                                   Editable=No }
    { 103 ;   ;Line Amount         ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type);
                                                                TESTFIELD(Quantity);
                                                                TESTFIELD("Unit Price");
                                                                GetSalesHeader;
                                                                "Line Amount" := ROUND("Line Amount",Currency."Amount Rounding Precision");
                                                                VALIDATE(
                                                                //**4PS.sn
                                                                //"Line Discount Amount",ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") - "Line Amount");
                                                                  "Line Discount Amount",ROUND(Quantity * "Unit Price" * RentalFactor,Currency."Amount Rounding Precision") - "Line Amount");

                                                                UpdateAmountLCY;
                                                                "Line VAT Amount" := "Amount Including VAT" - Amount;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Line Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Line Amount")) }
    { 104 ;   ;VAT Difference      ;Decimal       ;CaptionML=ENU=VAT Difference;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 105 ;   ;Inv. Disc. Amount to Invoice;Decimal;
                                                   CaptionML=ENU=Inv. Disc. Amount to Invoice;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 106 ;   ;VAT Identifier      ;Code10        ;CaptionML=ENU=VAT Identifier;
                                                   Editable=No }
    { 107 ;   ;IC Partner Ref. Type;Option        ;OnValidate=BEGIN
                                                                IF "IC Partner Code" <> '' THEN
                                                                  "IC Partner Ref. Type" := "IC Partner Ref. Type"::"G/L Account";
                                                                IF "IC Partner Ref. Type" <> xRec."IC Partner Ref. Type" THEN
                                                                  "IC Partner Reference" := '';
                                                                IF "IC Partner Ref. Type" = "IC Partner Ref. Type"::"Common Item No." THEN BEGIN
                                                                  IF Item."No." <> "No." THEN
                                                                    Item.GET("No.");
                                                                  Item.TESTFIELD("Common Item No.");
                                                                  "IC Partner Reference" := Item."Common Item No.";
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 410=R;
                                                   CaptionML=ENU=IC Partner Ref. Type;
                                                   OptionCaptionML=ENU=" ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No.";
                                                   OptionString=[ ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No.] }
    { 108 ;   ;IC Partner Reference;Code20        ;OnLookup=VAR
                                                              ICGLAccount@1000 : Record 410;
                                                              ItemCrossReference@1001 : Record 5717;
                                                            BEGIN
                                                              IF "No." <> '' THEN
                                                                CASE "IC Partner Ref. Type" OF
                                                                  "IC Partner Ref. Type"::"G/L Account":
                                                                    BEGIN
                                                                      IF ICGLAccount.GET("IC Partner Reference") THEN;
                                                                      IF PAGE.RUNMODAL(PAGE::"IC G/L Account List",ICGLAccount) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",ICGLAccount."No.");
                                                                    END;
                                                                  "IC Partner Ref. Type"::Item:
                                                                    BEGIN
                                                                      IF Item.GET("IC Partner Reference") THEN;
                                                                      IF PAGE.RUNMODAL(PAGE::"Item List",Item) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",Item."No.");
                                                                    END;
                                                                  "IC Partner Ref. Type"::"Cross Reference":
                                                                    BEGIN
                                                                      ItemCrossReference.RESET;
                                                                      ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
                                                                      ItemCrossReference.SETFILTER(
                                                                        "Cross-Reference Type",'%1|%2',
                                                                        ItemCrossReference."Cross-Reference Type"::Customer,
                                                                        ItemCrossReference."Cross-Reference Type"::" ");
                                                                      ItemCrossReference.SETFILTER("Cross-Reference Type No.",'%1|%2',"Sell-to Customer No.",'');
                                                                      IF PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",ItemCrossReference."Cross-Reference No.");
                                                                    END;
                                                                END;
                                                            END;

                                                   AccessByPermission=TableData 410=R;
                                                   CaptionML=ENU=IC Partner Reference }
    { 109 ;   ;Prepayment %        ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdatePrepmtSetupFields;

                                                                IF Type <> Type::" " THEN
                                                                  UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Prepayment %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 110 ;   ;Prepmt. Line Amount ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                PrePaymentLineAmountEntered := TRUE;
                                                                TESTFIELD("Line Amount");
                                                                IF "Prepmt. Line Amount" < "Prepmt. Amt. Inv." THEN
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text044,"Prepmt. Amt. Inv."));
                                                                IF "Prepmt. Line Amount" > "Line Amount" THEN
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text045,"Line Amount"));
                                                                IF "System-Created Entry" THEN
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text045,0));
                                                                VALIDATE("Prepayment %",ROUND("Prepmt. Line Amount" * 100 / "Line Amount",0.00001));
                                                              END;

                                                   CaptionML=ENU=Prepmt. Line Amount;
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt. Line Amount")) }
    { 111 ;   ;Prepmt. Amt. Inv.   ;Decimal       ;CaptionML=ENU=Prepmt. Amt. Inv.;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt. Amt. Inv.")) }
    { 112 ;   ;Prepmt. Amt. Incl. VAT;Decimal     ;CaptionML=ENU=Prepmt. Amt. Incl. VAT;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 113 ;   ;Prepayment Amount   ;Decimal       ;CaptionML=ENU=Prepayment Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 114 ;   ;Prepmt. VAT Base Amt.;Decimal      ;CaptionML=ENU=Prepmt. VAT Base Amt.;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 115 ;   ;Prepayment VAT %    ;Decimal       ;CaptionML=ENU=Prepayment VAT %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 116 ;   ;Prepmt. VAT Calc. Type;Option      ;CaptionML=ENU=Prepmt. VAT Calc. Type;
                                                   OptionCaptionML=ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 117 ;   ;Prepayment VAT Identifier;Code10   ;CaptionML=ENU=Prepayment VAT Identifier;
                                                   Editable=No }
    { 118 ;   ;Prepayment Tax Area Code;Code20    ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Prepayment Tax Area Code }
    { 119 ;   ;Prepayment Tax Liable;Boolean      ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Prepayment Tax Liable }
    { 120 ;   ;Prepayment Tax Group Code;Code10   ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Prepayment Tax Group Code }
    { 121 ;   ;Prepmt Amt to Deduct;Decimal       ;OnValidate=BEGIN
                                                                IF "Prepmt Amt to Deduct" > "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text045,"Prepmt. Amt. Inv." - "Prepmt Amt Deducted"));

                                                                IF "Prepmt Amt to Deduct" > "Qty. to Invoice" * "Unit Price" THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text045,"Qty. to Invoice" * "Unit Price"));

                                                                IF ("Prepmt. Amt. Inv." - "Prepmt Amt to Deduct" - "Prepmt Amt Deducted") >
                                                                   (Quantity - "Qty. to Invoice" - "Quantity Invoiced") * "Unit Price"
                                                                THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text044,
                                                                      "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" - (Quantity - "Qty. to Invoice" - "Quantity Invoiced") * "Unit Price"));
                                                              END;

                                                   CaptionML=ENU=Prepmt Amt to Deduct;
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt Amt to Deduct")) }
    { 122 ;   ;Prepmt Amt Deducted ;Decimal       ;CaptionML=ENU=Prepmt Amt Deducted;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt Amt Deducted")) }
    { 123 ;   ;Prepayment Line     ;Boolean       ;CaptionML=ENU=Prepayment Line;
                                                   Editable=No }
    { 124 ;   ;Prepmt. Amount Inv. Incl. VAT;Decimal;
                                                   CaptionML=ENU=Prepmt. Amount Inv. Incl. VAT;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 129 ;   ;Prepmt. Amount Inv. (LCY);Decimal  ;CaptionML=ENU=Prepmt. Amount Inv. (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 130 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   OnValidate=BEGIN
                                                                IF "IC Partner Code" <> '' THEN BEGIN
                                                                  TESTFIELD(Type,Type::"G/L Account");
                                                                  GetSalesHeader;
                                                                  SalesHeader.TESTFIELD("Sell-to IC Partner Code",'');
                                                                  SalesHeader.TESTFIELD("Bill-to IC Partner Code",'');
                                                                  VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"G/L Account");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=IC Partner Code }
    { 132 ;   ;Prepmt. VAT Amount Inv. (LCY);Decimal;
                                                   CaptionML=ENU=Prepmt. VAT Amount Inv. (LCY);
                                                   Editable=No }
    { 135 ;   ;Prepayment VAT Difference;Decimal  ;CaptionML=ENU=Prepayment VAT Difference;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 136 ;   ;Prepmt VAT Diff. to Deduct;Decimal ;CaptionML=ENU=Prepmt VAT Diff. to Deduct;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 137 ;   ;Prepmt VAT Diff. Deducted;Decimal  ;CaptionML=ENU=Prepmt VAT Diff. Deducted;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=No }
    { 900 ;   ;Qty. to Assemble to Order;Decimal  ;OnValidate=VAR
                                                                SalesLineReserve@1000 : Codeunit 99000832;
                                                              BEGIN
                                                                WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);

                                                                "Qty. to Asm. to Order (Base)" := CalcBaseQty("Qty. to Assemble to Order");

                                                                IF "Qty. to Asm. to Order (Base)" <> 0 THEN BEGIN
                                                                  TESTFIELD("Drop Shipment",FALSE);
                                                                  TESTFIELD("Special Order",FALSE);
                                                                  IF "Qty. to Asm. to Order (Base)" < 0 THEN
                                                                    FIELDERROR("Qty. to Assemble to Order",STRSUBSTNO(Text009,FIELDCAPTION("Quantity (Base)"),"Quantity (Base)"));
                                                                  TESTFIELD("Appl.-to Item Entry",0);

                                                                  CASE "Document Type" OF
                                                                    "Document Type"::"Blanket Order",
                                                                    "Document Type"::Quote:
                                                                      IF ("Quantity (Base)" = 0) OR ("Qty. to Asm. to Order (Base)" <= 0) OR SalesLineReserve.ReservEntryExist(Rec) THEN
                                                                        TESTFIELD("Qty. to Asm. to Order (Base)",0)
                                                                      ELSE
                                                                        IF "Quantity (Base)" <> "Qty. to Asm. to Order (Base)" THEN
                                                                          FIELDERROR("Qty. to Assemble to Order",STRSUBSTNO(Text031,0,"Quantity (Base)"));
                                                                    "Document Type"::Order:
                                                                      ;
                                                                    ELSE
                                                                      TESTFIELD("Qty. to Asm. to Order (Base)",0);
                                                                  END;
                                                                END;

                                                                CheckItemAvailable(FIELDNO("Qty. to Assemble to Order"));
                                                                IF NOT (CurrFieldNo IN [FIELDNO(Quantity),FIELDNO("Qty. to Assemble to Order")]) THEN
                                                                  GetDefaultBin;
                                                                AutoAsmToOrder;
                                                              END;

                                                   AccessByPermission=TableData 90=R;
                                                   CaptionML=ENU=Qty. to Assemble to Order;
                                                   DecimalPlaces=0:5 }
    { 901 ;   ;Qty. to Asm. to Order (Base);Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Assemble to Order","Qty. to Asm. to Order (Base)");
                                                              END;

                                                   CaptionML=ENU=Qty. to Asm. to Order (Base);
                                                   DecimalPlaces=0:5 }
    { 902 ;   ;ATO Whse. Outstanding Qty.;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding" WHERE (Source Type=CONST(37),
                                                                                                                       Source Subtype=FIELD(Document Type),
                                                                                                                       Source No.=FIELD(Document No.),
                                                                                                                       Source Line No.=FIELD(Line No.),
                                                                                                                       Assemble to Order=FILTER(Yes)));
                                                   AccessByPermission=TableData 90=R;
                                                   CaptionML=ENU=ATO Whse. Outstanding Qty.;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 903 ;   ;ATO Whse. Outstd. Qty. (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding (Base)" WHERE (Source Type=CONST(37),
                                                                                                                              Source Subtype=FIELD(Document Type),
                                                                                                                              Source No.=FIELD(Document No.),
                                                                                                                              Source Line No.=FIELD(Line No.),
                                                                                                                              Assemble to Order=FILTER(Yes)));
                                                   AccessByPermission=TableData 90=R;
                                                   CaptionML=ENU=ATO Whse. Outstd. Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   CaptionML=ENU=Job Task No.;
                                                   Editable=No }
    { 1002;   ;Job Contract Entry No.;Integer     ;OnValidate=VAR
                                                                JobPlanningLine@1001 : Record 11020401;
                                                              BEGIN
                                                                JobPlanningLine.SETCURRENTKEY("Job Contract Entry No.");
                                                                JobPlanningLine.SETRANGE("Job Contract Entry No.","Job Contract Entry No.");
                                                                JobPlanningLine.FINDFIRST;
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::"Plant Type", "Plant Type", //**4PS.n
                                                                  DATABASE::Job,JobPlanningLine."Job No.",
                                                                  DATABASE::"Service Order","Service Order No.", //**4PS.n 09-06-2010
                                                                  DATABASE::"Service-Contract","Service Contract No.", //**4PS.n 09-06-2010
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  //DATABASE::Location,"Location Code");  //**4PS.n  //*C007227.o
                                                                  DATABASE::"Service Group", GetServiceObjectGroup);
                                                              END;

                                                   AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Contract Entry No.;
                                                   Editable=No }
    { 1300;   ;Posting Date        ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Header"."Posting Date" WHERE (Document Type=FIELD(Document Type),
                                                                                                           No.=FIELD(Document No.)));
                                                   CaptionML=ENU=Posting Date }
    { 1700;   ;Deferral Code       ;Code10        ;TableRelation="Deferral Template"."Deferral Code";
                                                   OnValidate=BEGIN
                                                                GetSalesHeader;
                                                                DeferralPostDate := SalesHeader."Posting Date";

                                                                DeferralUtilities.DeferralCodeOnValidate(
                                                                  "Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
                                                                  "Document Type","Document No.","Line No.",
                                                                  GetDeferralAmount,DeferralPostDate,
                                                                  Description,SalesHeader."Currency Code");

                                                                IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                  "Returns Deferral Start Date" :=
                                                                    DeferralUtilities.GetDeferralStartDate(DeferralUtilities.GetSalesDeferralDocType,
                                                                      "Document Type","Document No.","Line No.","Deferral Code",SalesHeader."Posting Date");
                                                              END;

                                                   CaptionML=ENU=Deferral Code }
    { 1702;   ;Returns Deferral Start Date;Date   ;OnValidate=VAR
                                                                DeferralHeader@1000 : Record 1701;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                IF DeferralHeader.GET(DeferralUtilities.GetSalesDeferralDocType,'','',"Document Type","Document No.","Line No.") THEN
                                                                  DeferralUtilities.CreateDeferralSchedule("Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
                                                                    "Document Type","Document No.","Line No.",GetDeferralAmount,
                                                                    DeferralHeader."Calc. Method","Returns Deferral Start Date",
                                                                    DeferralHeader."No. of Periods",TRUE,
                                                                    DeferralHeader."Schedule Description",FALSE,
                                                                    SalesHeader."Currency Code");
                                                              END;

                                                   CaptionML=ENU=Returns Deferral Start Date }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                IF "Variant Code" <> '' THEN
                                                                  //TESTFIELD(Type,Type::Item);  //**4PS.o
                                                                  TESTFIELD("Item No.");         //**4PS.n
                                                                TestStatusOpen;
                                                                CheckAssocPurchOrder(FIELDCAPTION("Variant Code"));

                                                                IF xRec."Variant Code" <> "Variant Code" THEN BEGIN
                                                                  TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                  TESTFIELD("Shipment No.",'');

                                                                  TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                  TESTFIELD("Return Receipt No.",'');
                                                                  InitItemAppl(FALSE);
                                                                END;

                                                                CheckItemAvailable(FIELDNO("Variant Code"));

                                                                //**4PS.so
                                                                //IF Type = Type::Item THEN BEGIN
                                                                //  GetUnitCost;  //db, 21-12-10: for SKU price not relevant (ItemCostMgt.UpdateSKUFromItem)
                                                                //  UpdateUnitPrice((FIELDNO("Variant Code")));
                                                                //END;
                                                                //**4PS.eo

                                                                GetDefaultBin;
                                                                InitQtyToAsm;
                                                                AutoAsmToOrder;
                                                                IF (xRec."Variant Code" <> "Variant Code") AND (Quantity <> 0) THEN BEGIN
                                                                  IF NOT FullReservedQtyIsForAsmToOrder THEN
                                                                    ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;

                                                                UpdateItemCrossRef;
                                                              END;

                                                   CaptionML=ENU=Variant Code;
                                                   Description=4PS: TableRelation modified }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=IF (Document Type=FILTER(Order|Invoice),
                                                                     Quantity=FILTER(>=0),
                                                                     Qty. to Asm. to Order (Base)=CONST(0)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                                            Item No.=FIELD(Item No.),
                                                                                                                                            Variant Code=FIELD(Variant Code))
                                                                                                                                            ELSE IF (Document Type=FILTER(Return Order|Credit Memo),
                                                                                                                                                     Quantity=FILTER(<0)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                                                          Item No.=FIELD(Item No.),
                                                                                                                                                                                                          Variant Code=FIELD(Variant Code))
                                                                                                                                                                                                          ELSE Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=VAR
                                                                WMSManagement@1001 : Codeunit 7302;
                                                              BEGIN
                                                                IF "Bin Code" <> '' THEN BEGIN
                                                                  IF NOT IsInbound AND ("Quantity (Base)" <> 0) AND ("Qty. to Asm. to Order (Base)" = 0) THEN
                                                                  //db, 02-11-10: check Item No. instead of No; skip bin content for quantity=0
                                                                  //WMSManagement.FindBinContent("Location Code","Bin Code","No.","Variant Code",'')  //**4PS.o
                                                                    WMSManagement.FindBinContent("Location Code","Bin Code","Item No.","Variant Code",'')  //**4PS.n
                                                                  ELSE
                                                                    WMSManagement.FindBin("Location Code","Bin Code",'');
                                                                END;

                                                                IF "Drop Shipment" THEN
                                                                  CheckAssocPurchOrder(FIELDCAPTION("Bin Code"));

                                                                //TESTFIELD(Type,Type::Item);  //**4PS.o
                                                                TESTFIELD("Location Code");

                                                                //IF (Type = Type::Item) AND ("Bin Code" <> '') THEN BEGIN  //**4PS.o
                                                                IF ("Item No." <> '') AND ("Bin Code" <> '') THEN BEGIN  //**4PS.n
                                                                  TESTFIELD("Drop Shipment",FALSE);
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Bin Mandatory");
                                                                  CheckWarehouse;
                                                                END;
                                                                ATOLink.UpdateAsmBinCodeFromSalesLine(Rec);
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1002 : Codeunit 7302;
                                                              BinCode@1000 : Code[20];
                                                            BEGIN
                                                              IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
                                                              //db, 02-11-10: check Item No. instead of No; skip bin content for quantity=0
                                                              //BinCode := WMSManagement.BinContentLookUp("Location Code","No.","Variant Code",'',"Bin Code")  //**4PS.o
                                                                BinCode := WMSManagement.BinContentLookUp("Location Code","Item No.","Variant Code",'',"Bin Code")  //**4PS.n
                                                              ELSE
                                                              //BinCode := WMSManagement.BinLookUp("Location Code","No.","Variant Code",'');  //**4PS.o
                                                                BinCode := WMSManagement.BinLookUpSpecific("Location Code","Item No.","Variant Code",'',"Job No.","Service Order No.","Bin Code");  //**4PS.n

                                                              IF BinCode <> '' THEN
                                                                VALIDATE("Bin Code",BinCode);
                                                            END;

                                                   CaptionML=ENU=Bin Code;
                                                   Description=4PS: TableRelation modified }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5405;   ;Planned             ;Boolean       ;CaptionML=ENU=Planned;
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item),
                                                                     No.=FILTER(<>'')) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                     ELSE IF (Type=CONST(Resource),
                                                                              No.=FILTER(<>'')) "Resource Unit of Measure".Code WHERE (Resource No.=FIELD(No.))
                                                                              ELSE "Unit of Measure";
                                                   OnValidate=VAR
                                                                UnitOfMeasureTranslation@1000 : Record 5402;
                                                                ResUnitofMeasure@1001 : Record 205;
                                                                lvTradeItemRec@1100525000 : Record 11012317;
                                                                lvOldQtyPerUnitOfMeasure@1100485000 : Decimal;
                                                              BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Qty. Shipped (Base)",0);
                                                                TESTFIELD("Return Qty. Received",0);
                                                                TESTFIELD("Return Qty. Received (Base)",0);
                                                                IF "Unit of Measure Code" <> xRec."Unit of Measure Code" THEN BEGIN
                                                                  TESTFIELD("Shipment No.",'');
                                                                  TESTFIELD("Return Receipt No.",'');
                                                                END;

                                                                CheckAssocPurchOrder(FIELDCAPTION("Unit of Measure Code"));

                                                                IF "Unit of Measure Code" = '' THEN
                                                                  "Unit of Measure" := ''
                                                                ELSE BEGIN
                                                                  IF NOT UnitOfMeasure.GET("Unit of Measure Code") THEN
                                                                    UnitOfMeasure.INIT;
                                                                  "Unit of Measure" := UnitOfMeasure.Description;
                                                                  GetSalesHeader;
                                                                  IF SalesHeader."Language Code" <> '' THEN BEGIN
                                                                    UnitOfMeasureTranslation.SETRANGE(Code,"Unit of Measure Code");
                                                                    UnitOfMeasureTranslation.SETRANGE("Language Code",SalesHeader."Language Code");
                                                                    IF UnitOfMeasureTranslation.FINDFIRST THEN
                                                                      "Unit of Measure" := UnitOfMeasureTranslation.Description;
                                                                  END;
                                                                END;
                                                                DistIntegration.EnterSalesItemCrossRef(Rec);
                                                                CASE Type OF
                                                                  Type::Item,Type::"G/L Account":  //**4PS.n
                                                                    BEGIN
                                                                      IF "Item No." <> '' THEN BEGIN  //**4PS.n
                                                                        GetItem;
                                                                        GetUnitCost;
                                                                        UpdateUnitPrice(FIELDNO("Unit of Measure Code"));
                                                                        CheckItemAvailable(FIELDNO("Unit of Measure Code"));
                                                                        "Gross Weight" := Item."Gross Weight" * "Qty. per Unit of Measure";
                                                                        "Net Weight" := Item."Net Weight" * "Qty. per Unit of Measure";
                                                                        "Unit Volume" := Item."Unit Volume" * "Qty. per Unit of Measure";
                                                                        "Units per Parcel" := ROUND(Item."Units per Parcel" / "Qty. per Unit of Measure",0.00001);
                                                                        IF (xRec."Unit of Measure Code" <> "Unit of Measure Code") AND (Quantity <> 0) THEN
                                                                          WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                        IF "Qty. per Unit of Measure" > xRec."Qty. per Unit of Measure" THEN
                                                                          InitItemAppl(FALSE);
                                                                      //**4PS.sn
                                                                      END ELSE BEGIN
                                                                        IF (NOT "Plant Invoice") AND ("Plant Type" <> '') THEN BEGIN
                                                                          lvOldQtyPerUnitOfMeasure := "Qty. per Unit of Measure";
                                                                          PlantQtyPerUnitOfMeasure("Unit of Measure Code");
                                                                          IF lvOldQtyPerUnitOfMeasure <> "Qty. per Unit of Measure" THEN
                                                                            VALIDATE("Unit Price", "Unit Price" * "Qty. per Unit of Measure" / lvOldQtyPerUnitOfMeasure);
                                                                        END ELSE BEGIN
                                                                          "Qty. per Unit of Measure" := 1;
                                                                        END;
                                                                      //**4PS.en
                                                                      END;
                                                                    END;
                                                                  Type::Resource:
                                                                    BEGIN
                                                                      IF "Unit of Measure Code" = '' THEN BEGIN
                                                                        GetResource;
                                                                        "Unit of Measure Code" := Resource."Base Unit of Measure";
                                                                      END;
                                                                      ResUnitofMeasure.GET("No.","Unit of Measure Code");
                                                                      "Qty. per Unit of Measure" := ResUnitofMeasure."Qty. per Unit of Measure";
                                                                      UpdateUnitPrice(FIELDNO("Unit of Measure Code"));
                                                                      FindResUnitCost;
                                                                    END;
                                                                  //Type::"G/L Account",Type::"Fixed Asset",Type::"Charge (Item)",Type::" ": //**4PS.o
                                                                  Type::"Fixed Asset",Type::"Charge (Item)",Type::" ":  //**4PS.n
                                                                    "Qty. per Unit of Measure" := 1;
                                                                END;

                                                                IF lvTradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN        //**4PS04.n
                                                                  "Net Weight":= lvTradeItemRec.GetNetWeight("Unit of Measure Code");  //**4PS04.n

                                                                VALIDATE(Quantity);
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;  //**4PS.n
                                                            END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 5415;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                                UpdateUnitPrice(FIELDNO("Quantity (Base)"));
                                                              END;

                                                   CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 5416;   ;Outstanding Qty. (Base);Decimal    ;CaptionML=ENU=Outstanding Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5417;   ;Qty. to Invoice (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Invoice","Qty. to Invoice (Base)");
                                                              END;

                                                   CaptionML=ENU=Qty. to Invoice (Base);
                                                   DecimalPlaces=0:5 }
    { 5418;   ;Qty. to Ship (Base) ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Ship","Qty. to Ship (Base)");
                                                              END;

                                                   CaptionML=ENU=Qty. to Ship (Base);
                                                   DecimalPlaces=0:5 }
    { 5458;   ;Qty. Shipped Not Invd. (Base);Decimal;
                                                   CaptionML=ENU=Qty. Shipped Not Invd. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5460;   ;Qty. Shipped (Base) ;Decimal       ;CaptionML=ENU=Qty. Shipped (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5461;   ;Qty. Invoiced (Base);Decimal       ;CaptionML=ENU=Qty. Invoiced (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5495;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Document No.),
                                                                                                                 Source Ref. No.=FIELD(Line No.),
                                                                                                                 Source Type=CONST(37),
                                                                                                                 Source Subtype=FIELD(Document Type),
                                                                                                                 Reservation Status=CONST(Reservation)));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure");
                                                                CALCFIELDS("Reserved Quantity");
                                                                Planned := "Reserved Quantity" = "Outstanding Quantity";
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=ENU=Reserved Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5600;   ;FA Posting Date     ;Date          ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=ENU=FA Posting Date }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                GetFAPostingGroup;
                                                              END;

                                                   CaptionML=ENU=Depreciation Book Code }
    { 5605;   ;Depr. until FA Posting Date;Boolean;AccessByPermission=TableData 5600=R;
                                                   CaptionML=ENU=Depr. until FA Posting Date }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                "Use Duplication List" := FALSE;
                                                              END;

                                                   CaptionML=ENU=Duplicate in Depreciation Book }
    { 5613;   ;Use Duplication List;Boolean       ;OnValidate=BEGIN
                                                                "Duplicate in Depreciation Book" := '';
                                                              END;

                                                   AccessByPermission=TableData 5600=R;
                                                   CaptionML=ENU=Use Duplication List }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::"Plant Type", "Plant Type", //**4PS.n
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Service Order","Service Order No.", //**4PS.n 09-06-2010
                                                                  DATABASE::"Service-Contract","Service Contract No.", //**4PS.n 09-06-2010
                                                                  //DATABASE::Location,"Location Code");  //**4PS.n  //*C007227.o
                                                                  DATABASE::"Service Group", GetServiceObjectGroup);
                                                              END;

                                                   CaptionML=ENU=Responsibility Center;
                                                   Editable=No }
    { 5701;   ;Out-of-Stock Substitution;Boolean  ;CaptionML=ENU=Out-of-Stock Substitution;
                                                   Editable=No }
    { 5702;   ;Substitution Available;Boolean     ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Item Substitution" WHERE (Type=CONST(Item),
                                                                                                No.=FIELD(No.),
                                                                                                Substitute Type=CONST(Item)));
                                                   CaptionML=ENU=Substitution Available;
                                                   Editable=No }
    { 5703;   ;Originally Ordered No.;Code20      ;TableRelation=IF (Type=CONST(Item)) Item;
                                                   AccessByPermission=TableData 5715=R;
                                                   CaptionML=ENU=Originally Ordered No. }
    { 5704;   ;Originally Ordered Var. Code;Code10;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(Originally Ordered No.));
                                                   AccessByPermission=TableData 5715=R;
                                                   CaptionML=ENU=Originally Ordered Var. Code }
    { 5705;   ;Cross-Reference No. ;Code20        ;OnValidate=VAR
                                                                ReturnedCrossRef@1000 : Record 5717;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                "Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
                                                                ReturnedCrossRef.INIT;
                                                                IF "Cross-Reference No." <> '' THEN BEGIN
                                                                  DistIntegration.ICRLookupSalesItem(Rec,ReturnedCrossRef);
                                                                  IF "No." <> ReturnedCrossRef."Item No." THEN
                                                                    VALIDATE("No.",ReturnedCrossRef."Item No.");
                                                                  IF ReturnedCrossRef."Variant Code" <> '' THEN
                                                                    VALIDATE("Variant Code",ReturnedCrossRef."Variant Code");

                                                                  IF ReturnedCrossRef."Unit of Measure" <> '' THEN
                                                                    VALIDATE("Unit of Measure Code",ReturnedCrossRef."Unit of Measure");
                                                                END;

                                                                "Unit of Measure (Cross Ref.)" := ReturnedCrossRef."Unit of Measure";
                                                                "Cross-Reference Type" := ReturnedCrossRef."Cross-Reference Type";
                                                                "Cross-Reference Type No." := ReturnedCrossRef."Cross-Reference Type No.";
                                                                "Cross-Reference No." := ReturnedCrossRef."Cross-Reference No.";

                                                                IF ReturnedCrossRef.Description <> '' THEN
                                                                  Description := ReturnedCrossRef.Description;

                                                                UpdateUnitPrice(FIELDNO("Cross-Reference No."));
                                                                UpdateICPartner;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CrossReferenceNoLookUp;
                                                            END;

                                                   AccessByPermission=TableData 5717=R;
                                                   CaptionML=ENU=Cross-Reference No. }
    { 5706;   ;Unit of Measure (Cross Ref.);Code10;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.));
                                                   AccessByPermission=TableData 5717=R;
                                                   CaptionML=ENU=Unit of Measure (Cross Ref.) }
    { 5707;   ;Cross-Reference Type;Option        ;CaptionML=ENU=Cross-Reference Type;
                                                   OptionCaptionML=ENU=" ,Customer,Vendor,Bar Code";
                                                   OptionString=[ ,Customer,Vendor,Bar Code] }
    { 5708;   ;Cross-Reference Type No.;Code30    ;CaptionML=ENU=Cross-Reference Type No. }
    { 5709;   ;Item Category Code  ;Code10        ;TableRelation="Item Category";
                                                   CaptionML=ENU=Item Category Code }
    { 5710;   ;Nonstock            ;Boolean       ;AccessByPermission=TableData 5718=R;
                                                   CaptionML=ENU=Nonstock;
                                                   Editable=No }
    { 5711;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                //**4PS.sn
                                                                //TESTFIELD(Type,Type::Item);
                                                                IF "Trade Item" = '' THEN TESTFIELD("Item No.");  //db, 23-06-14: C002114
                                                                //**4PS.en
                                                                CheckAssocPurchOrder(FIELDCAPTION(Type));

                                                                IF PurchasingCode.GET("Purchasing Code") THEN BEGIN
                                                                  "Drop Shipment" := PurchasingCode."Drop Shipment";
                                                                  "Special Order" := PurchasingCode."Special Order";
                                                                  IF "Drop Shipment" OR "Special Order" THEN BEGIN
                                                                    TESTFIELD("Qty. to Asm. to Order (Base)",0);
                                                                    CALCFIELDS("Reserved Qty. (Base)");
                                                                    TESTFIELD("Reserved Qty. (Base)",0);
                                                                    IF (Quantity <> 0) AND (Quantity = "Quantity Shipped") THEN
                                                                      ERROR(SalesLineCompletelyShippedErr);
                                                                    Reserve := Reserve::Never;
                                                                    VALIDATE(Quantity,Quantity);
                                                                    IF "Drop Shipment" THEN BEGIN
                                                                      EVALUATE("Outbound Whse. Handling Time",'<0D>');
                                                                      EVALUATE("Shipping Time",'0D');
                                                                      UpdateDates;
                                                                      "Bin Code" := '';
                                                                    END;
                                                                  END;
                                                                END ELSE BEGIN
                                                                  "Drop Shipment" := FALSE;
                                                                  "Special Order" := FALSE;

                                                                  GetItem;
                                                                  IF Item.Reserve = Item.Reserve::Optional THEN BEGIN
                                                                    GetSalesHeader;
                                                                    Reserve := SalesHeader.Reserve;
                                                                  END ELSE
                                                                    Reserve := Item.Reserve;
                                                                END;

                                                                IF ("Purchasing Code" <> xRec."Purchasing Code") AND
                                                                   (NOT "Drop Shipment") AND
                                                                   ("Drop Shipment" <> xRec."Drop Shipment")
                                                                THEN BEGIN
                                                                  IF "Location Code" = '' THEN BEGIN
                                                                    IF InvtSetup.GET THEN
                                                                      "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
                                                                  END ELSE
                                                                    IF Location.GET("Location Code") THEN
                                                                      "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
                                                                  IF ShippingAgentServices.GET("Shipping Agent Code","Shipping Agent Service Code") THEN
                                                                    "Shipping Time" := ShippingAgentServices."Shipping Time"
                                                                  ELSE BEGIN
                                                                    GetSalesHeader;
                                                                    "Shipping Time" := SalesHeader."Shipping Time";
                                                                  END;
                                                                  UpdateDates;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=ENU=Purchasing Code }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=ENU=Product Group Code }
    { 5713;   ;Special Order       ;Boolean       ;AccessByPermission=TableData 223=R;
                                                   CaptionML=ENU=Special Order;
                                                   Editable=No }
    { 5714;   ;Special Order Purchase No.;Code20  ;TableRelation=IF (Special Order=CONST(Yes)) "Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=ENU=Special Order Purchase No. }
    { 5715;   ;Special Order Purch. Line No.;Integer;
                                                   TableRelation=IF (Special Order=CONST(Yes)) "Purchase Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                                                 Document No.=FIELD(Special Order Purchase No.));
                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=ENU=Special Order Purch. Line No. }
    { 5749;   ;Whse. Outstanding Qty.;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding" WHERE (Source Type=CONST(37),
                                                                                                                       Source Subtype=FIELD(Document Type),
                                                                                                                       Source No.=FIELD(Document No.),
                                                                                                                       Source Line No.=FIELD(Line No.)));
                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=ENU=Whse. Outstanding Qty.;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5750;   ;Whse. Outstanding Qty. (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding (Base)" WHERE (Source Type=CONST(37),
                                                                                                                              Source Subtype=FIELD(Document Type),
                                                                                                                              Source No.=FIELD(Document No.),
                                                                                                                              Source Line No.=FIELD(Line No.)));
                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=ENU=Whse. Outstanding Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5752;   ;Completely Shipped  ;Boolean       ;CaptionML=ENU=Completely Shipped;
                                                   Editable=No }
    { 5790;   ;Requested Delivery Date;Date       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Requested Delivery Date" <> xRec."Requested Delivery Date") AND
                                                                   ("Promised Delivery Date" <> 0D)
                                                                THEN
                                                                  ERROR(
                                                                    Text028,
                                                                    FIELDCAPTION("Requested Delivery Date"),
                                                                    FIELDCAPTION("Promised Delivery Date"));

                                                                IF "Requested Delivery Date" <> 0D THEN
                                                                  VALIDATE("Planned Delivery Date","Requested Delivery Date")
                                                                ELSE BEGIN
                                                                  GetSalesHeader;
                                                                  VALIDATE("Shipment Date",SalesHeader."Shipment Date");
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=ENU=Requested Delivery Date }
    { 5791;   ;Promised Delivery Date;Date        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Promised Delivery Date" <> 0D THEN
                                                                  VALIDATE("Planned Delivery Date","Promised Delivery Date")
                                                                ELSE
                                                                  VALIDATE("Requested Delivery Date");
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=ENU=Promised Delivery Date }
    { 5792;   ;Shipping Time       ;DateFormula   ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Drop Shipment" THEN
                                                                  DateFormularZero("Shipping Time",FIELDNO("Shipping Time"),FIELDCAPTION("Shipping Time"));
                                                                UpdateDates;
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=ENU=Shipping Time }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Drop Shipment" THEN
                                                                  DateFormularZero("Outbound Whse. Handling Time",
                                                                    FIELDNO("Outbound Whse. Handling Time"),FIELDCAPTION("Outbound Whse. Handling Time"));
                                                                UpdateDates;
                                                              END;

                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=ENU=Outbound Whse. Handling Time }
    { 5794;   ;Planned Delivery Date;Date         ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Planned Delivery Date" <> 0D THEN BEGIN
                                                                  PlannedDeliveryDateCalculated := TRUE;

                                                                  IF FORMAT("Shipping Time") <> '' THEN
                                                                    VALIDATE("Planned Shipment Date",CalcPlannedDeliveryDate(FIELDNO("Planned Delivery Date")))
                                                                  ELSE
                                                                    VALIDATE("Planned Shipment Date",CalcPlannedShptDate(FIELDNO("Planned Delivery Date")));

                                                                  IF "Planned Shipment Date" > "Planned Delivery Date" THEN
                                                                    "Planned Delivery Date" := "Planned Shipment Date";
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=ENU=Planned Delivery Date }
    { 5795;   ;Planned Shipment Date;Date         ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Planned Shipment Date" <> 0D THEN BEGIN
                                                                  PlannedShipmentDateCalculated := TRUE;

                                                                  IF FORMAT("Outbound Whse. Handling Time") <> '' THEN
                                                                    VALIDATE(
                                                                      "Shipment Date",
                                                                      CalendarMgmt.CalcDateBOC2(
                                                                        FORMAT("Outbound Whse. Handling Time"),
                                                                        "Planned Shipment Date",
                                                                        CalChange."Source Type"::Location,
                                                                        "Location Code",
                                                                        '',
                                                                        CalChange."Source Type"::"Shipping Agent",
                                                                        "Shipping Agent Code",
                                                                        "Shipping Agent Service Code",
                                                                        FALSE))
                                                                  ELSE
                                                                    VALIDATE(
                                                                      "Shipment Date",
                                                                      CalendarMgmt.CalcDateBOC(
                                                                        FORMAT(FORMAT('')),
                                                                        "Planned Shipment Date",
                                                                        CalChange."Source Type"::"Shipping Agent",
                                                                        "Shipping Agent Code",
                                                                        "Shipping Agent Service Code",
                                                                        CalChange."Source Type"::Location,
                                                                        "Location Code",
                                                                        '',
                                                                        FALSE));
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=ENU=Planned Shipment Date }
    { 5796;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=ENU=Shipping Agent Code }
    { 5797;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Shipping Agent Service Code" <> xRec."Shipping Agent Service Code" THEN
                                                                  EVALUATE("Shipping Time",'<>');

                                                                IF "Drop Shipment" THEN BEGIN
                                                                  EVALUATE("Shipping Time",'<0D>');
                                                                  UpdateDates;
                                                                END ELSE
                                                                  IF ShippingAgentServices.GET("Shipping Agent Code","Shipping Agent Service Code") THEN
                                                                    "Shipping Time" := ShippingAgentServices."Shipping Time"
                                                                  ELSE BEGIN
                                                                    GetSalesHeader;
                                                                    "Shipping Time" := SalesHeader."Shipping Time";
                                                                  END;

                                                                IF ShippingAgentServices."Shipping Time" <> xRec."Shipping Time" THEN
                                                                  VALIDATE("Shipping Time","Shipping Time");
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=ENU=Shipping Agent Service Code }
    { 5800;   ;Allow Item Charge Assignment;Boolean;
                                                   InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                CheckItemChargeAssgnt;
                                                              END;

                                                   AccessByPermission=TableData 5800=R;
                                                   CaptionML=ENU=Allow Item Charge Assignment }
    { 5801;   ;Qty. to Assign      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Charge Assignment (Sales)"."Qty. to Assign" WHERE (Document Type=FIELD(Document Type),
                                                                                                                            Document No.=FIELD(Document No.),
                                                                                                                            Document Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Qty. to Assign;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5802;   ;Qty. Assigned       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Charge Assignment (Sales)"."Qty. Assigned" WHERE (Document Type=FIELD(Document Type),
                                                                                                                           Document No.=FIELD(Document No.),
                                                                                                                           Document Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Qty. Assigned;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5803;   ;Return Qty. to Receive;Decimal     ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                IF (CurrFieldNo <> 0) AND
                                                                   (Type = Type::Item) AND
                                                                   ("Return Qty. to Receive" <> 0) AND
                                                                   (NOT "Drop Shipment")
                                                                THEN
                                                                  CheckWarehouse;

                                                                IF "Return Qty. to Receive" = Quantity - "Return Qty. Received" THEN
                                                                  InitQtyToReceive
                                                                ELSE BEGIN
                                                                  "Return Qty. to Receive (Base)" := CalcBaseQty("Return Qty. to Receive");
                                                                  InitQtyToInvoice;
                                                                END;
                                                                IF ("Return Qty. to Receive" * Quantity < 0) OR
                                                                   (ABS("Return Qty. to Receive") > ABS("Outstanding Quantity")) OR
                                                                   (Quantity * "Outstanding Quantity" < 0)
                                                                THEN
                                                                  ERROR(
                                                                    Text020,
                                                                    "Outstanding Quantity");
                                                                IF ("Return Qty. to Receive (Base)" * "Quantity (Base)" < 0) OR
                                                                   (ABS("Return Qty. to Receive (Base)") > ABS("Outstanding Qty. (Base)")) OR
                                                                   ("Quantity (Base)" * "Outstanding Qty. (Base)" < 0)
                                                                THEN
                                                                  ERROR(
                                                                    Text021,
                                                                    "Outstanding Qty. (Base)");

                                                                //IF (CurrFieldNo <> 0) AND (Type = Type::Item) AND ("Return Qty. to Receive" > 0) THEN //**4PS.o
                                                                IF (CurrFieldNo <> 0) AND ("Item No." <> '') AND ("Return Qty. to Receive" > 0) THEN //**4PS.n
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);
                                                              END;

                                                   AccessByPermission=TableData 6660=R;
                                                   CaptionML=ENU=Return Qty. to Receive;
                                                   DecimalPlaces=0:5 }
    { 5804;   ;Return Qty. to Receive (Base);Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Return Qty. to Receive","Return Qty. to Receive (Base)");
                                                              END;

                                                   CaptionML=ENU=Return Qty. to Receive (Base);
                                                   DecimalPlaces=0:5 }
    { 5805;   ;Return Qty. Rcd. Not Invd.;Decimal ;CaptionML=ENU=Return Qty. Rcd. Not Invd.;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5806;   ;Ret. Qty. Rcd. Not Invd.(Base);Decimal;
                                                   CaptionML=ENU=Ret. Qty. Rcd. Not Invd.(Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5807;   ;Return Rcd. Not Invd.;Decimal      ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF SalesHeader."Currency Code" <> '' THEN
                                                                  "Return Rcd. Not Invd. (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        1, //**4PS.n
                                                                        "Job No.", //**4PS.n
                                                                        GetDate,"Currency Code",
                                                                //      "Return Rcd. Not Invd.",SalesHeader."Currency Factor"), //**4PS.o
                                                                        "Return Rcd. Not Invd.",SalesHeader."Currency Factor",TRUE), //**4PS.n
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Return Rcd. Not Invd. (LCY)" :=
                                                                    ROUND("Return Rcd. Not Invd.",Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Return Rcd. Not Invd.;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 5808;   ;Return Rcd. Not Invd. (LCY);Decimal;CaptionML=ENU=Return Rcd. Not Invd. (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5809;   ;Return Qty. Received;Decimal       ;AccessByPermission=TableData 6660=R;
                                                   CaptionML=ENU=Return Qty. Received;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5810;   ;Return Qty. Received (Base);Decimal;CaptionML=ENU=Return Qty. Received (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5811;   ;Appl.-from Item Entry;Integer      ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                IF "Appl.-from Item Entry" <> 0 THEN BEGIN
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);
                                                                  VALIDATE("Unit Cost (LCY)",CalcUnitCost(ItemLedgEntry));
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Appl.-from Item Entry"));
                                                            END;

                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=ENU=Appl.-from Item Entry;
                                                   MinValue=0 }
    { 5909;   ;BOM Item No.        ;Code20        ;TableRelation=Item;
                                                   CaptionML=ENU=BOM Item No. }
    { 6600;   ;Return Receipt No.  ;Code20        ;CaptionML=ENU=Return Receipt No.;
                                                   Editable=No }
    { 6601;   ;Return Receipt Line No.;Integer    ;CaptionML=ENU=Return Receipt Line No.;
                                                   Editable=No }
    { 6608;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   OnValidate=BEGIN
                                                                ValidateReturnReasonCode(FIELDNO("Return Reason Code"));
                                                              END;

                                                   CaptionML=ENU=Return Reason Code }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=ENU=Allow Line Disc. }
    { 7002;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   OnValidate=BEGIN
                                                                //IF Type = Type::Item THEN //**4PS.o
                                                                IF (Type = Type::Item) OR ("Item No." <> '') THEN //**4PS.n
                                                                  UpdateUnitPrice(FIELDNO("Customer Disc. Group"))
                                                              END;

                                                   CaptionML=ENU=Customer Disc. Group }
    { 11012000;;Project Invoice    ;Boolean       ;CaptionML=ENU=Project Invoice;
                                                   Editable=No }
    { 11012010;;Installment Invoice;Boolean       ;CaptionML=ENU=Installment Invoice;
                                                   Editable=No }
    { 11012015;;Production Motivation Date;Date   ;TableRelation="Unit Price Production Mot."."Production Date" WHERE (Project No.=FIELD(Job No.));
                                                   CaptionML=ENU=Production Motivation Date;
                                                   Editable=No }
    { 11012016;;Production Motivation Code;Code10 ;CaptionML=ENU=Production Motivation Code;
                                                   Editable=No }
    { 11012020;;Installment No.    ;Code10        ;TableRelation=IF (Installment Invoice=CONST(Yes)) "Project Installment"."Installment No." WHERE (Project No.=FIELD(Job No.),
                                                                                                                                                    Principal=FIELD(Sell-to Customer No.),
                                                                                                                                                    Plot No.=FIELD(Plot No.));
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Installment No.;
                                                   Editable=No }
    { 11012021;;Installment Motivation;Date       ;TableRelation="Installment Motivation"."Production Date" WHERE (Project No.=FIELD(Job No.),
                                                                                                                   Principal=FIELD(Sell-to Customer No.));
                                                   CaptionML=ENU=Installment Motivation }
    { 11012024;;House Model        ;Code20        ;TableRelation="House Model".Model WHERE (Project No.=FIELD(Job No.));
                                                   CaptionML=ENU=House Model;
                                                   NotBlank=Yes }
    { 11012025;;Plot No.           ;Code10        ;TableRelation=IF (Installment Invoice=CONST(Yes)) Plot."Plot No." WHERE (Project No.=FIELD(Job No.));
                                                   CaptionML=ENU=Plot No.;
                                                   Editable=No }
    { 11012026;;Main Group         ;Code20        ;TableRelation="Option Main Group".Code WHERE (Project No.=FIELD(Job No.));
                                                   CaptionML=ENU=Main Group;
                                                   NotBlank=Yes }
    { 11012027;;Group              ;Code20        ;TableRelation="Option Group".Code WHERE (Project No.=FIELD(Job No.));
                                                   CaptionML=ENU=Group;
                                                   NotBlank=Yes }
    { 11012028;;Sub Group          ;Code20        ;TableRelation="Option Sub Group".Code WHERE (Project No.=FIELD(Job No.));
                                                   CaptionML=ENU=Sub Group;
                                                   NotBlank=Yes }
    { 11012029;;Option             ;Code20        ;TableRelation=Option.Option WHERE (Project No.=FIELD(Job No.),
                                                                                      Plot No.=FIELD(Plot No.),
                                                                                      House Model=FIELD(House Model),
                                                                                      Main Group=FIELD(Main Group),
                                                                                      Group=FIELD(Group),
                                                                                      Sub Group=FIELD(Sub Group));
                                                   CaptionML=ENU=Option;
                                                   NotBlank=Yes }
    { 11012030;;Commission No.     ;Code20        ;TableRelation=IF (Project Invoice=CONST(Yes),
                                                                     Installment Invoice=CONST(No)) Commission.No. WHERE (Project No.=FIELD(Job No.),
                                                                                                                          Principal=FIELD(Sell-to Customer No.));
                                                   CaptionML=ENU=Commission No.;
                                                   Editable=No }
    { 11012035;;Commission Date    ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Commission."Commission Date" WHERE (Project No.=FIELD(Job No.),
                                                                                                          Principal=FIELD(Sell-to Customer No.),
                                                                                                          No.=FIELD(Commission No.)));
                                                   CaptionML=ENU=Commission Date;
                                                   Editable=No }
    { 11012040;;Settl.Sheet No.    ;Code10        ;TableRelation=IF (Project Invoice=CONST(Yes),
                                                                     Installment Invoice=CONST(No)) "Settlement Sheet".No. WHERE (Project No.=FIELD(Job No.),
                                                                                                                                  Principal=FIELD(Sell-to Customer No.),
                                                                                                                                  Commission No.=FIELD(Commission No.));
                                                   CaptionML=ENU=Settl.Sheet No.;
                                                   Editable=No }
    { 11012050;;Cost Plus Line No. ;Integer       ;TableRelation=IF (Project Invoice=CONST(Yes),
                                                                     Installment Invoice=CONST(No)) "Project Cost Plus Entry"."Line No." WHERE (Project No.=FIELD(Job No.),
                                                                                                                                                Principal=FIELD(No.),
                                                                                                                                                Commission No.=FIELD(Commission No.),
                                                                                                                                                Settl.Sheet No.=FIELD(Settl.Sheet No.));
                                                   CaptionML=ENU=Cost Plus Line No.;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 11012051;;Wage Component Cost Plus Line;Code10;
                                                   TableRelation="Wage Component".Code;
                                                   CaptionML=ENU=Wage Component Cost Plus Line;
                                                   Editable=No }
    { 11012052;;Description Wage Comp CP Line;Text30;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Wage Component".Description WHERE (Code=FIELD(Wage Component Cost Plus Line)));
                                                   CaptionML=ENU=Description Wage Comp CP Line;
                                                   Editable=No }
    { 11012055;;Hour Rate Cost Plus Line;Code20   ;TableRelation="Hour Rate".Code;
                                                   CaptionML=ENU=Hour Rate Cost Plus Line;
                                                   Editable=No }
    { 11012056;;Description Hour Rate CP Line;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Hour Rate".Description WHERE (Code=FIELD(Hour Rate Cost Plus Line)));
                                                   CaptionML=ENU=Description Hour Rate CP Line;
                                                   Editable=No }
    { 11012060;;Amount (LCY)       ;Decimal       ;CaptionML=ENU=Amount (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012070;;Element            ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Job No.));
                                                   OnValidate=VAR
                                                                ProjElemRec@11012000 : Record 11012010;
                                                                ElementFormat@11012001 : Codeunit 11012022;
                                                              BEGIN
                                                                ElementFormat.FormatElem(Element,2,'');
                                                                IF Element <> '' THEN BEGIN
                                                                  ProjElemRec.GET("Job No.",Element);
                                                                  ProjElemRec.CheckProjectElementBlocked;  //call: 6564
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 11012080;;Extension Contract ;Code10        ;TableRelation="Extension Contract"."Contract No." WHERE (Project No.=FIELD(Job No.));
                                                   OnValidate=VAR
                                                                ExtContrRec@1210190000 : Record 11012004;
                                                              BEGIN
                                                                //**4PS.sn
                                                                IF ExtContrRec.GET("Job No.","Extension Contract") THEN
                                                                  IF ExtContrRec.Status < ExtContrRec.Status::"Invoicing Allowed" THEN
                                                                    ERROR(Text11012001,"Job No.","Extension Contract");
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Extension Contract }
    { 11012090;;Failure No.        ;Code20        ;TableRelation=IF (Project Invoice=CONST(Yes),
                                                                     Installment Invoice=CONST(No)) Commission."Failure No." WHERE (Project No.=FIELD(Job No.),
                                                                                                                                    Principal=FIELD(Sell-to Customer No.),
                                                                                                                                    No.=FIELD(Commission No.));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Failure No.;
                                                   Editable=No }
    { 11012100;;Supervisor Name    ;Text50        ;CaptionML=ENU=Supervisor Name;
                                                   Editable=No }
    { 11012120;;Cost Type Cost Plus Line;Option   ;CaptionML=ENU=Cost Type Cost Plus Line;
                                                   OptionCaptionML=ENU=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                   Editable=No }
    { 11012121;;Cost Object Cost Plus Line;Code20 ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Cost Object Cost Plus Line }
    { 11012122;;Description Cost Obj CP Line;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Dimension Value".Name WHERE (Code=FIELD(Cost Object Cost Plus Line),
                                                                                                    Global Dimension No.=CONST(2)));
                                                   CaptionML=ENU=Description Cost Obj CP Line;
                                                   Editable=No }
    { 11012130;;Item No.           ;Code20        ;TableRelation=Item.No.;
                                                   OnValidate=VAR
                                                                lvItemLogisticsRec@1100485000 : Record 27;
                                                              BEGIN
                                                                //**4PS
                                                                CheckItemAvailable(FIELDNO("Item No."));  //mve, 12-03-2014 - C009270
                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." <> '') THEN BEGIN
                                                                  IF ("Job No." = '') AND ("Service Order No." = '') THEN BEGIN
                                                                    Type := Type::Item;
                                                                    VALIDATE("No.", "Item No.");  //beware of recursion between validate triggers
                                                                  END;
                                                                  ValidateItem(ItemTypeOpt::Item);
                                                                  UpdateUnitPrice(FIELDNO("Item No.")); //mve, 12-03-2014 - C009270
                                                                  GetDefaultBin;  //db, 02-11-10
                                                                END;

                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." = '') AND
                                                                   ("Job No." = '') AND ("Service Order No." = '') THEN
                                                                    VALIDATE("No.", "Item No.");

                                                                //** DP0121
                                                                IF "Item No." <> xRec."Item No." THEN BEGIN
                                                                  IF (Quantity <> 0) AND NSItemExists(xRec."Item No.") THEN
                                                                    ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                  GetSalesHeader;
                                                                  IF (SalesHeader."Language Code" <> '') AND
                                                                     ("Item No." <> '')
                                                                  THEN
                                                                    GetItemTranslation;
                                                                END;

                                                                IF ("Item No." <> '') THEN BEGIN
                                                                  TESTFIELD("Plant Type", '');
                                                                  TESTFIELD("Plant Set Code", '');
                                                                  IF SalesLogisticsSeparated() THEN BEGIN
                                                                    //* Item should also be present in logistic company
                                                                    lvItemLogisticsRec.CHANGECOMPANY(CompanyLogistics);
                                                                    lvItemLogisticsRec.GET("Item No.");  //* Should also be present in logistic company
                                                                  END;
                                                                  IF SalesLogisticsSepaRentContract() THEN BEGIN
                                                                    IF ("Arrival Date" = 0D) THEN
                                                                      IF NOT ItemIsRemovalOnly THEN BEGIN
                                                                        SalesHeader.GET("Document Type","Document No."); //Function GetSalesHeader returns old data
                                                                        VALIDATE("Arrival Date", SalesHeader."Arrival Date");
                                                                      END;
                                                                    CreateDim(                                                      //* 13473
                                                                      DATABASE::Item, "Item No.",
                                                                      DATABASE::"Plant Type", "Plant Type",
                                                                      DATABASE::Job,"Job No.",
                                                                      DATABASE::"Service Order","Service Order No.", //**4PS.n 09-06-2010
                                                                      DATABASE::"Service-Contract","Service Contract No.", //**4PS.n 09-06-2010
                                                                      DATABASE::"Responsibility Center","Responsibility Center",
                                                                      //DATABASE::Location,"Location Code");  //**4PS.n  //*C007227.o
                                                                      DATABASE::"Service Group", GetServiceObjectGroup);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 11012131;;Basic Item         ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN BEGIN
                                                                  ValidateItem((ItemTypeOpt::"Basic Item"));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Basic Item }
    { 11012132;;Trade Item         ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN BEGIN
                                                                  ValidateItem((ItemTypeOpt::"Trade Item"));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Trade Item }
    { 11012134;;Manufacturer       ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Manufacturer }
    { 11012135;;Vendor (Trade Item);Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=VAR
                                                                lvExecValidate@1100485000 : Boolean;
                                                                TradeItemRec@1100525000 : Record 11012317;
                                                              BEGIN
                                                                //**4PS
                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") AND ("Vendor (Trade Item)" <> '') THEN BEGIN
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  //db.sn, 17-12-10: M18021
                                                                  IF lvExecValidate THEN BEGIN
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item")
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor");
                                                                  END;
                                                                  //db.en, 17-12-10: M18021
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 11012140;;Balance Incl. VAT  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Amount Including VAT" WHERE (Document No.=FIELD(Document No.)));
                                                   CaptionML=ENU=Balance Incl. VAT;
                                                   Editable=No;
                                                   AutoFormatExpr="Currency Code" }
    { 11012150;;Balance Excl. VAT  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line".Amount WHERE (Document No.=FIELD(Document No.)));
                                                   CaptionML=ENU=Balance Excl. VAT;
                                                   Editable=No;
                                                   AutoFormatExpr="Currency Code" }
    { 11012160;;Points             ;Integer       ;CaptionML=ENU=Points;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 11012170;;Employee No.       ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                IF "Job No." <> '' THEN
                                                                  GetProjTypeRevenueAccount(FALSE,FALSE);
                                                              END;

                                                   CaptionML=ENU=Employee No. }
    { 11012180;;Sales Surcharge Overtime %;Decimal;CaptionML=ENU=Sales Surcharge Overtime %;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 11012190;;Surcharge % (Project CP);Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Cost Plus Entry"."Surcharge %" WHERE (Line No.=FIELD(Cost Plus Line No.),
                                                                                                                     Project No.=FIELD(Job No.),
                                                                                                                     Commission No.=FIELD(Commission No.),
                                                                                                                     Settl.Sheet No.=FIELD(Settl.Sheet No.),
                                                                                                                     Principal=FIELD(Sell-to Customer No.)));
                                                   CaptionML=ENU=Surcharge % (Project CP);
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 11012200;;Text               ;Text250       ;OnValidate=BEGIN
                                                                "Text Block" := Text <> '';
                                                              END;

                                                   CaptionML=ENU=Text }
    { 11012201;;Text Block         ;Boolean       ;CaptionML=ENU=Text Block;
                                                   Editable=No }
    { 11012202;;Job Description    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job.Description WHERE (No.=FIELD(Job No.)));
                                                   CaptionML=ENU=Job Description;
                                                   Editable=No }
    { 11012220;;Cost Entry No. Project Ledger;Integer;
                                                   TableRelation="Job Ledger Entry";
                                                   CaptionML=ENU=Cost Entry No. Project Ledger }
    { 11012221;;Cost Entry No. Service Ledger;Integer;
                                                   TableRelation="Service-Ledger Entry";
                                                   CaptionML=ENU=Cost Entry No. Service Ledger }
    { 11012250;;Cost Component     ;Code20        ;TableRelation="Cost Component".Code;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                ValidateCostComponent;
                                                              END;

                                                   CaptionML=ENU=Cost Component }
    { 11012255;;Cost Type          ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Dimension Value"."Cost Type" WHERE (Code=FIELD(Shortcut Dimension 2 Code),
                                                                                                           Global Dimension No.=CONST(2)));
                                                   CaptionML=ENU=Cost Type;
                                                   OptionCaptionML=ENU=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                   Editable=No }
    { 11012300;;Gross Price        ;Decimal       ;OnValidate=BEGIN
                                                                //**4PS02.n
                                                                //Nothing will be done for now with Cost Price of Cost Plus Entry, because this is nearly equal to Unit Cost on
                                                                //sales line, but to equalize is not so obvious.
                                                                //VALIDATE("Cost Price", "Gross Price" * (100 - "Purchase Discount % (Item)")/100);
                                                                VALIDATE("Basic Price", "Gross Price" * (100 - "Sales Discount % (Item)")/100);
                                                              END;

                                                   CaptionML=ENU=Gross Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 11012310;;Purchase Discount % (Item);Decimal;OnValidate=BEGIN
                                                                //**4PS02.n
                                                                //VALIDATE("Cost Price", "Gross Price" * (100 - "Purchase Discount % (Item)")/100);
                                                              END;

                                                   CaptionML=ENU=Purchase Discount % (Item);
                                                   MaxValue=100;
                                                   BlankZero=Yes }
    { 11012320;;Execution Date     ;Date          ;CaptionML=ENU=Execution Date }
    { 11012330;;Sales Discount % (Item);Decimal   ;OnValidate=BEGIN
                                                                //**4PS02.n
                                                                VALIDATE("Basic Price", "Gross Price" * (100 - "Sales Discount % (Item)")/100);
                                                              END;

                                                   CaptionML=ENU=Sales Discount % (Item);
                                                   MaxValue=100;
                                                   BlankZero=Yes }
    { 11012340;;Basic Price        ;Decimal       ;OnValidate=BEGIN
                                                                //**4PS02.n
                                                                VALIDATE("Surcharge %");
                                                                VALIDATE("Discount % (Contract)");
                                                                IF "Gross Price" <> 0 THEN
                                                                  "Sales Discount % (Item)" := (("Gross Price" - "Basic Price") / "Gross Price") * 100;
                                                              END;

                                                   CaptionML=ENU=Basic Price;
                                                   BlankZero=Yes;
                                                   Description=former field Unit Cost;
                                                   AutoFormatType=2 }
    { 11012350;;Surcharge %        ;Decimal       ;OnValidate=BEGIN
                                                                //**4PS02.n
                                                                "Sales Price" := "Basic Price" * (1 + "Surcharge %"/100);
                                                                "Sales Price" := ROUND("Sales Price", Currency."Amount Rounding Precision");
                                                                VALIDATE("Surcharge Amount");  //db, 08-10-08: M10359
                                                                VALIDATE("Discount % (Contract)");
                                                              END;

                                                   CaptionML=ENU=Surcharge %;
                                                   BlankZero=Yes }
    { 11012355;;Surcharge Amount   ;Decimal       ;OnValidate=BEGIN
                                                                //**4PS02.n
                                                                //db, 08-10-08: M10359
                                                                IF CurrFieldNo = FIELDNO("Surcharge Amount") THEN BEGIN
                                                                  IF "Basic Price" <> 0 THEN BEGIN
                                                                    "Sales Price" := "Basic Price" + "Surcharge Amount";
                                                                    "Surcharge %" := ("Sales Price"/"Basic Price" -1) * 100;
                                                                  END ELSE BEGIN
                                                                    "Surcharge %" := 0;
                                                                  END;
                                                                END ELSE BEGIN
                                                                  "Surcharge Amount" := "Sales Price" - "Basic Price";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Surcharge Amount;
                                                   BlankZero=Yes }
    { 11012360;;Sales Price        ;Decimal       ;OnValidate=BEGIN
                                                                //**4PS02.n
                                                                IF CurrFieldNo = FIELDNO("Sales Price") THEN BEGIN
                                                                  IF "Basic Price" <> 0 THEN
                                                                    "Surcharge %" := ("Sales Price"/"Basic Price" -1) * 100
                                                                  ELSE
                                                                    "Surcharge %" := 0;
                                                                  VALIDATE("Surcharge Amount");  //db, 08-10-08: M10359
                                                                END;

                                                                VALIDATE("Discount % (Contract)");
                                                              END;

                                                   CaptionML=ENU=Sales Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 11012370;;Discount % (Contract);Decimal     ;OnValidate=BEGIN
                                                                //**4PS02.n
                                                                //"Invoice Price" := Quantity * "Sales Price" * (1 - "Discount % (Contract)"/100);
                                                                //"Invoice Price" := ROUND("Invoice Price", Currency."Amount Rounding Precision");
                                                                //Calculate amount from here, at the same way when creating an invoice from Cost Plus Entries
                                                              END;

                                                   CaptionML=ENU=Discount % (Contract);
                                                   MaxValue=100;
                                                   BlankZero=Yes }
    { 11012380;;Service Contract No.;Code20       ;TableRelation=Service-Contract.No.;
                                                   OnValidate=BEGIN
                                                                //**4PS: validate en lookup section cleared due to changed relation
                                                                IF "Service Contract No." = '' THEN BEGIN
                                                                  IF "Item No." <> '' THEN BEGIN
                                                                    Type := Type::Item;
                                                                    "No." := "Item No.";
                                                                  END ELSE BEGIN
                                                                    "No." := '';
                                                                  END;
                                                                  FillSystemCreatedEntry;
                                                                END ELSE BEGIN
                                                                  ServContrRec.GET("Service Contract No.");
                                                                  ServContrRec.TESTFIELD(Status, ServContrRec.Status::"Invoicing Allowed");  //db, 23-05-07

                                                                  GetSalesHeader;

                                                                  Type := Type::"G/L Account";
                                                                  ServContrRec.TESTFIELD("Service Type");
                                                                  ServTypeRec.GET(ServContrRec."Service Type");
                                                                  ServTypeRec.TESTFIELD("WIP Account Revenue");
                                                                  FillSystemCreatedEntry;

                                                                  VALIDATE("No.", ServTypeRec."WIP Account Revenue");
                                                                  VALIDATE("Shortcut Dimension 1 Code", ServContrRec."Global Dimension 1 Code");
                                                                END;

                                                                //**4PS.n
                                                                //** 09-06-2010 sn
                                                                CreateDim(
                                                                  DATABASE::"Service-Contract","Service Contract No.",
                                                                  DATABASE::"Service Order","Service Order No.",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::"Plant Type", "Plant Type", //**4PS.n
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  //DATABASE::Location,"Location Code");  //**4PS.n  //*C007227.o
                                                                  DATABASE::"Service Group", GetServiceObjectGroup);

                                                                //** 09-06-2010 en
                                                              END;

                                                   CaptionML=ENU=Service Contract No. }
    { 11012390;;Service Order No.  ;Code20        ;TableRelation="Service Order";
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Service Order No." = '' THEN BEGIN
                                                                  "Service Location No." := '';
                                                                  "Service Contract No." := '';
                                                                  "Service Control Year" := 0;
                                                                  "Base Service Order No." := '';
                                                                  IF "Item No." <> '' THEN BEGIN
                                                                    Type := Type::Item;
                                                                    "No." := "Item No.";
                                                                    END ELSE BEGIN
                                                                    "No." := '';
                                                                  END;
                                                                  FillSystemCreatedEntry;
                                                                END ELSE BEGIN
                                                                  ServOrderRec.GET("Service Order No.");
                                                                  ServOrderRec.CheckStatus(1);
                                                                  GetSalesHeader;
                                                                  //db.sn, 09-06-10: M19719
                                                                  //call 29646.sn
                                                                  IF ServOrderRec.UseBilltoAsSelltoCustomer THEN
                                                                    ServOrderRec.TESTFIELD("Bill-to Customer No.", SalesHeader."Sell-to Customer No.")
                                                                  ELSE
                                                                    ServOrderRec.TESTFIELD("Customer No.", SalesHeader."Sell-to Customer No.");
                                                                  //call 29646.en
                                                                  IF (CurrFieldNo <> 0) THEN //kzwerver, 111005, n, #RfC Unit Price
                                                                    ServOrderRec.TESTFIELD("Bill-to Customer No.", SalesHeader."Bill-to Customer No.");
                                                                  //db.en, 09-06-10: M19719

                                                                  Type := Type::"G/L Account";
                                                                  "Service Location No." := ServOrderRec."Service Location No.";
                                                                  "Service Contract No." := ServOrderRec."Service Contract No.";
                                                                  IF NOT "System-Created Entry" THEN
                                                                    FillSystemCreatedEntry;

                                                                  CheckAdditionalCostService;  //db, 24-02-10
                                                                  VALIDATE("VAT Prod. Posting Group", ServOrderRec."VAT Prod. Posting Group");

                                                                  "Base Service Order No." := ServOrderRec."Base Service Order No.";
                                                                END;

                                                                //** DP0121
                                                                IF "Service Order No." <> xRec."Service Order No." THEN
                                                                  IF (Quantity <> 0) AND NSItemExists(xRec."Item No.") THEN
                                                                    ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                //

                                                                IF "Shortcut Dimension 2 Code" <> '' THEN
                                                                  VALIDATE("Shortcut Dimension 2 Code");
                                                                CheckCostCompServOrderType; //** 4PS03.n

                                                                //**4PS.n
                                                                //** 09-06-2010 sn
                                                                CreateDim(
                                                                  DATABASE::"Service Order","Service Order No.",
                                                                  DATABASE::"Service-Contract","Service Contract No.",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::"Plant Type", "Plant Type", //**4PS.n
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  //DATABASE::Location,"Location Code");  //**4PS.n  //*C007227.o
                                                                  DATABASE::"Service Group", GetServiceObjectGroup);

                                                                //** 09-06-2010 en
                                                              END;

                                                   CaptionML=ENU=Service Order No. }
    { 11012395;;Base Service Order No.;Code20     ;TableRelation="Service Order".No.;
                                                   CaptionML=ENU=Base Service Order No.;
                                                   Editable=No }
    { 11012400;;Object No.         ;Code20        ;TableRelation=Service-Object;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Service Group", GetServiceObjectGroup,
                                                                  DATABASE::"Service-Contract","Service Contract No.",
                                                                  DATABASE::"Service Order","Service Order No.",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::"Plant Type", "Plant Type", //**4PS.n
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   CaptionML=ENU=Object No.;
                                                   Description=S&O CONS }
    { 11012410;;Reserved NS Qty. (Base);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("NS Reservation Entry"."Quantity (Base)" WHERE (Source Type=CONST(37),
                                                                                                                   Source Subtype=FIELD(Document Type),
                                                                                                                   Source ID=FIELD(Document No.),
                                                                                                                   Source Ref. No.=FIELD(Line No.),
                                                                                                                   Reservation Status=CONST(Reservation)));
                                                   CaptionML=ENU=Reserved Non-stock Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 11012420;;Service Control Period Date;Date  ;OnValidate=BEGIN
                                                                IF "Service Control Period Date" <> 0D THEN
                                                                  IF "Service Order No." = '' THEN
                                                                    TESTFIELD("Service Contract No.");
                                                              END;

                                                   CaptionML=ENU=Service Control Period Date }
    { 11012430;;Batch Seq. No.     ;Code20        ;TableRelation="Invoice Proposal Batch Seq.";
                                                   CaptionML=ENU=Batch Seq. No.;
                                                   Editable=No }
    { 11012440;;Work Order No.     ;Code20        ;TableRelation="Work Order";
                                                   OnValidate=VAR
                                                                WorkOrderInfoManagement@1100528600 : Codeunit 11229278;
                                                              BEGIN
                                                                WorkOrderInfoManagement.TestWorkOrderWithinCompanyPlanGroup("Work Order No.");
                                                              END;

                                                   CaptionML=ENU=Work Order No. }
    { 11012500;;Alternative No.    ;Integer       ;CaptionML=ENU=Alternative No.;
                                                   MinValue=0 }
    { 11012501;;Optional           ;Boolean       ;CaptionML=ENU=Optional }
    { 11012510;;Plant in Other Company;Boolean    ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Header" WHERE (Document Type=FIELD(Document Type),
                                                                                           No.=FIELD(Document No.),
                                                                                           Sales Document Type=CONST(Sales Logistics Separated)));
                                                   CaptionML=ENU=Plant in Other Company;
                                                   Editable=No }
    { 11012511;;Arrival Date       ;Date          ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Plant Type" = '') AND ("Plant Set Code" = '') THEN BEGIN
                                                                  IF ItemIsRemovalOnly THEN
                                                                    "Arrival Date" := 0D
                                                                  ELSE
                                                                    "Removal Date" := 0D;
                                                                  "Rental Starting Date" := 0D;
                                                                  "Rental Ending Date" := 0D;
                                                                  DeterminePlantNoOfTimeUnits();
                                                                END ELSE BEGIN
                                                                  IF ("Rental Starting Date" < "Arrival Date") OR ("Rental Starting Date" = xRec."Arrival Date") THEN
                                                                    VALIDATE("Rental Starting Date", "Arrival Date");
                                                                  IF ("Removal Date" < "Arrival Date") AND ("Removal Date" <> 0D) THEN
                                                                    VALIDATE("Removal Date", "Arrival Date");
                                                                END;
                                                                "Shipment Date" := "Arrival Date";
                                                              END;

                                                   CaptionML=ENU=Arrival Date }
    { 11012512;;Removal Date       ;Date          ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Plant Type" = '') AND ("Plant Set Code" = '') THEN BEGIN
                                                                  IF NOT ItemIsRemovalOnly THEN
                                                                    "Removal Date" := 0D;
                                                                END ELSE BEGIN
                                                                  IF ("Removal Date" < "Arrival Date") AND ("Removal Date" <> 0D) THEN
                                                                    FIELDERROR("Removal Date", STRSUBSTNO(Text11012003,FIELDCAPTION("Arrival Date")));
                                                                  IF ("Rental Ending Date" > "Removal Date") OR ("Rental Ending Date" = 0D) OR ("Rental Ending Date" = xRec."Removal Date") THEN
                                                                    VALIDATE("Rental Ending Date", "Removal Date");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Removal Date }
    { 11012513;;Rental Starting Date;Date         ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Plant Type" = '') AND ("Plant Set Code" = '') THEN
                                                                  "Rental Starting Date" := 0D
                                                                ELSE BEGIN
                                                                  IF "Rental Starting Date" < "Arrival Date" THEN
                                                                    FIELDERROR("Rental Starting Date", STRSUBSTNO(Text11012003,FIELDCAPTION("Arrival Date")));
                                                                  IF ("Rental Starting Date" > "Removal Date") AND ("Removal Date" <> 0D)THEN
                                                                    VALIDATE("Removal Date", "Rental Starting Date");
                                                                  IF ("Rental Starting Date" > "Rental Ending Date") AND ("Rental Ending Date" <> 0D) THEN
                                                                    VALIDATE("Rental Ending Date", "Rental Starting Date");
                                                                END;

                                                                DeterminePlantNoOfTimeUnits();
                                                              END;

                                                   CaptionML=ENU=Rental Starting Date }
    { 11012514;;Rental Ending Date ;Date          ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Plant Type" = '') AND ("Plant Set Code" = '') THEN
                                                                  "Rental Ending Date" := 0D
                                                                ELSE BEGIN
                                                                  IF "Rental Ending Date" > "Removal Date" THEN
                                                                    FIELDERROR("Rental Ending Date", STRSUBSTNO(Text11012004,FIELDCAPTION("Removal Date")));
                                                                  IF ("Rental Ending Date" < "Rental Starting Date") AND ("Rental Ending Date" <> 0D) THEN
                                                                    FIELDERROR("Rental Ending Date", STRSUBSTNO(Text11012003,FIELDCAPTION("Rental Starting Date")));
                                                                  IF ("Rental Ending Date" < "Arrival Date") AND ("Rental Ending Date" <> 0D) THEN
                                                                    FIELDERROR("Rental Ending Date", STRSUBSTNO(Text11012003,FIELDCAPTION("Arrival Date")));
                                                                END;

                                                                DeterminePlantNoOfTimeUnits();
                                                              END;

                                                   CaptionML=ENU=Rental Ending Date }
    { 11012542;;Arrival Order Line ;Integer       ;CaptionML=ENU=Arrival Order Line;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 11012543;;Removal Order Line ;Integer       ;CaptionML=ENU=Removal Order Line;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 11012544;;Plant Rental Split No.;Integer    ;CaptionML=ENU=Plant Rental Split No. }
    { 11012545;;Plant Set Code     ;Code10        ;TableRelation="Plant Set";
                                                   OnValidate=VAR
                                                                lvPlantSetRec@1100485000 : Record 11012587;
                                                              BEGIN
                                                                //**4PS
                                                                IF "Plant Invoice" THEN
                                                                  EXIT;

                                                                IF ("Plant Set Code" = '') THEN BEGIN
                                                                  VALIDATE("Arrival Date");
                                                                  EXIT;
                                                                END;

                                                                TESTFIELD("Item No.", '');
                                                                TESTFIELD("Plant Type", '');
                                                                CheckSellBillToCustomer;

                                                                IF ("Plant Set Code" <> xRec."Plant Set Code") THEN BEGIN
                                                                  lvPlantSetRec.GET("Plant Set Code");
                                                                  Description := lvPlantSetRec.Description;
                                                                  "Unit of Measure Code" := lvPlantSetRec."Unit of Measure";
                                                                  GetPlantRentalRate();
                                                                  VALIDATE("Unit of Measure Code");
                                                                  IF Quantity = 0 THEN
                                                                    VALIDATE(Quantity, 1);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Plant Set }
    { 11012546;;Plant Rental First Invoiced;Boolean;
                                                   CaptionML=ENU=First Invoice of Rental Line (Plant) }
    { 11012547;;Plant Rate Unit of Measure;Code10 ;FieldClass=Normal;
                                                   TableRelation="Unit of Measure";
                                                   CaptionML=ENU=Rate Unit of Measure;
                                                   Editable=No }
    { 11012548;;Plant Qty. per Rate Unit;Decimal  ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Rate Unit;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 11012549;;Plant Rate Code    ;Code10        ;OnLookup=VAR
                                                              PlantRateCodeRec@1100525000 : Record 11020502;
                                                            BEGIN
                                                              //**4PS
                                                              PlantRateCodeRec.LookupPlantRateCode("Plant Location", "Plant Rate Code", FALSE, '');
                                                            END;

                                                   CaptionML=ENU=Plant Rate Code;
                                                   Editable=No }
    { 11012550;;Plant Invoice      ;Boolean       ;CaptionML=ENU=Plant Invoice;
                                                   Editable=No }
    { 11012551;;Plant Invoice Origin;Option       ;CaptionML=ENU=Plant Invoice Origin;
                                                   OptionCaptionML=ENU=,Plant Inventory,Plant Order,Exit Order,Rental Correction,Plant Hours,Transport Order,Returned Loss,Service Order;
                                                   OptionString=,Plant Inventory,Plant Order,Exit Order,Rental Correction,Plant Hours,Transport Order,Returned Loss,Service order;
                                                   BlankZero=Yes;
                                                   Description=Options must be the same in the tables 37, 113, 115, 11012572, 11020501 !!!!;
                                                   Editable=No }
    { 11012552;;Relate to          ;Option        ;CaptionML=ENU=Relate to;
                                                   OptionCaptionML=ENU=,Rental,Sales,Missing,Scrap,Buy Back,Hours,Transport,Sundry Costs,Plant Hours,Damage,Job Order,Load/Unload,Item,Item Buy-Back;
                                                   OptionString=,Rental,Sales,Missing,Scrap,Buy Back,Hours,Transport,Sundry Costs,Plant Hours,Damage,Job Order,Load/Unload,Item,ItemBuyBack;
                                                   BlankZero=Yes;
                                                   Description=Options must be the same in the tables 37, 113, 115, 11012572, 11020501 !!!!;
                                                   Editable=No }
    { 11012553;;Plant Location     ;Code20        ;TableRelation="Plant Location";
                                                   CaptionML=ENU=Plant Location;
                                                   Editable=No }
    { 11012554;;Plant Location Description;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Location".Description WHERE (Code=FIELD(Plant Location)));
                                                   CaptionML=ENU=Plant Location Description;
                                                   Editable=No }
    { 11012555;;Plant Type         ;Code20        ;TableRelation="Plant Type";
                                                   OnValidate=VAR
                                                                lvPlantTypeRec@1100485000 : Record 11012551;
                                                                lvPlantTypeLogisticsRec@1100485001 : Record 11012551;
                                                              BEGIN
                                                                //**4PS
                                                                IF "Plant Invoice" OR SalesLogisticsSepaRentContract THEN BEGIN
                                                                  IF "Plant Invoice" THEN
                                                                    FillSystemCreatedEntry;
                                                                  CreateDim(
                                                                    DATABASE::"Plant Type", "Plant Type",
                                                                    DimMgt.TypeToTableID3(Type),"No.",
                                                                    DATABASE::Job,"Job No.",
                                                                    DATABASE::"Service Order","Service Order No.", //**4PS.n 09-06-2010
                                                                    DATABASE::"Service-Contract","Service Contract No.", //**4PS.n 09-06-2010
                                                                    DATABASE::"Responsibility Center","Responsibility Center",
                                                                    //DATABASE::Location,"Location Code");  //**4PS.n  //*C007227.o
                                                                    DATABASE::"Service Group", GetServiceObjectGroup);
                                                                  IF "Plant Invoice" THEN
                                                                    EXIT;
                                                                END;

                                                                IF "Plant Type" = '' THEN BEGIN
                                                                  "Plant No." := '';
                                                                  VALIDATE("Arrival Date");
                                                                  EXIT;
                                                                END ELSE
                                                                  "Blocked for Invoicing" := FALSE;

                                                                TESTFIELD("Item No.", '');
                                                                TESTFIELD("Plant Set Code", '');
                                                                CheckSellBillToCustomer;

                                                                IF SalesLogisticsSepaRentContract() THEN BEGIN
                                                                  //* Plant Type should ALSO be present in logistic company
                                                                  lvPlantTypeLogisticsRec.CHANGECOMPANY(CompanyLogistics);
                                                                  lvPlantTypeLogisticsRec.GET("Plant Type");
                                                                  IF lvPlantTypeLogisticsRec."Rental Type" = lvPlantTypeLogisticsRec."Rental Type"::"Sales/Buy Back" THEN
                                                                    lvPlantTypeLogisticsRec.FIELDERROR("Rental Type");

                                                                  SalesHeader.GET("Document Type","Document No."); //Function GetSalesHeader returns old data
                                                                  Type := Type::"G/L Account";
                                                                  IF "Arrival Date" = 0D THEN BEGIN
                                                                    "Arrival Date" := SalesHeader."Arrival Date";
                                                                    "Rental Starting Date" := SalesHeader."Rental Starting Date";
                                                                  END ELSE BEGIN
                                                                    IF ("Rental Starting Date" = 0D) AND ("Arrival Date" = SalesHeader."Arrival Date") THEN
                                                                      "Rental Starting Date" := SalesHeader."Rental Starting Date";
                                                                  END;
                                                                  IF "Removal Date" = 0D THEN BEGIN
                                                                    "Removal Date" := SalesHeader."Removal Date";
                                                                    "Rental Ending Date" := SalesHeader."Rental Ending Date";
                                                                  END;
                                                                  VALIDATE("Arrival Date");
                                                                  VALIDATE("Removal Date");
                                                                  DeterminePlantNoOfTimeUnits();
                                                                  lvPlantTypeRec.GET("Plant Type");
                                                                  "Unit Cost (LCY)" := lvPlantTypeRec."Current Price";
                                                                END;

                                                                IF ("Plant Type" <> xRec."Plant Type") THEN BEGIN
                                                                  "Plant No." := '';
                                                                  lvPlantTypeRec.GET("Plant Type");
                                                                  //Description := lvPlantTypeRec.Description; //**4PS.o
                                                                  Description := GetTranslatedPlantDesc(MAXSTRLEN(Description));  //**4PS.n
                                                                  IF lvPlantTypeRec."Rate Unit of Measure" = '' THEN
                                                                    "Unit of Measure Code" := lvPlantTypeRec."Unit of Measure"
                                                                  ELSE
                                                                    "Unit of Measure Code" := lvPlantTypeRec."Rate Unit of Measure";
                                                                  GetPlantRentalRate();
                                                                  VALIDATE("Unit of Measure Code");
                                                                  IF (Quantity = 0) AND (NOT lvPlantTypeRec.Bulk) THEN
                                                                    VALIDATE(Quantity, 1);
                                                                  GetPlantRentalDiscount();

                                                                  IF SalesLogisticsSepaRentContract() THEN BEGIN
                                                                    VALIDATE("VAT Prod. Posting Group", lvPlantTypeRec."VAT Prod. Posting Group");
                                                                    VALIDATE("VAT Bus. Posting Group", SalesHeader."VAT Bus. Posting Group");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Plant Type }
    { 11012556;;Plant No.          ;Code10        ;TableRelation=IF (Plant No.=FILTER(<>0),
                                                                     Plant in Other Company=CONST(No)) "Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   OnValidate=VAR
                                                                lvPlantNoRec@1100485000 : Record 11012552;
                                                                lvPlantTypeRec@1100485001 : Record 11012551;
                                                                lvText11012001@1100485002 : TextConst 'ENU=Plant No. is not present with No. in the palnt inventory.';
                                                              BEGIN
                                                                //**4PS
                                                                IF "Plant Invoice" THEN
                                                                  EXIT;

                                                                Description := GetTranslatedPlantDesc(MAXSTRLEN(Description));   //**4PS.n
                                                                IF ("Plant No." = '') THEN BEGIN
                                                                  IF ("Plant Type" <> '') AND (xRec."Plant No." <> '') THEN BEGIN
                                                                    lvPlantTypeRec.GET("Plant Type");
                                                                    Description := lvPlantTypeRec.Description;
                                                                    GetPlantRentalRate();
                                                                    GetPlantRentalDiscount();
                                                                  END;
                                                                  EXIT;
                                                                END;

                                                                TESTFIELD("Plant Type");

                                                                IF SalesLogisticsSeparated() THEN
                                                                  lvPlantNoRec.CHANGECOMPANY(CompanyLogistics);
                                                                lvPlantNoRec.GET("Plant Type", "Plant No.");
                                                                IF "Plant No." <> lvPlantNoRec."Stock No." THEN
                                                                  ERROR(lvText11012001);

                                                                IF ("Plant No." <> xRec."Plant No.") THEN BEGIN
                                                                  //Description := lvPlantNoRec.Description; //**4PS.o

                                                                  GetPlantRentalRate();
                                                                  GetPlantRentalDiscount();
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Plant No. }
    { 11012557;;Bulk               ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Type".Bulk WHERE (Code=FIELD(Plant Type)));
                                                   CaptionML=ENU=Bulk;
                                                   Editable=No }
    { 11012558;;Number of Time Units;Decimal      ;CaptionML=ENU=No. of Time Units;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 11012559;;Arrival Order Type ;Option        ;CaptionML=ENU=Arrival Order Type;
                                                   OptionCaptionML=ENU=,Plant Order,Exit-order,Rental Correction,Transport Order,Returned Loss;
                                                   OptionString=,Plant Order,Exit-order,Rental Correction,Transport Order,Returned Loss;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 11012560;;Arrival Order      ;Code20        ;TableRelation=IF (Arrival Order Type=CONST(Plant Order)) "Plant Order"
                                                                 ELSE IF (Arrival Order Type=CONST(Exit-order)) "Exit Order"
                                                                 ELSE IF (Arrival Order Type=CONST(Returned Loss)) "Returned Loss Order"
                                                                 ELSE IF (Arrival Order Type=CONST(Rental Correction)) "Rental Correction"
                                                                 ELSE IF (Arrival Order Type=CONST(Transport Order)) "Posted Plant Transport Order";
                                                   OnLookup=VAR
                                                              PlantLookupMgt@1100409000 : Codeunit 11012590;
                                                            BEGIN
                                                              //**4PS
                                                              PlantLookupMgt.SalesLineArrivalOrder(Rec);
                                                            END;

                                                   CaptionML=ENU=Arrival Order;
                                                   Editable=No }
    { 11012561;;Removal Order Type ;Option        ;CaptionML=ENU=Removal Order Type;
                                                   OptionCaptionML=ENU=,Plant Order,Exit-order,Rental Correction,Transport Order;
                                                   OptionString=,Plant Order,Exit-order,Rental Correction,Transport Order;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 11012562;;Removal Order      ;Code20        ;TableRelation=IF (Removal Order Type=CONST(Plant Order)) "Plant Order"
                                                                 ELSE IF (Removal Order Type=CONST(Exit-order)) "Exit Order"
                                                                 ELSE IF (Removal Order Type=CONST(Rental Correction)) "Rental Correction"
                                                                 ELSE IF (Removal Order Type=CONST(Transport Order)) "Posted Plant Transport Order";
                                                   OnLookup=VAR
                                                              PlantLookupMgt@1100409000 : Codeunit 11012590;
                                                            BEGIN
                                                              //**4PS
                                                              PlantLookupMgt.SalesLineRemovalOrder(Rec);
                                                            END;

                                                   CaptionML=ENU=Removal Order;
                                                   Editable=No }
    { 11012563;;Rental Period      ;Text30        ;CaptionML=ENU=Rental Period;
                                                   Editable=No }
    { 11012564;;Rate Type          ;Option        ;CaptionML=ENU=Rate Type;
                                                   OptionCaptionML=ENU=" ,day,wk,,mth";
                                                   OptionString=[ ,Day,Week,,Month];
                                                   Editable=No }
    { 11012565;;Service Invoice    ;Boolean       ;CaptionML=ENU=Service Invoice }
    { 11012566;;Service Location No.;Code20       ;TableRelation="Service Location".No.;
                                                   CaptionML=ENU=Service Location No. }
    { 11012569;;Rental Unit        ;Code20        ;TableRelation="Rental Unit"."Rental Unit" WHERE (Project No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Rental Unit" = '' THEN
                                                                  "Rental Unit Line Type" := 0;
                                                                //ELSE BEGIN
                                                                //  IF "Rental Unit Line Type" = 0 THEN
                                                                //    "Rental Unit Line Type" := "Rental Unit Line Type"::Rent;  //*C017909.o
                                                                //END;

                                                                IF "Job No." <> '' THEN
                                                                  GetProjTypeRevenueAccount(FALSE,FALSE);
                                                              END;

                                                   CaptionML=ENU=Rental Unit }
    { 11012570;;Rental Unit Invoice;Boolean       ;CaptionML=ENU=Rental Unit Invoice;
                                                   Editable=No }
    { 11012571;;Last Installment   ;Boolean       ;CaptionML=ENU=Last Installment;
                                                   Editable=No }
    { 11012572;;Rental Unit Line Type;Option      ;OnValidate=BEGIN
                                                                //**4PS
                                                                //IF "Rental Unit" = '' THEN            //*C017909.so
                                                                //  "Rental Unit Line Type" := 0
                                                                //ELSE
                                                                //  TESTFIELD("Rental Unit Line Type"); //*C017909.eo
                                                                IF "Rental Unit Line Type" <> 0 THEN    //*C017909.n
                                                                  TESTFIELD("Rental Unit");

                                                                IF "Job No." <> '' THEN
                                                                  GetProjTypeRevenueAccount(FALSE,FALSE);
                                                              END;

                                                   CaptionML=ENU=Rental Unit Line Type;
                                                   OptionCaptionML=ENU=" ,Rent,Service Cost,Utilities";
                                                   OptionString=[ ,Rent,ServiceCost,Utilities] }
    { 11012573;;Rental Package Date;Date          ;TableRelation="Rental Package"."Starting Date" WHERE (Project No.=FIELD(Job No.),
                                                                                                         Rental Unit=FIELD(Rental Unit));
                                                   CaptionML=ENU=Rental Package Date }
    { 11012580;;Line VAT Amount    ;Decimal       ;CaptionML=ENU=Line VAT Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012590;;Source Document    ;Code20        ;CaptionML=ENU=Source Document;
                                                   Editable=No }
    { 11012600;;Additional Cost (Service);Boolean ;OnValidate=BEGIN
                                                                //**4PS
                                                                ValidateAdditionalCost;
                                                              END;

                                                   CaptionML=ENU=Additional Cost (Service) }
    { 11012601;;Removal Contribution;Boolean      ;CaptionML=ENU=Removal Contribution }
    { 11012610;;Recipe Group       ;Code10        ;TableRelation="Recipe Group".No.;
                                                   OnValidate=BEGIN
                                                                //**4PS DP00481
                                                                IF ("Recipe Group" = '') AND (Recipe <> '') THEN
                                                                  Recipe := '';
                                                              END;

                                                   CaptionML=ENU=Recipe Group;
                                                   Description=DP00481 }
    { 11012611;;Recipe             ;Code20        ;TableRelation="Base Recipe".No. WHERE (Recipe Group=FIELD(Recipe Group));
                                                   OnValidate=VAR
                                                                BaseRecipeRec@1210190000 : Record 11020581;
                                                                SalesRecipe@1100525000 : Record 11229788;
                                                              BEGIN
                                                                //**4PS DP00481
                                                                IF (Recipe <> xRec.Recipe) AND (Recipe <> '') THEN BEGIN
                                                                  BaseRecipeRec.GET("Recipe Group", Recipe);
                                                                  BaseRecipeRec.TESTFIELD(Blocked, FALSE);
                                                                END;
                                                                IF Recipe <> xRec.Recipe THEN BEGIN
                                                                  IF SalesRecipe.GET("Document Type", "Document No.", "Line No.") THEN BEGIN  //Any existing Recipe
                                                                    SalesRecipe.DELETE(TRUE);
                                                                  END;
                                                                  IF (Recipe <> '') THEN BEGIN
                                                                    BaseRecipeRec.GET("Recipe Group", Recipe);
                                                                    //CopyRecipe; == located on the page
                                                                    //SalesRecipe.GET("Document Type", "Document No.", "Line No.", "Recipe Group", Recipe);
                                                                    Type := Type::"G/L Account";  //Validate is not an option because the record would be instantiated again.
                                                                    Description := COPYSTR(BaseRecipeRec.Description, 1, MAXSTRLEN(Description));
                                                                    "Description 2" := COPYSTR(BaseRecipeRec.Description, MAXSTRLEN(Description) + 1);
                                                                    "Unit of Measure" := BaseRecipeRec."Unit of Measure";
                                                                    //BaseRecipeRec.CALCFIELDS("Sales Amount");
                                                                    //VALIDATE("Unit Price", BaseRecipeRec."Sales Amount")
                                                                  END;
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Recipe;
                                                   Description=DP00481 }
    { 11012630;;Principal Reference;Text50        ;CaptionML=ENU=Principal Reference }
    { 11012640;;Order No. Customer ;Text50        ;CaptionML=ENU=Order No. Customer }
    { 11012660;;Commision Date Customer;Date      ;CaptionML=ENU=Commision Date Principal }
    { 11012670;;Plant Location Address Code;Code20;OnValidate=VAR
                                                                PlantLocationAddressRec@1100485000 : Record 11012590;
                                                              BEGIN
                                                                IF ("Plant Location Address Code" <> '') THEN BEGIN
                                                                  GetSalesHeader;
                                                                  SalesHeader.TESTFIELD("Plant Location Code");
                                                                  IF SalesLogisticsSeparated() THEN
                                                                    PlantLocationAddressRec.CHANGECOMPANY(CompanyLogistics);
                                                                  PlantLocationAddressRec.GET(SalesHeader."Plant Location Code", "Plant Location Address Code");
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              PlantLocationAddressRec@1100485000 : Record 11012590;
                                                            BEGIN
                                                              GetSalesHeader;
                                                              IF SalesHeader."Plant Location Code" = '' THEN
                                                                EXIT;

                                                              IF SalesLogisticsSeparated() THEN
                                                                PlantLocationAddressRec.CHANGECOMPANY(CompanyLogistics);
                                                              PlantLocationAddressRec.FILTERGROUP(10);
                                                              PlantLocationAddressRec.SETRANGE(Location, SalesHeader."Plant Location Code");
                                                              PlantLocationAddressRec.FILTERGROUP(0);
                                                              IF PAGE.RUNMODAL(PAGE::"Plant Location Addresses",PlantLocationAddressRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Plant Location Address Code", PlantLocationAddressRec."Address Code");
                                                            END;

                                                   CaptionML=ENU=Plant Location Address Code;
                                                   Description=Only for Sales Rental Contract and Sales Logistics Separated }
    { 11012680;;Blocked for Invoicing;Boolean     ;OnValidate=BEGIN
                                                                TESTFIELD("Plant Type", '');
                                                              END;

                                                   CaptionML=ENU=Blocked for Invoicing }
    { 11012685;;Part of Line       ;Integer       ;TableRelation="Sales Line"."Line No." WHERE (Document Type=FIELD(Document Type),
                                                                                                Document No.=FIELD(Document No.));
                                                   OnValidate=BEGIN
                                                                DetermineBOMLevel("Part of Line","Level BOM");
                                                              END;

                                                   CaptionML=ENU=Part of Line }
    { 11012690;;Original Quantity  ;Decimal       ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF NOT ((Type = Type::" ") AND ("BOM Item No." <> '')) THEN
                                                                  FIELDERROR(
                                                                    "Original Quantity",STRSUBSTNO(Text11012007,FIELDCAPTION(Type),Type));
                                                              END;

                                                   CaptionML=ENU=Original Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 11012695;;Level BOM          ;Integer       ;CaptionML=ENU=Level BOM;
                                                   Description=Level after explode BOM-Item;
                                                   Editable=No }
    { 11012700;;Service Warranty Code;Code10      ;TableRelation="Service Warranty";
                                                   CaptionML=ENU=Service Warranty Code }
    { 11012705;;Serial No.         ;Code40        ;CaptionML=ENU=Serial No.;
                                                   Description=DP00121 }
    { 11012706;;Lot No.            ;Code20        ;CaptionML=ENU=Lot No.;
                                                   Description=DP00121 }
    { 11012710;;Service Price Book Code;Code20    ;CaptionML=ENU=Service Price Book Code;
                                                   Description=S&O CONS;
                                                   Editable=No }
    { 11012720;;SUP Index Date     ;Date          ;CaptionML=ENU=SUP Index Date;
                                                   Description=S&O CONS;
                                                   Editable=No }
    { 11012730;;SUP Extention      ;Boolean       ;CaptionML=ENU=Service Unit Price Extention;
                                                   Description=S&O CONS;
                                                   Editable=No }
    { 11012740;;SUP Production Date;Date          ;CaptionML=ENU=SUP Production Date;
                                                   Description=S&O CONS;
                                                   Editable=No }
    { 11012750;;SUP Room           ;Code20        ;TableRelation="SUP Room";
                                                   CaptionML=ENU=Service Unit Price Room;
                                                   Editable=No }
    { 11012760;;Service Unit Price Code;Code20    ;CaptionML=ENU=Service Unit Price Code }
    { 11012800;;IsPlantService     ;Boolean       ;CaptionML=ENU=Is Plant Service }
    { 11012820;;Extra Shipment Line;Boolean       ;CaptionML=ENU=Extra Shipment Line }
    { 11012830;;Manually VAT Posting;Boolean      ;CaptionML=ENU=Manually VAT Posting }
    { 11012840;;Service Control Year;Integer      ;CaptionML=ENU=Service Control Year;
                                                   Editable=No }
    { 11012850;;Attached to Line No. (RC);Integer ;TableRelation="Sales Line"."Line No." WHERE (Document Type=FIELD(Document Type),
                                                                                                Document No.=FIELD(Document No.));
                                                   CaptionML=ENU=Attached to Line No. (Removal Contribution);
                                                   Editable=No }
    { 11012860;;Copy of Document   ;Boolean       ;CaptionML=ENU=Copy of Document;
                                                   Editable=No }
    { 11012970;;Tariff No.         ;Code20        ;TableRelation="Tariff Number";
                                                   CaptionML=ENU=Tariff No. }
    { 11012980;;Unit Price Code    ;Code20        ;CaptionML=ENU=Unit Price Code }
    { 11012990;;Prev. Last Invoiced Until;Date    ;CaptionML=ENU=Previous Last Invoiced Until;
                                                   Description=S&O CONS;
                                                   Editable=No }
    { 11012992;;Prev. Invoiced Until;Date         ;CaptionML=ENU=Previous Invoiced Until;
                                                   Description=S&O CONS;
                                                   Editable=No }
    { 11012995;;Installment Line No.;Integer      ;CaptionML=ENU=Installment Line No.;
                                                   Description=S&O CONS;
                                                   Editable=No }
    { 11012997;;Collective-List Line Type;Option  ;CaptionML=ENU=Collective-List Line Type;
                                                   OptionCaptionML=ENU=" ,Dynamic,Installment,Cost Plus Entry";
                                                   OptionString=[ ,Dynamic,Installment,Cost Plus Entry] }
    { 11012998;;Coll.-List SC Inv. Line No.;Integer;
                                                   CaptionML=ENU=Collective-List Service Contract Invoicng Line No.;
                                                   Editable=No }
    { 11012999;;Collective List No.;Code20        ;TableRelation="Service Collective-List";
                                                   CaptionML=ENU=Collective List No.;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Document Type,Document No.,Line No.     ;SumIndexFields=Amount,Amount Including VAT,Outstanding Amount,Shipped Not Invoiced,Outstanding Amount (LCY),Shipped Not Invoiced (LCY),Line VAT Amount;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Document No.,Line No.,Document Type      }
    {    ;Document Type,Type,No.,Variant Code,Drop Shipment,Location Code,Shipment Date;
                                                   SumIndexFields=Outstanding Qty. (Base) }
    {    ;Document Type,Bill-to Customer No.,Currency Code;
                                                   SumIndexFields=Outstanding Amount,Shipped Not Invoiced,Outstanding Amount (LCY),Shipped Not Invoiced (LCY),Return Rcd. Not Invd. (LCY) }
    {    ;Document Type,Type,No.,Variant Code,Drop Shipment,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Location Code,Shipment Date;
                                                   SumIndexFields=Outstanding Qty. (Base);
                                                   MaintainSIFTIndex=No }
    { No ;Document Type,Bill-to Customer No.,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Currency Code;
                                                   SumIndexFields=Outstanding Amount,Shipped Not Invoiced,Outstanding Amount (LCY),Shipped Not Invoiced (LCY) }
    {    ;Document Type,Blanket Order No.,Blanket Order Line No. }
    {    ;Document Type,Document No.,Location Code }
    {    ;Document Type,Shipment No.,Shipment Line No. }
    {    ;Type,No.,Variant Code,Drop Shipment,Location Code,Document Type,Shipment Date;
                                                   MaintainSQLIndex=No }
    {    ;Document Type,Sell-to Customer No.,Shipment No.;
                                                   SumIndexFields=Outstanding Amount (LCY) }
    { No ;Job Contract Entry No.                   }
    {    ;Document Type,Document No.,Qty. Shipped Not Invoiced }
    {    ;Document Type,Document No.,Type,No.      }
    {    ;Document Type,Project Invoice,Installment Invoice,Job No.,Sell-to Customer No.,Installment No.,Plot No.;
                                                   SumIndexFields=Amount (LCY),Amount;
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Project Invoice,Installment Invoice,Job No.,Sell-to Customer No.,Commission No.,Settl.Sheet No.,Cost Plus Line No.;
                                                   SumIndexFields=Amount (LCY),Amount;
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Service Invoice,Service Contract No.,Installment Line No.;
                                                   SumIndexFields=Amount (LCY),Amount;
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Service Invoice,Service Order No.,Base Service Order No.,Cost Plus Line No.,Additional Cost (Service);
                                                   SumIndexFields=Amount (LCY),Amount;
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Job No.,Extension Contract }
    {    ;Document Type,Document No.,Service Contract No.,Service Location No.,Service Order No.,Line No.;
                                                   MaintainSQLIndex=No }
    {    ;Document Type,Document No.,Cost Type Cost Plus Line;
                                                   MaintainSQLIndex=No }
    {    ;Document Type,Collective List No.        }
    {    ;Batch Seq. No.                           }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot delete the order line because it is associated with purchase order %1 line %2.';
      Text001@1001 : TextConst 'ENU=You cannot rename a %1.';
      Text002@1002 : TextConst 'ENU=You cannot change %1 because the order line is associated with purchase order %2 line %3.';
      Text003@1003 : TextConst 'ENU=must not be less than %1';
      Text005@1004 : TextConst 'ENU=You cannot invoice more than %1 units.';
      Text006@1005 : TextConst 'ENU=You cannot invoice more than %1 base units.';
      Text007@1006 : TextConst 'ENU=You cannot ship more than %1 units.';
      Text008@1007 : TextConst 'ENU=You cannot ship more than %1 base units.';
      Text009@1008 : TextConst 'ENU=" must be 0 when %1 is %2"';
      Text011@1010 : TextConst 'ENU=Automatic reservation is not possible.\Do you want to reserve items manually?';
      Text014@1013 : TextConst 'ENU=%1 %2 is before work date %3';
      Text016@1040 : TextConst 'ENU="%1 is required for %2 = %3."';
      Text017@1044 : TextConst 'ENU=\The entered information may be disregarded by warehouse operations.';
      Text020@1019 : TextConst 'ENU=You cannot return more than %1 units.';
      Text021@1020 : TextConst 'ENU=You cannot return more than %1 base units.';
      Text026@1025 : TextConst 'ENU=You cannot change %1 if the item charge has already been posted.';
      CurrExchRate@1030 : Record 330;
      SalesHeader@1031 : Record 36;
      SalesLine2@1032 : Record 37;
      TempSalesLine@1033 : Record 37;
      TmpChrgRec@1100525003 : TEMPORARY Record 11229771;
      GLAcc@1035 : Record 15;
      Item@1036 : Record 27;
      Resource@1400 : Record 156;
      Currency@1037 : Record 4;
      ItemTranslation@1038 : Record 30;
      Res@1043 : Record 156;
      ResCost@1045 : Record 202;
      WorkType@1046 : Record 200;
      VATPostingSetup@1048 : Record 325;
      StdTxt@1049 : Record 7;
      GenBusPostingGrp@1050 : Record 250;
      GenProdPostingGrp@1051 : Record 251;
      ReservEntry@1052 : Record 337;
      UnitOfMeasure@1054 : Record 204;
      FA@1056 : Record 5600;
      ShippingAgentServices@1057 : Record 5790;
      NonstockItem@1058 : Record 5718;
      PurchasingCode@1059 : Record 5721;
      SKU@1060 : Record 5700;
      ItemCharge@1061 : Record 5800;
      ItemChargeAssgntSales@1062 : Record 5809;
      InvtSetup@1063 : Record 313;
      Location@1064 : Record 14;
      ReturnReason@1089 : Record 6635;
      ATOLink@1016 : Record 904;
      SalesSetup@1065 : Record 311;
      Reservation@1066 : Page 498;
      PriceCalcMgt@1071 : Codeunit 7000;
      ResFindUnitCost@1073 : Codeunit 220;
      CustCheckCreditLimit@1074 : Codeunit 312;
      ItemCheckAvail@1075 : Codeunit 311;
      SalesTaxCalculate@1076 : Codeunit 398;
      ReservMgt@1077 : Codeunit 99000845;
      ReservEngineMgt@1078 : Codeunit 99000831;
      ReserveSalesLine@1079 : Codeunit 99000832;
      UOMMgt@1080 : Codeunit 5402;
      AddOnIntegrMgt@1081 : Codeunit 5403;
      DimMgt@1082 : Codeunit 408;
      ItemSubstitutionMgt@1085 : Codeunit 5701;
      DistIntegration@1086 : Codeunit 5702;
      NonstockItemMgt@1087 : Codeunit 5703;
      WhseValidateSourceLine@1088 : Codeunit 5777;
      TransferExtendedText@1100 : Codeunit 378;
      DeferralUtilities@1026 : Codeunit 1720;
      JobPostLine@1097 : Codeunit 11072006;
      FullAutoReservation@1092 : Boolean;
      StatusCheckSuspended@1094 : Boolean;
      HasBeenShown@1018 : Boolean;
      PlannedShipmentDateCalculated@1012 : Boolean;
      PlannedDeliveryDateCalculated@1070 : Boolean;
      Text028@1098 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.';
      ItemCategory@1099 : Record 5722;
      Text029@1021 : TextConst 'ENU=must be positive';
      Text030@1042 : TextConst 'ENU=must be negative';
      Text031@1093 : TextConst 'ENU=You must either specify %1, %2 or %3.';
      CalendarMgmt@1101 : Codeunit 7600;
      CalChange@1102 : Record 11072016;
      Text034@1084 : TextConst 'ENU=The value of %1 field must be a whole number for the item included in the service item group if the %2 field in the Service Item Groups window contains a check mark.';
      Text035@1083 : TextConst 'ENU="Warehouse "';
      Text036@1090 : TextConst 'ENU="Inventory "';
      HideValidationDialog@1109 : Boolean;
      Text037@1009 : TextConst 'ENU=You cannot change %1 when %2 is %3 and %4 is positive.';
      Text038@1014 : TextConst 'ENU=You cannot change %1 when %2 is %3 and %4 is negative.';
      Text039@1034 : TextConst 'ENU=%1 units for %2 %3 have already been returned. Therefore, only %4 units can be returned.';
      Text040@1039 : TextConst 'ENU=You must use form %1 to enter %2, if item tracking is used.';
      Text042@1055 : TextConst 'ENU=When posting the Applied to Ledger Entry %1 will be opened first';
      ShippingMoreUnitsThanReceivedErr@1047 : TextConst 'ENU=You cannot ship more than the %1 units that you have received for document no. %2.';
      Text044@1103 : TextConst 'ENU=cannot be less than %1';
      Text045@1104 : TextConst 'ENU=cannot be more than %1';
      Text046@1105 : TextConst 'ENU=You cannot return more than the %1 units that you have shipped for %2 %3.';
      Text047@1106 : TextConst 'ENU=must be positive when %1 is not 0.';
      TrackingBlocked@1107 : Boolean;
      Text048@1108 : TextConst 'ENU=You cannot use item tracking on a %1 created from a %2.';
      Text049@1139 : TextConst 'ENU=cannot be %1.';
      Text051@1141 : TextConst 'ENU=You cannot use %1 in a %2.';
      PrePaymentLineAmountEntered@1015 : Boolean;
      Text052@1022 : TextConst 'ENU=You cannot add an item line because an open warehouse shipment exists for the sales header and Shipping Advice is %1.\\You must add items as new lines to the existing warehouse shipment or change Shipping Advice to Partial.';
      Text053@1017 : TextConst 'ENU=You have changed one or more dimensions on the %1, which is already shipped. When you post the line with the changed dimension to General Ledger, amounts on the Inventory Interim account will be out of balance when reported per dimension.\\Do you want to keep the changed dimension?';
      Text054@1023 : TextConst 'ENU=Cancelled.';
      Text055@1024 : TextConst '@@@=Quantity Invoiced must not be greater than the sum of Qty. Assigned and Qty. to Assign.;ENU=%1 must not be greater than the sum of %2 and %3.';
      Text056@1011 : TextConst 'ENU=You cannot add an item line because an open inventory pick exists for the Sales Header and because Shipping Advice is %1.\\You must first post or delete the inventory pick or change Shipping Advice to Partial.';
      Text057@1027 : TextConst 'ENU=must have the same sign as the shipment';
      Text058@1028 : TextConst 'ENU=The quantity that you are trying to invoice is greater than the quantity in shipment %1.';
      Text059@1029 : TextConst 'ENU=must have the same sign as the return receipt';
      Text060@1041 : TextConst 'ENU=The quantity that you are trying to invoice is greater than the quantity in return receipt %1.';
      SalesLineCompletelyShippedErr@1053 : TextConst 'ENU=You cannot change the purchasing code for a sales line that has been completely shipped.';
      SalesSetupRead@1067 : Boolean;
      DeferralPostDate@1069 : Date;
      ProjSetupRec@1210190009 : Record 315;
      ProjRec@11012047 : Record 11072003;
      ProjTypeRec@11012048 : Record 11012009;
      ProjPrincipRec@11012050 : Record 11012005;
      ProjInstalmRec@1210190010 : Record 11012018;
      CostPlusRec@1210190011 : Record 11012019;
      DimVal@11012000 : Record 349;
      Text11012001@1210190000 : TextConst 'ENU=Status of Project %1 Extension %2 is lower then Invoicing Allowed.';
      ServSetupRec@1210190012 : Record 11012800;
      ServOrderRec@1210190006 : Record 11012823;
      ServContrRec@1210190017 : Record 11012812;
      ServTypeRec@1210190004 : Record 11012814;
      ServCostPlusRec@1210190007 : Record 11012825;
      SalesRentalRemovalLine@1100485007 : Record 11012789;
      ItemTypeOpt@1210190015 : 'Item,Basic Item,Trade Item,Trade Vendor';
      ValidateCu@1210190016 : Codeunit 11012033;
      OnlyCheckForOpen@1210190018 : Boolean;
      Text11012002@1100485000 : TextConst 'ENU=%1 must be filled for Project ''%2'' or for Project Principal ''%3''.';
      UpdateVATAmountsSuspended@1100485001 : Boolean;
      Text11012003@1100485002 : TextConst 'ENU=may not be before the %1';
      Text11012004@1100485003 : TextConst 'ENU=may not be after the %1';
      CompanyLogistics@1100485004 : Text[30];
      Text11012005@1100485005 : TextConst 'ENU=%1 van %2 %3 set to zero.';
      Text11012006@1100485006 : TextConst 'ENU=You cannot delete orderline %1 because a plant orders exists for this orderline.';
      Text11012007@1100525000 : TextConst 'ENU="must not be specified when %1 = %2"';
      DPA_Management@1100000999 : Codeunit 11012783;
      Text11012008@1100525001 : TextConst 'ENU=Item Tracking can not be used for Invoicing Cost Plus Entries.';
      TmpSalesRecipeLine@1100525002 : TEMPORARY Record 11229789;
      Text11012009@1100528600 : TextConst 'ENU=Sales Line %1 cannot be deleted because subsequent lines exist';
      Text11012010@1100528400 : TextConst 'ENU=Compressing lines of %1 %2 is not allowed.';
      Text11012011@1100528401 : TextConst 'ENU=%1 of %2 %3 should be filled.';
      Text11012012@1100528402 : TextConst 'ENU=%1 of %2 %3 should be %4.';
      Text11012013@1100528403 : TextConst 'ENU=%1 %2 not found.';
      Text11012014@1100528404 : TextConst 'ENU=No. of Objects:';

    PROCEDURE InitOutstanding@16();
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        "Outstanding Quantity" := Quantity - "Return Qty. Received";
        "Outstanding Qty. (Base)" := "Quantity (Base)" - "Return Qty. Received (Base)";
        "Return Qty. Rcd. Not Invd." := "Return Qty. Received" - "Quantity Invoiced";
        "Ret. Qty. Rcd. Not Invd.(Base)" := "Return Qty. Received (Base)" - "Qty. Invoiced (Base)";
      END ELSE BEGIN
        "Outstanding Quantity" := Quantity - "Quantity Shipped";
        "Outstanding Qty. (Base)" := "Quantity (Base)" - "Qty. Shipped (Base)";
        "Qty. Shipped Not Invoiced" := "Quantity Shipped" - "Quantity Invoiced";
        "Qty. Shipped Not Invd. (Base)" := "Qty. Shipped (Base)" - "Qty. Invoiced (Base)";
      END;
      CALCFIELDS("Reserved Quantity");
      Planned := "Reserved Quantity" = "Outstanding Quantity";
      "Completely Shipped" := (Quantity <> 0) AND ("Outstanding Quantity" = 0);
      InitOutstandingAmount;
    END;

    PROCEDURE InitOutstandingAmount@17();
    VAR
      AmountInclVAT@1000 : Decimal;
    BEGIN
      IF Quantity = 0 THEN BEGIN
        "Outstanding Amount" := 0;
        "Outstanding Amount (LCY)" := 0;
        "Shipped Not Invoiced" := 0;
        "Shipped Not Invoiced (LCY)" := 0;
        "Return Rcd. Not Invd." := 0;
        "Return Rcd. Not Invd. (LCY)" := 0;
      END ELSE BEGIN
        GetSalesHeader;
        AmountInclVAT := "Amount Including VAT";
        VALIDATE(
          "Outstanding Amount",
          ROUND(
            AmountInclVAT * "Outstanding Quantity" / Quantity,
            Currency."Amount Rounding Precision"));
        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          VALIDATE(
            "Return Rcd. Not Invd.",
            ROUND(
              AmountInclVAT * "Return Qty. Rcd. Not Invd." / Quantity,
              Currency."Amount Rounding Precision"))
        ELSE
          VALIDATE(
            "Shipped Not Invoiced",
            ROUND(
              AmountInclVAT * "Qty. Shipped Not Invoiced" / Quantity,
              Currency."Amount Rounding Precision"));
      END;
    END;

    PROCEDURE InitQtyToShip@15();
    BEGIN
      GetSalesSetup;
      //**4PS.so
      //IF (SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Remainder) OR
      //   ("Document Type" = "Document Type"::Invoice)
      //THEN BEGIN
      //  "Qty. to Ship" := "Outstanding Quantity";
      //  "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
      //END ELSE
      //  IF "Qty. to Ship" <> 0 THEN
      //    "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");
      //**4PS.eo
      //**4PS.sn
      IF OnlyCheckForOpen THEN BEGIN
        IF ("Qty. to Ship" * Quantity) >= ("Outstanding Quantity" * Quantity) THEN
          "Qty. to Ship" := "Outstanding Quantity";
        "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");
        IF ("Qty. to Ship (Base)" * Quantity) >= ("Outstanding Qty. (Base)" * Quantity) THEN
          "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
        OnlyCheckForOpen := FALSE;
      END ELSE BEGIN
        IF (("Document Type" = "Document Type"::Order) OR
            ("Document Type" = "Document Type"::"Blanket Order")) AND
            NOT DirectDelivery THEN
        BEGIN
          "Qty. to Ship" := 0;
          "Qty. to Ship (Base)" := 0;
        END ELSE BEGIN
          "Qty. to Ship" := "Outstanding Quantity";
          "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
        END;
      END;
      //**4PS.en
      CheckServItemCreation;

      InitQtyToInvoice;
    END;

    PROCEDURE InitQtyToReceive@5803();
    BEGIN
      GetSalesSetup;
      IF (SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Remainder) OR
         ("Document Type" = "Document Type"::"Credit Memo")
      THEN BEGIN
        "Return Qty. to Receive" := "Outstanding Quantity";
        "Return Qty. to Receive (Base)" := "Outstanding Qty. (Base)";
      END ELSE
        IF "Return Qty. to Receive" <> 0 THEN
          "Return Qty. to Receive (Base)" := CalcBaseQty("Return Qty. to Receive");

      InitQtyToInvoice;
    END;

    PROCEDURE InitQtyToInvoice@13();
    BEGIN
      "Qty. to Invoice" := MaxQtyToInvoice;
      "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
      "VAT Difference" := 0;
      CalcInvDiscToInvoice;
      IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice THEN
        CalcPrepaymentToDeduct;
    END;

    LOCAL PROCEDURE InitItemAppl@40(OnlyApplTo@1000 : Boolean);
    BEGIN
      "Appl.-to Item Entry" := 0;
      IF NOT OnlyApplTo THEN
        "Appl.-from Item Entry" := 0;
    END;

    PROCEDURE MaxQtyToInvoice@18() : Decimal;
    BEGIN
      IF "Prepayment Line" THEN
        EXIT(1);
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT("Return Qty. Received" + "Return Qty. to Receive" - "Quantity Invoiced");

      EXIT("Quantity Shipped" + "Qty. to Ship" - "Quantity Invoiced");
    END;

    PROCEDURE MaxQtyToInvoiceBase@19() : Decimal;
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT("Return Qty. Received (Base)" + "Return Qty. to Receive (Base)" - "Qty. Invoiced (Base)");

      EXIT("Qty. Shipped (Base)" + "Qty. to Ship (Base)" - "Qty. Invoiced (Base)");
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE SelectItemEntry@8(CurrentFieldNo@1000 : Integer);
    VAR
      ItemLedgEntry@1001 : Record 32;
      SalesLine3@1002 : Record 37;
    BEGIN
      ItemLedgEntry.SETRANGE("Item No.","No.");
      IF "Location Code" <> '' THEN
        ItemLedgEntry.SETRANGE("Location Code","Location Code");
      ItemLedgEntry.SETRANGE("Variant Code","Variant Code");

      IF CurrentFieldNo = FIELDNO("Appl.-to Item Entry") THEN BEGIN
        ItemLedgEntry.SETCURRENTKEY("Item No.",Open);
        ItemLedgEntry.SETRANGE(Positive,TRUE);
        ItemLedgEntry.SETRANGE(Open,TRUE);
      END ELSE BEGIN
        ItemLedgEntry.SETCURRENTKEY("Item No.",Positive);
        ItemLedgEntry.SETRANGE(Positive,FALSE);
        ItemLedgEntry.SETFILTER("Shipped Qty. Not Returned",'<0');
      END;
      IF PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK THEN BEGIN
        SalesLine3 := Rec;
        IF CurrentFieldNo = FIELDNO("Appl.-to Item Entry") THEN
          SalesLine3.VALIDATE("Appl.-to Item Entry",ItemLedgEntry."Entry No.")
        ELSE
          SalesLine3.VALIDATE("Appl.-from Item Entry",ItemLedgEntry."Entry No.");
        CheckItemAvailable(CurrentFieldNo);
        Rec := SalesLine3;
      END;
    END;

    PROCEDURE SetSalesHeader@24(NewSalesHeader@1000 : Record 36);
    BEGIN
      SalesHeader := NewSalesHeader;

      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        SalesHeader.TESTFIELD("Currency Factor");
        Currency.GET(SalesHeader."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;

    LOCAL PROCEDURE GetSalesHeader@1();
    BEGIN
      TESTFIELD("Document No.");
      IF ("Document Type" <> SalesHeader."Document Type") OR ("Document No." <> SalesHeader."No.") THEN BEGIN
        SalesHeader.GET("Document Type","Document No.");
        IF SalesHeader."Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          SalesHeader.TESTFIELD("Currency Factor");
          Currency.GET(SalesHeader."Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
      END;
    END;

    LOCAL PROCEDURE GetItem@9();
    BEGIN
      //**4PS.sn
      IF "Item No." <> '' THEN BEGIN
        Item.GET("Item No.");
        EXIT;
      END;
      //**4PS.en
      TESTFIELD("No.");
      IF "No." <> Item."No." THEN
        Item.GET("No.");
    END;

    LOCAL PROCEDURE GetResource@49();
    BEGIN
      TESTFIELD("No.");
      IF "No." <> Resource."No." THEN
        Resource.GET("No.");
    END;

    PROCEDURE UpdateUnitPrice@2(CalledByFieldNo@1000 : Integer);
    BEGIN
      //**4PS: Function changed from Local to Global
      IF (CalledByFieldNo <> CurrFieldNo) AND (CurrFieldNo <> 0) THEN
        EXIT;

      GetSalesHeader;
      TESTFIELD("Qty. per Unit of Measure");

      CASE Type OF
        Type::Item,Type::Resource,Type::"G/L Account":  //**4PS.n
          BEGIN
            IF (Type = Type::"G/L Account") AND (("Item No." = '') OR "Plant Invoice") THEN EXIT;  //**4PS.n
            IF ("Settl.Sheet No." = '') AND ("Cost Plus Line No." = 0) THEN BEGIN  //**4PS.n
              PriceCalcMgt.FindSalesLineLineDisc(SalesHeader,Rec);
              PriceCalcMgt.FindSalesLinePrice(SalesHeader,Rec,CalledByFieldNo);
            END;  //**4PS.n: M12453
          END;
      END;
      VALIDATE("Unit Price");
    END;

    LOCAL PROCEDURE FindResUnitCost@5();
    BEGIN
      ResCost.INIT;
      ResCost.Code := "No.";
      ResCost."Work Type Code" := "Work Type Code";
      ResFindUnitCost.RUN(ResCost);
      VALIDATE("Unit Cost (LCY)",ResCost."Unit Cost" * "Qty. per Unit of Measure");
    END;

    PROCEDURE UpdatePrepmtSetupFields@102();
    VAR
      GenPostingSetup@1001 : Record 252;
      GLAcc@1000 : Record 15;
    BEGIN
      IF ("Prepayment %" <> 0) AND (Type <> Type::" ") THEN BEGIN
        TESTFIELD("Document Type","Document Type"::Order);
        TESTFIELD("No.");
        IF CurrFieldNo = FIELDNO("Prepayment %") THEN
          IF "System-Created Entry" THEN
            FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text045,0));
        IF "System-Created Entry" THEN
          "Prepayment %" := 0;
        GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
        IF GenPostingSetup."Sales Prepayments Account" <> '' THEN BEGIN
          GLAcc.GET(GenPostingSetup."Sales Prepayments Account");
          VATPostingSetup.GET("VAT Bus. Posting Group",GLAcc."VAT Prod. Posting Group");
          VATPostingSetup.TESTFIELD("VAT Calculation Type","VAT Calculation Type");
        END ELSE
          CLEAR(VATPostingSetup);
        "Prepayment VAT %" := VATPostingSetup."VAT %";
        "Prepmt. VAT Calc. Type" := VATPostingSetup."VAT Calculation Type";
        "Prepayment VAT Identifier" := VATPostingSetup."VAT Identifier";
        IF "Prepmt. VAT Calc. Type" IN
           ["Prepmt. VAT Calc. Type"::"Reverse Charge VAT","Prepmt. VAT Calc. Type"::"Sales Tax"]
        THEN
          "Prepayment VAT %" := 0;
        "Prepayment Tax Group Code" := GLAcc."Tax Group Code";
      END;
    END;

    PROCEDURE UpdateAmounts@3();
    VAR
      RemLineAmountToInvoice@1000 : Decimal;
      VATBaseAmount@1003 : Decimal;
      LineAmountChanged@1002 : Boolean;
    BEGIN
      IF CurrFieldNo <> FIELDNO("Allow Invoice Disc.") THEN
        TESTFIELD(Type);
      GetSalesHeader;
      VATBaseAmount := "VAT Base Amount";
      "Recalculate Invoice Disc." := TRUE;

      //**4PS.so
      //IF "Line Amount" <> xRec."Line Amount" THEN BEGIN
      //  "VAT Difference" := 0;
      //  LineAmountChanged := TRUE;
      //END;
      //IF "Line Amount" <> ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") - "Line Discount Amount" THEN BEGIN
      //  "Line Amount" := ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") - "Line Discount Amount";
      //  "VAT Difference" := 0;
      //  LineAmountChanged := TRUE;
      //END;
      //**4PS.eo
      //**4PS.sn
      IF "Line Amount" <> ROUND(Quantity * "Unit Price"* RentalFactor, Currency."Amount Rounding Precision")
        - "Line Discount Amount" THEN BEGIN
        "Line Amount" := ROUND(Quantity * "Unit Price" * RentalFactor,Currency."Amount Rounding Precision") - "Line Discount Amount";
        "VAT Difference" := 0;
        LineAmountChanged := TRUE;
      END;
      //**4PS.en
      UpdateVATAmounts;
      //**4PS.sn
      UpdateAmountLCY;
      "Line VAT Amount" := "Amount Including VAT" - Amount;
      //**4PS.en
      IF NOT "Prepayment Line" THEN BEGIN
        IF "Prepayment %" <> 0 THEN BEGIN
          IF Quantity < 0 THEN
            FIELDERROR(Quantity,STRSUBSTNO(Text047,FIELDCAPTION("Prepayment %")));
          IF "Unit Price" < 0 THEN
            FIELDERROR("Unit Price",STRSUBSTNO(Text047,FIELDCAPTION("Prepayment %")));
        END;
        IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice THEN BEGIN
          "Prepayment VAT Difference" := 0;
          IF NOT PrePaymentLineAmountEntered THEN
            "Prepmt. Line Amount" := ROUND("Line Amount" * "Prepayment %" / 100,Currency."Amount Rounding Precision");
          IF "Prepmt. Line Amount" < "Prepmt. Amt. Inv." THEN
            FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text049,"Prepmt. Amt. Inv."));
          PrePaymentLineAmountEntered := FALSE;
          IF "Prepmt. Line Amount" <> 0 THEN BEGIN
            RemLineAmountToInvoice :=
              ROUND("Line Amount" * (Quantity - "Quantity Invoiced") / Quantity,Currency."Amount Rounding Precision");
            IF RemLineAmountToInvoice < ("Prepmt. Line Amount" - "Prepmt Amt Deducted") THEN
              FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text045,RemLineAmountToInvoice + "Prepmt Amt Deducted"));
          END;
        END ELSE
          IF (CurrFieldNo <> 0) AND ("Line Amount" <> xRec."Line Amount") AND
             ("Prepmt. Amt. Inv." <> 0) AND ("Prepayment %" = 100)
          THEN BEGIN
            IF "Line Amount" < xRec."Line Amount" THEN
              FIELDERROR("Line Amount",STRSUBSTNO(Text044,xRec."Line Amount"));
            FIELDERROR("Line Amount",STRSUBSTNO(Text045,xRec."Line Amount"));
          END;
      END;
      InitOutstandingAmount;
      IF (CurrFieldNo <> 0) AND
         NOT ((Type = Type::Item) AND (CurrFieldNo = FIELDNO("No.")) AND (Quantity <> 0) AND
              // a write transaction may have been started
              ("Qty. per Unit of Measure" <> xRec."Qty. per Unit of Measure")) AND // ...continued condition
         ("Document Type" <= "Document Type"::Invoice) AND
         (("Outstanding Amount" + "Shipped Not Invoiced") > 0)
      THEN
        CustCheckCreditLimit.SalesLineCheck(Rec);

      IF Type = Type::"Charge (Item)" THEN
        UpdateItemChargeAssgnt;

      CalcPrepaymentToDeduct;
      IF VATBaseAmount <> "VAT Base Amount" THEN
        LineAmountChanged := TRUE;

      IF LineAmountChanged THEN BEGIN
        UpdateDeferralAmounts;
        LineAmountChanged := FALSE;
      END;
    END;

    LOCAL PROCEDURE UpdateVATAmounts@38();
    VAR
      SalesLine2@1000 : Record 37;
      TotalLineAmount@1005 : Decimal;
      TotalInvDiscAmount@1004 : Decimal;
      TotalAmount@1001 : Decimal;
      TotalAmountInclVAT@1002 : Decimal;
      TotalQuantityBase@1003 : Decimal;
    BEGIN
      GetSalesHeader;

      IF UpdateVATAmountsSuspended THEN EXIT; //**4PS.n

      SalesLine2.SETRANGE("Document Type","Document Type");
      SalesLine2.SETRANGE("Document No.","Document No.");
      SalesLine2.SETFILTER("Line No.",'<>%1',"Line No.");
      IF "Line Amount" = 0 THEN
        IF xRec."Line Amount" >= 0 THEN
          SalesLine2.SETFILTER(Amount,'>%1',0)
        ELSE
          SalesLine2.SETFILTER(Amount,'<%1',0)
      ELSE
        IF "Line Amount" > 0 THEN
          SalesLine2.SETFILTER(Amount,'>%1',0)
        ELSE
          SalesLine2.SETFILTER(Amount,'<%1',0);
      SalesLine2.SETRANGE("VAT Identifier","VAT Identifier");
      SalesLine2.SETRANGE("Tax Group Code","Tax Group Code");

      IF "Line Amount" = "Inv. Discount Amount" THEN BEGIN
        Amount := 0;
        "VAT Base Amount" := 0;
        "Amount Including VAT" := 0;
      END ELSE BEGIN
        //**4PS.sn
        IF "Manually VAT Posting" THEN BEGIN
          IF SalesHeader."Prices Including VAT" THEN
            "Amount Including VAT" :=
              ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") -
              "Line Discount Amount" - "Inv. Discount Amount"
          ELSE BEGIN
            Amount :=
              ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") -
              "Line Discount Amount" - "Inv. Discount Amount";
           "VAT Base Amount" := Amount;
          END;
        END ELSE BEGIN
        //**4PS.en

        TotalLineAmount := 0;
        TotalInvDiscAmount := 0;
        TotalAmount := 0;
        TotalAmountInclVAT := 0;
        TotalQuantityBase := 0;
        IF ("VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax") OR
           (("VAT Calculation Type" IN
             ["VAT Calculation Type"::"Normal VAT","VAT Calculation Type"::"Reverse Charge VAT"]) AND ("VAT %" <> 0))
        THEN
          IF NOT SalesLine2.ISEMPTY THEN BEGIN
            SalesLine2.CALCSUMS("Line Amount","Inv. Discount Amount",Amount,"Amount Including VAT","Quantity (Base)");
            TotalLineAmount := SalesLine2."Line Amount";
            TotalInvDiscAmount := SalesLine2."Inv. Discount Amount";
            TotalAmount := SalesLine2.Amount;
            TotalAmountInclVAT := SalesLine2."Amount Including VAT";
            TotalQuantityBase := SalesLine2."Quantity (Base)";
          END;

        IF SalesHeader."Prices Including VAT" THEN
          CASE "VAT Calculation Type" OF
            "VAT Calculation Type"::"Normal VAT",
            "VAT Calculation Type"::"Reverse Charge VAT":
              BEGIN
                Amount :=
                  ROUND(
                    (TotalLineAmount - TotalInvDiscAmount + "Line Amount" - "Inv. Discount Amount") / (1 + "VAT %" / 100),
                    Currency."Amount Rounding Precision") -
                  TotalAmount;
                "VAT Base Amount" :=
                  ROUND(
                    Amount * (1 - SalesHeader."VAT Base Discount %" / 100),
                    Currency."Amount Rounding Precision");
                "Amount Including VAT" :=
                  TotalLineAmount + "Line Amount" -
                  ROUND(
                    (TotalAmount + Amount) * (SalesHeader."VAT Base Discount %" / 100) * "VAT %" / 100,
                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection) -
                  TotalAmountInclVAT - TotalInvDiscAmount - "Inv. Discount Amount";
              END;
            "VAT Calculation Type"::"Full VAT":
              BEGIN
                Amount := 0;
                "VAT Base Amount" := 0;
              END;
            "VAT Calculation Type"::"Sales Tax":
              BEGIN
                SalesHeader.TESTFIELD("VAT Base Discount %",0);
                Amount :=
                  SalesTaxCalculate.ReverseCalculateTax(
                    "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                    TotalAmountInclVAT + "Amount Including VAT",TotalQuantityBase + "Quantity (Base)",
                    SalesHeader."Currency Factor") -
                  TotalAmount;
                IF Amount <> 0 THEN
                  "VAT %" :=
                    ROUND(100 * ("Amount Including VAT" - Amount) / Amount,0.00001)
                ELSE
                  "VAT %" := 0;
                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                "VAT Base Amount" := Amount;
              END;
          END
        ELSE
          CASE "VAT Calculation Type" OF
            "VAT Calculation Type"::"Normal VAT",
            "VAT Calculation Type"::"Reverse Charge VAT":
              BEGIN
                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                "VAT Base Amount" :=
                  ROUND(Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                "Amount Including VAT" :=
                  TotalAmount + Amount +
                  ROUND(
                    (TotalAmount + Amount) * (1 - SalesHeader."VAT Base Discount %" / 100) * "VAT %" / 100,
                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection) -
                  TotalAmountInclVAT;
              END;
            "VAT Calculation Type"::"Full VAT":
              BEGIN
                Amount := 0;
                "VAT Base Amount" := 0;
                "Amount Including VAT" := "Line Amount" - "Inv. Discount Amount";
              END;
            "VAT Calculation Type"::"Sales Tax":
              BEGIN
                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                "VAT Base Amount" := Amount;
                "Amount Including VAT" :=
                  TotalAmount + Amount +
                  ROUND(
                    SalesTaxCalculate.CalculateTax(
                      "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                      TotalAmount + Amount,TotalQuantityBase + "Quantity (Base)",
                      SalesHeader."Currency Factor"),Currency."Amount Rounding Precision") -
                  TotalAmountInclVAT;
                IF "VAT Base Amount" <> 0 THEN
                  "VAT %" :=
                    ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                ELSE
                  "VAT %" := 0;
              END;
          END;
      END;
      END; // 4PS.n
    END;

    LOCAL PROCEDURE CheckItemAvailable@4(CalledByFieldNo@1000 : Integer);
    BEGIN
      IF Reserve = Reserve::Always THEN
        EXIT;

      IF "Shipment Date" = 0D THEN BEGIN
        GetSalesHeader;
        IF SalesHeader."Shipment Date" <> 0D THEN
          VALIDATE("Shipment Date",SalesHeader."Shipment Date")
        ELSE
          VALIDATE("Shipment Date",WORKDATE);
      END;

      IF ((CalledByFieldNo = CurrFieldNo) OR (CalledByFieldNo = FIELDNO("Shipment Date"))) AND GUIALLOWED AND
         ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
         (Type = Type::Item) AND ("No." <> '') AND
         ("Outstanding Quantity" > 0) AND
         ("Job Contract Entry No." = 0) AND
         NOT (Nonstock OR "Special Order")
      THEN BEGIN
      //**4PS.so
      //IF ItemCheckAvail.SalesLineCheck(Rec) THEN
      //  ItemCheckAvail.RaiseUpdateInterruptedError;
      //**4PS.eo
      //**4PS.sn
        SalesLine2 := Rec;
        GetSalesHeader;
        IF SalesHeader."Sales Document Type" = SalesHeader."Sales Document Type"::"Sales Logistics Separated" THEN BEGIN
          SalesLine2."Location Code" := SalesHeader."Location Code Logistics";
          ItemCheckAvail.SetCompany(GetCompanyLogistics);
        END ELSE
          ItemCheckAvail.SetCompany('');
        IF ItemCheckAvail.SalesLineCheck(SalesLine2) THEN
          ItemCheckAvail.RaiseUpdateInterruptedError;
      END;
      //**4PS.en
    END;

    PROCEDURE ShowReservation@10();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      TESTFIELD(Reserve);
      CLEAR(Reservation);
      Reservation.SetSalesLine(Rec);
      Reservation.RUNMODAL;
    END;

    PROCEDURE ShowReservationEntries@21(Modal@1000 : Boolean);
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,TRUE);
      ReserveSalesLine.FilterReservFor(ReservEntry,Rec);
      IF Modal THEN
        PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry)
      ELSE
        PAGE.RUN(PAGE::"Reservation Entries",ReservEntry);
    END;

    PROCEDURE AutoReserve@11();
    VAR
      QtyToReserve@1000 : Decimal;
      QtyToReserveBase@1001 : Decimal;
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");

      ReserveSalesLine.ReservQuantity(Rec,QtyToReserve,QtyToReserveBase);
      IF QtyToReserveBase <> 0 THEN BEGIN
        ReservMgt.SetSalesLine(Rec);
        TESTFIELD("Shipment Date");
        ReservMgt.AutoReserve(FullAutoReservation,'',"Shipment Date",QtyToReserve,QtyToReserveBase);
        FIND;
        IF NOT FullAutoReservation THEN BEGIN
          COMMIT;
          IF CONFIRM(Text011,TRUE) THEN BEGIN
            ShowReservation;
            FIND;
          END;
        END;
      END;
    END;

    PROCEDURE AutoAsmToOrder@82();
    BEGIN
      ATOLink.UpdateAsmFromSalesLine(Rec);
    END;

    LOCAL PROCEDURE GetDate@22() : Date;
    BEGIN
      IF SalesHeader."Posting Date" <> 0D THEN
        EXIT(SalesHeader."Posting Date");
      EXIT(WORKDATE);
    END;

    PROCEDURE CalcPlannedDeliveryDate@92(CurrFieldNo@1000 : Integer) : Date;
    BEGIN
      IF "Shipment Date" = 0D THEN
        EXIT("Planned Delivery Date");

      CASE CurrFieldNo OF
        FIELDNO("Shipment Date"):
          EXIT(CalendarMgmt.CalcDateBOC(
              FORMAT("Shipping Time"),
              "Planned Shipment Date",
              CalChange."Source Type"::"Shipping Agent",
              "Shipping Agent Code",
              "Shipping Agent Service Code",
              CalChange."Source Type"::Customer,
              "Sell-to Customer No.",
              '',
              TRUE));
        FIELDNO("Planned Delivery Date"):
          EXIT(CalendarMgmt.CalcDateBOC2(
              FORMAT("Shipping Time"),
              "Planned Delivery Date",
              CalChange."Source Type"::Customer,
              "Sell-to Customer No.",
              '',
              CalChange."Source Type"::"Shipping Agent",
              "Shipping Agent Code",
              "Shipping Agent Service Code",
              TRUE))
      END;
    END;

    PROCEDURE CalcPlannedShptDate@93(CurrFieldNo@1000 : Integer) : Date;
    BEGIN
      IF "Shipment Date" = 0D THEN
        EXIT("Planned Shipment Date");

      CASE CurrFieldNo OF
        FIELDNO("Shipment Date"):
          EXIT(CalendarMgmt.CalcDateBOC(
              FORMAT("Outbound Whse. Handling Time"),
              "Shipment Date",
              CalChange."Source Type"::Location,
              "Location Code",
              '',
              CalChange."Source Type"::"Shipping Agent",
              "Shipping Agent Code",
              "Shipping Agent Service Code",
              TRUE));
        FIELDNO("Planned Delivery Date"):
          EXIT(CalendarMgmt.CalcDateBOC(
              FORMAT(''),
              "Planned Delivery Date",
              CalChange."Source Type"::Customer,
              "Sell-to Customer No.",
              '',
              CalChange."Source Type"::"Shipping Agent",
              "Shipping Agent Code",
              "Shipping Agent Service Code",
              TRUE));
      END;
    END;

    PROCEDURE CalcShipmentDate@111() : Date;
    BEGIN
      IF "Planned Shipment Date" = 0D THEN
        EXIT("Shipment Date");

      IF FORMAT("Outbound Whse. Handling Time") <> '' THEN
        EXIT(
          CalendarMgmt.CalcDateBOC2(
            FORMAT("Outbound Whse. Handling Time"),
            "Planned Shipment Date",
            CalChange."Source Type"::Location,
            "Location Code",
            '',
            CalChange."Source Type"::"Shipping Agent",
            "Shipping Agent Code",
            "Shipping Agent Service Code",
            FALSE));

      EXIT(
        CalendarMgmt.CalcDateBOC(
          FORMAT(FORMAT('')),
          "Planned Shipment Date",
          CalChange."Source Type"::"Shipping Agent",
          "Shipping Agent Code",
          "Shipping Agent Service Code",
          CalChange."Source Type"::Location,
          "Location Code",
          '',
          FALSE));
    END;

    PROCEDURE SignedXX@20(Value@1000 : Decimal) : Decimal;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote,
        "Document Type"::Order,
        "Document Type"::Invoice,
        "Document Type"::"Blanket Order":
          EXIT(-Value);
        "Document Type"::"Return Order",
        "Document Type"::"Credit Memo":
          EXIT(Value);
      END;
    END;

    LOCAL PROCEDURE BlanketOrderLookup@23();
    BEGIN
      SalesLine2.RESET;
      SalesLine2.SETCURRENTKEY("Document Type",Type,"No.");
      SalesLine2.SETRANGE("Document Type","Document Type"::"Blanket Order");
      SalesLine2.SETRANGE(Type,Type);
      SalesLine2.SETRANGE("No.","No.");
      SalesLine2.SETRANGE("Bill-to Customer No.","Bill-to Customer No.");
      SalesLine2.SETRANGE("Sell-to Customer No.","Sell-to Customer No.");
      IF PAGE.RUNMODAL(PAGE::"Sales Lines",SalesLine2) = ACTION::LookupOK THEN BEGIN
        SalesLine2.TESTFIELD("Document Type","Document Type"::"Blanket Order");
        "Blanket Order No." := SalesLine2."Document No.";
        VALIDATE("Blanket Order Line No.",SalesLine2."Line No.");
      END;
    END;

    PROCEDURE ShowDimensions@25();
    BEGIN
      DimMgt.SetTableID(DATABASE::"Sales Line"); //**4PS.n
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Document Type","Document No.","Line No."));
      VerifyItemLineDim;
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      ATOLink.UpdateAsmDimFromSalesLine(Rec);
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      Job@1000 : Record 11072003;
    BEGIN
      //**4PS.sn DP00121
      //T003526
      IF "Cost Plus Line No." <> 0 THEN
        ERROR(Text11012008);
      //
      IF Type = Type::"G/L Account" THEN
        TESTFIELD("Item No.")
      ELSE BEGIN
      //**4PS.en
        TESTFIELD(Type,Type::Item);
        TESTFIELD("No.");
      END; //**4PS.n
      TESTFIELD("Quantity (Base)");
      IF "Job Contract Entry No." <> 0 THEN
        ERROR(Text048,TABLECAPTION,Job.TABLECAPTION);
      ReserveSalesLine.CallItemTracking(Rec);
    END;

    PROCEDURE CreateDim@26(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1100485001 : Integer;No4@1100485000 : Code[20];Type5@1100525001 : Integer;No5@1100525000 : Code[20];Type6@1100525003 : Integer;No6@1100525002 : Code[20];Type7@1100528600 : Integer;No7@1100528601 : Code[20]);
    VAR
      SourceCodeSetup@1006 : Record 242;
      TableID@1007 : ARRAY [10] OF Integer;
      No@1008 : ARRAY [10] OF Code[20];
      Dim1@1100409001 : Code[20];
      Dim2@1100409000 : Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;

      //**4PS.sn
      TableID[4] := Type4;
      No[4] := No4;
      TableID[5] := Type5;  //** 4PS.n 09-06-2010 sn
      No[5] := No5;
      TableID[6] := Type6;
      No[6] := No6;         //** 4PS.n 09-0609-06-2010 en
      TableID[7] := Type7;
      No[7] := No7;

      Dim1 := "Shortcut Dimension 1 Code";
      Dim2 := "Shortcut Dimension 2 Code";
      DimMgt.SetSkipDepartmentAuthorization("Plant Invoice");
      //**4PS.en

      //"Shortcut Dimension 1 Code" := ''; //**4PS.o Must be kept for Department Authorization
      "Shortcut Dimension 2 Code" := '';
      GetSalesHeader;
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,SourceCodeSetup.Sales,
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",
          SalesHeader."Dimension Set ID",DATABASE::Customer);
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      ATOLink.UpdateAsmDimFromSalesLine(Rec);

      //**4PS.sn
      DimMgt.SetSkipDepartmentAuthorization(FALSE);
      IF (Dim1 <> '') AND ("Shortcut Dimension 1 Code" = '') THEN BEGIN
        "Shortcut Dimension 1 Code" := Dim1;
        ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
      END;

      IF (Dim2 <> '') AND
         (("Shortcut Dimension 2 Code" = '') OR
          (CurrFieldNo = FIELDNO("Shortcut Dimension 2 Code")))
      THEN BEGIN
        "Shortcut Dimension 2 Code" := Dim2;
        ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
      END;
      IF ("Shortcut Dimension 2 Code" <> Dim2) AND ("Shortcut Dimension 2 Code" <> '') THEN
        VALIDATE("Shortcut Dimension 2 Code");
      //**4PS.en
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      //**4PS.sn
      IF (FieldNumber = 1) AND (NOT "Plant Invoice") THEN
        DimMgt.CheckDepartmentAuthorization(DATABASE::"Sales Line", ShortcutDimCode);
      //**4PS.en
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE LookupShortcutDimCode@28(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      ValidateShortcutDimCode(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShowShortcutDimCode@27(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    PROCEDURE ShowItemSub@30();
    BEGIN
      CLEAR(SalesHeader);
      TestStatusOpen;
      ItemSubstitutionMgt.ItemSubstGet(Rec);
      IF TransferExtendedText.SalesCheckIfAnyExtText(Rec,TRUE) THEN
        TransferExtendedText.InsertSalesExtText(Rec);
    END;

    PROCEDURE ShowNonstock@32();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.",'');
      IF PAGE.RUNMODAL(PAGE::"Nonstock Item List",NonstockItem) = ACTION::LookupOK THEN BEGIN
        NonstockItem.TESTFIELD("Item Category Code");
        ItemCategory.GET(NonstockItem."Item Category Code");
        ItemCategory.TESTFIELD("Def. Gen. Prod. Posting Group");
        ItemCategory.TESTFIELD("Def. Inventory Posting Group");

        "No." := NonstockItem."Entry No.";
        NonstockItemMgt.NonStockSales(Rec);
        VALIDATE("No.","No.");
        VALIDATE("Unit Price",NonstockItem."Unit Price");
      END;
    END;

    LOCAL PROCEDURE GetSalesSetup@100();
    BEGIN
      IF NOT SalesSetupRead THEN
        SalesSetup.GET;
      SalesSetupRead := TRUE;
    END;

    LOCAL PROCEDURE GetFAPostingGroup@6();
    VAR
      LocalGLAcc@1000 : Record 15;
      FASetup@1001 : Record 5603;
      FAPostingGr@1002 : Record 5606;
      FADeprBook@1003 : Record 5612;
    BEGIN
      IF (Type <> Type::"Fixed Asset") OR ("No." = '') THEN
        EXIT;
      //**4PS.sn
      IF "Depreciation Book Code" = '' THEN
        "Depreciation Book Code" := FA.GetFA_MainDeprBook("No.",TRUE);
      //**4PS.en
      IF "Depreciation Book Code" = '' THEN BEGIN
        FASetup.GET;
        "Depreciation Book Code" := FASetup."Default Depr. Book";
        IF NOT FADeprBook.GET("No.","Depreciation Book Code") THEN
          "Depreciation Book Code" := '';
        IF "Depreciation Book Code" = '' THEN
          EXIT;
      END;
      FADeprBook.GET("No.","Depreciation Book Code");
      FADeprBook.TESTFIELD("FA Posting Group");
      FAPostingGr.GET(FADeprBook."FA Posting Group");
      FAPostingGr.TESTFIELD("Acq. Cost Acc. on Disposal");
      LocalGLAcc.GET(FAPostingGr."Acq. Cost Acc. on Disposal");
      LocalGLAcc.CheckGLAcc;
      LocalGLAcc.TESTFIELD("Gen. Prod. Posting Group");
      "Posting Group" := FADeprBook."FA Posting Group";
      "Gen. Prod. Posting Group" := LocalGLAcc."Gen. Prod. Posting Group";
      "Tax Group Code" := LocalGLAcc."Tax Group Code";
      VALIDATE("VAT Prod. Posting Group",LocalGLAcc."VAT Prod. Posting Group");
    END;

    LOCAL PROCEDURE GetFieldCaption@31(FieldNumber@1000 : Integer) : Text[100];
    VAR
      Field@1001 : Record 2000000041;
    BEGIN
      Field.GET(DATABASE::"Sales Line",FieldNumber);
      EXIT(Field."Field Caption");
    END;

    LOCAL PROCEDURE GetCaptionClass@34(FieldNumber@1000 : Integer) : Text[80];
    VAR
      SalesHeader2@1102601000 : Record 36;
    BEGIN
      IF SalesHeader2.GET("Document Type","Document No.") THEN;
      IF SalesHeader2."Prices Including VAT" THEN
        EXIT('2,1,' + GetFieldCaption(FieldNumber))
      ELSE
        EXIT('2,0,' + GetFieldCaption(FieldNumber));
    END;

    LOCAL PROCEDURE GetSKU@5806() : Boolean;
    BEGIN
      IF (SKU."Location Code" = "Location Code") AND
         (SKU."Item No." = "No.") AND
         (SKU."Variant Code" = "Variant Code")
      THEN
        EXIT(TRUE);
      IF SKU.GET("Location Code","No.","Variant Code") THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE GetUnitCost@5808();
    BEGIN
      //TESTFIELD(Type,Type::Item);  //**4PS.n
      //TESTFIELD("No.");            //**4PS.n
      GetItem;
      "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
      IF GetSKU THEN
        VALIDATE("Unit Cost (LCY)",SKU."Unit Cost" * "Qty. per Unit of Measure")
      ELSE
        VALIDATE("Unit Cost (LCY)",Item."Unit Cost" * "Qty. per Unit of Measure");
    END;

    LOCAL PROCEDURE CalcUnitCost@5809(ItemLedgEntry@1000 : Record 32) : Decimal;
    VAR
      ValueEntry@1001 : Record 5802;
      UnitCost@1004 : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item Ledger Entry No.");
        SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
        IF IsServiceItem THEN BEGIN
          CALCSUMS("Cost Amount (Non-Invtbl.)");
          UnitCost := "Cost Amount (Non-Invtbl.)" / ItemLedgEntry.Quantity;
        END ELSE BEGIN
          CALCSUMS("Cost Amount (Actual)","Cost Amount (Expected)");
          UnitCost :=
            ("Cost Amount (Expected)" + "Cost Amount (Actual)") / ItemLedgEntry.Quantity;
        END;
      END;

      EXIT(ABS(UnitCost * "Qty. per Unit of Measure"));
    END;

    PROCEDURE ShowItemChargeAssgnt@5801();
    VAR
      ItemChargeAssgnts@1000 : Page 5814;
      AssignItemChargeSales@1001 : Codeunit 5807;
      ItemChargeAssgntLineAmt@1002 : Decimal;
    BEGIN
      GET("Document Type","Document No.","Line No.");
      TESTFIELD(Type,Type::"Charge (Item)");
      TESTFIELD("No.");
      TESTFIELD(Quantity);

      GetSalesHeader;
      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(SalesHeader."Currency Code");
      IF ("Inv. Discount Amount" = 0) AND
         ("Line Discount Amount" = 0) AND
         (NOT SalesHeader."Prices Including VAT")
      THEN
        ItemChargeAssgntLineAmt := "Line Amount"
      ELSE
        IF SalesHeader."Prices Including VAT" THEN
          ItemChargeAssgntLineAmt :=
            ROUND(("Line Amount" - "Inv. Discount Amount") / (1 + "VAT %" / 100),
              Currency."Amount Rounding Precision")
        ELSE
          ItemChargeAssgntLineAmt := "Line Amount" - "Inv. Discount Amount";
      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
      ItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
      ItemChargeAssgntSales.SETRANGE("Item Charge No.","No.");
      IF NOT ItemChargeAssgntSales.FINDLAST THEN BEGIN
        ItemChargeAssgntSales."Document Type" := "Document Type";
        ItemChargeAssgntSales."Document No." := "Document No.";
        ItemChargeAssgntSales."Document Line No." := "Line No.";
        ItemChargeAssgntSales."Item Charge No." := "No.";
        ItemChargeAssgntSales."Unit Cost" :=
          ROUND(ItemChargeAssgntLineAmt / Quantity,
            Currency."Unit-Amount Rounding Precision");
      END;

      ItemChargeAssgntLineAmt :=
        ROUND(
          ItemChargeAssgntLineAmt * ("Qty. to Invoice" / Quantity),
          Currency."Amount Rounding Precision");

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        AssignItemChargeSales.CreateDocChargeAssgn(ItemChargeAssgntSales,"Return Receipt No.")
      ELSE
        AssignItemChargeSales.CreateDocChargeAssgn(ItemChargeAssgntSales,"Shipment No.");
      CLEAR(AssignItemChargeSales);
      COMMIT;

      ItemChargeAssgnts.Initialize(Rec,ItemChargeAssgntLineAmt);
      ItemChargeAssgnts.RUNMODAL;
      CALCFIELDS("Qty. to Assign");
    END;

    PROCEDURE UpdateItemChargeAssgnt@5807();
    VAR
      ShareOfVAT@1000 : Decimal;
      TotalQtyToAssign@1001 : Decimal;
      TotalAmtToAssign@1002 : Decimal;
    BEGIN
      CALCFIELDS("Qty. Assigned","Qty. to Assign");
      IF ABS("Quantity Invoiced") > ABS(("Qty. Assigned" + "Qty. to Assign")) THEN
        ERROR(Text055,FIELDCAPTION("Quantity Invoiced"),FIELDCAPTION("Qty. Assigned"),FIELDCAPTION("Qty. to Assign"));

      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
      ItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
      ItemChargeAssgntSales.CALCSUMS("Qty. to Assign");
      TotalQtyToAssign := ItemChargeAssgntSales."Qty. to Assign";
      IF (CurrFieldNo <> 0) AND (Amount <> xRec.Amount) THEN BEGIN
        ItemChargeAssgntSales.SETFILTER("Qty. Assigned",'<>0');
        IF NOT ItemChargeAssgntSales.ISEMPTY THEN
          ERROR(Text026,
            FIELDCAPTION(Amount));
        ItemChargeAssgntSales.SETRANGE("Qty. Assigned");
      END;

      IF ItemChargeAssgntSales.FINDSET THEN BEGIN
        GetSalesHeader;
        IF SalesHeader."Prices Including VAT" THEN
          TotalAmtToAssign :=
            ROUND(("Line Amount" - "Inv. Discount Amount") / (1 + "VAT %" / 100) - "VAT Difference",
              Currency."Amount Rounding Precision")
        ELSE
          TotalAmtToAssign := "Line Amount" - "Inv. Discount Amount";
        REPEAT
          ShareOfVAT := 1;
          IF SalesHeader."Prices Including VAT" THEN
            ShareOfVAT := 1 + "VAT %" / 100;
          IF Quantity <> 0 THEN
            IF ItemChargeAssgntSales."Unit Cost" <> ROUND(
                 ("Line Amount" - "Inv. Discount Amount") / Quantity / ShareOfVAT,
                 Currency."Unit-Amount Rounding Precision")
            THEN
              ItemChargeAssgntSales."Unit Cost" :=
                ROUND(("Line Amount" - "Inv. Discount Amount") / Quantity / ShareOfVAT,
                  Currency."Unit-Amount Rounding Precision");
          IF TotalQtyToAssign <> 0 THEN BEGIN
            ItemChargeAssgntSales."Amount to Assign" :=
              ROUND(ItemChargeAssgntSales."Qty. to Assign" / TotalQtyToAssign * TotalAmtToAssign,
                Currency."Amount Rounding Precision");
            TotalQtyToAssign -= ItemChargeAssgntSales."Qty. to Assign";
            TotalAmtToAssign -= ItemChargeAssgntSales."Amount to Assign";
          END;
          ItemChargeAssgntSales.MODIFY;
        UNTIL ItemChargeAssgntSales.NEXT = 0;
        CALCFIELDS("Qty. to Assign");
      END;
    END;

    LOCAL PROCEDURE DeleteItemChargeAssgnt@5802(DocType@1000 : Option;DocNo@1001 : Code[20];DocLineNo@1002 : Integer);
    BEGIN
      ItemChargeAssgntSales.SETCURRENTKEY(
        "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type",DocType);
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.",DocNo);
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.",DocLineNo);
      IF NOT ItemChargeAssgntSales.ISEMPTY THEN
        ItemChargeAssgntSales.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE DeleteChargeChargeAssgnt@5804(DocType@1000 : Option;DocNo@1001 : Code[20];DocLineNo@1002 : Integer);
    BEGIN
      IF DocType <> "Document Type"::"Blanket Order" THEN
        IF "Quantity Invoiced" <> 0 THEN BEGIN
          CALCFIELDS("Qty. Assigned");
          TESTFIELD("Qty. Assigned","Quantity Invoiced");
        END;
      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETRANGE("Document Type",DocType);
      ItemChargeAssgntSales.SETRANGE("Document No.",DocNo);
      ItemChargeAssgntSales.SETRANGE("Document Line No.",DocLineNo);
      IF NOT ItemChargeAssgntSales.ISEMPTY THEN
        ItemChargeAssgntSales.DELETEALL;
    END;

    LOCAL PROCEDURE CheckItemChargeAssgnt@5800();
    VAR
      ItemChargeAssgntSales@1000 : Record 5809;
    BEGIN
      ItemChargeAssgntSales.SETCURRENTKEY(
        "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.","Document No.");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.","Line No.");
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
      IF ItemChargeAssgntSales.FINDSET THEN BEGIN
        TESTFIELD("Allow Item Charge Assignment");
        REPEAT
          ItemChargeAssgntSales.TESTFIELD("Qty. to Assign",0);
        UNTIL ItemChargeAssgntSales.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE TestStatusOpen@33();
    BEGIN
      IF StatusCheckSuspended THEN
        EXIT;
      GetSalesHeader;
      IF NOT "System-Created Entry" THEN
        IF Type <> Type::" " THEN
          SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
    END;

    PROCEDURE SuspendStatusCheck@39(Suspend@1000 : Boolean);
    BEGIN
      StatusCheckSuspended := Suspend;
    END;

    PROCEDURE UpdateVATOnLines@36(QtyType@1000 : 'General,Invoicing,Shipping';VAR SalesHeader@1001 : Record 36;VAR SalesLine@1002 : Record 37;VAR VATAmountLine@1003 : Record 290);
    VAR
      TempVATAmountLineRemainder@1004 : TEMPORARY Record 290;
      Currency@1005 : Record 4;
      NewAmount@1006 : Decimal;
      NewAmountIncludingVAT@1007 : Decimal;
      NewVATBaseAmount@1008 : Decimal;
      VATAmount@1009 : Decimal;
      VATDifference@1010 : Decimal;
      InvDiscAmount@1011 : Decimal;
      LineAmountToInvoice@1012 : Decimal;
      LineAmountToInvoiceDiscounted@1013 : Decimal;
      DeferralAmount@1014 : Decimal;
    BEGIN
      IF QtyType = QtyType::Shipping THEN
        EXIT;
      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(SalesHeader."Currency Code");

      TempVATAmountLineRemainder.DELETEALL;

      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        LOCKTABLE;
        IF FINDSET THEN
          REPEAT
            //**4PS.so
            //IF NOT ZeroAmountLine(QtyType,) THEN BEGIN
            //  DeferralAmount := GetDeferralAmount;
            //  VATAmountLine.GET("VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,"Line Amount" >= 0);
            //**4PS.eo
            //**4PS.sn
            IF NOT ZeroAmountLine(QtyType, SalesHeader, SalesLine) THEN BEGIN //Standard bugfix
              DeferralAmount := GetDeferralAmount;
              VATAmountLine.GET("VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,FALSE);
            //**4PS.en
              IF VATAmountLine.Modified THEN BEGIN
                IF NOT TempVATAmountLineRemainder.GET(
                //     "VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,"Line Amount" >= 0) //**4PS.o
                     "VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,FALSE) //**4PS.n
                THEN BEGIN
                  TempVATAmountLineRemainder := VATAmountLine;
                  TempVATAmountLineRemainder.INIT;
                  TempVATAmountLineRemainder.INSERT;
                END;
                IF QtyType = QtyType::General THEN
                  LineAmountToInvoice := "Line Amount"
                ELSE
                  LineAmountToInvoice :=
                    ROUND("Line Amount" * "Qty. to Invoice" / Quantity,Currency."Amount Rounding Precision");

                IF "Allow Invoice Disc." THEN BEGIN
                  IF (VATAmountLine."Inv. Disc. Base Amount" = 0) OR (LineAmountToInvoice = 0) THEN
                    InvDiscAmount := 0
                  ELSE BEGIN
                    LineAmountToInvoiceDiscounted :=
                      VATAmountLine."Invoice Discount Amount" * LineAmountToInvoice /
                      VATAmountLine."Inv. Disc. Base Amount";
                    TempVATAmountLineRemainder."Invoice Discount Amount" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount" + LineAmountToInvoiceDiscounted;
                    InvDiscAmount :=
                      ROUND(
                        TempVATAmountLineRemainder."Invoice Discount Amount",Currency."Amount Rounding Precision");
                    TempVATAmountLineRemainder."Invoice Discount Amount" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount" - InvDiscAmount;
                  END;
                  IF QtyType = QtyType::General THEN BEGIN
                    "Inv. Discount Amount" := InvDiscAmount;
                    CalcInvDiscToInvoice;
                  END ELSE
                    "Inv. Disc. Amount to Invoice" := InvDiscAmount;
                END ELSE
                  InvDiscAmount := 0;

                IF QtyType = QtyType::General THEN
                  IF SalesHeader."Prices Including VAT" THEN BEGIN
                    IF (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount" = 0) OR
                       ("Line Amount" = 0)
                    THEN BEGIN
                      VATAmount := 0;
                      NewAmountIncludingVAT := 0;
                    END ELSE BEGIN
                      VATAmount :=
                        TempVATAmountLineRemainder."VAT Amount" +
                        VATAmountLine."VAT Amount" *
                        ("Line Amount" - "Inv. Discount Amount") /
                        (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                      NewAmountIncludingVAT :=
                        TempVATAmountLineRemainder."Amount Including VAT" +
                        VATAmountLine."Amount Including VAT" *
                        ("Line Amount" - "Inv. Discount Amount") /
                        (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                    END;
                    NewAmount :=
                      ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision") -
                      ROUND(VATAmount,Currency."Amount Rounding Precision");
                    NewVATBaseAmount :=
                      ROUND(
                        NewAmount * (1 - SalesHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision");
                  END ELSE BEGIN
                    IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN BEGIN
                      VATAmount := "Line Amount" - "Inv. Discount Amount";
                      NewAmount := 0;
                      NewVATBaseAmount := 0;
                    END ELSE BEGIN
                      NewAmount := "Line Amount" - "Inv. Discount Amount";
                      NewVATBaseAmount :=
                        ROUND(
                          NewAmount * (1 - SalesHeader."VAT Base Discount %" / 100),
                          Currency."Amount Rounding Precision");
                      //**4PS.sn
                      IF "Manually VAT Posting" THEN
                        VATAmount := "Amount Including VAT" - "VAT Base Amount"
                      ELSE
                      //**4PS.en
                        IF VATAmountLine."VAT Base" = 0 THEN
                          VATAmount := 0
                        ELSE
                          VATAmount :=
                            TempVATAmountLineRemainder."VAT Amount" +
                            VATAmountLine."VAT Amount" * NewAmount / VATAmountLine."VAT Base";
                    END;
                    NewAmountIncludingVAT := NewAmount + ROUND(VATAmount,Currency."Amount Rounding Precision");
                  END
                ELSE BEGIN
                  IF (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount") = 0 THEN
                    VATDifference := 0
                  ELSE
                    VATDifference :=
                      TempVATAmountLineRemainder."VAT Difference" +
                      VATAmountLine."VAT Difference" * (LineAmountToInvoice - InvDiscAmount) /
                      (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                  IF LineAmountToInvoice = 0 THEN
                    "VAT Difference" := 0
                  ELSE
                    "VAT Difference" := ROUND(VATDifference,Currency."Amount Rounding Precision");
                END;
                IF QtyType = QtyType::General THEN BEGIN
                  Amount := NewAmount;
                  "Amount Including VAT" := ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                  "VAT Base Amount" := NewVATBaseAmount;
                END;
                InitOutstanding;
                IF Type = Type::"Charge (Item)" THEN
                  UpdateItemChargeAssgnt;
                MODIFY;
                IF ("Deferral Code" <> '') AND (DeferralAmount <> GetDeferralAmount) THEN
                  UpdateDeferralAmounts;

                TempVATAmountLineRemainder."Amount Including VAT" :=
                  NewAmountIncludingVAT - ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                TempVATAmountLineRemainder."VAT Amount" := VATAmount - NewAmountIncludingVAT + NewAmount;
                TempVATAmountLineRemainder."VAT Difference" := VATDifference - "VAT Difference";
                TempVATAmountLineRemainder.MODIFY;
              END;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CalcVATAmountLines@35(QtyType@1000 : 'General,Invoicing,Shipping';VAR SalesHeader@1001 : Record 36;VAR SalesLine@1002 : Record 37;VAR VATAmountLine@1003 : Record 290);
    VAR
      PrevVatAmountLine@1007 : Record 290;
      Currency@1004 : Record 4;
      SalesTaxCalculate@1005 : Codeunit 398;
      TotalVATAmount@1011 : Decimal;
      QtyToHandle@1006 : Decimal;
      RoundingLineInserted@1010 : Boolean;
    BEGIN
      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(SalesHeader."Currency Code");

      VATAmountLine.DELETEALL;

      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        IF FINDSET THEN
          REPEAT
            //IF NOT ZeroAmountLine(QtyType,) THEN BEGIN //**4PS.o
            IF NOT ZeroAmountLine(QtyType, SalesHeader, SalesLine) THEN BEGIN //**4PS.n Standard bugfix
              IF (Type = Type::"G/L Account") AND NOT "Prepayment Line" THEN
                RoundingLineInserted := ("No." = GetCPGInvRoundAcc(SalesHeader)) OR RoundingLineInserted;
              IF "VAT Calculation Type" IN
                 ["VAT Calculation Type"::"Reverse Charge VAT","VAT Calculation Type"::"Sales Tax"]
              THEN
                "VAT %" := 0;
              IF NOT VATAmountLine.GET(
                   //"VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,"Line Amount" >= 0) //**4PS.o
                   "VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,FALSE) //**4PS.n
              THEN BEGIN
                VATAmountLine.INIT;
                VATAmountLine."VAT Identifier" := "VAT Identifier";
                VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
                VATAmountLine."Tax Group Code" := "Tax Group Code";
                VATAmountLine."VAT %" := "VAT %";
                VATAmountLine.Modified := TRUE;
                //VATAmountLine.Positive := "Line Amount" >= 0; //**4PS.o
                VATAmountLine.INSERT;
              END;
              CASE QtyType OF
                QtyType::General:
                  BEGIN
                    VATAmountLine.Quantity := VATAmountLine.Quantity + "Quantity (Base)";
                    VATAmountLine."Line Amount" := VATAmountLine."Line Amount" + "Line Amount";
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" + "Line Amount";
                    VATAmountLine."Invoice Discount Amount" :=
                      VATAmountLine."Invoice Discount Amount" + "Inv. Discount Amount";
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                  END;
                QtyType::Invoicing:
                  BEGIN
                    CASE TRUE OF
                      ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
                      (NOT SalesHeader.Ship) AND SalesHeader.Invoice AND (NOT "Prepayment Line"):
                        BEGIN
                          IF "Shipment No." = '' THEN BEGIN
                            QtyToHandle := GetAbsMin("Qty. to Invoice","Qty. Shipped Not Invoiced");
                            VATAmountLine.Quantity :=
                              VATAmountLine.Quantity + GetAbsMin("Qty. to Invoice (Base)","Qty. Shipped Not Invd. (Base)");
                          END ELSE BEGIN
                            QtyToHandle := "Qty. to Invoice";
                            VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                          END;
                        END;
                      ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                      (SalesHeader."Sales Document Type"<>SalesHeader."Sales Document Type"::"Sales Logistics Separated") AND //**4PS.n
                      (NOT SalesHeader.Receive) AND SalesHeader.Invoice:
                        BEGIN
                          IF "Return Receipt No." = '' THEN BEGIN
                            QtyToHandle := GetAbsMin("Qty. to Invoice","Return Qty. Rcd. Not Invd.");
                            VATAmountLine.Quantity :=
                              VATAmountLine.Quantity + GetAbsMin("Qty. to Invoice (Base)","Ret. Qty. Rcd. Not Invd.(Base)");
                          END ELSE BEGIN
                            QtyToHandle := "Qty. to Invoice";
                            VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                          END;
                        END;
                      ELSE
                        BEGIN
                        QtyToHandle := "Qty. to Invoice";
                        VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                      END;
                    END;
                    VATAmountLine."Line Amount" :=
                      VATAmountLine."Line Amount" + GetLineAmountToHandle(QtyToHandle);
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" + GetLineAmountToHandle(QtyToHandle);
                    IF SalesHeader."Invoice Discount Calculation" <> SalesHeader."Invoice Discount Calculation"::Amount THEN
                      VATAmountLine."Invoice Discount Amount" :=
                        VATAmountLine."Invoice Discount Amount" +
                        ROUND("Inv. Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision")
                    ELSE
                      VATAmountLine."Invoice Discount Amount" :=
                        VATAmountLine."Invoice Discount Amount" + "Inv. Disc. Amount to Invoice";
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                  END;
                QtyType::Shipping:
                  BEGIN
                    IF "Document Type" IN
                       ["Document Type"::"Return Order","Document Type"::"Credit Memo"]
                    THEN BEGIN
                      QtyToHandle := "Return Qty. to Receive";
                      VATAmountLine.Quantity := VATAmountLine.Quantity + "Return Qty. to Receive (Base)";
                    END ELSE BEGIN
                      QtyToHandle := "Qty. to Ship";
                      VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Ship (Base)";
                    END;
                    VATAmountLine."Line Amount" :=
                      VATAmountLine."Line Amount" + GetLineAmountToHandle(QtyToHandle);
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" + GetLineAmountToHandle(QtyToHandle);
                    VATAmountLine."Invoice Discount Amount" :=
                      VATAmountLine."Invoice Discount Amount" +
                      ROUND("Inv. Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision");
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                  END;
              END;
              TotalVATAmount := TotalVATAmount + "Amount Including VAT" - Amount;
            END;
          UNTIL NEXT = 0;
      END;

      WITH VATAmountLine DO
        IF FINDSET THEN
          REPEAT
            IF (PrevVatAmountLine."VAT Identifier" <> "VAT Identifier") OR
               (PrevVatAmountLine."VAT Calculation Type" <> "VAT Calculation Type") OR
               (PrevVatAmountLine."Tax Group Code" <> "Tax Group Code") OR
               (PrevVatAmountLine."Use Tax" <> "Use Tax")
            THEN
              PrevVatAmountLine.INIT;
            IF SalesHeader."Prices Including VAT" THEN BEGIN
              CASE "VAT Calculation Type" OF
                "VAT Calculation Type"::"Normal VAT",
                "VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    "VAT Base" :=
                      ROUND(
                        ("Line Amount" - "Invoice Discount Amount") / (1 + "VAT %" / 100),
                        Currency."Amount Rounding Precision") - "VAT Difference";
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND(
                        PrevVatAmountLine."VAT Amount" +
                        ("Line Amount" - "Invoice Discount Amount" - "VAT Base" - "VAT Difference") *
                        (1 - SalesHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT" := "VAT Base" + "VAT Amount";
                    IF Positive THEN
                      PrevVatAmountLine.INIT
                    ELSE BEGIN
                      PrevVatAmountLine := VATAmountLine;
                      PrevVatAmountLine."VAT Amount" :=
                        ("Line Amount" - "Invoice Discount Amount" - "VAT Base" - "VAT Difference") *
                        (1 - SalesHeader."VAT Base Discount %" / 100);
                      PrevVatAmountLine."VAT Amount" :=
                        PrevVatAmountLine."VAT Amount" -
                        ROUND(PrevVatAmountLine."VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    END;
                  END;
                "VAT Calculation Type"::"Full VAT":
                  BEGIN
                    "VAT Base" := 0;
                    "VAT Amount" := "VAT Difference" + "Line Amount" - "Invoice Discount Amount";
                    "Amount Including VAT" := "VAT Amount";
                  END;
                "VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    "Amount Including VAT" := "Line Amount" - "Invoice Discount Amount";
                    "VAT Base" :=
                      ROUND(
                        SalesTaxCalculate.ReverseCalculateTax(
                          SalesHeader."Tax Area Code","Tax Group Code",SalesHeader."Tax Liable",
                          SalesHeader."Posting Date","Amount Including VAT",Quantity,SalesHeader."Currency Factor"),
                        Currency."Amount Rounding Precision");
                    "VAT Amount" := "VAT Difference" + "Amount Including VAT" - "VAT Base";
                    IF "VAT Base" = 0 THEN
                      "VAT %" := 0
                    ELSE
                      "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base",0.00001);
                  END;
              END;
            END ELSE
              CASE "VAT Calculation Type" OF
                "VAT Calculation Type"::"Normal VAT",
                "VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    "VAT Base" := "Line Amount" - "Invoice Discount Amount";
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND(
                        PrevVatAmountLine."VAT Amount" +
                        "VAT Base" * "VAT %" / 100 * (1 - SalesHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT" := "Line Amount" - "Invoice Discount Amount" + "VAT Amount";
                    IF Positive THEN
                      PrevVatAmountLine.INIT
                    ELSE
                      IF NOT "Includes Prepayment" THEN BEGIN
                        PrevVatAmountLine := VATAmountLine;
                        PrevVatAmountLine."VAT Amount" :=
                          "VAT Base" * "VAT %" / 100 * (1 - SalesHeader."VAT Base Discount %" / 100);
                        PrevVatAmountLine."VAT Amount" :=
                          PrevVatAmountLine."VAT Amount" -
                          ROUND(PrevVatAmountLine."VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                      END;
                  END;
                "VAT Calculation Type"::"Full VAT":
                  BEGIN
                    "VAT Base" := 0;
                    "VAT Amount" := "VAT Difference" + "Line Amount" - "Invoice Discount Amount";
                    "Amount Including VAT" := "VAT Amount";
                  END;
                "VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    "VAT Base" := "Line Amount" - "Invoice Discount Amount";
                    "VAT Amount" :=
                      SalesTaxCalculate.CalculateTax(
                        SalesHeader."Tax Area Code","Tax Group Code",SalesHeader."Tax Liable",
                        SalesHeader."Posting Date","VAT Base",Quantity,SalesHeader."Currency Factor");
                    IF "VAT Base" = 0 THEN
                      "VAT %" := 0
                    ELSE
                      "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base",0.00001);
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND("VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT" := "VAT Base" + "VAT Amount";
                  END;
              END;

            IF RoundingLineInserted THEN
              TotalVATAmount := TotalVATAmount - "VAT Amount";
            "Calculated VAT Amount" := "VAT Amount" - "VAT Difference";
            MODIFY;
          UNTIL NEXT = 0;

      IF RoundingLineInserted AND (TotalVATAmount <> 0) THEN
        IF VATAmountLine.GET(SalesLine."VAT Identifier",SalesLine."VAT Calculation Type",
             SalesLine."Tax Group Code",FALSE,SalesLine."Line Amount" >= 0)
        THEN BEGIN
          VATAmountLine."VAT Amount" := VATAmountLine."VAT Amount" + TotalVATAmount;
          VATAmountLine."Amount Including VAT" := VATAmountLine."Amount Including VAT" + TotalVATAmount;
          VATAmountLine."Calculated VAT Amount" := VATAmountLine."Calculated VAT Amount" + TotalVATAmount;
          VATAmountLine.MODIFY;
        END;
    END;

    PROCEDURE GetCPGInvRoundAcc@71(VAR SalesHeader@1000 : Record 36) : Code[20];
    VAR
      Cust@1002 : Record 18;
      CustTemplate@1003 : Record 5105;
      CustPostingGroup@1004 : Record 92;
    BEGIN
      GetSalesSetup;
      IF SalesSetup."Invoice Rounding" THEN
        IF Cust.GET(SalesHeader."Bill-to Customer No.") THEN
          CustPostingGroup.GET(Cust."Customer Posting Group")
        ELSE
          IF CustTemplate.GET(SalesHeader."Sell-to Customer Template Code") THEN
            CustPostingGroup.GET(CustTemplate."Customer Posting Group");

      EXIT(CustPostingGroup."Invoice Rounding Account");
    END;

    LOCAL PROCEDURE CalcInvDiscToInvoice@37();
    VAR
      OldInvDiscAmtToInv@1000 : Decimal;
    BEGIN
      GetSalesHeader;
      OldInvDiscAmtToInv := "Inv. Disc. Amount to Invoice";
      IF Quantity = 0 THEN
        VALIDATE("Inv. Disc. Amount to Invoice",0)
      ELSE
        VALIDATE(
          "Inv. Disc. Amount to Invoice",
          ROUND(
            "Inv. Discount Amount" * "Qty. to Invoice" / Quantity,
            Currency."Amount Rounding Precision"));

      IF OldInvDiscAmtToInv <> "Inv. Disc. Amount to Invoice" THEN BEGIN
        "Amount Including VAT" := "Amount Including VAT" - "VAT Difference";
        "VAT Difference" := 0;
      END;
    END;

    PROCEDURE UpdateWithWarehouseShip@41();
    BEGIN
      IF Type = Type::Item THEN
        CASE TRUE OF
          ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND (Quantity >= 0):
      //    IF Location.RequireShipment("Location Code") THEN //**4PS.o
            //**4PS.sn
            IF (Location.RequireShipment("Location Code")) OR
               (("Document Type" = "Document Type"::Order) AND NOT DirectDelivery)
            THEN
            //**4PS.en
              VALIDATE("Qty. to Ship",0)
            ELSE
              VALIDATE("Qty. to Ship","Outstanding Quantity");
          ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND (Quantity < 0):
      //    IF Location.RequireReceive("Location Code") THEN //**4PS.o
            //**4PS.sn
            IF (Location.RequireReceive("Location Code")) OR
               (("Document Type" = "Document Type"::Order) AND NOT DirectDelivery)
            THEN
            //**4PS.en
              VALIDATE("Qty. to Ship",0)
            ELSE
              VALIDATE("Qty. to Ship","Outstanding Quantity");
          ("Document Type" = "Document Type"::"Return Order") AND (Quantity >= 0):
            IF Location.RequireReceive("Location Code") THEN
              VALIDATE("Return Qty. to Receive",0)
            ELSE
              VALIDATE("Return Qty. to Receive","Outstanding Quantity");
          ("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0):
            IF Location.RequireShipment("Location Code") THEN
              VALIDATE("Return Qty. to Receive",0)
            ELSE
              VALIDATE("Return Qty. to Receive","Outstanding Quantity");
        END;
      SetDefaultQuantity;
    END;

    LOCAL PROCEDURE CheckWarehouse@46();
    VAR
      Location2@1002 : Record 14;
      WhseSetup@1000 : Record 5769;
      ShowDialog@1001 : ' ,Message,Error';
      DialogText@1003 : Text[50];
    BEGIN
      GetLocation("Location Code");
      IF "Location Code" = '' THEN BEGIN
        WhseSetup.GET;
        Location2."Require Shipment" := WhseSetup."Require Shipment";
        Location2."Require Pick" := WhseSetup."Require Pick";
        Location2."Require Receive" := WhseSetup."Require Receive";
        Location2."Require Put-away" := WhseSetup."Require Put-away";
      END ELSE
        Location2 := Location;

      DialogText := Text035;
      IF ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"]) AND
         Location2."Directed Put-away and Pick"
      THEN BEGIN
        ShowDialog := ShowDialog::Error;
        IF (("Document Type" = "Document Type"::Order) AND (Quantity >= 0)) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0))
        THEN
          DialogText :=
            DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Shipment"))
        ELSE
          DialogText :=
            DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Receive"));
      END ELSE BEGIN
        IF (("Document Type" = "Document Type"::Order) AND (Quantity >= 0) AND
            (Location2."Require Shipment" OR Location2."Require Pick")) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0) AND
            (Location2."Require Shipment" OR Location2."Require Pick"))
        THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Sales Line",
               "Document Type",
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location2."Require Shipment" THEN
              ShowDialog := ShowDialog::Message;
          IF Location2."Require Shipment" THEN
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Shipment"))
          ELSE BEGIN
            DialogText := Text036;
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Pick"));
          END;
        END;

        IF (("Document Type" = "Document Type"::Order) AND (Quantity < 0) AND
            (Location2."Require Receive" OR Location2."Require Put-away")) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity >= 0) AND
            (Location2."Require Receive" OR Location2."Require Put-away"))
        THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Sales Line",
               "Document Type",
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location2."Require Receive" THEN
              ShowDialog := ShowDialog::Message;
          IF Location2."Require Receive" THEN
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Receive"))
          ELSE BEGIN
            DialogText := Text036;
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Put-away"));
          END;
        END;
      END;

      CASE ShowDialog OF
        ShowDialog::Message:
          MESSAGE(Text016 + Text017,DialogText,FIELDCAPTION("Line No."),"Line No.");
        ShowDialog::Error:
          ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
      END;

      HandleDedicatedBin(TRUE);
    END;

    LOCAL PROCEDURE UpdateDates@43();
    BEGIN
      IF CurrFieldNo = 0 THEN BEGIN
        PlannedShipmentDateCalculated := FALSE;
        PlannedDeliveryDateCalculated := FALSE;
        //**4PS.sn
        IF "Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"] THEN BEGIN
          "Shipment Date" := SalesHeader."Shipment Date";
          EXIT;
        END;
        //**4PS.en
      END;
      IF "Promised Delivery Date" <> 0D THEN
        VALIDATE("Promised Delivery Date")
      ELSE
        IF "Requested Delivery Date" <> 0D THEN
          VALIDATE("Requested Delivery Date")
        ELSE
          VALIDATE("Shipment Date");
    END;

    PROCEDURE GetItemTranslation@42();
    BEGIN
      GetSalesHeader;
      //**4PS.sn
      IF "Item No." <> '' THEN BEGIN
        IF ItemTranslation.GET("Item No.","Variant Code",SalesHeader."Language Code") THEN BEGIN
          Description := ItemTranslation.Description;
          IF ItemTranslation."Description 2" <> '' THEN //**4PSmg, 24-06-11: M26548
            "Description 2" := ItemTranslation."Description 2";
        END;
      END ELSE
      //**4PS.en
        IF ItemTranslation.GET("No.","Variant Code",SalesHeader."Language Code") THEN BEGIN
          Description := ItemTranslation.Description;
          IF ItemTranslation."Description 2" <> '' THEN //**4PSmg, 24-06-11: M26548
            "Description 2" := ItemTranslation."Description 2";
        END;
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    PROCEDURE PriceExists@44() : Boolean;
    BEGIN
      IF "Document No." <> '' THEN BEGIN
        GetSalesHeader;
        EXIT(PriceCalcMgt.SalesLinePriceExists(SalesHeader,Rec,TRUE));
      END;
      EXIT(FALSE);
    END;

    PROCEDURE LineDiscExists@45() : Boolean;
    BEGIN
      IF "Document No." <> '' THEN BEGIN
        GetSalesHeader;
        EXIT(PriceCalcMgt.SalesLineLineDiscExists(SalesHeader,Rec,TRUE));
      END;
      EXIT(FALSE);
    END;

    PROCEDURE RowID1@47() : Text[250];
    VAR
      ItemTrackingMgt@1000 : Codeunit 6500;
    BEGIN
      EXIT(ItemTrackingMgt.ComposeRowID(DATABASE::"Sales Line","Document Type",
          "Document No.",'',0,"Line No."));
    END;

    LOCAL PROCEDURE UpdateItemCrossRef@48();
    BEGIN
      DistIntegration.EnterSalesItemCrossRef(Rec);
      UpdateICPartner;
    END;

    LOCAL PROCEDURE GetDefaultBin@50();
    VAR
      WMSManagement@1000 : Codeunit 7302;
    BEGIN
      //IF Type <> Type::Item THEN  //**4PS.o
      IF "Item No." = '' THEN  //**4PS.n (db, 02-11-10)
        EXIT;

      "Bin Code" := '';
      IF "Drop Shipment" THEN
        EXIT;

      //IF ("Location Code" <> '') AND ("No." <> '') THEN BEGIN  //**4PS.o
      IF ("Location Code" <> '') AND ("Item No." <> '') THEN BEGIN  //**4PS.n
        GetLocation("Location Code");
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN BEGIN
          IF ("Qty. to Assemble to Order" > 0) OR IsAsmToOrderRequired THEN
            IF GetATOBin(Location,"Bin Code") THEN
              EXIT;

          //WMSManagement.GetDefaultBin("No.","Variant Code","Location Code","Bin Code");  //**4PS.o
          //**4PS.sn
          "Bin Code" := WMSManagement.GetDefaultBinLocation(
            "Job No.","Service Order No.","Location Code","Item No.","Variant Code",TRUE);  //db, 30-03-11
          //**4PS.en
          HandleDedicatedBin(FALSE);
        END;
      END;
    END;

    PROCEDURE GetATOBin@89(Location@1001 : Record 14;VAR BinCode@1002 : Code[20]) : Boolean;
    VAR
      AsmHeader@1000 : Record 900;
    BEGIN
      IF NOT Location."Require Shipment" THEN
        BinCode := Location."Asm.-to-Order Shpt. Bin Code";
      IF BinCode <> '' THEN
        EXIT(TRUE);

      IF AsmHeader.GetFromAssemblyBin(Location,BinCode) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE IsInbound@97() : Boolean;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote,"Document Type"::"Blanket Order":
          EXIT("Quantity (Base)" < 0);
        "Document Type"::"Return Order","Document Type"::"Credit Memo":
          EXIT("Quantity (Base)" > 0);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE HandleDedicatedBin@70(IssueWarning@1001 : Boolean);
    VAR
      WhseIntegrationMgt@1002 : Codeunit 7317;
    BEGIN
      IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
        WhseIntegrationMgt.CheckIfBinDedicatedOnSrcDoc("Location Code","Bin Code",IssueWarning);
    END;

    LOCAL PROCEDURE CheckAssocPurchOrder@51(TheFieldCaption@1000 : Text[250]);
    BEGIN
      IF TheFieldCaption = '' THEN BEGIN // If sales line is being deleted
        IF "Purch. Order Line No." <> 0 THEN
          ERROR(
            Text000,
            "Purchase Order No.",
            "Purch. Order Line No.");
        IF "Special Order Purch. Line No." <> 0 THEN
          ERROR(
            Text000,
            "Special Order Purchase No.",
            "Special Order Purch. Line No.");
      END;
      IF "Purch. Order Line No." <> 0 THEN
        ERROR(
          Text002,
          TheFieldCaption,
          "Purchase Order No.",
          "Purch. Order Line No.");
      IF "Special Order Purch. Line No." <> 0 THEN
        ERROR(
          Text002,
          TheFieldCaption,
          "Special Order Purchase No.",
          "Special Order Purch. Line No.");
    END;

    PROCEDURE CrossReferenceNoLookUp@53();
    VAR
      ItemCrossReference@1000 : Record 5717;
      ICGLAcc@1001 : Record 410;
    BEGIN
      CASE Type OF
        Type::Item:
          BEGIN
            GetSalesHeader;
            ItemCrossReference.RESET;
            ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
            ItemCrossReference.SETFILTER(
              "Cross-Reference Type",'%1|%2',
              ItemCrossReference."Cross-Reference Type"::Customer,
              ItemCrossReference."Cross-Reference Type"::" ");
            ItemCrossReference.SETFILTER("Cross-Reference Type No.",'%1|%2',SalesHeader."Sell-to Customer No.",'');
            IF PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK THEN BEGIN
              VALIDATE("Cross-Reference No.",ItemCrossReference."Cross-Reference No.");
              PriceCalcMgt.FindSalesLineLineDisc(SalesHeader,Rec);
              PriceCalcMgt.FindSalesLinePrice(SalesHeader,Rec,FIELDNO("Cross-Reference No."));
              VALIDATE("Unit Price");
            END;
          END;
        Type::"G/L Account",Type::Resource:
          BEGIN
            GetSalesHeader;
            SalesHeader.TESTFIELD("Sell-to IC Partner Code");
            IF PAGE.RUNMODAL(PAGE::"IC G/L Account List") = ACTION::LookupOK THEN
              "Cross-Reference No." := ICGLAcc."No.";
          END;
      END;
    END;

    LOCAL PROCEDURE CheckServItemCreation@52();
    VAR
      ServItemGroup@1000 : Record 5904;
    BEGIN
      IF CurrFieldNo = 0 THEN
        EXIT;
      IF Type <> Type::Item THEN
        EXIT;
      Item.GET("No.");
      IF Item."Service Item Group" = '' THEN
        EXIT;
      IF ServItemGroup.GET(Item."Service Item Group") THEN
        IF ServItemGroup."Create Service Item" THEN
          IF "Qty. to Ship (Base)" <> ROUND("Qty. to Ship (Base)",1) THEN
            ERROR(
              Text034,
              FIELDCAPTION("Qty. to Ship (Base)"),
              ServItemGroup.FIELDCAPTION("Create Service Item"));
    END;

    PROCEDURE ItemExists@54(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      Item2@1001 : Record 27;
    BEGIN
      IF Type = Type::Item THEN
        IF NOT Item2.GET(ItemNo) THEN
          EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE IsShipment@55() : Boolean;
    BEGIN
      EXIT(SignedXX("Quantity (Base)") < 0);
    END;

    LOCAL PROCEDURE GetAbsMin@56(QtyToHandle@1000 : Decimal;QtyHandled@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(QtyHandled) < ABS(QtyToHandle) THEN
        EXIT(QtyHandled);

      EXIT(QtyToHandle);
    END;

    PROCEDURE SetHideValidationDialog@57(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE CheckApplFromItemLedgEntry@157(VAR ItemLedgEntry@1000 : Record 32);
    VAR
      ItemTrackingLines@1003 : Page 6510;
      QtyNotReturned@1002 : Decimal;
      QtyReturned@1004 : Decimal;
    BEGIN
      IF "Appl.-from Item Entry" = 0 THEN
        EXIT;

      IF "Shipment No." <> '' THEN
        EXIT;

      TESTFIELD(Type,Type::Item);
      TESTFIELD(Quantity);
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        IF Quantity < 0 THEN
          FIELDERROR(Quantity,Text029);
      END ELSE BEGIN
        IF Quantity > 0 THEN
          FIELDERROR(Quantity,Text030);
      END;

      ItemLedgEntry.GET("Appl.-from Item Entry");
      ItemLedgEntry.TESTFIELD(Positive,FALSE);
      ItemLedgEntry.TESTFIELD("Item No.","No.");
      ItemLedgEntry.TESTFIELD("Variant Code","Variant Code");
      IF ItemLedgEntry.TrackingExists THEN
        ERROR(Text040,ItemTrackingLines.CAPTION,FIELDCAPTION("Appl.-from Item Entry"));

      IF ABS("Quantity (Base)") > -ItemLedgEntry.Quantity THEN
        ERROR(
          Text046,
          -ItemLedgEntry.Quantity,ItemLedgEntry.FIELDCAPTION("Document No."),
          ItemLedgEntry."Document No.");

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
       IF NOT (("Document Type" = "Document Type"::"Credit Memo") AND ("Return Receipt No." <> '')) THEN BEGIN //**4PS.n 28232
        IF ABS("Outstanding Qty. (Base)") > -ItemLedgEntry."Shipped Qty. Not Returned" THEN BEGIN
          QtyNotReturned := ItemLedgEntry."Shipped Qty. Not Returned";
          QtyReturned := ItemLedgEntry.Quantity - ItemLedgEntry."Shipped Qty. Not Returned";
          IF "Qty. per Unit of Measure" <> 0 THEN BEGIN
            QtyNotReturned :=
              ROUND(ItemLedgEntry."Shipped Qty. Not Returned" / "Qty. per Unit of Measure",0.00001);
            QtyReturned :=
              ROUND(
                (ItemLedgEntry.Quantity - ItemLedgEntry."Shipped Qty. Not Returned") /
                "Qty. per Unit of Measure",0.00001);
          END;
          ERROR(
            Text039,
            -QtyReturned,ItemLedgEntry.FIELDCAPTION("Document No."),
            ItemLedgEntry."Document No.",-QtyNotReturned);
        END;
       END;  //**4PS.n 28232
    END;

    PROCEDURE CalcPrepaymentToDeduct@63();
    BEGIN
      IF ("Qty. to Invoice" <> 0) AND ("Prepmt. Amt. Inv." <> 0) THEN BEGIN
        GetSalesHeader;
        IF ("Prepayment %" = 100) AND NOT IsFinalInvoice THEN
          "Prepmt Amt to Deduct" := GetLineAmountToHandle("Qty. to Invoice")
        ELSE
          "Prepmt Amt to Deduct" :=
            ROUND(
              ("Prepmt. Amt. Inv." - "Prepmt Amt Deducted") *
              "Qty. to Invoice" / (Quantity - "Quantity Invoiced"),Currency."Amount Rounding Precision")
      END ELSE
        "Prepmt Amt to Deduct" := 0
    END;

    PROCEDURE IsFinalInvoice@116() : Boolean;
    BEGIN
      EXIT("Qty. to Invoice" = Quantity - "Quantity Invoiced");
    END;

    PROCEDURE GetLineAmountToHandle@117(QtyToHandle@1002 : Decimal) : Decimal;
    VAR
      LineAmount@1001 : Decimal;
      LineDiscAmount@1000 : Decimal;
    BEGIN
      IF "Line Discount %" = 100 THEN
        EXIT(0);

      GetSalesHeader;
      //LineAmount := ROUND(QtyToHandle * "Unit Price",Currency."Amount Rounding Precision"); //**4PS.o
      LineAmount := ROUND(QtyToHandle * RentalFactor * "Unit Price",Currency."Amount Rounding Precision"); //**4PS.n
      LineDiscAmount := ROUND("Line Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision");
      EXIT(LineAmount - LineDiscAmount);
    END;

    PROCEDURE SetHasBeenShown@59();
    BEGIN
      HasBeenShown := TRUE;
    END;

    LOCAL PROCEDURE TestJobPlanningLine@60();
    BEGIN
      IF "Job Contract Entry No." = 0 THEN
        EXIT;
      JobPostLine.TestSalesLine(Rec);
    END;

    PROCEDURE BlockDynamicTracking@58(SetBlock@1000 : Boolean);
    BEGIN
      TrackingBlocked := SetBlock;
      ReserveSalesLine.Block(SetBlock);
    END;

    PROCEDURE InitQtyToShip2@7();
    BEGIN
      "Qty. to Ship" := "Outstanding Quantity";
      "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";

      ATOLink.UpdateQtyToAsmFromSalesLine(Rec);

      CheckServItemCreation;

      "Qty. to Invoice" := MaxQtyToInvoice;
      "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
      "VAT Difference" := 0;

      CalcInvDiscToInvoice;

      CalcPrepaymentToDeduct;
    END;

    PROCEDURE ShowLineComments@61();
    VAR
      SalesCommentLine@1000 : Record 44;
      SalesCommentSheet@1001 : Page 67;
    BEGIN
      TESTFIELD("Document No.");
      TESTFIELD("Line No.");
      SalesCommentLine.SETRANGE("Document Type","Document Type");
      SalesCommentLine.SETRANGE("No.","Document No.");
      SalesCommentLine.SETRANGE("Document Line No.","Line No.");
      SalesCommentSheet.SETTABLEVIEW(SalesCommentLine);
      SalesCommentSheet.RUNMODAL;
    END;

    PROCEDURE LineCommentPresent@1210190001() : Boolean;
    VAR
      SalesCommentLine@1210190000 : Record 44;
    BEGIN
      //**4PS 22575
      EXIT(SalesCommentLine.CommentPresent("Document Type", "Document No.", "Line No."));
    END;

    PROCEDURE SetDefaultQuantity@62();
    BEGIN
      GetSalesSetup;
      IF SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Blank THEN BEGIN
        IF ("Document Type" = "Document Type"::Order) OR ("Document Type" = "Document Type"::Quote) THEN BEGIN
          "Qty. to Ship" := 0;
          "Qty. to Ship (Base)" := 0;
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
        END;
        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
          "Return Qty. to Receive" := 0;
          "Return Qty. to Receive (Base)" := 0;
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
        END;
      END;
    END;

    PROCEDURE UpdatePrePaymentAmounts@64();
    VAR
      ShipmentLine@1000 : Record 111;
      SalesOrderLine@1001 : Record 37;
      SalesOrderHeader@1002 : Record 36;
    BEGIN
      IF ("Document Type" <> "Document Type"::Invoice) OR ("Prepayment %" = 0) THEN
        EXIT;

      IF NOT ShipmentLine.GET("Shipment No.","Shipment Line No.") THEN BEGIN
        "Prepmt Amt to Deduct" := 0;
        "Prepmt VAT Diff. to Deduct" := 0;
      END ELSE BEGIN
        IF SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,ShipmentLine."Order No.",ShipmentLine."Order Line No.") THEN BEGIN
          IF ("Prepayment %" = 100) AND (Quantity <> SalesOrderLine.Quantity - SalesOrderLine."Quantity Invoiced") THEN
            "Prepmt Amt to Deduct" := "Line Amount"
          ELSE
            "Prepmt Amt to Deduct" :=
              ROUND((SalesOrderLine."Prepmt. Amt. Inv." - SalesOrderLine."Prepmt Amt Deducted") *
                Quantity / (SalesOrderLine.Quantity - SalesOrderLine."Quantity Invoiced"),Currency."Amount Rounding Precision");
          "Prepmt VAT Diff. to Deduct" := "Prepayment VAT Difference" - "Prepmt VAT Diff. Deducted";
          SalesOrderHeader.GET(SalesOrderHeader."Document Type"::Order,SalesOrderLine."Document No.");
        END ELSE BEGIN
          "Prepmt Amt to Deduct" := 0;
          "Prepmt VAT Diff. to Deduct" := 0;
        END;
      END;

      GetSalesHeader;
      SalesHeader.TESTFIELD("Prices Including VAT",SalesOrderHeader."Prices Including VAT");
      IF SalesHeader."Prices Including VAT" THEN BEGIN
        "Prepmt. Amt. Incl. VAT" := "Prepmt Amt to Deduct";
        "Prepayment Amount" :=
          ROUND(
            "Prepmt Amt to Deduct" / (1 + ("Prepayment VAT %" / 100)),
            Currency."Amount Rounding Precision");
      END ELSE BEGIN
        "Prepmt. Amt. Incl. VAT" :=
          ROUND(
            "Prepmt Amt to Deduct" * (1 + ("Prepayment VAT %" / 100)),
            Currency."Amount Rounding Precision");
        "Prepayment Amount" := "Prepmt Amt to Deduct";
      END;
      "Prepmt. Line Amount" := "Prepmt Amt to Deduct";
      "Prepmt. Amt. Inv." := "Prepmt. Line Amount";
      "Prepmt. VAT Base Amt." := "Prepayment Amount";
      "Prepmt. Amount Inv. Incl. VAT" := "Prepmt. Amt. Incl. VAT";
      "Prepmt Amt Deducted" := 0;
    END;

    PROCEDURE ZeroAmountLine@65(QtyType@1000 : 'General,Invoicing,Shipping';SalesHeader@1100525001 : Record 36;SalesLine@1100525000 : Record 37) : Boolean;
    BEGIN
      WITH SalesLine DO BEGIN //**4PS.n //Standard bugfix
        IF Type = Type::" " THEN
          EXIT(TRUE);
        IF Quantity = 0 THEN
          EXIT(TRUE);
        IF "Unit Price" = 0 THEN
          EXIT(TRUE);
        IF QtyType = QtyType::Invoicing THEN
          IF "Qty. to Invoice" = 0 THEN
            EXIT(TRUE);
      //**4PS.sn
        IF ((SalesHeader."Document Type" = SalesHeader."Document Type"::Quote) AND
            (SalesHeader."Sales Document Type" = SalesHeader."Sales Document Type"::"Sales Logistics Separated") AND
            ("Alternative No." <> SalesHeader."Elected Alternative No.")) THEN
          EXIT(TRUE);
      END;
      //**4PS.en
      EXIT(FALSE);
    END;

    PROCEDURE FilterLinesWithItemToPlan@69(VAR Item@1000 : Record 27;DocumentType@1001 : Option);
    BEGIN
      RESET;
      SETCURRENTKEY("Document Type",Type,"No.","Variant Code","Drop Shipment","Location Code","Shipment Date");
      SETRANGE("Document Type",DocumentType);
      SETRANGE(Type,Type::Item);
      SETRANGE("No.",Item."No.");
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
      SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      SETFILTER("Shipment Date",Item.GETFILTER("Date Filter"));
      SETFILTER("Outstanding Qty. (Base)",'<>0');
    END;

    PROCEDURE FindLinesWithItemToPlan@66(VAR Item@1000 : Record 27;DocumentType@1001 : Option) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,DocumentType);
      EXIT(FIND('-'));
    END;

    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record 27;DocumentType@1001 : Option) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,DocumentType);
      EXIT(NOT ISEMPTY);
    END;

    LOCAL PROCEDURE DateFormularZero@73(VAR DateFormularValue@1001 : DateFormula;CalledByFieldNo@1002 : Integer;CalledByFieldCaption@1003 : Text[250]);
    VAR
      DateFormularZero@1000 : DateFormula;
    BEGIN
      EVALUATE(DateFormularZero,'<0D>');
      IF (DateFormularValue <> DateFormularZero) AND (CalledByFieldNo = CurrFieldNo) THEN
        ERROR(Text051,CalledByFieldCaption,FIELDCAPTION("Drop Shipment"));
      EVALUATE(DateFormularValue,'<0D>');
    END;

    LOCAL PROCEDURE InitQtyToAsm@76();
    BEGIN
      IF NOT IsAsmToOrderAllowed THEN BEGIN
        "Qty. to Assemble to Order" := 0;
        "Qty. to Asm. to Order (Base)" := 0;
        EXIT;
      END;

      IF ((xRec."Qty. to Asm. to Order (Base)" = 0) AND IsAsmToOrderRequired AND ("Qty. Shipped (Base)" = 0)) OR
         ((xRec."Qty. to Asm. to Order (Base)" <> 0) AND
          (xRec."Qty. to Asm. to Order (Base)" = xRec."Quantity (Base)")) OR
         ("Qty. to Asm. to Order (Base)" > "Quantity (Base)")
      THEN BEGIN
        "Qty. to Assemble to Order" := Quantity;
        "Qty. to Asm. to Order (Base)" := "Quantity (Base)";
      END;
    END;

    PROCEDURE AsmToOrderExists@72(VAR AsmHeader@1000 : Record 900) : Boolean;
    VAR
      ATOLink@1001 : Record 904;
    BEGIN
      IF NOT ATOLink.AsmExistsForSalesLine(Rec) THEN
        EXIT(FALSE);
      EXIT(AsmHeader.GET(ATOLink."Assembly Document Type",ATOLink."Assembly Document No."));
    END;

    PROCEDURE FullQtyIsForAsmToOrder@74() : Boolean;
    BEGIN
      IF "Qty. to Asm. to Order (Base)" = 0 THEN
        EXIT(FALSE);
      EXIT("Quantity (Base)" = "Qty. to Asm. to Order (Base)");
    END;

    LOCAL PROCEDURE FullReservedQtyIsForAsmToOrder@75() : Boolean;
    BEGIN
      IF "Qty. to Asm. to Order (Base)" = 0 THEN
        EXIT(FALSE);
      CALCFIELDS("Reserved Qty. (Base)");
      EXIT("Reserved Qty. (Base)" = "Qty. to Asm. to Order (Base)");
    END;

    PROCEDURE QtyBaseOnATO@86() : Decimal;
    VAR
      AsmHeader@1000 : Record 900;
    BEGIN
      IF AsmToOrderExists(AsmHeader) THEN
        EXIT(AsmHeader."Quantity (Base)");
      EXIT(0);
    END;

    PROCEDURE QtyAsmRemainingBaseOnATO@90() : Decimal;
    VAR
      AsmHeader@1000 : Record 900;
    BEGIN
      IF AsmToOrderExists(AsmHeader) THEN
        EXIT(AsmHeader."Remaining Quantity (Base)");
      EXIT(0);
    END;

    PROCEDURE QtyToAsmBaseOnATO@88() : Decimal;
    VAR
      AsmHeader@1000 : Record 900;
    BEGIN
      IF AsmToOrderExists(AsmHeader) THEN
        EXIT(AsmHeader."Quantity to Assemble (Base)");
      EXIT(0);
    END;

    PROCEDURE IsAsmToOrderAllowed@77() : Boolean;
    BEGIN
      IF NOT ("Document Type" IN ["Document Type"::Quote,"Document Type"::"Blanket Order","Document Type"::Order]) THEN
        EXIT(FALSE);
      IF Quantity < 0 THEN
        EXIT(FALSE);
      IF Type <> Type::Item THEN
        EXIT(FALSE);
      IF "No." = '' THEN
        EXIT(FALSE);
      IF "Drop Shipment" OR "Special Order" THEN
        EXIT(FALSE);
      EXIT(TRUE)
    END;

    PROCEDURE IsAsmToOrderRequired@81() : Boolean;
    BEGIN
      IF (Type <> Type::Item) OR ("No." = '') THEN
        EXIT(FALSE);
      GetItem;
      IF GetSKU THEN
        EXIT(SKU."Assembly Policy" = SKU."Assembly Policy"::"Assemble-to-Order");
      EXIT(Item."Assembly Policy" = Item."Assembly Policy"::"Assemble-to-Order");
    END;

    PROCEDURE CheckAsmToOrder@85(AsmHeader@1001 : Record 900);
    BEGIN
      TESTFIELD("Qty. to Assemble to Order",AsmHeader.Quantity);
      TESTFIELD("Document Type",AsmHeader."Document Type");
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.",AsmHeader."Item No.");
      TESTFIELD("Location Code",AsmHeader."Location Code");
      TESTFIELD("Unit of Measure Code",AsmHeader."Unit of Measure Code");
      TESTFIELD("Variant Code",AsmHeader."Variant Code");
      TESTFIELD("Shipment Date",AsmHeader."Due Date");
      IF "Document Type" = "Document Type"::Order THEN BEGIN
        AsmHeader.CALCFIELDS("Reserved Qty. (Base)");
        AsmHeader.TESTFIELD("Reserved Qty. (Base)",AsmHeader."Remaining Quantity (Base)");
      END;
      TESTFIELD("Qty. to Asm. to Order (Base)",AsmHeader."Quantity (Base)");
      IF "Outstanding Qty. (Base)" < AsmHeader."Remaining Quantity (Base)" THEN
        AsmHeader.FIELDERROR("Remaining Quantity (Base)",STRSUBSTNO(Text045,AsmHeader."Remaining Quantity (Base)"));
    END;

    LOCAL PROCEDURE ShowAsmToOrder@79();
    VAR
      ATOLink@1000 : Record 904;
    BEGIN
      ATOLink.ShowAsm(Rec);
    END;

    PROCEDURE ShowAsmToOrderLines@80();
    VAR
      ATOLink@1000 : Record 904;
    BEGIN
      ATOLink.ShowAsmToOrderLines(Rec);
    END;

    PROCEDURE FindOpenATOEntry@96(LotNo@1003 : Code[20];SerialNo@1004 : Code[40]) : Integer;
    VAR
      PostedATOLink@1002 : Record 914;
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      TESTFIELD("Document Type","Document Type"::Order);
      IF PostedATOLink.FindLinksFromSalesLine(Rec) THEN
        REPEAT
          ItemLedgEntry.SETRANGE("Document Type",ItemLedgEntry."Document Type"::"Posted Assembly");
          ItemLedgEntry.SETRANGE("Document No.",PostedATOLink."Assembly Document No.");
          ItemLedgEntry.SETRANGE("Document Line No.",0);
          ItemLedgEntry.SETRANGE("Serial No.",SerialNo);
          ItemLedgEntry.SETRANGE("Lot No.",LotNo);
          ItemLedgEntry.SETRANGE(Open,TRUE);
          IF ItemLedgEntry.FINDFIRST THEN
            EXIT(ItemLedgEntry."Entry No.");
        UNTIL PostedATOLink.NEXT = 0;
    END;

    PROCEDURE RollUpAsmCost@83();
    BEGIN
      ATOLink.RollUpCost(Rec);
    END;

    PROCEDURE RollupAsmPrice@84();
    BEGIN
      GetSalesHeader;
      ATOLink.RollUpPrice(SalesHeader,Rec);
    END;

    LOCAL PROCEDURE UpdateICPartner@78();
    VAR
      ICPartner@1000 : Record 413;
      ItemCrossReference@1001 : Record 5717;
    BEGIN
      IF SalesHeader."Send IC Document" AND
         (SalesHeader."IC Direction" = SalesHeader."IC Direction"::Outgoing) AND
         (SalesHeader."Bill-to IC Partner Code" <> '')
      THEN
        CASE Type OF
          Type::" ",Type::"Charge (Item)":
            BEGIN
              "IC Partner Ref. Type" := Type;
              "IC Partner Reference" := "No.";
            END;
          Type::"G/L Account":
            BEGIN
              "IC Partner Ref. Type" := Type;
              "IC Partner Reference" := GLAcc."Default IC Partner G/L Acc. No";
            END;
          Type::Item:
            BEGIN
              IF SalesHeader."Sell-to IC Partner Code" <> '' THEN
                ICPartner.GET(SalesHeader."Sell-to IC Partner Code")
              ELSE
                ICPartner.GET(SalesHeader."Bill-to IC Partner Code");
              CASE ICPartner."Outbound Sales Item No. Type" OF
                ICPartner."Outbound Sales Item No. Type"::"Common Item No.":
                  VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Common Item No.");
                ICPartner."Outbound Sales Item No. Type"::"Internal No.",
                ICPartner."Outbound Sales Item No. Type"::"Cross Reference":
                  BEGIN
                    ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Customer);
                    ItemCrossReference.SETRANGE("Cross-Reference Type No.","Sell-to Customer No.");
                    ItemCrossReference.SETRANGE("Item No.","No.");
                    ItemCrossReference.SETRANGE("Variant Code","Variant Code");
                    ItemCrossReference.SETRANGE("Unit of Measure","Unit of Measure Code");
                    IF ItemCrossReference.FINDFIRST THEN BEGIN
                      VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Cross Reference");
                      "IC Partner Reference" := ItemCrossReference."Cross-Reference No.";
                    END ELSE BEGIN
                      "IC Partner Ref. Type" := "IC Partner Ref. Type"::Item;
                      "IC Partner Reference" := "No.";
                    END;
                  END;
              END;
            END;
          Type::"Fixed Asset":
            BEGIN
              "IC Partner Ref. Type" := "IC Partner Ref. Type"::" ";
              "IC Partner Reference" := '';
            END;
          Type::Resource:
            BEGIN
              Resource.GET("No.");
              "IC Partner Ref. Type" := "IC Partner Ref. Type"::"G/L Account";
              "IC Partner Reference" := Resource."IC Partner Purch. G/L Acc. No.";
            END;
        END;
    END;

    PROCEDURE OutstandingInvoiceAmountFromShipment@12(SellToCustomerNo@1000 : Code[20]) : Decimal;
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SalesLine.SETCURRENTKEY("Document Type","Sell-to Customer No.","Shipment No.");
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Invoice);
      SalesLine.SETRANGE("Sell-to Customer No.",SellToCustomerNo);
      SalesLine.SETFILTER("Shipment No.",'<>%1','');
      SalesLine.CALCSUMS("Outstanding Amount (LCY)");
      EXIT(SalesLine."Outstanding Amount (LCY)");
    END;

    LOCAL PROCEDURE CheckShipmentRelation@94();
    VAR
      SalesShptLine@1001 : Record 111;
    BEGIN
      SalesShptLine.GET("Shipment No.","Shipment Line No.");
      IF (Quantity * SalesShptLine."Qty. Shipped Not Invoiced") < 0 THEN
        FIELDERROR("Qty. to Invoice",Text057);
      IF ABS(Quantity) > ABS(SalesShptLine."Qty. Shipped Not Invoiced") THEN
        ERROR(Text058,SalesShptLine."Document No.");
    END;

    LOCAL PROCEDURE CheckRetRcptRelation@95();
    VAR
      ReturnRcptLine@1000 : Record 6661;
    BEGIN
      ReturnRcptLine.GET("Return Receipt No.","Return Receipt Line No.");
      IF (Quantity * (ReturnRcptLine.Quantity - ReturnRcptLine."Quantity Invoiced")) < 0 THEN
        FIELDERROR("Qty. to Invoice",Text059);
      IF ABS(Quantity) > ABS(ReturnRcptLine.Quantity - ReturnRcptLine."Quantity Invoiced") THEN
        ERROR(Text060,ReturnRcptLine."Document No.");
    END;

    LOCAL PROCEDURE VerifyItemLineDim@87();
    BEGIN
      IF ("Dimension Set ID" <> xRec."Dimension Set ID") AND (Type = Type::Item) THEN
        IF ("Qty. Shipped Not Invoiced" <> 0) OR ("Return Rcd. Not Invd." <> 0) THEN
          IF NOT CONFIRM(Text053,TRUE,TABLECAPTION) THEN
            ERROR(Text054);
    END;

    PROCEDURE InitType@91();
    BEGIN
      IF "Document No." <> '' THEN BEGIN
        SalesHeader.GET("Document Type","Document No.");
        IF (SalesHeader.Status = SalesHeader.Status::Released) AND
           (xRec.Type IN [xRec.Type::Item,xRec.Type::"Fixed Asset"])
        THEN
          Type := Type::" "
        ELSE
          Type := xRec.Type;
      END;
    END;

    LOCAL PROCEDURE CheckWMS@98();
    BEGIN
      IF CurrFieldNo <> 0 THEN
        CheckLocationOnWMS;
    END;

    PROCEDURE CheckLocationOnWMS@101();
    VAR
      DialogText@1001 : Text;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        DialogText := Text035;
        IF "Quantity (Base)" <> 0 THEN
          CASE "Document Type" OF
            "Document Type"::Invoice:
              IF "Shipment No." = '' THEN
                IF Location.GET("Location Code") AND Location."Directed Put-away and Pick" THEN BEGIN
                  DialogText += Location.GetRequirementText(Location.FIELDNO("Require Shipment"));
                  ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
                END;
            "Document Type"::"Credit Memo":
              IF "Return Receipt No." = '' THEN
                IF Location.GET("Location Code") AND Location."Directed Put-away and Pick" THEN BEGIN
                  DialogText += Location.GetRequirementText(Location.FIELDNO("Require Receive"));
                  ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
                END;
          END;
      END;
    END;

    PROCEDURE IsServiceItem@68() : Boolean;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT(FALSE);
      IF "No." = '' THEN
        EXIT(FALSE);
      GetItem;
      EXIT(Item.Type = Item.Type::Service);
    END;

    LOCAL PROCEDURE ValidateReturnReasonCode@99(CallingFieldNo@1000 : Integer);
    BEGIN
      IF CallingFieldNo = 0 THEN
        EXIT;
      IF "Return Reason Code" = '' THEN
        UpdateUnitPrice(CallingFieldNo);

      IF ReturnReason.GET("Return Reason Code") THEN BEGIN
        IF (CallingFieldNo <> FIELDNO("Location Code")) AND (ReturnReason."Default Location Code" <> '') THEN
          VALIDATE("Location Code",ReturnReason."Default Location Code");
        IF ReturnReason."Inventory Value Zero" THEN
          VALIDATE("Unit Cost (LCY)",0)
        ELSE
          IF "Unit Price" = 0 THEN
            UpdateUnitPrice(CallingFieldNo);
      END;
    END;

    PROCEDURE HasTypeToFillMandatotyFields@103() : Boolean;
    BEGIN
      EXIT(Type <> Type::" ");
    END;

    PROCEDURE GetDeferralAmount@104() DeferralAmount : Decimal;
    BEGIN
      IF "VAT Base Amount" <> 0 THEN
        DeferralAmount := "VAT Base Amount"
      ELSE
        DeferralAmount := "Line Amount" - "Inv. Discount Amount";
    END;

    LOCAL PROCEDURE UpdateDeferralAmounts@105();
    VAR
      AdjustStartDate@1000 : Boolean;
    BEGIN
      GetSalesHeader;
      DeferralPostDate := SalesHeader."Posting Date";
      AdjustStartDate := TRUE;
      IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
        IF "Returns Deferral Start Date" = 0D THEN
          "Returns Deferral Start Date" := SalesHeader."Posting Date";
        DeferralPostDate := "Returns Deferral Start Date";
        AdjustStartDate := FALSE;
      END;

      DeferralUtilities.RemoveOrSetDeferralSchedule(
        "Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
        "Document Type","Document No.","Line No.",
        GetDeferralAmount,DeferralPostDate,Description,SalesHeader."Currency Code",AdjustStartDate);
    END;

    PROCEDURE ShowDeferrals@106(PostingDate@1000 : Date;CurrencyCode@1001 : Code[10]) : Boolean;
    BEGIN
      EXIT(DeferralUtilities.OpenLineScheduleEdit(
          "Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
          "Document Type","Document No.","Line No.",
          GetDeferralAmount,PostingDate,Description,CurrencyCode));
    END;

    LOCAL PROCEDURE InitHeaderDefaults@107(SalesHeader@1000 : Record 36);
    BEGIN
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::Quote THEN BEGIN
        IF (SalesHeader."Sell-to Customer No." = '') AND
           (SalesHeader."Sell-to Contact No." = '') AND //**4PS.n
           (SalesHeader."Sell-to Customer Template Code" = '')
        THEN
          ERROR(
            Text031,
            SalesHeader.FIELDCAPTION("Sell-to Customer No."),
            SalesHeader.FIELDCAPTION("Sell-to Contact No."), //**4PS.n
            SalesHeader.FIELDCAPTION("Sell-to Customer Template Code"));
        IF (SalesHeader."Bill-to Customer No." = '') AND
           (SalesHeader."Bill-to Contact No." = '') AND //**4PS.n
           (SalesHeader."Bill-to Customer Template Code" = '')
        THEN
          ERROR(
            Text031,
            SalesHeader.FIELDCAPTION("Bill-to Customer No."),
            SalesHeader.FIELDCAPTION("Bill-to Contact No."), //**4PS.n
            SalesHeader.FIELDCAPTION("Bill-to Customer Template Code"));
      END ELSE
        IF NOT PlantRelatedInvoice(SalesHeader."Job No.", SalesHeader) THEN //**4PS.n
          SalesHeader.TESTFIELD("Sell-to Customer No.");

      //**4PS.sn  (as in T39)
      IF "Shortcut Dimension 1 Code" = '' THEN
        "Shortcut Dimension 1 Code" := SalesHeader."Shortcut Dimension 1 Code";
      IF "Shortcut Dimension 2 Code" = '' THEN
        "Shortcut Dimension 2 Code" := SalesHeader."Shortcut Dimension 2 Code";
      //**4PS.en

      "Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
      "Currency Code" := SalesHeader."Currency Code";
      IF NOT IsServiceItem THEN
        "Location Code" := SalesHeader."Location Code";
      "Customer Price Group" := SalesHeader."Customer Price Group";
      "Customer Disc. Group" := SalesHeader."Customer Disc. Group";
      "Allow Line Disc." := SalesHeader."Allow Line Disc.";
      "Transaction Type" := SalesHeader."Transaction Type";
      "Transport Method" := SalesHeader."Transport Method";
      "Bill-to Customer No." := SalesHeader."Bill-to Customer No.";
      "Gen. Bus. Posting Group" := SalesHeader."Gen. Bus. Posting Group";
      "VAT Bus. Posting Group" := SalesHeader."VAT Bus. Posting Group";
      "Exit Point" := SalesHeader."Exit Point";
      Area := SalesHeader.Area;
      "Transaction Specification" := SalesHeader."Transaction Specification";
      "Tax Area Code" := SalesHeader."Tax Area Code";
      "Tax Liable" := SalesHeader."Tax Liable";
      //IF NOT "System-Created Entry" AND ("Document Type" = "Document Type"::Order) AND (Type <> Type::" ") THEN //**4PS.o
      //**4PS.sn
      IF ("Document Type" = "Document Type"::Order) AND (Type <> Type::" ") THEN
        IF NOT "System-Created Entry" OR ("Service Contract No." <> '') OR ("Job No." <> '') THEN
      //**4PS.en
          "Prepayment %" := SalesHeader."Prepayment %";
      "Prepayment Tax Area Code" := SalesHeader."Tax Area Code";
      "Prepayment Tax Liable" := SalesHeader."Tax Liable";
      "Responsibility Center" := SalesHeader."Responsibility Center";

      "Shipping Agent Code" := SalesHeader."Shipping Agent Code";
      "Shipping Agent Service Code" := SalesHeader."Shipping Agent Service Code";
      "Outbound Whse. Handling Time" := SalesHeader."Outbound Whse. Handling Time";
      "Shipping Time" := SalesHeader."Shipping Time";
    END;

    LOCAL PROCEDURE InitDeferralCode@108();
    BEGIN
      IF "Document Type" IN
         ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::"Credit Memo","Document Type"::"Return Order"]
      THEN
        CASE Type OF
          Type::"G/L Account":
            VALIDATE("Deferral Code",GLAcc."Default Deferral Template Code");
          Type::Item:
            VALIDATE("Deferral Code",Item."Default Deferral Template Code");
          Type::Resource:
            VALIDATE("Deferral Code",Res."Default Deferral Template Code");
        END;
    END;

    PROCEDURE DefaultDeferralCode@109();
    BEGIN
      CASE Type OF
        Type::"G/L Account":
          BEGIN
            GLAcc.GET("No.");
            InitDeferralCode;
          END;
        Type::Item:
          BEGIN
            GetItem;
            InitDeferralCode;
          END;
        Type::Resource:
          BEGIN
            Res.GET("No.");
            InitDeferralCode;
          END;
      END;
    END;

    PROCEDURE IsCreditDocType@110() : Boolean;
    BEGIN
      EXIT("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]);
    END;

    PROCEDURE GetTemporarySalesLine@6503();
    BEGIN
      //**4PS
      "Job No." := TempSalesLine."Job No.";
      "Employee No." := TempSalesLine."Employee No." ;
      "Shortcut Dimension 1 Code" := TempSalesLine."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := TempSalesLine."Shortcut Dimension 2 Code";
      "Dimension Set ID" := TempSalesLine."Dimension Set ID";
      Description := TempSalesLine.Description;
      "Description 2" := TempSalesLine."Description 2";
      "Unit of Measure Code" := TempSalesLine."Unit of Measure Code";
      "Project Invoice" := TempSalesLine."Project Invoice";
      "Installment Invoice" := TempSalesLine."Installment Invoice";
      "Service Invoice" := TempSalesLine."Service Invoice";
      "Item No." := TempSalesLine."Item No.";
      "Basic Item" := TempSalesLine."Basic Item";
      "Trade Item" := TempSalesLine."Trade Item";
      Manufacturer := TempSalesLine.Manufacturer;
      "Vendor (Trade Item)" := TempSalesLine."Vendor (Trade Item)";
      "Service Contract No." := TempSalesLine."Service Contract No.";
      "Service Order No." := TempSalesLine."Service Order No.";
      "Service Location No." := TempSalesLine."Service Location No.";
      "Service Control Year" := TempSalesLine."Service Control Year";  //db, 09-04-08
      "Additional Cost (Service)" := TempSalesLine."Additional Cost (Service)";
      "Removal Contribution" := TempSalesLine."Removal Contribution";
      Element := TempSalesLine.Element;
      "Job Description" := TempSalesLine."Job Description";
      "Cost Component" := TempSalesLine."Cost Component";
      "Extension Contract" := TempSalesLine."Extension Contract";
      "Qty. per Unit of Measure" := TempSalesLine."Qty. per Unit of Measure";
      "Unit of Measure Code" := TempSalesLine."Unit of Measure Code";
      "Unit of Measure" := TempSalesLine."Unit of Measure";
      "Unit Price" := TempSalesLine."Unit Price";
      "Line Discount %" := TempSalesLine."Line Discount %";
      "Line Discount Amount" := TempSalesLine."Line Discount Amount"; //C016399
      "Plant Set Code" := TempSalesLine."Plant Set Code";
      "Plant Type" := TempSalesLine."Plant Type";
      "Plant No." := TempSalesLine."Plant No.";
      "Plant Rental Split No." := TempSalesLine."Plant Rental Split No.";
      "Number of Time Units" := TempSalesLine."Number of Time Units";
      "Balance Excl. VAT" := TempSalesLine."Balance Excl. VAT";
      "Balance Incl. VAT" := TempSalesLine."Balance Incl. VAT";
      "Blanket Order No." := TempSalesLine."Blanket Order No.";
      "Blanket Order Line No." := TempSalesLine."Blanket Order Line No.";
      "Location Code" := TempSalesLine."Location Code";
      "Bin Code" := TempSalesLine."Bin Code";  //db, 02-11-10
      "Return Reason Code" := TempSalesLine."Return Reason Code";
      "Rental Unit" := TempSalesLine."Rental Unit";
      "Rental Package Date" := TempSalesLine."Rental Package Date";
      "Rental Unit Line Type" := TempSalesLine."Rental Unit Line Type";
      VALIDATE(Text, TempSalesLine.Text);
      "Additional Cost (Service)" := TempSalesLine."Additional Cost (Service)";
      "Removal Contribution" := TempSalesLine."Removal Contribution";
      "Part of Line" := TempSalesLine."Part of Line";
      "BOM Item No." := TempSalesLine."BOM Item No.";
      "Recipe Group" := TempSalesLine."Recipe Group";  //DP00491
      Recipe := TempSalesLine.Recipe;                  //DP00491
    END;

    PROCEDURE CheckProjStatus@1100525003(ProjRec@1100525000 : Record 11072003);
    VAR
      lvBlockingCodeRec@1100525001 : Record 11012027;
    BEGIN
      //**4PS
      ProjSetupRec.GET;
      IF ("Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"]) AND
         (ProjRec."Blocking Code" <> '') AND
         (
          (ProjRec."Project Status" = ProjRec."Project Status"::"Technical Finished") OR
          (ProjRec."Project Status" = ProjRec."Project Status"::"Administrative Finished") OR
          ((ProjRec."Project Status" = ProjRec."Project Status"::Finished) AND ProjSetupRec."Provisions at Closure")
         )
      THEN
        lvBlockingCodeRec.CheckBlocked(ProjRec."Blocking Code", lvBlockingCodeRec.Switch::"Sales Invoice", ProjRec, TRUE)
      ELSE BEGIN
        IF (ProjSetupRec."Provisions at Closure") AND
           (("Document Type" > "Document Type"::Order) AND
            ("Document Type" <> "Document Type"::"Blanket Order"))
        THEN
          ProjRec.CheckProjectStatus(-1)
        ELSE
          ProjRec.CheckProjectStatus(1);
      END;
    END;

    PROCEDURE ValidateItem@6505(LTypeArtOpt@1210190001 : 'Item,Basic Item,Trade Item');
    VAR
      DummyDat@11012001 : Date;
      DummyDec@11012004 : Decimal;
      SaveBasicItem@1210190021 : Code[20];
      SaveTradeItem@1210190022 : Code[20];
      SaveManufacturer@1210190025 : Code[20];
      SaveVendor@1210190026 : Code[20];
      SaveDesc@1210190019 : Text[100];
      ItemRec@1210190020 : Record 27;
      lvTradeItemRec@1100525000 : Record 11012317;
      lvCalcDisc@1210190023 : Boolean;
      lvRefDate@1100485000 : Date;
      lvDiscRef1@1100485001 : Code[20];
      lvDiscRef2@1100485002 : Code[20];
      WMSManagement@1210190000 : Codeunit 7302;
    BEGIN
      //**4PS
      GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2);

      ValidateCu.ValidateItem(LTypeArtOpt,"Trade Item","Item No.",Manufacturer,"Vendor (Trade Item)",
                              "Basic Item","Shortcut Dimension 2 Code",Description,"Unit of Measure Code","Unit Cost (LCY)",
                              "Purchase Discount % (Item)",DummyDat,"Unit Price","Description 2", "Cost Component",
                              lvDiscRef1,lvDiscRef2,lvRefDate,'');

      "Gross Price" := "Unit Price";
      "Basic Price" := "Unit Cost (LCY)";
      CheckCostCompServOrderType; //** 4PS03.n

      IF "Item No." = '' THEN BEGIN
        Type := Type::"G/L Account";
        IF Type <> xRec.Type THEN
          "No." := '';
      END;

      IF ("Job No." = '') AND ("Service Order No." = '') AND ("Item No." <> '') AND ("Item No." <> "No.") THEN BEGIN
        Type := Type::Item;
        SaveBasicItem := "Basic Item";
        SaveManufacturer := Manufacturer;
        SaveTradeItem := "Trade Item";
        SaveVendor := "Vendor (Trade Item)";
        SaveDesc := Description;

        VALIDATE("No.", "Item No.");  //beware of recursion between validate triggers
        //If trade-item selected with basic-item and variant of trade-item with same basic-item is
        //copied as inventory-item: do not reset chosen trade-item by validate of item
        "Basic Item" := SaveBasicItem;
        Manufacturer := SaveManufacturer;
        "Trade Item" := SaveTradeItem;
        "Vendor (Trade Item)" := SaveVendor;
        Description := SaveDesc;
      END;

      VALIDATE("Unit Cost (LCY)");
      IF NOT "Project Invoice" AND NOT "Service Invoice" AND NOT "Plant Invoice" THEN BEGIN
        lvCalcDisc := FALSE;
        IF "Service Contract No." <> '' THEN BEGIN
          ServSetupRec.GET;
          IF ServSetupRec."Item Price Cost Plus Entry" = ServSetupRec."Item Price Cost Plus Entry"::GrossMin THEN
            lvCalcDisc := TRUE;
        END ELSE BEGIN
          ProjSetupRec.GET;
          IF ProjSetupRec."Item Price Cost Plus Entry" = ProjSetupRec."Item Price Cost Plus Entry"::GrossMin THEN
            lvCalcDisc := TRUE;
        END;
        IF lvCalcDisc = TRUE THEN BEGIN
          GetSalesHeader;
          ValidateCu.GetSalesDiscount(SalesHeader."Bill-to Customer No.", "Item No.", "Basic Item", "Trade Item",
            Manufacturer, "Vendor (Trade Item)", DummyDec, "Line Discount %", "Unit Price", lvRefDate, '',
            lvDiscRef1,lvDiscRef2,'');  //db, 02-03-09
          VALIDATE("Line Discount %");                                           //Unit Price * Quantity - Line Discount = Amount
          VALIDATE("Sales Discount % (Item)", "Line Discount %");   //** 4PS07.n //Gross Price - Sales Discount = Basic Price
        END;
      END;
      VALIDATE("Surcharge %", GetSurchargePerc);                    //** 4PS07.n

      GetSalesHeader;
      IF SalesHeader."Currency Factor" <> 0 THEN
        "Unit Price" := "Unit Price" * SalesHeader."Currency Factor";

      VALIDATE("Shortcut Dimension 2 Code");

      ItemRec.INIT;                                                       //**4PS04.n
      IF ItemRec.GET("Item No.") THEN BEGIN
        CheckIfItemIsBlocked(ItemRec);
        SaveDesc := Description;
        VALIDATE("Unit of Measure Code", ItemRec."Sales Unit of Measure");
        Description := SaveDesc;
        VALIDATE(Text, ItemRec.Text);
      END ELSE BEGIN
        VALIDATE("Unit of Measure Code", "Unit of Measure Code");
      END;

      IF LTypeArtOpt = LTypeArtOpt::Item THEN BEGIN                     //**4PS04.sn
        "Tariff No." := ItemRec."Tariff No.";

      END;
      IF LTypeArtOpt = LTypeArtOpt::"Trade Item" THEN BEGIN
        IF lvTradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN BEGIN
          "Tariff No." := lvTradeItemRec."CBS Code";
          "Net Weight" := lvTradeItemRec.GetNetWeight("Unit of Measure Code");
        END;
      END;                                                              //**4PS04.en

      //db.sn, 10-05-11: M26790
      IF ("Location Code" <> '') AND ("Item No." = '') THEN BEGIN
        GetLocation("Location Code");
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
          "Bin Code" := WMSManagement.GetDefaultBinLocation(
            "Job No.","Service Order No.","Location Code","Item No.","Variant Code",TRUE);
      END;
      //db.en, 10-05-11: M26790
    END;

    PROCEDURE RentalFactor@11012000() : Decimal;
    BEGIN
      //**4PS
      IF ("Plant Invoice" AND ("Relate to" = "Relate to"::Rental)) THEN
        EXIT("Number of Time Units");

      IF ("Document Type" IN ["Document Type"::Quote, "Document Type"::Order,
          "Document Type"::Invoice, "Document Type"::"Credit Memo"]) AND
         (("Plant Type" <> '') OR ("Plant Set Code" <> '')) AND ("Rental Starting Date" <> 0D)
      THEN BEGIN
        IF SalesLogisticsSepaRentContract() THEN
          EXIT("Number of Time Units");
        IF (SalesHeader."Sales Document Type" = SalesHeader."Sales Document Type"::"Sales Logistics Separated") THEN
          EXIT("Number of Time Units");
      END;

      EXIT(1);
    END;

    PROCEDURE FillSystemCreatedEntry@1210190007();
    BEGIN
      //**4PS
      "System-Created Entry" :=
        ("Service Order No." <> '') OR //mg, 21-07-11
        ("Service Contract No." <> '') OR
        ("Job No." <> '') OR
        (("Plant Type" <> '') AND "Plant Invoice");

      CASE CurrFieldNo OF
        FIELDNO("Service Contract No."):
          TESTFIELD("Plant Type",'');
        FIELDNO("Service Order No."):
          TESTFIELD("Plant Type",'');
        FIELDNO("Job No."):
          TESTFIELD("Plant Type",'');
        FIELDNO("Plant Type"):
          BEGIN
            TESTFIELD("Job No.",'');
            TESTFIELD("Service Contract No.",'');
            TESTFIELD("Service Order No.",'');
          END;
      END;
    END;

    PROCEDURE GetProjTypeRevenueAccount@1210190000(InterestInstallment@1100485000 : Boolean;CalledFromCostObject@1100525000 : Boolean);
    BEGIN
      //**4PS
      IF ("Job No."  = '') OR (Type = Type::" ") THEN
        EXIT;

      ProjSetupRec.GET;
      ProjRec.GET("Job No.");
      ProjTypeRec.GET(ProjRec."Project Type");

      IF (ProjRec."Project Status" >= ProjRec."Project Status"::Finished) AND
         (ProjSetupRec."Provisions at Closure" = TRUE) THEN BEGIN

        IF (NOT ProjSetupRec."Rental Units active") OR ("Rental Unit" = '') OR ("Rental Unit Line Type" = 0) THEN BEGIN  //*C017909.c
          ProjTypeRec.TESTFIELD("Provision Account Revenue");
          "No." := ProjTypeRec."Provision Account Revenue";
        END ELSE BEGIN
          ProjTypeRec.TESTFIELD("Provision Account Rental UR");
          "No." := ProjTypeRec."Provision Account Rental UR";
        END;
      END ELSE BEGIN
        IF (NOT ProjSetupRec."Rental Units active") OR ("Rental Unit" = '') OR ("Rental Unit Line Type" = 0) THEN BEGIN  //*C017909.c
          DimMgt.GetDimValueRec(2,"Shortcut Dimension 2 Code",DimVal,FALSE,"Job No.");
          IF (DimVal."Cost Type" = DimVal."Cost Type"::Revenue) AND ("Cost Object Cost Plus Line" <> '') THEN BEGIN
            "No." := ProjTypeRec.GetWipRevenueAcc("Cost Type Cost Plus Line", InterestInstallment);
          END ELSE BEGIN
            "No." := ProjTypeRec.GetWipRevenueAcc(DimVal."Cost Type", InterestInstallment);
          END;
        END ELSE BEGIN
          CASE "Rental Unit Line Type" OF
            "Rental Unit Line Type"::ServiceCost:
              BEGIN
                ProjTypeRec.TESTFIELD("Rental Unit Service Cost Rev.");
                "No." := ProjTypeRec."Rental Unit Service Cost Rev.";
              END;
            "Rental Unit Line Type"::Utilities:
              BEGIN
                ProjTypeRec.TESTFIELD("Rental Unit Acc Utilities Rev.");
                "No." := ProjTypeRec."Rental Unit Acc Utilities Rev.";
              END;
            ELSE
              BEGIN
                ProjTypeRec.TESTFIELD("Rental Unit Account Revenue");
                "No." := ProjTypeRec."Rental Unit Account Revenue";
              END;
          END;
        END;
      END;

      IF NOT (CalledFromCostObject AND ("Service Order No." + "Service Contract No." <> '')) THEN
       VALIDATE("No.");
    END;

    PROCEDURE GetServTypeRevenueAccount@1100485000();
    VAR
      ServContract@1100485001 : Record 11012812;
      ServOrder@1100485002 : Record 11012823;
      ServType@1100485000 : Record 11012814;
      VatGrp@1100485003 : Code[20];
    BEGIN
      //**4PS
      IF ("Service Order No." + "Service Contract No." = '') OR (Type = Type::" ") THEN
        EXIT;

      IF "Service Order No." <> '' THEN BEGIN
        ServOrder.GET("Service Order No.");
        //C016204
        IF ServOrder.IsPlantServiceOrder THEN
          EXIT;
        //
        IF "Additional Cost (Service)" = TRUE THEN  //db, 06-05-08: M11815
          ServType.GET(ServOrder."Service Type (Other)")
        ELSE
          ServType.GET(ServOrder."Service Type");
        VatGrp := ServOrder."VAT Prod. Posting Group";
      END ELSE BEGIN
        ServContract.GET("Service Contract No.");
        IF "Additional Cost (Service)" = TRUE THEN  //db, 06-05-08: M11815
          ServType.GET(ServContract."Service Type (Other)")
        ELSE
          ServType.GET(ServContract."Service Type");
        VatGrp := ServContract."VAT Prod. Posting Group";
      END;

      DimMgt.GetDimValueRec(2,"Shortcut Dimension 2 Code",DimVal,FALSE,"Job No.");
      IF (DimVal."Cost Type" = DimVal."Cost Type"::Revenue) AND ("Cost Object Cost Plus Line" <> '') THEN BEGIN
        "No." := ServType.GetWipRevenueAcc("Cost Type Cost Plus Line");
      END ELSE BEGIN
        "No." := ServType.GetWipRevenueAcc(DimVal."Cost Type");
      END;

      VALIDATE("No.");
      VALIDATE("VAT Prod. Posting Group", VatGrp);  //db, 18-09-06
    END;

    PROCEDURE AccountDescription@1210190011() : Text[50];
    BEGIN
      //**4PS
      IF ("No." = '') OR (Type <> Type::"G/L Account") THEN
        EXIT('');

      GLAcc.GET("No.");
      EXIT(GLAcc.Name);
    END;

    PROCEDURE UpdateAmountLCY@1210190004();
    VAR
      Currency2@11012000 : Record 4;
    BEGIN
      //**4PS
      Currency2.InitRoundingPrecision;
      IF SalesHeader."Currency Code" <> '' THEN
        "Amount (LCY)" :=
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              1, //**4PS.n
              "Job No.", //**4PS.n
              GetDate,"Currency Code",
              "Line Amount",SalesHeader."Currency Factor",TRUE),
            Currency2."Amount Rounding Precision")
      ELSE
        "Amount (LCY)" :=
          ROUND("Line Amount",Currency2."Amount Rounding Precision");
    END;

    PROCEDURE HandleLookupUnit@1210190008();
    VAR
      ItemUnitRec@1210190000 : Record 5404;
      lvUnit@1210190001 : Code[10];
    BEGIN
      //**4PS
      lvUnit := ItemUnitRec.HandleLookupUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)");
      IF (lvUnit <> '') AND (lvUnit <> "Unit of Measure Code") THEN
        VALIDATE("Unit of Measure Code", lvUnit);
    END;

    PROCEDURE InitRecord@1210190005();
    VAR
      lvVatBusPostGroup@1100485000 : Code[10];
    BEGIN
      //**4PS
      IF "Document No." = '' THEN BEGIN
        CLEAR(SalesHeader);
        EXIT;
      END;

      SalesHeader.GET("Document Type", "Document No.");
      IF (SalesHeader.Status <> SalesHeader.Status::Open) OR
         ((SalesHeader."Document Type" IN [SalesHeader."Document Type"::Invoice, SalesHeader."Document Type"::"Credit Memo"]) AND
          (SalesHeader."Project Invoice" OR SalesHeader."Plant Invoice" OR SalesHeader."Service Invoice"))
      THEN
        EXIT;

      "Dimension Set ID" := SalesHeader."Dimension Set ID";
      IF ("Shortcut Dimension 1 Code" <> '') AND //* Can be filled by DPA
         (SalesHeader."Shortcut Dimension 1 Code" <> "Shortcut Dimension 1 Code") THEN
        ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");

      IF SalesHeader."Job No." <> '' THEN BEGIN
        ProjSetupRec.GET;
        IF ProjRec.GET(SalesHeader."Job No.") THEN BEGIN
          IF NOT ProjPrincipRec.GET(SalesHeader."Job No.", SalesHeader."Sell-to Customer No.") THEN
            ProjPrincipRec.INIT;
          IF NOT SalesHeader."Extended VAT Determination" THEN //hs, 29-10-2007
            IF (ProjPrincipRec."VAT Bus. Posting Group" <> '') THEN
              lvVatBusPostGroup := ProjPrincipRec."VAT Bus. Posting Group"
            ELSE
              lvVatBusPostGroup := ProjRec."VAT Bus. Posting Group";
          IF (ProjRec.Blocked < ProjRec.Blocked::All) AND (ProjRec."Project Type" <> '') AND (lvVatBusPostGroup <> '') THEN BEGIN
            IF "Installment Invoice" OR
               ProjPrincipRec.GET(SalesHeader."Job No.",SalesHeader."Sell-to Customer No.") THEN BEGIN
              IF "Document Type" <= "Document Type"::Order THEN BEGIN
                IF ProjRec."Project Status" < (ProjRec."Project Status"::"Technical Finished") THEN
                  VALIDATE("Job No.", SalesHeader."Job No.");
              END ELSE BEGIN
                IF (ProjSetupRec."Provisions at Closure") AND
                   (("Document Type" > "Document Type"::Order) AND
                   ("Document Type" <> "Document Type"::"Blanket Order"))
                THEN BEGIN
                  IF ProjRec."Project Status" < (ProjRec."Project Status"::Archive) THEN
                    VALIDATE("Job No.", SalesHeader."Job No.");
                END ELSE
                  IF ProjRec."Project Status" < (ProjRec."Project Status"::"Administrative Finished") THEN
                    VALIDATE("Job No.", SalesHeader."Job No.");
              END;
            END;
          END;
        END;
      END;

      IF SalesHeader."Service Order No." <> '' THEN  //db, 05-06-08
        IF ServOrderRec.GET(SalesHeader."Service Order No.") THEN
          IF "Document Type" <= "Document Type"::Order THEN
            IF ServOrderRec.Status < ServOrderRec.Status::"Technical Finished" THEN
              VALIDATE("Service Order No.", SalesHeader."Service Order No.");
    END;

    PROCEDURE DirectDelivery@1210190006() : Boolean;
    VAR
      lvCustRec@1100485000 : Record 18;
    BEGIN
      //**4PS

      //db, 11-08-05: parameter copied from Sales Setup
      GetSalesHeader;
      IF lvCustRec.GET(SalesHeader."Sell-to Customer No.") THEN
        CASE lvCustRec."Direct Delivery" OF
          lvCustRec."Direct Delivery"::No: EXIT(FALSE);
          lvCustRec."Direct Delivery"::Yes: EXIT(TRUE);
          lvCustRec."Direct Delivery"::"Yes - project/service only":
            EXIT(("Job No." <> '') OR ("Service Order No." <> ''));
        END
      ELSE BEGIN
        SalesSetup.GET;
        CASE SalesSetup."Direct Delivery" OF
          SalesSetup."Direct Delivery"::No: EXIT(FALSE);
          SalesSetup."Direct Delivery"::Yes: EXIT(TRUE);
          SalesSetup."Direct Delivery"::"Yes - project/service only":
            EXIT(("Job No." <> '') OR ("Service Order No." <> ''));
        END;
      END;
    END;

    PROCEDURE PlantRelatedInvoice@1100485001(IProjNo@1100485001 : Code[20];ISalesHeaderRec@1100485002 : Record 36) : Boolean;
    VAR
      lvProjRec@1100485000 : Record 11072003;
    BEGIN
      //**4PS
      IF ISalesHeaderRec."Plant Invoice" THEN
        EXIT(TRUE);

      IF ISalesHeaderRec."Project Invoice" AND (IProjNo <> '') THEN BEGIN
        IF lvProjRec.GET(IProjNo) THEN BEGIN
          IF (lvProjRec."Small Project" AND lvProjRec."Plant Job Order") THEN
            EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE SuspendUpdateVATAmounts@1100485002(lUpdateVATAmountsSuspended@1100485000 : Boolean);
    BEGIN
      //**4PS
      UpdateVATAmountsSuspended := lUpdateVATAmountsSuspended;
    END;

    PROCEDURE SalesLogisticsSeparated@1100485012() : Boolean;
    BEGIN
      //**4PS
      IF ("Document Type" IN ["Document Type"::Quote, "Document Type"::Order]) THEN BEGIN
        GetSalesHeader;
        IF (SalesHeader."Sales Document Type" = SalesHeader."Sales Document Type"::"Sales Logistics Separated") THEN
          EXIT(SalesLogisticsSepaRentContract());
      END;

      EXIT(FALSE);
    END;

    PROCEDURE SalesLogisticsSepaRentContract@1100485006() : Boolean;
    VAR
      PlantMgtCompRec@1100485000 : Record 11020586;
    BEGIN
      //**4PS
      //* 'Sales/logistic separated' (Rental quotes/-orders) or 'Rental Contracts'
      GetSalesHeader;
      IF (SalesHeader."Sales Document Type" = SalesHeader."Sales Document Type"::"Sales Logistics Separated") AND
         ("Document Type" IN ["Document Type"::Quote, "Document Type"::Order])
      THEN BEGIN
        IF CompanyLogistics = '' THEN BEGIN
          PlantMgtCompRec."Plant Company" := PlantMgtCompRec.GetPlantCompanySalesRental(TRUE);
          CompanyLogistics := PlantMgtCompRec."Plant Company";
        END;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE GetCompanyLogistics@1100485007() : Text[50];
    BEGIN
      //**4PS
      IF SalesLogisticsSepaRentContract THEN
        EXIT(CompanyLogistics)
      ELSE
        EXIT('');
    END;

    PROCEDURE LookupPlantType@1100485009(IEditable@1100485000 : Boolean);
    VAR
      lvPlantTypeRec@1100485001 : Record 11012551;
    BEGIN
      //**4PS.n
      IF SalesLogisticsSeparated() THEN
        lvPlantTypeRec.CHANGECOMPANY(CompanyLogistics);
      lvPlantTypeRec.Code := "Plant Type";
      IF NOT IEditable THEN
        PAGE.RUNMODAL(0, lvPlantTypeRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, lvPlantTypeRec) = ACTION::LookupOK THEN
          VALIDATE("Plant Type", lvPlantTypeRec.Code);
      END;
    END;

    PROCEDURE LookupPlantNo@1100485005(IEditable@1100485000 : Boolean);
    VAR
      lvPlantNoRec@1100485002 : Record 11012552;
    BEGIN
      //**4PS.n
      IF SalesLogisticsSeparated() THEN
        lvPlantNoRec.CHANGECOMPANY(CompanyLogistics);
      lvPlantNoRec."Plant Type" := "Plant Type";
      lvPlantNoRec."No." := "Plant No.";
      IF NOT IEditable THEN
        PAGE.RUNMODAL(0, lvPlantNoRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, lvPlantNoRec) = ACTION::LookupOK THEN
          VALIDATE("Plant No.", lvPlantNoRec."No.");
      END;
    END;

    PROCEDURE DeterminePlantNoOfTimeUnits@1100485011();
    VAR
      lvPlantLocRec@1100485001 : Record 11012554;
      lvCalcRentalPeriodsCU@1100485000 : Codeunit 11012568;
      lvRateType@1100485005 : Option;
      lvPlantType@1100485002 : Code[20];
      lvPlantNo@1100485004 : Code[10];
      lvWholeWeeks@1100485006 : Integer;
      lvRemainingDays@1100485003 : Integer;
    BEGIN
      //**4PS.n
      IF "Plant Invoice" THEN
        EXIT;

      IF ("Plant Type" = '') AND ("Plant Set Code" = '') THEN BEGIN
        "Number of Time Units" := 0;
        "Rate Type" := "Rate Type"::" ";
        EXIT;
      END;

      IF SalesLogisticsSeparated() THEN BEGIN
        lvCalcRentalPeriodsCU.SetCompany(CompanyLogistics);
        lvPlantLocRec.CHANGECOMPANY(CompanyLogistics);
      END;
      IF (SalesHeader."Plant Location Code" = '') OR (NOT lvPlantLocRec.GET(SalesHeader."Plant Location Code")) THEN
        lvPlantLocRec.INIT;

      lvPlantType := "Plant Type";
      lvPlantNo := "Plant No.";

      "Number of Time Units" :=
        lvCalcRentalPeriodsCU.NumberRentalPeriods(
          lvPlantLocRec, "Rental Starting Date", "Rental Ending Date", lvPlantType, lvPlantNo, lvRateType);
      "Rate Type" := lvRateType + 1;
      IF "Rate Type" = "Rate Type"::Week THEN BEGIN
        SalesSetup.GET;
        IF SalesSetup."Min. Days To Invoice one Week" > 0 THEN BEGIN
          //Round to whole
          lvWholeWeeks := (7 * "Number of Time Units") DIV 7;
          lvRemainingDays := ROUND((7 * "Number of Time Units") MOD 7, 1);
          IF lvRemainingDays >= SalesSetup."Min. Days To Invoice one Week" THEN
            "Number of Time Units" := lvWholeWeeks + 1
          ELSE
            "Number of Time Units" := lvWholeWeeks;
        END;
      END;

      UpdateAmounts;
    END;

    PROCEDURE GetPlantRentalRate@1100485003();
    VAR
      lvSearchRateCU@1100485002 : Codeunit 11012567;
      lvRefDate@1100485000 : Date;
      lvRate@1100485001 : Decimal;
      lvPlantLoc@1100485004 : Code[20];
    BEGIN
      //**4PS.n
      IF "Plant Invoice" THEN
        EXIT;
      IF ("Plant Type" = '') AND ("Plant Set Code" = '') THEN
        EXIT;

      GetSalesHeader;
      IF "Rental Starting Date" <> 0D THEN
        lvRefDate := "Rental Starting Date"
      ELSE
        lvRefDate := SalesHeader."Shipment Date";

      IF ("Plant Type" <> '') THEN BEGIN
        //* Function in codeunit always gives Rate in the inventory unit of the Plant.
        //* So convert to unit of sales line.
        //* Because location is probably unknown, and there are no rates per location in the sales company,
        //* add the customer number from the header. At "Sales Logistics Separated" and "Rental Contract" always
        //* external rates, therefor not add the location (you never work there with rates per location).
        lvPlantLoc := SalesHeader."Plant Location Code";
        IF (SalesHeader."Sales Document Type" = SalesHeader."Sales Document Type"::"Sales Logistics Separated") THEN
          lvPlantLoc := '';
        lvRate := lvSearchRateCU.RateWithCust(
          lvPlantLoc, SalesHeader."Sell-to Customer No.",
          "Plant Type", "Plant No.", '',lvRefDate, 0, 0, '');
        PlantQtyPerUnitOfMeasure("Unit of Measure Code");
        VALIDATE("Unit Price", lvRate * "Qty. per Unit of Measure");
      END;
    END;

    PROCEDURE GetPlantRentalDiscount@1100485023();
    VAR
      lvSearchRateCU@1100485002 : Codeunit 11012567;
      lvRefDate@1100525000 : Date;
    BEGIN
      //**4PS.n
      IF "Plant Invoice" THEN
        EXIT;
      IF ("Plant Type" = '') THEN
        EXIT;

      IF SalesLogisticsSeparated() THEN  //* 'Line discount percentage' will be used for difference between the offer amount
        EXIT;                            //* and total quote-/orderlines. So (for know) this way

      GetSalesHeader;
      IF "Rental Starting Date" <> 0D THEN
        lvRefDate := "Rental Starting Date"
      ELSE
        lvRefDate := SalesHeader."Shipment Date";

      VALIDATE("Line Discount %", lvSearchRateCU.RentalDiscount(
        SalesHeader."Plant Location Code", SalesHeader."Sell-to Customer No.", "Plant Type", "Plant No.", lvRefDate));
    END;

    PROCEDURE PlantQtyPerUnitOfMeasure@1100485008(IRateUnit@1100485000 : Code[10]);
    VAR
      lvPlantUnitsRec@1100485002 : Record 11012599;
      lvPlantTypeRec@1100485005 : Record 11012551;
    BEGIN
      //**4PS.n
      IF "Plant Type" = '' THEN
        EXIT;

      lvPlantTypeRec.GET("Plant Type");
      IF (IRateUnit = '') OR (IRateUnit = lvPlantTypeRec."Unit of Measure") THEN
        "Qty. per Unit of Measure" := 1
      ELSE BEGIN
        lvPlantUnitsRec.GET("Plant Type", IRateUnit);
        lvPlantUnitsRec.TESTFIELD("Qty. per Unit of Measure");
        "Qty. per Unit of Measure" := lvPlantUnitsRec."Qty. per Unit of Measure";
      END;
    END;

    PROCEDURE ModifyForLogisticsSeparated@1100485004();
    BEGIN
      //**4PS.n
      IF NOT ("Document Type" IN ["Document Type"::Quote, "Document Type"::Order]) THEN
        EXIT;

      IF ("Line Amount" = xRec."Line Amount") AND ("Alternative No." = xRec."Alternative No.") THEN
        EXIT;

      IF NOT CheckModifyForLogSepAllowed(TRUE) THEN
        EXIT;

      IF NOT SalesLogisticsSeparated() THEN
        EXIT;

      ResetOfferedAmount("Alternative No.");
      IF "Alternative No." <> xRec."Alternative No." THEN
        ResetOfferedAmount(xRec."Alternative No.");
    END;

    PROCEDURE CheckModifyForLogSepAllowed@1100485017(lShowError@1100485000 : Boolean) lModifyAllowed : Boolean;
    VAR
      lvPlantOrderRec@1100485001 : Record 11012556;
      lvText001@1100485002 : TextConst 'ENU=Modify orderline not allowed, plant order ''%1'' has status ''%2''.';
    BEGIN
      lModifyAllowed := TRUE;
      IF ("Document Type" = "Document Type"::Order) AND ("Arrival Order" <> '') THEN BEGIN
        IF SalesLogisticsSepaRentContract() THEN BEGIN
          lvPlantOrderRec.CHANGECOMPANY(CompanyLogistics);
          IF ("Arrival Order" <> '') THEN BEGIN
            IF lvPlantOrderRec.GET("Arrival Order") THEN BEGIN
              IF lvPlantOrderRec.Status <> lvPlantOrderRec.Status::Open THEN
                IF ("Item No." <> xRec."Item No.") OR
                   (Manufacturer <> xRec.Manufacturer) OR
                   ("Basic Item" <> xRec."Basic Item") OR
                   ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") OR
                   ("Trade Item" <> xRec."Trade Item") OR
                   ("Variant Code" <> xRec."Variant Code") OR
                   ("Plant Type" <> xRec."Plant Type") OR
                   ("Plant No." <> xRec."Plant No.") OR
                   (Type <> xRec.Type) OR
                   ("Arrival Date" <> xRec."Arrival Date") OR
                   ("Rental Starting Date" <> xRec."Rental Starting Date") OR
                   (Quantity <> xRec.Quantity) OR
                   ("Unit of Measure Code" <> xRec. "Unit of Measure Code") THEN
                BEGIN
                  lModifyAllowed := FALSE;
                  IF lShowError THEN
                    ERROR(lvText001, lvPlantOrderRec."No.", lvPlantOrderRec.Status);
                END;
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE ResetOfferedAmount@1100485024(AlternativeInt@1100485000 : Integer);
    VAR
      lvAltOfferAmountRec@1100485001 : Record 11012786;
    BEGIN
      IF lvAltOfferAmountRec.GET("Document Type","Document No.",AlternativeInt) THEN BEGIN
        IF lvAltOfferAmountRec."Offer Amount" <> 0 THEN BEGIN
          lvAltOfferAmountRec."Offer Amount" := 0;
          lvAltOfferAmountRec.MODIFY;
          MESSAGE(
            Text11012005, lvAltOfferAmountRec.FIELDCAPTION("Offer Amount"),
            FIELDCAPTION("Alternative No."),AlternativeInt);
          VALIDATE("Line Discount %", 0);
          lvAltOfferAmountRec.DistributeOfferAmounts("Document Type", "Document No.", "Line No.", FALSE, 0);
        END;
      END;
    END;

    PROCEDURE GetTranslatedPlantDesc@1100485010(MaxLen@1100529000 : Integer) : Text[50];
    VAR
      lvPlantNoRec@1100485000 : Record 11012552;
      lvPlantTypeRec@1100485003 : Record 11012551;
      lvPlantTransRec@1100485001 : Record 11012542;
    BEGIN
      //**4PS
      IF ("Plant Type" <> '') THEN BEGIN
        GetSalesHeader;
        IF (SalesHeader."Language Code" <> '') THEN
          IF "Plant No." <> '' THEN
            IF lvPlantTransRec.GET(lvPlantTransRec.Type::PlantNo,"Plant Type","Plant No.",SalesHeader."Language Code") THEN
              IF lvPlantTransRec.Translation <> '' THEN
                EXIT(COPYSTR(lvPlantTransRec.Translation, 1, MaxLen));
          IF lvPlantTransRec.GET(lvPlantTransRec.Type::PlantType,"Plant Type",'',SalesHeader."Language Code") THEN
            IF lvPlantTransRec.Translation <> '' THEN
              EXIT(COPYSTR(lvPlantTransRec.Translation, 1, MaxLen));

        IF "Plant No." <> '' THEN
          IF lvPlantNoRec.GET("Plant Type", "Plant No.") THEN
            EXIT(lvPlantNoRec.Description);

        IF lvPlantTypeRec.GET("Plant Type") THEN
          EXIT(lvPlantTypeRec.Description);
      END;

      EXIT('');
    END;

    PROCEDURE CheckSellBillToCustomer@1100485013();
    BEGIN
      //**4PS
      GetSalesHeader;
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::Quote THEN BEGIN
        IF (SalesHeader."Sell-to Customer No." = '') AND
           (SalesHeader."Sell-to Contact No." = '') AND
           (SalesHeader."Sell-to Customer Template Code" = '')
        THEN
          ERROR(
            Text031,
            SalesHeader.FIELDCAPTION("Sell-to Customer No."),
            SalesHeader.FIELDCAPTION("Sell-to Contact No."),
            SalesHeader.FIELDCAPTION("Sell-to Customer Template Code"));
        IF (SalesHeader."Bill-to Customer No." = '') AND
           (SalesHeader."Bill-to Contact No." = '') AND
           (SalesHeader."Bill-to Customer Template Code" = '')
        THEN
          ERROR(
            Text031,
            SalesHeader.FIELDCAPTION("Bill-to Customer No."),
            SalesHeader.FIELDCAPTION("Bill-to Contact No."), //**4PS.n
            SalesHeader.FIELDCAPTION("Bill-to Customer Template Code"));
      END ELSE
        IF NOT PlantRelatedInvoice(SalesHeader."Job No.", SalesHeader) THEN
          SalesHeader.TESTFIELD("Sell-to Customer No.");

      "Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
    END;

    PROCEDURE PlantOrderIsProcessed@1100485018(iShowError@1100485001 : Boolean) : Boolean;
    VAR
      lvPlantOrderRec@1100485000 : Record 11012556;
    BEGIN
      //**4PS
      IF ("Document Type" = "Document Type"::Order) AND (Type <> Type::" ") THEN
        IF SalesLogisticsSeparated THEN
          IF "Arrival Order" <> '' THEN BEGIN
            lvPlantOrderRec.CHANGECOMPANY(GetCompanyLogistics);
            IF lvPlantOrderRec.GET("Arrival Order") THEN
              IF lvPlantOrderRec.Status <> lvPlantOrderRec.Status::Open THEN
                IF iShowError THEN
                  ERROR(Text11012006, "Line No.")
                ELSE
                  EXIT(TRUE);
          END;

      EXIT(FALSE);
    END;

    PROCEDURE ItemIsRemovalOnly@1100485019() : Boolean;
    VAR
      lvRemovalItemRec@1100485000 : Record 11012545;
    BEGIN
      IF "Item No." = '' THEN
        EXIT(FALSE);

      EXIT(lvRemovalItemRec.GET("Item No."));
    END;

    PROCEDURE GetSurchargePerc@1100485020() : Decimal;
    VAR
      ServContractRec@1100485000 : Record 11012812;
      CustRec@1100485001 : Record 18;
      ProjPrincipalRec@1100485002 : Record 11012005;
    BEGIN
      //** 4PS07.n

      IF "Service Order No." <> '' THEN BEGIN
        ServOrderRec.GET("Service Order No.");
        IF ServContractRec.GET(ServOrderRec."Service Contract No.") THEN
          EXIT(ServContractRec."Surcharge % Material");

        IF CustRec.GET("Bill-to Customer No.") THEN
          EXIT(CustRec."Surcharge % Material");

      END ELSE BEGIN
        IF ProjPrincipalRec.GET("Job No.","Sell-to Customer No.") THEN
          EXIT(ProjPrincipalRec."Surcharge % Material");
      END;
      EXIT("Surcharge %");
    END;

    PROCEDURE CheckCostCompServOrderType@1100485021();
    VAR
      lvCostCompRec@1100485000 : Record 11012012;
    BEGIN
      //**4PS
      DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimVal, FALSE, "Job No.");
      lvCostCompRec.CheckDefaultCostComponent("Service Order No.", "Cost Component", '', DimVal."Cost Type",
        "Additional Cost (Service)");  //db, 24-02-10
    END;

    PROCEDURE GetReferenceData@1100485022(VAR lvRefDate@1100485000 : Date;VAR lvDiscRef1@1100485001 : Code[20];VAR lvDiscRef2@1100485002 : Code[20]);
    BEGIN
      //**4PS
      IF "Service Order No." <>'' THEN BEGIN
        ServOrderRec.GET("Service Order No.");
        lvRefDate := ValidateCu.GetRefDateServOrder(ServOrderRec);
      //  lvDiscRef1 := ServOrderRec."Purch Discount Term Group 1";
      //  lvDiscRef2 := ServOrderRec."Purch Discount Term Group 2";
      END ELSE BEGIN
        IF "Job No." <>'' THEN BEGIN
          ProjRec.GET("Job No.");
          lvRefDate := ValidateCu.GetRefDateProject(ProjRec);
          lvDiscRef1 := ProjRec."Purch Discount Term Group 1";
          lvDiscRef2 := ProjRec."Purch Discount Term Group 2";
        END;
      END;
    END;

    PROCEDURE LinePrice@1100525000() : Decimal;
    BEGIN
      //**4PS05.n
      IF Quantity = 0 THEN
        EXIT("Line Amount")
      ELSE
        EXIT("Line Amount"/Quantity);
    END;

    PROCEDURE CheckAdditionalCostService@1100525006();
    BEGIN
      //**4PS
      //db, 24-02-10
      IF "Service Order No." = '' THEN EXIT;
      IF NOT ServOrderRec.GET("Service Order No.") THEN EXIT;

      IF (CurrFieldNo = FIELDNO("Service Order No.")) OR (CurrFieldNo = FIELDNO("Shortcut Dimension 2 Code")) THEN BEGIN
        IF xRec."Shortcut Dimension 2 Code" = '' THEN
          xRec."Cost Type":= -1  //db, 16-03-10: disable default option
        ELSE
          xRec.CALCFIELDS("Cost Type");
        CALCFIELDS("Cost Type");
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Cost Type" <> xRec."Cost Type") THEN BEGIN
          "Additional Cost (Service)" :=
            ServOrderRec.GetAdditionalCostService("Service Order No.","Shortcut Dimension 2 Code","Cost Type"+1,'');
        END;
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Additional Cost (Service)" <> xRec."Additional Cost (Service)") THEN BEGIN
          IF "Additional Cost (Service)" = TRUE THEN BEGIN
            ServTypeRec.GET(ServOrderRec."Service Type (Other)");
            ServTypeRec.TESTFIELD("WIP Account Revenue");
            VALIDATE("No.", ServTypeRec."WIP Account Revenue");
            VALIDATE("Shortcut Dimension 1 Code", ServOrderRec."Department Code (Other)")
          END ELSE BEGIN
            ServTypeRec.GET(ServOrderRec."Service Type");
            ServTypeRec.TESTFIELD("WIP Account Revenue");
            VALIDATE("No.", ServTypeRec."WIP Account Revenue");
            VALIDATE("Shortcut Dimension 1 Code", ServOrderRec."Global Dimension 1 Code");
          END;
        END;
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Cost Type" <> xRec."Cost Type") THEN BEGIN
          VALIDATE("Cost Component");
        END;
      END;
    END;

    PROCEDURE ValidateAdditionalCost@1100525002();
    VAR
      CostCompRec@1100525001 : Record 11012012;
      SaveCostComp@1100525000 : Text[30];
      SaveDesc@1100525002 : Text[50];
    BEGIN
      //**4PS
      SaveCostComp := "Cost Component";
      SaveDesc := Description;
      TESTFIELD("Service Order No.");
      VALIDATE("Service Order No.");
      Description := SaveDesc;
      IF CurrFieldNo <> FIELDNO("Additional Cost (Service)") THEN EXIT;  //db, 18-03-10: T4641

      IF CostCompRec.GET(SaveCostComp) THEN BEGIN
         "Cost Component" := SaveCostComp;
         IF ("Additional Cost (Service)" = TRUE) THEN BEGIN
           IF (CostCompRec."Cost Component (Add.Cost)" <> '') THEN
             "Cost Component" := CostCompRec."Cost Component (Add.Cost)";
         END ELSE BEGIN
           CostCompRec.SETRANGE("Cost Component (Add.Cost)", SaveCostComp);
           IF CostCompRec.FINDSET THEN BEGIN
             REPEAT
               IF (CostCompRec."Cost Component (Add.Cost)" = SaveCostComp) THEN
                 "Cost Component" := CostCompRec.Code;
             UNTIL CostCompRec.NEXT = 0;
           END;
         END;
      END;
    END;

    PROCEDURE ValidateCostComponent@1100525001();
    VAR
      CostCompRec@1100525000 : Record 11012012;
      CostCompRec2@1100525001 : Record 11012012;
    BEGIN
      //**4PS
      IF CurrFieldNo <> FIELDNO("Cost Component") THEN EXIT;  //db, 18-03-10: T4642

      IF CostCompRec.GET("Cost Component") THEN BEGIN
        //db.sn, 06-12-10: M24263
        IF CostCompRec."Additional Cost (Service)" THEN BEGIN
          CostCompRec2.SETRANGE("Cost Component (Add.Cost)", "Cost Component");
          IF NOT CostCompRec2.FINDFIRST THEN EXIT;
        END ELSE BEGIN
          IF CostCompRec."Cost Component (Add.Cost)" = '' THEN EXIT;
        END;
        //db.en, 06-12-10: M24263
        "Additional Cost (Service)" := CostCompRec."Additional Cost (Service)";
      END;
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(37) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 37');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Sales Line", "Shortcut Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Shortcut Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Shortcut Dimension 1 Code");
    END;

    PROCEDURE ChangeQuantityExplodedLines@1100525004(QuantityFactor@1100525000 : Decimal);
    VAR
      SalesLine2@1100525001 : Record 37;
    BEGIN
      //**4PS
      SalesLine2.RESET;
      SalesLine2.SETRANGE("Document Type","Document Type");
      SalesLine2.SETRANGE("Document No.","Document No.");
      SalesLine2.SETRANGE("Part of Line","Line No.");
      SalesLine2.SETFILTER("Line No.", '<>%1', "Line No.");
      IF SalesLine2.FINDSET(TRUE, FALSE) THEN
        REPEAT
          IF NOT ((SalesLine2.Type = SalesLine2.Type::" ") AND (SalesLine2."Original Quantity" = 0)) THEN BEGIN
            IF SalesLine2.Type = SalesLine2.Type::" " THEN BEGIN
              SalesLine2.ChangeQuantityExplodedLines(QuantityFactor);
              SalesLine2."Original Quantity" := QuantityFactor * SalesLine2."Original Quantity";
            END ELSE
              SalesLine2.VALIDATE(Quantity, QuantityFactor * SalesLine2.Quantity);
            SalesLine2.MODIFY;
          END;
        UNTIL SalesLine2.NEXT = 0;
    END;

    PROCEDURE DetermineBOMLevel@1100525005(LineNo@1100525000 : Integer;VAR BOMLevel@1100525002 : Integer);
    VAR
      SalesLine3@1100525001 : Record 37;
    BEGIN
      //**4PS
      SalesLine3.SETRANGE("Document Type","Document Type");
      SalesLine3.SETRANGE("Document No.","Document No.");
      SalesLine3.SETRANGE("Line No.",LineNo);
      IF SalesLine3.FINDFIRST THEN
        BOMLevel := SalesLine3."Level BOM" + 1;
    END;

    PROCEDURE GetCustomerName@1100528300() : Text[50];
    VAR
      Customer@1100528300 : Record 18;
    BEGIN
      //**4PS.n
      IF (Customer.GET("Sell-to Customer No.")) THEN
        EXIT(Customer.Name);

      EXIT('');
    END;

    PROCEDURE GetUoMDescription@1100528301() : Text[10];
    VAR
      UnitOfMeasure@1100528300 : Record 204;
    BEGIN
      //**4PS.n
      IF (UnitOfMeasure.GET("Unit of Measure Code")) THEN
        EXIT(UnitOfMeasure.Description);

      EXIT('');
    END;

    PROCEDURE GetCurrencyDescription@1100528302() : Text[30];
    VAR
      Currency@1100528300 : Record 4;
    BEGIN
      //**4PS.n
      IF (Currency.GET("Currency Code")) THEN
        EXIT(Currency.Description);

      EXIT('');
    END;

    PROCEDURE GetReturnReasonCodeDescription@1100528303() : Text[30];
    VAR
      ReturnReason@1100528300 : Record 6635;
    BEGIN
      //**4PS.n
      IF (ReturnReason.GET("Return Reason Code")) THEN
        EXIT(ReturnReason.Description);

      EXIT('');
    END;

    LOCAL PROCEDURE CheckIfItemIsBlocked@1100528304(Item@1100528300 : Record 27);
    BEGIN
      //**4PS.n
      IF "Document Type" IN ["Document Type"::Quote, "Document Type"::Order, "Document Type"::"Blanket Order",
         "Document Type"::"Return Order"]
      THEN
        Item.TESTFIELD("Sales Blocked",FALSE);

      Item.TESTFIELD(Blocked,FALSE);
    END;

    PROCEDURE NSItemExists@1100528601(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      Item2@1001 : Record 27;
    BEGIN
      //**4PS DP00121
      IF Type = Type::"G/L Account" THEN
        IF Item2.GET(ItemNo) THEN
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE CopyRecipe@1100525012();
    VAR
      BaseRecipe@1100525001 : Record 11020581;
      BaseRecipeLine@1100525003 : Record 11020582;
      SalesRecipe@1100525002 : Record 11229788;
      SalesRecipeLine@1100525006 : Record 11229789;
      ChildRcp@1100525000 : Boolean;
      TmpChrgRec@1100525005 : TEMPORARY Record 11229771;
      ChrgPresent@1100525004 : Boolean;
    BEGIN
      //**4PS DP00481
      BaseRecipe.GET("Recipe Group",Recipe);

      IF SalesRecipe.GET("Document Type", "Document No.", "Line No.", "Recipe Group", Recipe) THEN
        SalesRecipe.DELETE(TRUE);

      SalesRecipe.TRANSFERFIELDS(BaseRecipe);
      SalesRecipe."Sales Document Type" := "Document Type";
      SalesRecipe."Sales Document No." := "Document No.";
      SalesRecipe."Sales Line No." := "Line No.";
      SalesRecipe."Recipe Group" := "Recipe Group";
      SalesRecipe."No." := Recipe;
      SalesRecipe.INSERT(TRUE);

      BaseRecipeLine.SETRANGE("Recipe Group","Recipe Group");
      BaseRecipeLine.SETRANGE(Recipe,Recipe);
      IF BaseRecipeLine.FINDSET(FALSE, FALSE) THEN
        REPEAT
          CopyRecipeLine(TmpChrgRec, ChrgPresent, BaseRecipeLine, ChildRcp, SalesRecipe,SalesRecipeLine);
        UNTIL BaseRecipeLine.NEXT = 0;

      IF ChrgPresent THEN
        SalesRecipeLine.CheckRecipeCharge2(TmpChrgRec);  //db, 16-06-10: M19367

      IF ChildRcp THEN
        ExplodeRecipe;

      SalesRecipe.CALCFIELDS("Sales Amount", "Cost Amount");
      VALIDATE("Unit Price", SalesRecipe."Sales Amount");
      VALIDATE("Unit Cost (LCY)",  SalesRecipe."Cost Amount");
    END;

    PROCEDURE CopyRecipeLine@1210190019(VAR TmpChrgRec@1100525006 : Record 11229771;VAR ChrgPresent@1100525005 : Boolean;BaseRecipeLine@1100525000 : Record 11020582;VAR ChildRcp@1210190001 : Boolean;VAR SalesRecipe@1100525002 : Record 11229788;VAR SalesRecipeLine@1100525007 : Record 11229789);
    VAR
      TestRecipeLine@1100525001 : Record 11229789;
      ChrgRec1@1100525004 : Record 11229771;
    BEGIN
      //**4PS DP00481
      SalesRecipeLine.SetSkipCalculateTotals(TRUE);

      SalesRecipeLine.TRANSFERFIELDS(BaseRecipeLine);

      SalesRecipeLine."Sales Document Type" := SalesRecipe."Sales Document Type";
      SalesRecipeLine."Sales Document No." :=  SalesRecipe."Sales Document No.";
      SalesRecipeLine."Sales Line No." := SalesRecipe."Sales Line No.";
      SalesRecipeLine."Recipe Group" := SalesRecipe."Recipe Group";
      SalesRecipeLine.Recipe := SalesRecipe."No.";

      SalesRecipeLine."Line No." := BaseRecipeLine."Line No.";

      SalesRecipeLine."Purchase Route Reference" := '';

      IF SalesRecipeLine."Trade Item" <> '' THEN BEGIN
        IF SalesRecipeLine."Price Agreement" = FALSE THEN
          SalesRecipeLine."Trade Item" := '';
        SalesRecipeLine.VALIDATE("Trade Item", BaseRecipeLine."Trade Item");
      END ELSE BEGIN
        IF SalesRecipeLine."Basic Item" <> '' THEN BEGIN
          IF SalesRecipeLine."Price Agreement" = FALSE THEN
            SalesRecipeLine."Basic Item" := '';
          SalesRecipeLine.VALIDATE("Basic Item", BaseRecipeLine."Basic Item");
        END ELSE BEGIN
          IF SalesRecipeLine."Item No." <> '' THEN BEGIN
            IF SalesRecipeLine."Price Agreement" = FALSE THEN
              SalesRecipeLine."Item No." := '';
            SalesRecipeLine.VALIDATE("Item No.", BaseRecipeLine."Item No.");
          END;
        END;
      END;

      TestRecipeLine := SalesRecipeLine;
      SalesRecipeLine.VALIDATE("Unit of Measure", BaseRecipeLine."Unit of Measure");
      IF TestRecipeLine."Unit of Measure" <> SalesRecipeLine."Unit of Measure" THEN BEGIN
        SalesRecipeLine.CheckItemUnitConversion(SalesRecipeLine, TestRecipeLine);
        SalesRecipeLine.VALIDATE(Quantity, BaseRecipeLine.Quantity);
      END;

      SalesRecipeLine.VALIDATE("Rate Code");
      IF BaseRecipeLine."Sub Operation Code" <> '' THEN
        SalesRecipeLine."Sub Operation Code" := BaseRecipeLine."Sub Operation Code";
      SalesRecipeLine.VALIDATE("Sub Operation Code");
      SalesRecipeLine."Cost Object Price" := BaseRecipeLine."Cost Object Price";
      SalesRecipeLine.Description := BaseRecipeLine.Description;
      SalesRecipeLine."Cost Component" := BaseRecipeLine."Cost Component";
      SalesRecipeLine.InitAdjustmentFactor;
      IF SalesRecipeLine."Item No." + SalesRecipeLine."Basic Item" + SalesRecipeLine."Trade Item" = '' THEN BEGIN
        IF BaseRecipeLine."Purchase Discount %" <> 0 THEN
          SalesRecipeLine.VALIDATE("Purchase Discount %", BaseRecipeLine."Purchase Discount %");
        IF BaseRecipeLine."Sales Discount %" <> 0 THEN
          SalesRecipeLine.VALIDATE("Sales Discount %", BaseRecipeLine."Sales Discount %");
      END;

      SalesRecipeLine.SetSkipCalculateTotals(FALSE);
      SalesRecipeLine.CalculateTotals;

      SalesRecipeLine.INSERT;

      IF SalesRecipeLine."Recipe (Child)" <> '' THEN
        ChildRcp := TRUE;

      //Search origanal Surcharge Line :
      IF BaseRecipeLine."Surcharge Type" <> BaseRecipeLine."Surcharge Type"::" " THEN BEGIN  //db, 08-06-10: M19367
        //Call 23762.sn
        //IF UseTempTables THEN BEGIN  DP00481 not required
        //  TmpStdChrgRec.RESET;
        //  TmpStdChrgRec.SETRANGE("Recipe Group", StdRcpLineRec."Recipe Group");
        //  TmpStdChrgRec.SETRANGE(Recipe, StdRcpLineRec.Recipe);
        //  TmpStdChrgRec.SETRANGE("Surcharge Line", StdRcpLineRec."Line No.");
        //  IF TmpStdChrgRec.FINDSET THEN
        //    REPEAT
        //      CopyChrgLine(TmpStdChrgRec, TmpChrgRec, ChrgPresent);
        //    UNTIL TmpStdChrgRec.NEXT = 0;
        //END ELSE BEGIN
        //Call 23762.en
          //Call 23762 ChrgRec1.SETCURRENTKEY("Recipe Group", Recipe);  //db, 31-05-10: M19367
          ChrgRec1.SETFILTER("Estimate No.", '%1', '');
          ChrgRec1.SETFILTER("Sub-Estimate No.", '%1', '');
          ChrgRec1.SETFILTER("Part Group", '%1', '');
          ChrgRec1.SETFILTER(Part, '%1', '');
          ChrgRec1.SETRANGE("Recipe Line", 0);
          ChrgRec1.SETFILTER("Sales Document No.", '%1', '');
          ChrgRec1.SETRANGE("Recipe Group", BaseRecipeLine."Recipe Group");
          ChrgRec1.SETRANGE(Recipe, BaseRecipeLine.Recipe);
          ChrgRec1.SETRANGE("Surcharge Line", BaseRecipeLine."Line No.");
          IF ChrgRec1.FINDSET(FALSE, FALSE) THEN
            REPEAT
              CopyChrgLine(ChrgRec1, TmpChrgRec, ChrgPresent);
            UNTIL ChrgRec1.NEXT = 0;
        //END;
      END;
    END;

    PROCEDURE CopyChrgLine@1210190017(StdChrgRec@1210190003 : Record 11229771;VAR TmpChrgRec@1210190001 : Record 11229771;VAR ChrgPresent@1210190000 : Boolean);
    VAR
      ChrgRec2@1210190002 : Record 11229771;
    BEGIN
      ChrgRec2.INIT;
      ChrgRec2."Estimate No." := '';
      ChrgRec2."Sub-Estimate No." := '';
      ChrgRec2."Part Group" := '';
      ChrgRec2.Part := '';
      ChrgRec2."Recipe Group" := "Recipe Group";
      ChrgRec2.Recipe := Recipe;
      ChrgRec2."Recipe Line" := 0;
      ChrgRec2."Sales Document Type" := "Document Type";
      ChrgRec2."Sales Document No." := "Document No.";
      ChrgRec2."Sales Line No." := "Line No.";
      ChrgRec2."Basic Line" := StdChrgRec."Basic Line";
      ChrgRec2."Surcharge Line" := StdChrgRec."Surcharge Line";
      ChrgRec2.INSERT;
      //db.sn, 16-06-10: M19367
      ChrgPresent := TRUE;
      TmpChrgRec := ChrgRec2;
      TmpChrgRec.INSERT;
      //db.en, 16-06-10: M19367
    END;

    PROCEDURE ExplodeRecipe@1100525015();
    VAR
      SalesRecipeLine@1100485004 : Record 11229789;
      EstChrgRec@1100525000 : Record 11229771;
      LastLino@1100485000 : Integer;
      CurrLevel@1100485001 : Integer;
    BEGIN
      //**4PS DP00481
      TmpSalesRecipeLine.DELETEALL;
      TmpChrgRec.DELETEALL;
      TmpSalesRecipeLine.RESET;

      CurrLevel := -1;
      LastLino := 0;

      SalesRecipeLine.SETRANGE("Sales Document Type", "Document Type");
      SalesRecipeLine.SETRANGE("Sales Document No.", "Document No.");
      SalesRecipeLine.SETRANGE("Sales Line No.", "Line No.");
      SalesRecipeLine.SETRANGE("Recipe Group", "Recipe Group");
      SalesRecipeLine.SETRANGE(Recipe, Recipe);

      IF SalesRecipeLine.FINDSET THEN BEGIN
        SalesRecipeLine.SetFromEstimateLineDelete(TRUE);
        REPEAT
          IF (SalesRecipeLine."Recipe (Child)" = '') OR (SalesRecipeLine."Recipe Exploded") THEN BEGIN  //db, 08-05-15: C023235
            TmpSalesRecipeLine.TRANSFERFIELDS(SalesRecipeLine);
            TmpSalesRecipeLine."Line No." := LastLino + 10000;
            LastLino := TmpSalesRecipeLine."Line No.";
            TmpSalesRecipeLine.INSERT;
          END ELSE BEGIN
            ProcessRecipeChild(SalesRecipeLine."Recipe Group (Child)", SalesRecipeLine."Recipe (Child)",
              SalesRecipeLine.Quantity, LastLino, CurrLevel, SalesRecipeLine);
          END;
          SalesRecipeLine.DELETE(TRUE);
        UNTIL SalesRecipeLine.NEXT = 0;
      END;

      IF TmpChrgRec.FIND('-') THEN BEGIN
        REPEAT
          EstChrgRec := TmpChrgRec;
          EstChrgRec.INSERT;
        UNTIL TmpChrgRec.NEXT = 0;
      END;

      IF TmpSalesRecipeLine.FIND('-') THEN BEGIN
        REPEAT
          SalesRecipeLine := TmpSalesRecipeLine;
          SalesRecipeLine."Recipe Group" := "Recipe Group";
          SalesRecipeLine.Recipe := Recipe;
          IF TmpSalesRecipeLine."Rate Code" <> '' THEN
            SalesRecipeLine.VALIDATE("Rate Code", TmpSalesRecipeLine."Rate Code");
          //db.sn, 28-10-13: DP00381
          //SalesRecipeLine."Recipe Group (Child)" := '';
          //SalesRecipeLine."Recipe (Child)" := '';
          SalesRecipeLine.UpdateSalesQuantity;
          SalesRecipeLine.UpdateSalesNorm;
          //db.en, 28-10-13: DP00381

          SalesRecipeLine.DetermineNormGroup;
          SalesRecipeLine.VALIDATE("Sub Operation Code");

          SalesRecipeLine.CalculateTotals;
          SalesRecipeLine.INSERT;
          IF SalesRecipeLine."Surcharge Type" <> SalesRecipeLine."Surcharge Type"::" " THEN
            SalesRecipeLine.CheckRecipeCharge;

        UNTIL TmpSalesRecipeLine.NEXT = 0;
        //CalculateTotals;  //DP00381
      END;
    END;

    PROCEDURE ProcessRecipeChild@1100525016(iRcpGrp@1100485000 : Code[20];iRcp@1100485001 : Code[20];iQuan@1100485004 : Decimal;VAR LastLino@1100485005 : Integer;VAR varLevel@1100485006 : Integer;SalesRecipeLine@1100485007 : Record 11229789);
    VAR
      RcpRec@1100485002 : Record 11020581;
      BaseRecipeLine2@1100485003 : Record 11020582;
      ChrgRec1@1100525000 : Record 11229771;
      ChrgRec2@1100525001 : Record 11229771;
      TmpLineRec@1100525002 : TEMPORARY Record 11020582;
      HeaderLine@1100525003 : Integer;
    BEGIN
      //**4PS DP00481
      varLevel := varLevel + 1;
      IF RcpRec.GET(iRcpGrp, iRcp) THEN BEGIN
        TmpSalesRecipeLine.INIT;

        TmpSalesRecipeLine."Sales Document Type" := SalesRecipeLine."Sales Document Type";
        TmpSalesRecipeLine."Sales Document No." :=  SalesRecipeLine."Sales Document No.";
        TmpSalesRecipeLine."Sales Line No." := SalesRecipeLine."Sales Line No.";
        TmpSalesRecipeLine."Recipe Group" := SalesRecipeLine."Recipe Group";
        TmpSalesRecipeLine.Recipe := SalesRecipeLine.Recipe;

        TmpSalesRecipeLine."Line No." := LastLino + 10000;
        LastLino := TmpSalesRecipeLine."Line No.";

        HeaderLine := TmpSalesRecipeLine."Line No.";
        TmpSalesRecipeLine."Recipe Group (Child)" := iRcpGrp;
        TmpSalesRecipeLine."Recipe (Child)" := iRcp;
        TmpSalesRecipeLine."Recipe Header" := TRUE;
        TmpSalesRecipeLine."Recipe Exploded" := TRUE;  //db, 28-10-13: DP00381
        TmpSalesRecipeLine."Recipe Level" := varLevel;
        TmpSalesRecipeLine.Description := RcpRec.Description;
        TmpSalesRecipeLine."Unit of Measure" := RcpRec."Unit of Measure";

        TmpSalesRecipeLine.VALIDATE("Rate Code", '');
        IF TmpSalesRecipeLine.INSERT THEN
          TmpSalesRecipeLine.Quantity := 0;
        TmpSalesRecipeLine.Quantity := TmpSalesRecipeLine.Quantity + iQuan;
        TmpSalesRecipeLine."Ignore Recipe Quantity" := SalesRecipeLine."Ignore Recipe Quantity";
        TmpSalesRecipeLine.MODIFY;
      END;

      BaseRecipeLine2.SETRANGE("Recipe Group", iRcpGrp);
      BaseRecipeLine2.SETRANGE(Recipe, iRcp);
      IF BaseRecipeLine2.FINDSET THEN BEGIN
        REPEAT
          TmpSalesRecipeLine.TRANSFERFIELDS(BaseRecipeLine2);

          TmpSalesRecipeLine."Sales Document Type" := SalesRecipeLine."Sales Document Type";
          TmpSalesRecipeLine."Sales Document No." :=  SalesRecipeLine."Sales Document No.";
          TmpSalesRecipeLine."Sales Line No." := SalesRecipeLine."Sales Line No.";
          TmpSalesRecipeLine."Recipe Group" := SalesRecipeLine."Recipe Group";
          TmpSalesRecipeLine.Recipe := SalesRecipeLine.Recipe;

          IF BaseRecipeLine2."Recipe (Child)" <> '' THEN BEGIN
            IF NOT TmpSalesRecipeLine."Ignore Recipe Quantity" THEN
              ProcessRecipeChild(BaseRecipeLine2."Recipe Group (Child)", BaseRecipeLine2."Recipe (Child)",
                iQuan * BaseRecipeLine2.Quantity, LastLino, varLevel, SalesRecipeLine)
            ELSE
              ProcessRecipeChild(BaseRecipeLine2."Recipe Group (Child)", BaseRecipeLine2."Recipe (Child)",
                BaseRecipeLine2.Quantity, LastLino, varLevel, SalesRecipeLine);
          END ELSE BEGIN
            TmpSalesRecipeLine."Recipe Group" := SalesRecipeLine."Recipe Group";
            TmpSalesRecipeLine.Recipe := SalesRecipeLine.Recipe;
            TmpSalesRecipeLine."Line No." := LastLino + 10000;
            LastLino := TmpSalesRecipeLine."Line No.";
            TmpSalesRecipeLine."Attached to Line No." := HeaderLine;
            TmpSalesRecipeLine."Recipe Group (Child)" := iRcpGrp;
            TmpSalesRecipeLine."Recipe (Child)" := iRcp;
            TmpSalesRecipeLine."Recipe Header" := FALSE;
            TmpSalesRecipeLine."Recipe Level" := varLevel + 1;
            IF TmpSalesRecipeLine.INSERT THEN
              TmpSalesRecipeLine.Quantity := 0;
            IF BaseRecipeLine2."Surcharge Type" <> BaseRecipeLine2."Surcharge Type"::" " THEN
              BaseRecipeLine2.Quantity := BaseRecipeLine2.Quantity * BaseRecipeLine2."Surcharge %"/100;
            IF NOT TmpSalesRecipeLine."Ignore Recipe Quantity" THEN
              TmpSalesRecipeLine.Quantity := TmpSalesRecipeLine.Quantity + iQuan * BaseRecipeLine2.Quantity
            ELSE
              TmpSalesRecipeLine.Quantity := TmpSalesRecipeLine.Quantity + BaseRecipeLine2.Quantity;
            TmpSalesRecipeLine."Ignore Recipe Quantity" :=
              TmpSalesRecipeLine."Ignore Recipe Quantity" OR SalesRecipeLine."Ignore Recipe Quantity";
            TmpSalesRecipeLine.MODIFY;

            //zoek oorspronkelijke toeslagregel:
            IF BaseRecipeLine2."Surcharge Type" = BaseRecipeLine2."Surcharge Type"::" " THEN BEGIN
              TmpLineRec := BaseRecipeLine2;
              TmpLineRec.Quantity := LastLino;
              TmpLineRec.INSERT;
            END ELSE BEGIN
              ChrgRec1.SETCURRENTKEY("Recipe Group", Recipe);
              ChrgRec1.SETFILTER("Estimate No.", '%1', '');
              ChrgRec1.SETFILTER("Sub-Estimate No.", '%1', '');
              ChrgRec1.SETFILTER("Part Group", '%1', '');
              ChrgRec1.SETFILTER(Part, '%1', '');
              ChrgRec1.SETRANGE("Recipe Line", 0);
              ChrgRec1.SETFILTER("Sales Document No.",'%1', '');
              ChrgRec1.SETRANGE("Recipe Group", BaseRecipeLine2."Recipe Group");
              ChrgRec1.SETRANGE(Recipe, BaseRecipeLine2.Recipe);
              ChrgRec1.SETRANGE("Surcharge Line", BaseRecipeLine2."Line No.");
              IF ChrgRec1.FINDSET(FALSE, FALSE) THEN BEGIN
                REPEAT
                  ChrgRec2.INIT;
                  ChrgRec2."Sales Document Type" := SalesRecipeLine."Sales Document Type";
                  ChrgRec2."Sales Document No." :=  SalesRecipeLine."Sales Document No.";
                  ChrgRec2."Sales Line No." := SalesRecipeLine."Sales Line No.";
                  ChrgRec2."Recipe Group" := SalesRecipeLine."Recipe Group";
                  ChrgRec2.Recipe := SalesRecipeLine.Recipe;
                  TmpLineRec.SETRANGE("Line No.", ChrgRec1."Basic Line");
                  IF TmpLineRec.FINDFIRST THEN
                    ChrgRec2."Basic Line" := TmpLineRec.Quantity
                  ELSE
                    ChrgRec2."Basic Line" := 0;
                  ChrgRec2."Surcharge Line" := TmpSalesRecipeLine."Line No.";
                  //db.sn, 28-03-11: M26527
                  //ChrgRec2.INSERT;
                  TmpChrgRec := ChrgRec2;
                  IF NOT TmpChrgRec.INSERT THEN BEGIN
                    TmpChrgRec := ChrgRec2;
                  END;
                  //db.en, 28-03-11: M26527
                UNTIL ChrgRec1.NEXT = 0;
              END;
            END;

          END;
        UNTIL BaseRecipeLine2.NEXT = 0;
      END;
      varLevel := varLevel - 1;
    END;

    PROCEDURE EditSalesRecipe@1100525007();
    VAR
      SalesRecipeCard@1100525000 : Page 11125077;
      SalesRecipe@1100525001 : Record 11229788;
    BEGIN
      IF SalesRecipe.GET("Document Type", "Document No.", "Line No.", "Recipe Group", Recipe) THEN BEGIN
        SalesRecipeCard.SETTABLEVIEW(SalesRecipe);
        SalesRecipeCard.SETRECORD(SalesRecipe);
        SalesRecipeCard.EDITABLE(TRUE);
        SalesRecipeCard.RUNMODAL;
      END;

      SalesRecipe.CALCFIELDS("Sales Amount", "Cost Amount");
      VALIDATE("Unit Price", SalesRecipe."Sales Amount");
      VALIDATE("Unit Cost (LCY)",  SalesRecipe."Cost Amount");
    END;

    PROCEDURE IsConsumptionInvoice@1100528800(ISalesLine@1100528800 : Record 37) : Boolean;
    BEGIN
      GetSalesHeader;
      IF SalesHeader."Consumption Invoice" = TRUE THEN
        EXIT(TRUE);
    END;

    PROCEDURE GetServiceObjectGroup@1100528600() : Code[10];
    VAR
      ServiceObject@1100528600 : Record 11071691;
    BEGIN
      IF NOT "Service Invoice" THEN
        EXIT;
      IF "Object No." = '' THEN
        EXIT;
      IF NOT ServiceObject.GET("Object No.") THEN
        ServiceObject.INIT;
      ServiceObject.CALCFIELDS("Object Group");
      EXIT(ServiceObject."Object Group");
    END;

    PROCEDURE CheckSubsequentSalesLines@1100528602(VAR ISalesLine@1100528600 : Record 37);
    VAR
      SalesHeader@1100528605 : Record 36;
      SalesLine@1100528602 : Record 37;
      SalesLine2@1100528601 : Record 37;
      OrigSalesLine@1100528603 : Record 37;
      LastLineNoChecked@1100528604 : Integer;
    BEGIN
      SalesLine.COPY(ISalesLine);
      OrigSalesLine.COPY(ISalesLine);
      IF SalesLine.FINDSET THEN BEGIN
        SalesLine.TESTFIELD("Document Type", SalesLine."Document Type"::"Invoice Proposal");
        SalesLine.TESTFIELD("Service Invoice", TRUE);
        SalesHeader.GET(SalesLine."Document Type", SalesLine."Document No.");
        SalesHeader.TESTFIELD("Consumption Invoice", FALSE);
        REPEAT
          SalesLine2.RESET;
          SalesLine2.SETRANGE("Document Type", SalesLine."Document Type");
          SalesLine2.SETRANGE("Document No.", SalesLine."Document No.");
          SalesLine2.SETRANGE("Service Contract No.", SalesLine."Service Contract No.");
          SalesLine2.SETRANGE("Object No.", SalesLine."Object No.");
          SalesLine2.SETRANGE("Installment Line No.", SalesLine."Installment Line No.");
          SalesLine2.SETFILTER("Prev. Invoiced Until", '>%1', SalesLine."Prev. Invoiced Until");
          IF SalesLine2.FINDSET THEN BEGIN
            LastLineNoChecked := SalesLine."Line No.";
            REPEAT
              OrigSalesLine := SalesLine2;
              IF NOT OrigSalesLine.FIND('=') THEN
                ERROR(Text11012009, LastLineNoChecked);
              LastLineNoChecked := SalesLine2."Line No.";
            UNTIL SalesLine2.NEXT = 0;
          END;
        UNTIL SalesLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE MakeServiceCostPlusChargeable@1100528401(ServiceOrderCostPlusEntry@1100528403 : Record 11012825);
    VAR
      ServiceLedgerEntry@1100528400 : Record 11012819;
      ServiceCollectiveList@1100528402 : Record 11071730;
    BEGIN
      //**4PS
      IF "Copy of Document" THEN
        EXIT;

      IF ServiceOrderCostPlusEntry."Removal Contribution" THEN
        EXIT;

      ServiceLedgerEntry.SETCURRENTKEY("Service Order No.", "Cost Plus Line No.");
      ServiceLedgerEntry.SETRANGE("Service Order No.", ServiceOrderCostPlusEntry."Service Order No.");
      ServiceLedgerEntry.SETRANGE("Cost Plus Line No.", ServiceOrderCostPlusEntry."Line No.");
      IF ServiceLedgerEntry.ISEMPTY THEN BEGIN
        ServiceOrderCostPlusEntry.Invoiced := FALSE;
        ServiceOrderCostPlusEntry.Chargeable := TRUE;
        ServiceOrderCostPlusEntry.MODIFY;
        MakeServRemovalContrChargeable(
          ServiceOrderCostPlusEntry."Service Order No.", ServiceOrderCostPlusEntry."Line No.");
      END;

      IF ServiceOrderCostPlusEntry."Collective List No." <> '' THEN
        ReopenServiceCollectiveList(ServiceOrderCostPlusEntry."Collective List No.");
    END;

    LOCAL PROCEDURE MakeServRemovalContrChargeable@1100528416(ServiceOrderNo@1100528400 : Code[20];CostPlusLineNo@1100528401 : Integer);
    VAR
      ServiceOrderCostPlusEntry@1100528402 : Record 11012825;
    BEGIN
      //**4PS
      ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", ServiceOrderNo);
      ServiceOrderCostPlusEntry.SETRANGE("Removal Contribution", TRUE);
      ServiceOrderCostPlusEntry.SETRANGE("Attached to Line No. (RC)", CostPlusLineNo);
      IF ServiceOrderCostPlusEntry.FINDSET THEN
        REPEAT
          ServiceOrderCostPlusEntry.Invoiced := FALSE;
          ServiceOrderCostPlusEntry.Chargeable := TRUE;
          ServiceOrderCostPlusEntry.MODIFY;
        UNTIL ServiceOrderCostPlusEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE ReopenServiceCollectiveList@1100528409(CollectiveListNo@1100528400 : Code[20]);
    VAR
      ServiceCollectiveList@1100528401 : Record 11071730;
    BEGIN
      //**4PS
      IF NOT ServiceCollectiveList.GET(CollectiveListNo) THEN
        EXIT;

      IF ServiceCollectiveList.Status <> ServiceCollectiveList.Status::Open THEN BEGIN
        ServiceCollectiveList.Status := ServiceCollectiveList.Status::Open;
        ServiceCollectiveList.MODIFY(TRUE);
      END;
    END;

    PROCEDURE OrderLineCompletelyShippedAndInvoiced@1100528400() : Boolean;
    BEGIN
      //**4PS
      CASE "Document Type" OF
        "Document Type"::Order:
          EXIT(
            (Quantity = "Quantity Shipped") AND
            (Quantity = "Quantity Invoiced"));
        "Document Type"::"Return Order":
          EXIT(
            (Quantity = "Return Qty. Received") AND
            (Quantity = "Quantity Invoiced"));
      END;
    END;

    PROCEDURE AddToCompressedLines@1100528402(SalesHeader@1100528401 : Record 36);
    VAR
      CompressedSalesLine@1100528400 : Record 37;
    BEGIN
      //**4PS
      CheckIfCompressingIsAllowed(SalesHeader);
      CompressedSalesLine.SETRANGE("Document Type", "Document Type");
      CompressedSalesLine.SETRANGE("Document No.", "Document No.");
      CompressedSalesLine.SETRANGE(Type, Type);
      CompressedSalesLine.SETRANGE("No.", "No.");
      CompressedSalesLine.SETRANGE("Service Contract No.", "Service Contract No.");
      CompressedSalesLine.SETRANGE("Service Control Period Date", "Service Control Period Date");
      CompressedSalesLine.SETRANGE(Description, GetObjectGroupDescription);
      CompressedSalesLine.SETFILTER("Description 2", GetInvoicedFromToOfDescription2 + '*');
      CompressedSalesLine.SETRANGE("Currency Code", "Currency Code");
      CompressedSalesLine.SETRANGE("VAT Bus. Posting Group", "VAT Bus. Posting Group");
      CompressedSalesLine.SETRANGE("VAT Prod. Posting Group", "VAT Prod. Posting Group");
      CompressedSalesLine.SETRANGE("VAT Identifier", "VAT Identifier");
      CompressedSalesLine.SETRANGE("Gen. Bus. Posting Group", "Gen. Bus. Posting Group");
      CompressedSalesLine.SETRANGE("Gen. Prod. Posting Group", "Gen. Prod. Posting Group");
      CompressedSalesLine.SETRANGE("Shortcut Dimension 1 Code", "Shortcut Dimension 1 Code");
      CompressedSalesLine.SETRANGE("Shortcut Dimension 2 Code", "Shortcut Dimension 2 Code");
      CompressedSalesLine.SETRANGE("Dimension Set ID", "Dimension Set ID");

      IF CompressedSalesLine.FINDFIRST THEN
        ModifyCompressedSalesLine(CompressedSalesLine)
      ELSE
        InsertCompressedSalesLine(CompressedSalesLine);
    END;

    LOCAL PROCEDURE CompressingIsAllowed@1100528405(VAR ReasonComprNotAllowed@1100528401 : Text) : Boolean;
    VAR
      ServiceContract@1100528400 : Record 11012812;
    BEGIN
      //**4PS
      IF NOT "Service Invoice" THEN BEGIN
        ReasonComprNotAllowed := STRSUBSTNO(
          Text11012012, FIELDCAPTION("Service Invoice"), TABLECAPTION, "Line No.", TRUE);
        EXIT(FALSE);
      END;
      IF "Installment Invoice" THEN BEGIN
        ReasonComprNotAllowed := STRSUBSTNO(
          Text11012012, FIELDCAPTION("Installment Invoice"), TABLECAPTION, "Line No.", FALSE);
        EXIT(FALSE);
      END;
      IF "Service Contract No." = '' THEN BEGIN
        ReasonComprNotAllowed := STRSUBSTNO(
          Text11012011, FIELDCAPTION("Service Contract No."), TABLECAPTION, "Line No.");
        EXIT(FALSE);
      END;
      IF ServiceContract.GET("Service Contract No.") THEN BEGIN
        IF ServiceContract."Invoice Type" <> ServiceContract."Invoice Type"::Dynamic THEN BEGIN
          ReasonComprNotAllowed := STRSUBSTNO(
            Text11012012, ServiceContract.FIELDCAPTION("Invoice Type"), ServiceContract.TABLECAPTION,
            ServiceContract."No.", ServiceContract."Invoice Type"::Dynamic);
          EXIT(FALSE);
        END;
      END ELSE BEGIN
        ReasonComprNotAllowed := STRSUBSTNO(
          Text11012013, ServiceContract.TABLECAPTION, "Service Contract No.");
        EXIT(FALSE);
      END;
      IF Type <> Type::"G/L Account" THEN BEGIN
        ReasonComprNotAllowed := STRSUBSTNO(
          Text11012012, FIELDCAPTION(Type), TABLECAPTION, "Line No.", Type::"G/L Account");
        EXIT(FALSE);
      END;
      IF "Object No." = '' THEN BEGIN
        ReasonComprNotAllowed := STRSUBSTNO(
          Text11012011, FIELDCAPTION("Object No."), TABLECAPTION, "Line No.");
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckIfCompressingIsAllowed@1100528406(SalesHeader@1100528400 : Record 36);
    VAR
      ReasonComprNotAllowed@1100528401 : Text;
    BEGIN
      //**4PS
      IF NOT CompressingIsAllowed(ReasonComprNotAllowed) THEN BEGIN
        ERROR(
          STRSUBSTNO('%1 %2',
          STRSUBSTNO(Text11012010, SalesHeader.TABLECAPTION, SalesHeader."No."),
          ReasonComprNotAllowed));
      END;
    END;

    LOCAL PROCEDURE GetObjectGroupDescription@1100528418() : Text;
    VAR
      ServiceObject@1100528400 : Record 11071691;
      StandardObject@1100528401 : Record 11020334;
      ServiceGroup@1100528402 : Record 11012830;
    BEGIN
      //**4PS
      IF ServiceObject.GET("Object No.") THEN
        IF StandardObject.GET(ServiceObject."Standard Object No.") THEN
          IF ServiceGroup.GET(StandardObject."Object Group", '') THEN
            EXIT(ServiceGroup.Description);
    END;

    LOCAL PROCEDURE GetInvoicedFromToOfDescription2@1100528403() InvoicedFromTo : Text[50];
    VAR
      ParenthesisFoundAtPos@1100528400 : Integer;
    BEGIN
      //**4PS
      // (Invoiced Quantity: <Quantity>) must be removed from Description 2 when lines are compressed.
      ParenthesisFoundAtPos := STRPOS("Description 2", '(');
      IF ParenthesisFoundAtPos > 2 THEN
        InvoicedFromTo := COPYSTR("Description 2", 1, ParenthesisFoundAtPos - 2)
      ELSE
        InvoicedFromTo := "Description 2";
    END;

    LOCAL PROCEDURE ModifyCompressedSalesLine@1100528427(CompressedSalesLine@1100528400 : Record 37);
    BEGIN
      //**4PS
      CompressedSalesLine.SuspendStatusCheck(TRUE);
      CompressedSalesLine.VALIDATE("Unit Price", "Line Amount" + CompressedSalesLine."Unit Price");
      CompressedSalesLine."Description 2" := ComposeDescr2OfCompressedSalesLine(
        CompressedSalesLine);
      CompressedSalesLine.MODIFY;
    END;

    LOCAL PROCEDURE InsertCompressedSalesLine@1100528428(CompressedSalesLine@1100528400 : Record 37);
    BEGIN
      //**4PS
      CompressedSalesLine := Rec;
      CompressedSalesLine.SuspendStatusCheck(TRUE);
      CompressedSalesLine.VALIDATE(Quantity, 1);
      CompressedSalesLine.VALIDATE("Unit Price", "Line Amount");
      CompressedSalesLine.Description := GetObjectGroupDescription;
      CompressedSalesLine."Description 2" := '';
      CompressedSalesLine."Description 2" := ComposeDescr2OfCompressedSalesLine(
        CompressedSalesLine);
      CompressedSalesLine."Object No." := '';
      CompressedSalesLine."Service Location No." := '';
      CompressedSalesLine."Line No." := GetLastLineNo + 10000;
      CompressedSalesLine.INSERT;
    END;

    LOCAL PROCEDURE ComposeDescr2OfCompressedSalesLine@1100528414(CompressedSalesLine@1100528400 : Record 37) Description2 : Text[50];
    VAR
      DescrWithoutQty@1100528401 : Text;
      CurrentQtyTxt@1100528403 : Text;
      MaxQty@1100528402 : Integer;
      MaxNoOfDigitsOfQty@1100528404 : Integer;
      StartPosOfQty@1100528405 : Integer;
      EndPosOfQty@1100528406 : Integer;
      CurrentQty@1100528407 : Integer;
      Qty@1100528408 : Integer;
    BEGIN
      //**4PS
      DescrWithoutQty := STRSUBSTNO('%1 (%2 %3)', GetInvoicedFromToOfDescription2, Text11012014, '');
      MaxNoOfDigitsOfQty := MAXSTRLEN(CompressedSalesLine."Description 2") - STRLEN(DescrWithoutQty);
      IF MaxNoOfDigitsOfQty > 9 THEN
        MaxNoOfDigitsOfQty := 9; // POWER(10, 10) will result in an overflow.
      MaxQty := POWER(10, MaxNoOfDigitsOfQty) - 1;

      StartPosOfQty := STRPOS(CompressedSalesLine."Description 2", '(') + STRLEN(Text11012014) + 2;
      EndPosOfQty := STRPOS(CompressedSalesLine."Description 2", ')') - 1;
      IF EndPosOfQty > 0 THEN
        CurrentQtyTxt := COPYSTR(
          CompressedSalesLine."Description 2", StartPosOfQty, EndPosOfQty + 1 - StartPosOfQty)
      ELSE
        CurrentQtyTxt := '0';

      IF EVALUATE(CurrentQty, CurrentQtyTxt) THEN
        Qty := CurrentQty + GetServiceObjectQuantity
      ELSE
        Qty := GetServiceObjectQuantity;

      IF Qty > MaxQty THEN
        Description2 := STRSUBSTNO('%1 (%2>%3)', GetInvoicedFromToOfDescription2, Text11012014, MaxQty)
      ELSE
        Description2 := STRSUBSTNO('%1 (%2 %3)', GetInvoicedFromToOfDescription2, Text11012014, Qty);
    END;

    LOCAL PROCEDURE GetLastLineNo@1100528438() : Integer;
    VAR
      SalesLine@1100528400 : Record 37;
    BEGIN
      //**4PS
      SalesLine.SETRANGE("Document Type", "Document Type");
      SalesLine.SETRANGE("Document No.", "Document No.");
      IF SalesLine.FINDLAST THEN
        EXIT(SalesLine."Line No.");
    END;

    LOCAL PROCEDURE GetServiceObjectQuantity@1100528407() : Integer;
    VAR
      ServiceObject@1100528400 : Record 11071691;
    BEGIN
      //**4PS
      IF ServiceObject.GET("Object No.") THEN
        EXIT(ServiceObject.Quantity);
    END;

    BEGIN
    {

      4PS01 JD 09-10-07 Call 5091, Fill Element from cost object
      4PS02 JD 07-02-08 Call 9828, How item prices are calculated is not visible on sales line
      4PS03 JD 14-02-08 Fill Cost component from SOType or Cost object
      4PS04 JD 29-06-2008, Improvements for intrastat
      4PS05 JD 3-11-2008, Call 12697 add Line Price to some forms
    }
    END.
  }
}

