OBJECT Table 38 Purchase Header
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.45480,DCNL9.00.00.43402.4.04,4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 288=r;
    DataCaptionFields=No.,Buy-from Vendor Name;
    OnInsert=BEGIN
               IF NOT SkipInitialization THEN
                 InitInsert;

               IF GETFILTER("Buy-from Vendor No.") <> '' THEN
                 IF GETRANGEMIN("Buy-from Vendor No.") = GETRANGEMAX("Buy-from Vendor No.") THEN
                   VALIDATE("Buy-from Vendor No.",GETRANGEMIN("Buy-from Vendor No."));

               "Doc. No. Occurrence" := ArchiveManagement.GetNextOccurrenceNo(DATABASE::"Purchase Header","Document Type","No.");

               //**4PS.sn
               IF (PurchSetup."Scanning Application Purch.Inv" = PurchSetup."Scanning Application Purch.Inv"::Other) AND
                  (PurchSetup."Auto Fill Ext. Document ID" <> '') THEN
                 "Ext. Document ID" := STRSUBSTNO(PurchSetup."Auto Fill Ext. Document ID", "No.");
               IF ("Document Type" = "Document Type"::Quote) AND ("Comparison Quote" <> '') THEN
                 UpdateComparisonQuoteLinks('INSERT');
               "Input by" := USERID;
               "Input Date" := TODAY;
               IF "Document Type" = "Document Type"::Order THEN
                 "Extra Receipts Allowed" := NOT PurchSetup."Block Extra Receipts";
               IF "ICM Status" > "ICM Status"::Manual THEN
                 IcmLicenceCu.CheckICMProcess;
               CheckUpdateDocRefPoint('I');
               //**4PS.en
               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05

               ProjectSiteMgt.LogPurchaseHeader(1, Rec); //**4PS.n

               FillReferenceICM; //**4PS SR 18-01-2013
             END;

    OnModify=BEGIN
               //**4PS.sn
               IF ("Document Type" = "Document Type"::Quote) AND ("Comparison Quote" <> xRec."Comparison Quote") THEN
                 UpdateComparisonQuoteLinks('MODIFY');
               "Modified by" := USERID;
               "Last Date Modified" := TODAY;
               IF "ICM Status" > "ICM Status"::Manual THEN
                 IcmLicenceCu.CheckICMProcess;   //db, 01-07-04
               CheckUpdateDocRefPoint('M');
               CreateDocPhases;
               ProjectSiteMgt.LogPurchaseHeader(2, Rec); //**4PS.n
               //**4PS.en
             END;

    OnDelete=VAR
               Job@1100528300 : Record 11072003;
               DocumentPortalProject@1100528301 : Codeunit 11012948;
             BEGIN
               //**4PS01.sn
               IF ("Document Type" = "Document Type"::Order) THEN BEGIN
                 IF (Status <> Status::Closed) THEN
                  IF PurchLinesExist THEN
                    ERROR(Text11012010);
               END;
               IF ("Document Type" = "Document Type"::Quote) THEN BEGIN
                 IF ("Comparison Quote" = "No.") AND ("Comparison Quote" <> '') THEN
                   CheckDeleteCompQuoteAllowed();
               END;
               //**4PS01.en

               IF NOT UserSetupMgt.CheckRespCenter(1,"Responsibility Center") THEN
                 ERROR(
                   Text023,
                   RespCenter.TABLECAPTION,UserSetupMgt.GetPurchasesFilter);

               PurchPost.TestDeleteHeader(
                 Rec,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,
                 ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHeaderPrepmt);

               IF (PurchRcptHeader."No." <> '') OR
                  (PurchInvHeader."No." <> '') OR
                  (PurchCrMemoHeader."No." <> '') OR
                  (ReturnShptHeader."No." <> '') OR
                  (PurchInvHeaderPrepmt."No." <> '') OR
                  (PurchCrMemoHeaderPrepmt."No." <> '')
               THEN BEGIN
                 IF NOT HideValidationDialog AND GUIALLOWED THEN BEGIN//**4PS.n C023430
                   IF PurchRcptHeader."No." <> '' THEN
                     IF CONFIRM(
                          Text000,TRUE,
                          PurchRcptHeader."No.")
                     THEN BEGIN
                       PurchRcptHeader.SETRECFILTER;
                       PurchRcptHeader.PrintRecords(TRUE);
                     END;

                   IF PurchInvHeader."No." <> '' THEN
                     IF CONFIRM(
                          Text001,TRUE,
                          PurchInvHeader."No.")
                     THEN BEGIN
                       PurchInvHeader.SETRECFILTER;
                       PurchInvHeader.PrintRecords(TRUE);
                     END;

                   IF PurchCrMemoHeader."No." <> '' THEN
                     IF CONFIRM(
                          Text002,TRUE,
                          PurchCrMemoHeader."No.")
                     THEN BEGIN
                       PurchCrMemoHeader.SETRECFILTER;
                       PurchCrMemoHeader.PrintRecords(TRUE);
                     END;

                   IF ReturnShptHeader."No." <> '' THEN
                     IF CONFIRM(
                          Text024,TRUE,
                          ReturnShptHeader."No.")
                     THEN BEGIN
                       ReturnShptHeader.SETRECFILTER;
                       ReturnShptHeader.PrintRecords(TRUE);
                     END;

                   IF PurchInvHeaderPrepmt."No." <> '' THEN
                     IF CONFIRM(
                          Text043,TRUE,
                          PurchInvHeader."No.")
                     THEN BEGIN
                       PurchInvHeaderPrepmt.SETRECFILTER;
                       PurchInvHeaderPrepmt.PrintRecords(TRUE);
                     END;

                   IF PurchCrMemoHeaderPrepmt."No." <> '' THEN
                     IF CONFIRM(
                          Text044,TRUE,
                          PurchCrMemoHeaderPrepmt."No.")
                     THEN BEGIN
                       PurchCrMemoHeaderPrepmt.SETRECFILTER;
                       PurchCrMemoHeaderPrepmt.PrintRecords(TRUE);
                     END;
                 END; //**4PS.n C023430
                 PurchPost.DeleteHeader(
                   Rec,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,
                   ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHeaderPrepmt);
               END;

               VALIDATE("Applies-to ID",'');
               VALIDATE("Incoming Document Entry No.",0);

               ApprovalsMgmt.DeleteApprovalEntry(DATABASE::"Purchase Header","Document Type","No.");
               PurchLine.LOCKTABLE;

               WhseRequest.SETRANGE("Source Type",DATABASE::"Purchase Line");
               WhseRequest.SETRANGE("Source Subtype","Document Type");
               WhseRequest.SETRANGE("Source No.","No.");
               WhseRequest.DELETEALL(TRUE);

               PurchLine.SETRANGE("Document Type","Document Type");
               PurchLine.SETRANGE("Document No.","No.");
               PurchLine.SETRANGE(Type,PurchLine.Type::"Charge (Item)");
               DeletePurchaseLines;
               PurchLine.SETRANGE(Type);
               DeletePurchaseLines;

               PurchCommentLine.SETRANGE("Document Type","Document Type");
               PurchCommentLine.SETRANGE("No.","No.");
               PurchCommentLine.DELETEALL;

               //**4PS.sn
               Delete4PSAdditions;
               IF "Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"] THEN
                 UpdateManagemind(1,0);  //16698 May not be done in 'Delete4PSAdditions' because then in CU90 the Document/Processed
                                         //      in the managemind record will be reset. Not allowed because then posted invoice.

               IF ("Document Type" = "Document Type"::Quote) AND ("Job No." <> '') AND ("Purchase Action" <> '') THEN BEGIN
                 Job.GET("Job No.");
                 IF (Job.IsJobInProjectPortal) THEN
                   DocumentPortalProject.RemoveQuoteRequest(Rec);
               END;

               ProjectSiteMgt.LogPurchaseHeader(3, Rec);
               //**4PS.en
             END;

    OnRename=BEGIN
               ERROR(Text003,TABLECAPTION);
             END;

    CaptionML=ENU=Purchase Header;
    LookupPageID=Page53;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                   Description=[4PS: Raam  -> Afroep  ] }
    { 2   ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=VAR
                                                                PurchHeadExtensionRec@1100528500 : Record 11020398;
                                                                SaveLocationCode@1100525000 : Code[10];
                                                              BEGIN
                                                                InitRecOnVendUpdate;
                                                                TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);
                                                                //**4PS.sn
                                                                GetVend("Buy-from Vendor No.");
                                                                IF NOT SkipStrategicPurchCheck AND
                                                                  StrategicPurchMgt.IsLimitedPurchaser("Document Type") AND
                                                                  NOT StrategicPurchMgt.VendorHasContract(Vend)
                                                                THEN
                                                                  ERROR(STRSUBSTNO(Text11012023,"Buy-from Vendor No."));
                                                                //**4PS.en

                                                                IF ("Buy-from Vendor No." <> xRec."Buy-from Vendor No.") AND
                                                                   (xRec."Buy-from Vendor No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Buy-from Vendor No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    PurchLine.SETRANGE("Document Type","Document Type");
                                                                    PurchLine.SETRANGE("Document No.","No.");
                                                                    IF "Buy-from Vendor No." = '' THEN BEGIN
                                                                      IF NOT PurchLine.ISEMPTY THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Buy-from Vendor No."));
                                                                      TempPurchHeader := Rec; //**4PS.n C004837
                                                                      INIT;
                                                                      PurchSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      InitNoSeries;
                                                                      GetTempPurchHeader; //**4PS.n C004837
                                                                      EXIT;
                                                                    END;
                                                                    IF "Document Type" = "Document Type"::Order THEN
                                                                      PurchLine.SETFILTER("Quantity Received",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                                                                        PurchLine.SETRANGE("Buy-from Vendor No.",xRec."Buy-from Vendor No.");
                                                                        PurchLine.SETFILTER("Receipt No.",'<>%1','');
                                                                      END;
                                                                    IF PurchLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        PurchLine.TESTFIELD("Quantity Received",0)
                                                                      ELSE
                                                                        PurchLine.TESTFIELD("Receipt No.",'');

                                                                    PurchLine.SETRANGE("Receipt No.");
                                                                    PurchLine.SETRANGE("Quantity Received");
                                                                    PurchLine.SETRANGE("Buy-from Vendor No.");

                                                                    IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                      PurchLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
                                                                      IF PurchLine.FIND('-') THEN
                                                                        PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      PurchLine.SETRANGE("Prepmt. Amt. Inv.");
                                                                    END;

                                                                    IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                      PurchLine.SETFILTER("Return Qty. Shipped",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                        PurchLine.SETRANGE("Buy-from Vendor No.",xRec."Buy-from Vendor No.");
                                                                        PurchLine.SETFILTER("Return Shipment No.",'<>%1','');
                                                                      END;
                                                                    IF PurchLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                        PurchLine.TESTFIELD("Return Qty. Shipped",0)
                                                                      ELSE
                                                                        PurchLine.TESTFIELD("Return Shipment No.",'');

                                                                    PurchLine.RESET;
                                                                    //**4PS.sn call C000835
                                                                    CASE "Document Type" OF
                                                                      "Document Type"::Invoice:
                                                                        VALIDATE("Vendor Invoice No.");
                                                                      "Document Type"::"Credit Memo":
                                                                        VALIDATE("Vendor Cr. Memo No.");
                                                                    END;
                                                                    //**4PS.en
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                GetVend("Buy-from Vendor No.");
                                                                Vend.CheckBlockedVendOnDocs(Vend,FALSE);
                                                                //**4PS.sn
                                                                IF "Document Type" = "Document Type"::Quote THEN BEGIN
                                                                  IF Vend."Block Purchase Quote" THEN
                                                                    Vend.TESTFIELD("Block Purchase Quote", FALSE);
                                                                  IF Vend."Block Purchase Order" THEN
                                                                    MESSAGE(Text11012006, Vend."No.");
                                                                END;
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  Vend.TESTFIELD("Block Purchase Order", FALSE);
                                                                //**4PS.en

                                                                Vend.TESTFIELD("Gen. Bus. Posting Group");
                                                                "Buy-from Vendor Name" := Vend.Name;
                                                                "Buy-from Vendor Name 2" := Vend."Name 2";
                                                                "Buy-from Address" := Vend.Address;
                                                                "Buy-from Address 2" := Vend."Address 2";
                                                                "Buy-from City" := Vend.City;
                                                                "Buy-from Post Code" := Vend."Post Code";
                                                                "Buy-from County" := Vend.County;
                                                                "Buy-from Country/Region Code" := Vend."Country/Region Code";
                                                                IF NOT SkipBuyFromContact THEN
                                                                  "Buy-from Contact" := Vend.Contact;
                                                                //**4PS.sn
                                                                IF NOT SkipBuyFromContact THEN BEGIN
                                                                  "Buy-from Contact Person No." := '';
                                                                  UpdateEMailForPurchOrderForContactPerson;
                                                                END;
                                                                "Buy-from Phone No." := Vend."Phone No.";
                                                                "Buy-from Fax No." := Vend."Fax No.";
                                                                //**4PS.en
                                                                "Gen. Bus. Posting Group" := Vend."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := Vend."VAT Bus. Posting Group";
                                                                "Tax Area Code" := Vend."Tax Area Code";
                                                                "Tax Liable" := Vend."Tax Liable";
                                                                "VAT Country/Region Code" := Vend."Country/Region Code";
                                                                "VAT Registration No." := Vend."VAT Registration No.";
                                                                //**4PS.sn
                                                                "Transaction Type" := Vend."Transaction Type";
                                                                "Transaction Specification" := Vend."Transaction Specification";
                                                                "Transport Method" := Vend."Transport Method";
                                                                "Entry Point" := Vend."Entry Point";
                                                                "Shipping Agent Code" := Vend."Shipping Agent Code";
                                                                //DP00556 C010637
                                                                "Electronic Order Type" := Vend."Electronic Order Type";
                                                                //DP00121
                                                                PurchHeadExtensionRec.GetPurchHeadExtension("Document Type","No.");
                                                                PurchHeadExtensionRec."Service Warranty Code" := Vend."Service Warranty Code";
                                                                PurchHeadExtensionRec.UpdatePurchHeadExtension("Document Type","No.");
                                                                //
                                                                //**4PS.en
                                                                VALIDATE("Country of Origin",Vend."Country/Region Code"); //**4PS.n
                                                                VALIDATE("Lead Time Calculation",Vend."Lead Time Calculation");
                                                                "Responsibility Center" := UserSetupMgt.GetRespCenter(1,Vend."Responsibility Center");

                                                                IF xRec."Sell-to Customer No." <> '' THEN //**4PS.n CALL C024101
                                                                  VALIDATE("Sell-to Customer No.",'');

                                                                 //**4PS.sn CALL C024101
                                                                IF (Deliver = Deliver::Location) THEN BEGIN
                                                                  GetVend(xRec."Buy-from Vendor No.");
                                                                  IF "Location Code" = Vend."Location Code" THEN
                                                                   SaveLocationCode := Vend."Location Code";
                                                                  GetVend("Buy-from Vendor No.");
                                                                END;

                                                                IF (SaveLocationCode <> '') OR (Vend."Location Code" <> '') OR (Deliver <> Deliver::Location) THEN
                                                                //**4PS.en CALL C024101
                                                                  VALIDATE("Location Code",UserSetupMgt.GetLocation(1,Vend."Location Code","Responsibility Center"));

                                                                //**4PS.sn
                                                                IF ("Buy-from Vendor No." <> xRec."Buy-from Vendor No.") THEN BEGIN
                                                                  InitIcmStatus;  //db, 12-05-09: check after lead time calculation
                                                                  GetExpectedReceiptDate; //C009135
                                                                  CLEAR("Payment Agreement");
                                                                END;
                                                                //**4PS.en

                                                                IF "Buy-from Vendor No." = xRec."Pay-to Vendor No." THEN
                                                                  IF ReceivedPurchLinesExist OR ReturnShipmentExist THEN BEGIN
                                                                    TESTFIELD("VAT Bus. Posting Group",xRec."VAT Bus. Posting Group");
                                                                    TESTFIELD("Gen. Bus. Posting Group",xRec."Gen. Bus. Posting Group");
                                                                  END;

                                                                "Buy-from IC Partner Code" := Vend."IC Partner Code";
                                                                "Send IC Document" := ("Buy-from IC Partner Code" <> '') AND ("IC Direction" = "IC Direction"::Outgoing);

                                                                //**4PS.sn
                                                                IF NOT PurchLinesExist THEN
                                                                  "Amounts only" := Vend."Default Only Amounts Orders";  //DP00477
                                                                "VAT Prod. Posting Group" :=  Vend."VAT Prod. Posting Group";
                                                                IF VATSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
                                                                  "Manually VAT Posting" := VATSetup.Manually;
                                                                VALIDATE("Subcontracting Invoice",Vend.Subcontractor);
                                                                IF "Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"] THEN
                                                                  IF "Subcontracting Invoice" THEN BEGIN
                                                                    IF ("Document Type" = "Document Type"::"Credit Memo") AND (PurchSetup."Credit Memo by G-Account allow") THEN
                                                                      VALIDATE("Payment Agreement", Vend."Default Payment Agreement");
                                                                    IF "Document Type" = "Document Type"::Invoice THEN
                                                                      VALIDATE("Payment Agreement", Vend."Default Payment Agreement");
                                                                  END;

                                                                FillJournalTemplate;
                                                                //**4PS.en
                                                                IF Vend."Pay-to Vendor No." <> '' THEN
                                                                  VALIDATE("Pay-to Vendor No.",Vend."Pay-to Vendor No.")
                                                                ELSE BEGIN
                                                                  IF "Buy-from Vendor No." = "Pay-to Vendor No." THEN
                                                                    SkipPayToContact := TRUE;
                                                                  VALIDATE("Pay-to Vendor No.","Buy-from Vendor No.");
                                                                  SkipPayToContact := FALSE;
                                                                END;
                                                                VALIDATE("Received on Project");  //**4PS.n

                                                                "Order Address Code" := '';
                                                                //**4PS.sn
                                                                GetDefaultOrderAddress;
                                                                GetOrderAddressByDepartment("Order Address Code");
                                                                //**4PS.en

                                                                VALIDATE("Order Address Code");

                                                                IF (xRec."Buy-from Vendor No." <> "Buy-from Vendor No.") OR
                                                                   (xRec."Currency Code" <> "Currency Code") OR
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group") OR
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreatePurchLines(FIELDCAPTION("Buy-from Vendor No."));

                                                                IF NOT SkipBuyFromContact THEN
                                                                  UpdateBuyFromCont("Buy-from Vendor No.");

                                                                //**4PS.sn
                                                                IF ScannedInvoicesRec.READPERMISSION THEN
                                                                  UpdateManagemind(0,1);  //**4PS04.n

                                                                UpdateVATData;

                                                                "Contract Applicable" := DetermineContractApplicable(Vend);
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Buy-from Vendor No. }
    { 3   ;   ;No.                 ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=FIELD(Document Type));
                                                   OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=No. }
    { 4   ;   ;Pay-to Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);
                                                                IF (xRec."Pay-to Vendor No." <> "Pay-to Vendor No.") AND
                                                                   (xRec."Pay-to Vendor No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Pay-to Vendor No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    PurchLine.SETRANGE("Document Type","Document Type");
                                                                    PurchLine.SETRANGE("Document No.","No.");

                                                                    IF "Document Type" = "Document Type"::Order THEN
                                                                      PurchLine.SETFILTER("Quantity Received",'<>0');
                                                                    IF "Document Type" = "Document Type"::Invoice THEN
                                                                      PurchLine.SETFILTER("Receipt No.",'<>%1','');
                                                                    IF PurchLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        PurchLine.TESTFIELD("Quantity Received",0)
                                                                      ELSE
                                                                        PurchLine.TESTFIELD("Receipt No.",'');

                                                                    PurchLine.SETRANGE("Receipt No.");
                                                                    PurchLine.SETRANGE("Quantity Received");

                                                                    IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                      PurchLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
                                                                      IF PurchLine.FIND('-') THEN
                                                                        PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      PurchLine.SETRANGE("Prepmt. Amt. Inv.");
                                                                    END;

                                                                    IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                      PurchLine.SETFILTER("Return Qty. Shipped",'<>0');
                                                                    IF "Document Type" = "Document Type"::"Credit Memo" THEN
                                                                      PurchLine.SETFILTER("Return Shipment No.",'<>%1','');
                                                                    IF PurchLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                        PurchLine.TESTFIELD("Return Qty. Shipped",0)
                                                                      ELSE
                                                                        PurchLine.TESTFIELD("Return Shipment No.",'');

                                                                    PurchLine.RESET;
                                                                  END ELSE
                                                                    "Pay-to Vendor No." := xRec."Pay-to Vendor No.";
                                                                END;

                                                                GetVend("Pay-to Vendor No.");
                                                                Vend.CheckBlockedVendOnDocs(Vend,FALSE);
                                                                //**4PS.sn
                                                                IF "Document Type" = "Document Type"::Quote THEN
                                                                  IF "Pay-to Vendor No." <> "Buy-from Vendor No." THEN
                                                                    IF Vend."Block Purchase Order" THEN
                                                                      MESSAGE(Text11012006, Vend."No.");
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  Vend.TESTFIELD("Block Purchase Order",FALSE);
                                                                //**4PS.en
                                                                Vend.TESTFIELD("Vendor Posting Group");

                                                                "Pay-to Name" := Vend.Name;
                                                                "Pay-to Name 2" := Vend."Name 2";
                                                                "Pay-to Address" := Vend.Address;
                                                                "Pay-to Address 2" := Vend."Address 2";
                                                                "Pay-to City" := Vend.City;
                                                                "Pay-to Post Code" := Vend."Post Code";
                                                                "Pay-to County" := Vend.County;
                                                                "Pay-to Country/Region Code" := Vend."Country/Region Code";
                                                                IF NOT SkipPayToContact THEN
                                                                  "Pay-to Contact" := Vend.Contact;
                                                                "Payment Terms Code" := Vend."Payment Terms Code";
                                                                "Prepmt. Payment Terms Code" := Vend."Payment Terms Code";

                                                                IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                  "Payment Method Code" := '';
                                                                  IF PaymentTerms.GET("Payment Terms Code") THEN
                                                                    IF PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN
                                                                      "Payment Method Code" := Vend."Payment Method Code"
                                                                END ELSE
                                                                  "Payment Method Code" := Vend."Payment Method Code";
                                                                // NL0001.begin

                                                                //**4PS.sn
                                                                "Transaction Mode B Payments" := Vend."Transaction Mode B Payments";
                                                                "Bank Account Code B Payments" := Vend."Bank Account Code B Payments";
                                                                IF "Document Type" IN ["Document Type"::Quote, "Document Type"::Order] THEN
                                                                  "Reminder Terms Code" := Vend."Reminder Terms Code";
                                                                //**4PS.en

                                                                "Shipment Method Code" := Vend."Shipment Method Code";
                                                                "Vendor Posting Group" := Vend."Vendor Posting Group";
                                                                GLSetup.GET;
                                                                IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No." THEN BEGIN
                                                                  "VAT Bus. Posting Group" := Vend."VAT Bus. Posting Group";
                                                                  "VAT Country/Region Code" := Vend."Country/Region Code";
                                                                  "VAT Registration No." := Vend."VAT Registration No.";
                                                                  "Gen. Bus. Posting Group" := Vend."Gen. Bus. Posting Group";
                                                                END;
                                                                "Prices Including VAT" := Vend."Prices Including VAT";
                                                                "Currency Code" := Vend."Currency Code";
                                                                "Invoice Disc. Code" := Vend."Invoice Disc. Code";
                                                                "Language Code" := Vend."Language Code";
                                                                IF Vend."Purchaser Code" <> '' THEN //**4PS.n
                                                                "Purchaser Code" := Vend."Purchaser Code";
                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                                VALIDATE("Payment Method Code");
                                                                VALIDATE("Currency Code");
                                                                VALIDATE("Creditor No.",Vend."Creditor No.");

                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  VALIDATE("Prepayment %",Vend."Prepayment %");

                                                                IF "Pay-to Vendor No." = xRec."Pay-to Vendor No." THEN BEGIN
                                                                  IF ReceivedPurchLinesExist THEN
                                                                    TESTFIELD("Currency Code",xRec."Currency Code");
                                                                END;

                                                                CreateDim(
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::Job,"Job No.", //**4PS.n
                                                                  DATABASE::"Service Order","Service Order No.",  //** 4PS 09-06-2010
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                                  //DATABASE::Location,"Location Code"); //**4PS.n  //*C007227.o

                                                                IF (xRec."Buy-from Vendor No." = "Buy-from Vendor No.") AND
                                                                   (xRec."Pay-to Vendor No." <> "Pay-to Vendor No.")
                                                                THEN
                                                                  RecreatePurchLines(FIELDCAPTION("Pay-to Vendor No."));

                                                                IF NOT SkipPayToContact THEN
                                                                  UpdatePayToCont("Pay-to Vendor No.");

                                                                "Pay-to IC Partner Code" := Vend."IC Partner Code";

                                                                FillJournalTemplate; //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Pay-to Vendor No.;
                                                   NotBlank=Yes }
    { 5   ;   ;Pay-to Name         ;Text50        ;CaptionML=ENU=Pay-to Name }
    { 6   ;   ;Pay-to Name 2       ;Text50        ;CaptionML=ENU=Pay-to Name 2 }
    { 7   ;   ;Pay-to Address      ;Text50        ;CaptionML=ENU=Pay-to Address }
    { 8   ;   ;Pay-to Address 2    ;Text50        ;CaptionML=ENU=Pay-to Address 2 }
    { 9   ;   ;Pay-to City         ;Text30        ;TableRelation=IF (Pay-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Pay-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Pay-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Pay-to City","Pay-to Post Code","Pay-to County","Pay-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Pay-to City }
    { 10  ;   ;Pay-to Contact      ;Text50        ;CaptionML=ENU=Pay-to Contact }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=ENU=Your Reference }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   OnValidate=BEGIN
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                THEN BEGIN
                                                                  PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  PurchLine.SETFILTER("Sales Order Line No.",'<>0');
                                                                  IF NOT PurchLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Ship-to Code"));
                                                                END;

                                                                IF "Ship-to Code" <> '' THEN BEGIN
                                                                  ShipToAddr.GET("Sell-to Customer No.","Ship-to Code");
                                                                  "Ship-to Name" := ShipToAddr.Name;
                                                                  "Ship-to Name 2" := ShipToAddr."Name 2";
                                                                  "Ship-to Address" := ShipToAddr.Address;
                                                                  "Ship-to Address 2" := ShipToAddr."Address 2";
                                                                  "Ship-to City" := ShipToAddr.City;
                                                                  "Ship-to Post Code" := ShipToAddr."Post Code";
                                                                  "Ship-to County" := ShipToAddr.County;
                                                                  "Ship-to Country/Region Code" := ShipToAddr."Country/Region Code";
                                                                  "Ship-to Contact" := ShipToAddr.Contact;
                                                                  "Shipment Method Code" := ShipToAddr."Shipment Method Code";
                                                                  IF ShipToAddr."Location Code" <> '' THEN
                                                                    VALIDATE("Location Code",ShipToAddr."Location Code");
                                                                END ELSE BEGIN
                                                                  TESTFIELD("Sell-to Customer No.");
                                                                  Cust.GET("Sell-to Customer No.");
                                                                  "Ship-to Name" := Cust.Name;
                                                                  "Ship-to Name 2" := Cust."Name 2";
                                                                  "Ship-to Address" := Cust.Address;
                                                                  "Ship-to Address 2" := Cust."Address 2";
                                                                  "Ship-to City" := Cust.City;
                                                                  "Ship-to Post Code" := Cust."Post Code";
                                                                  "Ship-to County" := Cust.County;
                                                                  "Ship-to Country/Region Code" := Cust."Country/Region Code";
                                                                  "Ship-to Contact" := Cust.Contact;
                                                                  "Shipment Method Code" := Cust."Shipment Method Code";
                                                                  IF Cust."Location Code" <> '' THEN
                                                                    VALIDATE("Location Code",Cust."Location Code");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Ship-to Code }
    { 13  ;   ;Ship-to Name        ;Text50        ;CaptionML=ENU=Ship-to Name }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=ENU=Ship-to Name 2 }
    { 15  ;   ;Ship-to Address     ;Text50        ;CaptionML=ENU=Ship-to Address }
    { 16  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=ENU=Ship-to Address 2 }
    { 17  ;   ;Ship-to City        ;Text30        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Ship-to City }
    { 18  ;   ;Ship-to Contact     ;Text50        ;CaptionML=ENU=Ship-to Contact }
    { 19  ;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);
                                                                IF ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND
                                                                   NOT ("Order Date" = xRec."Order Date")
                                                                THEN
                                                                  PriceMessageIfPurchLinesExist(FIELDCAPTION("Order Date"));

                                                                UpdatePurchLines(FIELDCAPTION("Order Date"),CurrFieldNo <> 0); //**4PS.n
                                                              END;

                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Order Date }
    { 20  ;   ;Posting Date        ;Date          ;OnValidate=VAR
                                                                SkipJobCurrFactorUpdate@1000 : Boolean;
                                                              BEGIN
                                                                TestNoSeriesDate(
                                                                  "Posting No.","Posting No. Series",
                                                                  FIELDCAPTION("Posting No."),FIELDCAPTION("Posting No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepayment No.","Prepayment No. Series",
                                                                  FIELDCAPTION("Prepayment No."),FIELDCAPTION("Prepayment No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepmt. Cr. Memo No.","Prepmt. Cr. Memo No. Series",
                                                                  FIELDCAPTION("Prepmt. Cr. Memo No."),FIELDCAPTION("Prepmt. Cr. Memo No. Series"));

                                                                IF "Incoming Document Entry No." = 0 THEN
                                                                  VALIDATE("Document Date","Posting Date");

                                                                VALIDATE("Interest Date"); //**4PS.n

                                                                IF "Currency Code" <> '' THEN BEGIN //**4PS.n
                                                                  IF ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
                                                                     NOT ("Posting Date" = xRec."Posting Date")
                                                                  THEN
                                                                    PriceMessageIfPurchLinesExist(FIELDCAPTION("Posting Date"));
                                                                //IF "Currency Code" <> '' THEN BEGIN //**4PS.o
                                                                  UpdateCurrencyFactor;
                                                                  IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                    SkipJobCurrFactorUpdate := NOT ConfirmUpdateCurrencyFactor;
                                                                //END; //**4PS.o
                                                                //**4PS.sn
                                                                END ELSE
                                                                  UpdatePurchLines(FIELDCAPTION("Posting Date"),CurrFieldNo <> 0);
                                                                //**4PS.en

                                                                IF "Posting Date" <> xRec."Posting Date" THEN
                                                                  IF DeferralHeadersExist THEN
                                                                    ConfirmUpdateDeferralDate;

                                                                //**4PS.so
                                                                //IF PurchLinesExist THEN
                                                                //  JobUpdatePurchLines(SkipJobCurrFactorUpdate);
                                                                //**4PS.eo
                                                              END;

                                                   CaptionML=ENU=Posting Date }
    { 21  ;   ;Expected Receipt Date;Date         ;OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Expected Receipt Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Expected Receipt Date }
    { 22  ;   ;Posting Description ;Text50        ;CaptionML=ENU=Posting Description }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Payment Terms Code");
                                                                  IF (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                                                                      NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos")
                                                                  THEN BEGIN
                                                                    VALIDATE("Due Date","Document Date");
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                    // **4PS.sn
                                                                    VALIDATE("Pmt. Discount Date 2",0D);
                                                                    VALIDATE("Payment Discount % 2",0);
                                                                    VALIDATE("Pmt. Discount Date 3",0D);
                                                                    VALIDATE("Payment Discount % 3",0);
                                                                    // **4PS.en
                                                                  END ELSE BEGIN
                                                                    "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                    BEGIN //**4PS.n
                                                                      VALIDATE("Payment Discount %",PaymentTerms."Discount %");
                                                                    //**4PS.sn
                                                                      "Pmt. Discount Date 2" := CALCDATE(PaymentTerms."Discount Date Calculation 2","Document Date");
                                                                      IF xRec."Document Date" = "Document Date" THEN
                                                                        VALIDATE("Payment Discount % 2",PaymentTerms."Discount % 2");
                                                                      "Pmt. Discount Date 3" := CALCDATE(PaymentTerms."Discount Date Calculation 3","Document Date");
                                                                      IF xRec."Document Date" = "Document Date" THEN
                                                                        VALIDATE("Payment Discount % 3",PaymentTerms."Discount % 3");
                                                                    END;
                                                                    //**4PS.en
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                    //**4PS.sn
                                                                    VALIDATE("Pmt. Discount Date 2",0D);
                                                                    VALIDATE("Payment Discount % 2",0);
                                                                    VALIDATE("Pmt. Discount Date 3",0D);
                                                                    VALIDATE("Payment Discount % 3",0);
                                                                    //**4PS.en
                                                                  END;
                                                                END;
                                                                IF xRec."Payment Terms Code" = "Prepmt. Payment Terms Code" THEN
                                                                  VALIDATE("Prepmt. Payment Terms Code","Payment Terms Code");
                                                              END;

                                                   CaptionML=ENU=Payment Terms Code }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 25  ;   ;Payment Discount %  ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=ENU=Payment Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=ENU=Pmt. Discount Date }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=ENU=Shipment Method Code }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);
                                                                IF ("Location Code" <> xRec."Location Code") AND
                                                                   (xRec."Buy-from Vendor No." = "Buy-from Vendor No.")
                                                                THEN
                                                                  //MessageIfPurchLinesExist(FIELDCAPTION("Location Code")); //**4PS.o
                                                                  UpdatePurchLines(FIELDCAPTION("Location Code"),CurrFieldNo <> 0); //**4PS.n

                                                                UpdateShipToAddress;

                                                                IF "Location Code" = '' THEN BEGIN
                                                                  IF InvtSetup.GET THEN
                                                                    "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
                                                                END ELSE BEGIN
                                                                  IF Location.GET("Location Code") THEN;
                                                                  "Inbound Whse. Handling Time" := Location."Inbound Whse. Handling Time";
                                                                END;

                                                                ValidateLocationCode; //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");

                                                                //**4PS.sn
                                                                FillJournalTemplate;
                                                                IF "Amount incl. VAT" <> 0 THEN
                                                                  CreatePurchLineRegAcc;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Cost Type=FILTER(<Revenue));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Vendor Posting Group;Code10        ;TableRelation="Vendor Posting Group";
                                                   CaptionML=ENU=Vendor Posting Group;
                                                   Editable=No }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date")]) OR ("Currency Code" <> xRec."Currency Code") THEN
                                                                  TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);
                                                                IF (CurrFieldNo <> FIELDNO("Currency Code")) AND ("Currency Code" = xRec."Currency Code") THEN
                                                                  UpdateCurrencyFactor
                                                                ELSE
                                                                  IF "Currency Code" <> xRec."Currency Code" THEN BEGIN
                                                                    UpdateCurrencyFactor;
                                                                    IF PurchLinesExist THEN
                                                                //    IF CONFIRM(ChangeCurrencyQst,FALSE,FIELDCAPTION("Currency Code")) THEN BEGIN //**4PS.o
                                                                      IF ConfirmUpdateCurrencyCode THEN BEGIN //**4PS.n
                                                                        SetHideValidationDialog(TRUE);
                                                                        RecreatePurchLines(FIELDCAPTION("Currency Code"));
                                                                        SetHideValidationDialog(FALSE);
                                                                      END ELSE
                                                                        ERROR(Text018,FIELDCAPTION("Currency Code"));
                                                                  END ELSE
                                                                    IF "Currency Code" <> '' THEN BEGIN
                                                                      UpdateCurrencyFactor;
                                                                      IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                        ConfirmUpdateCurrencyFactor;
                                                                    END;
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 33  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Currency Factor"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Currency Factor;
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=No }
    { 35  ;   ;Prices Including VAT;Boolean       ;OnValidate=VAR
                                                                PurchLine@1000 : Record 39;
                                                                Currency@1001 : Record 4;
                                                                RecalculatePrice@1002 : Boolean;
                                                              BEGIN
                                                                TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);

                                                                IF "Prices Including VAT" <> xRec."Prices Including VAT" THEN BEGIN
                                                                  PurchLine.SETRANGE("Document Type","Document Type");
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  PurchLine.SETFILTER("Direct Unit Cost",'<>%1',0);
                                                                  PurchLine.SETFILTER("VAT %",'<>%1',0);
                                                                  IF PurchLine.FIND('-') THEN BEGIN
                                                                    RecalculatePrice :=
                                                                      CONFIRM(
                                                                        STRSUBSTNO(
                                                                          Text025 +
                                                                          Text027,
                                                                          FIELDCAPTION("Prices Including VAT"),PurchLine.FIELDCAPTION("Direct Unit Cost")),
                                                                        TRUE);
                                                                    PurchLine.SetPurchHeader(Rec);

                                                                    IF RecalculatePrice AND "Prices Including VAT" THEN
                                                                      PurchLine.MODIFYALL(Amount,0,TRUE);

                                                                    IF "Currency Code" = '' THEN
                                                                      Currency.InitRoundingPrecision
                                                                    ELSE
                                                                      Currency.GET("Currency Code");

                                                                    PurchLine.FINDSET;
                                                                    REPEAT
                                                                      PurchLine.TESTFIELD("Quantity Invoiced",0);
                                                                      PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      IF NOT RecalculatePrice THEN BEGIN
                                                                        PurchLine."VAT Difference" := 0;
                                                                        PurchLine.UpdateAmounts;
                                                                      END ELSE
                                                                        IF "Prices Including VAT" THEN BEGIN
                                                                          PurchLine."Direct Unit Cost" :=
                                                                            ROUND(
                                                                              PurchLine."Direct Unit Cost" * (1 + PurchLine."VAT %" / 100),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          IF PurchLine.Quantity <> 0 THEN BEGIN
                                                                            PurchLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                PurchLine.Quantity * PurchLine."Direct Unit Cost" * PurchLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            PurchLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                PurchLine."Inv. Discount Amount" * (1 + PurchLine."VAT %" / 100),
                                                                                Currency."Amount Rounding Precision"));
                                                                          END;
                                                                        END ELSE BEGIN
                                                                          PurchLine."Direct Unit Cost" :=
                                                                            ROUND(
                                                                              PurchLine."Direct Unit Cost" / (1 + PurchLine."VAT %" / 100),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          IF PurchLine.Quantity <> 0 THEN BEGIN
                                                                            PurchLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                PurchLine.Quantity * PurchLine."Direct Unit Cost" * PurchLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            PurchLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                PurchLine."Inv. Discount Amount" / (1 + PurchLine."VAT %" / 100),
                                                                                Currency."Amount Rounding Precision"));
                                                                          END;
                                                                        END;
                                                                      //**4PS.sn
                                                                      PurchLine."Modified by" := USERID; //DP00469
                                                                      PurchLine."Last Date Modified" := TODAY;//DP00469
                                                                      //**4PS.en
                                                                      PurchLine.MODIFY;
                                                                    UNTIL PurchLine.NEXT = 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Prices Including VAT }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;OnValidate=BEGIN
                                                                TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Invoice Disc. Code"));
                                                              END;

                                                   CaptionML=ENU=Invoice Disc. Code }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   OnValidate=BEGIN
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Language Code"));
                                                              END;

                                                   CaptionML=ENU=Language Code }
    { 43  ;   ;Purchaser Code      ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=VAR
                                                                ApprovalEntry@1001 : Record 454;
                                                                PurchaserRec@1100485000 : Record 13;
                                                              BEGIN
                                                                ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
                                                                ApprovalEntry.SETRANGE("Document Type","Document Type");
                                                                ApprovalEntry.SETRANGE("Document No.","No.");
                                                                ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
                                                                IF NOT ApprovalEntry.ISEMPTY THEN
                                                                  ERROR(Text042,FIELDCAPTION("Purchaser Code"));

                                                                //**4PS.sn
                                                                PurchSetup.GET;
                                                                IF (PurchSetup."Reference (ICM) Based on" = PurchSetup."Reference (ICM) Based on"::Purchaser) //mg.c, 19-04-11: M24458
                                                                  AND PurchaserRec.GET("Purchaser Code") THEN BEGIN
                                                                  "Reference (ICM)" := PurchaserRec."Reference (ICM)";
                                                                  MODIFY(TRUE);
                                                                END;
                                                                IF CurrFieldNo > 0 THEN
                                                                  CALCFIELDS("Name Purchaser");
                                                                //**4PS.en

                                                                IF ("Job No." = '') AND ("Service Order No." = '') THEN BEGIN  //**4PS.n
                                                                  //db, 08-05-15: 26032 (skip Dim1 if created from advice order or requisition line)
                                                                  CreateDim(
                                                                    DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                    DATABASE::Vendor,"Pay-to Vendor No.",
                                                                    DATABASE::Job,"Job No.", //**4PS.n
                                                                    DATABASE::"Service Order","Service Order No.",  //** 4PS 09-06-2010
                                                                    DATABASE::Campaign,"Campaign No.",
                                                                    DATABASE::"Responsibility Center","Responsibility Center");
                                                                  //DATABASE::Location,"Location Code"); //**4PS.n  //*C007227.o
                                                                END;

                                                                FillReferenceICM; //**4PS SR 18-01-2013
                                                              END;

                                                   CaptionML=ENU=Purchaser Code }
    { 45  ;   ;Order Class         ;Code10        ;CaptionML=ENU=Order Class }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purch. Comment Line" WHERE (Document Type=FIELD(Document Type),
                                                                                                  No.=FIELD(No.),
                                                                                                  Document Line No.=CONST(0)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=ENU=No. Printed;
                                                   Editable=No }
    { 51  ;   ;On Hold             ;Code3         ;TableRelation="On Hold Code".Code;
                                                   OnValidate=VAR
                                                                OnHoldRec@1210190000 : Record 11012031;
                                                              BEGIN
                                                                //**4PS.n
                                                                IF OnHoldRec.GET("On Hold") THEN
                                                                  IF OnHoldRec."Default Approvement Initials" <> '' THEN
                                                                    "Approvement Initials" := OnHoldRec."Default Approvement Initials";
                                                              END;

                                                   CaptionML=ENU=On Hold }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=ENU=Applies-to Doc. Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnValidate=BEGIN
                                                                IF "Applies-to Doc. No." <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');


                                                                IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." <> '') AND
                                                                   ("Applies-to Doc. No." <> '')
                                                                THEN BEGIN
                                                                  SetAmountToApply("Applies-to Doc. No.","Buy-from Vendor No.");
                                                                  SetAmountToApply(xRec."Applies-to Doc. No.","Buy-from Vendor No.");
                                                                END ELSE
                                                                  IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." = '') THEN
                                                                    SetAmountToApply("Applies-to Doc. No.","Buy-from Vendor No.")
                                                                  ELSE
                                                                    IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND ("Applies-to Doc. No." = '') THEN
                                                                      SetAmountToApply(xRec."Applies-to Doc. No.","Buy-from Vendor No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Bal. Account No.",'');
                                                              VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
                                                              VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
                                                              VendLedgEntry.SETRANGE(Open,TRUE);
                                                              IF "Applies-to Doc. No." <> '' THEN BEGIN
                                                                VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                IF VendLedgEntry.FINDFIRST THEN;
                                                                VendLedgEntry.SETRANGE("Document Type");
                                                                VendLedgEntry.SETRANGE("Document No.");
                                                              END ELSE
                                                                IF "Applies-to Doc. Type" <> 0 THEN BEGIN
                                                                  VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                  IF VendLedgEntry.FINDFIRST THEN;
                                                                  VendLedgEntry.SETRANGE("Document Type");
                                                                END ELSE
                                                                  IF Amount <> 0 THEN BEGIN
                                                                    VendLedgEntry.SETRANGE(Positive,Amount < 0);
                                                                    IF VendLedgEntry.FINDFIRST THEN;
                                                                    VendLedgEntry.SETRANGE(Positive);
                                                                  END;
                                                              ApplyVendEntries.SetPurch(Rec,VendLedgEntry,PurchHeader.FIELDNO("Applies-to Doc. No."));
                                                              ApplyVendEntries.SETTABLEVIEW(VendLedgEntry);
                                                              ApplyVendEntries.SETRECORD(VendLedgEntry);
                                                              ApplyVendEntries.LOOKUPMODE(TRUE);
                                                              IF ApplyVendEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                ApplyVendEntries.GetVendLedgEntry(VendLedgEntry);
                                                                GenJnlApply.CheckAgainstApplnCurrency(
                                                                  "Currency Code",VendLedgEntry."Currency Code",GenJnILine."Account Type"::Vendor,TRUE);
                                                                "Applies-to Doc. Type" := VendLedgEntry."Document Type";
                                                                "Applies-to Doc. No." := VendLedgEntry."Document No.";
                                                              END;
                                                              CLEAR(ApplyVendEntries);
                                                            END;

                                                   CaptionML=ENU=Applies-to Doc. No. }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account No." <> '' THEN
                                                                  CASE "Bal. Account Type" OF
                                                                    "Bal. Account Type"::"G/L Account":
                                                                      BEGIN
                                                                        GLAcc.GET("Bal. Account No.");
                                                                        GLAcc.CheckGLAcc;
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      END;
                                                                    "Bal. Account Type"::"Bank Account":
                                                                      BEGIN
                                                                        BankAcc.GET("Bal. Account No.");
                                                                        BankAcc.TESTFIELD(Blocked,FALSE);
                                                                        BankAcc.TESTFIELD("Currency Code","Currency Code");
                                                                      END;
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Bal. Account No. }
    { 56  ;   ;Recalculate Invoice Disc.;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purchase Line" WHERE (Document Type=FIELD(Document Type),
                                                                                            Document No.=FIELD(No.),
                                                                                            Recalculate Invoice Disc.=CONST(Yes)));
                                                   CaptionML=ENU=Recalculate Invoice Disc.;
                                                   Editable=No }
    { 57  ;   ;Receive             ;Boolean       ;CaptionML=ENU=Receive }
    { 58  ;   ;Invoice             ;Boolean       ;CaptionML=ENU=Invoice }
    { 59  ;   ;Print Posted Documents;Boolean     ;CaptionML=ENU=Print Posted Documents }
    { 60  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line".Amount WHERE (Document Type=FIELD(Document Type),
                                                                                                 Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Amount Including VAT" WHERE (Document Type=FIELD(Document Type),
                                                                                                                 Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Amount Including VAT;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 62  ;   ;Receiving No.       ;Code20        ;CaptionML=ENU=Receiving No. }
    { 63  ;   ;Posting No.         ;Code20        ;CaptionML=ENU=Posting No. }
    { 64  ;   ;Last Receiving No.  ;Code20        ;TableRelation="Purch. Rcpt. Header";
                                                   CaptionML=ENU=Last Receiving No.;
                                                   Editable=No }
    { 65  ;   ;Last Posting No.    ;Code20        ;TableRelation="Purch. Inv. Header";
                                                   CaptionML=ENU=Last Posting No.;
                                                   Editable=No }
    { 66  ;   ;Vendor Order No.    ;Code35        ;CaptionML=ENU=Vendor Order No. }
    { 67  ;   ;Vendor Shipment No. ;Code35        ;CaptionML=ENU=Vendor Shipment No. }
    { 68  ;   ;Vendor Invoice No.  ;Code35        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Vendor Invoice No." <> '' THEN
                                                                  CheckVendorInvoiceNo("Vendor Invoice No.", FALSE, TRUE);
                                                                UpdateManagemind(0,2);
                                                              END;

                                                   CaptionML=ENU=Vendor Invoice No. }
    { 69  ;   ;Vendor Cr. Memo No. ;Code35        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Vendor Cr. Memo No." <> '' THEN
                                                                  CheckVendorInvoiceNo("Vendor Cr. Memo No.", TRUE, TRUE);
                                                                UpdateManagemind(0,3);
                                                              END;

                                                   CaptionML=ENU=Vendor Cr. Memo No. }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=ENU=VAT Registration No. }
    { 72  ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Sell-to Customer No." <> "Sell-to Customer No.")
                                                                THEN BEGIN
                                                                  PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  PurchLine.SETFILTER("Sales Order Line No.",'<>0');
                                                                  IF NOT PurchLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Sell-to Customer No."));

                                                                  PurchLine.SETRANGE("Sales Order Line No.");
                                                                  PurchLine.SETFILTER("Special Order Sales Line No.",'<>0');
                                                                  IF NOT PurchLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Sell-to Customer No."));
                                                                END;

                                                                IF "Sell-to Customer No." = '' THEN
                                                                  VALIDATE("Location Code",UserSetupMgt.GetLocation(1,'',"Responsibility Center"))
                                                                ELSE
                                                                //**4PS.sn
                                                                BEGIN
                                                                  "Received on Project" := '';
                                                                //**4PS.en
                                                                  VALIDATE("Ship-to Code",'');
                                                                END; //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Sell-to Customer No. }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);
                                                                IF (xRec."Buy-from Vendor No." = "Buy-from Vendor No.") AND
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group")
                                                                THEN BEGIN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    "VAT Bus. Posting Group" := GenBusPostingGrp."Def. VAT Bus. Posting Group";
                                                                  RecreatePurchLines(FIELDCAPTION("Gen. Bus. Posting Group"));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Transaction Type"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Transaction Type }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Transport Method"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Transport Method }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=ENU=VAT Country/Region Code }
    { 79  ;   ;Buy-from Vendor Name;Text50        ;CaptionML=ENU=Buy-from Vendor Name }
    { 80  ;   ;Buy-from Vendor Name 2;Text50      ;CaptionML=ENU=Buy-from Vendor Name 2 }
    { 81  ;   ;Buy-from Address    ;Text50        ;CaptionML=ENU=Buy-from Address }
    { 82  ;   ;Buy-from Address 2  ;Text50        ;CaptionML=ENU=Buy-from Address 2 }
    { 83  ;   ;Buy-from City       ;Text30        ;TableRelation=IF (Buy-from Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Buy-from Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Buy-from Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Buy-from City","Buy-from Post Code","Buy-from County","Buy-from Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Buy-from City }
    { 84  ;   ;Buy-from Contact    ;Text50        ;CaptionML=ENU=Buy-from Contact }
    { 85  ;   ;Pay-to Post Code    ;Code20        ;TableRelation=IF (Pay-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Pay-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Pay-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Pay-to City","Pay-to Post Code","Pay-to County","Pay-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Pay-to Post Code }
    { 86  ;   ;Pay-to County       ;Text30        ;CaptionML=ENU=Pay-to County }
    { 87  ;   ;Pay-to Country/Region Code;Code10  ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Pay-to Country/Region Code }
    { 88  ;   ;Buy-from Post Code  ;Code20        ;TableRelation=IF (Buy-from Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Buy-from Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Buy-from Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Buy-from City","Buy-from Post Code","Buy-from County","Buy-from Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Buy-from Post Code }
    { 89  ;   ;Buy-from County     ;Text30        ;CaptionML=ENU=Buy-from County }
    { 90  ;   ;Buy-from Country/Region Code;Code10;TableRelation=Country/Region;
                                                   CaptionML=ENU=Buy-from Country/Region Code }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Ship-to Post Code }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=ENU=Ship-to County }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                VALIDATE("Country of Destination","Ship-to Country/Region Code"); //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Ship-to Country/Region Code }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=ENU=Bal. Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Bank Account;
                                                   OptionString=G/L Account,Bank Account }
    { 95  ;   ;Order Address Code  ;Code10        ;TableRelation="Order Address".Code WHERE (Vendor No.=FIELD(Buy-from Vendor No.));
                                                   OnValidate=BEGIN
                                                                IF "Order Address Code" <> '' THEN BEGIN
                                                                  OrderAddr.GET("Buy-from Vendor No.","Order Address Code");
                                                                  "Buy-from Vendor Name" := OrderAddr.Name;
                                                                  "Buy-from Vendor Name 2" := OrderAddr."Name 2";
                                                                  "Buy-from Address" := OrderAddr.Address;
                                                                  "Buy-from Address 2" := OrderAddr."Address 2";
                                                                  "Buy-from City" := OrderAddr.City;
                                                                  "Buy-from Contact" := OrderAddr.Contact;
                                                                  "Buy-from Contact Person No." := ''; //**4PS.n
                                                                  UpdateEMailForPurchOrderForContactPerson; //**4PS.n
                                                                  "Buy-from Post Code" := OrderAddr."Post Code";
                                                                  "Buy-from County" := OrderAddr.County;
                                                                  "Buy-from Country/Region Code" := OrderAddr."Country/Region Code";
                                                                  VALIDATE("Country of Origin","Buy-from Country/Region Code");   //**4PS05.n
                                                                  "Buy-from Phone No." := OrderAddr."Phone No.";  //**4PS.n
                                                                  "Buy-from Fax No." := OrderAddr."Fax No.";  //**4PS.n

                                                                  IF ("Document Type" = "Document Type"::"Return Order") OR
                                                                     ("Document Type" = "Document Type"::"Credit Memo")
                                                                  THEN BEGIN
                                                                    "Ship-to Name" := OrderAddr.Name;
                                                                    "Ship-to Name 2" := OrderAddr."Name 2";
                                                                    "Ship-to Address" := OrderAddr.Address;
                                                                    "Ship-to Address 2" := OrderAddr."Address 2";
                                                                    "Ship-to City" := OrderAddr.City;
                                                                    "Ship-to Post Code" := OrderAddr."Post Code";
                                                                    "Ship-to County" := OrderAddr.County;
                                                                    "Ship-to Country/Region Code" := OrderAddr."Country/Region Code";
                                                                    "Ship-to Contact" := OrderAddr.Contact;
                                                                    UpdateVATData(); //**4PS05.n
                                                                  END;
                                                                END ELSE BEGIN
                                                                  GetVend("Buy-from Vendor No.");
                                                                  "Buy-from Vendor Name" := Vend.Name;
                                                                  "Buy-from Vendor Name 2" := Vend."Name 2";
                                                                  "Buy-from Address" := Vend.Address;
                                                                  "Buy-from Address 2" := Vend."Address 2";
                                                                  "Buy-from City" := Vend.City;
                                                                  "Buy-from Contact" := Vend.Contact;
                                                                  "Buy-from Contact Person No." := ''; //**4PS.n
                                                                  UpdateEMailForPurchOrderForContactPerson; //**4PS.n
                                                                  "Buy-from Post Code" := Vend."Post Code";
                                                                  "Buy-from County" := Vend.County;
                                                                  "Buy-from Country/Region Code" := Vend."Country/Region Code";
                                                                  VALIDATE("Country of Origin","Buy-from Country/Region Code");   //**4PS05.n
                                                                  "Buy-from Phone No." := Vend."Phone No.";  //**4PS.n
                                                                  "Buy-from Fax No." := Vend."Fax No.";  //**4PS.n

                                                                  IF ("Document Type" = "Document Type"::"Return Order") OR
                                                                     ("Document Type" = "Document Type"::"Credit Memo")
                                                                  THEN BEGIN
                                                                    "Ship-to Name" := Vend.Name;
                                                                    "Ship-to Name 2" := Vend."Name 2";
                                                                    "Ship-to Address" := Vend.Address;
                                                                    "Ship-to Address 2" := Vend."Address 2";
                                                                    "Ship-to City" := Vend.City;
                                                                    "Ship-to Post Code" := Vend."Post Code";
                                                                    "Ship-to County" := Vend.County;
                                                                    "Ship-to Country/Region Code" := Vend."Country/Region Code";
                                                                    "Ship-to Contact" := Vend.Contact;
                                                                    "Shipment Method Code" := Vend."Shipment Method Code";
                                                                    IF Vend."Location Code" <> '' THEN
                                                                      VALIDATE("Location Code",Vend."Location Code");
                                                                    UpdateVATData(); //**4PS05.n
                                                                  END
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Order Address Code }
    { 97  ;   ;Entry Point         ;Code10        ;TableRelation="Entry/Exit Point";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Entry Point"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Entry Point }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=ENU=Correction }
    { 99  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                IF xRec."Document Date" <> "Document Date" THEN
                                                                  UpdateDocumentDate := TRUE;
                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                              END;

                                                   CaptionML=ENU=Document Date }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION(Area),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Area }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Transaction Specification"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Transaction Specification }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=BEGIN
                                                                PaymentMethod.INIT;
                                                                IF "Payment Method Code" <> '' THEN
                                                                  PaymentMethod.GET("Payment Method Code");
                                                                "Bal. Account Type" := PaymentMethod."Bal. Account Type";
                                                                "Bal. Account No." := PaymentMethod."Bal. Account No.";
                                                                IF "Bal. Account No." <> '' THEN BEGIN
                                                                  TESTFIELD("Applies-to Doc. No.",'');
                                                                  TESTFIELD("Applies-to ID",'');
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Payment Method Code }
    { 107 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 108 ;   ;Posting No. Series  ;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Posting No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  TestNoSeries;
                                                                  NoSeriesMgt.TestSeries(GetPostingNoSeriesCode,"Posting No. Series");
                                                                END;
                                                                TESTFIELD("Posting No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                TestNoSeries;
                                                                IF NoSeriesMgt.LookupSeries(GetPostingNoSeriesCode,"Posting No. Series") THEN
                                                                  VALIDATE("Posting No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Posting No. Series }
    { 109 ;   ;Receiving No. Series;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Receiving No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Receipt Nos.");
                                                                  NoSeriesMgt.TestSeries(PurchSetup."Posted Receipt Nos.","Receiving No. Series");
                                                                END;
                                                                TESTFIELD("Receiving No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Receipt Nos.");
                                                                IF NoSeriesMgt.LookupSeries(PurchSetup."Posted Receipt Nos.","Receiving No. Series") THEN
                                                                  VALIDATE("Receiving No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Receiving No. Series }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Tax Area Code"));
                                                              END;

                                                   CaptionML=ENU=Tax Area Code }
    { 115 ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Tax Liable"));
                                                              END;

                                                   CaptionML=ENU=Tax Liable }
    { 116 ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);
                                                                IF (xRec."Buy-from Vendor No." = "Buy-from Vendor No.") AND
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreatePurchLines(FIELDCAPTION("VAT Bus. Posting Group"));
                                                              END;

                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 118 ;   ;Applies-to ID       ;Code50        ;OnValidate=VAR
                                                                TempVendLedgEntry@1000 : Record 25;
                                                              BEGIN
                                                                IF "Applies-to ID" <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');
                                                                IF ("Applies-to ID" <> xRec."Applies-to ID") AND (xRec."Applies-to ID" <> '') THEN BEGIN
                                                                  VendLedgEntry.SETCURRENTKEY("Vendor No.",Open);
                                                                  VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
                                                                  VendLedgEntry.SETRANGE(Open,TRUE);
                                                                  VendLedgEntry.SETRANGE("Applies-to ID",xRec."Applies-to ID");
                                                                  IF VendLedgEntry.FINDFIRST THEN
                                                                    VendEntrySetApplID.SetApplId(VendLedgEntry,TempVendLedgEntry,'');
                                                                  VendLedgEntry.RESET;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Applies-to ID }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;OnValidate=BEGIN
                                                                GLSetup.GET;
                                                                IF "VAT Base Discount %" > GLSetup."VAT Tolerance %" THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed :=
                                                                      CONFIRM(
                                                                        Text007 +
                                                                        Text008,FALSE,
                                                                        FIELDCAPTION("VAT Base Discount %"),
                                                                        GLSetup.FIELDCAPTION("VAT Tolerance %"),
                                                                        GLSetup.TABLECAPTION);
                                                                  IF NOT Confirmed THEN
                                                                    "VAT Base Discount %" := xRec."VAT Base Discount %";
                                                                END;

                                                                IF ("VAT Base Discount %" = xRec."VAT Base Discount %") AND
                                                                   (CurrFieldNo <> 0)
                                                                THEN
                                                                  EXIT;

                                                                PurchLine.SETRANGE("Document Type","Document Type");
                                                                PurchLine.SETRANGE("Document No.","No.");
                                                                PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");
                                                                PurchLine.SETFILTER(Quantity,'<>0');
                                                                PurchLine.LOCKTABLE;
                                                                IF PurchLine.FINDSET THEN BEGIN
                                                                  //**4PS.sn
                                                                  //MODIFY;
                                                                  MODIFY(TRUE);
                                                                  //**4PS.en
                                                                  REPEAT
                                                                    PurchLine.UpdateAmounts;
                                                                    //**4PS.sn
                                                                    PurchLine."Modified by" := USERID; //DP00469
                                                                    PurchLine."Last Date Modified" := TODAY;//DP00469
                                                                    //**4PS.en
                                                                    PurchLine.MODIFY;
                                                                  UNTIL PurchLine.NEXT = 0;
                                                                END;
                                                                PurchLine.RESET;
                                                              END;

                                                   CaptionML=ENU=VAT Base Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 120 ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                CALCFIELDS("Order Consent Lines Available");
                                                              END;

                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Open,Released,Pending Approval,Pending Prepayment,,,,,Closed;
                                                   OptionString=Open,Released,Pending Approval,Pending Prepayment,,,,,Closed;
                                                   Description=4PS Status::Closed added;
                                                   Editable=No }
    { 121 ;   ;Invoice Discount Calculation;Option;CaptionML=ENU=Invoice Discount Calculation;
                                                   OptionCaptionML=ENU=None,%,Amount;
                                                   OptionString=None,%,Amount;
                                                   Editable=No }
    { 122 ;   ;Invoice Discount Value;Decimal     ;CaptionML=ENU=Invoice Discount Value;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 123 ;   ;Send IC Document    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Send IC Document" THEN BEGIN
                                                                  TESTFIELD("Buy-from IC Partner Code");
                                                                  TESTFIELD("IC Direction","IC Direction"::Outgoing);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Send IC Document }
    { 124 ;   ;IC Status           ;Option        ;CaptionML=ENU=IC Status;
                                                   OptionCaptionML=ENU=New,Pending,Sent;
                                                   OptionString=New,Pending,Sent }
    { 125 ;   ;Buy-from IC Partner Code;Code20    ;TableRelation="IC Partner";
                                                   CaptionML=ENU=Buy-from IC Partner Code;
                                                   Editable=No }
    { 126 ;   ;Pay-to IC Partner Code;Code20      ;TableRelation="IC Partner";
                                                   CaptionML=ENU=Pay-to IC Partner Code;
                                                   Editable=No }
    { 129 ;   ;IC Direction        ;Option        ;OnValidate=BEGIN
                                                                IF "IC Direction" = "IC Direction"::Incoming THEN
                                                                  "Send IC Document" := FALSE;
                                                              END;

                                                   CaptionML=ENU=IC Direction;
                                                   OptionCaptionML=ENU=Outgoing,Incoming;
                                                   OptionString=Outgoing,Incoming }
    { 130 ;   ;Prepayment No.      ;Code20        ;CaptionML=ENU=Prepayment No. }
    { 131 ;   ;Last Prepayment No. ;Code20        ;TableRelation="Purch. Inv. Header";
                                                   CaptionML=ENU=Last Prepayment No. }
    { 132 ;   ;Prepmt. Cr. Memo No.;Code20        ;CaptionML=ENU=Prepmt. Cr. Memo No. }
    { 133 ;   ;Last Prepmt. Cr. Memo No.;Code20   ;TableRelation="Purch. Cr. Memo Hdr.";
                                                   CaptionML=ENU=Last Prepmt. Cr. Memo No. }
    { 134 ;   ;Prepayment %        ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."Prepayment %" <> "Prepayment %" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Prepayment %"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Prepayment %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 135 ;   ;Prepayment No. Series;Code10       ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepayment No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                  NoSeriesMgt.TestSeries(GetPostingPrepaymentNoSeriesCode,"Prepayment No. Series");
                                                                END;
                                                                TESTFIELD("Prepayment No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                IF NoSeriesMgt.LookupSeries(GetPostingPrepaymentNoSeriesCode,"Prepayment No. Series") THEN
                                                                  VALIDATE("Prepayment No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Prepayment No. Series }
    { 136 ;   ;Compress Prepayment ;Boolean       ;InitValue=Yes;
                                                   CaptionML=ENU=Compress Prepayment }
    { 137 ;   ;Prepayment Due Date ;Date          ;CaptionML=ENU=Prepayment Due Date }
    { 138 ;   ;Prepmt. Cr. Memo No. Series;Code10 ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepmt. Cr. Memo No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                  NoSeriesMgt.TestSeries(GetPostingPrepaymentNoSeriesCode,"Prepmt. Cr. Memo No. Series");
                                                                END;
                                                                TESTFIELD("Prepmt. Cr. Memo No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                IF NoSeriesMgt.LookupSeries(GetPostingPrepaymentNoSeriesCode,"Prepmt. Cr. Memo No. Series") THEN
                                                                  VALIDATE("Prepmt. Cr. Memo No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Prepmt. Cr. Memo No. Series }
    { 139 ;   ;Prepmt. Posting Description;Text50 ;CaptionML=ENU=Prepmt. Posting Description }
    { 142 ;   ;Prepmt. Pmt. Discount Date;Date    ;CaptionML=ENU=Prepmt. Pmt. Discount Date }
    { 143 ;   ;Prepmt. Payment Terms Code;Code10  ;TableRelation="Payment Terms";
                                                   OnValidate=VAR
                                                                PaymentTerms@1000 : Record 3;
                                                              BEGIN
                                                                IF ("Prepmt. Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Prepmt. Payment Terms Code");
                                                                  IF (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                                                                      NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos")
                                                                  THEN BEGIN
                                                                    VALIDATE("Prepayment Due Date","Document Date");
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    "Prepmt. Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                      VALIDATE("Prepmt. Payment Discount %",PaymentTerms."Discount %")
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Prepayment Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Prepmt. Payment Terms Code }
    { 144 ;   ;Prepmt. Payment Discount %;Decimal ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=ENU=Prepmt. Payment Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 151 ;   ;Quote No.           ;Code20        ;CaptionML=ENU=Quote No.;
                                                   Editable=No }
    { 160 ;   ;Job Queue Status    ;Option        ;OnLookup=VAR
                                                              JobQueueEntry@1000 : Record 472;
                                                            BEGIN
                                                              IF "Job Queue Status" = "Job Queue Status"::" " THEN
                                                                EXIT;
                                                              JobQueueEntry.ShowStatusMsg("Job Queue Entry ID");
                                                            END;

                                                   CaptionML=ENU=Job Queue Status;
                                                   OptionCaptionML=ENU=" ,Scheduled for Posting,Error,Posting";
                                                   OptionString=[ ,Scheduled for Posting,Error,Posting];
                                                   Editable=No }
    { 161 ;   ;Job Queue Entry ID  ;GUID          ;CaptionML=ENU=Job Queue Entry ID;
                                                   Editable=No }
    { 165 ;   ;Incoming Document Entry No.;Integer;TableRelation="Incoming Document";
                                                   OnValidate=VAR
                                                                IncomingDocument@1000 : Record 130;
                                                              BEGIN
                                                                IF "Incoming Document Entry No." = xRec."Incoming Document Entry No." THEN
                                                                  EXIT;
                                                                IF "Incoming Document Entry No." = 0 THEN
                                                                  IncomingDocument.RemoveReferenceToWorkingDocument(xRec."Incoming Document Entry No.")
                                                                ELSE
                                                                  IncomingDocument.SetPurchDoc(Rec);
                                                              END;

                                                   CaptionML=ENU=Incoming Document Entry No. }
    { 170 ;   ;Creditor No.        ;Code20        ;CaptionML=ENU=Creditor No.;
                                                   Numeric=Yes }
    { 171 ;   ;Payment Reference   ;Code50        ;OnValidate=BEGIN
                                                                IF "Payment Reference" <> '' THEN
                                                                  TESTFIELD("Creditor No.");
                                                              END;

                                                   CaptionML=ENU=Payment Reference;
                                                   Numeric=Yes }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=No }
    { 1305;   ;Invoice Discount Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Inv. Discount Amount" WHERE (Document No.=FIELD(No.),
                                                                                                                 Document Type=FIELD(Document Type)));
                                                   CaptionML=ENU=Invoice Discount Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5043;   ;No. of Archived Versions;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Max("Purchase Header Archive"."Version No." WHERE (Document Type=FIELD(Document Type),
                                                                                                                  No.=FIELD(No.),
                                                                                                                  Doc. No. Occurrence=FIELD(Doc. No. Occurrence)));
                                                   CaptionML=ENU=No. of Archived Versions;
                                                   Editable=No }
    { 5048;   ;Doc. No. Occurrence ;Integer       ;CaptionML=ENU=Doc. No. Occurrence }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::Job,"Job No.", //**4PS.n
                                                                  DATABASE::"Service Order","Service Order No.",  //** 4PS 09-06-2010
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                                  //DATABASE::Location,"Location Code"); //**4PS.n  //*C007227.o
                                                              END;

                                                   CaptionML=ENU=Campaign No. }
    { 5052;   ;Buy-from Contact No.;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1000 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                              BEGIN
                                                                TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);

                                                                IF ("Buy-from Contact No." <> xRec."Buy-from Contact No.") AND
                                                                   (xRec."Buy-from Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Buy-from Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    PurchLine.SETRANGE("Document Type","Document Type");
                                                                    PurchLine.SETRANGE("Document No.","No.");
                                                                    IF ("Buy-from Contact No." = '') AND ("Buy-from Vendor No." = '') THEN BEGIN
                                                                      IF NOT PurchLine.ISEMPTY THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Buy-from Contact No."));
                                                                      TempPurchHeader := Rec; //**4PS.n C004837
                                                                      INIT;
                                                                      PurchSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      InitNoSeries;
                                                                      GetTempPurchHeader; //**4PS.n C004837
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Buy-from Vendor No." <> '') AND ("Buy-from Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Buy-from Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Buy-from Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Buy-from Vendor No.");
                                                                END;

                                                                UpdateBuyFromVend("Buy-from Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusinessRelation@1000 : Record 5054;
                                                            BEGIN
                                                              IF "Buy-from Vendor No." <> '' THEN
                                                                IF Cont.GET("Buy-from Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Buy-from Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');
                                                                END;

                                                              IF "Buy-from Contact No." <> '' THEN
                                                                IF Cont.GET("Buy-from Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Buy-from Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Buy-from Contact No. }
    { 5053;   ;Pay-to Contact No.  ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                              BEGIN
                                                                TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);

                                                                IF ("Pay-to Contact No." <> xRec."Pay-to Contact No.") AND
                                                                   (xRec."Pay-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Pay-to Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    PurchLine.SETRANGE("Document Type","Document Type");
                                                                    PurchLine.SETRANGE("Document No.","No.");
                                                                    IF ("Pay-to Contact No." = '') AND ("Pay-to Vendor No." = '') THEN BEGIN
                                                                      IF NOT PurchLine.ISEMPTY THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Pay-to Contact No."));
                                                                      TempPurchHeader := Rec; //**4PS.n C004837
                                                                      INIT;
                                                                      PurchSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      InitNoSeries;
                                                                      GetTempPurchHeader; //**4PS.n C004837
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    "Pay-to Contact No." := xRec."Pay-to Contact No.";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                //IF ("Pay-to Vendor No." <> '') AND ("Pay-to Contact No." <> '') THEN BEGIN  //**4PS03.o
                                                                IF ("Pay-to Vendor No." <> '') AND ("Pay-to Contact No." <> '') AND (Cont."Company No." <> '') THEN BEGIN    //**4PS03.n
                                                                  Cont.GET("Pay-to Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Pay-to Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Pay-to Vendor No.");
                                                                END;

                                                                UpdatePayToVend("Pay-to Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1000 : Record 5050;
                                                              ContBusinessRelation@1001 : Record 5054;
                                                            BEGIN
                                                              IF "Pay-to Vendor No." <> '' THEN
                                                                IF Cont.GET("Pay-to Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Pay-to Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');
                                                                END;

                                                              IF "Pay-to Contact No." <> '' THEN
                                                                IF Cont.GET("Pay-to Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Pay-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Pay-to Contact No. }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);
                                                                IF NOT UserSetupMgt.CheckRespCenter(1,"Responsibility Center") THEN
                                                                  ERROR(
                                                                    Text028,
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetPurchasesFilter);

                                                                "Location Code" := UserSetupMgt.GetLocation(1,'',"Responsibility Center");
                                                                //**4PS.sn
                                                                IF (xRec."Location Code" <> '') AND ("Location Code" = '') THEN
                                                                  "Location Code" := xRec."Location Code";  //db, 27-02-04: skip empty default
                                                                ValidateLocationCode;
                                                                //**4PS.en
                                                                IF "Location Code" = '' THEN BEGIN
                                                                  IF InvtSetup.GET THEN
                                                                    "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
                                                                END ELSE BEGIN
                                                                  IF Location.GET("Location Code") THEN;
                                                                  "Inbound Whse. Handling Time" := Location."Inbound Whse. Handling Time";
                                                                END;

                                                                UpdateShipToAddress;

                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::Job,"Job No.", //**4PS.n
                                                                  DATABASE::"Service Order","Service Order No.",  //** 4PS 09-06-2010
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::Campaign,"Campaign No.");
                                                                  //DATABASE::Location,"Location Code"); //**4PS.n  //*C007227.o

                                                                IF xRec."Responsibility Center" <> "Responsibility Center" THEN BEGIN
                                                                  //RecreatePurchLines(FIELDCAPTION("Responsibility Center"));        //**4PS.o
                                                                  "Assigned User ID" := '';
                                                                  MessageIfPurchLinesExist(FIELDCAPTION("Responsibility Center"));  //**4PS.n
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Responsibility Center }
    { 5752;   ;Completely Received ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Min("Purchase Line"."Completely Received" WHERE (Document Type=FIELD(Document Type),
                                                                                                                Document No.=FIELD(No.),
                                                                                                                Type=FILTER(<>' '),
                                                                                                                Location Code=FIELD(Location Filter)));
                                                   CaptionML=ENU=Completely Received;
                                                   Editable=No }
    { 5753;   ;Posting from Whse. Ref.;Integer    ;AccessByPermission=TableData 14=R;
                                                   CaptionML=ENU=Posting from Whse. Ref. }
    { 5754;   ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   CaptionML=ENU=Location Filter }
    { 5790;   ;Requested Receipt Date;Date        ;OnValidate=BEGIN
                                                                TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);
                                                                IF "Promised Receipt Date" <> 0D THEN
                                                                  ERROR(
                                                                    Text034,
                                                                    FIELDCAPTION("Requested Receipt Date"),
                                                                    FIELDCAPTION("Promised Receipt Date"));

                                                                IF "Requested Receipt Date" <> xRec."Requested Receipt Date" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Requested Receipt Date"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=ENU=Requested Receipt Date }
    { 5791;   ;Promised Receipt Date;Date         ;OnValidate=BEGIN
                                                                //TESTFIELD(Status,Status::Open); //**4PS.o
                                                                TestStatusOpen; //**4PS.n CALL C020358
                                                                IF "Promised Receipt Date" <> xRec."Promised Receipt Date" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Promised Receipt Date"),CurrFieldNo <> 0);

                                                                //**4PS.sn, call 26806
                                                                IF "Promised Receipt Date" = 0D THEN
                                                                  VALIDATE("Document Confirmation Received",FALSE)
                                                                ELSE
                                                                  VALIDATE("Document Confirmation Received",TRUE);
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Promised Receipt Date }
    { 5792;   ;Lead Time Calculation;DateFormula  ;OnValidate=BEGIN
                                                                TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);
                                                                IF "Lead Time Calculation" <> xRec."Lead Time Calculation" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Lead Time Calculation"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Lead Time Calculation }
    { 5793;   ;Inbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);
                                                                IF "Inbound Whse. Handling Time" <> xRec."Inbound Whse. Handling Time" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Inbound Whse. Handling Time"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=ENU=Inbound Whse. Handling Time }
    { 5796;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 5800;   ;Vendor Authorization No.;Code35    ;CaptionML=ENU=Vendor Authorization No. }
    { 5801;   ;Return Shipment No. ;Code20        ;CaptionML=ENU=Return Shipment No. }
    { 5802;   ;Return Shipment No. Series;Code10  ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Return Shipment No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Return Shpt. Nos.");
                                                                  NoSeriesMgt.TestSeries(PurchSetup."Posted Return Shpt. Nos.","Return Shipment No. Series");
                                                                END;
                                                                TESTFIELD("Return Shipment No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Return Shpt. Nos.");
                                                                IF NoSeriesMgt.LookupSeries(PurchSetup."Posted Return Shpt. Nos.","Return Shipment No. Series") THEN
                                                                  VALIDATE("Return Shipment No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Return Shipment No. Series }
    { 5803;   ;Ship                ;Boolean       ;CaptionML=ENU=Ship }
    { 5804;   ;Last Return Shipment No.;Code20    ;TableRelation="Return Shipment Header";
                                                   CaptionML=ENU=Last Return Shipment No.;
                                                   Editable=No }
    { 9000;   ;Assigned User ID    ;Code50        ;TableRelation="User Setup";
                                                   OnValidate=BEGIN
                                                                IF NOT UserSetupMgt.CheckRespCenter2(1,"Responsibility Center","Assigned User ID") THEN
                                                                  ERROR(
                                                                    Text049,"Assigned User ID",
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetPurchasesFilter2("Assigned User ID"));
                                                              END;

                                                   CaptionML=ENU=Assigned User ID }
    { 9001;   ;Pending Approvals   ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Approval Entry" WHERE (Table ID=CONST(38),
                                                                                             Document Type=FIELD(Document Type),
                                                                                             Document No.=FIELD(No.),
                                                                                             Status=FILTER(Open|Created)));
                                                   CaptionML=ENU=Pending Approvals }
    { 11012001;;Subcontracting Invoice;Boolean    ;OnValidate=BEGIN
                                                                IF NOT "Subcontracting Invoice" THEN BEGIN
                                                                  "Payment Agreement" := '';
                                                                  "Actual Effective Date" := 0D;
                                                                  "Actual End Date" := 0D;
                                                                  "Number of Hours" := 0;
                                                                  "Avg. Wage Rate" := 0;
                                                                  "Labor Amount" := 0;
                                                                  "Contribution Percentage Labor" := 0;
                                                                  "Contribution Percentage Total" := 0;
                                                                  "Pay To Tax Authority" := FALSE;
                                                                  "Wage Charge (to B Account)" := 0;
                                                                  "Wage Charge (to Tax Authority)" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Subcontracting Invoice }
    { 11012005;;Job No.            ;Code20        ;TableRelation=Job;
                                                   OnValidate=VAR
                                                                lvBlockingCodeRec@1100485000 : Record 11012027;
                                                                lvEmployeeReferenceICMRec@1210190000 : Record 11012739;
                                                              BEGIN
                                                                //**4PS.sn
                                                                IF "Job No." <> '' THEN BEGIN
                                                                  TESTFIELD("Service Order No.", '');
                                                                  ProjSetupRec.GET;
                                                                  ProjRec.GET("Job No.");

                                                                  IF ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
                                                                     (ProjRec."Blocking Code" <> '') AND
                                                                     ((ProjRec."Project Status" = ProjRec."Project Status"::"Technical Finished") OR
                                                                      (ProjRec."Project Status" = ProjRec."Project Status"::"Administrative Finished") OR
                                                                      ((ProjRec."Project Status" = ProjRec."Project Status"::Finished) AND ProjSetupRec."Provisions at Closure")
                                                                     ) THEN
                                                                  BEGIN
                                                                    CASE "Document Type" OF
                                                                      "Document Type"::Order:
                                                                        lvBlockingCodeRec.Switch := lvBlockingCodeRec.Switch::"Purchase Order";
                                                                      "Document Type"::Invoice,"Document Type"::"Credit Memo":
                                                                        lvBlockingCodeRec.Switch := lvBlockingCodeRec.Switch::"Purchase Invoice";
                                                                    END;
                                                                    lvBlockingCodeRec.CheckBlocked(ProjRec."Blocking Code", lvBlockingCodeRec.Switch, ProjRec, TRUE);
                                                                  END ELSE BEGIN
                                                                    IF ProjSetupRec."Provisions at Closure" THEN
                                                                      ProjRec.CheckProjectStatus(-1)
                                                                    ELSE
                                                                      ProjRec.CheckProjectStatus(1);
                                                                  END;

                                                                  IF NOT ProjSetupRec."Post in Estim. Status allowed" THEN //C001038
                                                                    IF ((ProjRec."Project Status" < ProjRec."Project Status"::Preparation) AND ("Document Type" > "Document Type"::Quote)) OR
                                                                       ((ProjRec."Project Status" > ProjRec."Project Status"::Production) AND ("Document Type" < "Document Type"::Order))
                                                                    THEN
                                                                      ERROR(Text11012009,ProjRec.TABLECAPTION,"Job No.",ProjRec.FIELDCAPTION("Project Status"),ProjRec."Project Status");

                                                                  TESTFIELD("Service Order No.", '');

                                                                  IF (CurrFieldNo = FIELDNO("Job No.")) THEN BEGIN
                                                                    ProjRec.TESTFIELD("Project Type");
                                                                    Expediter := ProjRec.Expediter;
                                                                  END;

                                                                  //**4PSmg.sn, 19-04-11: M24458
                                                                  PurchSetup.GET;
                                                                  IF PurchSetup."Reference (ICM) Based on" = PurchSetup."Reference (ICM) Based on"::"Project Manager" THEN
                                                                    IF lvEmployeeReferenceICMRec.GET(ProjRec."Project Manager") THEN
                                                                      "Reference (ICM)" := lvEmployeeReferenceICMRec."Reference (ICM)";
                                                                  //**4PSmg.en, 19-04-11: M24458
                                                                END;

                                                                IF "Received on Project" <> "Job No." THEN  //db, 16-03-11 (due to validate Job by MultiCurrencyCheck in codeunit 333)
                                                                  VALIDATE("Received on Project", "Job No.");

                                                                UpdateCurrencyFactor;
                                                                IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                  IF (CurrFieldNo = FIELDNO("Job No.")) THEN
                                                                    ConfirmUpdateCurrencyFactor
                                                                  ELSE
                                                                    VALIDATE("Currency Factor");

                                                                IF (CurrFieldNo = FIELDNO("Job No.")) THEN BEGIN
                                                                  IF "Invoice Lines Input" AND ("Job No." <> xRec."Job No.") THEN
                                                                    MessageIfPurchLinesExist(FIELDCAPTION("Job No."));
                                                                END;

                                                                ChangeProjectInWarrantyData;

                                                                UpdateOrderAddressByDepartment; //**4PS.n

                                                                CreateDim(
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::"Service Order","Service Order No.",  //** 4PS 09-06-2010
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                                  //DATABASE::Location,"Location Code"); //**4PS.n  //*C007227.o
                                                                FillJournalTemplate; //**4PS.n C008271

                                                                IF ("Preregister WIP") THEN
                                                                  CreatePurchLineRegAcc;

                                                                FillReferenceICM; //**4PS SR 18-01-2013
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Project No. }
    { 11012007;;Project Description;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job.Description WHERE (No.=FIELD(Job No.)));
                                                   CaptionML=ENU=Project Description;
                                                   Editable=No }
    { 11012010;;Payment Agreement  ;Code20        ;TableRelation="Payment Agreement".Code WHERE (Sub Contractor=FIELD(Buy-from Vendor No.));
                                                   OnValidate=VAR
                                                                AgreementRec@11012000 : Record 11012028;
                                                              BEGIN
                                                                //**4PS
                                                                IF AgreementRec.GET("Payment Agreement") THEN BEGIN
                                                                  AgreementRec.TESTFIELD(Date);
                                                                  AgreementRec.TESTFIELD(Description);
                                                                  IF "Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"] THEN
                                                                    AgreementRec.TESTFIELD("Signed Return Date");

                                                                  GetVend("Buy-from Vendor No.");
                                                                  IF Vend.SWP THEN
                                                                    "Avg. Wage Rate" := 0
                                                                  ELSE
                                                                    IF "Currency Code" = '' THEN
                                                                      "Avg. Wage Rate" := AgreementRec."Avg. Wage Rate"
                                                                    ELSE
                                                                      "Avg. Wage Rate" :=
                                                                        ROUND(
                                                                          CurrExchRate.ExchangeAmtLCYToFCY(
                                                                            0, '', "Posting Date","Currency Code",
                                                                            AgreementRec."Avg. Wage Rate","Currency Factor",FALSE));

                                                                  "Contribution Percentage Labor" := AgreementRec."Contribution Percentage Labor";
                                                                  "Contribution Percentage Total" := AgreementRec."Contribution Percentage Total";
                                                                  "Pay To Tax Authority" := AgreementRec."Pay To Tax Authority";
                                                                  "Actual Effective Date" := AgreementRec."Expected Effective Date";
                                                                  "Actual End Date" := AgreementRec."Expected Enddate";
                                                                  IF "Payment Agreement" <> xRec."Payment Agreement" THEN
                                                                    "Number of Hours" := AgreementRec."Number of Hours";
                                                                END;

                                                                IF "Payment Agreement" <> '' THEN
                                                                  //VALIDATE("Number of Hours", 1) //C003081.o
                                                                  VALIDATE("Number of Hours")      //C003081.n
                                                                ELSE
                                                                  VALIDATE("Number of Hours", 0);
                                                              END;

                                                   OnLookup=VAR
                                                              lRecPaymentAgreement@1210190000 : Record 11012028;
                                                            BEGIN
                                                              lRecPaymentAgreement.SETRANGE("Sub Contractor", "Buy-from Vendor No.");
                                                              IF "Job No." <> '' THEN
                                                                lRecPaymentAgreement.SETFILTER("Project No.", '%1|%2', '', "Job No.");
                                                              IF PAGE.RUNMODAL(11012059, lRecPaymentAgreement) = ACTION::LookupOK THEN
                                                                VALIDATE("Payment Agreement", lRecPaymentAgreement.Code);
                                                            END;

                                                   CaptionML=ENU=Payment Agreement }
    { 11012020;;Actual Effective Date;Date        ;CaptionML=ENU=Actual Effective Date }
    { 11012030;;Actual End Date    ;Date          ;CaptionML=ENU=Actual End Date }
    { 11012040;;Number of Hours    ;Decimal       ;OnValidate=BEGIN
                                                                WKACalculationCu.CalculateWageCharge("Number of Hours","Avg. Wage Rate","Currency Code","Labor Amount");
                                                                VALIDATE("Pay To Tax Authority");
                                                              END;

                                                   CaptionML=ENU=Number of Hours;
                                                   MinValue=0 }
    { 11012050;;Avg. Wage Rate     ;Decimal       ;OnValidate=BEGIN
                                                                WKACalculationCu.CalculateWageCharge("Number of Hours","Avg. Wage Rate","Currency Code","Labor Amount");
                                                                VALIDATE("Pay To Tax Authority");
                                                              END;

                                                   CaptionML=ENU=Avg. Wage Rate;
                                                   MinValue=0;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 11012060;;Labor Amount       ;Decimal       ;OnValidate=BEGIN
                                                                WKACalculationCu.CalculateRate("Number of Hours","Labor Amount","Avg. Wage Rate");
                                                                VALIDATE("Pay To Tax Authority");
                                                              END;

                                                   CaptionML=ENU=Labor Amount;
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012070;;Contribution Percentage Labor;Decimal;
                                                   OnValidate=BEGIN
                                                                IF (xRec."Contribution Percentage Labor" = 0) AND ("Contribution Percentage Labor" <> 0) THEN
                                                                  "Contribution Percentage Total" := 0;
                                                                VALIDATE("Pay To Tax Authority");
                                                              END;

                                                   OnLookup=VAR
                                                              ContBusRel@1210190011 : Record 5054;
                                                              ContIndustGroup@11012000 : Record 5058;
                                                            BEGIN
                                                              ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                              ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
                                                              ContBusRel.SETRANGE("No.", "Buy-from Vendor No.");
                                                              IF NOT ContBusRel.FIND('-') THEN
                                                                ERROR(Text11012001,ContBusRel.TABLECAPTION,FIELDCAPTION("Buy-from Vendor No."),"Buy-from Vendor No.");

                                                              ContIndustGroup.SETRANGE("Contact No.",ContBusRel."Contact No.");
                                                              IF PAGE.RUNMODAL(PAGE::"Contact Industry Groups",ContIndustGroup) = ACTION::LookupOK THEN BEGIN
                                                                "Contribution Percentage Labor" := ContIndustGroup."Contribution Percentage Labor";
                                                                "Contribution Percentage Total" := ContIndustGroup."Contribution Percentage Total";
                                                                 VALIDATE("Contribution Percentage Labor" );
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Contribution Percentage Labor;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 11012071;;Contribution Percentage Total;Decimal;
                                                   OnValidate=BEGIN
                                                                IF (xRec."Contribution Percentage Total" = 0) AND ("Contribution Percentage Total" <> 0) THEN
                                                                  "Contribution Percentage Labor" := 0;
                                                                VALIDATE("Pay To Tax Authority");
                                                              END;

                                                   OnLookup=VAR
                                                              ContBusRel@1210190011 : Record 5054;
                                                              ContIndustGroup@11012000 : Record 5058;
                                                            BEGIN
                                                              ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                              ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
                                                              ContBusRel.SETRANGE("No.", "Buy-from Vendor No.");
                                                              IF NOT ContBusRel.FIND('-') THEN
                                                                ERROR(Text11012001,ContBusRel.TABLECAPTION,FIELDCAPTION("Buy-from Vendor No."),"Buy-from Vendor No.");

                                                              ContIndustGroup.SETRANGE("Contact No.",ContBusRel."Contact No.");
                                                              IF PAGE.RUNMODAL(PAGE::"Contact Industry Groups",ContIndustGroup) = ACTION::LookupOK THEN BEGIN
                                                                "Contribution Percentage Labor" := ContIndustGroup."Contribution Percentage Labor";
                                                                "Contribution Percentage Total" := ContIndustGroup."Contribution Percentage Total";
                                                                 VALIDATE("Contribution Percentage Total" );
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Contribution Percentage Invoice Total;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 11012075;;Pay To Tax Authority;Boolean      ;OnValidate=VAR
                                                                lPurchLine@1210190000 : Record 39;
                                                              BEGIN
                                                                lPurchLine.SETRANGE("Document Type","Document Type");
                                                                lPurchLine.SETRANGE("Document No.","No.");
                                                                lPurchLine.CALCSUMS(Amount);

                                                                WKACalculationCu.CalculateWageChart(
                                                                  "Buy-from Vendor No.","Labor Amount","Contribution Percentage Labor","Pay To Tax Authority","Currency Code",
                                                                  "Wage Charge (to B Account)","Wage Charge (to Tax Authority)", "Contribution Percentage Total", lPurchLine.Amount);
                                                              END;

                                                   CaptionML=ENU=Pay To Tax Authority }
    { 11012080;;Wage Charge (to B Account);Decimal;OnValidate=VAR
                                                                lPurchLine@1210190000 : Record 39;
                                                              BEGIN
                                                                lPurchLine.SETRANGE("Document Type","Document Type");
                                                                lPurchLine.SETRANGE("Document No.","No.");
                                                                lPurchLine.CALCSUMS(Amount);

                                                                WKACalculationCu.ValidateWageCharge(
                                                                  "Labor Amount","Currency Code","Wage Charge (to B Account)",
                                                                  "Contribution Percentage Labor", "Contribution Percentage Total",
                                                                  lPurchLine.Amount);
                                                              END;

                                                   CaptionML=ENU=Wage Charge (to B Account);
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012090;;Wage Charge (to Tax Authority);Decimal;
                                                   OnValidate=VAR
                                                                lPurchLine@1210190000 : Record 39;
                                                              BEGIN
                                                                lPurchLine.SETRANGE("Document Type","Document Type");
                                                                lPurchLine.SETRANGE("Document No.","No.");
                                                                lPurchLine.CALCSUMS(Amount);

                                                                WKACalculationCu.ValidateWageTax(
                                                                  "Buy-from Vendor No.","Labor Amount","Currency Code","Contribution Percentage Labor",
                                                                  "Wage Charge (to Tax Authority)", "Contribution Percentage Total",
                                                                  lPurchLine.Amount);
                                                              END;

                                                   CaptionML=ENU=Wage Charge (to Tax Authority);
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012120;;Invoice Lines Input;Boolean       ;InitValue=No;
                                                   OnValidate=BEGIN
                                                                PurchSetup.GET;
                                                                IF ("Invoice Lines Input") AND
                                                                   (PurchSetup."Approve Purchase Invoices") AND
                                                                   (PurchSetup."VAT Indicator (Purchase)" = PurchSetup."VAT Indicator (Purchase)" ::"No VAT") THEN
                                                                  ERROR(Text11012021);

                                                                IF "Preregister WIP" AND "Invoice Lines Input" THEN
                                                                  "Preregister WIP" := FALSE;

                                                                IF (NOT "Invoice Lines Input") AND (PurchSetup."Preregister WIP Purch. Inv.")  THEN
                                                                  "Preregister WIP" := TRUE;
                                                              END;

                                                   CaptionML=ENU=Invoice Lines Input }
    { 11012121;;Manually VAT Posting;Boolean      ;CaptionML=ENU=Manually VAT Posting;
                                                   Editable=No }
    { 11012130;;Amount incl. VAT   ;Decimal       ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Manually VAT Posting" THEN
                                                                  "VAT Amount" := "Amount incl. VAT" - "Amount excl. VAT";

                                                                CreatePurchLineRegAcc;

                                                                WKACalculationCu.CalculateWageCharge("Number of Hours","Avg. Wage Rate","Currency Code","Labor Amount");
                                                                VALIDATE("Pay To Tax Authority");
                                                              END;

                                                   CaptionML=ENU=Amount incl. VAT;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012131;;Amount excl. VAT   ;Decimal       ;OnValidate=BEGIN
                                                                //**4PS
                                                                "Amount incl. VAT" := "VAT Amount" + "Amount excl. VAT";

                                                                CreatePurchLineRegAcc; //**4PS 28-10-2008
                                                              END;

                                                   CaptionML=ENU=Amount excl. VAT;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012132;;VAT Amount         ;Decimal       ;OnValidate=BEGIN
                                                                //**4PS
                                                                "Amount incl. VAT" := "VAT Amount" + "Amount excl. VAT";
                                                                CreatePurchLineRegAcc;
                                                              END;

                                                   CaptionML=ENU=VAT Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012140;;VAT Prod. Posting Group;Code10    ;TableRelation="VAT Product Posting Group".Code;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF VATSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
                                                                  "Manually VAT Posting" := VATSetup.Manually;
                                                                IF NOT "Manually VAT Posting" THEN BEGIN
                                                                  "Amount excl. VAT" := 0;
                                                                  "VAT Amount" := 0;
                                                                END;
                                                                IF "Amount incl. VAT" <> 0 THEN
                                                                  CreatePurchLineRegAcc;
                                                              END;

                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 11012150;;Quote Status       ;Option        ;OnValidate=VAR
                                                                lvPurchLine@1210190000 : Record 39;
                                                              BEGIN
                                                                //**4PS
                                                                IF ("Document Type" <> "Document Type"::Quote) THEN
                                                                  EXIT;

                                                                IF "Quote Status" < xRec."Quote Status" THEN
                                                                  IF NOT CONFIRM(
                                                                    Text11012002,FALSE,
                                                                    FIELDCAPTION("Quote Status"),xRec."Quote Status","Quote Status")
                                                                  THEN
                                                                    "Quote Status" := xRec."Quote Status";

                                                                IF "Quote Status" > xRec."Quote Status" THEN
                                                                  IF ("Quote Status" = "Quote Status"::Send) OR ("Quote Status" = "Quote Status"::Thanks) THEN
                                                                    IF NOT CONFIRM(
                                                                      Text11012003 +
                                                                      Text11012004,FALSE,
                                                                      FIELDCAPTION("Quote Status"),"Quote Status")
                                                                    THEN
                                                                      "Quote Status" := xRec."Quote Status";

                                                                IF (CurrFieldNo = FIELDNO("Quote Status")) AND
                                                                   ("Quote Status" <> xRec."Quote Status") AND
                                                                   (("Quote Status" = "Quote Status"::Selected) OR
                                                                    (xRec."Quote Status" = "Quote Status"::Selected))
                                                                THEN BEGIN
                                                                  IF CONFIRM(STRSUBSTNO(Text032 + Text033, FIELDCAPTION("Quote Status"))) THEN BEGIN
                                                                    lvPurchLine.SETRANGE("Document Type","Document Type");
                                                                    lvPurchLine.SETRANGE("Document No.","No.");
                                                                    IF lvPurchLine.FINDSET(TRUE, FALSE) THEN BEGIN
                                                                      REPEAT
                                                                        IF ("Quote Status" = "Quote Status"::Selected) THEN BEGIN
                                                                          lvPurchLine.VALIDATE("Quote Selected", TRUE);
                                                                          lvPurchLine.MODIFY(TRUE);
                                                                        END ELSE BEGIN
                                                                          IF (xRec."Quote Status" = "Quote Status"::Selected) THEN BEGIN
                                                                            lvPurchLine.VALIDATE("Quote Selected", FALSE);
                                                                            //**4PS.sn
                                                                            lvPurchLine."Modified by" := USERID; //DP00469
                                                                            lvPurchLine."Last Date Modified" := TODAY;//DP00469
                                                                            //**4PS.en
                                                                            lvPurchLine.MODIFY(FALSE);
                                                                          END;
                                                                        END;
                                                                      UNTIL lvPurchLine.NEXT = 0;
                                                                    END;
                                                                  END;
                                                                END;

                                                                FinishPhase(FIELDNO("Quote Status"));
                                                              END;

                                                   CaptionML=ENU=Quote Status;
                                                   OptionCaptionML=ENU=Application,Send,Received,Thanks,Selected,Rejected;
                                                   OptionString=Application,Send,Received,Thanks,Selected,Rejected }
    { 11012160;;Write Off Letter Printed;Integer  ;CaptionML=ENU=Write Off Letter Printed;
                                                   Editable=No }
    { 11012170;;Transaction Mode B Payments;Code20;CaptionML=ENU=Transaction Mode Code B Payments }
    { 11012180;;Bank Account Code B Payments;Code10;
                                                   TableRelation="Vendor Bank Account".Code WHERE (Vendor No.=FIELD(Buy-from Vendor No.),
                                                                                                   B-Account=CONST(Yes));
                                                   CaptionML=ENU=Bank Account Code B Payments }
    { 11012190;;Received on Project;Code20        ;TableRelation=Job;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Received on Project" <> "Received on Project")
                                                                THEN BEGIN
                                                                  PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  PurchLine.SETFILTER("Sales Order Line No.",'<>0');
                                                                  IF PurchLine.FINDFIRST THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Received on Project"));
                                                                END;

                                                                IF "Received on Project" <> '' THEN BEGIN
                                                                  IF (xRec."Received on Project" <> "Received on Project") THEN BEGIN //C024101
                                                                    ProjRec.GET("Received on Project");
                                                                    IF (ProjRec.Deliver <> ProjRec.Deliver::" ") AND
                                                                       (ProjRec.Deliver <> Deliver)
                                                                    THEN
                                                                      VALIDATE(Deliver,ProjRec.Deliver);
                                                                    IF ProjRec."Ship To Location" <> '' THEN BEGIN
                                                                      VALIDATE("Ship To Location",ProjRec."Ship To Location");
                                                                    END ELSE BEGIN
                                                                      "Ship-to Name" := COPYSTR(ProjRec.Description,1,MAXSTRLEN("Ship-to Name"));
                                                                      "Ship-to Name 2" := '';
                                                                      "Ship-to Address" := ProjRec.Address;
                                                                      "Ship-to Address 2" := ProjRec."Address 2";
                                                                      "Ship-to City" := ProjRec.City;
                                                                      "Ship-to Post Code" := ProjRec."Post Code";
                                                                      "Ship-to County" := ProjRec.County;
                                                                      "Ship-to Country/Region Code" := ProjRec."Country/Region Code";  //**4PS05.n
                                                                      "Ship-to Contact" := '';
                                                                      IF "Ship To Location" <> '' THEN
                                                                        VALIDATE("Ship To Location");
                                                                      "Sell-to Customer No." := '';
                                                                      "Ship-to Code" := '';
                                                                    END;
                                                                  END; //C024101
                                                                END ELSE BEGIN
                                                                  IF Deliver <> Deliver::Location THEN BEGIN
                                                                    Deliver := Deliver::" ";
                                                                    "Ship To Location" := '';
                                                                    VALIDATE("Sell-to Customer No.");
                                                                  END ELSE BEGIN
                                                                    IF "Ship To Location" <> '' THEN
                                                                      VALIDATE("Ship To Location");
                                                                  END;
                                                                END;

                                                                UpdateVATData();    //**4PS05.n
                                                              END;

                                                   CaptionML=ENU=Received on Project }
    { 11012200;;Inv.Appr.Journal Template;Code10  ;TableRelation="Gen. Journal Template".Name WHERE (Type=CONST(Purch.Invoice Approval));
                                                   CaptionML=ENU=Inv.Appr.Journal Template }
    { 11012210;;Purchase Registration Account;Code20;
                                                   TableRelation="G/L Account".No.;
                                                   CaptionML=ENU=Purchase Registration Account }
    { 11012215;;Preregister WIP    ;Boolean       ;InitValue=No;
                                                   OnValidate=BEGIN
                                                                IF "Preregister WIP" AND "Invoice Lines Input" THEN
                                                                  "Invoice Lines Input" := FALSE;
                                                              END;

                                                   CaptionML=ENU=Preregister WIP }
    { 11012220;;Invoice Approved   ;Boolean       ;InitValue=Yes;
                                                   CaptionML=ENU=Invoice Approved }
    { 11012230;;Invoice Conduction Note;Boolean   ;OnValidate=BEGIN
                                                                IF NOT "Invoice Conduction Note" THEN
                                                                  "Induction Note No." := ''
                                                              END;

                                                   CaptionML=ENU=Invoice Conduction Note }
    { 11012240;;Induction Note No. ;Text30        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Induction Note No." <> '' THEN BEGIN
                                                                  PurchHeader.RESET;
                                                                  PurchHeader.SETCURRENTKEY("Induction Note No.");
                                                                  PurchHeader.SETRANGE("Induction Note No.","Induction Note No.");
                                                                  PurchHeader.SETRANGE("Document Type", "Document Type"::Order);
                                                                  PurchHeader.SETFILTER("No.",'<> %1',"No.");
                                                                  IF PurchHeader.FINDFIRST THEN
                                                                    IF NOT CONFIRM(STRSUBSTNO(
                                                                        Text11012005,
                                                                        FIELDCAPTION("Induction Note No."),
                                                                        "Induction Note No.",
                                                                        STRSUBSTNO('%1',PurchHeader."Document Type"),
                                                                        PurchHeader."No."),FALSE)
                                                                    THEN BEGIN
                                                                      "Induction Note No." := xRec."Induction Note No.";
                                                                      EXIT;
                                                                    END;

                                                                  PurchRcptHeader.RESET;
                                                                  PurchRcptHeader.SETCURRENTKEY("Buy-from Vendor No.","Induction Note No.");
                                                                  PurchRcptHeader.SETRANGE("Induction Note No.", "Induction Note No.");
                                                                  IF PurchRcptHeader.FINDFIRST THEN
                                                                    IF NOT CONFIRM(STRSUBSTNO(
                                                                        Text11012005,
                                                                        FIELDCAPTION("Induction Note No."),
                                                                        "Induction Note No.",
                                                                        PurchRcptHeader.TABLECAPTION,
                                                                        PurchRcptHeader."No."),FALSE)
                                                                    THEN BEGIN
                                                                      "Induction Note No." := xRec."Induction Note No.";
                                                                      EXIT;
                                                                    END;

                                                                  ApprLine.RESET;
                                                                  ApprLine.SETRANGE("Document Type", ApprLine."Document Type"::"Purchase Invoice");
                                                                  ApprLine.SETRANGE("Induction Note No.","Induction Note No.");
                                                                  IF ApprLine.FINDFIRST THEN
                                                                    IF NOT CONFIRM(STRSUBSTNO(
                                                                        Text11012005,
                                                                        FIELDCAPTION("Induction Note No."),
                                                                        "Induction Note No.",
                                                                        STRSUBSTNO('%1',ApprLine."Document Type"),
                                                                        ApprLine."Document No."),FALSE)
                                                                    THEN BEGIN
                                                                      "Induction Note No." := xRec."Induction Note No.";
                                                                      EXIT;
                                                                    END;

                                                                  PurchInvLine.RESET;
                                                                  PurchInvLine.SETCURRENTKEY("Induction Note No.");
                                                                  PurchInvLine.SETRANGE("Induction Note No.","Induction Note No.");
                                                                  IF PurchInvLine.FINDFIRST THEN
                                                                    IF NOT CONFIRM(STRSUBSTNO(
                                                                        Text11012005,
                                                                        FIELDCAPTION("Induction Note No."),
                                                                        "Induction Note No.",
                                                                        PurchInvHeader.TABLECAPTION,
                                                                        PurchInvLine."Document No."),FALSE)
                                                                    THEN BEGIN
                                                                      "Induction Note No." := xRec."Induction Note No.";
                                                                      EXIT;
                                                                    END;

                                                                END;
                                                              END;

                                                   CaptionML=ENU=Induction Note No. }
    { 11012250;;FSC Type Code      ;Code10        ;TableRelation="FSC Type";
                                                   CaptionML=ENU=FSC Type Code }
    { 11012260;;Approvement Initials;Code10       ;TableRelation="Invoice Approval Initials".Code;
                                                   CaptionML=ENU=Approvement Initials }
    { 11012271;;Hours Hire Order Type;Option      ;CaptionML=ENU=Hours Hire Order Type;
                                                   OptionCaptionML=ENU=" ,Employee,Plant";
                                                   OptionString=[ ,Employee,Plant] }
    { 11012272;;Order Type (SiB)   ;Option        ;CaptionML=ENU=Order Type (SiB);
                                                   OptionCaptionML=ENU=" ,Dispatch Note,Invoice";
                                                   OptionString=[ ,DispatchNote,Invoice];
                                                   Description=DP00065 }
    { 11012280;;Credit Memo Approved;Boolean      ;InitValue=Yes;
                                                   CaptionML=ENU=Credit Memo Approved }
    { 11012290;;Bank Account No.   ;Text34        ;CaptionML=ENU=Bank Account No.;
                                                   Editable=No }
    { 11012301;;Deliver            ;Option        ;OnValidate=BEGIN
                                                                //**4PS
                                                                xRec."Ship To Location" := '';
                                                                VALIDATE("Ship To Location", '');
                                                                CASE Deliver OF
                                                                  Deliver::"Service Location":
                                                                    TESTFIELD("Service Order No.");
                                                                  Deliver::"Project Location":
                                                                    TESTFIELD("Received on Project");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Deliver;
                                                   OptionCaptionML=ENU=" ,Location,Project Location,Service Location,Contact Address,Plant Location,,,Order Address";
                                                   OptionString=[ ,Location,Project Location,Service Location,Contact Address,Plant Location,,,Order Address] }
    { 11012302;;Ship To Location   ;Code20        ;TableRelation=IF (Deliver=CONST(Project Location)) "Project Location".Code WHERE (Project No.=FIELD(Received on Project))
                                                                 ELSE IF (Deliver=CONST(Location)) Location.Code
                                                                 ELSE IF (Deliver=CONST(Service Location)) "Service Order Location".Code WHERE (Service Order No.=FIELD(Service Order No.))
                                                                 ELSE IF (Deliver=CONST(Contact Address)) Contact.No.
                                                                 ELSE IF (Deliver=CONST(Plant Location)) "Plant Location".Code
                                                                 ELSE IF (Deliver=CONST(Order Address)) "Order Address".Code WHERE (Vendor No.=FIELD(Buy-from Vendor No.));
                                                   OnValidate=VAR
                                                                lvPlantLocRec@1100525000 : Record 11012554;
                                                                OrderAddress@1100528300 : Record 224;
                                                                SaveLocationCode@1100525001 : Code[10];
                                                              BEGIN
                                                                //**4PS
                                                                SaveLocationCode := "Location Code";  //C006607
                                                                CASE Deliver OF
                                                                  Deliver::"Service Location":
                                                                    BEGIN
                                                                      "Received on Project" := '';
                                                                      //db, 30-07-10: M14188
                                                                      IF NOT ServOrderRec.GET("Service Order No.") THEN ServOrderRec.INIT;
                                                                      IF ServOrderLocRec.GET("Service Order No.", "Ship To Location") THEN BEGIN
                                                                        "Ship-to Name" := COPYSTR(ServOrderLocRec.Name,1,MAXSTRLEN("Ship-to Name"));
                                                                        "Ship-to Address" := ServOrderLocRec.Address;
                                                                        "Ship-to City" := ServOrderLocRec.City;
                                                                        "Ship-to Post Code" := ServOrderLocRec."Post Code";
                                                                        "Ship-to Contact" := ServOrderLocRec.Contact;
                                                                        "Ship-to Name 2" := ServOrderLocRec."Name 2";
                                                                        "Ship-to Address 2" := ServOrderLocRec."Address 2";
                                                                        "Ship-to County" := '';
                                                                        "Ship-to Country/Region Code" := ServOrderLocRec."Country/Region Code";
                                                                      END ELSE BEGIN
                                                                        IF NOT ServLocRec.GET(ServOrderRec."Service Location No.") THEN ServLocRec.INIT;
                                                                        "Ship-to Name" := COPYSTR(ServLocRec.Description,1,MAXSTRLEN("Ship-to Name"));
                                                                        "Ship-to Address" := ServLocRec.Address;
                                                                        "Ship-to City" := ServLocRec.City;
                                                                        "Ship-to Post Code" := ServLocRec."Post Code";
                                                                        "Ship-to Contact" := ServLocRec."Contact Name";
                                                                        "Ship-to Name 2" := COPYSTR(ServLocRec."Description 2",1,MAXSTRLEN("Ship-to Name 2"));
                                                                        "Ship-to Address 2" := ServLocRec."Address 2";
                                                                        "Ship-to County" := ServLocRec.County;
                                                                        "Ship-to Country/Region Code" := ServLocRec."Country/Region Code";   //**4PS05.n
                                                                      END;
                                                                      "Location Code" := '';
                                                                    END;
                                                                  Deliver::"Project Location":
                                                                    BEGIN
                                                                      IF ("Received on Project" <> '') AND ("Ship To Location" = '') THEN BEGIN  //db, 23-09-09
                                                                        IF NOT ProjRec.GET("Received on Project") THEN ProjRec.INIT;
                                                                        "Ship-to Name" := COPYSTR(ProjRec.Description,1,MAXSTRLEN("Ship-to Name"));
                                                                        "Ship-to Address" := ProjRec.Address;
                                                                        "Ship-to City" := ProjRec.City;
                                                                        "Ship-to Post Code" := ProjRec."Post Code";
                                                                        "Ship-to Contact" := '';
                                                                        "Ship-to Name 2" := '';
                                                                        "Ship-to Address 2" := ProjRec."Address 2";
                                                                        "Ship-to County" := ProjRec.County;
                                                                        "Ship-to Country/Region Code" := ProjRec."Country/Region Code";  //**4PS05.n
                                                                      END ELSE BEGIN
                                                                        IF NOT ProjLocRec.GET("Received on Project", "Ship To Location") THEN ProjLocRec.INIT;
                                                                        "Ship-to Name" := COPYSTR(ProjLocRec.Name,1,MAXSTRLEN("Ship-to Name"));
                                                                        "Ship-to Address" := ProjLocRec.Address;
                                                                        "Ship-to City" := ProjLocRec.City;
                                                                        "Ship-to Post Code" := ProjLocRec."Post Code";
                                                                        "Ship-to Contact" := ProjLocRec.Contact;
                                                                        "Ship-to Name 2" := ProjLocRec."Name 2";
                                                                        "Ship-to Address 2" := ProjLocRec."Address 2";
                                                                        "Ship-to County" := '';
                                                                        "Ship-to Country/Region Code" := ProjLocRec."Country/Region Code";    //**4PS05.n
                                                                      END;
                                                                      "Location Code" := '';
                                                                    END;
                                                                  Deliver::Location:
                                                                    BEGIN
                                                                      IF NOT LocRec.GET("Ship To Location") THEN LocRec.INIT;
                                                                      "Ship-to Name" := COPYSTR(LocRec.Name,1,MAXSTRLEN("Ship-to Name"));
                                                                      "Ship-to Address" := LocRec.Address;
                                                                      "Ship-to City" := LocRec.City;
                                                                      "Ship-to Post Code" := LocRec."Post Code";
                                                                      "Ship-to Contact" := LocRec.Contact;
                                                                      "Ship-to Name 2" := LocRec."Name 2";
                                                                      "Ship-to Address 2" := LocRec."Address 2";
                                                                      "Ship-to County" := LocRec.County;
                                                                      "Ship-to Country/Region Code" := LocRec."Country/Region Code";
                                                                      "Location Code" := "Ship To Location";
                                                                    END;
                                                                  Deliver::"Contact Address":
                                                                    BEGIN
                                                                      IF NOT ContactRec.GET("Ship To Location") THEN ContactRec.INIT;
                                                                      "Ship-to Name" := COPYSTR(ContactRec.Name,1,MAXSTRLEN("Ship-to Name"));
                                                                      "Ship-to Name 2" := ContactRec."Name 2";
                                                                      IF ContactRec."Visit Address" = '' THEN BEGIN  //33047.n
                                                                        "Ship-to Address" := ContactRec.Address;
                                                                        "Ship-to Address 2" := ContactRec."Address 2";
                                                                        "Ship-to City" := ContactRec.City;
                                                                        "Ship-to Post Code" := ContactRec."Post Code";
                                                                        "Ship-to County" := ContactRec.County;
                                                                        "Ship-to Country/Region Code" := ContactRec."Country/Region Code";
                                                                      //33047.sn
                                                                      END ELSE BEGIN
                                                                        "Ship-to Address" := ContactRec."Visit Address";
                                                                        "Ship-to Address 2" := ContactRec."Visit Address 2";
                                                                        "Ship-to City" := ContactRec."Visit Address City";
                                                                        "Ship-to Post Code" := ContactRec."Visit Address Post Code";
                                                                        "Ship-to County" := ContactRec."Visit Address County";
                                                                        "Ship-to Country/Region Code" := ContactRec."Visit Address Country/Region";
                                                                      END;
                                                                      //33047.en
                                                                      "Ship-to Contact" := '';
                                                                      "Location Code" := '';
                                                                    END;
                                                                  Deliver::"Plant Location":
                                                                    BEGIN
                                                                      IF NOT lvPlantLocRec.GET("Ship To Location") THEN lvPlantLocRec.INIT;
                                                                      lvPlantLocRec.CheckBlock("Document Type", TRUE, FALSE);
                                                                      "Ship-to Name" := COPYSTR(lvPlantLocRec.Description,1,MAXSTRLEN("Ship-to Name"));
                                                                      "Ship-to Address" := lvPlantLocRec.Address;
                                                                      "Ship-to City" := lvPlantLocRec.City;
                                                                      "Ship-to Post Code" := lvPlantLocRec."Post Code";
                                                                      "Ship-to Contact" := lvPlantLocRec.Contact;
                                                                      "Ship-to Name 2" := lvPlantLocRec."Description 2";
                                                                      "Ship-to Address 2" := lvPlantLocRec."Address 2";
                                                                      "Ship-to County" := lvPlantLocRec.County;
                                                                      "Ship-to Country/Region Code" := lvPlantLocRec."Country/Region Code";
                                                                      "Location Code" := '';
                                                                    END;
                                                                  Deliver::"Order Address":
                                                                    BEGIN
                                                                      IF (NOT OrderAddress.GET("Buy-from Vendor No.", "Ship To Location")) THEN OrderAddress.INIT;
                                                                      "Ship-to Name" := OrderAddress.Name;
                                                                      "Ship-to Name 2" := OrderAddress."Name 2";
                                                                      "Ship-to Address" := OrderAddress.Address;
                                                                      "Ship-to Address 2" := OrderAddress."Address 2";
                                                                      "Ship-to City" := OrderAddress.City;
                                                                      "Ship-to Post Code" := OrderAddress."Post Code";
                                                                      "Ship-to Contact" := OrderAddress.Contact;
                                                                      "Ship-to County" := OrderAddress.County;
                                                                      "Ship-to Country/Region Code" := OrderAddress."Country/Region Code";
                                                                      "Location Code" := '';
                                                                    END;
                                                                  ELSE
                                                                    BEGIN
                                                                      CASE TRUE OF
                                                                        ("Received on Project" <> '') AND ("Ship To Location" = ''):
                                                                          BEGIN  //call 26918
                                                                            IF NOT ProjRec.GET("Received on Project") THEN ProjRec.INIT;
                                                                            "Ship-to Name" := COPYSTR(ProjRec.Description,1,MAXSTRLEN("Ship-to Name"));
                                                                            "Ship-to Address" := ProjRec.Address;
                                                                            "Ship-to City" := ProjRec.City;
                                                                            "Ship-to Post Code" := ProjRec."Post Code";
                                                                            "Ship-to Contact" := '';
                                                                            "Ship-to Name 2" := '';
                                                                            "Ship-to Address 2" := ProjRec."Address 2";
                                                                            "Ship-to County" := ProjRec.County;
                                                                            "Ship-to Country/Region Code" := ProjRec."Country/Region Code";
                                                                          END;
                                                                        ("Service Order No." <> '') AND ("Ship To Location" = ''):
                                                                          BEGIN //mg, 06-06-12: M33839
                                                                            IF NOT ServOrderRec.GET("Service Order No.") THEN ServOrderRec.INIT;
                                                                            "Ship-to Name" := ServOrderRec.Name;
                                                                            "Ship-to Address" := ServOrderRec.Address;
                                                                            "Ship-to City" := ServOrderRec.City;
                                                                            "Ship-to Post Code" := ServOrderRec."Post Code";
                                                                            "Ship-to Contact" := ServOrderRec."Contact Person No.";
                                                                            "Ship-to Name 2" := ServOrderRec."Name 2";
                                                                            "Ship-to Address 2" := ServOrderRec."Address 2";
                                                                            "Ship-to County" := ServOrderRec.County;
                                                                            "Ship-to Country/Region Code" := ServOrderRec."Country/Region Code";
                                                                          END;
                                                                      ELSE
                                                                        "Ship-to Name" := '';
                                                                        "Ship-to Address" := '';
                                                                        "Ship-to City" := '';
                                                                        "Ship-to Post Code" := '';
                                                                        "Ship-to Contact" := '';
                                                                        "Ship-to Name 2" := '';
                                                                        "Ship-to Address 2" := '';
                                                                        "Ship-to County" := '';
                                                                        "Ship-to Country/Region Code" := '';
                                                                        "Ship To Location" := '';
                                                                        "Location Code" := "Ship To Location";
                                                                      END;
                                                                    END;
                                                                END;
                                                                IF ("Ship To Location" = '') AND ("Ship To Location" <> xRec."Ship To Location") AND
                                                                   ("Service Order No." = '') THEN BEGIN  //db, 13-11-09: M17058
                                                                  Deliver := Deliver::" ";
                                                                  VALIDATE("Received on Project");
                                                                END;

                                                                UpdateVATData;

                                                                IF "Location Code" <> SaveLocationCode THEN  //C006607
                                                                  UpdatePurchLines(FIELDCAPTION("Location Code"),CurrFieldNo <> 0);

                                                                //**4PS.sn
                                                                //db, 15-08-08: do not reset dimension after validate (ship-to) Location
                                                                //CreateDim(
                                                                //  DATABASE::Job,"Job No.",
                                                                //  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                //  DATABASE::"Service Order","Service Order No.",
                                                                //  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                //  DATABASE::Campaign,"Campaign No.",
                                                                //  DATABASE::"Responsibility Center","Responsibility Center");
                                                                // DATABASE::Location,"Location Code");  //*C007227.o
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Ship To Location }
    { 11012303;;Receipts in Bundles;Boolean       ;CaptionML=ENU=Receipts in Bundles;
                                                   Editable=No }
    { 11012304;;ICM Procedure      ;Option        ;InitValue=Send;
                                                   CaptionML=ENU=ICM Procedure;
                                                   OptionCaptionML=ENU=Get,Send;
                                                   OptionString=Get,Send }
    { 11012305;;ICM File Created on;Date          ;CaptionML=ENU=ICM File Created on;
                                                   Editable=No }
    { 11012306;;ICM File Created   ;Boolean       ;InitValue=No;
                                                   CaptionML=ENU=ICM File Created }
    { 11012307;;ICM Login Code     ;Code2         ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor."ICM Login Code" WHERE (No.=FIELD(Buy-from Vendor No.)));
                                                   CaptionML=ENU=ICM Login Code;
                                                   Editable=No }
    { 11012308;;ICM Order Confirm. Received;Boolean;
                                                   CaptionML=ENU=ICM Order Confirmation Received }
    { 11012309;;ICM Order Confirm. Received on;Date;
                                                   CaptionML=ENU=ICM Order Confirmation Received on;
                                                   Editable=No }
    { 11012310;;ICM Confirmations  ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("ICM Order Confirmation Header" WHERE (Confirmation/Error=CONST(Confirmation),
                                                                                                            Order No.=FIELD(No.)));
                                                   CaptionML=ENU=ICM Confirmations;
                                                   Editable=No }
    { 11012311;;ICM Errors         ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("ICM Order Confirmation Header" WHERE (Confirmation/Error=CONST(Error),
                                                                                                            Order No.=FIELD(No.)));
                                                   CaptionML=ENU=ICM Errors;
                                                   Editable=No }
    { 11012312;;Amounts only       ;Boolean       ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Amounts only" <> xRec."Amounts only" THEN BEGIN
                                                                  PurchLine.RESET;
                                                                  PurchLine.SETRANGE("Document Type","Document Type");
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  IF PurchLine.FINDFIRST THEN
                                                                     ERROR(
                                                                       Text11012008,
                                                                       FIELDCAPTION("Amounts only"));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Amounts only }
    { 11012313;;ICM Status         ;Option        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "ICM Status" = "ICM Status"::Create THEN
                                                                  IF "Expected Receipt Date" < TODAY THEN
                                                                    GetExpectedReceiptDate; //C009135

                                                                //call 28830.sn
                                                                IF (("ICM Status" = "ICM Status"::Manual) AND (xRec."ICM Status" <> xRec."ICM Status"::Manual)) OR
                                                                   (("ICM Status" <> "ICM Status"::Manual) AND (xRec."ICM Status" = xRec."ICM Status"::Manual)) THEN
                                                                  GetDefaultPurchasePlan;
                                                                //call 28830.en
                                                                FinishPhase(FIELDNO("ICM Status"));
                                                              END;

                                                   CaptionML=ENU=ICM Status;
                                                   OptionCaptionML=ENU=Manual,Create,Created,Confirmed;
                                                   OptionString=Manual,Create,Created,Confirmed }
    { 11012314;;ICF Status         ;Option        ;CaptionML=ENU=ICF Status;
                                                   OptionCaptionML=ENU=Manual,Received,Approved;
                                                   OptionString=Manual,Received,Approved }
    { 11012315;;Input by           ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Input by;
                                                   Editable=No }
    { 11012316;;Input Date         ;Date          ;CaptionML=ENU=Input Date;
                                                   Editable=No }
    { 11012317;;Modified by        ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Modified by;
                                                   Editable=No }
    { 11012318;;Last Date Modified ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=No }
    { 11012319;;Agreed Amount      ;Decimal       ;CaptionML=ENU=Agreed Amount;
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 11012320;;Starting Date Subcontracting;Date ;CaptionML=ENU=Starting Date Subcontracting }
    { 11012321;;Finishing Date Subcontracting;Date;CaptionML=ENU=Finishing Date Subcontracting }
    { 11012322;;Renewal Date Subcontracting;Date  ;CaptionML=ENU=Renewal Date Subcontracting }
    { 11012323;;Reference (Vendor) ;Text30        ;CaptionML=ENU=Reference (Vendor) }
    { 11012324;;Purchase Action    ;Code10        ;TableRelation="Project Purchase Action".Code WHERE (Project No.=FIELD(Job No.));
                                                   CaptionML=ENU=Purchase Action }
    { 11012325;;Copied from Purchase Quote No.;Code20;
                                                   TableRelation="Purchase Header".No. WHERE (Document Type=CONST(Quote));
                                                   CaptionML=ENU=Copied from Purchase Quote No.;
                                                   Editable=No }
    { 11012326;;Reference (ICM)    ;Text35        ;CaptionML=ENU=Reference (ICM) }
    { 11012330;;Price Agreement    ;Boolean       ;OnValidate=BEGIN
                                                                //**4PS
                                                                PurchSetup.GET;
                                                                IF PurchSetup."Price Agreement" = PurchSetup."Price Agreement"::" " THEN
                                                                  TESTFIELD("Price Agreement", FALSE);
                                                                IF PurchSetup."Price Agreement" = PurchSetup."Price Agreement"::Company THEN
                                                                  TESTFIELD("Price Agreement", TRUE);
                                                              END;

                                                   CaptionML=ENU=Price Agreement }
    { 11012335;;Quote Receipt Date ;Date          ;OnValidate=BEGIN
                                                                IF "Quote Receipt Date" <> xRec."Quote Receipt Date" THEN
                                                                  IF "Quote Receipt Date" <> 0D THEN
                                                                    IF "Quote Status" < "Quote Status"::Received THEN
                                                                      "Quote Status" := "Quote Status"::Received;
                                                              END;

                                                   CaptionML=ENU=Quote Receipt Date }
    { 11012340;;Return Date Signed Contract;Date  ;OnValidate=BEGIN
                                                                //**4PS
                                                                //IF "Return Date Signed Contract" > 0D THEN BEGIN  // dp00206.o
                                                                  PurchSetup.GET;
                                                                  UpdateOnHoldOfRelatedInvoices(PurchSetup."On Hold Code No Contract");
                                                                //END;  // dp00206.o
                                                              END;

                                                   CaptionML=ENU=Return Date Signed Contract }
    { 11012345;;Contract Applicable;Boolean       ;CaptionML=ENU=Contract Applicable }
    { 11012350;;Return Date Letter of Credit;Date ;OnValidate=BEGIN
                                                                //**4PS
                                                                //IF "Return Date Letter of Credit" > 0D THEN BEGIN  // dp00206.o
                                                                  PurchSetup.GET;
                                                                  UpdateOnHoldOfRelatedInvoices(PurchSetup."On Hold Code No Letter of Cr.");
                                                                //END;  // dp00206.o
                                                                //**4PS DP00561 sn
                                                                IF "Return Date Letter of Credit" > 0D THEN
                                                                  "Letter of Credit Applied" := TRUE
                                                                ELSE
                                                                  "Letter of Credit Applied" := FALSE;
                                                              END;

                                                   CaptionML=ENU=Apply Date Letter of Credit }
    { 11012351;;Letter of Credit Applied;Boolean  ;OnValidate=BEGIN
                                                                //**4PS DP00561
                                                                IF "Letter of Credit Applied" THEN BEGIN
                                                                  IF "Return Date Letter of Credit" = 0D THEN
                                                                   VALIDATE("Return Date Letter of Credit", WORKDATE);
                                                                END ELSE
                                                                  VALIDATE("Return Date Letter of Credit", 0D);
                                                              END;

                                                   CaptionML=ENU=Letter of Credit Applied }
    { 11012370;;Related Purch. Order No.;Code20   ;TableRelation="Purchase Header".No. WHERE (Document Type=CONST(Order),
                                                                                              Buy-from Vendor No.=FIELD(Buy-from Vendor No.));
                                                   OnValidate=VAR
                                                                lvPurchHeader@1210190000 : Record 38;
                                                                VendorBankAccount@1100525002 : Record 288;
                                                                NewBankAccountNo@1100525001 : Text[50];
                                                                UsePaymentDiscountOrder@1100525000 : Boolean;
                                                              BEGIN
                                                                //**4PS
                                                                IF lvPurchHeader.GET(lvPurchHeader."Document Type"::Order, "Related Purch. Order No.") THEN BEGIN
                                                                  IF "Buy-from Vendor No." = '' THEN BEGIN
                                                                    SetHideValidationDialog(TRUE);
                                                                    VALIDATE("Buy-from Vendor No.", lvPurchHeader."Buy-from Vendor No.");
                                                                    SetHideValidationDialog(FALSE);
                                                                  END;
                                                                  TESTFIELD("Buy-from Vendor No.", lvPurchHeader."Buy-from Vendor No.");
                                                                  VALIDATE("Invoice Lines Input", lvPurchHeader."Invoice Lines Input");
                                                                  VALIDATE("Amounts only",lvPurchHeader."Amounts only"); //C008304.n
                                                                  IF lvPurchHeader."Service Order No." <> '' THEN  //db, 06-09-10
                                                                    VALIDATE("Service Order No.", lvPurchHeader."Service Order No.")
                                                                  ELSE
                                                                    VALIDATE("Job No.", lvPurchHeader."Job No.");
                                                                  VALIDATE("Received on Project", lvPurchHeader."Received on Project");
                                                                  //call C000524.sn

                                                                //C027348.sn
                                                                  "Recalculate Invoice Disc." := lvPurchHeader."Recalculate Invoice Disc.";
                                                                  "Invoice Discount Calculation" := lvPurchHeader."Invoice Discount Calculation";
                                                                  "Invoice Discount Value" := lvPurchHeader."Invoice Discount Value";
                                                                //C027348.en
                                                                  VALIDATE("Payment Terms Code",lvPurchHeader."Payment Terms Code");
                                                                  UsePaymentDiscountOrder := TRUE;
                                                                  IF "Document Type" = "Document Type"::"Credit Memo" THEN
                                                                    IF PaymentTerms.GET("Payment Terms Code") THEN
                                                                      UsePaymentDiscountOrder := PaymentTerms."Calc. Pmt. Disc. on Cr. Memos";
                                                                  IF UsePaymentDiscountOrder THEN
                                                                    VALIDATE("Payment Discount %",lvPurchHeader."Payment Discount %"); //call 25023
                                                                  IF lvPurchHeader."Payment Agreement" <> '' THEN BEGIN
                                                                    VALIDATE("Subcontracting Invoice", TRUE);
                                                                    VALIDATE("Payment Agreement",lvPurchHeader."Payment Agreement");
                                                                  END;
                                                                  IF lvPurchHeader.Deliver <> Deliver THEN
                                                                    VALIDATE(Deliver,lvPurchHeader.Deliver); //hs, 30-10-2007
                                                                  VALIDATE("Ship To Location",lvPurchHeader."Ship To Location"); //hs, 30-10-2007
                                                                  IF lvPurchHeader."Vendor Invoice No." <> '' THEN BEGIN  // C-015098
                                                                    IF "Document Type" <> "Document Type"::"Credit Memo" THEN BEGIN
                                                                      IF CheckVendorInvoiceNo(lvPurchHeader."Vendor Invoice No.", FALSE, FALSE) THEN
                                                                        VALIDATE("Vendor Invoice No.",lvPurchHeader."Vendor Invoice No.");
                                                                    END ELSE BEGIN
                                                                      IF CheckVendorInvoiceNo(lvPurchHeader."Vendor Invoice No.", TRUE, FALSE) THEN
                                                                        VALIDATE("Vendor Cr. Memo No.",lvPurchHeader."Vendor Invoice No.");
                                                                    END;
                                                                  END;
                                                                  IF (lvPurchHeader."Purchaser Code" <> '') AND ("Purchaser Code" <> lvPurchHeader."Purchaser Code") THEN
                                                                    "Purchaser Code" := lvPurchHeader."Purchaser Code";
                                                                  IF (lvPurchHeader."Shortcut Dimension 2 Code" <> '') AND ("No." <> '') THEN //C009831.n -- needed for Donau
                                                                    VALIDATE("Shortcut Dimension 2 Code", lvPurchHeader."Shortcut Dimension 2 Code");
                                                                  "Currency Code" := lvPurchHeader."Currency Code";
                                                                  "Currency Factor" := lvPurchHeader."Currency Factor";
                                                                  "Your Reference" := lvPurchHeader."Your Reference";  //C004230.n
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              LookupRelatedOrder();
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Related Purch. Order No. }
    { 11012375;;Expediter          ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Expediter }
    { 11012377;;Valid Until        ;Date          ;CaptionML=ENU=Valid Until }
    { 11012378;;Expediter E-Mail   ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.E-Mail WHERE (Code=FIELD(Expediter)));
                                                   CaptionML=ENU=Expediter E-Mail;
                                                   Editable=No }
    { 11012379;;Expediter Phone    ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser."Phone No." WHERE (Code=FIELD(Expediter)));
                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Expediter Phone;
                                                   Editable=No }
    { 11012380;;Purchase Order Type;Option        ;OnValidate=BEGIN
                                                                //**4PS
                                                                TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);

                                                                IF ("Document Type" = "Document Type"::Order) THEN BEGIN
                                                                  CheckPurchOrderTypeAllowed();
                                                                  IF ("Purchase Order Type" = "Purchase Order Type"::"Blanket Order") THEN
                                                                    CheckResetToReceiveBlanktOrder();
                                                                END;
                                                                GetDefaultPurchasePlan;
                                                              END;

                                                   CaptionML=ENU=Purchase Order Type;
                                                   OptionCaptionML=ENU=Purchase Order,Blanket Order,Return Order;
                                                   OptionString=Purchase Order,Blanket Order,Return Order }
    { 11012385;;Blanket Scheme     ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Blanket Scheme" WHERE (Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Blanket Scheme;
                                                   Editable=No }
    { 11012387;;Comparison Quote   ;Code20        ;TableRelation="Comparison Quotes"."Comparison Quote" WHERE (Type=CONST(Comparison Quote));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Document Type" <> "Document Type"::Quote) THEN
                                                                  EXIT;

                                                                IF (xRec."Comparison Quote" = "No.") AND
                                                                   (xRec."Comparison Quote" <> '') AND
                                                                   ("Comparison Quote" <> xRec."Comparison Quote")
                                                                THEN
                                                                  CheckDeleteCompQuoteAllowed();
                                                              END;

                                                   CaptionML=ENU=Comparison Quote }
    { 11012390;;Extra Receipts Allowed;Boolean    ;CaptionML=ENU=Extra Receipts Allowed }
    { 11012395;;Buy-from Contact Person No.;Code20;TableRelation=Contact;
                                                   CaptionML=ENU=Buy-from Contact Person No. }
    { 11012400;;Project Appointment;Integer       ;TableRelation="Appointments By Project"."Line No." WHERE (Project No.=FIELD(Job No.),
                                                                                                             Appointment Type=FIELD(Project Appointment Type));
                                                   CaptionML=ENU=Project Appointment;
                                                   Editable=No }
    { 11012405;;Project Appointment Type;Option   ;CaptionML=ENU=Appointment Type;
                                                   OptionCaptionML=ENU=General,Execution,Purchase;
                                                   OptionString=General,Execution,Purchase }
    { 11012410;;React before       ;Date          ;CaptionML=ENU=React before }
    { 11012415;;Bank No. Check     ;Text3         ;OnValidate=VAR
                                                                lBankNoOK@1100485001 : Boolean;
                                                                VendorBankAccount@1100529100 : Record 288;
                                                              BEGIN
                                                                //**4PS
                                                                IF "Bank No. Check" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  IF PurchSetup."Bank Account Check" THEN BEGIN
                                                                    lBankNoOK := FALSE;
                                                                    IF (VendorBankAccount.IBAN = '') AND ("Bank Account No." = '') THEN
                                                                      ERROR(Text11012029, VendorBankAccount.FIELDCAPTION(IBAN), FIELDCAPTION("Bank Account No."));

                                                                    IF (VendorBankAccount.IBAN <> '') THEN BEGIN
                                                                      IF NOT LastThreePositionsOK("Bank Account No.") THEN //In field bank account code will be determined if field
                                                                                                                           //bank account no will be filled with IBAN or ordinary bank account no.
                                                                        ERROR(Text11012030, VendorBankAccount.FIELDCAPTION(IBAN), FIELDCAPTION("Bank No. Check"));
                                                                    END ELSE
                                                                      IF NOT LastThreePositionsOK("Bank Account No.") THEN
                                                                        ERROR(Text11012020);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Bank Check No. }
    { 11012420;;Purchase Action Description;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Purchase Action".Description WHERE (Project No.=FIELD(Job No.),
                                                                                                                   Code=FIELD(Purchase Action)));
                                                   CaptionML=ENU=Purchase Action Description;
                                                   Editable=No }
    { 11012425;;Reminder Terms Code;Code10        ;TableRelation="Purch. Reminder Terms";
                                                   CaptionML=ENU=Reminder Terms Code }
    { 11012430;;Interest Date      ;Date          ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Interest Date" > "Posting Date") THEN
                                                                  FIELDERROR("Interest Date",STRSUBSTNO(Text11012016, "Interest Date", FIELDCAPTION("Posting Date"),"Posting Date"));
                                                              END;

                                                   CaptionML=ENU=Interest Date }
    { 11012440;;Progress Scheme    ;Code10        ;TableRelation="Progress Scheme".Code;
                                                   CaptionML=ENU=Progress Scheme;
                                                   Description=Expired in 002;
                                                   Editable=No }
    { 11012450;;Document Confirmation Received;Boolean;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                FinishPhase(FIELDNO("Document Confirmation Received"));
                                                              END;

                                                   CaptionML=ENU=Document Confirmation Received }
    { 11012460;;Consumption per Location;Boolean  ;CaptionML=ENU=Consumption per Location }
    { 11012480;;Subcontract No.    ;Code20        ;TableRelation="Subcontracter Contract".No. WHERE (Vendor No.=FIELD(Buy-from Vendor No.),
                                                                                                     Project No.=FIELD(Job No.));
                                                   OnValidate=VAR
                                                                SubcontracterContract@1100528500 : Record 11020635;
                                                              BEGIN
                                                                //**4PS
                                                                TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);
                                                                IF "Subcontract No." <> '' THEN BEGIN
                                                                  SubcontracterContract.GET("Buy-from Vendor No.", "Subcontract No.");
                                                                  VALIDATE("Currency Code",SubcontracterContract."Currency Code");
                                                                  //VALIDATE("Retention Payment Terms Code",Contract."Retention Payment Terms Code");
                                                                END;

                                                                PurchLine.RESET;
                                                                PurchLine.SETRANGE("Document Type","Document Type");
                                                                PurchLine.SETRANGE("Document No.","No.");
                                                                PurchLine.SETFILTER("No.",'<>%1','');
                                                                IF PurchLine.FINDSET(TRUE) THEN
                                                                  REPEAT
                                                                    IF PurchLine."Job No." <> "Job No." THEN
                                                                      PurchLine.VALIDATE("Job No.","Job No.");
                                                                    PurchLine.MODIFY(TRUE);
                                                                  UNTIL PurchLine.NEXT = 0;
                                                                PurchLine.SETRANGE("No.");
                                                              END;

                                                   CaptionML=ENU=Subcontract No.;
                                                   Description=Retention }
    { 11012580;;Amount VAT Lines   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Line VAT Amount" WHERE (Document Type=FIELD(Document Type),
                                                                                                            Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Amount VAT Lines;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012590;;Ext. Document ID   ;Text35        ;CaptionML=ENU=Ext. Document ID }
    { 11012600;;E-Mail Sent on     ;Date          ;CaptionML=ENU=E-Mail Sent on }
    { 11012610;;E-Mail Sent by     ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=E-Mail Sent by }
    { 11012620;;Register Invoice   ;Boolean       ;CaptionML=ENU=Register Invoice }
    { 11012625;;Markedonly Receipt Run;Boolean    ;CaptionML=ENU=Markedonly Receipt Run }
    { 11012630;;Company VAT Registration No.;Text20;
                                                   CaptionML=ENU=Company VAT Registration No.;
                                                   Editable=No }
    { 11012640;;Country of Origin  ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                UpdateVATGroup; //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Country of Origin;
                                                   Editable=No }
    { 11012650;;Country of Destination;Code10     ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                UpdateVATGroup; //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Country of Destination;
                                                   Editable=No }
    { 11012700;;Estimate No.       ;Code20        ;TableRelation=Estimate;
                                                   CaptionML=ENU=Estimate No. }
    { 11012800;;Service Order No.  ;Code20        ;TableRelation="Service Order".No.;
                                                   OnValidate=BEGIN
                                                                //**4PS.n
                                                                IF "Service Order No." <> '' THEN BEGIN
                                                                  TESTFIELD("Job No.", '');
                                                                  ServOrderRec.GET("Service Order No.");
                                                                  IF ("Document Type" = "Document Type"::Order) AND ("Purchase Order Type" = "Purchase Order Type"::"Return Order") THEN
                                                                    ServOrderRec.CheckStatus(1)
                                                                  ELSE BEGIN
                                                                    //IF "Document Type" <= "Document Type"::Order THEN
                                                                    //  ServOrderRec.CheckStatus(2);
                                                                    ServOrderRec.CheckStatus(1);  //db, 24-09-13: C009516 (conform check on project status)
                                                                    IF Deliver = Deliver::"Service Location" THEN
                                                                      VALIDATE(Deliver);  //db, 13-11-09: M17058
                                                                  END;
                                                                  //db.sn, 31-12-12: C000433
                                                                  IF CurrFieldNo = FIELDNO("Service Order No.") THEN BEGIN  //do not disturb default set by advice order
                                                                    IF ServLocRec.GET(ServOrderRec."Service Location No.") THEN BEGIN
                                                                      IF ServLocRec.Deliver <> ServLocRec.Deliver::" " THEN
                                                                        VALIDATE(Deliver, ServLocRec.Deliver);
                                                                      IF ServLocRec."Ship To Location" <> '' THEN
                                                                        VALIDATE("Ship To Location", ServLocRec."Ship To Location");
                                                                    END;
                                                                  END;
                                                                  //db.en, 31-12-12: C000433
                                                                END ELSE BEGIN
                                                                  //IF (Deliver = Deliver::"Service Location") THEN //*25063.n  //*27675.o
                                                                  //  FIELDERROR(Deliver); //*25063.n  //*27675.o
                                                                  //*27675.sn
                                                                  IF (Deliver = Deliver::"Service Location") THEN BEGIN
                                                                    IF ("Document Type" IN ["Document Type"::Order, "Document Type"::Quote]) THEN
                                                                      FIELDERROR(Deliver)
                                                                    ELSE BEGIN
                                                                      Deliver := Deliver::" ";
                                                                      "Ship To Location" := '';
                                                                    END
                                                                  END;
                                                                  //*27675.en
                                                                END;

                                                                UpdateOrderAddressByDepartment; //**4PS.n

                                                                //**4PS 09-06-2010 sn
                                                                CreateDim(
                                                                  DATABASE::"Service Order","Service Order No.",
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                                  //DATABASE::Location,"Location Code"); //**4PS.n  //*C007227.o
                                                                //**4PS 09-06-2010 sn

                                                                FillReferenceICM; //**4PS SR 18-01-2013
                                                              END;

                                                   CaptionML=ENU=Service Order No. }
    { 11012801;;Service Order Description;Text50  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order".Description WHERE (No.=FIELD(Service Order No.)));
                                                   CaptionML=ENU=Service Order Description;
                                                   Editable=No }
    { 11012810;;Buy-from Phone No. ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 11012820;;Buy-from Fax No.   ;Text30        ;CaptionML=ENU=Fax No. }
    { 11012830;;QuoteIsOrdered     ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purchase Header" WHERE (Document Type=CONST(Order),
                                                                                              Copied from Purchase Quote No.=FIELD(No.)));
                                                   CaptionML=ENU=Quote is Order;
                                                   Editable=No }
    { 11012840;;Original Order No. ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=CONST(Order),
                                                                                              Purchase Order Type=CONST(Purchase Order));
                                                   CaptionML=ENU=Original Order No.;
                                                   Editable=No }
    { 11012850;;Shipping Agent Code;Code10        ;TableRelation="Shipping Agent";
                                                   CaptionML=ENU=Shipping Agent Code }
    { 11012860;;Package Tracking No.;Text30       ;CaptionML=ENU=Package Tracking No. }
    { 11012880;;Name Purchaser     ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Purchaser Code)));
                                                   CaptionML=ENU=Name Purchaser;
                                                   Editable=No }
    { 11012890;;Purchase Plan      ;Code10        ;TableRelation=IF (Document Type=CONST(Quote)) "Purchase Plan" WHERE (Applies to=FILTER(PurchQuote))
                                                                 ELSE IF (Document Type=CONST(Order)) "Purchase Plan" WHERE (Applies to=FILTER(PurchOrder));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                CheckPurchPlanPermission; //C020918
                                                                CreateDocPhases;
                                                              END;

                                                   CaptionML=ENU=Purchase Plan }
    { 11012900;;Return Date Safety/Health-plan;Date;
                                                   CaptionML=ENU=Return Date Safety and Health-plan }
    { 11012910;;Warranty Data present;Boolean     ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Warranty Data per Purch. Order" WHERE (Document Type=FIELD(Document Type),
                                                                                                             Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Warranty Data present;
                                                   Editable=No }
    { 11012920;;Electronic Order Type;Option      ;CaptionML=ENU=Electronic Order Type;
                                                   OptionCaptionML=ENU=Standard,ICM/ICF,E-mail,GS1 (SOAP),GS1 (XML-RPC),,,,,E-Mail Contact Person;
                                                   OptionString=Standard,ICM/ICF,E-mail,GS1 (SOAP),GS1 (XML-RPC),,,,,E-Mail Contact Person;
                                                   Editable=No }
    { 11012930;;E-Mail for Purch. Order;Text80    ;CaptionML=ENU=E-Mail for Purch. Order }
    { 11020240;;Tolerate Exceeding Invoice Qu.;Boolean;
                                                   CaptionML=ENU=Tolerate Invoice Quantity Exceeding  Received Quantity }
    { 11020258;;Payment Discount % 2;Decimal      ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=ENU=Payment Discount % 2;
                                                   DecimalPlaces=0:5 }
    { 11020259;;Pmt. Discount Date 2;Date         ;CaptionML=ENU=Pmt. Discount Date 2 }
    { 11020260;;Payment Discount % 3;Decimal      ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TestStatusOpen; //**4PS CALL C020358 TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=ENU=Payment Discount % 3;
                                                   DecimalPlaces=0:5 }
    { 11020261;;Pmt. Discount Date 3;Date         ;CaptionML=ENU=Pmt. Discount Date 3 }
    { 11020270;;Order Consent Lines Available;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Exist("Consent Line" WHERE (Document Type=CONST(Order),
                                                                                           Document No.=FIELD(No.),
                                                                                           Consent=CONST(No),
                                                                                           Temporary Line=CONST(No)));
                                                   CaptionML=ENU=Order Consent Lines Available;
                                                   Editable=No }
    { 11020271;;Quote Consent Lines Available;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Exist("Consent Line" WHERE (Document Type=CONST(Purchase Quote),
                                                                                           Document No.=FIELD(No.),
                                                                                           Consent=CONST(No),
                                                                                           Temporary Line=CONST(No)));
                                                   CaptionML=ENU=Quote Consent Lines Available }
    { 11020275;;Consented Date-Time;DateTime      ;CaptionML=ENU=Consented Date-Time;
                                                   Editable=No }
    { 11020280;;ICM File Sent      ;Boolean       ;CaptionML=ENU=ICM File Sent;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Document Type,No.                       ;Clustered=Yes }
    {    ;No.,Document Type                        }
    {    ;Document Type,Buy-from Vendor No.        }
    {    ;Document Type,Pay-to Vendor No.          }
    {    ;Buy-from Vendor No.,Vendor Authorization No. }
    {    ;Incoming Document Entry No.              }
    {    ;Induction Note No.                       }
    {    ;Document Type,Job No.                    }
    {    ;Document Type,Copied from Purchase Quote No. }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Do you want to print receipt %1?';
      Text001@1001 : TextConst 'ENU=Do you want to print invoice %1?';
      Text002@1002 : TextConst 'ENU=Do you want to print credit memo %1?';
      Text003@1003 : TextConst 'ENU=You cannot rename a %1.';
      Text004@1004 : TextConst 'ENU=Do you want to change %1?';
      Text005@1005 : TextConst 'ENU=You cannot reset %1 because the document still has one or more lines.';
      Text006@1006 : TextConst 'ENU=You cannot change %1 because the order is associated with one or more sales orders.';
      Text007@1007 : TextConst 'ENU=%1 is greater than %2 in the %3 table.\';
      Text008@1008 : TextConst 'ENU=Confirm change?';
      Text009@1009 : TextConst 'ENU=Deleting this document will cause a gap in the number series for receipts.';
      Text010@1010 : TextConst 'ENU=An empty receipt %1 will be created to fill this gap in the number series.\\';
      Text011@1011 : TextConst 'ENU=Do you want to continue?';
      Text012@1012 : TextConst 'ENU=Deleting this document will cause a gap in the number series for posted invoices.';
      Text013@1013 : TextConst 'ENU=An empty posted invoice %1 will be created to fill this gap in the number series.\\';
      Text014@1014 : TextConst 'ENU=Deleting this document will cause a gap in the number series for posted credit memos.';
      Text015@1015 : TextConst 'ENU=An empty posted credit memo %1 will be created to fill this gap in the number series.\\';
      Text016@1016 : TextConst 'ENU=If you change %1, the existing purchase lines will be deleted and new purchase lines based on the new information in the header will be created.\\';
      Text018@1017 : TextConst 'ENU=You must delete the existing purchase lines before you can change %1.';
      Text019@1018 : TextConst 'ENU=You have changed %1 on the purchase header, but it has not been changed on the existing purchase lines.\';
      Text020@1019 : TextConst 'ENU=You must update the existing purchase lines manually.';
      Text021@1020 : TextConst 'ENU=The change may affect the exchange rate used on the price calculation of the purchase lines.';
      Text022@1021 : TextConst 'ENU=Do you want to update the exchange rate?';
      Text023@1022 : TextConst 'ENU=You cannot delete this document. Your identification is set up to process from %1 %2 only.';
      Text024@1023 : TextConst 'ENU=Do you want to print return shipment %1?';
      Text025@1024 : TextConst 'ENU=You have modified the %1 field. Note that the recalculation of VAT may cause penny differences, so you must check the amounts afterwards.';
      Text027@1026 : TextConst 'ENU=Do you want to update the %2 field on the lines to reflect the new value of %1?';
      Text028@1027 : TextConst 'ENU=Your identification is set up to process from %1 %2 only.';
      Text029@1028 : TextConst 'ENU=Deleting this document will cause a gap in the number series for return shipments.';
      Text030@1029 : TextConst 'ENU=An empty return shipment %1 will be created to fill this gap in the number series.\\';
      Text032@1031 : TextConst 'ENU=You have modified %1.\\';
      Text033@1032 : TextConst 'ENU=Do you want to update the lines?';
      PurchSetup@1033 : Record 312;
      GLSetup@1034 : Record 98;
      GLAcc@1035 : Record 15;
      PurchLine@1036 : Record 39;
      xPurchLine@1080 : Record 39;
      VendLedgEntry@1037 : Record 25;
      Vend@1038 : Record 23;
      PaymentTerms@1039 : Record 3;
      PaymentMethod@1040 : Record 289;
      CurrExchRate@1041 : Record 330;
      PurchHeader@1042 : Record 38;
      PurchCommentLine@1043 : Record 43;
      ShipToAddr@1044 : Record 222;
      Cust@1045 : Record 18;
      CompanyInfo@1046 : Record 79;
      PostCode@1047 : Record 225;
      OrderAddr@1048 : Record 224;
      BankAcc@1049 : Record 270;
      PurchRcptHeader@1050 : Record 120;
      PurchInvHeader@1051 : Record 122;
      PurchCrMemoHeader@1052 : Record 124;
      ReturnShptHeader@1053 : Record 6650;
      PurchInvHeaderPrepmt@1090 : Record 122;
      PurchCrMemoHeaderPrepmt@1089 : Record 124;
      GenBusPostingGrp@1054 : Record 250;
      GenJnILine@1055 : Record 81;
      RespCenter@1056 : Record 5714;
      Location@1057 : Record 14;
      WhseRequest@1058 : Record 5765;
      InvtSetup@1059 : Record 313;
      ProjSetupRec@1210190022 : Record 315;
      NoSeriesMgt@1060 : Codeunit 396;
      TransferExtendedText@1061 : Codeunit 378;
      GenJnlApply@1062 : Codeunit 225;
      PurchPost@1063 : Codeunit 90;
      VendEntrySetApplID@1064 : Codeunit 111;
      DimMgt@1065 : Codeunit 408;
      ApprovalsMgmt@1082 : Codeunit 1535;
      UserSetupMgt@1066 : Codeunit 5700;
      ArchiveManagement@1074 : Codeunit 5063;
      ApplyVendEntries@1068 : Page 233;
      CurrencyDate@1069 : Date;
      HideValidationDialog@1070 : Boolean;
      Confirmed@1071 : Boolean;
      Text034@1072 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.';
      Text037@1076 : TextConst 'ENU=Contact %1 %2 is not related to vendor %3.';
      Text038@1075 : TextConst 'ENU=Contact %1 %2 is related to a different company than vendor %3.';
      Text039@1077 : TextConst 'ENU=Contact %1 %2 is not related to a vendor.';
      SkipBuyFromContact@1030 : Boolean;
      SkipPayToContact@1078 : Boolean;
      UserRec@1210190008 : Record 91;
      VATSetup@11012022 : Record 325;
      Text040@1079 : TextConst 'ENU="You can not change the %1 field because %2 %3 has %4 = %5 and the %6 has already been assigned %7 %8."';
      Text041@1182 : TextConst 'ENU=The purchase %1 %2 has item tracking. Do you want to delete it anyway?';
      Text042@1084 : TextConst 'ENU=You must cancel the approval process if you wish to change the %1.';
      Text043@1083 : TextConst 'ENU=Do you want to print prepayment invoice %1?';
      Text044@1085 : TextConst 'ENU=Do you want to print prepayment credit memo %1?';
      Text045@1086 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment invoices. An empty prepayment invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text046@1087 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment credit memos. An empty prepayment credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text049@1092 : TextConst 'ENU=%1 is set up to process from %2 %3 only.';
      Text050@1067 : TextConst 'ENU=Reservations exist for this order. These reservations will be canceled if a date conflict is caused by this change.\\';
      Text051@1025 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?';
      Text052@1091 : TextConst 'ENU=The %1 field on the purchase order %2 must be the same as on sales order %3.';
      NameAddressDetails@1093 : Text[512];
      DropShptNameAddressDetails@1094 : Text[512];
      SpecOrderNameAddressDetails@1121 : Text[512];
      UpdateDocumentDate@1120 : Boolean;
      Text053@1095 : TextConst 'ENU=There are unposted prepayment amounts on the document of type %1 with the number %2.';
      Text054@1096 : TextConst 'ENU=There are unpaid prepayment invoices that are related to the document of type %1 with the number %2.\ \Do you wish to continue?';
      DeferralLineQst@1155 : TextConst '@@@="%1=The posting date on the document.";ENU=You have changed the %1 on the purchase header, do you want to update the deferral schedules for the lines with this date?';
      ChangeCurrencyQst@1073 : TextConst 'ENU=If you change %1, the existing purchase lines will be deleted and new purchase lines based on the new information in the header will be created. You may need to update the price information manually.\\Do you want to change %1?';
      "<DC>"@1097 : Boolean;
      RelPurchHeader@1088 : Record 38;
      "</DC>"@1081 : Boolean;
      ProjRec@11012034 : Record 11072003;
      LocRec@11012035 : Record 14;
      ProjLocRec@11012036 : Record 11012011;
      Text11012000@1210190016 : TextConst 'ENU=%1 %2 of %3 %4 in use for %5 %6.';
      Text11012001@1210190015 : TextConst 'ENU=No %1 known for %2 %3';
      Text11012002@1210190014 : TextConst 'ENU=Restore %1 from %2 to %3 ?';
      Text11012003@1210190013 : TextConst 'ENU="Changing of %1 in %2 will normally be done by the system during printing the Thanks Letter. "';
      Text11012004@1210190012 : TextConst 'ENU=Change %1 in %2 anyway ?';
      Text11012005@1210190011 : TextConst 'ENU=%1 %2 is in use for %3 %4. Use %1 anyway ?';
      Text11012006@1100485003 : TextConst 'ENU=Vendor %1 blocked for purchase';
      Text11012008@11012008 : TextConst 'ENU=Purchase Lines present, changing %1 not allowed';
      Text11012009@11012009 : TextConst 'ENU=%1 %2 has %3 %4';
      ServOrderRec@1100485007 : Record 11012823;
      ServLocRec@1210190006 : Record 11012801;
      ServOrderLocRec@1100525004 : Record 11071688;
      ContactRec@1100485005 : Record 5050;
      ApprLine@1210190001 : Record 11012032;
      PurchInvLine@1210190002 : Record 123;
      DocRelRec@1210190003 : Record 11012407;
      ParRec@1210190004 : Record 11012072;
      PurchTxtRec@1210190021 : Record 11012067;
      ReminderHeader@1210190027 : Record 11020212;
      TempPurchHeader@1100525008 : Record 38;
      IcmLicenceCu@1210190028 : Codeunit 11012790;
      WKACalculationCu@1210190007 : Codeunit 11012020;
      Text11012010@1210190009 : TextConst 'ENU=To delete an Order the Orderstatus should be Closed or Order Lines should not be present.';
      Text11012011@1210190017 : TextConst 'ENU=not allowed, there is a blanket scheme present';
      Text11012012@1210190018 : TextConst 'ENU=not allowed, there are lines were the quantity is not negative';
      Text11012013@1210190019 : TextConst 'ENU=not allowed, there are lines were the quantity is negative';
      Text11012014@1210190020 : TextConst 'ENU=not allowed, there are lines were the Return Reason is filled';
      Text11012016@1210190026 : TextConst 'ENU=(%1) may not be greater than the de %2 (%3)';
      Text11012017@1210190029 : TextConst 'ENU=There are still Quotes linked to this %1, f.i. ''%2''';
      Text11012018@1210190030 : TextConst 'ENU=There is not selected a No. Serie.';
      Text11012019@1210190031 : TextConst 'ENU=Order No. could not be determined.';
      Text11012020@1100485000 : TextConst 'ENU=Bank Account does not match with Bank No. Check.';
      ScannedInvoicesRec@1100485006 : Record 11012133;
      Text11012021@1100525000 : TextConst 'ENU=Not allowed with Purchase Setup VAT Indicator ''No VAT''';
      Text11012022@1100485008 : TextConst 'ENU="Insert the Data for ""Inward Processing Relief""? "';
      StrategicPurchMgt@1100525001 : Codeunit 11020211;
      Text11012023@1100525002 : TextConst 'ENU=Vendor %1 has no valid Contract.';
      SkipStrategicPurchCheck@1100525003 : Boolean;
      ConsentRec@1100525006 : Record 11012226;
      ConsentManCU@1100525005 : Codeunit 11012132;
      DPA_Management@1100000999 : Codeunit 11012783;
      Text11012024@1100525007 : TextConst 'ENU=Do you want to finish the next manual Phase?';
      Text11012025@1210190000 : TextConst 'ENU=ICM Login Code is empty.';
      Text11012026@1210190005 : TextConst 'ENU=No Purchase Order sent, because the %1 %2 is set to %3.';
      Text11012027@1210190041 : TextConst 'ENU=Do you want to go one phase back?';
      ProjectSiteMgt@1100528300 : Codeunit 11012282;
      Text11012028@1100409000 : TextConst 'ENU=The specified Account No. %1 occurs serveral times. Select Vendor No. in next Form.';
      Text11012029@1100529102 : TextConst 'ENU=You must specify either %1 or %2.';
      Text11012030@1100529101 : TextConst 'ENU=%1 does not match with %2.';
      Text11012031@1100529100 : TextConst 'ENU=No Vendors found that have to payed to %1.';
      Text11012032@1100528600 : TextConst 'ENU=There are no receiptlines available, do you want to show the purchase lines?';
      Text11012033@1100525009 : TextConst 'ENU=Do you want to change %1 %2 to %3 of the purchase order?';
      SkipModify@1100528400 : Boolean;
      DCSetupRead@1100409002 : Boolean;
      DocumentCaptureSetup@1100409001 : Record 6085573;
      Text11012035@1100409004 : TextConst 'ENU=Only super consenters are allowed to change %1.';
      Text11012036@1100525010 : TextConst 'ENU=You can only select 1 %1.';

    LOCAL PROCEDURE InitInsert@41();
    BEGIN
      IF "No." = '' THEN BEGIN
        TestNoSeries;
        NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
      END;

      InitRecord;
    END;

    LOCAL PROCEDURE SkipInitialization@42() : Boolean;
    BEGIN
      IF "No." = '' THEN
        EXIT(FALSE);

      IF "Buy-from Vendor No." = '' THEN
        EXIT(FALSE);

      IF xRec."Document Type" <> "Document Type" THEN
        EXIT(FALSE);

      IF GETFILTER("Buy-from Vendor No.") <> '' THEN
        IF GETRANGEMIN("Buy-from Vendor No.") = GETRANGEMAX("Buy-from Vendor No.") THEN
          IF "Buy-from Vendor No." = GETRANGEMIN("Buy-from Vendor No.") THEN
            EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE InitRecord@10();
    VAR
      OnHoldRec@1210190010 : Record 11012031;
    BEGIN
      PurchSetup.GET;

      CASE "Document Type" OF
        "Document Type"::Quote,"Document Type"::Order:
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Invoice Nos.");
            NoSeriesMgt.SetDefaultSeries("Receiving No. Series",PurchSetup."Posted Receipt Nos.");
            IF "Document Type" = "Document Type"::Order THEN BEGIN
              IF PurchSetup."Posted Prepmt. Inv. Nos." <> '' THEN  //**4PS.n (db, 30-06-10: M19998)
                NoSeriesMgt.SetDefaultSeries("Prepayment No. Series",PurchSetup."Posted Prepmt. Inv. Nos.");
              IF PurchSetup."Posted Prepmt. Cr. Memo Nos." <> '' THEN  //**4PS.n (db, 30-06-10: M19998)
                NoSeriesMgt.SetDefaultSeries("Prepmt. Cr. Memo No. Series",PurchSetup."Posted Prepmt. Cr. Memo Nos.");
            END;
          END;
        "Document Type"::Invoice:
          BEGIN
            IF ("No. Series" <> '') AND
               (PurchSetup."Invoice Nos." = PurchSetup."Posted Invoice Nos.")
            THEN
              "Posting No. Series" := "No. Series"
            ELSE
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Invoice Nos.");
            IF PurchSetup."Receipt on Invoice" THEN
              NoSeriesMgt.SetDefaultSeries("Receiving No. Series",PurchSetup."Posted Receipt Nos.");
          END;
        "Document Type"::"Return Order":
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Credit Memo Nos.");
            NoSeriesMgt.SetDefaultSeries("Return Shipment No. Series",PurchSetup."Posted Return Shpt. Nos.");
          END;
        "Document Type"::"Credit Memo":
          BEGIN
            IF ("No. Series" <> '') AND
               (PurchSetup."Credit Memo Nos." = PurchSetup."Posted Credit Memo Nos.")
            THEN
              "Posting No. Series" := "No. Series"
            ELSE
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Credit Memo Nos.");
            IF PurchSetup."Return Shipment on Credit Memo" THEN
              NoSeriesMgt.SetDefaultSeries("Return Shipment No. Series",PurchSetup."Posted Return Shpt. Nos.");
          END;
      END;

      IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::"Return Order"] THEN
        "Order Date" := WORKDATE;

      IF "Document Type" = "Document Type"::Invoice THEN
        "Expected Receipt Date" := WORKDATE;

      IF NOT ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
         ("Posting Date" = 0D)
      THEN
        "Posting Date" := WORKDATE;

      IF PurchSetup."Default Posting Date" = PurchSetup."Default Posting Date"::"No Date" THEN
        "Posting Date" := 0D;

      "Document Date" := WORKDATE;

      VALIDATE("Sell-to Customer No.",'');

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        GLSetup.GET;
        Correction := GLSetup."Mark Cr. Memos as Corrections";
      END;

      "Posting Description" := FORMAT("Document Type") + ' ' + "No.";

      IF InvtSetup.GET THEN
        "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";

      "Responsibility Center" := UserSetupMgt.GetRespCenter(1,"Responsibility Center");
      //**4PS.sn
      IF PurchSetup."Use Invoice Induction Note" THEN
        "Invoice Conduction Note" := TRUE;
      IF PurchSetup."Default Only Amounts Orders" THEN
        "Amounts only" := TRUE;

      IF PurchSetup."Approve Purchase Invoices" THEN BEGIN
        IF (PurchSetup."Preregister WIP Purch. Inv.") THEN BEGIN
          PurchSetup.TESTFIELD("Preregistration WIP Account");
          "Purchase Registration Account" := PurchSetup."Preregistration WIP Account";
        END ELSE BEGIN
          PurchSetup.TESTFIELD("Purchase Registration Account");
          "Purchase Registration Account" := PurchSetup."Purchase Registration Account";
        END;
        "Invoice Lines Input" := PurchSetup."Default Invoice Lines Input";
      END ELSE
        "Invoice Lines Input" := TRUE;

      IF PurchSetup."Price Agreement" = PurchSetup."Price Agreement"::Company THEN
        "Price Agreement" := TRUE
      ELSE
        "Price Agreement" := FALSE;

      IF ("Document Type" = "Document Type"::Invoice) OR
         ("Document Type" = "Document Type"::"Credit Memo") THEN BEGIN
        IF ("Document Type" = "Document Type"::Invoice) THEN                  //**4PS02.n
          OnHoldRec.SETRANGE("Default Value Purchase Invoice", TRUE)
        ELSE                                                                  //**4PS02.n
          OnHoldRec.SETRANGE("Default Value Credit Memo", TRUE);              //**4PS02.n
        IF OnHoldRec.FIND('-') THEN BEGIN
          "On Hold" := OnHoldRec.Code;
          "Approvement Initials" := OnHoldRec."Default Approvement Initials";
        END;
      END;

      InitIcmStatus;
      GetDefaultPurchasePlan; //Must be below InitIcmStatus
      IF "Purchaser Code" = '' THEN
        IF UserRec.GET(USERID) THEN
          "Purchaser Code" := UserRec.Purchaser;

      IF PurchSetup."Preregister WIP Purch. Inv." THEN      //**4PS, 12-02-2008
        "Preregister WIP" := TRUE;
      //**4PS.en
    END;

    LOCAL PROCEDURE InitNoSeries@52();
    BEGIN
      IF xRec."Receiving No." <> '' THEN BEGIN
        "Receiving No. Series" := xRec."Receiving No. Series";
        "Receiving No." := xRec."Receiving No.";
      END;
      IF xRec."Posting No." <> '' THEN BEGIN
        "Posting No. Series" := xRec."Posting No. Series";
        "Posting No." := xRec."Posting No.";
      END;
      IF xRec."Return Shipment No." <> '' THEN BEGIN
        "Return Shipment No. Series" := xRec."Return Shipment No. Series";
        "Return Shipment No." := xRec."Return Shipment No.";
      END;
      IF xRec."Prepayment No." <> '' THEN BEGIN
        "Prepayment No. Series" := xRec."Prepayment No. Series";
        "Prepayment No." := xRec."Prepayment No.";
      END;
      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
      END;
    END;

    PROCEDURE AssistEdit@2(OldPurchHeader@1000 : Record 38) : Boolean;
    BEGIN
      PurchSetup.GET;
      TestNoSeries;
      IF NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldPurchHeader."No. Series","No. Series") THEN BEGIN
        PurchSetup.GET;
        TestNoSeries;
        NoSeriesMgt.SetSeries("No.");
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE TestNoSeries@6() : Boolean;
    VAR
      SiBSetup@1100528900 : Record 11072650;
    BEGIN
      PurchSetup.GET;
      CASE "Document Type" OF
        "Document Type"::Quote:
          PurchSetup.TESTFIELD("Quote Nos.");
        "Document Type"::Order:
          //**4PS.sn
          BEGIN
            IF ("Order Type (SiB)" = "Order Type (SiB)"::" ") OR
               ("Hours Hire Order Type" = "Hours Hire Order Type"::" ") THEN  //DP00065
              PurchSetup.TESTFIELD("Order Nos.");
            IF "Order Type (SiB)" = "Order Type (SiB)"::DispatchNote THEN BEGIN  //DP00065
              SiBSetup.GET;
              SiBSetup.TESTFIELD("Order Nos. (Dispatch Notes)");
            END;
            CASE "Hours Hire Order Type" OF
              "Hours Hire Order Type"::Employee:
                PurchSetup.TESTFIELD("Lend In Orders Nos.");
              "Hours Hire Order Type"::Plant:
                PurchSetup.TESTFIELD("Plant Hire Order Nos. (Hours)");
            END;
          END;
          //**4PS.en
        "Document Type"::Invoice:
          BEGIN
            //**4PS.sn
            IF ("Order Type (SiB)" = "Order Type (SiB)"::" ") THEN  //DP00065
              PurchSetup.TESTFIELD("Invoice Nos.");
            PurchSetup.TESTFIELD("Posted Invoice Nos.");
            IF "Order Type (SiB)" = "Order Type (SiB)"::Invoice THEN BEGIN  //DP00065
              SiBSetup.GET;
              SiBSetup.TESTFIELD("Invoice Nos. (Purch. Invoice)");
            END;
            //**4PS.sn
          END;
        "Document Type"::"Return Order":
          PurchSetup.TESTFIELD("Return Order Nos.");
        "Document Type"::"Credit Memo":
          BEGIN
            PurchSetup.TESTFIELD("Credit Memo Nos.");
            PurchSetup.TESTFIELD("Posted Credit Memo Nos.");
          END;
        "Document Type"::"Blanket Order":
          PurchSetup.TESTFIELD("Blanket Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetNoSeriesCode@9() : Code[10];
    VAR
      SiBSetup@1100528900 : Record 11072650;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          EXIT(PurchSetup."Quote Nos.");
        "Document Type"::Order:
          //**4PS.sn
          BEGIN
            IF "Order Type (SiB)" = "Order Type (SiB)"::DispatchNote THEN BEGIN  //DP00065
              SiBSetup.GET;
              EXIT(SiBSetup."Order Nos. (Dispatch Notes)");
            END;
            CASE "Hours Hire Order Type" OF
              "Hours Hire Order Type"::Employee:
                EXIT(PurchSetup."Lend In Orders Nos.");
              "Hours Hire Order Type"::Plant:
                EXIT(PurchSetup."Plant Hire Order Nos. (Hours)");
            END;
            EXIT(PurchSetup."Order Nos.");
          END;
          //**4PS.en
        "Document Type"::Invoice:
          //**4PS.sn
          BEGIN
            IF "Order Type (SiB)" = "Order Type (SiB)"::Invoice THEN BEGIN  //DP00065
              SiBSetup.GET;
              EXIT(SiBSetup."Invoice Nos. (Purch. Invoice)");
            END;
            EXIT(PurchSetup."Invoice Nos.");
          END;
          //**4PS.en
        "Document Type"::"Return Order":
          EXIT(PurchSetup."Return Order Nos.");
        "Document Type"::"Credit Memo":
          EXIT(PurchSetup."Credit Memo Nos.");
        "Document Type"::"Blanket Order":
          EXIT(PurchSetup."Blanket Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetPostingNoSeriesCode@8() : Code[10];
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT(PurchSetup."Posted Credit Memo Nos.");
      EXIT(PurchSetup."Posted Invoice Nos.");
    END;

    LOCAL PROCEDURE GetPostingPrepaymentNoSeriesCode@37() : Code[10];
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT(PurchSetup."Posted Prepmt. Cr. Memo Nos.");
      EXIT(PurchSetup."Posted Prepmt. Inv. Nos.");
    END;

    LOCAL PROCEDURE TestNoSeriesDate@40(No@1000 : Code[20];NoSeriesCode@1001 : Code[10];NoCapt@1002 : Text[1024];NoSeriesCapt@1004 : Text[1024]);
    VAR
      NoSeries@1005 : Record 308;
    BEGIN
      IF (No <> '') AND (NoSeriesCode <> '') THEN BEGIN
        NoSeries.GET(NoSeriesCode);
        IF NoSeries."Date Order" THEN
          ERROR(
            Text040,
            FIELDCAPTION("Posting Date"),NoSeriesCapt,NoSeriesCode,
            NoSeries.FIELDCAPTION("Date Order"),NoSeries."Date Order","Document Type",
            NoCapt,No);
      END;
    END;

    PROCEDURE ConfirmDeletion@11() : Boolean;
    BEGIN
      PurchPost.TestDeleteHeader(
        Rec,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,
        ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHeaderPrepmt);

      //**4PS.sn C023430
      IF HideValidationDialog OR NOT GUIALLOWED THEN
        EXIT(TRUE);
      //**4PS.en

      IF PurchRcptHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text009 +
             Text010 +
             Text011,TRUE,
             PurchRcptHeader."No.")
        THEN
          EXIT;
      IF PurchInvHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text012 +
             Text013 +
             Text011,TRUE,
             PurchInvHeader."No.")
        THEN
          EXIT;
      IF PurchCrMemoHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text014 +
             Text015 +
             Text011,TRUE,
             PurchCrMemoHeader."No.")
        THEN
          EXIT;
      IF ReturnShptHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text029 +
             Text030 +
             Text011,TRUE,
             ReturnShptHeader."No.")
        THEN
          EXIT;
      IF "Prepayment No." <> '' THEN
        IF NOT CONFIRM(
             Text045,TRUE,
             PurchInvHeaderPrepmt."No.")
        THEN
          EXIT;
      IF "Prepmt. Cr. Memo No." <> '' THEN
        IF NOT CONFIRM(
             Text046,TRUE,
             PurchCrMemoHeaderPrepmt."No.")
        THEN
          EXIT;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetVend@1(VendNo@1000 : Code[20]);
    BEGIN
      IF VendNo <> Vend."No." THEN
        //**4PS.sn
        IF VendNo = '' THEN
          CLEAR(Vend)
        ELSE
        //**4PS.en
          Vend.GET(VendNo);
    END;

    PROCEDURE PurchLinesExist@3() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      EXIT(PurchLine.FINDFIRST);
    END;

    LOCAL PROCEDURE RecreatePurchLines@4(ChangedFieldName@1000 : Text[100]);
    VAR
      PurchLineTmp@1001 : TEMPORARY Record 39;
      ItemChargeAssgntPurch@1005 : Record 5805;
      TempItemChargeAssgntPurch@1004 : TEMPORARY Record 5805;
      TempInteger@1003 : TEMPORARY Record 2000000026;
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      CopyDocMgt@1008 : Codeunit 6620;
      ExtendedTextAdded@1002 : Boolean;
    BEGIN
      IF PurchLinesExist THEN BEGIN
        // jhoek.090211.begin
        // IF  HideValidationDialog THEN
        IF (HideValidationDialog) OR (NOT GUIALLOWED) THEN
        // jhoek.090211.end
          Confirmed := TRUE
        ELSE
          Confirmed :=
            CONFIRM(
              Text016 +
              Text004,FALSE,ChangedFieldName);
        IF Confirmed THEN BEGIN
          PurchLine.LOCKTABLE;
          ItemChargeAssgntPurch.LOCKTABLE;
          MODIFY;

          PurchLine.RESET;
          PurchLine.SETRANGE("Document Type","Document Type");
          PurchLine.SETRANGE("Document No.","No.");
          IF PurchLine.FINDSET THEN BEGIN
            REPEAT
              //**4PS.sn
              PurchLine.TESTFIELD("Amnt. Received",0);
              PurchLine.TESTFIELD("Amnt. Invoiced",0);
              //**4PS.en
              PurchLine.TESTFIELD("Quantity Received",0);
              PurchLine.TESTFIELD("Quantity Invoiced",0);
              PurchLine.TESTFIELD("Return Qty. Shipped",0);
              PurchLine.CALCFIELDS("Reserved Qty. (Base)");
              PurchLine.TESTFIELD("Reserved Qty. (Base)",0);
              PurchLine.TESTFIELD("Receipt No.",'');
              PurchLine.TESTFIELD("Return Shipment No.",'');
              PurchLine.TESTFIELD("Blanket Order No.",'');
              IF PurchLine."Drop Shipment" OR PurchLine."Special Order" THEN BEGIN
                CASE TRUE OF
                  PurchLine."Drop Shipment":
                    SalesHeader.GET(SalesHeader."Document Type"::Order,PurchLine."Sales Order No.");
                  PurchLine."Special Order":
                    SalesHeader.GET(SalesHeader."Document Type"::Order,PurchLine."Special Order Sales No.");
                END;
                TESTFIELD("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
                TESTFIELD("Ship-to Code",SalesHeader."Ship-to Code");
              END;

              PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
              PurchLineTmp := PurchLine;
              IF PurchLine.Nonstock THEN BEGIN
                PurchLine.Nonstock := FALSE;
                //**4PS.sn
                PurchLine."Modified by" := USERID; //DP00469
                PurchLine."Last Date Modified" := TODAY;//DP00469
                //**4PS.en
                PurchLine.MODIFY;
              END;
              PurchLineTmp.INSERT;
            UNTIL PurchLine.NEXT = 0;


            ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
            ItemChargeAssgntPurch.SETRANGE("Document No.","No.");
            IF ItemChargeAssgntPurch.FINDSET THEN BEGIN
              REPEAT
                TempItemChargeAssgntPurch.INIT;
                TempItemChargeAssgntPurch := ItemChargeAssgntPurch;
                TempItemChargeAssgntPurch.INSERT;
              UNTIL ItemChargeAssgntPurch.NEXT = 0;
              ItemChargeAssgntPurch.DELETEALL;
            END;

            //PurchLine.DELETEALL(TRUE);  //**4PS.o
            //**4PS.sn
            PurchLine.FINDSET;
            REPEAT
              PurchLine.CreatePurchOrderControl(TRUE); //call 27341
              PurchLine.DELETE; //call 6927)
            UNTIL PurchLine.NEXT = 0;
            //**4PS.en

            PurchLine.INIT;
            PurchLine."Line No." := 0;
            PurchLineTmp.FINDSET;
            ExtendedTextAdded := FALSE;
            REPEAT
              IF PurchLineTmp."Attached to Line No." = 0 THEN BEGIN
                PurchLine.INIT;
                PurchLine."Line No." := PurchLine."Line No." + 10000;
                PurchLine.VALIDATE(Type,PurchLineTmp.Type);
                PurchLine."Buy-from Vendor No." := "Buy-from Vendor No.";  //**4PS.n 30353
                IF PurchLineTmp."No." = '' THEN BEGIN
                  PurchLine.VALIDATE(Description,PurchLineTmp.Description);
                  PurchLine.VALIDATE("Description 2",PurchLineTmp."Description 2");
                  //**4PS.sn
                  PurchLine."Input by" := USERID; //DP00469
                  PurchLine."Input Date" := TODAY; //DP00469
                  //**4PS.en
                END ELSE BEGIN
                  PurchLine."System-Created Entry" := PurchLineTmp."System-Created Entry"; //**4PS.n

                  PurchLine.VALIDATE("No.",PurchLineTmp."No.");
                  IF PurchLine."Buy-from Vendor No." <> "Buy-from Vendor No." THEN  //**4PS.n 30353
                    PurchLine."Buy-from Vendor No." := "Buy-from Vendor No.";       //**4PS.n 30353
                  IF PurchLine.Type <> PurchLine.Type::" " THEN
                    CASE TRUE OF
                      PurchLineTmp."Drop Shipment":
                        BEGIN
                          SalesLine.GET(SalesLine."Document Type"::Order,
                            PurchLineTmp."Sales Order No.",
                            PurchLineTmp."Sales Order Line No.");
                          CopyDocMgt.TransfldsFromSalesToPurchLine(SalesLine,PurchLine);
                          PurchLine."Drop Shipment" := PurchLineTmp."Drop Shipment";
                          PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
                          PurchLine."Sales Order No." := PurchLineTmp."Sales Order No.";
                          PurchLine."Sales Order Line No." := PurchLineTmp."Sales Order Line No.";
                          EVALUATE(PurchLine."Inbound Whse. Handling Time",'<0D>');
                          PurchLine.VALIDATE("Inbound Whse. Handling Time");
                          //**4PS.sn
                          PurchLine."Input by" := USERID; //DP00469
                          PurchLine."Input Date" := TODAY; //DP00469
                          //**4PS.en

                          SalesLine.VALIDATE("Unit Cost (LCY)",PurchLine."Unit Cost (LCY)");
                          SalesLine."Purchase Order No." := PurchLine."Document No.";
                          SalesLine."Purch. Order Line No." := PurchLine."Line No.";
                          SalesLine.MODIFY;
                        END;
                      PurchLineTmp."Special Order":
                        BEGIN
                          SalesLine.GET(SalesLine."Document Type"::Order,
                            PurchLineTmp."Special Order Sales No.",
                            PurchLineTmp."Special Order Sales Line No.");
                          CopyDocMgt.TransfldsFromSalesToPurchLine(SalesLine,PurchLine);
                          PurchLine."Special Order" := PurchLineTmp."Special Order";
                          PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
                          PurchLine."Special Order Sales No." := PurchLineTmp."Special Order Sales No.";
                          PurchLine."Special Order Sales Line No." := PurchLineTmp."Special Order Sales Line No.";
                          //**4PS.sn
                          PurchLine."Input by" := USERID; //DP00469
                          PurchLine."Input Date" := TODAY; //DP00469
                          //**4PS.en

                          SalesLine.VALIDATE("Unit Cost (LCY)",PurchLine."Unit Cost (LCY)");
                          SalesLine."Special Order Purchase No." := PurchLine."Document No.";
                          SalesLine."Special Order Purch. Line No." := PurchLine."Line No.";
                          SalesLine.MODIFY;
                        END;
                      ELSE BEGIN
                        PurchLine.VALIDATE("Unit of Measure Code",PurchLineTmp."Unit of Measure Code");
                        PurchLine.VALIDATE("Variant Code",PurchLineTmp."Variant Code");
                        PurchLine."Prod. Order No." := PurchLineTmp."Prod. Order No.";
                        IF PurchLine."Prod. Order No." <> '' THEN BEGIN
                          PurchLine.Description := PurchLineTmp.Description;
                          PurchLine.VALIDATE("VAT Prod. Posting Group",PurchLineTmp."VAT Prod. Posting Group");
                          PurchLine.VALIDATE("Gen. Prod. Posting Group",PurchLineTmp."Gen. Prod. Posting Group");
                          PurchLine.VALIDATE("Expected Receipt Date",PurchLineTmp."Expected Receipt Date");
                          PurchLine.VALIDATE("Requested Receipt Date",PurchLineTmp."Requested Receipt Date");
                          PurchLine.VALIDATE("Qty. per Unit of Measure",PurchLineTmp."Qty. per Unit of Measure");
                        END;
                        IF (PurchLineTmp."Job No." <> '') AND (PurchLineTmp."Job Task No." <> '') THEN BEGIN
                          PurchLine.VALIDATE("Job No.",PurchLineTmp."Job No.");
                          PurchLine.VALIDATE("Job Task No.",PurchLineTmp."Job Task No.");
                          PurchLine."Job Line Type" := PurchLineTmp."Job Line Type";
                        END;
                        IF PurchLineTmp.Quantity <> 0 THEN
                          PurchLine.VALIDATE(Quantity,PurchLineTmp.Quantity);
                        IF ("Currency Code" = xRec."Currency Code") AND (PurchLine."Direct Unit Cost" = 0) THEN
                          PurchLine.VALIDATE("Direct Unit Cost",PurchLineTmp."Direct Unit Cost");
                        PurchLine."Routing No." := PurchLineTmp."Routing No.";
                        PurchLine."Routing Reference No." := PurchLineTmp."Routing Reference No.";
                        PurchLine."Operation No." := PurchLineTmp."Operation No.";
                        PurchLine."Work Center No." := PurchLineTmp."Work Center No.";
                        PurchLine."Prod. Order Line No." := PurchLineTmp."Prod. Order Line No.";
                        PurchLine."Overhead Rate" := PurchLineTmp."Overhead Rate";
                        IF PurchLine."Buy-from Vendor No." <> "Buy-from Vendor No." THEN  //**4PS.n 30353
                          PurchLine."Buy-from Vendor No." := "Buy-from Vendor No.";       //**4PS.n 30353
                        //**4PS.sn
                        PurchLine."Input by" := USERID; //DP00469
                        PurchLine."Input Date" := TODAY; //DP00469
                        //**4PS.en
                      END;
                    END;
                END;

                PurchLine.INSERT;
                ExtendedTextAdded := FALSE;

                //**4PS.sn
                PurchLine.GetTempPurchLine(PurchLineTmp);
                PurchLine."Buy-from Vendor No." := "Buy-from Vendor No.";
                IF PurchLineTmp.Quantity <> 0 THEN
                  PurchLine.VALIDATE(Quantity,PurchLineTmp.Quantity);
                IF (PurchLine."Document Type" = PurchLine."Document Type"::Order) AND
                   (PurchLineTmp."Qty. to Receive" <> 0) THEN
                  PurchLine.VALIDATE("Qty. to Receive",PurchLineTmp."Qty. to Receive");
                //**4PS.sn
                PurchLine."Modified by" := USERID; //DP00469
                PurchLine."Last Date Modified" := TODAY;//DP00469
                //**4PS.en
                PurchLine.MODIFY;  //db, 27-12-10: M24754
                PurchLine.CreatePurchOrderControl(FALSE);
                //**4PS.en

                IF PurchLine.Type = PurchLine.Type::Item THEN BEGIN
                  ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
                  TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",PurchLineTmp."Document Type");
                  TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.",PurchLineTmp."Document No.");
                  TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.",PurchLineTmp."Line No.");
                  IF TempItemChargeAssgntPurch.FINDSET THEN
                    REPEAT
                      IF NOT TempItemChargeAssgntPurch.MARK THEN BEGIN
                        TempItemChargeAssgntPurch."Applies-to Doc. Line No." := PurchLine."Line No.";
                        TempItemChargeAssgntPurch.Description := PurchLine.Description;
                        TempItemChargeAssgntPurch.MODIFY;
                        TempItemChargeAssgntPurch.MARK(TRUE);
                      END;
                    UNTIL TempItemChargeAssgntPurch.NEXT = 0;
                END;
                IF PurchLine.Type = PurchLine.Type::"Charge (Item)" THEN BEGIN
                  TempInteger.INIT;
                  TempInteger.Number := PurchLine."Line No.";
                  TempInteger.INSERT;
                END;
              END ELSE
                IF NOT ExtendedTextAdded THEN BEGIN
                  TransferExtendedText.PurchCheckIfAnyExtText(PurchLine,TRUE);
                  TransferExtendedText.InsertPurchExtText(PurchLine);
                  PurchLine.FINDLAST;
                  ExtendedTextAdded := TRUE;
                END;
            UNTIL PurchLineTmp.NEXT = 0;

            ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
            PurchLineTmp.SETRANGE(Type,PurchLine.Type::"Charge (Item)");
            IF PurchLineTmp.FINDSET THEN
              REPEAT
                TempItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLineTmp."Line No.");
                IF TempItemChargeAssgntPurch.FINDSET THEN BEGIN
                  REPEAT
                    TempInteger.FINDFIRST;
                    ItemChargeAssgntPurch.INIT;
                    ItemChargeAssgntPurch := TempItemChargeAssgntPurch;
                    ItemChargeAssgntPurch."Document Line No." := TempInteger.Number;
                    ItemChargeAssgntPurch.VALIDATE("Unit Cost",0);
                    ItemChargeAssgntPurch.INSERT;
                  UNTIL TempItemChargeAssgntPurch.NEXT = 0;
                  TempInteger.DELETE;
                END;
              UNTIL PurchLineTmp.NEXT = 0;

            PurchLineTmp.SETRANGE(Type);
            PurchLineTmp.DELETEALL;
            ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
            TempItemChargeAssgntPurch.DELETEALL;
          END;
        END ELSE
          ERROR(
            Text018,ChangedFieldName);
      END;
    END;

    LOCAL PROCEDURE MessageIfPurchLinesExist@5(ChangedFieldName@1000 : Text[100]);
    BEGIN
      IF PurchLinesExist AND NOT HideValidationDialog THEN
        MESSAGE(
          Text019 +
          Text020,
          ChangedFieldName);
    END;

    LOCAL PROCEDURE PriceMessageIfPurchLinesExist@7(ChangedFieldName@1000 : Text[100]);
    BEGIN
      IF PurchLinesExist AND NOT HideValidationDialog THEN
        MESSAGE(
          Text019 +
          Text021,ChangedFieldName);
    END;

    LOCAL PROCEDURE UpdateCurrencyFactor@12();
    BEGIN
      IF "Currency Code" <> '' THEN BEGIN
        IF "Posting Date" <> 0D THEN
          CurrencyDate := "Posting Date"
        ELSE
          CurrencyDate := WORKDATE;

      //"Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Currency Code");  //**4PS.o
        "Currency Factor" := CurrExchRate.ExchangeRate(1,"Job No.",CurrencyDate,"Currency Code",FALSE); //**4PS.n
      END ELSE
        "Currency Factor" := 0;
    END;

    LOCAL PROCEDURE ConfirmUpdateCurrencyFactor@13() : Boolean;
    BEGIN
      // jhoek.140211.begin
      // IF HideValidationDialog THEN
      IF (HideValidationDialog) OR (NOT GUIALLOWED) THEN
      // jhoek.140211.end
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(Text022,FALSE);
      IF Confirmed THEN
        VALIDATE("Currency Factor")
      ELSE
        "Currency Factor" := xRec."Currency Factor";
      EXIT(Confirmed);
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE UpdatePurchLines@15(ChangedFieldName@1000 : Text[100];AskQuestion@1001 : Boolean);
    VAR
      PurchLineReserve@1003 : Codeunit 99000834;
      Question@1002 : Text[250];
    BEGIN
      IF NOT PurchLinesExist THEN
        EXIT;

      IF AskQuestion THEN BEGIN
        Question := STRSUBSTNO(
            Text032 +
            Text033,ChangedFieldName);
        IF GUIALLOWED THEN
          IF DIALOG.CONFIRM(Question,TRUE) THEN
            CASE ChangedFieldName OF
              //**4PS.sn
              FIELDCAPTION("Order Date"),
              FIELDCAPTION("Location Code"),
              //**4PS.en
              FIELDCAPTION("Expected Receipt Date"),
              FIELDCAPTION("Requested Receipt Date"),
              FIELDCAPTION("Promised Receipt Date"),
              FIELDCAPTION("Lead Time Calculation"),
              FIELDCAPTION("Inbound Whse. Handling Time"):
                ConfirmResvDateConflict;
            END
          ELSE
            EXIT;
      END;

      PurchLine.LOCKTABLE;
      //MODIFY; //**4PS.o
      MODIFY(TRUE); //**4PS.n

      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      IF PurchLine.FINDSET THEN
        REPEAT
          xPurchLine := PurchLine;
          CASE ChangedFieldName OF
            //**4PS.sn
            FIELDCAPTION("Order Date"):
              IF PurchLine.Type <> PurchLine.Type::" " THEN BEGIN
                PurchLine.VALIDATE("Order Date","Order Date");
                IF FORMAT(PurchLine."Lead Time Calculation") <> '' THEN
                  PurchLine.CheckDeliveryTime(PurchLine.FIELDNO("Item No."));
              END;
            //**4PS.en
            FIELDCAPTION("Expected Receipt Date"):
            //IF PurchLine."No." <> '' THEN //**4PS.o
              IF PurchLine.Type <> PurchLine.Type::" " THEN BEGIN //**4PS.n
                PurchLine.VALIDATE("Expected Receipt Date","Expected Receipt Date");
              //**4PS.sn
                IF FORMAT(PurchLine."Lead Time Calculation") <> '' THEN
                  PurchLine.CheckDeliveryTime(PurchLine.FIELDNO("Item No."))  //db, 04-09-07
              END;
              //**4PS.en
            FIELDCAPTION("Currency Factor"):
              IF PurchLine.Type <> PurchLine.Type::" " THEN
                PurchLine.VALIDATE("Direct Unit Cost");
            FIELDCAPTION("Transaction Type"):
              PurchLine.VALIDATE("Transaction Type","Transaction Type");
            FIELDCAPTION("Transport Method"):
              PurchLine.VALIDATE("Transport Method","Transport Method");
            FIELDCAPTION("Entry Point"):
              PurchLine.VALIDATE("Entry Point","Entry Point");
            FIELDCAPTION(Area):
              PurchLine.VALIDATE(Area,Area);
            FIELDCAPTION("Transaction Specification"):
              PurchLine.VALIDATE("Transaction Specification","Transaction Specification");
            FIELDCAPTION("Requested Receipt Date"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Requested Receipt Date","Requested Receipt Date");
            FIELDCAPTION("Prepayment %"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Prepayment %","Prepayment %");
            FIELDCAPTION("Promised Receipt Date"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Promised Receipt Date","Promised Receipt Date");
            FIELDCAPTION("Lead Time Calculation"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Lead Time Calculation","Lead Time Calculation");
            FIELDCAPTION("Inbound Whse. Handling Time"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Inbound Whse. Handling Time","Inbound Whse. Handling Time");
            PurchLine.FIELDCAPTION("Deferral Code"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Deferral Code");
            //**4PS.sn
            FIELDCAPTION("Location Code"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Location Code", "Location Code");
            FIELDCAPTION("Posting Date") :
              PurchLine.VALIDATE("Posting Date","Posting Date");
            //**4PS.en
          END;
          PurchLine.MODIFY(TRUE);
          PurchLineReserve.VerifyChange(PurchLine,xPurchLine);
        UNTIL PurchLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ConfirmResvDateConflict@31();
    VAR
      ResvEngMgt@1000 : Codeunit 99000831;
    BEGIN
      IF ResvEngMgt.ResvExistsForPurchHeader(Rec) THEN
        IF NOT CONFIRM(Text050 + Text011,FALSE) THEN
          ERROR('');
    END;

    PROCEDURE CreateDim@16(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20];Type5@1100525001 : Integer;No5@1100525002 : Code[20];Type6@1100525003 : Integer;No6@1100525004 : Code[20]);
    VAR
      SourceCodeSetup@1010 : Record 242;
      TableID@1011 : ARRAY [10] OF Integer;
      No@1012 : ARRAY [10] OF Code[20];
      OldDimSetID@1008 : Integer;
      Dim2@1100525005 : Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      //**4PS.sn
      TableID[5] := Type5;
      No[5] := No5;
      TableID[6] := Type6;   //** 4PS 09-06-2010
      No[6] := No6;          //** 4PS 09-06-2010
      //TableID[7] := Type7;  //*C007227.o
      //No[7] := No7;         //*C007227.o
      Dim2 := "Shortcut Dimension 2 Code";
      //**4PS.en
      //"Shortcut Dimension 1 Code" := ''; //**4PS.o Must be kept for Department Authorization
      "Shortcut Dimension 2 Code" := '';
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(TableID,No,SourceCodeSetup.Purchases,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      IF (OldDimSetID <> "Dimension Set ID") AND PurchLinesExist THEN BEGIN
        MODIFY;
        UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;

      //**4PS.sn
      IF (Dim2 <> '') AND
         (("Shortcut Dimension 2 Code" = '') OR
          (CurrFieldNo = FIELDNO("Shortcut Dimension 2 Code")))
      THEN BEGIN
        "Shortcut Dimension 2 Code" := Dim2;
        ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
      END;
      //**4PS.en
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@19(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      OldDimSetID@1005 : Integer;
    BEGIN
      //**4PS.sn
      IF FieldNumber = 1 THEN
        DimMgt.CheckDepartmentAuthorization(DATABASE::"Purchase Header", ShortcutDimCode);
      //**4PS.en
      OldDimSetID := "Dimension Set ID";
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      IF "No." <> '' THEN
        IF NOT SkipModify THEN //**4PS.n
          MODIFY;

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        //MODIFY; //**4PS.o
        IF NOT SkipModify THEN //**4PS.n
          MODIFY(TRUE); //**4PS.n
        IF PurchLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    PROCEDURE ReceivedPurchLinesExist@20() : Boolean;
    BEGIN
      //4PS: changed to global function
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER("Quantity Received",'<>0');
      EXIT(PurchLine.FINDFIRST);
    END;

    LOCAL PROCEDURE ReturnShipmentExist@5800() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER("Return Qty. Shipped",'<>0');
      EXIT(PurchLine.FINDFIRST);
    END;

    LOCAL PROCEDURE UpdateShipToAddress@21();
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT;

      //**4PS.sn
      IF Deliver = Deliver::Location THEN BEGIN
        IF "Location Code" <> '' THEN
          VALIDATE("Ship To Location", "Location Code");
      END;
      IF Deliver <> Deliver::" " THEN
        EXIT;
      IF "Received on Project" <> '' THEN
        EXIT;
      //**4PS.en

      IF ("Location Code" <> '') AND
         Location.GET("Location Code") AND
         ("Sell-to Customer No." = '')
      THEN BEGIN
        "Ship-to Name" := Location.Name;
        "Ship-to Name 2" := Location."Name 2";
        "Ship-to Address" := Location.Address;
        "Ship-to Address 2" := Location."Address 2";
        "Ship-to City" := Location.City;
        "Ship-to Post Code" := Location."Post Code";
        "Ship-to County" := Location.County;
        "Ship-to Country/Region Code" := Location."Country/Region Code";
        "Ship-to Contact" := Location.Contact;
      END;

      IF ("Location Code" = '') AND
         ("Sell-to Customer No." = '')
      THEN BEGIN
        CompanyInfo.GET;
        "Ship-to Code" := '';
        "Ship-to Name" := CompanyInfo."Ship-to Name";
        "Ship-to Name 2" := CompanyInfo."Ship-to Name 2";
        "Ship-to Address" := CompanyInfo."Ship-to Address";
        "Ship-to Address 2" := CompanyInfo."Ship-to Address 2";
        "Ship-to City" := CompanyInfo."Ship-to City";
        "Ship-to Post Code" := CompanyInfo."Ship-to Post Code";
        "Ship-to County" := CompanyInfo."Ship-to County";
        "Ship-to Country/Region Code" := CompanyInfo."Ship-to Country/Region Code";
        "Ship-to Contact" := CompanyInfo."Ship-to Contact";
      END;
    END;

    LOCAL PROCEDURE DeletePurchaseLines@17();
    BEGIN
      IF PurchLine.FINDSET THEN BEGIN
        HandleItemTrackingDeletion;
        REPEAT
          PurchLine.SuspendStatusCheck(TRUE);
          PurchLine.DELETE(TRUE);
        UNTIL PurchLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE HandleItemTrackingDeletion@36();
    VAR
      ReservEntry@1000 : Record 337;
      ReservEntry2@1001 : Record 337;
    BEGIN
      WITH ReservEntry DO BEGIN
        RESET;
        SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line","Reservation Status");
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype","Document Type");
        SETRANGE("Source ID","No.");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
        SETFILTER("Item Tracking",'> %1',"Item Tracking"::None);
        IF ISEMPTY THEN
          EXIT;

        IF HideValidationDialog OR NOT GUIALLOWED THEN
          Confirmed := TRUE
        ELSE
          Confirmed := CONFIRM(Text041,FALSE,LOWERCASE(FORMAT("Document Type")),"No.");

        IF NOT Confirmed THEN
          ERROR('');

        IF FINDSET THEN
          REPEAT
            ReservEntry2 := ReservEntry;
            ReservEntry2.ClearItemTrackingFields;
            ReservEntry2.MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ClearItemAssgntPurchFilter@22(VAR TempItemChargeAssgntPurch@1000 : Record 5805);
    BEGIN
      TempItemChargeAssgntPurch.SETRANGE("Document Line No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.");
    END;

    LOCAL PROCEDURE UpdateBuyFromCont@24(VendorNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Vend@1004 : Record 23;
      OrderAddress@1100525000 : Record 224;
    BEGIN
      IF Vend.GET(VendorNo) THEN BEGIN
        IF Vend."Primary Contact No." <> '' THEN
          "Buy-from Contact No." := Vend."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
          ContBusRel.SETRANGE("No.","Buy-from Vendor No.");
          IF ContBusRel.FINDFIRST THEN
            "Buy-from Contact No." := ContBusRel."Contact No."
          ELSE
            "Buy-from Contact No." := '';
        END;
        "Buy-from Contact" := Vend.Contact;
        "Buy-from Contact Person No." := ''; //**4PS.n
      END;

      //**4PS.sn
      IF "Order Address Code" <> '' THEN
        IF OrderAddress.GET("Buy-from Vendor No.", "Order Address Code") THEN BEGIN
          "Buy-from Contact" := OrderAddress.Contact;
          "Buy-from Contact Person No." := '';
        END;

      UpdateEMailForPurchOrderForContactPerson;
      //**4PS.en
    END;

    LOCAL PROCEDURE UpdatePayToCont@27(VendorNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Vend@1001 : Record 23;
    BEGIN
      IF Vend.GET(VendorNo) THEN BEGIN
        IF Vend."Primary Contact No." <> '' THEN
          "Pay-to Contact No." := Vend."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
          ContBusRel.SETRANGE("No.","Pay-to Vendor No.");
          IF ContBusRel.FINDFIRST THEN
            "Pay-to Contact No." := ContBusRel."Contact No."
          ELSE
            "Pay-to Contact No." := '';
        END;
        "Pay-to Contact" := Vend.Contact;
      END;
    END;

    LOCAL PROCEDURE UpdateBuyFromVend@25(ContactNo@1002 : Code[20]);
    VAR
      ContBusinessRelation@1007 : Record 5054;
      Vend@1006 : Record 23;
      Cont@1005 : Record 5050;
    BEGIN
      "Buy-from Contact Person No." := ''; //**4PS.n
      IF Cont.GET(ContactNo) THEN BEGIN
        "Buy-from Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Buy-from Contact" := Cont.Name
        ELSE
          IF Vend.GET("Buy-from Vendor No.") THEN
            "Buy-from Contact" := Vend.Contact
          ELSE
            //"Buy-from Contact" := '' //**4PS.o
            "Buy-from Contact" := ''; //**4PS.n
        UpdateEMailForPurchOrderForContactPerson; //**4PS.n
      END ELSE BEGIN
        "Buy-from Contact" := '';
        UpdateEMailForPurchOrderForContactPerson; //**4PS.n
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
      IF Cont."Company No." = '' THEN                                         //**4PS03.sn
        //it is possible to have a vendor that is not know as a company in the contacts table
        ContBusinessRelation.SETRANGE("Contact No.",Cont."No.")
      ELSE                                                                    //**4PS03.en
        ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF ("Buy-from Vendor No." <> '') AND
           ("Buy-from Vendor No." <> ContBusinessRelation."No.")
        THEN
          ERROR(Text037,Cont."No.",Cont.Name,"Buy-from Vendor No.");
        IF "Buy-from Vendor No." = '' THEN BEGIN
          SkipBuyFromContact := TRUE;
          VALIDATE("Buy-from Vendor No.",ContBusinessRelation."No.");
          SkipBuyFromContact := FALSE;
        END;
      END ELSE
      //**4PS.sn
      BEGIN
        IF ("Document Type" <> "Document Type"::Quote) THEN
      //**4PS.en
          ERROR(Text039,Cont."No.",Cont.Name)
      //**4PS.sn
        ELSE BEGIN
          "Buy-from Vendor Name" := Cont.Name;
          "Buy-from Vendor Name 2" := Cont."Name 2";
          "Buy-from Address" := Cont.Address;
          "Buy-from Address 2" := Cont."Address 2";
          "Buy-from City" := Cont.City;
          "Buy-from Post Code" := Cont."Post Code";
          "Buy-from County" := Cont.County;
          "Buy-from Country/Region Code" := Cont."Country/Region Code";
          "Buy-from Phone No." := Cont."Phone No.";  //**4PS.n
          "Buy-from Fax No." := Cont."Fax No.";  //**4PS.n
          EXIT;
        END;
      END;
      //**4PS.en

      IF ("Buy-from Vendor No." = "Pay-to Vendor No.") OR
         ("Pay-to Vendor No." = '')
      THEN
        VALIDATE("Pay-to Contact No.","Buy-from Contact No.");
    END;

    LOCAL PROCEDURE UpdatePayToVend@26(ContactNo@1000 : Code[20]);
    VAR
      ContBusinessRelation@1005 : Record 5054;
      Vend@1004 : Record 23;
      Cont@1003 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Pay-to Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Pay-to Contact" := Cont.Name
        ELSE
          IF Vend.GET("Pay-to Vendor No.") THEN
            "Pay-to Contact" := Vend.Contact
          ELSE
            "Pay-to Contact" := '';
      END ELSE BEGIN
        "Pay-to Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
      IF Cont."Company No." = '' THEN                                         //**4PS03.sn
        //it is possible to have a vendor that is not know as a company in the contacts table
        ContBusinessRelation.SETRANGE("Contact No.",Cont."No.")
      ELSE                                                                    //**4PS03.en
        ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF "Pay-to Vendor No." = '' THEN BEGIN
          SkipPayToContact := TRUE;
          VALIDATE("Pay-to Vendor No.",ContBusinessRelation."No.");
          SkipPayToContact := FALSE;
        END ELSE
          IF "Pay-to Vendor No." <> ContBusinessRelation."No." THEN
            ERROR(Text037,Cont."No.",Cont.Name,"Pay-to Vendor No.");
      END ELSE
        ERROR(Text039,Cont."No.",Cont.Name);
    END;

    PROCEDURE CreateInvtPutAwayPick@29();
    VAR
      WhseRequest@1000 : Record 5765;
    BEGIN
      TESTFIELD(Status,Status::Released);

      WhseRequest.RESET;
      WhseRequest.SETCURRENTKEY("Source Document","Source No.");
      CASE "Document Type" OF
        "Document Type"::Order:
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Purchase Order");
        "Document Type"::"Return Order":
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Purchase Return Order");
      END;
      WhseRequest.SETRANGE("Source No.","No.");
      REPORT.RUNMODAL(REPORT::"Create Invt Put-away/Pick/Mvmt",TRUE,FALSE,WhseRequest);
    END;

    PROCEDURE CreatePurchLineRegAcc@1210190100();
    VAR
      PurchLineNoRegAccount@1210190034 : Integer;
      OtherPurchLinesPresent@1100485001 : Boolean;
    BEGIN
      //**4PS
      // Rules for adding/changing purchase line registration account
      //
      //                                    | purchase line reg account
      //                                    | present               | not present
      // ---------------------------------------------------------------------------
      // Other lines (except text) present  | do nothing            | do nothing
      //                                    |                       |
      //                                    |-----------------------|---------------
      //                       not present  | rewrite purchase line | add purchase line
      //                                    | registration account  | registration account
      //

      IF NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN
        EXIT;

      IF "Invoice Lines Input" THEN
        EXIT;

      MODIFY;

      PurchSetup.GET;

      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETRANGE(Type, PurchLine.Type::"G/L Account");
      IF NOT "Preregister WIP" THEN
        PurchLine.SETRANGE("No.", PurchSetup."Purchase Registration Account")
      ELSE
        PurchLine.SETFILTER(
          "No.", '%1|%2', PurchSetup."Preregistration WIP Account",
          PurchSetup."Purchase Registration Account");

      IF PurchLine.FINDFIRST THEN BEGIN
        PurchLineNoRegAccount := PurchLine."Line No.";
        PurchLine.SETFILTER("Line No.", '<>%1', PurchLineNoRegAccount);
      END;
      PurchLine.SETFILTER(Type, '<>%1', PurchLine.Type::" ");
      PurchLine.SETRANGE("No.");
      OtherPurchLinesPresent := PurchLine.FINDFIRST;
      PurchLine.SETRANGE("Line No.");
      PurchLine.SETRANGE(Type);

      IF OtherPurchLinesPresent THEN
        EXIT;

      //Dus ook EXIT als meerdere regels op voorregistratie WIP zijn geschreven (op PurchSetup."Preregistration WIP Account") 12-02-2008

      IF (PurchLineNoRegAccount > 0) THEN
        PurchLine.DELETE
      ELSE
        PurchLineNoRegAccount := 10000;

      PurchLine.INIT;
      PurchLine."Document Type" := "Document Type";
      PurchLine."Invoice Lines Input" := FALSE;
      PurchLine."Document No." := "No.";
      PurchLine."Line No." := PurchLineNoRegAccount;
      IF ("Preregister WIP") AND ("Job No." <> '') THEN
        PurchLine.VALIDATE("Job No.", "Job No.");
      PurchLine."VAT Bus. Posting Group" := "VAT Bus. Posting Group";
      PurchLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
      PurchLine."Buy-from Vendor No." := "Buy-from Vendor No.";
      PurchLine.Type := PurchLine.Type::"G/L Account";

      IF (NOT "Preregister WIP") OR (("Preregister WIP") AND ("Job No." = ''))THEN BEGIN
        PurchSetup.TESTFIELD("Purchase Registration Account");
        PurchLine.VALIDATE("No.",PurchSetup."Purchase Registration Account")
      END ELSE BEGIN
        PurchSetup.TESTFIELD("Preregistration WIP Account");
        PurchLine."System-Created Entry" := TRUE;
        PurchLine.VALIDATE("No.",PurchSetup."Preregistration WIP Account");
      END;

      GLAcc.GET(PurchLine."No.");
      "Purchase Registration Account" := PurchLine."No.";
      PurchLine.Description := GLAcc.Name;
      PurchLine."Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
      IF NOT "Amounts only" THEN BEGIN
        PurchLine.Quantity := 1;
        PurchLine."Qty. to Receive" := 1;
        IF "Document Type" = "Document Type"::"Credit Memo" THEN
          PurchLine."Return Qty. to Ship" := 1;
        PurchLine."Qty. to Invoice" := 1;
        PurchLine.InitOutstanding;
      END;
      PurchLine."VAT Prod. Posting Group" := "VAT Prod. Posting Group";
      VATSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
      PurchLine."VAT %" := VATSetup."VAT %";
      PurchLine."VAT Calculation Type" := VATSetup."VAT Calculation Type";
      PurchLine."Manually VAT Posting" := "Manually VAT Posting";
      PurchLine."Currency Code" := "Currency Code";

      PurchLine.VALIDATE("VAT Prod. Posting Group");
      IF "Prices Including VAT" THEN BEGIN
        PurchLine.VALIDATE("Line Amount","Amount incl. VAT");
        IF "Manually VAT Posting" THEN BEGIN
          PurchLine.VALIDATE(Amount,"Amount excl. VAT");
          PurchLine.VALIDATE("Amount Including VAT","Amount incl. VAT");
        END;
      END ELSE BEGIN
        IF "Manually VAT Posting" THEN BEGIN
          PurchLine.VALIDATE(Amount,"Amount excl. VAT");
          PurchLine.VALIDATE("Amount Including VAT","Amount incl. VAT");
        END ELSE
          PurchLine.VALIDATE("Amount Including VAT","Amount incl. VAT");
      END;

      IF "Prices Including VAT" THEN
        PurchLine.VALIDATE("Direct Unit Cost",PurchLine."Amount Including VAT")
      ELSE
        PurchLine.VALIDATE("Direct Unit Cost",PurchLine.Amount);

      IF "Amounts only" THEN BEGIN
        PurchLine.UpdateAmounts;
        PurchLine.VALIDATE("Line Amount");
      END;

      PurchLine."Buy-from Vendor No." := "Buy-from Vendor No.";
      PurchLine."Cost Type" := PurchLine."Cost Type"::" ";
      PurchLine.VALIDATE("Posting Date","Posting Date");
      //**4PS.sn
      PurchLine."Input by" := USERID; //DP00469
      PurchLine."Input Date" := TODAY; //DP00469
      //**4PS.en
      PurchLine.INSERT;

      // COMMIT; jhoek.170311 i.o.m. pschoenmaker
    END;

    PROCEDURE ShowDocDim@32();
    VAR
      OldDimSetID@1000 : Integer;
    BEGIN
      DimMgt.SetTableID(DATABASE::"Purchase Header"); //**4PS.n
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',"Document Type","No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF PurchLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE UpdateAllLineDim@34(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      NewDimSetID@1002 : Integer;
    BEGIN
      // Update all lines with changed dimensions.

      IF NewParentDimSetID = OldParentDimSetID THEN
        EXIT;
      IF NOT CONFIRM(Text051) THEN
        EXIT;

      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.LOCKTABLE;
      IF PurchLine.FIND('-') THEN
        REPEAT
          NewDimSetID := DimMgt.GetDeltaDimSetID(PurchLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          IF PurchLine."Dimension Set ID" <> NewDimSetID THEN BEGIN
            PurchLine."Dimension Set ID" := NewDimSetID;
            DimMgt.UpdateGlobalDimFromDimSetID(
              PurchLine."Dimension Set ID",PurchLine."Shortcut Dimension 1 Code",PurchLine."Shortcut Dimension 2 Code");
            //**4PS.sn
            PurchLine."Modified by" := USERID; //DP00469
            PurchLine."Last Date Modified" := TODAY;//DP00469
            //**4PS.en
            PurchLine.MODIFY;
          END;
        UNTIL PurchLine.NEXT = 0;
    END;

    PROCEDURE SetAmountToApply@18(AppliesToDocNo@1000 : Code[20];VendorNo@1001 : Code[20]);
    VAR
      VendLedgEntry@1002 : Record 25;
    BEGIN
      VendLedgEntry.SETCURRENTKEY("Document No.");
      VendLedgEntry.SETRANGE("Document No.",AppliesToDocNo);
      VendLedgEntry.SETRANGE("Vendor No.",VendorNo);
      VendLedgEntry.SETRANGE(Open,TRUE);
      IF VendLedgEntry.FINDFIRST THEN BEGIN
        IF VendLedgEntry."Amount to Apply" = 0 THEN  BEGIN
          VendLedgEntry.CALCFIELDS("Remaining Amount");
          VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
        END ELSE
          VendLedgEntry."Amount to Apply" := 0;
        VendLedgEntry."Accepted Payment Tolerance" := 0;
        VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
        CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
      END;
    END;

    PROCEDURE SetShipToForSpecOrder@23();
    BEGIN
      IF Location.GET("Location Code") THEN BEGIN
        "Ship-to Code" := '';
        "Ship-to Name" := Location.Name;
        "Ship-to Name 2" := Location."Name 2";
        "Ship-to Address" := Location.Address;
        "Ship-to Address 2" := Location."Address 2";
        "Ship-to City" := Location.City;
        "Ship-to Post Code" := Location."Post Code";
        "Ship-to County" := Location.County;
        "Ship-to Country/Region Code" := Location."Country/Region Code";
        "Ship-to Contact" := Location.Contact;
        "Location Code" := Location.Code;
      END ELSE BEGIN
        CompanyInfo.GET;
        "Ship-to Code" := '';
        "Ship-to Name" := CompanyInfo."Ship-to Name";
        "Ship-to Name 2" := CompanyInfo."Ship-to Name 2";
        "Ship-to Address" := CompanyInfo."Ship-to Address";
        "Ship-to Address 2" := CompanyInfo."Ship-to Address 2";
        "Ship-to City" := CompanyInfo."Ship-to City";
        "Ship-to Post Code" := CompanyInfo."Ship-to Post Code";
        "Ship-to County" := CompanyInfo."Ship-to County";
        "Ship-to Country/Region Code" := CompanyInfo."Ship-to Country/Region Code";
        "Ship-to Contact" := CompanyInfo."Ship-to Contact";
        "Location Code" := '';
      END;
    END;

    LOCAL PROCEDURE JobUpdatePurchLines@28(SkipJobCurrFactorUpdate@1000 : Boolean);
    BEGIN
      WITH PurchLine DO BEGIN
        SETFILTER("Job No.",'<>%1','');
        SETFILTER("Job Task No.",'<>%1','');
        LOCKTABLE;
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          SetPurchHeader(Rec);
          REPEAT
            IF NOT SkipJobCurrFactorUpdate THEN
              JobSetCurrencyFactor;
            CreateTempJobJnlLine(FALSE);
            UpdateJobPrices;
            //**4PS.sn
            "Modified by" := USERID; //DP00469
            "Last Date Modified" := TODAY;//DP00469
            //**4PS.en
            MODIFY;
          UNTIL NEXT = 0;
        END;
      END
    END;

    PROCEDURE GetPstdDocLinesToRevere@47();
    VAR
      PurchPostedDocLines@1002 : Page 5855;
    BEGIN
      GetVend("Buy-from Vendor No.");
      PurchPostedDocLines.SetToPurchHeader(Rec);
      PurchPostedDocLines.SETRECORD(Vend);
      PurchPostedDocLines.LOOKUPMODE := TRUE;
      IF PurchPostedDocLines.RUNMODAL = ACTION::LookupOK THEN
        PurchPostedDocLines.CopyLineToDoc;

      CLEAR(PurchPostedDocLines);
    END;

    PROCEDURE SetSecurityFilterOnRespCenter@43();
    BEGIN
      IF UserSetupMgt.GetPurchasesFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserSetupMgt.GetPurchasesFilter);
        FILTERGROUP(0);
      END;

      SETRANGE("Date Filter",0D,WORKDATE - 1);
    END;

    PROCEDURE CalcInvDiscForHeader@45();
    VAR
      PurchaseInvDisc@1000 : Codeunit 70;
    BEGIN
      PurchSetup.GET;
      IF PurchSetup."Calc. Inv. Discount" THEN
        PurchaseInvDisc.CalculateIncDiscForHeader(Rec);
    END;

    PROCEDURE AddShipToAddress@46(SalesHeader@1000 : Record 36;ShowError@1001 : Boolean);
    VAR
      PurchLine2@1002 : Record 39;
    BEGIN
      IF ShowError THEN BEGIN
        PurchLine2.RESET;
        PurchLine2.SETRANGE("Document Type","Document Type"::Order);
        PurchLine2.SETRANGE("Document No.","No.");
        IF NOT PurchLine2.ISEMPTY THEN BEGIN
          IF "Ship-to Name" <> SalesHeader."Ship-to Name" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name"),"No.",SalesHeader."No.");
          IF "Ship-to Name 2" <> SalesHeader."Ship-to Name 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name 2"),"No.",SalesHeader."No.");
          IF "Ship-to Address" <> SalesHeader."Ship-to Address" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address"),"No.",SalesHeader."No.");
          IF "Ship-to Address 2" <> SalesHeader."Ship-to Address 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address 2"),"No.",SalesHeader."No.");
          IF "Ship-to Post Code" <> SalesHeader."Ship-to Post Code" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Post Code"),"No.",SalesHeader."No.");
          IF "Ship-to City" <> SalesHeader."Ship-to City" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to City"),"No.",SalesHeader."No.");
          IF "Ship-to Contact" <> SalesHeader."Ship-to Contact" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Contact"),"No.",SalesHeader."No.");
        END ELSE BEGIN
          // no purchase line exists
          "Ship-to Name" := SalesHeader."Ship-to Name";
          "Ship-to Name 2" := SalesHeader."Ship-to Name 2";
          "Ship-to Address" := SalesHeader."Ship-to Address";
          "Ship-to Address 2" := SalesHeader."Ship-to Address 2";
          "Ship-to Post Code" := SalesHeader."Ship-to Post Code";
          "Ship-to City" := SalesHeader."Ship-to City";
          "Ship-to Contact" := SalesHeader."Ship-to Contact";
        END;
      END;
    END;

    PROCEDURE DropShptOrderExists@48(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesLine2@1001 : Record 37;
    BEGIN
      // returns TRUE if sales is either Drop Shipment of Special Order
      SalesLine2.RESET;
      SalesLine2.SETRANGE("Document Type",SalesLine2."Document Type"::Order);
      SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine2.SETRANGE("Drop Shipment",TRUE);
      EXIT(NOT SalesLine2.ISEMPTY);
    END;

    PROCEDURE SpecialOrderExists@81(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesLine3@1001 : Record 37;
    BEGIN
      SalesLine3.RESET;
      SalesLine3.SETRANGE("Document Type",SalesLine3."Document Type"::Order);
      SalesLine3.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine3.SETRANGE("Special Order",TRUE);
      EXIT(NOT SalesLine3.ISEMPTY);
    END;

    PROCEDURE QtyToReceiveIsZero@30() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER("Qty. to Receive",'<>0');
      EXIT(PurchLine.ISEMPTY);
    END;

    PROCEDURE IsApprovedForPosting@50() : Boolean;
    VAR
      PrepaymentMgt@1000 : Codeunit 441;
    BEGIN
      //**4PS Made Global
      IF ApprovalsMgmt.PrePostApprovalCheckPurch(Rec) THEN BEGIN
        IF PrepaymentMgt.TestPurchasePrepayment(Rec) THEN
          ERROR(STRSUBSTNO(Text053,"Document Type","No."));
        IF PrepaymentMgt.TestPurchasePayment(Rec) THEN
          IF NOT CONFIRM(STRSUBSTNO(Text054,"Document Type","No."),TRUE) THEN
            EXIT(FALSE);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE IsApprovedForPostingBatch@51() : Boolean;
    VAR
      PrepaymentMgt@1000 : Codeunit 441;
    BEGIN
      IF ApprovalsMgmt.PrePostApprovalCheckPurch(Rec) THEN BEGIN
        IF PrepaymentMgt.TestPurchasePrepayment(Rec) THEN
          EXIT(FALSE);
        IF PrepaymentMgt.TestPurchasePayment(Rec) THEN
          EXIT(FALSE);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE SendToPosting@57(PostingCodeunitID@1000 : Integer);
    BEGIN
      IF NOT IsApprovedForPosting THEN
        EXIT;
      CODEUNIT.RUN(PostingCodeunitID,Rec);
    END;

    PROCEDURE CancelBackgroundPosting@33();
    VAR
      PurchasePostViaJobQueue@1000 : Codeunit 98;
    BEGIN
      PurchasePostViaJobQueue.CancelQueueEntry(Rec);
    END;

    PROCEDURE CheckDropShptAddressDetails@79(SalesHeader@1000 : Record 36) : Boolean;
    BEGIN
      NameAddressDetails := DropShptNameAddressDetails;
      DropShptNameAddressDetails :=
        SalesHeader."Ship-to Name" + SalesHeader."Ship-to Name 2" +
        SalesHeader."Ship-to Address" + SalesHeader."Ship-to Address 2" +
        SalesHeader."Ship-to Post Code" + SalesHeader."Ship-to City" +
        SalesHeader."Ship-to Contact";
      IF NameAddressDetails = '' THEN
        NameAddressDetails := DropShptNameAddressDetails;
      EXIT(NameAddressDetails = DropShptNameAddressDetails);
    END;

    PROCEDURE AddSpecialOrderToAddress@80(SalesHeader@1000 : Record 36;ShowError@1001 : Boolean);
    VAR
      PurchLine3@1003 : Record 39;
      LocationCode@1004 : Record 14;
    BEGIN
      IF ShowError THEN BEGIN
        PurchLine3.RESET;
        PurchLine3.SETRANGE("Document Type","Document Type"::Order);
        PurchLine3.SETRANGE("Document No.","No.");
        IF NOT PurchLine3.ISEMPTY THEN BEGIN
          LocationCode.GET("Location Code");
          IF "Ship-to Name" <> LocationCode.Name THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name"),"No.",SalesHeader."No.");
          IF "Ship-to Name 2" <> LocationCode."Name 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name 2"),"No.",SalesHeader."No.");
          IF "Ship-to Address" <> LocationCode.Address THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address"),"No.",SalesHeader."No.");
          IF "Ship-to Address 2" <> LocationCode."Address 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address 2"),"No.",SalesHeader."No.");
          IF "Ship-to Post Code" <> LocationCode."Post Code" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Post Code"),"No.",SalesHeader."No.");
          IF "Ship-to City" <> LocationCode.City THEN
            ERROR(Text052,FIELDCAPTION("Ship-to City"),"No.",SalesHeader."No.");
          IF "Ship-to Contact" <> LocationCode.Contact THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Contact"),"No.",SalesHeader."No.");
        END ELSE
          SetShipToForSpecOrder;
      END;
    END;

    PROCEDURE CheckSpecOrderAddressDetails@82(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      LocationCode@1001 : Record 14;
    BEGIN
      NameAddressDetails := SpecOrderNameAddressDetails;
      IF LocationCode.GET(SalesHeader."Location Code") THEN
        SpecOrderNameAddressDetails :=
          LocationCode.Name + LocationCode."Name 2" +
          LocationCode.Address + LocationCode."Address 2" +
          LocationCode."Post Code" + LocationCode.City +
          LocationCode.Contact
      ELSE BEGIN
        CompanyInfo.GET;
        SpecOrderNameAddressDetails :=
          CompanyInfo."Ship-to Name" + CompanyInfo."Ship-to Name 2" +
          CompanyInfo."Ship-to Address" + CompanyInfo."Ship-to Address 2" +
          CompanyInfo."Ship-to Post Code" + CompanyInfo."Ship-to City" +
          CompanyInfo."Ship-to Contact";
      END;
      IF NameAddressDetails = '' THEN
        NameAddressDetails := SpecOrderNameAddressDetails;
      EXIT(NameAddressDetails = SpecOrderNameAddressDetails);
    END;

    LOCAL PROCEDURE InitRecOnVendUpdate@39();
    BEGIN
      IF NOT SkipInitialization THEN
        InitInsert;
    END;

    PROCEDURE InvoicedLineExists@56() : Boolean;
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");
      PurchLine.SETFILTER("Quantity Invoiced",'<>%1',0);
      EXIT(NOT PurchLine.ISEMPTY);
    END;

    PROCEDURE CreateDimSetForPrepmtAccDefaultDim@44();
    VAR
      PurchaseLine@1001 : Record 39;
      TempPurchaseLine@1002 : TEMPORARY Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type","Document Type");
      PurchaseLine.SETRANGE("Document No.","No.");
      PurchaseLine.SETFILTER("Prepmt. Amt. Inv.",'<>%1',0);
      IF PurchaseLine.FINDSET THEN
        REPEAT
          CollectParamsInBufferForCreateDimSet(TempPurchaseLine,PurchaseLine);
        UNTIL PurchaseLine.NEXT = 0;
      TempPurchaseLine.RESET;
      TempPurchaseLine.MARKEDONLY(FALSE);
      IF TempPurchaseLine.FINDSET THEN
        REPEAT
          PurchaseLine.CreateDim(DATABASE::"G/L Account",TempPurchaseLine."No.",
            DATABASE::Job,TempPurchaseLine."Job No.",
            DATABASE::"Responsibility Center",TempPurchaseLine."Responsibility Center",
            DATABASE::"Work Center",TempPurchaseLine."Work Center No.",
            0,'',0,'',0,''); //**4PS.n
        UNTIL TempPurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CollectParamsInBufferForCreateDimSet@49(VAR TempPurchaseLine@1000 : TEMPORARY Record 39;PurchaseLine@1001 : Record 39);
    VAR
      GenPostingSetup@1002 : Record 252;
      DefaultDimension@1003 : Record 352;
    BEGIN
      TempPurchaseLine.SETRANGE("Gen. Bus. Posting Group",PurchaseLine."Gen. Bus. Posting Group");
      TempPurchaseLine.SETRANGE("Gen. Prod. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      IF NOT TempPurchaseLine.FINDFIRST THEN BEGIN
        GenPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
        GenPostingSetup.TESTFIELD("Purch. Prepayments Account");
        DefaultDimension.SETRANGE("Table ID",DATABASE::"G/L Account");
        DefaultDimension.SETRANGE("No.",GenPostingSetup."Purch. Prepayments Account");
        InsertTempPurchaseLineInBuffer(TempPurchaseLine,PurchaseLine,
          GenPostingSetup."Purch. Prepayments Account",DefaultDimension.ISEMPTY);
      END ELSE
        IF NOT TempPurchaseLine.MARK THEN BEGIN
          TempPurchaseLine.SETRANGE("Job No.",PurchaseLine."Job No.");
          TempPurchaseLine.SETRANGE("Responsibility Center",PurchaseLine."Responsibility Center");
          TempPurchaseLine.SETRANGE("Work Center No.",PurchaseLine."Work Center No.");
          IF TempPurchaseLine.ISEMPTY THEN
            InsertTempPurchaseLineInBuffer(TempPurchaseLine,PurchaseLine,TempPurchaseLine."No.",FALSE)
        END;
    END;

    LOCAL PROCEDURE InsertTempPurchaseLineInBuffer@35(VAR TempPurchaseLine@1000 : TEMPORARY Record 39;PurchaseLine@1001 : Record 39;AccountNo@1002 : Code[20];DefaultDimenstionsNotExist@1003 : Boolean);
    BEGIN
      TempPurchaseLine.INIT;
      TempPurchaseLine."Line No." := PurchaseLine."Line No.";
      TempPurchaseLine."No." := AccountNo;
      TempPurchaseLine."Job No." := PurchaseLine."Job No.";
      TempPurchaseLine."Responsibility Center" := PurchaseLine."Responsibility Center";
      TempPurchaseLine."Work Center No." := PurchaseLine."Work Center No.";
      TempPurchaseLine."Gen. Bus. Posting Group" := PurchaseLine."Gen. Bus. Posting Group";
      TempPurchaseLine."Gen. Prod. Posting Group" := PurchaseLine."Gen. Prod. Posting Group";
      TempPurchaseLine.MARK := DefaultDimenstionsNotExist;
      TempPurchaseLine.INSERT;
    END;

    PROCEDURE OpenPurchaseOrderStatistics@60();
    BEGIN
      CalcInvDiscForHeader;
      CreateDimSetForPrepmtAccDefaultDim;
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Purchase Order Statistics",Rec);
    END;

    PROCEDURE GetCardpageID@58() : Integer;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          EXIT(PAGE::"Purchase Quote");
        "Document Type"::Order:
          EXIT(PAGE::"Purchase Order");
        "Document Type"::Invoice:
          EXIT(PAGE::"Purchase Invoice");
        "Document Type"::"Credit Memo":
          EXIT(PAGE::"Purchase Credit Memo");
        "Document Type"::"Blanket Order":
          EXIT(PAGE::"Blanket Purchase Order");
        "Document Type"::"Return Order":
          EXIT(PAGE::"Purchase Return Order");
      END;
    END;

    [Integration(TRUE)]
    PROCEDURE OnCheckPurchasePostRestrictions@54();
    BEGIN
    END;

    [Integration(TRUE)]
    PROCEDURE OnCheckPurchaseReleaseRestrictions@55();
    BEGIN
    END;

    PROCEDURE SetStatus@53(NewStatus@1000 : Option);
    BEGIN
      Status := NewStatus;
      MODIFY;
    END;

    PROCEDURE TriggerOnAfterPostPurchaseDoc@116(VAR GenJnlPostLine@1001 : Codeunit 12;PurchRcpHdrNo@1002 : Code[20];RetShptHdrNo@1003 : Code[20];PurchInvHdrNo@1004 : Code[20];PurchCrMemoHdrNo@1005 : Code[20]);
    VAR
      PurchPost@1000 : Codeunit 90;
    BEGIN
      PurchPost.OnAfterPostPurchaseDoc(Rec,GenJnlPostLine,PurchRcpHdrNo,RetShptHdrNo,PurchInvHdrNo,PurchCrMemoHdrNo);
    END;

    PROCEDURE DeferralHeadersExist@38() : Boolean;
    VAR
      DeferralHeader@1000 : Record 1701;
      DeferralUtilities@1001 : Codeunit 1720;
    BEGIN
      DeferralHeader.SETRANGE("Deferral Doc. Type",DeferralUtilities.GetPurchDeferralDocType);
      DeferralHeader.SETRANGE("Gen. Jnl. Template Name",'');
      DeferralHeader.SETRANGE("Gen. Jnl. Batch Name",'');
      DeferralHeader.SETRANGE("Document Type","Document Type");
      DeferralHeader.SETRANGE("Document No.","No.");
      EXIT(NOT DeferralHeader.ISEMPTY);
    END;

    LOCAL PROCEDURE ConfirmUpdateDeferralDate@85();
    BEGIN
      IF HideValidationDialog THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(DeferralLineQst,FALSE,FIELDCAPTION("Posting Date"));
      IF Confirmed THEN
        UpdatePurchLines(PurchLine.FIELDCAPTION("Deferral Code"),FALSE);
    END;

    PROCEDURE SetRelPurchHeader@6085576(VAR NewRelPurchHeader@1160040000 : Record 38);
    BEGIN
      //<DC>
      RelPurchHeader := NewRelPurchHeader;
      //</DC>
    END;

    PROCEDURE GetRelPurchHeader@6085577(VAR NewRelPurchHeader@1160040000 : Record 38);
    BEGIN
      //<DC>
      NewRelPurchHeader := RelPurchHeader;
      //</DC>
    END;

    PROCEDURE LookupContactPerson@1210190001();
    VAR
      ContBussRelRec@1210190032 : Record 5054;
      ContactRec@1210190033 : Record 5050;
      ContactFrm@1210190000 : Page 5052;
    BEGIN
      //**4PS
      CLEAR(ContactFrm);
      ContactFrm.LOOKUPMODE(TRUE);
      IF "Buy-from Contact No." = '' THEN BEGIN
        ContBussRelRec.SETRANGE("Link to Table",ContBussRelRec."Link to Table"::Vendor);
        ContBussRelRec.SETRANGE("No.","Buy-from Vendor No.");
        IF NOT ContBussRelRec.FIND('-') THEN
          EXIT;
      END ELSE
        ContBussRelRec."Contact No." := "Buy-from Contact No.";

      ContactRec.SETRANGE(Type,ContactRec.Type::Person);
      ContactRec.SETRANGE("Company No.",ContBussRelRec."Contact No.");
      ContactFrm.SETTABLEVIEW(ContactRec);
      IF ContactFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ContactFrm.GETRECORD(ContactRec);
        "Buy-from Contact Person No." := ContactRec."No.";
        "Buy-from Contact" := ContactRec.Name;
        UpdateEMailForPurchOrderForContactPerson;
      END;
    END;

    PROCEDURE InitIcmStatus@1210190003();
    BEGIN
      //**4PS
      CALCFIELDS("ICM Login Code");
      IF "ICM Login Code" = '' THEN
        "ICM Status" := "ICM Status"::Manual
      ELSE
      //mg.so, 19-07-11: M28158
      //  IF "ICM Order Confirm. Received on" <> 0D THEN
      //    "ICM Status" := "ICM Status"::Confirmed
      //  ELSE
      //    IF "ICM File Created on" <> 0D THEN
      //      "ICM Status" := "ICM Status"::Created
      //    ELSE
      //mg.eo, 19-07-11: M28158
        "ICM Status" := "ICM Status"::Create;

      VALIDATE("ICM Status");  //db, 11-04-08 (check Lead Time + Expected Receipt Date)

      CLEAR("ICF Status");
      IF "ICM Login Code" = '' THEN
        CLEAR("ICM Procedure")
      ELSE
        "ICM Procedure" := "ICM Procedure"::Send;  //db, 08-05-07 (InitValue)
      "ICM File Created on" := 0D;
      "ICM File Created" := FALSE;
      "ICM Order Confirm. Received" := FALSE;
      "ICM Order Confirm. Received on" := 0D;
      "ICM File Sent" := FALSE; //mg, 19-07-11: M28158
    END;

    PROCEDURE CheckPurchOrderTypeAllowed@1210190004();
    VAR
      lvPurchLineRec@1210190000 : Record 39;
      lvProjRec@1210190001 : Record 11072003;
      lvServOrderRec@1210190002 : Record 11012823;
    BEGIN
      //**4PS
      lvPurchLineRec.SETRANGE("Document Type", "Document Type");
      lvPurchLineRec.SETRANGE("Document No.", "No.");
      IF lvPurchLineRec.FINDFIRST THEN BEGIN
        IF ("Purchase Order Type" <> "Purchase Order Type"::"Blanket Order") THEN BEGIN
          CALCFIELDS("Blanket Scheme");
          IF "Blanket Scheme" THEN
            FIELDERROR("Purchase Order Type", Text11012011);
        END;

        IF ("Purchase Order Type" = "Purchase Order Type"::"Return Order") THEN BEGIN
          IF NOT "Amounts only" THEN BEGIN
            lvPurchLineRec.SETFILTER(Quantity, '>%1', 0);
            IF lvPurchLineRec.FINDFIRST THEN
              FIELDERROR("Purchase Order Type", STRSUBSTNO(Text11012012, lvPurchLineRec.FIELDCAPTION(Quantity)));
            lvPurchLineRec.SETRANGE(Quantity);
          END ELSE BEGIN
            lvPurchLineRec.SETFILTER("Line Amount", '>%1', 0);
            IF lvPurchLineRec.FINDFIRST THEN
              FIELDERROR("Purchase Order Type", STRSUBSTNO(Text11012012, lvPurchLineRec.FIELDCAPTION("Line Amount")));
            lvPurchLineRec.SETRANGE("Line Amount");
          END;
        END;

        IF ("Purchase Order Type" = "Purchase Order Type"::"Blanket Order") THEN BEGIN
          lvPurchLineRec.SETFILTER(Quantity, '<%1', 0);
          IF lvPurchLineRec.FINDFIRST THEN
            FIELDERROR("Purchase Order Type", Text11012013);
          lvPurchLineRec.SETRANGE(Quantity);
        END;

        IF ("Purchase Order Type" <> "Purchase Order Type"::"Return Order") THEN BEGIN
          lvPurchLineRec.SETFILTER("Return Reason Code", '<>%1', '');
          IF lvPurchLineRec.FINDFIRST THEN
            FIELDERROR("Purchase Order Type", Text11012014);
          lvPurchLineRec.SETRANGE("Return Reason Code");
        END;
      END;

      IF ("Purchase Order Type" <> xRec."Purchase Order Type") AND
         (xRec."Purchase Order Type" = "Purchase Order Type"::"Return Order")
      THEN BEGIN
        IF "Job No." <> '' THEN BEGIN
          lvProjRec.GET("Job No.");
          lvProjRec.CheckProjectStatus(2);
        END;
        IF "Service Order No." <> '' THEN BEGIN
          lvServOrderRec.GET("Service Order No.");
          lvServOrderRec.CheckStatus(2);
        END;
        //
        lvPurchLineRec.SETFILTER("Job No.", '<>%1', '');
        IF lvPurchLineRec.FINDSET THEN BEGIN
          REPEAT
            IF lvPurchLineRec."Receiving Company" = '' THEN
              lvProjRec.CHANGECOMPANY(COMPANYNAME)
            ELSE
              lvProjRec.CHANGECOMPANY(lvPurchLineRec."Receiving Company");
            lvProjRec.GET(lvPurchLineRec."Job No.");
            lvProjRec.CheckProjectStatus(2);
          UNTIL lvPurchLineRec.NEXT = 0;
        END;
        lvPurchLineRec.SETRANGE("Job No.");
        //
        lvPurchLineRec.SETFILTER("Service Order No.", '<>%1', '');
        IF lvPurchLineRec.FINDSET THEN BEGIN
          REPEAT
            IF lvPurchLineRec."Receiving Company" = '' THEN
              lvServOrderRec.CHANGECOMPANY(COMPANYNAME)
            ELSE
              lvServOrderRec.CHANGECOMPANY(lvPurchLineRec."Receiving Company");
            lvServOrderRec.GET(lvPurchLineRec."Service Order No.");
            lvServOrderRec.CheckStatus(2);
          UNTIL lvPurchLineRec.NEXT = 0;
        END;
        lvPurchLineRec.SETRANGE("Service Order No.");
      END;
    END;

    PROCEDURE CheckResetToReceiveBlanktOrder@1100525002();
    VAR
      lvPurchLineRec@1100525000 : Record 39;
    BEGIN
      //**4PS
      IF ("Purchase Order Type" <> "Purchase Order Type"::"Blanket Order") THEN
        EXIT;

      lvPurchLineRec.SETRANGE("Document Type", "Document Type");
      lvPurchLineRec.SETRANGE("Document No.", "No.");
      lvPurchLineRec.SETFILTER("Qty. to Receive", '<>%1', 0);
      IF lvPurchLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          lvPurchLineRec.VALIDATE("Qty. to Receive", 0);
          lvPurchLineRec.MODIFY(TRUE);
        UNTIL lvPurchLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckAskForNoSeries@1210190008(IDocType@1210190001 : Option;VAR ONewNoSeries@1210190035 : Code[10]);
    VAR
      lvNoSeriesRelRec@1210190000 : Record 310;
      lvDefaultNoSeries@1210190034 : Code[10];
    BEGIN
      //**4PS
      ONewNoSeries := '';
      PurchSetup.GET;
      CASE IDocType OF
        "Document Type"::Quote:
          lvDefaultNoSeries := PurchSetup."Quote Nos.";
        "Document Type"::Order:
          lvDefaultNoSeries := PurchSetup."Order Nos.";
        "Document Type"::"Blanket Order":
          lvDefaultNoSeries := PurchSetup."Blanket Order Nos.";
      END;
      IF lvDefaultNoSeries = '' THEN
        EXIT;

      ONewNoSeries := lvDefaultNoSeries;

      lvNoSeriesRelRec.SETRANGE(Code, lvDefaultNoSeries);
      IF NOT lvNoSeriesRelRec.FIND('-') THEN
        EXIT;

      IF NoSeriesMgt.SelectSeries(lvDefaultNoSeries, '', ONewNoSeries) THEN BEGIN
        IF ONewNoSeries <> '' THEN BEGIN
          NoSeriesMgt.TestSeries(lvDefaultNoSeries, ONewNoSeries);
          EXIT;
        END;
      END;

      ERROR(Text11012018);
    END;

    PROCEDURE GetNoForSelectedNoSeries@1210190010(VAR IPurchHeadRec@1210190000 : Record 38);
    VAR
      lvDefaultNoSeries@1210190001 : Code[10];
    BEGIN
      //**4PS
      PurchSetup.GET;
      CASE IPurchHeadRec."Document Type" OF
        "Document Type"::Quote:
          lvDefaultNoSeries := PurchSetup."Quote Nos.";
        "Document Type"::Order:
          lvDefaultNoSeries := PurchSetup."Order Nos.";
        "Document Type"::"Blanket Order":
          lvDefaultNoSeries := PurchSetup."Blanket Order Nos.";
      END;
      IF IPurchHeadRec."No. Series" <> '' THEN
        lvDefaultNoSeries := IPurchHeadRec."No. Series";  //db, 04-08-09: M16131
      NoSeriesMgt.InitSeries(
        lvDefaultNoSeries,'',IPurchHeadRec."Posting Date",IPurchHeadRec."No.",IPurchHeadRec."No. Series");

      IF IPurchHeadRec."No." = '' THEN
        ERROR(Text11012019);
    END;

    PROCEDURE CheckDeleteCompQuoteAllowed@1210190007();
    VAR
      lvLinkedQuoteRec@1210190000 : Record 11020214;
    BEGIN
      //**4PS
      lvLinkedQuoteRec.SETRANGE(Type, lvLinkedQuoteRec.Type::"Linked Quote");
      lvLinkedQuoteRec.SETRANGE("Comparison Quote", xRec."Comparison Quote");
      IF lvLinkedQuoteRec.FIND('-') THEN
        ERROR(Text11012017, FIELDCAPTION("Comparison Quote"), lvLinkedQuoteRec."Quote No.");
    END;

    PROCEDURE UpdateComparisonQuoteLinks@1210190006(IMode@1210190000 : Code[10]);
    VAR
      lvCompQuoteRec@1210190001 : Record 11020214;
    BEGIN
      //**4PS
      CASE IMode OF
        'INSERT':
          lvCompQuoteRec.UpdateOnInsertQuoteDoc("Comparison Quote", "No.");
        'MODIFY':
          lvCompQuoteRec.UpdateOnModifyQuoteDoc("Comparison Quote", "No.", xRec."Comparison Quote");
        'DELETE':
          lvCompQuoteRec.UpdateOnDeleteQuoteDoc("Comparison Quote", "No.");
      END;
    END;

    PROCEDURE Delete4PSAdditions@1100485000();
    VAR
      RefPeriodRec@1100485000 : Record 11020272;
      lvDocRefPointRec@1100485001 : Record 11020296;
      ConsentRec@1100485002 : Record 11012226;
      PurchHeadExtensionRec@1100525000 : Record 11020398;
      PurchaseLineExtension@1100525001 : Record 11020644;
      WarrantyDataPurchaseOrder@1210190001 : Record 11020665;
      UpdateAction@1100525002 : 'Insert,Modify,Delete,Rename';
    BEGIN
      //**4PS
      ReminderHeader.SETRANGE("Document Type", "Document Type");
      ReminderHeader.SETRANGE("Document No.", "No.");
      ReminderHeader.DELETEALL(TRUE);

      IF ("Document Type" = "Document Type"::Quote) OR
         ("Document Type" = "Document Type"::Order)
      THEN BEGIN
        IF "Document Type" = "Document Type"::Quote THEN
          lvDocRefPointRec.SETRANGE(Type, lvDocRefPointRec.Type::PurchQuote);
        IF "Document Type" = "Document Type"::Order THEN
          lvDocRefPointRec.SETRANGE(Type, lvDocRefPointRec.Type::PurchOrder);
        lvDocRefPointRec.SETRANGE("Document No.", "No.");
        IF lvDocRefPointRec.FINDSET() THEN
          REPEAT
            lvDocRefPointRec.InsertDocRefPointQueueEntry(UpdateAction::Delete);
          UNTIL lvDocRefPointRec.NEXT = 0;
        lvDocRefPointRec.DELETEALL;

        IF "Document Type" = "Document Type"::Quote THEN
          RefPeriodRec.SETRANGE(Type, RefPeriodRec.Type::PurchQuote);
        IF "Document Type" = "Document Type"::Order THEN
          RefPeriodRec.SETRANGE(Type, RefPeriodRec.Type::PurchOrder);
        RefPeriodRec.SETRANGE("Document No.", "No.");
        RefPeriodRec.DELETEALL(TRUE);
      END;

      PurchHeadExtensionRec.SETRANGE("Document Type", "Document Type");
      PurchHeadExtensionRec.SETRANGE("Document No.", "No.");
      PurchHeadExtensionRec.DELETEALL;

      PurchaseLineExtension.RESET;
      PurchaseLineExtension.SETRANGE("Document Type", "Document Type");
      PurchaseLineExtension.SETRANGE("Document No.", "No.");
      IF NOT PurchaseLineExtension.ISEMPTY THEN
        PurchaseLineExtension.DELETEALL;

      CASE "Document Type" OF
        //**4PS JTH, Document relations and purchase texts added to Blanket Order
        "Document Type"::"Blanket Order":
          BEGIN
            DocRelRec.SETRANGE("Document Type",DocRelRec."Document Type"::"Blanket Order");
            DocRelRec.SETRANGE("No.","No.");
            DocRelRec.DELETEALL;
            ParRec.SETRANGE(Type,ParRec.Type::BlanketOrder);
            ParRec.SETRANGE("No.","No.");
            ParRec.DELETEALL;
            PurchTxtRec.SETRANGE("Line Type",PurchTxtRec."Line Type"::"Blanket Order");
            PurchTxtRec.SETRANGE("No.","No.");
            PurchTxtRec.DELETEALL;
          END;
        "Document Type"::Quote:
          BEGIN
            DocRelRec.SETRANGE("Document Type",DocRelRec."Document Type"::"Purchase Quote");
            DocRelRec.SETRANGE("No.","No.");
            DocRelRec.DELETEALL;
            ParRec.SETRANGE(Type,ParRec.Type::Quote);
            ParRec.SETRANGE("No.","No.");
            ParRec.DELETEALL;
            IF ("Document Type" = "Document Type"::Quote) AND ("Comparison Quote" <> '') THEN
              UpdateComparisonQuoteLinks('DELETE');
            ConsentRec.SETRANGE("Document Type",ConsentRec."Document Type"::"Purchase Quote");
            ConsentRec.SETRANGE("Document No.","No.");
            ConsentRec.DELETEALL;
          END;
        "Document Type"::Order:
          BEGIN
            DocRelRec.SETRANGE("Document Type",DocRelRec."Document Type"::"Purchase Order");
            DocRelRec.SETRANGE("No.","No.");
            DocRelRec.DELETEALL;
            ParRec.SETRANGE(Type,ParRec.Type::Order);
            ParRec.SETRANGE("No.","No.");
            ParRec.DELETEALL;
            PurchRcptHeader.RESET;
            PurchRcptHeader.SETCURRENTKEY("Order No.");
            PurchRcptHeader.SETRANGE("Order No.","No.");
            PurchRcptHeader.DELETEALL(TRUE);
            ConsentRec.SETRANGE("Document Type",ConsentRec."Document Type"::Order);
            ConsentRec.SETRANGE("Document No.","No.");
            ConsentRec.DELETEALL;
            WarrantyDataPurchaseOrder.SETRANGE("Document No.","No."); // RFC 337
            WarrantyDataPurchaseOrder.DELETEALL(TRUE); // RFC 337
          END;
        "Document Type"::Invoice:
          BEGIN
            ConsentRec.SETRANGE("Document Type",ConsentRec."Document Type"::Invoice);
            ConsentRec.SETRANGE("Document No.","No.");
            ConsentRec.DELETEALL;

            //UpdateManagemind(1,0);  //16698.o
          END;
        "Document Type"::"Credit Memo":
          BEGIN
            ConsentRec.SETRANGE("Document Type",ConsentRec."Document Type"::"Credit Memo");
            ConsentRec.SETRANGE("Document No.","No.");
            ConsentRec.DELETEALL;

            //UpdateManagemind(1,0);  //16698.o
          END;
      END;
    END;

    PROCEDURE DetermineRemovalContribution@1100485002();
    VAR
      lvPurchLineRec@1100485003 : Record 39;
      lvPurchLineRec2@1100485002 : Record 39;
      lvItemRec@1100485001 : Record 27;
      lvTradeItemRec@1100485000 : Record 11012317;
      lvPostingSetup@1100485006 : Record 252;
      lvCostObject@1100485004 : Code[20];
      lvRemovalContribution@1100485005 : Decimal;
    BEGIN
      //**4PS
      lvPurchLineRec.SETRANGE("Document Type", "Document Type");
      lvPurchLineRec.SETRANGE("Document No.", "No.");
      lvPurchLineRec.SETRANGE("Removal Contribution", TRUE);
      lvPurchLineRec.SETRANGE("Quantity Received", 0);  //db, 09-01-07 (skip processed lines after re-open order)
      lvPurchLineRec.SETFILTER("Receipt No.", '%1', '');  //db, 03-01-14: C003133
      lvPurchLineRec.DELETEALL(TRUE);

      lvPurchLineRec.SETRANGE("Removal Contribution", FALSE);
      IF lvPurchLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          lvCostObject := '';
          lvRemovalContribution := 0;

          IF lvPurchLineRec."Trade Item" <> '' THEN BEGIN
            lvTradeItemRec.GET(lvPurchLineRec."Vendor (Trade Item)", lvPurchLineRec."Trade Item");
            lvCostObject := lvTradeItemRec."Cost Object (Removal)";
            lvRemovalContribution := lvTradeItemRec."Removal Contribution";
            IF lvRemovalContribution <> 0 THEN
              lvTradeItemRec.TESTFIELD("Cost Object (Removal)");
          END ELSE BEGIN
            IF lvPurchLineRec."Item No." <> '' THEN BEGIN
              lvItemRec.GET(lvPurchLineRec."Item No.");
              lvCostObject := lvItemRec."Cost Object (Removal)";
              lvRemovalContribution := lvItemRec."Removal Contribution";
              IF lvRemovalContribution <> 0 THEN
                lvItemRec.TESTFIELD("Cost Object (Removal)");
            END;
          END;

          IF lvRemovalContribution <> 0 THEN BEGIN
            lvPurchLineRec2.INIT;
            lvPurchLineRec2."Removal Contribution" := TRUE;//kkleermaker.n, 110720, M28216
            lvPurchLineRec2."Document Type" := lvPurchLineRec."Document Type";
            lvPurchLineRec2."Document No." := lvPurchLineRec."Document No.";
            lvPurchLineRec2."Line No." := lvPurchLineRec."Line No.";
            REPEAT
              lvPurchLineRec2."Line No." := lvPurchLineRec2."Line No." + 1;
            UNTIL lvPurchLineRec2.INSERT;

            lvPurchLineRec2.Type := lvPurchLineRec2.Type::"G/L Account";
            lvPurchLineRec2."Receiving Company" := lvPurchLineRec."Receiving Company";  //db, 31-05-07
            lvPurchLineRec2."Additional Cost (Service)" := lvPurchLineRec."Additional Cost (Service)";  //db, 13-12-05
            lvPurchLineRec2.VALIDATE("Job No.", lvPurchLineRec."Job No.");
            lvPurchLineRec2.VALIDATE(Element, lvPurchLineRec.Element);
            lvPurchLineRec2."Extension Contract" := lvPurchLineRec."Extension Contract";
            lvPurchLineRec2.VALIDATE("Service Order No.", lvPurchLineRec."Service Order No.");
            lvPurchLineRec2.VALIDATE("Service Contract No.", lvPurchLineRec."Service Contract No.");
            lvPurchLineRec2."Service Location No." := lvPurchLineRec."Service Location No.";
            IF lvPurchLineRec2."No." = '' THEN BEGIN
              lvPostingSetup.GET(lvPurchLineRec."Gen. Bus. Posting Group", lvPurchLineRec."Gen. Prod. Posting Group");
              lvPostingSetup.TESTFIELD(lvPostingSetup."Purch. Account Removal Contr.");
              lvPurchLineRec2.VALIDATE("No.", lvPostingSetup."Purch. Account Removal Contr.");  //db, 25-05-07
              lvPurchLineRec2."Location Code" := lvPurchLineRec."Location Code";  //db, 16-12-10: M24618
              lvPurchLineRec2."Bin Code" := lvPurchLineRec."Bin Code";  //db, 16-12-10: M24618
            END;
            lvPurchLineRec2.Description := ''; //18-12-2007 melding:10762
            //db.sn, 11-02-11: M25031
            //IF lvPurchLineRec."Shortcut Dimension 1 Code" <> '' THEN
            //  lvPurchLineRec2.VALIDATE("Shortcut Dimension 1 Code", lvPurchLineRec."Shortcut Dimension 1 Code");
            lvPurchLineRec2.VALIDATE("Shortcut Dimension 2 Code", lvCostObject);
            lvPurchLineRec2."Additional Cost (Service)" := lvPurchLineRec."Additional Cost (Service)";
            IF lvPurchLineRec."Shortcut Dimension 1 Code" <> '' THEN  //db, 28-05-09: M14732
              lvPurchLineRec2.VALIDATE("Shortcut Dimension 1 Code", lvPurchLineRec."Shortcut Dimension 1 Code");
            //db.en, 11-02-11: M25031
            lvPurchLineRec2.VALIDATE("Gen. Prod. Posting Group", lvPurchLineRec."Gen. Prod. Posting Group");  //db, 25-05-07
            lvPurchLineRec2.VALIDATE("VAT Prod. Posting Group", lvPurchLineRec."VAT Prod. Posting Group");  //db, 18-09-06
            lvPurchLineRec2.VALIDATE("VAT Bus. Posting Group", lvPurchLineRec."VAT Bus. Posting Group");  //db, 18-09-06
            lvPurchLineRec2.VALIDATE(Quantity, lvPurchLineRec.Quantity * lvPurchLineRec."Qty. per Unit of Measure");
      //      IF (lvPurchLineRec2."Document Type" = lvPurchLineRec2."Document Type"::Order) AND //kkleermaker.so, 110720, M28217
      //        (lvPurchLineRec2."Qty. to Receive" = 0) AND (lvPurchLineRec."Qty. to Receive" <> 0)
      //      THEN
      //        lvPurchLineRec2.VALIDATE("Qty. to Receive", lvPurchLineRec2.Quantity);//kkleermaker.eo, 110720, M28217
            //kkleermaker.sn, 110720, M28217
            IF (lvPurchLineRec2."Document Type" = lvPurchLineRec2."Document Type"::Order) THEN
              lvPurchLineRec2.VALIDATE(
                "Qty. to Receive", lvPurchLineRec."Qty. to Receive"  * lvPurchLineRec."Qty. per Unit of Measure");
            //kkleermaker.en, 110720, M28217
            lvPurchLineRec2.VALIDATE("Direct Unit Cost", lvRemovalContribution);
      //      lvPurchLineRec2."Removal Contribution" := TRUE;//kkleermaker.o, 110720, M28216
            //db.sn, 26-02-13: C002285
            lvPurchLineRec2."Expected Receipt Date" := lvPurchLineRec."Expected Receipt Date";
            lvPurchLineRec2."Planned Receipt Date" := lvPurchLineRec."Planned Receipt Date";
            lvPurchLineRec2."Promised Receipt Date" := lvPurchLineRec."Promised Receipt Date";
            lvPurchLineRec2."Requested Receipt Date" := lvPurchLineRec."Requested Receipt Date";
            //db.en, 26-02-13: C002285
            lvPurchLineRec2."Return Reason Code" := lvPurchLineRec."Return Reason Code"; //#C011563
            lvPurchLineRec2.MODIFY(TRUE);
          END;
        UNTIL lvPurchLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckUpdateDocRefPoint@1100485016(IUpdateMode@1100485000 : Code[1]);
    VAR
      lvDocRefPointRec@1100485001 : Record 11020296;
      lvPurchHeadxRec@1100485002 : Record 38;
    BEGIN
      //**4PS
      CASE "Document Type" OF
        "Document Type"::Quote:
          BEGIN
            CASE IUpdateMode OF
              'I':
                lvDocRefPointRec.InsertDocRefPoint(lvDocRefPointRec.Type::PurchQuote,"No.","Quote Status",TODAY,TIME);
              'M':
                BEGIN
                  //* Get old (so always call before change is saved!)
                  IF lvPurchHeadxRec.GET("Document Type","No.") THEN BEGIN
                    IF (lvPurchHeadxRec."Quote Status" <> "Quote Status") THEN
                      lvDocRefPointRec.InsertDocRefPoint(lvDocRefPointRec.Type::PurchQuote,"No.","Quote Status",TODAY,TIME);
                  END;
                END;
            END;
          END;
        "Document Type"::Order:
          BEGIN
            CASE IUpdateMode OF
              'I':
                lvDocRefPointRec.InsertDocRefPoint(lvDocRefPointRec.Type::PurchOrder,"No.",Status,TODAY,TIME);
              'M':
                BEGIN
                  //* Get old (so always call before change is saved!)
                  IF lvPurchHeadxRec.GET("Document Type","No.") THEN BEGIN
                    IF (lvPurchHeadxRec.Status <> Status) THEN
                      lvDocRefPointRec.InsertDocRefPoint(lvDocRefPointRec.Type::PurchOrder,"No.",Status,TODAY,TIME);
                  END;
                END;
            END;
          END;
      END;
    END;

    PROCEDURE UpdateManagemind@1100485006(UpdateMode@1100485000 : 'Modify,Delete';ModifyWhat@1100485002 : ',Vendor,External Doc No,External Cr Mem No');
    VAR
      ManagemindInvRec@1100485001 : Record 11012133;
      ManagemindInvRec2@1100485003 : Record 11012133;
    BEGIN
      //**4PS
      CASE UpdateMode OF
        UpdateMode::Modify:
          BEGIN
            ManagemindInvRec.SETCURRENTKEY("Document No.");
            ManagemindInvRec.SETRANGE("Document No.","No.");
            IF ManagemindInvRec.FINDFIRST THEN BEGIN
              ManagemindInvRec2 := ManagemindInvRec;
              ManagemindInvRec.DELETE;
              CASE ModifyWhat OF
                ModifyWhat::Vendor:ManagemindInvRec2."Buy-from Vendor No." := "Buy-from Vendor No.";
                ModifyWhat::"External Doc No":ManagemindInvRec2."Vendor Invoice No." := "Ext. Document ID";
                ModifyWhat::"External Cr Mem No":ManagemindInvRec2."Vendor Invoice No." := "Vendor Cr. Memo No.";
              END;
              ManagemindInvRec2.INSERT;
           END;
         END;
        UpdateMode::Delete:
          BEGIN
            ManagemindInvRec.SETCURRENTKEY("Document No.");
            ManagemindInvRec.SETRANGE("Document No.","No.");
            IF ManagemindInvRec.FINDSET(TRUE,TRUE) THEN BEGIN
              REPEAT
                ManagemindInvRec2 := ManagemindInvRec;
                ManagemindInvRec2.Processed := FALSE;
                ManagemindInvRec2."Document No." := '';
                ManagemindInvRec2."Processed by" := '';
                ManagemindInvRec2.MODIFY;
              UNTIL ManagemindInvRec.NEXT = 0;
            END;
          END;
      END;
    END;

    PROCEDURE UpdateVATData@1100485001();
    VAR
      CompanyInfo@1100485000 : Record 79;
      Location@1100485001 : Record 14;
    BEGIN
      //**4PS.sn
      "Company VAT Registration No." := '';
      IF Deliver = Deliver::Location THEN
        IF Location.GET("Ship To Location") THEN
          IF Location."VAT Registration No." <> '' THEN
            "Company VAT Registration No." := Location."VAT Registration No.";
      IF "Company VAT Registration No." = '' THEN BEGIN
        CompanyInfo.GET;
        "Company VAT Registration No." := CompanyInfo."VAT Registration No.";
      END;
      VALIDATE("Country of Destination","Ship-to Country/Region Code");
      //**4PS.en
    END;

    PROCEDURE UpdateVATGroup@1100485004();
    VAR
      CountryOrigin@1100485000 : Record 9;
      CountryDestination@1100485001 : Record 9;
      GLSetup@1100485002 : Record 98;
    BEGIN
      //**4PS.sn
      GetVend("Buy-from Vendor No.");
      "VAT Bus. Posting Group" := Vend."VAT Bus. Posting Group";

      GLSetup.GET;
      IF NOT GLSetup."Extended Purch. VAT Determ." THEN
        EXIT;

      IF "Country of Destination" = '' THEN
        EXIT;

      CountryDestination.GET("Country of Destination");
      CountryDestination.TESTFIELD("VAT Bus. Posting Group");
      CountryDestination.TESTFIELD("VAT Bus. Posting Group EU");
      CountryDestination.TESTFIELD("VAT Bus. Posting Group Imp/Exp");

      IF "Country of Origin" = "Country of Destination" THEN
        "VAT Bus. Posting Group" := CountryDestination."VAT Bus. Posting Group"
      ELSE
        IF CountryOrigin.GET("Country of Origin") AND
           (CountryOrigin."Intrastat Code" <> '') AND
           (CountryDestination."Intrastat Code" <> '')
        THEN
          "VAT Bus. Posting Group" := CountryDestination."VAT Bus. Posting Group EU"
        ELSE
          "VAT Bus. Posting Group" := CountryDestination."VAT Bus. Posting Group Imp/Exp";
      //**4PS.en
    END;

    PROCEDURE DistrPurchLinesOverSubProjects@1100485003(PurchaseHeader@1100485000 : Record 38);
    VAR
      PurchaseLine@1100485001 : Record 39;
      MaxLine@1100485002 : Integer;
      Job@1100485003 : Record 11072003;
    BEGIN
      //**4PS.n
      PurchaseHeader.TESTFIELD("Amounts only", TRUE);
      PurchaseHeader.TESTFIELD(Status, Status::Open);
      MaxLine := 0;
      PurchaseLine.SETRANGE("Document Type", PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.", PurchaseHeader."No.");
      IF PurchaseLine.FINDLAST THEN
        MaxLine := PurchaseLine."Line No.";
      PurchaseLine.SETRANGE("Receiving Company", '');
      PurchaseLine.SETFILTER("Job No.", '<>%1', '');
      PurchaseLine.SETRANGE("Amnt. Received", 0);
      IF PurchaseLine.FINDSET(TRUE, TRUE) THEN
        REPEAT
          Job.GET(PurchaseLine."Job No.");
          IF (Job."Single/Main/Sub Project" = Job."Single/Main/Sub Project"::"Main Project") THEN
            IF GeneratePurchaseLines(PurchaseHeader, PurchaseLine, MaxLine) THEN
              PurchaseLine.DELETE(TRUE);

        UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GeneratePurchaseLines@1100498000(IPurchaseHeader@1100498000 : Record 38;IPurchaseLine@1100485001 : Record 39;VAR PurchaseLineNo@1100485005 : Integer) : Boolean;
    VAR
      PurchaseLine@1100498001 : Record 39;
      BudgetLine@1100498002 : Record 11012001;
      Job@1100498003 : Record 11072003;
      TotalAmount@1100485000 : Decimal;
    BEGIN
      //**4PS.n
      TotalAmount := 0;

      Job.RESET;
      Job.SETCURRENTKEY("Main Project");
      Job.SETRANGE("Main Project", IPurchaseLine."Job No.");
      Job.SETRANGE("Single/Main/Sub Project", Job."Single/Main/Sub Project"::"Sub Project");
      Job.SETFILTER("Project Status", '<%1', Job."Project Status"::"Administrative Finished");
      IF Job.FINDSET(FALSE, FALSE) THEN
        REPEAT
          BudgetLine.RESET;
          BudgetLine.SETCURRENTKEY("Project No.","Cost Object");
          BudgetLine.SETRANGE("Project No.", Job."No.");
          BudgetLine.SETRANGE("Cost Object",IPurchaseLine."Shortcut Dimension 2 Code");
          BudgetLine.CALCSUMS(Amount);
          TotalAmount := TotalAmount + BudgetLine.Amount;
        UNTIL Job.NEXT = 0;
      IF TotalAmount = 0 THEN
        EXIT(FALSE);

      IF Job.FINDSET(FALSE, FALSE) THEN
        REPEAT
          BudgetLine.RESET;
          BudgetLine.SETCURRENTKEY("Project No.","Cost Object");
          BudgetLine.SETRANGE("Project No.", Job."No.");
          BudgetLine.SETRANGE("Cost Object",IPurchaseLine."Shortcut Dimension 2 Code");
          BudgetLine.CALCSUMS(Amount);

          PurchaseLineNo := PurchaseLineNo + 10000;
          PurchaseLine.INIT;
          PurchaseLine.VALIDATE("Document Type",IPurchaseHeader."Document Type");
          PurchaseLine.VALIDATE("Document No.",IPurchaseHeader."No.");
          PurchaseLine.VALIDATE("Line No." ,PurchaseLineNo);
          PurchaseLine.Description := Job.Description;
          PurchaseLine.INSERT(TRUE);
          PurchaseLine.VALIDATE("Job No.", Job."No.");
          PurchaseLine.VALIDATE("Shortcut Dimension 2 Code", IPurchaseLine."Shortcut Dimension 2 Code");
          PurchaseLine.VALIDATE("Buy-from Vendor No.", IPurchaseHeader."Buy-from Vendor No.");
          //C-015067PurchaseLine.VALIDATE("Direct Unit Cost",IPurchaseLine."Line Amount" * (BudgetLine.Amount / TotalAmount));
          PurchaseLine.VALIDATE("Direct Unit Cost",IPurchaseLine."Direct Unit Cost" * (BudgetLine.Amount / TotalAmount));
          PurchaseLine.VALIDATE("Line Discount %", IPurchaseLine."Line Discount %"); //C-015067
          PurchaseLine.VALIDATE("VAT Bus. Posting Group", IPurchaseLine."VAT Bus. Posting Group"); //C-015067
          PurchaseLine.VALIDATE("VAT Prod. Posting Group", IPurchaseLine."VAT Prod. Posting Group"); //C-015067
          IF IPurchaseHeader."Amounts only"THEN
            PurchaseLine.InitAmntToReceive
          ELSE
            PurchaseLine.InitQtyToReceive;
          PurchaseLine.Description := IPurchaseLine.Description;
          PurchaseLine."Description 2" := IPurchaseLine."Description 2";
          PurchaseLine.MODIFY(TRUE);
        UNTIL Job.NEXT = 0;

      EXIT(TRUE);
    END;

    PROCEDURE CheckInwardLines@1100485005(lvPurchHeader@1100485000 : Code[20];lvUsePurchHeader@1100485001 : Boolean);
    VAR
      lvInwardRec@1100485002 : Record 11020350;
      lvInwardForm@1100485003 : Page 11072420;
    BEGIN
      //**4PS
      lvInwardRec.SETRANGE(Posted, FALSE);
      IF lvUsePurchHeader THEN BEGIN
        lvInwardRec.SETCURRENTKEY(Posted, "Purchase Order No.");
        lvInwardRec.SETRANGE("Purchase Order No.", lvPurchHeader);
      END;
      IF lvInwardRec.COUNT > 0 THEN BEGIN
        IF CONFIRM(Text11012022, TRUE) THEN BEGIN
          lvInwardRec.SETCURRENTKEY(Posted, "Job No.");
          lvInwardForm.SETTABLEVIEW(lvInwardRec);
          lvInwardForm.RUNMODAL;
        END;
      END;
    END;

    PROCEDURE ShowInwardLines@1100525001();
    VAR
      lvInwardRec@1100525001 : Record 11020350;
      lvInwardForm@1100525000 : Page 11072420;
    BEGIN
      //**4PS
      lvInwardRec.SETCURRENTKEY(Posted, "Purchase Order No.");
      lvInwardRec.SETRANGE("Purchase Order No.", "No.");
      lvInwardForm.SETTABLEVIEW(lvInwardRec);
      lvInwardForm.RUNMODAL;
    END;

    LOCAL PROCEDURE ValidateLocationCode@1100525000();
    BEGIN
      //**4PS
      //db.sn, 24-03-09: M14746
      IF Deliver > Deliver::Location THEN EXIT;
      IF (Deliver = Deliver::" ") AND ("Received on Project" <> '') THEN EXIT;
      //db.en, 24-03-09: M14746

      IF "Location Code" <> '' THEN BEGIN
        IF ("Ship To Location" <> "Location Code") THEN BEGIN
          Deliver := Deliver::Location;
          VALIDATE("Ship To Location","Location Code");
        END;
      END ELSE BEGIN
        IF ("Ship To Location" <> '') THEN BEGIN
          Deliver := Deliver::" ";
          VALIDATE("Ship To Location",'');
        END;
      END;
    END;

    PROCEDURE CheckVendorInvoiceNo@1100525003(IVendInvNo@1100525001 : Code[35];IFromVendCredMemNo@1100525003 : Boolean;IErrorMode@1100525000 : Boolean) : Boolean;
    VAR
      lvVendInvNoCaptionTxt@1100525002 : Text[1024];
    BEGIN
      //**4PS
      // The source code of OnValidate from fields 68/69 is moved to this new function
      PurchSetup.GET;

      IF IVendInvNo <> '' THEN BEGIN
        PurchHeader.RESET;
        PurchHeader.SETCURRENTKEY("Document Type","Buy-from Vendor No.","No.");
        IF NOT IFromVendCredMemNo THEN BEGIN
          PurchHeader.SETRANGE("Document Type","Document Type"::Invoice);
          PurchHeader.SETRANGE("Vendor Invoice No.",IVendInvNo);
          lvVendInvNoCaptionTxt := FIELDCAPTION("Vendor Invoice No.");
        END ELSE BEGIN
          PurchHeader.SETRANGE("Document Type","Document Type"::"Credit Memo");
          PurchHeader.SETRANGE("Vendor Cr. Memo No.",IVendInvNo);
          lvVendInvNoCaptionTxt := FIELDCAPTION("Vendor Cr. Memo No.");
        END;
        PurchHeader.SETRANGE("Buy-from Vendor No.","Buy-from Vendor No.");
        PurchHeader.SETFILTER(PurchHeader."No.",'<> %1',"No.");
        IF PurchSetup."Check Dupl. Vend. Invoice Nos." = PurchSetup."Check Dupl. Vend. Invoice Nos."::"In Calendar Year" THEN
          PurchHeader.SETRANGE("Document Date", CALCDATE('<-CY>', "Document Date"), CALCDATE('<CY>', "Document Date"))
        ELSE
          PurchHeader.SETRANGE("Document Date");
        IF PurchHeader.FINDFIRST THEN BEGIN
          IF NOT IErrorMode THEN
            EXIT(FALSE);
          ERROR(Text11012000,
            lvVendInvNoCaptionTxt, IVendInvNo,
            STRSUBSTNO('%1',"Document Type"), "No.",
            STRSUBSTNO('%1',PurchHeader."Document Type"), PurchHeader."No.");
        END;
        PurchHeader.RESET;

        VendLedgEntry.RESET;
        VendLedgEntry.SETCURRENTKEY("External Document No.");
        IF NOT IFromVendCredMemNo THEN
          VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice)
        ELSE
          VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::"Credit Memo");
        VendLedgEntry.SETRANGE("Vendor No.","Buy-from Vendor No.");
        VendLedgEntry.SETRANGE("External Document No.",IVendInvNo);
        IF PurchSetup."Check Dupl. Vend. Invoice Nos." = PurchSetup."Check Dupl. Vend. Invoice Nos."::"In Calendar Year" THEN
          VendLedgEntry.SETRANGE("Document Date", CALCDATE('<-CY>', "Document Date"), CALCDATE('<CY>', "Document Date"))
        ELSE
          VendLedgEntry.SETRANGE("Document Date");
        IF VendLedgEntry.FINDFIRST THEN BEGIN
          IF NOT IErrorMode THEN
            EXIT(FALSE);
          ERROR(Text11012000,
            lvVendInvNoCaptionTxt, IVendInvNo,
            STRSUBSTNO('%1',"Document Type"), "No.",
            STRSUBSTNO('%1',VendLedgEntry."Document Type"), VendLedgEntry."Document No.");
        END;
        VendLedgEntry.RESET;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE GetDefaultOrderAddress@1100525004();
    BEGIN
      //**4PS
      IF ("Document Type" = "Document Type"::Order) OR ("Document Type" = "Document Type"::Quote) THEN BEGIN
        OrderAddr.SETRANGE("Vendor No.","Buy-from Vendor No.");
        OrderAddr.SETRANGE("Default Order Address", TRUE);
        IF OrderAddr.FINDFIRST THEN
          "Order Address Code" := OrderAddr.Code;
      END;
    END;

    PROCEDURE GetOrderAddressByDepartment@1100528704(VAR OrderAddressCode@1100528705 : Code[10]);
    VAR
      OrderAddress@1100528704 : Record 224;
      Job@1100528703 : Record 11072003;
      ServiceOrder@1100528702 : Record 11012823;
      UserSetup@1100528701 : Record 91;
      DepartmentCode@1100528700 : Code[20];
    BEGIN
      //**4PS
      IF NOT ("Document Type" IN ["Document Type"::Quote, "Document Type"::Order, "Document Type"::"Blanket Order"]) THEN
        EXIT;

      //OrderAddressCode := ''; // C005781
      IF ("Job No." <> '') THEN
        IF Job.GET("Job No.") THEN
          DepartmentCode := Job."Global Dimension 1 Code";

      IF (DepartmentCode = '') AND ("Service Order No." <> '') THEN
        IF ServiceOrder.GET("Service Order No.") THEN
          DepartmentCode := ServiceOrder."Global Dimension 1 Code";

      IF (DepartmentCode = '') THEN
        IF UserSetup.GET(USERID) THEN
          DepartmentCode := UserSetup."Department Code";

      IF (DepartmentCode <> '') THEN BEGIN
        OrderAddress.SETRANGE("Vendor No.", "Buy-from Vendor No.");
        OrderAddress.SETRANGE("Global Dimension 1 Code", DepartmentCode);
        IF OrderAddress.FINDFIRST THEN
          OrderAddressCode := OrderAddress.Code;
      END;
    END;

    PROCEDURE UpdateOrderAddressByDepartment@1100528700();
    VAR
      OrderAddressCode@1100528700 : Code[10];
    BEGIN
      //**4PS
      GetOrderAddressByDepartment(OrderAddressCode);
      IF OrderAddressCode <> '' THEN
        VALIDATE("Order Address Code", OrderAddressCode);
    END;

    PROCEDURE CreatePurchaseOrder@1100525005(lvProject@1100525000 : Code[20];lvServOrder@1100525001 : Code[20]);
    VAR
      PurchHeader@1100485000 : Record 38;
      UserMgt@1100485001 : Codeunit 5700;
    BEGIN
      //**4PS
      PurchHeader.INIT;

      //**4PS.sn DPA
      IF DPA_IsActive THEN
        DPA_Management.SetDepartmentCodeUser(PurchHeader.TABLENAME, PurchHeader."Shortcut Dimension 1 Code"); //**4PS.dbeekman: M26308
      //**4PS.en DPA

      PurchHeader."Responsibility Center" := UserMgt.GetPurchasesDefault();
      PurchHeader."Document Type" := PurchHeader."Document Type"::Order;
      PurchHeader.INSERT(TRUE);
      IF lvProject <> '' THEN BEGIN
        PurchHeader.SetCurrFieldNo(FIELDNO("Job No.")); //C017139
        PurchHeader.VALIDATE("Job No.",lvProject);
        PurchHeader.SetCurrFieldNo(0); //C017139
      END;
      IF lvServOrder <> '' THEN BEGIN
        PurchHeader.SetCurrFieldNo(FIELDNO("Service Order No.")); //C017139
        PurchHeader.VALIDATE("Service Order No.", lvServOrder);
        PurchHeader.SetCurrFieldNo(0); //C017139
      END;

      //**4PS.sn DPA
      IF DPA_IsActive THEN
        DPA_Management.SetDepartmentCodeNoSeries(
          PurchHeader.TABLENAME, //**4PS.dbeekman: M26308
          PurchHeader."Shortcut Dimension 1 Code",
          PurchHeader."No. Series",
          '' );
      //**4PS.en DPA

      PurchHeader.MODIFY(TRUE);

      COMMIT; // Commit and runmodal are necessary to show new order in page with markedonly filter.
      PAGE.RUNMODAL(PAGE::"Purchase Order", PurchHeader);
    END;

    PROCEDURE MarkPurchaseOrdersOfProject@1100528404(ProjectNo@1100528400 : Code[20]);
    BEGIN
      //**4PS
      MarkPurchaseHeadersOfProject(ProjectNo, "Document Type"::Order);
    END;

    PROCEDURE MarkPurchaseQuotesOfProject@1100528405(ProjectNo@1100528400 : Code[20]);
    BEGIN
      //**4PS
      MarkPurchaseHeadersOfProject(ProjectNo, "Document Type"::Quote);
    END;

    LOCAL PROCEDURE MarkPurchaseHeadersOfProject@1100528406(ProjectNo@1100528400 : Code[20];DocumentType@1100528404 : Integer);
    VAR
      PurchaseHeader@1100528405 : Record 38;
      PurchaseLine@1100528402 : Record 39;
    BEGIN
      //**4PS
      IF ProjectNo = '' THEN
        EXIT;

      PurchaseHeader.SETCURRENTKEY("Document Type", "Job No.");
      PurchaseHeader.SETRANGE("Document Type", DocumentType);
      PurchaseHeader.SETRANGE("Job No.", ProjectNo);
      IF PurchaseHeader.FINDSET THEN
        REPEAT
          IF GET(DocumentType, PurchaseHeader."No.") THEN
            MARK(TRUE);
        UNTIL PurchaseHeader.NEXT = 0;

      PurchaseLine.SETCURRENTKEY("Document Type","Job No.");
      PurchaseLine.SETRANGE("Document Type", DocumentType);
      PurchaseLine.SETRANGE("Job No.", ProjectNo);
      IF PurchaseLine.FINDSET THEN
        REPEAT
          IF GET(DocumentType, PurchaseLine."Document No.") THEN
            MARK(TRUE);
        UNTIL PurchaseLine.NEXT = 0;
    END;

    PROCEDURE MarkPurchaseOrdersOfServiceOrder@1100528408(ServiceOrderNo@1100528400 : Code[20]);
    BEGIN
      //**4PS
      MarkPurchaseHeadersOfServiceOrder(ServiceOrderNo, "Document Type"::Order);
    END;

    LOCAL PROCEDURE MarkPurchaseHeadersOfServiceOrder@1100528407(ServiceOrderNo@1100528400 : Code[20];DocumentType@1100528404 : Integer);
    VAR
      PurchaseHeader@1100528405 : Record 38;
      PurchaseLine@1100528402 : Record 39;
    BEGIN
      //**4PS
      IF ServiceOrderNo = '' THEN
        EXIT;

      PurchaseLine.SETCURRENTKEY("Document Type", "Service Order No.");
      PurchaseLine.SETRANGE("Document Type", DocumentType);
      PurchaseLine.SETRANGE("Service Order No.", ServiceOrderNo);
      IF PurchaseLine.FINDSET THEN BEGIN
        REPEAT
          IF GET(DocumentType, PurchaseLine."Document No.") THEN
            MARK(TRUE);
        UNTIL PurchaseLine.NEXT = 0;
      END;
    END;

    PROCEDURE LookupVendor@1100525006(xPurchaseHeader@1100525002 : Record 38);
    VAR
      Vendor@1100525000 : Record 23;
      VendorList@1100525001 : Page 27;
    BEGIN
      //**4PS
      xRec := xPurchaseHeader;
      IF StrategicPurchMgt.IsLimitedPurchaser("Document Type") THEN BEGIN
        Vendor.FILTERGROUP(10);
        Vendor.SETFILTER("Blanket Contract Type",'<>%1',Vendor."Blanket Contract Type"::"No Contract");
        IF Vendor.FINDSET THEN
          REPEAT
            Vendor.MARK(StrategicPurchMgt.VendorHasContract(Vendor));
          UNTIL Vendor.NEXT = 0;
        Vendor.MARKEDONLY(TRUE);
        Vendor.FILTERGROUP(0);
        IF Vendor.GET("Buy-from Vendor No.") THEN;  //db, 10-09-09
        IF PAGE.RUNMODAL(0,Vendor) = ACTION::LookupOK THEN
          VALIDATE("Buy-from Vendor No.",Vendor."No.");
      END ELSE BEGIN
        VendorList.LOOKUPMODE(TRUE);
        IF Vendor.GET("Buy-from Vendor No.") THEN
          VendorList.SETRECORD(Vendor);
        IF VendorList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          VendorList.GETRECORD(Vendor);
          VALIDATE("Buy-from Vendor No.",Vendor."No.");
        END;
      END;
    END;

    PROCEDURE SetSkipStrategicPurchaseCheck@1100525007(SetTo@1100525000 : Boolean);
    BEGIN
      SkipStrategicPurchCheck := SetTo;
    END;

    PROCEDURE FillJournalTemplate@1100525008();
    VAR
      lvGenJournalTemplateRec@1100525000 : Record 80;
    BEGIN
      //**4PS
      IF NOT ("Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"]) THEN
        EXIT;

      PurchSetup.GET;
      IF (PurchSetup."Approve Purchase Invoices") THEN
        IF PurchSetup."Determine Approval Template" = PurchSetup."Determine Approval Template"::Vendor THEN BEGIN
          IF "Buy-from Vendor No." <> '' THEN BEGIN
            GetVend("Buy-from Vendor No.");
            Vend.TESTFIELD("Inv.Appr.Journal Template");
            "Inv.Appr.Journal Template" := Vend."Inv.Appr.Journal Template";
          END;
        END ELSE BEGIN
          IF "Shortcut Dimension 1 Code" <> '' THEN BEGIN
            lvGenJournalTemplateRec.SETRANGE("Global Dimension 1 Code","Shortcut Dimension 1 Code");
            lvGenJournalTemplateRec.SETRANGE(Type,lvGenJournalTemplateRec.Type::"Purch.Invoice Approval");
            lvGenJournalTemplateRec.FINDFIRST;
            "Inv.Appr.Journal Template" := lvGenJournalTemplateRec.Name;
          END;
        END;
    END;

    PROCEDURE HandleShipmentInstruction@1100525009(iAction@1100525001 : Integer;VAR varText1@1100525004 : Text[250];VAR varText2@1100525005 : Text[250]);
    VAR
      PurchCommLineRec@1100525000 : Record 43;
      i@1100525003 : Integer;
      LastLine@1100525002 : Integer;
      PurchCode@1100525006 : Code[20];
      MaxLen@1100525007 : Integer;
    BEGIN
      //**4PS
      //db, 22-10-09: M13984
      PurchCode := 'SHIPMINSTR';
      MaxLen := 38;

      IF iAction = 0 THEN BEGIN  //read
        varText1 := '';
        varText2 := '';
        PurchCommLineRec.SETRANGE("Document Type", "Document Type");
        PurchCommLineRec.SETRANGE("No.", "No.");
        PurchCommLineRec.SETRANGE("Document Line No.", 0);
        PurchCommLineRec.SETRANGE(Code, PurchCode);
        IF PurchCommLineRec.FINDSET THEN BEGIN
          REPEAT
            i := i + 1;
            IF i = 1 THEN
              varText1 := COPYSTR(PurchCommLineRec.Comment, 1, MaxLen);
            IF i = 2 THEN
              varText2 := COPYSTR(PurchCommLineRec.Comment, 1, MaxLen);
          UNTIL PurchCommLineRec.NEXT = 0;
        END;
      END;

      IF iAction = 1 THEN BEGIN  //store
        PurchCommLineRec.SETRANGE("Document Type", "Document Type");
        PurchCommLineRec.SETRANGE("No.", "No.");
        PurchCommLineRec.SETRANGE("Document Line No.", 0);
        PurchCommLineRec.SETRANGE(Code, PurchCode);
        PurchCommLineRec.DELETEALL;
        PurchCommLineRec.SETRANGE(Code);
        IF PurchCommLineRec.FINDLAST THEN
          LastLine := PurchCommLineRec."Line No.";
        REPEAT
          i := i + 1;
          PurchCommLineRec.INIT;
          PurchCommLineRec."Document Type" := "Document Type";
          PurchCommLineRec."No." := "No.";
          PurchCommLineRec."Document Line No." := 0;
          PurchCommLineRec."Line No." := LastLine + i;
          PurchCommLineRec.Code := PurchCode;
          PurchCommLineRec.Date := TODAY;
          IF i = 1 THEN
            PurchCommLineRec.Comment := COPYSTR(varText1, 1, MaxLen);
          IF i = 2 THEN
            PurchCommLineRec.Comment := COPYSTR(varText2, 1, MaxLen);
          IF PurchCommLineRec.Comment <> '' THEN
            PurchCommLineRec.INSERT;
        UNTIL i = 2;
      END;
    END;

    PROCEDURE HandlePhoneICM@1100525011(iAction@1100525001 : Integer;VAR varText1@1100525004 : Text[250]);
    VAR
      PurchCommLineRec@1100525000 : Record 43;
      i@1100525003 : Integer;
      LastLine@1100525002 : Integer;
      PurchCode@1100525006 : Code[20];
      MaxLen@1100525007 : Integer;
    BEGIN
      //**4PS
      //db, 26-02-10: M18007
      PurchCode := 'PHONE-ICM';
      MaxLen := 13;

      IF iAction = 0 THEN BEGIN  //read
        varText1 := '';
        PurchCommLineRec.SETRANGE("Document Type", "Document Type");
        PurchCommLineRec.SETRANGE("No.", "No.");
        PurchCommLineRec.SETRANGE("Document Line No.", 0);
        PurchCommLineRec.SETRANGE(Code, PurchCode);
        IF PurchCommLineRec.FINDSET THEN BEGIN
          REPEAT
            i := i + 1;
            IF i = 1 THEN
              varText1 := COPYSTR(PurchCommLineRec.Comment, 1, MaxLen);
          UNTIL PurchCommLineRec.NEXT = 0;
        END;
      END;

      IF iAction = 1 THEN BEGIN  //store
        PurchCommLineRec.SETRANGE("Document Type", "Document Type");
        PurchCommLineRec.SETRANGE("No.", "No.");
        PurchCommLineRec.SETRANGE("Document Line No.", 0);
        PurchCommLineRec.SETRANGE(Code, PurchCode);
        PurchCommLineRec.DELETEALL;
        PurchCommLineRec.SETRANGE(Code);
        IF PurchCommLineRec.FINDLAST THEN
          LastLine := PurchCommLineRec."Line No.";
        REPEAT
          i := i + 1;
          PurchCommLineRec.INIT;
          PurchCommLineRec."Document Type" := "Document Type";
          PurchCommLineRec."No." := "No.";
          PurchCommLineRec."Document Line No." := 0;
          PurchCommLineRec."Line No." := LastLine + i;
          PurchCommLineRec.Code := PurchCode;
          PurchCommLineRec.Date := TODAY;
          IF i = 1 THEN
            PurchCommLineRec.Comment := COPYSTR(varText1, 1, MaxLen);
          IF PurchCommLineRec.Comment <> '' THEN
            PurchCommLineRec.INSERT;
        UNTIL i = 2;
      END;
    END;

    PROCEDURE LookupRelatedOrder@1100525012();
    VAR
      lvPurchHeader@1100525000 : Record 38;
    BEGIN
      //**4PS
      lvPurchHeader.SETCURRENTKEY("Document Type", "Buy-from Vendor No.", "No.");
      lvPurchHeader.SETRANGE("Document Type", lvPurchHeader."Document Type"::Order);
      //setfilter is used in stead of setrange because when Vendor No. or Job No.is empty no filter must be set.
      lvPurchHeader.SETFILTER("Buy-from Vendor No.", "Buy-from Vendor No.");
      lvPurchHeader.SETFILTER("Job No.", "Job No.");
      IF "Related Purch. Order No." = '' THEN //call 30784.sn
        //lvPurchHeader.SETFILTER(Status, '<%1', lvPurchHeader.Status::Closed); // T001324.o
        lvPurchHeader.SETFILTER(Status, '%1|%2', lvPurchHeader.Status::Open, lvPurchHeader.Status::Released); // T001324.n
      lvPurchHeader."Document Type" := lvPurchHeader."Document Type"::Order;
      //call 30784.sn
      //lvPurchHeader."No." := "Related Purch. Order No.";
      lvPurchHeader.SETRANGE("No.", "Related Purch. Order No.");
      IF lvPurchHeader.FINDFIRST THEN;
      lvPurchHeader.SETRANGE("No.");
      //call 30784.en
      IF PAGE.RUNMODAL(PAGE::"Purchase List", lvPurchHeader) = ACTION::LookupOK THEN
        VALIDATE("Related Purch. Order No.", lvPurchHeader."No.");
    END;

    PROCEDURE GetReceiptsRelatedOrderAutomat@1100525010(PurchHeadRec@1100525001 : Record 38) : Boolean;
    VAR
      PurchLineRec@1100525000 : Record 39;
      lvText001@1100525002 : TextConst 'ENU=Get all Receipt Lines of %1 ''%2''?';
      PurchOrder@1100525003 : Record 38;
      PurchasesPayablesSetup@1100528600 : Record 312;
    BEGIN
      //**4PS
      IF (PurchHeadRec."No." = '') OR (PurchHeadRec.Status <> PurchHeadRec.Status::Open) OR
         //(PurchHeadRec."Document Type" <> PurchHeadRec."Document Type"::Invoice) OR  //C006225.o
         (NOT (PurchHeadRec."Document Type" IN
          [PurchHeadRec."Document Type"::Invoice, PurchHeadRec."Document Type"::"Credit Memo"])) OR  //C006225.n
         (PurchHeadRec."Related Purch. Order No." = '') OR
         (NOT "Invoice Lines Input")
      THEN
        EXIT(FALSE);

      PurchLineRec.SETRANGE("Document Type", PurchHeadRec."Document Type");
      PurchLineRec.SETRANGE("Document No.", PurchHeadRec."No.");
      IF NOT PurchLineRec.ISEMPTY THEN  //* Only if no lines present yet.
        EXIT(FALSE);

      //Call19940
      PurchOrder.GET(PurchOrder."Document Type"::Order, PurchHeadRec."Related Purch. Order No.");
      IF PurchOrder."Purchase Order Type" = PurchOrder."Purchase Order Type"::"Blanket Order" THEN
        EXIT(FALSE);
      //

      PurchasesPayablesSetup.GET;
      IF PurchasesPayablesSetup."Allow Post Receipt during Reg." THEN
        IF NOT PurchOrder.ReceivedPurchLinesExist THEN
          IF CONFIRM(Text11012032, FALSE) THEN BEGIN
            COMMIT;
            ShowPurchaseLines(PurchOrder."No.");
          END;

      IF NOT CONFIRM(
        lvText001, FALSE, PurchHeadRec.FIELDCAPTION("Related Purch. Order No."), PurchHeadRec."Related Purch. Order No.")
      THEN
        EXIT(FALSE);

      PurchLineRec."Document Type" := PurchHeadRec."Document Type";
      PurchLineRec."Document No." := PurchHeadRec."No.";
      PurchLineRec."Item Type" := '<' + PurchHeadRec.FIELDNAME("Related Purch. Order No.") + '>'; // Use flowfield to pass indicator
      CODEUNIT.RUN(CODEUNIT::"Purch.-Get Receipt", PurchLineRec);
      EXIT(TRUE);
    END;

    PROCEDURE GetReceivedInvoicedAmounts@1210190000(VAR AmountOrdered@1210190006 : Decimal;VAR AmountOrderedInclVAT@1210190008 : Decimal;VAR AmountReceived@1100525002 : Decimal;VAR AmountInvoiced@1100525003 : Decimal;VAR AmountRecNotInvoiced@1100525005 : Decimal;VAR AmountToInvoice@1100525004 : Decimal;Select@1210190002 : 'All,Project,ServiceOrder';ProjectNo@1210190003 : Code[20];ServiceOrderNo@1210190004 : Code[20]);
    VAR
      PurchLine@1210190007 : Record 39;
      PurchCredMemoHeader@1100525000 : Record 124;
      PurchCredMemoLine@1100525001 : Record 125;
      PurchInvLine@1210190000 : Record 123;
      PurchOrderControlLine@1100409000 : Record 11020221;
      CorrespondingInvLineFound@1210190001 : Boolean;
      CorrAmtInvDiff@1100409001 : Decimal;
    BEGIN
      //**4PS
      //call 26769 several changes
      AmountOrdered := 0;
      AmountOrderedInclVAT := 0;
      AmountReceived := 0;
      AmountInvoiced := 0;
      AmountRecNotInvoiced := 0;
      AmountToInvoice := 0;

      IF "Document Type" <> "Document Type"::Order THEN
        EXIT;

      PurchLine.SETRANGE("Document Type", "Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      CASE Select OF
        Select::All:
          BEGIN
            PurchLine.CALCSUMS(Amount, "Amount Including VAT", "Amnt. Received", "Amnt. Invoiced");
            AmountOrdered := PurchLine.Amount;
            AmountOrderedInclVAT := PurchLine."Amount Including VAT";
            AmountReceived := PurchLine."Amnt. Received";
            AmountInvoiced := PurchLine."Amnt. Invoiced";
          END;
        Select::Project,Select::ServiceOrder:
          BEGIN
            IF Select = Select::Project THEN
              PurchLine.SETRANGE("Job No.", ProjectNo)
            ELSE
              PurchLine.SETRANGE("Service Order No.", ServiceOrderNo);
            IF PurchLine.FINDSET THEN
              REPEAT
                AmountOrdered := AmountOrdered + PurchLine.Amount;
                AmountOrderedInclVAT := AmountOrderedInclVAT + PurchLine."Amount Including VAT";
                AmountReceived := AmountReceived + PurchLine."Amnt. Received";
                AmountInvoiced := AmountInvoiced + PurchLine."Amnt. Invoiced";
              UNTIL PurchLine.NEXT = 0;
          END;
      END;

      //Subtract credit (document copy of invoice)  13508
      PurchCredMemoHeader.SETCURRENTKEY("Related Purch. Order No.");
      PurchCredMemoHeader.SETRANGE("Related Purch. Order No.", "No.");
      IF PurchCredMemoHeader.FINDSET THEN
        REPEAT
          PurchCredMemoLine.SETRANGE("Document No.", PurchCredMemoHeader."No.");
          PurchCredMemoLine.SETFILTER(Type, '<>%1', PurchCredMemoLine.Type::" ");
          PurchCredMemoLine.SETFILTER("Receipt No.", '<>%1', '');  //C-019068.sn
          CASE Select OF
            Select::Project:
              PurchCredMemoLine.SETRANGE("Job No.", ProjectNo);
            Select::ServiceOrder:
              PurchCredMemoLine.SETRANGE("Service Order No.", ServiceOrderNo);
          END;
          PurchCredMemoLine.SETRANGE("Approval Entry", TRUE);
          IF PurchCredMemoLine.ISEMPTY THEN BEGIN  //Do not count if there are approval lines with ReceiptNo filled
            PurchCredMemoLine.SETRANGE("Approval Entry");          //C-019068.en
            PurchCredMemoLine.SETFILTER("Receipt No.", '%1', '');
            IF PurchCredMemoLine.FINDSET THEN
              REPEAT
                //Call 23615.sn
                CorrespondingInvLineFound := FALSE;
                IF PurchCredMemoHeader."Applies-to Doc. Type" = PurchCredMemoHeader."Applies-to Doc. Type"::Invoice THEN BEGIN
                  PurchInvLine.SETRANGE("Document No.", PurchCredMemoHeader."Applies-to Doc. No.");
                  PurchInvLine.SETRANGE(Type, PurchCredMemoLine.Type);
                  PurchInvLine.SETRANGE("No.", PurchCredMemoLine."No.");
                  CASE Select OF
                    Select::Project:
                      PurchInvLine.SETRANGE("Job No.", PurchCredMemoLine."Job No.");
                    Select::ServiceOrder:
                      PurchInvLine.SETRANGE("Service Order No.", PurchCredMemoLine."Service Order No.");
                  END;
                  PurchInvLine.SETRANGE("Shortcut Dimension 2 Code", PurchCredMemoLine."Shortcut Dimension 2 Code");
                  PurchInvLine.SETRANGE("Direct Unit Cost", PurchCredMemoLine."Direct Unit Cost");
                  CorrespondingInvLineFound := NOT PurchInvLine.ISEMPTY;
                END;
                IF CorrespondingInvLineFound THEN
                //
                  AmountInvoiced := AmountInvoiced - PurchCredMemoLine.Amount;
              UNTIL PurchCredMemoLine.NEXT = 0;
          END; //C-019068.n
        UNTIL PurchCredMemoHeader.NEXT = 0;

      //AmountRecNotInvoiced := AmountReceived - AmountInvoiced;  //C002220.o
      //C002220.sn
      PurchOrderControlLine.SETRANGE("Order No.", "No.");
      CASE Select OF
        Select::Project:
          PurchOrderControlLine.SETRANGE("Project No.", ProjectNo);
        Select::ServiceOrder:
          PurchOrderControlLine.SETRANGE("Service Order No.", ServiceOrderNo);
      END;
      IF PurchOrderControlLine.FINDSET THEN BEGIN
        REPEAT
          AmountRecNotInvoiced := AmountRecNotInvoiced + PurchOrderControlLine."Amt. Rcd. Not Invoiced";
          IF PurchOrderControlLine."Line Type" = PurchOrderControlLine."Line Type"::Correction THEN
            CorrAmtInvDiff := CorrAmtInvDiff + PurchOrderControlLine."Amt. Rcd. Not Invoiced";
        UNTIL PurchOrderControlLine.NEXT = 0;
      END;
      //C002220.en
      IF Status < Status::Closed THEN
        AmountToInvoice := AmountOrdered - AmountInvoiced + CorrAmtInvDiff;  //C002220.c
    END;

    PROCEDURE UpdateConsentLines@1100525014(UpdateByPhase@1100525000 : Boolean);
    VAR
      ConsentLinesMustBeUpdated@1100528400 : Boolean;
      DocType@1100528401 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';
    BEGIN
      //**4PS
      IF NOT ConsentRec.READPERMISSION THEN
        EXIT;

      PurchSetup.GET;
      CASE "Document Type" OF
        "Document Type"::Order:
          IF PurchSetup."Use Consent Purchase Orders" THEN
            IF (("Purchase Plan" <> '') AND UpdateByPhase) OR
               (("Purchase Plan" = '') AND (Status = Status::Released))
            THEN BEGIN
              DeleteConsentLines(FALSE);
              ConsentManCU.HandlePurchaseHeader(Rec, DocType::Order, FALSE);
              ConsentManCU.AutoConsentPurchaseHeader(Rec);
            END;
        "Document Type"::Quote:
          IF PurchSetup."Use Consent Purchase Quotes" THEN
            IF (Status = Status::Released) AND
               NOT UpdateByPhase
            THEN BEGIN
              DeleteConsentLines(FALSE);
              ConsentManCU.HandlePurchaseHeader(Rec, DocType::"Purchase Quote", FALSE);
              ConsentManCU.AutoConsentPurchaseHeader(Rec);
            END;
      END;
    END;

    PROCEDURE DeleteConsentLines@1100525015(lvManualTooBln@1100525000 : Boolean);
    BEGIN
      //**4PS
      IF NOT ("Document Type" IN ["Document Type"::Quote, "Document Type"::Order]) THEN
        EXIT;

      CASE "Document Type" OF
        "Document Type"::Quote:
          ConsentRec.SETRANGE("Document Type", ConsentRec."Document Type"::"Purchase Quote");
        "Document Type"::Order:
          ConsentRec.SETRANGE("Document Type", ConsentRec."Document Type"::Order);
      END;
      ConsentRec.SETRANGE("Document No.", "No.");

      IF NOT lvManualTooBln THEN
        ConsentRec.SETRANGE(Manual,FALSE);

      IF ConsentRec.FINDSET(FALSE,FALSE) THEN
        ConsentRec.DELETEALL;
    END;

    PROCEDURE CreateDocPhases@1100525016();
    VAR
      PurchPlanMgt@1100525001 : Codeunit 11012242;
    BEGIN
      //**4PS
      PurchPlanMgt.CreateDocPhases(Rec);
    END;

    PROCEDURE FinishPhase@1100525013(CurrField@1100525001 : Integer);
    VAR
      PurchPlanMgt@1100525000 : Codeunit 11012242;
    BEGIN
      //**4PS
      PurchPlanMgt.FinishPhaseCheck(Rec, CurrField);
    END;

    PROCEDURE FinishManualPhase@1100525018();
    BEGIN
      //**4PS
      IF NOT CONFIRM(Text11012024, TRUE) THEN
        EXIT;

      FinishPhase(-1);
    END;

    PROCEDURE OnePhaseBack@1210190011();
    VAR
      PurchPlanMgt@1210190000 : Codeunit 11012242;
    BEGIN
      //**4PS
      IF NOT CONFIRM(Text11012027, FALSE) THEN
        EXIT;

      PurchPlanMgt.OnePhaseBack(Rec);
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Shortcut Dimension 1 Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::"Purchase Header");
      IF Dimension1Code <> '' THEN
        "Shortcut Dimension 1 Code" := Dimension1Code;

      IF "Shortcut Dimension 1 Code" <> '' THEN BEGIN
        SkipModify := TRUE;
        VALIDATE("Shortcut Dimension 1 Code");
        SkipModify := FALSE;
      END;
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(38) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 38');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Purchase Header", "Shortcut Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Shortcut Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Shortcut Dimension 1 Code");
    END;

    PROCEDURE GetDefaultPurchasePlan@1100525017();
    BEGIN
      //**4PS
      PurchSetup.GET;
      CASE "Document Type" OF
        "Document Type"::Quote:
          VALIDATE("Purchase Plan", PurchSetup."Default Purchase Plan Quote");
        "Document Type"::Order:
          CASE "Purchase Order Type" OF
            "Purchase Order Type"::"Purchase Order":
              IF "ICM Status" = "ICM Status"::Manual THEN //call 28830
                VALIDATE("Purchase Plan", PurchSetup."Default Purchase Plan Order")
              ELSE
                VALIDATE("Purchase Plan", PurchSetup."Default Purchase Plan ICM Ord."); //call 28830
            "Purchase Order Type"::"Blanket Order":
              VALIDATE("Purchase Plan", PurchSetup."Default Purchase Plan Blanket");
            "Purchase Order Type"::"Return Order":
              VALIDATE("Purchase Plan", PurchSetup."Default Purchase Plan Return");
          END;
      END;
    END;

    LOCAL PROCEDURE DetermineContractApplicable@1100525019(Vendor@1100525000 : Record 23) : Boolean;
    BEGIN
      //**4PS.sn
      PurchSetup.GET;
      EXIT(
        PurchSetup."On Hold No Contract" AND
        Vendor."On Hold No Contract" AND
        ("Document Type" = "Document Type"::Order));
      //**4PS.en
    END;

    PROCEDURE LetterOfCreditIsApplicable@1100525020() : Boolean;
    VAR
      PurchaseLine@1100525000 : Record 39;
    BEGIN
      //**4PS.sn
      IF "Document Type" <> "Document Type"::Order THEN
        EXIT;

      PurchSetup.GET;
      IF (NOT PurchSetup."On Hold No Letter of Credit") OR
         (PurchSetup."Min. Amt. Letter of Credit" = 0)
      THEN
        EXIT;

      PurchaseLine.SETRANGE("Document Type", "Document Type"::Order);
      PurchaseLine.SETRANGE("Document No.", "No.");
      IF NOT PurchaseLine.FINDFIRST THEN
        EXIT;

      PurchaseLine.CALCFIELDS("Balance Excl. VAT");
      EXIT(PurchaseLine."Balance Excl. VAT" >= PurchSetup."Min. Amt. Letter of Credit");
      //**4PS.en
    END;

    PROCEDURE DetermineOnHoldCode@1100525021() : Code[3];
    VAR
      RelatedPOHeader@1100525000 : Record 38;
    BEGIN
      //**4PS.sn

      //Call T005291 - DP00561 sn
      IF ("Document Type" = "Document Type"::Order) AND Receive AND Invoice THEN BEGIN
        EXIT(DetermineOnHoldCodeForInvoice("On Hold"));
      END;
      //Call T005291 - DP00561 en

      IF "Document Type" <> "Document Type"::Invoice THEN
        EXIT("On Hold");

      IF RelatedPOHeader.GET("Document Type"::Order, "Related Purch. Order No.") THEN
        EXIT(RelatedPOHeader.DetermineOnHoldCodeForInvoice("On Hold"));

      EXIT("On Hold");
      //**4PS.en
    END;

    PROCEDURE DetermineOnHoldCodeForInvoice@1100525022(CurrentOnHoldCode@1100525000 : Code[3]) : Code[3];
    VAR
      OnHoldCodeDefault@1100528401 : Code[3];
    BEGIN
      //**4PS
      PurchSetup.GET;

      // dp00206.sn
      IF CurrentOnHoldCode <> '' THEN
        IF (CurrentOnHoldCode <> PurchSetup."On Hold Code No Contract") AND
           (CurrentOnHoldCode <> PurchSetup."On Hold Code No Letter of Cr.") THEN
         EXIT(CurrentOnHoldCode);
      // dp00206.en

      //C008247.sn
      OnHoldCodeDefault := DetermineOnHoldCodeDefault;
      IF OnHoldCodeDefault <> '' THEN
        EXIT(OnHoldCodeDefault);
      //C008247.en

      EXIT(CurrentOnHoldCode);
    END;

    PROCEDURE DetermineOnHoldCodeDefault@1100528800() : Code[3];
    VAR
      OnHoldCodeNoContract@1100528400 : Code[3];
      OnHoldCodeNoLetterOfCr@1100528401 : Code[3];
    BEGIN
      //**4PS
      //dp00206

      //C008247.sn
      OnHoldCodeNoContract := DetermineOnHoldNoContract;
      IF OnHoldCodeNoContract <> '' THEN
        EXIT(OnHoldCodeNoContract);

      OnHoldCodeNoLetterOfCr := DetermineOnHoldNoLetterOfCr;
      IF OnHoldCodeNoLetterOfCr <> '' THEN
        EXIT(OnHoldCodeNoLetterOfCr);
      //C008247.en

      EXIT('');
    END;

    PROCEDURE DetermineOnHoldNoContract@1100528402() : Code[3];
    BEGIN
      //**4PS
      //C008247
      PurchSetup.GET;

      IF PurchSetup."On Hold No Contract" AND
         "Contract Applicable" AND
         ("Return Date Signed Contract" = 0D)
      THEN BEGIN
        PurchSetup.TESTFIELD("On Hold Code No Contract");
        EXIT(PurchSetup."On Hold Code No Contract");
      END;
    END;

    PROCEDURE DetermineOnHoldNoLetterOfCr@1100528403() : Code[3];
    BEGIN
      //**4PS
      //C008247
      PurchSetup.GET;

      IF LetterOfCreditIsApplicable AND
         ("Return Date Letter of Credit" = 0D)
      THEN BEGIN
        PurchSetup.TESTFIELD("On Hold Code No Letter of Cr.");
        EXIT(PurchSetup."On Hold Code No Letter of Cr.");
      END;
    END;

    PROCEDURE ChangeProjectInWarrantyData@1210190002();
    VAR
      WarrantyDataPurchaseOrder@1210190000 : Record 11020665;
    BEGIN
      //**4PS.n  RFC 337
      WarrantyDataPurchaseOrder.SETRANGE("Document Type","Document Type");
      WarrantyDataPurchaseOrder.SETRANGE("Document No.","No.");

      IF WarrantyDataPurchaseOrder.FINDSET(TRUE) THEN
        REPEAT
          IF WarrantyDataPurchaseOrder."Job No." <> "Job No." THEN BEGIN
            WarrantyDataPurchaseOrder."Job No." := "Job No.";
            WarrantyDataPurchaseOrder.MODIFY(TRUE);
          END;
        UNTIL WarrantyDataPurchaseOrder.NEXT = 0;
    END;

    PROCEDURE GetAddressFromSalesOrder@1210190005(SalesHeader@1210190000 : Record 36);
    BEGIN
      //**4PS call 28060
      "Received on Project" := '';
      Deliver := Deliver::" ";
      "Ship To Location" := '';
      "Ship-to Code" := SalesHeader."Ship-to Code";
      "Ship-to Name" := SalesHeader."Ship-to Name";
      "Ship-to Name 2" := SalesHeader."Ship-to Name 2";
      "Ship-to Address" := SalesHeader."Ship-to Address";
      "Ship-to Address 2" := SalesHeader."Ship-to Address 2";
      "Ship-to City" := SalesHeader."Ship-to City";
      "Ship-to Post Code" := SalesHeader."Ship-to Post Code";
      "Ship-to County" := SalesHeader."Ship-to County";
      "Ship-to Country/Region Code" := SalesHeader."Ship-to Country/Region Code";
      "Ship-to Contact" := SalesHeader."Ship-to Contact";
    END;

    PROCEDURE SendOrderElectronic@1210190009(SelectSendOption@1100528701 : Boolean);
    VAR
      PurchaseHeader@1210190002 : Record 38;
      Vendor@1210190001 : Record 23;
      SelectSendOptionPurchOrder@1210190004 : Page 11125021;
      CreateICMFiles@1210190000 : Report 11012308;
      CreateICKFiles@1100528700 : Report 11012323;
      SendPurchOrderGS1@1210190003 : Report 11012480;
      GS1Interface@1100525000 : Codeunit 11012480;
      DocumentPrint@1100528404 : Codeunit 229;
      ChangeStatus@1100528403 : 'None,Released,Closed';
      DirectPostOrder@1100528402 : 'According to Vendor,Not';
      IsQuote@1100528400 : Boolean;
      ElectronicOrderType@1100528401 : Integer;
    BEGIN
      //**4PS kzwerver, 110623, n, #RfC Electr. Purchase Order
      //kzwerver, 110923, c, #29344
      //IsQuote := (PurchaseHeader."Document Type" = PurchaseHeader."Document Type"::Quote);

      PurchaseHeader.COPY(Rec);
      PurchaseHeader.SETRECFILTER;
      IsQuote := (PurchaseHeader."Document Type" = PurchaseHeader."Document Type"::Quote);  //db, 14-02-14

      IF NOT SelectSendOption AND
         IsQuote AND
         (PurchaseHeader."Buy-from Vendor No." = '')
      THEN
        // When Buy-from Vendor No. = '' purchase quotes cannot be sent by ICM/ICF or GS1, therefore
        // E-mail is the only possibility.
        // If no E-Mail address can be found, an error message will be given by report Purchase - E-Mail Quote.
        ElectronicOrderType := Vendor."Electronic Order Type"::"E-mail"
      ELSE BEGIN
        Vendor.GET(PurchaseHeader."Buy-from Vendor No.");
        ElectronicOrderType := Vendor."Electronic Order Type";

        IF (NOT Vendor.PurchaseOrdersAreSentByEMail AND
           (Vendor."Electronic Order Type" <> Vendor."Electronic Order Type"::"ICM/ICF") AND
           (Vendor."Electronic Order Type" <> Vendor."Electronic Order Type"::"GS1 (SOAP)") AND
           (Vendor."Electronic Order Type" <> Vendor."Electronic Order Type"::"GS1 (XML-RPC)") AND
           (Vendor."Electronic Order Type" <> Vendor."Electronic Order Type"::"GS1 INSBOU"))
        THEN BEGIN
          IF GUIALLOWED THEN MESSAGE(Text11012026,
            Vendor.TABLECAPTION, Vendor.FIELDCAPTION("Electronic Order Type"),
            Vendor."Electronic Order Type");
          ERROR('');
        END;
      END;

      IF SelectSendOption THEN BEGIN
        IF NOT IsQuote THEN BEGIN
          SelectSendOptionPurchOrder.SetSelectICM(ElectronicOrderType = Vendor."Electronic Order Type"::"ICM/ICF");
          SelectSendOptionPurchOrder.SetSelectEmail(OrderIsSentByEMail(ElectronicOrderType));
        END ELSE BEGIN
          SelectSendOptionPurchOrder.SetSelectICK(ElectronicOrderType = Vendor."Electronic Order Type"::"ICM/ICF");
          // SelectSendOptionPurchOrder.SetSelectEmail(FALSE); // 28285.o
          SelectSendOptionPurchOrder.SetSelectEmail(OrderIsSentByEMail(ElectronicOrderType));
      // 28285.n
        END;
        SelectSendOptionPurchOrder.SetSelectGS1SOAP(ElectronicOrderType = Vendor."Electronic Order Type"::"GS1 (SOAP)");
        SelectSendOptionPurchOrder.SetSelectGS1XMLRPC(ElectronicOrderType = Vendor."Electronic Order Type"::"GS1 (XML-RPC)");
        SelectSendOptionPurchOrder.SetSelectGS1INSBOU(ElectronicOrderType = Vendor."Electronic Order Type"::"GS1 INSBOU");

        IF (SelectSendOptionPurchOrder.RUNMODAL <> ACTION::LookupOK) THEN
          EXIT;
      END;

      IF ((NOT SelectSendOption) AND OrderIsSentByEMail(ElectronicOrderType)) OR
         (SelectSendOptionPurchOrder.GetSelectEmail)
      THEN BEGIN
        // 28285.sn
        IF IsQuote THEN
          DocumentPrint.EmailPurchHeader(
            PurchaseHeader, FALSE, ChangeStatus::None, DirectPostOrder::"Not", FALSE, FALSE)
        ELSE
        // 28285.en
          REPORT.RUNMODAL(REPORT::"Purchase - E-Mail Order", TRUE, FALSE, PurchaseHeader);
      END;

      IF ((NOT SelectSendOption) AND (NOT IsQuote) AND (ElectronicOrderType = Vendor."Electronic Order Type"::"ICM/ICF")) OR
         (SelectSendOptionPurchOrder.GetSelectICM)
      THEN BEGIN
        IF PurchaseHeader."ICM Login Code" = '' THEN
          IF GUIALLOWED THEN ERROR(Text11012025);

        CreateICMFiles.SetSendToVendor(TRUE);
        PurchaseHeader.SETRANGE("Buy-from Vendor No.", PurchaseHeader."Buy-from Vendor No.");
        PurchaseHeader.SETRANGE("ICM Status", PurchaseHeader."ICM Status"::Create);
        CreateICMFiles.SETTABLEVIEW(PurchaseHeader);
        CreateICMFiles.RUNMODAL;
      END;

      IF ((NOT SelectSendOption) AND (IsQuote) AND (ElectronicOrderType = Vendor."Electronic Order Type"::"ICM/ICF")) OR
         (SelectSendOptionPurchOrder.GetSelectICK)
      THEN BEGIN
        IF PurchaseHeader."ICM Login Code" = '' THEN
          IF GUIALLOWED THEN ERROR(Text11012025);

        PurchaseHeader.SETRANGE("Buy-from Vendor No.", PurchaseHeader."Buy-from Vendor No.");
        PurchaseHeader.SETRANGE("ICM Status", PurchaseHeader."ICM Status"::Create);
        CreateICKFiles.SETTABLEVIEW(PurchaseHeader);
        CreateICKFiles.RUNMODAL;
      END;

      IF ((NOT SelectSendOption) AND (ElectronicOrderType = Vendor."Electronic Order Type"::"GS1 (SOAP)")) OR
         (SelectSendOptionPurchOrder.GetSelectGS1SOAP)
      THEN BEGIN
        SendPurchOrderGS1.SetIsSOAP;
        SendPurchOrderGS1.SETTABLEVIEW(PurchaseHeader);
        SendPurchOrderGS1.RUNMODAL;
      END;

      IF ((NOT SelectSendOption) AND (ElectronicOrderType = Vendor."Electronic Order Type"::"GS1 (XML-RPC)")) OR
         (SelectSendOptionPurchOrder.GetSelectGS1XMLRPC)
      THEN BEGIN
        SendPurchOrderGS1.SetIsRPC;
        SendPurchOrderGS1.SETTABLEVIEW(PurchaseHeader);
        SendPurchOrderGS1.RUNMODAL;
      END;

      IF ((NOT SelectSendOption) AND (ElectronicOrderType = Vendor."Electronic Order Type"::"GS1 INSBOU")) OR
         (SelectSendOptionPurchOrder.GetSelectGS1INSBOU)
      THEN BEGIN
        IF (PurchaseHeader.COUNT <> 1) THEN
          ERROR(Text11012036, PurchaseHeader.TABLECAPTION);
        GS1Interface.SendPuchaseOder(PurchaseHeader."Document Type", PurchaseHeader."No.");
      END;
    END;

    LOCAL PROCEDURE OrderIsSentByEMail@1100528411(ElectronicOrderType@1100528400 : Integer) : Boolean;
    VAR
      Vendor@1100528401 : Record 23;
    BEGIN
      //**4PS C020365
      EXIT(
        (ElectronicOrderType = Vendor."Electronic Order Type"::"E-mail") OR
        (ElectronicOrderType = Vendor."Electronic Order Type"::"E-Mail Contact Person"));
    END;

    PROCEDURE HasDocumentLinks@1100528400() : Boolean;
    VAR
      DocumentLinkMgt@1100525000 : Codeunit 11012401;
      RecRef@1100525001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      EXIT(DocumentLinkMgt.EntityHasDocumentLinks(RecRef));
    END;

    PROCEDURE CheckIfGS1ErrorLogsExist@1100528300() : Boolean;
    VAR
      GS1ErrorLog@1210190000 : Record 11072078;
    BEGIN
      //**4PS
      GS1ErrorLog.SETCURRENTKEY("Document Type", "Document No.", "Line No.");
      GS1ErrorLog.SETRANGE("Document Type", "Document Type");
      GS1ErrorLog.SETRANGE("Document No.", "No.");
      EXIT(NOT GS1ErrorLog.ISEMPTY);
    END;

    LOCAL PROCEDURE UpdateOnHoldOfRelatedInvoices@1100528401(OnHoldCodeToBeReplaced@1100528403 : Code[3]);
    VAR
      lPurchInvHeader@1100528400 : Record 122;
      NewOnHoldCode@1100528402 : Code[3];
    BEGIN
      //**4PS
      lPurchInvHeader.SETCURRENTKEY("Related Purch. Order No.");
      lPurchInvHeader.SETRANGE("Related Purch. Order No.", "No.");
      //PurchInvHeader.SETRANGE("On Hold", OnHoldCodeToBeReplaced);  // dp00206.o
      IF lPurchInvHeader.FINDSET THEN BEGIN
        // Call C010724.so
        //// dp00206.sn
        //IF (PurchInvHeader."On Hold" <> PurchSetup."On Hold Code No Contract") AND
        //   (PurchInvHeader."On Hold" <> PurchSetup."On Hold Code No Letter of Cr.") AND
        //   (PurchInvHeader."On Hold" <> '')
        //THEN
        //  EXIT;
        // dp00206.en
        // Call C010724.eo
        REPEAT
          // Call C010724.sn
          IF NOT ((lPurchInvHeader."On Hold" <> PurchSetup."On Hold Code No Contract") AND
                  (lPurchInvHeader."On Hold" <> PurchSetup."On Hold Code No Letter of Cr.") AND
                  (lPurchInvHeader."On Hold" <> ''))
          THEN BEGIN // Call C010724.en
            NewOnHoldCode := DetermineOnHoldCodeForInvoice('');
            IF NewOnHoldCode <> lPurchInvHeader."On Hold" THEN
              lPurchInvHeader.UpdateOnHoldOfPurchaseInvoice(lPurchInvHeader."No.", NewOnHoldCode, TRUE); //C-026615 arg added
          END;  // Call C010724 new
        UNTIL lPurchInvHeader.NEXT = 0;
      END;
    END;

    PROCEDURE EditDocuments@1100528702(DocumentType@1100528702 : Option;DocumentTemplateTypeFilter@1210190003 : Text[250];ContactNo@1210190004 : Code[20];ContactPersonNo@1210190005 : Code[20];SendMail@1210190002 : Boolean;Recipient@1100528700 : Text[120]);
    VAR
      PurchaseLine@1100528701 : Record 39;
      Job@1100528704 : Record 11072003;
      ServiceOrder@1100528706 : Record 11012823;
      ResponsibilityCenter@1100528705 : Record 5714;
      ProjectNo@1100528703 : Code[20];
      DocumentMailing@1210190000 : Codeunit 11012278;
      RecRef@1100525000 : RecordRef;
      DocumentLinkRIDs@1100525001 : ARRAY [5] OF RecordID;
    BEGIN
      //**4PS
      RecRef.GETTABLE(Rec);
      DocumentLinkRIDs[1] := RecRef.RECORDID;

      ProjectNo := "Job No.";
      IF ProjectNo = '' THEN BEGIN
        PurchaseLine.SETRANGE("Document Type", DocumentType);
        PurchaseLine.SETRANGE("Document No.", "No.");
        IF PurchaseLine.FINDSET THEN
          REPEAT
            ProjectNo := PurchaseLine."Job No.";
          UNTIL (PurchaseLine.NEXT = 0) OR (ProjectNo <> '');
      END;

      IF ProjectNo <> '' THEN BEGIN
        Job.GET(ProjectNo);
        RecRef.GETTABLE(Job);
        DocumentLinkRIDs[2] := RecRef.RECORDID;
      END ELSE BEGIN
        IF "Service Order No." <> '' THEN BEGIN
          ServiceOrder.GET("Service Order No.");
          RecRef.GETTABLE(ServiceOrder);
          DocumentLinkRIDs[2] := RecRef.RECORDID;
        END;
      END;

      IF ResponsibilityCenter.GET("Responsibility Center") THEN BEGIN
        RecRef.GETTABLE(ResponsibilityCenter);
        DocumentLinkRIDs[3] := RecRef.RECORDID;
      END;

      DocumentMailing.EditDocuments(
        DocumentTemplateTypeFilter, DocumentLinkRIDs,
        "Shortcut Dimension 1 Code", ContactNo, ContactPersonNo, SendMail, Recipient);
    END;

    PROCEDURE HandleSelectedBankAccount@1100409000(VAR PurchaseHeader@1100409002 : Record 38;BankAccountNo@1100409000 : Text[30]);
    VAR
      VendorBankAccount@1100409001 : Record 288;
      Vendor@1100409004 : Record 23;
      TempVendor@1100409003 : TEMPORARY Record 23;
      LookForIBAN@1100529100 : Boolean;
      ValidateVendor@1100529101 : Boolean;
    BEGIN
      //**4PS call C000319
      IF BankAccountNo = '' THEN
        EXIT;
      VendorBankAccount.SETCURRENTKEY("Bank Account No.");
      VendorBankAccount.SETRANGE("Bank Account No.", BankAccountNo);

      //**4PS SR 31-01-2013
      IF VendorBankAccount.ISEMPTY THEN BEGIN
        LookForIBAN := TRUE;
        VendorBankAccount.SETCURRENTKEY(IBAN);
        VendorBankAccount.SETRANGE(IBAN, BankAccountNo);
        VendorBankAccount.SETRANGE("Bank Account No.");
      END;
      //**4PS SR 31-01-2013
      VendorBankAccount.FINDSET;
      REPEAT
        IF Vendor.GET(VendorBankAccount."Vendor No.") THEN BEGIN
          IF Vendor."Pay-to Vendor No." = '' THEN BEGIN
            TempVendor := Vendor;
            IF TempVendor.INSERT THEN;
          END;
          Vendor.RESET;
          Vendor.SETRANGE("Pay-to Vendor No.", VendorBankAccount."Vendor No.");
          IF Vendor.FINDSET THEN
            REPEAT
              TempVendor := Vendor;
              IF TempVendor.INSERT THEN;
            UNTIL Vendor.NEXT = 0;
        END;
      UNTIL VendorBankAccount.NEXT = 0;

      CASE TempVendor.COUNT OF
        0: MESSAGE(Text11012031, BankAccountNo);
        1: ValidateVendor := TRUE;
        ELSE
          IF TempVendor.COUNT > 1 THEN BEGIN
            MESSAGE(STRSUBSTNO(Text11012028, BankAccountNo));
            ValidateVendor := PAGE.RUNMODAL(0,TempVendor) = ACTION::LookupOK;
          END;
      END;

      IF ValidateVendor THEN BEGIN
        PurchaseHeader.VALIDATE("Buy-from Vendor No.", TempVendor."No.");
        // C000894.sn
        IF (TempVendor."Pay-to Vendor No." <> '') AND (TempVendor."Pay-to Vendor No." <> TempVendor."No.") THEN
          VendorBankAccount.SETRANGE("Vendor No.", TempVendor."Pay-to Vendor No.")
        ELSE
          VendorBankAccount.SETRANGE("Vendor No.", TempVendor."No.");
        //**4PS SR 31-01-2013
        IF LookForIBAN THEN
          VendorBankAccount.SETRANGE(IBAN, BankAccountNo)
        ELSE
          VendorBankAccount.SETRANGE("Bank Account No.", BankAccountNo);
        //**4PS SR 31-01-2013
        IF VendorBankAccount.FINDFIRST THEN;
        // C000894.sn
      END;
    END;

    PROCEDURE DirectPosting@1100528600();
    VAR
      lvPurchHeaderRec@1100485000 : Record 38;
      lvVendorRec@1100485001 : Record 23;
      lvPurchPostCU@1100485003 : Codeunit 90;
    BEGIN
      //**4PS
      lvPurchHeaderRec.COPY(Rec);
      IF lvPurchHeaderRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF lvPurchHeaderRec.Status <> lvPurchHeaderRec.Status::Closed THEN BEGIN  //16693
            IF lvVendorRec.GET(lvPurchHeaderRec."Buy-from Vendor No.") THEN BEGIN
            //IF lvVendorRec."Direct Receipt" = lvVendorRec."Direct Receipt"::Yes THEN BEGIN //call13531
              IF lvVendorRec."Direct Post Order ICM" THEN BEGIN
                lvPurchHeaderRec.Receive := TRUE;
                CLEAR(lvPurchPostCU);
                lvPurchPostCU.SetNoErrorNothingToPost(TRUE);
                lvPurchPostCU.RUN(lvPurchHeaderRec);
              END;
            //END;
            END;
          END;
        UNTIL lvPurchHeaderRec.NEXT = 0;
      END;
    END;

    PROCEDURE ShowPurchOrderDetails@1100409001();
    VAR
      PurchaseLineDetail@1100409000 : Record 11020660;
    BEGIN
      //**4PS  #C001139
      CASE "Document Type" OF
        "Document Type"::Invoice,
        "Document Type"::"Credit Memo":
          PurchaseLineDetail.ShowList(PurchaseLineDetail."Line Type"::"Purchase Order", "Related Purch. Order No.");
      END;
    END;

    PROCEDURE CreateExtDocument@1100409002(DocumentType@1100409002 : Option;DocumentTypeCode@1100409001 : Code[20];ContactNo@1210190004 : Code[20];ContactPersonNo@1210190005 : Code[20];DocGroup@1100409003 : Code[20]) DocumentNo : Code[20];
    VAR
      PurchaseLine@1100528701 : Record 39;
      Job@1100528704 : Record 11072003;
      ServiceOrder@1100528706 : Record 11012823;
      ResponsibilityCenter@1100528705 : Record 5714;
      ProjectNo@1100528703 : Code[20];
      RecRef@1100525000 : RecordRef;
      DocumentLinkRIDs@1100525001 : ARRAY [5] OF RecordID;
    BEGIN
      //**4PS.D3 -  Must go CU
      RecRef.GETTABLE(Rec);
      DocumentLinkRIDs[1] := RecRef.RECORDID;

      ProjectNo := "Job No.";
      IF ProjectNo = '' THEN BEGIN
        PurchaseLine.SETRANGE("Document Type", DocumentType);
        PurchaseLine.SETRANGE("Document No.", "No.");
        IF PurchaseLine.FINDSET THEN
          REPEAT
            ProjectNo := PurchaseLine."Job No.";
          UNTIL (PurchaseLine.NEXT = 0) OR (ProjectNo <> '');
      END;

      IF ProjectNo <> '' THEN BEGIN
        Job.GET(ProjectNo);
        RecRef.GETTABLE(Job);
        DocumentLinkRIDs[2] := RecRef.RECORDID;
      END ELSE BEGIN
        IF "Service Order No." <> '' THEN BEGIN
          ServiceOrder.GET("Service Order No.");
          RecRef.GETTABLE(ServiceOrder);
          DocumentLinkRIDs[2] := RecRef.RECORDID;
        END;
      END;

      IF ResponsibilityCenter.GET("Responsibility Center") THEN BEGIN
        RecRef.GETTABLE(ResponsibilityCenter);
        DocumentLinkRIDs[3] := RecRef.RECORDID;
      END;

      IF FORMAT(DocumentLinkRIDs[1]) = '' THEN
        ERROR('');
    END;

    PROCEDURE FillReferenceICM@1210190017() : Text[35];
    VAR
      Employee@11012000 : Record 5200;
      InitSender@11012001 : Text[30];
      InitEditor@11012002 : Text[30];
      DocumentLinkMgt@1199198002 : Codeunit 11012401;
      DocumentLink@1199198000 : Record 11012747;
      RecRef@1199198001 : RecordRef;
      DocumentDescription@1199198003 : Text[30];
      ServiceOrder@1100525000 : Record 11012823;
    BEGIN
      //**4PS
      IF "Document Type" <> "Document Type"::Order THEN
        EXIT;

      PurchSetup.GET;
      IF PurchSetup."Reference (ICM) Based on" <> PurchSetup."Reference (ICM) Based on"::Formula THEN
        EXIT;

      CASE TRUE OF
          ((CurrFieldNo = FIELDNO("No.")) AND (STRPOS(PurchSetup."General Reference ICM", '%1') <>0)),
          ((CurrFieldNo = FIELDNO("Job No.")) AND (STRPOS(PurchSetup."General Reference ICM", '%2') <>0)),
          ((CurrFieldNo = FIELDNO("Service Order No.")) AND (STRPOS(PurchSetup."General Reference ICM", '%3') <>0)),
          ((CurrFieldNo = FIELDNO("Purchaser Code")) AND (STRPOS(PurchSetup."General Reference ICM", '%4') <>0)),
          ((CurrFieldNo = FIELDNO("Name Purchaser")) AND (STRPOS(PurchSetup."General Reference ICM", '%5') <>0)),
          ((CurrFieldNo = FIELDNO("Project Description")) AND (STRPOS(PurchSetup."General Reference ICM", '%6') <>0)),
          ((CurrFieldNo = FIELDNO("Service Order Description")) AND (STRPOS(PurchSetup."General Reference ICM", '%7') <>0)),
          (CurrFieldNo = 0):
          BEGIN

            IF (STRPOS(PurchSetup."General Reference ICM", '%9') <>0) AND ("Service Order No." <> '') THEN //Call C028250 n
              ServiceOrder.GET("Service Order No.");                                                       //Call C028250 n

            CALCFIELDS("Name Purchaser","Project Description","Service Order Description");
            "Reference (ICM)" := COPYSTR(
              STRSUBSTNO(PurchSetup."General Reference ICM",
                "No.",                                       //%1
                "Job No.",                                   //%2
                "Service Order No.",                         //%3
                "Purchaser Code",                            //%4
                "Name Purchaser",                            //%5
                "Project Description",                       //%6
                "Service Order Description",                 //%7
                GetNameAbbrevationEmployee,                  //%8
                ServiceOrder.Name),                          //%9                                          //Call C028250 n
                1,
                MAXSTRLEN("Reference (ICM)"));
          END;
      END;
    END;

    PROCEDURE LastThreePositionsOK@1100529102(AccountNo@1100529100 : Text[50]) : Boolean;
    VAR
      CheckItTxt@1100529101 : Text[3];
    BEGIN
      //**4PS dp00279
      IF STRLEN(AccountNo) > 2 THEN BEGIN
        CheckItTxt := COPYSTR(AccountNo, STRLEN(AccountNo) - 2 , 3);
        IF "Bank No. Check" = CheckItTxt THEN
          EXIT(TRUE);
      END;
    END;

    PROCEDURE GetPurchOrderPlantOrderNo@1100529000(PurchOrderNo@1100529001 : Code[20]) : Code[20];
    VAR
      PurchLine@1100529000 : Record 39;
    BEGIN
      //DP00241 (24683)
      IF PurchOrderNo <> '' THEN BEGIN
        PurchLine.SETRANGE("Document Type", "Document Type"::Order);
        PurchLine.SETRANGE("Document No.", PurchOrderNo);
        PurchLine.SETFILTER("Plant Order No.", '<>%1', '');
        IF PurchLine.FINDFIRST THEN
          EXIT(PurchLine."Plant Order No.");
      END;
      EXIT('');
    END;

    PROCEDURE UpdatePostingAndDocDate@1100525024(AlwaysReplaceDates@1100525002 : Boolean;NewPostingDate@1100525000 : Date);
    VAR
      PurchSetup@1100525001 : Record 312;
    BEGIN
      //**4PS
      PurchSetup.GET;
      IF AlwaysReplaceDates THEN BEGIN
        PurchSetup."Replace Posting Date" := TRUE;
        PurchSetup."Replace Document Date" := TRUE;
      END;

      IF PurchSetup."Replace Posting Date" OR PurchSetup."Replace Document Date" THEN BEGIN
        IF NewPostingDate = 0D THEN
          NewPostingDate := WORKDATE;

        IF PurchSetup."Replace Posting Date" OR ("Posting Date" = 0D) THEN
          IF NewPostingDate <> "Posting Date" THEN BEGIN
            "Posting Date" := NewPostingDate;
            VALIDATE("Currency Code");
          END;

        IF PurchSetup."Replace Document Date" OR ("Document Date" = 0D) THEN
          IF "Document Date" <> NewPostingDate THEN
            VALIDATE("Document Date",NewPostingDate);
      END;
    END;

    LOCAL PROCEDURE GetTempPurchHeader@1100525025();
    BEGIN
      //**4PS C004837
      "Doc. No. Occurrence" := TempPurchHeader."Doc. No. Occurrence";
      "Ext. Document ID" := TempPurchHeader."Ext. Document ID";
      "Input by" := TempPurchHeader."Input by";
      "Input Date" := TempPurchHeader."Input Date";
      "Extra Receipts Allowed" := TempPurchHeader."Extra Receipts Allowed";
    END;

    PROCEDURE GetNameAbbrevationEmployee@1100525026() : Text[30];
    VAR
      Employee@1100525000 : Record 5200;
      Job@1100525001 : Record 11072003;
      ServiceOrder@1100525002 : Record 11012823;
    BEGIN
      //**4PS C008231
      IF "Job No." <> '' THEN BEGIN
        IF Job.GET("Job No.") AND (Job."Project Manager" <> '') THEN BEGIN
          IF Employee.GET(Job."Project Manager") THEN BEGIN
          END;
        END;
      END ELSE BEGIN
        IF "Service Order No." <> '' THEN BEGIN
          IF ServiceOrder.GET("Service Order No.") AND (ServiceOrder."Order Manager" <> '')THEN BEGIN
            IF Employee.GET(ServiceOrder."Order Manager") THEN BEGIN
            END;
          END;
        END;
      END;

      IF Employee."Name Abbreviation" <> '' THEN
        EXIT(Employee."Name Abbreviation");
    END;

    PROCEDURE GetEMailOrder@1100528701() : Text[80];
    VAR
      OrderAddress@1100528702 : Record 224;
      Vendor@1100528700 : Record 23;
      Contact@1100528400 : Record 5050;
    BEGIN
      //**4PS
      IF NOT ("Document Type" IN ["Document Type"::Order, "Document Type"::Quote]) THEN
        EXIT;

      //Call 27869 sn DP00556
      IF "E-Mail for Purch. Order" <> '' THEN
        EXIT("E-Mail for Purch. Order");
      //Call 27869 en DP00556

      IF "Order Address Code" <> '' THEN
        IF OrderAddress.GET("Buy-from Vendor No.", "Order Address Code") THEN
          IF OrderAddress."E-Mail for Purch. Order" <> '' THEN
            EXIT(OrderAddress."E-Mail for Purch. Order");

      IF Vendor.GET("Buy-from Vendor No.") THEN
        EXIT(Vendor."E-Mail for Purch. Order");

      IF Contact.GET("Buy-from Contact No.") THEN
        EXIT(Contact."E-Mail for Purch. Order");
    END;

    LOCAL PROCEDURE GetExpectedReceiptDate@1100525027();
    VAR
      InventSetup@1100525000 : Record 313;
      CustomizedCalendarChange@1100525001 : Record 11072016;
      CalendarMgmt@1100525002 : Codeunit 7600;
      DeliveryPeriod@1100525003 : DateFormula;
      NewExpectedReceiptDate@1100525004 : Date;
    BEGIN
      //**4PS C009135
      DeliveryPeriod := "Lead Time Calculation";
      IF FORMAT(DeliveryPeriod) = '' THEN BEGIN
        InventSetup.GET;
        DeliveryPeriod := InventSetup."Delivery Period";
      END;
      IF FORMAT(DeliveryPeriod) <> '' THEN BEGIN  //db, 12-05-09: M15301
        //NewExpectedReceiptDate := CALCDATE(DeliveryPeriod, TODAY);
        NewExpectedReceiptDate := CalendarMgmt.CalcDateBOC(
           '+' + FORMAT(DeliveryPeriod), TODAY,
           CustomizedCalendarChange."Source Type"::Company, '', '',
           CustomizedCalendarChange."Source Type"::Vendor, "Buy-from Vendor No.", '', FALSE);
        VALIDATE("Expected Receipt Date", NewExpectedReceiptDate);
      END;
    END;

    PROCEDURE ShowPurchaseLines@1100528602(IRelatedPurchaseHeaderNo@1100528600 : Code[20]) : Boolean;
    VAR
      PurchaseHeader@1100528601 : Record 38;
    BEGIN
      PurchaseHeader.GET("Document Type"::Order, IRelatedPurchaseHeaderNo);
      EXIT(PAGE.RUNMODAL(PAGE::"Purchase Order Receipt", PurchaseHeader) = ACTION::LookupOK);
    END;

    LOCAL PROCEDURE TestStatusOpen@1100525129();
    BEGIN
      //**4PS
      //**4PS CALL C020358 sn
      IF PurchHeader.Status = PurchHeader.Status::"Pending Approval" THEN
        IF IsDocumentCaptureActive THEN BEGIN
      //FIXME
      //   ApprovalSetup.GET;
      //   IF ApprovalSetup."Purch. Invoice Modify Allowed" THEN
      //     EXIT;
      END;
      //**4PS CALL C020358 en
      TESTFIELD(Status,Status::Open);
    END;

    PROCEDURE IsDocumentCaptureActive@1100528203() : Boolean;
    BEGIN
      //**4PS
      IF NOT DCSetupRead THEN BEGIN
        IF NOT DocumentCaptureSetup.READPERMISSION THEN
          EXIT(FALSE);
        IF DocumentCaptureSetup.GET THEN;
          DCSetupRead := TRUE;
      END;
      EXIT(DocumentCaptureSetup."Document Nos." <> '');
    END;

    PROCEDURE SetCurrFieldNo@1100409003(NewCurrFieldNo@1100409000 : Integer);
    BEGIN
      //**4PS C017139
      CurrFieldNo := NewCurrFieldNo;
    END;

    LOCAL PROCEDURE ConfirmUpdateCurrencyCode@1100528409() : Boolean;
    BEGIN
      //**4PS
      IF NOT GUIALLOWED THEN
        EXIT(TRUE);

      IF CONFIRM(ChangeCurrencyQst,FALSE,FIELDCAPTION("Currency Code")) THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckPurchPlanPermission@1100409004();
    VAR
      Consenter@1100409000 : Record 11012229;
    BEGIN
      //**4PS C020918
      IF CurrFieldNo = 0 THEN
        EXIT;

      IF "Document Type" <> "Document Type"::Order THEN
        EXIT;

      IF xRec."Purchase Plan" = '' THEN
        EXIT;

      IF "Purchase Plan" = xRec."Purchase Plan" THEN
        EXIT;

      //C020918.sn
      IF "Purchase Order Type" <> xRec."Purchase Order Type" THEN
        IF NOT PurchLinesExist THEN
          EXIT;
      //C020918.en

      PurchSetup.GET;
      IF NOT PurchSetup."Use Consent Purchase Orders" THEN
        EXIT;

      IF Consenter.GET(USERID) THEN
        IF Consenter."Super Consenter" THEN
          EXIT;


      ERROR(Text11012035,FIELDCAPTION("Purchase Plan"));
    END;

    LOCAL PROCEDURE UpdateEMailForPurchOrderForContactPerson@1100528410();
    VAR
      Contact@1100528400 : Record 5050;
    BEGIN
      //**4PS C020365
      IF "Electronic Order Type" <> "Electronic Order Type"::"E-Mail Contact Person" THEN
        EXIT;

      IF "Buy-from Contact Person No." <> '' THEN BEGIN
        IF Contact.GET("Buy-from Contact Person No.") THEN
          "E-Mail for Purch. Order" := Contact."E-Mail"
        ELSE
          "E-Mail for Purch. Order" := '';
      END ELSE
        IF "Buy-from Contact No." <> '' THEN BEGIN
          Contact.SETRANGE("No.", "Buy-from Contact No.");
          Contact.SETRANGE(Type, Contact.Type::Person);
          IF Contact.FINDFIRST THEN
            "E-Mail for Purch. Order" := Contact."E-Mail"
          ELSE
            "E-Mail for Purch. Order" := '';
        END;

      IF ("Buy-from Contact Person No." = '') AND
         ("Buy-from Contact No." = '')
      THEN
        "E-Mail for Purch. Order" := '';
    END;

    PROCEDURE OnAssistShipToLocation@1100525028();
    VAR
      PlantLocation@1100525000 : Record 11012554;
    BEGIN
      //**4PS C018760
      CASE Deliver OF
        Deliver::"Plant Location":
          BEGIN
            PlantLocation.SETRANGE(Depot, TRUE);
            IF "Ship To Location" <> '' THEN BEGIN
              PlantLocation.SETRANGE(Code, "Ship To Location");
              IF PlantLocation.FINDFIRST THEN;
              PlantLocation.SETRANGE(Code);  //Reset filter
            END;
            IF PAGE.RUNMODAL(0, PlantLocation) = ACTION::LookupOK THEN BEGIN
              IF (PlantLocation.Code <> '') AND (PlantLocation.Code <> "Ship To Location") THEN
                VALIDATE("Ship To Location", PlantLocation.Code);
            END;
          END;
      ELSE
        TESTFIELD(Deliver, Deliver::"Plant Location");
      END;
    END;

    PROCEDURE CheckIfNoQuoteConsentLinesAvailable@1100528412();
    VAR
      ProjectPurchaseAction@1100528400 : Record 11012026;
    BEGIN
      //**4PS
      IF "Document Type" <> "Document Type"::Quote THEN
        EXIT;

      IF "Purchase Action" <> '' THEN BEGIN
        IF ProjectPurchaseAction.GET("Job No.", "Purchase Action") THEN
          ProjectPurchaseAction.CheckIfNoConsentLinesAvailable;
      END ELSE BEGIN
        CALCFIELDS("Quote Consent Lines Available");
        TESTFIELD("Quote Consent Lines Available", FALSE);
      END;
    END;

    PROCEDURE CheckIfMakingOrderAllowedForQuoteStatus@1100528413();
    VAR
      PurchasesPayablesSetup@1100528400 : Record 312;
    BEGIN
      //**4PS
      IF "Document Type" <> "Document Type"::Quote THEN
        EXIT;
      IF NOT PurchasesPayablesSetup.GET THEN
        EXIT;
      IF NOT PurchasesPayablesSetup."Release Purch. Quotes Required" THEN
        EXIT;

      IF Status = Status::Open THEN
        FIELDERROR(Status);
    END;

    PROCEDURE EditConsentLines@1100485007();
    VAR
      Type@1100528400 : ' ,Project,Service Order';
      TypeNo@1100528402 : Code[20];
    BEGIN
      //**4PS
      CASE TRUE OF
        "Job No." <> '':
          BEGIN
            Type := Type::Project;
            TypeNo := "Job No.";
          END;
        "Service Order No." <> '':
          BEGIN
            Type := Type::"Service Order";
            TypeNo := "Service Order No.";
          END;
      END;
      RunPageConsentLines(0, Type, TypeNo);
    END;

    PROCEDURE RunPageConsentLines@1100528414(DocumentLineNo@1100528403 : Integer;Type@1100528402 : ' ,Project,Service Order';TypeNo@1100528400 : Code[20]);
    VAR
      ConsentLines@1100485000 : Page 11071869;
      ConsentLine@1100485001 : Record 11012226;
      ConsentProcess@1100528401 : 'Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval';
    BEGIN
      //**4PS
      CASE "Document Type" OF
        "Document Type"::Quote:
          BEGIN
            ConsentProcess := ConsentProcess::"Purchase Quote";
            ConsentLine.SETRANGE("Document Type", ConsentLine."Document Type"::"Purchase Quote");
          END;
        "Document Type"::Order:
          BEGIN
            ConsentProcess := ConsentProcess::"Purchase Order";
            ConsentLine.SETRANGE("Document Type", ConsentLine."Document Type"::Order);
          END;
        "Document Type"::Invoice:
          BEGIN
            ConsentProcess := ConsentProcess::Invoice;
            ConsentLine.SETRANGE("Document Type", ConsentLine."Document Type"::Invoice);
          END;
        "Document Type"::"Credit Memo":
          BEGIN
            ConsentProcess := ConsentProcess::"Credit Memo";
            ConsentLine.SETRANGE("Document Type", ConsentLine."Document Type"::"Credit Memo");
          END;
      END;

      ConsentLine.SETRANGE("Document No.", "No.");
      IF DocumentLineNo <> 0 THEN
        ConsentLine.SETRANGE("Document Line No.", DocumentLineNo);
      ConsentLines.SETTABLEVIEW(ConsentLine);
      ConsentLines.SetDefaults(TRUE, "Buy-from Vendor No.", ConsentProcess, Type, TypeNo, DocumentLineNo);
      ConsentLines.RUNMODAL;
    END;

    PROCEDURE RelatedOrderHasOpenConsentLines@1100528415() : Boolean;
    VAR
      PurchaseHeader@1100528400 : Record 38;
    BEGIN
      //**4PS
      IF "Related Purch. Order No." = '' THEN
        EXIT;

      IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Order, "Related Purch. Order No.") THEN BEGIN
        PurchaseHeader.CALCFIELDS("Order Consent Lines Available");
        EXIT(PurchaseHeader."Order Consent Lines Available");
      END;
    END;

    PROCEDURE SetFilterOnInputBy@1100525029();
    BEGIN
      //**4PS
      PurchSetup.GET;
      IF PurchSetup."Registration per User" THEN
        SETRANGE("Input by", USERID)
      ELSE
        SETRANGE("Input by");
    END;

    PROCEDURE GetPurchaseActionBudget@1100528416() PurchaseActionBudget : Decimal;
    VAR
      ProjectPurchaseAction@1100528400 : Record 11012026;
    BEGIN
      //**4PS
      IF ProjectPurchaseAction.GET("Job No.", "Purchase Action") THEN BEGIN
        ProjectPurchaseAction.CALCFIELDS("Purchase Budget");
        PurchaseActionBudget := ProjectPurchaseAction."Purchase Budget";
      END;
    END;

    BEGIN
    {
      <DC>
        Document Capture
      </DC>
      4PS
      30-09-2000, Andre Overeem: WKA fields and default VAT Prod. Posting Group added.
                                   Purchase invoice registration added.
      08-01-2001, Andre Overeem: Seperate No. Series for Lend in orders added.
      07-11-2001 Andre Overeem: Number of Hours default set to 1, when Payment Agreement <>'' is.
      4PS01 Jan ter Harmsel Call 51. Extra Option in Status field::Closed. Only closed (purchase)orders can be deleted.
      21-06-2005, Henk Sebens: Purchase Responsibility Center Filter and default seperated.
      29-07-2005, D. Borkent: Do not make Location empty when deliver=location.
      4PS02 JD Melding C-007868, 24-11-2006, Separate default On Hold Codes for Credit Memos
      4PS03 JD Melding C-008964, 08-12-2006, Make it possible to have a Contact of type Person as a Vendor.
      4PS04 GB Melding 12083, 03-06-2008, Make it possible to change vendor without readrights Managemind
      4PS05 JD 29-06-2008, Improvements for intrastat
      4PS06 HBK 13-07-09: Added field "Consumption per Location"
      4PS07 24-09-2009 PS Status options Pending Approval,Pending Prepayment removed (set empty).
      4PS08 KK 19-11-2010, On hold when no contract returned or when no letter of credit returned.
      4PS, 11-12-13, C009135, Expected Receipt Date is now automatically filled for non-ICM vendors too.
    }
    END.
  }
}

