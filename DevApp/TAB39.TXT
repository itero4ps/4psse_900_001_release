OBJECT Table 39 Purchase Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.45480,NAVSE9.FI9.NO9,DCNL9.00.00.43897.4.04,4PS9.00,4PSSE,EXF400004;
  }
  PROPERTIES
  {
    Permissions=TableData 27=rm,
                TableData 39=m,
                TableData 11020505=rm,
                TableData 11020507=rm,
                TableData 11020513=rd,
                TableData 11020517=rm;
    OnInsert=VAR
               PurchaseHeaderExtension@1100528300 : Record 11020398;
               FPSMobileItemUsage@1100528100 : Record 11125647;
             BEGIN
               TestStatusOpen;
               IF Quantity <> 0 THEN
                 ReservePurchLine.VerifyQuantity(Rec,xRec);

               LOCKTABLE;
               PurchHeader."No." := '';
               IF ("Deferral Code" <> '') AND (GetDeferralAmount <> 0) THEN
                 UpdateDeferralAmounts;

               //**4PS.sn
               GetPurchHeader;
               "Posting Date" := PurchHeader."Posting Date";
               "Price Agreement" := PurchHeader."Price Agreement";
               "Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
               "Purchase Route Reference" := '';
               "Quote Selected" := FALSE;

               CheckCostTypeOrder;
               CreatePurchOrderControl(FALSE);
               VALIDATE("Outstanding-Rcd/Not Invoiced");
               VALIDATE("Req. Rcpt Date Modified By",USERID); //**4PS15.n

               UpdateCostControlStatus(UpdateAction::Insert);
               UpdateLogbook;

               IF NOT CreateFromReqLine THEN BEGIN
                 IF ("Document Type" = "Document Type"::"Blanket Order") AND
                   StrategicPurchMgt.IsLimitedPurchaser("Document Type")
                 THEN
                   ERROR(Text11012025);
                 StrategicPurchMgt.FindContractForPurchaseLine(Rec);
               END;
               ProjectSiteMgt.LogPurchaseLine(1, Rec);

               IF FPSMobileItemUsage.READPERMISSION THEN                //**4PS.n DP00390
                 FPSMobileItemUsage.CreateModifyFromPurchaseLine(Rec);  //**4PS.n DP00390

               "Input by" := USERID; //DP00469
               "Input Date" := TODAY; //DP00469
               //**4PS.en

               "Date/Time Last Modified" := CURRENTDATETIME; // 4PSHM 140131

               // ExFlow ->
               IF ExFlowSetup.GET THEN BEGIN
                 IF Approve THEN
                   ExFlow.CreateDocumentLine(Rec,TRUE,TRUE);

                 ExFlow.AmountToDocHead(Rec,FALSE);
               END;
               // <- ExFlow
             END;

    OnModify=VAR
               lvDocNo@1210190000 : Code[20];
               lvLineNo@1210190001 : Integer;
               FPSMobileItemUsage@1100528100 : Record 11125647;
             BEGIN
               IF ("Document Type" = "Document Type"::"Blanket Order") AND
                  ((Type <> xRec.Type) OR ("No." <> xRec."No."))
               THEN BEGIN
                 PurchLine2.RESET;
                 PurchLine2.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
                 PurchLine2.SETRANGE("Blanket Order No.","Document No.");
                 PurchLine2.SETRANGE("Blanket Order Line No.","Line No.");
                 IF PurchLine2.FINDSET THEN
                   REPEAT
                     PurchLine2.TESTFIELD(Type,Type);
               //    PurchLine2.TESTFIELD("No.","No.");  //**4PS.n
               //db, 04-12-03 (at Blanket Order no project; so no WIP-account to capture)
                   UNTIL PurchLine2.NEXT = 0;
               END;

               //**4PS.sn
               GetPurchHeader;
               IF PurchHeader."Hours Hire Order Type" = PurchHeader."Hours Hire Order Type"::" " THEN
                 "Posting Date" := PurchHeader."Posting Date";
               IF "Quote Selected" THEN BEGIN
                 IF ("Document Type" <> "Document Type"::Quote) THEN
                   "Quote Selected" := FALSE;
                 IF ("Quote Selected") AND ("Document Type" = "Document Type"::Quote) THEN
                   IF NOT RouteRefMgtCU.SetQuoteToOrderAllowed("Purchase Route Reference","Document No.", lvDocNo, lvLineNo) THEN
                     "Quote Selected" := FALSE;
               END;
               CheckCostTypeOrder;
               UpdateBlanketSchemeProjAndPlot();  //DP00416.n
               CreatePurchOrderControl(FALSE);
               VALIDATE("Outstanding-Rcd/Not Invoiced");
               //**4PS.en

               //IF ((Quantity <> 0) OR (xRec.Quantity <> 0)) AND ItemExists(xRec."No.") THEN //**4PS.o DP00121
               IF ((Quantity <> 0) OR (xRec.Quantity <> 0)) AND (ItemExists(xRec."No.") OR NSItemExists(xRec."Item No.")) THEN //**4PS.n DP00121
                 ReservePurchLine.VerifyChange(Rec,xRec);

               //**4PS.sn
               UpdateCostControlStatus(UpdateAction::Modify);
               UpdateLogbook;

               IF NOT CreateFromReqLine THEN BEGIN
                 IF ("Document Type" = "Document Type"::"Blanket Order") AND
                   StrategicPurchMgt.IsLimitedPurchaser("Document Type")
                 THEN
                   ERROR(Text11012025);
                 StrategicPurchMgt.FindContractForPurchaseLine(Rec);
               END;

               UpdateGS1PurcheseOrderLog;
               ProjectSiteMgt.LogPurchaseLine(2, Rec); //**4PS.n

               IF FPSMobileItemUsage.READPERMISSION THEN                //**4PS.n DP00390
                 FPSMobileItemUsage.CreateModifyFromPurchaseLine(Rec);  //**4PS.n DP00390

               "Modified by" := USERID; //DP00469
               "Last Date Modified" := TODAY;//DP00469
               //**4PS.en
               "Date/Time Last Modified" := CURRENTDATETIME; // 4PSHM 140131

               //>>IME171
               DimMgt.SetDimensionValueChainsBool(TRUE);
               IF "Shortcut Dimension 1 Code" <> '' THEN ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
               IF "Shortcut Dimension 2 Code" <> '' THEN ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
               DimMgt.SetDimensionValueChainsBool(FALSE);
               //<<IME171
               // ExFlow ->
               IF ExFlowSetup.GET THEN BEGIN
                 IF Approve THEN
                   ExFlow.UpdateLine(Rec,xRec,FALSE);
                 GetPurchHeader;
                 ExFlow.AmountToDocHead(Rec,FALSE);
               END;
               // <- ExFlow
             END;

    OnDelete=VAR
               PurchCommentLine@1001 : Record 43;
               lvBlanketSchemeRec@1210190000 : Record 11012066;
               RetentionLedgerEntry@1100528500 : Record 11020636;
               PurchaseLineExtension@1100525000 : Record 11020644;
               FPSMobileItemUsage@1100528100 : Record 11125647;
               ExtendedLineNo@1100285300 : Record 11127984;
             BEGIN
               TestStatusOpen;
               //**4PS.sn
               IF ("Document Type" = "Document Type"::Order) AND (NOT StatusCheckSuspended) THEN BEGIN
                 TESTFIELD("Quantity Invoiced", 0);
                 TESTFIELD("Amnt. Invoiced", 0);
               END;
               GetPurchHeader;
               IF PurchHeader.Status < PurchHeader.Status::Closed THEN BEGIN
               //**4PS.en
                 IF NOT StatusCheckSuspended AND (PurchHeader.Status = PurchHeader.Status::Released) AND
                  (Type IN [Type::"G/L Account",Type::"Charge (Item)"])
                 THEN
                   VALIDATE(Quantity,0);

                 IF (NOT PurchHeader."Amounts only") THEN BEGIN   //**4PS.n
                   //IF (Quantity <> 0) AND ItemExists("No.") THEN BEGIN //**4PS.o DP00121
                   IF (Quantity <> 0) AND (ItemExists("No.") OR NSItemExists("Item No.")) THEN BEGIN //**4PS.n DP00121
                     ReservePurchLine.DeleteLine(Rec);
                     IF "Receipt No." = '' THEN
                       TESTFIELD("Qty. Rcd. Not Invoiced",0);
                     IF "Return Shipment No." = '' THEN
                       TESTFIELD("Return Qty. Shipped Not Invd.",0);

                     CALCFIELDS("Reserved Qty. (Base)");
                     TESTFIELD("Reserved Qty. (Base)",0);
                 //**4PS.sn
                   END;
                 END ELSE
                   IF "Receipt No." = '' THEN
                     TESTFIELD("Amt. Rcd. Not Invoiced",0);
                //**4PS.en

                 WhseValidateSourceLine.PurchaseLineDelete(Rec);
               END;

               IF ("Document Type" = "Document Type"::Order) AND (Quantity <> "Quantity Invoiced") THEN
                 TESTFIELD("Prepmt. Amt. Inv.",0);

               IF "Sales Order Line No." <> 0 THEN BEGIN
                 LOCKTABLE;
                 SalesOrderLine.LOCKTABLE;
                 SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,"Sales Order No.","Sales Order Line No.");
                 SalesOrderLine."Purchase Order No." := '';
                 SalesOrderLine."Purch. Order Line No." := 0;
                 SalesOrderLine.MODIFY;
               END;

               IF "Special Order Sales Line No." <> 0 THEN BEGIN
                 LOCKTABLE;
                 SalesOrderLine.LOCKTABLE;
                 IF "Document Type" = "Document Type"::Order THEN BEGIN
                   SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,"Special Order Sales No.","Special Order Sales Line No.");
                   SalesOrderLine."Special Order Purchase No." := '';
                   SalesOrderLine."Special Order Purch. Line No." := 0;
                   SalesOrderLine.MODIFY;
                 END ELSE
                   IF SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,"Special Order Sales No.","Special Order Sales Line No.") THEN
                     BEGIN
                     SalesOrderLine."Special Order Purchase No." := '';
                     SalesOrderLine."Special Order Purch. Line No." := 0;
                     SalesOrderLine.MODIFY;
                   END;
               END;

               NonstockItemMgt.DelNonStockPurch(Rec);

               IF "Document Type" = "Document Type"::"Blanket Order" THEN BEGIN
                 PurchLine2.RESET;
                 PurchLine2.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
                 PurchLine2.SETRANGE("Blanket Order No.","Document No.");
                 PurchLine2.SETRANGE("Blanket Order Line No.","Line No.");
                 IF PurchLine2.FINDFIRST THEN
                   PurchLine2.TESTFIELD("Blanket Order Line No.",0);
               END;

               IF Type = Type::Item THEN
                 DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");

               IF Type = Type::"Charge (Item)" THEN
                 DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");

               IF "Line No." <> 0 THEN BEGIN
                 PurchLine2.RESET;
                 PurchLine2.SETRANGE("Document Type","Document Type");
                 PurchLine2.SETRANGE("Document No.","Document No.");
                 PurchLine2.SETRANGE("Attached to Line No.","Line No.");
                 PurchLine2.SETFILTER("Line No.",'<>%1',"Line No.");
                 PurchLine2.DELETEALL(TRUE);
               END;

               PurchCommentLine.SETRANGE("Document Type","Document Type");
               PurchCommentLine.SETRANGE("No.","Document No.");
               PurchCommentLine.SETRANGE("Document Line No.","Line No.");
               IF NOT PurchCommentLine.ISEMPTY THEN
                 PurchCommentLine.DELETEALL;

               IF ("Line No." <> 0) AND ("Attached to Line No." = 0) THEN BEGIN
                 PurchLine2.RESET;
                 PurchLine2.SETRANGE("Document Type","Document Type");
                 PurchLine2.SETRANGE("Document No.","Document No.");
                 PurchLine2.SETFILTER("Line No.",'<>%1',"Line No.");
                 IF PurchLine2.FINDFIRST THEN BEGIN
                   PurchLine2.VALIDATE("Recalculate Invoice Disc.",TRUE);
                   PurchLine2.MODIFY;
                 END;
               END;

               // ExFlow ->
               IF ExFlowSetup.GET THEN
                 ExFlow.DeletePurchaseLine(Rec,StatusCheckSuspended);
               // <- ExFlow

               IF "Deferral Code" <> '' THEN
                 DeferralUtilities.DeferralCodeOnDelete(
                   DeferralUtilities.GetPurchDeferralDocType,'','',
                   "Document Type","Document No.","Line No.");

               //**4PS.sn
               PurchaseLineExtension.RESET;
               PurchaseLineExtension.SETRANGE("Document Type", "Document Type");
               PurchaseLineExtension.SETRANGE("Document No.", "Document No.");
               PurchaseLineExtension.SETRANGE("Line No.", "Line No.");
               IF NOT PurchaseLineExtension.ISEMPTY THEN
                 PurchaseLineExtension.DELETEALL;

               DeletePurchaseLineDetails;
               DeletePurchaseLineSCClaims;

               RetentionLedgerEntry.RESET;
               RetentionLedgerEntry.SETCURRENTKEY("Vendor No.");
               RetentionLedgerEntry.SETRANGE("Vendor No.","Buy-from Vendor No.");
               RetentionLedgerEntry.SETRANGE("Applied Document No.","Document No.");
               IF RetentionLedgerEntry.FINDSET(TRUE) THEN
                 REPEAT
                   RetentionLedgerEntry."Applies-to ID" := '';
                   RetentionLedgerEntry."Applied Document Type" := 0;
                   RetentionLedgerEntry."Applied Document No." := '';
                   RetentionLedgerEntry.Comment := '';
                   RetentionLedgerEntry.MODIFY;
                 UNTIL RetentionLedgerEntry.NEXT = 0;

               IF "Document Type" = "Document Type"::Order THEN BEGIN
                 lvBlanketSchemeRec.RESET;
                 lvBlanketSchemeRec.SETRANGE("Document No.", "Document No.");
                 lvBlanketSchemeRec.SETRANGE("Document Line No.", "Line No.");
                 lvBlanketSchemeRec.DELETEALL;

                 DeletePurchOrderPlntRentalRate();
               END;

               //EvaluateReleasedQuantity(Rec, 1);
               CreatePurchOrderControl(TRUE);

               UpdateCostControlStatus(UpdateAction::Delete);
               CheckResetPurchOrderInTO();

               UpdateWageCharge(0); //**4PS.n

               UpdateLogbook;
               ProjectSiteMgt.LogPurchaseLine(3, Rec); //**4PS.n

               IF FPSMobileItemUsage.READPERMISSION THEN          //**4PS.n DP00390
                 FPSMobileItemUsage.DeleteFromPurchaseLine(Rec);  //**4PS.n DP00390
               //**4PS.en

               //160426
               IF ExtendedLineNo.GET("Document Type","Document No.","Line No.") THEN
                 ExtendedLineNo.DELETE;
             END;

    OnRename=BEGIN
               ERROR(Text000,TABLECAPTION);
             END;

    CaptionML=ENU=Purchase Line;
    LookupPageID=Page518;
    DrillDownPageID=Page518;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                   Description=[4PS: Raam  -> Afroep  ] }
    { 2   ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF NOT CreateFromReqLine THEN
                                                                  StrategicPurchMgt.FindContractForPurchaseLine(Rec);
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Buy-from Vendor No.;
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=FIELD(Document Type));
                                                   CaptionML=ENU=Document No. }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 5   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                GetPurchHeader;
                                                                TestStatusOpen;

                                                                TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                TESTFIELD("Quantity Received",0);
                                                                TESTFIELD("Receipt No.",'');
                                                                //**4PS.sn
                                                                IF PurchHeader."Amounts only" THEN BEGIN
                                                                  TESTFIELD("Amt. Rcd. Not Invoiced",0);
                                                                  TESTFIELD("Amnt. Received",0);
                                                                END;
                                                                //**4PS.en

                                                                TESTFIELD("Return Qty. Shipped Not Invd.",0);
                                                                TESTFIELD("Return Qty. Shipped",0);
                                                                TESTFIELD("Return Shipment No.",'');

                                                                TESTFIELD("Prepmt. Amt. Inv.",0);

                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION(Type),"Sales Order No.");
                                                                IF "Special Order" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION(Type),"Special Order Sales No.");
                                                                IF "Prod. Order No." <> '' THEN
                                                                  ERROR(
                                                                    Text044,
                                                                    FIELDCAPTION(Type),FIELDCAPTION("Prod. Order No."),"Prod. Order No.");

                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  IF Quantity <> 0 THEN BEGIN
                                                                    ReservePurchLine.VerifyChange(Rec,xRec);
                                                                    CALCFIELDS("Reserved Qty. (Base)");
                                                                    TESTFIELD("Reserved Qty. (Base)",0);
                                                                    //**4PS.sn DP00121
                                                                    CALCFIELDS("Reserved NS Qty. (Base)");
                                                                    TESTFIELD("Reserved NS Qty. (Base)",0);
                                                                    //**4PS.en
                                                                    WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                  END;
                                                                  IF xRec.Type IN [Type::Item,Type::"Fixed Asset"] THEN BEGIN
                                                                    IF Quantity <> 0 THEN
                                                                      PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);
                                                                    DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");
                                                                  END;
                                                                  IF xRec.Type = Type::"Charge (Item)" THEN
                                                                    DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");
                                                                  IF xRec."Deferral Code" <> '' THEN
                                                                    DeferralUtilities.RemoveOrSetDeferralSchedule('',
                                                                      DeferralUtilities.GetPurchDeferralDocType,'','',
                                                                      xRec."Document Type",xRec."Document No.",xRec."Line No.",
                                                                      xRec.GetDeferralAmount,PurchHeader."Posting Date",'',xRec."Currency Code",TRUE);
                                                                END;
                                                                TempPurchLine := Rec;
                                                                INIT;

                                                                IF xRec."Line Amount" <> 0 THEN
                                                                  "Recalculate Invoice Disc." := TRUE;

                                                                Type := TempPurchLine.Type;
                                                                "System-Created Entry" := TempPurchLine."System-Created Entry";
                                                                GetTempPurchLine(TempPurchLine);  //**4PS.n
                                                                VALIDATE("FA Posting Type");

                                                                IF Type = Type::Item THEN
                                                                  "Allow Item Charge Assignment" := TRUE
                                                                ELSE
                                                                  "Allow Item Charge Assignment" := FALSE;

                                                                // ExFlow ->
                                                                CopyExFlowFields(TempPurchLine);
                                                                // <- ExFlow
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,G/L Account,Item,,Fixed Asset,Charge (Item)";
                                                   OptionString=[ ,G/L Account,Item,,Fixed Asset,Charge (Item)] }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(" ")) "Standard Text"
                                                                 ELSE IF (Type=CONST(G/L Account),
                                                                          System-Created Entry=CONST(No),
                                                                          Receiving Company=FILTER('')) "G/L Account" WHERE (Direct Posting=CONST(Yes),
                                                                                                                             Account Type=CONST(Posting),
                                                                                                                             Blocked=CONST(No))
                                                                                                                             ELSE IF (Type=CONST(G/L Account),
                                                                                                                                      System-Created Entry=CONST(Yes),
                                                                                                                                      Receiving Company=FILTER('')) "G/L Account"
                                                                                                                                      ELSE IF (Type=CONST(Item)) Item
                                                                                                                                      ELSE IF (Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                                                                                      ELSE IF (Type=CONST("Charge (Item)")) "Item Charge";
                                                   OnValidate=VAR
                                                                PrepmtMgt@1002 : Codeunit 441;
                                                                lvPlantCreateFAOnReceipt@1100485000 : Boolean;
                                                                l_Vendor@1100285000 : Record 23;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                TESTFIELD("Quantity Received",0);
                                                                TESTFIELD("Receipt No.",'');

                                                                TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                //**4PS.sn
                                                                IF PurchHeader."Amounts only" THEN BEGIN
                                                                  TESTFIELD("Amt. Rcd. Not Invoiced",0);
                                                                  TESTFIELD("Amnt. Received",0);
                                                                END;
                                                                //**4PS.en

                                                                TestReturnFieldsZero;


                                                                IF "No." <> xRec."No." THEN BEGIN  //**4PS.n
                                                                  //db, 03-07-14: C002114 (check manual change; don't block generate from codeunit 333)
                                                                  IF "Drop Shipment" THEN
                                                                    ERROR(
                                                                      Text001,
                                                                      FIELDCAPTION("No."),"Sales Order No.");

                                                                  IF "Special Order" THEN
                                                                    ERROR(
                                                                      Text001,
                                                                      FIELDCAPTION("No."),"Special Order Sales No.");

                                                                  IF "Prod. Order No." <> '' THEN
                                                                    ERROR(
                                                                      Text044,
                                                                      FIELDCAPTION(Type),FIELDCAPTION("Prod. Order No."),"Prod. Order No.");
                                                                END;  //**4PS.n

                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  IF (Quantity <> 0) AND ItemExists(xRec."No.") THEN BEGIN
                                                                    ReservePurchLine.VerifyChange(Rec,xRec);
                                                                    CALCFIELDS("Reserved Qty. (Base)");
                                                                    TESTFIELD("Reserved Qty. (Base)",0);
                                                                    IF Type = Type::Item THEN
                                                                      WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                  END;
                                                                  IF Type = Type::Item THEN
                                                                    DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");
                                                                  IF Type = Type::"Charge (Item)" THEN
                                                                    DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");
                                                                END;
                                                                TempPurchLine := Rec;

                                                                lvPlantCreateFAOnReceipt := CheckPlantCreateFAOnReceipt();  //**4PS.n

                                                                INIT;
                                                                IF xRec."Line Amount" <> 0 THEN
                                                                  "Recalculate Invoice Disc." := TRUE;
                                                                "Plot No." := TempPurchLine."Plot No."; //**4PS03.n
                                                                Type := TempPurchLine.Type;
                                                                "No." := TempPurchLine."No.";
                                                                "Tariff No." := TempPurchLine."Tariff No.";  //**4PS07.n

                                                                //IF "No." = '' THEN //**4PS.o
                                                                IF ("No." = '') AND (NOT lvPlantCreateFAOnReceipt) THEN //**4PS.n
                                                                  EXIT;
                                                                IF Type <> Type::" " THEN BEGIN
                                                                  Quantity := TempPurchLine.Quantity;
                                                                  "Outstanding Qty. (Base)" := TempPurchLine."Outstanding Qty. (Base)";
                                                                END;

                                                                "System-Created Entry" := TempPurchLine."System-Created Entry";
                                                                GetTempPurchLine(TempPurchLine);  //**4PS.n

                                                                GetPurchHeader;
                                                                //PurchHeader.TESTFIELD("Buy-from Vendor No.");  //**4PS.o
                                                                //**4PS.sn
                                                                IF ("Document Type" <> "Document Type"::Quote) THEN
                                                                  PurchHeader.TESTFIELD("Buy-from Vendor No.")
                                                                ELSE BEGIN
                                                                  IF (PurchHeader."Buy-from Vendor No." = '') AND (PurchHeader."Buy-from Contact No." = '') THEN
                                                                    PurchHeader.TESTFIELD("Buy-from Vendor No.");
                                                                END;
                                                                //**4PS.en

                                                                "Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
                                                                "Currency Code" := PurchHeader."Currency Code";
                                                                "Expected Receipt Date" := PurchHeader."Expected Receipt Date";

                                                                IF "Shortcut Dimension 1 Code" = '' THEN  //**4PS.n
                                                                  "Shortcut Dimension 1 Code" := PurchHeader."Shortcut Dimension 1 Code";
                                                                IF "Shortcut Dimension 2 Code" = '' THEN  //**4PS.n
                                                                  "Shortcut Dimension 2 Code" := PurchHeader."Shortcut Dimension 2 Code";
                                                                //"Job No." := PurchHeader."Job No."; //**4PS.o
                                                                IF "Location Code" = '' THEN  //**4PS.n (db, 21-12-09: M17083)
                                                                  IF NOT IsServiceItem THEN
                                                                    "Location Code" := PurchHeader."Location Code";
                                                                "Transaction Type" := PurchHeader."Transaction Type";
                                                                "Transport Method" := PurchHeader."Transport Method";
                                                                "Pay-to Vendor No." := PurchHeader."Pay-to Vendor No.";
                                                                "Gen. Bus. Posting Group" := PurchHeader."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := PurchHeader."VAT Bus. Posting Group";
                                                                "Entry Point" := PurchHeader."Entry Point";
                                                                Area := PurchHeader.Area;
                                                                "Transaction Specification" := PurchHeader."Transaction Specification";
                                                                "Tax Area Code" := PurchHeader."Tax Area Code";
                                                                "Tax Liable" := PurchHeader."Tax Liable";
                                                                IF NOT "System-Created Entry" AND ("Document Type" = "Document Type"::Order) AND (Type <> Type::" ") THEN
                                                                  "Prepayment %" := PurchHeader."Prepayment %";
                                                                "Prepayment Tax Area Code" := PurchHeader."Tax Area Code";
                                                                "Prepayment Tax Liable" := PurchHeader."Tax Liable";
                                                                "Responsibility Center" := PurchHeader."Responsibility Center";

                                                                "Requested Receipt Date" := PurchHeader."Requested Receipt Date";
                                                                "Promised Receipt Date" := PurchHeader."Promised Receipt Date";
                                                                "Inbound Whse. Handling Time" := PurchHeader."Inbound Whse. Handling Time";
                                                                "Order Date" := PurchHeader."Order Date";
                                                                UpdateLeadTimeFields;
                                                                UpdateDates;

                                                                // ExFlow ->
                                                                CopyExFlowFields(TempPurchLine);

                                                                IF ExFlowSetup.GET THEN
                                                                  ExFlow.SetApproveForPurchLine(PurchHeader,Rec);

                                                                IF Approve AND ("First Approver" = '') THEN
                                                                  IF "Document Type" IN ["Document Type"::Order,"Document Type"::Quote,"Document Type"::"Blanket Order"] THEN
                                                                    "First Approver" := ExFlow.FindUserGroup(USERID,TempApproverName,TRUE);
                                                                // <- ExFlow

                                                                CASE Type OF
                                                                  Type::" ":
                                                                    BEGIN
                                                                      StdTxt.GET("No.");
                                                                      Description := StdTxt.Description;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                    END;
                                                                  Type::"G/L Account":
                                                                    BEGIN
                                                                      CheckCompanyIC;  //**4PS.n
                                                                      GLAcc.GET("No.");
                                                                      GLAcc.CheckGLAcc;
                                                                      IF NOT "System-Created Entry" THEN
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      //Description := GLAcc.Name; //**4PS.o
                                                                      //**4PS.sn
                                                                      IF ("Job No." = '') AND ("Service Order No." = '') AND ("Plant Type" = '') AND
                                                                         ("Item No." = '') AND ("Shortcut Dimension 2 Code" = '')
                                                                      THEN BEGIN
                                                                        PurchHeader.GET("Document Type","Document No.");
                                                                        Description := PurchHeader."Pay-to Name";  //previously filled with GLAcc.Name;
                                                                      END;
                                                                      //**4PS.en

                                                                      "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                                                                      //**4PS.sn
                                                                      //"VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group"
                                                                      IF GLAcc."VAT Prod. Posting Group" <> '' THEN
                                                                        "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group"
                                                                      ELSE
                                                                        "VAT Prod. Posting Group" := PurchHeader."VAT Prod. Posting Group";
                                                                      GetPlantPostingGroup;
                                                                      //**4PS.en
                                                                      "Tax Group Code" := GLAcc."Tax Group Code";
                                                                      IF NOT PurchSetup."Calc. Inv. Discount" THEN //**4PS.n
                                                                        "Allow Invoice Disc." := FALSE;
                                                                      "Allow Item Charge Assignment" := FALSE;

                                                                      "Auto. Acc. Group" := GLAcc."Auto. Acc. Group";  //NAVSE,NAVFI

                                                                      InitDeferralCode;
                                                                    END;
                                                                  Type::Item:
                                                                    BEGIN
                                                                      GetItem;
                                                                      GetGLSetup;
                                                                      //**4PS.sn
                                                                      CheckIfItemIsBlocked(Item);
                                                                      Item.TESTFIELD("Logistics on Component Level",FALSE);
                                                                      //**4PS.en
                                                                      Item.TESTFIELD(Blocked,FALSE);
                                                                      Item.TESTFIELD("Gen. Prod. Posting Group");
                                                                      IF Item.Type = Item.Type::Inventory THEN BEGIN
                                                                        Item.TESTFIELD("Inventory Posting Group");
                                                                        "Posting Group" := Item."Inventory Posting Group";
                                                                      END;
                                                                      Description := Item.Description;
                                                                      "Description 2" := Item."Description 2";
                                                                      "Unit Price (LCY)" := Item."Unit Price";
                                                                      "Units per Parcel" := Item."Units per Parcel";
                                                                      "Indirect Cost %" := Item."Indirect Cost %";
                                                                      "Overhead Rate" := Item."Overhead Rate";
                                                                      "Allow Invoice Disc." := Item."Allow Invoice Disc.";
                                                                      "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := Item."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := Item."Tax Group Code";
                                                                      Nonstock := Item."Created From Nonstock Item";
                                                                      "Item Category Code" := Item."Item Category Code";
                                                                      "Product Group Code" := Item."Product Group Code";
                                                                      "Allow Item Charge Assignment" := TRUE;
                                                                      PrepmtMgt.SetPurchPrepaymentPct(Rec,PurchHeader."Posting Date");

                                                                      IF Item."Price Includes VAT" THEN BEGIN
                                                                        IF NOT VATPostingSetup.GET(
                                                                             Item."VAT Bus. Posting Gr. (Price)",Item."VAT Prod. Posting Group")
                                                                        THEN
                                                                          VATPostingSetup.INIT;
                                                                        CASE VATPostingSetup."VAT Calculation Type" OF
                                                                          VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
                                                                            VATPostingSetup."VAT %" := 0;
                                                                          VATPostingSetup."VAT Calculation Type"::"Sales Tax":
                                                                            ERROR(
                                                                              Text002,
                                                                              VATPostingSetup.FIELDCAPTION("VAT Calculation Type"),
                                                                              VATPostingSetup."VAT Calculation Type");
                                                                        END;
                                                                        "Unit Price (LCY)" :=
                                                                          ROUND("Unit Price (LCY)" / (1 + VATPostingSetup."VAT %" / 100),
                                                                            GLSetup."Unit-Amount Rounding Precision");
                                                                      END;

                                                                      IF PurchHeader."Language Code" <> '' THEN
                                                                        GetItemTranslation;

                                                                      "Unit of Measure Code" := Item."Purch. Unit of Measure";

                                                                      InitDeferralCode;

                                                                      //**4PS.sn
                                                                      "Item No." := "No.";   //beware of recursion between validate triggers
                                                                      IF SaveFieldNo = 0 THEN  //db, 24-01-07: M8000
                                                                         ValidateItem(ItemTypeOpt::Item);
                                                                      IF CurrFieldNo = FIELDNO("No.") THEN
                                                                        ValidateVendor;
                                                                      //**4PS.en
                                                                    END;
                                                                  Type::"3":
                                                                    ERROR(Text003);
                                                                  Type::"Fixed Asset":
                                                                    BEGIN
                                                                      //**4PS.sn
                                                                      IF ("No." = '') AND (lvPlantCreateFAOnReceipt) THEN BEGIN
                                                                        "Depreciation Book Code" := '';  //**4PS
                                                                        GetFAPostingGroup;
                                                                      END ELSE BEGIN
                                                                      //**4PS.en
                                                                        FA.GET("No.");
                                                                        FA.TESTFIELD(Inactive,FALSE);
                                                                        FA.TESTFIELD(Blocked,FALSE);
                                                                        "Depreciation Book Code" := '';  //**4PS
                                                                        GetFAPostingGroup;
                                                                        Description := FA.Description;
                                                                        "Description 2" := FA."Description 2";
                                                                      END;  //**4PS.n
                                                                      "Allow Invoice Disc." := FALSE;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                    END;
                                                                  Type::"Charge (Item)":
                                                                    BEGIN
                                                                      ItemCharge.GET("No.");
                                                                      Description := ItemCharge.Description;
                                                                      "Gen. Prod. Posting Group" := ItemCharge."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := ItemCharge."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := ItemCharge."Tax Group Code";
                                                                      "Allow Invoice Disc." := FALSE;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                      "Indirect Cost %" := 0;
                                                                      "Overhead Rate" := 0;
                                                                    END;
                                                                END;

                                                                VALIDATE("Prepayment %");

                                                                // ExFlow
                                                                IF PurchHeader.Approve THEN BEGIN
                                                                  IF (xRec."No." <> "No.") AND (Type IN [Type::"G/L Account",Type::"Fixed Asset"]) THEN BEGIN
                                                                    VALIDATE("Direct Unit Cost", xRec."Direct Unit Cost");
                                                                    VALIDATE("Line Discount %", xRec."Line Discount %");
                                                                    IF xRec.Description <> '' THEN BEGIN
                                                                      DocLine."Line Type" := xRec.Type;
                                                                      DocLine."No." := xRec."No.";
                                                                      IF xRec.Description <> DocLine.GetName THEN
                                                                        Description := xRec.Description;
                                                                    END;
                                                                  END;

                                                                  IF ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN BEGIN
                                                                    IF Type > 0 THEN BEGIN
                                                                      IF ExFlowSetup.GET THEN BEGIN
                                                                        IF "Gen. Prod. Posting Group" = '' THEN
                                                                          "Gen. Prod. Posting Group" := ExFlowSetup."Std. Prod. Posting Group";

                                                                        IF "VAT Prod. Posting Group" = '' THEN
                                                                          "VAT Prod. Posting Group" := ExFlowSetup."Std. VAT Prod. Posting Group";

                                                                        IF PurchHeader."Propose VAT Line" THEN
                                                                          IF Type = Type::"Fixed Asset" THEN
                                                                            VALIDATE("VAT Prod. Posting Group", ExFlowSetup."VAT Prod. Posting Group 0%")
                                                                          ELSE
                                                                            "VAT Prod. Posting Group" := ExFlowSetup."VAT Prod. Posting Group 0%";
                                                                      END;
                                                                    END;
                                                                  END;
                                                                END;
                                                                // ExFlow

                                                                IF Type <> Type::" " THEN BEGIN
                                                                  IF Type <> Type::"Fixed Asset" THEN
                                                                    // ExFlow
                                                                    IF NOT ChangeJournalLine.GET("Document Type","Document No.","Line No.","Line No.") THEN
                                                                    // ExFlow
                                                                    VALIDATE("VAT Prod. Posting Group");
                                                                  IF "Line No." = xRec."Line No." THEN //**4PS.n
                                                                    Quantity := xRec.Quantity;
                                                                  VALIDATE("Unit of Measure Code");
                                                                  IF Quantity <> 0 THEN BEGIN
                                                                    InitOutstanding;
                                                                    IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                                                                      InitQtyToShip
                                                                    ELSE
                                                                      InitQtyToReceive;
                                                                  END;
                                                                  UpdateWithWarehouseReceive;
                                                                  UpdateDirectUnitCost(FIELDNO("No."));
                                                                  //IF xRec."Job No." <> '' THEN //**4PS.o
                                                                  //  VALIDATE("Job No.",xRec."Job No."); //**4PS.o
                                                                  "Job Line Type" := xRec."Job Line Type";
                                                                  IF xRec."Job Task No." <> '' THEN BEGIN
                                                                    VALIDATE("Job Task No.",xRec."Job Task No.");
                                                                    IF "No." = xRec."No." THEN
                                                                      VALIDATE("Job Planning Line No.",xRec."Job Planning Line No.");
                                                                  END;
                                                                END;

                                                                // ExFlow ->
                                                                DoNotUpdateDim := FALSE;
                                                                IF PurchHeader.Approve THEN
                                                                  IF ((xRec."No." <> '') OR (xRec."Line Amount" <> 0)) AND (Type > 0) THEN
                                                                    IF ("Document Type" IN ["Document Type"::Invoice,
                                                                                            "Document Type"::"Credit Memo",
                                                                                            "Document Type"::Order,
                                                                                            "Document Type"::Quote]) THEN BEGIN
                                                                      ExFlowSetup.GET;
                                                                      IF ExFlowSetup."Do Not Upd Dim Purchase Line" OR
                                                                         ("ExFlow Order No." <> '')
                                                                      THEN BEGIN
                                                                        DoNotUpdateDim := TRUE;
                                                                        "Shortcut Dimension 1 Code" := xRec."Shortcut Dimension 1 Code";
                                                                        "Shortcut Dimension 2 Code" := xRec."Shortcut Dimension 2 Code";
                                                                      END;
                                                                    END;
                                                                IF NOT DoNotUpdateDim THEN
                                                                // <- ExFlow
                                                                IF NOT ISTEMPORARY THEN
                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID3(Type),"No.",
                                                                    DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n
                                                                    DATABASE::"Plant Type", "Plant Type", //**4PS.n
                                                                    DATABASE::Job,"Job No.",
                                                                    DATABASE::"Service Order","Service Order No.",  //**4PS.n
                                                                    DATABASE::"Responsibility Center","Responsibility Center",
                                                                    DATABASE::"Work Center","Work Center No.");

                                                                PurchHeader.GET("Document Type","Document No.");
                                                                UpdateItemReference;

                                                                GetDefaultBin;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(TRUE);
                                                                  UpdateJobPrices;
                                                                END;

                                                                //**4PS.sn
                                                                IF NOT CreateFromReqLine THEN
                                                                  StrategicPurchMgt.FindContractForPurchaseLine(Rec);
                                                                //**4PS.en

                                                                //PSSE, construction tax (Byggmoms)
                                                                IF PurchHeader.GET("Document Type","Document No.") THEN
                                                                  IF l_Vendor.GET(PurchHeader."Buy-from Vendor No.") THEN
                                                                    IF l_Vendor."VAT Prod. Posting Grp to lines" THEN
                                                                      VALIDATE("VAT Prod. Posting Group",l_Vendor."VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=No. }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No),
                                                                                 Project Filter=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                IF "Location Code" <> '' THEN
                                                                  IF IsServiceItem THEN
                                                                    Item.TESTFIELD(Type,Item.Type::Inventory);
                                                                IF xRec."Location Code" <> "Location Code" THEN BEGIN
                                                                  IF "Prepmt. Amt. Inv." <> 0 THEN
                                                                    IF NOT CONFIRM(Text046,FALSE,FIELDCAPTION("Direct Unit Cost"),FIELDCAPTION("Location Code")) THEN BEGIN
                                                                      "Location Code" := xRec."Location Code";
                                                                      EXIT;
                                                                    END;
                                                                  TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                  TESTFIELD("Receipt No.",'');

                                                                  TESTFIELD("Return Qty. Shipped Not Invd.",0);
                                                                  TESTFIELD("Return Shipment No.",'');
                                                                END;

                                                                //M23305 sn
                                                                IF GetSKU THEN BEGIN
                                                                  IF (SKU.Consignment) AND (Type <> Type::Item) THEN
                                                                    ERROR(Text11012032);
                                                                END;
                                                                //M23305 en

                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Location Code"),"Sales Order No.");
                                                                IF "Special Order" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Location Code"),"Special Order Sales No.");

                                                                IF "Location Code" <> xRec."Location Code" THEN
                                                                  InitItemAppl;

                                                                IF (xRec."Location Code" <> "Location Code") AND (Quantity <> 0) THEN BEGIN
                                                                  ReservePurchLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                  UpdateWithWarehouseReceive;
                                                                END;
                                                                "Bin Code" := '';

                                                                //**4PS.so
                                                                //IF Type = Type::Item THEN
                                                                //  UpdateDirectUnitCost(FIELDNO("Location Code"));  //db, 21-12-10: for SKU price not relevant (ItemCostMgt.UpdateSKUFromItem)
                                                                //**4PS.eo

                                                                IF "Location Code" = '' THEN BEGIN
                                                                  IF InvtSetup.GET THEN
                                                                    "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
                                                                END ELSE
                                                                  IF Location.GET("Location Code") THEN
                                                                    "Inbound Whse. Handling Time" := Location."Inbound Whse. Handling Time";

                                                                //**4PS.sn
                                                                //*C007227.so
                                                                //CreateDim(
                                                                //  DimMgt.TypeToTableID3(Type),"No.",
                                                                //  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."),
                                                                //  DATABASE::"Plant Type", "Plant Type",
                                                                //  DATABASE::Job,"Job No.",
                                                                //  DATABASE::"Service Order","Service Order No.",
                                                                //  DATABASE::"Responsibility Center","Responsibility Center",
                                                                //  DATABASE::"Work Center","Work Center No.",
                                                                //  DATABASE::Location,"Location Code"); //**4PS.n
                                                                //*C007227.eo
                                                                //**4PS.en

                                                                UpdateLeadTimeFields;
                                                                UpdateDates;

                                                                GetDefaultBin;
                                                                CheckWMS;

                                                                IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                  ValidateReturnReasonCode(FIELDNO("Location Code"));
                                                                ValidateShelf; //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 8   ;   ;Posting Group       ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group"
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "FA Posting Group"
                                                                 ELSE IF (Type=CONST(G/L Account),
                                                                          Plant Type=FILTER(<>'')) "Plant Posting Group";
                                                   CaptionML=ENU=Posting Group;
                                                   Editable=No }
    { 10  ;   ;Expected Receipt Date;Date         ;OnValidate=BEGIN
                                                                IF NOT TrackingBlocked THEN
                                                                  CheckDateConflict.PurchLineCheck(Rec,CurrFieldNo <> 0);

                                                                CheckReservationDateConflict(FIELDNO("Expected Receipt Date"));

                                                                IF "Expected Receipt Date" <> 0D THEN
                                                                  VALIDATE(
                                                                    "Planned Receipt Date",
                                                                    CalendarMgmt.CalcDateBOC2(InternalLeadTimeDays("Expected Receipt Date"),"Expected Receipt Date",
                                                                      CalChange."Source Type"::Location,"Location Code",'',
                                                                      CalChange."Source Type"::Location,"Location Code",'',FALSE))
                                                                ELSE
                                                                  VALIDATE("Planned Receipt Date","Expected Receipt Date");
                                                              END;

                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Expected Receipt Date }
    { 11  ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF Description <> xRec.Description THEN
                                                                  TestStatusOpen;
                                                                IF (Type = Type::"G/L Account") AND ("No." = '') AND
                                                                   (CurrFieldNo = FIELDNO(Description)) THEN BEGIN  //db, 25-11-04: M5848 (due to TESTFIELD(Type) in UpdateAmount)
                                                                  "Job No." := '';
                                                                  "Main Project No." := '';
                                                                  Type := Type::" ";
                                                                END;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Description }
    { 12  ;   ;Description 2       ;Text50        ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF "Description 2" <> xRec."Description 2" THEN
                                                                  TestStatusOpen;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Description 2 }
    { 13  ;   ;Unit of Measure     ;Text10        ;CaptionML=ENU=Unit of Measure }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                StrategicPurchMgt@1100525000 : Codeunit 11020211;
                                                                Vendor@1100525001 : Record 23;
                                                                CurrentContract@1100525002 : 'No Contract,Contract,Contract with Discount Agreement';
                                                                TradeItem@1100525003 : Record 11012317;
                                                                Text001@1100525004 : TextConst 'ENU=No discount lines found for %1. Ordering not allowed.';
                                                                InventorySetup@1100525005 : Record 313;
                                                              BEGIN
                                                                //**4PS.sn
                                                                IF ("Blanket Order No." = '') AND (Quantity <> 0) AND
                                                                  StrategicPurchMgt.IsLimitedPurchaser("Document Type")
                                                                THEN BEGIN
                                                                  Vendor.GET("Buy-from Vendor No.");
                                                                  StrategicPurchMgt.GetVendorContract(Vendor,CurrentContract);
                                                                  IF (NOT "Vendor Charge") AND
                                                                    (NOT "Removal Contribution") AND
                                                                    (CurrentContract <> CurrentContract::Contract) AND
                                                                    (
                                                                      (CurrentContract <> CurrentContract::"Contract with Discount Agreement")
                                                                      OR
                                                                      ((CurrentContract = CurrentContract::"Contract with Discount Agreement") AND
                                                                      (NOT TradeItem.GET("Vendor (Trade Item)","Trade Item")))
                                                                      OR
                                                                      ((CurrentContract = CurrentContract::"Contract with Discount Agreement") AND
                                                                      (NOT StrategicPurchMgt.DiscountTermExists(TradeItem)))
                                                                    )
                                                                  THEN BEGIN
                                                                    TradeItem.SETRECFILTER;
                                                                    ERROR(Text001,TradeItem.GETFILTERS);
                                                                  END;
                                                                END;

                                                                Quantity := CheckDeliverableQuantity;

                                                                IF ("Document Type" = "Document Type"::Order) AND (Quantity <> 0) THEN BEGIN
                                                                  GetPurchHeader;
                                                                  IF (Quantity > 0) AND (PurchHeader."Purchase Order Type" = PurchHeader."Purchase Order Type"::"Return Order") THEN BEGIN
                                                                    IF NOT CheckReturnOrderAdminCostLine(PurchHeader, Rec) THEN
                                                                      FIELDERROR(Quantity, Text11012015);
                                                                  END;
                                                                  IF (Quantity < 0) AND (PurchHeader."Purchase Order Type" = PurchHeader."Purchase Order Type"::"Blanket Order") THEN
                                                                    FIELDERROR(Quantity, Text11012016);
                                                                  CheckBlanketOrder(TRUE);  //*23204.n
                                                                END;

                                                                IF ("Document Type" = "Document Type"::"Blanket Order") THEN BEGIN
                                                                  CALCFIELDS("Quantity Released");
                                                                  IF Quantity < "Quantity Released" THEN
                                                                    FIELDERROR(Quantity, STRSUBSTNO(Text11012029, Quantity, FIELDCAPTION("Quantity Released"), "Quantity Released"));
                                                                END;

                                                                //Call 26248
                                                                IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                  IF ("Employee No." <> '') THEN BEGIN
                                                                    //Posting Hours
                                                                    CheckProjectStatus(TRUE);
                                                                    CheckServiceOrderStatus(TRUE)
                                                                  END ELSE BEGIN
                                                                    CheckProjectStatus(FALSE);
                                                                    CheckServiceOrderStatus(FALSE);
                                                                  END;
                                                                END;
                                                                //
                                                                //**4PS.en

                                                                TestStatusOpen;

                                                                IF "Drop Shipment" AND ("Document Type" <> "Document Type"::Invoice) THEN
                                                                  IF CurrFieldNo = FIELDNO(Quantity) THEN  //**4PS.n: db, 12-03-10: M18490
                                                                    ERROR(
                                                                      Text001,
                                                                      FIELDCAPTION(Quantity),"Sales Order No.");
                                                                "Quantity (Base)" := CalcBaseQty(Quantity);
                                                                IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                                                                  IF (Quantity * "Return Qty. Shipped" < 0) OR
                                                                     ((ABS(Quantity) < ABS("Return Qty. Shipped")) AND ("Return Shipment No." = ''))
                                                                  THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text004,FIELDCAPTION("Return Qty. Shipped")));
                                                                  IF ("Quantity (Base)" * "Return Qty. Shipped (Base)" < 0) OR
                                                                     ((ABS("Quantity (Base)") < ABS("Return Qty. Shipped (Base)")) AND ("Return Shipment No." = ''))
                                                                  THEN
                                                                    FIELDERROR("Quantity (Base)",STRSUBSTNO(Text004,FIELDCAPTION("Return Qty. Shipped (Base)")));
                                                                END ELSE BEGIN
                                                                  IF (Quantity * "Quantity Received" < 0) OR
                                                                     ((ABS(Quantity) < ABS("Quantity Received")) AND ("Receipt No." = ''))
                                                                  THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text004,FIELDCAPTION("Quantity Received")));

                                                                //  C009469 sn  DP00556
                                                                  IF (Quantity * "Quantity Invoiced" < 0) OR
                                                                     ((ABS(Quantity) < ABS("Quantity Invoiced")) AND ("Receipt No." = ''))
                                                                  THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text004,FIELDCAPTION("Quantity Invoiced")));
                                                                //  C009469 en

                                                                  IF ("Quantity (Base)" * "Qty. Received (Base)" < 0) OR
                                                                     ((ABS("Quantity (Base)") < ABS("Qty. Received (Base)")) AND ("Receipt No." = ''))
                                                                  THEN
                                                                    FIELDERROR("Quantity (Base)",STRSUBSTNO(Text004,FIELDCAPTION("Qty. Received (Base)")));
                                                                END;

                                                                IF (Type = Type::"Charge (Item)") AND (CurrFieldNo <> 0) THEN BEGIN
                                                                  IF (Quantity = 0) AND ("Qty. to Assign" <> 0) THEN
                                                                    FIELDERROR("Qty. to Assign",STRSUBSTNO(Text011,FIELDCAPTION(Quantity),Quantity));
                                                                  IF (Quantity * "Qty. Assigned" < 0) OR (ABS(Quantity) < ABS("Qty. Assigned")) THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text004,FIELDCAPTION("Qty. Assigned")));
                                                                END;

                                                                IF "Receipt No." <> '' THEN
                                                                  CheckReceiptRelation
                                                                ELSE
                                                                  IF "Return Shipment No." <> '' THEN
                                                                    CheckRetShptRelation;

                                                                //**4PS.sn  27644
                                                                IF (Quantity <> 0) AND ("Plant Type" <> '') AND ("Plant No." <> '') AND ("Cost Component Plant" <> '') THEN BEGIN
                                                                  //*31530.so
                                                                  //PlantNoRec.GET("Plant Type", "Plant No.");
                                                                  //PlantNoRec.CALCFIELDS(Bulk);
                                                                  //IF NOT PlantNoRec.Bulk THEN BEGIN
                                                                  //*31530.eo
                                                                  //*31530.sn
                                                                  CheckCompanyIC;
                                                                  PlantTypeRec.GET("Plant Type");
                                                                  IF NOT PlantTypeRec.Bulk THEN BEGIN
                                                                  //*31530.en
                                                                    //IF CheckPlantAcquisitionOrRent(Rec) IN [1, 2] THEN BEGIN  //*28582.o
                                                                    IF CheckPlantAcquisitionOrRent(Rec) = 1 THEN BEGIN  //*28582.n
                                                                      IF "Qty. per Unit of Measure" IN [0, 1] THEN
                                                                        TESTFIELD(Quantity, 1)
                                                                      ELSE
                                                                        TESTFIELD("Quantity (Base)", 1);
                                                                    END;
                                                                  END;
                                                                END;
                                                                IF (Quantity < 0) AND ("Plant Type" <> '') AND ("Cost Component Plant" <> '') THEN BEGIN  //C008579.sn
                                                                  IF CheckPlantAcquisitionOrRent(Rec) IN [1, 2] THEN
                                                                    FIELDERROR(Quantity, Text11012036);
                                                                END;  //C008579.en

                                                                //C015688.sn
                                                                IF Quantity <> 0 THEN BEGIN
                                                                  GetPurchHeader;
                                                                  IF PurchHeader."Amounts only" THEN
                                                                    TESTFIELD(Quantity,0);
                                                                END;
                                                                //C015688.en

                                                                CalculateICMQuantity;
                                                                //**4PS.en
                                                                //**4PS.so
                                                                //IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") OR
                                                                //   ("No." = xRec."No.")
                                                                //THEN BEGIN
                                                                //**4PS.eo
                                                                  InitOutstanding;
                                                                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                                                                    InitQtyToShip
                                                                  ELSE
                                                                    InitQtyToReceive;
                                                                //END; //**4PS.o
                                                                IF (Quantity * xRec.Quantity < 0) OR (Quantity = 0) THEN
                                                                  InitItemAppl;

                                                                //IF Type = Type::Item THEN  //**4PS.o
                                                                //IF ("Item No." <> '') OR (CheckPlantAcquisitionOrRent(Rec) <> 0) THEN //**4PS.n / 4PS.o
                                                                IF ("Item No." <> '') THEN   //**4PS.n      Not anymore Plant Price determine again field 'Quantity'
                                                                  UpdateDirectUnitCost(FIELDNO(Quantity))
                                                                ELSE
                                                                  VALIDATE("Line Discount %");

                                                                //**4PS.sn
                                                                CheckSigns;
                                                                IF (Quantity <> xRec.Quantity) AND (CurrFieldNo = FIELDNO(Quantity)) THEN
                                                                  CheckMultiplePlantReorderQty();
                                                                //**4PS.en

                                                                UpdateWithWarehouseReceive;
                                                                IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") THEN BEGIN
                                                                  ReservePurchLine.VerifyQuantity(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                  CheckApplToItemLedgEntry;
                                                                END;

                                                                IF (xRec.Quantity <> Quantity) AND (Quantity = 0) AND
                                                                  ((Amount<>0) OR ("Amount Including VAT"<>0) OR ("VAT Base Amount"<>0))
                                                                THEN BEGIN
                                                                  Amount := 0;
                                                                  "Amount Including VAT" := 0;
                                                                  "VAT Base Amount" := 0;
                                                                END;

                                                                IF ("Document Type" = "Document Type"::Invoice) AND ("Prepayment %" <> 0) THEN
                                                                  UpdatePrePaymentAmounts;

                                                                IF "Job Planning Line No." <> 0 THEN
                                                                  VALIDATE("Job Planning Line No.");

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(TRUE);
                                                                  UpdateJobPrices;
                                                                END;
                                                                CheckWMS;

                                                                // ExFlow ->
                                                                IF (Type <> Type::" ") AND (Quantity <> 0)
                                                                  AND ExFlowSetup.GET THEN BEGIN
                                                                  ExFlow.SetReceiptNoMand(PurchHeader,Rec);

                                                                  ExFlow.SetApproveForPurchLine(PurchHeader,Rec);
                                                                END;
                                                                // <- ExFlow

                                                                //**4PS.sn
                                                                IF Quantity <> 0 THEN BEGIN
                                                                  IF ("No." <> '') OR ("Item No." <> '') THEN
                                                                    "Parcels Qty. per UoM" := Item."Parcels Qty."
                                                                  ELSE
                                                                    "Parcels Qty. per UoM" := 1;
                                                                  InventorySetup.GET();
                                                                  IF InventorySetup."Default Number of Labels" <> 0 THEN
                                                                    "Number of Labels" := InventorySetup."Default Number of Labels"
                                                                  ELSE
                                                                    "Number of Labels" := 1;
                                                                END;

                                                                InventoryReservation("Item No."); //**4PS.n #32924
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 16  ;   ;Outstanding Quantity;Decimal       ;CaptionML=ENU=Outstanding Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 17  ;   ;Qty. to Invoice     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Qty. to Invoice" = MaxQtyToInvoice THEN
                                                                  InitQtyToInvoice
                                                                ELSE
                                                                  "Qty. to Invoice (Base)" := CalcBaseQty("Qty. to Invoice");
                                                                IF ("Qty. to Invoice" * Quantity < 0) OR (ABS("Qty. to Invoice") > ABS(MaxQtyToInvoice)) THEN
                                                                  ERROR(
                                                                    Text006,
                                                                    MaxQtyToInvoice);
                                                                IF ("Qty. to Invoice (Base)" * "Quantity (Base)" < 0) OR (ABS("Qty. to Invoice (Base)") > ABS(MaxQtyToInvoiceBase)) THEN
                                                                  ERROR(
                                                                    Text007,
                                                                    MaxQtyToInvoiceBase);
                                                                "VAT Difference" := 0;
                                                                CalcInvDiscToInvoice;
                                                                CalcPrepaymentToDeduct;

                                                                IF "Job Planning Line No." <> 0 THEN
                                                                  VALIDATE("Job Planning Line No.");
                                                              END;

                                                   CaptionML=ENU=Qty. to Invoice;
                                                   DecimalPlaces=0:5 }
    { 18  ;   ;Qty. to Receive     ;Decimal       ;OnValidate=BEGIN
                                                                GetLocation("Location Code");
                                                                IF (CurrFieldNo <> 0) AND
                                                                   //(Type = Type::Item) AND  //**4PS.o
                                                                   ((Type = Type::Item) OR ("Item No." <> '')) AND //**4PS.n (db, 02-11-10)
                                                                   (NOT "Drop Shipment")
                                                                THEN BEGIN
                                                                  IF Location."Require Receive" AND
                                                                     ("Qty. to Receive" <> 0)
                                                                  THEN
                                                                    CheckWarehouse;
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                END;

                                                                IF "Qty. to Receive" = Quantity - "Quantity Received" THEN
                                                                BEGIN                        //**4PS.n
                                                                  OnlyCheckForOpen := TRUE;  //**4PS.n
                                                                  InitQtyToReceive;
                                                                END                          //**4PS.n
                                                                ELSE BEGIN
                                                                  "Qty. to Receive (Base)" := CalcBaseQty("Qty. to Receive");
                                                                  InitQtyToInvoice;
                                                                END;
                                                                //**4PS.so
                                                                //IF ((("Qty. to Receive" < 0) XOR (Quantity < 0)) AND (Quantity <> 0) AND ("Qty. to Receive" <> 0)) OR
                                                                //   (ABS("Qty. to Receive") > ABS("Outstanding Quantity")) OR
                                                                //   (((Quantity < 0 ) XOR ("Outstanding Quantity" < 0)) AND (Quantity <> 0) AND ("Outstanding Quantity" <> 0))
                                                                //THEN
                                                                //  ERROR(
                                                                //    Text008,
                                                                //    "Outstanding Quantity");
                                                                //IF ((("Qty. to Receive (Base)" < 0) XOR ("Quantity (Base)" < 0)) AND ("Quantity (Base)" <> 0) AND ("Qty. to Receive (Base)" <> 0)) OR
                                                                //   (ABS("Qty. to Receive (Base)") > ABS("Outstanding Qty. (Base)")) OR
                                                                //   ((("Quantity (Base)" < 0) XOR ("Outstanding Qty. (Base)" < 0)) AND ("Quantity (Base)" <> 0) AND ("Outstanding Qty. (Base)" <> 0))
                                                                //THEN
                                                                //  ERROR(
                                                                //    Text009,
                                                                //    "Outstanding Qty. (Base)");
                                                                //**4PS.eo

                                                                IF (CurrFieldNo <> 0) AND (Type = Type::Item) AND ("Qty. to Receive" < 0) THEN
                                                                  CheckApplToItemLedgEntry;

                                                                IF "Job Planning Line No." <> 0 THEN
                                                                  VALIDATE("Job Planning Line No.");
                                                                //**4PS.sn
                                                                IF Quantity > 0 THEN BEGIN
                                                                  IF NOT "Allow Exceeding Order Quantity" AND
                                                                     ("Qty. to Receive" > "Outstanding Quantity")
                                                                  THEN
                                                                    ERROR(
                                                                      Text008,
                                                                      "Outstanding Quantity");
                                                                  IF ("Qty. to Receive" < -"Quantity Received") THEN
                                                                    ERROR(
                                                                      Text008,
                                                                      -"Quantity Received");
                                                                END ELSE BEGIN
                                                                  IF NOT "Allow Exceeding Order Quantity" AND
                                                                     ("Qty. to Receive" < "Outstanding Quantity")
                                                                  THEN
                                                                    ERROR(
                                                                      Text008,
                                                                      "Outstanding Quantity");
                                                                  IF ("Qty. to Receive" > -"Quantity Received") THEN
                                                                    ERROR(
                                                                      Text008,
                                                                      -"Quantity Received");
                                                                END;

                                                                IF "Quantity (Base)" > 0 THEN BEGIN
                                                                  IF NOT "Allow Exceeding Order Quantity" AND
                                                                     ("Qty. to Receive (Base)" > "Outstanding Qty. (Base)")
                                                                  THEN
                                                                    ERROR(
                                                                      Text009,
                                                                      "Outstanding Qty. (Base)");
                                                                  IF ("Qty. to Receive (Base)" < -"Qty. Received (Base)") THEN
                                                                    ERROR(
                                                                      Text009,
                                                                      -"Qty. Received (Base)");
                                                                END ELSE BEGIN
                                                                  IF NOT "Allow Exceeding Order Quantity" AND
                                                                     ("Qty. to Receive (Base)" < "Outstanding Qty. (Base)")
                                                                  THEN
                                                                    ERROR(
                                                                      Text009,
                                                                      "Outstanding Qty. (Base)");
                                                                  IF ("Qty. to Receive (Base)" > -"Qty. Received (Base)") THEN
                                                                    ERROR(
                                                                      Text009,
                                                                      -"Qty. Received (Base)");
                                                                END;
                                                                //**4PS.en
                                                              END;

                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Qty. to Receive;
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Direct Unit Cost    ;Decimal       ;OnValidate=VAR
                                                                Currency2@1100528200 : Record 4;
                                                              BEGIN
                                                                //**4PS.sn
                                                                IF CurrFieldNo <> FIELDNO(Quantity) THEN //T004095
                                                                  CheckReceiptRelationAmount(FIELDNO("Direct Unit Cost"));
                                                                GetPurchHeader;
                                                                IF PurchHeader."Amounts only" THEN BEGIN
                                                                  IF ("Document Type" = "Document Type"::Order) AND ("Direct Unit Cost" >= 0) AND
                                                                     (PurchHeader."Purchase Order Type" = PurchHeader."Purchase Order Type"::"Return Order")
                                                                  THEN
                                                                    FIELDERROR("Direct Unit Cost", Text11012015);
                                                                END;
                                                                //**4PS.en

                                                                VALIDATE("Line Discount %");

                                                                //**4PS.sn
                                                                IF (CurrFieldNo = FIELDNO("Direct Unit Cost")) THEN BEGIN
                                                                  IF "Item No." + "Basic Item" + "Trade Item" = '' THEN
                                                                    IF "Discount % (Item)" = 0 THEN BEGIN
                                                                      Currency2.InitRoundingPrecision;
                                                                      IF PurchHeader."Currency Code" <> '' THEN
                                                                        "Unit Price (LCY)" := ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                                                                          1,PurchHeader."Job No.", GetDate, "Currency Code",
                                                                          "Direct Unit Cost", PurchHeader."Currency Factor",FALSE),
                                                                          Currency2."Amount Rounding Precision")
                                                                      ELSE
                                                                        "Unit Price (LCY)" := "Direct Unit Cost";
                                                                    END;

                                                                  CalculateItemDiscount;
                                                                END;
                                                                CheckSigns;
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (CurrFieldNo = FIELDNO("Direct Unit Cost")) AND ("Direct Unit Cost" <> xRec."Direct Unit Cost")
                                                                THEN
                                                                  FormPurchOrderPlantRentalRate(Rec,TRUE);
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Direct Unit Cost;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Direct Unit Cost")) }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("No.");
                                                                TESTFIELD(Quantity);

                                                                IF "Prod. Order No." <> '' THEN
                                                                  ERROR(
                                                                    Text99000000,
                                                                    FIELDCAPTION("Unit Cost (LCY)"));

                                                                IF CurrFieldNo = FIELDNO("Unit Cost (LCY)") THEN
                                                                  IF (Type = Type::Item) OR
                                                                     ((Type = Type::"G/L Account") AND ("Item No." <> '')) THEN BEGIN  //**4PS.n M26024
                                                                    GetItem;
                                                                    IF Item."Costing Method" = Item."Costing Method"::Standard THEN
                                                                      ERROR(
                                                                        Text010,
                                                                        FIELDCAPTION("Unit Cost (LCY)"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                  END;

                                                                CalculateItemDiscount;  //**4PS.n

                                                                UnitCostCurrency := "Unit Cost (LCY)";
                                                                GetPurchHeader;
                                                                IF PurchHeader."Currency Code" <> '' THEN BEGIN
                                                                  PurchHeader.TESTFIELD("Currency Factor");
                                                                  GetGLSetup;
                                                                  UnitCostCurrency :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtLCYToFCY(
                                                                        1,PurchHeader."Job No.", //**4PS.n
                                                                        GetDate, "Currency Code",
                                                                //      "Unit Cost (LCY)",PurchHeader."Currency Factor"), //**4PS.o
                                                                        "Unit Cost (LCY)",PurchHeader."Currency Factor",FALSE), //**4PS.n
                                                                      GLSetup."Unit-Amount Rounding Precision");
                                                                END;

                                                                IF ("Direct Unit Cost" <> 0) AND
                                                                   ("Direct Unit Cost" <> ("Line Discount Amount" / Quantity))
                                                                THEN
                                                                  "Indirect Cost %" :=
                                                                    ROUND(
                                                                      (UnitCostCurrency - "Direct Unit Cost" + "Line Discount Amount" / Quantity) /
                                                                      ("Direct Unit Cost" - "Line Discount Amount" / Quantity) * 100,0.00001)
                                                                ELSE
                                                                  "Indirect Cost %" := 0;

                                                                UpdateSalesCost;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Unit Cost (LCY)","Unit Cost (LCY)");
                                                                  UpdateJobPrices;
                                                                END
                                                              END;

                                                   CaptionML=ENU=Unit Cost (LCY);
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=ENU=VAT %;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 27  ;   ;Line Discount %     ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                GetPurchHeader;
                                                                //**4PS.sn  (C-010732)
                                                                IF PurchHeader."Amounts only" THEN
                                                                  "Line Discount Amount" :=
                                                                    ROUND(
                                                                      ROUND("Direct Unit Cost",Currency."Amount Rounding Precision") *
                                                                      "Line Discount %" / 100,
                                                                      Currency."Amount Rounding Precision")
                                                                ELSE
                                                                //**4PS.en
                                                                 "Line Discount Amount" :=
                                                                   ROUND(
                                                                     ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") *
                                                                     "Line Discount %" / 100,
                                                                     Currency."Amount Rounding Precision");
                                                                IF NOT "Allow Invoice Disc." OR ("Line Discount Amount" <> 0) THEN BEGIN //**4PS.n C027348
                                                                  "Inv. Discount Amount" := 0;
                                                                  "Inv. Disc. Amount to Invoice" := 0;
                                                                END; //**4PS.n C027348
                                                                UpdateAmounts;
                                                                UpdateUnitCost;

                                                                //**4PS.sn
                                                                IF ("Line Discount %" < 0) AND (CurrFieldNo = FIELDNO("Line Discount %")) THEN
                                                                  MESSAGE(Text11012019);
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Line Discount %;
                                                   DecimalPlaces=0:5;
                                                   MaxValue=100 }
    { 28  ;   ;Line Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                GetPurchHeader;
                                                                "Line Discount Amount" := ROUND("Line Discount Amount",Currency."Amount Rounding Precision");
                                                                TestStatusOpen;
                                                                //TESTFIELD(Quantity); //**4PS.o
                                                                IF xRec."Line Discount Amount" <> "Line Discount Amount" THEN
                                                                //**4PS.sn
                                                                BEGIN
                                                                  GetPurchHeader;  //**4PS.n  (C-010732)
                                                                  IF (NOT PurchHeader."Amounts only") THEN BEGIN  //**4PS.n  (C-010732)
                                                                    TESTFIELD(Quantity);
                                                                //**4PS.en
                                                                    IF ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") <> 0 THEN
                                                                      "Line Discount %" :=
                                                                        ROUND(
                                                                          "Line Discount Amount" /
                                                                          ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") * 100,
                                                                          0.00001)
                                                                    ELSE
                                                                      "Line Discount %" := 0;
                                                                //**4PS.sn   (C-010732)
                                                                  END ELSE BEGIN
                                                                    IF ROUND("Direct Unit Cost",Currency."Amount Rounding Precision") <> 0 THEN
                                                                      "Line Discount %" :=
                                                                        ROUND(
                                                                          "Line Discount Amount" /
                                                                          ROUND("Direct Unit Cost",Currency."Amount Rounding Precision") * 100,
                                                                          0.00001)
                                                                    ELSE
                                                                      "Line Discount %" := 0;
                                                                  END;
                                                                END;
                                                                IF NOT "Allow Invoice Disc." OR ("Line Discount Amount" <> 0) THEN BEGIN //C027348.n
                                                                //**4PS.en
                                                                  "Inv. Discount Amount" := 0;
                                                                  "Inv. Disc. Amount to Invoice" := 0;
                                                                END; //**4PS.n C027348
                                                                UpdateAmounts;
                                                                UpdateUnitCost;

                                                                //**4PS.sn
                                                                IF ("Line Discount %" < 0) AND (CurrFieldNo = FIELDNO("Line Discount Amount")) THEN
                                                                  MESSAGE(Text11012019);
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Line Discount Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 29  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                GetPurchHeader;
                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");

                                                                //**4PS.sn
                                                                IF "Manually VAT Posting" THEN
                                                                  "VAT Base Amount" := Amount
                                                                ELSE
                                                                //**4PS.en
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount * (1 - PurchHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                                                                      "Amount Including VAT" :=
                                                                        ROUND(Amount + "VAT Base Amount" * "VAT %" / 100,Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    IF Amount <> 0 THEN
                                                                      FIELDERROR(Amount,
                                                                        STRSUBSTNO(
                                                                          Text011,FIELDCAPTION("VAT Calculation Type"),
                                                                          "VAT Calculation Type"));
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      PurchHeader.TESTFIELD("VAT Base Discount %",0);
                                                                      "VAT Base Amount" := Amount;
                                                                      IF "Use Tax" THEN
                                                                        "Amount Including VAT" := "VAT Base Amount"
                                                                      ELSE BEGIN
                                                                        "Amount Including VAT" :=
                                                                          Amount +
                                                                          ROUND(
                                                                            SalesTaxCalculate.CalculateTax(
                                                                              "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
                                                                              "VAT Base Amount","Quantity (Base)",PurchHeader."Currency Factor"),
                                                                            Currency."Amount Rounding Precision");
                                                                        IF "VAT Base Amount" <> 0 THEN
                                                                          "VAT %" :=
                                                                            ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                                                                        ELSE
                                                                          "VAT %" := 0;
                                                                      END;
                                                                    END;
                                                                END;

                                                                "Line VAT Amount" := "Amount Including VAT" - Amount;   //**4PS.n

                                                                InitOutstandingAmount;
                                                                UpdateUnitCost;

                                                                CheckReceiptRelationAmount(FIELDNO(Amount));  //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 30  ;   ;Amount Including VAT;Decimal       ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF CurrFieldNo = FIELDNO("Amount Including VAT") THEN
                                                                  TESTFIELD("Manually VAT Posting",TRUE);
                                                                //**4PS.en

                                                                GetPurchHeader;
                                                                "Amount Including VAT" := ROUND("Amount Including VAT",Currency."Amount Rounding Precision");
                                                                //**4PS.sn
                                                                IF "Manually VAT Posting" THEN
                                                                  "VAT Base Amount" := Amount
                                                                ELSE
                                                                //**4PS.en
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      Amount :=
                                                                        ROUND(
                                                                          "Amount Including VAT" /
                                                                          (1 + (1 - PurchHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
                                                                          Currency."Amount Rounding Precision");
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount * (1 - PurchHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      Amount := 0;
                                                                      "VAT Base Amount" := 0;
                                                                    END;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      PurchHeader.TESTFIELD("VAT Base Discount %",0);
                                                                      IF "Use Tax" THEN BEGIN
                                                                        Amount := "Amount Including VAT";
                                                                        "VAT Base Amount" := Amount;
                                                                      END ELSE BEGIN
                                                                        Amount :=
                                                                          ROUND(
                                                                            SalesTaxCalculate.ReverseCalculateTax(
                                                                              "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
                                                                              "Amount Including VAT","Quantity (Base)",PurchHeader."Currency Factor"),
                                                                            Currency."Amount Rounding Precision");
                                                                        "VAT Base Amount" := Amount;
                                                                        IF "VAT Base Amount" <> 0 THEN
                                                                          "VAT %" :=
                                                                            ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                                                                        ELSE
                                                                          "VAT %" := 0;
                                                                      END;
                                                                    END;
                                                                END;

                                                                //**4PS.sn
                                                                UpdateAmountLCY;
                                                                "Line VAT Amount" := "Amount Including VAT" - Amount;
                                                                //**4PS.en

                                                                InitOutstandingAmount;
                                                                UpdateUnitCost;

                                                                CheckReceiptRelationAmount(FIELDNO("Amount Including VAT"));  //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Amount Including VAT;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 31  ;   ;Unit Price (LCY)    ;Decimal       ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                CalculateCostPriceLCY;
                                                                IF ("Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"]) THEN BEGIN
                                                                  GetPurchHeader;
                                                                  IF (PurchHeader."Amounts only") THEN BEGIN
                                                                    CurrFieldNo := FIELDNO("Unit Price (LCY)");
                                                                    UpdateAmounts;
                                                                  END;
                                                                END;
                                                                //**4PS.sn
                                                              END;

                                                   CaptionML=ENU=Unit Price (LCY);
                                                   AutoFormatType=2 }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Allow Invoice Disc." <> xRec."Allow Invoice Disc.") AND
                                                                   (NOT "Allow Invoice Disc.")
                                                                THEN BEGIN
                                                                  "Inv. Discount Amount" := 0;
                                                                  "Inv. Disc. Amount to Invoice" := 0;
                                                                  UpdateAmounts;
                                                                  UpdateUnitCost;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Allow Invoice Disc. }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=ENU=Gross Weight;
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=ENU=Net Weight;
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=ENU=Units per Parcel;
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=ENU=Unit Volume;
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;OnValidate=BEGIN
                                                                IF "Appl.-to Item Entry" <> 0 THEN
                                                                  "Location Code" := CheckApplToItemLedgEntry;

                                                                //**4PS.sn
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."),
                                                                  DATABASE::"Plant Type", "Plant Type",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Service Order","Service Order No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Work Center","Work Center No.");
                                                                  //DATABASE::Location,"Location Code"); //**4PS.n  //*C007227.o
                                                                //**4PS.en
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry;
                                                            END;

                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=ENU=Appl.-to Item Entry }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation=IF (Receiving Company=FILTER('')) "Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                //**4PS.sn
                                                                CheckCompanyIC;
                                                                IF "Shortcut Dimension 1 Code" <> '' THEN
                                                                  DimMgt.GetDimValueRec(1, "Shortcut Dimension 1 Code", DimVal1Rec, TRUE,'');
                                                                //**4PS.en

                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS.sn
                                                              OnLookupDim1Code(TRUE);
                                                            END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation=IF (Receiving Company=FILTER('')) "Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                                                                 Cost Type=FILTER(<Revenue));
                                                   OnValidate=VAR
                                                                xDimValRec@1100485000 : Record 349;
                                                                CurrCostObject@1100525000 : Code[20];
                                                                lvCompName@1100485001 : Text[50];
                                                              BEGIN
                                                                //**4PS.sn
                                                                TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                TESTFIELD("Quantity Received",0);
                                                                TESTFIELD("Reserved Qty. (Base)",0);
                                                                TESTFIELD("Receipt No.",'');
                                                                GetPurchHeader;
                                                                IF PurchHeader."Amounts only" THEN BEGIN
                                                                  TESTFIELD("Amt. Rcd. Not Invoiced",0);
                                                                  TESTFIELD("Amnt. Received",0);
                                                                END;

                                                                IF "Shortcut Dimension 2 Code" <> '' THEN BEGIN
                                                                  CheckCompanyIC;
                                                                  DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimVal2Rec, TRUE, "Job No.");
                                                                  DimVal2Rec.TESTFIELD(Blocked, FALSE);
                                                                  "Cost Component" := DimVal2Rec."Cost Component";
                                                                  IF "Cost Type" = "Cost Type"::" " THEN BEGIN
                                                                    HideDialog := TRUE;
                                                                    VALIDATE("Cost Type", DimVal2Rec."Cost Type" + 1); //Call 26946
                                                                    HideDialog := FALSE;
                                                                  END;
                                                                  IF "Cost Type" <> DimVal2Rec."Cost Type" + 1 THEN
                                                                    FIELDERROR("Cost Type", Text11012000);
                                                                  CheckCostTypeOrder;
                                                                  IF "Cost Type" <> xRec."Cost Type" THEN
                                                                    CheckCostTypeCondition;  //db, 11-02-11: M25031

                                                                  IF "Receiving Company" <> '' THEN
                                                                    lvCompName := "Receiving Company"
                                                                   ELSE
                                                                    lvCompName := COMPANYNAME;

                                                                  CurrCostObject := "Shortcut Dimension 2 Code";
                                                                  IF "Service Order No." <> '' THEN BEGIN
                                                                    //******* Service Order *********************************************************
                                                                    ServOrderRec.GET("Service Order No.");
                                                                    IF "Additional Cost (Service)" = TRUE THEN BEGIN
                                                                      ServOrderRec.TESTFIELD("Service Type (Other)");
                                                                      ServTypeRec.GET(ServOrderRec."Service Type (Other)");
                                                                    END ELSE BEGIN
                                                                      ServOrderRec.TESTFIELD("Service Type");
                                                                      ServTypeRec.GET(ServOrderRec."Service Type");
                                                                    END;

                                                                    "No." := ServTypeRec.GetWipAcc(ServTypeRec.Code,
                                                                                                   DimVal2Rec."Cost Type",
                                                                                                   lvCompName,
                                                                                                   "Cost Type",
                                                                                                   PurchHeader."Buy-from Vendor No.");

                                                                    VALIDATE("No.");
                                                                    IF "Additional Cost (Service)" = TRUE THEN
                                                                      VALIDATE("Shortcut Dimension 1 Code", ServOrderRec."Department Code (Other)")
                                                                    ELSE
                                                                      VALIDATE("Shortcut Dimension 1 Code", ServOrderRec."Global Dimension 1 Code");
                                                                  END ELSE BEGIN
                                                                    //******* Project *********************************************************
                                                                    IF "Job No." <> '' THEN BEGIN
                                                                      ProjRec.GET("Job No.");
                                                                      ProjRec.TESTFIELD("Project Type");
                                                                      ProjTypeRec.GET(ProjRec."Project Type");
                                                                      IF NOT ReleaseRetention THEN
                                                                        "No." := ProjTypeRec.GetWipAcc(ProjTypeRec.Code,
                                                                                                       DimVal2Rec."Cost Type",
                                                                                                       ProjRec."Project Status",
                                                                                                       ICProjSetupRec."Provisions at Closure",
                                                                                                       lvCompName,
                                                                                                       "Cost Type", PurchHeader."Buy-from Vendor No.");
                                                                      VALIDATE("No.");
                                                                      //**4PS05.sn
                                                                      IF DimVal2Rec.Element <> '' THEN
                                                                        IF "Job No." <> '' THEN
                                                                          VALIDATE(Element, DimVal2Rec.Element);
                                                                      //**4PS05.en
                                                                    END;
                                                                  END;
                                                                  IF "Shortcut Dimension 2 Code" <> CurrCostObject THEN
                                                                    "Shortcut Dimension 2 Code" := CurrCostObject;
                                                                  IF ("Item No." + "Basic Item" + "Trade Item" = '') THEN BEGIN
                                                                    IF ("Shortcut Dimension 2 Code" <> xRec."Shortcut Dimension 2 Code") OR
                                                                       ("Job No." <> xRec."Job No.") OR
                                                                       (Description = '') THEN
                                                                    BEGIN
                                                                      IF Description = '' THEN
                                                                        Description := DimVal2Rec.Name
                                                                      ELSE BEGIN
                                                                        xDimValRec.CHANGECOMPANY(xRec."Receiving Company");
                                                                        DimMgt.GetDimValueRec(2, xRec."Shortcut Dimension 2 Code", xDimValRec, FALSE, xRec."Job No.");
                                                                        IF (Description = xDimValRec.Name) THEN
                                                                          Description := DimVal2Rec.Name;
                                                                      END;
                                                                      IF DimVal2Rec."Unit of Measure" <> '' THEN //**4PSmg.c, 26-09-12
                                                                        "Unit of Measure Code" := DimVal2Rec."Unit of Measure";
                                                                    END;
                                                                  END;
                                                                  CheckCostCompServOrderType; //** 4PS06.n
                                                                  CheckCostTypeOrder;
                                                                END;
                                                                //**4PS.en

                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");

                                                                //**4PS.sn  DP00129
                                                                IF ("Shortcut Dimension 2 Code" <> xRec."Shortcut Dimension 2 Code") AND ("FSC Type Code" = '') THEN
                                                                  FillDefaultFscType();
                                                                //**4PS.en
                                                              END;

                                                   OnLookup=VAR
                                                              Dim2Editable@1210190000 : Boolean;
                                                            BEGIN
                                                              //**4PS.sn
                                                              //test call T000263

                                                              Dim2Editable := TRUE;
                                                              IF (CurrFieldNo > 0) AND ("Document No." <> '') AND
                                                                 ("Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"]) THEN   //** Call C002208
                                                              BEGIN
                                                                GetPurchHeader;
                                                                Dim2Editable := NOT PurchHeader."Preregister WIP";
                                                              END;
                                                              OnLookupDim2Code(Dim2Editable);
                                                            END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 45  ;   ;Job No.             ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) Job;
                                                   OnValidate=VAR
                                                                Job@1000 : Record 11072003;
                                                                xDimValRec@1210190000 : Record 349;
                                                                Plot@1100525000 : Record 11012500;
                                                              BEGIN
                                                                //**4PS.sn
                                                                IF "Job No." <> '' THEN
                                                                  TESTFIELD("Service Order No.", '');
                                                                //**4PS.en
                                                                TESTFIELD("Drop Shipment",FALSE);
                                                                TESTFIELD("Special Order",FALSE);

                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF ReservEntryExist THEN
                                                                  TESTFIELD("Job No.",'');

                                                                IF "Job No." <> xRec."Job No." THEN BEGIN
                                                                  VALIDATE("Job Task No.",'');
                                                                  VALIDATE("Job Planning Line No.",0);
                                                                END;

                                                                //**4PS.so
                                                                //IF "Job No." = '' THEN BEGIN
                                                                //  CreateDim(
                                                                //    DATABASE::Job,"Job No.",
                                                                //    DimMgt.TypeToTableID3(Type),"No.",
                                                                //    DATABASE::"Responsibility Center","Responsibility Center",
                                                                //    DATABASE::"Work Center","Work Center No.");
                                                                //  EXIT;
                                                                //END;
                                                                //**4PS.sn
                                                                TestStatusOpen;
                                                                CheckCompanyIC;
                                                                IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                  TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                  TESTFIELD("Reserved Qty. (Base)",0);
                                                                  GetPurchHeader;
                                                                  IF PurchHeader."Amounts only" THEN BEGIN
                                                                    TESTFIELD("Amt. Rcd. Not Invoiced",0);
                                                                    TESTFIELD("Amnt. Received",0);
                                                                  END;
                                                                END;
                                                                IF "Job No." <> '' THEN BEGIN
                                                                  CheckProjectStatus(FALSE);
                                                                  "Main Project No." := ProjRec."Main Project";
                                                                  CALCFIELDS("Job Description");
                                                                  Type := Type::"G/L Account";
                                                                  IF ("Rental Unit" <> '') THEN
                                                                    VALIDATE("Rental Unit");
                                                                  Job.CHANGECOMPANY("Receiving Company");
                                                                //**4PS.en
                                                                  IF NOT (Type IN [Type::Item,Type::"G/L Account"]) THEN
                                                                    FIELDERROR("Job No.",STRSUBSTNO(Text012,FIELDCAPTION(Type),Type));
                                                                  Job.GET("Job No.");
                                                                  Job.TestBlocked;
                                                                  "Job Currency Code" := Job."Currency Code";
                                                                //**4PS.sn
                                                                  "Job Description" := Job.Description; //kkleermaker.n, 130902, C004024
                                                                END ELSE BEGIN
                                                                  "Main Project No." := '';
                                                                  "Inward Processing Relief" := FALSE;
                                                                  "Rental Unit" := '';
                                                                  IF "Service Order No." <> '' THEN BEGIN
                                                                    Type := Type::"G/L Account";
                                                                  END ELSE BEGIN
                                                                    IF "Item No." <> '' THEN BEGIN
                                                                      Type := Type::Item;
                                                                      "No." := "Item No.";
                                                                    END ELSE BEGIN
                                                                      "No." := '';
                                                                    END;
                                                                  END;
                                                                END;
                                                                FillSystemCreatedEntry;
                                                                IF ("Shortcut Dimension 1 Code" <> '') AND ("Job No." <> '') AND
                                                                   (CurrFieldNo = FIELDNO("Job No.")) AND ("Job No." <> xRec."Job No.") THEN
                                                                  "Shortcut Dimension 1 Code" := '';
                                                                IF "Shortcut Dimension 2 Code" <> '' THEN BEGIN
                                                                  VALIDATE("Shortcut Dimension 2 Code");
                                                                  IF ("Item No." = '') AND (Manufacturer = '') AND ("Vendor (Trade Item)" = '') AND
                                                                     (CurrFieldNo = FIELDNO("Job No.")) AND ("Job No." <> xRec."Job No.")
                                                                  THEN BEGIN
                                                                    IF Description = '' THEN
                                                                      Description := DimVal2Rec.Name
                                                                    ELSE BEGIN
                                                                      DimMgt.GetDimValueRec(2, xRec."Shortcut Dimension 2 Code", xDimValRec, FALSE, xRec."Job No.");
                                                                      IF Description = xDimValRec.Name THEN
                                                                        Description := DimVal2Rec.Name;
                                                                    END;
                                                                  END;
                                                                END;

                                                                IF Element <> '' THEN
                                                                  IF NOT ProjElemRec.GET("Job No.",Element) THEN
                                                                    VALIDATE(Element, '');
                                                                IF "Plot No." <> '' THEN
                                                                  IF NOT Plot.GET("Job No.","Plot No.") THEN
                                                                    VALIDATE("Plot No.", '');

                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  IF PurchHeader."Amounts only" THEN
                                                                    InitAmntToReceive
                                                                  ELSE
                                                                    InitQtyToReceive;

                                                                //** DP0121
                                                                IF "Job No." <> xRec."Job No." THEN
                                                                  IF (Quantity <> 0) AND NSItemExists(xRec."Item No.") THEN
                                                                    ReservePurchLine.VerifyChange(Rec,xRec);
                                                                //**4PS.en

                                                                //**4PS.sn 25-03-2010
                                                                IF ("Document Type" = "Document Type"::Invoice) AND
                                                                   ("Receiving Company" <> '') AND
                                                                   ("Job No." <> xRec."Job No.") AND
                                                                   (CurrFieldNo = FIELDNO("Job No.")) THEN
                                                                BEGIN
                                                                  "Shortcut Dimension 1 Code" := Job."Global Dimension 1 Code";
                                                                END;
                                                                //**4PS.en 25-03-2010
                                                                CreateDim(
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n
                                                                  DATABASE::"Plant Type", "Plant Type", //**4PS.n
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::"Service Order","Service Order No.", //** 4PS 09-06-2010
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Work Center","Work Center No.");
                                                                  //DATABASE::Location,"Location Code"); //**4PS.n  //*C007227.o


                                                                //**4PS.sn
                                                                IF NOT CreateFromReqLine THEN
                                                                  StrategicPurchMgt.FindContractForPurchaseLine(Rec);
                                                                IF ("Job No." <> xRec."Job No.") THEN BEGIN //*DP00129
                                                                  GetPurchHeader;
                                                                  IF NOT (FscTypeOnHeaderLevelAllowed() AND (PurchHeader."FSC Type Code" <> '')) THEN
                                                                    FillDefaultFscType();
                                                                  "No Project Stock" := FALSE;  //C021402.n
                                                                END;
                                                                //**4PS.en

                                                                ClearEditableAssemYardNoFields; //**4PS.n
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS.n
                                                              OnLookupJobNo(TRUE);
                                                            END;

                                                   CaptionML=ENU=Project No. }
    { 54  ;   ;Indirect Cost %     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("No.");
                                                                TestStatusOpen;

                                                                IF Type = Type::"Charge (Item)" THEN
                                                                  TESTFIELD("Indirect Cost %",0);

                                                                IF (Type = Type::Item) AND ("Prod. Order No." = '') THEN BEGIN
                                                                  GetItem;
                                                                  IF Item."Costing Method" = Item."Costing Method"::Standard THEN
                                                                    ERROR(
                                                                      Text010,
                                                                      FIELDCAPTION("Indirect Cost %"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                END;

                                                                UpdateUnitCost;
                                                              END;

                                                   CaptionML=ENU=Indirect Cost %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 56  ;   ;Recalculate Invoice Disc.;Boolean  ;CaptionML=ENU=Recalculate Invoice Disc.;
                                                   Editable=No }
    { 57  ;   ;Outstanding Amount  ;Decimal       ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetPurchHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF PurchHeader."Currency Code" <> '' THEN
                                                                  "Outstanding Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        1,PurchHeader."Job No.", //**4PS.n
                                                                        GetDate,"Currency Code",
                                                                //      "Outstanding Amount",PurchHeader."Currency Factor"), //**4PS.o
                                                                        "Outstanding Amount",PurchHeader."Currency Factor",FALSE), //**4PS.n
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Outstanding Amount (LCY)" :=
                                                                    ROUND("Outstanding Amount",Currency2."Amount Rounding Precision");

                                                                "Outstanding Amt. Ex. VAT (LCY)" :=
                                                                  ROUND("Outstanding Amount (LCY)" / (1 + "VAT %" / 100),Currency2."Amount Rounding Precision");
                                                                //**4PS.sn
                                                                IF NOT PurchHeader."Amounts only" THEN BEGIN
                                                                  "Outst. Amount exc. VAT (LCY)" :=
                                                                    ROUND(
                                                                      "Amount (LCY)" * "Outstanding Quantity" / Quantity,
                                                                      Currency2."Amount Rounding Precision");
                                                                  "Outst. Amount exc. VAT" :=
                                                                    ROUND(
                                                                      Amount * "Outstanding Quantity" / Quantity,
                                                                      Currency2."Amount Rounding Precision")
                                                                END ELSE BEGIN
                                                                  "Outst. Amount exc. VAT" := Amount - "Amnt. Received";
                                                                  IF PurchHeader."Currency Code" <> '' THEN
                                                                    "Outst. Amount exc. VAT (LCY)" :=
                                                                      ROUND(
                                                                        CurrExchRate.ExchangeAmtFCYToLCY(
                                                                          1,PurchHeader."Job No.", //**4PS.n
                                                                          GetDate,"Currency Code",
                                                                //        "Outst. Amount exc. VAT",PurchHeader."Currency Factor"), //**4PS.o
                                                                          "Outst. Amount exc. VAT",PurchHeader."Currency Factor",FALSE), //**4PS.n
                                                                        Currency2."Amount Rounding Precision")
                                                                  ELSE
                                                                    "Outst. Amount exc. VAT (LCY)" :=
                                                                      ROUND("Outst. Amount exc. VAT",Currency2."Amount Rounding Precision");
                                                                END;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Outstanding Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 58  ;   ;Qty. Rcd. Not Invoiced;Decimal     ;CaptionML=ENU=Qty. Rcd. Not Invoiced;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 59  ;   ;Amt. Rcd. Not Invoiced;Decimal     ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetPurchHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF PurchHeader."Currency Code" <> '' THEN
                                                                  "Amt. Rcd. Not Invoiced (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        1,PurchHeader."Job No.", //**4PS.n
                                                                        GetDate,"Currency Code",
                                                                //      "Amt. Rcd. Not Invoiced",PurchHeader."Currency Factor"), //**4PS.o
                                                                        "Amt. Rcd. Not Invoiced",PurchHeader."Currency Factor",FALSE), //**4PS.n
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Amt. Rcd. Not Invoiced (LCY)" :=
                                                                    ROUND("Amt. Rcd. Not Invoiced",Currency2."Amount Rounding Precision");

                                                                "A. Rcd. Not Inv. Ex. VAT (LCY)" :=
                                                                  ROUND("Amt. Rcd. Not Invoiced (LCY)" / (1 + "VAT %" / 100),Currency2."Amount Rounding Precision");
                                                                //**4PS.sn
                                                                IF NOT PurchHeader."Amounts only" THEN BEGIN
                                                                  "Rec./Not Inv. exc.VAT (LCY)" :=
                                                                    ROUND(
                                                                      "Amount (LCY)" * "Qty. Rcd. Not Invoiced" / Quantity,
                                                                      Currency2."Amount Rounding Precision");
                                                                  "Amt. Rcd. Not Invoiced exc.VAT" :=
                                                                    ROUND(
                                                                      Amount * "Qty. Rcd. Not Invoiced" / Quantity,
                                                                      Currency2."Amount Rounding Precision");
                                                                END ELSE BEGIN
                                                                  "Amt. Rcd. Not Invoiced exc.VAT" := "Amnt. Received" - "Amnt. Invoiced";
                                                                  IF PurchHeader."Currency Code" <> '' THEN
                                                                    "Rec./Not Inv. exc.VAT (LCY)" :=
                                                                      ROUND(
                                                                        CurrExchRate.ExchangeAmtFCYToLCY(
                                                                          1,PurchHeader."Job No.", GetDate,"Currency Code",
                                                                          "Amt. Rcd. Not Invoiced exc.VAT",PurchHeader."Currency Factor",FALSE),
                                                                        Currency2."Amount Rounding Precision")
                                                                  ELSE
                                                                    "Rec./Not Inv. exc.VAT (LCY)" :=
                                                                      ROUND("Amt. Rcd. Not Invoiced exc.VAT",Currency2."Amount Rounding Precision");
                                                                END;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Amt. Rcd. Not Invoiced;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 60  ;   ;Quantity Received   ;Decimal       ;AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Quantity Received;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 61  ;   ;Quantity Invoiced   ;Decimal       ;CaptionML=ENU=Quantity Invoiced;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 63  ;   ;Receipt No.         ;Code20        ;CaptionML=ENU=Receipt No.;
                                                   Editable=No }
    { 64  ;   ;Receipt Line No.    ;Integer       ;CaptionML=ENU=Receipt Line No.;
                                                   Editable=No }
    { 67  ;   ;Profit %            ;Decimal       ;CaptionML=ENU=Profit %;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 68  ;   ;Pay-to Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Pay-to Vendor No.;
                                                   Editable=No }
    { 69  ;   ;Inv. Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                                UpdateUnitCost;
                                                                CalcInvDiscToInvoice;
                                                              END;

                                                   CaptionML=ENU=Inv. Discount Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 70  ;   ;Vendor Item No.     ;Text20        ;OnValidate=BEGIN
                                                                IF PurchHeader."Send IC Document" AND
                                                                   ("IC Partner Ref. Type" = "IC Partner Ref. Type"::"Vendor Item No.")
                                                                THEN
                                                                  "IC Partner Reference" := "Vendor Item No.";
                                                              END;

                                                   CaptionML=ENU=Vendor Item No. }
    { 71  ;   ;Sales Order No.     ;Code20        ;TableRelation=IF (Drop Shipment=CONST(Yes)) "Sales Header".No. WHERE (Document Type=CONST(Order));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Sales Order No." <> "Sales Order No.") AND (Quantity <> 0) THEN BEGIN
                                                                  ReservePurchLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Sales Order No.;
                                                   Editable=No }
    { 72  ;   ;Sales Order Line No.;Integer       ;TableRelation=IF (Drop Shipment=CONST(Yes)) "Sales Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                                              Document No.=FIELD(Sales Order No.));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Sales Order Line No." <> "Sales Order Line No.") AND (Quantity <> 0) THEN BEGIN
                                                                  ReservePurchLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Sales Order Line No.;
                                                   Editable=No }
    { 73  ;   ;Drop Shipment       ;Boolean       ;OnValidate=BEGIN
                                                                IF (xRec."Drop Shipment" <> "Drop Shipment") AND (Quantity <> 0) THEN BEGIN
                                                                  ReservePurchLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                END;
                                                                IF "Drop Shipment" THEN BEGIN
                                                                  "Bin Code" := '';
                                                                  EVALUATE("Inbound Whse. Handling Time",'<0D>');
                                                                  VALIDATE("Inbound Whse. Handling Time");
                                                                  InitOutstanding;
                                                                  InitQtyToReceive;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=ENU=Drop Shipment;
                                                   Editable=No }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=VAR
                                                                GLSetup@1100485000 : Record 98;
                                                              BEGIN
                                                                GetGLSetup; //**4PS.n
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF NOT GLSetup."Extended Purch. VAT Determ." THEN //**4PS.n
                                                                    IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                      VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 75  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=ENU=VAT Calculation Type;
                                                   OptionCaptionML=ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=ENU=Transaction Type }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=ENU=Transport Method }
    { 80  ;   ;Attached to Line No.;Integer       ;TableRelation="Purchase Line"."Line No." WHERE (Document Type=FIELD(Document Type),
                                                                                                   Document No.=FIELD(Document No.));
                                                   CaptionML=ENU=Attached to Line No.;
                                                   Editable=No }
    { 81  ;   ;Entry Point         ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=ENU=Entry Point }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=ENU=Area }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=ENU=Transaction Specification }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Tax Area Code }
    { 86  ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Tax Liable }
    { 87  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Tax Group Code }
    { 88  ;   ;Use Tax             ;Boolean       ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Use Tax }
    { 89  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");

                                                                GetGLSetup;
                                                                IF GLSetup."Norwegian Localization Active" THEN
                                                                  NorwegianVATTools.InitVATCode_PurchaseLine(Rec);  //NAVNO
                                                              END;

                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 90  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                //**4PS.sn
                                                                //VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
                                                                IF NOT VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
                                                                  VATPostingSetup.INIT;
                                                                //**4PS.en
                                                                "VAT Difference" := 0;
                                                                "VAT %" := VATPostingSetup."VAT %";
                                                                "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                "Manually VAT Posting" := VATPostingSetup.Manually;  //**4PS.n
                                                                "VAT Identifier" := VATPostingSetup."VAT Identifier";
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Reverse Charge VAT",
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    "VAT %" := 0;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      TESTFIELD(Type,Type::"G/L Account");
                                                                      VATPostingSetup.TESTFIELD("Purchase VAT Account");
                                                                      TESTFIELD("No.",VATPostingSetup."Purchase VAT Account");
                                                                    END;
                                                                END;
                                                                IF PurchHeader."Prices Including VAT" AND (Type = Type::Item) THEN
                                                                  "Direct Unit Cost" :=
                                                                    ROUND(
                                                                      "Direct Unit Cost" * (100 + "VAT %") / (100 + xRec."VAT %"),
                                                                      Currency."Unit-Amount Rounding Precision");
                                                                UpdateAmounts;

                                                                GetGLSetup;
                                                                IF GLSetup."Norwegian Localization Active" THEN
                                                                  NorwegianVATTools.InitVATCode_PurchaseLine(Rec);  //NAVNO
                                                              END;

                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 91  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code;
                                                   Editable=No }
    { 92  ;   ;Outstanding Amount (LCY);Decimal   ;CaptionML=ENU=Outstanding Amount (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 93  ;   ;Amt. Rcd. Not Invoiced (LCY);Decimal;
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Amt. Rcd. Not Invoiced (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 95  ;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Document No.),
                                                                                                       Source Ref. No.=FIELD(Line No.),
                                                                                                       Source Type=CONST(39),
                                                                                                       Source Subtype=FIELD(Document Type),
                                                                                                       Reservation Status=CONST(Reservation)));
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Reserved Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 97  ;   ;Blanket Order No.   ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=CONST(Blanket Order));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Received",0);
                                                                ValidateBlanketOrder("Blanket Order No."); //**4PS.n
                                                                IF "Blanket Order No." = '' THEN
                                                                  "Blanket Order Line No." := 0
                                                                ELSE
                                                                  VALIDATE("Blanket Order Line No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Quantity Received",0);
                                                              BlanketOrderLookup;
                                                            END;

                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Blanket Order No.;
                                                   Description=[4PS: Raam  -> Afroep  ] }
    { 98  ;   ;Blanket Order Line No.;Integer     ;TableRelation="Purchase Line"."Line No." WHERE (Document Type=CONST(Blanket Order),
                                                                                                   Document No.=FIELD(Blanket Order No.));
                                                   OnValidate=VAR
                                                                BlanketOrderLineRec@1100530000 : Record 39;
                                                              BEGIN
                                                                TESTFIELD("Quantity Received",0);
                                                                IF "Blanket Order Line No." <> 0 THEN BEGIN
                                                                  PurchLine2.GET("Document Type"::"Blanket Order","Blanket Order No.","Blanket Order Line No.");
                                                                  //PurchLine2.TESTFIELD(Type,Type); //**4PS.o
                                                                  //PurchLine2.TESTFIELD("No.","No."); //**4PS.o
                                                                  PurchLine2.TESTFIELD("Item No.","Item No."); //**4PS.n
                                                                  PurchLine2.TESTFIELD("Pay-to Vendor No.","Pay-to Vendor No.");
                                                                  PurchLine2.TESTFIELD("Buy-from Vendor No.","Buy-from Vendor No.");
                                                                  //**4PS.sn
                                                                  IF ("Job No." <> '') AND (PurchLine2."Job No." <> '') THEN
                                                                    PurchLine2.TESTFIELD("Job No.","Job No.");
                                                                  //**4PS.en
                                                                  VALIDATE("Direct Unit Cost",PurchLine2."Direct Unit Cost");
                                                                END;
                                                                //**4PS.sn
                                                                IF ("Blanket Order No." <> xRec."Blanket Order No.") OR ("Blanket Order Line No." <> xRec."Blanket Order Line No.") THEN BEGIN
                                                                  //EvaluateReleasedQuantity(xRec, 1);
                                                                  //EvaluateReleasedQuantity(Rec, 2);
                                                                  IF MODIFY THEN
                                                                    CheckBlanketOrder(TRUE);  //db, 26-04-10: M19112
                                                                  //*23409.sn
                                                                  IF ("Document Type" = "Document Type"::Order) AND ("Blanket Order No." <> '') AND ("Blanket Order Line No." <> 0) THEN BEGIN
                                                                    BlanketOrderLineRec.GET("Document Type"::"Blanket Order", "Blanket Order No.", "Blanket Order Line No.");
                                                                    IF BlanketOrderLineRec."Direct Unit Cost" <> "Direct Unit Cost" THEN
                                                                      VALIDATE("Direct Unit Cost", BlanketOrderLineRec."Direct Unit Cost");
                                                                    IF BlanketOrderLineRec."Line Discount %" <> "Line Discount %" THEN
                                                                      VALIDATE("Line Discount %", BlanketOrderLineRec."Line Discount %");
                                                                  END;
                                                                  //*23409.sn
                                                                END;
                                                                //**4PS.en
                                                              END;

                                                   OnLookup=BEGIN
                                                              BlanketOrderLookup;
                                                            END;

                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Blanket Order Line No.;
                                                   Description=[4PS: Raam  -> Afroep  ] }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=ENU=VAT Base Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=ENU=Unit Cost;
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 101 ;   ;System-Created Entry;Boolean       ;CaptionML=ENU=System-Created Entry;
                                                   Editable=No }
    { 103 ;   ;Line Amount         ;Decimal       ;OnValidate=VAR
                                                                lvText11012001@1210190004 : TextConst 'ENU=may not be less than invoiced amount (%1)';
                                                              BEGIN
                                                                TESTFIELD(Type);
                                                                //**4PS.o TESTFIELD(Quantity);
                                                                //**4PS.o TESTFIELD("Direct Unit Cost");

                                                                GetPurchHeader;

                                                                //**4PS.sn
                                                                IF (Type <> Type::Item) AND (NOT PurchHeader."Amounts only") THEN BEGIN  //* C-010732
                                                                  IF "Line Discount %" <> 100 THEN
                                                                    IF Quantity = 0 THEN
                                                                      "Direct Unit Cost" := ROUND("Line Amount" / (1 - "Line Discount %"/100), Currency."Unit-Amount Rounding Precision")
                                                                    ELSE
                                                                      "Direct Unit Cost" := ROUND("Line Amount" / (1 - "Line Discount %"/100) /
                                                                        Quantity, Currency."Unit-Amount Rounding Precision");
                                                                  IF "Item No." + "Basic Item" + "Trade Item" = '' THEN
                                                                    IF "Discount % (Item)" = 0 THEN
                                                                      "Unit Price (LCY)" := "Direct Unit Cost";
                                                                  CalculateItemDiscount;
                                                                END;
                                                                CheckReceiptRelationAmount(FIELDNO("Line Amount"));

                                                                IF NOT PurchHeader."Amounts only" THEN BEGIN
                                                                  TESTFIELD(Quantity);
                                                                  IF (Type = Type::Item) AND ("Document Type" <> "Document Type"::Quote) THEN
                                                                    TESTFIELD("Direct Unit Cost");
                                                                  CheckSigns; //**4PS.n
                                                                END ELSE BEGIN
                                                                  IF ("Document Type" = "Document Type"::Order) AND ("Line Amount" >= 0) AND
                                                                     (PurchHeader."Purchase Order Type" = PurchHeader."Purchase Order Type"::"Return Order")
                                                                  THEN
                                                                    FIELDERROR("Line Amount", Text11012015);
                                                                END;
                                                                //**4PS.en
                                                                GetPurchHeader;
                                                                "Line Amount" := ROUND("Line Amount",Currency."Amount Rounding Precision");

                                                                //**4PS.sn
                                                                UpdateAmountLCY;
                                                                "Line VAT Amount" := "Amount Including VAT" - Amount;

                                                                IF NOT PurchHeader."Amounts only" THEN BEGIN
                                                                //**4PS.en
                                                                  VALIDATE(
                                                                    "Line Discount Amount",ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") - "Line Amount");
                                                                    InitOutstandingAmount;
                                                                //**4PS.sn
                                                                END ELSE BEGIN
                                                                  IF ("Document Type" = "Document Type"::Order) AND
                                                                     (("Line Amount" * "Amnt. Invoiced" < 0) OR
                                                                      (ABS("Line Amount") < ABS("Amnt. Invoiced")))
                                                                  THEN
                                                                    FIELDERROR("Line Amount", STRSUBSTNO(lvText11012001, "Amnt. Invoiced"));
                                                                  IF ("Line Amount" <> 0) AND ("Direct Unit Cost" = 0) THEN
                                                                    "Direct Unit Cost" := "Line Amount";  //* C-010732
                                                                  VALIDATE("Line Discount Amount",ROUND("Direct Unit Cost",Currency."Amount Rounding Precision")-"Line Amount"); //* C-010732
                                                                  VALIDATE("Direct Unit Cost");
                                                                  InitOutstandingAmount;
                                                                  InitAmntToReceive;
                                                                END;
                                                                IF ("Document Type" = "Document Type"::Order) AND ("Line Amount" > 0) AND
                                                                   (PurchHeader."Purchase Order Type" = PurchHeader."Purchase Order Type"::"Return Order")
                                                                THEN
                                                                  FIELDERROR("Line Amount", Text11012015);

                                                                UpdateUnitCost;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Line Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Line Amount")) }
    { 104 ;   ;VAT Difference      ;Decimal       ;CaptionML=ENU=VAT Difference;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 105 ;   ;Inv. Disc. Amount to Invoice;Decimal;
                                                   CaptionML=ENU=Inv. Disc. Amount to Invoice;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 106 ;   ;VAT Identifier      ;Code10        ;CaptionML=ENU=VAT Identifier;
                                                   Editable=No }
    { 107 ;   ;IC Partner Ref. Type;Option        ;OnValidate=BEGIN
                                                                IF "IC Partner Code" <> '' THEN
                                                                  "IC Partner Ref. Type" := "IC Partner Ref. Type"::"G/L Account";
                                                                IF "IC Partner Ref. Type" <> xRec."IC Partner Ref. Type" THEN
                                                                  "IC Partner Reference" := '';
                                                                IF "IC Partner Ref. Type" = "IC Partner Ref. Type"::"Common Item No." THEN BEGIN
                                                                  IF Item."No." <> "No." THEN
                                                                    Item.GET("No.");
                                                                  Item.TESTFIELD("Common Item No.");
                                                                  "IC Partner Reference" := Item."Common Item No.";
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 410=R;
                                                   CaptionML=ENU=IC Partner Ref. Type;
                                                   OptionCaptionML=ENU=" ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No.,Vendor Item No.";
                                                   OptionString=[ ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No.,Vendor Item No.] }
    { 108 ;   ;IC Partner Reference;Code20        ;OnLookup=VAR
                                                              ICGLAccount@1000 : Record 410;
                                                              ItemCrossReference@1001 : Record 5717;
                                                              ItemVendorCatalog@1003 : Record 99;
                                                            BEGIN
                                                              IF "No." <> '' THEN
                                                                CASE "IC Partner Ref. Type" OF
                                                                  "IC Partner Ref. Type"::"G/L Account":
                                                                    BEGIN
                                                                      IF ICGLAccount.GET("IC Partner Reference") THEN;
                                                                      IF PAGE.RUNMODAL(PAGE::"IC G/L Account List",ICGLAccount) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",ICGLAccount."No.");
                                                                    END;
                                                                  "IC Partner Ref. Type"::Item:
                                                                    BEGIN
                                                                      IF Item.GET("IC Partner Reference") THEN;
                                                                      IF PAGE.RUNMODAL(PAGE::"Item List",Item) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",Item."No.");
                                                                    END;
                                                                  "IC Partner Ref. Type"::"Cross Reference":
                                                                    BEGIN
                                                                      GetPurchHeader;
                                                                      ItemCrossReference.RESET;
                                                                      ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
                                                                      ItemCrossReference.SETFILTER(
                                                                        "Cross-Reference Type",'%1|%2',
                                                                        ItemCrossReference."Cross-Reference Type"::Vendor,
                                                                        ItemCrossReference."Cross-Reference Type"::" ");
                                                                      ItemCrossReference.SETFILTER("Cross-Reference Type No.",'%1|%2',PurchHeader."Buy-from Vendor No.",'');
                                                                      IF PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",ItemCrossReference."Cross-Reference No.");
                                                                    END;
                                                                  "IC Partner Ref. Type"::"Vendor Item No.":
                                                                    BEGIN
                                                                      GetPurchHeader;
                                                                      ItemVendorCatalog.SETCURRENTKEY("Vendor No.");
                                                                      ItemVendorCatalog.SETRANGE("Vendor No.",PurchHeader."Buy-from Vendor No.");
                                                                      IF PAGE.RUNMODAL(PAGE::"Vendor Item Catalog",ItemVendorCatalog) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",ItemVendorCatalog."Vendor Item No.");
                                                                    END;
                                                                END;
                                                            END;

                                                   AccessByPermission=TableData 410=R;
                                                   CaptionML=ENU=IC Partner Reference }
    { 109 ;   ;Prepayment %        ;Decimal       ;OnValidate=VAR
                                                                GenPostingSetup@1001 : Record 252;
                                                                GLAcc@1000 : Record 15;
                                                              BEGIN
                                                                IF ("Prepayment %" <> 0) AND (Type <> Type::" ") THEN BEGIN
                                                                  TESTFIELD("Document Type","Document Type"::Order);
                                                                  TESTFIELD("No.");
                                                                  GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
                                                                  IF GenPostingSetup."Purch. Prepayments Account" <> '' THEN BEGIN
                                                                    GLAcc.GET(GenPostingSetup."Purch. Prepayments Account");
                                                                    VATPostingSetup.GET("VAT Bus. Posting Group",GLAcc."VAT Prod. Posting Group");
                                                                  END ELSE
                                                                    CLEAR(VATPostingSetup);
                                                                  "Prepayment VAT %" := VATPostingSetup."VAT %";
                                                                  "Prepmt. VAT Calc. Type" := VATPostingSetup."VAT Calculation Type";
                                                                  "Prepayment VAT Identifier" := VATPostingSetup."VAT Identifier";
                                                                  CASE "Prepmt. VAT Calc. Type" OF
                                                                    "VAT Calculation Type"::"Reverse Charge VAT",
                                                                    "VAT Calculation Type"::"Sales Tax":
                                                                      "Prepayment VAT %" := 0;
                                                                    "VAT Calculation Type"::"Full VAT":
                                                                      FIELDERROR("Prepmt. VAT Calc. Type");
                                                                  END;
                                                                  "Prepayment Tax Group Code" := GLAcc."Tax Group Code";
                                                                END;

                                                                TestStatusOpen;

                                                                IF Type <> Type::" " THEN
                                                                  UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Prepayment %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 110 ;   ;Prepmt. Line Amount ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                PrePaymentLineAmountEntered := TRUE;
                                                                TESTFIELD("Line Amount");
                                                                IF "Prepmt. Line Amount" < "Prepmt. Amt. Inv." THEN
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text038,"Prepmt. Amt. Inv."));
                                                                IF "Prepmt. Line Amount" > "Line Amount" THEN
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text039,"Line Amount"));
                                                                VALIDATE("Prepayment %",ROUND("Prepmt. Line Amount" * 100 / "Line Amount",0.00001));
                                                              END;

                                                   CaptionML=ENU=Prepmt. Line Amount;
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt. Line Amount")) }
    { 111 ;   ;Prepmt. Amt. Inv.   ;Decimal       ;CaptionML=ENU=Prepmt. Amt. Inv.;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt. Amt. Inv.")) }
    { 112 ;   ;Prepmt. Amt. Incl. VAT;Decimal     ;CaptionML=ENU=Prepmt. Amt. Incl. VAT;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 113 ;   ;Prepayment Amount   ;Decimal       ;CaptionML=ENU=Prepayment Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 114 ;   ;Prepmt. VAT Base Amt.;Decimal      ;CaptionML=ENU=Prepmt. VAT Base Amt.;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 115 ;   ;Prepayment VAT %    ;Decimal       ;CaptionML=ENU=Prepayment VAT %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 116 ;   ;Prepmt. VAT Calc. Type;Option      ;CaptionML=ENU=Prepmt. VAT Calc. Type;
                                                   OptionCaptionML=ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 117 ;   ;Prepayment VAT Identifier;Code10   ;CaptionML=ENU=Prepayment VAT Identifier;
                                                   Editable=No }
    { 118 ;   ;Prepayment Tax Area Code;Code20    ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Prepayment Tax Area Code }
    { 119 ;   ;Prepayment Tax Liable;Boolean      ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Prepayment Tax Liable }
    { 120 ;   ;Prepayment Tax Group Code;Code10   ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=ENU=Prepayment Tax Group Code }
    { 121 ;   ;Prepmt Amt to Deduct;Decimal       ;OnValidate=BEGIN
                                                                IF "Prepmt Amt to Deduct" > "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text039,"Prepmt. Amt. Inv." - "Prepmt Amt Deducted"));

                                                                IF "Prepmt Amt to Deduct" > "Qty. to Invoice" * "Direct Unit Cost" THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text039,"Qty. to Invoice" * "Direct Unit Cost"));
                                                                IF ("Prepmt. Amt. Inv." - "Prepmt Amt to Deduct" - "Prepmt Amt Deducted") >
                                                                   (Quantity - "Qty. to Invoice" - "Quantity Invoiced") * "Direct Unit Cost"
                                                                THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text038,
                                                                      "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" -
                                                                      (Quantity - "Qty. to Invoice" - "Quantity Invoiced") * "Direct Unit Cost"));
                                                              END;

                                                   CaptionML=ENU=Prepmt Amt to Deduct;
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt Amt to Deduct")) }
    { 122 ;   ;Prepmt Amt Deducted ;Decimal       ;CaptionML=ENU=Prepmt Amt Deducted;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt Amt Deducted")) }
    { 123 ;   ;Prepayment Line     ;Boolean       ;CaptionML=ENU=Prepayment Line;
                                                   Editable=No }
    { 124 ;   ;Prepmt. Amount Inv. Incl. VAT;Decimal;
                                                   CaptionML=ENU=Prepmt. Amount Inv. Incl. VAT;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 129 ;   ;Prepmt. Amount Inv. (LCY);Decimal  ;CaptionML=ENU=Prepmt. Amount Inv. (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 130 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   OnValidate=BEGIN
                                                                IF "IC Partner Code" <> '' THEN BEGIN
                                                                  TESTFIELD(Type,Type::"G/L Account");
                                                                  GetPurchHeader;
                                                                  PurchHeader.TESTFIELD("Buy-from IC Partner Code",'');
                                                                  PurchHeader.TESTFIELD("Pay-to IC Partner Code",'');
                                                                  VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"G/L Account");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=IC Partner Code }
    { 132 ;   ;Prepmt. VAT Amount Inv. (LCY);Decimal;
                                                   CaptionML=ENU=Prepmt. VAT Amount Inv. (LCY);
                                                   Editable=No }
    { 135 ;   ;Prepayment VAT Difference;Decimal  ;CaptionML=ENU=Prepayment VAT Difference;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 136 ;   ;Prepmt VAT Diff. to Deduct;Decimal ;CaptionML=ENU=Prepmt VAT Diff. to Deduct;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 137 ;   ;Prepmt VAT Diff. Deducted;Decimal  ;CaptionML=ENU=Prepmt VAT Diff. Deducted;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 140 ;   ;Outstanding Amt. Ex. VAT (LCY);Decimal;
                                                   CaptionML=ENU=Outstanding Amt. Ex. VAT (LCY) }
    { 141 ;   ;A. Rcd. Not Inv. Ex. VAT (LCY);Decimal;
                                                   CaptionML=ENU=A. Rcd. Not Inv. Ex. VAT (LCY) }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation=IF (Receiving Company=FILTER('')) "Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=No }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');

                                                                IF "Job Task No." <> xRec."Job Task No." THEN BEGIN
                                                                  VALIDATE("Job Planning Line No.",0);
                                                                  IF "Document Type" = "Document Type"::Order THEN
                                                                    TESTFIELD("Quantity Received",0);
                                                                END;

                                                                IF "Job Task No." = '' THEN BEGIN
                                                                  CLEAR(JobJnlLine);
                                                                  "Job Line Type" := "Job Line Type"::" ";
                                                                  UpdateJobPrices;
                                                                  EXIT;
                                                                END;

                                                                JobSetCurrencyFactor;
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(TRUE);
                                                                  UpdateJobPrices;
                                                                END;
                                                                UpdateDimensionsFromJobTask;
                                                              END;

                                                   CaptionML=ENU=Job Task No. }
    { 1002;   ;Job Line Type       ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF "Job Planning Line No." <> 0 THEN
                                                                  ERROR(Text048,FIELDCAPTION("Job Line Type"),FIELDCAPTION("Job Planning Line No."));
                                                              END;

                                                   AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Line Type;
                                                   OptionCaptionML=ENU=" ,Schedule,Contract,Both Schedule and Contract";
                                                   OptionString=[ ,Schedule,Contract,Both Schedule and Contract] }
    { 1003;   ;Job Unit Price      ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Unit Price","Job Unit Price");
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Unit Price;
                                                   BlankZero=Yes }
    { 1004;   ;Job Total Price     ;Decimal       ;AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Total Price;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1005;   ;Job Line Amount     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Line Amount","Job Line Amount");
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Line Amount;
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1006;   ;Job Line Discount Amount;Decimal   ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Line Discount Amount","Job Line Discount Amount");
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Line Discount Amount;
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1007;   ;Job Line Discount % ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Line Discount %","Job Line Discount %");
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Line Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   BlankZero=Yes }
    { 1008;   ;Job Unit Price (LCY);Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Unit Price (LCY)","Job Unit Price (LCY)");
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Unit Price (LCY);
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1009;   ;Job Total Price (LCY);Decimal      ;AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Total Price (LCY);
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1010;   ;Job Line Amount (LCY);Decimal      ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Line Amount (LCY)","Job Line Amount (LCY)");
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Line Amount (LCY);
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1011;   ;Job Line Disc. Amount (LCY);Decimal;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Line Discount Amount (LCY)","Job Line Disc. Amount (LCY)");
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Line Disc. Amount (LCY);
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1012;   ;Job Currency Factor ;Decimal       ;CaptionML=ENU=Job Currency Factor;
                                                   BlankZero=Yes }
    { 1013;   ;Job Currency Code   ;Code20        ;CaptionML=ENU=Job Currency Code }
    { 1019;   ;Job Planning Line No.;Integer      ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 11020401;
                                                              BEGIN
                                                                IF "Job Planning Line No." <> 0 THEN BEGIN
                                                                  JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
                                                                  JobPlanningLine.TESTFIELD("Job No.","Job No.");
                                                                  JobPlanningLine.TESTFIELD("Job Task No.","Job Task No.");
                                                                  CASE Type OF
                                                                    Type::"G/L Account":
                                                                      JobPlanningLine.TESTFIELD(Type,JobPlanningLine.Type::"G/L Account");
                                                                    Type::Item:
                                                                      JobPlanningLine.TESTFIELD(Type,JobPlanningLine.Type::Item);
                                                                  END;
                                                                  JobPlanningLine.TESTFIELD("No.","No.");
                                                                  JobPlanningLine.TESTFIELD("Usage Link",TRUE);
                                                                  JobPlanningLine.TESTFIELD("System-Created Entry",FALSE);
                                                                  "Job Line Type" := JobPlanningLine."Line Type" + 1;
                                                                  VALIDATE("Job Remaining Qty.",JobPlanningLine."Remaining Qty." - "Qty. to Invoice");
                                                                END ELSE
                                                                  VALIDATE("Job Remaining Qty.",0);
                                                              END;

                                                   OnLookup=VAR
                                                              JobPlanningLine@1000 : Record 11020401;
                                                            BEGIN
                                                              JobPlanningLine.SETRANGE("Job No.","Job No.");
                                                              JobPlanningLine.SETRANGE("Job Task No.","Job Task No.");
                                                              CASE Type OF
                                                                Type::"G/L Account":
                                                                  JobPlanningLine.SETRANGE(Type,JobPlanningLine.Type::"G/L Account");
                                                                Type::Item:
                                                                  JobPlanningLine.SETRANGE(Type,JobPlanningLine.Type::Item);
                                                              END;
                                                              JobPlanningLine.SETRANGE("No.","No.");
                                                              JobPlanningLine.SETRANGE("Usage Link",TRUE);
                                                              JobPlanningLine.SETRANGE("System-Created Entry",FALSE);

                                                              IF PAGE.RUNMODAL(0,JobPlanningLine) = ACTION::LookupOK THEN
                                                                VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
                                                            END;

                                                   AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Planning Line No.;
                                                   BlankZero=Yes }
    { 1030;   ;Job Remaining Qty.  ;Decimal       ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 11020401;
                                                              BEGIN
                                                                IF ("Job Remaining Qty." <> 0) AND ("Job Planning Line No." = 0) THEN
                                                                  ERROR(Text047,FIELDCAPTION("Job Remaining Qty."),FIELDCAPTION("Job Planning Line No."));

                                                                IF "Job Planning Line No." <> 0 THEN BEGIN
                                                                  JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
                                                                  IF JobPlanningLine.Quantity >= 0 THEN BEGIN
                                                                    IF "Job Remaining Qty." < 0 THEN
                                                                      "Job Remaining Qty." := 0;
                                                                  END ELSE BEGIN
                                                                    IF "Job Remaining Qty." > 0 THEN
                                                                      "Job Remaining Qty." := 0;
                                                                  END;
                                                                END;
                                                                "Job Remaining Qty. (Base)" := CalcBaseQty("Job Remaining Qty.");
                                                              END;

                                                   AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Remaining Qty.;
                                                   DecimalPlaces=0:5 }
    { 1031;   ;Job Remaining Qty. (Base);Decimal  ;CaptionML=ENU=Job Remaining Qty. (Base) }
    { 1700;   ;Deferral Code       ;Code10        ;TableRelation="Deferral Template"."Deferral Code";
                                                   OnValidate=VAR
                                                                DeferralPostDate@1000 : Date;
                                                              BEGIN
                                                                GetPurchHeader;
                                                                DeferralPostDate := PurchHeader."Posting Date";

                                                                DeferralUtilities.DeferralCodeOnValidate(
                                                                  "Deferral Code",DeferralUtilities.GetPurchDeferralDocType,'','',
                                                                  "Document Type","Document No.","Line No.",
                                                                  GetDeferralAmount,DeferralPostDate,
                                                                  Description,PurchHeader."Currency Code");

                                                                IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                  "Returns Deferral Start Date" :=
                                                                    DeferralUtilities.GetDeferralStartDate(DeferralUtilities.GetPurchDeferralDocType,
                                                                      "Document Type","Document No.","Line No.","Deferral Code",PurchHeader."Posting Date");
                                                              END;

                                                   CaptionML=ENU=Deferral Code }
    { 1702;   ;Returns Deferral Start Date;Date   ;OnValidate=VAR
                                                                DeferralHeader@1000 : Record 1701;
                                                                DeferralUtilities@1001 : Codeunit 1720;
                                                              BEGIN
                                                                GetPurchHeader;
                                                                IF DeferralHeader.GET(DeferralUtilities.GetPurchDeferralDocType,'','',"Document Type","Document No.","Line No.") THEN
                                                                  DeferralUtilities.CreateDeferralSchedule("Deferral Code",DeferralUtilities.GetPurchDeferralDocType,'','',
                                                                    "Document Type","Document No.","Line No.",GetDeferralAmount,
                                                                    DeferralHeader."Calc. Method","Returns Deferral Start Date",
                                                                    DeferralHeader."No. of Periods",TRUE,
                                                                    DeferralHeader."Schedule Description",FALSE,
                                                                    PurchHeader."Currency Code");
                                                              END;

                                                   CaptionML=ENU=Returns Deferral Start Date }
    { 5401;   ;Prod. Order No.     ;Code20        ;TableRelation="Production Order".No. WHERE (Status=CONST(Released));
                                                   OnValidate=BEGIN
                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Prod. Order No."),"Sales Order No.");

                                                                AddOnIntegrMgt.ValidateProdOrderOnPurchLine(Rec);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 99000758=R;
                                                   CaptionML=ENU=Prod. Order No.;
                                                   Editable=No }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                IF "Variant Code" <> '' THEN
                                                                  //TESTFIELD(Type,Type::Item);  //**4PS.o
                                                                  TESTFIELD("Item No.");         //**4PS.n
                                                                TestStatusOpen;

                                                                IF xRec."Variant Code" <> "Variant Code" THEN BEGIN
                                                                  TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                  TESTFIELD("Receipt No.",'');

                                                                  TESTFIELD("Return Qty. Shipped Not Invd.",0);
                                                                  TESTFIELD("Return Shipment No.",'');
                                                                END;

                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Variant Code"),"Sales Order No.");

                                                                //**4PS.so
                                                                //IF Type = Type::Item THEN
                                                                //  UpdateDirectUnitCost(FIELDNO("Variant Code"));  //db, 21-12-10: for SKU price not relevant (ItemCostMgt.UpdateSKUFromItem)
                                                                //**4PS.eo

                                                                IF (xRec."Variant Code" <> "Variant Code") AND (Quantity <> 0) THEN BEGIN
                                                                  ReservePurchLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                  InitItemAppl;
                                                                END;

                                                                UpdateLeadTimeFields;
                                                                UpdateDates;
                                                                GetDefaultBin;
                                                                UpdateItemReference;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(TRUE);
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Variant Code;
                                                   Description=4PS: TableRelation changed }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=IF (Document Type=FILTER(Order|Invoice),
                                                                     Quantity=FILTER(<0)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                          Item No.=FIELD(No.),
                                                                                                                          Variant Code=FIELD(Variant Code))
                                                                                                                          ELSE IF (Document Type=FILTER(Return Order|Credit Memo),
                                                                                                                                   Quantity=FILTER(>=0)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                                         Item No.=FIELD(No.),
                                                                                                                                                                                         Variant Code=FIELD(Variant Code))
                                                                                                                                                                                         ELSE Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=VAR
                                                                WMSManagement@1000 : Codeunit 7302;
                                                                BinLocRec@1210190000 : Record 7354;
                                                              BEGIN
                                                                IF "Bin Code" <> '' THEN BEGIN
                                                                  IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
                                                                    //db, 02-11-10: check Item No. instead of No; skip bin content for quantity=0
                                                                    //WMSManagement.FindBinContent("Location Code","Bin Code","No.","Variant Code",'')  //**4PS.o
                                                                    WMSManagement.FindBinContent("Location Code","Bin Code","Item No.","Variant Code",'')  //**4PS.n
                                                                  ELSE
                                                                    WMSManagement.FindBin("Location Code","Bin Code",'');
                                                                END;

                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Bin Code"),"Sales Order No.");

                                                                //TESTFIELD(Type,Type::Item);   //**4PS.o
                                                                TESTFIELD("Location Code");

                                                                IF "Bin Code" <> '' THEN BEGIN
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Bin Mandatory");
                                                                  BinLocRec.GET("Location Code", "Bin Code");  //**4PS.n
                                                                  CheckProjectInventory;  //**4PS.n
                                                                  CheckWarehouse;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1000 : Codeunit 7302;
                                                              BinCode@1001 : Code[20];
                                                            BEGIN
                                                              IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
                                                              //db, 02-11-10: check Item No. instead of No; skip bin content for quantity=0
                                                              //BinCode := WMSManagement.BinContentLookUp("Location Code","No.","Variant Code",'',"Bin Code")  //**4PS.o
                                                                BinCode := WMSManagement.BinContentLookUp("Location Code","Item No.","Variant Code",'',"Bin Code")  //**4PS.n
                                                              ELSE
                                                              //BinCode := WMSManagement.BinLookUp("Location Code","No.","Variant Code",'');  //**4PS.o
                                                                BinCode := WMSManagement.BinLookUpSpecific("Location Code","Item No.","Variant Code",'',"Job No.","Service Order No.","Bin Code");  //**4PS.n

                                                              IF BinCode <> '' THEN
                                                                VALIDATE("Bin Code",BinCode);
                                                            END;

                                                   CaptionML=ENU=Bin Code }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item),
                                                                     No.=FILTER(<>'')) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                     ELSE "Unit of Measure";
                                                   OnValidate=VAR
                                                                UnitOfMeasureTranslation@1000 : Record 5402;
                                                                lvPlantUnitOfMeasureRec@1100485000 : Record 11012599;
                                                                lvTradeItemRec@1100525000 : Record 11012317;
                                                                lvTypeNo@1100485001 : Integer;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("Quantity Received",0);
                                                                TESTFIELD("Qty. Received (Base)",0);
                                                                TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                TESTFIELD("Return Qty. Shipped",0);
                                                                TESTFIELD("Return Qty. Shipped (Base)",0);
                                                                IF "Unit of Measure Code" <> xRec."Unit of Measure Code" THEN BEGIN
                                                                  TESTFIELD("Receipt No.",'');
                                                                  TESTFIELD("Return Shipment No.",'');
                                                                END;
                                                                //**4PS.sn
                                                                GetPurchHeader;
                                                                IF PurchHeader."Amounts only" THEN BEGIN
                                                                  TESTFIELD("Amt. Rcd. Not Invoiced",0);
                                                                  TESTFIELD("Amnt. Received",0);
                                                                END;
                                                                //**4PS.en

                                                                IF "Drop Shipment" THEN
                                                                  IF CurrFieldNo = FIELDNO("Unit of Measure Code") THEN  //**4PS.n: db, 12-03-10: M18490
                                                                    ERROR(
                                                                      Text001,
                                                                      FIELDCAPTION("Unit of Measure Code"),"Sales Order No.");
                                                                IF (xRec."Unit of Measure" <> "Unit of Measure") AND (Quantity <> 0) THEN
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);

                                                                //**4PS.sn
                                                                lvTypeNo := CheckPlantAcquisitionOrRent(Rec);
                                                                IF (lvTypeNo <> 0) THEN BEGIN
                                                                  IF PurchHeader."Hours Hire Order Type" = PurchHeader."Hours Hire Order Type"::Plant THEN
                                                                    "Qty. per Unit of Measure" := 1
                                                                  ELSE BEGIN
                                                                    "Qty. per Unit of Measure" :=
                                                                      lvPlantUnitOfMeasureRec.GetPlantQtyPerUnitOfMeasure("Plant Type", "Unit of Measure Code", "Receiving Company");
                                                                    IF ("Unit of Measure Code" <> xRec."Unit of Measure Code") AND (CurrFieldNo = FIELDNO("Unit of Measure Code")) THEN
                                                                      CheckMultiplePlantReorderQty();
                                                                  END
                                                                END;
                                                                //**4PS.en

                                                                UpdateDirectUnitCost(FIELDNO("Unit of Measure Code"));
                                                                IF "Unit of Measure Code" = '' THEN
                                                                  "Unit of Measure" := ''
                                                                ELSE BEGIN
                                                                  UnitOfMeasure.GET("Unit of Measure Code");
                                                                  "Unit of Measure" := UnitOfMeasure.Description;
                                                                  GetPurchHeader;
                                                                  IF PurchHeader."Language Code" <> '' THEN BEGIN
                                                                    UnitOfMeasureTranslation.SETRANGE(Code,"Unit of Measure Code");
                                                                    UnitOfMeasureTranslation.SETRANGE("Language Code",PurchHeader."Language Code");
                                                                    IF UnitOfMeasureTranslation.FINDFIRST THEN
                                                                      "Unit of Measure" := UnitOfMeasureTranslation.Description;
                                                                  END;
                                                                END;
                                                                UpdateItemReference;
                                                                IF "Prod. Order No." = '' THEN BEGIN
                                                                  IF (lvTypeNo = 0) THEN BEGIN  //**4PS.n
                                                                    //**4PS.sn
                                                                    IF (Type = Type::"G/L Account") AND ("Basic Item" + "Trade Item" <> '') THEN
                                                                    BEGIN
                                                                      IF CurrFieldNo = FIELDNO("Unit of Measure Code") THEN
                                                                        IF "Unit of Measure Code" <>  xRec."Unit of Measure Code" THEN
                                                                          CheckItemUnitConversion;
                                                                    END ELSE BEGIN
                                                                    //**4PS.en
                                                                      IF ((Type = Type::Item) AND ("No." <> '')) OR
                                                                         ((Type = Type::"G/L Account") AND ("Item No." <> '')) THEN BEGIN  //**4PS.n
                                                                        GetItem;
                                                                        //**4PS.sn
                                                                        IF CurrFieldNo = FIELDNO("Unit of Measure Code") THEN
                                                                          CheckItemUnitConversion;
                                                                        //**4PS.en
                                                                        "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                                                        "Gross Weight" := Item."Gross Weight" * "Qty. per Unit of Measure";
                                                                        "Net Weight" := Item."Net Weight" * "Qty. per Unit of Measure";
                                                                        "Unit Volume" := Item."Unit Volume" * "Qty. per Unit of Measure";
                                                                        "Units per Parcel" := ROUND(Item."Units per Parcel" / "Qty. per Unit of Measure",0.00001);
                                                                        IF "Qty. per Unit of Measure" > xRec."Qty. per Unit of Measure" THEN
                                                                          InitItemAppl;
                                                                        UpdateUOMQtyPerStockQty;
                                                                      END ELSE
                                                                        "Qty. per Unit of Measure" := 1;
                                                                    END;
                                                                  END;    //**4PS.en
                                                                END ELSE
                                                                  "Qty. per Unit of Measure" := 0;

                                                                IF lvTradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN        //**4PS07.n
                                                                  "Net Weight":= lvTradeItemRec.GetNetWeight("Unit of Measure Code");  //**4PS07.n

                                                                VALIDATE(Quantity);
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;  //**4PS.n
                                                            END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 5415;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                                UpdateDirectUnitCost(FIELDNO("Quantity (Base)"));
                                                              END;

                                                   CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 5416;   ;Outstanding Qty. (Base);Decimal    ;CaptionML=ENU=Outstanding Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5417;   ;Qty. to Invoice (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Invoice","Qty. to Invoice (Base)");
                                                              END;

                                                   CaptionML=ENU=Qty. to Invoice (Base);
                                                   DecimalPlaces=0:5 }
    { 5418;   ;Qty. to Receive (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Receive","Qty. to Receive (Base)");
                                                              END;

                                                   CaptionML=ENU=Qty. to Receive (Base);
                                                   DecimalPlaces=0:5 }
    { 5458;   ;Qty. Rcd. Not Invoiced (Base);Decimal;
                                                   CaptionML=ENU=Qty. Rcd. Not Invoiced (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5460;   ;Qty. Received (Base);Decimal       ;CaptionML=ENU=Qty. Received (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5461;   ;Qty. Invoiced (Base);Decimal       ;CaptionML=ENU=Qty. Invoiced (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5495;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Source Type=CONST(39),
                                                                                                                Source Subtype=FIELD(Document Type),
                                                                                                                Source ID=FIELD(Document No.),
                                                                                                                Source Ref. No.=FIELD(Line No.),
                                                                                                                Reservation Status=CONST(Reservation)));
                                                   CaptionML=ENU=Reserved Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5600;   ;FA Posting Date     ;Date          ;CaptionML=ENU=FA Posting Date }
    { 5601;   ;FA Posting Type     ;Option        ;OnValidate=BEGIN
                                                                IF Type = Type::"Fixed Asset" THEN BEGIN
                                                                  TESTFIELD("Job No.",'');
                                                                  IF "FA Posting Type" = "FA Posting Type"::" " THEN
                                                                    "FA Posting Type" := "FA Posting Type"::"Acquisition Cost";
                                                                  GetFAPostingGroup
                                                                END ELSE BEGIN
                                                                  "Depreciation Book Code" := '';
                                                                  "FA Posting Date" := 0D;
                                                                  "Salvage Value" := 0;
                                                                  "Depr. until FA Posting Date" := FALSE;
                                                                  "Depr. Acquisition Cost" := FALSE;
                                                                  "Maintenance Code" := '';
                                                                  "Insurance No." := '';
                                                                  "Budgeted FA No." := '';
                                                                  "Duplicate in Depreciation Book" := '';
                                                                  "Use Duplication List" := FALSE;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 5600=R;
                                                   CaptionML=ENU=FA Posting Type;
                                                   OptionCaptionML=ENU=" ,Acquisition Cost,Maintenance";
                                                   OptionString=[ ,Acquisition Cost,Maintenance] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                GetFAPostingGroup;
                                                              END;

                                                   CaptionML=ENU=Depreciation Book Code }
    { 5603;   ;Salvage Value       ;Decimal       ;CaptionML=ENU=Salvage Value;
                                                   AutoFormatType=1 }
    { 5605;   ;Depr. until FA Posting Date;Boolean;AccessByPermission=TableData 5600=R;
                                                   CaptionML=ENU=Depr. until FA Posting Date }
    { 5606;   ;Depr. Acquisition Cost;Boolean     ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=ENU=Depr. Acquisition Cost }
    { 5609;   ;Maintenance Code    ;Code10        ;TableRelation=Maintenance;
                                                   CaptionML=ENU=Maintenance Code }
    { 5610;   ;Insurance No.       ;Code20        ;TableRelation=Insurance;
                                                   CaptionML=ENU=Insurance No. }
    { 5611;   ;Budgeted FA No.     ;Code20        ;TableRelation="Fixed Asset";
                                                   OnValidate=BEGIN
                                                                IF "Budgeted FA No." <> '' THEN BEGIN
                                                                  FA.GET("Budgeted FA No.");
                                                                  FA.TESTFIELD("Budgeted Asset",TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Budgeted FA No. }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                "Use Duplication List" := FALSE;
                                                              END;

                                                   CaptionML=ENU=Duplicate in Depreciation Book }
    { 5613;   ;Use Duplication List;Boolean       ;OnValidate=BEGIN
                                                                "Duplicate in Depreciation Book" := '';
                                                              END;

                                                   AccessByPermission=TableData 5600=R;
                                                   CaptionML=ENU=Use Duplication List }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n
                                                                  DATABASE::"Plant Type", "Plant Type", //**4PS.n
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Service Order","Service Order No.", //** 4PS 09-06-2010
                                                                  DATABASE::"Work Center","Work Center No.");
                                                                  //DATABASE::Location,"Location Code"); //**4PS.n  //*C007227.o
                                                              END;

                                                   CaptionML=ENU=Responsibility Center;
                                                   Editable=No }
    { 5705;   ;Cross-Reference No. ;Code20        ;OnValidate=VAR
                                                                ReturnedCrossRef@1000 : Record 5717;
                                                              BEGIN
                                                                GetPurchHeader;
                                                                "Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";

                                                                ReturnedCrossRef.INIT;
                                                                IF "Cross-Reference No." <> '' THEN BEGIN
                                                                  DistIntegration.ICRLookupPurchaseItem(Rec,ReturnedCrossRef);
                                                                  VALIDATE("No.",ReturnedCrossRef."Item No.");
                                                                  SetVendorItemNo;
                                                                  IF ReturnedCrossRef."Variant Code" <> '' THEN
                                                                    VALIDATE("Variant Code",ReturnedCrossRef."Variant Code");
                                                                  IF ReturnedCrossRef."Unit of Measure" <> '' THEN
                                                                    VALIDATE("Unit of Measure Code",ReturnedCrossRef."Unit of Measure");
                                                                  UpdateDirectUnitCost(FIELDNO("Cross-Reference No."));
                                                                END;

                                                                "Unit of Measure (Cross Ref.)" := ReturnedCrossRef."Unit of Measure";
                                                                "Cross-Reference Type" := ReturnedCrossRef."Cross-Reference Type";
                                                                "Cross-Reference Type No." := ReturnedCrossRef."Cross-Reference Type No.";
                                                                "Cross-Reference No." := ReturnedCrossRef."Cross-Reference No.";

                                                                IF ReturnedCrossRef.Description <> '' THEN
                                                                  Description := ReturnedCrossRef.Description;

                                                                UpdateICPartner;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CrossReferenceNoLookUp;
                                                            END;

                                                   AccessByPermission=TableData 5717=R;
                                                   CaptionML=ENU=Cross-Reference No. }
    { 5706;   ;Unit of Measure (Cross Ref.);Code10;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=ENU=Unit of Measure (Cross Ref.) }
    { 5707;   ;Cross-Reference Type;Option        ;CaptionML=ENU=Cross-Reference Type;
                                                   OptionCaptionML=ENU=" ,Customer,Vendor,Bar Code";
                                                   OptionString=[ ,Customer,Vendor,Bar Code] }
    { 5708;   ;Cross-Reference Type No.;Code30    ;CaptionML=ENU=Cross-Reference Type No. }
    { 5709;   ;Item Category Code  ;Code10        ;TableRelation="Item Category";
                                                   CaptionML=ENU=Item Category Code }
    { 5710;   ;Nonstock            ;Boolean       ;AccessByPermission=TableData 5718=R;
                                                   CaptionML=ENU=Nonstock }
    { 5711;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   OnValidate=BEGIN
                                                                IF PurchasingCode.GET("Purchasing Code") THEN BEGIN
                                                                  "Drop Shipment" := PurchasingCode."Drop Shipment";
                                                                  "Special Order" := PurchasingCode."Special Order";
                                                                END ELSE
                                                                  "Drop Shipment" := FALSE;
                                                                VALIDATE("Drop Shipment","Drop Shipment");
                                                              END;

                                                   CaptionML=ENU=Purchasing Code }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=ENU=Product Group Code }
    { 5713;   ;Special Order       ;Boolean       ;OnValidate=BEGIN
                                                                IF (xRec."Special Order" <> "Special Order") AND (Quantity <> 0) THEN
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=ENU=Special Order }
    { 5714;   ;Special Order Sales No.;Code20     ;TableRelation=IF (Special Order=CONST(Yes)) "Sales Header".No. WHERE (Document Type=CONST(Order));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Special Order Sales No." <> "Special Order Sales No.") AND (Quantity <> 0) THEN
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                              END;

                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=ENU=Special Order Sales No. }
    { 5715;   ;Special Order Sales Line No.;Integer;
                                                   TableRelation=IF (Special Order=CONST(Yes)) "Sales Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                                              Document No.=FIELD(Special Order Sales No.));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Special Order Sales Line No." <> "Special Order Sales Line No.") AND (Quantity <> 0) THEN
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                              END;

                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=ENU=Special Order Sales Line No. }
    { 5750;   ;Whse. Outstanding Qty. (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Receipt Line"."Qty. Outstanding (Base)" WHERE (Source Type=CONST(39),
                                                                                                                             Source Subtype=FIELD(Document Type),
                                                                                                                             Source No.=FIELD(Document No.),
                                                                                                                             Source Line No.=FIELD(Line No.)));
                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=ENU=Whse. Outstanding Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5752;   ;Completely Received ;Boolean       ;CaptionML=ENU=Completely Received;
                                                   Editable=No }
    { 5790;   ;Requested Receipt Date;Date        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF (CurrFieldNo <> 0) AND
                                                                   ("Promised Receipt Date" <> 0D)
                                                                THEN
                                                                  ERROR(
                                                                    Text023,
                                                                    FIELDCAPTION("Requested Receipt Date"),
                                                                    FIELDCAPTION("Promised Receipt Date"));

                                                                //**4PS.so
                                                                //IF "Requested Receipt Date" <> 0D THEN
                                                                //  VALIDATE("Order Date",  //NeverResetOrderDate
                                                                //    CalendarMgmt.CalcDateBOC2(AdjustDateFormula("Lead Time Calculation"),"Requested Receipt Date",
                                                                //    CalChange."Source Type"::Vendor,"Buy-from Vendor No.",'',
                                                                //    CalChange."Source Type"::Location,"Location Code",'',TRUE))
                                                                //ELSE
                                                                //**4PS.eo
                                                                IF "Requested Receipt Date" = 0D THEN //**4PS.n
                                                                  IF "Requested Receipt Date" <> xRec."Requested Receipt Date" THEN
                                                                    GetUpdateBasicDates;
                                                                //**4PS15 MMA 19-02-2010.sn
                                                                IF "Requested Receipt Date" <> xRec."Requested Receipt Date" THEN BEGIN
                                                                  VALIDATE("Req. Rcpt Date Modified By",USERID);
                                                                  IF "Requested Receipt Date" <> 0D THEN  //*32319.n
                                                                    VALIDATE(
                                                                      "Expected Receipt Date",
                                                                      CalendarMgmt.CalcDateBOC2(InternalLeadTimeDays("Requested Receipt Date"),"Requested Receipt Date",
                                                                        CalChange."Source Type"::Vendor,"Buy-from Vendor No.",'',
                                                                        CalChange."Source Type"::Location,"Location Code",'',TRUE))
                                                                END;
                                                                //++4PS15 MMA 19-02-2010.en
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=ENU=Requested Receipt Date }
    { 5791;   ;Promised Receipt Date;Date         ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  IF "Promised Receipt Date" <> 0D THEN
                                                                    VALIDATE("Planned Receipt Date","Promised Receipt Date")
                                                                  ELSE
                                                                    VALIDATE("Requested Receipt Date")
                                                                ELSE
                                                                  VALIDATE("Planned Receipt Date","Promised Receipt Date");
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=ENU=Promised Receipt Date }
    { 5792;   ;Lead Time Calculation;DateFormula  ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Requested Receipt Date" <> 0D THEN BEGIN
                                                                  VALIDATE("Planned Receipt Date");
                                                                END ELSE
                                                                  GetUpdateBasicDates;

                                                                //**4PS.sn
                                                                IF (FORMAT("Lead Time Calculation") = '') OR
                                                                   (CurrFieldNo = FIELDNO("Lead Time Calculation")) THEN  //db, 09-07-09: M14482
                                                                  CheckDeliveryTime(CurrFieldNo);
                                                                //**4PS.en

                                                                BalanceDatesAndDeliveryPeriod(FIELDNO("Lead Time Calculation")); //**4PS.n
                                                              END;

                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Lead Time Calculation }
    { 5793;   ;Inbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Promised Receipt Date" <> 0D) OR
                                                                   ("Requested Receipt Date" <> 0D)
                                                                THEN
                                                                  VALIDATE("Planned Receipt Date")
                                                                ELSE
                                                                  VALIDATE("Expected Receipt Date");
                                                              END;

                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=ENU=Inbound Whse. Handling Time }
    { 5794;   ;Planned Receipt Date;Date          ;OnValidate=VAR
                                                                MinimumReceiptDate@1100528804 : Date;
                                                                CompInfoRec@1100528802 : Record 79;
                                                                NonWorkDate@1100528801 : Boolean;
                                                                dummyDesc@1100528800 : Text[30];
                                                              BEGIN
                                                                TestStatusOpen;

                                                                IF "Promised Receipt Date" <> 0D THEN BEGIN
                                                                  IF "Planned Receipt Date" <> 0D THEN
                                                                    "Expected Receipt Date" :=
                                                                      CalendarMgmt.CalcDateBOC(InternalLeadTimeDays("Planned Receipt Date"),"Planned Receipt Date",
                                                                        CalChange."Source Type"::Location,"Location Code",'',
                                                                        CalChange."Source Type"::Location,"Location Code",'',FALSE)
                                                                  ELSE
                                                                    "Expected Receipt Date" := "Planned Receipt Date";
                                                                END ELSE
                                                                  IF "Planned Receipt Date" <> 0D THEN BEGIN
                                                                //**4PS.so
                                                                //    "Order Date" :=  //NeverResetOrderDate
                                                                //      CalendarMgmt.CalcDateBOC2(AdjustDateFormula("Lead Time Calculation"),"Planned Receipt Date",
                                                                //        CalChange."Source Type"::Vendor,"Buy-from Vendor No.",'',
                                                                //        CalChange."Source Type"::Location,"Location Code",'',TRUE);
                                                                //**4PS.eo
                                                                    "Expected Receipt Date" :=
                                                                      CalendarMgmt.CalcDateBOC(InternalLeadTimeDays("Planned Receipt Date"),"Planned Receipt Date",
                                                                        CalChange."Source Type"::Location,"Location Code",'',
                                                                        CalChange."Source Type"::Location,"Location Code",'',FALSE)
                                                                  END ELSE
                                                                    GetUpdateBasicDates;

                                                                // dp00310.sn
                                                                PurchSetup.GET;
                                                                CompInfoRec.GET;
                                                                //IF PurchSetup."Allow Nonworking Receipt Date" THEN BEGIN
                                                                IF (PurchSetup."Allow Nonworking Receipt Date") AND ("Document Type" = "Document Type"::Order) THEN BEGIN    //**4PS CALL T003802 (document type test from 041)
                                                                  MinimumReceiptDate := CALCDATE("Lead Time Calculation", "Order Date");
                                                                  NonWorkDate := CalendarMgmt.CheckDateStatus(CompInfoRec."Base Calendar Code", "Planned Receipt Date", dummyDesc);
                                                                  IF NonWorkDate = TRUE THEN BEGIN
                                                                    IF "Planned Receipt Date" < MinimumReceiptDate THEN
                                                                      BalanceDatesAndDeliveryPeriod(FIELDNO("Planned Receipt Date"))
                                                                    ELSE BEGIN
                                                                      "Expected Receipt Date" := "Planned Receipt Date";
                                                                      IF (CurrFieldNo = FIELDNO("Planned Receipt Date")) THEN
                                                                        MESSAGE(Text11012035);
                                                                    END;
                                                                  END ELSE
                                                                    BalanceDatesAndDeliveryPeriod(FIELDNO("Planned Receipt Date"));
                                                                END ELSE
                                                                // dp00310.en
                                                                  BalanceDatesAndDeliveryPeriod(FIELDNO("Planned Receipt Date")); //**4PS.n

                                                                IF NOT TrackingBlocked THEN
                                                                  CheckDateConflict.PurchLineCheck(Rec,CurrFieldNo <> 0);
                                                                CheckReservationDateConflict(FIELDNO("Planned Receipt Date"));
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=ENU=Planned Receipt Date }
    { 5795;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF (CurrFieldNo <> 0) AND
                                                                   ("Document Type" = "Document Type"::Order) AND
                                                                   ("Order Date" < WORKDATE) AND
                                                                   ("Order Date" <> 0D)
                                                                THEN
                                                                  MESSAGE(
                                                                    Text018,
                                                                    FIELDCAPTION("Order Date"),"Order Date",WORKDATE);

                                                                //**4PS.so
                                                                //IF ("Order Date" <> 0D) THEN
                                                                //  "Planned Receipt Date" :=
                                                                //    CalendarMgmt.CalcDateBOC(AdjustDateFormula("Lead Time Calculation"),"Order Date",
                                                                //      CalChange."Source Type"::Vendor,"Buy-from Vendor No.",'',
                                                                //      CalChange."Source Type"::Location,"Location Code",'',TRUE);
                                                                //
                                                                //IF "Planned Receipt Date" <> 0D THEN
                                                                //  "Expected Receipt Date" :=
                                                                //    CalendarMgmt.CalcDateBOC(InternalLeadTimeDays("Planned Receipt Date"),"Planned Receipt Date",
                                                                //      CalChange."Source Type"::Location,"Location Code",'',
                                                                //      CalChange."Source Type"::Location,"Location Code",'',FALSE)
                                                                //ELSE
                                                                //  "Expected Receipt Date" := "Planned Receipt Date";
                                                                //**4PS.so

                                                                BalanceDatesAndDeliveryPeriod(FIELDNO("Order Date")); //**4PS.n

                                                                IF NOT TrackingBlocked THEN
                                                                  CheckDateConflict.PurchLineCheck(Rec,CurrFieldNo <> 0);
                                                                CheckReservationDateConflict(FIELDNO("Order Date"));
                                                              END;

                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Order Date }
    { 5800;   ;Allow Item Charge Assignment;Boolean;
                                                   InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                CheckItemChargeAssgnt;
                                                              END;

                                                   AccessByPermission=TableData 5800=R;
                                                   CaptionML=ENU=Allow Item Charge Assignment }
    { 5801;   ;Qty. to Assign      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Charge Assignment (Purch)"."Qty. to Assign" WHERE (Document Type=FIELD(Document Type),
                                                                                                                            Document No.=FIELD(Document No.),
                                                                                                                            Document Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Qty. to Assign;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5802;   ;Qty. Assigned       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Charge Assignment (Purch)"."Qty. Assigned" WHERE (Document Type=FIELD(Document Type),
                                                                                                                           Document No.=FIELD(Document No.),
                                                                                                                           Document Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Qty. Assigned;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5803;   ;Return Qty. to Ship ;Decimal       ;OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) AND
                                                                   (Type = Type::Item) AND
                                                                   ("Return Qty. to Ship" <> 0) AND
                                                                   (NOT "Drop Shipment")
                                                                THEN
                                                                  CheckWarehouse;

                                                                IF "Return Qty. to Ship" = Quantity - "Return Qty. Shipped" THEN
                                                                  InitQtyToShip
                                                                ELSE BEGIN
                                                                  "Return Qty. to Ship (Base)" := CalcBaseQty("Return Qty. to Ship");
                                                                  InitQtyToInvoice;
                                                                END;
                                                                IF ("Return Qty. to Ship" * Quantity < 0) OR
                                                                   (ABS("Return Qty. to Ship") > ABS("Outstanding Quantity")) OR
                                                                   (Quantity * "Outstanding Quantity" < 0)
                                                                THEN
                                                                  ERROR(
                                                                    Text020,
                                                                    "Outstanding Quantity");
                                                                IF ("Return Qty. to Ship (Base)" * "Quantity (Base)" < 0) OR
                                                                   (ABS("Return Qty. to Ship (Base)") > ABS("Outstanding Qty. (Base)")) OR
                                                                   ("Quantity (Base)" * "Outstanding Qty. (Base)" < 0)
                                                                THEN
                                                                  ERROR(
                                                                    Text021,
                                                                    "Outstanding Qty. (Base)");

                                                                IF (CurrFieldNo <> 0) AND (Type = Type::Item) AND ("Return Qty. to Ship" > 0) THEN
                                                                  CheckApplToItemLedgEntry;
                                                              END;

                                                   AccessByPermission=TableData 6650=R;
                                                   CaptionML=ENU=Return Qty. to Ship;
                                                   DecimalPlaces=0:5 }
    { 5804;   ;Return Qty. to Ship (Base);Decimal ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Return Qty. to Ship","Return Qty. to Ship (Base)");
                                                              END;

                                                   CaptionML=ENU=Return Qty. to Ship (Base);
                                                   DecimalPlaces=0:5 }
    { 5805;   ;Return Qty. Shipped Not Invd.;Decimal;
                                                   CaptionML=ENU=Return Qty. Shipped Not Invd.;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5806;   ;Ret. Qty. Shpd Not Invd.(Base);Decimal;
                                                   CaptionML=ENU=Ret. Qty. Shpd Not Invd.(Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5807;   ;Return Shpd. Not Invd.;Decimal     ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetPurchHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF PurchHeader."Currency Code" <> '' THEN
                                                                  "Return Shpd. Not Invd. (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        1,PurchHeader."Job No.", //**4PS.n
                                                                        GetDate,"Currency Code",
                                                                //      "Return Shpd. Not Invd.",PurchHeader."Currency Factor"), //**4PS.o
                                                                        "Return Shpd. Not Invd.",PurchHeader."Currency Factor",FALSE), //**4PS.n
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Return Shpd. Not Invd. (LCY)" :=
                                                                    ROUND("Return Shpd. Not Invd.",Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Return Shpd. Not Invd.;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 5808;   ;Return Shpd. Not Invd. (LCY);Decimal;
                                                   CaptionML=ENU=Return Shpd. Not Invd. (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5809;   ;Return Qty. Shipped ;Decimal       ;AccessByPermission=TableData 6650=R;
                                                   CaptionML=ENU=Return Qty. Shipped;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5810;   ;Return Qty. Shipped (Base);Decimal ;CaptionML=ENU=Return Qty. Shipped (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 6600;   ;Return Shipment No. ;Code20        ;CaptionML=ENU=Return Shipment No.;
                                                   Editable=No }
    { 6601;   ;Return Shipment Line No.;Integer   ;CaptionML=ENU=Return Shipment Line No.;
                                                   Editable=No }
    { 6608;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason Purchase";
                                                   OnValidate=VAR
                                                                PurchasesPayablesSetup@1100525000 : Record 312;
                                                              BEGIN
                                                                ValidateReturnReasonCode(FIELDNO("Return Reason Code"));
                                                                //**4PS.sn
                                                                IF PurchasesPayablesSetup.GET THEN
                                                                  IF PurchasesPayablesSetup."Return Reason Not Mandatory" THEN
                                                                    EXIT;
                                                                PurchHeader.GET("Document Type","Document No.");
                                                                IF (PurchHeader."Purchase Order Type" = PurchHeader."Purchase Order Type"::"Return Order") THEN BEGIN
                                                                  IF NOT ((Quantity >=0) AND CheckReturnOrderAdminCostLine(PurchHeader, Rec)) THEN
                                                                    TESTFIELD("Return Reason Code")
                                                                END ELSE BEGIN
                                                                  IF ("Return Reason Code" <> '') THEN
                                                                    PurchHeader.TESTFIELD("Purchase Order Type", PurchHeader."Purchase Order Type"::"Return Order");
                                                                END;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Return Reason Code;
                                                   Description=4PS: TableRelation "Return Reasons" instead of "Return Reason" }
    { 11012000;;Job Description    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job.Description WHERE (No.=FIELD(Job No.)));
                                                   CaptionML=ENU=Job Description;
                                                   Editable=No }
    { 11012002;;Purchase Order Type;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purchase Header"."Purchase Order Type" WHERE (Document Type=CONST(Order),
                                                                                                                     No.=FIELD(Document No.)));
                                                   CaptionML=ENU=Purchase Order Type;
                                                   OptionCaptionML=ENU=Purchase Order,Blanket Order,Return Order;
                                                   OptionString=Purchase Order,Blanket Order,Return Order;
                                                   Editable=No }
    { 11012003;;Return Caused by Vendor;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Return Reason Purchase"."Caused by Vendor" WHERE (Code=FIELD(Return Reason Code)));
                                                   CaptionML=ENU=Return Caused by Vendor;
                                                   Description=Of the "Return Reason" (field 6608);
                                                   Editable=No }
    { 11012004;;Purchase Order Status;Option      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purchase Header".Status WHERE (Document Type=FIELD(Document Type),
                                                                                                      No.=FIELD(Document No.)));
                                                   CaptionML=ENU=Purchase Order Status;
                                                   OptionCaptionML=ENU=Open,Released,Pending Approval,Pending Prepayment,,,,,Closed;
                                                   OptionString=Open,Released,Pending Approval,Pending Prepayment,,,,,Closed;
                                                   Description=Purchase Header Status (not only for Order);
                                                   Editable=No }
    { 11012005;;Vendor Name        ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Buy-from Vendor No.)));
                                                   CaptionML=ENU=Vendor Name;
                                                   Editable=No }
    { 11012006;;Vendor Charge      ;Boolean       ;CaptionML=ENU=Vendor Charge }
    { 11012007;;Vendor Charge Type ;Option        ;CaptionML=ENU=Vendor Charge Type;
                                                   OptionCaptionML=ENU=" ,Service Charge,Small Order Charge,Transport Charge,Packing Charge,Deleted Discount";
                                                   OptionString=[ ,Service Charge,Small Order Charge,Transport Charge,Packing Charge,Deleted Discount];
                                                   Editable=No }
    { 11012010;;Invoice Lines Input;Boolean       ;CaptionML=ENU=Invoice Lines Input }
    { 11012011;;Manually VAT Posting;Boolean      ;CaptionML=ENU=Manually VAT Posting }
    { 11012020;;Balance Incl. VAT  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Amount Including VAT" WHERE (Document Type=FIELD(Document Type),
                                                                                                                 Document No.=FIELD(Document No.)));
                                                   CaptionML=ENU=Balance Incl. VAT;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012030;;Balance Excl. VAT  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line".Amount WHERE (Document Type=FIELD(Document Type),
                                                                                                 Document No.=FIELD(Document No.)));
                                                   CaptionML=ENU=Balance Excl. VAT;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012040;;Purchase Action    ;Code10        ;TableRelation=IF (Document Type=CONST(Quote),
                                                                     Estimate No.=FILTER(<>'')) "Estimate Purchase Action".Code WHERE (Estimate No.=FIELD(Estimate No.))
                                                                     ELSE IF (Document Type=CONST(Quote),
                                                                              Estimate No.=FILTER(='')) "Project Purchase Action".Code WHERE (Project No.=FIELD(Job No.))
                                                                              ELSE "Project Purchase Action".Code WHERE (Project No.=FIELD(Job No.),
                                                                                                                         Status=FILTER(>=Approved));
                                                   OnValidate=VAR
                                                                lvProjPurchActionRec@1100485000 : Record 11012026;
                                                                lvBudgetLine@1100485001 : Record 11012001;
                                                                lvTotAmount@1100485002 : Decimal;
                                                              BEGIN
                                                                //**4PS call C-008731, C-011804
                                                                IF (CurrFieldNo <> 0) THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  IF PurchSetup."Purchase Action Auto Close" THEN BEGIN
                                                                    IF (xRec."Purchase Action" <> '') THEN
                                                                      IF ("Purchase Action" <> xRec."Purchase Action") OR ("Job No." <> xRec."Job No.") THEN BEGIN
                                                                        IF xRec."Job No." <> '' THEN BEGIN
                                                                          IF CONFIRM(Text11012020, TRUE, FIELDCAPTION(
                                                                            "Purchase Action"), xRec."Purchase Action", FIELDCAPTION("Job No."), xRec."Job No.") THEN
                                                                          BEGIN
                                                                            lvBudgetLine.SETRANGE("Project No.", xRec."Job No.");
                                                                            lvBudgetLine.SETRANGE("Purchase Action", xRec."Purchase Action");
                                                                            lvBudgetLine.SETRANGE(Advised, TRUE);
                                                                            IF lvBudgetLine.FINDSET(TRUE, FALSE) THEN
                                                                              REPEAT
                                                                                lvBudgetLine.Advised := FALSE;
                                                                                lvBudgetLine.MODIFY;
                                                                              UNTIL lvBudgetLine.NEXT = 0;
                                                                          END;
                                                                        END ELSE BEGIN
                                                                          //add something for calculation here?
                                                                        END;
                                                                      END;

                                                                    IF ("Purchase Action" <> '') THEN BEGIN
                                                                      IF "Job No." <> '' THEN BEGIN
                                                                        lvProjPurchActionRec.GET("Job No.", "Purchase Action");
                                                                        lvBudgetLine.RESET;
                                                                        lvBudgetLine.SETRANGE("Project No.", "Job No.");
                                                                        lvBudgetLine.SETRANGE("Purchase Action", "Purchase Action");
                                                                        lvBudgetLine.SETRANGE(Advised, FALSE);
                                                                        IF lvBudgetLine.FINDSET(TRUE, FALSE) THEN BEGIN
                                                                          VALIDATE(Element, lvBudgetLine.Element);
                                                                          VALIDATE("Extension Contract", lvBudgetLine."Extension Contract");
                                                                          VALIDATE("Plot No.",lvBudgetLine."Plot No.");
                                                                          VALIDATE("Cost Type", lvBudgetLine."Cost Type" + 1);
                                                                          VALIDATE("Shortcut Dimension 2 Code", lvBudgetLine."Cost Object");
                                                                          VALIDATE("Unit of Measure", lvBudgetLine."Unit of Measure");
                                                                          GetPurchHeader;
                                                                          IF NOT PurchHeader."Amounts only" THEN
                                                                            VALIDATE(Quantity, 1);
                                                                          REPEAT
                                                                            lvTotAmount := lvTotAmount + lvBudgetLine.Amount;
                                                                            lvBudgetLine.Advised := TRUE;
                                                                            lvBudgetLine.MODIFY;
                                                                          UNTIL lvBudgetLine.NEXT = 0;
                                                                          VALIDATE("Line Amount", lvTotAmount);
                                                                        END;
                                                                      END;
                                                                    END;

                                                                  END;

                                                                  //C-014017.sn
                                                                  IF ("Document Type" = "Document Type"::Order) AND ("Purchase Action" <> '') THEN BEGIN
                                                                    GetPurchHeader;
                                                                    IF PurchHeader."Purchase Action" = '' THEN BEGIN
                                                                      PurchHeader."Purchase Action" := "Purchase Action";
                                                                      PurchHeader.MODIFY;
                                                                    END ELSE BEGIN
                                                                      PurchLine2.RESET;
                                                                      PurchLine2.SETRANGE("Document Type", "Document Type");
                                                                      PurchLine2.SETRANGE("Document No.", "Document No.");
                                                                      PurchLine2.SETFILTER("Line No.", '<%1',"Line No.");
                                                                      PurchLine2.SETFILTER("Purchase Action", '<>%1&<>%2', '', "Purchase Action");
                                                                      IF PurchLine2.ISEMPTY THEN BEGIN
                                                                        PurchHeader."Purchase Action" := "Purchase Action";
                                                                        PurchHeader.MODIFY;
                                                                      END;
                                                                    END;
                                                                  END;
                                                                  //C-014017.en
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Purchase Action }
    { 11012050;;Purchase Phase     ;Code10        ;CaptionML=ENU=Purchase Phase;
                                                   Numeric=Yes }
    { 11012060;;Cost Type          ;Option        ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                TESTFIELD("Quantity Received",0);
                                                                TESTFIELD("Reserved Qty. (Base)",0);
                                                                TESTFIELD("Receipt No.",'');
                                                                GetPurchHeader;
                                                                IF PurchHeader."Amounts only" THEN BEGIN
                                                                  TESTFIELD("Amt. Rcd. Not Invoiced",0);
                                                                  TESTFIELD("Amnt. Received",0);
                                                                END;
                                                                CheckCostTypeOrder;
                                                                IF ("Shortcut Dimension 2 Code" <> '') AND ("No." <> '') THEN
                                                                  IF ("Cost Type" <> xRec."Cost Type") AND NOT HideDialog THEN  //db, 11-02-11: M25031
                                                                    IF CONFIRM(Text11012004,TRUE) THEN BEGIN
                                                                      VALIDATE("Shortcut Dimension 2 Code",'');
                                                                      "Item No." := '';
                                                                      "Basic Item" := '';
                                                                      "Trade Item" := '';
                                                                      Manufacturer := '';
                                                                    END ELSE BEGIN
                                                                      "Cost Type" := xRec."Cost Type";
                                                                      EXIT;
                                                                    END;

                                                                CheckAdditionalCostService;
                                                                IF "Cost Type" <> "Cost Type"::Material THEN
                                                                  "Inward Processing Relief" := FALSE;
                                                              END;

                                                   CaptionML=ENU=Cost Type;
                                                   OptionCaptionML=ENU=" ,Labor,Material,Subcontracting,Plant,Sundry";
                                                   OptionString=[ ,Labor,Material,Subcontracting,Plant,Sundry] }
    { 11012070;;Element            ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Project Element".Element WHERE (Project No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                CheckCompanyIC;
                                                                TestStatusOpen;
                                                                ElementFormat.FormatElem(Element,2,"Receiving Company");
                                                                IF Element <> '' THEN BEGIN
                                                                  ProjElemRec.GET("Job No.",Element);
                                                                  ProjElemRec.CheckProjectElementBlocked;  //call: 6564
                                                                END ELSE BEGIN
                                                                  ProjElemRec.INIT;
                                                                END;
                                                                Level := ProjElemRec.Level;
                                                                Chapter := ProjElemRec.Chapter;
                                                                Paragraph := ProjElemRec.Paragraph;
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              OnLookupElement(TRUE);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 11012071;;Level              ;Integer       ;CaptionML=ENU=Level;
                                                   Editable=No }
    { 11012072;;Chapter            ;Code20        ;CaptionML=ENU=Chapter;
                                                   Editable=No }
    { 11012073;;Paragraph          ;Code20        ;CaptionML=ENU=Paragraph;
                                                   Editable=No }
    { 11012080;;Extension Contract ;Code10        ;TableRelation=IF (Receiving Company=FILTER('')) "Extension Contract"."Contract No." WHERE (Project No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                TestStatusOpen;
                                                                IF "Extension Contract" <> '' THEN BEGIN
                                                                  CheckCompanyIC;
                                                                  ExtensionContract.GET("Job No.", "Extension Contract");
                                                                  //Call 21488
                                                                  IF ExtensionContract.Status = ExtensionContract.Status::Expired THEN
                                                                    ExtensionContract.FIELDERROR(Status);
                                                                  //
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              OnLookupExtensionContract(TRUE);
                                                            END;

                                                   CaptionML=ENU=Extension Contract }
    { 11012085;;Plot No.           ;Code10        ;TableRelation=Plot."Plot No." WHERE (Project No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Plot No. }
    { 11012090;;Risc Coverage Amount (LCY);Decimal;OnValidate=BEGIN
                                                                VALIDATE("Release Risc Coverage (LCY)");
                                                              END;

                                                   CaptionML=ENU=Risc Coverage Amount (LCY);
                                                   AutoFormatType=1 }
    { 11012100;;Release Risc Coverage (LCY);Decimal;
                                                   OnValidate=BEGIN
                                                                IF "Release Risc Coverage (LCY)" > "Risc Coverage Amount (LCY)" THEN
                                                                  ERROR(Text11012005,
                                                                       FIELDCAPTION("Release Risc Coverage (LCY)"),
                                                                       FIELDCAPTION("Risc Coverage Amount (LCY)"));
                                                              END;

                                                   CaptionML=ENU=Release Risc Coverage (LCY);
                                                   AutoFormatType=1 }
    { 11012110;;Posting Date       ;Date          ;CaptionML=ENU=Posting Date }
    { 11012120;;Amount (LCY)       ;Decimal       ;CaptionML=ENU=Amount (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012130;;Rec./Not Inv. exc.VAT (LCY);Decimal;
                                                   CaptionML=ENU=Rec./Not Inv. exc.VAT (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012140;;Outst. Amount exc. VAT (LCY);Decimal;
                                                   CaptionML=ENU=Outst. Amount exc. VAT (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012141;;Outst. Amount exc. VAT;Decimal    ;CaptionML=ENU=Outst. Amount exc. VAT;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012142;;Ovh.Surch.Expected Costs (LCY);Decimal;
                                                   CaptionML=ENU=Ovh.Surch.Expected Costs (LCY);
                                                   Editable=No }
    { 11012145;;Receiving Company  ;Text30        ;TableRelation=Company;
                                                   OnValidate=VAR
                                                                ICLicenceCu@1210190000 : Codeunit 11012780;
                                                              BEGIN
                                                                //**4PS
                                                                ICLicenceCu.CheckICEntry("Receiving Company");

                                                                IF ("Receiving Company" <> '') THEN BEGIN
                                                                  IF "Rental Unit" <> '' THEN
                                                                    "Rental Unit" := '';
                                                                  IF "Plant Location" <> '' THEN
                                                                    "Plant Location" := '';
                                                                END;

                                                                IF CurrFieldNo = FIELDNO("Receiving Company") THEN BEGIN  //**4PS DP00387 sn
                                                                  //Only allow changes in Receiving Company when related data is ok
                                                                  TESTFIELD("Job No.", '');
                                                                  TESTFIELD("Service Order No.", '');
                                                                  TESTFIELD("Plant Type", '');
                                                                  TESTFIELD("Plant No.", '');
                                                                END;                                                      //**4PS DP00387 en

                                                                VALIDATE("Dimension Set ID", DimMgt.GetDimSetInCompany("Dimension Set ID",xRec."Receiving Company", "Receiving Company"));
                                                              END;

                                                   CaptionML=ENU=Receiving Company }
    { 11012150;;Item No.           ;Code20        ;TableRelation=Item.No.;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                //IF ("Item No." <> '') THEN      //*C-028911.n  //*33895.o
                                                                //  TESTFIELD("Plant Type", '');  //*C-028911.n  //*33895.o
                                                                IF ("Item No." <> '') AND (CheckPlantAcquisitionOrRent(Rec) <> 0) THEN
                                                                  FIELDERROR("Item No.", Text11012017);

                                                                IF "Item No." <> xRec."Item No." THEN BEGIN
                                                                  IF "Item No." <> '' THEN BEGIN
                                                                    CheckCostTypeCondition;  //db, 11-02-11: M25031
                                                                    //db.sn, 24-01-07: M8000
                                                                    SaveFieldNo := CurrFieldNo;
                                                                    CurrFieldNo := FIELDNO("No.");  //force update price by UpdateDirectUnitCost(FIELDNO("No."))
                                                                    ValidateItem(ItemTypeOpt::Item);
                                                                    CurrFieldNo := SaveFieldNo;
                                                                    SaveFieldNo := 0;
                                                                    //db.en, 24-01-07: M8000
                                                                    IF CurrFieldNo = FIELDNO("Item No.") THEN BEGIN
                                                                      ValidateVendor;
                                                                      IF "Vendor (Trade Item)" <> '' THEN
                                                                        CheckVendorRelation;  //db, 28-02-05: M7541
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    Type := Type::"G/L Account";
                                                                    IF Type <> xRec.Type THEN
                                                                      "No." := '';
                                                                  END;
                                                                END;

                                                                IF "Item No." <> '' THEN
                                                                  ItemRec.GET("Item No.");

                                                                IF ("Plant Type" <> '') THEN  //*33895.n
                                                                  VALIDATE("Plant Type");     //*33895.n

                                                                //** DP0121
                                                                IF "Item No." <> xRec."Item No." THEN
                                                                  IF (Quantity <> 0) AND NSItemExists(xRec."Item No.") THEN
                                                                    ReservePurchLine.VerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 11012151;;Basic Item         ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                //IF ("Basic Item" <> '') THEN    //*C-028911.n  //*33895.o
                                                                //  TESTFIELD("Plant Type", '');  //*C-028911.n  //*33895.o
                                                                IF ("Basic Item" <> '') AND (CheckPlantAcquisitionOrRent(Rec) <> 0) THEN
                                                                  FIELDERROR("Basic Item", Text11012017);

                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN BEGIN
                                                                  CheckCostTypeCondition;  //db, 11-02-11: M25031
                                                                  ValidateItem(ItemTypeOpt::"Basic Item");
                                                                  IF CurrFieldNo = FIELDNO("Basic Item") THEN
                                                                    ValidateVendor;
                                                                END;

                                                                IF ("Plant Type" <> '') THEN  //*33895.n
                                                                  VALIDATE("Plant Type");     //*33895.n
                                                              END;

                                                   CaptionML=ENU=Basic Item }
    { 11012152;;Trade Item         ;Code20        ;TableRelation=IF (Vendor (Trade Item)=FILTER(<>'')) "Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"))
                                                                 ELSE IF (Vendor (Trade Item)=FILTER('')) "Trade Item"."Item Code";
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                //IF ("Trade Item" <> '') THEN    //*C-028911.n  //*33895.o
                                                                //  TESTFIELD("Plant Type", '');  //*C-028911.n  //*33895.o
                                                                IF ("Trade Item" <> '') AND (CheckPlantAcquisitionOrRent(Rec) <> 0) THEN
                                                                  FIELDERROR("Trade Item", Text11012017);

                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN BEGIN
                                                                  CheckCostTypeCondition;  //db, 11-02-11: M25031
                                                                  IF (CurrFieldNo = FIELDNO("Trade Item")) AND ("Vendor (Trade Item)" = '') THEN
                                                                    CheckRelatedVendor;
                                                                  ValidateItem(ItemTypeOpt::"Trade Item");
                                                                  UpdateLeadTimeFields;
                                                                  CheckVendorRelation;
                                                                  CalculateICMQuantity;
                                                                  IF "Blanket Order No." = '' THEN
                                                                    StrategicPurchMgt.CheckTradeItem("Trade Item","Vendor (Trade Item)","Buy-from Vendor No.");
                                                                END;
                                                                IF ("Trade Item" <> '') THEN
                                                                  TESTFIELD("Vendor (Trade Item)");  //db, 02-09-13: C003743
                                                                IF ("Plant Type" <> '') THEN  //*33895.n
                                                                  VALIDATE("Plant Type");     //*33895.n
                                                              END;

                                                   CaptionML=ENU=Trade Item }
    { 11012154;;Manufacturer       ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                //IF (Manufacturer <> '') THEN    //*C-028911.n  //*33895.o
                                                                //  TESTFIELD("Plant Type", '');  //*C-028911.n  //*33895.o
                                                                IF (Manufacturer <> '') AND (CheckPlantAcquisitionOrRent(Rec) <> 0) THEN
                                                                  FIELDERROR(Manufacturer, Text11012017);

                                                                IF ("Plant Type" <> '') THEN  //*33895.n
                                                                  VALIDATE("Plant Type");     //*33895.n
                                                              END;

                                                   CaptionML=ENU=Manufacturer }
    { 11012155;;Vendor (Trade Item);Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=VAR
                                                                TradeVendorRec@1100525000 : Record 11012304;
                                                                TradeItemRec@1100525001 : Record 11012317;
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                //**4PS
                                                                //IF ("Vendor (Trade Item)" <> '') THEN //*C-028911.n  //*33895.o
                                                                //  TESTFIELD("Plant Type", '');        //*C-028911.n  //*33895.o
                                                                IF ("Vendor (Trade Item)" <> '') AND (CheckPlantAcquisitionOrRent(Rec) <> 0) THEN
                                                                  FIELDERROR("Vendor (Trade Item)", Text11012017);

                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") AND ("Vendor (Trade Item)" <> '') THEN BEGIN
                                                                  TradeVendorRec.HandleVendorValidate("Vendor (Trade Item)");
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  //db.sn, 17-12-10: M18021
                                                                  IF lvExecValidate THEN BEGIN
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item")
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor");
                                                                  END;
                                                                  //db.en, 17-12-10: M18021
                                                                  CheckVendorRelation;
                                                                END;

                                                                IF ("Plant Type" <> '') THEN  //*33895.n
                                                                  VALIDATE("Plant Type");     //*33895.n
                                                              END;

                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 11012161;;Allow Exceeding Order Quantity;Boolean;
                                                   CaptionML=ENU=Allow Exceeding Order Quantity }
    { 11012164;;Amnt. to Receive   ;Decimal       ;OnValidate=BEGIN
                                                                //**4PS
                                                                //IF "Amnt. to Receive" = "Line Amount" - "Amnt. Received" THEN BEGIN //C027348.o
                                                                IF "Amnt. to Receive" = Amount - "Amnt. Received" THEN BEGIN //C027348.n
                                                                  OnlyCheckForOpen := TRUE;
                                                                  InitAmntToReceive;
                                                                END ELSE
                                                                  InitAmntToInvoice;

                                                                IF "Line Amount" > 0 THEN BEGIN
                                                                  IF ("Amnt. to Receive" > "Outst. Amount exc. VAT") THEN
                                                                    ERROR(Text11012009, "Outst. Amount exc. VAT");
                                                                  IF ("Amnt. to Receive" < -"Amnt. Received") THEN
                                                                    ERROR(Text11012009, -"Amnt. Received");
                                                                END ELSE BEGIN
                                                                  IF ("Amnt. to Receive" < "Outst. Amount exc. VAT") THEN
                                                                    ERROR(Text11012009, "Outst. Amount exc. VAT");
                                                                  IF ("Amnt. to Receive" > -"Amnt. Received") THEN
                                                                    ERROR(Text11012009, -"Amnt. Received");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Amnt. to Receive;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012165;;Amnt. to Invoice   ;Decimal       ;OnValidate=BEGIN
                                                                IF "Amnt. to Invoice" = MaxAmntToInvoice THEN
                                                                  InitAmntToInvoice;
                                                                IF ("Amnt. to Invoice" * "Line Amount" < 0) OR (ABS("Amnt. to Invoice") > ABS(MaxAmntToInvoice)) THEN
                                                                  ERROR(Text11012008, MaxAmntToInvoice);
                                                              END;

                                                   CaptionML=ENU=Amnt. to Invoice;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012166;;Amnt. Invoiced     ;Decimal       ;CaptionML=ENU=Amnt. Invoiced;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012167;;Amnt. Received     ;Decimal       ;CaptionML=ENU=Amnt. Received;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012168;;Amnt. Received incl. VAT;Decimal  ;CaptionML=ENU=Amnt. Received incl. VAT;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012169;;Amnt. Invoiced incl. VAT;Decimal  ;CaptionML=ENU=Amnt. Invoiced incl. VAT;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012171;;Amt. Rcd. Not Invoiced exc.VAT;Decimal;
                                                   CaptionML=ENU=Amt. Rcd. Not Invoiced exc.VAT;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012172;;Estimate No.       ;Code20        ;TableRelation=Estimate.No.;
                                                   CaptionML=ENU=Estimate No. }
    { 11012173;;Expected Back Order Date;Date     ;CaptionML=ENU=Expected Back Order Date }
    { 11012181;;Total Quantity Blanket Scheme;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Blanket Scheme".Quantity WHERE (Document No.=FIELD(Document No.),
                                                                                                    Document Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Total Quantity Blanket Scheme;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 11012190;;Quote Selected     ;Boolean       ;OnValidate=VAR
                                                                lvDocNo@1210190000 : Code[20];
                                                                lvLineNo@1210190001 : Integer;
                                                              BEGIN
                                                                //**4PS
                                                                IF ("Document Type" <> "Document Type"::Quote) THEN
                                                                 "Quote Selected" := FALSE;

                                                                IF "Quote Selected" THEN BEGIN
                                                                  IF NOT RouteRefMgtCU.SetQuoteToOrderAllowed("Purchase Route Reference","Document No.", lvDocNo, lvLineNo) THEN
                                                                    FIELDERROR("Quote Selected", STRSUBSTNO(Text11012012, lvDocNo, lvLineNo));
                                                                  IF ("Purchase Route Reference" <> '') AND ("Buy-from Vendor No." <> '') THEN
                                                                    UpdateAdviceOrderVendor(TRUE);
                                                                END ELSE BEGIN
                                                                  IF (xRec."Quote Selected") AND ("Purchase Route Reference" <> '') THEN
                                                                    UpdateAdviceOrderVendor(FALSE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Selected }
    { 11012195;;Approve Receipt    ;Option        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Approve Receipt" <> "Approve Receipt"::" " THEN BEGIN
                                                                  IF ("Document Type" <> "Document Type"::Order) THEN
                                                                    "Approve Receipt" := "Approve Receipt"::" "
                                                                  ELSE BEGIN
                                                                    GetPurchHeader;
                                                                    IF PurchHeader."Amounts only" THEN
                                                                      TESTFIELD("Amnt. to Receive")
                                                                    ELSE
                                                                      TESTFIELD("Qty. to Receive");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Approve Receipt;
                                                   OptionCaptionML=ENU=" ,Yes,No";
                                                   OptionString=[ ,Yes,No] }
    { 11012196;;Comment Receipt    ;Text30        ;OnValidate=BEGIN
                                                                IF ("Comment Receipt" <> '') THEN BEGIN
                                                                  IF ("Document Type" <> "Document Type"::Order) THEN
                                                                    "Comment Receipt" := ''
                                                                  ELSE BEGIN
                                                                    GetPurchHeader;
                                                                    IF PurchHeader."Amounts only" THEN
                                                                      TESTFIELD("Amnt. to Receive")
                                                                    ELSE
                                                                      TESTFIELD("Qty. to Receive");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Comment Receipt }
    { 11012200;;Text               ;Text250       ;OnValidate=BEGIN
                                                                //**4PS
                                                                "Text Block" := Text <> '';
                                                              END;

                                                   CaptionML=ENU=Text }
    { 11012201;;Text Block         ;Boolean       ;CaptionML=ENU=Text Block;
                                                   Editable=No }
    { 11012210;;Employee No.       ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No. }
    { 11012215;;Wage Component     ;Code10        ;TableRelation="Wage Component";
                                                   CaptionML=ENU=Wage Component }
    { 11012220;;Price Agreement    ;Boolean       ;OnValidate=BEGIN
                                                                //**4PS
                                                                PurchSetup.GET;
                                                                IF PurchSetup."Price Agreement" = PurchSetup."Price Agreement"::" " THEN
                                                                  TESTFIELD("Price Agreement", FALSE);
                                                                IF PurchSetup."Price Agreement" = PurchSetup."Price Agreement"::Company THEN
                                                                  TESTFIELD("Price Agreement", TRUE);
                                                              END;

                                                   CaptionML=ENU=Price Agreement }
    { 11012230;;Purchase Route Reference;Code20   ;OnLookup=VAR
                                                              lvRouteRefMgtCU@1210190000 : Codeunit 11012045;
                                                            BEGIN
                                                              lvRouteRefMgtCU.ShowReferenceList("Purchase Route Reference");
                                                            END;

                                                   CaptionML=ENU=Purchase Route Reference;
                                                   Editable=No }
    { 11012240;;Shelf No.          ;Code20        ;TableRelation="Shelf per Location".Code WHERE (Location Code=FIELD(Location Code));
                                                   CaptionML=ENU=Shelf No. }
    { 11012250;;Cost Component     ;Code20        ;TableRelation="Cost Component".Code;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                TestStatusOpen;
                                                                ValidateCostComponent;
                                                              END;

                                                   CaptionML=ENU=Cost Component }
    { 11012251;;Item Type          ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Type" WHERE (Product Code=FIELD(Basic Item),
                                                                                                      Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Type;
                                                   Editable=No }
    { 11012252;;Item Brand         ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Brand" WHERE (Product Code=FIELD(Basic Item),
                                                                                                       Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Brand;
                                                   Editable=No }
    { 11012253;;Item Series        ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Series" WHERE (Product Code=FIELD(Basic Item),
                                                                                                        Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Series;
                                                   Editable=No }
    { 11012260;;Cost Plus Entry Created;Boolean   ;CaptionML=ENU=Cost Plus Entry Created;
                                                   Editable=No }
    { 11012261;;Outstanding-Rcd/Not Invoiced;Boolean;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Outstanding Amount" <> 0) OR ("Amt. Rcd. Not Invoiced" <> 0) THEN
                                                                  "Outstanding-Rcd/Not Invoiced" := TRUE
                                                                ELSE
                                                                  "Outstanding-Rcd/Not Invoiced" := FALSE;
                                                              END;

                                                   CaptionML=ENU=Outstanding-Received/Not Invoiced }
    { 11012265;;Valid Until        ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purchase Header"."Valid Until" WHERE (Document Type=FIELD(Document Type),
                                                                                                             No.=FIELD(Document No.)));
                                                   CaptionML=ENU=Valid Until;
                                                   Editable=No }
    { 11012270;;Sales Price        ;Decimal       ;CaptionML=ENU=Sales Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 11012275;;Discount % (Item)  ;Decimal       ;OnValidate=BEGIN
                                                                //**4PS
                                                                CalculateCostPriceLCY;
                                                              END;

                                                   CaptionML=ENU=Discount % (Item);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 11012280;;Tender Paragraph   ;Text10        ;TableRelation="Project Tender Paragraph"."Tender Paragraph" WHERE (Project No.=FIELD(Job No.),
                                                                                                                      Level=CONST(Tender Paragraph));
                                                   OnValidate=VAR
                                                                GWWSetupRec@1100525000 : Record 11012260;
                                                              BEGIN
                                                                //**4PS
                                                                IF "Tender Paragraph" <> '' THEN //CALL C012145 n
                                                                  IF GWWSetupRec.GET THEN BEGIN  //CALL C012145 n
                                                                    GWWMgtCU.FormatTenderElement("Tender Paragraph");
                                                                    IF CurrFieldNo <> 0 THEN
                                                                      CALCFIELDS("Description Tender Paragraph");
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Tender Paragraph }
    { 11012285;;Description Tender Paragraph;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Tender Paragraph".Description WHERE (Project No.=FIELD(Job No.),
                                                                                                                    Tender Paragraph=FIELD(Tender Paragraph)));
                                                   CaptionML=ENU=Description Tender Paragraph;
                                                   Editable=No }
    { 11012286;;Tender Paragraph Text;Text80      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Tender Paragraph Text".Text WHERE (Project No.=FIELD(Job No.),
                                                                                                                  Tender Paragraph=FIELD(Tender Paragraph)));
                                                   CaptionML=ENU=Tender Paragraph Text;
                                                   Editable=No }
    { 11012290;;Tender Paragraph Part;Text10      ;TableRelation="Project Tender Paragraph Part"."Tender Paragraph Part" WHERE (Project No.=FIELD(Job No.),
                                                                                                                                Tender Paragraph=FIELD(Tender Paragraph));
                                                   OnValidate=VAR
                                                                GWWSetupRec@1100525000 : Record 11012260;
                                                              BEGIN
                                                                //**4PS
                                                                IF "Tender Paragraph Part" <> '' THEN //CALL C012145 n
                                                                  IF GWWSetupRec.GET THEN BEGIN       //CALL C012145 n
                                                                    GWWMgtCU.FormatTenderElementPart("Tender Paragraph Part");
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Tender Paragraph Part }
    { 11012295;;Descr Tender Paragraph Part;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Tender Paragraph Part".Description WHERE (Project No.=FIELD(Job No.),
                                                                                                                         Tender Paragraph=FIELD(Tender Paragraph),
                                                                                                                         Tender Paragraph Part=FIELD(Tender Paragraph Part)));
                                                   CaptionML=ENU=Description Tender Paragraph Part;
                                                   Editable=No }
    { 11012310;;FSC Type Code      ;Code10        ;TableRelation="FSC Type";
                                                   CaptionML=ENU=FSC Type Code }
    { 11012315;;Input by           ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Input by;
                                                   Editable=No }
    { 11012316;;Input Date         ;Date          ;CaptionML=ENU=Input Date;
                                                   Editable=No }
    { 11012317;;Modified by        ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Modified by;
                                                   Editable=No }
    { 11012318;;Last Date Modified ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=No }
    { 11012320;;No Project Stock   ;Boolean       ;OnValidate=BEGIN
                                                                //C021402
                                                                IF "No Project Stock" THEN BEGIN
                                                                  IF ("Document Type" <> "Document Type"::Order) OR ("Job No." = '') THEN
                                                                    "No Project Stock" := FALSE
                                                                  ELSE BEGIN
                                                                    InvtSetup.GET;
                                                                    IF (NOT InvtSetup.JobInventoryByLocationShelf("Job No.")) THEN
                                                                      "No Project Stock" := FALSE;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=No Project Stock }
    { 11012350;;Req. Rcpt Date Modified By;Code50 ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Requested Receipt Date modified by;
                                                   Editable=No }
    { 11012400;;Reserved NS Qty. (Base);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("NS Reservation Entry"."Quantity (Base)" WHERE (Source Type=CONST(39),
                                                                                                                   Source Subtype=FIELD(Document Type),
                                                                                                                   Source ID=FIELD(Document No.),
                                                                                                                   Source Ref. No.=FIELD(Line No.),
                                                                                                                   Reservation Status=CONST(Reservation)));
                                                   CaptionML=ENU=Reserved Non-stock Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 11012440;;Plant Location     ;Code20        ;TableRelation="Plant Location" WHERE (Depot=CONST(No));
                                                   OnValidate=VAR
                                                                PlantCostComp@1100409000 : Record 11012575;
                                                              BEGIN
                                                                //**4PS (C001519)
                                                                IF "Plant Location" <> '' THEN BEGIN
                                                                  TESTFIELD("Receiving Company", '');
                                                                  TESTFIELD("Cost Component Plant");
                                                                  PlantCostComp.GET("Cost Component Plant");
                                                                  PlantCostComp.TESTFIELD("Charge Purchase");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Plant Location }
    { 11012442;;Plant Transport Ride No.;Code20   ;TableRelation="Plant Transport Ride";
                                                   CaptionML=ENU=Plant Transport Ride No.;
                                                   Editable=No }
    { 11012443;;Expected Enddate Rent;Date        ;OnValidate=VAR
                                                                lvText11012001@1100485000 : TextConst 'ENU=%1 only allowed for external rented Plant.';
                                                              BEGIN
                                                                //**4PS
                                                                IF ("Expected Enddate Rent" <> 0D) THEN BEGIN
                                                                  TESTFIELD("Plant Type");
                                                                  TESTFIELD("Cost Component Plant");
                                                                  IF CheckPlantAcquisitionOrRent(Rec) <> 2 THEN
                                                                   ERROR(lvText11012001, FIELDCAPTION("Expected Enddate Rent"));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Expected Enddate Rent }
    { 11012444;;Ext. Rented Plant Invoiced to;Date;OnValidate=VAR
                                                                lvPlantSetupRec@1100485000 : Record 11012550;
                                                                lvDate@1100485001 : Date;
                                                                lvText11012001@1100485002 : TextConst 'ENU=New date ''External Rent Invoiced to'' (%1) is less than ''Already Invoiced to'' (%2). \The date ''External Rent Invoiced to'' of the Plant No. will be set to %1.\ \Are yoe sure?';
                                                                lvText11012002@1100485003 : TextConst 'ENU=New date ''External Rent Invoiced to'' (%1) is GREATER than ''Already Invoiced to'' (%2), are yoe sure?';
                                                              BEGIN
                                                                IF ("Ext. Rented Plant Invoiced to" <> 0D) THEN BEGIN
                                                                  TESTFIELD("Receiving Company", '');
                                                                  lvPlantSetupRec.GET;
                                                                  lvPlantSetupRec.TESTFIELD("Cost Component Rent");
                                                                  TESTFIELD("Plant Type");
                                                                  TESTFIELD("Plant No.");
                                                                  TESTFIELD("Cost Component Plant", lvPlantSetupRec."Cost Component Rent");
                                                                  { 10-03-20100, no checks, update "Ext. Rented Invoiced to" in CU90 is modified
                                                                  IF CurrFieldNo = FIELDNO("Ext. Rented Plant Invoiced to") THEN BEGIN
                                                                    lvDate := PrevExtRentedPlantInvoicedTo();
                                                                    IF (lvDate <> 0D) THEN BEGIN
                                                                      IF ("Document Type" = "Document Type"::Invoice) AND ("Ext. Rented Plant Invoiced to" < lvDate) THEN BEGIN
                                                                        IF NOT CONFIRM(lvText11012001, FALSE, "Ext. Rented Plant Invoiced to", lvDate) THEN
                                                                          ERROR('');
                                                                      END;
                                                                      IF ("Document Type" = "Document Type"::"Credit Memo") AND ("Ext. Rented Plant Invoiced to" > lvDate) THEN BEGIN
                                                                        IF NOT CONFIRM(lvText11012002, FALSE, "Ext. Rented Plant Invoiced to", lvDate) THEN
                                                                          ERROR('');
                                                                      END;
                                                                    END;
                                                                  END;
                                                                  }
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Ext. Rented Plant Invoiced to }
    { 11012445;;Plant Transport Order No.;Code20  ;OnLookup=VAR
                                                              lvTransOrderRec@1100485000 : Record 11020505;
                                                              lvPostedTransOrderRec@1100485001 : Record 11020507;
                                                            BEGIN
                                                              //**4PS
                                                              //* Note: No return value, fields is not editable.

                                                              IF "Plant Transport Order No." = '' THEN
                                                                EXIT;

                                                              IF lvTransOrderRec.GET("Plant Transport Order No.") THEN
                                                                PAGE.RUNMODAL(0, lvTransOrderRec)
                                                              ELSE BEGIN
                                                                IF lvPostedTransOrderRec.GET("Plant Transport Order No.") THEN
                                                                  PAGE.RUNMODAL(0, lvPostedTransOrderRec);
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Plant Transport Order;
                                                   Editable=No }
    { 11012446;;Plant Order No.    ;Code20        ;TableRelation="Plant Order";
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Plant Order No.;
                                                   Editable=No }
    { 11012447;;Plant Order Line No.;Integer      ;TableRelation="Plant Order Line"."Line No." WHERE (Plant Order No.=FIELD(Plant Order No.));
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Plant Order Line No.;
                                                   Editable=No }
    { 11012448;;Direct Delivery Plant;Boolean     ;CaptionML=ENU=Direct Delivery Plant;
                                                   Editable=No }
    { 11012449;;Vendor Plant No.   ;Code20        ;OnValidate=VAR
                                                                lvSavePlantType@1100485000 : Code[20];
                                                              BEGIN
                                                                //**4PS
                                                                IF "Vendor Plant No." = '' THEN
                                                                  EXIT;

                                                                IF ("Buy-from Vendor No." = '') THEN BEGIN
                                                                  GetPurchHeader;
                                                                  "Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
                                                                END;

                                                                CheckCompanyIC;
                                                                PlantVendorRec.RESET;
                                                                PlantVendorRec.SETCURRENTKEY("Vendor No.", "Vendor Plant No.");
                                                                PlantVendorRec.SETRANGE("Vendor No.", "Buy-from Vendor No.");
                                                                PlantVendorRec.SETRANGE("Vendor Plant No.", "Vendor Plant No.");
                                                                IF PlantVendorRec.FIND('-') THEN BEGIN
                                                                  lvSavePlantType := "Plant Type";
                                                                  "Plant Type" := PlantVendorRec."Plant Type";
                                                                  DeterminePlantVendorType(FALSE);
                                                                  "Plant Type" := lvSavePlantType;
                                                                  IF ((PlantVendorRec.Type = PlantVendorRec.Type::Purchase) AND (PlantVendorType = PlantVendorRec.Type::Rent)) OR
                                                                     ((PlantVendorRec.Type = PlantVendorRec.Type::Rent) AND (PlantVendorType = PlantVendorRec.Type::Purchase))
                                                                  THEN BEGIN
                                                                    IF PlantVendorRec.GET(PlantVendorRec."Plant Type", "Buy-from Vendor No.", PlantVendorType) THEN
                                                                      "Vendor Plant No." := PlantVendorRec."Vendor Plant No."
                                                                    ELSE
                                                                      "Vendor Plant No." := '';
                                                                  END;
                                                                  VALIDATE("Plant Type", PlantVendorRec."Plant Type");
                                                                END ELSE BEGIN
                                                                  IF ("Plant Type" <> '') THEN BEGIN
                                                                    DeterminePlantVendorType(FALSE);
                                                                    //* If 'Vendor Plant No' is not present and 'Plant Type' has "Vendor Plant No." then empty 'Plant Type'
                                                                    IF PlantVendorRec.GET("Plant Type", "Buy-from Vendor No.", PlantVendorType) THEN
                                                                      VALIDATE("Plant Type", '');
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              IF ("Buy-from Vendor No." = '') THEN BEGIN
                                                                GetPurchHeader;
                                                                "Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
                                                              END;

                                                              CheckCompanyIC;
                                                              PlantVendorRec.RESET;
                                                              PlantVendorRec.SETCURRENTKEY("Vendor No.", "Vendor Plant No.");
                                                              PlantVendorRec.SETRANGE("Vendor No.", "Buy-from Vendor No.");
                                                              IF ("Plant Type" <> '') THEN BEGIN
                                                                DeterminePlantVendorType(FALSE);
                                                                PlantVendorRec.SETRANGE(Type, PlantVendorType);
                                                              END;
                                                              PlantVendorRec."Vendor No." := "Buy-from Vendor No.";
                                                              PlantVendorRec."Vendor Plant No." := "Vendor Plant No.";
                                                              IF PAGE.RUNMODAL(0,PlantVendorRec) = ACTION::LookupOK THEN BEGIN
                                                                IF (PlantVendorRec."Vendor No." = "Buy-from Vendor No.") THEN
                                                                  VALIDATE("Vendor Plant No.", PlantVendorRec."Vendor Plant No.");
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Vendor Plant No. }
    { 11012550;;Plant Type         ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Plant Type";
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                FillSystemCreatedEntry;
                                                                IF "Plant Type" = '' THEN BEGIN
                                                                  "Plant No." := '';
                                                                  "Cost Component Plant" := '';
                                                                  "Expected Enddate Rent" := 0D;
                                                                  "Ext. Rented Plant Invoiced to" := 0D;
                                                                  IF "Document Type" = "Document Type"::Order THEN
                                                                    DeletePurchOrderPlntRentalRate();
                                                                  EXIT;
                                                                //*C-028911.sn
                                                                END ELSE BEGIN
                                                                  IF (CheckPlantAcquisitionOrRent(Rec) <> 0) THEN BEGIN  //*33895.n
                                                                    TESTFIELD("Item No.", '');
                                                                    TESTFIELD("Basic Item", '');
                                                                    TESTFIELD("Trade Item", '');
                                                                  END;  //*33895.n
                                                                //*C-028911.en
                                                                END;

                                                                CheckCompanyIC;
                                                                PlantTypeRec.GET("Plant Type");
                                                                IF "Document Type" IN ["Document Type"::Order, "Document Type"::Quote] THEN  //DP00485 (C009313)
                                                                  PlantTypeRec.TESTFIELD(Blocked, FALSE);

                                                                VALIDATE("Plant No.");
                                                                //IF "Plant No." = '' THEN                    //**4PS.o
                                                                //  Description := PlantTypeRec.Description;  //**4PS.o

                                                                IF ("Item No." + "Basic Item" + "Trade Item" <> '') THEN EXIT;  //*33895.n

                                                                IF ("Plant Type" <> xRec."Plant Type") OR ("Unit of Measure Code" = '') THEN BEGIN
                                                                  IF (CheckPlantAcquisitionOrRent(Rec) <> 0) THEN BEGIN
                                                                    VALIDATE("Unit of Measure Code", PlantTypeRec."Unit of Measure");
                                                                    UpdateDirectUnitCost(FIELDNO("Plant Type"));
                                                                  END;
                                                                END;

                                                                IF (CurrFieldNo <> FIELDNO("Vendor Plant No."))  AND ("Document No." <> '') THEN BEGIN
                                                                  IF ("Buy-from Vendor No." = '') THEN BEGIN
                                                                    GetPurchHeader;
                                                                    "Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
                                                                  END;
                                                                  DeterminePlantVendorType(TRUE);
                                                                END;

                                                                Description := GetTranslatedPlantDesc(MAXSTRLEN(Description)); //**4PS.n

                                                                IF ("Document Type" = "Document Type"::Order) AND ("Plant Type" <> xRec."Plant Type") THEN BEGIN
                                                                  DeletePurchOrderPlntRentalRate();
                                                                  FillQtyWithPlantReorderQty();
                                                                END;

                                                                //**4PS.sn 25-03-2010
                                                                IF ("Document Type" = "Document Type"::Invoice) AND
                                                                   ("Receiving Company" <> '') AND
                                                                   ("Plant Type" <> xRec."Plant Type") AND
                                                                   (CurrFieldNo = FIELDNO("Plant Type")) THEN
                                                                BEGIN
                                                                  "Shortcut Dimension 1 Code" := PlantTypeRec."Department Code";
                                                                END;
                                                                //**4PS.en 25-03-2010
                                                                CreateDim(
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n
                                                                  DATABASE::"Plant Type","Plant Type",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Service Order","Service Order No.", //** 4PS 09-06-2010
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Work Center","Work Center No.");
                                                                  //DATABASE::Location,"Location Code"); //**4PS.n  //*C007227.o
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              OnLookupPlantType(TRUE);
                                                            END;

                                                   CaptionML=ENU=Plant Type }
    { 11012551;;Plant No.          ;Code10        ;TableRelation=IF (Receiving Company=FILTER('')) "Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Plant No." = '' THEN BEGIN
                                                                  IF "Plant Type" <> '' THEN BEGIN
                                                                    VALIDATE("Cost Component Plant");
                                                                    IF ("Item No." + "Basic Item" + "Trade Item" = '') THEN  //*33895.n
                                                                      UpdateDirectUnitCost(FIELDNO("Plant No."));
                                                                  END;
                                                                  EXIT;
                                                                END;

                                                                TESTFIELD("Plant Type");
                                                                CheckCompanyIC;

                                                                PlantNoRec.GET("Plant Type", "Plant No.");

                                                                //*33895.sn
                                                                IF ("Item No." + "Basic Item" + "Trade Item" <> '') THEN BEGIN
                                                                  VALIDATE("Cost Component Plant");
                                                                  EXIT;
                                                                END;
                                                                //*33895.en

                                                                //Description := PlantNoRec.Description; //**4PS.o
                                                                Description := GetTranslatedPlantDesc(MAXSTRLEN(Description)); //**4PS.n

                                                                PlantTypeRec.GET("Plant Type");
                                                                IF ("Plant No." <> xRec."Plant No.") AND (CurrFieldNo = FIELDNO("Plant No.")) THEN
                                                                  DeterminePlantVendorType(TRUE);

                                                                VALIDATE("Cost Component Plant");
                                                                UpdateDirectUnitCost(FIELDNO("Plant No."));
                                                                IF ("Document Type" = "Document Type"::Order) AND ("Plant No." <> '') AND (xRec."Plant No." = '') THEN
                                                                  DeletePurchOrderPlntRentalRate();

                                                                CreateDim(
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n
                                                                  DATABASE::"Plant Type","Plant Type",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Service Order","Service Order No.", //** 4PS 09-06-2010
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Work Center","Work Center No.");
                                                                  //DATABASE::Location,"Location Code"); //**4PS.n  //*C007227.o
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              OnLookupPlantNo(TRUE);
                                                            END;

                                                   CaptionML=ENU=Plant No. }
    { 11012552;;Bulk               ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Type".Bulk WHERE (Code=FIELD(Plant Type)));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                // Field do not have the right value when "Receiving Company" is filled!
                                                              END;

                                                   CaptionML=ENU=Bulk;
                                                   Editable=No }
    { 11012553;;Cost Component Plant;Code10       ;TableRelation=IF (Receiving Company=FILTER('')) "Cost Component Plant";
                                                   OnValidate=VAR
                                                                lvTypeNo@1100485000 : Integer;
                                                                lvFARel@1100485001 : Boolean;
                                                                lvModeInEx@1100485003 : Code[1];
                                                                lvVendorRec@1100525000 : Record 23;
                                                              BEGIN
                                                                //**4PS
                                                                IF "Cost Component Plant" = '' THEN BEGIN
                                                                  "Expected Enddate Rent" := 0D;
                                                                  "Ext. Rented Plant Invoiced to" := 0D;
                                                                  "Plant Location" := '';
                                                                  EXIT;
                                                                END;

                                                                TESTFIELD("Plant Type");

                                                                GetPurchHeader; //**4PS-JTH 26-03-2010

                                                                lvVendorRec.INIT;
                                                                IF lvVendorRec.GET(PurchHeader."Buy-from Vendor No.") THEN;

                                                                CheckCompanyIC;
                                                                PlantSetup.GET;
                                                                CostCompPlantRec.GET("Cost Component Plant");
                                                                PlantTypeRec.GET("Plant Type");
                                                                IF ("Plant No." <> '') THEN
                                                                  PlantNoRec.GET("Plant Type", "Plant No.");
                                                                lvTypeNo := CheckPlantAcquisitionOrRent(Rec);
                                                                IF (lvTypeNo <> 0) THEN BEGIN
                                                                  IF ("Plant No." = '') AND
                                                                     (NOT ("Document Type" IN ["Document Type"::Order, "Document Type"::Quote, "Document Type"::"Blanket Order"]))
                                                                  THEN
                                                                    TESTFIELD("Plant No.");
                                                                  //* Combination of Acquisition/Rent Plant and Item on an Order Line is not allowed, ia. related to prices and convert factor
                                                                  //* for units of measure. According to Han this should not be possible at all.
                                                                  //* -> Note: C-028911 Now combi Item-Plant never allowed  //*33895.o Combi Item-Plant only not allowed for Acq./Rent
                                                                  IF ("Item No." <> '') THEN FIELDERROR("Item No.", Text11012017);
                                                                  IF ("Basic Item" <> '') THEN FIELDERROR("Basic Item", Text11012017);
                                                                  IF ("Trade Item" <> '') THEN FIELDERROR("Trade Item", Text11012017);
                                                                  IF ("Plant No." = '') THEN BEGIN
                                                                    IF PlantTypeRec.Bulk THEN BEGIN
                                                                      IF (lvTypeNo = 1) THEN
                                                                        PlantTypeRec.TESTFIELD(External, FALSE);
                                                                      IF (lvTypeNo = 2) AND (NOT PlantSetup."Ext Bulk Plant with No. in Inv") THEN
                                                                        PlantTypeRec.TESTFIELD(External, TRUE);
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    IF (lvTypeNo = 1) THEN
                                                                      PlantNoRec.TESTFIELD(External, FALSE);
                                                                    IF (lvTypeNo = 2) THEN
                                                                      PlantNoRec.TESTFIELD(External, TRUE);
                                                                  END;
                                                                  IF Quantity < 0 THEN
                                                                    FIELDERROR(Quantity, Text11012036);  //C008579.n
                                                                END;

                                                                IF (lvTypeNo = 1) THEN
                                                                  lvFARel := FixedAssetPlantRelation();
                                                                IF (lvTypeNo <> 1) OR (NOT lvFARel) THEN BEGIN
                                                                  IF ("Plant No." = '') AND (lvTypeNo <> 0) THEN
                                                                    lvModeInEx := COPYSTR('IE', lvTypeNo, 1);  //* Internal/External

                                                                  IF NOT PlantPostingSetup.GET(PlantTypeRec.PlantPostingGrp("Plant No.","Receiving Company",lvModeInEx),
                                                                                        lvVendorRec."Vendor Posting Group",
                                                                                        "Cost Component Plant") THEN
                                                                    PlantPostingSetup.GET(PlantTypeRec.PlantPostingGrp("Plant No.","Receiving Company",lvModeInEx),
                                                                                          '', //Vendor Posting Group
                                                                                          "Cost Component Plant");

                                                                  Type := Type::"G/L Account";
                                                                  "No." := PlantPostingSetup."Plant Cost Account";
                                                                  VALIDATE("No.");
                                                                END;

                                                                IF ("Item No." + "Basic Item" + "Trade Item" <> '') THEN EXIT;  //*33895.n

                                                                IF ("Cost Component Plant" <> xRec."Cost Component Plant") AND (CurrFieldNo = FIELDNO("Cost Component Plant")) THEN
                                                                  DeterminePlantVendorType(TRUE);

                                                                IF ("Cost Component Plant" <> xRec."Cost Component Plant") OR ("Unit of Measure Code" = '') THEN BEGIN
                                                                  IF (lvTypeNo <> 0) THEN BEGIN
                                                                    IF PurchHeader."Hours Hire Order Type" <> PurchHeader."Hours Hire Order Type"::Plant THEN
                                                                      VALIDATE("Unit of Measure Code", PlantTypeRec."Unit of Measure");
                                                                    UpdateDirectUnitCost(FIELDNO("Cost Component Plant"));
                                                                  END;
                                                                END;
                                                                IF ("Document Type" = "Document Type"::Order) AND ("Cost Component Plant" <> xRec."Cost Component Plant") THEN BEGIN
                                                                  DeletePurchOrderPlntRentalRate();
                                                                  FillQtyWithPlantReorderQty();
                                                                END;

                                                                IF (lvTypeNo <> 2) THEN BEGIN
                                                                  "Expected Enddate Rent" := 0D;
                                                                  "Ext. Rented Plant Invoiced to" := 0D;
                                                                END;

                                                                CreateDim(
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n
                                                                  DATABASE::"Plant Type","Plant Type",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Service Order","Service Order No.", //** 4PS 09-06-2010
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Work Center","Work Center No.");
                                                                  //DATABASE::Location,"Location Code"); //**4PS.n  //*C007227.o


                                                                //**4PSmg.sn, 29-03-11: M25024
                                                                //*OLD 25-05-2011  Function call moved to OnValidate on form (F54 Purch. Order Subform), see additional comment on call 25024
                                                                //IF "Document Type" = "Document Type"::Order THEN
                                                                //  IF "Cost Component Plant" = PlantSetup."Cost Component Acquisition" THEN
                                                                //    FillShipToLocWithPlantDepot();
                                                                //**4PSmg.en, 29-03-11: M25024
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              CheckCompanyIC;
                                                              CostCompPlantRec.Code := "Cost Component Plant";
                                                              IF PAGE.RUNMODAL(0,CostCompPlantRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Cost Component Plant", CostCompPlantRec.Code);
                                                            END;

                                                   CaptionML=ENU=Cost Component Plant }
    { 11012554;;ICM Quantity       ;Decimal       ;CaptionML=ENU=ICM Quantity;
                                                   Editable=No }
    { 11012555;;ICM Unit           ;Code10        ;CaptionML=ENU=ICM Unit;
                                                   Editable=No }
    { 11012556;;ICM Quantity Confirmed;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("ICM Order Confirmation Line".Quantity WHERE (Order No.=FIELD(Document No.),
                                                                                                                 Confirmation/Error=CONST(Confirmation),
                                                                                                                 ItemNumber=FIELD(Trade Item)));
                                                   CaptionML=ENU=ICM Quantity Confirmed;
                                                   Editable=No }
    { 11012557;;ICM Quantity Error ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("ICM Order Confirmation Line".Quantity WHERE (Confirmation/Error=CONST(Error),
                                                                                                                 Order No.=FIELD(Document No.),
                                                                                                                 ItemNumber=FIELD(Trade Item)));
                                                   CaptionML=ENU=ICM Quantity Error;
                                                   Editable=No }
    { 11012560;;ICF Quantity       ;Decimal       ;CaptionML=ENU=ICF Quantity;
                                                   Editable=No }
    { 11012561;;ICF Unit           ;Code10        ;CaptionML=ENU=ICF Unit;
                                                   Editable=No }
    { 11012562;;ICF Price          ;Decimal       ;CaptionML=ENU=ICF Price;
                                                   Editable=No }
    { 11012563;;ICF Line Amount    ;Decimal       ;CaptionML=ENU=ICF Line Amount;
                                                   Editable=No }
    { 11012564;;ICF Line Approved  ;Boolean       ;OnValidate=VAR
                                                                lvPurchLineRec@1100485000 : Record 39;
                                                                DocApproved@1100485001 : Boolean;
                                                              BEGIN
                                                                //**4PS
                                                                GetPurchHeader;
                                                                PurchHeader.TESTFIELD("ICF Status", PurchHeader."ICF Status"::Received);
                                                                IF "ICF Line Approved" THEN BEGIN
                                                                  VALIDATE(Quantity, "ICF Quantity");
                                                                  VALIDATE("Line Amount", "ICF Line Amount");
                                                                  DocApproved := TRUE;
                                                                  lvPurchLineRec.SETRANGE("Document Type", PurchHeader."Document Type");
                                                                  lvPurchLineRec.SETRANGE("Document No.", PurchHeader."No.");
                                                                  lvPurchLineRec.SETFILTER("Line No.", '<>%1', "Line No.");
                                                                  IF lvPurchLineRec.FINDSET THEN BEGIN
                                                                    REPEAT
                                                                      IF (lvPurchLineRec.Quantity <> 0) OR (lvPurchLineRec."Line Amount" <> 0) THEN
                                                                        IF lvPurchLineRec."ICF Line Approved" = FALSE THEN
                                                                          DocApproved := FALSE;
                                                                    UNTIL lvPurchLineRec.NEXT = 0;
                                                                  END;
                                                                  IF DocApproved THEN BEGIN
                                                                    PurchHeader."ICF Status" := PurchHeader."ICF Status"::Approved;
                                                                    PurchHeader.MODIFY(TRUE);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=ICF Line Approved }
    { 11012565;;ICF Problem        ;Code10        ;CaptionML=ENU=ICF Problem }
    { 11012580;;Line VAT Amount    ;Decimal       ;CaptionML=ENU=Line VAT Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012585;;Vendor Qualification;Code10       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor."Vendor Qualification" WHERE (No.=FIELD(Buy-from Vendor No.)));
                                                   TableRelation="Vendor Qualification";
                                                   CaptionML=ENU=Vendor Qualification;
                                                   Editable=No }
    { 11012586;;Account No.        ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purchase Line".No. WHERE (Document Type=FIELD(Document Type),
                                                                                                 Document No.=FIELD(Document No.),
                                                                                                 Line No.=FIELD(Line No.),
                                                                                                 Type=CONST(G/L Account)));
                                                   CaptionML=ENU=Account No.;
                                                   Editable=No }
    { 11012600;;Budget Adjustment  ;Code10        ;TableRelation=IF (Receiving Company=FILTER('')) "Budget Adjustment".No. WHERE (Project No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Budget Adjustment }
    { 11012610;;Applies-to Retention ID;Integer   ;CaptionML=ENU=Applies-to Retention ID;
                                                   Description=Retention }
    { 11012800;;Service Order No.  ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Service Order".No.;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                TestStatusOpen;
                                                                IF "Service Order No." = '' THEN BEGIN
                                                                  "Service Location No." := '';
                                                                  "Service Contract No." := '';
                                                                  "Service Order Description" := '';
                                                                  "Service Control Year" := 0;
                                                                  "Base Service Order No." := '';
                                                                  IF "Item No." <> '' THEN BEGIN
                                                                    Type := Type::Item;
                                                                    "No." := "Item No.";
                                                                  END ELSE
                                                                    "No." := '';
                                                                END ELSE BEGIN
                                                                  TESTFIELD("Job No.", '');
                                                                  CheckCompanyIC;
                                                                  ServOrderRec.GET("Service Order No.");

                                                                  IF ("Employee No." <> '') THEN
                                                                    CheckServiceOrderStatus(TRUE) //Posting Hours
                                                                  ELSE
                                                                    CheckServiceOrderStatus(FALSE);
                                                                  TestStatusOpen;

                                                                  Type := Type::"G/L Account";
                                                                  "Service Source Type" := ServOrderRec."Source Type";
                                                                  "Service Location No." := ServOrderRec."Service Location No.";
                                                                  "Service Contract No." := ServOrderRec."Service Contract No.";
                                                                  "Service Order Description" := ServOrderRec.Description;

                                                                  CheckAdditionalCostService;
                                                                  "Base Service Order No." := ServOrderRec."Base Service Order No.";
                                                                END;
                                                                FillSystemCreatedEntry;
                                                                IF "Shortcut Dimension 2 Code" <> '' THEN
                                                                  VALIDATE("Shortcut Dimension 2 Code");
                                                                CheckCostCompServOrderType; //** 4PS06.n

                                                                //** DP0121
                                                                IF "Service Order No." <> xRec."Service Order No." THEN
                                                                  IF (Quantity <> 0) AND NSItemExists(xRec."Item No.") THEN
                                                                    ReservePurchLine.VerifyChange(Rec,xRec);
                                                                //

                                                                //** 4PS 09-06-2010 sn
                                                                CreateDim(
                                                                  DATABASE::"Service Order","Service Order No.",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n
                                                                  DATABASE::"Plant Type", "Plant Type",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Work Center","Work Center No.");
                                                                  //DATABASE::Location,"Location Code"); //**4PS.n  //*C007227.o

                                                                //** 4PS 09-06-2010 sn
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              OnLookupServiceOrderNo(TRUE);
                                                            END;

                                                   CaptionML=ENU=Service Order No. }
    { 11012801;;Service Location No.;Code20       ;TableRelation="Service Location".No.;
                                                   CaptionML=ENU=Service Location No.;
                                                   Editable=No }
    { 11012804;;Service Contract No.;Code20       ;TableRelation=Service-Contract.No.;
                                                   OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF NOT CreateFromReqLine THEN
                                                                  StrategicPurchMgt.FindContractForPurchaseLine(Rec);
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Service Contract No.;
                                                   Editable=No }
    { 11012805;;Service Source Type;Option        ;InitValue=Other;
                                                   CaptionML=ENU=Service Source Type;
                                                   OptionCaptionML=ENU=Call,Contract,Other,Estimate;
                                                   OptionString=Call,Contract,Other,Estimate;
                                                   Editable=No }
    { 11012806;;Additional Cost (Service);Boolean ;OnValidate=BEGIN
                                                                //**4PS
                                                                ValidateAdditionalCost;
                                                              END;

                                                   CaptionML=ENU=Additional Cost (Service) }
    { 11012807;;Removal Contribution;Boolean      ;CaptionML=ENU=Removal Contribution }
    { 11012808;;Base Service Order No.;Code20     ;TableRelation="Service Order".No.;
                                                   CaptionML=ENU=Base Service Order No.;
                                                   Editable=No }
    { 11012815;;Buy-from Contact No.;Code20       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purchase Header"."Buy-from Contact No." WHERE (Document Type=FIELD(Document Type),
                                                                                                                      No.=FIELD(Document No.)));
                                                   TableRelation=Contact;
                                                   CaptionML=ENU=Buy-from Contact No. }
    { 11012820;;Extra Receipt Line ;Boolean       ;CaptionML=ENU=Extra Receipt Line }
    { 11012825;;Main Project No.   ;Code20        ;TableRelation=Job;
                                                   CaptionML=ENU=Main Project No. }
    { 11012830;;Posting Date Receipt Line;Date    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purch. Rcpt. Line"."Posting Date" WHERE (Document No.=FIELD(Receipt No.),
                                                                                                                Line No.=FIELD(Receipt Line No.)));
                                                   CaptionML=ENU=Posting Date Receipt Line;
                                                   Editable=No }
    { 11012840;;Service Control Year;Integer      ;CaptionML=ENU=Service Control Year;
                                                   Editable=No }
    { 11012940;;Rental Unit        ;Code20        ;TableRelation="Rental Unit"."Rental Unit" WHERE (Project No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Rental Unit" = '' THEN
                                                                  EXIT;

                                                                TESTFIELD("Receiving Company", '');  //* IC for Rental Units will not be supported (did not work already this was i.a. General Journal)
                                                              END;

                                                   CaptionML=ENU=Rental Unit }
    { 11012945;;Service Order Description;Text50  ;CaptionML=ENU=Service Order Description }
    { 11012950;;Scheme Code        ;Code15        ;CaptionML=ENU=Scheme Code }
    { 11012960;;Inward Processing Relief;Boolean  ;OnValidate=BEGIN
                                                                //**4PS
                                                                TestStatusOpen;
                                                                IF "Cost Type" <> "Cost Type"::Material THEN
                                                                  ERROR(Text11012021);
                                                                IF "Job No." = '' THEN
                                                                  ERROR(Text11012022);
                                                              END;

                                                   CaptionML=ENU=Inward Processing Relief }
    { 11012970;;Tariff No.         ;Code20        ;TableRelation="Tariff Number";
                                                   CaptionML=ENU=Tariff No. }
    { 11012975;;Comments for Logistics;Text50     ;CaptionML=ENU=Comments for Logistics }
    { 11012976;;Vendor Authorization No.;Code35   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purchase Header"."Vendor Authorization No." WHERE (Document Type=FIELD(Document Type),
                                                                                                                          No.=FIELD(Document No.),
                                                                                                                          Buy-from Vendor No.=FIELD(Buy-from Vendor No.)));
                                                   CaptionML=ENU=Vendor Authorization No.;
                                                   Editable=No }
    { 11012980;;Entity Type        ;Option        ;OnValidate=BEGIN
                                                                //**4PS
                                                                ValidateEntityType;
                                                              END;

                                                   CaptionML=ENU=Entity Type;
                                                   OptionCaptionML=ENU=None,Cable,Device,Extra Need,Cable Transit,,,,,Position;
                                                   OptionString=None,Cable,Device,ExtraNeed,CableTransit,,,,,Position;
                                                   Description=Engineering }
    { 11012991;;Number of Labels   ;Integer       ;CaptionML=ENU=Number of Labels per Parcel }
    { 11012992;;Contract Type      ;Option        ;CaptionML=ENU=Contract Found In;
                                                   OptionCaptionML=ENU=No Contract,Contract,Contract with Discount Agreement,General Blanket Order,Project Blanket Order,Service Blanket Order;
                                                   OptionString=No Contract,Contract,Contract with Discount Agreement,General Blanket Order,Project Blanket Order,Service Blanket Order;
                                                   Editable=No }
    { 11012995;;Quantity Released  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line".Quantity WHERE (Document Type=CONST(Order),
                                                                                                   Blanket Order No.=FIELD(Document No.),
                                                                                                   Blanket Order Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Quantity Released;
                                                   Editable=No }
    { 11012996;;Parcels Qty. per UoM;Decimal      ;CaptionML=ENU=Parcels Qty. per Purchase UoM;
                                                   DecimalPlaces=0:0;
                                                   MinValue=0 }
    { 11012997;;Line Type          ;Code10        ;TableRelation=IF (Document Type=CONST(Order)) "Line Type"."Line Type" WHERE (Document Type=CONST(Purchase Order))
                                                                 ELSE IF (Document Type=CONST(Invoice)) "Line Type"."Line Type" WHERE (Document Type=CONST(Purchase Invoice));
                                                   CaptionML=ENU=Line Type }
    { 11012998;;Purchaser Code     ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purchase Header"."Purchaser Code" WHERE (Document Type=FIELD(Document Type),
                                                                                                                No.=FIELD(Document No.)));
                                                   CaptionML=ENU=Purchaser }
    { 11020310;;Exclude From Electronic Order;Boolean;
                                                   CaptionML=ENU=Exclude From Electronic Order }
    { 11020315;;Marked for Receipt Run;Boolean    ;CaptionML=ENU=Marked for Receipt Run }
    { 11020320;;Reason Code        ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 11127975;;Imported Item No.  ;Code20        ;CaptionML=ENU=Imported Item No.;
                                                   Description=RFC136 }
    { 11128010;;Auto. Acc. Group   ;Code10        ;TableRelation="Automatic Acc. Header";
                                                   CaptionML=ENU=Auto. Acc. Group;
                                                   Description=(11200) }
    { 11128011;;Periodic Template Code;Code10     ;TableRelation="Periodic Template".Code;
                                                   CaptionML=ENU=Periodic Template Code }
    { 11128012;;Periodic Starting Date;Date       ;CaptionML=ENU=Periodic Starting Date }
    { 11128013;;Date/Time Last Modified;DateTime  ;CaptionML=ENU=Date/Time Last Modified }
    { 11128060;;Charge Type        ;Option        ;CaptionML=ENU=Charge Type;
                                                   OptionCaptionML=ENU=" ,Rounding,Freight,Service Fee,Packing Fee";
                                                   OptionString=[ ,Rounding,Freight,Service Fee,Packing Fee];
                                                   Description=PEB0019 (12047958);
                                                   Editable=No }
    { 11128504;;VAT Code           ;Code10        ;TableRelation="VAT Code".Code;
                                                   OnValidate=BEGIN
                                                                NorwegianVATTools.InitPostingGrps_PurchaseLine(Rec);
                                                              END;

                                                   CaptionML=ENU=VAT Code;
                                                   Description=NAVNO }
    { 12013600;;Receipt No. Mandatory;Boolean     ;CaptionML=ENU=Receipt No. Mandatory;
                                                   Description=ExFlow }
    { 12013601;;Approve            ;Boolean       ;OnValidate=BEGIN
                                                                // ExFlow
                                                                ExFlow.ValidateApprovalPurchLine(xRec,Rec);
                                                              END;

                                                   CaptionML=ENU=Approval;
                                                   Description=ExFlow;
                                                   Editable=Yes }
    { 12013602;;Difference         ;Option        ;CaptionML=ENU=Difference;
                                                   OptionCaptionML=ENU=,VAT,Amount,Net,Remove;
                                                   OptionString=,Moms,Belopp,Netto,TaBort;
                                                   Description=ExFlow }
    { 12013603;;First Approver     ;Code50        ;OnValidate=BEGIN
                                                                // ExFlow
                                                                "First Approver" := ExFlow.FindUserGroup("First Approver",TempApproverName,FALSE);
                                                              END;

                                                   OnLookup=BEGIN
                                                              // ExFlow
                                                              TempApprover := ExFlow.LookUpUserGroup("First Approver",TempApproverName);
                                                              IF TempApprover <> "First Approver" THEN
                                                                VALIDATE("First Approver", TempApprover);
                                                            END;

                                                   CaptionML=ENU=First Approver;
                                                   Description=ExFlow }
    { 12013606;;ExFlow Order No.   ;Code20        ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("ExFlow Order No.") THEN
                                                                  ExFlow.OrderNoValidate(Rec,xRec);
                                                              END;

                                                   OnLookup=BEGIN
                                                              ExFlow.OrderNoLookup(Rec);
                                                            END;

                                                   CaptionML=ENU=Order No.;
                                                   Description=ExFlow }
    { 12013610;;History            ;Boolean       ;CaptionML=ENU=History;
                                                   Description=ExFlow }
    { 12013611;;Invoice to Customer;Boolean       ;CaptionML=ENU=Invoice to Customer;
                                                   Description=ExFlow }
    { 12013612;;Invoicing Amount   ;Decimal       ;CaptionML=ENU=Invoicing Amount;
                                                   Description=ExFlow }
    { 12013613;;Start Date for Invoicing;Date     ;CaptionML=ENU=Start Date for Invoicing;
                                                   Description=ExFlow }
    { 12013614;;Invoicing Code     ;Code10        ;OnValidate=VAR
                                                                ExInvoicingCode@1100285000 : Record 12013597;
                                                              BEGIN
                                                                ExInvoicingCode.SETRANGE("Company Name", COMPANYNAME);
                                                                ExInvoicingCode.SETRANGE("Invoicing Code", "Invoicing Code");
                                                                ExInvoicingCode.FINDFIRST;
                                                              END;

                                                   OnLookup=VAR
                                                              ExInvoicingCode@1100285000 : Record 12013597;
                                                              ExInvoicingCodeForm@1100285001 : Page 12057095;
                                                            BEGIN
                                                              ExInvoicingCode.SETRANGE("Company Name", COMPANYNAME);
                                                              ExInvoicingCodeForm.LOOKUPMODE := TRUE;
                                                              ExInvoicingCodeForm.SETTABLEVIEW(ExInvoicingCode);
                                                              IF ExInvoicingCodeForm.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                ExInvoicingCodeForm.GETRECORD(ExInvoicingCode);
                                                                VALIDATE("Invoicing Code", ExInvoicingCode."Invoicing Code");
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Invoicing Code;
                                                   Description=ExFlow }
    { 12013645;;PO Matched Document;Boolean       ;CaptionML=ENU=Matched against Purchase Order;
                                                   Description=ExFlow }
    { 12013650;;Web Receipt        ;Boolean       ;CaptionML=ENU=Web Receipt;
                                                   Description=ExFlow }
    { 12013651;;ExFlow Add         ;Boolean       ;CaptionML=ENU=ExFlow Add;
                                                   Description=ExFlow }
    { 12013652;;Fully Matched      ;Boolean       ;CaptionML=ENU=Fully Matched;
                                                   Description=ExFlow }
    { 12013655;;PO Approved Amount ;Decimal       ;CaptionML=ENU=Approved Amount;
                                                   Description=ExFlow;
                                                   Editable=No }
    { 12013659;;Applied Template Rule;Code20      ;CaptionML=ENU=Applied Template Rule;
                                                   Description=ExFlow;
                                                   Editable=No }
    { 12013660;;Template Rule      ;Code20        ;CaptionML=ENU=Template Rule;
                                                   Description=ExFlow }
    { 12013666;;Approval Flow Modified;Boolean    ;CaptionML=ENU=Approval Flow Modified;
                                                   Description=ExFlow;
                                                   Editable=No }
    { 12013667;;ExFlow Order Line No.;Integer     ;OnValidate=BEGIN
                                                                ExFlow.OrderLineNoValidate(Rec,xRec);
                                                              END;

                                                   OnLookup=BEGIN
                                                              ExFlow.OrderLineNoLookup(Rec);
                                                            END;

                                                   CaptionML=ENU=Order Line No.;
                                                   Description=ExFlow }
    { 12013668;;Contract No.       ;Integer       ;TableRelation="ExFlow Contract";
                                                   CaptionML=ENU=Contract No.;
                                                   Description=ExFlow }
    { 99000750;;Routing No.        ;Code20        ;TableRelation="Routing Header";
                                                   CaptionML=ENU=Routing No. }
    { 99000751;;Operation No.      ;Code10        ;TableRelation="Prod. Order Routing Line"."Operation No." WHERE (Status=CONST(Released),
                                                                                                                   Prod. Order No.=FIELD(Prod. Order No.),
                                                                                                                   Routing No.=FIELD(Routing No.));
                                                   OnValidate=VAR
                                                                ProdOrderRtngLine@1000 : Record 5409;
                                                              BEGIN
                                                                IF "Operation No." = '' THEN
                                                                  EXIT;

                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("Prod. Order No.");
                                                                TESTFIELD("Routing No.");

                                                                ProdOrderRtngLine.GET(
                                                                  ProdOrderRtngLine.Status::Released,
                                                                  "Prod. Order No.",
                                                                  "Routing Reference No.",
                                                                  "Routing No.",
                                                                  "Operation No.");

                                                                ProdOrderRtngLine.TESTFIELD(
                                                                  Type,
                                                                  ProdOrderRtngLine.Type::"Work Center");

                                                                "Expected Receipt Date" := ProdOrderRtngLine."Ending Date";
                                                                VALIDATE("Work Center No.",ProdOrderRtngLine."No.");
                                                                VALIDATE("Direct Unit Cost",ProdOrderRtngLine."Direct Unit Cost");
                                                              END;

                                                   CaptionML=ENU=Operation No.;
                                                   Editable=No }
    { 99000752;;Work Center No.    ;Code20        ;TableRelation="Work Center";
                                                   OnValidate=BEGIN
                                                                IF Type = Type::"Charge (Item)" THEN
                                                                  TESTFIELD("Work Center No.",'');
                                                                IF "Work Center No." = '' THEN
                                                                  EXIT;

                                                                WorkCenter.GET("Work Center No.");
                                                                "Gen. Prod. Posting Group" := WorkCenter."Gen. Prod. Posting Group";
                                                                "VAT Prod. Posting Group" := '';
                                                                IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                  "VAT Prod. Posting Group" := GenProdPostingGrp."Def. VAT Prod. Posting Group";
                                                                VALIDATE("VAT Prod. Posting Group");

                                                                "Overhead Rate" := WorkCenter."Overhead Rate";
                                                                VALIDATE("Indirect Cost %",WorkCenter."Indirect Cost %");

                                                                CreateDim(
                                                                  DATABASE::"Work Center","Work Center No.",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n
                                                                  DATABASE::"Plant Type", "Plant Type", //**4PS.n
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Service Order","Service Order No.", //** 4PS 09-06-2010
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                                  //DATABASE::Location,"Location Code"); //**4PS.n  //*C007227.o
                                                              END;

                                                   CaptionML=ENU=Work Center No.;
                                                   Editable=No }
    { 99000753;;Finished           ;Boolean       ;CaptionML=ENU=Finished }
    { 99000754;;Prod. Order Line No.;Integer      ;TableRelation="Prod. Order Line"."Line No." WHERE (Status=FILTER(Released..),
                                                                                                      Prod. Order No.=FIELD(Prod. Order No.));
                                                   CaptionML=ENU=Prod. Order Line No.;
                                                   Editable=No }
    { 99000755;;Overhead Rate      ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=ENU=Overhead Rate;
                                                   DecimalPlaces=0:5 }
    { 99000756;;MPS Order          ;Boolean       ;CaptionML=ENU=MPS Order }
    { 99000757;;Planning Flexibility;Option       ;OnValidate=BEGIN
                                                                IF "Planning Flexibility" <> xRec."Planning Flexibility" THEN
                                                                  ReservePurchLine.UpdatePlanningFlexibility(Rec);
                                                              END;

                                                   CaptionML=ENU=Planning Flexibility;
                                                   OptionCaptionML=ENU=Unlimited,None;
                                                   OptionString=Unlimited,None }
    { 99000758;;Safety Lead Time   ;DateFormula   ;OnValidate=BEGIN
                                                                VALIDATE("Inbound Whse. Handling Time");
                                                              END;

                                                   CaptionML=ENU=Safety Lead Time }
    { 99000759;;Routing Reference No.;Integer     ;CaptionML=ENU=Routing Reference No. }
  }
  KEYS
  {
    {    ;Document Type,Document No.,Line No.     ;SumIndexFields=Amount,Amount Including VAT,Amnt. Invoiced,Line VAT Amount,Amnt. Received;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Document No.,Line No.,Document Type     ;MaintainSIFTIndex=No }
    {    ;Document Type,Type,Item No.,No.,Variant Code,Drop Shipment,Location Code,Expected Receipt Date;
                                                   SumIndexFields=Outstanding Qty. (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Pay-to Vendor No.,Currency Code;
                                                   SumIndexFields=Outstanding Amount,Amt. Rcd. Not Invoiced,Outstanding Amount (LCY),Amt. Rcd. Not Invoiced (LCY),Prepmt. Amount Inv. (LCY),Prepmt. VAT Amount Inv. (LCY) }
    {    ;Document Type,Type,No.,Item No.,Variant Code,Drop Shipment,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Location Code,Expected Receipt Date,Job No.,Service Order No.;
                                                   SumIndexFields=Outstanding Qty. (Base);
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Blanket Order No.,Blanket Order Line No.;
                                                   SumIndexFields=Quantity;
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Type,Prod. Order No.,Prod. Order Line No.,Routing No.,Operation No.;
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Document No.,Location Code;MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Receipt No.,Receipt Line No.;
                                                   MaintainSIFTIndex=No }
    {    ;Type,No.,Variant Code,Drop Shipment,Location Code,Document Type,Expected Receipt Date;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Document No.,Type,No.     ;MaintainSIFTIndex=No }
    {    ;Document Type,Type,No.                  ;SumIndexFields=Outstanding Qty. (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Buy-from Vendor No.,Job No.,Purchase Action,Shortcut Dimension 2 Code,Description,Unit of Measure Code;
                                                   SumIndexFields=Amount,Quantity;
                                                   MaintainSIFTIndex=No }
    {    ;Job No.,Shortcut Dimension 2 Code       ;MaintainSIFTIndex=No }
    {    ;Job No.,Element,Shortcut Dimension 2 Code;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Purchase Route Reference  ;MaintainSIFTIndex=No }
    {    ;Document Type,Job No.,Order Date        ;SumIndexFields=Amount (LCY),Risc Coverage Amount (LCY),Release Risc Coverage (LCY);
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Job No.,Cost Type,Order Date,Purchase Action;
                                                   SumIndexFields=Amount (LCY),Risc Coverage Amount (LCY),Release Risc Coverage (LCY),Amnt. to Receive,Amnt. to Invoice,Qty. to Receive,Qty. to Invoice,Amount;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Main Project No.,Job No.,Cost Type,Shortcut Dimension 2 Code,Order Date,Purchase Action;
                                                   SumIndexFields=Amount (LCY),Risc Coverage Amount (LCY),Release Risc Coverage (LCY);
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Main Project No.,Job No.,Element,Cost Type,Order Date;
                                                   SumIndexFields=Amount (LCY),Risc Coverage Amount (LCY),Release Risc Coverage (LCY);
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Main Project No.,Job No.,Element,Shortcut Dimension 2 Code,Order Date;
                                                   SumIndexFields=Amount (LCY),Risc Coverage Amount (LCY),Release Risc Coverage (LCY);
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Service Contract No.,Service Order No.,Service Location No.,Service Control Year,Service Source Type,Order Date;
                                                   SumIndexFields=Amount (LCY),Risc Coverage Amount (LCY),Release Risc Coverage (LCY);
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Service Contract No.,Service Order No.,Service Location No.,Cost Type,Service Source Type,Service Control Year,Order Date;
                                                   SumIndexFields=Amount (LCY),Risc Coverage Amount (LCY),Release Risc Coverage (LCY);
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Job No.,Extension Contract,Cost Type,Shortcut Dimension 2 Code,Order Date;
                                                   SumIndexFields=Amount (LCY),Risc Coverage Amount (LCY),Release Risc Coverage (LCY);
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Main Project No.,Job No.,Order Date,Purchase Action,Cost Component;
                                                   SumIndexFields=Amount (LCY),Risc Coverage Amount (LCY),Release Risc Coverage (LCY);
                                                   MaintainSIFTIndex=No }
    {    ;Service Contract No.,Shortcut Dimension 2 Code;
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Service Contract No.,Service Order No.,Service Location No.,Cost Type,Shortcut Dimension 2 Code,Cost Component,Service Source Type,Service Control Year,Order Date;
                                                   SumIndexFields=Amount (LCY),Risc Coverage Amount (LCY),Release Risc Coverage (LCY);
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Service Contract No.,Cost Component,Cost Type,Shortcut Dimension 2 Code;
                                                   SumIndexFields=Amount (LCY),Risc Coverage Amount (LCY),Release Risc Coverage (LCY);
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Service Contract No.,Service Source Type,Cost Type,Shortcut Dimension 2 Code,Service Control Year,Order Date;
                                                   SumIndexFields=Amount (LCY),Risc Coverage Amount (LCY),Release Risc Coverage (LCY);
                                                   MaintainSIFTIndex=No }
    {    ;Main Project No.,Shortcut Dimension 2 Code;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Main Project No.,Cost Component         ;MaintainSIFTIndex=No }
    {    ;Main Project No.,Element,Shortcut Dimension 2 Code;
                                                   MaintainSIFTIndex=No }
    {    ;Job No.,Cost Component                  ;MaintainSIFTIndex=No }
    {    ;Document Type,Document No.,Vendor (Trade Item),Trade Item;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Buy-from Vendor No.,Job No.,Service Contract No.,Item No.,Trade Item;
                                                   SumIndexFields=Qty. to Receive (Base);
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Base Service Order No.,Service Order No.,Cost Component,Document Type,Order Date;
                                                   SumIndexFields=Amount (LCY);
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Service Order No.,Order Date;
                                                   MaintainSIFTIndex=No }
    {    ;Item No.,Document Type,Variant Code,Drop Shipment,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Location Code,Expected Receipt Date;
                                                   SumIndexFields=Outstanding Qty. (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Item No.,Document Type,Type,Variant Code,Drop Shipment,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Location Code,Expected Receipt Date,Job No.,Service Order No.,Outstanding Qty. (Base) }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot rename a %1.';
      Text001@1001 : TextConst 'ENU=You cannot change %1 because the order line is associated with sales order %2.';
      Text002@1002 : TextConst 'ENU=Prices including VAT cannot be calculated when %1 is %2.';
      Text003@1003 : TextConst 'ENU=You cannot purchase resources.';
      Text004@1004 : TextConst 'ENU=must not be less than %1';
      Text006@1005 : TextConst 'ENU=You cannot invoice more than %1 units.';
      Text007@1006 : TextConst 'ENU=You cannot invoice more than %1 base units.';
      Text008@1007 : TextConst 'ENU=You cannot receive more than %1 units.';
      Text009@1008 : TextConst 'ENU=You cannot receive more than %1 base units.';
      Text010@1009 : TextConst 'ENU=You cannot change %1 when %2 is %3.';
      Text011@1010 : TextConst 'ENU=" must be 0 when %1 is %2"';
      Text012@1011 : TextConst 'ENU="must not be specified when %1 = %2"';
      Text016@1014 : TextConst 'ENU="%1 is required for %2 = %3."';
      Text017@1015 : TextConst 'ENU=\The entered information may be disregarded by warehouse operations.';
      Text018@1016 : TextConst 'ENU=%1 %2 is earlier than the work date %3.';
      Text020@1018 : TextConst 'ENU=You cannot return more than %1 units.';
      Text021@1019 : TextConst 'ENU=You cannot return more than %1 base units.';
      Text022@1020 : TextConst 'ENU=You cannot change %1, if item charge is already posted.';
      Text023@1072 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.';
      Text029@1077 : TextConst 'ENU=must be positive.';
      Text030@1076 : TextConst 'ENU=must be negative.';
      Text031@1056 : TextConst 'ENU=You cannot define item tracking on this line because it is linked to production order %1.';
      Text032@1017 : TextConst 'ENU=%1 must not be greater than the sum of %2 and %3.';
      Text033@1078 : TextConst 'ENU="Warehouse "';
      Text034@1079 : TextConst 'ENU="Inventory "';
      Text035@1048 : TextConst 'ENU=%1 units for %2 %3 have already been returned or transferred. Therefore, only %4 units can be returned.';
      Text037@1082 : TextConst 'ENU=cannot be %1.';
      Text038@1083 : TextConst 'ENU=cannot be less than %1.';
      Text039@1084 : TextConst 'ENU=cannot be more than %1.';
      Text040@1090 : TextConst 'ENU=You must use form %1 to enter %2, if item tracking is used.';
      Text99000000@1021 : TextConst 'ENU=You cannot change %1 when the purchase order is associated to a production order.';
      PurchHeader@1022 : Record 38;
      PurchLine2@1023 : Record 39;
      TempPurchLine@1024 : Record 39;
      PurchaseLineExtension@1210190014 : Record 11020644;
      GLAcc@1025 : Record 15;
      Item@1026 : Record 27;
      Currency@1027 : Record 4;
      CurrExchRate@1028 : Record 330;
      ItemTranslation@1029 : Record 30;
      Text11012000@11012000 : TextConst 'ENU=does not match that of the Cost Object';
      Text11012001@11012001 : TextConst 'ENU=%1 %2 is not available at %3.';
      Text11012002@11012002 : TextConst 'ENU=Record attached to Receipt %1 line %2, quantity is outside the range %3 ... %4, continue ?';
      Text11012003@11012003 : TextConst 'ENU=%1 %2 has %3 %4.';
      Text11012004@11012004 : TextConst 'ENU=Change Cost Type ?';
      Text11012005@11012005 : TextConst 'ENU=%1 should not be larger then %2';
      Text11012008@11012012 : TextConst 'ENU=You cannot invoice more than %1.';
      Text11012009@11012013 : TextConst 'ENU=You cannot receive more than %1.';
      Text11012010@11012014 : TextConst 'ENU=Record attached to Receipt %1 line %2, amount is larger then open amount %3, continue ?';
      Text11012011@1210190012 : TextConst 'ENU=Record attached to Receipt %1 line %2, amount is larger then invoiced amount %3, continue ?';
      SalesOrderLine@1033 : Record 37;
      VATPostingSetup@1034 : Record 325;
      StdTxt@1035 : Record 7;
      FA@1036 : Record 5600;
      FADeprBook@1037 : Record 5612;
      FASetup@1038 : Record 5603;
      GenBusPostingGrp@1039 : Record 250;
      GenProdPostingGrp@1040 : Record 251;
      ReservEntry@1041 : Record 337;
      UnitOfMeasure@1043 : Record 204;
      ItemCharge@1044 : Record 5800;
      ItemChargeAssgntPurch@1045 : Record 5805;
      SKU@1046 : Record 5700;
      WorkCenter@1047 : Record 99000754;
      PurchasingCode@1049 : Record 5721;
      InvtSetup@1050 : Record 313;
      Location@1051 : Record 14;
      GLSetup@1074 : Record 98;
      ReturnReason@1068 : Record 6635;
      ItemVend@1031 : Record 99;
      CalChange@1062 : Record 11072016;
      JobJnlLine@1071 : TEMPORARY Record 11072008;
      PurchSetup@1095 : Record 312;
      ICProjSetupRec@1210190027 : Record 315;
      Reservation@1052 : Page 498;
      SalesTaxCalculate@1057 : Codeunit 398;
      ItemRec@11012024 : Record 27;
      ReservEngineMgt@1058 : Codeunit 99000831;
      ReservePurchLine@1059 : Codeunit 99000834;
      UOMMgt@1060 : Codeunit 5402;
      AddOnIntegrMgt@1061 : Codeunit 5403;
      DimMgt@1064 : Codeunit 408;
      DistIntegration@1065 : Codeunit 5702;
      NonstockItemMgt@1066 : Codeunit 5703;
      WhseValidateSourceLine@1067 : Codeunit 5777;
      LeadTimeMgt@1069 : Codeunit 5404;
      PurchPriceCalcMgt@1030 : Codeunit 7010;
      CalendarMgmt@1032 : Codeunit 7600;
      CheckDateConflict@1013 : Codeunit 99000815;
      NorwegianVATTools@1080002 : Codeunit 11128500;
      DeferralUtilities@1081 : Codeunit 1720;
      TrackingBlocked@1070 : Boolean;
      StatusCheckSuspended@1073 : Boolean;
      GLSetupRead@1075 : Boolean;
      UnitCostCurrency@1063 : Decimal;
      UpdateFromVAT@1087 : Boolean;
      Text042@1088 : TextConst 'ENU=You cannot return more than the %1 units that you have received for %2 %3.';
      Text043@1089 : TextConst 'ENU=must be positive when %1 is not 0.';
      Text044@1080 : TextConst 'ENU=You cannot change %1 because this purchase order is associated with %2 %3.';
      Text046@1091 : TextConst 'ENU=Microsoft Dynamics NAV will not update %1 when changing %2 because a prepayment invoice has been posted. Do you want to continue?';
      Text047@1092 : TextConst 'ENU=%1 can only be set when %2 is set.';
      Text048@1093 : TextConst 'ENU=%1 cannot be changed when %2 is set.';
      PrePaymentLineAmountEntered@1042 : Boolean;
      Text049@1085 : TextConst 'ENU=You have changed one or more dimensions on the %1, which is already shipped. When you post the line with the changed dimension to General Ledger, amounts on the Inventory Interim account will be out of balance when reported per dimension.\\Do you want to keep the changed dimension?';
      Text050@1086 : TextConst 'ENU=Cancelled.';
      Text051@1012 : TextConst 'ENU=must have the same sign as the receipt';
      Text052@1053 : TextConst 'ENU=The quantity that you are trying to invoice is greater than the quantity in receipt %1.';
      Text053@1054 : TextConst 'ENU=must have the same sign as the return shipment';
      Text054@1055 : TextConst 'ENU=The quantity that you are trying to invoice is greater than the quantity in return shipment %1.';
      DataConflictQst@1094 : TextConst 'ENU=The change creates a date conflict with existing reservations. Do you want to continue?';
      PurchSetupRead@1096 : Boolean;
      DimVal1Rec@11012008 : Record 349;
      DimVal2Rec@11012009 : Record 349;
      ProjElemRec@1210190007 : Record 11012010;
      ProjTypeRec@1210190006 : Record 11012009;
      ReceiptLine@1210190004 : Record 121;
      ProjRec@1210190003 : Record 11072003;
      ExtensionContract@1210190002 : Record 11012004;
      PlantSetup@1210190019 : Record 11012550;
      PlantTypeRec@1210190009 : Record 11012551;
      PlantNoRec@1210190018 : Record 11012552;
      CostCompPlantRec@1210190011 : Record 11012575;
      PlantPostingSetup@1210190010 : Record 11012570;
      PlantVendorRec@1100485000 : Record 11012596;
      PlantVendorType@1100485012 : Option;
      ServOrderRec@1210190017 : Record 11012823;
      ServTypeRec@1210190015 : Record 11012814;
      PurchOrderControlLine@1210190000 : Record 11020221;
      ItemUnitRec@1210190001 : Record 5404;
      ElementFormat@11012037 : Codeunit 11012022;
      ValidateCu@11012046 : Codeunit 11012033;
      RouteRefMgtCU@1210190020 : Codeunit 11012045;
      OnlyCheckForOpen@11012050 : Boolean;
      Dim1@11012011 : Code[20];
      Dim2@11012010 : Code[20];
      SaveFieldNo@1100485005 : Integer;
      ItemTypeOpt@1210190008 : 'Item,Basic Item,Trade Item,Trade Vendor';
      Text11012012@1210190021 : TextConst 'ENU=is already set for Quote %1, Line No. %2 with the same Purchase Route Reference';
      Text11012013@1210190022 : TextConst 'ENU="Note: The quantity (%3) of blanket order line ''%1-%2'' is exeeded; allowed quantity: %4"';
      Text11012014@1210190023 : TextConst 'ENU="Exeeding the quantity (%3) of blanket order line ''%1-%2'' is not allowed; allowed quantity: %4"';
      Text11012015@1210190024 : TextConst 'ENU=must be negative on a Return Order';
      Text11012016@1210190025 : TextConst 'ENU=may not be negative on a Blanket Order';
      Text11012017@1100485001 : TextConst 'ENU=not allowed for acquisition/rent of plant';
      Text11012018@1100485003 : TextConst 'ENU=%1 and %2 must be both positive or both negative.';
      Text11012019@1100485004 : TextConst 'ENU=Note: There is entered a surcharge, so not a discount.';
      UpdateAction@1100485002 : 'Insert,Modify,Delete';
      Text11012020@1100485007 : TextConst 'ENU=Reopen %1 %2 of %3 %4 ?';
      Text11012021@1100485008 : TextConst 'ENU=" Cost Type must be Material."';
      Text11012022@1100485009 : TextConst 'ENU=Job is empty';
      Text11012023@1100525001 : TextConst 'ENU=Record attached to Receipt %1 line %2, Invoice Price differs from Receipt Line Price %3, continue ?';
      GWWMgtCU@1100525005 : Codeunit 11012163;
      StrategicPurchMgt@1100525000 : Codeunit 11020211;
      CreateFromReqLine@1100525002 : Boolean;
      Text11012024@1100525003 : TextConst 'ENU=Consumption from Blanket Orders not allowed for limited purchasers. Please create the order from an Advice Order or from a Requistion Worksheet.';
      Text11012025@1100525004 : TextConst 'ENU="Changing Blanket Orders not allowed for limited purchasers. "';
      UpdateAmountsSuspended@1100525006 : Boolean;
      Text11012026@1100525008 : TextConst 'ENU=%1 %2 (%3) is not a multiple of %4 %5%6, %7 ''%8''.';
      DPA_Management@1100000999 : Codeunit 11012783;
      Text11012028@1100525009 : TextConst 'ENU=Field %1 is not filled.';
      Text11012029@1100525010 : TextConst 'ENU=(%1) may not be less than %2 (%3)';
      SkipExpired@1100525011 : Boolean;
      Text11012030@1100530000 : TextConst 'ENU=Project Inventory posted for Location %1 and Bin %2';
      HideDialog@1100525007 : Boolean;
      Text11012031@1210190026 : TextConst 'ENU=%1 in %2 is ''%3-%4'', change in ''%5-%6''?';
      Text11012032@1210190028 : TextConst 'ENU=Consignment items can be bought only on stock.';
      Text11012033@1100528400 : TextConst 'ENU=%1 or %2 should be filled.';
      gSkipCheckSigns@1100409000 : Boolean;
      ProjectSiteMgt@1100528300 : Codeunit 11012282;
      Text11012034@1100409001 : TextConst 'ENU=Insufficient Stock present';
      Text11012035@1100528800 : TextConst 'ENU=Receipt Date is a free day';
      Text11012036@1100525012 : TextConst 'ENU=may not be negative for purchase or rent of Plant';
      DCSetupRead@1100409002 : Boolean;
      DocumentCaptureSetup@1100409003 : Record 6085573;
      "*** ExFlow ***"@12013587 : Integer;
      ExFlow@12013588 : Codeunit 12013601;
      DocLine@12013589 : Record 12013609;
      ExFlowSetup@12013591 : Record 12013601;
      EXF101@12013599 : TextConst 'ENU=Template %1 missing.';
      ChangeJournalLine@12013593 : Record 12013618;
      TemplateRule@12013603 : Record 12013645;
      DocLineApp@12013606 : Record 12013610;
      TemplateRuleForm@12013604 : Page 12013648;
      DoNotUpdateDim@12013596 : Boolean;
      TempApprover@12013601 : Code[100];
      TempApproverName@12013602 : Text[100];
      DontUseSingleGTIN@11128200 : Boolean;
      DontCheckItemPurchBlocked@1100285100 : Boolean;
      SaveJobNo@1100525015 : Code[20];
      SaveDocNo@1100525014 : Code[20];
      SaveLineNo@1100525013 : Integer;
      Text11012037@1100525016 : TextConst 'ENU=Project %1 blocked for %2 because of status %3 and blocking code %4.';

    PROCEDURE InitOutstanding@16();
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        "Outstanding Quantity" := Quantity - "Return Qty. Shipped";
        "Outstanding Qty. (Base)" := "Quantity (Base)" - "Return Qty. Shipped (Base)";
        "Return Qty. Shipped Not Invd." := "Return Qty. Shipped" - "Quantity Invoiced";
        "Ret. Qty. Shpd Not Invd.(Base)" := "Return Qty. Shipped (Base)" - "Qty. Invoiced (Base)";
      END ELSE BEGIN
        "Outstanding Quantity" := Quantity - "Quantity Received";
        "Outstanding Qty. (Base)" := "Quantity (Base)" - "Qty. Received (Base)";
        "Qty. Rcd. Not Invoiced" := "Quantity Received" - "Quantity Invoiced";
        "Qty. Rcd. Not Invoiced (Base)" := "Qty. Received (Base)" - "Qty. Invoiced (Base)";
      END;
      "Completely Received" := (Quantity <> 0) AND ("Outstanding Quantity" = 0);
      InitOutstandingAmount;
      UpdateBlanketOrderLine; //**4PS
    END;

    PROCEDURE InitOutstandingAmount@19();
    VAR
      AmountInclVAT@1000 : Decimal;
    BEGIN
      IF Quantity = 0 THEN BEGIN
        GetPurchHeader;  //**4PS.n
        IF NOT PurchHeader."Amounts only" THEN BEGIN //**4PS.n
          "Outstanding Amount" := 0;
          "Outstanding Amount (LCY)" := 0;
          "Outstanding Amt. Ex. VAT (LCY)" := 0;
          "Amt. Rcd. Not Invoiced" := 0;
          "Amt. Rcd. Not Invoiced (LCY)" := 0;
          "Return Shpd. Not Invd." := 0;
          "Return Shpd. Not Invd. (LCY)" := 0;
        //**4PS.sn
          "Rec./Not Inv. exc.VAT (LCY)" := 0;
          "Outst. Amount exc. VAT (LCY)" :=0;
          "Outst. Amount exc. VAT" := 0;
          "Amt. Rcd. Not Invoiced exc.VAT" := 0;
        END ELSE BEGIN
          VALIDATE("Amt. Rcd. Not Invoiced","Amnt. Received incl. VAT" - "Amnt. Invoiced incl. VAT");
          VALIDATE("Outstanding Amount","Amount Including VAT" - "Amnt. Received incl. VAT");
          "Completely Received" := (Amount <> 0) AND ("Outstanding Amount" = 0);
        END;
        //**4PS.en
      END ELSE BEGIN
        GetPurchHeader;
        AmountInclVAT := "Amount Including VAT";
        VALIDATE(
          "Outstanding Amount",
          ROUND(
            AmountInclVAT * "Outstanding Quantity" / Quantity,
            Currency."Amount Rounding Precision"));
        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          VALIDATE(
            "Return Shpd. Not Invd.",
            ROUND(
              AmountInclVAT * "Return Qty. Shipped Not Invd." / Quantity,
              Currency."Amount Rounding Precision"))
        ELSE
          VALIDATE(
            "Amt. Rcd. Not Invoiced",
            ROUND(
              AmountInclVAT * "Qty. Rcd. Not Invoiced" / Quantity,
              Currency."Amount Rounding Precision"));
      END;

      VALIDATE("Outstanding-Rcd/Not Invoiced");  //**4PS.n: db, 19-06-08: M12185
    END;

    PROCEDURE InitQtyToReceive@15();
    BEGIN
      GetPurchSetup;
      //**4PS.so
      //IF (PurchSetup."Default Qty. to Receive" = PurchSetup."Default Qty. to Receive"::Remainder) OR
      //   ("Document Type" = "Document Type"::Invoice)
      //THEN BEGIN
      //  "Qty. to Receive" := "Outstanding Quantity";
      //  "Qty. to Receive (Base)" := "Outstanding Qty. (Base)";
      //END ELSE
      //  IF "Qty. to Receive" <> 0 THEN
      //    "Qty. to Receive (Base)" := CalcBaseQty("Qty. to Receive");
      //**4PS.eo
      InitQtyToReceiveAdvanced4PS; //**4PS.n

      InitQtyToInvoice;
    END;

    PROCEDURE InitQtyToShip@5803();
    BEGIN
      GetPurchSetup;
      IF (PurchSetup."Default Qty. to Receive" = PurchSetup."Default Qty. to Receive"::Remainder) OR
         ("Document Type" = "Document Type"::"Credit Memo")
      THEN BEGIN
        "Return Qty. to Ship" := "Outstanding Quantity";
        "Return Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
      END ELSE
        IF "Return Qty. to Ship" <> 0 THEN
          "Return Qty. to Ship (Base)" := CalcBaseQty("Return Qty. to Ship");

      InitQtyToInvoice;
    END;

    PROCEDURE InitQtyToInvoice@13();
    BEGIN
      "Qty. to Invoice" := MaxQtyToInvoice;
      "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
      "VAT Difference" := 0;
      CalcInvDiscToInvoice;
      IF PurchHeader."Document Type" <> PurchHeader."Document Type"::Invoice THEN
        CalcPrepaymentToDeduct;
    END;

    LOCAL PROCEDURE InitItemAppl@46();
    BEGIN
      "Appl.-to Item Entry" := 0;
    END;

    PROCEDURE MaxQtyToInvoice@18() : Decimal;
    BEGIN
      IF "Prepayment Line" THEN
        EXIT(1);
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT("Return Qty. Shipped" + "Return Qty. to Ship" - "Quantity Invoiced");

      EXIT("Quantity Received" + "Qty. to Receive" - "Quantity Invoiced");
    END;

    PROCEDURE MaxQtyToInvoiceBase@17() : Decimal;
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT("Return Qty. Shipped (Base)" + "Return Qty. to Ship (Base)" - "Qty. Invoiced (Base)");

      EXIT("Qty. Received (Base)" + "Qty. to Receive (Base)" - "Qty. Invoiced (Base)");
    END;

    PROCEDURE CalcInvDiscToInvoice@33();
    VAR
      OldInvDiscAmtToInv@1000 : Decimal;
    BEGIN
      GetPurchHeader;
      OldInvDiscAmtToInv := "Inv. Disc. Amount to Invoice";

      //**4PS.sn C027348
      IF PurchHeader."Amounts only" THEN
        VALIDATE("Inv. Disc. Amount to Invoice","Inv. Discount Amount")
      ELSE
      //**4PS.en C027348
        IF Quantity = 0 THEN
          VALIDATE("Inv. Disc. Amount to Invoice",0)
        ELSE
          VALIDATE(
            "Inv. Disc. Amount to Invoice",
            ROUND(
              "Inv. Discount Amount" * "Qty. to Invoice" / Quantity,
              Currency."Amount Rounding Precision"));

      IF OldInvDiscAmtToInv <> "Inv. Disc. Amount to Invoice" THEN BEGIN
        //IF PurchHeader.Status = PurchHeader.Status::Released THEN //**4PS.o
        "Amount Including VAT" := "Amount Including VAT" - "VAT Difference";
        "VAT Difference" := 0;
      END;
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      IF "Prod. Order No." = '' THEN
        TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE SelectItemEntry@7();
    VAR
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      TESTFIELD("Prod. Order No.",'');
      ItemLedgEntry.SETCURRENTKEY("Item No.",Open);
      ItemLedgEntry.SETRANGE("Item No.","No.");
      ItemLedgEntry.SETRANGE(Open,TRUE);
      ItemLedgEntry.SETRANGE(Positive,TRUE);
      IF "Location Code" <> '' THEN
        ItemLedgEntry.SETRANGE("Location Code","Location Code");
      ItemLedgEntry.SETRANGE("Variant Code","Variant Code");

      IF PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK THEN
        VALIDATE("Appl.-to Item Entry",ItemLedgEntry."Entry No.");
    END;

    PROCEDURE SetPurchHeader@12(NewPurchHeader@1000 : Record 38);
    BEGIN
      PurchHeader := NewPurchHeader;

      IF PurchHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        PurchHeader.TESTFIELD("Currency Factor");
        Currency.GET(PurchHeader."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;

    LOCAL PROCEDURE GetPurchHeader@1();
    BEGIN
      TESTFIELD("Document No.");
      IF ("Document Type" <> PurchHeader."Document Type") OR ("Document No." <> PurchHeader."No.") THEN BEGIN
        PurchHeader.GET("Document Type","Document No.");
        IF PurchHeader."Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          PurchHeader.TESTFIELD("Currency Factor");
          Currency.GET(PurchHeader."Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
      END;
    END;

    LOCAL PROCEDURE GetItem@4();
    BEGIN
      //**4PS.sn
      IF "Item No." <> '' THEN BEGIN
        Item.GET("Item No.");
        EXIT;
      END;
      //**4PS.en
      TESTFIELD("No.");
      IF Item."No." <> "No." THEN
        Item.GET("No.");
    END;

    PROCEDURE UpdateDirectUnitCost@2(CalledByFieldNo@1000 : Integer) : Boolean;
    VAR
      lvTypeNo@1210190037 : Integer;
      lvItem@1100485000 : Code[20];
      PlantPriceLevel@1210190000 : Integer;
      PriceFound@1210190001 : Boolean;
    BEGIN
      IF (CurrFieldNo <> 0) AND ("Prod. Order No." <> '') THEN
        UpdateAmounts;

      IF ((CalledByFieldNo <> CurrFieldNo) AND (CurrFieldNo <> 0)) OR
         ("Prod. Order No." <> '')
      THEN
        EXIT;

      //**4PS.sn
      IF ("Buy-from Vendor No." = '') THEN BEGIN
        "Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
        "Pay-to Vendor No." := PurchHeader."Pay-to Vendor No.";
        "Currency Code" := PurchHeader."Currency Code";
      END;

      lvTypeNo := CheckPlantAcquisitionOrRent(Rec);
      IF (lvTypeNo <> 0) THEN BEGIN
        PlantPriceLevel := PurchPriceCalcMgt.FindPurchLinePricePlant(PurchHeader, Rec, CalledByFieldNo, lvTypeNo);
        PurchPriceCalcMgt.FindPurchLineLineDiscPlant(PurchHeader, Rec, lvTypeNo);
        VALIDATE("Direct Unit Cost");
        EXIT(PlantPriceLevel <> 0);
      END;

      InvtSetup.GET;
      IF ("Trade Item" <> '') AND (InvtSetup."Price Info Trade Item Leading") THEN BEGIN
        VALIDATE("Direct Unit Cost");
        EXIT(TRUE);
      END;

      IF Type = Type::Item THEN lvItem := "No.";
      IF Type = Type::"G/L Account" THEN lvItem := "Item No.";
      IF lvItem <> '' THEN BEGIN
      //**4PS.en
      //IF Type = Type::Item THEN BEGIN  //**4PS.o
        GetPurchHeader;
        //PurchPriceCalcMgt.FindPurchLinePrice(PurchHeader,Rec,CalledByFieldNo);  //**4PS.o
        PriceFound := PurchPriceCalcMgt.FindPurchLinePrice(PurchHeader,Rec,CalledByFieldNo);  //**4PS.n
        PurchPriceCalcMgt.FindPurchLineLineDisc(PurchHeader,Rec);
        VALIDATE("Direct Unit Cost");

        IF CalledByFieldNo IN [FIELDNO("No."),FIELDNO("Variant Code"),FIELDNO("Location Code")] THEN
          UpdateItemReference;
      END;
      EXIT(PriceFound);  //**4PS.n
    END;

    PROCEDURE UpdateUnitCost@5();
    VAR
      DiscountAmountPerQty@1000 : Decimal;
    BEGIN
      GetPurchHeader;
      GetGLSetup;
      IF Quantity = 0 THEN
        DiscountAmountPerQty := 0
      ELSE
        DiscountAmountPerQty :=
          ROUND(("Line Discount Amount" + "Inv. Discount Amount") / Quantity,
            GLSetup."Unit-Amount Rounding Precision");

      IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN
        "Unit Cost" := 0
      ELSE
        IF PurchHeader."Prices Including VAT" THEN
          "Unit Cost" :=
            ("Direct Unit Cost" - DiscountAmountPerQty) * (1 + "Indirect Cost %" / 100) / (1 + "VAT %" / 100) +
            GetOverheadRateFCY - "VAT Difference"
        ELSE
          "Unit Cost" :=
            ("Direct Unit Cost" - DiscountAmountPerQty) * (1 + "Indirect Cost %" / 100) +
            GetOverheadRateFCY;

      IF PurchHeader."Currency Code" <> '' THEN BEGIN
        PurchHeader.TESTFIELD("Currency Factor");
        "Unit Cost (LCY)" :=
          CurrExchRate.ExchangeAmtFCYToLCY(
            1,PurchHeader."Job No.", //**4PS.n
            GetDate,"Currency Code",
      //    "Unit Cost",PurchHeader."Currency Factor"); //**4PS.o
            "Unit Cost",PurchHeader."Currency Factor",FALSE); //**4PS.n
      END ELSE
        "Unit Cost (LCY)" := "Unit Cost";

      //IF (Type = Type::Item) AND ("Prod. Order No." = '') THEN BEGIN  //**4PS.o
      IF ("Item No." <> '') AND ("Prod. Order No." = '') THEN BEGIN     //**4PS.n
        GetItem;
        IF Item."Costing Method" = Item."Costing Method"::Standard THEN BEGIN
          IF GetSKU THEN BEGIN
            //**4PS.sn 23305
            IF (SKU.Consignment) AND (Type <> Type::Item) THEN
              ERROR(Text11012032);
            //**4PS.en
            "Unit Cost (LCY)" := SKU."Unit Cost" * "Qty. per Unit of Measure";
          END ELSE
            "Unit Cost (LCY)" := Item."Unit Cost" * "Qty. per Unit of Measure";
          //"Unit Price (LCY)" := Item."Unit Price" * "Qty. per Unit of Measure";  //**4PS.n; db, 12-02-09: M14273
          //**4PS.sn 25042
          IF PurchHeader."Currency Code" <> '' THEN BEGIN
            "Unit Cost" :=
              CurrExchRate.ExchangeAmtLCYToFCY(
                1,PurchHeader."Job No.", GetDate,"Currency Code",
                "Unit Cost (LCY)",PurchHeader."Currency Factor",FALSE);
          END ELSE
            "Unit Cost" := "Unit Cost (LCY)";
          //**4PS.en
        END;
      END;

      "Unit Cost (LCY)" := ROUND("Unit Cost (LCY)",GLSetup."Unit-Amount Rounding Precision");
      "Unit Price (LCY)" := ROUND("Unit Price (LCY)",GLSetup."Unit-Amount Rounding Precision");  //**4PS.n
      IF PurchHeader."Currency Code" <> '' THEN BEGIN
        Currency.TESTFIELD("Unit-Amount Rounding Precision");
        "Unit Cost" := ROUND("Unit Cost",Currency."Unit-Amount Rounding Precision");
      END;

      UpdateSalesCost;

      IF JobTaskIsSet AND NOT UpdateFromVAT AND NOT "Prepayment Line" THEN BEGIN
        CreateTempJobJnlLine(FALSE);
        JobJnlLine.VALIDATE("Unit Cost (LCY)","Unit Cost (LCY)");
        UpdateJobPrices;
      END;
    END;

    PROCEDURE UpdateAmounts@3();
    VAR
      RemLineAmountToInvoice@1000 : Decimal;
      VATBaseAmount@1003 : Decimal;
      LineAmountChanged@1002 : Boolean;
      LineQty@1100528500 : Decimal;
    BEGIN
      IF CurrFieldNo <> FIELDNO("Allow Invoice Disc.") THEN
        TESTFIELD(Type);
      GetPurchHeader;

      IF UpdateAmountsSuspended THEN EXIT; //**4PS.n

      VATBaseAmount := "VAT Base Amount";
      "Recalculate Invoice Disc." := TRUE;

      IF "Line Amount" <> xRec."Line Amount" THEN BEGIN
        "VAT Difference" := 0;
        LineAmountChanged := TRUE;
      END;

      //**4PS.so
      //IF "Line Amount" <> ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") - "Line Discount Amount" THEN
      //  BEGIN
      //    "Line Amount" :=
      //      ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") - "Line Discount Amount";
      //    "VAT Difference" := 0;
      //    LineAmountChanged := TRUE;
      //  END;
      //**4PS.eo
      //**4PS.sn
      IF PurchHeader."Amounts only" THEN
        LineQty := 1
      ELSE
        LineQty := Quantity;

      IF "Line Amount" <> ROUND(LineQty * "Direct Unit Cost",Currency."Amount Rounding Precision") -
         "Line Discount Amount" - RetentionAmount(0) THEN
        BEGIN
          "Line Amount" :=
            ROUND(LineQty * "Direct Unit Cost",Currency."Amount Rounding Precision") - "Line Discount Amount" - RetentionAmount(0);
          "VAT Difference" := 0;
          LineAmountChanged := TRUE;
        END;
      //**4PS.en

      IF NOT "Prepayment Line" THEN BEGIN
        IF "Prepayment %" <> 0 THEN BEGIN
          IF Quantity < 0 THEN
            FIELDERROR(Quantity,STRSUBSTNO(Text043,FIELDCAPTION("Prepayment %")));
          IF "Direct Unit Cost" < 0 THEN
            FIELDERROR("Direct Unit Cost",STRSUBSTNO(Text043,FIELDCAPTION("Prepayment %")));
        END;
        IF PurchHeader."Document Type" <> PurchHeader."Document Type"::Invoice THEN BEGIN
          "Prepayment VAT Difference" := 0;
          IF NOT PrePaymentLineAmountEntered THEN
            "Prepmt. Line Amount" := ROUND("Line Amount" * "Prepayment %" / 100,Currency."Amount Rounding Precision");
          IF "Prepmt. Line Amount" < "Prepmt. Amt. Inv." THEN
            FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text037,"Prepmt. Amt. Inv."));
          PrePaymentLineAmountEntered := FALSE;
          IF "Prepmt. Line Amount" <> 0 THEN BEGIN
            RemLineAmountToInvoice :=
              ROUND("Line Amount" * (Quantity - "Quantity Invoiced") / Quantity,Currency."Amount Rounding Precision");
            IF RemLineAmountToInvoice < ("Prepmt. Line Amount" - "Prepmt Amt Deducted") THEN
              FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text039,RemLineAmountToInvoice + "Prepmt Amt Deducted"));
          END;
        END ELSE
          IF (CurrFieldNo <> 0) AND ("Line Amount" <> xRec."Line Amount") AND
             ("Prepmt. Amt. Inv." <> 0) AND ("Prepayment %" = 100)
          THEN BEGIN
            IF "Line Amount" < xRec."Line Amount" THEN
              FIELDERROR("Line Amount",STRSUBSTNO(Text038,xRec."Line Amount"));
            FIELDERROR("Line Amount",STRSUBSTNO(Text039,xRec."Line Amount"));
          END;
      END;
      UpdateVATAmounts;
      IF VATBaseAmount <> "VAT Base Amount" THEN
        LineAmountChanged := TRUE;

      IF LineAmountChanged THEN BEGIN
        UpdateDeferralAmounts;
        LineAmountChanged := FALSE;
      END;

      //**4PS.sn
      UpdateAmountLCY;
      "Line VAT Amount" := "Amount Including VAT" - Amount;
      //**4PS.en

      UpdateWageCharge(Amount); //**4PS.n

      InitOutstandingAmount;

      //**4PS.sn
      IF PurchHeader."Amounts only" THEN  BEGIN
        OnlyCheckForOpen := (CurrFieldNo = 0);
        InitAmntToReceive;
      END;
      //**4PS.en
      IF Type = Type::"Charge (Item)" THEN
        UpdateItemChargeAssgnt;

      CalcPrepaymentToDeduct;
    END;

    PROCEDURE UpdateVATAmounts@38();
    VAR
      PurchLine2@1000 : Record 39;
      TotalLineAmount@1005 : Decimal;
      TotalInvDiscAmount@1004 : Decimal;
      TotalAmount@1001 : Decimal;
      TotalAmountInclVAT@1002 : Decimal;
      TotalQuantityBase@1003 : Decimal;
    BEGIN
      GetPurchHeader;   //**4PS.n
      IF UpdateAmountsSuspended THEN EXIT; //**4PS.n

      PurchLine2.SETRANGE("Document Type","Document Type");
      PurchLine2.SETRANGE("Document No.","Document No.");
      PurchLine2.SETFILTER("Line No.",'<>%1',"Line No.");
      IF "Line Amount" = 0 THEN
        IF xRec."Line Amount" >= 0 THEN
          PurchLine2.SETFILTER(Amount,'>%1',0)
        ELSE
          PurchLine2.SETFILTER(Amount,'<%1',0)
      ELSE
        IF "Line Amount" > 0 THEN
          PurchLine2.SETFILTER(Amount,'>%1',0)
        ELSE
          PurchLine2.SETFILTER(Amount,'<%1',0);
      PurchLine2.SETRANGE("VAT Identifier","VAT Identifier");
      PurchLine2.SETRANGE("Tax Group Code","Tax Group Code");

      IF "Line Amount" = "Inv. Discount Amount" THEN BEGIN
        Amount := 0;
        "VAT Base Amount" := 0;
        "Amount Including VAT" := 0;
      END ELSE BEGIN
       //**4PS.sn
       IF "Manually VAT Posting" THEN BEGIN
         IF PurchHeader."Prices Including VAT" THEN
           IF PurchHeader."Amounts only" THEN
             "Amount Including VAT" :=
               ROUND("Direct Unit Cost",Currency."Amount Rounding Precision") -
               "Line Discount Amount" - "Inv. Discount Amount"
           ELSE
             "Amount Including VAT" :=
               ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") -
               "Line Discount Amount" - "Inv. Discount Amount"
         ELSE BEGIN
           IF PurchHeader."Amounts only" THEN
             Amount :=
               ROUND("Direct Unit Cost",Currency."Amount Rounding Precision") -
               "Line Discount Amount" - "Inv. Discount Amount"
           ELSE
             Amount :=
               ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") -
               "Line Discount Amount" - "Inv. Discount Amount";
           "VAT Base Amount" := Amount;
           "Amount Including VAT" := Amount + "Line VAT Amount"; //C-017292
         END;
       END ELSE BEGIN
       //**4PS.en
        TotalLineAmount := 0;
        TotalInvDiscAmount := 0;
        TotalAmount := 0;
        TotalAmountInclVAT := 0;
        TotalQuantityBase := 0;
        IF ("VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax") OR
           (("VAT Calculation Type" IN
             ["VAT Calculation Type"::"Normal VAT","VAT Calculation Type"::"Reverse Charge VAT"]) AND ("VAT %" <> 0))
        THEN
          IF NOT PurchLine2.ISEMPTY THEN BEGIN
            PurchLine2.CALCSUMS("Line Amount","Inv. Discount Amount",Amount,"Amount Including VAT","Quantity (Base)");
            TotalLineAmount := PurchLine2."Line Amount";
            TotalInvDiscAmount := PurchLine2."Inv. Discount Amount";
            TotalAmount := PurchLine2.Amount;
            TotalAmountInclVAT := PurchLine2."Amount Including VAT";
            TotalQuantityBase := PurchLine2."Quantity (Base)";
          END;

        IF PurchHeader."Prices Including VAT" THEN
          CASE "VAT Calculation Type" OF
            "VAT Calculation Type"::"Normal VAT",
            "VAT Calculation Type"::"Reverse Charge VAT":
              BEGIN
                Amount :=
                  ROUND(
                    (TotalLineAmount - TotalInvDiscAmount + "Line Amount" - "Inv. Discount Amount") / (1 + "VAT %" / 100),
                    Currency."Amount Rounding Precision") -
                  TotalAmount;
                "VAT Base Amount" :=
                  ROUND(
                    Amount * (1 - PurchHeader."VAT Base Discount %" / 100),
                    Currency."Amount Rounding Precision");
                "Amount Including VAT" :=
                  TotalLineAmount + "Line Amount" -
                  ROUND(
                    (TotalAmount + Amount) * (PurchHeader."VAT Base Discount %" / 100) * "VAT %" / 100,
                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection) -
                  TotalAmountInclVAT - TotalInvDiscAmount - "Inv. Discount Amount";
              END;
            "VAT Calculation Type"::"Full VAT":
              BEGIN
                Amount := 0;
                "VAT Base Amount" := 0;
              END;
            "VAT Calculation Type"::"Sales Tax":
              BEGIN
                PurchHeader.TESTFIELD("VAT Base Discount %",0);
                "Amount Including VAT" :=
                  ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                IF "Use Tax" THEN
                  Amount := "Amount Including VAT"
                ELSE
                  Amount :=
                    ROUND(
                      SalesTaxCalculate.ReverseCalculateTax(
                        "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
                        TotalAmountInclVAT + "Amount Including VAT",TotalQuantityBase + "Quantity (Base)",
                        PurchHeader."Currency Factor"),
                      Currency."Amount Rounding Precision") -
                    TotalAmount;
                "VAT Base Amount" := Amount;
                IF "VAT Base Amount" <> 0 THEN
                  "VAT %" :=
                    ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                ELSE
                  "VAT %" := 0;
              END;
          END
        ELSE
          CASE "VAT Calculation Type" OF
            "VAT Calculation Type"::"Normal VAT",
            "VAT Calculation Type"::"Reverse Charge VAT":
              BEGIN
                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                "VAT Base Amount" :=
                  ROUND(Amount * (1 - PurchHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                "Amount Including VAT" :=
                  TotalAmount + Amount +
                  ROUND(
                    (TotalAmount + Amount) * (1 - PurchHeader."VAT Base Discount %" / 100) * "VAT %" / 100,
                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection) -
                  TotalAmountInclVAT;
                //**4PS.sn
                "Amnt. Received incl. VAT" :=  "Amnt. Received" + ROUND("Amnt. Received" * "VAT %" / 100,
                   Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                "Amnt. Invoiced incl. VAT" :=  "Amnt. Invoiced" + ROUND("Amnt. Invoiced" * "VAT %" / 100,
                   Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                //**4PS.en
              END;
            "VAT Calculation Type"::"Full VAT":
              BEGIN
                Amount := 0;
                "VAT Base Amount" := 0;
                "Amount Including VAT" := "Line Amount" - "Inv. Discount Amount";
                //**4PS.sn
                "Amnt. Received incl. VAT" := "Amnt. Received";
                "Amnt. Invoiced incl. VAT" := "Amnt. Invoiced";
                //**4PS.en
              END;
            "VAT Calculation Type"::"Sales Tax":
              BEGIN
                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                "VAT Base Amount" := Amount;
                IF "Use Tax" THEN
                  "Amount Including VAT" := Amount
                ELSE
                  "Amount Including VAT" :=
                    TotalAmount + Amount +
                    ROUND(
                      SalesTaxCalculate.CalculateTax(
                        "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
                        TotalAmount + Amount,TotalQuantityBase + "Quantity (Base)",
                        PurchHeader."Currency Factor"),
                      Currency."Amount Rounding Precision") -
                    TotalAmountInclVAT;
                IF "VAT Base Amount" <> 0 THEN
                  "VAT %" :=
                    ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                ELSE
                  "VAT %" := 0;
              END;
          END;
        END; //**4PS.n
      END;
    END;

    PROCEDURE UpdatePrepmtSetupFields@102();
    VAR
      GenPostingSetup@1001 : Record 252;
      GLAcc@1000 : Record 15;
    BEGIN
      IF ("Prepayment %" <> 0) AND (Type <> Type::" ") THEN BEGIN
        TESTFIELD("Document Type","Document Type"::Order);
        TESTFIELD("No.");
        GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
        IF GenPostingSetup."Purch. Prepayments Account" <> '' THEN BEGIN
          GLAcc.GET(GenPostingSetup."Purch. Prepayments Account");
          VATPostingSetup.GET("VAT Bus. Posting Group",GLAcc."VAT Prod. Posting Group");
          VATPostingSetup.TESTFIELD("VAT Calculation Type","VAT Calculation Type");
        END ELSE
          CLEAR(VATPostingSetup);
        "Prepayment VAT %" := VATPostingSetup."VAT %";
        "Prepmt. VAT Calc. Type" := VATPostingSetup."VAT Calculation Type";
        "Prepayment VAT Identifier" := VATPostingSetup."VAT Identifier";
        IF "Prepmt. VAT Calc. Type" IN
           ["Prepmt. VAT Calc. Type"::"Reverse Charge VAT","Prepmt. VAT Calc. Type"::"Sales Tax"]
        THEN
          "Prepayment VAT %" := 0;
        "Prepayment Tax Group Code" := GLAcc."Tax Group Code";
      END;
    END;

    LOCAL PROCEDURE UpdateSalesCost@6();
    BEGIN
      CASE TRUE OF
        "Sales Order Line No." <> 0:
          // Drop Shipment
          SalesOrderLine.GET(
            SalesOrderLine."Document Type"::Order,
            "Sales Order No.",
            "Sales Order Line No.");
        "Special Order Sales Line No." <> 0:
          // Special Order
          BEGIN
            IF NOT
               SalesOrderLine.GET(
                 SalesOrderLine."Document Type"::Order,
                 "Special Order Sales No.",
                 "Special Order Sales Line No.")
            THEN
              EXIT;
          END;
        ELSE
          EXIT;
      END;
      SalesOrderLine."Unit Cost (LCY)" := "Unit Cost (LCY)" * SalesOrderLine."Qty. per Unit of Measure" / "Qty. per Unit of Measure";
      SalesOrderLine."Unit Cost" := "Unit Cost" * SalesOrderLine."Qty. per Unit of Measure" / "Qty. per Unit of Measure";
      SalesOrderLine.VALIDATE("Unit Cost (LCY)");
      SalesOrderLine.MODIFY;
    END;

    PROCEDURE GetFAPostingGroup@10();
    VAR
      LocalGLAcc@1000 : Record 15;
      FAPostingGr@1001 : Record 5606;
      lvPlantTypeRec@1210190033 : Record 11012551;
      lvPlantPostingGrp@1100485000 : Record 11012553;
      lvVendorRec@1100525000 : Record 23;
      DeprBook@1210190000 : Record 5611;
      PlantPostingGrp@1210190001 : Record 11012553;
      FAPostingGrpCode@1210190002 : Code[10];
    BEGIN
      //**4PS.so
      //IF (Type <> Type::"Fixed Asset") OR ("No." = '') THEN
      //  EXIT;
      //**4PS.eo

      //**4PS.sn
      GetPurchHeader;
      lvVendorRec.INIT;
      IF lvVendorRec.GET(PurchHeader."Buy-from Vendor No.") THEN;

      IF (Type <> Type::"Fixed Asset") THEN
          EXIT;
      IF ("No." = '') THEN BEGIN
        IF CheckPlantCreateFAOnReceipt() THEN BEGIN
          lvPlantTypeRec.GET("Plant Type");
          lvPlantTypeRec.TESTFIELD("Posting Group Internal");

          IF NOT lvPlantPostingGrp.GET(lvPlantTypeRec."Posting Group Internal", lvVendorRec."Vendor Posting Group") THEN
            lvPlantPostingGrp.GET(lvPlantTypeRec."Posting Group Internal", '');

          //*27551.sn  Try to find 'Main Depr. Book' but do not fill this field in the Purch.Line, only use it to
          //*       determine/fill the posting groups with a default value (as below in this function).
          FAPostingGrpCode := '';
          DeprBook.Code := GetProbablePlantFAMainDeprBook("Plant Type");
          IF (DeprBook.Code <> '') AND DeprBook.GET(DeprBook.Code) THEN BEGIN
            IF DeprBook."Default FA Posting Group" <> '' THEN
              FAPostingGrpCode := DeprBook."Default FA Posting Group"
            ELSE BEGIN
              IF PlantPostingGrp.GET(lvPlantTypeRec."Posting Group Internal", '') THEN
                FAPostingGrpCode := PlantPostingGrp."Def. FA Posting Group";
            END;
            IF (FAPostingGrpCode <> '') AND FAPostingGr.GET(FAPostingGrpCode) THEN BEGIN
              IF (FAPostingGr."Acquisition Cost Account"<>'') AND LocalGLAcc.GET(FAPostingGr."Acquisition Cost Account") THEN BEGIN
                "Posting Group" := FAPostingGrpCode;
                IF LocalGLAcc."Gen. Prod. Posting Group" <> '' THEN
                  "Gen. Prod. Posting Group" := LocalGLAcc."Gen. Prod. Posting Group";
                "Tax Group Code" := LocalGLAcc."Tax Group Code";
                VALIDATE("VAT Prod. Posting Group",LocalGLAcc."VAT Prod. Posting Group");
              END;
            END;
          END;
          //*27551.en

        //*FA.so
        //  lvPlantPostingGrp.TESTFIELD("FA Posting Group");
        //  FADeprBook.INIT;
        //  FADeprBook."FA Posting Group" := lvPlantPostingGrp."FA Posting Group";
        //END ELSE BEGIN
        //  EXIT;
        //*FA.eo
        END;
        EXIT;  //*FA.n  Always 'EXIT' if FA ("No.") is empty
      END;

      IF "Depreciation Book Code" = '' THEN
        "Depreciation Book Code" := FA.GetFA_MainDeprBook("No.",TRUE);
      //**4PS.en
      IF "Depreciation Book Code" = '' THEN BEGIN
        FASetup.GET;
        "Depreciation Book Code" := FASetup."Default Depr. Book";
        IF ("No." <> '') THEN BEGIN  //**4PS.n
          IF NOT FADeprBook.GET("No.","Depreciation Book Code") THEN
            "Depreciation Book Code" := '';
        END;  //**4PS.n
        IF "Depreciation Book Code" = '' THEN
          EXIT;
      END;
      IF "FA Posting Type" = "FA Posting Type"::" " THEN
        "FA Posting Type" := "FA Posting Type"::"Acquisition Cost";
      FADeprBook.GET("No.","Depreciation Book Code");
      FADeprBook.TESTFIELD("FA Posting Group");
      FAPostingGr.GET(FADeprBook."FA Posting Group");
      IF "FA Posting Type" = "FA Posting Type"::"Acquisition Cost" THEN BEGIN
        FAPostingGr.TESTFIELD("Acquisition Cost Account");
        LocalGLAcc.GET(FAPostingGr."Acquisition Cost Account");
      END ELSE BEGIN
        FAPostingGr.TESTFIELD("Maintenance Expense Account");
        LocalGLAcc.GET(FAPostingGr."Maintenance Expense Account");
      END;
      LocalGLAcc.CheckGLAcc;
      //LocalGLAcc.TESTFIELD("Gen. Prod. Posting Group");  //**4PS old call C010520
      "Posting Group" := FADeprBook."FA Posting Group";
      "Gen. Prod. Posting Group" := LocalGLAcc."Gen. Prod. Posting Group";
      "Tax Group Code" := LocalGLAcc."Tax Group Code";
      VALIDATE("VAT Prod. Posting Group",LocalGLAcc."VAT Prod. Posting Group");
    END;

    PROCEDURE UpdateUOMQtyPerStockQty@9();
    BEGIN
      GetItem;
      //**4PS.sn
      IF "Price Agreement" = TRUE THEN
        Item."Unit Cost" := xRec."Unit Cost" / xRec."Qty. per Unit of Measure";
      //**4PS.en
      "Unit Cost (LCY)" := Item."Unit Cost" * "Qty. per Unit of Measure";
      "Unit Price (LCY)" := Item."Unit Price" * "Qty. per Unit of Measure";
      GetPurchHeader;
      IF PurchHeader."Currency Code" <> '' THEN
        "Unit Cost" :=
          CurrExchRate.ExchangeAmtLCYToFCY(
            1,PurchHeader."Job No.", //**4PS.n
            GetDate,PurchHeader."Currency Code",
      //    "Unit Cost (LCY)",PurchHeader."Currency Factor") //**4PS.o
            "Unit Cost (LCY)",PurchHeader."Currency Factor",FALSE) //**4PS.n
      ELSE
        "Unit Cost" := "Unit Cost (LCY)";
      //**4PS.sn
      IF "Price Agreement" = TRUE THEN BEGIN
        "Direct Unit Cost" := "Unit Cost";
        VALIDATE("Line Discount %");  //db, 13-05-08: calculate Line Amount
      END ELSE
      //**4PS.en
      UpdateDirectUnitCost(FIELDNO("Unit of Measure Code"));
    END;

    PROCEDURE ShowReservation@8();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("Prod. Order No.",'');
      TESTFIELD("No.");
      CLEAR(Reservation);
      Reservation.SetPurchLine(Rec);
      Reservation.RUNMODAL;
    END;

    PROCEDURE ShowReservationEntries@21(Modal@1000 : Boolean);
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,TRUE);
      ReservePurchLine.FilterReservFor(ReservEntry,Rec);
      IF Modal THEN
        PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry)
      ELSE
        PAGE.RUN(PAGE::"Reservation Entries",ReservEntry);
    END;

    PROCEDURE GetDate@28() : Date;
    BEGIN
      GetPurchHeader; //mg, 06-09-13: C006505
      IF PurchHeader."Posting Date" <> 0D THEN
        EXIT(PurchHeader."Posting Date");
      EXIT(WORKDATE);
    END;

    PROCEDURE Signed@20(Value@1000 : Decimal) : Decimal;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote,
        "Document Type"::Order,
        "Document Type"::Invoice,
        "Document Type"::"Blanket Order":
          EXIT(Value);
        "Document Type"::"Return Order",
        "Document Type"::"Credit Memo":
          EXIT(-Value);
      END;
    END;

    PROCEDURE BlanketOrderLookup@36();
    BEGIN
      PurchLine2.RESET;
      //PurchLine2.SETCURRENTKEY("Document Type",Type,"No.");  //**4PS.o
      PurchLine2.SETCURRENTKEY("Document Type",Type,"Item No.","No.");  //**4PS.n
      PurchLine2.SETRANGE("Document Type","Document Type"::"Blanket Order");
      //PurchLine2.SETRANGE(Type,Type);  //**4PS.o
      //PurchLine2.SETRANGE("No.","No.");  //**4PS.o
      PurchLine2.SETRANGE("Purchase Order Status", "Purchase Order Status"::Open, "Purchase Order Status"::Released); //**4PS.n
      PurchLine2.SETRANGE("Item No.","Item No.");  //**4PS.n
      PurchLine2.SETRANGE("Pay-to Vendor No.","Pay-to Vendor No.");
      PurchLine2.SETRANGE("Buy-from Vendor No.","Buy-from Vendor No.");
      IF PAGE.RUNMODAL(PAGE::"Purchase Lines",PurchLine2) = ACTION::LookupOK THEN BEGIN
        PurchLine2.TESTFIELD("Document Type","Document Type"::"Blanket Order");
        IF (PurchLine2."Document No."<>"Blanket Order No.") OR (PurchLine2."Line No."<>"Blanket Order Line No.") THEN BEGIN //**4PS.n
          ValidateBlanketOrder(PurchLine2."Document No.");  //**4PS.n
          "Blanket Order No." := PurchLine2."Document No.";
          VALIDATE("Blanket Order Line No.",PurchLine2."Line No.");
        END;  //**4PS.n
      END;
    END;

    PROCEDURE BlockDynamicTracking@23(SetBlock@1000 : Boolean);
    BEGIN
      TrackingBlocked := SetBlock;
      ReservePurchLine.Block(SetBlock);
    END;

    PROCEDURE ShowDimensions@25();
    BEGIN
      DimMgt.SetCompany("Receiving Company"); //**4PS.n
      DimMgt.SetTableID(DATABASE::"Purchase Line"); //**4PS.n
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Document Type","Document No.","Line No."));
      VerifyItemLineDim;
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE ShowDimensionsNotEditable@1100485011();
    BEGIN
      //**4PS
      TESTFIELD("Document No.");
      TESTFIELD("Line No.");
      DimMgt.SetCompany("Receiving Company"); //**4PS.n
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Document Type","Document No.","Line No."));
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    BEGIN
      //**4PS.sn DP00121
      IF Type = Type::"G/L Account" THEN
        TESTFIELD("Item No.")
      ELSE BEGIN
      //**4PS.en
        TESTFIELD(Type, Type::Item);
        TESTFIELD("No.");
      END; //**4PS.n

      IF "Prod. Order No." <> '' THEN
        ERROR(Text031,"Prod. Order No.");

      TESTFIELD("Quantity (Base)");

      ReservePurchLine.CallItemTracking(Rec);
    END;

    PROCEDURE CreateDim@26(Type1@1000 : Integer;No1@1001 : Code[40];Type2@1002 : Integer;No2@1003 : Code[40];Type3@1004 : Integer;No3@1005 : Code[40];Type4@1006 : Integer;No4@1007 : Code[40];Type5@1100485001 : Integer;No5@1100485000 : Code[40];Type6@1100525001 : Integer;No6@1100525000 : Code[40];Type7@1100525003 : Integer;No7@1100525002 : Code[40]);
    VAR
      SourceCodeSetup@1008 : Record 242;
      TableID@1009 : ARRAY [10] OF Integer;
      No@1010 : ARRAY [10] OF Code[40];
      i@1210190000 : Integer;
      PurchHeadDimSet@1100409000 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;

      //**4PS.sn
      TableID[5] := Type5;
      No[5] := No5;
      TableID[6] := Type6;
      No[6] := No6;
      TableID[7] := Type7;  //** 4PS 09-06-2010
      No[7] := No7;         //** 4PS 09-06-2010
      //TableID[8] := Type8;  //*C007227.o
      //No[8] := No8;         //*C007227.o

      //*33895.sn
      IF ("Plant Type" <> '') AND ("Item No." + "Basic Item" + "Trade Item" <> '') THEN BEGIN
        IF CheckPlantAcquisitionOrRent(Rec) = 0 THEN BEGIN
          FOR i := 1 TO ARRAYLEN(TableID) DO BEGIN
            IF TableID[i] IN [DATABASE::"Plant Type", DATABASE::"Plant Number"] THEN BEGIN
              TableID[i] := 0;
              No[i] := '';
            END;
          END;
        END;
      END;
      //*33895.en
      Dim1 := "Shortcut Dimension 1 Code";
      Dim2 := "Shortcut Dimension 2 Code";
      DimMgt.SetCompany("Receiving Company"); //**4PS.n
      //**4PS.en

      //"Shortcut Dimension 1 Code" := ''; //**4PS.o Must be kept for Department Authorization
      "Shortcut Dimension 2 Code" := '';
      //IF (CurrFieldNo = 0) OR ((Dim1 = '') AND (Dim2 = '')) THEN BEGIN //**4PS.n  C012949.o
      GetPurchHeader;
      //**4PS.sn C021622
      IF "Receiving Company" = '' THEN
        PurchHeadDimSet := PurchHeader."Dimension Set ID"
      ELSE
        PurchHeadDimSet := 0;
      //**4PS.en C021622
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,SourceCodeSetup.Purchases,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",
      //  PurchHeader."Dimension Set ID",DATABASE::Vendor); //**4PS.o C021622
          PurchHeadDimSet,DATABASE::Vendor); //**4PS.n C021622
      //END; //**4PS.n C012949.o
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

      //**4PS.sn
      IF (Dim1 <> '') AND ("Shortcut Dimension 1 Code" = '') THEN BEGIN
        "Shortcut Dimension 1 Code" := Dim1;
        ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
      END;

      IF (Dim2 <> '') AND
         (("Shortcut Dimension 2 Code" = '') OR
          (PurchHeader."Hours Hire Order Type" > 0) OR //call 23330
          (CurrFieldNo = FIELDNO("Shortcut Dimension 2 Code")))
      THEN BEGIN
        "Shortcut Dimension 2 Code" := Dim2;
        ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
      END;
      IF ("Shortcut Dimension 2 Code" <> '') THEN BEGIN
        DimVal2Rec.CHANGECOMPANY("Receiving Company");
        DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimVal2Rec, FALSE, "Job No.");
        IF "Cost Type" <> DimVal2Rec."Cost Type" + 1 THEN BEGIN //call 26946
          HideDialog := TRUE;
          VALIDATE("Cost Type", DimVal2Rec."Cost Type" + 1);
          HideDialog := FALSE;
        END;
      END;
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      // ExFlow ->
      IF Approve AND NOT StatusCheckSuspended THEN
        ExFlow.TestifApprovedPurchLineDim(Rec);
      // <- ExFlow

      //**4PS.sn
      IF FieldNumber = 1 THEN
        DimMgt.CheckDepartmentAuthorization(DATABASE::"Purchase Line", ShortcutDimCode);
      DimMgt.SetCompany("Receiving Company");
      //**4PS.en
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");

      // ExFlow ->
      IF (FieldNumber > 2) AND Approve THEN
        ExFlow.ShortCutDim(FieldNumber,ShortcutDimCode,Rec);
      // <- ExFlow
    END;

    PROCEDURE LookupShortcutDimCode@30(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.SetCompany("Receiving Company"); //**4PS.n
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);

      ValidateShortcutDimCode(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShowShortcutDimCode@27(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.SetCompany("Receiving Company"); //**4PS.n T005462
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    LOCAL PROCEDURE GetSKU@5806() : Boolean;
    VAR
      lvItem@1100485000 : Code[20];
    BEGIN
      //**4PS.sn
      IF Type = Type::Item THEN lvItem := "No.";
      IF Type = Type::"G/L Account" THEN lvItem := "Item No.";

      IF lvItem = '' THEN   //M29472.n
        EXIT(FALSE);        //M29472.n

      ItemRec.GET(lvItem);
      //**4PS.en
      //TESTFIELD("No."); //**4PS.o
      IF (SKU."Location Code" = "Location Code") AND
         (SKU."Item No." = lvItem) AND  //**4PS.n (db, 30-10-07 instead of "No.")
         (SKU."Variant Code" = "Variant Code")
      THEN
        EXIT(TRUE);
      IF SKU.GET("Location Code",lvItem,"Variant Code") THEN  //**4PS.n (db, 30-10-07 instead of "No.")
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE ShowItemChargeAssgnt@5801();
    VAR
      ItemChargeAssgnts@1000 : Page 5805;
      AssignItemChargePurch@1001 : Codeunit 5805;
      ItemChargeAssgntLineAmt@1002 : Decimal;
    BEGIN
      GET("Document Type","Document No.","Line No.");
      TESTFIELD(Type,Type::"Charge (Item)");
      TESTFIELD("No.");
      TESTFIELD(Quantity);

      GetPurchHeader;
      IF PurchHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(PurchHeader."Currency Code");
      IF ("Inv. Discount Amount" = 0) AND
         ("Line Discount Amount" = 0) AND
         (NOT PurchHeader."Prices Including VAT")
      THEN
        ItemChargeAssgntLineAmt := "Line Amount"
      ELSE
        IF PurchHeader."Prices Including VAT" THEN
          ItemChargeAssgntLineAmt :=
            ROUND(("Line Amount" - "Inv. Discount Amount") / (1 + "VAT %" / 100),
              Currency."Amount Rounding Precision")
        ELSE
          ItemChargeAssgntLineAmt := "Line Amount" - "Inv. Discount Amount";
      ItemChargeAssgntPurch.RESET;
      ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
      ItemChargeAssgntPurch.SETRANGE("Document Line No.","Line No.");
      ItemChargeAssgntPurch.SETRANGE("Item Charge No.","No.");
      IF NOT ItemChargeAssgntPurch.FINDLAST THEN BEGIN
        ItemChargeAssgntPurch."Document Type" := "Document Type";
        ItemChargeAssgntPurch."Document No." := "Document No.";
        ItemChargeAssgntPurch."Document Line No." := "Line No.";
        ItemChargeAssgntPurch."Item Charge No." := "No.";
        ItemChargeAssgntPurch."Unit Cost" :=
          ROUND(ItemChargeAssgntLineAmt / Quantity,
            Currency."Unit-Amount Rounding Precision");
      END;

      ItemChargeAssgntLineAmt :=
        ROUND(
          ItemChargeAssgntLineAmt * ("Qty. to Invoice" / Quantity),
          Currency."Amount Rounding Precision");

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        AssignItemChargePurch.CreateDocChargeAssgnt(ItemChargeAssgntPurch,"Return Shipment No.")
      ELSE
        AssignItemChargePurch.CreateDocChargeAssgnt(ItemChargeAssgntPurch,"Receipt No.");
      CLEAR(AssignItemChargePurch);
      COMMIT;

      ItemChargeAssgnts.Initialize(Rec,ItemChargeAssgntLineAmt);
      ItemChargeAssgnts.RUNMODAL;
      CALCFIELDS("Qty. to Assign");
    END;

    PROCEDURE UpdateItemChargeAssgnt@5807();
    VAR
      ShareOfVAT@1000 : Decimal;
      TotalQtyToAssign@1001 : Decimal;
      TotalAmtToAssign@1002 : Decimal;
    BEGIN
      CALCFIELDS("Qty. Assigned","Qty. to Assign");
      IF ABS("Quantity Invoiced") > ABS(("Qty. Assigned" + "Qty. to Assign")) THEN
        ERROR(Text032,FIELDCAPTION("Quantity Invoiced"),FIELDCAPTION("Qty. Assigned"),FIELDCAPTION("Qty. to Assign"));

      ItemChargeAssgntPurch.RESET;
      ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
      ItemChargeAssgntPurch.SETRANGE("Document Line No.","Line No.");
      ItemChargeAssgntPurch.CALCSUMS("Qty. to Assign");
      TotalQtyToAssign := ItemChargeAssgntPurch."Qty. to Assign";
      IF (CurrFieldNo <> 0) AND ("Unit Cost" <> xRec."Unit Cost") THEN BEGIN
        ItemChargeAssgntPurch.SETFILTER("Qty. Assigned",'<>0');
        IF ItemChargeAssgntPurch.FINDFIRST THEN
          ERROR(Text022,
            FIELDCAPTION("Unit Cost"));
        ItemChargeAssgntPurch.SETRANGE("Qty. Assigned");
      END;

      IF (CurrFieldNo <> 0) AND (Quantity <> xRec.Quantity) THEN BEGIN
        ItemChargeAssgntPurch.SETFILTER("Qty. Assigned",'<>0');
        IF ItemChargeAssgntPurch.FINDFIRST THEN
          ERROR(Text022,
            FIELDCAPTION(Quantity));
        ItemChargeAssgntPurch.SETRANGE("Qty. Assigned");
      END;

      IF ItemChargeAssgntPurch.FINDSET THEN BEGIN
        GetPurchHeader;
        TotalAmtToAssign := CalcTotalAmtToAssign(TotalQtyToAssign);
        REPEAT
          ShareOfVAT := 1;
          IF PurchHeader."Prices Including VAT" THEN
            ShareOfVAT := 1 + "VAT %" / 100;
          IF Quantity <> 0 THEN
            IF ItemChargeAssgntPurch."Unit Cost" <> ROUND(
                 ("Line Amount" - "Inv. Discount Amount") / Quantity / ShareOfVAT,
                 Currency."Unit-Amount Rounding Precision")
            THEN
              ItemChargeAssgntPurch."Unit Cost" :=
                ROUND(("Line Amount" - "Inv. Discount Amount") / Quantity / ShareOfVAT,
                  Currency."Unit-Amount Rounding Precision");
          IF TotalQtyToAssign <> 0 THEN BEGIN
            ItemChargeAssgntPurch."Amount to Assign" :=
              ROUND(ItemChargeAssgntPurch."Qty. to Assign" / TotalQtyToAssign * TotalAmtToAssign,
                Currency."Amount Rounding Precision");
            TotalQtyToAssign -= ItemChargeAssgntPurch."Qty. to Assign";
            TotalAmtToAssign -= ItemChargeAssgntPurch."Amount to Assign";
          END;
          ItemChargeAssgntPurch.MODIFY;
        UNTIL ItemChargeAssgntPurch.NEXT = 0;
        CALCFIELDS("Qty. to Assign");
      END;
    END;

    LOCAL PROCEDURE DeleteItemChargeAssgnt@5802(DocType@1000 : Option;DocNo@1001 : Code[20];DocLineNo@1002 : Integer);
    BEGIN
      ItemChargeAssgntPurch.SETCURRENTKEY(
        "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",DocType);
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.",DocNo);
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.",DocLineNo);
      IF NOT ItemChargeAssgntPurch.ISEMPTY THEN
        ItemChargeAssgntPurch.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE DeleteChargeChargeAssgnt@5804(DocType@1000 : Option;DocNo@1001 : Code[20];DocLineNo@1002 : Integer);
    BEGIN
      IF "Quantity Invoiced" <> 0 THEN BEGIN
        CALCFIELDS("Qty. Assigned");
        TESTFIELD("Qty. Assigned","Quantity Invoiced");
      END;
      ItemChargeAssgntPurch.RESET;
      ItemChargeAssgntPurch.SETRANGE("Document Type",DocType);
      ItemChargeAssgntPurch.SETRANGE("Document No.",DocNo);
      ItemChargeAssgntPurch.SETRANGE("Document Line No.",DocLineNo);
      IF NOT ItemChargeAssgntPurch.ISEMPTY THEN
        ItemChargeAssgntPurch.DELETEALL;
    END;

    PROCEDURE CheckItemChargeAssgnt@5800();
    VAR
      ItemChargeAssgntPurch@1000 : Record 5805;
    BEGIN
      ItemChargeAssgntPurch.SETCURRENTKEY(
        "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type","Document Type");
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.","Document No.");
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.","Line No.");
      ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
      IF ItemChargeAssgntPurch.FINDSET THEN BEGIN
        TESTFIELD("Allow Item Charge Assignment");
        REPEAT
          ItemChargeAssgntPurch.TESTFIELD("Qty. to Assign",0);
        UNTIL ItemChargeAssgntPurch.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetFieldCaption@31(FieldNumber@1000 : Integer) : Text[100];
    VAR
      Field@1001 : Record 2000000041;
    BEGIN
      Field.GET(DATABASE::"Purchase Line",FieldNumber);
      EXIT(Field."Field Caption");
    END;

    LOCAL PROCEDURE GetCaptionClass@34(FieldNumber@1000 : Integer) : Text[80];
    BEGIN
      IF NOT PurchHeader.GET("Document Type","Document No.") THEN BEGIN
        PurchHeader."No." := '';
        PurchHeader.INIT;
      END;
      IF PurchHeader."Prices Including VAT" THEN
        EXIT('2,1,' + GetFieldCaption(FieldNumber));

      EXIT('2,0,' + GetFieldCaption(FieldNumber));
    END;

    LOCAL PROCEDURE TestStatusOpen@37();
    VAR
      WorkFlowSetup4PSConstruct@1100528200 : Record 11229316;
    BEGIN
      IF StatusCheckSuspended THEN
        EXIT;
      GetPurchHeader;
      //**4PS.so
      //IF NOT "System-Created Entry" THEN
      //  IF Type <> Type::" " THEN
      //    PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);
      //**4PS.eo
      //**4PS.sn
      IF "Extra Receipt Line" AND (PurchHeader.Status = PurchHeader.Status::Released) THEN
        EXIT;

      IF "Removal Contribution" AND
         (PurchHeader.Status = PurchHeader.Status::Released) AND
         ("Quantity Received" = 0)
      THEN
        EXIT;

      IF IsDocumentCaptureActive AND
        (PurchHeader.Status = PurchHeader.Status::"Pending Approval")
      THEN BEGIN
         WorkFlowSetup4PSConstruct.GET;
         IF WorkFlowSetup4PSConstruct."Purch. Invoice Modify Allowed" THEN
           EXIT;
      END;

      PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);
      //**4PS.en
    END;

    PROCEDURE SuspendStatusCheck@42(Suspend@1000 : Boolean);
    BEGIN
      StatusCheckSuspended := Suspend;
    END;

    PROCEDURE UpdateLeadTimeFields@11();
    VAR
      StartingDate@1000 : Date;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        GetPurchHeader;
        IF "Document Type" IN ["Document Type"::Quote,"Document Type"::Order] THEN
          StartingDate := PurchHeader."Order Date"
        ELSE
          StartingDate := PurchHeader."Posting Date";

        EVALUATE("Lead Time Calculation",
          LeadTimeMgt.PurchaseLeadTime(
            "No.","Location Code","Variant Code",
            "Buy-from Vendor No."));
        IF FORMAT("Lead Time Calculation") = '' THEN
          "Lead Time Calculation" := PurchHeader."Lead Time Calculation";
        EVALUATE("Safety Lead Time",LeadTimeMgt.SafetyLeadTime("No.","Location Code","Variant Code"));
      END;
    END;

    PROCEDURE GetUpdateBasicDates@43();
    BEGIN
      GetPurchHeader;
      IF PurchHeader."Expected Receipt Date" <> 0D THEN
        VALIDATE("Expected Receipt Date",PurchHeader."Expected Receipt Date")
      //**4PS.so
      //ELSE
      //  VALIDATE("Order Date",PurchHeader."Order Date"); //**4PS.o
      //**4PS.eo
    END;

    PROCEDURE UpdateDates@39();
    BEGIN
      IF "Promised Receipt Date" <> 0D THEN
        VALIDATE("Promised Receipt Date")
      ELSE
        IF "Requested Receipt Date" <> 0D THEN
          VALIDATE("Requested Receipt Date")
        ELSE
          GetUpdateBasicDates;
    END;

    PROCEDURE InternalLeadTimeDays@35(PurchDate@1002 : Date) : Text[30];
    VAR
      TotalDays@1001 : DateFormula;
    BEGIN
      EVALUATE(
        TotalDays,'<' + FORMAT(CALCDATE("Safety Lead Time",CALCDATE("Inbound Whse. Handling Time",PurchDate)) - PurchDate) + 'D>');
      EXIT(FORMAT(TotalDays));
    END;

    PROCEDURE UpdateVATOnLines@32(QtyType@1000 : 'General,Invoicing,Shipping';VAR PurchHeader@1001 : Record 38;VAR PurchLine@1002 : Record 39;VAR VATAmountLine@1003 : Record 290);
    VAR
      TempVATAmountLineRemainder@1004 : TEMPORARY Record 290;
      Currency@1005 : Record 4;
      NewAmount@1006 : Decimal;
      NewAmountIncludingVAT@1007 : Decimal;
      NewVATBaseAmount@1008 : Decimal;
      VATAmount@1009 : Decimal;
      VATDifference@1010 : Decimal;
      InvDiscAmount@1011 : Decimal;
      LineAmountToInvoice@1012 : Decimal;
      LineAmountToInvoiceDiscounted@1013 : Decimal;
      DeferralAmount@1014 : Decimal;
    BEGIN
      IF QtyType = QtyType::Shipping THEN
        EXIT;
      IF PurchHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(PurchHeader."Currency Code");

      TempVATAmountLineRemainder.DELETEALL;

      WITH PurchLine DO BEGIN
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        LOCKTABLE;
        IF FINDSET THEN
          REPEAT
          //IF NOT ZeroAmountLine(QtyType) THEN BEGIN //**4PS.o
            IF NOT ZeroAmountLine(QtyType, PurchHeader, PurchLine) THEN BEGIN //**4PS.n Standard bugfix
              DeferralAmount := GetDeferralAmount;
              VATAmountLine.GET("VAT Identifier","VAT Calculation Type","Tax Group Code","Use Tax","Line Amount" >= 0);
              IF VATAmountLine.Modified THEN BEGIN
                IF NOT TempVATAmountLineRemainder.GET(
                     "VAT Identifier","VAT Calculation Type","Tax Group Code","Use Tax","Line Amount" >= 0)
                THEN BEGIN
                  TempVATAmountLineRemainder := VATAmountLine;
                  TempVATAmountLineRemainder.INIT;
                  TempVATAmountLineRemainder.INSERT;
                END;

              //IF QtyType = QtyType::General THEN //**4PS.o
                IF (QtyType = QtyType::General) OR PurchHeader."Amounts only" THEN //**4PS.n
                  LineAmountToInvoice := "Line Amount"
                ELSE
                  LineAmountToInvoice :=
                    ROUND("Line Amount" * "Qty. to Invoice" / Quantity,Currency."Amount Rounding Precision");

                IF "Allow Invoice Disc." THEN BEGIN
                  IF (VATAmountLine."Inv. Disc. Base Amount" = 0) OR (LineAmountToInvoice = 0) THEN
                    InvDiscAmount := 0
                  ELSE BEGIN
                  //IF QtyType = QtyType::General THEN //**4PS.o
                    IF (QtyType = QtyType::General) OR PurchHeader."Amounts only" THEN //**4PS.n
                      LineAmountToInvoice := "Line Amount"
                    ELSE
                      LineAmountToInvoice :=
                        ROUND("Line Amount" * "Qty. to Invoice" / Quantity,Currency."Amount Rounding Precision");
                    LineAmountToInvoiceDiscounted :=
                      VATAmountLine."Invoice Discount Amount" * LineAmountToInvoice /
                      VATAmountLine."Inv. Disc. Base Amount";
                    TempVATAmountLineRemainder."Invoice Discount Amount" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount" + LineAmountToInvoiceDiscounted;
                    InvDiscAmount :=
                      ROUND(
                        TempVATAmountLineRemainder."Invoice Discount Amount",Currency."Amount Rounding Precision");
                    TempVATAmountLineRemainder."Invoice Discount Amount" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount" - InvDiscAmount;
                  END;
                //IF QtyType = QtyType::General THEN BEGIN //**4PS.o
                  IF (QtyType = QtyType::General) OR PurchHeader."Amounts only" THEN BEGIN//**4PS.n
                    "Inv. Discount Amount" := InvDiscAmount;
                    CalcInvDiscToInvoice;
                  END ELSE
                    "Inv. Disc. Amount to Invoice" := InvDiscAmount;
                END ELSE
                  InvDiscAmount := 0;
                IF QtyType = QtyType::General THEN
                  IF PurchHeader."Prices Including VAT" THEN BEGIN
                    IF (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount" = 0) OR
                       ("Line Amount" = 0)
                    THEN BEGIN
                      VATAmount := 0;
                      NewAmountIncludingVAT := 0;
                    END ELSE BEGIN
                      VATAmount :=
                        TempVATAmountLineRemainder."VAT Amount" +
                        VATAmountLine."VAT Amount" *
                        ("Line Amount" - "Inv. Discount Amount") /
                        (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                      NewAmountIncludingVAT :=
                        TempVATAmountLineRemainder."Amount Including VAT" +
                        VATAmountLine."Amount Including VAT" *
                        ("Line Amount" - "Inv. Discount Amount") /
                        (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                    END;
                    NewAmount :=
                      ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision") -
                      ROUND(VATAmount,Currency."Amount Rounding Precision");
                    NewVATBaseAmount :=
                      ROUND(
                        NewAmount * (1 - PurchHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision");
                  END ELSE BEGIN
                    IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN BEGIN
                      VATAmount := "Line Amount" - "Inv. Discount Amount";
                      NewAmount := 0;
                      NewVATBaseAmount := 0;
                    END ELSE BEGIN
                      NewAmount := "Line Amount" - "Inv. Discount Amount";
                      NewVATBaseAmount :=
                        ROUND(
                          NewAmount * (1 - PurchHeader."VAT Base Discount %" / 100),
                          Currency."Amount Rounding Precision");
                      //**4PS.sn
                      IF "Manually VAT Posting" THEN
                        VATAmount := "Amount Including VAT" - "VAT Base Amount"
                      ELSE
                      //**4PS.en
                        IF VATAmountLine."VAT Base" = 0 THEN
                          VATAmount := 0
                        ELSE
                          VATAmount :=
                            TempVATAmountLineRemainder."VAT Amount" +
                            VATAmountLine."VAT Amount" * NewAmount / VATAmountLine."VAT Base";
                    END;
                    NewAmountIncludingVAT := NewAmount + ROUND(VATAmount,Currency."Amount Rounding Precision");
                  END
                ELSE BEGIN
                  IF (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount") = 0 THEN
                    VATDifference := 0
                  ELSE
                    VATDifference :=
                      TempVATAmountLineRemainder."VAT Difference" +
                      VATAmountLine."VAT Difference" * (LineAmountToInvoice - InvDiscAmount) /
                      (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                  IF LineAmountToInvoice = 0 THEN
                    "VAT Difference" := 0
                  ELSE
                    "VAT Difference" := ROUND(VATDifference,Currency."Amount Rounding Precision");
                END;

                IF QtyType = QtyType::General THEN BEGIN
                  Amount := NewAmount;
                  "Amount Including VAT" := ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                  //**4PS.sn C027348
                  UpdateAmountLCY;
                  "Line VAT Amount" := "Amount Including VAT" - Amount;
                  //**4PS.en
                  "VAT Base Amount" := NewVATBaseAmount;
                END;
                InitOutstanding;
                IF NOT ((Type = Type::"Charge (Item)") AND ("Quantity Invoiced" <> "Qty. Assigned")) THEN BEGIN
                  SetUpdateFromVAT(TRUE);
                  UpdateUnitCost;
                END;
                IF Type = Type::"Charge (Item)" THEN
                  UpdateItemChargeAssgnt;
                //**4PS.sn
                "Modified by" := USERID; //DP00469
                "Last Date Modified" := TODAY;//DP00469
                //**4PS.en
                MODIFY;
                IF ("Deferral Code" <> '') AND (DeferralAmount <> GetDeferralAmount) THEN
                  UpdateDeferralAmounts;

                TempVATAmountLineRemainder."Amount Including VAT" :=
                  NewAmountIncludingVAT - ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                TempVATAmountLineRemainder."VAT Amount" := VATAmount - NewAmountIncludingVAT + NewAmount;
                TempVATAmountLineRemainder."VAT Difference" := VATDifference - "VAT Difference";
                TempVATAmountLineRemainder.MODIFY;
              END;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CalcVATAmountLines@24(QtyType@1000 : 'General,Invoicing,Shipping';VAR PurchHeader@1001 : Record 38;VAR PurchLine@1002 : Record 39;VAR VATAmountLine@1003 : Record 290);
    VAR
      PrevVatAmountLine@1007 : Record 290;
      Currency@1004 : Record 4;
      SalesTaxCalculate@1005 : Codeunit 398;
      TotalVATAmount@1008 : Decimal;
      QtyToHandle@1006 : Decimal;
      RoundingLineInserted@1010 : Boolean;
      UnitFactor@1100525000 : Decimal;
    BEGIN
      IF PurchHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(PurchHeader."Currency Code");

      VATAmountLine.DELETEALL;

      WITH PurchLine DO BEGIN
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        IF FINDSET THEN
          REPEAT
            //IF NOT ZeroAmountLine(QtyType,) THEN BEGIN //**4PS.o
            IF NOT ZeroAmountLine(QtyType, PurchHeader, PurchLine) THEN BEGIN //**4PS.n Standard bugfix
              IF (Type = Type::"G/L Account") AND NOT "Prepayment Line" THEN
                RoundingLineInserted := ("No." = GetVPGInvRoundAcc(PurchHeader)) OR RoundingLineInserted;
              IF "VAT Calculation Type" IN
                 ["VAT Calculation Type"::"Reverse Charge VAT","VAT Calculation Type"::"Sales Tax"]
              THEN
                "VAT %" := 0;
              IF NOT VATAmountLine.GET(
                   "VAT Identifier","VAT Calculation Type","Tax Group Code","Use Tax","Line Amount" >= 0)
              THEN BEGIN
                VATAmountLine.INIT;
                VATAmountLine."VAT Identifier" := "VAT Identifier";
                VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
                VATAmountLine."Tax Group Code" := "Tax Group Code";
                VATAmountLine."Use Tax" := "Use Tax";
                VATAmountLine."VAT %" := "VAT %";
                VATAmountLine.Modified := TRUE;
                VATAmountLine.Positive := "Line Amount" >= 0;
                VATAmountLine.INSERT;
              END;
              //**4PS.sn
              VATAmountLine."VAT manually" := "Manually VAT Posting";
              IF "Manually VAT Posting" THEN
                VATAmountLine."Amount Including VAT" += "Amount Including VAT";
              //**4PS.en
              CASE QtyType OF
                QtyType::General:
                  BEGIN
                    VATAmountLine.Quantity := VATAmountLine.Quantity + "Quantity (Base)";
                    VATAmountLine."Line Amount" := VATAmountLine."Line Amount" + "Line Amount";
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" + "Line Amount";
                    VATAmountLine."Invoice Discount Amount" :=
                      VATAmountLine."Invoice Discount Amount" + "Inv. Discount Amount";
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    //**4PS.sn
                    IF ("Item No." + "Basic Item" + "Trade Item" <> '') AND
                       ("Unit Price (LCY)" > "Unit Cost (LCY)") THEN BEGIN
                      IF "Qty. per Unit of Measure" = 0 THEN
                        UnitFactor := 1  //db, 24-03-10: M18093 (field empty for production orderlines)
                      ELSE
                        UnitFactor := "Qty. per Unit of Measure";
                      VATAmountLine."Item Discount (LCY)" := VATAmountLine."Item Discount (LCY)" +
                        "Quantity (Base)" * ("Unit Price (LCY)" - "Unit Cost (LCY)") / UnitFactor;
                    END;
                    //**4PS.en
                    VATAmountLine.MODIFY;
                END;
                QtyType::Invoicing:
                  BEGIN
                    //**4PS.sn
                    IF PurchHeader."Amounts only" THEN BEGIN
                      QtyToHandle := 1;
                      Quantity := 1;
                    END ELSE
                    //**4PS.en
                      CASE TRUE OF
                        ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
                        (NOT PurchHeader.Receive) AND PurchHeader.Invoice AND (NOT "Prepayment Line"):
                          IF "Receipt No." = '' THEN BEGIN
                            QtyToHandle := GetAbsMin("Qty. to Invoice","Qty. Rcd. Not Invoiced");
                            VATAmountLine.Quantity :=
                              VATAmountLine.Quantity + GetAbsMin("Qty. to Invoice (Base)","Qty. Rcd. Not Invoiced (Base)");
                          END ELSE BEGIN
                            QtyToHandle := "Qty. to Invoice";
                            VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                          END;
                        ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                        (NOT PurchHeader.Ship) AND PurchHeader.Invoice:
                          IF "Return Shipment No." = '' THEN BEGIN
                            QtyToHandle := GetAbsMin("Qty. to Invoice","Return Qty. Shipped Not Invd.");
                            VATAmountLine.Quantity :=
                              VATAmountLine.Quantity + GetAbsMin("Qty. to Invoice (Base)","Ret. Qty. Shpd Not Invd.(Base)");
                          END ELSE BEGIN
                            QtyToHandle := "Qty. to Invoice";
                            VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                          END;
                        ELSE
                          BEGIN
                          QtyToHandle := "Qty. to Invoice";
                          VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                        END;
                      END;
                    VATAmountLine."Line Amount" :=
                      VATAmountLine."Line Amount" + GetLineAmountToHandle(QtyToHandle);
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" + GetLineAmountToHandle(QtyToHandle);
                    IF PurchHeader."Invoice Discount Calculation" <> PurchHeader."Invoice Discount Calculation"::Amount THEN
                      VATAmountLine."Invoice Discount Amount" :=
                        VATAmountLine."Invoice Discount Amount" +
                        ROUND("Inv. Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision")
                    ELSE
                      VATAmountLine."Invoice Discount Amount" :=
                        VATAmountLine."Invoice Discount Amount" + "Inv. Disc. Amount to Invoice";
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                    //**4PS.sn
                    IF PurchHeader."Amounts only" THEN
                      Quantity := 0;
                    //**4PS.en
                  END;
                QtyType::Shipping:
                  BEGIN
                    //**4PS.sn
                    IF PurchHeader."Amounts only" THEN BEGIN
                      QtyToHandle := 1;
                      Quantity := 1;
                    END ELSE
                    //**4PS.en
                      IF "Document Type" IN
                         ["Document Type"::"Return Order","Document Type"::"Credit Memo"]
                      THEN BEGIN
                        QtyToHandle := "Return Qty. to Ship";
                        VATAmountLine.Quantity := VATAmountLine.Quantity + "Return Qty. to Ship (Base)";
                      END ELSE BEGIN
                        QtyToHandle := "Qty. to Receive";
                        VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Receive (Base)";
                      END;
                    VATAmountLine."Line Amount" :=
                      VATAmountLine."Line Amount" + GetLineAmountToHandle(QtyToHandle);
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" + GetLineAmountToHandle(QtyToHandle);
                    VATAmountLine."Invoice Discount Amount" :=
                      VATAmountLine."Invoice Discount Amount" +
                      ROUND("Inv. Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision");
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                    //**4PS.sn
                    IF PurchHeader."Amounts only" THEN
                      Quantity := 0;
                    //**4PS.en
                  END;
              END;
              TotalVATAmount := TotalVATAmount + "Amount Including VAT" - Amount;
            END;
          UNTIL NEXT = 0;
      END;

      WITH VATAmountLine DO
        IF FINDSET THEN
          REPEAT
            IF (PrevVatAmountLine."VAT Identifier" <> "VAT Identifier") OR
               (PrevVatAmountLine."VAT Calculation Type" <> "VAT Calculation Type") OR
               (PrevVatAmountLine."Tax Group Code" <> "Tax Group Code") OR
               (PrevVatAmountLine."Use Tax" <> "Use Tax")
            THEN
              PrevVatAmountLine.INIT;
            IF PurchHeader."Prices Including VAT" THEN BEGIN
              CASE "VAT Calculation Type" OF
                "VAT Calculation Type"::"Normal VAT",
                "VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    "VAT Base" :=
                      ROUND(
                        ("Line Amount" - "Invoice Discount Amount") / (1 + "VAT %" / 100),
                        Currency."Amount Rounding Precision") - "VAT Difference";
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND(
                        PrevVatAmountLine."VAT Amount" +
                        ("Line Amount" - "Invoice Discount Amount" - "VAT Base" - "VAT Difference") *
                        (1 - PurchHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    //**4PS.sn
                    IF "VAT manually" THEN
                      "VAT Amount" := "Amount Including VAT" - "VAT Base"
                    ELSE
                    //**4PS.en
                      "Amount Including VAT" := "VAT Base" + "VAT Amount";
                    IF Positive THEN
                      PrevVatAmountLine.INIT
                    ELSE BEGIN
                      PrevVatAmountLine := VATAmountLine;
                      PrevVatAmountLine."VAT Amount" :=
                        ("Line Amount" - "Invoice Discount Amount" - "VAT Base" - "VAT Difference") *
                        (1 - PurchHeader."VAT Base Discount %" / 100);
                      PrevVatAmountLine."VAT Amount" :=
                        PrevVatAmountLine."VAT Amount" -
                        ROUND(PrevVatAmountLine."VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    END;
                  END;
                "VAT Calculation Type"::"Full VAT":
                  BEGIN
                    "VAT Base" := 0;
                    "VAT Amount" := "VAT Difference" + "Line Amount" - "Invoice Discount Amount";
                    "Amount Including VAT" := "VAT Amount";
                  END;
                "VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    "Amount Including VAT" := "Line Amount" - "Invoice Discount Amount";
                    IF "Use Tax" THEN
                      "VAT Base" := "Amount Including VAT"
                    ELSE
                      "VAT Base" :=
                        ROUND(
                          SalesTaxCalculate.ReverseCalculateTax(
                            PurchHeader."Tax Area Code","Tax Group Code",PurchHeader."Tax Liable",
                            PurchHeader."Posting Date","Amount Including VAT",Quantity,PurchHeader."Currency Factor"),
                          Currency."Amount Rounding Precision");
                    "VAT Amount" := "VAT Difference" + "Amount Including VAT" - "VAT Base";
                    IF "VAT Base" = 0 THEN
                      "VAT %" := 0
                    ELSE
                      "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base",0.00001);
                  END;
              END;
            END ELSE
              CASE "VAT Calculation Type" OF
                "VAT Calculation Type"::"Normal VAT",
                "VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    "VAT Base" := "Line Amount" - "Invoice Discount Amount";
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND(
                        PrevVatAmountLine."VAT Amount" +
                        "VAT Base" * "VAT %" / 100 * (1 - PurchHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    //**4PS.sn
                    IF "VAT manually" THEN
                      "VAT Amount" := "Amount Including VAT" - "Line Amount" + "Invoice Discount Amount"
                    ELSE
                    //**4PS.en
                      "Amount Including VAT" := "Line Amount" - "Invoice Discount Amount" + "VAT Amount";
                    IF Positive THEN
                      PrevVatAmountLine.INIT
                    ELSE
                      IF NOT "Includes Prepayment" THEN BEGIN
                        PrevVatAmountLine := VATAmountLine;
                        PrevVatAmountLine."VAT Amount" :=
                          "VAT Base" * "VAT %" / 100 * (1 - PurchHeader."VAT Base Discount %" / 100);
                        PrevVatAmountLine."VAT Amount" :=
                          PrevVatAmountLine."VAT Amount" -
                          ROUND(PrevVatAmountLine."VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                      END;
                  END;
                "VAT Calculation Type"::"Full VAT":
                  BEGIN
                    "VAT Base" := 0;
                    "VAT Amount" := "VAT Difference" + "Line Amount" - "Invoice Discount Amount";
                    "Amount Including VAT" := "VAT Amount";
                  END;
                "VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    "VAT Base" := "Line Amount" - "Invoice Discount Amount";
                    IF "Use Tax" THEN
                      "VAT Amount" := 0
                    ELSE
                      "VAT Amount" :=
                        SalesTaxCalculate.CalculateTax(
                          PurchHeader."Tax Area Code","Tax Group Code",PurchHeader."Tax Liable",
                          PurchHeader."Posting Date","VAT Base",Quantity,PurchHeader."Currency Factor");
                    IF "VAT Base" = 0 THEN
                      "VAT %" := 0
                    ELSE
                      "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base",0.00001);
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND("VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT" := "VAT Base" + "VAT Amount";
                  END;
              END;

            IF RoundingLineInserted THEN
              TotalVATAmount := TotalVATAmount - "VAT Amount";
            "Calculated VAT Amount" := "VAT Amount" - "VAT Difference";
            MODIFY;
          UNTIL NEXT = 0;

      IF RoundingLineInserted AND (TotalVATAmount <> 0) THEN
        IF VATAmountLine.GET(PurchLine."VAT Identifier",PurchLine."VAT Calculation Type",
             PurchLine."Tax Group Code",PurchLine."Use Tax",PurchLine."Line Amount" >= 0)
        THEN BEGIN
          VATAmountLine."VAT Amount" := VATAmountLine."VAT Amount" + TotalVATAmount;
          VATAmountLine."Amount Including VAT" := VATAmountLine."Amount Including VAT" + TotalVATAmount;
          VATAmountLine."Calculated VAT Amount" := VATAmountLine."Calculated VAT Amount" + TotalVATAmount;
          VATAmountLine.MODIFY;
        END;
    END;

    PROCEDURE UpdateWithWarehouseReceive@41();
    BEGIN
      IF Type = Type::Item THEN
        CASE TRUE OF
          ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND (Quantity >= 0):
      //    IF Location.RequireReceive("Location Code") THEN //**4PS.o
            //**4PS.sn
            IF (Location.RequireReceive("Location Code")) OR
               (("Document Type" = "Document Type"::Order) AND NOT DirectReceipt)
            THEN
            //**4PS.en
              VALIDATE("Qty. to Receive",0)
            ELSE
              VALIDATE("Qty. to Receive","Outstanding Quantity");
          ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND (Quantity < 0):
      //    IF Location.RequireShipment("Location Code") THEN //**4PS.o
            //**4PS.sn
            IF (Location.RequireShipment("Location Code")) OR
               (("Document Type" = "Document Type"::Order) AND NOT DirectReceipt)
            THEN
            //**4PS.en
              VALIDATE("Qty. to Receive",0)
            ELSE
              //**4PS.en
              VALIDATE("Qty. to Receive","Outstanding Quantity");
          ("Document Type" = "Document Type"::"Return Order") AND (Quantity >= 0):
            IF Location.RequireShipment("Location Code") THEN
              VALIDATE("Return Qty. to Ship",0)
            ELSE
              VALIDATE("Return Qty. to Ship","Outstanding Quantity");
          ("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0):
            IF Location.RequireReceive("Location Code") THEN
              VALIDATE("Return Qty. to Ship",0)
            ELSE
              VALIDATE("Return Qty. to Ship","Outstanding Quantity");
        END;
      SetDefaultQuantity;
    END;

    LOCAL PROCEDURE CheckWarehouse@47();
    VAR
      Location2@1002 : Record 14;
      WhseSetup@1000 : Record 5769;
      ShowDialog@1001 : ' ,Message,Error';
      DialogText@1003 : Text[50];
    BEGIN
      IF "Prod. Order No." <> '' THEN
        EXIT;
      GetLocation("Location Code");
      IF "Location Code" = '' THEN BEGIN
        WhseSetup.GET;
        Location2."Require Shipment" := WhseSetup."Require Shipment";
        Location2."Require Pick" := WhseSetup."Require Pick";
        Location2."Require Receive" := WhseSetup."Require Receive";
        Location2."Require Put-away" := WhseSetup."Require Put-away";
      END ELSE
        Location2 := Location;

      DialogText := Text033;
      IF ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"]) AND
         Location2."Directed Put-away and Pick"
      THEN BEGIN
        ShowDialog := ShowDialog::Error;
        IF (("Document Type" = "Document Type"::Order) AND (Quantity >= 0)) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0))
        THEN
          DialogText :=
            DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Receive"))
        ELSE
          DialogText :=
            DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Shipment"));
      END ELSE BEGIN
        IF (("Document Type" = "Document Type"::Order) AND (Quantity >= 0) AND
            (Location2."Require Receive" OR Location2."Require Put-away")) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0) AND
            (Location2."Require Receive" OR Location2."Require Put-away"))
        THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Purchase Line",
               "Document Type",
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location2."Require Receive" THEN
              ShowDialog := ShowDialog::Message;
          IF Location2."Require Receive" THEN
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Receive"))
          ELSE BEGIN
            DialogText := Text034;
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Put-away"));
          END;
        END;

        IF (("Document Type" = "Document Type"::Order) AND (Quantity < 0) AND
            (Location2."Require Shipment" OR Location2."Require Pick")) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity >= 0) AND
            (Location2."Require Shipment" OR Location2."Require Pick"))
        THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Purchase Line",
               "Document Type",
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location2."Require Shipment" THEN
              ShowDialog := ShowDialog::Message;
          IF Location2."Require Shipment" THEN
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Shipment"))
          ELSE BEGIN
            DialogText := Text034;
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Pick"));
          END;
        END;
      END;

      CASE ShowDialog OF
        ShowDialog::Message:
          MESSAGE(Text016 + Text017,DialogText,FIELDCAPTION("Line No."),"Line No.");
        ShowDialog::Error:
          ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.")
      END;

      HandleDedicatedBin(TRUE);
    END;

    LOCAL PROCEDURE GetOverheadRateFCY@40() : Decimal;
    VAR
      QtyPerUOM@1000 : Decimal;
    BEGIN
      IF "Prod. Order No." = '' THEN
        QtyPerUOM := "Qty. per Unit of Measure"
      ELSE BEGIN
        GetItem;
        QtyPerUOM := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
      END;

      EXIT(
        CurrExchRate.ExchangeAmtLCYToFCY(
      //  GetDate,"Currency Code","Overhead Rate" * QtyPerUOM,PurchHeader."Currency Factor")); //**4PS.o
          1,PurchHeader."Job No.",GetDate,"Currency Code","Overhead Rate" * QtyPerUOM,PurchHeader."Currency Factor",FALSE)); //**4PS.n
    END;

    PROCEDURE GetItemTranslation@44();
    BEGIN
      GetPurchHeader;
      IF ItemTranslation.GET("No.","Variant Code",PurchHeader."Language Code") THEN BEGIN
        Description := ItemTranslation.Description;
        IF ItemTranslation."Description 2" <> '' THEN //**4PSmg, 24-06-11: M26548
          "Description 2" := ItemTranslation."Description 2";
      END;
    END;

    LOCAL PROCEDURE GetGLSetup@45();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE GetPurchSetup@80();
    BEGIN
      IF NOT PurchSetupRead THEN
        PurchSetup.GET;
      PurchSetupRead := TRUE;
    END;

    PROCEDURE AdjustDateFormula@48(DateFormulatoAdjust@1000 : DateFormula) : Text[30];
    BEGIN
      IF FORMAT(DateFormulatoAdjust) <> '' THEN
        EXIT(FORMAT(DateFormulatoAdjust));
      EVALUATE(DateFormulatoAdjust,'<0D>');
      EXIT(FORMAT(DateFormulatoAdjust));
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    PROCEDURE RowID1@49() : Text[250];
    VAR
      ItemTrackingMgt@1000 : Codeunit 6500;
    BEGIN
      EXIT(ItemTrackingMgt.ComposeRowID(DATABASE::"Purchase Line","Document Type",
          "Document No.",'',0,"Line No."));
    END;

    LOCAL PROCEDURE GetDefaultBin@50();
    VAR
      WMSManagement@1000 : Codeunit 7302;
    BEGIN
      //IF Type <> Type::Item THEN  //**4PS.o
      IF "Item No."+"Trade Item" = '' THEN  //**4PS.n (db, 16-06-11:M26790)
        EXIT;

      "Bin Code" := '';
      IF "Drop Shipment" THEN
        EXIT;

      //IF ("Location Code" <> '') AND ("No." <> '') THEN BEGIN  //**4PS.o
      IF ("Location Code" <> '') AND ("Item No."+"Trade Item" <> '') THEN BEGIN  //**4PS.n (db, 16-06-11:M26790)
        GetLocation("Location Code");
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN BEGIN
          //WMSManagement.GetDefaultBin("No.","Variant Code","Location Code","Bin Code");  //**4PS.o
          //**4PS.sn
          "Bin Code" := WMSManagement.GetDefaultBinLocation(
            "Job No.","Service Order No.","Location Code","Item No.","Variant Code",TRUE);  //db, 30-03-11
          //**4PS.en
          HandleDedicatedBin(FALSE);
        END;
      END;
    END;

    PROCEDURE IsInbound@75() : Boolean;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote,"Document Type"::"Blanket Order":
          EXIT("Quantity (Base)" > 0);
        "Document Type"::"Return Order","Document Type"::"Credit Memo":
          EXIT("Quantity (Base)" < 0);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE HandleDedicatedBin@71(IssueWarning@1000 : Boolean);
    VAR
      WhseIntegrationMgt@1001 : Codeunit 7317;
    BEGIN
      IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
        WhseIntegrationMgt.CheckIfBinDedicatedOnSrcDoc("Location Code","Bin Code",IssueWarning);
    END;

    PROCEDURE CrossReferenceNoLookUp@51();
    VAR
      ItemCrossReference@1000 : Record 5717;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        GetPurchHeader;
        ItemCrossReference.RESET;
        ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
        ItemCrossReference.SETFILTER(
          "Cross-Reference Type",'%1|%2',
          ItemCrossReference."Cross-Reference Type"::Vendor,
          ItemCrossReference."Cross-Reference Type"::" ");
        ItemCrossReference.SETFILTER("Cross-Reference Type No.",'%1|%2',PurchHeader."Buy-from Vendor No.",'');
        IF PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK THEN BEGIN
          VALIDATE("Cross-Reference No.",ItemCrossReference."Cross-Reference No.");
          PurchPriceCalcMgt.FindPurchLinePrice(PurchHeader,Rec,FIELDNO("Cross-Reference No."));
          PurchPriceCalcMgt.FindPurchLineLineDisc(PurchHeader,Rec);
          VALIDATE("Direct Unit Cost");
        END;
      END;
    END;

    PROCEDURE ItemExists@52(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      Item2@1001 : Record 27;
    BEGIN
      IF Type = Type::Item THEN
        IF NOT Item2.GET(ItemNo) THEN
          EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetAbsMin@56(QtyToHandle@1000 : Decimal;QtyHandled@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(QtyHandled) < ABS(QtyToHandle) THEN
        EXIT(QtyHandled);

      EXIT(QtyToHandle);
    END;

    LOCAL PROCEDURE CheckApplToItemLedgEntry@53() : Code[10];
    VAR
      ItemLedgEntry@1000 : Record 32;
      ApplyRec@1005 : Record 339;
      ItemTrackingLines@1006 : Page 6510;
      ReturnedQty@1003 : Decimal;
      RemainingtobeReturnedQty@1004 : Decimal;
    BEGIN
      IF "Appl.-to Item Entry" = 0 THEN
        EXIT;

      IF "Receipt No." <> '' THEN
        EXIT;

      TESTFIELD(Type,Type::Item);
      TESTFIELD(Quantity);
      IF Signed(Quantity) > 0 THEN
        TESTFIELD("Prod. Order No.",'');
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        IF Quantity < 0 THEN
          FIELDERROR(Quantity,Text029);
      END ELSE BEGIN
        IF Quantity > 0 THEN
          FIELDERROR(Quantity,Text030);
      END;
      ItemLedgEntry.GET("Appl.-to Item Entry");
      ItemLedgEntry.TESTFIELD(Positive,TRUE);
      IF ItemLedgEntry.TrackingExists THEN
        ERROR(Text040,ItemTrackingLines.CAPTION,FIELDCAPTION("Appl.-to Item Entry"));

      ItemLedgEntry.TESTFIELD("Item No.","No.");
      ItemLedgEntry.TESTFIELD("Variant Code","Variant Code");

      // Track qty in both alternative and base UOM for better error checking and reporting
      IF ABS("Quantity (Base)") > ItemLedgEntry.Quantity THEN
        ERROR(
          Text042,
          ItemLedgEntry.Quantity,ItemLedgEntry.FIELDCAPTION("Document No."),
          ItemLedgEntry."Document No.");

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        IF ABS("Outstanding Qty. (Base)") > ItemLedgEntry."Remaining Quantity" THEN BEGIN
          ReturnedQty := ApplyRec.Returned(ItemLedgEntry."Entry No.");
          RemainingtobeReturnedQty := ItemLedgEntry.Quantity - ReturnedQty;
          IF NOT ("Qty. per Unit of Measure" = 0) THEN BEGIN
            ReturnedQty := ROUND(ReturnedQty / "Qty. per Unit of Measure",0.00001);
            RemainingtobeReturnedQty := ROUND(RemainingtobeReturnedQty / "Qty. per Unit of Measure",0.00001);
          END;

          IF ((("Qty. per Unit of Measure" = 0) AND (RemainingtobeReturnedQty < ABS("Outstanding Qty. (Base)"))) OR
              (("Qty. per Unit of Measure" <> 0) AND (RemainingtobeReturnedQty < ABS("Outstanding Quantity"))))
          THEN
            ERROR(
              Text035,
              ReturnedQty,ItemLedgEntry.FIELDCAPTION("Document No."),
              ItemLedgEntry."Document No.",RemainingtobeReturnedQty);
        END;

      EXIT(ItemLedgEntry."Location Code");
    END;

    PROCEDURE CalcPrepaymentToDeduct@59();
    BEGIN
      IF ("Qty. to Invoice" <> 0) AND ("Prepmt. Amt. Inv." <> 0) THEN BEGIN
        GetPurchHeader;
        IF ("Prepayment %" = 100) AND NOT IsFinalInvoice THEN
          "Prepmt Amt to Deduct" := GetLineAmountToHandle("Qty. to Invoice")
        ELSE
          "Prepmt Amt to Deduct" :=
            ROUND(
              ("Prepmt. Amt. Inv." - "Prepmt Amt Deducted") *
              "Qty. to Invoice" / (Quantity - "Quantity Invoiced"),Currency."Amount Rounding Precision")
      END ELSE
        "Prepmt Amt to Deduct" := 0
    END;

    PROCEDURE IsFinalInvoice@116() : Boolean;
    BEGIN
      EXIT("Qty. to Invoice" = Quantity - "Quantity Invoiced");
    END;

    PROCEDURE GetLineAmountToHandle@117(QtyToHandle@1002 : Decimal) : Decimal;
    VAR
      LineAmount@1001 : Decimal;
      LineDiscAmount@1000 : Decimal;
    BEGIN
      IF "Line Discount %" = 100 THEN
        EXIT(0);

      GetPurchHeader;
      LineAmount := ROUND(QtyToHandle * "Direct Unit Cost",Currency."Amount Rounding Precision");
      //**4PS.sn PS 12-06-13
      GetPurchHeader;
      IF PurchHeader."Amounts only" THEN
        LineDiscAmount := ROUND("Line Discount Amount" * QtyToHandle,Currency."Amount Rounding Precision")
      ELSE
      //**4PS.en
        LineDiscAmount := ROUND("Line Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision");
      EXIT(LineAmount - LineDiscAmount);
    END;

    PROCEDURE JobTaskIsSet@61() : Boolean;
    BEGIN
      EXIT(("Job No." <> '') AND ("Job Task No." <> '') AND (Type IN [Type::"G/L Account",Type::Item]));
    END;

    PROCEDURE CreateTempJobJnlLine@55(GetPrices@1001 : Boolean);
    BEGIN
      GetPurchHeader;
      CLEAR(JobJnlLine);
      JobJnlLine.DontCheckStdCost;
      JobJnlLine.VALIDATE("Job No.","Job No.");
      JobJnlLine.VALIDATE("Job Task No.","Job Task No.");
      JobJnlLine.VALIDATE("Posting Date",PurchHeader."Posting Date");
      JobJnlLine.SetCurrencyFactor("Job Currency Factor");
      IF Type = Type::"G/L Account" THEN
        JobJnlLine.VALIDATE(Type,JobJnlLine.Type::"G/L Account")
      ELSE
        JobJnlLine.VALIDATE(Type,JobJnlLine.Type::Item);
      JobJnlLine.VALIDATE("No.","No.");
      JobJnlLine.VALIDATE(Quantity,Quantity);
      JobJnlLine.VALIDATE("Variant Code","Variant Code");
      JobJnlLine.VALIDATE("Unit of Measure Code","Unit of Measure Code");

      IF NOT GetPrices THEN BEGIN
        IF xRec."Line No." <> 0 THEN BEGIN
          JobJnlLine."Unit Cost" := xRec."Unit Cost";
          JobJnlLine."Unit Cost (LCY)" := xRec."Unit Cost (LCY)";
          JobJnlLine."Unit Price" := xRec."Job Unit Price";
          JobJnlLine."Line Amount" := xRec."Job Line Amount";
          JobJnlLine."Line Discount %" := xRec."Job Line Discount %";
          JobJnlLine."Line Discount Amount" := xRec."Job Line Discount Amount";
        END ELSE BEGIN
          JobJnlLine."Unit Cost" := "Unit Cost";
          JobJnlLine."Unit Cost (LCY)" := "Unit Cost (LCY)";
          JobJnlLine."Unit Price" := "Job Unit Price";
          JobJnlLine."Line Amount" := "Job Line Amount";
          JobJnlLine."Line Discount %" := "Job Line Discount %";
          JobJnlLine."Line Discount Amount" := "Job Line Discount Amount";
        END;
        JobJnlLine.VALIDATE("Unit Price");
      END ELSE
        JobJnlLine.VALIDATE("Unit Cost (LCY)","Unit Cost (LCY)");
    END;

    PROCEDURE UpdateJobPrices@69();
    VAR
      PurchRcptLine@1000 : Record 121;
    BEGIN
      IF "Receipt No." = '' THEN BEGIN
        "Job Unit Price" := JobJnlLine."Unit Price";
        "Job Total Price" := JobJnlLine."Total Price";
        "Job Unit Price (LCY)" := JobJnlLine."Unit Price (LCY)";
        "Job Total Price (LCY)" := JobJnlLine."Total Price (LCY)";
        "Job Line Amount (LCY)" := JobJnlLine."Line Amount (LCY)";
        "Job Line Disc. Amount (LCY)" := JobJnlLine."Line Discount Amount (LCY)";
        "Job Line Amount" := JobJnlLine."Line Amount";
        "Job Line Discount %" := JobJnlLine."Line Discount %";
        "Job Line Discount Amount" := JobJnlLine."Line Discount Amount";
      END ELSE BEGIN
        PurchRcptLine.GET("Receipt No.","Receipt Line No.");
        "Job Unit Price" := PurchRcptLine."Job Unit Price";
        "Job Total Price" := PurchRcptLine."Job Total Price";
        "Job Unit Price (LCY)" := PurchRcptLine."Job Unit Price (LCY)";
        "Job Total Price (LCY)" := PurchRcptLine."Job Total Price (LCY)";
        "Job Line Amount (LCY)" := PurchRcptLine."Job Line Amount (LCY)";
        "Job Line Disc. Amount (LCY)" := PurchRcptLine."Job Line Disc. Amount (LCY)";
        "Job Line Amount" := PurchRcptLine."Job Line Amount";
        "Job Line Discount %" := PurchRcptLine."Job Line Discount %";
        "Job Line Discount Amount" := PurchRcptLine."Job Line Discount Amount";
      END;
    END;

    PROCEDURE JobSetCurrencyFactor@54();
    BEGIN
      GetPurchHeader;
      CLEAR(JobJnlLine);
      JobJnlLine.VALIDATE("Job No.","Job No.");
      JobJnlLine.VALIDATE("Job Task No.","Job Task No.");
      JobJnlLine.VALIDATE("Posting Date",PurchHeader."Posting Date");
      "Job Currency Factor" := JobJnlLine."Currency Factor";
    END;

    PROCEDURE SetUpdateFromVAT@58(UpdateFromVAT2@1000 : Boolean);
    BEGIN
      UpdateFromVAT := UpdateFromVAT2;
    END;

    PROCEDURE InitQtyToReceive2@57();
    BEGIN
      //**4PS.s0
      //"Qty. to Receive" := "Outstanding Quantity";
      //"Qty. to Receive (Base)" := "Outstanding Qty. (Base)";
      //**4PS.eo
      InitQtyToReceiveAdvanced4PS; //**4PS.n

      "Qty. to Invoice" := MaxQtyToInvoice;
      "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
      "VAT Difference" := 0;

      CalcInvDiscToInvoice;

      CalcPrepaymentToDeduct;

      IF "Job Planning Line No." <> 0 THEN
        VALIDATE("Job Planning Line No.");
    END;

    PROCEDURE ClearQtyIfBlank@87();
    BEGIN
      IF "Document Type" = "Document Type"::Order THEN BEGIN
        GetPurchSetup;
        IF PurchSetup."Default Qty. to Receive" = PurchSetup."Default Qty. to Receive"::Blank THEN BEGIN
          "Qty. to Receive" := 0;
          "Qty. to Receive (Base)" := 0;
        END;
      END;
    END;

    PROCEDURE ShowLineComments@62();
    VAR
      PurchCommentLine@1000 : Record 43;
      PurchCommentSheet@1001 : Page 66;
    BEGIN
      TESTFIELD("Document No.");
      TESTFIELD("Line No.");
      PurchCommentLine.SETRANGE("Document Type","Document Type");
      PurchCommentLine.SETRANGE("No.","Document No.");
      PurchCommentLine.SETRANGE("Document Line No.","Line No.");
      PurchCommentSheet.SETTABLEVIEW(PurchCommentLine);
      PurchCommentSheet.RUNMODAL;
    END;

    PROCEDURE LineCommentPresent@1210190017() : Boolean;
    VAR
      PurchCommentLine@1210190000 : Record 43;
    BEGIN
      //**4PS 22575
      EXIT(PurchCommentLine.CommentPresent("Document Type", "Document No.", "Line No."));
    END;

    PROCEDURE SetDefaultQuantity@63();
    BEGIN
      GetPurchSetup;
      //**4PS.so
      //IF PurchSetup."Default Qty. to Receive" = PurchSetup."Default Qty. to Receive"::Blank THEN BEGIN
      //**4PS.eo
      IF NOT DirectReceipt THEN BEGIN //**4PS.n
        IF ("Document Type" = "Document Type"::Order) OR ("Document Type" = "Document Type"::Quote) THEN BEGIN
          "Qty. to Receive" := 0;
          "Qty. to Receive (Base)" := 0;
          //**4PS.so
          //"Qty. to Invoice" := 0;
          //"Qty. to Invoice (Base)" := 0;
          //**4PS.eo
          //**4PS.sn
          "Qty. to Invoice" := MaxQtyToInvoice;
          "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
          //**4PS.en
        END;
        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
          "Return Qty. to Ship" := 0;
          "Return Qty. to Ship (Base)" := 0;
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
        END;
      END;
    END;

    PROCEDURE UpdatePrePaymentAmounts@65();
    VAR
      ReceiptLine@1000 : Record 121;
      PurchOrderLine@1001 : Record 39;
      PurchOrderHeader@1002 : Record 38;
    BEGIN
      IF ("Document Type" <> "Document Type"::Invoice) OR ("Prepayment %" = 0) THEN
        EXIT;

      IF NOT ReceiptLine.GET("Receipt No.","Receipt Line No.") THEN BEGIN
        "Prepmt Amt to Deduct" := 0;
        "Prepmt VAT Diff. to Deduct" := 0;
      END ELSE
        IF PurchOrderLine.GET(PurchOrderLine."Document Type"::Order,ReceiptLine."Order No.",ReceiptLine."Order Line No.") THEN BEGIN
          IF ("Prepayment %" = 100) AND (Quantity <> PurchOrderLine.Quantity - PurchOrderLine."Quantity Invoiced") THEN
            "Prepmt Amt to Deduct" := "Line Amount"
          ELSE
            "Prepmt Amt to Deduct" :=
              ROUND((PurchOrderLine."Prepmt. Amt. Inv." - PurchOrderLine."Prepmt Amt Deducted") *
                Quantity / (PurchOrderLine.Quantity - PurchOrderLine."Quantity Invoiced"),Currency."Amount Rounding Precision");
          "Prepmt VAT Diff. to Deduct" := "Prepayment VAT Difference" - "Prepmt VAT Diff. Deducted";
          PurchOrderHeader.GET(PurchOrderHeader."Document Type"::Order,PurchOrderLine."Document No.");
        END ELSE BEGIN
          "Prepmt Amt to Deduct" := 0;
          "Prepmt VAT Diff. to Deduct" := 0;
        END;

      GetPurchHeader;
      PurchHeader.TESTFIELD("Prices Including VAT",PurchOrderHeader."Prices Including VAT");
      IF PurchHeader."Prices Including VAT" THEN BEGIN
        "Prepmt. Amt. Incl. VAT" := "Prepmt Amt to Deduct";
        "Prepayment Amount" :=
          ROUND(
            "Prepmt Amt to Deduct" / (1 + ("Prepayment VAT %" / 100)),
            Currency."Amount Rounding Precision");
      END ELSE BEGIN
        "Prepmt. Amt. Incl. VAT" :=
          ROUND(
            "Prepmt Amt to Deduct" * (1 + ("Prepayment VAT %" / 100)),
            Currency."Amount Rounding Precision");
        "Prepayment Amount" := "Prepmt Amt to Deduct";
      END;
      "Prepmt. Line Amount" := "Prepmt Amt to Deduct";
      "Prepmt. Amt. Inv." := "Prepmt. Line Amount";
      "Prepmt. VAT Base Amt." := "Prepayment Amount";
      "Prepmt. Amount Inv. Incl. VAT" := "Prepmt. Amt. Incl. VAT";
      "Prepmt Amt Deducted" := 0;
    END;

    PROCEDURE SetVendorItemNo@64();
    BEGIN
      GetItem;
      ItemVend.INIT;
      ItemVend."Vendor No." := "Buy-from Vendor No.";
      ItemVend."Variant Code" := "Variant Code";
      Item.FindItemVend(ItemVend,"Location Code");
      VALIDATE("Vendor Item No.",ItemVend."Vendor Item No.");
    END;

    PROCEDURE ZeroAmountLine@66(QtyType@1000 : 'General,Invoicing,Shipping';PurchHeader@1100525001 : Record 38;PurchLine@1100525000 : Record 39) : Boolean;
    BEGIN
      WITH PurchLine DO BEGIN //**4PS.n //Standard bugfix
        IF Type = Type::" " THEN
          EXIT(TRUE);
        //**4PS.sn
        IF PurchHeader."Amounts only" THEN BEGIN
          IF ("Line Amount" = 0) AND ("Amount Including VAT" = 0) THEN
            EXIT(TRUE);
          CASE QtyType OF
            QtyType::Invoicing:
              IF "Amnt. to Invoice" = 0 THEN
                EXIT(TRUE);
            QtyType::Shipping:
              IF "Amnt. to Receive" = 0 THEN
                EXIT(TRUE);
          END;
        END ELSE BEGIN
        //**4PS.en
          IF Quantity = 0 THEN
            EXIT(TRUE);
          //IF "Direct Unit Cost" = 0 THEN //**4PS.o
          IF (("Direct Unit Cost" = 0) AND ("Amount Including VAT" = 0)) OR //**4PS.n
             ("Line Discount %" = 100) THEN //**4PS.n
            EXIT(TRUE);
          IF QtyType = QtyType::Invoicing THEN
            IF "Qty. to Invoice" = 0 THEN
              EXIT(TRUE);
      //**4PS.sn
        END;
      END;
      //**4PS.en
      EXIT(FALSE);
    END;

    PROCEDURE FilterLinesWithItemToPlan@70(VAR Item@1000 : Record 27;DocumentType@1001 : Option;Inventory@1100525000 : Boolean);
    BEGIN
      RESET;
      //SETCURRENTKEY("Document Type",Type,"No.","Variant Code","Drop Shipment","Location Code","Expected Receipt Date"); //**4PS.o
      SETRANGE("Document Type",DocumentType);

      //**4PS.so
      //SETRANGE(Type,Type::Item);
      //SETRANGE("No.",Item."No.");
      //**4PS.eo
      //**4PS.sn
      IF Inventory THEN
        SETRANGE(Type,Type::Item)
      ELSE BEGIN
        SETRANGE(Type,Type::"G/L Account");
        //db.sn, 25-07-14: C009041
        SETFILTER("Job No.",Item.GETFILTER("Project Filter"));
        SETFILTER("Service Order No.",Item.GETFILTER("Service Order Filter"));
        IF (Item.GETFILTER("Project Filter") = '') AND (Item.GETFILTER("Service Order Filter") = '') THEN
          SETFILTER(Type, '%1|%2', Type::Item,Type::"G/L Account");  //db, 25-08-14: T005247
        //db.en, 25-07-14: C009041
      END;
      SETRANGE("Item No.",Item."No.");
      //**4PS.en
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
      SETFILTER("Expected Receipt Date",Item.GETFILTER("Date Filter"));
      SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      SETFILTER("Outstanding Qty. (Base)",'<>0');
    END;

    PROCEDURE FindLinesWithItemToPlan@68(VAR Item@1000 : Record 27;DocumentType@1001 : Option) : Boolean;
    BEGIN
      //FilterLinesWithItemToPlan(Item,DocumentType); //**4PS.o
      FilterLinesWithItemToPlan(Item,DocumentType,TRUE); //**4PS.n
      EXIT(FIND('-'));
    END;

    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record 27;DocumentType@1001 : Option) : Boolean;
    BEGIN
      //FilterLinesWithItemToPlan(Item,DocumentType); //**4PS.o
      FilterLinesWithItemToPlan(Item,DocumentType,TRUE); //**4PS.n
      EXIT(NOT ISEMPTY);
    END;

    PROCEDURE GetVPGInvRoundAcc@72(VAR PurchHeader@1002 : Record 38) : Code[20];
    VAR
      Vendor@1000 : Record 23;
      VendorPostingGroup@1001 : Record 93;
    BEGIN
      GetPurchSetup;
      IF PurchSetup."Invoice Rounding" THEN
        IF Vendor.GET(PurchHeader."Pay-to Vendor No.") THEN
          VendorPostingGroup.GET(Vendor."Vendor Posting Group");

      EXIT(VendorPostingGroup."Invoice Rounding Account");
    END;

    LOCAL PROCEDURE CheckReceiptRelation@94();
    VAR
      PurchRcptLine@1001 : Record 121;
      "<DC>"@1003 : Integer;
      PurchDocMgt@1002 : Codeunit 6085709;
      "</DC>"@1000 : Integer;
      SignFactor@1100525000 : Integer;
      MaxQuanToInvoice@1100525002 : Decimal;
      MinQuanToInvoice@1100525001 : Decimal;
    BEGIN
      // <DC>
      IF IsDocumentCaptureActive THEN //**4PS.n CALL C025054
        IF PurchDocMgt.CheckOrderRelation(Rec) THEN
          EXIT;
      // </DC>
      PurchRcptLine.GET("Receipt No.","Receipt Line No.");
      //**4PS C008671
      //IF (Quantity * PurchRcptLine."Qty. Rcd. Not Invoiced") < 0 THEN //**4PS.o
      //**4PS.sn
      IF "Document Type" = "Document Type"::"Credit Memo" THEN
        SignFactor := -1
      ELSE
        SignFactor := 1;
      IF (Quantity * PurchRcptLine."Qty. Rcd. Not Invoiced" * SignFactor) < 0 THEN
      //**4PS.en C008671
        FIELDERROR("Qty. to Invoice",Text051);
      //**4PS.so C011651
      //IF ABS(Quantity) > ABS(PurchRcptLine."Qty. Rcd. Not Invoiced") THEN
      //  ERROR(Text052,PurchRcptLine."Document No.");
      //**4PS.eo
      //**4PS.sn C011651
      IF "Document Type" = "Document Type"::Invoice THEN BEGIN
        IF PurchRcptLine.Quantity > 0 THEN BEGIN
          MinQuanToInvoice := -PurchRcptLine."Quantity Invoiced";
          MaxQuanToInvoice := PurchRcptLine."Qty. Rcd. Not Invoiced";
        END ELSE BEGIN
          MinQuanToInvoice := PurchRcptLine."Qty. Rcd. Not Invoiced";
          MaxQuanToInvoice := -PurchRcptLine."Quantity Invoiced";
        END;
      END ELSE BEGIN
        IF PurchRcptLine.Quantity < 0 THEN BEGIN
          MinQuanToInvoice := PurchRcptLine."Quantity Invoiced";
          MaxQuanToInvoice := -PurchRcptLine."Qty. Rcd. Not Invoiced";
        END ELSE BEGIN
          MinQuanToInvoice := -PurchRcptLine."Qty. Rcd. Not Invoiced";
          MaxQuanToInvoice := PurchRcptLine."Quantity Invoiced";
        END;
      END;

      //>>140203 SYM988

      //First block disabled due to lack of NAS compability
      //IF (Quantity < MinQuanToInvoice) OR (Quantity > MaxQuanToInvoice) THEN
      //  IF NOT CONFIRM(STRSUBSTNO(
      //    Text11012002,
      //    "Receipt No.",
      //    "Receipt Line No.",
      //    MinQuanToInvoice,MaxQuanToInvoice),FALSE)
      //  THEN BEGIN
      //    Quantity := xRec.Quantity;
      //    EXIT;
      //  END ELSE
      //    CheckReceipt(FIELDNO(Quantity));

      //Correction to handle Job Cue
      IF (Quantity < MinQuanToInvoice) OR (Quantity > MaxQuanToInvoice) THEN BEGIN
        IF GUIALLOWED THEN BEGIN
          IF NOT CONFIRM(STRSUBSTNO(
            Text11012002,
            "Receipt No.",
            "Receipt Line No.",
            MinQuanToInvoice,MaxQuanToInvoice),FALSE)
          THEN BEGIN
            Quantity := xRec.Quantity;
            EXIT;
          END ELSE
          CheckReceiptRelationAmount(FIELDNO(Quantity));

        END ELSE BEGIN //This confirms dialog when run on NAS
          CheckReceiptRelationAmount(FIELDNO(Quantity));
        END;
      END;
      //<<140203 SYM988
      //**4PS.en
    END;

    LOCAL PROCEDURE CheckRetShptRelation@74();
    VAR
      ReturnShptLine@1000 : Record 6651;
    BEGIN
      ReturnShptLine.GET("Return Shipment No.","Return Shipment Line No.");
      IF (Quantity * (ReturnShptLine.Quantity - ReturnShptLine."Quantity Invoiced")) < 0 THEN
        FIELDERROR("Qty. to Invoice",Text053);
      IF ABS(Quantity) > ABS(ReturnShptLine.Quantity - ReturnShptLine."Quantity Invoiced") THEN
        ERROR(Text054,ReturnShptLine."Document No.");
    END;

    LOCAL PROCEDURE VerifyItemLineDim@73();
    BEGIN
      IF ("Dimension Set ID" <> xRec."Dimension Set ID") AND (Type = Type::Item) THEN
        IF ("Qty. Rcd. Not Invoiced" <> 0) OR ("Return Qty. Shipped Not Invd." <> 0) THEN
          IF NOT CONFIRM(Text049,TRUE,TABLECAPTION) THEN
            ERROR(Text050);
    END;

    PROCEDURE InitType@22();
    BEGIN
      IF "Document No." <> '' THEN BEGIN
        PurchHeader.GET("Document Type","Document No.");
        IF (PurchHeader.Status = PurchHeader.Status::Released) AND
           (xRec.Type IN [xRec.Type::Item,xRec.Type::"Fixed Asset"])
        THEN
          Type := Type::" "
        ELSE
          Type := xRec.Type;
      END;
    END;

    LOCAL PROCEDURE CheckWMS@76();
    BEGIN
      IF CurrFieldNo <> 0 THEN
        CheckLocationOnWMS;
    END;

    PROCEDURE CheckLocationOnWMS@79();
    VAR
      DialogText@1001 : Text;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        DialogText := Text033;
        IF "Quantity (Base)" <> 0 THEN
          CASE "Document Type" OF
            "Document Type"::Invoice:
              IF "Receipt No." = '' THEN
                IF Location.GET("Location Code") AND Location."Directed Put-away and Pick" THEN BEGIN
                  DialogText += Location.GetRequirementText(Location.FIELDNO("Require Receive"));
                  ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
                END;
            "Document Type"::"Credit Memo":
              IF "Return Shipment No." = '' THEN
                IF Location.GET("Location Code") AND Location."Directed Put-away and Pick" THEN BEGIN
                  DialogText += Location.GetRequirementText(Location.FIELDNO("Require Shipment"));
                  ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
                END;
          END;
      END;
    END;

    PROCEDURE IsServiceItem@77() : Boolean;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT(FALSE);
      IF "No." = '' THEN
        EXIT(FALSE);
      GetItem;
      EXIT(Item.Type = Item.Type::Service);
    END;

    LOCAL PROCEDURE CheckReservationDateConflict@1502(DateFieldNo@1000 : Integer);
    VAR
      ReservEntry@1002 : Record 337;
      PurchLineReserve@1001 : Codeunit 99000834;
    BEGIN
      IF CurrFieldNo = DateFieldNo THEN
        IF PurchLineReserve.FindReservEntry(Rec,ReservEntry) THEN BEGIN
          ReservEntry.SETFILTER("Shipment Date",'<%1',"Expected Receipt Date");
          IF NOT ReservEntry.ISEMPTY THEN
            IF NOT CONFIRM(DataConflictQst) THEN
              ERROR('');
        END;
    END;

    LOCAL PROCEDURE ReservEntryExist@78() : Boolean;
    VAR
      NewReservEntry@1000 : Record 337;
    BEGIN
      ReservePurchLine.FilterReservFor(NewReservEntry,Rec);
      NewReservEntry.SETRANGE("Reservation Status",NewReservEntry."Reservation Status"::Reservation,
        NewReservEntry."Reservation Status"::Tracking);

      EXIT(NOT NewReservEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE ValidateReturnReasonCode@99(CallingFieldNo@1000 : Integer);
    BEGIN
      EXIT; //**4PS.n

      IF CallingFieldNo = 0 THEN
        EXIT;
      IF "Return Reason Code" = '' THEN
        UpdateDirectUnitCost(CallingFieldNo);

      IF ReturnReason.GET("Return Reason Code") THEN BEGIN
        IF (CallingFieldNo <> FIELDNO("Location Code")) AND (ReturnReason."Default Location Code" <> '') THEN
          VALIDATE("Location Code",ReturnReason."Default Location Code");
        IF ReturnReason."Inventory Value Zero" THEN
          VALIDATE("Direct Unit Cost",0)
        ELSE
          UpdateDirectUnitCost(CallingFieldNo);
      END;
    END;

    LOCAL PROCEDURE UpdateDimensionsFromJobTask@60();
    VAR
      DimSetArrID@1000 : ARRAY [10] OF Integer;
      DimValue1@1001 : Code[20];
      DimValue2@1002 : Code[20];
    BEGIN
      DimSetArrID[1] := "Dimension Set ID";
      DimSetArrID[2] := DimMgt.CreateDimSetFromJobTaskDim("Job No.","Job Task No.",DimValue1,DimValue2);
      "Shortcut Dimension 1 Code" := DimValue1;
      "Shortcut Dimension 2 Code" := DimValue2;
      "Dimension Set ID" := DimMgt.GetCombinedDimensionSetID(DimSetArrID,DimValue1,DimValue2);
    END;

    LOCAL PROCEDURE UpdateItemCrossRef@82();
    BEGIN
      DistIntegration.EnterPurchaseItemCrossRef(Rec);
      UpdateICPartner;
    END;

    LOCAL PROCEDURE UpdateItemReference@85();
    BEGIN
      IF Type <> Type::Item THEN
        EXIT;

      UpdateItemCrossRef;
      IF "Cross-Reference No." = '' THEN
        SetVendorItemNo
      ELSE
        VALIDATE("Vendor Item No.","Cross-Reference No.");
    END;

    LOCAL PROCEDURE UpdateICPartner@81();
    VAR
      ICPartner@1000 : Record 413;
      ItemCrossReference@1001 : Record 5717;
    BEGIN
      IF PurchHeader."Send IC Document" AND
         (PurchHeader."IC Direction" = PurchHeader."IC Direction"::Outgoing)
      THEN
        CASE Type OF
          Type::" ",Type::"Charge (Item)":
            BEGIN
              "IC Partner Ref. Type" := Type;
              "IC Partner Reference" := "No.";
            END;
          Type::"G/L Account":
            BEGIN
              "IC Partner Ref. Type" := Type;
              "IC Partner Reference" := GLAcc."Default IC Partner G/L Acc. No";
            END;
          Type::Item:
            BEGIN
              ICPartner.GET(PurchHeader."Buy-from IC Partner Code");
              CASE ICPartner."Outbound Purch. Item No. Type" OF
                ICPartner."Outbound Purch. Item No. Type"::"Common Item No.":
                  VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Common Item No.");
                ICPartner."Outbound Purch. Item No. Type"::"Internal No.",
                ICPartner."Outbound Purch. Item No. Type"::"Cross Reference":
                  BEGIN
                    ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Vendor);
                    ItemCrossReference.SETRANGE("Cross-Reference Type No.","Buy-from Vendor No.");
                    ItemCrossReference.SETRANGE("Item No.","No.");
                    ItemCrossReference.SETRANGE("Variant Code","Variant Code");
                    ItemCrossReference.SETRANGE("Unit of Measure","Unit of Measure Code");
                    IF ItemCrossReference.FINDFIRST THEN BEGIN
                      VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Cross Reference");
                      "IC Partner Reference" := ItemCrossReference."Cross-Reference No.";
                    END ELSE BEGIN
                      "IC Partner Ref. Type" := "IC Partner Ref. Type"::Item;
                      "IC Partner Reference" := "No.";
                    END;
                  END;
                ICPartner."Outbound Purch. Item No. Type"::"Vendor Item No.":
                  BEGIN
                    "IC Partner Ref. Type" := "IC Partner Ref. Type"::"Vendor Item No.";
                    "IC Partner Reference" := "Vendor Item No.";
                  END;
              END;
            END;
          Type::"Fixed Asset":
            BEGIN
              "IC Partner Ref. Type" := "IC Partner Ref. Type"::" ";
              "IC Partner Reference" := '';
            END;
        END;
    END;

    LOCAL PROCEDURE CalcTotalAmtToAssign@84(TotalQtyToAssign@1000 : Decimal) TotalAmtToAssign : Decimal;
    BEGIN
      TotalAmtToAssign := ("Line Amount" - "Inv. Discount Amount") * TotalQtyToAssign / Quantity;

      IF PurchHeader."Prices Including VAT" THEN
        TotalAmtToAssign := TotalAmtToAssign / (1 + "VAT %" / 100) - "VAT Difference";

      TotalAmtToAssign := ROUND(TotalAmtToAssign,Currency."Amount Rounding Precision");
    END;

    PROCEDURE HasTypeToFillMandatotyFields@103() : Boolean;
    BEGIN
      EXIT(Type <> Type::" ");
    END;

    PROCEDURE GetDeferralAmount@105() DeferralAmount : Decimal;
    BEGIN
      IF "VAT Base Amount" <> 0 THEN
        DeferralAmount := "VAT Base Amount"
      ELSE
        DeferralAmount := "Line Amount" - "Inv. Discount Amount";
    END;

    LOCAL PROCEDURE UpdateDeferralAmounts@104();
    VAR
      DeferralPostDate@1000 : Date;
      AdjustStartDate@1001 : Boolean;
    BEGIN
      GetPurchHeader;
      DeferralPostDate := PurchHeader."Posting Date";
      AdjustStartDate := TRUE;
      IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
        IF "Returns Deferral Start Date" = 0D THEN
          "Returns Deferral Start Date" := PurchHeader."Posting Date";
        DeferralPostDate := "Returns Deferral Start Date";
        AdjustStartDate := FALSE;
      END;

      DeferralUtilities.RemoveOrSetDeferralSchedule(
        "Deferral Code",DeferralUtilities.GetPurchDeferralDocType,'','',
        "Document Type","Document No.","Line No.",
        GetDeferralAmount,DeferralPostDate,Description,PurchHeader."Currency Code",AdjustStartDate);
    END;

    PROCEDURE ShowDeferrals@108(PostingDate@1000 : Date;CurrencyCode@1001 : Code[10]) : Boolean;
    BEGIN
      EXIT(DeferralUtilities.OpenLineScheduleEdit(
          "Deferral Code",DeferralUtilities.GetPurchDeferralDocType,'','',
          "Document Type","Document No.","Line No.",
          GetDeferralAmount,PostingDate,Description,CurrencyCode));
    END;

    LOCAL PROCEDURE InitDeferralCode@112();
    BEGIN
      IF "Document Type" IN
         ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::"Credit Memo","Document Type"::"Return Order"]
      THEN
        CASE Type OF
          Type::"G/L Account":
            VALIDATE("Deferral Code",GLAcc."Default Deferral Template Code");
          Type::Item:
            VALIDATE("Deferral Code",Item."Default Deferral Template Code");
        END;
    END;

    PROCEDURE DefaultDeferralCode@110();
    BEGIN
      CASE Type OF
        Type::"G/L Account":
          BEGIN
            GLAcc.GET("No.");
            InitDeferralCode;
          END;
        Type::Item:
          BEGIN
            GetItem;
            InitDeferralCode;
          END;
      END;
    END;

    PROCEDURE IsCreditDocType@83() : Boolean;
    BEGIN
      EXIT("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]);
    END;

    LOCAL PROCEDURE TestReturnFieldsZero@86();
    BEGIN
      TESTFIELD("Return Qty. Shipped Not Invd.",0);
      TESTFIELD("Return Qty. Shipped",0);
      TESTFIELD("Return Shipment No.",'');
    END;

    PROCEDURE GetTempPurchLine@6504(lvPurchLine@1210190000 : Record 39);
    BEGIN
      //**4PS: this function can also be called from table 38 (function: RecreateLines)

      "Buy-from Vendor No." := lvPurchLine."Buy-from Vendor No."; //db, 07-10-14: C017713
      "Job No." := lvPurchLine."Job No.";
      "Main Project No." := lvPurchLine."Main Project No.";
      "Shortcut Dimension 1 Code" := lvPurchLine."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := lvPurchLine."Shortcut Dimension 2 Code";
      "Dimension Set ID" := lvPurchLine."Dimension Set ID";
      "Cost Component" := lvPurchLine."Cost Component";
      "Extension Contract" := lvPurchLine."Extension Contract";
      "Budget Adjustment" := lvPurchLine."Budget Adjustment";
      Element := lvPurchLine.Element;
      Level := lvPurchLine.Level;
      Chapter := lvPurchLine.Chapter;
      Paragraph := lvPurchLine.Paragraph;
      "Cost Type" := lvPurchLine."Cost Type";
      "Purchase Action" := lvPurchLine."Purchase Action";
      "Purchase Phase" := lvPurchLine."Purchase Phase";
      "Posting Date" := lvPurchLine."Posting Date";
      Description := lvPurchLine.Description;
      "Description 2" := lvPurchLine."Description 2";
      Quantity := lvPurchLine.Quantity;
      "Qty. per Unit of Measure" := lvPurchLine."Qty. per Unit of Measure";
      "Unit of Measure Code" := lvPurchLine."Unit of Measure Code";
      "Unit of Measure" := lvPurchLine."Unit of Measure";
      "Item No." := lvPurchLine."Item No.";
      "Basic Item" := lvPurchLine."Basic Item";
      "Trade Item" := lvPurchLine."Trade Item";
      Manufacturer := lvPurchLine.Manufacturer;
      "Vendor (Trade Item)" := lvPurchLine."Vendor (Trade Item)";
      "Vendor Item No." := lvPurchLine."Vendor Item No.";
      "Direct Unit Cost" := lvPurchLine."Direct Unit Cost";
      "Unit Cost (LCY)" := lvPurchLine."Unit Cost (LCY)";
      "Unit Price (LCY)" := lvPurchLine."Unit Price (LCY)";
      "Discount % (Item)" := lvPurchLine."Discount % (Item)";
      "Line Discount %" := lvPurchLine."Line Discount %";
      "Line Discount Amount" := lvPurchLine."Line Discount Amount"; //C016399
      "Price Agreement" := lvPurchLine."Price Agreement";
      "Receiving Company" := lvPurchLine."Receiving Company";
      "Plant Type" :=  lvPurchLine."Plant Type";
      "Plant No." :=  lvPurchLine."Plant No.";
      "Vendor Plant No." :=  lvPurchLine."Vendor Plant No.";
      "Plant Order No." :=  lvPurchLine."Plant Order No.";
      "Cost Component Plant" := lvPurchLine."Cost Component Plant";
      "Plant Location" :=  lvPurchLine."Plant Location";
      "Service Order No." := lvPurchLine."Service Order No.";
      "Base Service Order No." := lvPurchLine."Base Service Order No.";
      "Service Order Description" := lvPurchLine."Service Order Description";
      "Service Location No." := lvPurchLine."Service Location No.";
      "Service Contract No." := lvPurchLine."Service Contract No.";
      "Service Source Type" := lvPurchLine."Service Source Type";
      "Service Control Year" := lvPurchLine."Service Control Year";
      "Balance Excl. VAT" := lvPurchLine."Balance Excl. VAT";
      "Balance Incl. VAT" := lvPurchLine."Balance Incl. VAT";
      "Purchase Route Reference" := lvPurchLine."Purchase Route Reference";
      "Quote Selected" := lvPurchLine."Quote Selected";
      "Blanket Order No." := lvPurchLine."Blanket Order No.";
      "Blanket Order Line No." := lvPurchLine."Blanket Order Line No.";
      "Contract Type" := lvPurchLine."Contract Type";  //*23382
      "Estimate No." := lvPurchLine."Estimate No.";
      "Amnt. to Receive" := lvPurchLine."Amnt. to Receive";
      "Amnt. to Invoice" := lvPurchLine."Amnt. to Invoice";
      "Location Code" := lvPurchLine."Location Code";
      "Bin Code" := lvPurchLine."Bin Code";
      "Employee No." := lvPurchLine."Employee No.";
      "Return Reason Code" := lvPurchLine."Return Reason Code";
      "Rental Unit" := lvPurchLine."Rental Unit";
      "Wage Component" := lvPurchLine."Wage Component";
      VALIDATE(Text, lvPurchLine.Text);
      "Additional Cost (Service)" := lvPurchLine."Additional Cost (Service)";
      "Removal Contribution" := lvPurchLine."Removal Contribution";
      "Scheme Code" := lvPurchLine."Scheme Code";
      "Comments for Logistics" := lvPurchLine."Comments for Logistics";
      "Sales Price" := lvPurchLine."Sales Price";
      "Tender Paragraph" := lvPurchLine."Tender Paragraph";
      "Tender Paragraph Part" := lvPurchLine."Tender Paragraph Part";
      "Variant Code" := lvPurchLine."Variant Code"; // Variant, X0.71
      "Line Type" := lvPurchLine."Line Type"; // DP00006
      "Entity Type" := lvPurchLine."Entity Type";
      "FSC Type Code" := lvPurchLine."FSC Type Code";  //*DP00129
      "Shelf No." := lvPurchLine."Shelf No."; // C004108.n
      "Risc Coverage Amount (LCY)" := lvPurchLine."Risc Coverage Amount (LCY)" ;  //Call C005901.n
      "Release Risc Coverage (LCY)" := lvPurchLine."Release Risc Coverage (LCY)";  //Call C005901.n
      "No Project Stock" := lvPurchLine."No Project Stock";  //C021402.n
      "Allow Invoice Disc." := lvPurchLine."Allow Invoice Disc."; //C027348.n
      "Inv. Discount Amount" := lvPurchLine."Inv. Discount Amount"; //C027348.n

      CALCFIELDS("Job Description");
    END;

    PROCEDURE CheckReceiptRelationAmount@6505(FromFieldNo@1100525000 : Integer);
    VAR
      MaxAmount@1100525003 : Decimal;
      LineAmount@1100525002 : Decimal;
      MessTxt@1100525001 : Text[250];
    BEGIN
      //**4PS
      IF CurrFieldNo = 0 THEN
        EXIT;

      IF NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN
        EXIT;

      IF "Receipt No." = '' THEN
        EXIT;

      IF "Price Agreement" THEN
        EXIT;  //db, 11-07-08: C-013221

      //27452
      PurchSetup.GET;
      IF PurchSetup."No Check Inv.Amt. with Receipt" THEN
        EXIT;

      IF NOT ReceiptLine.GET("Receipt No.","Receipt Line No.") THEN
        EXIT;

      //13-07-09
      GetPurchHeader;
      IF ("Direct Unit Cost" <> ReceiptLine."Direct Unit Cost") AND
         NOT PurchHeader."Amounts only" THEN
      BEGIN
        IF NOT CONFIRM(STRSUBSTNO(
          Text11012023,
          "Receipt No.",
          "Receipt Line No.",
          ReceiptLine."Direct Unit Cost"),FALSE)
        THEN BEGIN
          "Direct Unit Cost" := xRec."Direct Unit Cost";
          "Line Amount" := xRec."Line Amount";
        END;
      END;
      //

      IF "Document Type" = "Document Type"::Invoice THEN BEGIN
        MaxAmount := ReceiptLine."Received (line)" - ReceiptLine."Invoiced (line)";
        MessTxt := Text11012010;
      END ELSE BEGIN
        IF ReceiptLine."Received (line)" < 0 THEN BEGIN
          MaxAmount := -(ReceiptLine."Received (line)" - ReceiptLine."Invoiced (line)");
          MessTxt := Text11012010;
        END ELSE BEGIN
          MaxAmount := ReceiptLine."Invoiced (line)";
          MessTxt := Text11012011;
        END;
      END;
      MaxAmount := ROUND(MaxAmount, Currency."Amount Rounding Precision");

      CASE FromFieldNo OF
        FIELDNO(Quantity), FIELDNO("Direct Unit Cost"):
          IF PurchHeader."Amounts only" THEN
            LineAmount :=
              ROUND("Direct Unit Cost",Currency."Amount Rounding Precision") -
              ROUND(
                ROUND("Direct Unit Cost",Currency."Amount Rounding Precision") *
                  "Line Discount %" / 100,
                  Currency."Amount Rounding Precision")
          ELSE
            LineAmount :=
              ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") -
              ROUND(
                ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") *
                 "Line Discount %" / 100,
                 Currency."Amount Rounding Precision");
        ELSE
          LineAmount := ROUND("Line Amount", Currency."Amount Rounding Precision");
      END;

      IF ((MaxAmount >= 0) AND (LineAmount > MaxAmount)) OR
         ((MaxAmount < 0) AND (LineAmount < MaxAmount))
         OR
         (("Document Type" = "Document Type"::Invoice) AND
          (ReceiptLine."Received (line)" >= 0) AND
          (LineAmount > 0) AND
          (MaxAmount < 0))
      THEN
        IF NOT CONFIRM(STRSUBSTNO(
          MessTxt,
          "Receipt No.",
          "Receipt Line No.",
          MaxAmount),FALSE)
        THEN BEGIN
          CASE FromFieldNo OF
            FIELDNO(Quantity):
              Quantity := xRec.Quantity;
            ELSE
              BEGIN
                "Direct Unit Cost" := xRec."Direct Unit Cost";
                "Line Amount" := xRec."Line Amount";
              END;
          END;
      END;
    END;

    PROCEDURE CheckVendorRelation@1210190014();
    VAR
      VendorRelationRec@1210190000 : Record 11012313;
      VendorRec@1210190001 : Record 23;
      VendorRec2@1100525000 : Record 23;
    BEGIN
      //**4PS
      VendorRelationRec.RESET;
      IF VendorRelationRec.GET("Vendor (Trade Item)") THEN BEGIN
        PurchHeader.GET("Document Type", "Document No.");
        //kkleermaker.sn, 110719, M27966
        IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN
          EXIT; // For invoices this check is not relevant.
        //kkleermaker.en, 110719, M27966
        IF VendorRelationRec."Vendor (Purchase)" <> PurchHeader."Buy-from Vendor No." THEN BEGIN
          PurchHeader.TESTFIELD("Buy-from Vendor No.");  //db, 13-01-11
          VendorRec.GET(PurchHeader."Buy-from Vendor No.");
          IF VendorRec."Main Vendor" = '' THEN
            VendorRec."Main Vendor" := VendorRec."No.";
          IF VendorRec."Main Vendor" <> VendorRelationRec."Vendor (Purchase)" THEN BEGIN
            //db.sn, 25-11-10: M18286
            VendorRec2.GET(VendorRelationRec."Vendor (Purchase)");
            IF VendorRec2."Main Vendor" = '' THEN
              VendorRec2."Main Vendor" := VendorRec2."No.";
            IF VendorRec."Main Vendor" <> VendorRec2."Main Vendor" THEN BEGIN
            //db.en, 25-11-10: M18286
              IF "Trade Item" <> '' THEN
                MESSAGE(Text11012001,FIELDCAPTION("Trade Item"),"Trade Item",PurchHeader."Buy-from Vendor Name")
              ELSE
                IF "Basic Item" <> '' THEN
                  MESSAGE(Text11012001,FIELDCAPTION("Basic Item"),"Basic Item",PurchHeader."Buy-from Vendor Name")
                ELSE
                  IF "Item No." <> '' THEN
                    MESSAGE(Text11012001,FIELDCAPTION("Item No."),"Item No.",PurchHeader."Buy-from Vendor Name");
            END;
          END;
        END;
      END;
    END;

    PROCEDURE ValidateVendor@6506();
    VAR
      lvVendorRec@1210190000 : Record 23;
      lvTradeItemRec@1100485000 : Record 11012317;
      OrigTradeItemRec@1210190001 : Record 11012317;
      ItemVendorRec@1100525000 : Record 99;
      RecFound@1100485001 : Boolean;
    BEGIN
      //**4PS
      IF ("Basic Item" = '') AND ("Trade Item" = '') THEN EXIT;
      //IF ("Vendor (Trade Item)" <> '') AND (CurrFieldNo <> FIELDNO("Item No.") ) THEN EXIT;  //db.o, 29-07-14: C010810

      lvVendorRec.GET(PurchHeader."Buy-from Vendor No.");
      IF lvVendorRec."Vendor (Trade Item)" = '' THEN EXIT;
      IF lvVendorRec."Vendor (Trade Item)" = "Vendor (Trade Item)" THEN EXIT;

      //db.sn, 29-07-14: C010810
      IF ("Vendor (Trade Item)" <> '') AND (CurrFieldNo <> FIELDNO("Item No.") ) THEN BEGIN
        IF (CurrFieldNo = FIELDNO("No.")) AND (Type = Type::Item) THEN
          RecFound := FALSE  //mismatch vendor trade item
        ELSE
          EXIT;
      END;
      //db.en, 29-07-14: C010810

      IF ("Basic Item" <> '') AND ("Trade Item" = '') THEN BEGIN
        xRec."Vendor (Trade Item)" := '';
        VALIDATE("Vendor (Trade Item)", lvVendorRec."Vendor (Trade Item)");
        IF "Trade Item" = '' THEN BEGIN
          "Vendor (Trade Item)" := '';
        END;
      END ELSE BEGIN
        IF ("Vendor (Trade Item)" <> '') AND ("Trade Item" <> '') THEN BEGIN
          //db.sn, 07-06-11: M23000
          IF OrigTradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN BEGIN
            "Trade Item" := '';
            "Vendor (Trade Item)" := '';
            RecFound := FALSE;

            lvTradeItemRec.SETRANGE(Vendor, lvVendorRec."Vendor (Trade Item)");
            lvTradeItemRec.SETRANGE(Expired, FALSE);
            IF OrigTradeItemRec."GTIN Code (Item)" <> '' THEN BEGIN
              lvTradeItemRec.SETCURRENTKEY("GTIN Code (Item)");
              lvTradeItemRec.SETRANGE("GTIN Code (Item)", OrigTradeItemRec."GTIN Code (Item)");
              IF lvTradeItemRec.FINDFIRST THEN
                RecFound := TRUE;
            END;
            IF NOT RecFound THEN BEGIN
              IF (OrigTradeItemRec."Product Code" <> '') AND (OrigTradeItemRec.Manufacturer <> '') THEN BEGIN
                lvTradeItemRec.SETCURRENTKEY("Product Code", Manufacturer);
                lvTradeItemRec.SETRANGE("GTIN Code (Item)");
                lvTradeItemRec.SETRANGE("Product Code", OrigTradeItemRec."Product Code");
                lvTradeItemRec.SETRANGE(Manufacturer,  OrigTradeItemRec.Manufacturer);
                IF lvTradeItemRec.FINDFIRST THEN
                  RecFound := TRUE;
              END;
            END;
            IF RecFound THEN BEGIN
              xRec."Vendor (Trade Item)" := '';
              xRec."Trade Item" := '';
              "Trade Item" := '';
              VALIDATE("Vendor (Trade Item)", lvVendorRec."Vendor (Trade Item)");
              VALIDATE("Trade Item", lvTradeItemRec."Item Code");
            END ELSE BEGIN
              //db.sn, 29-07-14: C010810
              IF Type = Type::Item THEN
                ItemVendorRec.SETRANGE("Item No.", "No.")
              ELSE
                ItemVendorRec.SETRANGE("Item No.", "Item No.");
              ItemVendorRec.SETRANGE("Vendor No.", lvVendorRec."No.");
              ItemVendorRec.SETRANGE("Source Type", ItemVendorRec."Source Type"::"Trade Item");
              IF ItemVendorRec.FINDFIRST THEN BEGIN
                VALIDATE("Vendor (Trade Item)", lvVendorRec."Vendor (Trade Item)");
                VALIDATE("Trade Item", ItemVendorRec."Vendor Item No.");
              END;
              //db.sn, 29-07-14: C010810
            END;
          END;
          //db.en, 07-06-11: M23000
        END;
      END;
    END;

    PROCEDURE ValidateItem@1210190029(LTypeArtOpt@1210190001 : 'Item,Basic Item,Trade Item');
    VAR
      DummyDat@1210190002 : Date;
      DummyCode@1210190004 : Code[20];
      DummyTxt@1210190005 : Text[50];
      SaveBasicItem@1210190025 : Code[20];
      SaveTradeItem@1210190006 : Code[20];
      SaveManufacturer@1210190008 : Code[20];
      SaveVendor@1210190009 : Code[20];
      SaveUnit@1210190012 : Code[10];
      SaveDesc@1210190007 : Text[50];
      SaveDesc2@1210190010 : Text[50];
      SaveCostObject@1210190011 : Code[20];
      SaveCostComp@1210190015 : Code[20];
      BasicItemRec@1210190013 : Record 11012316;
      TradeItemRec@1210190014 : Record 11012317;
      lvPurchUnit@1210190016 : Code[20];
      lvFactor@1210190017 : Decimal;
      SaveFactor@1100485000 : Decimal;
      SaveQuan@1100485001 : Decimal;
      lvText000@1100485002 : TextConst 'ENU=Trade Item %1 is expired: Vendor %2 suggested %3 as alternative Item.';
      lvRefDate@1100485003 : Date;
      lvDiscRef1@1100485004 : Code[20];
      lvDiscRef2@1100485005 : Code[20];
      WMSManagement@1210190000 : Codeunit 7302;
      SwitchTradeItem@1210190003 : Boolean;
      LTypeArtOpt2@1100409000 : 'Item,Basic Item,Trade Item';
    BEGIN
      //**4PS
      GetPurchHeader;
      "Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
      "Pay-to Vendor No." := PurchHeader."Pay-to Vendor No.";
      "Currency Code" := PurchHeader."Currency Code";

      SaveUnit := "Unit of Measure Code";
      SaveFactor := "Qty. per Unit of Measure";
      SaveQuan := Quantity;

      //db.sn, 27-06-11: M27297
      IF LTypeArtOpt = LTypeArtOpt::"Trade Item" THEN BEGIN
        IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") OR
           ("Trade Item" <> xRec."Trade Item") THEN BEGIN
          IF TradeItemRec.GET(xRec."Vendor (Trade Item)", xRec."Trade Item") THEN BEGIN
            IF "Unit of Measure Code" = TradeItemRec."Packaging Unit" THEN BEGIN
              Quantity := Quantity * TradeItemRec."Qty. per Unit of Measure";
              "Unit of Measure Code" := TradeItemRec."Application Unit";
              "Qty. per Unit of Measure" := 1;
              xRec."Qty. per Unit of Measure" := 1;
              SaveUnit := "Unit of Measure Code";
              SaveFactor := "Qty. per Unit of Measure";
              SaveQuan := Quantity;
            END;
          END;
        END;
      END ELSE BEGIN
        ValidateCu.SetVendor(PurchHeader."Buy-from Vendor No.");  //db, 25-03-13: 32565
      END;
      //db.en, 27-06-11: M27297

      GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2);
      ValidateCu.SetLanguageCode(PurchHeader."Language Code");  //db, 20-12-11: M29573
      //>>150608, SYM086
        IF DontUseSingleGTIN THEN
        ValidateCu.SetDontUseSingleGTIN(DontUseSingleGTIN);
      //<<150608
      ValidateCu.ValidateItem(LTypeArtOpt,"Trade Item","Item No.",Manufacturer,"Vendor (Trade Item)",
        "Basic Item","Shortcut Dimension 2 Code",Description,"Unit of Measure Code","Direct Unit Cost",
        "Discount % (Item)",DummyDat,"Unit Price (LCY)","Description 2","Cost Component",
        lvDiscRef1,lvDiscRef2,lvRefDate,'');
      CheckCostCompServOrderType;

      IF "Item No." = '' THEN BEGIN
        Type := Type::"G/L Account";
        IF Type <> xRec.Type THEN
          "No." := '';
      END;

      IF ("Job No." = '') AND ("Service Order No." = '') AND ("Item No." <> '') AND ("Item No." <> "No.") THEN BEGIN
        InvtSetup.GET;  //db, 11-08-11: M22691
        SaveBasicItem := "Basic Item";
        SaveManufacturer := Manufacturer;
        SaveTradeItem := "Trade Item";
        SaveVendor := "Vendor (Trade Item)";
        //db.sn, 20-12-11: M31760
        SaveDesc := Description;
        SaveDesc2 := "Description 2";
        SaveCostObject := "Shortcut Dimension 2 Code";
        SaveCostComp := "Cost Component";
        //db.en, 20-12-11: M31760
        Type := Type::Item;
        SkipExpired := TRUE;  //db, 08-12-10: M18694
        VALIDATE("No.", "Item No.");  //beware of recursion between validate triggers
        //If trade-item selected with basic-item and variant of trade-item with same basic-item is
        //copied as inventory-item: do not reset chosen trade-item by validate of item
        SkipExpired := FALSE;  //db, 08-12-10: M18694
        IF ("Vendor (Trade Item)" + "Trade Item") <> (SaveVendor + SaveTradeItem) THEN
          SwitchTradeItem := TRUE;  //db, 11-08-11: M22691
        "Basic Item" := SaveBasicItem;
        Manufacturer := SaveManufacturer;
        "Trade Item" := SaveTradeItem;
        "Vendor (Trade Item)" := SaveVendor;
        //db.sn, 20-12-11: M31760
        IF InvtSetup."Item Info Trade Item Leading" THEN BEGIN
          Description := SaveDesc;
          "Description 2" := SaveDesc2;
          "Shortcut Dimension 2 Code" := SaveCostObject;
          "Cost Component" := SaveCostComp;
        END;
        //db.en, 20-12-11: M31760
        SaveUnit := "Unit of Measure Code";
        SaveFactor := "Qty. per Unit of Measure";
        SaveQuan := Quantity;
        IF SwitchTradeItem AND InvtSetup."Price Info Trade Item Leading" THEN BEGIN  //db, 11-08-11: M22691
          //ValidateCu.ValidateItem(LTypeArtOpt,"Trade Item",DummyCode,Manufacturer,"Vendor (Trade Item)",
          //  "Basic Item",DummyCode,DummyTxt,"Unit of Measure Code","Direct Unit Cost",
          //  "Discount % (Item)",DummyDat,"Unit Price (LCY)",DummyTxt,DummyCode,
          //  lvDiscRef1,lvDiscRef2,lvRefDate,'');  //db, 20-12-11: M31760 (use DummyTxt for Description)
          //C002758.sn
          IF ("Trade Item" + "Basic Item" <> '') THEN BEGIN
            LTypeArtOpt2 := LTypeArtOpt;  //db, 14-12-12: 32565
            IF ("Basic Item" <> '') AND (LTypeArtOpt = LTypeArtOpt::Item) THEN
              LTypeArtOpt2 := LTypeArtOpt::"Basic Item";
            IF ("Trade Item" <> '') AND (LTypeArtOpt = LTypeArtOpt::Item) THEN
              LTypeArtOpt2 := LTypeArtOpt::"Trade Item";
            ValidateCu.ValidateItem(LTypeArtOpt2,"Trade Item",DummyCode,Manufacturer,"Vendor (Trade Item)",
              "Basic Item",DummyCode,DummyTxt,"Unit of Measure Code","Direct Unit Cost",
              "Discount % (Item)",DummyDat,"Unit Price (LCY)",DummyTxt,DummyCode,
              lvDiscRef1,lvDiscRef2,lvRefDate,'');  //db, 20-12-11: M31760 (use DummyTxt for Description)
          END;
          //C002758.en
        END;
        //db.sn, 29-06-11: M26303
        IF ("Trade Item" <> '') AND (NOT InvtSetup."Price Info Trade Item Leading") THEN
          xRec."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        //db.en, 29-06-11: M26303
      END;

      //db.sn, 10-06-09: M14553
      IF ("Item No." <> '') AND ("Basic Item" + "Trade Item" = '') THEN
        UpdateDirectUnitCost(CurrFieldNo);
      //db.en, 10-06-09: M14553

      UpdateUnitCost;
      "Cost Type" := "Cost Type"::Material;
      VALIDATE("Shortcut Dimension 2 Code");

      //IF LTypeArtOpt <> LTypeArtOpt::Item THEN BEGIN //C020690.o
      //C020690.sn
      InvtSetup.GET;
      IF (LTypeArtOpt <> LTypeArtOpt::Item) OR
         ((LTypeArtOpt = LTypeArtOpt::Item) AND ("Trade Item" <> '') AND (InvtSetup."Price Info Trade Item Leading")) THEN
      BEGIN
      //C020690.en
        IF PurchHeader."Currency Factor" <> 0 THEN
          "Direct Unit Cost" := "Direct Unit Cost" * PurchHeader."Currency Factor";
      END;

      lvPurchUnit := "Unit of Measure Code";
      IF "Trade Item" <> '' THEN BEGIN
        IF NOT TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN TradeItemRec.INIT;
        IF TradeItemRec.Expired THEN BEGIN  //db, 15-04-08: M10268
          IF TradeItemRec."Item Code (Successor)" = '' THEN BEGIN
            IF SkipExpired = FALSE THEN  //db, 08-12-10: M18694
              TradeItemRec.TESTFIELD(Expired,FALSE);
          END ELSE BEGIN
            TradeItemRec.CALCFIELDS("Vendor Name");
            IF SkipExpired = FALSE THEN  //db, 08-12-10: M18694
              ERROR(lvText000, "Trade Item", TradeItemRec."Vendor Name", TradeItemRec."Item Code (Successor)");
          END;
        END;
        IF TradeItemRec."Packaging Unit" <> '' THEN BEGIN
          lvPurchUnit := TradeItemRec."Packaging Unit";
          lvFactor := TradeItemRec."Qty. per Unit of Measure";
        END;
        "Tariff No." := TradeItemRec."CBS Code";
        "Net Weight":= TradeItemRec.GetNetWeight("Unit of Measure Code");
      END ELSE BEGIN
        IF "Basic Item" <> '' THEN BEGIN
          IF NOT BasicItemRec.GET(Manufacturer, "Basic Item") THEN BasicItemRec.INIT;
          BasicItemRec.TESTFIELD(Expired,FALSE);
          IF BasicItemRec."Packaging Unit" <> '' THEN BEGIN
            lvPurchUnit := BasicItemRec."Packaging Unit";
            lvFactor := BasicItemRec."Qty. per Unit of Measure";
          END;
          IF ItemRec.GET("Item No.") THEN             //CALL C008507 new
            "Tariff No." := ItemRec."Tariff No.";     //CALL C008507 new
        END ELSE BEGIN
          IF "Item No." <> '' THEN BEGIN
            IF NOT ItemRec.GET("Item No.") THEN ItemRec.INIT;
            IF ItemRec."Purch. Unit of Measure" <> lvPurchUnit THEN BEGIN
              lvPurchUnit := ItemRec."Purch. Unit of Measure";
              lvFactor := UOMMgt.GetQtyPerUnitOfMeasure(ItemRec,lvPurchUnit);
            END;
          END;
          "Tariff No." := ItemRec."Tariff No.";
        END;
      END;
      IF ItemRec.GET("Item No.") THEN BEGIN
        CheckIfItemIsBlocked(ItemRec);
        VALIDATE(Text, ItemRec.Text);
        ValidateShelf;
        ItemVend.INIT;
        ItemVend."Vendor No." := "Buy-from Vendor No.";
        ItemVend."Variant Code" := "Variant Code";
        ItemRec.FindItemVend(ItemVend,"Location Code");  //db, 19-02-09: Item->ItemRec
        IF ItemVend."Vendor Item No." <> '' THEN
          "Vendor Item No." := ItemVend."Vendor Item No."
        ELSE
          IF ("Buy-from Vendor No." = ItemRec."Vendor No.") THEN //kzwerver, 120619, n, #W007424
            "Vendor Item No." := ItemRec."Vendor Item No.";
      END;

      IF "Trade Item" <> '' THEN
        "Vendor Item No." := "Trade Item";  //db, 06-05-09: M15266

      IF lvFactor = 0 THEN lvFactor := 1;
      IF SaveFactor = 0 THEN SaveFactor := 1;
      IF (lvPurchUnit = SaveUnit) AND (SaveFactor <> lvFactor) THEN BEGIN
        Quantity := ROUND(SaveQuan * SaveFactor / lvFactor, 1, '>');
        "Qty. per Unit of Measure" := ("Qty. per Unit of Measure" / SaveFactor) * lvFactor;
      END ELSE BEGIN
        IF lvPurchUnit <> SaveUnit THEN BEGIN
          Quantity := ROUND(SaveQuan * SaveFactor / lvFactor, 1, '>');
          "Qty. per Unit of Measure" := "Qty. per Unit of Measure" / SaveFactor;
        END;
        IF lvPurchUnit <> "Unit of Measure Code" THEN BEGIN
          IF lvPurchUnit = SaveUnit THEN
            Quantity := Quantity / SaveFactor
          ELSE
            "Qty. per Unit of Measure" := "Qty. per Unit of Measure" * lvFactor;
        END;
      END;

      IF ("Qty. per Unit of Measure" <> xRec."Qty. per Unit of Measure") THEN BEGIN  //db, 08-04-10: M18570
        xRec."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        "Direct Unit Cost" := "Direct Unit Cost" * "Qty. per Unit of Measure";
        "Unit Cost (LCY)" := "Unit Cost (LCY)" * "Qty. per Unit of Measure";
        "Unit Price (LCY)" := "Unit Price (LCY)" * "Qty. per Unit of Measure";
      END;

      VALIDATE("Unit of Measure Code", lvPurchUnit);
      VALIDATE("Line Discount %");  //db, 31-05-07: M9531

      IF NOT CreateFromReqLine THEN  //db, 19-10-12: C000939
        CheckDeliveryTime(FIELDNO("Item No."));

      //db.sn, 10-05-11: M26790
      IF ("Location Code" <> '') AND ("Item No." = '') THEN BEGIN
        GetLocation("Location Code");
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
          "Bin Code" := WMSManagement.GetDefaultBinLocation(
            "Job No.","Service Order No.","Location Code","Item No.","Variant Code",TRUE);
      END;
      //db.en, 10-05-11: M26790
    END;

    PROCEDURE CheckCompanyIC@6510();
    VAR
      lvCompName@1210190000 : Text[50];
    BEGIN
      //**4PS
      IF "Receiving Company" <> '' THEN
        lvCompName := "Receiving Company"
      ELSE
        lvCompName := COMPANYNAME;

      GLAcc.CHANGECOMPANY(lvCompName);
      ProjRec.CHANGECOMPANY(lvCompName);
      DimVal1Rec.CHANGECOMPANY(lvCompName);
      DimVal2Rec.CHANGECOMPANY(lvCompName);
      ICProjSetupRec.CHANGECOMPANY(lvCompName);
      ProjTypeRec.CHANGECOMPANY(lvCompName);
      ProjElemRec.CHANGECOMPANY(lvCompName);
      ExtensionContract.CHANGECOMPANY(lvCompName);
      PlantSetup.CHANGECOMPANY(lvCompName);
      PlantTypeRec.CHANGECOMPANY(lvCompName);
      PlantNoRec.CHANGECOMPANY(lvCompName);
      CostCompPlantRec.CHANGECOMPANY(lvCompName);
      PlantPostingSetup.CHANGECOMPANY(lvCompName);
      PlantVendorRec.CHANGECOMPANY(lvCompName);
      ServTypeRec.CHANGECOMPANY(lvCompName);
      ServOrderRec.CHANGECOMPANY(lvCompName);

      ICProjSetupRec.GET;
    END;

    PROCEDURE RefersToOtherCompany@1100525032() : Boolean;
    BEGIN
      //**4PS
      EXIT(("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME));
    END;

    PROCEDURE UpdateAmountLCY@6503();
    VAR
      Currency2@1210190028 : Record 4;
    BEGIN
      //**4PS
      Currency2.InitRoundingPrecision;
      IF PurchHeader."Currency Code" <> '' THEN
        "Amount (LCY)" :=
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              1,PurchHeader."Job No.", GetDate,"Currency Code",
      //      "Line Amount",PurchHeader."Currency Factor",FALSE), //C027348.o
              Amount,PurchHeader."Currency Factor",FALSE), //C027348.n
            Currency2."Amount Rounding Precision")
      ELSE
        "Amount (LCY)" :=
      //  ROUND("Line Amount",Currency2."Amount Rounding Precision"); //C027348.o
          ROUND(Amount,Currency2."Amount Rounding Precision"); //C027348.n

      "Ovh.Surch.Expected Costs (LCY)" := CalcOverheadSurcharge;
    END;

    PROCEDURE InitAmntToReceive@11012003();
    BEGIN
      //**4PS
      IF OnlyCheckForOpen THEN BEGIN
      //IF ("Amnt. to Receive" * "Line Amount") >= ("Outst. Amount exc. VAT" * "Line Amount") THEN  //C027348.o
        IF ("Amnt. to Receive" * Amount) >= ("Outst. Amount exc. VAT" * Amount) THEN  //C027348.n
          "Amnt. to Receive" := "Outst. Amount exc. VAT";
        OnlyCheckForOpen := FALSE;
      END ELSE BEGIN
        IF ("Document Type" = "Document Type"::Order) AND NOT DirectReceipt THEN
          "Amnt. to Receive" := 0
        ELSE
          "Amnt. to Receive" := "Outst. Amount exc. VAT";
      END;
      InitAmntToInvoice;
    END;

    PROCEDURE InitAmntToInvoice@11012004();
    BEGIN
      //**4PS
      "Amnt. to Invoice" := MaxAmntToInvoice;
    END;

    PROCEDURE MaxAmntToInvoice@11012002() : Decimal;
    BEGIN
      //**4PS
      EXIT("Amnt. Received" + "Amnt. to Receive" - "Amnt. Invoiced");
    END;

    PROCEDURE UpdateLogbook@1210190000();
    BEGIN
      //**4PS
      EXIT;

      //Turn-of. 2 problems:
      //1. At registration of receipts the logbook was also updated.
      //2. At posting a receipt, a message appear 'purchase header changed by other user' (nld =Inkoopkop door andere gebruiker aangepast).
      //   Obviously because the update of the logbook is not commited before running cu 90.

      IF PurchHeader.GET("Document Type","Document No.") THEN
        PurchHeader.MODIFY(TRUE);
    END;

    PROCEDURE InitRecord@1210190001();
    VAR
      oCurrFieldNo@1100525000 : Integer;
      lvBlockingCodeRec@1100525002 : Record 11012027;
      lvBlocked@1100525001 : Boolean;
    BEGIN
      //**4PS
      IF "Document No." = '' THEN BEGIN
        PurchHeader.INIT;
        EXIT;
      END;

      PurchHeader.GET("Document Type","Document No.");
      IF PurchHeader.Status <> PurchHeader.Status::Open THEN
        EXIT;

      Dim1 := "Shortcut Dimension 1 Code";  //* Can be filled by DPA  Call C022558.new

      "Dimension Set ID" := PurchHeader."Dimension Set ID";
      //Call C022558.so
      //IF ("Shortcut Dimension 1 Code" <> '') AND //* Can be filled by DPA
      //   (PurchHeader."Shortcut Dimension 1 Code" <> "Shortcut Dimension 1 Code") THEN
      // ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
      //Call C022558.eo
      //Call C022558.sn
      IF "Dimension Set ID"  <> 0 THEN
        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

      IF (Dim1 <> '') AND ("Shortcut Dimension 1 Code" <> Dim1) THEN BEGIN
        "Shortcut Dimension 1 Code" := Dim1;
        ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
      END;
      //Call C022558.en

      "Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";

      IF (PurchHeader."Document Type" IN [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo"]) AND
         (NOT PurchHeader."Invoice Lines Input") AND
         (PurchHeader."Preregister WIP") AND
         (PurchHeader."Job No." = '')  THEN
      BEGIN
        PurchSetup.GET;
        VALIDATE("System-Created Entry",TRUE);
        VALIDATE(Type, Type::"G/L Account");
        IF PurchHeader."Buy-from Vendor No." <> '' THEN
          VALIDATE("No.", PurchSetup."Preregistration WIP Account");
      END;
      //

      CheckCompanyIC;
      IF PurchHeader."Job No." <> '' THEN
        IF ProjRec.GET(PurchHeader."Job No.") THEN

      //IF ProjRec.GET(PurchHeader."Job No.") THEN  //CAL C020806 o
       //CAL C020806 sn
        IF ProjRec.GET(PurchHeader."Job No.") THEN BEGIN
          lvBlocked := FALSE;
          IF ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
             (ProjRec."Blocking Code" <> '') AND
              ((ProjRec."Project Status" = ProjRec."Project Status"::"Technical Finished") OR
               (ProjRec."Project Status" = ProjRec."Project Status"::"Administrative Finished") OR
               ((ProjRec."Project Status" = ProjRec."Project Status"::Finished) AND ICProjSetupRec."Provisions at Closure")
             ) THEN
          BEGIN
            CASE "Document Type" OF
              "Document Type"::Order:
                lvBlockingCodeRec.Switch := lvBlockingCodeRec.Switch::"Purchase Receipt";
              "Document Type"::Invoice,"Document Type"::"Credit Memo":
                lvBlockingCodeRec.Switch := lvBlockingCodeRec.Switch::"Purchase Invoice";
            END;
            lvBlocked := lvBlockingCodeRec.CheckBlocked(ProjRec."Blocking Code", lvBlockingCodeRec.Switch, ProjRec, FALSE);
            IF lvBlocked THEN BEGIN
              IF (SaveJobNo <> PurchHeader."Job No.") OR (SaveDocNo <> PurchHeader."No.") OR (SaveLineNo <> "Line No.") THEN
                MESSAGE(Text11012037, ProjRec."No.", lvBlockingCodeRec.Switch, ProjRec."Project Status", ProjRec."Blocking Code");
            END;
          END;
       //CAL C020806 en

      //  IF ProjRec.Blocked < ProjRec.Blocked::All THEN //CAL C020806 o
          IF (ProjRec.Blocked < ProjRec.Blocked::All) AND (NOT lvBlocked) THEN //CALC 020806 n
            IF "Document Type" <= "Document Type"::Order THEN BEGIN
              IF ProjRec."Project Status" < (ProjRec."Project Status"::"Technical Finished") THEN
                VALIDATE("Job No.", PurchHeader."Job No.");
            END ELSE BEGIN
              IF (ICProjSetupRec."Provisions at Closure") AND
                 (("Document Type" > "Document Type"::Order) AND
                 ("Document Type" <> "Document Type"::"Blanket Order"))
              THEN BEGIN
                IF ProjRec."Project Status" < (ProjRec."Project Status"::Archive) THEN
                  VALIDATE("Job No.", PurchHeader."Job No.");
              END ELSE
                IF ProjRec."Project Status" < (ProjRec."Project Status"::"Administrative Finished") THEN
                  VALIDATE("Job No.", PurchHeader."Job No.");
            END;
        END; //CAL C020806 n

      IF PurchHeader."Service Order No." <> '' THEN
        IF ServOrderRec.GET(PurchHeader."Service Order No.") THEN
          IF "Document Type" <= "Document Type"::Order THEN BEGIN
            IF ServOrderRec.Status < ServOrderRec.Status::"Technical Finished" THEN BEGIN
              oCurrFieldNo := CurrFieldNo;                   //M22843 n problem 3
              CurrFieldNo := FIELDNO("Service Order No.");   //M22843 n
              VALIDATE("Service Order No.", PurchHeader."Service Order No.");
              CurrFieldNo := oCurrFieldNo;                   //M22843 n
            END;
          END ELSE BEGIN
            //Call C013753.sn
            IF ServOrderRec.Status < ServOrderRec.Status::"Administrative Finished" THEN BEGIN
              oCurrFieldNo := CurrFieldNo;
              CurrFieldNo := FIELDNO("Service Order No.");
              VALIDATE("Service Order No.", PurchHeader."Service Order No.");
              CurrFieldNo := oCurrFieldNo;
            END;
            //Call C013753.sn
          END;


       //CAL C020806 sn
       SaveJobNo := PurchHeader."Job No.";
       SaveDocNo := PurchHeader."No.";
       SaveLineNo := "Line No."
       //CAL C020806 en
    END;

    PROCEDURE CalculateICMQuantity@1210190005();
    VAR
      TradeItemRec@1210190001 : Record 11012317;
    BEGIN
      //**4PS
      IF NOT ("Document Type" IN ["Document Type"::Order,"Document Type"::Quote]) THEN EXIT;  //db, 04-10-12: C001492
      "ICM Quantity" := Quantity;
      "ICM Unit" := "Unit of Measure Code";

      IF "Trade Item" <> '' THEN BEGIN
        TradeItemRec.GET("Vendor (Trade Item)", "Trade Item");
        IF TradeItemRec."Qty. per Unit of Measure" = 0 THEN
          TradeItemRec."Qty. per Unit of Measure" := 1;
        "ICM Quantity" := Quantity * "Qty. per Unit of Measure" / TradeItemRec."Qty. per Unit of Measure";
        "ICM Unit" := TradeItemRec."Order ID";
      END ELSE BEGIN
        IF "Item No." <> '' THEN BEGIN
          ItemRec.GET("Item No.");
          IF NOT ItemUnitRec.GET(ItemRec."No.", ItemRec."Purch. Unit of Measure") THEN ItemUnitRec.INIT;
          "ICM Quantity" := Quantity * "Qty. per Unit of Measure" / ItemUnitRec."Qty. per Unit of Measure";
          "ICM Unit" := ItemRec."Purch. Unit of Measure";
        END;
      END;

      //"ICM Quantity" := ROUND("ICM Quantity", 1, '>');  //db, 30-08-12: 31238 (rounding solved by DeliverableQuantity)
    END;

    PROCEDURE DirectReceipt@1210190006() : Boolean;
    VAR
      lvVendorRec@1100485000 : Record 23;
      lvJob@1100525001 : Record 11072003;
      lvDirectReceipt@1100525000 : Boolean;
    BEGIN
      //**4PS
      PurchSetup.GET;
      IF ("Plant Transport Order No." <> '') THEN
        EXIT(PurchSetup."Direct Receipt Pl. Transport");

      GetPurchHeader;

      IF NOT lvVendorRec.GET(PurchHeader."Buy-from Vendor No.") THEN
        EXIT(FALSE);

      //* Call 10940, not at all for the time being at Blanket Orders (Purchase Order of order type 'Blanket Order').
      //* When other customers encounter problems then eventual create seperate setup for Blanket Orders (T312/T23)
      IF ("Document Type" = "Document Type"::Order) AND
         (PurchHeader."Purchase Order Type" = PurchHeader."Purchase Order Type"::"Blanket Order") THEN
        EXIT(FALSE);

      CASE lvVendorRec."Direct Receipt" OF
        lvVendorRec."Direct Receipt"::No: EXIT(FALSE);
        lvVendorRec."Direct Receipt"::Yes: EXIT(TRUE);
        lvVendorRec."Direct Receipt"::"Yes - project/service only":
          EXIT(("Job No." <> '') OR ("Service Order No." <> ''));
        lvVendorRec."Direct Receipt"::"Yes - not project/service":
          EXIT(("Job No." = '') AND ("Service Order No." = ''));
        //Call C009591.sn
        lvVendorRec."Direct Receipt"::"Yes - project location only":
          BEGIN
            lvDirectReceipt := FALSE;
            IF ("Job No." <> '') THEN BEGIN
              lvJob.CHANGECOMPANY("Receiving Company");
              lvJob.GET("Job No.");
              IF lvJob.Deliver = lvJob.Deliver::"Project Location" THEN
                lvDirectReceipt := TRUE;
            END;
            EXIT(lvDirectReceipt)
          END;
        //Call C009591.en

      END;
    END;

    PROCEDURE FixedAssetPlantRelation@1210190010() : Boolean;
    VAR
      lvPlantSetup@1210190000 : Record 11012550;
      lvPlantTypeRec@1100485000 : Record 11012551;
      lvPlantNumberRec@1210190001 : Record 11012552;
      lvCreateFAOnReceipt@1100525000 : Boolean;
    BEGIN
      //**4PS
      IF (("Plant Type" = '') OR ("Cost Component Plant" = '') OR ("Receiving Company" <> '')) OR
         (("Plant No." = '') AND
          (NOT ("Document Type" IN ["Document Type"::Order, "Document Type"::Quote, "Document Type"::"Blanket Order"])))
      THEN
        EXIT(FALSE);

      lvPlantTypeRec.GET("Plant Type");
      IF (lvPlantTypeRec."Rental Type" <> lvPlantTypeRec."Rental Type"::Rental) OR
         (NOT lvPlantTypeRec."Integration Fixed Assets")
      THEN
        EXIT(FALSE);

      lvPlantSetup.GET;
      IF NOT lvPlantSetup."Integration Fixed Assets" THEN
        EXIT(FALSE);
      IF lvPlantSetup."Cost Component Acquisition" <> "Cost Component Plant" THEN
        EXIT(FALSE);

      IF ("Plant No." <> '') AND ("Document Type" = "Document Type"::Order) THEN BEGIN
        lvPlantNumberRec.GET("Plant Type", "Plant No.");
        IF (NOT lvPlantTypeRec.Bulk) AND
           (NOT lvPlantNumberRec.Posted) AND (NOT lvPlantNumberRec.External) AND
           (lvPlantNumberRec."Fixed Asset" = '') AND (lvPlantNumberRec."Purchase Order No." = "Document No.")
        THEN
         lvCreateFAOnReceipt := TRUE;
      END;

      IF ("Plant No." = '') OR (lvCreateFAOnReceipt) THEN BEGIN
        VALIDATE(Type, Type::"Fixed Asset");
        VALIDATE("No.", '');
      END ELSE BEGIN
        lvPlantNumberRec.GET("Plant Type", "Plant No.");
        lvPlantNumberRec.TESTFIELD("Fixed Asset");
        VALIDATE(Type, Type::"Fixed Asset");
        VALIDATE("No.", lvPlantNumberRec."Fixed Asset");
      END;
      EXIT(TRUE);
    END;

    PROCEDURE OnLookupFieldNo@1210190004(ValidateBln@1210190000 : Boolean);
    BEGIN
      //**4PS
      CurrFieldNo := FIELDNO("No.");  //db, 24-01-07: M8000
      CheckCompanyIC;
      CASE Type OF
        Type::" ":
          BEGIN
            StdTxt.Code := "No.";
            IF PAGE.RUNMODAL(0, StdTxt) = ACTION::LookupOK THEN
              IF ValidateBln THEN
                VALIDATE("No.", StdTxt.Code);
          END;
       Type::"G/L Account":
          BEGIN
            GLAcc."No." := "No.";
            IF PAGE.RUNMODAL(0, GLAcc) = ACTION::LookupOK THEN
              IF ("Job No." = '') AND ("Service Order No." = '') AND ("Plant Type" = '') THEN
                IF ValidateBln THEN
                  VALIDATE("No.", GLAcc."No.");
          END;
        Type::Item:
          BEGIN
            Item."No." := "No.";
            IF PAGE.RUNMODAL(0, Item) = ACTION::LookupOK THEN
              IF ValidateBln THEN
                VALIDATE("No.", Item."No.");
          END;
        Type::"Fixed Asset":
          BEGIN
            FA."No." := "No.";
            IF PAGE.RUNMODAL(0, FA) = ACTION::LookupOK THEN
              IF ValidateBln THEN
                VALIDATE("No.", FA."No.");
          END;
        Type::"Charge (Item)":
          BEGIN
            ItemCharge."No." := "No.";
            IF PAGE.RUNMODAL(0, ItemCharge) = ACTION::LookupOK THEN
              IF ValidateBln THEN
                VALIDATE("No.", ItemCharge."No.");
          END;
      END;
    END;

    PROCEDURE FillSystemCreatedEntry@1210190007();
    BEGIN
      //**4PS
      "System-Created Entry" :=
        ("Service Order No." <> '') OR
        ("Job No." <> '') OR
        ("Plant Type" <> '');

      CASE CurrFieldNo OF
        FIELDNO("Service Order No."):
          TESTFIELD("Plant Type",'');
        FIELDNO("Job No."):
          TESTFIELD("Plant Type",'');
        FIELDNO("Plant Type"):
          BEGIN
            TESTFIELD("Job No.",'');
            TESTFIELD("Service Order No.",'');
          END;
      END;
    END;

    PROCEDURE AccountDescription@1210190011() : Text[50];
    BEGIN
      //**4PS
      IF ("No." = '') OR (Type <> Type::"G/L Account") THEN
        EXIT('');

      CheckCompanyIC;
      GLAcc.GET("No.");
      EXIT(GLAcc.Name);
    END;

    PROCEDURE CheckBlanketOrder@1210190012(CalledFromField@1210190005 : Boolean) : Decimal;
    VAR
      lvPurchLineRec@1210190001 : Record 39;
      lvBlanketOrderLineRec@1210190004 : Record 39;
      QuanReleased@1210190000 : Decimal;
      QuanContract@1210190002 : Decimal;
      QuanAssigned@1210190003 : Decimal;
      lvReturnQuantity@1210190006 : Decimal;
    BEGIN
      //**4PS
      IF "Document Type" = "Document Type"::Order THEN BEGIN
        IF ("Blanket Order No." = '') OR ("Blanket Order Line No." = 0) OR (Quantity <= 0)  THEN
          EXIT(Quantity);  //return input

        lvBlanketOrderLineRec.GET("Document Type"::"Blanket Order", "Blanket Order No.", "Blanket Order Line No.");
        QuanContract := lvBlanketOrderLineRec.Quantity;
        QuanAssigned := lvBlanketOrderLineRec."Quantity Received";
        QuanReleased := 0;

        lvPurchLineRec.SETCURRENTKEY("Document Type", "Blanket Order No.", "Blanket Order Line No.");
        lvPurchLineRec.SETRANGE("Document Type", lvPurchLineRec."Document Type"::Order);
        lvPurchLineRec.SETRANGE("Blanket Order No.", "Blanket Order No.");
        lvPurchLineRec.SETRANGE("Blanket Order Line No.", "Blanket Order Line No.");
        IF lvPurchLineRec.FINDSET THEN BEGIN
          REPEAT
            IF (lvPurchLineRec."Document No." = "Document No.") AND (lvPurchLineRec."Line No." = "Line No.") THEN
              //QuanReleased := QuanReleased + Quantity //hbk, 09-06-2010
              QuanReleased := QuanReleased + Quantity - "Quantity Received" //hbk, 09-06-2010
            ELSE
              //QuanReleased := QuanReleased + lvPurchLineRec.Quantity; //hbk, 09-06-2010
              QuanReleased := QuanReleased + lvPurchLineRec.Quantity - lvPurchLineRec."Quantity Received"; //hbk, 09-06-2010
          UNTIL lvPurchLineRec.NEXT = 0;
        END;

        IF ((QuanReleased + QuanAssigned) > QuanContract) THEN BEGIN
          //lvReturnQuantity := QuanContract - QuanReleased + Quantity; //hbk, 09-06-2010
          lvReturnQuantity := QuanContract - QuanReleased - QuanAssigned + Quantity; //hbk, 09-06-2010
          IF (lvReturnQuantity < 0) THEN
            lvReturnQuantity := 0;
          IF (NOT CalledFromField) THEN
            EXIT(lvReturnQuantity);
          IF lvBlanketOrderLineRec."Allow Exceeding Order Quantity" THEN
            MESSAGE(Text11012013, lvBlanketOrderLineRec."Document No.", lvBlanketOrderLineRec."Line No.",
              lvBlanketOrderLineRec.Quantity, lvReturnQuantity)
          ELSE BEGIN
            ERROR(Text11012014, lvBlanketOrderLineRec."Document No.", lvBlanketOrderLineRec."Line No.",
              lvBlanketOrderLineRec.Quantity, lvReturnQuantity);  //db, 26-04-10: M19112
          END;
        END;

        EXIT(Quantity);  //return input
      END;

      IF ("Document Type" = "Document Type"::"Blanket Order") THEN BEGIN
        IF ("Qty. to Receive" <= 0) THEN
          EXIT("Qty. to Receive");  //return input

        QuanContract := Quantity;
        QuanAssigned := "Qty. to Receive";
        QuanReleased := 0;

        lvPurchLineRec.SETCURRENTKEY("Document Type", "Blanket Order No.", "Blanket Order Line No.");
        lvPurchLineRec.SETRANGE("Document Type", lvPurchLineRec."Document Type"::Order);
        lvPurchLineRec.SETRANGE("Blanket Order No.", "Document No.");
        lvPurchLineRec.SETRANGE("Blanket Order Line No.", "Line No.");
        IF lvPurchLineRec.FINDSET THEN BEGIN
          REPEAT
            QuanReleased := QuanReleased + lvPurchLineRec.Quantity;
          UNTIL lvPurchLineRec.NEXT = 0;
        END;

        IF ((QuanReleased + QuanAssigned) > QuanContract) THEN BEGIN
          lvReturnQuantity := QuanContract - QuanReleased;
          IF (lvReturnQuantity < 0) THEN
            lvReturnQuantity := 0;
          IF (NOT CalledFromField) THEN
            EXIT(lvReturnQuantity);
          IF "Allow Exceeding Order Quantity" THEN
            MESSAGE(Text11012013, "Document No.", "Line No.")
          ELSE BEGIN
            MESSAGE(Text11012014, "Document No.", "Line No.");
            EXIT(lvReturnQuantity);
          END;
        END;

        EXIT("Qty. to Receive");  //return input
      END;
    END;

    PROCEDURE CalcOverheadSurcharge@1210190013() lvTotalSurcharge : Decimal;
    VAR
      lvJobSetup@1210190000 : Record 315;
      SurchargeRec@1210190001 : Record 11020208;
      lEmployeeRec@1100485000 : Record 5200;
      lvOk@1210190002 : Boolean;
      lvServType@1100485001 : Code[20];
    BEGIN
      //**4PS
      lvTotalSurcharge := 0;

      IF ("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME) THEN
        EXIT;

      IF "Cost Type" < "Cost Type"::Labor THEN
        EXIT;

      lvJobSetup.GET;
      IF NOT lvJobSetup."Ovh.Surch.CostControl" THEN
        EXIT;

      IF ("Employee No." <> '') THEN
        IF lEmployeeRec.GET("Employee No.") THEN;

      //IF ("Cost Type" = "Cost Type"::Labor) AND ("Employee No." <> '') THEN //DP01010.o
      IF ("Cost Type" IN ["Cost Type"::Labor,"Cost Type"::Subcontracting]) AND ("Employee No." <> '') THEN //DP01010.n
        IF (lEmployeeRec.External) AND (lEmployeeRec."External Post No Surcharge") THEN
          EXIT;

      CheckCompanyIC;

      IF "Service Order No." <> '' THEN BEGIN
        ServOrderRec.GET("Service Order No.");
        IF "Additional Cost (Service)" = TRUE THEN
          lvServType := ServOrderRec."Service Type (Other)"
        ELSE
          lvServType := ServOrderRec."Service Type";
        lvOk := SurchargeRec.GetSurcharges(
          1, lvServType, '', TRUE, ("Cost Type" - 1), "Shortcut Dimension 2 Code", "Wage Component",
          "Shortcut Dimension 1 Code", lEmployeeRec."Trade Association", "Cost Component", "Posting Date",
          SurchargeRec);
      END ELSE BEGIN
        IF "Job No." <> '' THEN BEGIN
          IF ProjRec.GET("Job No.") THEN
            lvOk := SurchargeRec.GetSurcharges(
              0, ProjRec."Project Type", "Job No.", TRUE, ("Cost Type" - 1), "Shortcut Dimension 2 Code", "Wage Component",
              "Shortcut Dimension 1 Code", lEmployeeRec."Trade Association", "Cost Component", "Posting Date",
              SurchargeRec);
        END;
      END;
      IF lvOk THEN
        REPEAT
          IF SurchargeRec.Percentage <> 0 THEN
            IF SurchargeRec."Surcharge over Surcharge" THEN
              lvTotalSurcharge := lvTotalSurcharge + ROUND(("Amount (LCY)" + lvTotalSurcharge) * SurchargeRec.Percentage/100)
            ELSE
              lvTotalSurcharge := lvTotalSurcharge + ROUND("Amount (LCY)" * SurchargeRec.Percentage/100)
          ELSE
            lvTotalSurcharge := lvTotalSurcharge + ROUND(SurchargeRec.Amount * Quantity);
        UNTIL SurchargeRec.NEXT = 0;
    END;

    PROCEDURE GetPurchaseUnitPrice@1210190015(lvType@1210190000 : Integer) lvUnitPrice : Decimal;
    VAR
      lvFactor@1100485000 : Decimal;
      lvOldType@1100485001 : Integer;
    BEGIN
      //**4PS
      IF "Qty. per Unit of Measure" = 0 THEN
        lvFactor := 1
      ELSE
        lvFactor := "Qty. per Unit of Measure";

      lvOldType := lvType;
      IF lvType = 2 THEN
        lvType := 0;

      IF lvType = 0 THEN BEGIN
        lvUnitPrice := "Direct Unit Cost" / lvFactor;
        GetPurchHeader;
        IF PurchHeader."Currency Code" <> '' THEN BEGIN
          Currency.InitRoundingPrecision;
          lvUnitPrice :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                1,PurchHeader."Job No.", GetDate,"Currency Code",
                lvUnitPrice,PurchHeader."Currency Factor",FALSE),
              Currency."Amount Rounding Precision");
        END;
      END;

      IF lvType = 1 THEN
        lvUnitPrice := "Unit Price (LCY)" / lvFactor;

      IF lvOldType = 2 THEN
        IF ItemRec.GET("Item No.") THEN
          IF ItemUnitRec.GET(ItemRec."No.", ItemRec."Purch. Unit of Measure") THEN
            lvUnitPrice := lvUnitPrice * ItemUnitRec."Qty. per Unit of Measure";

      EXIT(lvUnitPrice);
    END;

    PROCEDURE GetBaseQuanUnit@1100525012(VAR QuanBase@1100525002 : Decimal;VAR BaseUnit@1100525003 : Code[20]);
    VAR
      ItemRec@1100525000 : Record 27;
      TradeItemRec@1100525001 : Record 11012317;
    BEGIN
      //**4PS
      QuanBase := "Quantity (Base)";
      IF "Trade Item" <> '' THEN BEGIN
        IF NOT TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN TradeItemRec.INIT;
        BaseUnit := UPPERCASE(TradeItemRec."Application Unit");
      END ELSE BEGIN
        IF NOT ItemRec.GET("Item No.") THEN ItemRec.INIT;
        BaseUnit := ItemRec."Base Unit of Measure";
      END;
    END;

    PROCEDURE HandleLookupItem@1100525005(lvFieldNo@1100525004 : Integer) lvRefresh : Boolean;
    VAR
      ItemRec@1100525001 : Record 27;
      ItemFrm@1100525000 : Page 31;
      BasicItemRec@1100525007 : Record 11012316;
      BasicItemFrm@1100525006 : Page 11012333;
      TradeItemRec@1100525010 : Record 11012317;
      TradeItemFrm@1100525009 : Page 11012334;
      lvTempPurchaseLine@1100525008 : TEMPORARY Record 39;
      lvRefDate@1100525005 : Date;
      lvDiscRef1@1100525003 : Code[20];
      lvDiscRef2@1100525002 : Code[20];
      g_ItemCode@1100525012 : Code[20];
      g_Vendor@1100525011 : Code[20];
      StrategicPurchMgt@1100525013 : Codeunit 11020211;
    BEGIN
      //**4PS
      IF lvFieldNo = FIELDNO("Item No.") THEN BEGIN
        IF ("Cost Type" = "Cost Type"::Material) OR ("Cost Type" = "Cost Type"::" ") THEN  //db, 11-02-11: M25031
          //IF "Plant Type" = '' THEN  //*C-028911.n  //*33895.o
            ItemFrm.LOOKUPMODE(TRUE);
        ItemFrm.DetermineInterface(DATABASE::"Purchase Line",
          "Document No.",Element,"Job No.","Service Order No.","Document Type",'','',"Line No.",'','');
        IF ItemRec.GET("Item No.") THEN
          ItemFrm.SETRECORD(ItemRec);
        IF ItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          xRec := Rec;  //db, 27-06-11: M27297
          CheckCostTypeCondition;  //db, 11-02-11: M25031
          IF ("Cost Type" = "Cost Type"::Material) OR ("Cost Type" = "Cost Type"::" ") THEN BEGIN //call 26684
            ItemFrm.GETRECORD(ItemRec);
            VALIDATE("Item No.",ItemRec."No.");
          END;
        END ELSE BEGIN
          lvRefresh := ItemFrm.CheckMultiCopy;
        END;
      END;

      IF lvFieldNo = FIELDNO("Basic Item") THEN BEGIN
        CLEAR(BasicItemFrm);
        IF ("Cost Type" = "Cost Type"::Material) OR ("Cost Type" = "Cost Type"::" ") THEN  //db, 11-02-11: M25031
          //IF "Plant Type" = '' THEN  //*C-028911.n    //*33895.o
            BasicItemFrm.LOOKUPMODE(TRUE);
        BasicItemFrm.SetSelection(DATABASE::"Purchase Line",
          "Document No.",Element,"Job No.","Service Order No.","Document Type",'','',"Line No.",'','');

        GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2);
        BasicItemFrm.SetReference(lvRefDate, lvDiscRef1, lvDiscRef2);

        BasicItemRec.InitLookup(BasicItemRec, "Basic Item", Manufacturer);
        BasicItemFrm.SETRECORD(BasicItemRec);

        IF BasicItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          xRec := Rec;  //db, 27-06-11: M27297
          CheckCostTypeCondition;  //db, 11-02-11: M25031
          IF ("Cost Type" = "Cost Type"::Material) OR ("Cost Type" = "Cost Type"::" ") THEN BEGIN //call 26684
            BasicItemFrm.GETRECORD(BasicItemRec);
            Manufacturer := BasicItemRec.Manufacturer;
            VALIDATE("Basic Item", BasicItemRec."Product Code");
          END;
        END ELSE BEGIN
          lvRefresh := BasicItemFrm.CheckMultiCopy;
        END;
      END;

      IF lvFieldNo = FIELDNO("Trade Item") THEN BEGIN
        IF "Item No." <> '' THEN BEGIN
          lvTempPurchaseLine.INIT;
          lvTempPurchaseLine."Document Type" := "Document Type";
          lvTempPurchaseLine."Document No." := "Document No.";
          lvTempPurchaseLine.VALIDATE("Item No.","Item No.");
          g_ItemCode := lvTempPurchaseLine."Trade Item";
          g_Vendor := lvTempPurchaseLine."Vendor (Trade Item)";
        END ELSE BEGIN
          g_ItemCode := '';
          g_Vendor := '';
        END;

        CLEAR(TradeItemFrm);
        IF ("Cost Type" = "Cost Type"::Material) OR ("Cost Type" = "Cost Type"::" ") THEN  //db, 11-02-11: M25031
          //IF "Plant Type" = '' THEN  //*C-028911.n    //*33895.o
            TradeItemFrm.LOOKUPMODE(TRUE);
        TradeItemFrm.SetSelection(DATABASE::"Purchase Line",
          "Document No.",Element,GetFilterVendor,"Job No.","Document Type","Service Order No.",'',"Line No.",'','',
          "Vendor (Trade Item)","Trade Item",Manufacturer,"Basic Item", g_ItemCode, g_Vendor);

        GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2);
        TradeItemFrm.SetReference(lvRefDate, lvDiscRef1, lvDiscRef2);

        TradeItemRec.InitLookup(TradeItemRec, "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)");
        TradeItemFrm.SetLimitedPurchaserFilter(
          StrategicPurchMgt.IsLimitedPurchaser("Document Type")); //**4PS.n
        TradeItemFrm.SETRECORD(TradeItemRec);

        IF TradeItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          xRec := Rec;  //db, 27-06-11: M27297
          CheckCostTypeCondition;  //db, 11-02-11: M25031
          IF ("Cost Type" = "Cost Type"::Material) OR ("Cost Type" = "Cost Type"::" ") THEN BEGIN //call 26684
            TradeItemFrm.GETRECORD(TradeItemRec);
            Manufacturer := TradeItemRec.Manufacturer;
            "Basic Item" := TradeItemRec."Product Code";
            "Vendor (Trade Item)" := TradeItemRec.Vendor;
            VALIDATE("Trade Item", TradeItemRec."Item Code");
          END;
        END ELSE BEGIN
          lvRefresh := TradeItemFrm.CheckMultiCopy;
        END;
      END;
      EXIT(lvRefresh);
    END;

    PROCEDURE HandleAssistEditItem@1100528305(lvFieldNo@1210190000 : Integer) lvRefresh : Boolean;
    VAR
      "2baMgt"@1100528300 : Codeunit 11012306;
      RecRef@1100528301 : RecordRef;
    BEGIN
      //**4PS
      IF lvFieldNo = FIELDNO("Trade Item") THEN BEGIN
        RecRef.GETTABLE(Rec);
        "2baMgt".RunModalDialogForMultipleItems("Vendor (Trade Item)", "Trade Item", RecRef);
        lvRefresh := TRUE;
      END;
    END;

    PROCEDURE HandleLookupUnit@1210190016();
    VAR
      ItemUnitRec@1210190000 : Record 5404;
      lvPlantUnitRec@1100485000 : Record 11012599;
      lvUnit@1210190001 : Code[10];
    BEGIN
      //**4PS
      IF (CheckPlantAcquisitionOrRent(Rec) = 0) THEN BEGIN
        ItemUnitRec.SetDocument(DATABASE::"Purchase Line", "Document Type", "Document No.", "Line No.");
        lvUnit := ItemUnitRec.HandleLookupUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)");
      END ELSE  BEGIN
        lvUnit := lvPlantUnitRec.HandleLookupUnit("Plant Type", "Unit of Measure Code", "Receiving Company", TRUE);
      END;

      IF (lvUnit <> '') AND (lvUnit <> "Unit of Measure Code") THEN BEGIN
        xRec := Rec; //db, 31-03-05: force update unit and avoid blanking price on new line
        VALIDATE("Unit of Measure Code", lvUnit);
      END;
    END;

    PROCEDURE CheckItemUnitConversion@1210190008();
    VAR
      SaveAgreement@1210190002 : Boolean;
      SaveItem@1100485000 : Code[20];
      DummyCode@1210190006 : Code[20];
      DummyTxt@1210190005 : Text[50];
      DummyDec@1210190004 : Decimal;
      DummyDat@1210190003 : Date;
    BEGIN
      //**4PS
      IF "Trade Item" <> '' THEN
        ItemTypeOpt := ItemTypeOpt::"Trade Item"
      ELSE
        IF "Basic Item" <> '' THEN
          ItemTypeOpt := ItemTypeOpt::"Basic Item"
        ELSE
          IF "Item No." <> '' THEN
            ItemTypeOpt := ItemTypeOpt::Item;

      ValidateCu.ValidateUnit(ItemTypeOpt,
        "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
        Quantity,"Unit of Measure Code","Qty. per Unit of Measure");

      IF ItemTypeOpt = ItemTypeOpt::Item THEN EXIT;

      IF NOT InvtSetup.GET THEN InvtSetup.INIT;
      IF ItemRec.GET(InvtSetup."Default Item") THEN BEGIN
        ValidateCu.ValidateItem(ItemTypeOpt,"Trade Item",DummyCode,Manufacturer,"Vendor (Trade Item)",
          "Basic Item",DummyCode,DummyTxt,DummyCode,"Unit Cost (LCY)",
          DummyDec,DummyDat,"Unit Price (LCY)",DummyTxt,DummyCode,
          DummyCode,DummyCode,DummyDat,'');
        ItemRec."Unit Cost" := "Unit Cost (LCY)";
        ItemRec."Unit Price" := "Unit Price (LCY)";
      //ItemRec.MODIFY;  //db, 29-06-09: M15425

        SaveItem := "Item No.";
        SaveAgreement := "Price Agreement";

        "Item No." := ItemRec."No.";
        "Price Agreement" := TRUE;

        UpdateUOMQtyPerStockQty;  //evaluate direct unit cost

        "Item No." := SaveItem;
        "Price Agreement" := SaveAgreement;
        IF "Item No." <> '' THEN
          GetItem;  //db, 26-03-15: restore global variable Item
      END;
    END;

    PROCEDURE CreatePurchOrderControl@1210190018(lDeleteOnly@1210190000 : Boolean);
    BEGIN
      //**4PS
      PurchOrderControlLine.CreatePurchOrderControlLines(Rec,lDeleteOnly,FALSE);
    END;

    PROCEDURE GetPlantPostingGroup@1210190019();
    VAR
      lvTypeNo@1100485000 : Integer;
      lvModeInEx@1100485001 : Code[1];
    BEGIN
      //**4PS
      IF "Plant Type" = '' THEN
        EXIT;

      CheckCompanyIC;
      PlantTypeRec.GET("Plant Type");

      IF "Plant No." = '' THEN BEGIN
        lvTypeNo := CheckPlantAcquisitionOrRent(Rec);
        IF (lvTypeNo <> 0) THEN
          lvModeInEx := COPYSTR('IE', lvTypeNo, 1);  //* Internal/External
      END;
      "Posting Group" := PlantTypeRec.PlantPostingGrp("Plant No.","Receiving Company",lvModeInEx);
      IF PlantTypeRec."Gen. Prod. Posting Group" <> '' THEN
        "Gen. Prod. Posting Group" := PlantTypeRec."Gen. Prod. Posting Group";
    END;

    PROCEDURE CheckPlantAcquisitionOrRent@1100485001(IPurchLineRec@1100485000 : Record 39) : Integer;
    BEGIN
      //**4PS
      WITH IPurchLineRec DO BEGIN
        IF ("Plant Type" <> '') AND ("Cost Component Plant" <> '') THEN BEGIN
          CheckCompanyIC;
          PlantSetup.GET;
          IF ("Cost Component Plant" = PlantSetup."Cost Component Acquisition") THEN
            EXIT(1);  //* Acquisition
          IF ("Cost Component Plant" = PlantSetup."Cost Component Rent") THEN
            EXIT(2);  //* Rent
        END;

        EXIT(0);
      END;
    END;

    PROCEDURE DeterminePlantVendorType@1100485025(IFillVendorPlantNo@1100485001 : Boolean);
    VAR
      lvInversePlantVendorType@1100485002 : Option;
      lvTypeNo@1100485000 : Integer;
    BEGIN
      //**4PS
      lvTypeNo := CheckPlantAcquisitionOrRent(Rec);
      PlantVendorType := PlantVendorRec.Type::Purchase;
      CASE lvTypeNo OF
        0:
          IF ("Cost Component Plant" = '') AND ("Plant Type" <> '') THEN BEGIN
            PlantTypeRec.GET("Plant Type");
            IF ("Plant No." <> '') THEN
              PlantNoRec.GET("Plant Type", "Plant No.");
            IF (("Plant No." <> '') AND PlantNoRec.External) OR (("Plant No." = '') AND PlantTypeRec.External) THEN
              PlantVendorType := PlantVendorRec.Type::Rent;
          END;
        2:
          PlantVendorType := PlantVendorRec.Type::Rent;
      END;

      IF (NOT IFillVendorPlantNo) OR ("Plant Type" = '') THEN
        EXIT;

      IF PlantVendorType = PlantVendorRec.Type::Purchase THEN
        lvInversePlantVendorType := PlantVendorRec.Type::Rent
      ELSE
        lvInversePlantVendorType := PlantVendorRec.Type::Purchase;

      IF PlantVendorRec.GET("Plant Type", "Buy-from Vendor No.", PlantVendorType) THEN
        "Vendor Plant No." := PlantVendorRec."Vendor Plant No."
      ELSE
        IF PlantVendorRec.GET("Plant Type", "Buy-from Vendor No.", lvInversePlantVendorType) THEN
          "Vendor Plant No." := '';
    END;

    PROCEDURE CheckICFMargin@1100485000() : Boolean;
    VAR
      lvPriceDiff@1100485000 : Decimal;
    BEGIN
      //**4PS
      lvPriceDiff := ABS("Line Amount" - "ICF Line Amount");
      IF lvPriceDiff <> 0 THEN BEGIN
        PurchSetup.GET;
        IF (PurchSetup."Margin Amount (Detail)" = 0) AND (PurchSetup."Margin % (Detail)" = 0) THEN
          EXIT(FALSE);
        IF PurchSetup."Margin Amount (Detail)" <> 0 THEN
          IF lvPriceDiff > PurchSetup."Margin Amount (Detail)" THEN
            EXIT(FALSE);
        IF PurchSetup."Margin % (Detail)" <> 0 THEN
          IF (100 * lvPriceDiff/"Line Amount") > PurchSetup."Margin % (Detail)" THEN
            EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CheckProjectStatus@1100485002(Posting@1100485000 : Boolean);
    VAR
      lvBlockingCodeRec@1100485001 : Record 11012027;
    BEGIN
      //**4PS
      IF "Job No." = '' THEN
        EXIT;

      CheckCompanyIC;
      ProjRec.GET("Job No.");

      IF ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
         (ProjRec."Blocking Code" <> '') AND
         ((ProjRec."Project Status" = ProjRec."Project Status"::"Technical Finished") OR
          (ProjRec."Project Status" = ProjRec."Project Status"::"Administrative Finished") OR
          ((ProjRec."Project Status" = ProjRec."Project Status"::Finished) AND ICProjSetupRec."Provisions at Closure")
         ) THEN
      BEGIN
        CASE "Document Type" OF
          "Document Type"::Order:
            IF "Document Type" = "Document Type"::Order THEN
              IF NOT Posting THEN
                lvBlockingCodeRec.Switch := lvBlockingCodeRec.Switch::"Purchase Order"
              ELSE
                lvBlockingCodeRec.Switch := lvBlockingCodeRec.Switch::"Purchase Receipt";
          "Document Type"::Invoice,"Document Type"::"Credit Memo":
            lvBlockingCodeRec.Switch := lvBlockingCodeRec.Switch::"Purchase Invoice";
        END;
        lvBlockingCodeRec.CheckBlocked(ProjRec."Blocking Code", lvBlockingCodeRec.Switch, ProjRec, TRUE);
      END ELSE BEGIN
        IF ICProjSetupRec."Provisions at Closure" THEN
          ProjRec.CheckProjectStatus(-1)
        ELSE
          ProjRec.CheckProjectStatus(1);
      END;

      IF NOT ICProjSetupRec."Post in Estim. Status allowed" THEN //call C001038
        IF ("Employee No." = '') AND
           ((ProjRec."Project Status" < ProjRec."Project Status"::Preparation) AND ("Document Type" > "Document Type"::Quote)) OR
           ((ProjRec."Project Status" > ProjRec."Project Status"::Production) AND ("Document Type" < "Document Type"::Order))
        THEN
          ERROR(Text11012003,ProjRec.TABLECAPTION,"Job No.",ProjRec.FIELDCAPTION("Project Status"),ProjRec."Project Status");
      //Hours of external employees must be accepted even though status is Preparation
    END;

    PROCEDURE CheckServiceOrderStatus@1100485003(Posting@1100485000 : Boolean);
    BEGIN
      //**4PS
      IF "Service Order No." = '' THEN
        EXIT;

      CheckCompanyIC;
      ServOrderRec.GET("Service Order No.");

      IF ("Document Type" = "Document Type"::Order) THEN BEGIN
        GetPurchHeader;
        IF (PurchHeader."Purchase Order Type" = PurchHeader."Purchase Order Type"::"Return Order") THEN BEGIN
          ServOrderRec.CheckStatus(1);
          EXIT;
        END;
      END;

      //IF ("Document Type" <= "Document Type"::Order) AND NOT Posting THEN
      //  ServOrderRec.CheckStatus(2)  //db, 15-05-13: C007505
      //ELSE
      //  ServOrderRec.CheckStatus(1);

      ServOrderRec.CheckStatus(1);  //db, 24-09-13: C009516 (conform check on project status)
    END;

    PROCEDURE CheckReturnOrderAdminCostLine@1100485004(IPurchHeaderRec@1100485001 : Record 38;IPurchLineRec@1100485000 : Record 39) : Boolean;
    VAR
      lvVendPostingGrpRec@1100485002 : Record 93;
      lvVendRec@1100525001 : Record 23;
      lvVendInvDiscRec@1100525000 : Record 24;
    BEGIN
      //**4PS
      WITH IPurchHeaderRec DO BEGIN
        IF ("Document Type" <> "Document Type"::Order) OR
           ("Purchase Order Type" <> "Purchase Order Type"::"Return Order") OR
           (IPurchLineRec."Item No." <> '') OR (IPurchLineRec."Basic Item" <> '') OR (IPurchLineRec."Trade Item" <> '') OR
      //     ("Vendor Posting Group" = '') OR  //14538.o
      //     (IPurchLineRec."No." = '') OR     //14538.o
           (IPurchLineRec.Type <> IPurchLineRec.Type::"G/L Account")
        THEN
          EXIT(FALSE);

        //14538.so
        //IF NOT lvVendPostingGrpRec.GET("Vendor Posting Group") THEN
        //  EXIT(FALSE);
        //IF (IPurchLineRec."No." <> lvVendPostingGrpRec."Service Charge Acc.") THEN
        //  EXIT(FALSE);
        //EXIT(TRUE);
        //14538.eo

        //14538.sn
        IF ("Vendor Posting Group" <> '') AND (IPurchLineRec."No." <> '') THEN BEGIN
          IF lvVendPostingGrpRec.GET("Vendor Posting Group") THEN BEGIN
            IF (IPurchLineRec."No." = lvVendPostingGrpRec."Service Charge Acc.") THEN
              EXIT(TRUE);
          END;
        END;

        IF IPurchLineRec."Shortcut Dimension 2 Code" <> '' THEN BEGIN
          IF NOT lvVendRec.GET(IPurchHeaderRec."Pay-to Vendor No.") THEN
            lvVendRec."Invoice Disc. Code" := '';
          IF lvVendRec."Invoice Disc. Code" <> '' THEN BEGIN
            lvVendInvDiscRec.RESET;
            lvVendInvDiscRec.SETRANGE(Code, lvVendRec."Invoice Disc. Code");
            lvVendInvDiscRec.SETRANGE("Cost Object Service Charge", IPurchLineRec."Shortcut Dimension 2 Code");
            IF NOT lvVendInvDiscRec.ISEMPTY THEN
              EXIT(TRUE);

            lvVendInvDiscRec.RESET;
            lvVendInvDiscRec.SETRANGE(Code, lvVendRec."Invoice Disc. Code");
            lvVendInvDiscRec.SETRANGE("Cost Object Small Order Charge", IPurchLineRec."Shortcut Dimension 2 Code");
            IF NOT lvVendInvDiscRec.ISEMPTY THEN
              EXIT(TRUE);

            lvVendInvDiscRec.RESET;
            lvVendInvDiscRec.SETRANGE(Code, lvVendRec."Invoice Disc. Code");
            lvVendInvDiscRec.SETRANGE("Cost Object Transport Charge", IPurchLineRec."Shortcut Dimension 2 Code");
            IF NOT lvVendInvDiscRec.ISEMPTY THEN
              EXIT(TRUE);

            lvVendInvDiscRec.RESET;
            lvVendInvDiscRec.SETRANGE(Code, lvVendRec."Invoice Disc. Code");
            lvVendInvDiscRec.SETRANGE("Cost Object Packing Charge", IPurchLineRec."Shortcut Dimension 2 Code");
            IF NOT lvVendInvDiscRec.ISEMPTY THEN
              EXIT(TRUE);

            //* Not (yet?) for "Cost Object Deleted Discount"
          END;
        END;
        EXIT(FALSE);
        //14538.en
      END;
    END;

    PROCEDURE CheckRelatedVendor@1100485005();
    VAR
      VendorRelationRec@1100485000 : Record 11012313;
      TradeItemRec@1100485001 : Record 11012317;
      InventorySetup@1210190000 : Record 313;
    BEGIN
      //**4PS
      GetPurchHeader;
      InventorySetup.GET; //mg, 11-10-11: M29687
      VendorRelationRec.SETCURRENTKEY("Vendor (Purchase)");
      VendorRelationRec.SETRANGE("Vendor (Purchase)", PurchHeader."Buy-from Vendor No.");
      IF InventorySetup."Vendor Filter" = InventorySetup."Vendor Filter"::Hard THEN
        VendorRelationRec.SETRANGE("Display Trade Items", TRUE); //mg, 11-10-11: M29687
      IF VendorRelationRec.FIND('-') THEN BEGIN
        REPEAT
         IF TradeItemRec.GET(VendorRelationRec.Code, "Trade Item") THEN BEGIN  //db, 26-02-09
           "Vendor (Trade Item)" := VendorRelationRec.Code;
           EXIT;
         END;
        UNTIL VendorRelationRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckDeliverableQuantity@1100485006() : Decimal;
    VAR
      TradeItemRec@1100485000 : Record 11012317;
      NextQuan@1100485001 : Decimal;
    BEGIN
      //**4PS
      IF "Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"] THEN
        EXIT(Quantity);

      IF ("Trade Item" = '') OR (Quantity <= 0) THEN
        EXIT(Quantity);

      TradeItemRec.GET("Vendor (Trade Item)", "Trade Item");
      IF TradeItemRec."Lot Size Quantity" = 0 THEN
        TradeItemRec."Lot Size Quantity" := 1;
      IF TradeItemRec."Application Unit Quantity" = 0 THEN
        TradeItemRec."Application Unit Quantity" := 1;

      IF TradeItemRec."Minimum Order Quantity" > 1 THEN BEGIN
        IF "Unit of Measure Code" = UPPERCASE(TradeItemRec."Packaging Unit") THEN
          IF TradeItemRec."Minimum Order Quantity" = TradeItemRec."Lot Size Quantity" THEN
            EXIT( ROUND(Quantity, TradeItemRec."Minimum Order Quantity", '>'));

        NextQuan := TradeItemRec."Minimum Order Quantity";
        IF (TradeItemRec."Application ID" = TradeItemRec."Order ID") AND
           (TradeItemRec."Application Unit Quantity" <> 0) THEN
          NextQuan := NextQuan * TradeItemRec."Application Unit Quantity";  //db, 06-01-10: M13789

        IF Quantity <= NextQuan THEN
          EXIT( NextQuan);
        REPEAT
          NextQuan := NextQuan + TradeItemRec."Lot Size Quantity";
        UNTIL NextQuan >= Quantity;
        EXIT( NextQuan);
      END;

      //mg.sc, 30-09-11: M28653
      IF "Unit of Measure Code" = UPPERCASE(TradeItemRec."Packaging Unit") THEN
        EXIT(ROUND(Quantity, TradeItemRec."Lot Size Quantity", '>'))
      ELSE
        EXIT(ROUND(Quantity, TradeItemRec."Application Unit Quantity", '>'));
      //mg.ec, 30-09-11: M28653
    END;

    PROCEDURE CheckSigns@1100485007();
    BEGIN
      //**4PS
      IF "Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"] THEN //Temporary for call 7432
        EXIT;
      IF gSkipCheckSigns THEN  //C001910
        EXIT;

      IF ROUND(Quantity * "Line Amount") < 0 THEN
        ERROR(Text11012018, FIELDCAPTION(Quantity), FIELDCAPTION("Line Amount"));
    END;

    PROCEDURE CheckCostTypeOrder@1100485008();
    VAR
      lvPurchLineRec@1100485000 : Record 39;
      lvPurchLineRec2@1100485001 : Record 39;
      lvText000@1100485002 : TextConst 'ENU=Only 1 Cost Type per Order allowed according to %1.';
    BEGIN
      //**4PS
      IF "Document Type" <> "Document Type"::Order THEN EXIT;
      IF "Cost Type" = "Cost Type"::" " THEN EXIT;
      PurchSetup.GET;
      IF NOT PurchSetup."Create Order by Cost Type" THEN EXIT;
      GetPurchHeader;
      //IF PurchHeader."Borrow from" THEN EXIT;
      IF PurchHeader."Hours Hire Order Type" <> PurchHeader."Hours Hire Order Type"::" " THEN EXIT;

      lvPurchLineRec.SETRANGE("Document Type", "Document Type");
      lvPurchLineRec.SETRANGE("Document No.", "Document No.");
      lvPurchLineRec.SETFILTER("Line No.", '<>%1', "Line No.");
      lvPurchLineRec.SETFILTER("Cost Type", '<>%1', "Cost Type"::" ");
      IF lvPurchLineRec.FINDFIRST THEN BEGIN
        lvPurchLineRec2.COPY(lvPurchLineRec);
        lvPurchLineRec2.SETFILTER("Cost Type", '%1..%2|%3..%4',
          "Cost Type"::Labor, lvPurchLineRec."Cost Type" - 1,
          lvPurchLineRec."Cost Type" + 1, "Cost Type"::Sundry);
        IF lvPurchLineRec2.FINDFIRST THEN BEGIN
          IF lvPurchLineRec2."Cost Type" <> lvPurchLineRec."Cost Type" THEN
            ERROR(lvText000, PurchSetup.TABLECAPTION);
        END ELSE BEGIN
          IF "Cost Type" <> lvPurchLineRec."Cost Type" THEN
            ERROR(lvText000, PurchSetup.TABLECAPTION);
        END;
      END;
    END;

    PROCEDURE UpdateAdviceOrderVendor@1100485009(IFillMode@1100485001 : Boolean);
    VAR
      lvAdviceOrderRec@1100485000 : Record 11012055;
    BEGIN
      //**4PS
      lvAdviceOrderRec.SETCURRENTKEY("Purchase Route Reference");
      lvAdviceOrderRec.SETRANGE("Purchase Route Reference", "Purchase Route Reference");
      lvAdviceOrderRec.SETRANGE(Processed, FALSE);
      IF lvAdviceOrderRec.FINDSET(TRUE,FALSE) THEN BEGIN
        IF IFillMode THEN
          lvAdviceOrderRec.Vendor := "Buy-from Vendor No."
        ELSE BEGIN
          IF (lvAdviceOrderRec.Vendor = "Buy-from Vendor No.") THEN
            lvAdviceOrderRec.Vendor := '';
        END;
        lvAdviceOrderRec.MODIFY;
      END;
    END;

    PROCEDURE FillMainProject@1100485010();
    BEGIN
      //**4PS
      IF "Job No." <> '' THEN BEGIN
        ProjRec.CHANGECOMPANY("Receiving Company");
        ProjRec.GET("Job No.");
        "Main Project No." := ProjRec."Main Project";
      END ELSE
        "Main Project No." := '';
    END;

    PROCEDURE GetItemSpecifications@1100485012();
    BEGIN
      //**4PS
      IF ItemRec.GET("Item No.") THEN BEGIN
        "Item Series" := ItemRec."Item Series";
        "Item Type" := ItemRec."Item Type";
        "Item Brand" := ItemRec."Item Brand";
      END;
    END;

    PROCEDURE UpdateCostControlStatus@1100485013(lUpdateAction@1100485002 : 'Insert,Modify,Delete');
    VAR
      ActionType@1100528400 : 'Insert,Modify,Delete';
    BEGIN
      //**4PS
      IF "Document Type" <> "Document Type"::Order THEN
        EXIT;

      CASE lUpdateAction OF
        lUpdateAction::Insert, lUpdateAction::Delete:
          BEGIN
            IF ("Receiving Company" = '') AND ("Job No." <> '') THEN BEGIN
              ProjRec.CHANGECOMPANY("Receiving Company");
              IF ProjRec.GET("Job No.") THEN
                ProjRec.UpdateCostControlStatus(lUpdateAction, xRec."Shortcut Dimension 2 Code", "Shortcut Dimension 2 Code");
            END;
          END;
        lUpdateAction::Modify:
          BEGIN
            //Update xRec, handle as delete
            IF ((xRec."Receiving Company" <> "Receiving Company") OR (xRec."Job No." <> "Job No.")) AND
               ((xRec."Receiving Company" = '') AND (xRec."Job No." <> '')) THEN BEGIN
              ProjRec.CHANGECOMPANY(xRec."Receiving Company");
              IF ProjRec.GET(xRec."Job No.") THEN
                ProjRec.UpdateCostControlStatus(lUpdateAction::Delete, xRec."Shortcut Dimension 2 Code", "Shortcut Dimension 2 Code");
            END;

            //Update Rec
            IF ("Receiving Company" = '') AND ("Job No." <> '') THEN BEGIN
              ProjRec.CHANGECOMPANY("Receiving Company");
              IF "Job No." = xRec."Job No." THEN
                ActionType := ActionType::Modify
              ELSE
                ActionType := ActionType::Insert;
              IF ProjRec.GET("Job No.") THEN
                ProjRec.UpdateCostControlStatus(ActionType, xRec."Shortcut Dimension 2 Code", "Shortcut Dimension 2 Code");
            END;
          END;
      END;
    END;

    PROCEDURE CheckPlantNoRentalRatesAllowed@1100485026(IPurchLineRec@1100485001 : Record 39) : Boolean;
    VAR
      lvPlantSetupRec@1100485002 : Record 11012550;
      lvPlantTypeRec@1100485003 : Record 11012551;
      lvPurchOrderRentalRateRec@1100485000 : Record 11020513;
    BEGIN
      //**4PS
      WITH IPurchLineRec DO BEGIN
        IF ("Document No." = '') OR ("Line No." = 0) OR ("Document Type" <> "Document Type"::Order) OR
           ("Plant Type" = '') OR ("Cost Component Plant" = '') OR
           ("Receiving Company" <> '') OR ("Plant No." <> '') OR
           (NOT lvPurchOrderRentalRateRec.READPERMISSION)
        THEN
          EXIT(FALSE);

        IF (CheckPlantAcquisitionOrRent(IPurchLineRec) <> 2) THEN  //* Inhuur (extern)
          EXIT(FALSE);

        lvPlantSetupRec.GET;
        IF ("Unit of Measure Code" <> '') AND ("Unit of Measure Code" = lvPlantSetupRec."Plant Hours Unit of Measure") THEN
          EXIT(FALSE);

        IF NOT lvPlantTypeRec.GET("Plant Type") THEN
          EXIT(FALSE);

        IF lvPlantTypeRec."Rental Type" = lvPlantTypeRec."Rental Type"::"Sales/Buy Back" THEN
          EXIT(FALSE);

        //* If with Plant No. is '0' in the Inventory table then rates on Plant No. level are not useful.
        IF lvPlantTypeRec.Bulk AND (NOT lvPlantSetupRec."Ext Bulk Plant with No. in Inv") THEN
          EXIT(FALSE);

        GetPurchHeader;
        IF PurchHeader."Amounts only" THEN
          EXIT(FALSE);
        IF PurchHeader."Hours Hire Order Type" = PurchHeader."Hours Hire Order Type"::Plant THEN
          EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE FormPurchOrderPlantRentalRate@1100485027(IPurchLineRec@1100485001 : Record 39;IConfirmMode@1100485002 : Boolean);
    VAR
      lvPurchOrderRentalRateRec@1100485000 : Record 11020513;
      lvText11012000@1100485003 : TextConst 'ENU=Do you want to enter an adjusted Rental Rate on Plant No. level for the new plant?';
      lvPurchOrderLineRentalRateFrm@1100485004 : Page 11020517;
    BEGIN
      //**4PS
      WITH IPurchLineRec DO BEGIN
        IF NOT CheckPlantNoRentalRatesAllowed(IPurchLineRec) THEN
          EXIT;

        IF IConfirmMode THEN BEGIN
          IF NOT CONFIRM(lvText11012000) THEN
            EXIT;
        END;

        lvPurchOrderRentalRateRec.FILTERGROUP(9);
        lvPurchOrderRentalRateRec.SETRANGE("Purchase Order No.", "Document No.");
        lvPurchOrderRentalRateRec.SETRANGE("Purch. Order Line No.", "Line No.");
        lvPurchOrderRentalRateRec.FILTERGROUP(0);
        IF lvPurchOrderRentalRateRec.ISEMPTY THEN BEGIN
          lvPurchOrderRentalRateRec."Purchase Order No." := "Document No.";
          lvPurchOrderRentalRateRec."Purch. Order Line No." := "Line No.";
          lvPurchOrderRentalRateRec.INSERT;
        END;
        lvPurchOrderLineRentalRateFrm.SETTABLEVIEW(lvPurchOrderRentalRateRec);
        lvPurchOrderLineRentalRateFrm.SetPurchLineData(IPurchLineRec);
        lvPurchOrderLineRentalRateFrm.RUN;
      END;
    END;

    PROCEDURE DeletePurchOrderPlntRentalRate@1100485028();
    VAR
      lvPurchOrderRentalRateRec@1100485000 : Record 11020513;
    BEGIN
      //**4PS
      IF ("Document Type" <> "Document Type"::Order) THEN
        EXIT;

      IF (lvPurchOrderRentalRateRec.READPERMISSION) THEN BEGIN
        lvPurchOrderRentalRateRec.SETRANGE("Purchase Order No.", "Document No.");
        lvPurchOrderRentalRateRec.SETRANGE("Purch. Order Line No.", "Line No.");
        lvPurchOrderRentalRateRec.DELETEALL;
      END;
    END;

    PROCEDURE CheckResetPurchOrderInTO@1100485029();
    VAR
      lvTransOrderRec@1100485000 : Record 11020505;
      lvPostedTransOrderRec@1100485001 : Record 11020507;
      lvTransRideRec@1100525000 : Record 11020517;
      lvPurchOrderLineRec@1100485002 : Record 39;
    BEGIN
      //**4PS
      //* Check/reset purchase order no. in the plant transport order/ride
      //* Permissions for TO-tables are set in the table properties
      IF ("Document Type" <> "Document Type"::Order) THEN
        EXIT;

      lvPurchOrderLineRec.SETRANGE("Document Type", "Document Type");
      lvPurchOrderLineRec.SETRANGE("Document No.", "Document No.");
      lvPurchOrderLineRec.SETFILTER("Line No.", '<>%1', "Line No.");

      IF "Plant Transport Order No." <> '' THEN BEGIN
        lvPurchOrderLineRec.SETRANGE("Plant Transport Order No.", "Plant Transport Order No.");
        IF NOT lvPurchOrderLineRec.FINDFIRST THEN BEGIN  //* If not on other purch.lines then reset Purch.Order
          IF lvTransOrderRec.GET("Plant Transport Order No.") THEN BEGIN
            IF lvTransOrderRec."Purchase Order" = "Document No." THEN BEGIN
              lvTransOrderRec."Purchase Order" := '';
              lvTransOrderRec.MODIFY;
            END;
          END ELSE BEGIN
            IF lvPostedTransOrderRec.GET("Plant Transport Order No.") THEN BEGIN
              IF lvPostedTransOrderRec."Purchase Order" = "Document No." THEN BEGIN
                lvPostedTransOrderRec."Purchase Order" := '';
                lvPostedTransOrderRec.MODIFY;
              END;
            END;
          END;
        END;
        lvPurchOrderLineRec.SETRANGE("Plant Transport Order No.");  //* Reset filter
      END;

      IF "Plant Transport Ride No." <> '' THEN BEGIN
        lvPurchOrderLineRec.SETRANGE("Plant Transport Ride No.", "Plant Transport Ride No.");
        IF NOT lvPurchOrderLineRec.FINDFIRST THEN BEGIN  //* If not on other purch.lines then reset Purch.Order
          IF lvTransRideRec.GET("Plant Transport Ride No.") THEN BEGIN
            IF lvTransRideRec."Purchase Order" = "Document No." THEN BEGIN
              lvTransRideRec."Purchase Order" := '';
              lvTransRideRec.MODIFY;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE AssistEditItem@1100485014() : Boolean;
    VAR
      lvItemRec@1100485002 : Record 27;
      lvVendorItemRec@1100485001 : Record 99;
      lvItemFrm@1100485000 : Page 31;
    BEGIN
      //**4PS
      IF ("Cost Type" = "Cost Type"::Material) OR ("Cost Type" = "Cost Type"::" ") THEN
        lvItemFrm.LOOKUPMODE(TRUE);

      lvItemFrm.DetermineInterface(DATABASE::"Purchase Line",
        "Document No.",Element,"Job No.","Service Order No.","Document Type",'','',"Line No.",'','');

      IF "Buy-from Vendor No." = '' THEN BEGIN
        GetPurchHeader();
        "Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
      END;

      lvVendorItemRec.SETRANGE("Vendor No.", "Buy-from Vendor No.");
      IF lvVendorItemRec.FINDSET THEN BEGIN  //db, 18-06-07 (call 8817)
        REPEAT
          IF lvItemRec.GET(lvVendorItemRec."Item No.") THEN
            lvItemRec.MARK := TRUE;
        UNTIL lvVendorItemRec.NEXT = 0;
        lvItemRec.MARKEDONLY(TRUE);
      END ELSE BEGIN
        lvItemRec.SETCURRENTKEY("Vendor No.");
        lvItemRec.SETRANGE("Vendor No.", "Buy-from Vendor No.");
        lvItemRec.SETRANGE("Created From Nonstock Item", TRUE);
      END;

      lvItemRec."Vendor No." := "Buy-from Vendor No.";
      lvItemRec."No." := "Item No.";
      lvItemFrm.SETRECORD(lvItemRec);
      lvItemFrm.SETTABLEVIEW(lvItemRec);

      IF lvItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
        lvItemFrm.GETRECORD(lvItemRec);
        VALIDATE("Cost Type", "Cost Type"::Material);
        VALIDATE("Item No.", lvItemRec."No.");
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE CheckDeliveryTime@1100485015(lvFieldNo@1100485005 : Integer);
    VAR
      lvPeriod@1100485000 : Text[30];
      lvOrderDate@1100485001 : Date;
      lvShipmentDate@1100485002 : Date;
      lvExpectedDate@1100485003 : Date;
      lvText000@1100485004 : TextConst 'ENU=Item can not be delivered before %1 (%2), expected %3.';
    BEGIN
      //**4PS
      IF NOT ("Document Type" IN ["Document Type"::Quote, "Document Type"::Order]) THEN
        EXIT;

      IF lvFieldNo = FIELDNO("Item No.") THEN
        lvPeriod := ValidateCu.GetDeliveryTimeItem("Item No.", Manufacturer, "Basic Item", "Vendor (Trade Item)", "Trade Item",
          "Document Type", "Document No.", "Buy-from Vendor No.")
      ELSE
        lvPeriod := FORMAT("Lead Time Calculation");

      GetPurchHeader;

      lvOrderDate := "Order Date";
      IF lvOrderDate = 0D THEN
        lvOrderDate := PurchHeader."Order Date";
      IF lvOrderDate = 0D THEN  //Order date will no be filled for quote
        lvOrderDate := PurchHeader."Document Date";
      IF lvOrderDate = 0D THEN
        lvOrderDate := TODAY;

      lvShipmentDate := PurchHeader."Expected Receipt Date";
      IF lvPeriod = '' THEN
        lvExpectedDate := lvShipmentDate
      ELSE
        lvExpectedDate := CalendarMgmt.CalcDateBOC(
          '+' + lvPeriod, lvOrderDate,
          CalChange."Source Type"::Company, '', '',
          CalChange."Source Type"::Vendor, "Buy-from Vendor No.", '', TRUE);  //db, 15-04-08: M10733

      IF PurchHeader."Expected Receipt Date" = 0D THEN BEGIN  //db, 15-04-08: M10733 (correction M10863)
        "Expected Receipt Date" := lvExpectedDate;
        "Order Date" := lvOrderDate;
        "Expected Receipt Date" := lvExpectedDate;
        IF lvFieldNo <> FIELDNO("Lead Time Calculation") THEN
          EVALUATE("Lead Time Calculation", lvPeriod);
      END;

      { //gjk, 29-02-08: M10863 (correction M7500)
      "Order Date" := lvOrderDate;
      "Expected Receipt Date" := lvExpectedDate;
      IF lvFieldNo <> FIELDNO("Lead Time Calculation") THEN
        EVALUATE("Lead Time Calculation", lvPeriod);
      }

      IF (lvExpectedDate > lvShipmentDate) AND (lvShipmentDate <> 0D) THEN BEGIN
        IF (lvFieldNo <> 0) THEN
          MESSAGE(lvText000,PurchHeader.FIELDCAPTION("Expected Receipt Date"),PurchHeader."Expected Receipt Date",lvExpectedDate);
      END;
    END;

    PROCEDURE ValidateShelf@1100485016();
    BEGIN
      //**4PS
      "Shelf No." := '';
      IF "Location Code" <> '' THEN BEGIN
        IF NOT SKU.GET("Location Code","Item No.","Variant Code") THEN
          SKU.INIT;
        "Shelf No." := SKU."Shelf No.";
      END;
      IF "Shelf No." = '' THEN
        IF Item.GET("Item No.") THEN
          "Shelf No." := Item."Shelf No.";
    END;

    PROCEDURE PrevExtRentedPlantInvoicedTo@1100485018() : Date;
    VAR
      lvPlantSetupRec@1100485000 : Record 11012550;
      lvPlantNoRec@1100485001 : Record 11012552;
    BEGIN
      //**4PS
      IF NOT ("Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"]) THEN
        EXIT(0D);
      IF ("Receiving Company" <> '') OR ("Plant Type" = '') OR ("Plant No." = '') OR ("Cost Component Plant" = '') THEN
        EXIT(0D);
      IF NOT lvPlantSetupRec.GET THEN
        EXIT(0D);
      IF ("Cost Component Plant" <> lvPlantSetupRec."Cost Component Rent") THEN
        EXIT(0D);

      IF NOT lvPlantNoRec.GET("Plant Type", "Plant No.") THEN
        EXIT(0D)
      ELSE
        EXIT(lvPlantNoRec."Ext. Rented Invoiced to");
    END;

    PROCEDURE GetTranslatedPlantDesc@1100485017(MaxLen@1100529000 : Integer) : Text[50];
    VAR
      lvPlantNoRec@1100485000 : Record 11012552;
      lvPlantTransRec@1100485001 : Record 11012542;
      lvVendRec@1100485002 : Record 23;
      lvPlantTypeRec@1100485003 : Record 11012551;
    BEGIN
      //**4PS
      //* Get translated plant description with the following priority:
      //* 1 Plant No. descriprion in language of Vendor
      //* 2 Plant type description in language of Vendor
      //* 3 Plant No. description of plant number card
      IF "Receiving Company" <> '' THEN BEGIN
        lvPlantTypeRec.CHANGECOMPANY("Receiving Company");
        lvPlantNoRec.CHANGECOMPANY("Receiving Company");
        lvPlantTransRec.CHANGECOMPANY("Receiving Company");
      END;
      IF ("Plant Type" <> '') AND ("Buy-from Vendor No." <> '') THEN BEGIN
        IF lvVendRec.GET("Buy-from Vendor No.") THEN BEGIN
          IF lvVendRec."Language Code" <> '' THEN BEGIN
            //IF lvPlantTransRec.GET("Plant Type","Plant No.",lvVendRec."Language Code") THEN BEGIN  //DP00241.o (27089)
            //  lvDescription := lvPlantTransRec.Translation;
            //DP00241.sn (27089)
            IF lvPlantTransRec.GET(lvPlantTransRec.Type::PlantType,"Plant Type","Plant No.",lvVendRec."Language Code") THEN BEGIN
              IF lvPlantTransRec.Translation <> '' THEN
                EXIT(COPYSTR(lvPlantTransRec.Translation, 1, MaxLen));
            END;
            //DP00241.en
            //IF lvPlantTransRec.GET("Plant Type",'',lvVendRec."Language Code") THEN BEGIN  //DP00241.o (27089)
            //  lvDescription := lvPlantTransRec.Translation;
            //DP00241.sn (27089)
            IF lvPlantTransRec.GET(lvPlantTransRec.Type::PlantNo,"Plant Type",'',lvVendRec."Language Code") THEN BEGIN
              IF lvPlantTransRec.Translation <> '' THEN
                EXIT(COPYSTR(lvPlantTransRec.Translation, 1, MaxLen));
            END;
            //DP00241.en
          END;
        END;
      END;
      IF "Plant No." <> '' THEN BEGIN
        IF lvPlantNoRec.GET("Plant Type", "Plant No.") THEN
          EXIT(lvPlantNoRec.Description);
      END;
      IF lvPlantTypeRec.GET("Plant Type") THEN
        EXIT(lvPlantTypeRec.Description);
      EXIT('');
    END;

    PROCEDURE UpdateBlanketContractLinePrice@1100485020();
    BEGIN
      //**4PS
      UpdateDirectUnitCost(0);
    END;

    PROCEDURE CheckCostCompServOrderType@1100485019();
    VAR
      lvCostCompRec@1100485000 : Record 11012012;
    BEGIN
      //**4PS
      lvCostCompRec.CheckDefaultCostComponent("Service Order No.", "Cost Component", "Receiving Company", "Cost Type"-1,
        "Additional Cost (Service)");  //db, 24-02-10
    END;

    PROCEDURE GetVendorPreferenceAccountNo@1100485021();
    VAR
      lvVendRec@1100485000 : Record 23;
      lvPurchHeaderRec@1100485001 : Record 38;
    BEGIN
      //**4PS
      //* Only fill if account is still empty, because the preference account no. is a default value for a purchase line.
      IF ("Document No." <> '') AND (Type = Type::"G/L Account") AND ("No." = '') AND
         ("Job No." = '') AND ("Service Order No." = '') AND ("Plant Type" = '')
      THEN BEGIN
        IF lvPurchHeaderRec.GET("Document Type", "Document No.") THEN BEGIN
          IF lvVendRec.GET(lvPurchHeaderRec."Buy-from Vendor No.") THEN BEGIN
            IF lvVendRec."Preference Account No." <> '' THEN BEGIN
              VALIDATE("No.", lvVendRec."Preference Account No.");
              //Call C-028505
              IF (Quantity = 0) AND NOT lvPurchHeaderRec."Amounts only" THEN
                VALIDATE(Quantity, 1);
              //
            END;
          END;
        END;
      END;
    END;

    PROCEDURE GetReferenceData@1100485022(VAR lvRefDate@1100485000 : Date;VAR lvDiscRef1@1100485001 : Code[20];VAR lvDiscRef2@1100485002 : Code[20]);
    BEGIN
      //**4PS
      IF "Service Order No." <>'' THEN BEGIN
        ServOrderRec.CHANGECOMPANY("Receiving Company");
        ServOrderRec.GET("Service Order No.");
        lvRefDate := ValidateCu.GetRefDateServOrder(ServOrderRec);
      //  lvDiscRef1 := ServOrderRec."Purch Discount Term Group 1";
      //  lvDiscRef2 := ServOrderRec."Purch Discount Term Group 2";
      END ELSE BEGIN
        IF "Job No." <>'' THEN BEGIN
          ProjRec.CHANGECOMPANY("Receiving Company");
          ProjRec.GET("Job No.");
          lvRefDate := ValidateCu.GetRefDateProject(ProjRec);
          lvDiscRef1 := ProjRec."Purch Discount Term Group 1";
          lvDiscRef2 := ProjRec."Purch Discount Term Group 2";
        END;
      END;
    END;

    PROCEDURE GetFilterVendor@1100525000() VendorFilter@11012000 : Text[250];
    VAR
      VendorRec@11012011 : Record 23;
      VendorRelationRec@1100485000 : Record 11012313;
      InventorySetup@1210190000 : Record 313;
    BEGIN
      //**4PS
      VendorFilter := "Vendor (Trade Item)";
      IF VendorFilter = '' THEN BEGIN
        InventorySetup.GET; //mg, 11-10-11: M29687
        GetPurchHeader;
        VendorRelationRec.SETCURRENTKEY("Vendor (Purchase)");
        VendorRelationRec.SETRANGE("Vendor (Purchase)", PurchHeader."Buy-from Vendor No.");
        IF InventorySetup."Vendor Filter" = InventorySetup."Vendor Filter"::Hard THEN
          VendorRelationRec.SETRANGE("Display Trade Items", TRUE); //mg, 11-10-11: M29687
        IF VendorRelationRec.FINDSET THEN
          REPEAT
            IF VendorFilter = '' THEN
              VendorFilter := VendorRelationRec.Code
            ELSE
              IF STRLEN(VendorFilter) + STRLEN(VendorRelationRec.Code) < MAXSTRLEN(VendorFilter) THEN  //db, 27-01-14: T004213
                VendorFilter := VendorFilter + '|' + VendorRelationRec.Code;
          UNTIL VendorRelationRec.NEXT = 0;

        VendorRec.GET(PurchHeader."Buy-from Vendor No.");
        IF (VendorRec."Main Vendor" <> '') AND (VendorRec."Main Vendor" <> VendorRec."No.") THEN BEGIN
          VendorRelationRec.SETRANGE("Vendor (Purchase)", VendorRec."Main Vendor");
          IF VendorRelationRec.FINDSET THEN
            REPEAT
              IF VendorFilter = '' THEN
                VendorFilter := VendorRelationRec.Code
              ELSE
                IF STRLEN(VendorFilter) + STRLEN(VendorRelationRec.Code) < 20 THEN
                  VendorFilter := VendorFilter + '|' + VendorRelationRec.Code;
            UNTIL VendorRelationRec.NEXT = 0;
        END;
      END;
      EXIT(VendorFilter);
    END;

    PROCEDURE ValidateItemDiscount@1100525001(ItemDisc@1100525002 : Decimal);
    VAR
      lvUnitCost@1100525000 : Decimal;
      lvItemRec@1100525001 : Record 27;
      CurrExchRate@1100525004 : Record 330;
    BEGIN
      //**4PS
      lvUnitCost := "Unit Price (LCY)" * (100-ItemDisc) / 100;

      GetPurchHeader;
      IF PurchHeader."Currency Code" <> '' THEN
        lvUnitCost := CurrExchRate.ExchangeAmtLCYToFCY(
          1,PurchHeader."Job No.", GetDate,PurchHeader."Currency Code",
          lvUnitCost,PurchHeader."Currency Factor",FALSE);

      VALIDATE("Direct Unit Cost", lvUnitCost);  //sometimes including change of Unit Cost (LCY)

      IF PurchHeader."Currency Code" <> '' THEN
        lvUnitCost := CurrExchRate.ExchangeAmtFCYToLCY(
          1,PurchHeader."Job No.", GetDate,PurchHeader."Currency Code",
          lvUnitCost,PurchHeader."Currency Factor",FALSE);

      IF Type = Type::Item THEN BEGIN
        IF NOT lvItemRec.GET("Item No.") THEN lvItemRec.INIT;
        IF lvItemRec."Costing Method" <> lvItemRec."Costing Method"::Standard THEN
          VALIDATE("Unit Cost (LCY)", lvUnitCost);
      END ELSE BEGIN
        VALIDATE("Unit Cost (LCY)", lvUnitCost);
      END;
    END;

    PROCEDURE CalculateCostPriceLCY@1100525004();
    BEGIN
      //**4PS
      IF "Unit Price (LCY)" <> 0 THEN
        "Unit Cost (LCY)" := "Unit Price (LCY)" - (("Unit Price (LCY)"/100) * "Discount % (Item)");

      CalculateDirectUnitCost;
    END;

    PROCEDURE CalculateItemDiscount@1100525003();
    VAR
      lvUnitCost@1100525000 : Decimal;
      Currency2@1210190000 : Record 4;
    BEGIN
      //**4PS
      IF "Unit Price (LCY)" <> 0 THEN BEGIN
        IF (CurrFieldNo = FIELDNO("Unit Cost (LCY)")) THEN
          lvUnitCost := "Unit Cost (LCY)"
        ELSE BEGIN
        //  lvUnitCost := "Direct Unit Cost";
          GetPurchHeader;
          Currency2.InitRoundingPrecision;  // C000223.n
          IF PurchHeader."Currency Code" <> '' THEN BEGIN
            PurchHeader.TESTFIELD("Currency Factor");
            lvUnitCost := ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                1,PurchHeader."Job No.", GetDate,"Currency Code",
                "Direct Unit Cost",PurchHeader."Currency Factor",FALSE),
                Currency2."Amount Rounding Precision"); // C000223.n (add ROUND)
          END ELSE
            lvUnitCost := "Direct Unit Cost";
        END;
        "Discount % (Item)" := (("Unit Price (LCY)" - lvUnitCost) / "Unit Price (LCY)") * 100;
      END;

      CalculateDirectUnitCost;
    END;

    PROCEDURE CalculateDirectUnitCost@1100525002();
    VAR
      lvUnitCost@1100525000 : Decimal;
      lvUnitPrice@1100525001 : Decimal;
      lvFieldNo@1100525002 : Integer;
      CurrExchRate@1100525004 : Record 330;
      Currency2@1210190000 : Record 4;
    BEGIN
      //**4PS
      lvUnitCost := "Unit Cost (LCY)";
      lvUnitPrice := "Unit Price (LCY)";

      IF "Currency Code" <> '' THEN BEGIN
        IF ("Document Type" <> PurchHeader."Document Type") OR ("Document No." <> PurchHeader."No.") THEN
          GetPurchHeader;
        IF "Order Date" = 0D THEN
          "Order Date" := WORKDATE;
        Currency2.InitRoundingPrecision;  // C000223.n
        lvUnitCost := ROUND(CurrExchRate.ExchangeAmtLCYToFCY(
          1,PurchHeader."Job No.", "Order Date","Currency Code",
          lvUnitCost,PurchHeader."Currency Factor",FALSE),
          Currency2."Amount Rounding Precision"); // C000223.n (add ROUND)
      END;
      IF (CurrFieldNo = FIELDNO("Unit Cost (LCY)")) OR
         (CurrFieldNo = FIELDNO("Unit Price (LCY)")) OR
         (CurrFieldNo = FIELDNO("Discount % (Item)")) THEN BEGIN
        lvFieldNo := CurrFieldNo;
        CurrFieldNo := 0;  //avoid recursion
        VALIDATE("Direct Unit Cost", lvUnitCost);
        IF (lvFieldNo <> FIELDNO("Unit Cost (LCY)")) THEN BEGIN
          IF Type = Type::Item THEN
            ItemRec.GET("Item No.")
          ELSE
            ItemRec.INIT;
          IF ItemRec."Costing Method" <> ItemRec."Costing Method"::Standard THEN  //avoid error (text010)
            VALIDATE("Unit Cost (LCY)", lvUnitCost);
        END;
        IF (lvFieldNo = FIELDNO("Unit Price (LCY)")) THEN
          "Unit Price (LCY)" := lvUnitPrice;
      END;
    END;

    PROCEDURE OnLookupDim1Code@1100525009(iEditable@1100525000 : Boolean);
    BEGIN
      //**4PS
      CheckCompanyIC;
      DimVal1Rec.Code := "Shortcut Dimension 1 Code";
      DimVal1Rec.SETRANGE("Global Dimension No.",1);
      IF NOT iEditable THEN
        PAGE.RUNMODAL(0, DimVal1Rec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, DimVal1Rec) = ACTION::LookupOK THEN
          VALIDATE("Shortcut Dimension 1 Code", DimVal1Rec.Code);
      END;
    END;

    PROCEDURE OnLookupDim2Code@1100525010(iEditable@1100525000 : Boolean);
    VAR
      PurchLine@1210190000 : Record 39;
    BEGIN
      //**4PS
      CheckCompanyIC;
      //**4PS DP00387 DimVal2 is replaced by DimVal2Rec --> in concordence with the Validate Trigger
      DimVal2Rec.Code := "Shortcut Dimension 2 Code";   //**4PS DP00387 DimVal2 changed into DimVal2Rec
      DimVal2Rec.SETRANGE("Global Dimension No.",2);   //**4PS DP00387 changed
      IF "Cost Type" <> "Cost Type"::" " THEN
        DimVal2Rec.SETRANGE("Cost Type", "Cost Type"-1)    //**4PS DP00387 changed
      ELSE
        DimVal2Rec.SETFILTER("Cost Type", '<%1', DimVal2Rec."Cost Type"::Revenue);//**4PS DP00387 changed
      IF "Job No." <> '' THEN
        DimVal2Rec.SETRANGE("Project Filter","Job No.");    //**4PS DP00387 changed
      IF "Receiving Company" = '' THEN
        DimVal2Rec.SETRANGE("Company Filter")
      ELSE
        DimVal2Rec.SETRANGE("Company Filter", "Receiving Company");  //**4PS DP00387 changed
      IF NOT iEditable THEN
        PAGE.RUNMODAL(PAGE::"Cost Object List", DimVal2Rec)        //**4PS DP00387 changed
      ELSE BEGIN
        xRec."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code"; //call 26684
        xRec."Job No." := "Job No."; //call 26684
        IF PAGE.RUNMODAL(PAGE::"Cost Object List", DimVal2Rec) = ACTION::LookupOK THEN BEGIN    //**4PS DP00387 changed
          IF NOT PurchLine.GET("Document Type", "Document No.", "Line No.") THEN
            xRec."Cost Type" := "Cost Type"::" ";  //db, 11-02-11: M25031
          VALIDATE("Shortcut Dimension 2 Code", DimVal2Rec.Code);          //**4PS DP00387 changed
        END;
      END;
    END;

    PROCEDURE OnLookupJobNo@1100525006(iEditable@1100525000 : Boolean);
    VAR
      PageNo@1100525001 : Integer;
    BEGIN
      //**4PS
      CheckCompanyIC;
      IF "Job No." <> '' THEN
        ProjRec."No." := "Job No.";
      IF RefersToOtherCompany THEN
        PageNo := PAGE::"Job List IC";
      IF NOT iEditable THEN
        PAGE.RUNMODAL(PageNo, ProjRec)
      ELSE BEGIN
        xRec."Job No." := "Job No."; //call 26684
        IF PAGE.RUNMODAL(PageNo, ProjRec) = ACTION::LookupOK THEN BEGIN
          IF ("Service Order No." = '') THEN
            VALIDATE("Job No.", ProjRec."No.");
        END;
      END;
    END;

    PROCEDURE OnLookupExtensionContract@1100525007(iEditable@1100525000 : Boolean);
    BEGIN
      //**4PS
      CheckCompanyIC;
      ExtensionContract."Project No." := "Job No.";
      ExtensionContract."Contract No." := "Extension Contract";
      ExtensionContract.SETRANGE("Project No.", "Job No.");
      IF NOT iEditable THEN
        PAGE.RUNMODAL(0, ExtensionContract)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, ExtensionContract) = ACTION::LookupOK THEN
          VALIDATE("Extension Contract", ExtensionContract."Contract No.");
      END;
    END;

    PROCEDURE OnLookupElement@1100525008(iEditable@1100525000 : Boolean);
    BEGIN
      //**4PS
      CheckCompanyIC;
      ProjElemRec."Project No." := "Job No.";
      ProjElemRec.Element := Element;
      ProjElemRec.SETRANGE("Project No.", "Job No.");
      IF NOT iEditable THEN
        PAGE.RUNMODAL(0, ProjElemRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, ProjElemRec) = ACTION::LookupOK THEN
          VALIDATE(Element, ProjElemRec.Element);
      END;
    END;

    PROCEDURE OnLookupServiceOrderNo@1100525011(iEditable@1100525000 : Boolean);
    BEGIN
      //**4PS
      CheckCompanyIC;
      ServOrderRec."No." := "Service Order No.";
      IF NOT iEditable THEN
        PAGE.RUNMODAL(0, ServOrderRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, ServOrderRec) = ACTION::LookupOK THEN BEGIN
          xRec."Service Order No." := '';  //db, 07-06-10: M19676
          VALIDATE("Service Order No.", ServOrderRec."No.");
        END;
      END;
    END;

    PROCEDURE OnLookupPlantType@1100525034(EditableMode@1100525000 : Boolean);
    BEGIN
      //**4PS
      CheckCompanyIC;
      PlantTypeRec.Code := "Plant Type";
      IF NOT EditableMode THEN
        PAGE.RUNMODAL(0,PlantTypeRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0,PlantTypeRec) = ACTION::LookupOK THEN
          VALIDATE("Plant Type", PlantTypeRec.Code);
      END;
    END;

    PROCEDURE OnLookupPlantNo@1100525036(EditableMode@1100525000 : Boolean);
    BEGIN
      //**4PS
      CheckCompanyIC;
      PlantNoRec.SETRANGE("Plant Type", "Plant Type");
      PlantNoRec."Plant Type" := "Plant Type";
      PlantNoRec."No." := "Plant No.";
      IF NOT EditableMode THEN
        PAGE.RUNMODAL(0,PlantNoRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0,PlantNoRec) = ACTION::LookupOK THEN
          VALIDATE("Plant No.", PlantNoRec."No.");
      END;
    END;

    PROCEDURE UpdateBlanketOrderLine@1100525013();
    VAR
      PurchLine@1100525000 : Record 39;
      BlanketOrderLine@1100525002 : Record 39;
      QuantityOnOrders@1100525001 : Decimal;
      NewQuantity@1100525003 : Decimal;
    BEGIN
      //**4PS
      EXIT;  //db, 18-03-10: M18120
      IF ("Blanket Order No."  = '') OR ("Blanket Order Line No." = 0) THEN
        EXIT;

      PurchLine.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
      PurchLine.SETRANGE("Blanket Order No.","Blanket Order No.");
      PurchLine.SETRANGE("Blanket Order Line No.","Blanket Order Line No.");
      QuantityOnOrders := 0;
      IF PurchLine.FINDSET THEN
        REPEAT
          IF NOT ((PurchLine."Document Type" = "Document Type") AND
            (PurchLine."Document No." = "Document No.") AND
            (PurchLine."Line No." = "Line No."))
          THEN BEGIN
            IF PurchLine."Document Type" IN
              [PurchLine."Document Type"::"Return Order",
              PurchLine."Document Type"::"Credit Memo"]
            THEN
              QuantityOnOrders := QuantityOnOrders - PurchLine."Outstanding Qty. (Base)"
            ELSE
              QuantityOnOrders := QuantityOnOrders + PurchLine."Outstanding Qty. (Base)";
          END;
        UNTIL PurchLine.NEXT = 0;

      BlanketOrderLine.GET(BlanketOrderLine."Document Type"::"Blanket Order","Blanket Order No.","Blanket Order Line No.");
      NewQuantity :=
        BlanketOrderLine."Quantity (Base)" -
        (QuantityOnOrders + BlanketOrderLine."Qty. Received (Base)" + "Outstanding Qty. (Base)");
      IF (BlanketOrderLine.Quantity * NewQuantity) <= 0 THEN
        NewQuantity := 0;
      IF NewQuantity <> "Qty. to Receive (Base)" THEN
        BlanketOrderLine.VALIDATE("Qty. to Receive (Base)", NewQuantity);
      //**4PS.sn
      BlanketOrderLine."Modified by" := USERID; //DP00469
      BlanketOrderLine."Last Date Modified" := TODAY;//DP00469
      //**4PS.en
      BlanketOrderLine.MODIFY;
    END;

    PROCEDURE SetCreateFromReqLine@1100525014();
    BEGIN
      CreateFromReqLine := TRUE;
    END;

    PROCEDURE InitQtyToReceiveAdvanced4PS@1100525015();
    BEGIN
      //**4PS
      IF OnlyCheckForOpen THEN BEGIN
        IF ("Qty. to Receive" * Quantity) >= ("Outstanding Quantity" * Quantity) THEN
          "Qty. to Receive" := "Outstanding Quantity";
        "Qty. to Receive (Base)" := CalcBaseQty("Qty. to Receive");
        IF ("Qty. to Receive (Base)" * Quantity) >= ("Outstanding Qty. (Base)" * Quantity) THEN
          "Qty. to Receive (Base)" := "Outstanding Qty. (Base)";
        OnlyCheckForOpen := FALSE;
      END ELSE BEGIN
        IF ("Document Type" = "Document Type"::"Blanket Order") OR
           (("Document Type" = "Document Type"::Order) AND NOT DirectReceipt) THEN  //db, 18-03-10: M18120
        BEGIN
          "Qty. to Receive" := 0;
          "Qty. to Receive (Base)" := 0;
        END ELSE BEGIN
          "Qty. to Receive" := "Outstanding Quantity";
          "Qty. to Receive (Base)" := "Outstanding Qty. (Base)";
        END
      END;
    END;

    PROCEDURE ValidateBlanketOrder@1100525019(BlanketOrderNo@1100525000 : Code[20]);
    VAR
      BlanketOrderRec@1100525001 : Record 38;
    BEGIN
      //**4PS
      IF BlanketOrderNo <> '' THEN BEGIN
        BlanketOrderRec.GET(BlanketOrderRec."Document Type"::"Blanket Order", BlanketOrderNo);
        IF BlanketOrderRec.Status = BlanketOrderRec.Status::Closed THEN
          BlanketOrderRec.FIELDERROR(Status);
        IF (NOT CreateFromReqLine) AND
          StrategicPurchMgt.IsLimitedPurchaser("Document Type")
        THEN
          ERROR(Text11012024);
      END;
    END;

    PROCEDURE EvaluateReleasedQuantity@1100525016(VAR PurchLineRec@1100525001 : Record 39;UpdateMode@1100525000 : '0,Delete,Update');
    VAR
      BlanketLineRec@1100525002 : Record 39;
      NewQtyToReceive@1100525003 : Decimal;
    BEGIN
      //**4PS
      IF UpdateMode > 0 THEN EXIT;  //db, 26-04-10: M19112 (disable call from table 39)

      //db, 22-12-09: called by form 510 (OnAfterValidate Quantity) and table 39 (OnDelete and OnValidate Blanket Order (Line) No.)
      WITH PurchLineRec DO BEGIN
        IF "Document Type" <> "Document Type"::"Blanket Order" THEN BEGIN
          IF ("Document Type" <> "Document Type"::Order) OR ("Blanket Order No." = '') OR ("Blanket Order Line No." = 0) THEN
            EXIT;
          IF NOT BlanketLineRec.GET("Document Type"::"Blanket Order", "Blanket Order No.", "Blanket Order Line No.") THEN
            EXIT;
          BlanketLineRec.CALCFIELDS("Quantity Released");
          CASE UpdateMode OF
            UpdateMode::Delete:
              BEGIN
                NewQtyToReceive := BlanketLineRec."Qty. to Receive" + Quantity;
                // Quantity on orderlines of blanketorderline this can be incl. old-curr quantity, so this must be corrected
                BlanketLineRec."Quantity Released" := BlanketLineRec."Quantity Released" - Quantity;
              END;
            UpdateMode::Update:
              NewQtyToReceive := BlanketLineRec."Qty. to Receive" - Quantity;
            ELSE
              EXIT;
          END;
          IF ((BlanketLineRec.Quantity * NewQtyToReceive) <= 0) OR
             (ABS(BlanketLineRec."Quantity Released") > ABS(BlanketLineRec.Quantity))
          THEN
            NewQtyToReceive := 0
          ELSE BEGIN
            IF ABS(NewQtyToReceive) > ABS(BlanketLineRec.Quantity - BlanketLineRec."Quantity Released") THEN
              NewQtyToReceive := BlanketLineRec.Quantity - BlanketLineRec."Quantity Released";
          END;
          IF (NewQtyToReceive <> BlanketLineRec."Qty. to Receive") THEN BEGIN
            BlanketLineRec.VALIDATE("Qty. to Receive", NewQtyToReceive);
            //BlanketLineRec.MODIFY;  //db, 19-04-10: M19112
          END;
        END ELSE BEGIN
          CALCFIELDS("Quantity Released");
          //VALIDATE("Qty. to Receive", Quantity - "Quantity Released");  //db, 18-03-10: M18120
        END;
      END;
    END;

    PROCEDURE CheckAdditionalCostService@1100525017();
    BEGIN
      //**4PS
      //db, 24-02-10
      IF "Service Order No." = '' THEN EXIT;
      CheckCompanyIC;
      IF NOT ServOrderRec.GET("Service Order No.") THEN EXIT;

      IF (CurrFieldNo = FIELDNO("Service Order No.")) OR (CurrFieldNo = FIELDNO("Cost Type")) OR
         (CurrFieldNo = FIELDNO("Shortcut Dimension 2 Code")) THEN BEGIN //call 26946
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Cost Type" <> xRec."Cost Type") THEN BEGIN
          "Additional Cost (Service)" :=
            ServOrderRec.GetAdditionalCostService("Service Order No.","Shortcut Dimension 2 Code","Cost Type","Receiving Company");
        END;
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Additional Cost (Service)" <> xRec."Additional Cost (Service)") THEN BEGIN
          IF "Additional Cost (Service)" = TRUE THEN
            VALIDATE("Shortcut Dimension 1 Code", ServOrderRec."Department Code (Other)")
          ELSE
            VALIDATE("Shortcut Dimension 1 Code", ServOrderRec."Global Dimension 1 Code");
        END;
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Cost Type" <> xRec."Cost Type") THEN BEGIN
          VALIDATE("Cost Component");
        END;
      END;
    END;

    PROCEDURE SuspendUpdateAmounts@1100525018(lUpdateAmountsSuspended@1100485000 : Boolean);
    BEGIN
      //**4PS
      UpdateAmountsSuspended := lUpdateAmountsSuspended;
    END;

    PROCEDURE ValidateAdditionalCost@1100525021();
    VAR
      CostCompRec@1100525001 : Record 11012012;
      SaveCostComp@1100525000 : Text[30];
      SaveDesc@1100525002 : Text[50];
    BEGIN
      //**4PS
      SaveCostComp := "Cost Component";
      SaveDesc := Description;
      TESTFIELD("Service Order No.");
      VALIDATE("Service Order No.");
      Description := SaveDesc;
      IF CurrFieldNo <> FIELDNO("Additional Cost (Service)") THEN EXIT;  //db, 18-03-10: T4641

      IF CostCompRec.GET(SaveCostComp) THEN BEGIN
         "Cost Component" := SaveCostComp;
         IF ("Additional Cost (Service)" = TRUE) THEN BEGIN
           IF (CostCompRec."Cost Component (Add.Cost)" <> '') THEN
             "Cost Component" := CostCompRec."Cost Component (Add.Cost)";
         END ELSE BEGIN
           CostCompRec.SETRANGE("Cost Component (Add.Cost)", SaveCostComp);
           IF CostCompRec.FINDSET THEN BEGIN
             REPEAT
               IF (CostCompRec."Cost Component (Add.Cost)" = SaveCostComp) THEN
                 "Cost Component" := CostCompRec.Code;
             UNTIL CostCompRec.NEXT = 0;
           END;
         END;
      END;
    END;

    PROCEDURE ValidateCostComponent@1100525020();
    VAR
      CostCompRec@1100525000 : Record 11012012;
      CostCompRec2@1100525001 : Record 11012012;
    BEGIN
      //**4PS
      IF CurrFieldNo <> FIELDNO("Cost Component") THEN EXIT;  //db, 18-03-10: T4642

      IF CostCompRec.GET("Cost Component") THEN BEGIN
        //db.sn, 06-12-10: M24263
        IF CostCompRec."Additional Cost (Service)" THEN BEGIN
          CostCompRec2.SETRANGE("Cost Component (Add.Cost)", "Cost Component");
          IF NOT CostCompRec2.FINDFIRST THEN EXIT;
        END ELSE BEGIN
          IF CostCompRec."Cost Component (Add.Cost)" = '' THEN EXIT;
        END;
        //db.en, 06-12-10: M24263
        "Additional Cost (Service)" := CostCompRec."Additional Cost (Service)";
      END;
    END;

    PROCEDURE GetQuanToBeDelivered@1100525022() : Decimal;
    BEGIN
      //**4PS
      IF "Document Type" <> "Document Type"::"Blanket Order" THEN
        EXIT(0);
      CALCFIELDS("Quantity Released");
      IF Quantity - "Quantity Released" < 0 THEN
        EXIT(0);
      EXIT(Quantity-"Quantity Released");
    END;

    PROCEDURE CheckPlantCreateFAOnReceipt@1100525024() : Boolean;
    VAR
      lvPlantNoRec@1100525000 : Record 11012552;
    BEGIN
      //**4PS
      IF ("Receiving Company" = '') AND (Type = Type::"Fixed Asset") AND
         ("Document Type" IN ["Document Type"::Order, "Document Type"::Quote, "Document Type"::"Blanket Order"]) AND
         ("Plant Type" <> '') AND ("Cost Component Plant" <> '')
      THEN BEGIN
        IF (CheckPlantAcquisitionOrRent(Rec) = 1) THEN BEGIN
          IF ("Plant No." = '') THEN
            EXIT(TRUE)
          ELSE BEGIN
            IF "Document Type" = "Document Type"::Order THEN BEGIN  //* Unique plant that is create on purchase order
              IF lvPlantNoRec.GET("Plant Type", "Plant No.") THEN BEGIN
                lvPlantNoRec.CALCFIELDS(Bulk);
                IF (NOT lvPlantNoRec.Bulk) AND (NOT lvPlantNoRec.Posted) AND (NOT lvPlantNoRec.External) AND
                   (lvPlantNoRec."Fixed Asset" = '') AND (lvPlantNoRec."Purchase Order No." = "Document No.")
                THEN
                  EXIT(TRUE);
              END;
            END;
          END;
        END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE FillQtyWithPlantReorderQty@1100525026();
    VAR
      ReorderQuantityBase@1100525000 : Decimal;
      ReorderQuantity@1100525001 : Decimal;
    BEGIN
      //**4PS
      IF ("Plant Type" = '') OR ("Cost Component Plant" = '') THEN
        EXIT;
      CheckCompanyIC;
      IF NOT PlantTypeRec.GET("Plant Type") THEN
        EXIT;
      ReorderQuantityBase := GetPlantVendorReorderQtyBase();
      IF ("Qty. per Unit of Measure" = 1) OR ("Qty. per Unit of Measure" = 0) THEN
        ReorderQuantity := ReorderQuantityBase
      ELSE
        ReorderQuantity := ROUND(ReorderQuantityBase / "Qty. per Unit of Measure", 0.00001);
      IF (ReorderQuantity = 0) OR (Quantity = ReorderQuantity) THEN
        EXIT;
      IF ("Plant No." <> '') AND (ReorderQuantity <> 1) AND (NOT PlantTypeRec.Bulk) THEN
        EXIT;
      VALIDATE(Quantity, ReorderQuantity);
    END;

    PROCEDURE CheckMultiplePlantReorderQty@1100525027();
    VAR
      ReorderQuantityBase@1100525000 : Decimal;
      ReorderQuantity@1100525001 : Decimal;
      TextBase@1100525002 : Text[30];
    BEGIN
      //**4PS    Note: Only a message (warning), no error.
      IF ("Plant Type" = '') OR ("Cost Component Plant" = '') OR (Quantity = 0) THEN
        EXIT;
      CheckCompanyIC;
      IF NOT PlantTypeRec.GET("Plant Type") THEN
        EXIT;
      ReorderQuantityBase := GetPlantVendorReorderQtyBase();
      IF ("Qty. per Unit of Measure" = 1) OR ("Qty. per Unit of Measure" = 0) THEN
        ReorderQuantity := ReorderQuantityBase
      ELSE
        ReorderQuantity := ROUND(ReorderQuantityBase / "Qty. per Unit of Measure", 0.00001);
      IF (ReorderQuantity = 0) THEN
        EXIT;
      IF ("Plant No." <> '') AND (ReorderQuantity <> 1) AND (NOT PlantTypeRec.Bulk) THEN
        EXIT;

      IF (Quantity MOD ReorderQuantity) <> 0 THEN BEGIN
        IF "Qty. per Unit of Measure" <> 1 THEN
          TextBase :=' (' + FORMAT(ReorderQuantityBase) + ' ' + PlantTypeRec."Unit of Measure" + ')';
        MESSAGE(Text11012026,
          FIELDCAPTION(Quantity), Quantity, "Unit of Measure Code",
          PlantVendorRec.FIELDCAPTION("Reorder Quantity"), ReorderQuantity, TextBase,
          FIELDCAPTION("Plant Type"), "Plant Type");
      END;
    END;

    PROCEDURE GetPlantVendorReorderQtyBase@1100525023() : Decimal;
    VAR
      VendorNo@1100525000 : Code[20];
    BEGIN
      //**4PS
      IF "Plant Type" = '' THEN
        EXIT(0);
      VendorNo := "Buy-from Vendor No.";
      IF VendorNo = '' THEN BEGIN
        GetPurchHeader;
        VendorNo := PurchHeader."Buy-from Vendor No.";
        IF VendorNo = '' THEN
          EXIT(0);
      END;

      CASE CheckPlantAcquisitionOrRent(Rec) OF
        1: PlantVendorRec.Type := PlantVendorRec.Type::Purchase;
        2: PlantVendorRec.Type := PlantVendorRec.Type::Rent;
        ELSE
          EXIT(0);
      END;

      CheckCompanyIC;
      IF PlantVendorRec.Type = PlantVendorRec.Type::Rent THEN BEGIN
        GetPurchHeader;
        IF PurchHeader."Hours Hire Order Type" = PurchHeader."Hours Hire Order Type"::Plant THEN
          EXIT(0);
      END;
      IF PlantVendorRec.GET("Plant Type", VendorNo, PlantVendorRec.Type) THEN
        EXIT(PlantVendorRec."Reorder Quantity");
      EXIT(0);
    END;

    PROCEDURE CompletionControl@1100525025(PurchLine@1100525000 : Record 39;VAR ErrorCounter@1100525006 : Integer;VAR ErrorText@1100525002 : ARRAY [99] OF Text[250]);
    VAR
      PurchLineComplControl@1100525001 : Record 11020415;
      RecRef@1100525005 : RecordRef;
      FieldRef@1100525003 : FieldRef;
    BEGIN
      //**4PS
      PurchLineComplControl.SETFILTER(
        "Document Type",'%1|%2',PurchLineComplControl."Document Type"::All,PurchLine."Document Type"+1);
      PurchLineComplControl.SETRANGE("Related To Table No.",DATABASE::"Purchase Line");
      PurchLineComplControl.SETRANGE(Type,PurchLine.Type);
      IF PurchLine."Job No." <> '' THEN
        PurchLineComplControl.SETRANGE("Sub Module Type",PurchLineComplControl."Sub Module Type"::Project)
      ELSE
        IF PurchLine."Service Order No." <> '' THEN
          PurchLineComplControl.SETRANGE("Sub Module Type",PurchLineComplControl."Sub Module Type"::Service)
        ELSE
          IF PurchLine."Plant Type" <> '' THEN
            PurchLineComplControl.SETRANGE("Sub Module Type",PurchLineComplControl."Sub Module Type"::Plant)
          ELSE
            PurchLineComplControl.SETRANGE("Sub Module Type",PurchLineComplControl."Sub Module Type"::None);
      IF PurchLineComplControl.FINDSET THEN
        REPEAT
          RecRef.GETTABLE(PurchLine);
          FieldRef := RecRef.FIELD(PurchLineComplControl."Field No.");
          IF (FORMAT(FieldRef) = '') OR (FORMAT(FieldRef) = '0') THEN BEGIN
            PurchLineComplControl.CALCFIELDS(PurchLineComplControl."Field Name");
            ErrorCounter := ErrorCounter + 1;
            IF ErrorCounter < 100 THEN
              ErrorText[ErrorCounter] := STRSUBSTNO(Text11012028,PurchLineComplControl."Field Name");
          END;
        UNTIL PurchLineComplControl.NEXT = 0;
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(39) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 39');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Purchase Line", "Shortcut Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Shortcut Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Shortcut Dimension 1 Code");
    END;

    PROCEDURE RetentionAmount@1100528500(AmountOption@1100528502 : 'Both Retentions,Retention 1,Retention 2') RetentionAmnt : Decimal;
    VAR
      SubcontracterContract@1100528501 : Record 11020635;
      RetentionBaseAmount@1100528500 : Decimal;
    BEGIN
      //**4PS
      IF NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN
        EXIT;

      IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN
        EXIT;

      GetPurchHeader;
      IF PurchHeader."Subcontract No." = '' THEN
        EXIT;

      IF ReleaseRetention THEN
        EXIT;

      RetentionBaseAmount := ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") - "Line Discount Amount";

      SubcontracterContract.GET(PurchHeader."Buy-from Vendor No.", PurchHeader."Subcontract No.");

      CASE AmountOption OF
        AmountOption::"Retention 1":
          RetentionAmnt := ROUND(
            SubcontracterContract."Retention %" / 100 * RetentionBaseAmount, Currency."Amount Rounding Precision");
        AmountOption::"Retention 2":
          RetentionAmnt := ROUND(
            SubcontracterContract."Retention % 2" / 100 * RetentionBaseAmount, Currency."Amount Rounding Precision");
        AmountOption::"Both Retentions":
          RetentionAmnt :=
            ROUND(SubcontracterContract."Retention %" / 100 * RetentionBaseAmount, Currency."Amount Rounding Precision") +
            ROUND(SubcontracterContract."Retention % 2" / 100 * RetentionBaseAmount, Currency."Amount Rounding Precision");
      END;
    END;

    PROCEDURE ReleaseRetention@1100528501() : Boolean;
    VAR
      VendPostingGrp@1100528500 : Record 93;
    BEGIN
      //**4PS
      GetPurchHeader;
      IF ("Document Type" = "Document Type"::Quote) AND
         (PurchHeader."Vendor Posting Group" = '') AND
         (PurchHeader."Buy-from Vendor No." = '')
      THEN
        EXIT(FALSE);  //* If Quote for a relation
      PurchHeader.TESTFIELD("Vendor Posting Group");
      VendPostingGrp.GET(PurchHeader."Vendor Posting Group");

      EXIT(
        ("No." = VendPostingGrp."Retention Suspense Acc.") AND
        (VendPostingGrp."Retention Suspense Acc." <> ''));
    END;

    PROCEDURE CheckProjectInventory@1100526200();
    VAR
      ProjInvtEntry@1100526200 : Record 11012670;
      PurchRcptLine@1100526201 : Record 121;
    BEGIN
      //**4PS
      {db, 12-04-11: M25078
      IF NOT ProjInvtEntry.READPERMISSION THEN EXIT;
      IF ("Job No." = '') THEN EXIT;

      PurchRcptLine.SETCURRENTKEY("Order No.", "Order Line No.");
      PurchRcptLine.SETRANGE("Order No.", "Document No.");
      PurchRcptLine.SETRANGE("Order Line No.", "Line No.");
      IF NOT PurchRcptLine.FINDFIRST THEN EXIT;

      ProjInvtEntry.SETCURRENTKEY("Project No.");
      ProjInvtEntry.SETRANGE("Project No.", "Job No.");
      ProjInvtEntry.SETRANGE("Document No.", PurchRcptLine."Document No.");
      IF ProjInvtEntry.FINDFIRST THEN
      //ProjInvtEntry.TESTFIELD("Bin Code", "Bin Code");
        IF("Location Code" <> ProjInvtEntry."Location Code") OR ("Bin Code" <> ProjInvtEntry."Bin Code") THEN
          MESSAGE(Text11012030, ProjInvtEntry."Location Code", ProjInvtEntry."Bin Code");  //db, 19-01-11
      }
    END;

    PROCEDURE CheckCostTypeCondition@1100525029();
    BEGIN
      //db, 11-02-11: M25031
      //lvOrigField := CurrFieldNo; //call 26946
      //CurrFieldNo := FIELDNO("Cost Type");  //force check additional cost (service) //call 26946
      HideDialog := TRUE;  //skip question on validate Cost Type
      IF (xRec."Document No." = '') THEN BEGIN
        //toolsbug: xRec not set on lookup
        xRec."Service Order No." := "Service Order No.";
        xRec."Cost Type" := "Cost Type";
      END;
      IF ("Item No." <> '') OR ("Basic Item" <> '') OR ("Trade Item" <> '') THEN //call 26684
        VALIDATE("Cost Type", "Cost Type"::Material);
      HideDialog := FALSE;
      // CurrFieldNo := lvOrigField; //call 26946
    END;

    PROCEDURE FillShipToLocWithPlantDepot@1210190003();
    VAR
      PlantSetup@1210190000 : Record 11012550;
      PlantLoc@1210190001 : Record 11012554;
      PurchHead2@1210190004 : Record 38;
      PurchLine@1210190002 : Record 39;
      ShipToLoc@1210190003 : Code[20];
    BEGIN
      //**4PSmg, 29-03-11: M25024
      //*OLD.so 25-05-2011  See additional comment on call 25024
      //IF NOT UserSetup.GET(USERID) THEN
      //  EXIT;
      //IF NOT UserSetup."Department Authoriz. Active" OR (UserSetup."Department Code" = '') THEN
      //  EXIT;
      //IF NOT PlantSetupDefLocations.GET(UserSetup."Department Code") THEN
      //  EXIT;

      //GetPurchHeader;
      //PurchHeader.VALIDATE(Deliver, PurchHeader.Deliver::"Plant Depot");
      //PurchHeader.VALIDATE("Ship To Location", PlantSetupDefLocations."Ship To Location");
      //PurchHeader.MODIFY(TRUE);
      //*OLD.eo

      IF ("Document Type" <> "Document Type"::Order) OR ("Cost Component Plant" = '') OR
         ("Plant Order No." <> '') OR "Direct Delivery Plant" OR ("Receiving Company" <> '')
      THEN
        EXIT;
      IF CheckPlantAcquisitionOrRent(Rec) <> 1 THEN  //* 1=Acquisition
        EXIT;
      IF NOT DPA_IsActive THEN
        EXIT;
      PlantSetup.GET;
      ShipToLoc := PlantSetup.GetShipToLocation();
      IF ShipToLoc = '' THEN
        EXIT;
      PurchHeader.GET("Document Type","Document No.");
      IF (PurchHeader.Deliver = PurchHeader.Deliver::"Plant Location") AND (PurchHeader."Ship To Location" = ShipToLoc) THEN
        EXIT;
      IF NOT PlantLoc.GET(ShipToLoc) THEN
        EXIT;
      IF NOT PlantLoc.Depot THEN
        EXIT;
      PurchLine.SETRANGE("Document Type", "Document Type");
      PurchLine.SETRANGE("Document No.", "Document No.");
      PurchLine.SETFILTER("Line No.", '<>%1', "Line No.");
      PurchLine.SETFILTER(Type, '<>%1', PurchLine.Type::" ");
      IF NOT PurchLine.ISEMPTY THEN
        EXIT;
      PurchHead2.Deliver := PurchHeader.Deliver::"Plant Location";
      IF NOT CONFIRM(Text11012031, FALSE,
        PurchHeader.FIELDCAPTION("Ship To Location"), PurchHeader.TABLECAPTION,
        PurchHeader.Deliver, PurchHeader."Ship To Location",
        PurchHead2.Deliver, ShipToLoc)
      THEN
        EXIT;

      PurchHeader.VALIDATE(Deliver, PurchHeader.Deliver::"Plant Location");
      PurchHeader.VALIDATE("Ship To Location", ShipToLoc);
      PurchHeader.MODIFY;
    END;

    PROCEDURE GetProbablePlantFAMainDeprBook@1210190009(PlantType@1210190000 : Code[20]) : Code[10];
    VAR
      DeprBook@1100530001 : Record 5611;
      PlantDeprBook@1100530003 : Record 11012658;
    BEGIN
      //**4PS  27551
      //* Try to find what 'Main Depreciation Book' probable wil be when later the FA is create for the new plant
      IF PlantType = '' THEN
        EXIT('');

      PlantDeprBook.SETRANGE("Plant Type", PlantType);
      PlantDeprBook.SETRANGE("Main Depr. Book", TRUE);  //If by plant type then there is always 1 with 'Main'
      IF PlantDeprBook.FINDFIRST THEN
        EXIT(PlantDeprBook."Depreciation Book Code");

      DeprBook.SETRANGE("Autom. Insert for New FA", TRUE);
      IF DeprBook.FINDFIRST THEN BEGIN
        IF DeprBook.NEXT = 0 THEN  // If there is only one
          EXIT(DeprBook.Code);;
      END;

      FASetup.GET;
      IF FASetup."Default Depr. Book" <> '' THEN
        EXIT(FASetup."Default Depr. Book");

      EXIT('');
    END;

    PROCEDURE CopyPurLineDetailsToRcptLine@1100528400(PurchRcptLine@1210190003 : Record 121);
    VAR
      PurchaseLineExtension@1100528401 : Record 11020644;
      PurchaseLineDetail@1210190001 : Record 11020660;
      RecordType@1100528400 : Integer;
    BEGIN
      //**4PS
      IF NOT GetPurchLineDetailRecordType(RecordType) THEN
        EXIT;

      PurchaseLineExtension.GetPurchLineExtension("Document Type", "Document No.", "Line No.");

      PurchaseLineDetail.CopyLine(
        PurchaseLineDetail."Line Type"::"Purchase Order",
        RecordType,
        "Job No.",
        PurchaseLineExtension."Yard No.",
        PurchaseLineExtension."System No.",
        "Entity Type",
        PurchaseLineExtension."Entity No.",
        "Service Order No.",
        "Document No.",
        "Line No.",
        PurchaseLineDetail."Line Type"::"Purchase Receipt",
        PurchRcptLine."Document No.",
        PurchRcptLine."Line No.",
        FALSE);
    END;

    LOCAL PROCEDURE DeletePurchaseLineDetails@1100528401();
    VAR
      PurchaseLineDetail@1100528401 : Record 11020660;
    BEGIN
      //**4PS
      PurchaseLineDetail.SETRANGE("Line Type", PurchaseLineDetail."Line Type"::"Purchase Order");
      PurchaseLineDetail.SETRANGE("Document No.", "Document No.");
      PurchaseLineDetail.SETRANGE("Line No.", "Line No.");
      IF NOT PurchaseLineDetail.ISEMPTY THEN
        PurchaseLineDetail.DELETEALL;
    END;

    PROCEDURE EditPurchaseLineDetails@1100528409();
    VAR
      PurchaseLineExtension@1100528402 : Record 11020644;
      PurchaseLineDetail@1100528401 : Record 11020660;
      RecordType@1100528400 : Integer;
    BEGIN
      //**4PS
      IF NOT GetPurchLineDetailRecordType(RecordType) THEN
        ERROR(Text11012033, FIELDCAPTION("Job No."), FIELDCAPTION("Service Order No."));

      PurchaseLineExtension.GetPurchLineExtension("Document Type", "Document No.", "Line No.");

      PurchaseLineDetail.ShowCard(
        PurchaseLineDetail."Line Type"::"Purchase Order",
        RecordType,
        "Job No.",
        PurchaseLineExtension."Yard No.",
        PurchaseLineExtension."System No.",
        "Entity Type",
        PurchaseLineExtension."Entity No.",
        "Service Order No.",
        "Document No.",
        "Line No.");
    END;

    LOCAL PROCEDURE GetPurchLineDetailRecordType@1100528410(VAR RecordType@1100528400 : Integer) : Boolean;
    VAR
      PurchaseLineDetail@1100528401 : Record 11020660;
    BEGIN
      //**4PS
      CASE TRUE OF
        ("Job No." <> ''):
          BEGIN
            RecordType := PurchaseLineDetail."Record Type"::Project;
            EXIT(TRUE);
          END;
        ("Service Order No." <> ''):
          BEGIN
            RecordType := PurchaseLineDetail."Record Type"::ServOrder;
            EXIT(TRUE);
          END;
      END;
    END;

    PROCEDURE GetLookupEntityNo@1100528403(PurchaseLineExtension@1100528402 : Record 11020644) : Code[20];
    VAR
      AssemblyYardNumberObject@1100528400 : Record 11020596;
    BEGIN
      //**4PS
      AssemblyYardNumberObject."Project No." := "Job No.";
      AssemblyYardNumberObject."Yard No." := PurchaseLineExtension."Yard No.";
      AssemblyYardNumberObject."Entity Type" := "Entity Type";
      AssemblyYardNumberObject."System No." := PurchaseLineExtension."System No.";
      AssemblyYardNumberObject."Entity No." := PurchaseLineExtension."Entity No.";

      AssemblyYardNumberObject.SETRANGE("Project No.", "Job No.");
      AssemblyYardNumberObject.SETRANGE("Yard No.", PurchaseLineExtension."Yard No.");
      AssemblyYardNumberObject.SETRANGE("Entity Type", "Entity Type");
      AssemblyYardNumberObject.SETRANGE("System No.", PurchaseLineExtension."System No.");

      IF PAGE.RUNMODAL(0, AssemblyYardNumberObject) = ACTION::LookupOK THEN
        EXIT(AssemblyYardNumberObject."Entity No.");

      EXIT(PurchaseLineExtension."Entity No.");
    END;

    LOCAL PROCEDURE ClearEditableAssemYardNoFields@1100528405();
    VAR
      PurchaseLineExtension@1100528400 : Record 11020644;
    BEGIN
      //**4PS
      IF "Job No." <> xRec."Job No." THEN BEGIN
        "Entity Type" := "Entity Type"::None;
        PurchaseLineExtension.GetPurchLineExtension("Document Type", "Document No.", "Line No.");
        PurchaseLineExtension."Entity No." := '';
        ValidateAndSaveEntityNo(PurchaseLineExtension);
      END;
    END;

    LOCAL PROCEDURE ValidateEntityType@1100528408();
    VAR
      Job@1100528400 : Record 11072003;
      PurchaseLineExtension@1100528401 : Record 11020644;
    BEGIN
      //**4PS
      IF "Entity Type" <> "Entity Type" ::None THEN BEGIN
        Job.GET("Job No.");
        Job.TESTFIELD("Assembly Project", TRUE);
      END;

      IF "Entity Type" <> xRec."Entity Type" THEN BEGIN
        PurchaseLineExtension.GetPurchLineExtension("Document Type", "Document No.", "Line No.");
        PurchaseLineExtension."Entity No." := '';
        ValidateAndSaveEntityNo(PurchaseLineExtension);
      END;
    END;

    PROCEDURE ValidateAndSaveEntityNo@1100528402(PurchaseLineExtension@1100528400 : Record 11020644);
    VAR
      AssemblyYardNumberObject@1100528401 : Record 11020596;
      PurchaseLine@1100528402 : Record 39;
    BEGIN
      //**4PS
      IF PurchaseLineExtension."Entity No." <> '' THEN
        AssemblyYardNumberObject.GET(
          "Job No.",
          PurchaseLineExtension."Yard No.",
          "Entity Type",
          PurchaseLineExtension."System No.",
          PurchaseLineExtension."Entity No.");

      IF PurchaseLine.GET("Document Type", "Document No.", "Line No.") THEN
        PurchaseLineExtension.UpdatePurchLineExtension("Document Type", "Document No.", "Line No.");
    END;

    PROCEDURE UpdateGS1PurcheseOrderLog@1210190020();
    VAR
      GS1PurchaseOrderLog@1210190000 : Record 11072079;
      Vendor@1210190001 : Record 23;
    BEGIN
      //**4PS
      IF ("Document Type" <> "Document Type"::Quote) AND
         ("Document Type" <> "Document Type"::Order)
      THEN
        EXIT;

      IF (Quantity = xRec.Quantity) AND
         ("Trade Item" = xRec."Trade Item") AND
         ("Requested Receipt Date" = xRec."Requested Receipt Date")
      THEN
        EXIT;

      Vendor.GET("Buy-from Vendor No.");
      IF (NOT Vendor."GS1 Change Request implemented") THEN
        EXIT;

      IF (NOT GS1PurchaseOrderLog.WRITEPERMISSION) THEN
        EXIT;

      GS1PurchaseOrderLog."Document Type" := "Document Type";
      GS1PurchaseOrderLog."Document No." := "Document No.";
      GS1PurchaseOrderLog."Line No." := "Line No.";
      GS1PurchaseOrderLog."Modification Date" := CURRENTDATETIME;
      GS1PurchaseOrderLog.Quantity := Quantity;
      GS1PurchaseOrderLog."Requested Receipt Date" := "Requested Receipt Date";
      GS1PurchaseOrderLog."Trade Item" := "Trade Item";

      GS1PurchaseOrderLog.INSERT;
    END;

    PROCEDURE CheckIfGS1ErrorLogsExist@1100528300() : Boolean;
    VAR
      GS1ErrorLog@1210190000 : Record 11072078;
    BEGIN
      //**4PS
      GS1ErrorLog.SETCURRENTKEY("Document Type", "Document No.", "Line No.");
      GS1ErrorLog.SETRANGE("Document Type", "Document Type");
      GS1ErrorLog.SETRANGE("Document No.", "Document No.");
      GS1ErrorLog.SETRANGE("Line No.", "Line No.");
      EXIT(NOT GS1ErrorLog.ISEMPTY);
    END;

    PROCEDURE GetVendorName@1100528304() : Text[50];
    VAR
      Vendor@1100528300 : Record 23;
    BEGIN
      //**4PS.n
      IF (Vendor.GET("Buy-from Vendor No.")) THEN
        EXIT(Vendor.Name);

      EXIT('');
    END;

    PROCEDURE GetUoMDescription@1100528301() : Text[10];
    VAR
      UnitOfMeasure@1100528300 : Record 204;
    BEGIN
      //**4PS
      IF (UnitOfMeasure.GET("Unit of Measure Code")) THEN
        EXIT(UnitOfMeasure.Description);

      EXIT('');
    END;

    PROCEDURE GetCurrencyDescription@1100528302() : Text[30];
    VAR
      Currency@1100528300 : Record 4;
    BEGIN
      //**4PS
      IF (Currency.GET("Currency Code")) THEN
        EXIT(Currency.Description);

      EXIT('');
    END;

    LOCAL PROCEDURE CheckIfItemIsBlocked@1100528303(Item@1100528300 : Record 27);
    BEGIN
      //**4PS.n
      //>>SYM107
      IF DontCheckItemPurchBlocked THEN
        EXIT;
      //<<SYM107
      IF "Document Type" IN ["Document Type"::Quote, "Document Type"::Order, "Document Type"::"Blanket Order"] THEN
        Item.TESTFIELD("Purchase Blocked",FALSE);

      Item.TESTFIELD(Blocked,FALSE);
    END;

    PROCEDURE NonStratPurchaserVendNoContr@1210190021() : Boolean;
    VAR
      Vend@1210190000 : Record 23;
      BuyFromVendorNo@1100409000 : Code[20];
    BEGIN
      //**4PS (31593)
      // BuyFromVendorNo introduced // C002189.n
      BuyFromVendorNo := "Buy-from Vendor No.";
      IF BuyFromVendorNo = '' THEN BEGIN
        GetPurchHeader;
        BuyFromVendorNo := PurchHeader."Buy-from Vendor No.";
      END;

      IF BuyFromVendorNo <> '' THEN BEGIN
        Vend.GET(BuyFromVendorNo);
        IF StrategicPurchMgt.IsLimitedPurchaser("Document Type") AND
           (NOT StrategicPurchMgt.VendorHasContract(Vend))
        THEN
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE FillDefaultFscType@1100529000();
    BEGIN
      //**4PS DP00129
      IF ("Shortcut Dimension 2 Code" = '') THEN
        EXIT;
      DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimVal2Rec, FALSE, '');
      IF NOT DimVal2Rec."FSC Applicable" THEN
        EXIT;
      GetPurchHeader();
      IF FscTypeOnHeaderLevelAllowed() AND (PurchHeader."FSC Type Code" <> '') THEN
        "FSC Type Code" :=  PurchHeader."FSC Type Code"
      ELSE BEGIN
        IF ("Job No."= '') THEN
          EXIT;
        IF NOT ProjRec.GET("Job No.") THEN
          EXIT;
        IF ProjRec."FSC Type Code" <> '' THEN
          "FSC Type Code" :=  ProjRec."FSC Type Code";
      END;
    END;

    PROCEDURE FscTypeOnHeaderLevelAllowed@1100529001() : Boolean;
    BEGIN
      //**4PS DP00129
      EXIT("Document Type" IN ["Document Type"::Quote, "Document Type"::Order]);
    END;

    PROCEDURE BalanceDatesAndDeliveryPeriod@1100528315(FromFieldNo@1210190000 : Integer);
    VAR
      FieldToCalculate@1210190001 : 'None,PlannedReceiptDate,OrderDate';
    BEGIN
      //**4PS.n #DP00153
      CASE FromFieldNo OF
        FIELDNO("Order Date"): BEGIN
          IF ("Order Date" <> 0D) AND ("Order Date" < TODAY) THEN
            "Order Date" := TODAY;
          FieldToCalculate := FieldToCalculate::PlannedReceiptDate;
        END;
        FIELDNO("Lead Time Calculation"): BEGIN
          IF (FORMAT("Lead Time Calculation") <> '') THEN
            FieldToCalculate := FieldToCalculate::OrderDate;
        END;
        FIELDNO("Planned Receipt Date"): BEGIN
          IF ("Planned Receipt Date" <> 0D) AND ("Planned Receipt Date" < TODAY) THEN
            "Planned Receipt Date" := TODAY;
          IF ("Planned Receipt Date" <> xRec."Planned Receipt Date") THEN
            FieldToCalculate := FieldToCalculate::OrderDate;
        END;
      END;

      CASE FieldToCalculate OF
        FieldToCalculate::PlannedReceiptDate: BEGIN
          IF (FORMAT("Lead Time Calculation") <> '') THEN  //kkleermaker.n, 120927, W017613
            "Planned Receipt Date" := CalendarMgmt.CalcDateBOC(
               '+' + FORMAT("Lead Time Calculation"), "Order Date",
               CalChange."Source Type"::Company, '', '',
               CalChange."Source Type"::Vendor, "Buy-from Vendor No.", '', FALSE);
        END;
        FieldToCalculate::OrderDate: BEGIN
          //db.sn, 11-03-13: C004848
          //IF (FORMAT("Lead Time Calculation") <> '') THEN  //kkleermaker.n, 120927, W017613
          //  "Order Date" := CalendarMgmt.CalcDateBOC(  //NeverResetOrderDate
          //    '-' + FORMAT("Lead Time Calculation"), "Planned Receipt Date",
          //    CalChange."Source Type"::Company, '', '',
          //    CalChange."Source Type"::Vendor, "Buy-from Vendor No.", '', FALSE);
          //VALIDATE("Order Date");
          //db.en, 11-03-13: C004848
        END;
      END;
    END;

    PROCEDURE IsItemLine@1100528600() : Boolean;
    BEGIN
      //**4PS DP00121
      IF Type = Type::Item THEN
        EXIT(TRUE);

      IF (Type = Type::"G/L Account") AND ("Item No." <> '') THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE NSItemExists@1100528601(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      Item2@1001 : Record 27;
    BEGIN
      //**4PS DP00121
      IF Type = Type::"G/L Account" THEN
        IF Item2.GET(ItemNo) THEN
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE GetStatusCheckSuspended@1100409000() : Boolean;
    BEGIN
      //**4PS CALL C002812
      EXIT(StatusCheckSuspended);
    END;

    PROCEDURE UpdateWageCharge@1100528700(NewAmount@1100528701 : Decimal);
    VAR
      WKAManagement@1100528702 : Codeunit 11012020;
      PurchaseLine@1100528704 : Record 39;
    BEGIN
      //**4PS
      CLEAR(PurchHeader);
      GetPurchHeader;
      IF (PurchHeader."Document Type" <> PurchHeader."Document Type"::Invoice) AND
         (PurchHeader."Document Type" <> PurchHeader."Document Type"::"Credit Memo")
      THEN
        EXIT;

      IF (PurchHeader."Subcontracting Invoice") AND
         (PurchHeader."Contribution Percentage Total" <> 0)
      THEN BEGIN
        PurchaseLine.RESET;
        PurchaseLine.SETRANGE("Document Type", "Document Type");
        PurchaseLine.SETRANGE("Document No.", "Document No.");
        PurchaseLine.SETFILTER("Line No.", '<>%1', "Line No.");
        PurchaseLine.CALCSUMS(Amount);

        WKAManagement.CalculateWageChart(
          PurchHeader."Buy-from Vendor No.",
          PurchHeader."Labor Amount",
          PurchHeader."Contribution Percentage Labor",
          PurchHeader."Pay To Tax Authority",
          PurchHeader."Currency Code",
          PurchHeader."Wage Charge (to B Account)",
          PurchHeader."Wage Charge (to Tax Authority)",
          PurchHeader."Contribution Percentage Total",
          PurchaseLine.Amount + NewAmount);

        PurchHeader.MODIFY(TRUE);
      END;
    END;

    PROCEDURE SetSkipCheckSigns@1100409001(SkipCheckSigns@1100409000 : Boolean);
    BEGIN
      //**4PS  C001910
      gSkipCheckSigns := SkipCheckSigns;
    END;

    PROCEDURE InventoryReservation@1100409002(lItem@11012000 : Code[20]);
    VAR
      LocInventoryQuan@1100409000 : Decimal;
      InventoryQuan@1100409001 : Decimal;
      ReservedQuan@1100409002 : Decimal;
      InvQuan@1100409003 : Decimal;
    BEGIN
      //**4PS.n #32924
      CALCFIELDS("Purchase Order Type");
      IF ("Purchase Order Type" <> "Purchase Order Type"::"Return Order") THEN
        EXIT;

      LocInventoryQuan := 0;
      InventoryQuan := 0;
      ReservedQuan := 0;

      IF ItemRec.GET(lItem) THEN BEGIN
        IF "Job No." <> '' THEN
          ItemRec.SETRANGE("Project Filter","Job No.");
        ItemRec.CALCFIELDS(Inventory, "Qty. on Item Journal Project", "Qty. on Item Journal Service");
        LocInventoryQuan := GetInventory("Location Code", ItemRec, FALSE);
        InventoryQuan := GetInventory('', ItemRec, TRUE);
        ReservedQuan := ItemRec."Qty. on Item Journal Project" + ItemRec."Qty. on Item Journal Service";
      END;

      IF InventoryQuan < LocInventoryQuan THEN
        InvQuan := LocInventoryQuan
      ELSE
        InvQuan := InventoryQuan;

      IF (lItem <> '') THEN
        IF ItemRec."Prevent Negative Inventory" = ItemRec."Prevent Negative Inventory"::Yes THEN  //db, 09-04-15; skip ManufacturingSetup."Block Negative Inventory"
          IF InvQuan < (Quantity * -1) THEN
            MESSAGE(Text11012034);
    END;

    PROCEDURE GetInventory@1100409007(Location@1100525000 : Code[10];VAR Item@1100525002 : Record 27;AllLocations@1100525001 : Boolean) Inventory : Decimal;
    BEGIN
      //**4PS.n #32924
      IF AllLocations THEN
        Item.SETRANGE("Location Filter")
      ELSE
        Item.SETRANGE("Location Filter",Location);

      Item.CALCFIELDS(Inventory);
      Inventory := Item.Inventory;

      Inventory -= ItemInventoryIntransit(Item."No.", Location, AllLocations); //mg, 28-06-11: M27068
    END;

    PROCEDURE ItemInventoryIntransit@1100409008(ItemNo@1210190000 : Code[20];LocationCode@1210190001 : Code[10];AllLocations@1210190004 : Boolean) InventoryInTransit : Decimal;
    VAR
      ItemLedgerEntry@1210190003 : Record 32;
      Location@1210190002 : Record 14;
    BEGIN
      //**4PS.n #32924
      IF NOT AllLocations AND (LocationCode <> '') THEN
        Location.SETRANGE(Code, LocationCode);
      Location.SETRANGE("Use As In-Transit", TRUE);
      IF Location.FINDSET THEN BEGIN
        ItemLedgerEntry.SETCURRENTKEY("Item No.", Positive, "Location Code", "Variant Code");
        ItemLedgerEntry.SETRANGE("Item No.", ItemNo);
        REPEAT
          ItemLedgerEntry.SETRANGE("Location Code", Location.Code);
          ItemLedgerEntry.CALCSUMS(ItemLedgerEntry.Quantity);
          InventoryInTransit += ItemLedgerEntry.Quantity;
        UNTIL Location.NEXT = 0;
      END;
    END;

    PROCEDURE FindProjLinesWithItemToPlan@1100525028(VAR Item@1000 : Record 27;DocumentType@1001 : Option) : Boolean;
    BEGIN
      //**4PS
      FilterLinesWithItemToPlan(Item,DocumentType,FALSE);
      EXIT(FIND('-'));
    END;

    PROCEDURE JobDescrOtherCompany@1100528404();
    VAR
      Job@1100528400 : Record 11072003;
    BEGIN
      //**4PS.n, kkleermaker, 130902, C004024
      IF "Receiving Company" = '' THEN
        EXIT;

      "Job Description" := '';
      IF "Job No." <> '' THEN  BEGIN
        Job.CHANGECOMPANY("Receiving Company");
        IF Job.GET("Job No.") THEN
          "Job Description" := Job.Description;
      END;
    END;

    PROCEDURE CreateInstallmentLines@1100525030();
    VAR
      CreatePurchInstallmentLines@1100525000 : Report 11020278;
      lvPurchaseLine@1100525001 : Record 39;
    BEGIN
      //**4PS
      lvPurchaseLine.SETRANGE("Document Type", "Document Type");
      lvPurchaseLine.SETRANGE("Document No.", "Document No.");
      lvPurchaseLine.SETRANGE("Line No.", "Line No.");
      CreatePurchInstallmentLines.SetAmount(Amount);
      CreatePurchInstallmentLines.SETTABLEVIEW(lvPurchaseLine);
      CreatePurchInstallmentLines.RUNMODAL;
    END;

    PROCEDURE UpdateBlanketSchemeProjAndPlot@1100525031();
    VAR
      BlanketScheme@1100525000 : Record 11012066;
      xBlanketScheme@1100525001 : Record 11012066;
    BEGIN
      //**4PS DP00416
      IF "Document Type" <> "Document Type"::Order THEN
        EXIT;

      BlanketScheme.SETRANGE("Document No.", "Document No.");
      BlanketScheme.SETRANGE("Document Line No.", "Line No.");
      BlanketScheme.SETRANGE("Receipts Created", FALSE);
      IF BlanketScheme.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          xBlanketScheme := BlanketScheme;
          IF BlanketScheme."Project No." <> "Job No." THEN
            BlanketScheme."Plot No." := '';
          BlanketScheme."Project No." := "Job No.";
          IF (BlanketScheme."Project No." <> '') AND ("Plot No." <> '') THEN
            BlanketScheme."Plot No." := "Plot No.";
          IF (BlanketScheme."Project No." <> xBlanketScheme."Project No.") OR (BlanketScheme."Plot No." <> xBlanketScheme."Plot No.") THEN
            BlanketScheme.MODIFY;
        UNTIL BlanketScheme.NEXT = 0;
      END;
    END;

    PROCEDURE ValidatePlantNo@1100525033();
    VAR
      PlantType@1100525000 : Record 11012551;
      PurchaseLine@1100525001 : Record 39;
    BEGIN
      //**4PS
      IF ("Document Type" = "Document Type"::Invoice ) OR ("Document Type" = "Document Type"::"Credit Memo") THEN
        IF ("Plant Type" <> '') AND ("Plant No." = '') THEN BEGIN
          PlantSetup.GET;
          IF PlantSetup."Posting on Unique Plant No." THEN
            IF PlantType.GET("Plant Type") THEN
              IF NOT PlantType.Bulk THEN
                IF PlantSetup."Cost Component Acquisition" <> "Cost Component Plant" THEN
                  TESTFIELD("Plant No.");
        END;
    END;

    PROCEDURE HasGuaranteeLines@1100409003() : Boolean;
    VAR
      PurchaseOrderLineGuarantee@1100409000 : Record 11229833;
    BEGIN
      //DP00561
      PurchaseOrderLineGuarantee.SETRANGE("Purchase Order", "Document No.");
      PurchaseOrderLineGuarantee.SETRANGE("Purchase Line", "Line No.");
      EXIT(NOT PurchaseOrderLineGuarantee.ISEMPTY);
    END;

    PROCEDURE ShowGuaranteeLines@1100409006() : Boolean;
    VAR
      PurchaseOrderLineGuarantee@1100409000 : Record 11229833;
    BEGIN
      //DP00561
      PurchaseOrderLineGuarantee.SETRANGE("Purchase Order", "Document No.");
      PurchaseOrderLineGuarantee.SETRANGE("Purchase Line", "Line No.");
      IF NOT PurchaseOrderLineGuarantee.ISEMPTY THEN
        PAGE.RUNMODAL(0,PurchaseOrderLineGuarantee);
    END;

    PROCEDURE IsDocumentCaptureActive@1100528203() : Boolean;
    BEGIN
      //**4PS CALL C020358
      IF NOT DCSetupRead THEN BEGIN
        IF NOT DocumentCaptureSetup.READPERMISSION THEN
          EXIT(FALSE);
        IF DocumentCaptureSetup.GET THEN;
          DCSetupRead := TRUE;
      END;
      EXIT(DocumentCaptureSetup."Document Nos." <> '');
    END;

    PROCEDURE LinkItemDocumentsToPurchHead@1100528000(PurchaseHead@1100528400 : Record 38;VAR PurchaseLine@1100528401 : Record 39;Confirmed@1100525003 : Boolean);
    VAR
      PurchHead@1100525000 : Record 38;
      PurchLine@1100525001 : Record 39;
      Item@1100525002 : Record 27;
      lvText11012001@1100525004 : TextConst 'ENU=Link Item Documents to %1?';
    BEGIN
      //**4PS C017758
      PurchSetup.GET;
      IF NOT PurchSetup."Allow Link Item Docs to Purch." THEN
        EXIT;
      IF NOT PurchHead.GET(PurchaseHead."Document Type", PurchaseHead."No.") THEN
        EXIT;
      IF NOT Confirmed THEN BEGIN
        IF NOT CONFIRM(lvText11012001, TRUE, PurchHead."Document Type") THEN
          EXIT;
      END;
      PurchLine.COPY(PurchaseLine);
      PurchLine.FILTERGROUP(9);
      PurchLine.SETRANGE("Document Type", PurchHead."Document Type");
      PurchLine.SETRANGE("Document No.", PurchHead."No.");
      PurchLine.SETFILTER("Item No.", '<>%1', '');
      PurchLine.FILTERGROUP(0);
      IF PurchLine.FINDSET THEN BEGIN
        REPEAT
          IF Item.GET(PurchLine."Item No.") THEN BEGIN
            IF Item."Allow Link Item Docs to Purch." THEN
              CopyItemDocLinksToPurchHead(Item, PurchHead);
          END;
        UNTIL PurchLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyItemDocLinksToPurchHead@1100528001(Item@1100525000 : Record 27;PurchHead@1100525001 : Record 38);
    VAR
      DocumentLinkMgt@1100525002 : Codeunit 11012401;
      SourceRecRef@1100525003 : RecordRef;
      TargetRecRef@1100525004 : RecordRef;
    BEGIN
      //**4PS
      SourceRecRef.GETTABLE(Item);
      TargetRecRef.GETTABLE(PurchHead);
      DocumentLinkMgt.SetResetSource(TRUE);
      DocumentLinkMgt.CopyDocLinks(SourceRecRef, TargetRecRef);
    END;

    PROCEDURE GetPlantInspectionNo@1100525035() : Code[30];
    VAR
      PlantNumber@1100525001 : Record 11012552;
    BEGIN
      //**4PS
      //#C023043.n
      IF (NOT PlantNumber.GET("Plant Type", "Plant No.")) THEN
        EXIT('');
      IF (PlantNumber.Bulk) THEN
        EXIT('');
      EXIT(PlantNumber."Inspection No.");
    END;

    PROCEDURE "**** ExFlow ****"@12013607();
    BEGIN
    END;

    PROCEDURE CopyExFlowFields@12013600(VAR _TempPurchLine@1100285000 : TEMPORARY Record 39);
    BEGIN
      // ExFlow
      "First Approver" := _TempPurchLine."First Approver";
      "ExFlow Order No." := _TempPurchLine."ExFlow Order No.";
      "PO Matched Document" := _TempPurchLine."PO Matched Document";
      "Web Receipt" := _TempPurchLine."Web Receipt";
      "Fully Matched" := _TempPurchLine."Fully Matched";
      "Applied Template Rule" := _TempPurchLine."Applied Template Rule";
      "Template Rule" := _TempPurchLine."Template Rule";
      "ExFlow Order Line No." := _TempPurchLine."ExFlow Order Line No.";
      "Invoice to Customer" := _TempPurchLine."Invoice to Customer";
      "Invoicing Amount" := _TempPurchLine."Invoicing Amount";
      "Start Date for Invoicing" := _TempPurchLine."Start Date for Invoicing";
      "Invoicing Code" := _TempPurchLine."Invoicing Code";
    END;

    PROCEDURE ExFlowFormat@12013608() : Integer;
    BEGIN
      // ExFlow
      IF Approve THEN BEGIN
        IF NOT DocLine.READPERMISSION THEN
          EXIT(0);
        IF NOT DocLineApp.READPERMISSION THEN
          EXIT(0);

        DocLine.RESET;
        DocLine.SETCURRENTKEY("Document No.");
        DocLine.SETRANGE("Document Type","Document Type");
        DocLine.SETRANGE("Document No.","Document No.");
        DocLine.SETRANGE("Line No.","Line No.");
        DocLine.SETRANGE(Flowstatus,DocLine.Flowstatus::Rejected);
        IF DocLine.FINDFIRST THEN
          EXIT(255)
        ELSE BEGIN
          DocLineApp.RESET;
          DocLineApp.SETCURRENTKEY("Document No.");
          DocLineApp.SETRANGE("Document Type","Document Type");
          DocLineApp.SETRANGE("Document No.","Document No.");
          DocLineApp.SETRANGE("Line No.","Line No.");
          IF NOT DocLineApp.FINDFIRST THEN
            EXIT(16776960);
        END;
      END;

      EXIT(0);
    END;

    LOCAL PROCEDURE "--ITERO---"@1100285000();
    BEGIN
    END;

    PROCEDURE SetDontUseSingleGTIN@1100285001(setFlag@1100285000 : Boolean);
    BEGIN
      DontUseSingleGTIN := setFlag;
    END;

    PROCEDURE SetDontCheckItemPurchBlocked@1000000000(pDontCheckItemPurchBlocked@1000000000 : Boolean);
    BEGIN
      //SYM107
      DontCheckItemPurchBlocked := pDontCheckItemPurchBlocked;

      //SYM108
      SkipExpired := pDontCheckItemPurchBlocked;
    END;

    PROCEDURE EditConsentLines@1100528406();
    VAR
      PurchaseHeader@1100528401 : Record 38;
      Type2@1100528400 : ' ,Project,Service Order';
      TypeNo@1100528402 : Code[20];
    BEGIN
      //**4PS
      IF "Line No." = 0 THEN
        EXIT;

      CASE TRUE OF
        "Job No." <> '':
          BEGIN
            Type2 := Type2::Project;
            TypeNo := "Job No.";
          END;
        "Service Order No." <> '':
          BEGIN
            Type2 := Type2::"Service Order";
            TypeNo := "Service Order No.";
          END;
      END;
      IF PurchaseHeader.GET("Document Type","Document No.") THEN
        PurchaseHeader.RunPageConsentLines("Line No.", Type2, TypeNo);
    END;

    PROCEDURE SetSaveFields@1100525037();
    BEGIN
      //**4PS Call C020806
      SaveJobNo := "Job No.";
      SaveDocNo := "Document No.";
      SaveLineNo := "Line No.";
    END;

    LOCAL PROCEDURE DeletePurchaseLineSCClaims@1100528200();
    VAR
      PurchaseLineSCClaim@1100528401 : Record 11229315;
    BEGIN
      //**4PS
      IF "Document Type" = "Document Type"::Order THEN BEGIN
        PurchaseLineSCClaim.SETRANGE("Purchase Order", "Document No.");
        PurchaseLineSCClaim.SETRANGE("Line No.", "Line No.");
        IF NOT PurchaseLineSCClaim.ISEMPTY THEN
          PurchaseLineSCClaim.DELETEALL;
      END;
    END;

    BEGIN
    {
      <DC>
        Document Capture
      </DC>


      4PS
      A. Overeem 11-10-2000. Changes for invoice registration and WKA
      Change made in the onvalidate of amount incl. vat and amount on testfield of Direct Unit Cost and fill Direct Unit Cost.

      Function HaalTijdelInkRegel added.
      Several fields in L(ocale) V(aluta) added.

      A. Overeem 21-12-2000. Check on Quantity added for invoice lines based on receipt.
      A. Overeem 21-12-2000. Check on amount and direct unit cost added for invoice lines based on receipt.

      4PS00 NeverResetOrderDate: use OrderDate PurchHeader
      4PS01 Jan ter Harmsel 26-08-2003 Call 3420, Refuse Service Order when Status = expired, also at invoice lines.
      4PS02 Jan ter Harmsel 26-08-2003 Call 1800, Calculation surcharge of commitments (Project)
      4PS03 JD 29-11-2006 Call 6733, Add Field Plot No. to several line tables
      4PS04 JD  20-07-07 following key deleted after doubt Peter about the profit:
                            Main Project No.,Job No.,Cost Component,Document Type
      4PS05 JD 09-10-07 Call 5091, Fill Element from Cost Object
      4PS06 JD 14-02-08 Fill Cost Component from SOType of Cost Object
      4PS07 JD 29-06-2008, Improvements for intrastat
      4PS08 JD 25-05-2009 Add extra fields ot purchase line needed for Project Engineering
      4PS09 HBK 03-08-2009 Added Objectfields and Number of labels
      4PS10 HB 28-07-2009 Added field "Quantity Released" that replaces function "Determine QuanReleased" in F510
        Added sumindex Quantity to key "Document Type,Blanket Order No.,Blanket Order Line No."
      4PS11 HBK 03-08-2009 Key/Sumindex added for Strategic Purchase
        Document Type,Buy-from Vendor No.,Job No.,Service Contract No.,Type,No.,Trade Item
      4PS12 HBK 10-08-2009 Added Field "Contract Found In"
      4PS13 HBK 07-05-2010 Added "Item No." to KEY 5! To fix "Qty. on Purch. Order" FlowField on Item - problem
        Added "Job No." to KEY 5 for "Qty. on Purch. Order (Inv.)" FlowField on Item
      4PS14 HBK 09-06-2010 Fix in CheckBlanketOrder: Received Quantity was calculated double
      4PS15 MMA 19-02-2010 Changes RFC Vendor rating
        Field added 11012350 Req. Rcpt Date Modified By
      4PS, 15-11-13, DP00483, Performance tuning:
      - MaintainSIFTIndex disabled for key Document Type,Buy-from Vendor No.,Job No.,Service Contract No.,Item No.,Trade Item
      - MaintainSQLIndex disabled for key Document Type,Buy-from Vendor No.,Job No.,Service Contract No.,Item No.,Trade Item
      4PS, 26-11-15, C027373, SiftIndex en SumindexFiels added on index Document Type,Pay-to Vendor No.,Currency Code

      4PSSE, DL, 131211, 4PS-020, email from TomZ, Different invoice quantity from receipt.docx
      4PSSE, DL, 131217, 4PS-020, Call C011651

      ITERO.MH 4PSHM 140131 New field "Date/Time Last Modified" and with triggers on onInsert() and onModify()

      ITERO.DJ SYM988 140203 edition to handle validation of quantity on purchase line when run by NAS
      140905 ITERO.DL IME171 Dimensions are not extended due to lack of VALIDATEs

      -- ExFlow --->
      Field 12013600 : Receipt No. Mandatory
      Field 12013601 : Approve (Code)
      Field 12013602 : Difference
      Field 12013603 : First Approver (Code)
      Field 12103606 : Order No.
      Field 12013610 : History
      Field 12013611 : Invoice to Customer
      Field 12013612 : Invoicing Amount
      Field 12013613 : Start Date for Invoicing
      Field 12013614 : Invoicing Code
      Field 12013645 : PO Matched Document
      Field 12013650 : Web Receipt
      Field 12013651 : ExFlow Add
      Field 12013652 : Fully Matched
      Field 12013655 : PO Approved Amount
      Field 12013659 : Applied Template Rule
      Field 12013660 : Template Rule (Code)
      Field 12013666 : Approval Flow Modified
      Field 12013667 : Order Line No.
      Field 12013668  : Contract No.
      Code           : OnInsert, OnModify, OnDelete, No. - OnValidate(),ValidateShortcutDimCode(),LookupShortcutDimCode()
      Text Const.    : EXF101
      Globals
      Function       : CopyExFlowFields,ExFlowFormat
      Keygroup ExFlow1:
      Keys           : Order No.,Order Line No.
                     : Contract No.
      <-- ExFlow ---

      150303 ITERO.WG SC003188 Added code from 4PSNL, call C020690, for correct calculation of items from foreign vendors
      150608 ITERO.DL SYM086, Error unit of measure NAV
      160304 ITERO.DL SYM107 Order stuck in buffer because NAV article is blocked
      160310 ITERO.DL SYM108 Order stuck in buffer because NAV article is expired (extension to SYM107)
      160909 ITERO.DL RFC136 view attached documents (from Symbrio), new field "Imported Item No."
      Version List=NAVSE9.00.00.45834
      Version List=NAVW19.00.00.45834,NAVFI9.00.00.45834;
      Version List=NAVW19.00.00.45834,NAVNO9.00.00.45834;
    }
    END.
  }
}

