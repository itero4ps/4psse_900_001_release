OBJECT Table 5050 Contact
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.45243,4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11072027=r,
                TableData 11012753=d;
    DataCaptionFields=No.,Name;
    OnInsert=BEGIN
               RMSetup.GET;

               IF "No." = '' THEN BEGIN
                 RMSetup.TESTFIELD("Contact Nos.");
                 NoSeriesMgt.InitSeries(RMSetup."Contact Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               IF NOT SkipDefaults THEN BEGIN
               //**4PS.so
               //  IF "Salesperson Code" = '' THEN
               //    "Salesperson Code" := RMSetup."Default Salesperson Code";
               //  IF "Territory Code" = '' THEN
               //    "Territory Code" := RMSetup."Default Territory Code";
               //  IF "Country/Region Code" = '' THEN
               //    "Country/Region Code" := RMSetup."Default Country/Region Code";
               //  IF "Language Code" = '' THEN
               //    "Language Code" := RMSetup."Default Language Code";
               //  IF "Correspondence Type" = "Correspondence Type"::" " THEN
               //    "Correspondence Type" := RMSetup."Default Correspondence Type";
               //  IF "Salutation Code" = '' THEN
               //    IF Type = Type::Company THEN
               //      "Salutation Code" := RMSetup."Def. Company Salutation Code"
               //    ELSE
               //      "Salutation Code" := RMSetup."Default Person Salutation Code";
               //**4PS.eo
                 InitRecord(COMPANYNAME); //**4PS.n
               END;

               TypeChange;

               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;
               "Modified by" := USERID; //**4PS10.n
               //**4PS.sn
               "Project Portal ID" := DELCHR(CREATEGUID, '<=>', '{-}');
               IF (Type <> Type::Person) OR ("Company No." = '') THEN BEGIN
                 IF RMSetup."Document Group" <> '' THEN
                   VALIDATE("Document Group", RMSetup."Document Group");
               END;
               CentralDataMgt.EditContact(Rec,1,xRec);
               CheckContactFeatures;
               //**4PS.en
             END;

    OnModify=BEGIN
               OnModify(xRec, TRUE);
               //**4PS.sn
               CentralDataMgt.EditContact(Rec,2,xRec);
               //**4PS.en
             END;

    OnDelete=VAR
               Todo@1000 : Record 5080;
               SegLine@1001 : Record 11072040;
               ContIndustGrp@1002 : Record 5058;
               ContactWebSource@1003 : Record 5060;
               ContJobResp@1004 : Record 5067;
               ContMailingGrp@1005 : Record 5056;
               ContProfileAnswer@1006 : Record 5089;
               RMCommentLine@1007 : Record 5061;
               ContAltAddr@1008 : Record 5051;
               ContAltAddrDateRange@1009 : Record 5052;
               InteractLogEntry@1010 : Record 11072027;
               Opp@1011 : Record 5092;
               DOPaymentCreditCard@1017 : Record 827;
               CampaignTargetGrMgt@1016 : Codeunit 7030;
               VATRegistrationLogMgt@1012 : Codeunit 249;
               TryOutRec@1210190006 : Record 11012750;
               TryOutLineRec@1210190000 : Record 11012755;
               TryOutQuoteRec@1210190001 : Record 11012758;
               TryOutQuoteLineRec@1210190007 : Record 11125864;
               TryOutQuoteCompetitorRec@1210190002 : Record 11012762;
               RelContSalesPersRec@1210190003 : Record 11012760;
               ContFeatureRec@1210190004 : Record 11012753;
               DocumentRec@1210190005 : Record 11012746;
               Contact@1100528700 : Record 5050;
               CRMPortRelation@1100525000 : Record 11128540;
               LinkedInProfile@1100525001 : Record 11071908;
             BEGIN
               DOPaymentCreditCard.DeleteByContact(Rec);
               //**4PS.sn
               RMSetup.GET;
               //**4PS.en
               Todo.SETCURRENTKEY("Contact Company No.","Contact No.",Closed,Date);
               Todo.SETRANGE("Contact Company No.","Company No.");
               //**4PS.sn standard bugfix
               IF Type = Type::Company THEN
                 Todo.SETRANGE("Contact No.")
               ELSE
               //**4PS.en
               Todo.SETRANGE("Contact No.","No.");
               Todo.SETRANGE(Closed,FALSE);
               IF Todo.FINDFIRST THEN
                 ERROR(Text000,TABLECAPTION,"No.");

               SegLine.SETCURRENTKEY("Contact No.");
               SegLine.SETRANGE("Contact No.","No.");
               IF SegLine.FINDFIRST THEN
                 //ERROR(Text001,TABLECAPTION,"No.");  //**4PS.o
                 ERROR(Text11012009, TABLECAPTION, "No.", SegLine."Segment No.", SegLine."Line No.");  //**4PS.n

               Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
               Opp.SETRANGE("Contact Company No.","Company No.");
               Opp.SETRANGE("Contact No.","No.");
               Opp.SETRANGE(Status,Opp.Status::"Not Started",Opp.Status::"In Progress");
               IF Opp.FINDFIRST THEN
                 ERROR(Text002,TABLECAPTION,"No.");

               //**4PS.sn JTH 06-03-2003
               TryOutLineRec.SETCURRENTKEY("Contact No.","Contact Person No.");
               IF IsContactPerson THEN BEGIN
                 TryOutLineRec.SETRANGE("Contact No.", "Company No.");
                 TryOutLineRec.SETRANGE("Contact Person No.", "No.");
               END ELSE BEGIN
                 TryOutLineRec.SETRANGE("Contact No.", "No.");
                 TryOutLineRec.SETRANGE("Contact Person No.");
               END;
               IF TryOutLineRec.FINDFIRST THEN
                 ERROR(Text11012002,TABLECAPTION,"No.",TryOutRec.TABLECAPTION,TryOutLineRec."Try-out No.");

               TryOutQuoteRec.SETCURRENTKEY("Contact No.","Contact Person No.");
               IF IsContactPerson THEN BEGIN
                 TryOutQuoteRec.SETRANGE("Contact No.","Company No.");
                 TryOutQuoteRec.SETRANGE("Contact Person No.", "No.");
               END ELSE BEGIN
                 TryOutQuoteRec.SETRANGE("Contact No.", "No.");
                 TryOutQuoteRec.SETRANGE("Contact Person No.");
               END;
               IF TryOutQuoteRec.FINDFIRST THEN
                 ERROR(Text11012002,TABLECAPTION,"No.",TryOutQuoteRec.TABLECAPTION,TryOutQuoteRec.Code);

               TryOutQuoteLineRec.SETCURRENTKEY("Contact No.","Contact Person No.");
               IF IsContactPerson THEN BEGIN
                 TryOutQuoteLineRec.SETRANGE("Contact No.", "Company No.");
                 TryOutQuoteLineRec.SETRANGE("Contact Person No.", "No.");
               END ELSE BEGIN
                 TryOutQuoteLineRec.SETRANGE("Contact No.", "No.");
                 TryOutQuoteLineRec.SETRANGE("Contact Person No.");
               END;
               IF TryOutQuoteLineRec.FINDFIRST THEN
                 ERROR(Text11012002,TABLECAPTION,"No.",TryOutQuoteLineRec.TABLECAPTION,TryOutQuoteLineRec."Try-out Quote");

               DocumentRec.SETCURRENTKEY("Contact No.", "Contact Person No.");
               IF IsContactPerson THEN BEGIN
                 DocumentRec.SETRANGE("Contact No.", "Company No.");
                 DocumentRec.SETRANGE("Contact Person No.", "No.");
               END ELSE BEGIN
                 DocumentRec.SETRANGE("Contact No.", "No.");
                 DocumentRec.SETRANGE("Contact Person No.");
               END;
               DocumentRec.SETRANGE("Internal Company", COMPANYNAME);
               IF DocumentsByCompany THEN BEGIN
                 IF DocumentRec.FINDFIRST THEN
                   ERROR(Text11012002,TABLECAPTION,"No.",DocumentRec.TABLECAPTION,DocumentRec."No.");
               END ELSE BEGIN
                 CompRelationRec.RESET;
                 IF CompRelationRec.GET(COMPANYNAME) THEN BEGIN
                   CompRelationRec.SETRANGE("Company Contact Data", CompRelationRec."Company Contact Data");  //X016
                   IF CompRelationRec.FINDSET THEN BEGIN
                     REPEAT
                       DocumentRec.SETRANGE("Internal Company", CompRelationRec.Company);
                       IF DocumentRec.FINDFIRST THEN
                         ERROR(Text11012002,TABLECAPTION,"No.",DocumentRec.TABLECAPTION,DocumentRec."No.");
                     UNTIL CompRelationRec.NEXT = 0;
                   END;
                 END;
               END;

               IF Type = Type::Company THEN BEGIN
                 TryOutQuoteCompetitorRec.SETRANGE("Contact No.","No.");
                 IF TryOutQuoteCompetitorRec.FINDFIRST THEN
                   ERROR(Text11012001,TABLECAPTION,"No.",TryOutQuoteCompetitorRec.TABLECAPTION);
               END;

               IF IsPerson THEN BEGIN
                 Contact.SETCURRENTKEY("Person No.");
                 Contact.SETRANGE("Person No.", "No.");
                 Contact.SETRANGE(Type, Type::Person);
                 Contact.SETFILTER("No.", '<>%1', "No.");
                 IF Contact.FINDFIRST THEN
                   ERROR(Text11012028, "No.");
               END;
               //**4PS.en JTH 06-03-2003

               CASE Type OF
                 Type::Company:
                   BEGIN
                     ContBusRel.SETRANGE("Contact No.","No.");
                     ContBusRel.DELETEALL;
                     ContIndustGrp.SETRANGE("Contact No.","No.");
                     ContIndustGrp.DELETEALL;
                     ContactWebSource.SETRANGE("Contact No.","No.");
                     ContactWebSource.DELETEALL;
                     DuplMgt.RemoveContIndex(Rec,FALSE);
                     InteractLogEntry.SETCURRENTKEY("Contact Company No.");
                     InteractLogEntry.SETRANGE("Contact Company No.","No.");
                     IF InteractLogEntry.FINDSET(TRUE, FALSE) THEN //**4PS.n
                       REPEAT
                         CampaignTargetGrMgt.DeleteContfromTargetGr(InteractLogEntry);
                         CLEAR(InteractLogEntry."Contact Company No.");
                         CLEAR(InteractLogEntry."Contact No.");
                         InteractLogEntry.MODIFY;
                       UNTIL InteractLogEntry.NEXT = 0;

                     Cont.RESET;
                     Cont.SETCURRENTKEY("Company No.");
                     Cont.SETRANGE("Company No.","No.");
                     Cont.SETRANGE(Type,Type::Person);
                     IF Cont.FINDSET(TRUE, FALSE) THEN //**4PS.n
                       REPEAT
                         Cont.DELETE(TRUE);
                       UNTIL Cont.NEXT = 0;

                     Opp.RESET;
                     Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
                     Opp.SETRANGE("Contact Company No.","Company No.");
                     Opp.SETRANGE("Contact No.","No.");
                     IF Opp.FINDSET(TRUE, FALSE) THEN //**4PS.n
                       REPEAT
                         CLEAR(Opp."Contact No.");
                         CLEAR(Opp."Contact Company No.");
                         Opp.MODIFY;
                       UNTIL Opp.NEXT = 0;

                     Todo.RESET;
                     Todo.SETCURRENTKEY("Contact Company No.");
                     Todo.SETRANGE("Contact Company No.","Company No.");
                     IF Todo.FINDSET(TRUE, FALSE) THEN //**4PS.n
                       REPEAT
                         CLEAR(Todo."Contact No.");
                         CLEAR(Todo."Contact Company No.");
                         Todo.MODIFY;
                       UNTIL Todo.NEXT = 0;

                     //**4PS.sn
                     ContFeatureRec.SETRANGE("Relation Type", ContFeatureRec."Relation Type"::Company);
                     ContFeatureRec.SETRANGE(Code, "No.");
                     ContFeatureRec.DELETEALL;

                     RemoveDocumentMap;
                     //**4PS.en
                   END;
                 Type::Person:
                   BEGIN
                     //**4PS.sn
                     ContBusRel.RESET;
                     ContBusRel.SETRANGE("Contact No.","No.");
                     ContBusRel.DELETEALL;
                     //**4PS.en

                     ContJobResp.SETRANGE("Contact No.","No.");
                     ContJobResp.DELETEALL;

                     InteractLogEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                     InteractLogEntry.SETRANGE("Contact Company No.","Company No.");
                     InteractLogEntry.SETRANGE("Contact No.","No.");
                     InteractLogEntry.MODIFYALL("Contact No.","Company No.");

                     Opp.RESET;
                     Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
                     Opp.SETRANGE("Contact Company No.","Company No.");
                     Opp.SETRANGE("Contact No.","No.");
                     Opp.MODIFYALL("Contact No.","Company No.");

                     Todo.RESET;
                     Todo.SETCURRENTKEY("Contact Company No.","Contact No.");
                     Todo.SETRANGE("Contact Company No.","Company No.");
                     Todo.SETRANGE("Contact No.","No.");
                     Todo.MODIFYALL("Contact No.","Company No.");

                     //**4PS.sn
                     ContFeatureRec.SETFILTER("Relation Type", '%1|%2',
                       ContFeatureRec."Relation Type"::Contact,
                       ContFeatureRec."Relation Type"::Person);
                     ContFeatureRec.SETRANGE(Code, "No.");
                     ContFeatureRec.DELETEALL;

                     LinkedInProfile.SETRANGE("Contact No.", "No.");
                     LinkedInProfile.DELETEALL;
                     //**4PS.en
                   END;
               END;

               ContMailingGrp.SETRANGE("Contact No.","No.");
               ContMailingGrp.DELETEALL;

               ContProfileAnswer.SETRANGE("Contact No.","No.");
               ContProfileAnswer.DELETEALL;

               RMCommentLine.SETRANGE("Table Name",RMCommentLine."Table Name"::Contact);
               RMCommentLine.SETRANGE("No.","No.");
               RMCommentLine.SETRANGE("Sub No.",0);
               RMCommentLine.DELETEALL;

               ContAltAddr.SETRANGE("Contact No.","No.");
               ContAltAddr.DELETEALL;

               ContAltAddrDateRange.SETRANGE("Contact No.","No.");
               ContAltAddrDateRange.DELETEALL;

               VATRegistrationLogMgt.DeleteContactLog(Rec);
               //**4PS.sn
               RelContSalesPersRec.SETRANGE("Contact No.","No.");
               RelContSalesPersRec.DELETEALL;

               IF CRMPortRelation.GET(CRMPortRelation."Relation Type"::Contact, "No.") THEN
                 CRMPortRelation.DELETE(TRUE);

               CentralDataMgt.RemoveContact(Rec);
               ProjectSiteMgt.LogContact(3, Rec, GlobalCompanyName);
               //**4PS.en
             END;

    OnRename=VAR
               DocumentsRec@1210190000 : Record 11012746;
               Contact@1100528400 : Record 5050;
             BEGIN
               VALIDATE("Lookup Contact No.");
               //**4PS01.sn
               IF NOT SkipCentralDataMgtInOnRename THEN BEGIN
                 IF Contact.GET(xRec."No.") THEN
                   CentralDataMgt.EditContact(Rec, 3, xRec);
               END;
               IF ("Document Group" <> '') THEN BEGIN
                 //INSERT and DELETE are necessary for the validation of documents
                 IF Type = Type::Company THEN
                   "Company No." := "No.";
                 IF GlobalCompanyName = '' THEN BEGIN
                   //Needed once, this check prevents copy of all documents for all related companies again.
                   INSERT;
                   DocumentsRec.HandleRenameofContact(COMPANYNAME,xRec."No.", "No.","Document Group",FALSE);
                   DELETE;
                 END;
               END;
               //**4PS01.en
             END;

    CaptionML=ENU=Contact;
    LookupPageID=Page5052;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  RMSetup.GET;
                                                                  NoSeriesMgt.TestManual(RMSetup."Contact Nos.");
                                                                  //"No. Series" := ''; //**4PS.o
                                                                END;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                NameBreakdown;
                                                                ProcessNameChange;
                                                              END;

                                                   CaptionML=ENU=Name }
    { 3   ;   ;Search Name         ;Code50        ;CaptionML=ENU=Search Name }
    { 4   ;   ;Name 2              ;Text50        ;OnValidate=BEGIN
                                                                NameBreakdown;
                                                              END;

                                                   CaptionML=ENU=Name 2 }
    { 5   ;   ;Address             ;Text50        ;OnValidate=BEGIN
                                                                CheckPostCodeHouseNo; //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Address }
    { 6   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City }
    { 9   ;   ;Phone No.           ;Text30        ;OnValidate=BEGIN
                                                                PhoneNumberFormatting.ValidatePhoneNumber("Country/Region Code", "Phone No."); //**4PS.n
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 10  ;   ;Telex No.           ;Text20        ;CaptionML=ENU=Telex No. }
    { 15  ;   ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   CaptionML=ENU=Territory Code }
    { 22  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 24  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 29  ;   ;Salesperson Code    ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Salesperson Code }
    { 35  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region Code }
    { 38  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Rlshp. Mgt. Comment Line" WHERE (Table Name=CONST(Contact),
                                                                                                       No.=FIELD(No.),
                                                                                                       Sub No.=CONST(0)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 54  ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=No }
    { 84  ;   ;Fax No.             ;Text30        ;OnValidate=BEGIN
                                                                PhoneNumberFormatting.ValidatePhoneNumber("Country/Region Code", "Fax No."); //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Fax No. }
    { 85  ;   ;Telex Answer Back   ;Text20        ;CaptionML=ENU=Telex Answer Back }
    { 86  ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                VATRegNoFormat@1000 : Record 381;
                                                                VATRegistrationLogMgt@1001 : Codeunit 249;
                                                              BEGIN
                                                                IF VATRegNoFormat.Test("VAT Registration No.","Country/Region Code","No.",DATABASE::Contact) THEN
                                                                  IF "VAT Registration No." <> xRec."VAT Registration No." THEN
                                                                    VATRegistrationLogMgt.LogContact(Rec);
                                                              END;

                                                   CaptionML=ENU=VAT Registration No. }
    { 89  ;   ;Picture             ;BLOB          ;CaptionML=ENU=Picture;
                                                   SubType=Bitmap }
    { 91  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code }
    { 92  ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 102 ;   ;E-Mail              ;Text80        ;OnValidate=VAR
                                                                RecRef@1100528700 : RecordRef;
                                                                FldRef@1100528701 : FieldRef;
                                                              BEGIN
                                                                //**4PS.sn
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("E-Mail"));
                                                                ContactDataValidation.ValidateEmail(FldRef, "E-Mail");
                                                                //**4PS.en

                                                                IF ("Search E-Mail" = UPPERCASE(xRec."E-Mail")) OR ("Search E-Mail" = '') THEN
                                                                  "Search E-Mail" := "E-Mail";
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=E-Mail }
    { 103 ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=Home Page }
    { 107 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
    { 5050;   ;Type                ;Option        ;OnValidate=VAR
                                                                RecRef@1210190002 : RecordRef;
                                                                xRecRef@1210190001 : RecordRef;
                                                                ApplicationManagement@1210190000 : Codeunit 1;
                                                              BEGIN
                                                                IF (CurrFieldNo <> 0) AND ("No." <> '') THEN BEGIN
                                                                  xRecRef.GETTABLE(xRec); //**4PS.n
                                                                  TypeChange;
                                                                  //**4PS.sn
                                                                  RecRef.GETTABLE(Rec);
                                                                  ApplicationManagement.CheckFieldAutorisation(RecRef);
                                                                  //**4PS.en
                                                                  MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Company,Person;
                                                   OptionString=Company,Person }
    { 5051;   ;Company No.         ;Code20        ;TableRelation=Contact WHERE (Type=CONST(Company));
                                                   OnValidate=VAR
                                                                Opp@1000 : Record 5092;
                                                                OppEntry@1001 : Record 5093;
                                                                Todo@1002 : Record 5080;
                                                                InteractLogEntry@1003 : Record 11072027;
                                                                SegLine@1005 : Record 11072040;
                                                                SalesHeader@1004 : Record 36;
                                                                OriginalEmail@1006 : Text[80];
                                                                lContactFeatureTypeRec@1100485000 : Record 11012753;
                                                              BEGIN
                                                                IF "Company No." = xRec."Company No." THEN
                                                                  EXIT;

                                                                OriginalEmail := "E-Mail";

                                                                TESTFIELD(Type,Type::Person);

                                                                SegLine.SETCURRENTKEY("Contact No.");
                                                                SegLine.SETRANGE("Contact No.","No.");
                                                                IF SegLine.FINDFIRST THEN
                                                                  ERROR(Text012,FIELDCAPTION("Company No."));

                                                                IF Cont.GET("Company No.") THEN
                                                                  //InheritCompanyToPersonData(Cont,xRec."Company No." = '')  //**4PS.o (25310)
                                                                  InheritCompanyToPersonData(Cont,xRec."Company No." = '',xRec."Company No." = '')  //**4PS.n (25310)
                                                                ELSE
                                                                  CLEAR("Company Name");

                                                                IF Cont.GET("No.") THEN BEGIN
                                                                  IF xRec."Company No." <> '' THEN BEGIN
                                                                    Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    Opp.SETRANGE("Contact Company No.",xRec."Company No.");
                                                                    Opp.SETRANGE("Contact No.","No.");
                                                                    Opp.MODIFYALL("Contact No.",xRec."Company No.");
                                                                    OppEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    OppEntry.SETRANGE("Contact Company No.",xRec."Company No.");
                                                                    OppEntry.SETRANGE("Contact No.","No.");
                                                                    OppEntry.MODIFYALL("Contact No.",xRec."Company No.");
                                                                    Todo.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    Todo.SETRANGE("Contact Company No.",xRec."Company No.");
                                                                    Todo.SETRANGE("Contact No.","No.");
                                                                    Todo.MODIFYALL("Contact No.",xRec."Company No.");
                                                                    InteractLogEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    InteractLogEntry.SETRANGE("Contact Company No.",xRec."Company No.");
                                                                    InteractLogEntry.SETRANGE("Contact No.","No.");
                                                                    InteractLogEntry.MODIFYALL("Contact No.",xRec."Company No.");
                                                                    ContBusRel.RESET;
                                                                    ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                                    ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
                                                                    ContBusRel.SETRANGE("Contact No.",xRec."Company No.");
                                                                    SalesHeader.SETCURRENTKEY("Sell-to Customer No.","External Document No.");
                                                                    SalesHeader.SETRANGE("Sell-to Contact No.","No.");
                                                                    IF ContBusRel.FINDFIRST THEN
                                                                      SalesHeader.SETRANGE("Sell-to Customer No.",ContBusRel."No.")
                                                                    ELSE
                                                                      SalesHeader.SETRANGE("Sell-to Customer No.",'');
                                                                    IF SalesHeader.FINDSET(TRUE, FALSE) THEN
                                                                      REPEAT
                                                                        SalesHeader."Sell-to Contact No." := xRec."Company No.";
                                                                        IF SalesHeader."Sell-to Contact No." = SalesHeader."Bill-to Contact No." THEN
                                                                          SalesHeader."Bill-to Contact No." := xRec."Company No.";
                                                                        SalesHeader.MODIFY;
                                                                      UNTIL SalesHeader.NEXT = 0;
                                                                    SalesHeader.RESET;
                                                                    SalesHeader.SETCURRENTKEY("Bill-to Contact No.");
                                                                    SalesHeader.SETRANGE("Bill-to Contact No.","No.");
                                                                    SalesHeader.MODIFYALL("Bill-to Contact No.",xRec."Company No.");
                                                                  END ELSE BEGIN
                                                                    Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    Opp.SETRANGE("Contact Company No.",'');
                                                                    Opp.SETRANGE("Contact No.","No.");
                                                                    Opp.MODIFYALL("Contact Company No.","Company No.");
                                                                    OppEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    OppEntry.SETRANGE("Contact Company No.",'');
                                                                    OppEntry.SETRANGE("Contact No.","No.");
                                                                    OppEntry.MODIFYALL("Contact Company No.","Company No.");
                                                                    Todo.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    Todo.SETRANGE("Contact Company No.",'');
                                                                    Todo.SETRANGE("Contact No.","No.");
                                                                    Todo.MODIFYALL("Contact Company No.","Company No.");
                                                                    InteractLogEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    InteractLogEntry.SETRANGE("Contact Company No.",'');
                                                                    InteractLogEntry.SETRANGE("Contact No.","No.");
                                                                    InteractLogEntry.MODIFYALL("Contact Company No.","Company No.");
                                                                  END;
                                                                  IF OriginalEmail <> '' THEN
                                                                    "E-Mail" := OriginalEmail;
                                                                  IF CurrFieldNo <> 0 THEN
                                                                    MODIFY;
                                                                END;
                                                                //**4PS.sn
                                                                //Warning: Table Contact Feature Type is part of a granule which is not owned by all customers
                                                                //so only call tablefunction if records are present in table
                                                                lContactFeatureTypeRec.SETRANGE("Relation Type", lContactFeatureTypeRec."Relation Type"::Company);
                                                                lContactFeatureTypeRec.SETRANGE(Code, "Company No.");
                                                                IF lContactFeatureTypeRec.FINDFIRST THEN
                                                                  lContactFeatureTypeRec.CopyOneContFeatTypeFromComp(Rec,FALSE);
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Company No. }
    { 5052;   ;Company Name        ;Text50        ;CaptionML=ENU=Company Name;
                                                   Editable=No }
    { 5053;   ;Lookup Contact No.  ;Code20        ;TableRelation=Contact;
                                                   OnValidate=BEGIN
                                                                IF Type = Type::Company THEN
                                                                  "Lookup Contact No." := ''
                                                                ELSE
                                                                  "Lookup Contact No." := "No.";
                                                              END;

                                                   CaptionML=ENU=Lookup Contact No.;
                                                   Editable=No }
    { 5054;   ;First Name          ;Text30        ;OnValidate=BEGIN
                                                                ContactDataValidation.ValidateName("First Name"); //**4PS.n

                                                                //Name := CalculatedName;  //**4PS.o
                                                                Name := CalculatedName(1);  //**4PS.n
                                                                ProcessNameChange;
                                                              END;

                                                   CaptionML=ENU=First Name }
    { 5055;   ;Middle Name         ;Text30        ;TableRelation="Middle Name";
                                                   OnValidate=BEGIN
                                                                //Name := CalculatedName;  //**4PS.o
                                                                Name := CalculatedName(1);  //**4PS.n
                                                                ProcessNameChange;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Middle Name }
    { 5056;   ;Surname             ;Text50        ;OnValidate=BEGIN
                                                                ContactDataValidation.ValidateName(Surname); //**4PS.n

                                                                //Name := CalculatedName;  //**4PS.o
                                                                Name := CalculatedName(1);  //**4PS.n
                                                                ProcessNameChange;
                                                              END;

                                                   CaptionML=ENU=Surname }
    { 5058;   ;Job Title           ;Text50        ;CaptionML=ENU=Job Title }
    { 5059;   ;Initials            ;Text30        ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                ContactDataValidation.ValidateInitials(Initials);
                                                                Name := CalculatedName(1);
                                                                ProcessNameChange;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Initials }
    { 5060;   ;Extension No.       ;Text30        ;CaptionML=ENU=Extension No. }
    { 5061;   ;Mobile Phone No.    ;Text30        ;OnValidate=BEGIN
                                                                PhoneNumberFormatting.ValidatePhoneNumber("Country/Region Code", "Mobile Phone No."); //**4PS.n
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Mobile Phone No. }
    { 5062;   ;Pager               ;Text30        ;CaptionML=ENU=Pager }
    { 5063;   ;Organizational Level Code;Code10   ;TableRelation="Organizational Level";
                                                   CaptionML=ENU=Organizational Level Code }
    { 5064;   ;Exclude from Segment;Boolean       ;CaptionML=ENU=Exclude from Segment }
    { 5065;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 5066;   ;Next To-do Date     ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Min(To-do.Date WHERE (Contact Company No.=FIELD(Company No.),
                                                                                     Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                     Closed=CONST(No),
                                                                                     System To-do Type=CONST(Contact Attendee)));
                                                   CaptionML=ENU=Next To-do Date;
                                                   Editable=No }
    { 5067;   ;Last Date Attempted ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Max("Interaction Log Entry".Date WHERE (Contact Company No.=FIELD(Company No.),
                                                                                                       Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                       Initiated By=CONST(Us),
                                                                                                       Postponed=CONST(No)));
                                                   CaptionML=ENU=Last Date Attempted;
                                                   Editable=No }
    { 5068;   ;Date of Last Interaction;Date      ;FieldClass=FlowField;
                                                   CalcFormula=Max("Interaction Log Entry".Date WHERE (Contact Company No.=FIELD(Company No.),
                                                                                                       Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                       Attempt Failed=CONST(No),
                                                                                                       Postponed=CONST(No)));
                                                   CaptionML=ENU=Date of Last Interaction;
                                                   Editable=No }
    { 5069;   ;No. of Job Responsibilities;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("Contact Job Responsibility" WHERE (Contact No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Job Responsibilities;
                                                   Editable=No }
    { 5070;   ;No. of Industry Groups;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Contact Industry Group" WHERE (Contact No.=FIELD(Company No.)));
                                                   CaptionML=ENU=No. of Industry Groups;
                                                   Editable=No }
    { 5071;   ;No. of Business Relations;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Count("Contact Business Relation" WHERE (Contact No.=FIELD(Company No.)));
                                                   CaptionML=ENU=No. of Business Relations;
                                                   Editable=No }
    { 5072;   ;No. of Mailing Groups;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Contact Mailing Group" WHERE (Contact No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Mailing Groups;
                                                   Editable=No }
    { 5073;   ;External ID         ;Code20        ;CaptionML=ENU=External ID }
    { 5074;   ;No. of Interactions ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Interaction Log Entry" WHERE (Contact Company No.=FIELD(FILTER(Company No.)),
                                                                                                    Canceled=CONST(No),
                                                                                                    Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                    Date=FIELD(Date Filter),
                                                                                                    Postponed=CONST(No)));
                                                   CaptionML=ENU=No. of Interactions;
                                                   Editable=No }
    { 5076;   ;Cost (LCY)          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Interaction Log Entry"."Cost (LCY)" WHERE (Contact Company No.=FIELD(Company No.),
                                                                                                               Canceled=CONST(No),
                                                                                                               Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                               Date=FIELD(Date Filter),
                                                                                                               Postponed=CONST(No)));
                                                   CaptionML=ENU=Cost (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5077;   ;Duration (Min.)     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Interaction Log Entry"."Duration (Min.)" WHERE (Contact Company No.=FIELD(Company No.),
                                                                                                                    Canceled=CONST(No),
                                                                                                                    Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                                    Date=FIELD(Date Filter),
                                                                                                                    Postponed=CONST(No)));
                                                   CaptionML=ENU=Duration (Min.);
                                                   DecimalPlaces=0:0;
                                                   Editable=No }
    { 5078;   ;No. of Opportunities;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Opportunity Entry" WHERE (Active=CONST(Yes),
                                                                                                Contact Company No.=FIELD(Company No.),
                                                                                                Estimated Close Date=FIELD(Date Filter),
                                                                                                Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                Action Taken=FIELD(Action Taken Filter)));
                                                   CaptionML=ENU=No. of Opportunities;
                                                   Editable=No }
    { 5079;   ;Estimated Value (LCY);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Opportunity Entry"."Estimated Value (LCY)" WHERE (Active=CONST(Yes),
                                                                                                                      Contact Company No.=FIELD(Company No.),
                                                                                                                      Estimated Close Date=FIELD(Date Filter),
                                                                                                                      Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                                      Action Taken=FIELD(Action Taken Filter)));
                                                   CaptionML=ENU=Estimated Value (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5080;   ;Calcd. Current Value (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Opportunity Entry"."Calcd. Current Value (LCY)" WHERE (Active=CONST(Yes),
                                                                                                                           Contact Company No.=FIELD(Company No.),
                                                                                                                           Estimated Close Date=FIELD(Date Filter),
                                                                                                                           Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                                           Action Taken=FIELD(Action Taken Filter)));
                                                   CaptionML=ENU=Calcd. Current Value (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5082;   ;Opportunity Entry Exists;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Opportunity Entry" WHERE (Active=CONST(Yes),
                                                                                                Contact Company No.=FIELD(Company No.),
                                                                                                Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                Sales Cycle Code=FIELD(Sales Cycle Filter),
                                                                                                Sales Cycle Stage=FIELD(Sales Cycle Stage Filter),
                                                                                                Salesperson Code=FIELD(Salesperson Filter),
                                                                                                Campaign No.=FIELD(Campaign Filter),
                                                                                                Action Taken=FIELD(Action Taken Filter),
                                                                                                Estimated Value (LCY)=FIELD(Estimated Value Filter),
                                                                                                Calcd. Current Value (LCY)=FIELD(Calcd. Current Value Filter),
                                                                                                Completed %=FIELD(Completed % Filter),
                                                                                                Chances of Success %=FIELD(Chances of Success % Filter),
                                                                                                Probability %=FIELD(Probability % Filter),
                                                                                                Estimated Close Date=FIELD(Date Filter),
                                                                                                Close Opportunity Code=FIELD(Close Opportunity Filter)));
                                                   CaptionML=ENU=Opportunity Entry Exists;
                                                   Editable=No }
    { 5083;   ;To-do Entry Exists  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist(To-do WHERE (Contact Company No.=FIELD(Company No.),
                                                                                  Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                  Team Code=FIELD(Team Filter),
                                                                                  Salesperson Code=FIELD(Salesperson Filter),
                                                                                  Campaign No.=FIELD(Campaign Filter),
                                                                                  Date=FIELD(Date Filter),
                                                                                  Status=FIELD(To-do Status Filter),
                                                                                  Priority=FIELD(Priority Filter),
                                                                                  Closed=FIELD(To-do Closed Filter)));
                                                   CaptionML=ENU=To-do Entry Exists;
                                                   Editable=No }
    { 5084;   ;Salesperson Filter  ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Salesperson Filter }
    { 5085;   ;Campaign Filter     ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Campaign;
                                                   CaptionML=ENU=Campaign Filter }
    { 5087;   ;Action Taken Filter ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Action Taken Filter;
                                                   OptionCaptionML=ENU=" ,Next,Previous,Updated,Jumped,Won,Lost";
                                                   OptionString=[ ,Next,Previous,Updated,Jumped,Won,Lost] }
    { 5088;   ;Sales Cycle Filter  ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Sales Cycle";
                                                   CaptionML=ENU=Sales Cycle Filter }
    { 5089;   ;Sales Cycle Stage Filter;Integer   ;FieldClass=FlowFilter;
                                                   TableRelation="Sales Cycle Stage".Stage WHERE (Sales Cycle Code=FIELD(Sales Cycle Filter));
                                                   CaptionML=ENU=Sales Cycle Stage Filter }
    { 5090;   ;Probability % Filter;Decimal       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Probability % Filter;
                                                   DecimalPlaces=1:1;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 5091;   ;Completed % Filter  ;Decimal       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Completed % Filter;
                                                   DecimalPlaces=1:1;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 5092;   ;Estimated Value Filter;Decimal     ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Estimated Value Filter;
                                                   AutoFormatType=1 }
    { 5093;   ;Calcd. Current Value Filter;Decimal;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Calcd. Current Value Filter;
                                                   AutoFormatType=1 }
    { 5094;   ;Chances of Success % Filter;Decimal;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Chances of Success % Filter;
                                                   DecimalPlaces=0:0;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 5095;   ;To-do Status Filter ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=To-do Status Filter;
                                                   OptionCaptionML=ENU=Not Started,In Progress,Completed,Waiting,Postponed;
                                                   OptionString=Not Started,In Progress,Completed,Waiting,Postponed }
    { 5096;   ;To-do Closed Filter ;Boolean       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=To-do Closed Filter }
    { 5097;   ;Priority Filter     ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Priority Filter;
                                                   OptionCaptionML=ENU=Low,Normal,High;
                                                   OptionString=Low,Normal,High }
    { 5098;   ;Team Filter         ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Team;
                                                   CaptionML=ENU=Team Filter }
    { 5099;   ;Close Opportunity Filter;Code10    ;FieldClass=FlowFilter;
                                                   TableRelation="Close Opportunity Code";
                                                   CaptionML=ENU=Close Opportunity Filter }
    { 5100;   ;Correspondence Type ;Option        ;CaptionML=ENU=Correspondence Type;
                                                   OptionCaptionML=ENU=" ,Hard Copy,E-Mail,Fax";
                                                   OptionString=[ ,Hard Copy,E-Mail,Fax] }
    { 5101;   ;Salutation Code     ;Code10        ;TableRelation=Salutation;
                                                   CaptionML=ENU=Salutation Code }
    { 5102;   ;Search E-Mail       ;Code80        ;CaptionML=ENU=Search E-Mail }
    { 5104;   ;Last Time Modified  ;Time          ;CaptionML=ENU=Last Time Modified }
    { 5105;   ;E-Mail 2            ;Text80        ;OnValidate=VAR
                                                                RecRef@1100528700 : RecordRef;
                                                                FldRef@1100528701 : FieldRef;
                                                              BEGIN
                                                                //**4PS.sn
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("E-Mail 2"));
                                                                ContactDataValidation.ValidateEmail(FldRef, "E-Mail 2");
                                                                //**4PS.en
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=E-Mail 2 }
    { 11012062;;COC Location No.   ;Text30        ;CaptionML=ENU=COC Location No. }
    { 11012480;;E-Mail for Purch. Order;Text80    ;OnValidate=VAR
                                                                RecRef@1100528701 : RecordRef;
                                                                FldRef@1100528700 : FieldRef;
                                                              BEGIN
                                                                //**4PS.sn
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("E-Mail for Purch. Order"));
                                                                ContactDataValidation.ValidateEmail(FldRef, "E-Mail for Purch. Order");
                                                                //**4PS.en
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=E-Mail for Purch. Order }
    { 11012600;;Login ID           ;Code30        ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                TESTFIELD(Type, Type::Person);
                                                                IF (xRec."Login ID" = '') AND ("Login ID" <> '') THEN
                                                                  "Enablement Date" := TODAY;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Login ID }
    { 11012601;;Password           ;Text32        ;CaptionML=ENU=Password }
    { 11012602;;Role               ;Option        ;CaptionML=ENU=Role;
                                                   OptionCaptionML=ENU=Normal User,Customer Admin;
                                                   OptionString=Normal User,Customer Admin }
    { 11012603;;Enablement Date    ;Date          ;CaptionML=ENU=Enablement Date }
    { 11012900;;Document Group     ;Code10        ;TableRelation="Document Group";
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF IsContactPerson THEN
                                                                  TESTFIELD("Document Group",'');
                                                              END;

                                                   CaptionML=ENU=Document Group }
    { 11012901;;Sequence No. Last Document;Integer;InitValue=1;
                                                   CaptionML=ENU=Sequence No. Last Document }
    { 11012902;;Created in Outlook ;Boolean       ;CaptionML=ENU=Created in Outlook }
    { 11012903;;Created on         ;Date          ;CaptionML=ENU=Created on (Outlook) }
    { 11012904;;Phone No. 2        ;Text30        ;OnValidate=BEGIN
                                                                PhoneNumberFormatting.ValidatePhoneNumber("Country/Region Code", "Phone No. 2"); //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Phone No. 2 }
    { 11012905;;Sex                ;Option        ;OnValidate=BEGIN
                                                                //**4PS
                                                                GetSexSalutation;
                                                              END;

                                                   CaptionML=ENU=Sex;
                                                   OptionCaptionML=ENU=" ,Female,Male";
                                                   OptionString=[ ,Female,Male] }
    { 11012906;;Blocked            ;Boolean       ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF Blocked THEN BEGIN
                                                                  "Blocked at" := TODAY;
                                                                  "Blocked by" := USERID;
                                                                END ELSE BEGIN
                                                                  "Blocked at" := 0D;
                                                                  "Blocked by" := '';
                                                                  "Blocking Reason" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Blocked }
    { 11012907;;Relation changed by;Option        ;CaptionML=ENU=Relation changed by;
                                                   OptionCaptionML=ENU=" ,Employee,Contact";
                                                   OptionString=[ ,Employee,Contact] }
    { 11012908;;Contact Type       ;Code20        ;FieldClass=Normal;
                                                   TableRelation="Contact Type".Code;
                                                   CaptionML=ENU=Contact Type }
    { 11012910;;Visit Address      ;Text50        ;OnValidate=VAR
                                                                lDummy@1210190000 : Text[30];
                                                              BEGIN
                                                                //**4PS
                                                              END;

                                                   CaptionML=ENU=Visit Address }
    { 11012911;;Visit Address 2    ;Text50        ;CaptionML=ENU=Visit Address 2 }
    { 11012912;;Visit Address Post Code;Code20    ;TableRelation=IF (Visit Address Country/Region=CONST()) "Post Code"
                                                                 ELSE IF (Visit Address Country/Region=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Visit Address Country/Region));
                                                   OnValidate=VAR
                                                                PostCode@1210190018 : Record 225;
                                                              BEGIN
                                                                //**4PS
                                                                PostCode.ValidatePostCode("Visit Address City","Visit Address Post Code","Visit Address County","Visit Address Country/Region",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Visit Address Post Code }
    { 11012913;;Visit Address City ;Text30        ;TableRelation=IF (Visit Address Country/Region=CONST()) "Post Code".City
                                                                 ELSE IF (Visit Address Country/Region=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Visit Address Country/Region));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                PostCode.ValidateCity("Visit Address City","Visit Address Post Code","Visit Address County","Visit Address Country/Region",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Visit Address City }
    { 11012914;;Visit Address Country/Region;Code10;
                                                   TableRelation=Country/Region;
                                                   CaptionML=ENU=Visit Address Country/Region }
    { 11012915;;Visit Address County;Text30       ;CaptionML=ENU=Visit Address County }
    { 11012916;;Company Name 2     ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Name 2" WHERE (No.=FIELD(Company No.)));
                                                   CaptionML=ENU=Company Name 2;
                                                   Editable=No }
    { 11012917;;Project No.        ;Code20        ;TableRelation=Job;
                                                   CaptionML=ENU=Project No.;
                                                   Editable=No }
    { 11012918;;Plot No.           ;Code10        ;TableRelation=Plot."Plot No." WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Plot No.;
                                                   Editable=No }
    { 11012919;;Title              ;Text30        ;TableRelation="Academic Title" WHERE (Title Behind the Name=CONST(No));
                                                   OnValidate=BEGIN
                                                                Name := CalculatedName(1); //**4PS.n
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Title }
    { 11012920;;Title 2            ;Text30        ;TableRelation="Academic Title" WHERE (Title Behind the Name=CONST(No));
                                                   OnValidate=BEGIN
                                                                "Name 2" := CalculatedName(2); //**4PS.n
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Title 2 }
    { 11012921;;Job Title 2        ;Text50        ;CaptionML=ENU=Job Title 2 }
    { 11012922;;Initials 2         ;Text30        ;OnValidate=BEGIN
                                                                ContactDataValidation.ValidateInitials("Initials 2"); //**4PS.n
                                                                "Name 2" := CalculatedName(2);  //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Initials 2 }
    { 11012923;;First Name 2       ;Text20        ;CaptionML=ENU=First Name 2 }
    { 11012924;;Middle Name 2      ;Text20        ;TableRelation="Middle Name";
                                                   OnValidate=BEGIN
                                                                "Name 2" := CalculatedName(2);  //**4PS.n
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Middle Name 2 }
    { 11012925;;Surname 2          ;Text50        ;OnValidate=BEGIN
                                                                "Name 2" := CalculatedName(2);  //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Surname 2 }
    { 11012926;;Sex 2              ;Option        ;OnValidate=BEGIN
                                                                //**4PS
                                                                //GetSexSalutation; //**4PS.12
                                                              END;

                                                   CaptionML=ENU=Sex 2;
                                                   OptionCaptionML=ENU=" ,Female,Male";
                                                   OptionString=[ ,Female,Male] }
    { 11012927;;Title Behind the Name;Text30      ;TableRelation="Academic Title" WHERE (Title Behind the Name=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                Name := CalculatedName(1); //**4PS.n
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Title Behind the Name;
                                                   Description=Title like RA, MSc }
    { 11012928;;Title Behind the Name 2;Text30    ;TableRelation="Academic Title" WHERE (Title Behind the Name=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                "Name 2" := CalculatedName(2); //**4PS.n
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Title Behind the Name 2 }
    { 11012930;;Name Abbreviation  ;Text30        ;CaptionML=ENU=Name Abbreviation }
    { 11012940;;Name Abbreviation 2;Text30        ;CaptionML=ENU=Name Abbreviation 2 }
    { 11012941;;Modified by        ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              LoginMgt@1100485000 : Codeunit 418;
                                                              UserCode@1100485001 : Code[50];
                                                            BEGIN
                                                              UserCode := "Modified by";
                                                              LoginMgt.LookupUserID(UserCode);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Modified by;
                                                   Editable=No }
    { 11012942;;Blocked at         ;Date          ;CaptionML=ENU=Blocked at;
                                                   Editable=No }
    { 11012943;;Blocked by         ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              LoginMgt@1100528701 : Codeunit 418;
                                                              UserCode@1100528700 : Code[50];
                                                            BEGIN
                                                              //**4PS
                                                              UserCode := "Blocked by";
                                                              LoginMgt.LookupUserID(UserCode);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Blocked by;
                                                   Editable=No }
    { 11012944;;Blocking Reason    ;Code10        ;TableRelation="Blocking Reason";
                                                   CaptionML=ENU=Blocking Reason }
    { 11012950;;Civilian State     ;Option        ;CaptionML=ENU=Civilian State;
                                                   OptionCaptionML=ENU=" ,Married,Living Together,Remaining";
                                                   OptionString=[ ,Married,Living Together,Remaining] }
    { 11012951;;Wedding Date       ;Date          ;OnValidate=VAR
                                                                RecRef@1100528701 : RecordRef;
                                                                FldRef@1100528700 : FieldRef;
                                                              BEGIN
                                                                //**4PS
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("Wedding Date"));
                                                                ContactDataValidation.ValidateWeddingDate(FldRef);
                                                              END;

                                                   CaptionML=ENU=Wedding Date }
    { 11012960;;Place of Birth 1   ;Text30        ;CaptionML=ENU=Place of Birth 1 }
    { 11012970;;Place of Birth 2   ;Text30        ;CaptionML=ENU=Place of Birth 2 }
    { 11012971;;Birth Date 1       ;Date          ;OnValidate=VAR
                                                                RecRef@1100528700 : RecordRef;
                                                                FldRef@1100528701 : FieldRef;
                                                              BEGIN
                                                                //**4PS
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("Birth Date 1"));
                                                                ContactDataValidation.ValidateBirthDate(FldRef);

                                                                "Birth Day 1" := 0;
                                                                "Birth Month 1" := 0;
                                                                IF "Birth Date 1" <> 0D THEN BEGIN
                                                                  "Birth Day 1" := DATE2DMY("Birth Date 1", 1);
                                                                  "Birth Month 1" := DATE2DMY("Birth Date 1", 2);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Birth Date 1 }
    { 11012972;;Birth Date 2       ;Date          ;OnValidate=VAR
                                                                RecRef@1100528701 : RecordRef;
                                                                FldRef@1100528700 : FieldRef;
                                                              BEGIN
                                                                //**4PS
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("Birth Date 2"));
                                                                ContactDataValidation.ValidateBirthDate(FldRef);

                                                                "Birth Day 2" := 0;
                                                                "Birth Month 2" := 0;
                                                                IF "Birth Date 2" <> 0D THEN BEGIN
                                                                  "Birth Day 2" := DATE2DMY("Birth Date 2", 1);
                                                                  "Birth Month 2" := DATE2DMY("Birth Date 2", 2);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Birth Date 2 }
    { 11012975;;Birth Day 1        ;Integer       ;OnValidate=BEGIN
                                                                //**4PS
                                                                ContactDataValidation.ValidateDayOfMonth("Birth Day 1", "Birth Month 1");
                                                              END;

                                                   CaptionML=ENU=Birth Day 1;
                                                   MinValue=0;
                                                   MaxValue=31;
                                                   BlankZero=Yes }
    { 11012976;;Birth Month 1      ;Integer       ;OnValidate=BEGIN
                                                                //**4PS
                                                                ContactDataValidation.ValidateDayOfMonth("Birth Day 1", "Birth Month 1");
                                                              END;

                                                   CaptionML=ENU=Birth Month 1;
                                                   MinValue=0;
                                                   MaxValue=12;
                                                   BlankZero=Yes }
    { 11012977;;Birth Day 2        ;Integer       ;OnValidate=BEGIN
                                                                //**4PS
                                                                ContactDataValidation.ValidateDayOfMonth("Birth Day 2", "Birth Month 2");
                                                              END;

                                                   CaptionML=ENU=Birth Day 2;
                                                   MinValue=0;
                                                   MaxValue=31;
                                                   BlankZero=Yes }
    { 11012978;;Birth Month 2      ;Integer       ;OnValidate=BEGIN
                                                                //**4PS
                                                                ContactDataValidation.ValidateDayOfMonth("Birth Day 2", "Birth Month 2");
                                                              END;

                                                   CaptionML=ENU=Birth Month 2;
                                                   MinValue=0;
                                                   MaxValue=12;
                                                   BlankZero=Yes }
    { 11012980;;Phone No. Work     ;Text30        ;OnValidate=BEGIN
                                                                PhoneNumberFormatting.ValidatePhoneNumber("Country/Region Code", "Phone No. Work"); //**4PS.n
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. Work }
    { 11012985;;Purchaser Code     ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Purchaser Code }
    { 11012986;;Name Purchaser     ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Purchaser Code)));
                                                   CaptionML=ENU=Name Purchaser;
                                                   Editable=No }
    { 11012990;;Phone No. Work 2   ;Text30        ;OnValidate=BEGIN
                                                                PhoneNumberFormatting.ValidatePhoneNumber("Country/Region Code", "Phone No. Work 2"); //**4PS.n
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. Work 2 }
    { 11012992;;Mobile Phone No. 2 ;Text30        ;OnValidate=BEGIN
                                                                PhoneNumberFormatting.ValidatePhoneNumber("Country/Region Code", "Mobile Phone No. 2"); //**4PS.n
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Mobile Phone No. 2 }
    { 11012993;;Name Salesperson   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Salesperson Code)));
                                                   CaptionML=ENU=Name Salesperson;
                                                   Editable=No }
    { 11012994;;City COC           ;Text30        ;CaptionML=ENU=City COC }
    { 11012995;;COC Registration No.;Text20       ;CaptionML=ENU=COC Registration No. }
    { 11012996;;Due Date COC Statement;Date       ;CaptionML=ENU=Due Date COC Statement }
    { 11012997;;Department         ;Text30        ;CaptionML=ENU=Department }
    { 11012998;;Sales Representative Code;Code10  ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Sales Representative Code }
    { 11012999;;Name Sales Representative;Text50  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Sales Representative Code)));
                                                   CaptionML=ENU=Name Sales Representative;
                                                   Editable=No }
    { 11125763;;Website Code (Plant Mgt.);Code10  ;TableRelation="Website (Plant Mgt.)";
                                                   CaptionML=ENU=Website Code (Plant Mgt.) }
    { 11125764;;Person No.         ;Code20        ;TableRelation=Contact WHERE (Type=CONST(Person),
                                                                                Company No.=FILTER(''));
                                                   OnValidate=VAR
                                                                Contact@1100528700 : Record 5050;
                                                              BEGIN
                                                                //**4PS
                                                                Contact.SETCURRENTKEY("Company No.");
                                                                Contact.SETRANGE(Type, Type::Person);
                                                                Contact.SETRANGE("Company No.", "Company No.");
                                                                Contact.SETRANGE("Person No.", "Person No.");
                                                                Contact.SETFILTER("No.", '<>%1', "No.");
                                                                IF Contact.FINDFIRST THEN
                                                                  ERROR(Text11012029, "Person No.", "Company No.");

                                                                Contact.RESET;
                                                                IF Contact.GET("Person No.") THEN
                                                                  InheritFromPerson(Contact);
                                                              END;

                                                   CaptionML=ENU=Person No. }
    { 11125771;;Project Portal ID  ;Code50        ;CaptionML=ENU=Project Portal ID;
                                                   Editable=No }
    { 11125861;;EORI No.           ;Text20        ;CaptionML=ENU=EORI No. }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Name                              }
    {    ;Company Name,Company No.,Type,Name       }
    {    ;Company No.                              }
    {    ;Territory Code                           }
    {    ;Salesperson Code                         }
    {    ;VAT Registration No.                     }
    {    ;Search E-Mail                            }
    {    ;Name                                     }
    {    ;City                                     }
    {    ;Post Code                                }
    {    ;Phone No.                                }
    {    ;Person No.                               }
    {    ;Surname                                  }
    {    ;Project Portal ID                        }
    {    ;Job Title                                }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Name,Type,City,Post Code,Phone No.,Job Title,Company No. }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot delete the %2 record of the %1 because there are one or more to-dos open.';
      Text001@1001 : TextConst 'ENU=You cannot delete the %2 record of the %1 because the contact is assigned one or more unlogged segments.';
      Text002@1002 : TextConst 'ENU=You cannot delete the %2 record of the %1 because one or more opportunities are in not started or progress.';
      Text003@1003 : TextConst 'ENU=%1 cannot be changed because one or more interaction log entries are linked to the contact.';
      Text005@1005 : TextConst 'ENU=%1 cannot be changed because one or more to-dos are linked to the contact.';
      Text006@1006 : TextConst 'ENU=%1 cannot be changed because one or more opportunities are linked to the contact.';
      Text007@1007 : TextConst 'ENU=%1 cannot be changed because there are one or more related people linked to the contact.';
      Text009@1009 : TextConst 'ENU=The %2 record of the %1 has been created.';
      Text010@1010 : TextConst 'ENU=The %2 record of the %1 is not linked with any other table.';
      RMSetup@1012 : Record 5079;
      Cont@1013 : Record 5050;
      ContBusRel@1014 : Record 5054;
      PostCode@1011 : Record 225;
      DuplMgt@1015 : Codeunit 5060;
      NoSeriesMgt@1016 : Codeunit 396;
      UpdateCustVendBank@1017 : Codeunit 5055;
      CampaignMgt@1050 : Codeunit 7030;
      PhoneNumberFormatting@1100528701 : Codeunit 11012276;
      ContChanged@1018 : Boolean;
      SkipDefaults@1019 : Boolean;
      Text012@1020 : TextConst 'ENU=You cannot change %1 because one or more unlogged segments are assigned to the contact.';
      Text019@1022 : TextConst 'ENU=The %2 record of the %1 already has the %3 with %4 %5.';
      Text020@1021 : TextConst 'ENU=Do you want to create contact %1 %2 as a customer using a customer template?';
      Text021@1023 : TextConst 'ENU=You have to set up formal and informal salutation formulas in %1  language for the %2 contact.';
      HideValidationDialog@1032 : Boolean;
      Text022@1034 : TextConst 'ENU=The creation of the customer has been aborted.';
      Text029@1045 : TextConst 'ENU=The total length of first name, middle name and surname is %1 character(s)longer than the maximum length allowed for the Name field.';
      Text032@1048 : TextConst 'ENU=The length of %1 is %2 character(s)longer than the maximum length allowed for the %1 field.';
      Text033@1008 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      SkipCheckDupl@1210190013 : Boolean;
      SkipCentralDataMgtInOnRename@1100528400 : Boolean;
      Text11012001@1210190006 : TextConst 'ENU=You cannot delete %1 %2 because data is present in %3.';
      Text11012002@1210190007 : TextConst 'ENU=You cannot delete %1 %2 because data is present in %3 %4.';
      Text11012005@1210190010 : TextConst 'ENU=You have to set up a salutation formula with salutation type %1 for contact %2.';
      Text11012006@1210190011 : TextConst 'ENU=No try-outs present for contact %1';
      Text11012007@1210190012 : TextConst 'ENU=No try-out quotes present for contact %1';
      Text11012008@1210190014 : TextConst 'ENU=%1 %2 already exists';
      Text11012009@1210190017 : TextConst 'ENU=You cannot delete %1 %2 because the contact is assigned to unlogged segment %3, line no. %4.';
      ContSalespersRec@1100485003 : Record 11012760;
      CompRelationRec@1100485000 : Record 11012059;
      GlobalCompanyName@1100485006 : Text[50];
      CentralDataMgt@1100485007 : Codeunit 11012010;
      Text11012011@1100485004 : TextConst 'ENU=%1 %2 exists, use function ''Link with existing %1''.';
      Text11012012@1100485005 : TextConst 'ENU=Contact %1 is present as %2 %3 in %4.\Continue?';
      ContactDataValidation@1100528700 : Codeunit 11012275;
      FileMgt@1210190000 : Codeunit 419;
      Text11012015@1100530000 : TextConst 'ENU=You have changed %1. Please check the Business Relations.';
      Text11012016@1100528702 : TextConst 'ENU=No contact present for customer %1.';
      Text11012017@1100528703 : TextConst 'ENU=No contact present for vendor %1.';
      Text11012018@1100528704 : TextConst 'ENU=No contact present for employee %1.';
      Text11012019@1100528710 : TextConst 'ENU=Persons are managed centrally, insert is not allowed.';
      Text11012020@1100528709 : TextConst 'ENU=Companies are managed centrally, insert is not allowed.';
      Text11012021@1100528708 : TextConst 'ENU=Persons are managed centrally, delete is not allowed.';
      Text11012022@1100528707 : TextConst 'ENU=Companies are managed centrally, delete is not allowed.';
      Text11012023@1100528706 : TextConst 'ENU=Customers are managed centrally, insert is not allowed.';
      Text11012024@1100528705 : TextConst 'ENU=Vendors are managed centrally, insert is not allowed.';
      Text11012025@1100528712 : TextConst 'ENU=Not all %1s selected for %2 %3 %4';
      Text11012026@1100528711 : TextConst 'ENU=Not all %1s selected for %2 %3 %4';
      Text11012027@1100528713 : TextConst 'ENU=Only %1s of type %2 or %3 without %4 are allowed.';
      Text11012028@1100528715 : TextConst 'ENU=%1 cannot be deleted because there are one or more contact persons linked to the contact.';
      Text11012029@1100528714 : TextConst 'ENU=Person %1 already exists as contact person for company %2.';
      Text11012030@1210190004 : TextConst 'ENU=Create a new person,Select an existing person';
      Text11012032@1210190002 : TextConst 'ENU=Do you want to edit the contact person?';
      ProjectSiteMgt@1100528300 : Codeunit 11012282;
      Text11012033@1100528716 : TextConst 'ENU=No %1s selected for %2 %3 %4.';
      Text11012034@1100409000 : TextConst 'ENU=%1 %2 not found.';

    PROCEDURE OnModify@4(xRec@1005 : Record 5050;IsLeadingCompany@1100485000 : Boolean);
    VAR
      OldCont@1001 : Record 5050;
      CentralDataManagement@1100409000 : Codeunit 11012010;
    BEGIN
      //**4PS.sn
      UpdateCustVendBank.SetIsSecondaryCompany(NOT IsLeadingCompany); //**4PS11.n
      "Modified by" := USERID;  //**4PS10.n
      //**4PS.en
      "Last Date Modified" := TODAY;
      "Last Time Modified" := TIME;

      //**4PS.sn
      IF (Type = Type::Person) AND
         ("Relation changed by" <> "Relation changed by"::Employee) THEN
      BEGIN
        UpdateCustVendBank.SetCompany(GlobalCompanyName);
        UpdateCustVendBank.RUN(Rec);
      END;
      "Relation changed by" := "Relation changed by"::" ";  //db, 05-09-06
      //**4PS.en
      //IF Type = Type::Company THEN BEGIN //**4PS.o
        IF (Name <> xRec.Name) OR
           ("Search Name" <> xRec."Search Name") OR
           ("Name 2" <> xRec."Name 2") OR
           (Address <> xRec.Address) OR
           ("Address 2" <> xRec."Address 2") OR
           (City <> xRec.City) OR
           ("Phone No." <> xRec."Phone No.") OR
           ("Telex No." <> xRec."Telex No.") OR
           ("Territory Code" <> xRec."Territory Code") OR
      //     ("Currency Code" <> xRec."Currency Code") OR //**4PS.o
           ("Language Code" <> xRec."Language Code") OR
           ("Salesperson Code" <> xRec."Salesperson Code") OR
           ("Country/Region Code" <> xRec."Country/Region Code") OR
           ("Fax No." <> xRec."Fax No.") OR
           ("Telex Answer Back" <> xRec."Telex Answer Back") OR
           ("VAT Registration No." <> xRec."VAT Registration No.") OR
           ("Post Code" <> xRec."Post Code") OR
           (County <> xRec.County) OR
           ("E-Mail" <> xRec."E-Mail") OR
           ("Home Page" <> xRec."Home Page")
      //**4PS.sn
           OR
           ("Sales Representative Code" <> xRec."Sales Representative Code") OR
           ("Purchaser Code" <> xRec."Purchaser Code") OR
           ("Phone No. 2" <> xRec."Phone No. 2") OR
           ("Mobile Phone No." <> xRec."Mobile Phone No.") OR
           (Blocked AND (Blocked <> xRec.Blocked)) OR
           ("COC Registration No." <> xRec."COC Registration No.") OR
           ("COC Location No." <> xRec."COC Location No.") OR
           ("City COC" <> xRec."City COC") OR
           ("Due Date COC Statement" <> xRec."Due Date COC Statement") OR
           ("EORI No." <> xRec."EORI No.")
      //**4PS.en
        THEN
        BEGIN //**4PS.n
          UpdateCustVendBank.SetCompany(GlobalCompanyName); //**4PS.n
          UpdateCustVendBank.RUN(Rec);
        END; //**4PS.n

      IF (Type = Type::Company) THEN BEGIN
        RMSetup.GET;
        Cont.RESET;
        IF GlobalCompanyName <> '' THEN BEGIN
          Cont.CHANGECOMPANY(GlobalCompanyName);
          Cont.SetGlobalCompanyName(GlobalCompanyName);
        END;
        Cont.SETCURRENTKEY("Company No.");
        Cont.SETRANGE("Company No.","No.");
        Cont.SETRANGE(Type,Type::Person);
        IF Cont.FINDSET(TRUE, FALSE) THEN
          REPEAT
            ContChanged := FALSE;
            OldCont := Cont;
            IF Name <> xRec.Name THEN BEGIN
              Cont."Company Name" := Name;
              ContChanged := TRUE;
            END;
            IF RMSetup."Inherit Salesperson Code" AND
               (xRec."Salesperson Code" <> "Salesperson Code") AND
               (xRec."Salesperson Code" = Cont."Salesperson Code")
            THEN BEGIN
              Cont."Salesperson Code" := "Salesperson Code";
              ContChanged := TRUE;
            END;
      //**4PS.sn
            IF RMSetup."Inherit Sales Rep. Code" AND
               (xRec."Sales Representative Code" <> "Sales Representative Code") AND
               (xRec."Sales Representative Code" = Cont."Sales Representative Code")
            THEN BEGIN
              Cont."Sales Representative Code" := "Sales Representative Code";
              ContChanged := TRUE;
            END;
            IF RMSetup."Inherit Purchaser Code" AND
               (xRec."Purchaser Code" <> "Purchaser Code") AND
               (xRec."Purchaser Code" = Cont."Purchaser Code")
            THEN BEGIN
              Cont."Purchaser Code" := "Purchaser Code";
              ContChanged := TRUE;
            END;
      //**4PS.en
            IF RMSetup."Inherit Territory Code" AND
               (xRec."Territory Code" <> "Territory Code") AND
               (xRec."Territory Code" = Cont."Territory Code")
            THEN BEGIN
              Cont."Territory Code" := "Territory Code";
              ContChanged := TRUE;
            END;
            IF RMSetup."Inherit Country/Region Code" AND
               (xRec."Country/Region Code" <> "Country/Region Code") AND
               (xRec."Country/Region Code" = Cont."Country/Region Code")
            THEN BEGIN
              Cont."Country/Region Code" := "Country/Region Code";
              ContChanged := TRUE;
            END;
            IF RMSetup."Inherit Language Code" AND
               (xRec."Language Code" <> "Language Code") AND
               (xRec."Language Code" = Cont."Language Code")
            THEN BEGIN
              Cont."Language Code" := "Language Code";
              ContChanged := TRUE;
            END;
            IF RMSetup."Inherit Address Details" THEN
              IF xRec.IdenticalAddress(Cont) THEN BEGIN
                IF xRec.Address <> Address THEN BEGIN
                  Cont.Address := Address;
                  ContChanged := TRUE;
                END;
                IF xRec."Address 2" <> "Address 2" THEN BEGIN
                  Cont."Address 2" := "Address 2";
                  ContChanged := TRUE;
                END;
                IF xRec."Post Code" <> "Post Code" THEN BEGIN
                  Cont."Post Code" := "Post Code";
                  ContChanged := TRUE;
                END;
                IF xRec.City <> City THEN BEGIN
                  Cont.City := City;
                  ContChanged := TRUE;
                END;
                IF xRec.County <> County THEN BEGIN
                  Cont.County := County;
                  ContChanged := TRUE;
                END;
              END;
            //**4PS.sn
            IF RMSetup."Inherit Visit Address Details" THEN BEGIN
              IF xRec.IdenticalVisitAddress(Cont) THEN BEGIN
                IF xRec."Visit Address" <> "Visit Address" THEN BEGIN
                  Cont."Visit Address" := "Visit Address";
                  ContChanged := TRUE;
                END;
                IF xRec."Visit Address 2" <> "Visit Address 2" THEN BEGIN
                  Cont."Visit Address 2" := "Visit Address 2";
                  ContChanged := TRUE;
                END;
                IF xRec."Visit Address Post Code" <> "Visit Address Post Code" THEN BEGIN
                  Cont."Visit Address Post Code" := "Visit Address Post Code";
                  ContChanged := TRUE;
                END;
                IF xRec."Visit Address City" <> "Visit Address City" THEN BEGIN
                  Cont."Visit Address City" := "Visit Address City";
                  ContChanged := TRUE;
                END;
                IF xRec."Visit Address Country/Region" <> "Visit Address Country/Region" THEN BEGIN
                  Cont."Visit Address Country/Region" := "Visit Address Country/Region";
                  ContChanged := TRUE;
                END;
                IF xRec."Visit Address County" <> "Visit Address County" THEN BEGIN
                  Cont."Visit Address County" := "Visit Address County";
                  ContChanged := TRUE;
                END;
              END;
            END;
            //**4PS.en
            IF RMSetup."Inherit Communication Details" THEN BEGIN
              IF (xRec."Phone No." <> "Phone No.") AND (xRec."Phone No." = Cont."Phone No.") THEN BEGIN
                Cont."Phone No." := "Phone No.";
                ContChanged := TRUE;
              END;
              IF (xRec."Phone No. 2" <> "Phone No. 2") AND (xRec."Phone No. 2" = Cont."Phone No. 2") THEN BEGIN
                Cont."Phone No. 2" := "Phone No. 2";
                ContChanged := TRUE;
              END;
              IF (xRec."Telex No." <> "Telex No.") AND (xRec."Telex No." = Cont."Telex No.") THEN BEGIN
                Cont."Telex No." := "Telex No.";
                ContChanged := TRUE;
              END;
              IF (xRec."Fax No." <> "Fax No.") AND (xRec."Fax No." = Cont."Fax No.") THEN BEGIN
                Cont."Fax No." := "Fax No.";
                ContChanged := TRUE;
              END;
              IF (xRec."Telex Answer Back" <> "Telex Answer Back") AND (xRec."Telex Answer Back" = Cont."Telex Answer Back") THEN BEGIN
                Cont."Telex Answer Back" := "Telex Answer Back";
                ContChanged := TRUE;
              END;
              IF (xRec."E-Mail" <> "E-Mail") AND (xRec."E-Mail" = Cont."E-Mail") THEN BEGIN
                Cont.VALIDATE("E-Mail","E-Mail");
                ContChanged := TRUE;
              END;
              IF (xRec."E-Mail 2" <> "E-Mail 2") AND (xRec."E-Mail 2" = Cont."E-Mail 2") THEN BEGIN
                Cont.VALIDATE("E-Mail 2","E-Mail 2");
                ContChanged := TRUE;
              END;
              IF (xRec."Home Page" <> "Home Page") AND (xRec."Home Page" = Cont."Home Page") THEN BEGIN
                Cont."Home Page" := "Home Page";
                ContChanged := TRUE;
              END;
              IF (xRec."Mobile Phone No." <> "Mobile Phone No.") AND (xRec."Mobile Phone No." = Cont."Mobile Phone No.") THEN BEGIN
                Cont."Mobile Phone No." := "Mobile Phone No.";
                ContChanged := TRUE;
              END;
              IF (xRec."Mobile Phone No. 2" <> "Mobile Phone No. 2") AND
                 (xRec."Mobile Phone No. 2" = Cont."Mobile Phone No. 2")
              THEN BEGIN
                Cont."Mobile Phone No. 2" := "Mobile Phone No. 2";
                ContChanged := TRUE;
              END;
            END;
            IF ContChanged THEN BEGIN
              //Cont.OnModify(OldCont); //**4PS.o
              Cont.OnModify(OldCont, IsLeadingCompany); //**4PS.n
              Cont.MODIFY;
            END;
          UNTIL Cont.NEXT = 0;
      END;  //**4PS.n

      //**4PS.sn
      IF IsPerson THEN
        UpdateContactsByPerson(IsLeadingCompany);

      IF IsContactPerson THEN
        IF (Name <> xRec.Name) OR
           ("E-Mail" <> xRec."E-Mail")
        THEN BEGIN
          CentralDataManagement.EditSubcontPortUser(GlobalCompanyName, Rec);
          CentralDataManagement.EditServPortUser(GlobalCompanyName, Rec);
        END;
      //**4PS.en

      IF GlobalCompanyName = '' THEN //**4PS.n
        IF IsContact THEN //**4PS.n
          IF (Name <> xRec.Name) OR
            ("Name 2" <> xRec."Name 2") OR
            (Address <> xRec.Address) OR
            ("Address 2" <> xRec."Address 2") OR
            (City <> xRec.City) OR
            ("Post Code" <> xRec."Post Code") OR
            ("VAT Registration No." <> xRec."VAT Registration No.") OR
            ("COC Registration No." <> xRec."COC Registration No.") OR  //**4PS.n
            ("Phone No." <> xRec."Phone No.")
          THEN
            CheckDupl;

      ProjectSiteMgt.LogContact(2, Rec, GlobalCompanyName); //**4PS.n
    END;

    PROCEDURE TypeChange@1();
    VAR
      InteractLogEntry@1000 : Record 11072027;
      Opp@1001 : Record 5092;
      Todo@1002 : Record 5080;
      CampaignTargetGrMgt@1003 : Codeunit 7030;
    BEGIN
      RMSetup.GET;

      InteractLogEntry.LOCKTABLE;
      Todo.LOCKTABLE;
      Opp.LOCKTABLE;
      Cont.LOCKTABLE;
      InteractLogEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
      InteractLogEntry.SETRANGE("Contact Company No.","Company No.");
      InteractLogEntry.SETRANGE("Contact No.","No.");
      IF InteractLogEntry.FINDFIRST THEN
        ERROR(Text003,FIELDCAPTION(Type));
      Todo.SETCURRENTKEY("Contact Company No.","Contact No.");
      Todo.SETRANGE("Contact Company No.","Company No.");
      Todo.SETRANGE("Contact No.","No.");
      IF Todo.FINDFIRST THEN
        ERROR(Text005,FIELDCAPTION(Type));
      Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
      Opp.SETRANGE("Contact Company No.","Company No.");
      Opp.SETRANGE("Contact No.","No.");
      IF Opp.FINDFIRST THEN
        ERROR(Text006,FIELDCAPTION(Type));

      CASE Type OF
        Type::Company:
          BEGIN
            //**4PS.sn
            IF "Person No." <> '' THEN BEGIN
              Cont.RESET;
              Cont.SETCURRENTKEY("Person No.");
              Cont.SETRANGE("Person No.", "No.");
              Cont.SETRANGE(Type, Type::Person);
              IF Cont.FINDFIRST THEN
                ERROR(Text007, FIELDCAPTION(Type));
            END;
            "Person No." := '';
            //**4PS.en
            IF Type <> xRec.Type THEN BEGIN
              TESTFIELD("Organizational Level Code",'');
              TESTFIELD("No. of Job Responsibilities",0);
            END;
            "First Name" := '';
            "Middle Name" := '';
            Surname := '';
            "Job Title" := '';
            "Company No." := "No.";
            "Company Name" := Name;
            "Salutation Code" := RMSetup."Def. Company Salutation Code";
            //**4PS02.sn
            Initials := '';
            "Name Abbreviation" := '';
            Sex := Sex::" ";
            Department := '';
            //**4PS02.en
          END;
        Type::Person:
          BEGIN
            CampaignTargetGrMgt.DeleteContfromTargetGr(InteractLogEntry);
            Cont.RESET;
            Cont.SETCURRENTKEY("Company No.");
            Cont.SETRANGE("Company No.","No.");
            Cont.SETRANGE(Type,Type::Person);
            IF Cont.FINDFIRST THEN
              ERROR(Text007,FIELDCAPTION(Type));
            IF Type <> xRec.Type THEN BEGIN
              //TESTFIELD("No. of Business Relations",0); //**4PS.o call C-019067
              TESTFIELD("No. of Industry Groups",0);
              TESTFIELD("Currency Code",'');
              TESTFIELD("VAT Registration No.",'');
            END;
            IF "Company No." = "No." THEN BEGIN
              "Company No." := '';
              "Company Name" := '';
              "Salutation Code" := RMSetup."Default Person Salutation Code";
              GetSexSalutation; //**4PS.n
              NameBreakdown;
            END;
          END;
      END;
      //**4PS.sn call C-019067
      IF CurrFieldNo > 0 THEN BEGIN
        CALCFIELDS("No. of Business Relations");
        IF "No. of Business Relations" > 0 THEN
          MESSAGE(Text11012015, FIELDCAPTION(Type));
      END;
      //**4PS.en
      "Lookup Contact No." := '';  //**4PS.n
      VALIDATE("Lookup Contact No.");

      IF Cont.GET("No.") THEN BEGIN
      //  IF Type = Type::Company THEN //**4PS.o
        IF IsContact THEN //**4PS.n
          CheckDupl
        ELSE
          DuplMgt.RemoveContIndex(Rec,FALSE);
      END;
    END;

    PROCEDURE AssistEdit@2(OldCont@1000 : Record 5050) : Boolean;
    BEGIN
      WITH Cont DO BEGIN
        Cont := Rec;
        RMSetup.GET;
        RMSetup.TESTFIELD("Contact Nos.");
        IF NoSeriesMgt.SelectSeries(RMSetup."Contact Nos.",OldCont."No. Series","No. Series") THEN BEGIN
          RMSetup.GET;
          RMSetup.TESTFIELD("Contact Nos.");
          NoSeriesMgt.SetSeries("No.");
          //**4PS.sn
          IF Cont.FIND('=') THEN
            MESSAGE(Text11012008, TABLECAPTION, "No.")
          ELSE BEGIN
          //**4PS.en
          Rec := Cont;
          EXIT(TRUE);
          END; //**4PS.n
        END;
      END;
    END;

    PROCEDURE CreateCustomer@3(CustomerTemplate@1006 : Code[10]);
    BEGIN
      // Moved to LocalCreateCustomer
      LocalCreateCustomer('', FALSE); //**4PS.n
    END;

    PROCEDURE SelectTemplAndCreateCustomer@1100528732();
    BEGIN
      //**4PS
      LocalCreateCustomer('', TRUE);
    END;

    LOCAL PROCEDURE LocalCreateCustomer@1100528730(CustomerTemplate@1100528700 : Code[10];SelectTemplate@1100528708 : Boolean);
    VAR
      Cust@1100528707 : Record 18;
      ContComp@1100528706 : Record 5050;
      CustTemplate@1100528705 : Record 5105;
      AddressRec@1100528702 : Record 222;
      lvSalesSetup@1100528701 : Record 311;
    BEGIN
      //TESTFIELD("Company No."); //**4PS.o
      TESTFIELD(Blocked, FALSE); //**4PS.n
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Customers");

      //**4PS.sn
      ContComp := Rec;
      IF (Type = Type::Person) AND ("Company No." <> '') THEN
        ContComp.GET("Company No.");

      IF SelectTemplate THEN
        CustomerTemplate := ContComp.ChooseCustomerTemplate;

      lvSalesSetup.GET;
      //**4PS.en
      ContBusRel.RESET;
      //ContBusRel.SETRANGE("Contact No.","No."); //**4PS.o
      ContBusRel.SETRANGE("Contact No.",ContComp."No."); //**4PS.n
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      IF ContBusRel.FINDFIRST THEN
        ERROR(
          Text019,
      //  TABLECAPTION,"No.",ContBusRel.TABLECAPTION,ContBusRel."Link to Table",ContBusRel."No."); //**4PS.o
          TABLECAPTION,ContComp."No.",ContBusRel.TABLECAPTION,ContBusRel."Link to Table",ContBusRel."No."); //**4PS.n

      IF CustomerTemplate <> '' THEN
        CustTemplate.GET(CustomerTemplate);

      CLEAR(Cust);
      //**4PS.sn
      IF lvSalesSetup."Customer Nos." <> '' THEN BEGIN
        IF NOT NoSeriesMgt.SelectSeriesOnlyFormWhenMore(lvSalesSetup."Customer Nos.", '', Cust."No. Series") THEN
          ERROR('');
      END;
      //**4PS.en
      Cust.SetInsertFromContact(TRUE);
      Cust.INSERT(TRUE);
      Cust.SetInsertFromContact(FALSE);

      //**4PS.so
      //IF Type = Type::Company THEN
      //  ContComp := Rec
      //ELSE
      //  ContComp.GET("Company No.");
      //**4PS.eo

      ContBusRel."Contact No." := ContComp."No.";
      ContBusRel."Business Relation Code" := RMSetup."Bus. Rel. Code for Customers";
      ContBusRel."Link to Table" := ContBusRel."Link to Table"::Customer;
      ContBusRel."No." := Cust."No.";
      ContBusRel.INSERT(TRUE);

      UpdateCustVendBank.UpdateCustomer(ContComp,ContBusRel);

      Cust.GET(ContBusRel."No.");
      //**4PS.so
      //Cust.VALIDATE(Name,"Company Name");
      //Cust.MODIFY;
      //**4PS.eo
      //**4PS.sn
      Cust.VALIDATE(Name, ContComp.Name);
      Cust."Currency Code" := "Currency Code";
      Cust.MODIFY(TRUE);  //(updates related data for central data management)
      IF (Type = Type::Person) AND ("Company No." <> '') THEN
        ContComp.GET("Company No.");
      //**4PS.en

      IF CustTemplate.Code <> '' THEN BEGIN
        //**4PS.so
        //Cust."Territory Code" := "Territory Code";
        //Cust."Currency Code" := ContComp."Currency Code";
        //Cust."Country/Region Code" := "Country/Region Code";
        //Cust."Customer Posting Group" := CustTemplate."Customer Posting Group";
        //Cust."Customer Price Group" := CustTemplate."Customer Price Group";
        //IF CustTemplate."Invoice Disc. Code" <> '' THEN
        //  Cust."Invoice Disc. Code" := CustTemplate."Invoice Disc. Code";
        //Cust."Customer Disc. Group" := CustTemplate."Customer Disc. Group";
        //Cust."Allow Line Disc." := CustTemplate."Allow Line Disc.";
        //Cust."Gen. Bus. Posting Group" := CustTemplate."Gen. Bus. Posting Group";
        //Cust."VAT Bus. Posting Group" := CustTemplate."VAT Bus. Posting Group";
        //Cust."Payment Terms Code" := CustTemplate."Payment Terms Code";
        //Cust."Payment Method Code" := CustTemplate."Payment Method Code";
        //Cust."Shipment Method Code" := CustTemplate."Shipment Method Code";
        //Cust.MODIFY;
        //**4PS.eo

        //**4PS.sn
        Cust.CreateCustFromTemplate(CustTemplate);
        OverwriteCustTemplateFields(Cust);
        Cust.MODIFY(TRUE);  //(updates related data for central data management)
        //**4PS.en
        //**4PS.so
        //DefaultDim.SETRANGE("Table ID",DATABASE::"Customer Template");
        //DefaultDim.SETRANGE("No.",CustTemplate.Code);
        //IF DefaultDim.FINDSET THEN
        //  REPEAT
        //    CLEAR(DefaultDim2);
        //    DefaultDim2.INIT;
        //    DefaultDim2.VALIDATE("Table ID",DATABASE::Customer);
        //    DefaultDim2."No." := Cust."No.";
        //    DefaultDim2.VALIDATE("Dimension Code",DefaultDim."Dimension Code");
        //    DefaultDim2.VALIDATE("Dimension Value Code",DefaultDim."Dimension Value Code");
        //    DefaultDim2."Value Posting" := DefaultDim."Value Posting";
        //    DefaultDim2.INSERT(TRUE);
        //  UNTIL DefaultDim.NEXT = 0;
        //**4PS.eo
      END;
      UpdateQuotes(Cust);
      //**4PS07.sn
      //create project address from visit address of relation
      IF ("Visit Address" <> '') THEN BEGIN
        CLEAR(AddressRec);
        AddressRec."Customer No." := Cust."No.";
        AddressRec."Project Address":= TRUE;
        AddressRec.Address := "Visit Address";
        AddressRec."Address 2" := "Visit Address 2";
        AddressRec."Post Code" := "Visit Address Post Code";
        AddressRec.City := "Visit Address City";
        AddressRec."Country/Region Code" := "Visit Address Country/Region";
        AddressRec."Phone No." := "Phone No.";
        AddressRec."Phone No. at Work" := "Phone No. Work";
        AddressRec."Mobile Phone No." := "Mobile Phone No.";
        AddressRec."Fax No." := "Fax No.";
        AddressRec."E-Mail" := "E-Mail";
        AddressRec."Home Page" := "Home Page";
        AddressRec.INSERT(TRUE); //OnInsert contains functionality for central management.
      END;
      //**4PS07.en
      CampaignMgt.ConverttoCustomer(Rec,Cust);
      MESSAGE(Text009,Cust.TABLECAPTION,Cust."No.");
    END;

    PROCEDURE CreateVendor@7();
    VAR
      Vend@1000 : Record 23;
      ContComp@1001 : Record 5050;
      lvPurchSetup@1100528701 : Record 312;
    BEGIN
      //TESTFIELD("Company No."); //**4PS09.o
      TESTFIELD(Blocked, FALSE); //**4PS.n
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Vendors");

      //**4PS.sn
      ContComp := Rec;
      IF (Type = Type::Person) AND ("Company No." <> '') THEN
        ContComp.GET("Company No.");

      //C015345.so
      //IF SelectTemplate THEN
      //  VendorTemplate := ContComp.ChooseVendorTemplate;
      //C015345.eo

      ContBusRel.RESET;
      ContBusRel.SETRANGE("Contact No.",ContComp."No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
      IF ContBusRel.FINDFIRST THEN
        ERROR(
          Text019,
      //  TABLECAPTION,"No.",ContBusRel.TABLECAPTION,ContBusRel."Link to Table",ContBusRel."No.") //**4PS.o
          TABLECAPTION,ContComp."No.",ContBusRel.TABLECAPTION,ContBusRel."Link to Table",ContBusRel."No."); //**4PS.n
      //C015345.so
      //ELSE
      //  IF VendorTemplate <> '' THEN
      //    VendTemplate.GET(VendorTemplate);
      //C015345.eo
      lvPurchSetup.GET;
      //**4PS.en
      CLEAR(Vend);
      //**4PS.sn
      IF lvPurchSetup."Vendor Nos." <> '' THEN BEGIN
        IF NOT NoSeriesMgt.SelectSeriesOnlyFormWhenMore(lvPurchSetup."Vendor Nos.", '', Vend."No. Series") THEN
          ERROR('');
      END;
      //**4PS.en
      Vend.SetInsertFromContact(TRUE);
      Vend.INSERT(TRUE);
      Vend.SetInsertFromContact(FALSE);

      //**4PS.so
      //IF Type=Type::Company THEN
      //  ContComp := Rec
      //ELSE
      //  ContComp.GET("Company No.");
      //**4PS.eo

      ContBusRel."Contact No." := ContComp."No.";
      ContBusRel."Business Relation Code" := RMSetup."Bus. Rel. Code for Vendors";
      ContBusRel."Link to Table" := ContBusRel."Link to Table"::Vendor;
      ContBusRel."No." := Vend."No.";
      ContBusRel.INSERT(TRUE);

      UpdateCustVendBank.UpdateVendor(ContComp,ContBusRel);

      //**4PS.sn
      Vend.GET(ContBusRel."No.");
      Vend."Currency Code" := "Currency Code";
      //C015345.so
      //IF VendTemplate.Code <> '' THEN BEGIN
      //  Vend.CreateVendorFromTemplate(VendTemplate);
      //C015345.eo
      OverwriteVendTemplateFields(Vend);
      //END; //C015345.o
      Vend.MODIFY(TRUE);  //(updates related data for central data management)
      //**4PS.en
      MESSAGE(Text009,Vend.TABLECAPTION,Vend."No.");
    END;

    PROCEDURE CreateBankAccount@8();
    VAR
      BankAcc@1000 : Record 270;
      ContComp@1001 : Record 5050;
    BEGIN
      TESTFIELD("Company No.");
      TESTFIELD(Blocked, FALSE);  //**4PS.n
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Bank Accs.");

      CLEAR(BankAcc);
      BankAcc.SetInsertFromContact(TRUE);
      BankAcc.INSERT(TRUE);
      BankAcc.SetInsertFromContact(FALSE);

      IF Type = Type::Company THEN
        ContComp := Rec
      ELSE
        ContComp.GET("Company No.");

      ContBusRel."Contact No." := ContComp."No.";
      ContBusRel."Business Relation Code" := RMSetup."Bus. Rel. Code for Bank Accs.";
      ContBusRel."Link to Table" := ContBusRel."Link to Table"::"Bank Account";
      ContBusRel."No." := BankAcc."No.";
      ContBusRel.INSERT(TRUE);

      UpdateCustVendBank.UpdateBankAccount(ContComp,ContBusRel);
      //**4PS.sn
      BankAcc.GET(ContBusRel."No.");
      BankAcc."Currency Code" := "Currency Code";
      BankAcc.MODIFY(TRUE);  //**4PS.n (updates related data for central data management)
      //**4PS.en

      MESSAGE(Text009,BankAcc.TABLECAPTION,BankAcc."No.");
    END;

    PROCEDURE CreateEmployer@1100485005();
    VAR
      lvEmployerRec@1000 : Record 11012013;
      ContComp@1001 : Record 5050;
    BEGIN
      //**4PS
      TESTFIELD(Type, Type::Company);
      TESTFIELD(Blocked, FALSE);

      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Employers");

      ContBusRel.RESET;
      ContBusRel.SETRANGE("Contact No.","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Employer);
      IF ContBusRel.FINDFIRST THEN BEGIN
        ERROR(
          Text019,
          TABLECAPTION,"No.",ContBusRel.TABLECAPTION,ContBusRel."Link to Table",ContBusRel."No.")
      //**18515.so
      //END ELSE BEGIN
      //  ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
      //  IF ContBusRel.FINDFIRST THEN
      //    ERROR(
      //      Text019,
      //      TABLECAPTION,"No.",ContBusRel.TABLECAPTION,ContBusRel."Link to Table",ContBusRel."No.")
      //**18515.eo
      END;

      ContComp := Rec;

      IF lvEmployerRec.GET(ContComp."No.") THEN
        ERROR(Text11012011, lvEmployerRec.TABLECAPTION, ContComp."No.");

      CLEAR(lvEmployerRec);
      lvEmployerRec.SetInsertFromContact(TRUE);
      lvEmployerRec.Code := ContComp."No.";
      lvEmployerRec.INSERT(TRUE);
      lvEmployerRec.SetInsertFromContact(FALSE);

      ContBusRel."Contact No." := ContComp."No.";
      ContBusRel."Business Relation Code" := RMSetup."Bus. Rel. Code for Employers";
      ContBusRel."Link to Table" := ContBusRel."Link to Table"::Employer;
      ContBusRel."No." := lvEmployerRec.Code;
      ContBusRel.INSERT(TRUE);

      UpdateCustVendBank.UpdateEmployer(ContComp,ContBusRel);

      lvEmployerRec.GET(ContBusRel."No.");
      lvEmployerRec.MODIFY(TRUE);  //(updates related data for central data management)

      MESSAGE(Text009, lvEmployerRec.TABLECAPTION, lvEmployerRec.Code);
    END;

    PROCEDURE CreateEmployee@1100485006();
    VAR
      EmployeeRec@1000 : Record 5200;
      ContComp@1001 : Record 5050;
    BEGIN
      //**4PS
      TESTFIELD(Type, Type::Person);
      TESTFIELD("Company No.", '');
      TESTFIELD(Blocked, FALSE);

      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Employees");

      ContBusRel.RESET;
      ContBusRel.SETRANGE("Contact No.","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Employee);
      IF ContBusRel.FINDFIRST THEN
        ERROR(
          Text019,
          TABLECAPTION,"No.",ContBusRel.TABLECAPTION,ContBusRel."Link to Table",ContBusRel."No.");

      ContComp := Rec;

      IF EmployeeRec.GET(ContComp."No.") THEN
        ERROR(Text11012011, EmployeeRec.TABLECAPTION, ContComp."No.");

      CLEAR(EmployeeRec);
      EmployeeRec.SetInsertFromContact(TRUE);
      EmployeeRec."No." := ContComp."No.";
      EmployeeRec.INSERT(TRUE);
      EmployeeRec.SetInsertFromContact(FALSE);

      ContBusRel."Contact No." := ContComp."No.";
      ContBusRel."Business Relation Code" := RMSetup."Bus. Rel. Code for Employees";
      ContBusRel."Link to Table" := ContBusRel."Link to Table"::Employee;
      ContBusRel."No." := EmployeeRec."No.";
      ContBusRel.INSERT(TRUE);

      UpdateCustVendBank.UpdateEmployee(ContComp,ContBusRel);

      EmployeeRec.GET(ContBusRel."No.");
      EmployeeRec.MODIFY(TRUE);  //(updates related data for central data management)

      MESSAGE(Text009, EmployeeRec.TABLECAPTION, EmployeeRec."No.");
    END;

    PROCEDURE CreateCustomerLink@5();
    VAR
      Cust@1001 : Record 18;
      ContBusRel@1000 : Record 5054;
    BEGIN
      //TESTFIELD("Company No."); //**4PS.o
      TESTFIELD(Blocked, FALSE);  //**4PS.n
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Customers");
      CreateLink(
        PAGE::"Customer Link",
        RMSetup."Bus. Rel. Code for Customers",
        ContBusRel."Link to Table"::Customer);

      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      ContBusRel.SETRANGE("Contact No.","Company No.");
      IF ContBusRel.FINDFIRST THEN
        IF Cust.GET(ContBusRel."No.") THEN
          UpdateQuotes(Cust);
    END;

    PROCEDURE CreateVendorLink@6();
    BEGIN
      //TESTFIELD("Company No."); //**4PS.o
      TESTFIELD(Blocked, FALSE);  //**4PS.n
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Vendors");
      CreateLink(
        PAGE::"Vendor Link",
        RMSetup."Bus. Rel. Code for Vendors",
        ContBusRel."Link to Table"::Vendor);
    END;

    PROCEDURE CreateBankAccountLink@9();
    BEGIN
      TESTFIELD("Company No.");
      TESTFIELD(Blocked, FALSE);  //**4PS.n
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Bank Accs.");
      CreateLink(
        PAGE::"Bank Account Link",
        RMSetup."Bus. Rel. Code for Bank Accs.",
        ContBusRel."Link to Table"::"Bank Account");
    END;

    PROCEDURE CreateEmployerLink@1100485007();
    BEGIN
      //**4PS
      TESTFIELD(Type, Type::Company);
      TESTFIELD("Company No.");
      TESTFIELD(Blocked, FALSE);

      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Employers");
      CreateLink(
        PAGE::"Employer Link",
        RMSetup."Bus. Rel. Code for Employers",
        ContBusRel."Link to Table"::Employer);
    END;

    PROCEDURE CreateEmployeeLink@1100485008();
    BEGIN
      //**4PS
      TESTFIELD(Type, Type::Person);
      TESTFIELD("Company No.", '');
      TESTFIELD(Blocked, FALSE);

      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Employees");
      CreateLink(
        PAGE::"Employee Link",
        RMSetup."Bus. Rel. Code for Employees",
        ContBusRel."Link to Table"::Employee);
    END;

    LOCAL PROCEDURE CreateLink@11(CreateForm@1000 : Integer;BusRelCode@1001 : Code[10];Table@1002 : ',Customer,Vendor,Bank Account,Employee,Employer');
    VAR
      TempContBusRel@1003 : TEMPORARY Record 5054;
    BEGIN
      TempContBusRel."Contact No." := "Company No.";
      //**4PS.sn
      IF Type = Type::Person THEN
        CASE Table OF
          Table::Customer:
            IF "Company No." = '' THEN
              TempContBusRel."Contact No." := "No.";
          Table::Vendor:
            IF "Company No." = '' THEN
              TempContBusRel."Contact No." := "No.";
          Table::Employee:
            TempContBusRel."Contact No." := "No."
        END;
      //**4PS.en
      TempContBusRel."Business Relation Code" := BusRelCode;
      TempContBusRel."Link to Table" := Table;
      TempContBusRel.INSERT;
      IF PAGE.RUNMODAL(CreateForm,TempContBusRel) = ACTION::LookupOK THEN; // enforce look up mode dialog
      TempContBusRel.DELETEALL;
    END;

    PROCEDURE CreateInteraction@10();
    VAR
      SegMentLine@1000 : TEMPORARY Record 11072040;
    BEGIN
      SegMentLine.CreateInteractionFromContact(Rec);
    END;

    PROCEDURE ShowCustVendBank@12();
    VAR
      ContBusRel@1000 : Record 5054;
      FormSelected@1001 : Boolean;
      Cust@1002 : Record 18;
      Vend@1003 : Record 23;
      BankAcc@1004 : Record 270;
      EmployerRec@1100485000 : Record 11012013;
      EmployeeRec@1100485001 : Record 5200;
    BEGIN
      FormSelected := TRUE;

      ContBusRel.RESET;
      //**4PS.sn
      IF (Type = Type::Person) AND ("Company No." = '') THEN
        ContBusRel.SETRANGE("Contact No.","No.")
      ELSE
      //**4PS.en
        ContBusRel.SETRANGE("Contact No.","Company No.");
      ContBusRel.SETFILTER("No.",'<>''''');

      CASE ContBusRel.COUNT OF
        0:
          ERROR(Text010,TABLECAPTION,"No.");
        1:
          ContBusRel.FINDFIRST;
        ELSE
          FormSelected := PAGE.RUNMODAL(PAGE::"Contact Business Relations",ContBusRel) = ACTION::LookupOK;
      END;

      IF FormSelected THEN
        CASE ContBusRel."Link to Table" OF
          ContBusRel."Link to Table"::Customer:
            BEGIN
              Cust.GET(ContBusRel."No.");
              PAGE.RUN(PAGE::"Customer Card",Cust);
            END;
          ContBusRel."Link to Table"::Vendor:
            BEGIN
              Vend.GET(ContBusRel."No.");
              PAGE.RUN(PAGE::"Vendor Card",Vend);
            END;
          ContBusRel."Link to Table"::"Bank Account":
            BEGIN
              BankAcc.GET(ContBusRel."No.");
              PAGE.RUN(PAGE::"Bank Account Card",BankAcc);
            END;
          //**4PS.sn
          ContBusRel."Link to Table"::Employer: BEGIN
            EmployerRec.GET(ContBusRel."No.");
            EmployerRec.SETRANGE(Code, ContBusRel."No.");
            PAGE.RUN(PAGE::Employers,EmployerRec);
          END;
          ContBusRel."Link to Table"::Employee: BEGIN
            EmployeeRec.GET(ContBusRel."No.");
            PAGE.RUN(PAGE::"Employee Card",EmployeeRec);
          END;
          //**4PS.en
        END;
    END;

    LOCAL PROCEDURE NameBreakdown@13();
    VAR
      NamePart@1000 : ARRAY [30] OF Text[250];
      TempName@1001 : Text[250];
      FirstName250@1004 : Text[250];
      i@1002 : Integer;
      NoOfParts@1003 : Integer;
    BEGIN
      EXIT;  //**4PS.n
      //db, 05-02-04; this function can't work because it is not possible to determine how
      //to divide 50 characters of a name (f.e. double first name, 2 middle names and double surname)
      //over several fields.
      IF Type = Type::Company THEN
        EXIT;

      TempName := Name;
      WHILE STRPOS(TempName,' ') > 0 DO BEGIN
        IF STRPOS(TempName,' ') > 1 THEN BEGIN
          i := i + 1;
          NamePart[i] := COPYSTR(TempName,1,STRPOS(TempName,' ') - 1);
        END;
        TempName := COPYSTR(TempName,STRPOS(TempName,' ') + 1);
      END;
      i := i + 1;
      NamePart[i] := TempName;
      NoOfParts := i;

      "First Name" := '';
      "Middle Name" := '';
      Surname := '';
      FOR i := 1 TO NoOfParts DO
        IF (i = NoOfParts) AND (NoOfParts > 1) THEN BEGIN
          IF STRLEN(NamePart[i]) > MAXSTRLEN(Surname) THEN
            ERROR(Text032,FIELDCAPTION(Surname),STRLEN(NamePart[i]) - MAXSTRLEN(Surname));
          Surname := NamePart[i]
        END ELSE
          IF (i = NoOfParts - 1) AND (NoOfParts > 2) THEN BEGIN
            IF STRLEN(NamePart[i]) > MAXSTRLEN("Middle Name") THEN
              ERROR(Text032,FIELDCAPTION("Middle Name"),STRLEN(NamePart[i]) - MAXSTRLEN("Middle Name"));
            "Middle Name" := NamePart[i]
          END ELSE BEGIN
            FirstName250 := DELCHR("First Name" + ' ' + NamePart[i],'<',' ');
            IF STRLEN(FirstName250) > MAXSTRLEN("First Name") THEN
              ERROR(Text032,FIELDCAPTION("First Name"),STRLEN(FirstName250) - MAXSTRLEN("First Name"));
            "First Name" := FirstName250;
          END;
    END;

    PROCEDURE SetSkipDefault@15(Defaults@1000 : Boolean);
    BEGIN
      SkipDefaults := NOT Defaults;
    END;

    PROCEDURE IdenticalAddress@16(VAR Cont@1000 : Record 5050) : Boolean;
    BEGIN
      EXIT(
        (Address = Cont.Address) AND
        ("Address 2" = Cont."Address 2") AND
        ("Post Code" = Cont."Post Code") AND
        (City = Cont.City) AND
        (County = Cont.County))
    END;

    PROCEDURE ActiveAltAddress@17(ActiveDate@1000 : Date) : Code[10];
    VAR
      ContAltAddrDateRange@1001 : Record 5052;
    BEGIN
      ContAltAddrDateRange.SETCURRENTKEY("Contact No.","Starting Date");
      ContAltAddrDateRange.SETRANGE("Contact No.","No.");
      ContAltAddrDateRange.SETRANGE("Starting Date",0D,ActiveDate);
      ContAltAddrDateRange.SETFILTER("Ending Date",'>=%1|%2',ActiveDate,0D);
      IF ContAltAddrDateRange.FINDLAST THEN
        EXIT(ContAltAddrDateRange."Contact Alt. Address Code");

      EXIT('');
    END;

    PROCEDURE CalculatedName@14(lNameType@1210190000 : Integer) NewName@1000 : Text[250];
    VAR
      NewName250@1001 : Text[250];
    BEGIN
      //**4PS.so
      {
      IF "First Name" <> '' THEN
        NewName92 := "First Name";
      IF "Middle Name" <> '' THEN
        NewName92 := NewName92 + ' ' + "Middle Name";
      IF Surname <> '' THEN
        NewName92 := NewName92 + ' ' + Surname;

      NewName92 := DELCHR(NewName92,'<',' ');

      IF STRLEN(NewName92) > MAXSTRLEN(Name) THEN
        ERROR(Text029,STRLEN(NewName92) - MAXSTRLEN(Name));

      NewName := COPYSTR(NewName92,1,STRLEN(NewName92));

      }
      //**4PS.eo

      //**4PS.sn
      //Function changed to global
      CASE lNameType OF
        1:BEGIN
            IF (Type = Type::Person) THEN BEGIN
              NewName250 := FillFullNamePerson(Title, Initials, "First Name",
                                                "Middle Name", Surname, "Title Behind the Name");  //M25982
            END ELSE BEGIN
              IF Title <> '' THEN
                NewName250 := Title;
              IF Initials <> '' THEN
                NewName250 := NewName250 + ' ' + Initials;
              IF "Middle Name" <> '' THEN
                NewName250 := NewName250 + ' ' + "Middle Name";
              IF Surname <> '' THEN
                NewName250 := NewName250 + ' ' + Surname;
              //**4PS08.sn
              IF "Title Behind the Name" <> '' THEN
                NewName250 := NewName250 + ' ' + "Title Behind the Name";
              //**4PS08.en
            END;
          END;
        2:BEGIN
            IF (Type = Type::Person) THEN BEGIN
              NewName250 := FillFullNamePerson("Title 2", "Initials 2", "First Name 2",
                                               "Middle Name 2", "Surname 2", "Title Behind the Name 2");  //M25982
            END ELSE BEGIN
              IF "Title 2" <> '' THEN
                NewName250 := "Title 2";
              IF "Initials 2" <> '' THEN
                NewName250 := NewName250 + ' ' + "Initials 2";
              IF "Middle Name 2" <> '' THEN
                NewName250 := NewName250 + ' ' + "Middle Name 2";
              IF "Surname 2" <> '' THEN
                NewName250 := NewName250 + ' ' + "Surname 2";
              //**4PS08.sn
              IF "Title Behind the Name 2" <> '' THEN
                NewName250 := NewName250 + ' ' + "Title Behind the Name 2";
              //**4PS08.en
            END;
          END;
      END;
      NewName250 := DELCHR(NewName250,'<',' ');

      IF STRLEN(NewName250) > MAXSTRLEN(Name) THEN
        ERROR(Text029,STRLEN(NewName250) - MAXSTRLEN(Name));

      NewName := NewName250;
      //**4PS.en
    END;

    LOCAL PROCEDURE UpdateSearchName@22();
    BEGIN
      //**4PS.so
      //IF ("Search Name" = UPPERCASE(xRec.Name)) OR ("Search Name" = '') THEN
      //  "Search Name" := Name;
      //**4PS.eo

      //**4PS.sn
      IF ("Search Name" = UPPERCASE(CalculatedSearchName(xRec))) OR ("Search Name" = '') THEN
        "Search Name" := CalculatedSearchName(Rec);
      //**4PS.en
    END;

    PROCEDURE CalculatedSearchName@1100485011(VAR Contact@1100485000 : Record 5050) NewName@1000 : Text[250];
    VAR
      NewName250@1001 : Text[250];
    BEGIN
      //**4PS
      IF Contact.Type = Contact.Type::Company THEN
        NewName250 := Contact.Name
      ELSE BEGIN
        IF Contact.Surname <> '' THEN
          NewName250 := NewName250 + ' ' + Contact.Surname;
        IF Contact.Initials <> '' THEN
          NewName250 := NewName250 + ' ' + Contact.Initials;
        IF Contact."Middle Name" <> '' THEN
          NewName250 := NewName250 + ' ' + Contact."Middle Name";
        IF Contact.Title <> '' THEN
          NewName250 := NewName250 + ' ' + Contact.Title;
        IF Contact."Title Behind the Name" <> '' THEN
          NewName250 := NewName250 + ' ' + Contact."Title Behind the Name";
      END;
      NewName250 := DELCHR(NewName250,'<',' ');
      NewName := COPYSTR(NewName250, 1, MAXSTRLEN(Contact."Search Name"));
    END;

    PROCEDURE FillFullNamePerson@1210190002(lTitle@1210190001 : Text[50];lInitials@1210190002 : Text[50];lFirstName@1210190003 : Text[80];lMiddleName@1210190004 : Text[80];lSurname@1210190005 : Text[100];lTitleBehind@1210190006 : Text[40]) : Text[250];
    VAR
      lFullName@1210190000 : Text[250];
    BEGIN
      //**4PS M25982
      RMSetup.GET;
      CASE RMSetup."Format Full Name Person" OF
        RMSetup."Format Full Name Person"::First:
          BEGIN
            AddToFullNamePerson(lFullName, lFirstName);
            AddToFullNamePerson(lFullName, lMiddleName);
            AddToFullNamePerson(lFullName, lSurname);
          END;
        RMSetup."Format Full Name Person"::Initials:
          BEGIN
            AddToFullNamePerson(lFullName, lInitials);
            AddToFullNamePerson(lFullName, lMiddleName);
            AddToFullNamePerson(lFullName, lSurname);
          END;
        RMSetup."Format Full Name Person"::Title:
          BEGIN
            AddToFullNamePerson(lFullName, lTitle);
            AddToFullNamePerson(lFullName, lInitials);
            AddToFullNamePerson(lFullName, lMiddleName);
            AddToFullNamePerson(lFullName, lSurname);
            AddToFullNamePerson(lFullName, lTitleBehind);
          END;
        RMSetup."Format Full Name Person"::InitialsFirst:
          BEGIN
            AddToFullNamePerson(lFullName, lInitials);
            IF lFirstName <> '' THEN
              AddToFullNamePerson(lFullName, '(' + lFirstName + ')');
            AddToFullNamePerson(lFullName, lMiddleName);
            AddToFullNamePerson(lFullName, lSurname);
          END;
        RMSetup."Format Full Name Person"::Last:
          BEGIN
            AddToFullNamePerson(lFullName, lSurname);
            AddToFullNamePerson(lFullName, lFirstName);
            AddToFullNamePerson(lFullName, lMiddleName);
          END;
        RMSetup."Format Full Name Person"::LastInitials:
          BEGIN
            AddToFullNamePerson(lFullName, lSurname);
            AddToFullNamePerson(lFullName, lInitials);
            AddToFullNamePerson(lFullName, lMiddleName);
          END;
        RMSetup."Format Full Name Person"::LastTitle:
          BEGIN
            AddToFullNamePerson(lFullName, lTitle);
            AddToFullNamePerson(lFullName, lSurname);
            AddToFullNamePerson(lFullName, lInitials);
            AddToFullNamePerson(lFullName, lMiddleName);
            AddToFullNamePerson(lFullName, lTitleBehind);
          END;
        RMSetup."Format Full Name Person"::LastInitialsFirst:
          BEGIN
            AddToFullNamePerson(lFullName, lSurname);
            AddToFullNamePerson(lFullName, lInitials);
            IF lFirstName <> '' THEN
              AddToFullNamePerson(lFullName, '(' + lFirstName + ')');
            AddToFullNamePerson(lFullName, lMiddleName);
          END;

      END;

      EXIT(lFullName);
    END;

    PROCEDURE AddToFullNamePerson@1210190003(VAR lFullName@1100485001 : Text[250];lAddTxt@1100485000 : Text[100]);
    BEGIN
      //**4PS
      IF lAddTxt = '' THEN
        EXIT;

      IF lFullName <> '' THEN
        lFullName := lFullName + ' ';
      lFullName := lFullName + lAddTxt;
    END;

    LOCAL PROCEDURE CheckDupl@21();
    VAR
      lvText000@1100485000 : TextConst 'ENU=Duplicate Contacts were found. Would you like to display these?';
    BEGIN
      IF RMSetup."Maintain Dupl. Search Strings" THEN
        DuplMgt.MakeContIndex(Rec);
      //IF GUIALLOWED THEN //**4PS.o
      IF GUIALLOWED AND NOT SkipCheckDupl THEN //**4PS.n
        IF DuplMgt.DuplicateExist(Rec) THEN BEGIN
          //IF NOT CONFIRM(lvText000,TRUE) THEN ERROR('');  //**4PS.n  db, 09-11-006: call adoption from codeunit 5060
          IF NOT CONFIRM(lvText000,TRUE) THEN EXIT;  //**4PS.n  27-10-2009 (15361) not ERROR but EXIT
          MODIFY;
          COMMIT;
          DuplMgt.LaunchDuplicateForm(Rec);
        END;
    END;

    PROCEDURE FindCustomerTemplate@23() FindCustTemplate@1001 : Code[10];
    VAR
      CustTemplate@1003 : Record 5105;
      ContCompany@1002 : Record 5050;
    BEGIN
      CustTemplate.RESET;
      CustTemplate.SETRANGE("Territory Code","Territory Code");
      CustTemplate.SETRANGE("Country/Region Code","Country/Region Code");
      IF ContCompany.GET("Company No.") THEN
        CustTemplate.SETRANGE("Currency Code",ContCompany."Currency Code");

      IF CustTemplate.COUNT = 1 THEN BEGIN
        CustTemplate.FINDFIRST;
        EXIT(CustTemplate.Code);
      END;
    END;

    PROCEDURE ChooseCustomerTemplate@27() ChooseCustTemplate@1001 : Code[10];
    VAR
      CustTemplate@1000 : Record 5105;
    BEGIN
      ContBusRel.RESET;
      ContBusRel.SETRANGE("Contact No.","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      //**4PS.sn
      IF NOT CustTemplate.FINDFIRST THEN
        EXIT;
      //**4PS.en
      IF ContBusRel.FINDFIRST THEN
        ERROR(
          Text019,
          TABLECAPTION,"No.",ContBusRel.TABLECAPTION,ContBusRel."Link to Table",ContBusRel."No.");

      IF CONFIRM(Text020,TRUE,"No.",Name) THEN BEGIN
        IF PAGE.RUNMODAL(0,CustTemplate) = ACTION::LookupOK THEN
          EXIT(CustTemplate.Code);

        ERROR(Text022);
      END;
    END;

    LOCAL PROCEDURE UpdateQuotes@29(Customer@1000 : Record 18);
    VAR
      SalesHeader@1003 : Record 36;
      Cont@1004 : Record 5050;
      SalesLine@1001 : Record 37;
    BEGIN
      //**4PS.sn C021542
      IF "Company No." = '' THEN
        EXIT;
      //**4PS.en C021542

      Cont.SETCURRENTKEY("Company No.");
      Cont.SETRANGE("Company No.","Company No.");

      IF Cont.FINDSET THEN
        REPEAT
          SalesHeader.RESET;
          SalesHeader.SETCURRENTKEY("Document Type","Sell-to Contact No.");
          SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Quote);
          SalesHeader.SETRANGE("Sell-to Contact No.",Cont."No.");
          IF SalesHeader.FINDSET(TRUE, FALSE) THEN
            REPEAT
              SalesHeader."Sell-to Customer No." := Customer."No.";
              SalesHeader."Sell-to Customer Template Code" := '';
              SalesHeader.MODIFY;
              SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
              SalesLine.SETRANGE("Document No.",SalesHeader."No.");
              IF SalesLine.FINDFIRST THEN
                SalesLine.MODIFYALL("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
            UNTIL SalesHeader.NEXT = 0;

          SalesHeader.RESET;
          SalesHeader.SETCURRENTKEY("Bill-to Contact No.");
          SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Quote);
          SalesHeader.SETRANGE("Bill-to Contact No.",Cont."No.");
          IF SalesHeader.FINDSET(TRUE, FALSE) THEN
            REPEAT
              SalesHeader."Bill-to Customer No." := Customer."No.";
              SalesHeader."Bill-to Customer Template Code" := '';
              SalesHeader."Salesperson Code" := Customer."Salesperson Code";
              SalesHeader.MODIFY;
              SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
              SalesLine.SETRANGE("Document No.",SalesHeader."No.");
              IF SalesLine.FINDFIRST THEN
                SalesLine.MODIFYALL("Bill-to Customer No.",SalesHeader."Bill-to Customer No.");
            UNTIL SalesHeader.NEXT = 0;
        UNTIL Cont.NEXT = 0;
    END;

    PROCEDURE GetSalutation@18(SalutationType@1001 : 'Formal,Informal';LanguageCode@1000 : Code[10]) : Text[260];
    VAR
      SalutationFormula@1005 : Record 5069;
      NamePart@1004 : ARRAY [5] OF Text[50];
      SubStr@1003 : Text[30];
      i@1002 : Integer;
    BEGIN
      IF NOT SalutationFormula.GET("Salutation Code",LanguageCode,SalutationType) THEN
        ERROR(Text021,LanguageCode,"No.");
      SalutationFormula.TESTFIELD(Salutation);
      //**4PS
      // This function is split in two functions, the exploding of the formula is moved to the function 'ExplodeSalutation'.
      EXIT(ExplodeSalutation(SalutationFormula));  //**4PS.n
    END;

    PROCEDURE GetSalutationSpecial@1210190007(SalutationType@1001 : 'Formal,Informal';LanguageCode@1000 : Code[10];CheckPresent@1210190000 : Boolean) : Text[260];
    VAR
      SalutationFormula@1005 : Record 5069;
    BEGIN
      //**4PS
      IF NOT SalutationFormula.GET("Salutation Code",LanguageCode,SalutationType) THEN
        IF NOT SalutationFormula.GET("Salutation Code",'',SalutationType) THEN
          IF CheckPresent THEN
            ERROR(Text11012005,SalutationType,"No.")
          ELSE
            EXIT('');
      SalutationFormula.TESTFIELD(Salutation);

      EXIT(ExplodeSalutation(SalutationFormula));
    END;

    PROCEDURE ExplodeSalutation@1210190004(SalutationFormula@1210190003 : Record 5069) : Text[260];
    VAR
      NamePart@1210190002 : ARRAY [10] OF Text[50];
      SubStr@1210190001 : Text[50];
      i@1210190000 : Integer;
      SalutationTxt@1210190004 : Text[260];
    BEGIN
      //**4PS
      // This is the part of the standard function 'GetSalutation' that is moved.

      CASE SalutationFormula."Name 1" OF
        SalutationFormula."Name 1"::"Job Title":
          NamePart[1] := "Job Title";
        SalutationFormula."Name 1"::"First Name":
          NamePart[1] := "First Name";
        SalutationFormula."Name 1"::"Middle Name":
          NamePart[1] := "Middle Name";
        SalutationFormula."Name 1"::Surname:
          NamePart[1] := Surname;
        SalutationFormula."Name 1"::Initials:
          NamePart[1] := Initials;
        SalutationFormula."Name 1"::"Company Name":
          NamePart[1] := "Company Name";
        //**4PS.sn
        SalutationFormula."Name 1"::Title:
          NamePart[1] := Title;
        SalutationFormula."Name 1"::"Job Title 2":
          NamePart[1] := "Job Title 2";
        SalutationFormula."Name 1"::"First Name 2":
          NamePart[1] := "First Name 2";
        SalutationFormula."Name 1"::"Middle Name 2":
          NamePart[1] := "Middle Name 2";
        SalutationFormula."Name 1"::"Surname 2":
          NamePart[1] := "Surname 2";
        SalutationFormula."Name 1"::"Initials 2":
          NamePart[1] := "Initials 2";
        SalutationFormula."Name 1"::"Title 2":
          NamePart[1] := "Title 2";
        //**4PS.en
        //**4PS08.sn
        SalutationFormula."Name 1"::"Title behind the Name":
          NamePart[1] := "Title Behind the Name";
        SalutationFormula."Name 1"::"Title behind the Name 2":
          NamePart[1] := "Title Behind the Name 2";
        //**4PS08.en
      END;

      CASE SalutationFormula."Name 2" OF
        SalutationFormula."Name 2"::"Job Title":
          NamePart[2] := "Job Title";
        SalutationFormula."Name 2"::"First Name":
          NamePart[2] := "First Name";
        SalutationFormula."Name 2"::"Middle Name":
          NamePart[2] := "Middle Name";
        SalutationFormula."Name 2"::Surname:
          NamePart[2] := Surname;
        SalutationFormula."Name 2"::Initials:
          NamePart[2] := Initials;
        SalutationFormula."Name 2"::"Company Name":
          NamePart[2] := "Company Name";
        //**4PS.sn
        SalutationFormula."Name 2"::Title:
          NamePart[2] := Title;
        SalutationFormula."Name 2"::"Job Title 2":
          NamePart[2] := "Job Title 2";
        SalutationFormula."Name 2"::"First Name 2":
          NamePart[2] := "First Name 2";
        SalutationFormula."Name 2"::"Middle Name 2":
          NamePart[2] := "Middle Name 2";
        SalutationFormula."Name 2"::"Surname 2":
          NamePart[2] := "Surname 2";
        SalutationFormula."Name 2"::"Initials 2":
          NamePart[2] := "Initials 2";
        SalutationFormula."Name 2"::"Title 2":
          NamePart[2] := "Title 2";
        //**4PS.en
        //**4PS08.sn
        SalutationFormula."Name 2"::"Title behind the Name":
          NamePart[2] := "Title Behind the Name";
        SalutationFormula."Name 2"::"Title behind the Name 2":
          NamePart[2] := "Title Behind the Name 2";
        //**4PS08.en
      END;

      CASE SalutationFormula."Name 3" OF
        SalutationFormula."Name 3"::"Job Title":
          NamePart[3] := "Job Title";
        SalutationFormula."Name 3"::"First Name":
          NamePart[3] := "First Name";
        SalutationFormula."Name 3"::"Middle Name":
          NamePart[3] := "Middle Name";
        SalutationFormula."Name 3"::Surname:
          NamePart[3] := Surname;
        SalutationFormula."Name 3"::Initials:
          NamePart[3] := Initials;
        SalutationFormula."Name 3"::"Company Name":
          NamePart[3] := "Company Name";
        //**4PS.sn
        SalutationFormula."Name 3"::Title:
          NamePart[3] := Title;
        SalutationFormula."Name 3"::"Job Title 2":
          NamePart[3] := "Job Title 2";
        SalutationFormula."Name 3"::"First Name 2":
          NamePart[3] := "First Name 2";
        SalutationFormula."Name 3"::"Middle Name 2":
          NamePart[3] := "Middle Name 2";
        SalutationFormula."Name 3"::"Surname 2":
          NamePart[3] := "Surname 2";
        SalutationFormula."Name 3"::"Initials 2":
          NamePart[3] := "Initials 2";
        SalutationFormula."Name 3"::"Title 2":
          NamePart[3] := "Title 2";
        //**4PS.en
        //**4PS08.sn
        SalutationFormula."Name 3"::"Title behind the Name":
          NamePart[3] := "Title Behind the Name";
        SalutationFormula."Name 3"::"Title behind the Name 2":
          NamePart[3] := "Title Behind the Name 2";
        //**4PS08.en
      END;

      CASE SalutationFormula."Name 4" OF
        SalutationFormula."Name 4"::"Job Title":
          NamePart[4] := "Job Title";
        SalutationFormula."Name 4"::"First Name":
          NamePart[4] := "First Name";
        SalutationFormula."Name 4"::"Middle Name":
          NamePart[4] := "Middle Name";
        SalutationFormula."Name 4"::Surname:
          NamePart[4] := Surname;
        SalutationFormula."Name 4"::Initials:
          NamePart[4] := Initials;
        SalutationFormula."Name 4"::"Company Name":
          NamePart[4] := "Company Name";
        //**4PS.sn
        SalutationFormula."Name 4"::Title:
          NamePart[4] := Title;
        SalutationFormula."Name 4"::"Job Title 2":
          NamePart[4] := "Job Title 2";
        SalutationFormula."Name 4"::"First Name 2":
          NamePart[4] := "First Name 2";
        SalutationFormula."Name 4"::"Middle Name 2":
          NamePart[4] := "Middle Name 2";
        SalutationFormula."Name 4"::"Surname 2":
          NamePart[4] := "Surname 2";
        SalutationFormula."Name 4"::"Initials 2":
          NamePart[4] := "Initials 2";
        SalutationFormula."Name 4"::"Title 2":
          NamePart[4] := "Title 2";
        //**4PS.en
        //**4PS08.sn
        SalutationFormula."Name 4"::"Title behind the Name":
          NamePart[4] := "Title Behind the Name";
        SalutationFormula."Name 4"::"Title behind the Name 2":
          NamePart[4] := "Title Behind the Name 2";
        //**4PS08.en
      END;

      CASE SalutationFormula."Name 5" OF
        SalutationFormula."Name 5"::"Job Title":
          NamePart[5] := "Job Title";
        SalutationFormula."Name 5"::"First Name":
          NamePart[5] := "First Name";
        SalutationFormula."Name 5"::"Middle Name":
          NamePart[5] := "Middle Name";
        SalutationFormula."Name 5"::Surname:
          NamePart[5] := Surname;
        SalutationFormula."Name 5"::Initials:
          NamePart[5] := Initials;
        SalutationFormula."Name 5"::"Company Name":
          NamePart[5] := "Company Name";
        //**4PS.sn
        SalutationFormula."Name 5"::Title:
          NamePart[5] := Title;
        SalutationFormula."Name 5"::"Job Title 2":
          NamePart[5] := "Job Title 2";
        SalutationFormula."Name 5"::"First Name 2":
          NamePart[5] := "First Name 2";
        SalutationFormula."Name 5"::"Middle Name 2":
          NamePart[5] := "Middle Name 2";
        SalutationFormula."Name 5"::"Surname 2":
          NamePart[5] := "Surname 2";
        SalutationFormula."Name 5"::"Initials 2":
          NamePart[5] := "Initials 2";
        SalutationFormula."Name 5"::"Title 2":
          NamePart[5] := "Title 2";
        //**4PS.en
        //**4PS08.sn
        SalutationFormula."Name 5"::"Title behind the Name":
          NamePart[5] := "Title Behind the Name";
        SalutationFormula."Name 5"::"Title behind the Name 2":
          NamePart[5] := "Title Behind the Name 2";
        //**4PS08.en
      END;

      //**4PS.sn
      CASE SalutationFormula."Name 6" OF
        SalutationFormula."Name 6"::"Job Title":
          NamePart[6] := "Job Title";
        SalutationFormula."Name 6"::"First Name":
          NamePart[6] := "First Name";
        SalutationFormula."Name 6"::"Middle Name":
          NamePart[6] := "Middle Name";
        SalutationFormula."Name 6"::Surname:
          NamePart[6] := Surname;
        SalutationFormula."Name 6"::Initials:
          NamePart[6] := Initials;
        SalutationFormula."Name 6"::"Company Name":
          NamePart[6] := "Company Name";
        SalutationFormula."Name 6"::Title:
          NamePart[6] := Title;
        SalutationFormula."Name 6"::"Job Title 2":
          NamePart[6] := "Job Title 2";
        SalutationFormula."Name 6"::"First Name 2":
          NamePart[6] := "First Name 2";
        SalutationFormula."Name 6"::"Middle Name 2":
          NamePart[6] := "Middle Name 2";
        SalutationFormula."Name 6"::"Surname 2":
          NamePart[6] := "Surname 2";
        SalutationFormula."Name 6"::"Initials 2":
          NamePart[6] := "Initials 2";
        SalutationFormula."Name 6"::"Title 2":
          NamePart[6] := "Title 2";
        //**4PS08.sn
        SalutationFormula."Name 6"::"Title behind the Name":
          NamePart[6] := "Title Behind the Name";
        SalutationFormula."Name 6"::"Title behind the Name 2":
          NamePart[6] := "Title Behind the Name 2";
        //**4PS08.en
      END;

      CASE SalutationFormula."Name 7" OF
        SalutationFormula."Name 7"::"Job Title":
          NamePart[7] := "Job Title";
        SalutationFormula."Name 7"::"First Name":
          NamePart[7] := "First Name";
        SalutationFormula."Name 7"::"Middle Name":
          NamePart[7] := "Middle Name";
        SalutationFormula."Name 7"::Surname:
          NamePart[7] := Surname;
        SalutationFormula."Name 7"::Initials:
          NamePart[7] := Initials;
        SalutationFormula."Name 7"::"Company Name":
          NamePart[7] := "Company Name";
        SalutationFormula."Name 7"::Title:
          NamePart[7] := Title;
        SalutationFormula."Name 7"::"Job Title 2":
          NamePart[7] := "Job Title 2";
        SalutationFormula."Name 7"::"First Name 2":
          NamePart[7] := "First Name 2";
        SalutationFormula."Name 7"::"Middle Name 2":
          NamePart[7] := "Middle Name 2";
        SalutationFormula."Name 7"::"Surname 2":
          NamePart[7] := "Surname 2";
        SalutationFormula."Name 7"::"Initials 2":
          NamePart[7] := "Initials 2";
        SalutationFormula."Name 7"::"Title 2":
          NamePart[7] := "Title 2";
        //**4PS08.sn
        SalutationFormula."Name 7"::"Title behind the Name":
          NamePart[7] := "Title Behind the Name";
        SalutationFormula."Name 7"::"Title behind the Name 2":
          NamePart[7] := "Title Behind the Name 2";
        //**4PS08.en
      END;

      CASE SalutationFormula."Name 8" OF
        SalutationFormula."Name 8"::"Job Title":
          NamePart[8] := "Job Title";
        SalutationFormula."Name 8"::"First Name":
          NamePart[8] := "First Name";
        SalutationFormula."Name 8"::"Middle Name":
          NamePart[8] := "Middle Name";
        SalutationFormula."Name 8"::Surname:
          NamePart[8] := Surname;
        SalutationFormula."Name 8"::Initials:
          NamePart[8] := Initials;
        SalutationFormula."Name 8"::"Company Name":
          NamePart[8] := "Company Name";
        SalutationFormula."Name 8"::Title:
          NamePart[8] := Title;
        SalutationFormula."Name 8"::"Job Title 2":
          NamePart[8] := "Job Title 2";
        SalutationFormula."Name 8"::"First Name 2":
          NamePart[8] := "First Name 2";
        SalutationFormula."Name 8"::"Middle Name 2":
          NamePart[8] := "Middle Name 2";
        SalutationFormula."Name 8"::"Surname 2":
          NamePart[8] := "Surname 2";
        SalutationFormula."Name 8"::"Initials 2":
          NamePart[8] := "Initials 2";
        SalutationFormula."Name 8"::"Title 2":
          NamePart[8] := "Title 2";
        //**4PS08.sn
        SalutationFormula."Name 8"::"Title behind the Name":
          NamePart[8] := "Title Behind the Name";
        SalutationFormula."Name 8"::"Title behind the Name 2":
          NamePart[8] := "Title Behind the Name 2";
        //**4PS08.en
      END;

      CASE SalutationFormula."Name 9" OF
        SalutationFormula."Name 9"::"Job Title":
          NamePart[9] := "Job Title";
        SalutationFormula."Name 9"::"First Name":
          NamePart[9] := "First Name";
        SalutationFormula."Name 9"::"Middle Name":
          NamePart[9] := "Middle Name";
        SalutationFormula."Name 9"::Surname:
          NamePart[9] := Surname;
        SalutationFormula."Name 9"::Initials:
          NamePart[9] := Initials;
        SalutationFormula."Name 9"::"Company Name":
          NamePart[9] := "Company Name";
        SalutationFormula."Name 9"::Title:
          NamePart[9] := Title;
        SalutationFormula."Name 9"::"Job Title 2":
          NamePart[9] := "Job Title 2";
        SalutationFormula."Name 9"::"First Name 2":
          NamePart[9] := "First Name 2";
        SalutationFormula."Name 9"::"Middle Name 2":
          NamePart[9] := "Middle Name 2";
        SalutationFormula."Name 9"::"Surname 2":
          NamePart[9] := "Surname 2";
        SalutationFormula."Name 9"::"Initials 2":
          NamePart[9] := "Initials 2";
        SalutationFormula."Name 9"::"Title 2":
          NamePart[9] := "Title 2";
        //**4PS08.sn
        SalutationFormula."Name 9"::"Title behind the Name":
          NamePart[9] := "Title Behind the Name";
        SalutationFormula."Name 9"::"Title behind the Name 2":
          NamePart[9] := "Title Behind the Name 2";
        //**4PS08.en
      END;

      CASE SalutationFormula."Name 10" OF
        SalutationFormula."Name 10"::"Job Title":
          NamePart[10] := "Job Title";
        SalutationFormula."Name 10"::"First Name":
          NamePart[10] := "First Name";
        SalutationFormula."Name 10"::"Middle Name":
          NamePart[10] := "Middle Name";
        SalutationFormula."Name 10"::Surname:
          NamePart[10] := Surname;
        SalutationFormula."Name 10"::Initials:
          NamePart[10] := Initials;
        SalutationFormula."Name 10"::"Company Name":
          NamePart[10] := "Company Name";
        SalutationFormula."Name 10"::Title:
          NamePart[10] := Title;
        SalutationFormula."Name 10"::"Job Title 2":
          NamePart[10] := "Job Title 2";
        SalutationFormula."Name 10"::"First Name 2":
          NamePart[10] := "First Name 2";
        SalutationFormula."Name 10"::"Middle Name 2":
          NamePart[10] := "Middle Name 2";
        SalutationFormula."Name 10"::"Surname 2":
          NamePart[10] := "Surname 2";
        SalutationFormula."Name 10"::"Initials 2":
          NamePart[10] := "Initials 2";
        SalutationFormula."Name 10"::"Title 2":
          NamePart[10] := "Title 2";
        //**4PS08.sn
        SalutationFormula."Name 10"::"Title behind the Name":
          NamePart[10] := "Title Behind the Name";
        SalutationFormula."Name 10"::"Title behind the Name 2":
          NamePart[10] := "Title Behind the Name 2";
        //**4PS08.en
      END;
      //**4PS.en

      //FOR i := 1 TO 5 DO //**4PS.o
      FOR i := 1 TO 10 DO  //**4PS.n
        IF NamePart[i] = '' THEN BEGIN
          SubStr := '%' + FORMAT(i) + ' ';
          IF STRPOS(SalutationFormula.Salutation,SubStr) > 0 THEN
            SalutationFormula.Salutation :=
              DELSTR(SalutationFormula.Salutation,STRPOS(SalutationFormula.Salutation,SubStr),3);
        END;

      IF STRPOS(SalutationFormula.Salutation,'@') > 0 THEN BEGIN
        SalutationTxt := STRSUBSTNO(SalutationFormula.Salutation,NamePart[1],NamePart[2],NamePart[3],NamePart[4],
                                                                 NamePart[5],NamePart[6],NamePart[7],NamePart[8],
                                                                 NamePart[9],NamePart[10]);
        WHILE STRPOS(SalutationTxt,'@') > 0 DO
          SalutationTxt := ReplaceWithUppercase(SalutationTxt,STRPOS(SalutationTxt,'@'));
        EXIT(SalutationTxt);
      END ELSE
        EXIT(STRSUBSTNO(SalutationFormula.Salutation,NamePart[1],NamePart[2],NamePart[3],NamePart[4],NamePart[5],
                                                     NamePart[6],NamePart[7],NamePart[8],NamePart[9],NamePart[10])); //**4PS.n
    END;

    PROCEDURE ReplaceWithUppercase@1210190022(lNameTxt@1210190000 : Text[260];lPosInt@1210190001 : Integer) NewNameTxt : Text[260];
    VAR
      BeforePos@1210190002 : Text[260];
      AfterPos@1210190003 : Text[260];
      Pos@1210190004 : Text[1];
    BEGIN
      BeforePos := COPYSTR(lNameTxt,1,lPosInt-1);
      AfterPos := COPYSTR(lNameTxt,lPosInt + 2,STRLEN(lNameTxt));
      Pos := COPYSTR(lNameTxt,lPosInt + 1,1);
      Pos := UPPERCASE(Pos);
      EXIT(BeforePos + Pos + AfterPos);
    END;

    PROCEDURE InheritCompanyToPersonData@24(Cont@1000 : Record 5050;KeepPersonalData@1001 : Boolean;InheritCommDetailsAllowed@1210190000 : Boolean);
    BEGIN
      "Company Name" := Cont.Name;

      RMSetup.GET;
      IF RMSetup."Inherit Salesperson Code" THEN
      BEGIN //**4PS.n
        "Salesperson Code" := Cont."Salesperson Code";
      END;  //**4PS.n
      //**4PS.sn
      IF RMSetup."Inherit Sales Rep. Code" THEN
        "Sales Representative Code" := Cont."Sales Representative Code";
      IF RMSetup."Inherit Purchaser Code" THEN
        "Purchaser Code" := Cont."Purchaser Code";
      //**4PS.en
      IF RMSetup."Inherit Territory Code" THEN
        "Territory Code" := Cont."Territory Code";
      IF RMSetup."Inherit Country/Region Code" THEN
        "Country/Region Code" := Cont."Country/Region Code";
      IF RMSetup."Inherit Language Code" THEN
        "Language Code" := Cont."Language Code";
      IF RMSetup."Inherit Address Details" AND
         ((NOT KeepPersonalData) OR
          (Cont.Address + Cont."Address 2" + Cont.County + Cont."Post Code" + Cont.City <> ''))
      THEN BEGIN
        Address := Cont.Address;
        "Address 2" := Cont."Address 2";
        "Post Code" := Cont."Post Code";
        City := Cont.City;
        County := Cont.County;
      END;
      //**4PS.sn
      IF RMSetup."Inherit Visit Address Details" AND
        ((NOT KeepPersonalData) OR
         (Cont."Visit Address" + Cont."Visit Address 2" + Cont."Visit Address County" + Cont."Visit Address Post Code" +
          Cont."Visit Address City" + "Visit Address Country/Region" <> ''))
      THEN BEGIN
        "Visit Address" := Cont."Visit Address";
        "Visit Address 2" := Cont."Visit Address 2";
        "Visit Address Post Code" := Cont."Visit Address Post Code";
        "Visit Address City" := Cont."Visit Address City";
        "Visit Address County" := Cont."Visit Address County";
        "Visit Address Country/Region" := Cont."Visit Address Country/Region";
      END;
      //**4PS.en
      //IF RMSetup."Inherit Communication Details" THEN BEGIN  //**4PS.o (25310)
      IF RMSetup."Inherit Communication Details" AND InheritCommDetailsAllowed THEN BEGIN  //**4PS.n (25310)
        IF (Cont."Phone No." <> '') OR NOT KeepPersonalData THEN
          "Phone No." := Cont."Phone No.";
      //**4PS.sn
        IF (Cont."Phone No. 2" <> '') OR NOT KeepPersonalData THEN
          "Phone No. 2" := Cont."Phone No. 2";
      //**4PS.en
        IF (Cont."Telex No." <> '') OR NOT KeepPersonalData THEN
          "Telex No." := Cont."Telex No.";
        IF (Cont."Fax No." <> '') OR NOT KeepPersonalData THEN
          "Fax No." := Cont."Fax No.";
        IF (Cont."Telex Answer Back" <> '') OR NOT KeepPersonalData THEN
          "Telex Answer Back" := Cont."Telex Answer Back";
        IF (Cont."E-Mail" <> '') OR NOT KeepPersonalData THEN
          VALIDATE("E-Mail",Cont."E-Mail");
      //**4PS.sn
        IF (Cont."E-Mail 2" <> '') OR NOT KeepPersonalData THEN
          VALIDATE("E-Mail 2",Cont."E-Mail 2");
      //**4PS.en
        IF (Cont."Home Page" <> '') OR NOT KeepPersonalData THEN
          "Home Page" := Cont."Home Page";
      //**4PS.os
      //  IF (Cont."Extension No." <> '') OR NOT KeepPersonalData THEN
      //    "Extension No." := Cont."Extension No.";
      //**4PS.oe
        IF (Cont."Mobile Phone No." <> '') OR NOT KeepPersonalData THEN
          "Mobile Phone No." := Cont."Mobile Phone No.";
      //**4PS.sn
        IF (Cont."Mobile Phone No. 2" <> '') OR NOT KeepPersonalData THEN
          "Mobile Phone No. 2" := Cont."Mobile Phone No. 2";
      //**4PS.en
      //**4PS.os
      //  IF (Cont.Pager <> '') OR NOT KeepPersonalData THEN
      //    Pager := Cont.Pager;
      //**4PS.oe
        IF (Cont."Correspondence Type" <> "Correspondence Type"::" ") OR NOT KeepPersonalData THEN
          "Correspondence Type" := Cont."Correspondence Type";
      END;
      CALCFIELDS("No. of Industry Groups","No. of Business Relations");
    END;

    PROCEDURE SetHideValidationDialog@26(NewHideValidationDialog@1000 : Boolean) : Boolean;
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    PROCEDURE DisplayMap@36();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::Contact,GETPOSITION)
      ELSE
        MESSAGE(Text033);
    END;

    LOCAL PROCEDURE ProcessNameChange@37();
    VAR
      ContBusRel@1000 : Record 5054;
      Cust@1001 : Record 18;
      Vend@1002 : Record 23;
    BEGIN
      UpdateSearchName;

      IF Type = Type::Company THEN
        "Company Name" := Name;

      IF Type = Type::Person THEN BEGIN
        ContBusRel.RESET;
        ContBusRel.SETCURRENTKEY("Link to Table","Contact No.");
        ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
        ContBusRel.SETRANGE("Contact No.","Company No.");
        IF ContBusRel.FINDFIRST THEN
          IF Cust.GET(ContBusRel."No.") THEN
            IF Cust."Primary Contact No." = "No." THEN BEGIN
              Cust.Contact := Name;
              //Cust.MODIFY; //**4PS.o
              Cust.MODIFY(TRUE); //**4PS.n (updates related data for central data management)
            END;

        ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
        IF ContBusRel.FINDFIRST THEN
          IF Vend.GET(ContBusRel."No.") THEN
            IF Vend."Primary Contact No." = "No." THEN BEGIN
              Vend.Contact := Name;
              //Vend.MODIFY; //**4PS.o
              Vend.MODIFY(TRUE); //**4PS.n (updates related data for central data management)
            END;
      END;
    END;

    PROCEDURE CheckPostCodeHouseNo@1210190000();
    VAR
      lContRec@1210190000 : Record 5050;
      lHousNo@1210190001 : Text[50];
      lFormatAddress@1210190002 : Codeunit 365;
      lvOk@1210190003 : Boolean;
    BEGIN
      //**4PS
      IF (Address = '') OR ("Post Code" ='') THEN
        EXIT;

      lHousNo := lFormatAddress.HouseNo(Address);
      IF lHousNo = '' THEN
        EXIT;

      lContRec.SETFILTER("No.",'<>%1',"No.");
      lContRec.SETRANGE("Post Code", "Post Code");
      lContRec.SETFILTER(Address, '<>%1', '');
      lContRec.SETRANGE(Type, Type);
      IF lContRec.FINDSET THEN BEGIN
        lvOk := TRUE;
        REPEAT
          IF NOT ((Type = Type::Person) AND ("Company No." <> '') AND
                  (lContRec."Company No." = "Company No.") AND (lContRec.Name <> Name))
          THEN BEGIN
            IF lFormatAddress.HouseNo(lContRec.Address) = lHousNo THEN
              lvOk := FALSE; //**4PS.c  //kzwerver, 111013, c, #23842
              //lvOk := CONFIRM(Text11012000, TRUE, FIELDCAPTION("Post Code"),
              //          "Post Code", lHousNo, TABLECAPTION, lContRec."No.", lContRec.Name);
          END;
        UNTIL (lContRec.NEXT = 0) OR (NOT lvOk);
      END;
    END;

    PROCEDURE AddTextUpper@1210190005(Text@1000 : Text[249]) : Text[250];
    BEGIN
      //**4PS
      IF Text <> '' THEN BEGIN
        Text := UPPERCASE(COPYSTR(Text,1,1)) + COPYSTR(Text,2);
        EXIT(Text + ' ');
      END;
    END;

    PROCEDURE GetSexSalutation@1210190006();
    BEGIN
      //**4PS
      RMSetup.GET;
      CASE Sex OF
        Sex::Male:
          IF RMSetup."Default Male Salutation Code" <> '' THEN
            "Salutation Code" := RMSetup."Default Male Salutation Code";
        Sex::Female:
          IF RMSetup."Default Female Salutation Code" <> '' THEN
            "Salutation Code" := RMSetup."Default Female Salutation Code";
        ELSE
          "Salutation Code" := RMSetup."Default Person Salutation Code";
      END;
    END;

    PROCEDURE ShowTodos@1210190008();
    VAR
      RecRef@1100528701 : RecordRef;
      Todo@1100528700 : Record 5080;
    BEGIN
      //**4PS
      // See also the standard menuitem 'To-dos' on the contact form
      Todo.SETCURRENTKEY("Contact Company No.", Date, "Contact No.", Closed);
      RecRef.GETTABLE(Todo);
      SetContactFilterOnNAVTable(
        RecRef, Todo.FIELDNAME("Contact No."), Todo.FIELDNAME("Contact Company No."));
      Todo.SETVIEW(RecRef.GETVIEW(FALSE));
      Todo.SETRANGE("System To-do Type", Todo."System To-do Type"::"Contact Attendee");
      PAGE.RUNMODAL(PAGE::"To-do List", Todo);
    END;

    PROCEDURE ShowTryouts@1210190011();
    VAR
      RecRef@1100528700 : RecordRef;
      TryoutLine@1210190000 : Record 11012755;
      TryoutLineList@1210190001 : Page 11012766;
    BEGIN
      //**4PS
      TryoutLine.SETCURRENTKEY("Contact No.", "Contact Person No.");
      RecRef.GETTABLE(TryoutLine);
      SetContactFilterOn4PSTable(
        RecRef, TryoutLine.FIELDNAME("Contact No."), TryoutLine.FIELDNAME("Contact Person No."));
      TryoutLine.SETVIEW(RecRef.GETVIEW(FALSE));
      IF TryoutLine.FINDFIRST THEN BEGIN
        TryoutLineList.SETTABLEVIEW(TryoutLine);
        TryoutLineList.RUNMODAL;
        CLEAR(TryoutLineList);
      END ELSE
        MESSAGE(Text11012006,"No.");
    END;

    PROCEDURE ShowTryoutQuotes@1210190012();
    VAR
      TmpTryoutQuote@1210190000 : TEMPORARY Record 11012758;
      ContactInfoPainMgt@1210190001 : Codeunit 11072015;
    BEGIN
      //**4PS
      //C001051.so
      //TryoutQuote.SETCURRENTKEY("Contact No.", "Contact Person No.");
      //RecRef.GETTABLE(TryoutQuote);
      //SetContactFilterOn4PSTable(
      //  RecRef, TryoutQuote.FIELDNAME("Contact No."), TryoutQuote.FIELDNAME("Contact Person No."));
      //TryoutQuote.SETVIEW(RecRef.GETVIEW(FALSE));
      //IF TryoutQuote.FINDFIRST THEN BEGIN
      //  TryoutQuoteList.SETTABLEVIEW(TryoutQuote);
      //  TryoutQuoteList.RUNMODAL;
      //  CLEAR(TryoutQuoteList);
      //END ELSE
      //  MESSAGE(Text11012007,"No.");
      //C001051.eo

      //C001051.sn
      ContactInfoPainMgt.BuildTmpTable_TryoutQuote(Rec, TmpTryoutQuote);
      IF TmpTryoutQuote.FINDFIRST THEN
        PAGE.RUNMODAL(PAGE::"Try-out Quote List", TmpTryoutQuote)
      ELSE
        MESSAGE(Text11012007,"No.");
      //C001051.en
    END;

    PROCEDURE ShowFeatures@1210190013();
    VAR
      lContactFeatureTypeRec@1210190000 : Record 11012753;
    BEGIN
      //**4PS
      TESTFIELD("No.");
      IF IsCompany THEN
        lContactFeatureTypeRec."Relation Type" := lContactFeatureTypeRec."Relation Type"::Company
      ELSE IF IsContactPerson THEN
        lContactFeatureTypeRec."Relation Type" := lContactFeatureTypeRec."Relation Type"::Contact
      ELSE IF IsPerson THEN
        lContactFeatureTypeRec."Relation Type" := lContactFeatureTypeRec."Relation Type"::Person;
      lContactFeatureTypeRec.Code := "No.";
      lContactFeatureTypeRec.SETRANGE("Relation Type", lContactFeatureTypeRec."Relation Type");
      lContactFeatureTypeRec.SETRANGE(Code, lContactFeatureTypeRec.Code);
      PAGE.RUNMODAL(PAGE::"Contact Feature Type", lContactFeatureTypeRec);
    END;

    PROCEDURE ShowWordDocs@1210190015(Incoming@1100485000 : Boolean);
    VAR
      lRecWordDoc@1210190000 : Record 11012746;
      lContactCompany@1210190002 : Record 5050;
      lByCompany@1210190003 : Boolean;
    BEGIN
      //**4PS
      lByCompany := DocumentsByCompany;

      lRecWordDoc.RESET;
      lRecWordDoc.SETCURRENTKEY(lRecWordDoc."Contact No.",lRecWordDoc."Contact Person No."); //db, 17-10-06
      IF (Type = Type::Person) AND ("Company No." <> '') THEN BEGIN
        lContactCompany.GET("Company No.");
        lContactCompany.TESTFIELD("Document Group");
        lRecWordDoc.SETRANGE("Contact No.","Company No.");
        lRecWordDoc.SETRANGE("Contact Person No.","No.");
      END ELSE BEGIN
        TESTFIELD("Document Group");
        lRecWordDoc.SETRANGE("Contact No.","No.");
      END;
      IF lByCompany = TRUE THEN
        lRecWordDoc.SETRANGE("Internal Company", COMPANYNAME);

      IF Incoming THEN BEGIN
        lRecWordDoc.SETRANGE("External Document", TRUE);
        PAGE.RUN(PAGE::"Document List",lRecWordDoc)
      END ELSE BEGIN
        lRecWordDoc.SETRANGE("External Document", FALSE);
        PAGE.RUN(PAGE::"Document List",lRecWordDoc);
      END;
    END;

    PROCEDURE ShowDocs@1210190016();
    VAR
      DocumentFilters@1199198000 : Codeunit 11012432;
      RecRef@1100409000 : RecordRef;
    BEGIN
      //**4PS
      IF IsContactPerson THEN
        DocumentFilters.CreateTempFilterAndExecute3(RecRef, '', FALSE, DocumentsByCompany, "Company No.", "No.")
      ELSE
        DocumentFilters.CreateTempFilterAndExecute3(RecRef, '', FALSE, DocumentsByCompany, "No.", '');
    END;

    PROCEDURE ShowInteractionLogEntries@1100528800();
    VAR
      RecRef@1100528800 : RecordRef;
      InteractionLogEntry@1100528801 : Record 11072027;
    BEGIN
      //**4PS
      InteractionLogEntry.SETCURRENTKEY("Contact Company No.", "Contact No.");
      RecRef.GETTABLE(InteractionLogEntry);
      SetContactFilterOnNAVTable(
        RecRef, InteractionLogEntry.FIELDNAME("Contact No."), InteractionLogEntry.FIELDNAME("Contact Company No."));
      InteractionLogEntry.SETVIEW(RecRef.GETVIEW(FALSE));
      PAGE.RUNMODAL(PAGE::"Interaction Log Entries", InteractionLogEntry);
    END;

    PROCEDURE SetGlobalCompanyName@1210190019(lCompName@1210190000 : Text[50]);
    BEGIN
      //**4PS
      GlobalCompanyName := lCompName;
    END;

    PROCEDURE IdenticalVisitAddress@1100485001(VAR Cont@1000 : Record 5050) : Boolean;
    BEGIN
      //**4PS
      EXIT(
        ("Visit Address" = Cont."Visit Address") AND
        ("Visit Address 2" = Cont."Visit Address 2") AND
        ("Visit Address Post Code" = Cont."Visit Address Post Code") AND
        ("Visit Address City" = Cont."Visit Address City") AND
        ("Visit Address Country/Region" = Cont."Visit Address Country/Region") AND
        ("Visit Address County" = Cont."Visit Address County")
        )
    END;

    PROCEDURE RemoveDocumentMap@1100485002();
    VAR
      lDocGroupRec@1100485000 : Record 11012400;
      lTxtPath@1100485001 : Text[132];
    BEGIN
      //**4PS
      IF lDocGroupRec.GET("Document Group") THEN BEGIN
        lTxtPath := lDocGroupRec."Document Directory" + 'R' + "No.";
        IF FileMgt.ClientDirectoryExists(lTxtPath) THEN
          FileMgt.DeleteClientFolder(lTxtPath);
      END;
    END;

    PROCEDURE CheckContactFeatures@1100485009();
    VAR
      ContactFeatRec@1100485000 : Record 11012753;
    BEGIN
      //**4PS
      IF NOT ContactFeatRec.READPERMISSION THEN
        EXIT;

      //Create features
      ContactFeatRec.SETRANGE(Code, "No.");
      ContactFeatRec.Code := "No.";
      IF IsCompany THEN BEGIN
        ContactFeatRec.SETRANGE("Relation Type", ContactFeatRec."Relation Type"::Company);
        ContactFeatRec."Relation Type" := ContactFeatRec."Relation Type"::Company;
      END ELSE IF IsContactPerson THEN BEGIN
        ContactFeatRec.SETRANGE("Relation Type", ContactFeatRec."Relation Type"::Contact);
        ContactFeatRec."Relation Type" := ContactFeatRec."Relation Type"::Contact;
      END ELSE IF IsPerson THEN BEGIN
        ContactFeatRec.SETRANGE("Relation Type", ContactFeatRec."Relation Type"::Person);
        ContactFeatRec."Relation Type" := ContactFeatRec."Relation Type"::Person;
      END;

      ContactFeatRec.CreateFeatureTypes;
    END;

    PROCEDURE CheckBusinessRelations@1100485003();
    VAR
      MarketingSetup@1100528700 : Record 5079;
      Customer@1100528703 : Record 18;
      Vendor@1100528704 : Record 23;
      ContactBusinessRelation@1100528701 : Record 5054;
      CompanyRelationsCentralMgt@1100528705 : Record 11012059;
      CentralDataManagement@1100528702 : Codeunit 11012010;
      Check@1100528706 : Boolean;
    BEGIN
      MarketingSetup.GET;

      IF NOT DeletingIsAllowed(FALSE) THEN
        EXIT;

      // Check on relations in current company in spite of the central mgt setting
      ContactBusinessRelation.SETRANGE("Contact No.", "No.");
      ContactBusinessRelation.SETFILTER("No.", '<>%1', '');
      IF ContactBusinessRelation.FINDSET THEN
        REPEAT
          IF NOT CONFIRM(Text11012012, TRUE, "No.",
            FORMAT(ContactBusinessRelation."Link to Table"),
            ContactBusinessRelation."No.", COMPANYNAME)
          THEN
            ERROR('');
        UNTIL ContactBusinessRelation.NEXT = 0;

      // If relations are managed centrally, and the current company is the central company,
      // check all decentral companies if there are relations that are not in the central company
      IF (CentralDataManagement.CentralCompany = COMPANYNAME) AND
         (((Type = Type::Company) AND (MarketingSetup.Companies)) OR
          ((Type = Type::Person) AND (MarketingSetup.Persons)))
      THEN BEGIN
        CompanyRelationsCentralMgt.SETFILTER(Company, '<>%1', COMPANYNAME);
        CompanyRelationsCentralMgt.SETRANGE("Company Contact Data", COMPANYNAME);
        IF CompanyRelationsCentralMgt.FINDSET THEN
          REPEAT
            ContactBusinessRelation.CHANGECOMPANY(CompanyRelationsCentralMgt.Company);
            ContactBusinessRelation.SETRANGE("Contact No.", "No.");
            ContactBusinessRelation.SETFILTER("No.", '<>%1', '');
            IF ContactBusinessRelation.FINDFIRST THEN
              REPEAT
                Check := FALSE;
                CASE ContactBusinessRelation."Link to Table" OF
                  ContactBusinessRelation."Link to Table"::Customer:
                    BEGIN
                      IF (NOT MarketingSetup.Customers) OR
                         (NOT Customer.GET(ContactBusinessRelation."No."))
                      THEN
                        Check := TRUE;
                    END;
                  ContactBusinessRelation."Link to Table"::Vendor:
                    BEGIN
                      IF (NOT MarketingSetup.Vendors) OR
                         (NOT Vendor.GET(ContactBusinessRelation."No."))
                      THEN
                        Check := TRUE;
                    END;
                  ELSE
                    Check := TRUE;
                END;
                IF Check THEN
                  IF NOT CONFIRM(Text11012012, TRUE, "No.",
                    FORMAT(ContactBusinessRelation."Link to Table"),
                    ContactBusinessRelation."No.", CompanyRelationsCentralMgt.Company)
                  THEN
                    ERROR('');
              UNTIL ContactBusinessRelation.NEXT = 0;
          UNTIL CompanyRelationsCentralMgt.NEXT = 0;
      END;
    END;

    PROCEDURE InitRecord@1100525000(CompName@1100525001 : Text[50]);
    VAR
      CompIsGlobalComp@1100525000 : Boolean;
    BEGIN
      //**4PS
      RMSetup.CHANGECOMPANY(CompName);
      RMSetup.GET;

      CompIsGlobalComp := (CompName = '') OR (CompName = COMPANYNAME);

      IF CompIsGlobalComp THEN BEGIN
        IF "Salesperson Code" = '' THEN BEGIN
          "Salesperson Code" := RMSetup."Default Salesperson Code";
        END;
        IF "Territory Code" = '' THEN
          "Territory Code" := RMSetup."Default Territory Code";
        IF "Country/Region Code" = '' THEN
          "Country/Region Code" := RMSetup."Default Country/Region Code";
        IF "Language Code" = '' THEN
          "Language Code" := RMSetup."Default Language Code";
        IF "Correspondence Type" = "Correspondence Type"::" " THEN
          "Correspondence Type" := RMSetup."Default Correspondence Type";
        IF "Salutation Code" = '' THEN
          IF Type = Type::Company THEN
            "Salutation Code" := RMSetup."Def. Company Salutation Code"
          ELSE
            GetSexSalutation;
      END ELSE BEGIN
        ContSalespersRec.CHANGECOMPANY(CompName);
        "Salesperson Code" := RMSetup."Default Salesperson Code";
        "Territory Code" := RMSetup."Default Territory Code";
        "Country/Region Code" := RMSetup."Default Country/Region Code";
        "Language Code" := RMSetup."Default Language Code";
        "Correspondence Type" := RMSetup."Default Correspondence Type";
        IF Type = Type::Company THEN
          "Salutation Code" := RMSetup."Def. Company Salutation Code"
        ELSE
          GetSexSalutation;
      END;
    END;

    LOCAL PROCEDURE OverwriteVendTemplateFields@1100528700(VAR Vend@1100528700 : Record 23);
    BEGIN
      //**4PS
      IF "Territory Code" <> '' THEN
        Vend."Territory Code" := "Territory Code";
      IF "Country/Region Code" <> '' THEN
        Vend."Country/Region Code" := "Country/Region Code";
      IF "Currency Code" <> '' THEN
        Vend."Currency Code" := "Currency Code";
      IF "Language Code" <> '' THEN
        Vend."Language Code" := "Language Code";
    END;

    LOCAL PROCEDURE OverwriteCustTemplateFields@1100528701(VAR Cust@1100528700 : Record 18);
    BEGIN
      //**4PS
      IF "Territory Code" <> '' THEN
        Cust."Territory Code" := "Territory Code";
      IF "Currency Code" <> '' THEN
        Cust."Currency Code" := "Currency Code";
      IF "Country/Region Code" <> '' THEN
        Cust."Country/Region Code" := "Country/Region Code";
      IF "Language Code" <> '' THEN
        Cust."Language Code" := "Language Code";
    END;

    PROCEDURE EditDocuments@1100528702(SendMail@1210190002 : Boolean;Recipient@1100528700 : Text[120]);
    VAR
      DocumentTemplate@1210190001 : Record 11012401;
      DocumentMailing@1210190000 : Codeunit 11012278;
      RecRef@1100528702 : RecordRef;
      DocumentLinkRIDs@1100525001 : ARRAY [5] OF RecordID;
    BEGIN
      //**4PS
      RecRef.GETTABLE(Rec);
      DocumentLinkRIDs[1] := RecRef.RECORDID;

      IF IsContactPerson THEN
        DocumentMailing.EditDocuments(
          STRSUBSTNO('%1', DocumentTemplate.Type::Contact), DocumentLinkRIDs, '', "Company No.", "No.", SendMail, Recipient)
      ELSE
        DocumentMailing.EditDocuments(
          STRSUBSTNO('%1', DocumentTemplate.Type::Contact), DocumentLinkRIDs, '', "No.", '', SendMail, Recipient);
    END;

    PROCEDURE GetContactByCustomer@1210190009(CustomerNo@1100528700 : Code[20];VAR Contact@1210190001 : Record 5050;GiveMessage@1100528701 : Boolean) Result : Boolean;
    VAR
      ContactBusinessRelation@1210190000 : Record 5054;
    BEGIN
      //**4PS
      Result := GetContactBy(CustomerNo, ContactBusinessRelation."Link to Table"::Customer, Contact);
      IF (NOT Result) AND GiveMessage THEN
        ERROR(Text11012016, CustomerNo);
    END;

    PROCEDURE GetContactByVendor@1100528705(VendorNo@1100528701 : Code[20];VAR Contact@1100528700 : Record 5050;GiveMessage@1100528703 : Boolean) Result : Boolean;
    VAR
      ContactBusinessRelation@1100528702 : Record 5054;
    BEGIN
      //**4PS
      Result := GetContactBy(VendorNo, ContactBusinessRelation."Link to Table"::Vendor, Contact);
      IF (NOT Result) AND GiveMessage THEN
        ERROR(Text11012017, VendorNo);
    END;

    PROCEDURE GetContactByEmployee@1100528706(EmployeeNo@1100528701 : Code[20];VAR Contact@1100528700 : Record 5050;GiveMessage@1100528703 : Boolean) Result : Boolean;
    VAR
      ContactBusinessRelation@1100528702 : Record 5054;
    BEGIN
      //**4PS
      Result := GetContactBy(EmployeeNo, ContactBusinessRelation."Link to Table"::Employee, Contact);
      IF (NOT Result) AND GiveMessage THEN
        ERROR(Text11012018, EmployeeNo);
    END;

    LOCAL PROCEDURE GetContactBy@1100528707(No@1100528700 : Code[20];LinkedTo@1100528702 : Option;VAR Contact@1100528701 : Record 5050) : Boolean;
    VAR
      ContactBusinessRelation@1100528703 : Record 5054;
    BEGIN
      //**4PS
      ContactBusinessRelation.SETCURRENTKEY("Link to Table","No.");
      ContactBusinessRelation.SETRANGE("Link to Table", LinkedTo);
      ContactBusinessRelation.SETRANGE("No.", No);
      IF ContactBusinessRelation.FINDFIRST THEN BEGIN
        Contact.GET(ContactBusinessRelation."Contact No.");
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetCustomerByContact@1210190014(Contact@1210190000 : Record 5050;VAR Customer@1210190001 : Record 18) : Boolean;
    BEGIN
      //**4PS
      EXIT(GetCustByContactwithCompany(Contact, Customer, ''));
    END;

    PROCEDURE GetCustByContactwithCompany@1100525001(Contact@1210190000 : Record 5050;VAR Customer@1210190001 : Record 18;Company@1100525000 : Text[50]) : Boolean;
    VAR
      ContactBusinessRelation@1210190002 : Record 5054;
    BEGIN
      //**4PS
      IF Company <> '' THEN BEGIN
        ContactBusinessRelation.CHANGECOMPANY(Company);
        Customer.CHANGECOMPANY(Company);
      END;
      ContactBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Customer);
      IF Contact."Company No." <> '' THEN
        ContactBusinessRelation.SETRANGE("Contact No.", Contact."Company No.")
      ELSE
        ContactBusinessRelation.SETRANGE("Contact No.", Contact."No.");
      ContactBusinessRelation.SETFILTER("No.", '<>%1', '');
      IF ContactBusinessRelation.FINDFIRST THEN BEGIN
        Customer.GET(ContactBusinessRelation."No.");
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetVendorByContact@1100528718(Contact@1210190000 : Record 5050;VAR Vendor@1210190001 : Record 23) : Boolean;
    VAR
      ContactBusinessRelation@1210190002 : Record 5054;
    BEGIN
      //**4PS
      ContactBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Vendor);
      IF Contact."Company No." <> '' THEN
        ContactBusinessRelation.SETRANGE("Contact No.", Contact."Company No.")
      ELSE
        ContactBusinessRelation.SETRANGE("Contact No.", Contact."No.");
      ContactBusinessRelation.SETFILTER("No.", '<>%1', '');
      IF ContactBusinessRelation.FINDFIRST THEN BEGIN
        Vendor.GET(ContactBusinessRelation."No.");
        EXIT(TRUE);
      END;
    END;

    PROCEDURE IsContact@1100528704() : Boolean;
    BEGIN
      //**4PS
      EXIT(IsCompany OR IsPerson);
    END;

    PROCEDURE IsCompany@1100528712() : Boolean;
    BEGIN
      //**4PS
      EXIT(Type = Type::Company);
    END;

    PROCEDURE IsPerson@1100528713() : Boolean;
    BEGIN
      //**4PS
      EXIT((Type = Type::Person) AND ("Company No." = ''));
    END;

    PROCEDURE IsContactPerson@1100528703() : Boolean;
    BEGIN
      //**4PS
      EXIT((Type = Type::Person) AND ("No." <> "Company No.") AND ("Company No." <> ''));
      // Do not check on Person No. of backwards compatibility reasons
    END;

    PROCEDURE ValidateIsContact@1100528720(ContactNo@1100528700 : Code[20]);
    VAR
      Contact@1100528701 : Record 5050;
      Contact1@1100528703 : Record 5050;
      Contact2@1100528704 : Record 5050;
    BEGIN
      //**4PS
      IF Contact.GET(ContactNo) THEN BEGIN
        Contact.TESTFIELD(Blocked, FALSE);
        Contact1.Type := Contact.Type::Company;
        Contact2.Type := Contact.Type::Person;
        IF NOT Contact.IsContact THEN
          ERROR(Text11012027, Contact.TABLECAPTION, Contact1.Type, Contact2.Type, Contact.FIELDCAPTION("Company No."));
      END;
    END;

    PROCEDURE InsertingIsAllowed@1100528708(GiveMessage@1100528700 : Boolean) Result : Boolean;
    BEGIN
      //**4PS
      IF (Type = Type::Company) THEN
        Result := InsertingCompanyIsAllowed(GiveMessage);
      IF (Type = Type::Person) THEN
        Result := InsertingPersonIsAllowed(GiveMessage);
    END;

    PROCEDURE InsertingCompanyIsAllowed@1100528401(GiveMessage@1100528700 : Boolean) Result : Boolean;
    VAR
      CompanyRelationsCentralMgt@1100528400 : Record 11012059;
    BEGIN
      //**4PS
      IF CompanyRelationsCentralMgt.READPERMISSION THEN
        Result := CentralDataMgt.InsertingCompanyIsAllowed;

      IF (NOT Result) AND GiveMessage THEN
        ERROR(Text11012020);
    END;

    PROCEDURE InsertingPersonIsAllowed@1100528402(GiveMessage@1100528700 : Boolean) Result : Boolean;
    VAR
      CompanyRelationsCentralMgt@1100528400 : Record 11012059;
    BEGIN
      //**4PS
      IF CompanyRelationsCentralMgt.READPERMISSION THEN
        Result := CentralDataMgt.InsertingPersonIsAllowed;

      IF (NOT Result) AND GiveMessage THEN
        ERROR(Text11012019);
    END;

    PROCEDURE ChangingCompanyIsAllowed@1100528403() : Boolean;
    VAR
      CompanyRelationsCentralMgt@1100528400 : Record 11012059;
    BEGIN
      //**4PS
      IF CompanyRelationsCentralMgt.READPERMISSION THEN
        EXIT(CentralDataMgt.ChangingCompanyIsAllowed("No."));
    END;

    PROCEDURE ChangingPersonIsAllowed@1100528404() : Boolean;
    VAR
      CompanyRelationsCentralMgt@1100528400 : Record 11012059;
    BEGIN
      //**4PS
      IF CompanyRelationsCentralMgt.READPERMISSION THEN
        EXIT(CentralDataMgt.ChangingPersonIsAllowed("No."));
    END;

    PROCEDURE DeletingIsAllowed@1100528711(GiveMessage@1100528700 : Boolean) Result : Boolean;
    BEGIN
      //**4PS
      IF (Type = Type::Company) THEN
        Result := DeletingCompanyIsAllowed(GiveMessage);
      IF (Type = Type::Person) THEN
        Result := DeletingPersonIsAllowed(GiveMessage);
    END;

    PROCEDURE DeletingCompanyIsAllowed@1100528710(GiveMessage@1100528700 : Boolean) Result : Boolean;
    VAR
      CompanyRelationsCentralMgt@1100528400 : Record 11012059;
    BEGIN
      //**4PS
      IF CompanyRelationsCentralMgt.READPERMISSION THEN
        Result := CentralDataMgt.ChangingCompanyIsAllowed("No.");

      IF (NOT Result) AND GiveMessage THEN
        ERROR(Text11012022);
    END;

    PROCEDURE DeletingPersonIsAllowed@1100528709(GiveMessage@1100528700 : Boolean) Result : Boolean;
    VAR
      CompanyRelationsCentralMgt@1100528400 : Record 11012059;
    BEGIN
      //**4PS
      IF CompanyRelationsCentralMgt.READPERMISSION THEN
        Result := CentralDataMgt.ChangingPersonIsAllowed("No.");

      IF (NOT Result) AND GiveMessage THEN
        ERROR(Text11012021);
    END;

    PROCEDURE InsertingCustomerIsAllowed@1100528405(GiveMessage@1100528700 : Boolean) Result : Boolean;
    VAR
      CompanyRelationsCentralMgt@1100528400 : Record 11012059;
    BEGIN
      //**4PS
      IF CompanyRelationsCentralMgt.READPERMISSION THEN
        Result := CentralDataMgt.InsertingCustomerIsAllowed;

      IF (NOT Result) AND GiveMessage THEN
        ERROR(Text11012023);
    END;

    PROCEDURE InsertingVendorIsAllowed@1100528406(GiveMessage@1100528700 : Boolean) Result : Boolean;
    VAR
      CompanyRelationsCentralMgt@1100528400 : Record 11012059;
    BEGIN
      //**4PS
      IF CompanyRelationsCentralMgt.READPERMISSION THEN
        Result := CentralDataMgt.InsertingVendorIsAllowed;

      IF (NOT Result) AND GiveMessage THEN
        ERROR(Text11012024);
    END;

    PROCEDURE CheckDataPresent@11012000(Contact@1100528700 : Record 5050);
    VAR
      ContactSetup@1210190016 : Record 5079;
      MailGrpRec@1210190024 : Record 5056;
      IndGrpRec@1210190019 : Record 5058;
      lFeatGroupRec@1100485001 : Record 11012751;
      lFeatTypeRec@1100485000 : Record 11012753;
      lContRec@1100485002 : Record 5050;
    BEGIN
      //**4PS
      IF NOT lContRec.GET(Contact."No.") THEN
        EXIT;

      ContactSetup.GET;
      IF Contact.Type = Contact.Type::Company THEN BEGIN

        IF ContactSetup."Mailing Groups for Contact" THEN BEGIN
          MailGrpRec.SETRANGE("Contact No.", Contact."No.");
          IF NOT MailGrpRec.FINDFIRST THEN
            MESSAGE(Text11012033, MailGrpRec.TABLECAPTION, TABLECAPTION, Contact."No.", Contact.Name)
        END;

        IF ContactSetup."Sector for Relation" THEN BEGIN
          IndGrpRec.SETRANGE("Contact No.", Contact."No.");
          IF NOT IndGrpRec.FINDFIRST THEN
            MESSAGE(Text11012033, IndGrpRec.TABLECAPTION, TABLECAPTION, Contact."No.", Contact.Name)
        END;

      END;

      IF ContactSetup."Required Features Alert" THEN BEGIN
        lFeatTypeRec.SETFILTER("Relation Type", '%1|%2|%3',
          lFeatTypeRec."Relation Type"::Company,
          lFeatTypeRec."Relation Type"::Contact,
          lFeatTypeRec."Relation Type"::Person);
        lFeatTypeRec.SETRANGE(Code, Contact."No.");
        IF lFeatTypeRec.FINDSET(FALSE, FALSE) THEN
          REPEAT
            IF lFeatGroupRec.GET(lFeatTypeRec."Feature Group") THEN BEGIN
              IF (lFeatTypeRec.Feature = '') THEN
                IF ((lFeatTypeRec."Relation Type" = lFeatTypeRec."Relation Type"::Company) AND
                     lFeatGroupRec."Obligatory for Companies") OR
                   ((lFeatTypeRec."Relation Type" = lFeatTypeRec."Relation Type"::Contact) AND
                     lFeatGroupRec."Obligatory for Contacts") OR
                   ((lFeatTypeRec."Relation Type" = lFeatTypeRec."Relation Type"::Person) AND
                     lFeatGroupRec."Obligatory for Persons")
                THEN BEGIN
                  MESSAGE(Text11012025, lFeatTypeRec.FIELDCAPTION(Feature), TABLECAPTION, Contact."No.", Contact.Name);
                  EXIT; //!
                END;

              IF (lFeatTypeRec.Value = 0.0) THEN
                IF ((lFeatTypeRec."Relation Type" = lFeatTypeRec."Relation Type"::Company) AND
                     lFeatGroupRec."Value Obligatory for Companies") OR
                   ((lFeatTypeRec."Relation Type" = lFeatTypeRec."Relation Type"::Contact) AND
                     lFeatGroupRec."Value Obligatory for Contacts") OR
                   ((lFeatTypeRec."Relation Type" = lFeatTypeRec."Relation Type"::Person) AND
                     lFeatGroupRec."Value Obligatory for Persons")
                THEN BEGIN
                  MESSAGE(Text11012026, lFeatTypeRec.FIELDCAPTION(Value), TABLECAPTION, Contact."No.", Contact.Name);
                  EXIT; //!
                END;
            END;

          UNTIL lFeatTypeRec.NEXT = 0;
      END;
    END;

    PROCEDURE NameDetailPresent@1100528716(DetailNo@1100485000 : Integer) : Boolean;
    BEGIN
      //**4PS
      CASE DetailNo OF
        1:
          BEGIN
            IF (Title <> '') OR (Initials <> '') OR ("Middle Name" <> '') OR (Surname <> '') OR
               ("Title Behind the Name" <> '') THEN
              EXIT(TRUE);
            IF Type = Type::Person THEN
               IF ("First Name" <> '') THEN
                  EXIT(TRUE);
          END;
        2:
          BEGIN
            IF ("Title 2" <> '') OR ("Initials 2" <> '') OR ("Middle Name 2" <> '') OR ("Surname 2" <> '') OR
               ("Title Behind the Name 2" <> '') THEN
              EXIT(TRUE);
            IF Type = Type::Person THEN
               IF ("First Name 2" <> '') THEN
                  EXIT(TRUE);
          END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE EditDetailsContact@1100528717(DetailNo@1210190001 : Integer);
    VAR
      Contact@1100528701 : Record 5050;
      NameDetails@1100528700 : Page 5055;
      NameDetails2@1210190000 : Page 11012276;
    BEGIN
      //**4PS
      Contact.SETRANGE("No.", "No.");
      IF DetailNo = 1 THEN BEGIN
        CLEAR(NameDetails);
        NameDetails.SETTABLEVIEW(Contact);
        NameDetails.SETRECORD(Contact);
        NameDetails.RUNMODAL;
        NameDetails.GETRECORD(Rec);
      END;
      IF DetailNo = 2 THEN BEGIN
        CLEAR(NameDetails2);
        NameDetails2.SETTABLEVIEW(Contact);
        NameDetails2.SETRECORD(Contact);
        NameDetails2.RUNMODAL;
        NameDetails2.GETRECORD(Rec);
      END;
    END;

    PROCEDURE ShowContactsByCompany@1100528714(ContactNoCompany@1100528703 : Code[20]);
    VAR
      Contact@1100528700 : Record 5050;
      ContactList@1100528701 : Page 5052;
    BEGIN
      //**4PS
      Contact.SETCURRENTKEY("Company No.");
      Contact.SETRANGE(Type, Contact.Type::Person);
      Contact.SETRANGE("Company No.", ContactNoCompany);
      ContactList.SETTABLEVIEW(Contact);
      ContactList.SetCompanyNoForNewRec(ContactNoCompany);
      ContactList.RUNMODAL;
    END;

    PROCEDURE ShowContactsByPerson@1100528715(ContactNoPerson@1100528702 : Code[20]);
    VAR
      Contact@1100528701 : Record 5050;
      ContactList@1100528700 : Page 5052;
    BEGIN
      //**4PS
      Contact.SETCURRENTKEY("Person No.");
      Contact.SETRANGE(Type, Contact.Type::Person);
      Contact.SETRANGE("Person No.", ContactNoPerson);
      Contact.SETFILTER("Company No.", '<>%1', '');
      ContactList.SETTABLEVIEW(Contact);
      ContactList.SetPersonNoForNewRec(ContactNoPerson);
      ContactList.RUNMODAL;
    END;

    PROCEDURE DocumentsByCompany@1100528719() : Boolean;
    VAR
      MarketingSetup@1100528700 : Record 5079;
    BEGIN
      //**4PS
      MarketingSetup.GET;
      IF NOT MarketingSetup."Central Management" OR
        (NOT MarketingSetup.Companies AND (Type = Type::Company)) OR
        (NOT MarketingSetup.Persons AND (Type = Type::Person)) THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE InheritFromPerson@1100528722(Contact@1100528700 : Record 5050);
    BEGIN
      // General
      Name := Contact.Name;
      "Name 2" := Contact."Name 2";
      Sex := Contact.Sex;
      "Salutation Code" := Contact."Salutation Code";
      Title := Contact.Title;
      "Title Behind the Name" := Contact."Title Behind the Name";
      Initials := Contact.Initials;
      "First Name" := Contact."First Name";
      "Middle Name" := Contact."Middle Name";
      Surname := Contact.Surname;
      "Name Abbreviation" := Contact."Name Abbreviation";
      "Search Name" := Contact."Search Name";

      // Personal
      "Civilian State" := Contact."Civilian State";
      "Wedding Date" := Contact."Wedding Date";
      "Place of Birth 1" := Contact."Place of Birth 1";
      "Birth Date 1" := Contact."Birth Date 1";
      "Birth Day 1" := Contact."Birth Day 1";
      "Birth Month 1" := Contact."Birth Month 1";
      "Place of Birth 2" := Contact."Place of Birth 2";
      "Birth Date 2" := Contact."Birth Date 2";
      "Birth Day 2" := Contact."Birth Day 2";
      "Birth Month 2" := Contact."Birth Month 2";
    END;

    LOCAL PROCEDURE UpdateContactsByPerson@1100528721(IsLeadingCompany@1100528700 : Boolean);
    VAR
      Contact@1100528701 : Record 5050;
      xRecContact@1100528702 : Record 5050;
    BEGIN
      //**4PS
      // Local function
      IF NOT IsPerson THEN
        EXIT;

      Contact.RESET;
      IF GlobalCompanyName <> '' THEN BEGIN
        Contact.CHANGECOMPANY(GlobalCompanyName);
        Contact.SetGlobalCompanyName(GlobalCompanyName);
      END;
      Contact.SETCURRENTKEY("Person No.");
      Contact.SETRANGE("Person No.", "No.");
      Contact.SETRANGE(Type, Type::Person);
      Contact.SETFILTER("No.", '<>%1', "No.");
      IF Contact.FINDSET(TRUE, FALSE) THEN
        REPEAT
          xRecContact := Contact;
          Contact.InheritFromPerson(Rec);
          Contact.OnModify(xRecContact, IsLeadingCompany); // Handle OnModify with Rec and xRec
          Contact.MODIFY(FALSE);
        UNTIL Contact.NEXT = 0;
    END;

    PROCEDURE StartWizardCreateContactPerson@1100528723(CompanyNo@1100528700 : Code[20];PersonNo@1100528701 : Code[20]) : Code[20];
    VAR
      CreateContactPerson@1100528702 : Page 11125052;
      ContactNo@1100525001 : Code[20];
      Contact@1100525000 : Record 5050;
    BEGIN
      //**4PS
      CLEAR(Rec);

      FILTERGROUP(10);
      IF CompanyNo <> '' THEN BEGIN
        "Company No." := CompanyNo;
        SETRANGE("Company No.", "Company No.");
      END;

      IF PersonNo <> '' THEN BEGIN
        "Person No." := PersonNo;
        SETRANGE("Person No.", "Person No.");
      END;
      FILTERGROUP(0);

      INSERT;

      CreateContactPerson.SETTABLEVIEW(Rec);
      CreateContactPerson.SETRECORD(Rec);
      CreateContactPerson.RUNMODAL;

      ContactNo := CreateContactPerson.GetContactNo;
      IF ContactNo <> '' THEN BEGIN
        IF Contact.GET(ContactNo) THEN BEGIN
          IF CreateContactPerson.GetSelectionPerson = 0 THEN BEGIN
            Contact.GET(Contact."Person No.");
            Contact.RunContactForm;
          END;
          IF CreateContactPerson.GetSelectionPerson = 1 THEN BEGIN
            IF CONFIRM(Text11012032, TRUE) THEN
              Contact.RunContactForm;
          END;
        END;
      END;

      EXIT(CreateContactPerson.GetContactNo);
    END;

    PROCEDURE CreatePerson@1100528729(No@1100525000 : Code[20]) : Code[20];
    VAR
      MarketingSetup@1210190000 : Record 5079;
      Contact@1100528700 : Record 5050;
    BEGIN
      //**4PS
      IF NOT InsertingPersonIsAllowed(FALSE) THEN
        EXIT;

      MarketingSetup.GET;
      MarketingSetup.TESTFIELD("Person Nos.");

      Contact.INIT;

      IF No <> '' THEN
        Contact."No." := No
      ELSE
        NoSeriesMgt.InitSeries(MarketingSetup."Person Nos.", '', 0D, Contact."No.", Contact."No. Series");
      Contact.Type := Contact.Type::Person;
      Contact.INSERT(TRUE);

      EXIT(Contact."No.");
    END;

    PROCEDURE CreateContactPerson@1100528728(CompanyNo@1100528701 : Code[20];PersonNo@1100528700 : Code[20];No@1100525000 : Code[20]) : Code[20];
    VAR
      MarketingSetup@1210190000 : Record 5079;
      Contact@1100528702 : Record 5050;
      ContactFeatureType@1100528703 : Record 11012753;
    BEGIN
      //**4PS
      IF NOT InsertingPersonIsAllowed(FALSE) THEN
        EXIT;

      Contact."Company No." := CompanyNo;
      Contact."Person No." := PersonNo;

      Contact.TESTFIELD("Company No.");
      Contact.TESTFIELD("Person No.");

      MarketingSetup.GET;
      MarketingSetup.TESTFIELD("Contact Nos.");

      Contact.INIT;

      IF No <> '' THEN
        Contact."No." := No
      ELSE
        NoSeriesMgt.InitSeries(MarketingSetup."Contact Nos.", '', 0D, Contact."No.", Contact."No. Series");
      Contact.Type := Contact.Type::Person;
      Contact.INSERT(TRUE);

      Contact.VALIDATE("Company No.", CompanyNo);
      Contact.VALIDATE("Person No.", PersonNo);
      Contact.MODIFY(TRUE);

      ContactFeatureType.SETRANGE("Relation Type", ContactFeatureType."Relation Type"::Person);
      ContactFeatureType.SETRANGE(Code, Contact."No.");
      IF ContactFeatureType.FINDSET THEN
        REPEAT
          ContactFeatureType."Feature Group" := ''; // This avoids obligatory check error in delete trigger
          ContactFeatureType.DELETE(TRUE);
        UNTIL ContactFeatureType.NEXT = 0;

      Contact.CheckContactFeatures;

      EXIT(Contact."No.");
    END;

    PROCEDURE SetContactFilterOn4PSTable@1100528724(VAR RecRef@1100528700 : RecordRef;FieldNameContactNo@1100528701 : Text[30];FieldNameContactPersonNo@1100528702 : Text[30]);
    VAR
      I@1100528706 : Integer;
      FldRef@1100528707 : FieldRef;
      FldRefContactNo@1100528704 : FieldRef;
      FldRefContactPersonNo@1100528705 : FieldRef;
    BEGIN
      //**4PS
      // Set the record filter after calling this function with Record.SETVIEW(RecordRef.GETVIEW(FALSE))
      FOR I := 1 TO RecRef.FIELDCOUNT DO BEGIN
        FldRef := RecRef.FIELDINDEX(I);
        IF UPPERCASE(FldRef.NAME) = UPPERCASE(FieldNameContactNo) THEN
          FldRefContactNo := RecRef.FIELD(FldRef.NUMBER);
        IF UPPERCASE(FldRef.NAME) = UPPERCASE(FieldNameContactPersonNo) THEN
          FldRefContactPersonNo := RecRef.FIELD(FldRef.NUMBER);
      END;

      IF IsContactPerson THEN BEGIN
        FldRefContactNo.SETRANGE("Company No.");
        FldRefContactPersonNo.SETRANGE("No.");
      END ELSE BEGIN
        FldRefContactNo.SETRANGE("No.");
        FldRefContactPersonNo.SETRANGE;
      END;
    END;

    PROCEDURE SetContactFilterOnNAVTable@1100528725(VAR RecRef@1100528700 : RecordRef;FieldNameContactNo@1100528702 : Text[30];FieldNameContactCompanyNo@1100528701 : Text[30]);
    VAR
      I@1100528707 : Integer;
      FldRef@1100528706 : FieldRef;
      FldRefContactNo@1100528705 : FieldRef;
      FldRefContactCompanyNo@1100528704 : FieldRef;
    BEGIN
      //**4PS
      // Set the record filter after calling this function with Record.SETVIEW(RecordRef.GETVIEW(FALSE))
      FOR I := 1 TO RecRef.FIELDCOUNT DO BEGIN
        FldRef := RecRef.FIELDINDEX(I);
        IF UPPERCASE(FldRef.NAME) = UPPERCASE(FieldNameContactNo) THEN
          FldRefContactNo := RecRef.FIELD(FldRef.NUMBER);
        IF UPPERCASE(FldRef.NAME) = UPPERCASE(FieldNameContactCompanyNo) THEN
          FldRefContactCompanyNo := RecRef.FIELD(FldRef.NUMBER);
      END;

      IF Type = Type::Company THEN BEGIN
        FldRefContactCompanyNo.SETRANGE("Company No.");
        FldRefContactNo.SETRANGE;
      END ELSE BEGIN
        FldRefContactCompanyNo.SETRANGE("Company No.");
        FldRefContactNo.SETRANGE("No.");
      END;
    END;

    PROCEDURE RunContactForm@1100528726();
    VAR
      ContactCardCompany@1100528700 : Page 11125049;
      ContactCardPerson@1100528701 : Page 11125050;
      ContactCardContactPerson@1100528702 : Page 11125051;
    BEGIN
      //**4PS
      IF "No." <> '' THEN BEGIN
        IF IsCompany THEN BEGIN
          ContactCardCompany.SETRECORD(Rec);
          ContactCardCompany.RUNMODAL;
        END;
        IF IsPerson THEN BEGIN
          ContactCardPerson.SETRECORD(Rec);
          ContactCardPerson.RUNMODAL;
        END;
        IF IsContactPerson THEN BEGIN
          ContactCardContactPerson.SETRECORD(Rec);
          ContactCardContactPerson.RUNMODAL;
        END;
      END;
    END;

    PROCEDURE GetContactPersonCompanyName@1100528727() : Text[50];
    VAR
      Contact@1100528700 : Record 5050;
    BEGIN
      //**4PS
      IF IsContactPerson THEN
        IF Contact.GET("Company No.") THEN
          EXIT(Contact.Name);
    END;

    PROCEDURE GetNoSeriesForContactType@1210190026(ContactType@1210190001 : 'Company,Person,Contact Person') : Code[10];
    VAR
      MarketingSetup@1210190000 : Record 5079;
    BEGIN
      //**4PS
      MarketingSetup.GET;
      CASE ContactType OF
        ContactType::Company :
          BEGIN
            MarketingSetup.TESTFIELD("Company Nos.");
            EXIT(MarketingSetup."Company Nos.");
          END;
        ContactType::Person :
          BEGIN
            MarketingSetup.TESTFIELD("Person Nos.");
            EXIT(MarketingSetup."Person Nos.");
          END;
        ContactType::"Contact Person" :
          BEGIN
            MarketingSetup.TESTFIELD("Contact Nos.");
            EXIT(MarketingSetup."Contact Nos.");
          END;
      END;
    END;

    PROCEDURE InitNoSeriesCompany@1210190010();
    BEGIN
      //**4PS
      InitNoSeriesLocal(0);
    END;

    PROCEDURE InitNoSeriesPerson@1210190017();
    BEGIN
      //**4PS
      InitNoSeriesLocal(1);
    END;

    PROCEDURE InitNoSeriesContactPerson@1210190018();
    BEGIN
      //**4PS
      InitNoSeriesLocal(2);
    END;

    LOCAL PROCEDURE InitNoSeriesLocal@1210190020(ContactType@1210190002 : 'Company,Person,Contact Person');
    VAR
      NoSeries@1210190001 : Code[10];
      NoSeriesManagement@1210190000 : Codeunit 396;
    BEGIN
      //**4PS
      IF "No." = '' THEN BEGIN
        NoSeries := GetNoSeriesForContactType(ContactType);
        NoSeriesManagement.InitSeries(NoSeries, xRec."No. Series", 0D, "No.", "No. Series");
      END;
    END;

    PROCEDURE AssistEditCompany@1210190021(OldContact@1210190000 : Record 5050) : Boolean;
    BEGIN
      //**4PS
      EXIT(AssistEditLocal(OldContact, 0));
    END;

    PROCEDURE AssistEditPerson@1210190023(OldContact@1210190000 : Record 5050) : Boolean;
    BEGIN
      //**4PS
      EXIT(AssistEditLocal(OldContact, 1));
    END;

    PROCEDURE AssistContactPerson@1210190024(OldContact@1210190000 : Record 5050) : Boolean;
    BEGIN
      //**4PS
      EXIT(AssistEditLocal(OldContact, 2));
    END;

    LOCAL PROCEDURE AssistEditLocal@1210190025(OldContact@1210190000 : Record 5050;ContactType@1210190001 : 'Company,Person,Contact Person') : Boolean;
    VAR
      Contact@1210190002 : Record 5050;
      NoSeries@1210190004 : Code[10];
      NoSeriesManagement@1210190003 : Codeunit 396;
    BEGIN
      //**4PS
      Contact := Rec;

      NoSeries := GetNoSeriesForContactType(ContactType);

      IF NoSeriesManagement.SelectSeries(NoSeries, OldContact."No. Series", Contact."No. Series") THEN BEGIN
        NoSeriesManagement.SetSeries(Contact."No.");
        IF Contact.FIND('=') THEN
          MESSAGE(Text11012008, TABLECAPTION, Contact."No.")
        ELSE BEGIN
          Rec := Contact;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE SetSkipCheckDupl@1210190027();
    BEGIN
      //**4PS
      SkipCheckDupl := TRUE;
    END;

    PROCEDURE TogglePublishCRMPort@1100528100();
    VAR
      CRMPortRelation@1100528100 : Record 11128540;
    BEGIN
      //**4PS
      IF NOT CRMPortRelation.READPERMISSION THEN
        EXIT;

      IF CRMPortRelation.GET(CRMPortRelation."Relation Type"::Contact, "No.") THEN
        CRMPortRelation.DELETE(TRUE)
      ELSE
        SetPublishCRMPort;
    END;

    PROCEDURE GetPublishCRMPort@1100528101() : Boolean;
    VAR
      CRMPortRelation@1100525001 : Record 11128540;
    BEGIN
      //**4PS
      IF NOT CRMPortRelation.READPERMISSION THEN
        EXIT(FALSE);

      EXIT(CRMPortRelation.GET(CRMPortRelation."Relation Type"::Contact, "No."));
    END;

    PROCEDURE SetPublishCRMPort@1100528102();
    VAR
      CRMPortRelation@1100525000 : Record 11128540;
    BEGIN
      //**4PS
      IF NOT CRMPortRelation.READPERMISSION THEN
        EXIT;

      CRMPortRelation."Relation Type" := CRMPortRelation."Relation Type"::Contact;
      CRMPortRelation."Relation Code" :=  "No.";
      CRMPortRelation.INSERT(TRUE);
    END;

    PROCEDURE TrySetPublishCRMPort@1100528103();
    VAR
      CRMPortRelation@1100525000 : Record 11128540;
    BEGIN
      //**4PS
      IF NOT CRMPortRelation.READPERMISSION THEN
        EXIT;

      SetPublishCRMPort;
    END;

    PROCEDURE GetProjectPortalGuidFromContactNo@1100528333(ContactNo@1100528300 : Code[20]) : Code[50];
    VAR
      Contact@1100528301 : Record 5050;
    BEGIN
      IF (Contact.GET(ContactNo)) THEN BEGIN
        IF (Contact."Project Portal ID" <> '') THEN
          EXIT(Contact."Project Portal ID");
      END;
      EXIT(ContactNo);
    END;

    PROCEDURE GetContactNoFromGuid@1100528300(ProjectPortalGuid@1100528300 : Code[50]) : Code[20];
    VAR
      Contact@1100528301 : Record 5050;
    BEGIN
      Contact.SETCURRENTKEY("Project Portal ID");
      Contact.SETRANGE("Project Portal ID", ProjectPortalGuid);
      IF (Contact.FINDFIRST) THEN
        EXIT(Contact."No.");
      //ERROR(Text11012034, Contact.FIELDCAPTION("Project Portal ID"), ProjectPortalGuid);
      EXIT('');
    END;

    PROCEDURE SetSkipCentralDataMgtInOnRename@1100528400();
    BEGIN
      //**4PS
      SkipCentralDataMgtInOnRename := TRUE;
    END;

    BEGIN
    END.
  }
}

