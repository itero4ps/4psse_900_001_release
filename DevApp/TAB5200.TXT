OBJECT Table 5200 Employee
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.45243,4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 349=ri,
                TableData 11012449=r,
                TableData 11020491=rid;
    DataCaptionFields=No.,First Name,Middle Name,Last Name;
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 HumanResSetup.GET;
                 HumanResSetup.TESTFIELD("Employee Nos.");
                 NoSeriesMgt.InitSeries(HumanResSetup."Employee Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               DimMgt.UpdateDefaultDim(
                 DATABASE::Employee,"No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");

               //**4PS.sn
               GetProjSetup;
               IF External THEN
                 "Calculate Wage Costs" := "Calculate Wage Costs"::"Fixed Rate"
               ELSE
                 "Calculate Wage Costs" := ProjSetUp."Calculate Wage Costs";
               IF NOT SkipAccHoursDefaultOnInsert THEN
                 "Account Hours" := ProjSetUp."Default Account Hours";
               "Show in Hours Portal" := ProjSetUp."Show in Hours Portal";
               IF NOT InsertFromContact THEN
                 InsertNewContact(Rec);

               //C009450
               //DP00464.so
               //HumanResSetup.GET;
               //Schedule := HumanResSetup.Schedule;
               //DP00464.eo
               //
               ExchangeFSA('I');


               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05

               ProjectSiteMgt.LogEmployee(1, Rec);
               //**4PS.en
             END;

    OnModify=BEGIN

               //**4PS.sn
               IF External THEN
                 "Calculate Wage Costs" := "Calculate Wage Costs"::"Fixed Rate";

               IF (External <> xRec.External) OR ("Calculate Wage Costs" <> xRec."Calculate Wage Costs") THEN BEGIN
                 HoursAccLineRec.SETRANGE("Employee No.","No.");
                 HoursAccLineRec.MODIFYALL(External,External);
                 HoursAccLineRec.MODIFYALL("Calculate Wage Costs", "Calculate Wage Costs");
                 HoursAccLineRec.RESET;
               END;

               UpdateDimension(FALSE);
               OnModifyRelation(Rec, xRec);
               CheckExportToFSA(0);
               ExchangeFSA('M');

               ProjectSiteMgt.LogEmployee(2, Rec);
               UpdateResource(1, xRec, Rec);  //DP00465  1=Modify
               //**4PS.en
             END;

    OnDelete=VAR
               ProjPlanTeamResourceRec@1100485010 : Record 11012440;
               lEmplCostPriceRec@1100485001 : Record 11020315;
               lEmplCostObjCostPriceRec@1100485000 : Record 11020259;
               lEmpCostObjWageSalesPriceRec@1100525000 : Record 11020378;
               lEmpCostObjSalesPriceRec@1100525001 : Record 11020377;
               AssignedActivityCapacity@1100528400 : Record 11125710;
             BEGIN
               //**4PS.sn
               AssignedActivityCapacity.SETCURRENTKEY("Resource Type", "Resource Code");
               AssignedActivityCapacity.SETRANGE("Resource Type", AssignedActivityCapacity."Resource Type"::Employee);
               AssignedActivityCapacity.SETRANGE("Resource Code", "No.");
               IF NOT AssignedActivityCapacity.ISEMPTY THEN
                 ERROR(Text11012014, TABLECAPTION, "No.", AssignedActivityCapacity.TABLECAPTION);
               //**4PS.en


                 AlternativeAddr.SETRANGE("Employee No.","No.");
                 AlternativeAddr.DELETEALL;

                 EmployeeQualification.SETRANGE("Employee No.","No.");
                 EmployeeQualification.DELETEALL;

                 Relative.SETRANGE("Employee No.","No.");
                 Relative.DELETEALL;

                 EmployeeAbsence.SETRANGE("Employee No.","No.");
                 EmployeeAbsence.DELETEALL;

                 MiscArticleInformation.SETRANGE("Employee No.","No.");
                 MiscArticleInformation.DELETEALL;

                 ConfidentialInformation.SETRANGE("Employee No.","No.");
                 ConfidentialInformation.DELETEALL;

                 HumanResComment.SETRANGE("No.","No.");
                 HumanResComment.DELETEALL;


               //**4PS.sn
               UpdateDimension(TRUE);

               OnDeleteRelation(Rec);

               HourAccRec.SETRANGE("Employee No.","No.");
               HourAccRec.DELETEALL;

               HoursAccLineRec.SETRANGE("Employee No.","No.");
               HoursAccLineRec.DELETEALL;

               IF EmplTimeTableRec.READPERMISSION THEN BEGIN
                 EmplTimeTableRec.SETRANGE("Employee No.", "No.");
                 EmplTimeTableRec.DELETEALL;
               END;

               lEmplCostPriceRec.SETRANGE("Employee No.", "No.");
               lEmplCostPriceRec.DELETEALL;

               lEmplCostObjCostPriceRec.SETRANGE("Employee No.", "No.");
               lEmplCostObjCostPriceRec.DELETEALL;

               lEmpCostObjSalesPriceRec.SETRANGE("Employee No.", "No.");
               lEmpCostObjSalesPriceRec.DELETEALL;

               lEmpCostObjWageSalesPriceRec.SETRANGE("Employee No.", "No.");
               lEmpCostObjWageSalesPriceRec.DELETEALL;
               ProjPlanTeamResourceRec.SETCURRENTKEY("Resource Code");
               ProjPlanTeamResourceRec.SETRANGE("Resource Type", ProjPlanTeamResourceRec."Resource Type"::Employee);
               ProjPlanTeamResourceRec.SETRANGE("Resource Code", "No.");
               ProjPlanTeamResourceRec.DELETEALL;

               //IF "Active in FSA" THEN              //DP00465.o
               //  VALIDATE("Active in FSA", FALSE);

               ExchangeFSA('D');
               ProjectSiteMgt.LogEmployee(3, Rec);
               UpdateResource(2, xRec, Rec);  //DP00465  2=Delete
               //**4PS.en
               DimMgt.DeleteDefaultDim(DATABASE::Employee,"No.");
             END;

    OnRename=VAR
               DocumentProperties@1100525000 : Record 11012746;
             BEGIN
               "Last Date Modified" := TODAY;
               //**4PS.sn
               DocumentProperties.HandleRenameofEmployee(COMPANYNAME,xRec."No.","No.");
               ExchangeFSA('R');

               UpdateResource(3, xRec, Rec);
               //**4PS.en
             END;

    CaptionML=ENU=Employee;
    LookupPageID=Page5201;
    DrillDownPageID=Page5201;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   OnValidate=VAR
                                                                lvEmpl@1100485000 : Record 5200;
                                                              BEGIN
                                                                IF NoChangedAsResultOfFiltering THEN //**4PS.n
                                                                  EXIT;                              //**4PS.n

                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  HumanResSetup.GET;
                                                                  NoSeriesMgt.TestManual(HumanResSetup."Employee Nos.");
                                                                  "No. Series" := '';

                                                                  UpdateDimension(TRUE);   //**4PS.n
                                                                  UpdateDimension(FALSE);  //**4PS.n
                                                                  //**4PS.sn
                                                                  lvEmpl := xRec;
                                                                  IF (lvEmpl."No." <> '') AND (lvEmpl.FIND) THEN BEGIN
                                                                //    OnDeleteRelation(xRec,FALSE); //MC-026864 o
                                                                //    OnInsertRelation(Rec);        //MC-026864 o
                                                                    OnRenameRelation(Rec, xRec);    //MC-026864 n
                                                                  END;
                                                                  //**4PS.en
                                                                END;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;First Name          ;Text30        ;OnValidate=BEGIN
                                                                ContactDataValidation.ValidateName("First Name"); //**4PS.n
                                                              END;

                                                   CaptionML=ENU=First Name }
    { 3   ;   ;Middle Name         ;Text30        ;TableRelation="Middle Name";
                                                   OnValidate=BEGIN
                                                                FillFullName(); //**4PS.n
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Middle Name }
    { 4   ;   ;Last Name           ;Text30        ;OnValidate=BEGIN
                                                                IF NOT External THEN //**4PS.n C018583

                                                                //**4PS.sn
                                                                ContactDataValidation.ValidateName("Last Name");

                                                                FillFullName();
                                                                IF ("Search Name" = UPPERCASE(xRec."Last Name")) OR ("Search Name" = '') THEN
                                                                  "Search Name" := "Last Name";
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Last Name }
    { 5   ;   ;Initials            ;Text30        ;OnValidate=BEGIN
                                                                ContactDataValidation.ValidateInitials(Initials); //**4PS.n

                                                                //**4PS.so
                                                                //IF ("Search Name" = UPPERCASE(xRec.Initials)) OR ("Search Name" = '') THEN
                                                                //  "Search Name" := Initials;
                                                                //**4PS.eo

                                                                FillFullName(); //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Initials }
    { 6   ;   ;Job Title           ;Text50        ;CaptionML=ENU=Project Title }
    { 7   ;   ;Search Name         ;Code50        ;CaptionML=ENU=Search Name }
    { 8   ;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 9   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 10  ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City }
    { 11  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);

                                                                CheckPostCodeHouseNo; //**4PS.n
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code }
    { 12  ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 13  ;   ;Phone No.           ;Text30        ;OnValidate=BEGIN
                                                                PhoneNumberFormatting.ValidatePhoneNumber("Country/Region Code", "Phone No."); //**4PS.n
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 14  ;   ;Mobile Phone No.    ;Text30        ;OnValidate=BEGIN
                                                                PhoneNumberFormatting.ValidatePhoneNumber("Country/Region Code", "Mobile Phone No."); //**4PS.n
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Mobile Phone No. }
    { 15  ;   ;E-Mail              ;Text80        ;OnValidate=VAR
                                                                RecRef@1100528700 : RecordRef;
                                                                FldRef@1100528701 : FieldRef;
                                                              BEGIN
                                                                //**4PS.sn
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("E-Mail"));
                                                                ContactDataValidation.ValidateEmail(FldRef, "E-Mail");
                                                                //**4PS.en
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=E-Mail }
    { 16  ;   ;Alt. Address Code   ;Code10        ;TableRelation="Alternative Address".Code WHERE (Employee No.=FIELD(No.));
                                                   CaptionML=ENU=Alt. Address Code }
    { 17  ;   ;Alt. Address Start Date;Date       ;CaptionML=ENU=Alt. Address Start Date }
    { 18  ;   ;Alt. Address End Date;Date         ;CaptionML=ENU=Alt. Address End Date }
    { 19  ;   ;Picture             ;BLOB          ;CaptionML=ENU=Picture;
                                                   SubType=Bitmap }
    { 20  ;   ;Birth Date          ;Date          ;OnValidate=VAR
                                                                RecRef@1100528700 : RecordRef;
                                                                FldRef@1100528701 : FieldRef;
                                                              BEGIN
                                                                //**4PS.sn
                                                                RecRef.GETTABLE(Rec);
                                                                FldRef := RecRef.FIELD(FIELDNO("Birth Date"));
                                                                ContactDataValidation.ValidateBirthDate(FldRef);
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Birth Date }
    { 21  ;   ;Social Security No. ;Text30        ;CaptionML=ENU=Social Security No. }
    { 22  ;   ;Union Code          ;Code10        ;TableRelation=Union;
                                                   CaptionML=ENU=Union Code }
    { 23  ;   ;Union Membership No.;Text30        ;CaptionML=ENU=Union Membership No. }
    { 24  ;   ;Gender              ;Option        ;CaptionML=ENU=Gender;
                                                   OptionCaptionML=ENU=" ,Female,Male";
                                                   OptionString=[ ,Female,Male] }
    { 25  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region Code }
    { 26  ;   ;Manager No.         ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Manager No.;
                                                   Description=MERCASH SGN1519 }
    { 27  ;   ;Emplymt. Contract Code;Code10      ;TableRelation="Employment Contract";
                                                   CaptionML=ENU=Emplymt. Contract Code }
    { 28  ;   ;Statistics Group Code;Code10       ;TableRelation="Employee Statistics Group";
                                                   CaptionML=ENU=Statistics Group }
    { 29  ;   ;Employment Date     ;Date          ;CaptionML=ENU=Employment Date }
    { 31  ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                EmployeeQualification.SETRANGE("Employee No.","No.");
                                                                EmployeeQualification.MODIFYALL("Employee Status",Status);
                                                                MODIFY;
                                                                //MODIFY(TRUE); //**4PS.n (db, 04-09-06: skip sql-problem between table 5200-5050; previously used to activate exchange)
                                                                //**4PS.sn
                                                                IF Status = Status::Terminated THEN
                                                                  "Account Hours" := "Account Hours"::"Not allowed";
                                                                IF Status = Status::Active THEN BEGIN
                                                                  IF "Inactive Date" <> 0D THEN
                                                                    "Inactive Date" := 0D;
                                                                  VALIDATE("Termination Date")
                                                                END ELSE BEGIN
                                                                  IF "Inactive Date" = 0D THEN
                                                                    "Inactive Date" := TODAY;
                                                                END;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Active,Inactive,Terminated;
                                                   OptionString=Active,Inactive,Terminated }
    { 32  ;   ;Inactive Date       ;Date          ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF Status <> Status::Active THEN BEGIN
                                                                  TESTFIELD("Inactive Date");
                                                                END ELSE BEGIN
                                                                  IF "Inactive Date" <> 0D THEN
                                                                    FIELDERROR(Status);
                                                                END;
                                                                //**4PS.sn
                                                              END;

                                                   CaptionML=ENU=Inactive Date }
    { 33  ;   ;Cause of Inactivity Code;Code10    ;TableRelation="Cause of Inactivity";
                                                   CaptionML=ENU=Cause of Inactivity Code }
    { 34  ;   ;Termination Date    ;Date          ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF Status = Status::Active THEN BEGIN
                                                                  IF ("Termination Date" < TODAY) AND ("Termination Date" <> 0D) THEN
                                                                    ERROR(Text11012018)
                                                                END;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Termination Date }
    { 35  ;   ;Grounds for Term. Code;Code10      ;TableRelation="Grounds for Termination";
                                                   CaptionML=ENU=Grounds for Term. Code }
    { 36  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                IF ("Global Dimension 1 Code" = '') THEN  //**4PS.n  //DP00465.c
                                                                  CheckExportToFSA(FIELDNO("Global Dimension 1 Code"));       //**4PS.n

                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                                IF NOT External THEN //**4PS.n C018583
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 37  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                IF ("Global Dimension 2 Code" = '') THEN  //**4PS.n  //DP00465.c
                                                                  CheckExportToFSA(FIELDNO("Global Dimension 2 Code"));       //**4PS.n

                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                                IF NOT External THEN //**4PS.n C018583
                                                              END;

                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 38  ;   ;Resource No.        ;Code20        ;TableRelation=Resource WHERE (Type=CONST(Person));
                                                   OnValidate=BEGIN
                                                                IF ("Resource No." <> '') AND Res.WRITEPERMISSION THEN
                                                                  EmployeeResUpdate.ResUpdate(Rec);
                                                              END;

                                                   CaptionML=ENU=Resource No. }
    { 39  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Human Resource Comment Line" WHERE (Table Name=CONST(Employee),
                                                                                                          No.=FIELD(No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 40  ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=No }
    { 41  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 42  ;   ;Global Dimension 1 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Global Dimension 1 Filter;
                                                   CaptionClass='1,3,1' }
    { 43  ;   ;Global Dimension 2 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Global Dimension 2 Filter;
                                                   CaptionClass='1,3,2' }
    { 44  ;   ;Cause of Absence Filter;Code10     ;FieldClass=FlowFilter;
                                                   TableRelation="Cause of Absence";
                                                   CaptionML=ENU=Cause of Absence Filter }
    { 45  ;   ;Total Absence (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Employee Absence"."Quantity (Base)" WHERE (Employee No.=FIELD(No.),
                                                                                                               Cause of Absence Code=FIELD(Cause of Absence Filter),
                                                                                                               From Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=Total Absence (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 46  ;   ;Extension           ;Text30        ;CaptionML=ENU=Extension }
    { 47  ;   ;Employee No. Filter ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Employee;
                                                   CaptionML=ENU=Employee No. Filter }
    { 48  ;   ;Pager               ;Text30        ;CaptionML=ENU=Pager }
    { 49  ;   ;Fax No.             ;Text30        ;OnValidate=BEGIN
                                                                PhoneNumberFormatting.ValidatePhoneNumber("Country/Region Code", "Fax No."); //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Fax No. }
    { 50  ;   ;Company E-Mail      ;Text80        ;CaptionML=ENU=Company E-Mail }
    { 51  ;   ;Title               ;Text30        ;OnValidate=BEGIN
                                                                FillFullName(); //**4PS.n
                                                              END;

                                                   OnLookup=VAR
                                                              TitleRecord@1100528702 : Record 11020688;
                                                              TitleList@1100528701 : Page 11125031;
                                                            BEGIN
                                                              //**4PS.sn
                                                              TitleRecord.SETRANGE("Title Behind the Name", FALSE);
                                                              TitleRecord.Title := Title;
                                                              IF TitleRecord.FIND('=') THEN
                                                                TitleList.SETRECORD(TitleRecord);
                                                              TitleList.SETTABLEVIEW(TitleRecord);
                                                              TitleList.LOOKUPMODE(TRUE);
                                                              IF TitleList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                TitleList.GETRECORD(TitleRecord);
                                                                Title := TitleRecord.Title;
                                                              END;
                                                              //**4PS.en
                                                            END;

                                                   CaptionML=ENU=Title }
    { 52  ;   ;Salespers./Purch. Code;Code10      ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Salespers./Purch. Code }
    { 53  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 1100;   ;Cost Center Code    ;Code20        ;TableRelation="Cost Center";
                                                   CaptionML=ENU=Cost Center Code }
    { 1101;   ;Cost Object Code    ;Code20        ;TableRelation="Cost Object";
                                                   CaptionML=ENU=Cost Object Code }
    { 11012000;;Norm Hours         ;Decimal       ;CaptionML=ENU=Norm Hours;
                                                   DecimalPlaces=0:3 }
    { 11012010;;Norm Days          ;Decimal       ;CaptionML=ENU=Norm Days;
                                                   DecimalPlaces=0:3 }
    { 11012015;;Norm Hours Year    ;Decimal       ;CaptionML=ENU=Norm Hours per Year;
                                                   DecimalPlaces=0:0 }
    { 11012021;;Show in Hours Portal;Boolean      ;CaptionML=ENU=Show in Hours Portal }
    { 11012025;;Account Hours      ;Option        ;CaptionML=ENU=Account Hours;
                                                   OptionCaptionML=ENU=Required according to Norm,Optional,Not allowed;
                                                   OptionString=Required according to Norm,Optional,Not allowed }
    { 11012030;;Trade Association  ;Code10        ;TableRelation="Trade Association".Code;
                                                   CaptionML=ENU=Trade Association }
    { 11012040;;External           ;Boolean       ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF External <> xRec.External THEN BEGIN
                                                                  Employer := '';
                                                                   "External Post No Surcharge" := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=External }
    { 11012050;;Employer           ;Code20        ;TableRelation=IF (External=CONST(No)) Employer.Code
                                                                 ELSE IF (External=CONST(Yes)) Vendor.No.;
                                                   CaptionML=ENU=Employer }
    { 11012060;;External Rental Hour Rate;Decimal ;CaptionML=ENU=External Rental Hour Rate;
                                                   AutoFormatType=2 }
    { 11012065;;External Post No Surcharge;Boolean;OnValidate=BEGIN
                                                                //**4PS
                                                                IF (NOT External) AND ("External Post No Surcharge") THEN
                                                                  ERROR(Text11012004);
                                                              END;

                                                   CaptionML=ENU=External Post No Surcharge }
    { 11012070;;Permissions of a   ;Option        ;CaptionML=ENU=Permissions of a;
                                                   OptionCaptionML=ENU=" ,Project Manager,Site Manager,Project Engineer,Estimator,Supervisor,Buyercontact,Purchaser";
                                                   OptionString=[ ,Project Manager,Site Manager,Project Engineer,Estimator,Supervisor,Buyercontact,Purchaser];
                                                   BlankZero=Yes }
    { 11012080;;Calculate Wage Costs;Option       ;CaptionML=ENU=Calculate Wage Costs;
                                                   OptionCaptionML=ENU=Fixed Rate,Actual Rate;
                                                   OptionString=Fixed Rate,Actual Rate }
    { 11012090;;Path Name Files to Site Man.;Text100;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                FileMgt.AddBackSlashToDirectoryName("Path Name Files to Site Man.");
                                                              END;

                                                   CaptionML=ENU=Path Name Files to Site Man. }
    { 11012091;;Supplying Company Site Man.;Text30;TableRelation=Company;
                                                   OnValidate=VAR
                                                                lvEmplRec@1100485000 : Record 5200;
                                                              BEGIN
                                                                //**4PS
                                                                IF "Supplying Company Site Man." <> '' THEN BEGIN
                                                                  IF "Supplying Company Site Man." = COMPANYNAME THEN
                                                                    ERROR(Text11012005, FIELDCAPTION("Supplying Company Site Man."))
                                                                  ELSE BEGIN
                                                                    lvEmplRec.CHANGECOMPANY("Supplying Company Site Man.");
                                                                    IF NOT lvEmplRec.GET("No.") THEN
                                                                      FIELDERROR("Supplying Company Site Man.", STRSUBSTNO(Text11012006,"Supplying Company Site Man.","No."));
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Supplying Company Site Man. }
    { 11012100;;Search Directory   ;BLOB          ;CaptionML=ENU=Search Directory;
                                                   SubType=User-Defined }
    { 11012110;;Element            ;Code20        ;TableRelation="Base Element".Code;
                                                   OnValidate=VAR
                                                                ElementFormat@1210190000 : Codeunit 11012022;
                                                              BEGIN
                                                                //**4PS
                                                                ElementFormat.FormatElem(Element,2,'');
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 11012120;;Participant No. (Losa);Text10     ;TableRelation="Losa Cobra Participant"."Participant No.";
                                                   CaptionML=ENU=Participant No. (Losa) }
    { 11012130;;Salary No.         ;Code20        ;CaptionML=ENU=Salary No. }
    { 11012135;;Company No. SCAB   ;Code10        ;TableRelation="SCAB Company";
                                                   CaptionML=ENU=Company No. SCAB }
    { 11012140;;Company No. Paymaster;Code10      ;TableRelation="Paymaster Company UAR";
                                                   CaptionML=ENU=Company No. Paymaster;
                                                   Description=4PS Rail }
    { 11012150;;Administration No. Paymaster;Code10;
                                                   TableRelation="Paymaster Administration UAR"."Administration No." WHERE (Company No.=FIELD(Company No. Paymaster));
                                                   CaptionML=ENU=Administration No. Paymaster;
                                                   Description=4PS Rail }
    { 11012160;;Default Cost Component;Code10     ;TableRelation="Cost Components by Employee"."Cost Component" WHERE (Employee No.=FIELD(No.));
                                                   CaptionML=ENU=Default Cost Component;
                                                   Description=4PS Rail }
    { 11012170;;Name Abbreviation  ;Text30        ;CaptionML=ENU=Name Abbreviation }
    { 11012175;;Full Name          ;Text100       ;CaptionML=ENU=Full Name;
                                                   Editable=No }
    { 11012180;;UTA                ;Boolean       ;CaptionML=ENU=Clerical Staff }
    { 11012185;;Skip Cost Code as Department;Boolean;
                                                   CaptionML=ENU=Skip Cost Code as Department }
    { 11012190;;Title behind the Name;Text30      ;TableRelation="Academic Title" WHERE (Title Behind the Name=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                FillFullName(); //**4PS03.n
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Title behind the name }
    { 11012400;;Document Editor    ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Document Editor }
    { 11012410;;Schedule OLD       ;Option        ;OnValidate=VAR
                                                                TimeTableRec@1210190000 : Record 11012923;
                                                              BEGIN
                                                                //**4PS
                                                                TESTFIELD("Schedule OLD", "Schedule OLD"::No);  //**4PS.n DP00465 Field obsoleted
                                                                //DP00464.so
                                                                //IF Schedule <> Schedule::No THEN
                                                                //  IF TimeTableRec.READPERMISSION THEN BEGIN
                                                                //    TimeTableRec.SETRANGE("Employee No.", "No.");
                                                                //    IF NOT TimeTableRec.FINDFIRST THEN
                                                                //      MESSAGE(Text11012003, TimeTableRec.TABLECAPTION);  //db, 29-08-06 (copy timetable R928 checks on Schedule<>No)
                                                                //  END;
                                                                //DP00464.eo
                                                              END;

                                                   CaptionML=ENU=Schedule OLD;
                                                   OptionCaptionML=ENU=No,Service Order,Project,Both;
                                                   OptionString=No,ServiceOrder,Project,Both }
    { 11012415;;Planner OLD        ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Planner OLD", '');  //**4PS.n DP00465 Field obsoleted
                                                              END;

                                                   CaptionML=ENU=Planner OLD }
    { 11012420;;Responsibility Center;Code10      ;TableRelation="Responsibility Center";
                                                   CaptionML=ENU=Responsibility Center }
    { 11012430;;Print Manday Register;Boolean     ;InitValue=Yes;
                                                   CaptionML=ENU=Print Manday Register }
    { 11012440;;Commuter Time      ;Decimal       ;CaptionML=ENU=Commute Time }
    { 11012450;;Discipline         ;Code10        ;TableRelation=Discipline;
                                                   CaptionML=ENU=Discipline }
    { 11012451;;Discipline Description;Text30     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Discipline.Description WHERE (Code=FIELD(Discipline)));
                                                   CaptionML=ENU=Discipline Description;
                                                   Editable=No }
    { 11012460;;Licence Plate      ;Code20        ;CaptionML=ENU=Licence Plate }
    { 11012500;;Controllers        ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Hour Controller" WHERE (Employee No.=FIELD(No.)));
                                                   CaptionML=ENU=Controllers;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 11012505;;Contact Filter     ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Contact;
                                                   CaptionML=ENU=Contact Filter }
    { 11012510;;Contact Company Filter;Code20     ;FieldClass=FlowFilter;
                                                   TableRelation=Contact WHERE (Type=CONST(Company));
                                                   CaptionML=ENU=Contact Company Filter }
    { 11012520;;Campaign Filter    ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Campaign;
                                                   CaptionML=ENU=Campaign Filter }
    { 11012530;;Team Filter        ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Team;
                                                   CaptionML=ENU=Team Filter }
    { 11012535;;Salesperson Filter ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Salesperson Filter }
    { 11012540;;To-do Entry Exists 2;Boolean      ;FieldClass=FlowField;
                                                   CalcFormula=Exist(To-do WHERE (Responsible Person=FIELD(No.),
                                                                                  Contact No.=FIELD(Contact Filter),
                                                                                  Contact Company No.=FIELD(Contact Company Filter),
                                                                                  Campaign No.=FIELD(Campaign Filter),
                                                                                  Salesperson Code=FIELD(Salesperson Filter),
                                                                                  Team Code=FIELD(Team Filter),
                                                                                  Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=To-do Entry Resp. Person Exists;
                                                   Editable=No }
    { 11012600;;Imos Type          ;Option        ;CaptionML=ENU=Imos Type;
                                                   OptionCaptionML=ENU=,Planner,Engineer;
                                                   OptionString=,Planner,Engineer;
                                                   Description=IMOS }
    { 11012601;;Imos Login         ;Code10        ;CaptionML=ENU=Imos Login;
                                                   Description=IMOS }
    { 11012602;;Imos Password      ;Text20        ;CaptionML=ENU=Imos Password;
                                                   Description=IMOS }
    { 11012603;;Imos Car           ;Code20        ;TableRelation=Location;
                                                   CaptionML=ENU=Imos Car;
                                                   Description=IMOS }
    { 11012604;;Imos Planner District Code;Code20 ;TableRelation="District (iMOS)";
                                                   CaptionML=ENU=Imos Planner District Code;
                                                   Description=IMOS }
    { 11012605;;Imos Hour Model    ;Code20        ;TableRelation="Hour Model (iMOS)";
                                                   CaptionML=ENU=Imos Hour Model;
                                                   Description=IMOS }
    { 11012610;;Pre-Registration Hours;Boolean    ;CaptionML=ENU=Pre-Registration Hours }
    { 11012620;;Super Consenter    ;Boolean       ;CaptionML=ENU=Super Consenter }
    { 11012630;;Driver Type        ;Option        ;CaptionML=ENU=Driver Type;
                                                   OptionCaptionML=ENU=Passenger,Driver without passengers,Driver with passengers;
                                                   OptionString=Passenger,Driver without passengers,Driver with passengers }
    { 11012650;;Company Phone No.  ;Text30        ;OnValidate=BEGIN
                                                                PhoneNumberFormatting.ValidatePhoneNumber("Country/Region Code", "Company Phone No."); //**4PS.n
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Company Phone No. }
    { 11012660;;Company Mobile Phone No.;Text30   ;OnValidate=BEGIN
                                                                PhoneNumberFormatting.ValidatePhoneNumber("Country/Region Code", "Company Mobile Phone No."); //**4PS.n
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Company Mobile Phone No. }
    { 11012800;;Location Code      ;Code10        ;TableRelation=Location WHERE (Service Car=CONST(Yes));
                                                   OnValidate=VAR
                                                                Location@1100525001 : Record 14;
                                                              BEGIN
                                                                Location.GET("Location Code");
                                                              END;

                                                   CaptionML=ENU=Location Code;
                                                   NotBlank=Yes }
    { 11012989;;Filter Set (4PS-Mobile) OLD;Code20;TableRelation="Export Filter Set (Mobile)";
                                                   OnValidate=VAR
                                                                lvProjSetupRec@1100525000 : Record 315;
                                                              BEGIN
                                                                //**4PS
                                                                TESTFIELD("Filter Set (4PS-Mobile) OLD", '');  //**4PS.n DP00465 Field obsoleted
                                                                //DP00465.so
                                                                //IF "Filter Set (4PS-Mobile) OLD" <> '' THEN BEGIN
                                                                //  lvProjSetupRec.GET;
                                                                //  IF (NOT lvProjSetupRec."4PS-Mobile Active") THEN
                                                                //    "Filter Set (4PS-Mobile) OLD" := '';
                                                                //  TESTFIELD("Active in FSA");
                                                                //END;
                                                                //DP00465.eo
                                                              END;

                                                   CaptionML=ENU=Filter Set (4PS-Mobile) OLD }
    { 11012990;;Export to FSA      ;Boolean       ;CaptionML=ENU=Export to Field Service;
                                                   Description=Indication new/changed. BDA= Buitendienstadmin. (Field Service Admin.), provisional this is only Field Vision. }
    { 11012991;;Date/Time Export to FSA;DateTime  ;CaptionML=ENU=Date/Time Export to Field Service;
                                                   Description=Idem }
    { 11012992;;Active in FSA OLD  ;Boolean       ;OnValidate=BEGIN
                                                                //**4PS
                                                                TESTFIELD("Active in FSA OLD", FALSE);  //**4PS.n DP00465 Field obsoleted
                                                                //DP00464.so
                                                                //CheckExportToFSA(0);
                                                                //NumberOfActiveEmployees := 0;
                                                                //check whether mobile license is not exceeded
                                                                //IF MobileSetup.READPERMISSION THEN BEGIN
                                                                //  IF MobileSetup.FINDFIRST THEN BEGIN
                                                                //    IF MobileSetup."4PS-Mobile Active" THEN BEGIN
                                                                //      IF "Active in FSA" AND MobileSetup."4PS-Mobile Active" THEN BEGIN
                                                                //        //License check only when adding active employee
                                                                //        //Only for 4PS Mobile, for other FSAs table EmployeeInFieldService is not used
                                                                //        NumberOfActiveEmployees := EmployeeInFieldService.COUNT;
                                                                //        NumberOfActiveEmployees += 1;
                                                                //        CustomLicense.GET(CustomLicense."Licence Type"::"4PS Mobile");
                                                                //        IF NOT LicenseChecker.IsLicenseValid() THEN BEGIN
                                                                //          ERROR(Text11012017, CustomLicense.TABLECAPTION);
                                                                //        END;
                                                                //        IF CustomLicense."Number of Licenses" < NumberOfActiveEmployees THEN BEGIN
                                                                //          ERROR(Text11012016, Employee.TABLECAPTION, FIELDCAPTION("Active in FSA"));
                                                                //        END;
                                                                //        EmployeeInFieldService."Employee No." := "No.";
                                                                //        EmployeeInFieldService."Company Name" := COMPANYNAME;
                                                                //        IF EmployeeInFieldService.INSERT(TRUE) THEN;
                                                                //      END ELSE BEGIN
                                                                //        IF EmployeeInFieldService.GET(COMPANYNAME, "No.") THEN
                                                                //            EmployeeInFieldService.DELETE(TRUE);
                                                                //      END;
                                                                //    END;
                                                                //  END;
                                                                //END;
                                                                //DP00464.eo
                                                              END;

                                                   CaptionML=ENU=Active in Field Service OLD }
    { 11012993;;Login Code FSA     ;Text20        ;CaptionML=ENU=Login Code FSA;
                                                   Description=FieldVision, not used for 4PS-Mobile }
    { 11012994;;Password FSA       ;Text20        ;CaptionML=ENU=Password FSA;
                                                   Description=FieldVision, not used for 4PS-Mobile }
    { 11012995;;CAO                ;Code10        ;TableRelation="Site Mngmnt. CAO's".Code;
                                                   CaptionML=ENU=CAO }
    { 11012996;;Company Car        ;Boolean       ;CaptionML=ENU=Company Car }
    { 11012997;;Check Hours        ;Boolean       ;CaptionML=ENU=Check Hours }
    { 11012998;;Year Filter        ;Integer       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Year Filter }
    { 11012999;;Week Filter        ;Integer       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Week Filter }
    { 11020729;;Territory Code     ;Code10        ;TableRelation=Territory.Code;
                                                   CaptionML=ENU=Territory Code;
                                                   Description=MERCASH }
    { 11020767;;Company Mobile     ;Text30        ;CaptionML=ENU=Company Mobile;
                                                   Description=MERCASH SGN1485 }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Name                              }
    {    ;Status,Union Code                        }
    {    ;Status,Emplymt. Contract Code            }
    {    ;Last Name,First Name,Middle Name         }
    {    ;Global Dimension 1 Code,Global Dimension 2 Code }
    {    ;Global Dimension 2 Code,Global Dimension 1 Code }
    {    ;Discipline,No.                           }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,First Name,Last Name,Initials,Job Title }
  }
  CODE
  {
    VAR
      Text11012000@1210190001 : TextConst 'ENU=The combination of %1 %2 and House No. %3 is already used at %4 %5';
      RMSetup@1210190003 : Record 5079;
      ContBusRel@1210190007 : Record 5054;
      Cont@1210190006 : Record 5050;
      ProjSetUp@1210190004 : Record 315;
      HumanResSetup@1000 : Record 5218;
      Employee@1001 : Record 5200;
      Res@1002 : Record 156;
      PostCode@1003 : Record 225;
      AlternativeAddr@1004 : Record 5201;
      EmployeeQualification@1005 : Record 5203;
      Relative@1006 : Record 5205;
      EmployeeAbsence@1007 : Record 5207;
      MiscArticleInformation@1008 : Record 5214;
      ConfidentialInformation@1009 : Record 5216;
      HumanResComment@1010 : Record 5208;
      SalespersonPurchaser@1011 : Record 13;
      HourAccRec@11012012 : Record 11012038;
      HoursAccLineRec@11012013 : Record 11012039;
      NoSeriesMgt@1012 : Codeunit 396;
      EmployeeResUpdate@1013 : Codeunit 5200;
      EmployeeSalespersonUpdate@1014 : Codeunit 5201;
      DimMgt@1015 : Codeunit 408;
      Text000@1016 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      ContactDataValidation@1100528700 : Codeunit 11012275;
      PhoneNumberFormatting@1100528701 : Codeunit 11012276;
      RecRef@1100485010 : RecordRef;
      CentralDataMngmnt@1100485009 : Codeunit 11012010;
      Text11012003@1210190011 : TextConst 'ENU="%1 not defined "';
      HasGotProjSetup@1210190010 : Boolean;
      Text11012004@1100485100 : TextConst 'ENU="The surcharges can only be skipped for Externals "';
      InsertFromContact@1100485006 : Boolean;
      EmplTimeTableRec@1100485002 : Record 11012923;
      Text11012005@1100485003 : TextConst 'ENU=Only fill %1 when it differs from the current company.';
      Text11012006@1100485004 : TextConst 'ENU=''%1'' not allowed, Employee must also be present there';
      Text11012007@1100485001 : TextConst 'ENU=Delete or rename not allowed, employee is already exported to the Field Service.';
      Text11012008@1100485005 : TextConst 'ENU=This is only possible after the employee is exported to the Field Service with status ''Not Active''.';
      Text11012011@1100485011 : TextConst 'ENU=Can not add, this should be done in Central Company %1.';
      Text11012012@1100485012 : TextConst 'ENU=Can not update %1, this should be done in Central Company %2';
      Text11012014@1100525000 : TextConst 'ENU="You cannot delete %1 %2; at least one %3 exists for this %1."';
      DPA_Management@1100000999 : Codeunit 11012783;
      Text11012018@1100525004 : TextConst 'ENU=Termination Date in the past not possible for active Employee.';
      FileMgt@1100525005 : Codeunit 419;
      SkipAccHoursDefaultOnInsert@1210190000 : Boolean;
      Text11012019@1210190002 : TextConst 'ENU=Note that %1 is still %2!';
      ProjectSiteMgt@1100528300 : Codeunit 11012282;
      SkipModify@1100528400 : Boolean;

    PROCEDURE AssistEdit@2(OldEmployee@1000 : Record 5200) : Boolean;
    VAR
      Employee@1100528700 : Record 5200;
    BEGIN
      WITH Employee DO BEGIN
        Employee := Rec;
        HumanResSetup.GET;
        HumanResSetup.TESTFIELD("Employee Nos.");
        IF NoSeriesMgt.SelectSeries(HumanResSetup."Employee Nos.",OldEmployee."No. Series","No. Series") THEN BEGIN
          HumanResSetup.GET;
          HumanResSetup.TESTFIELD("Employee Nos.");
          NoSeriesMgt.SetSeries("No.");
          Rec := Employee;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE FullName@1() : Text[100];
    BEGIN
      EXIT("Full Name"); //**4PS.n
    END;

    PROCEDURE FillFullName@1210190008() : Text[100];
    VAR
      lFullName@1210190000 : Text[250];
    BEGIN
      //**4PS
      HumanResSetup.GET;
      CASE HumanResSetup."Format Full Name" OF
        HumanResSetup."Format Full Name"::First:
          BEGIN
            AddToFullName(lFullName, "First Name");
            AddToFullName(lFullName, "Middle Name");
            AddToFullName(lFullName, "Last Name");
          END;
        HumanResSetup."Format Full Name"::Initials:
          BEGIN
            AddToFullName(lFullName, Initials);
            AddToFullName(lFullName, "Middle Name");
            AddToFullName(lFullName, "Last Name");
          END;
        HumanResSetup."Format Full Name"::Title:
          BEGIN
            AddToFullName(lFullName, Title);
            AddToFullName(lFullName, Initials);
            AddToFullName(lFullName, "Middle Name");
            AddToFullName(lFullName, "Last Name");
            AddToFullName(lFullName, "Title behind the Name");
          END;
        HumanResSetup."Format Full Name"::InitialsFirst:
          BEGIN
            AddToFullName(lFullName, Initials);
            IF "First Name" <> '' THEN
              AddToFullName(lFullName, '(' + "First Name" + ')');
            AddToFullName(lFullName, "Middle Name");
            AddToFullName(lFullName, "Last Name");
          END;
      END;

      "Full Name" := lFullName;
    END;

    PROCEDURE AddToFullName@1100485006(VAR lFullName@1100485001 : Text[100];lAddTxt@1100485000 : Text[100]);
    BEGIN
      //**4PS
      IF lAddTxt = '' THEN
        EXIT;

      IF lFullName <> '' THEN
        lFullName := lFullName + ' ';
      lFullName := lFullName + lAddTxt;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.SaveDefaultDim(DATABASE::Employee,"No.",FieldNumber,ShortcutDimCode);
      IF NOT SkipModify THEN //**4PS.n
        MODIFY;
    END;

    PROCEDURE DisplayMap@7();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FIND('-') THEN
        MapMgt.MakeSelection(DATABASE::Employee,GETPOSITION)
      ELSE
        MESSAGE(Text000);
    END;

    PROCEDURE GetProjSetup@1210190006();
    BEGIN
      //**4PS
      IF NOT HasGotProjSetup THEN BEGIN
        ProjSetUp.GET;
        HasGotProjSetup := TRUE;
      END;
    END;

    PROCEDURE CompleteEmployeeName@11012100(parCode@1210190014 : Code[20]) : Text[100];
    VAR
      EmployeeRec@11012001 : Record 5200;
    BEGIN
      //**4PS
      IF EmployeeRec.GET(parCode) THEN
        EXIT(EmployeeRec."Full Name")
      ELSE
        EXIT('');
    END;

    PROCEDURE CheckPostCodeHouseNo@1210190000();
    VAR
      lEmplRec@1210190000 : Record 5200;
      lHousNo@1210190018 : Text[50];
      lFormatAddress@1210190011 : Codeunit 365;
    BEGIN
      //**4PS
      IF (Address = '') OR ("Post Code" ='') THEN
        EXIT;

      lHousNo := lFormatAddress.HouseNo(Address);
      IF lHousNo = '' THEN
        EXIT;

      lEmplRec.SETFILTER("No.",'<>%1',"No.");
      lEmplRec.SETRANGE("Post Code", "Post Code");
      IF lEmplRec.FINDSET THEN
        REPEAT
          IF lFormatAddress.HouseNo(lEmplRec.Address) = lHousNo THEN
            MESSAGE(Text11012000, FIELDCAPTION("Post Code"), "Post Code", lHousNo, TABLECAPTION, lEmplRec."No.");
        UNTIL lEmplRec.NEXT = 0;
    END;

    PROCEDURE UpdateDimension@1210190001(DeleteBln@1210190000 : Boolean);
    VAR
      DimValRec@1210190012 : Record 349;
    BEGIN
      //**4PS
      RMSetup.GET;
      IF RMSetup."Shortcut Dimension Employees" <> '' THEN
        IF DeleteBln = TRUE THEN BEGIN
          IF DimValRec.GET(RMSetup."Shortcut Dimension Employees", "No.") THEN
            DimValRec.DELETE(TRUE);
        END ELSE
          IF DimValRec.GET(RMSetup."Shortcut Dimension Employees", "No.") THEN BEGIN
            DimValRec.Name := COPYSTR(FullName, 1, MAXSTRLEN(DimValRec.Name));
            DimValRec.MODIFY(TRUE);
          END ELSE BEGIN
            DimValRec.INIT;
            DimValRec."Dimension Code" := RMSetup."Shortcut Dimension Employees";
            DimValRec.Code := "No.";
            DimValRec.Name := COPYSTR(FullName, 1, MAXSTRLEN(DimValRec.Name));
            DimValRec.INSERT(TRUE);
          END;
    END;

    PROCEDURE InsertNewContact@1100528705(VAR Employee@1100528700 : Record 5200);
    VAR
      Contact@1100528701 : Record 5050;
      ContactBusinessRelation@1100528702 : Record 5054;
    BEGIN
      RMSetup.GET;
      IF (RMSetup."Bus. Rel. Code for Employees" = '') OR (RMSetup."Contact Nos. Employees" = '') THEN
        EXIT;

      IF NOT CentralDataMngmnt.InsertingPersonIsAllowed THEN
        ERROR(Text11012011, CentralDataMngmnt.CentralCompany);

      Contact.INIT;
      OnTransferFields(Contact, Employee);

      Contact.VALIDATE("First Name");
      Contact."No." := '';
      Contact."No. Series" := '';

      RMSetup.TESTFIELD("Contact Nos. Employees");
      NoSeriesMgt.InitSeries(RMSetup."Contact Nos. Employees",'',0D,Contact."No.",Contact."No. Series");
      Contact.Type := Contact.Type::Person;
      Contact.TypeChange;
      Contact.SetSkipDefault(FALSE);
      Contact.INSERT(TRUE);

      ContactBusinessRelation.INIT;
      ContactBusinessRelation."Contact No." := Contact."No.";
      ContactBusinessRelation."Business Relation Code" := RMSetup."Bus. Rel. Code for Employees";
      ContactBusinessRelation."Link to Table" := ContactBusinessRelation."Link to Table"::Employee;
      ContactBusinessRelation."No." := Employee."No.";
      ContactBusinessRelation.INSERT(TRUE);
    END;

    PROCEDURE OnModifyRelation@1210190003(VAR Employee@1000 : Record 5200;OldEmployee@1100485002 : Record 5200);
    VAR
      ContactBusinessRelation@1100528700 : Record 5054;
      Contact@1100528701 : Record 5050;
      OldContact@1210190000 : Record 5050;
      FieldCaption@1100485001 : Text[132];
      RecRef@1100528702 : RecordRef;
    BEGIN
      //**4PS
      RMSetup.GET;
      IF RMSetup."Bus. Rel. Code for Employees" = '' THEN
        EXIT;

      ContactBusinessRelation.SETCURRENTKEY("Link to Table","No.");
      ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Employee);
      ContactBusinessRelation.SETRANGE("No.", Employee."No.");
      IF NOT ContactBusinessRelation.FINDFIRST THEN BEGIN
        InsertNewContact(Employee);
        EXIT;
      END;

      Contact.GET(ContactBusinessRelation."Contact No.");
      OldContact := Contact;

      FieldCaption := CheckTransferFields(Employee, OldEmployee);
      IF FieldCaption <> '' THEN BEGIN
        RecRef.GETTABLE(Contact);
        //X016.sn
        IF NOT CentralDataMngmnt.DataInputAllowed(RecRef) THEN
          ERROR(Text11012012, FieldCaption, CentralDataMngmnt.CentralCompany);

        //X016.en
        MODIFY; //Necessary for SQL
        OnTransferFields(Contact, Employee);
        Contact.VALIDATE("First Name");
        Contact.OnModify(OldContact, TRUE);
        Contact."Relation changed by" :=
          Contact."Relation changed by"::Employee;  //db, 05-09-06: next line also executes function OnModify(xRec)
        Contact.MODIFY(TRUE);
      END;
    END;

    PROCEDURE OnDeleteRelation@1210190002(VAR Employee@1000 : Record 5200);
    VAR
      ContactBusinessRelation@1100528700 : Record 5054;
    BEGIN
      //**4PS
      ContactBusinessRelation.SETCURRENTKEY("Link to Table","No.");
      ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Employee);
      ContactBusinessRelation.SETRANGE("No.", Employee."No.");
      ContactBusinessRelation.DELETEALL(TRUE);
    END;

    PROCEDURE OnRenameRelation@1100530000(VAR Empl@1000 : Record 5200;OldEmpl@1100530000 : Record 5200);
    BEGIN
      //**4PS MC-026864
      RMSetup.GET;
      IF RMSetup."Bus. Rel. Code for Employees" = '' THEN
        EXIT;

      WITH ContBusRel DO BEGIN
        SETCURRENTKEY("Link to Table","No.");
        SETRANGE("Link to Table","Link to Table"::Employee);
        SETRANGE("No.", OldEmpl."No.");
        IF FINDSET(TRUE, FALSE) THEN BEGIN
          "No." := Empl."No.";
          MODIFY(TRUE);
        END;
      END;
    END;

    PROCEDURE OnTransferFields@1210190007(VAR Cont@1210190000 : Record 5050;VAR Empl@1210190001 : Record 5200);
    BEGIN
      //**4PS
      WITH Cont DO BEGIN
      // The sequence of the fields below corresponds with the field
      // sequence of the employee table definition.
      // If change, change also function in codeunit 5055.
        "First Name" := Empl."First Name";
        "Middle Name" := Empl."Middle Name";
        Surname := COPYSTR(Empl."Last Name", 1, MAXSTRLEN(Surname));
        Initials := Empl.Initials;
        "Search Name" := Empl."Search Name";
        Address := Empl.Address;
        "Address 2" := Empl."Address 2";
        City := Empl.City;
        "Post Code" := Empl."Post Code";
        County := Empl.County;
        "Phone No." := Empl."Phone No.";
        "Mobile Phone No." := Empl."Mobile Phone No.";
        "E-Mail" := Empl."E-Mail";
        VALIDATE("Birth Date 1", Empl."Birth Date");
        IF Sex <> Empl.Gender THEN
          VALIDATE(Sex, Empl.Gender); //This updates salutation on sex change
        "Country/Region Code" := Empl."Country/Region Code";
        "Fax No." := Empl."Fax No.";
        Title := Empl.Title;
        "Salesperson Code" := Empl."Salespers./Purch. Code";
        "Name Abbreviation" := Empl."Name Abbreviation";
        "Title Behind the Name" := Empl."Title behind the Name";
        Name := CalculatedName(1);
        "Relation changed by" := "Relation changed by"::Employee;  //db, 05-09-06
      END;
    END;

    PROCEDURE CheckTransferFields@1100485005(Empl@1210190001 : Record 5200;OldEmpl@1100485000 : Record 5200) : Text[132];
    BEGIN
      //**4PS
      WITH OldEmpl DO BEGIN
        IF "First Name" <> Empl."First Name" THEN
          EXIT(FIELDCAPTION("First Name"));
        IF "Middle Name" <> Empl."Middle Name" THEN
          EXIT(FIELDCAPTION("Middle Name"));
        IF "Last Name" <> Empl."Last Name" THEN
          EXIT(FIELDCAPTION("Last Name"));
        IF Initials <> Empl.Initials THEN
          EXIT(FIELDCAPTION(Initials));
        IF "Search Name" <> Empl."Search Name" THEN
          EXIT(FIELDCAPTION("Search Name"));
        IF Address <> Empl.Address THEN
          EXIT(FIELDCAPTION(Address));
        IF "Address 2" <> Empl."Address 2" THEN
          EXIT(FIELDCAPTION("Address 2"));
        IF City <> Empl.City THEN
          EXIT(FIELDCAPTION(City));
        IF "Post Code" <> Empl."Post Code" THEN
          EXIT(FIELDCAPTION("Post Code"));
        IF County <> Empl.County THEN
          EXIT(FIELDCAPTION(County));
        IF "Phone No." <> Empl."Phone No." THEN
          EXIT(FIELDCAPTION("Phone No."));
        IF "Mobile Phone No." <> Empl."Mobile Phone No." THEN
          EXIT(FIELDCAPTION("Mobile Phone No."));
        IF "E-Mail" <> Empl."E-Mail" THEN
          EXIT(FIELDCAPTION("E-Mail"));
        IF "Birth Date" <> Empl."Birth Date" THEN
          EXIT(FIELDCAPTION("Birth Date"));
        IF Gender <> Empl.Gender THEN
          EXIT(FIELDCAPTION(Gender));
        IF "Country/Region Code" <> Empl."Country/Region Code" THEN
          EXIT(FIELDCAPTION("Country/Region Code"));
        IF "Fax No." <> Empl."Fax No." THEN
          EXIT(FIELDCAPTION("Fax No."));
        IF Title <> Empl.Title THEN
          EXIT(FIELDCAPTION(Title));
        IF "Salespers./Purch. Code" <> Empl."Salespers./Purch. Code" THEN
          EXIT(FIELDCAPTION("Salespers./Purch. Code"));
        IF "Name Abbreviation" <> Empl."Name Abbreviation" THEN
          EXIT(FIELDCAPTION("Name Abbreviation"));
        IF "Title behind the Name" <> Empl."Title behind the Name" THEN
          EXIT(FIELDCAPTION("Title behind the Name"));
      END;
    END;

    PROCEDURE ExchangeFSA@1100485002(IMode@1100485003 : Code[1]);
    VAR
      lvProjSetupRec@1100485001 : Record 315;
      lvFieldVisionExchangeMgtCU@1100485000 : Codeunit 11012091;
    BEGIN
      //**4PS.n
      IF IMode = 'I' THEN BEGIN
        "Export to FSA" := FALSE;
        "Date/Time Export to FSA" := 0DT;
      END;
      lvProjSetupRec.GET;
      IF lvProjSetupRec."Field Service Active" THEN BEGIN
        //* Deleting only permitted when Field Service Active is set to 'False'
        //* (or when not switched at all). When export to FSA is 'False' at exporting,
        //* field date/time will be made empty. From that moment the employee can be deleted.
        //* Most of time an employee will not be deleted. When fired the employee will be set to inactive.
        //* Probably many years later the employee will be deleted from the system, but at that time
        //* the status is already exported to Field Service.
        //* Note: There are also changes maded in the XML-port for this.
      //    "Active in FSA" moved to Resource table. Reconsider this whenever the link with FieldVision will be transferred to NAV2013.
      //     Now switch off for DP00465 do not take into account FV (Andre)
      //  IF IMode <> 'D' THEN BEGIN
      //    IF "Active in FSA" OR ((NOT "Active in FSA") AND ("Date/Time Export to FSA" <> 0DT)) THEN
      //      "Export to FSA" := TRUE;
      //    IF IMode = 'R' THEN BEGIN
      //      IF (xRec."Date/Time Export to FSA" <> 0DT) THEN
      //        ERROR(Text11012007 + '\ \' + Text11012008);
      //    END;
      //  END ELSE BEGIN
      //    IF ("Date/Time Export to FSA" <> 0DT) THEN
      //      ERROR(Text11012007 + '\ \' + Text11012008);
      //  END;
      END;
    END;

    PROCEDURE Mercash@1210190010() : Boolean;
    BEGIN
      //**4PS.n
      GetProjSetup;
      EXIT(ProjSetUp."Salary Application" = ProjSetUp."Salary Application"::Mercash);
    END;

    PROCEDURE ShowContact@1210190011();
    VAR
      ContBusRel@1000 : Record 5054;
      Cont@1001 : Record 5050;
    BEGIN
      //**4PS
      IF "No." = '' THEN EXIT;

      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Employee);
      ContBusRel.SETRANGE("No.","No.");
      IF NOT ContBusRel.FINDFIRST THEN EXIT;

      Cont.GET(ContBusRel."Contact No.");
      //PAGE.RUN(PAGE::"Contact Card",Cont); //**4PS.o
      Cont.RunContactForm; //**4PS.n
    END;

    PROCEDURE AvailableHours@1100485001() Hours : Decimal;
    VAR
      DateRec@1100485000 : Record 2000000007;
      TimeTableRec@1100485003 : Record 11012923;
    BEGIN
      IF NOT TimeTableRec.READPERMISSION THEN
        EXIT(0);

      TimeTableRec.SETRANGE("Employee No.", "No.");
      IF NOT TimeTableRec.FINDFIRST THEN
        EXIT(0);

      IF GETFILTER("Date Filter" ) = '' THEN
        EXIT(0);

      Hours := 0;
      DateRec.SETRANGE("Period Type", DateRec."Period Type"::Date);
      DateRec.SETFILTER("Period Start", GETFILTER("Date Filter"));
      DateRec.SETRANGE("Period No.", 1);
      IF DateRec.FINDSET THEN BEGIN
        REPEAT
          TimeTableRec.SETFILTER("Effective Date", '..%1', DateRec."Period Start");
          IF TimeTableRec.FINDLAST THEN
            Hours := Hours + TimeTableRec.Monday;
        UNTIL DateRec.NEXT = 0;
      END;

      DateRec.SETRANGE("Period No.", 2);
      IF DateRec.FINDSET THEN BEGIN
        REPEAT
          TimeTableRec.SETFILTER("Effective Date", '..%1', DateRec."Period Start");
          IF TimeTableRec.FINDLAST THEN
            Hours := Hours + TimeTableRec.Tuesday;
        UNTIL DateRec.NEXT = 0;
      END;

      DateRec.SETRANGE("Period No.", 3);
      IF DateRec.FINDSET THEN BEGIN
        REPEAT
          TimeTableRec.SETFILTER("Effective Date", '..%1', DateRec."Period Start");
          IF TimeTableRec.FINDLAST THEN
            Hours := Hours + TimeTableRec.Wednesday;
        UNTIL DateRec.NEXT = 0;
      END;

      DateRec.SETRANGE("Period No.", 4);
      IF DateRec.FINDSET THEN BEGIN
        REPEAT
          TimeTableRec.SETFILTER("Effective Date", '..%1', DateRec."Period Start");
          IF TimeTableRec.FINDLAST THEN
            Hours := Hours + TimeTableRec.Thursday;
        UNTIL DateRec.NEXT = 0;
      END;

      DateRec.SETRANGE("Period No.", 5);
      IF DateRec.FINDSET THEN BEGIN
        REPEAT
          TimeTableRec.SETFILTER("Effective Date", '..%1', DateRec."Period Start");
          IF TimeTableRec.FINDLAST THEN
            Hours := Hours + TimeTableRec.Friday;
        UNTIL DateRec.NEXT = 0;
      END;

      DateRec.SETRANGE("Period No.", 6);
      IF DateRec.FINDSET THEN BEGIN
        REPEAT
          TimeTableRec.SETFILTER("Effective Date", '..%1', DateRec."Period Start");
          IF TimeTableRec.FINDLAST THEN
            Hours := Hours + TimeTableRec.Saturday;
        UNTIL DateRec.NEXT = 0;
      END;

      DateRec.SETRANGE("Period No.", 7);
      IF DateRec.FINDSET THEN BEGIN
        REPEAT
          TimeTableRec.SETFILTER("Effective Date", '..%1', DateRec."Period Start");
          IF TimeTableRec.FINDLAST THEN
            Hours := Hours + TimeTableRec.Sunday;
        UNTIL DateRec.NEXT = 0;
      END;

      EXIT(Hours);
    END;

    PROCEDURE CheckExportToFSA@1100485010(ICurrFieldNo@1100485002 : Integer);
    VAR
      MandatoryFields@1100485001 : Record 11125651;
      Resource@1100525000 : Record 11229278;
    BEGIN
      //**4PS
      //* When 'ICurrFieldNo = 0' then check all fields, else only specific field.

      //DP00465.so
      //IF NOT "Active in FSA" THEN
      //  EXIT;
      //lvProjSetupRec.GET;
      //IF (NOT lvProjSetupRec."Field Service Active") AND (NOT lvProjSetupRec."4PS-Mobile Active") THEN BEGIN
      //  IF "Active in FSA" THEN
      //    //"Active in FSA" := FALSE;  //* No (error)message, just switch off //16397.o
      //    ERROR(Text11012015, FIELDCAPTION("Active in FSA"));  //16397.n
      //  EXIT;
      //END;
      //DP00465.eo
      //DP00465.sn
      Resource.SETCURRENTKEY(Type, Company, "Source No.");
      Resource.SETRANGE(Type, Resource.Type::Employee);
      Resource.SETRANGE(Company, COMPANYNAME);
      Resource.SETRANGE("Source No.", "No.");
      Resource.SETRANGE("Active in FSA", TRUE);
      IF Resource.ISEMPTY THEN
        EXIT;
      //DP00465.en


      MandatoryFields.CheckMandatoryFieldsEmployee(Rec, ICurrFieldNo);
    END;

    PROCEDURE SetInsertFromContact@3(FromContact@1000 : Boolean);
    BEGIN
      //**4PS
      InsertFromContact := FromContact;
    END;

    PROCEDURE GetExternalRentalHourRate@1100485003(iRefDate@1100485001 : Date) HourRate : Decimal;
    VAR
      lvExtRentalRateRec@1100485000 : Record 11020315;
    BEGIN
      //**4PS05.sn
      lvExtRentalRateRec.SETRANGE("Employee No.", "No.");
      lvExtRentalRateRec.SETRANGE("Starting Date", 0D, iRefDate);
      IF lvExtRentalRateRec.FINDLAST THEN
        EXIT(lvExtRentalRateRec."Cost Price (LCY)")
      ELSE
        EXIT(0);
      //**4PS05.en
    END;

    PROCEDURE RunCreatePlantLocation@1100485004(IEmplRec@1100485002 : Record 5200);
    VAR
      PlantMgtCompRec@1100525005 : Record 11020586;
      TmpPlantMgtCompRec@1100525004 : TEMPORARY Record 11020586;
      PlantMgtCompListFrm@1100525003 : Page 11124918;
      NoOfPlantComps@1100525002 : Integer;
      NoCreated@1100525001 : Integer;
      lvPlantLocCode@1100485000 : Code[20];
      lvText11012001@1100525000 : TextConst 'ENU=Do you want to create a Plant Location of Employee ''%1''?';
      lvText11012003@1100485003 : TextConst 'ENU=Plant Location ''%1'' is created in plant company ''%2''.';
      lvText11012004@1100485004 : TextConst 'ENU=Plant Location ''%1'' is created in %2 plant companies.';
    BEGIN
      //**4PS
      IF NOT CONFIRM(lvText11012001, TRUE, IEmplRec."No.") THEN
        EXIT;

      NoCreated := 0;
      PlantMgtCompRec."Plant Company" := PlantMgtCompRec.GetPlantCompany(TRUE, NoOfPlantComps, '');
      IF NoOfPlantComps = 1 THEN BEGIN
        lvPlantLocCode := CreatePlantLocation(IEmplRec, PlantMgtCompRec."Plant Company");
        IF lvPlantLocCode <> '' THEN
          NoCreated := 1;
      END ELSE BEGIN
        PlantMgtCompRec.RESET;
        PlantMgtCompListFrm.SetMultiCreate();
        PlantMgtCompListFrm.SETRECORD(PlantMgtCompRec);
        PlantMgtCompListFrm.LOOKUPMODE(TRUE);
        IF PlantMgtCompListFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          IF NOT PlantMgtCompListFrm.GetMarkedRecords(TmpPlantMgtCompRec) THEN BEGIN
            PlantMgtCompListFrm.GETRECORD(PlantMgtCompRec);
            lvPlantLocCode := CreatePlantLocation(IEmplRec, PlantMgtCompRec."Plant Company");
            IF lvPlantLocCode <> '' THEN
              NoCreated := 1;
          END ELSE BEGIN
            TmpPlantMgtCompRec.FINDSET;
            REPEAT
              lvPlantLocCode := CreatePlantLocation(IEmplRec, TmpPlantMgtCompRec."Plant Company");
              IF lvPlantLocCode <> '' THEN BEGIN
                NoCreated := NoCreated + 1;
                PlantMgtCompRec."Plant Company" := TmpPlantMgtCompRec."Plant Company";
              END;
            UNTIL TmpPlantMgtCompRec. NEXT = 0;
          END;
        END;
      END;

      IF NoCreated > 0 THEN BEGIN
        IF NoCreated = 1 THEN
          MESSAGE(lvText11012003, lvPlantLocCode, PlantMgtCompRec."Plant Company")
        ELSE
          MESSAGE(lvText11012004, lvPlantLocCode, NoCreated);
      END;
    END;

    PROCEDURE CreatePlantLocation@1100485007(IEmplRec@1100485000 : Record 5200;IPlantCompany@1100485010 : Text[30]) : Code[20];
    VAR
      lvEmplSetupRec@1100485007 : Record 5218;
      lvPlantSetupRec@1100485004 : Record 11012550;
      CompanyData@1100485006 : Record 11020674;
      lvPlantLocRec@1100485001 : Record 11012554;
      lvPlantLocRec2@1100485002 : Record 11012554;
      lvText11012003@1100485009 : TextConst 'ENU=Plant Location ''%1'' is already present in Company ''%2'' with Employee ''%3'' and Company Name ''%4''.';
      lvDimValRec@1100525000 : Record 349;
    BEGIN
      //**4PS
      //* Add employee location to 'plant company' from 'employee company', this can be another company
      //* so do not use 'VALIDATE'/'INSERT/MODIFY(TRUE)' on table Plant Location!

      WITH IEmplRec DO BEGIN
        TESTFIELD("No.");
        TESTFIELD(Status, Status::Active);

        lvEmplSetupRec.GET;
        lvEmplSetupRec.TESTFIELD("Build Plant Location Code from");

        IF NOT CompanyData.GET(COMPANYNAME) THEN  //* Current company, so not plant company
          CompanyData."Company Name" := COMPANYNAME;

        IF (CompanyData."Company No." = '') AND
           (lvEmplSetupRec."Build Plant Location Code from" = lvEmplSetupRec."Build Plant Location Code from"::CompNoEmplNo)
        THEN
          CompanyData.TESTFIELD("Company No.");

        lvPlantSetupRec.CHANGECOMPANY(IPlantCompany);
        lvPlantSetupRec.GET;

        lvPlantLocRec2.CHANGECOMPANY(IPlantCompany);

        lvPlantLocRec.CHANGECOMPANY(IPlantCompany);
        lvPlantLocRec.INIT;
        lvPlantLocRec.InitRecord;
        CASE lvEmplSetupRec."Build Plant Location Code from" OF
          lvEmplSetupRec."Build Plant Location Code from"::EmplNo:
            lvPlantLocRec.Code := "No.";
          lvEmplSetupRec."Build Plant Location Code from"::CompNoEmplNo:
            lvPlantLocRec.Code := CompanyData."Company No." + "No.";
          ELSE
            lvPlantLocRec.Code := '';
        END;
        lvPlantLocRec.TESTFIELD(Code);
        IF lvPlantLocRec2.GET(lvPlantLocRec.Code) THEN
          ERROR(lvText11012003, lvPlantLocRec.Code, IPlantCompany, lvPlantLocRec2."Employee No.", lvPlantLocRec2."Company Name");

        lvPlantLocRec."Creation Date" := TODAY;
        lvPlantLocRec.Depot :=  FALSE;
        lvPlantLocRec."Employee No." :=  "No.";
        IF IPlantCompany <> COMPANYNAME THEN BEGIN
          lvPlantLocRec."Company Name" := COMPANYNAME;
          //
          //* Only allowed to fill customer no. (mandatory with number from company table) when companyname is filled.
          CompanyData.TESTFIELD("Customer No.");
          lvPlantLocRec."Customer No." := CompanyData."Customer No.";
        END;
        lvPlantLocRec.Description :=  COPYSTR(IEmplRec."Full Name",1,MAXSTRLEN(lvPlantLocRec.Description));
        lvPlantLocRec."Search Name" := "Search Name";
        //C013440.so
        //lvPlantLocRec.Address := Address;
        //lvPlantLocRec."Address 2" := "Address 2";
        //lvPlantLocRec."Post Code" := "Post Code";
        //C013440.eo
        lvPlantLocRec.City := City;
        lvPlantLocRec."Country/Region Code" := "Country/Region Code";
        //C013440.so
        //lvPlantLocRec."Phone No." := "Phone No.";
        //lvPlantLocRec."Fax No." := "Fax No.";
        //C013440.eo
        //C013440.sn
        lvPlantLocRec."Phone No." := COPYSTR("Company Mobile Phone No." + ' / ' + "Company Phone No.", 1, MAXSTRLEN(lvPlantLocRec."Phone No."));
        lvPlantLocRec."E-Mail" := "Company E-Mail";
        //C013440.en
        lvPlantLocRec."Starting Date" := "Employment Date";
        IF "Global Dimension 1 Code" <> '' THEN BEGIN  //*24614.sn
          IF IPlantCompany = COMPANYNAME THEN
            lvPlantLocRec."Department Code" := "Global Dimension 1 Code"
          ELSE BEGIN
            lvDimValRec.CHANGECOMPANY(IPlantCompany);
            lvDimValRec.SETCURRENTKEY(Code, "Global Dimension No.");
            lvDimValRec.SETRANGE(Code, "Global Dimension 1 Code");
            lvDimValRec.SETRANGE("Global Dimension No.", 1);
            IF lvDimValRec.FINDFIRST THEN
              lvPlantLocRec."Department Code" := "Global Dimension 1 Code";
          END;
        END;                                           //*24614.en
        lvPlantLocRec.NormalizePostCodeHouseNo;//DP00195
        lvPlantLocRec.INSERT;

        EXIT(lvPlantLocRec.Code);
      END;
    END;

    PROCEDURE DetermineAccountHours@1210190005();
    VAR
      Employee@1210190000 : Record 5200;
    BEGIN
      //**4PS
      SkipAccHoursDefaultOnInsert := TRUE;
      IF Status IN [Status::Inactive, Status::Terminated] THEN
        "Account Hours" := "Account Hours"::"Not allowed"
      ELSE BEGIN
        IF ("Norm Hours" <> 0) OR ("Norm Days" <> 0) THEN
          "Account Hours" := "Account Hours"::"Required according to Norm"
        ELSE BEGIN
          Employee := Rec;
          IF NOT Employee.FIND THEN
            SkipAccHoursDefaultOnInsert := FALSE;
        END;
      END;
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Global Dimension 1 Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //Changed because GD1 should not be validated in case of Mercash Active

      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::Employee);
      IF Dimension1Code <> '' THEN
        "Global Dimension 1 Code" := Dimension1Code;

      //Changed because GD1 should not be validated in case of Mercash Active

      IF "Global Dimension 1 Code" <> '' THEN BEGIN
        SkipModify := TRUE;
        VALIDATE("Global Dimension 1 Code");
        SkipModify := FALSE;
      END;
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Filter"));
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(5200) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 5200');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::Employee, "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    PROCEDURE EditDocuments@1100528702(ContactNo@1210190004 : Code[20];ContactPersonNo@1210190005 : Code[20];SendMail@1210190002 : Boolean;Recipient@1100528700 : Text[120]);
    VAR
      DocumentMailing@1210190000 : Codeunit 11012278;
      RecRef@1100525000 : RecordRef;
      DocumentLinkRIDs@1100525001 : ARRAY [5] OF RecordID;
    BEGIN
      //**4PS
      RecRef.GETTABLE(Rec);
      DocumentLinkRIDs[1] := RecRef.RECORDID;

      DocumentMailing.EditDocuments('', DocumentLinkRIDs, '', ContactNo, ContactPersonNo, SendMail, Recipient);
    END;

    LOCAL PROCEDURE NoChangedAsResultOfFiltering@1100528700() : Boolean;
    BEGIN
      //**4PS
      IF ("No." <> xRec."No.") AND (GETFILTER("No.") = "No.") THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE HandleRenameInFieldService@1100409000();
    BEGIN
      //DP00465.o
      //IF "Active in FSA" THEN BEGIN
      //  IF EmployeeInFieldService.GET(COMPANYNAME, xRec."No.") THEN BEGIN
      //    EmployeeInFieldService.DELETE(TRUE);
      //  END;
      //  EmployeeInFieldService."Employee No." := "No.";
      //  EmployeeInFieldService."Company Name" := COMPANYNAME;
      //  IF EmployeeInFieldService.INSERT(TRUE) THEN;
      //END;
    END;

    PROCEDURE GetResourceNo@1100525002() : Code[20];
    BEGIN
      //**4PS
      EXIT(GetResourceNoWithCompany(COMPANYNAME));
    END;

    PROCEDURE GetResourceNoWithCompany@1100528600(ICompanyName@1100528601 : Text[30]) : Code[20];
    VAR
      ResourceWOP@1100528600 : Record 11229278;
    BEGIN
      //**4PS
      IF "No." <> '' THEN BEGIN
        ResourceWOP.SETCURRENTKEY(Type, Company, "Source No.");
        ResourceWOP.SETRANGE(Type, ResourceWOP.Type::Employee);
        ResourceWOP.SETRANGE(Company, ICompanyName);
        ResourceWOP.SETRANGE("Source No.", "No.");
        IF ResourceWOP.FINDFIRST THEN
          EXIT(ResourceWOP."No.");
      END;
      EXIT('');
    END;

    PROCEDURE ShowResourceEmployee@1100525003();
    VAR
      Resource@1100525001 : Record 11229278;
    BEGIN
      //**4PS
      Resource."No." := GetResourceNo();
      IF Resource."No." <> '' THEN
        Resource.GET(Resource."No.");
      Resource.SETRANGE(Company, COMPANYNAME);
      PAGE.RUNMODAL(PAGE::"Employee Resource List", Resource);
    END;

    PROCEDURE UpdateResource@1100525001(UpdateMode@1100525002 : ',Modify,Delete,Rename';xEmpl@1100525003 : Record 5200;Empl@1100525004 : Record 5200);
    VAR
      WorkOrderPlanningSetup@1100525000 : Record 11229277;
      ResourceMgt@1100525001 : Codeunit 11229277;
    BEGIN
      //**4PS
      IF NOT WorkOrderPlanningSetup.ISEMPTY THEN
        ResourceMgt.UpdateResourceEmployee(UpdateMode, xEmpl, Empl);
    END;

    BEGIN
    END.
  }
}

