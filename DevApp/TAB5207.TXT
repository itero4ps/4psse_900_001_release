OBJECT Table 5207 Employee Absence
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW17.00,4PS9.00;
  }
  PROPERTIES
  {
    DataCaptionFields=Employee No.;
    OnInsert=BEGIN
               EmployeeAbsence.SETCURRENTKEY("Entry No.");
               IF EmployeeAbsence.FINDLAST THEN
                 "Entry No." := EmployeeAbsence."Entry No." + 1
               ELSE
                 "Entry No." := 1;
               TestForPlannedWorkOrders;
             END;

    OnModify=BEGIN
               //**4PS.sn
               TESTFIELD("Calendar Entry", FALSE);
               TestForPlannedWorkOrders;
               //**4PS.en
             END;

    CaptionML=ENU=Employee Absence;
    LookupPageID=Page5211;
    DrillDownPageID=Page5211;
  }
  FIELDS
  {
    { 1   ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                Employee.GET("Employee No.");
                                                              END;

                                                   CaptionML=ENU=Employee No.;
                                                   NotBlank=Yes }
    { 2   ;   ;Entry No.           ;Integer       ;CaptionML=ENU=Entry No. }
    { 3   ;   ;From Date           ;Date          ;OnValidate=BEGIN
                                                                IF xRec."From Date" = "To Date" THEN "To Date" := "From Date";  //**4PS.n
                                                                CheckToDateExceedsFromDate;
                                                              END;

                                                   CaptionML=ENU=From Date }
    { 4   ;   ;To Date             ;Date          ;OnValidate=BEGIN
                                                                CheckToDateExceedsFromDate;
                                                              END;

                                                   CaptionML=ENU=To Date }
    { 5   ;   ;Cause of Absence Code;Code10       ;TableRelation="Cause of Absence";
                                                   OnValidate=BEGIN
                                                                CauseOfAbsence.GET("Cause of Absence Code");
                                                                CauseOfAbsence.TESTFIELD("Unit of Measure Code"); //**4PS.n
                                                                Description := CauseOfAbsence.Description;
                                                                VALIDATE("Unit of Measure Code",CauseOfAbsence."Unit of Measure Code");
                                                                VALIDATE("Cost Code", CauseOfAbsence."Cost Code"); //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Cause of Absence Code }
    { 6   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 7   ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                "Quantity (Base)" := CalcBaseQty(Quantity);
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 8   ;   ;Unit of Measure Code;Code10        ;TableRelation="Human Resource Unit of Measure";
                                                   OnValidate=BEGIN
                                                                HumanResUnitOfMeasure.GET("Unit of Measure Code");
                                                                "Qty. per Unit of Measure" := HumanResUnitOfMeasure."Qty. per Unit of Measure";
                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 11  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Human Resource Comment Line" WHERE (Table Name=CONST(Employee Absence),
                                                                                                          Table Line No.=FIELD(Entry No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 12  ;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                              END;

                                                   CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 13  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 11012001;;From Time          ;Time          ;OnValidate=BEGIN
                                                                CheckUntilTimeExceedsFromTime(); //mg, 23-08-10, M22143
                                                              END;

                                                   CaptionML=ENU=From Time }
    { 11012002;;Until Time         ;Time          ;OnValidate=BEGIN
                                                                CheckUntilTimeExceedsFromTime(); //mg, 23-08-10, M22143
                                                              END;

                                                   CaptionML=ENU=Until Time }
    { 11012003;;Calendar Entry     ;Boolean       ;CaptionML=ENU=Calendar Entry }
    { 11012004;;Last Name          ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Last Name" WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=ENU=Last Name;
                                                   Editable=No }
    { 11012010;;Global Dimension 1 Code;Code20    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Global Dimension 1 Code" WHERE (No.=FIELD(Employee No.)));
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   Editable=No;
                                                   CaptionClass='1,1,1' }
    { 11012020;;Cost Code          ;Code10        ;TableRelation="Cost Code";
                                                   CaptionML=ENU=Cost Code }
    { 11012025;;Hour/Day Code      ;Code20        ;CaptionML=ENU=Hour/Day Code;
                                                   Editable=No }
    { 11012030;;Employee Contract No.;Code20      ;CaptionML=ENU=Employee Contract No.;
                                                   Editable=No }
    { 11012040;;Service Contract No.;Code20       ;TableRelation=Service-Contract;
                                                   CaptionML=ENU=Service Contract No.;
                                                   Editable=No }
    { 11012050;;Contract Cluster   ;Code10        ;TableRelation="Service Cluster".Code;
                                                   CaptionML=ENU=Contract Cluster;
                                                   Editable=No }
    { 11012055;;Contract Cluster Description;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Cluster".Description WHERE (Service Contract No.=FIELD(Service Contract No.),
                                                                                                           Code=FIELD(Contract Cluster)));
                                                   CaptionML=ENU=Contract Cluster Description;
                                                   Editable=No }
    { 11012060;;Contract Cluster Seqn.;Integer    ;TableRelation="Service Cluster Seq."."Seq. No." WHERE (Service Contract No.=FIELD(Service Contract No.),
                                                                                                          Cluster Code=FIELD(Contract Cluster));
                                                   CaptionML=ENU=Contract Cluster Seqn.;
                                                   Editable=No }
    { 11012070;;Plannable          ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Cause of Absence".Plannable WHERE (Code=FIELD(Cause of Absence Code)));
                                                   CaptionML=ENU=Plannable;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Employee No.,From Date                  ;SumIndexFields=Quantity,Quantity (Base) }
    {    ;Employee No.,Cause of Absence Code,From Date;
                                                   SumIndexFields=Quantity,Quantity (Base) }
    {    ;Cause of Absence Code,From Date         ;SumIndexFields=Quantity,Quantity (Base) }
    {    ;From Date,To Date                        }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CauseOfAbsence@1000 : Record 5206;
      Employee@1001 : Record 5200;
      EmployeeAbsence@1002 : Record 5207;
      HumanResUnitOfMeasure@1003 : Record 5220;
      DateRec@1210190009 : Record 2000000007;
      Text11012001@1210190004 : TextConst 'ENU=Both Start Date and Finishing Date should be filled';
      Text11012003@1210190006 : TextConst 'ENU=Employee %1 already planned for Service Order %2 on %3 between %4 and %5';
      Text11012004@1210190007 : TextConst 'ENU=Employee %1 already planned for Absence (%2) on %3 between %4 and %5';
      LineNoInt@1210190008 : Integer;
      Text11012005@1210190011 : TextConst 'ENU=Employee %1 already planned for Project %2 on %3 between %4 and %5';
      Text11012006@1210190012 : TextConst 'ENU=Available Hours %1 according to Time Table Employee is not enough for already planned Hours %2 and Absence %3';
      Text11012007@1100525000 : TextConst 'ENU=%1 must exceed %2';
      Text11012008@1100525001 : TextConst 'ENU=%1 exceeds %2';
      DPA_Management@1100000999 : Codeunit 11012783;
      Text11012009@1100528600 : TextConst 'ENU=Employee %1 already planned for Work Order %2 between %3 %4 and %5 %6';

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE CheckToDateExceedsFromDate@1100525001();
    BEGIN
      //mg.sn 23-08-10, M22143
      CASE TRUE OF
        "From Date" = 0D: EXIT;
        "To Date" = 0D: EXIT;
        "From Date" <= "To Date": EXIT;
      END;
      ERROR(STRSUBSTNO(Text11012008, FIELDCAPTION("From Date"), FIELDCAPTION("To Date")));
      //mg.en 23-08-10, M22143
    END;

    LOCAL PROCEDURE CheckUntilTimeExceedsFromTime@1100525000();
    BEGIN
      //mg.sn 23-08-10, M22143
      CASE TRUE OF
        "From Date" = 0D: EXIT;
        "To Date" = 0D: EXIT;
        "From Time" = 0T: EXIT;
        "Until Time" = 0T: EXIT;
        "From Time" < "Until Time": EXIT;
        "From Date" < "To Date": EXIT;  //Call C005916 n
      END;
      ERROR(STRSUBSTNO(Text11012007, FIELDCAPTION("Until Time"), FIELDCAPTION("From Time")));
      //mg.en 23-08-10, M22143
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(5207) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 5207');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Employee Absence", "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    PROCEDURE ResourceSchedule@1100525002(EmplNo@1100525000 : Code[20]) : Boolean;
    VAR
      Resource@1100525001 : Record 11229278;
    BEGIN
      //DP00465
      WITH Resource DO BEGIN
        SETCURRENTKEY(Type, Company, "Source No.");
        SETRANGE(Type, Type::Employee);
        SETRANGE(Company, COMPANYNAME);
        SETRANGE("Source No.", EmplNo);
        IF FINDFIRST THEN
          EXIT(Schedule IN [Schedule::ServiceOrder, Schedule::Project, Schedule::Both]);
      END;
    END;

    PROCEDURE TestForPlannedWorkOrders@1100528601();
    VAR
      WorkOrder@1100528602 : Record 11229279;
      Employee@1100528601 : Record 5200;
      ResourceNo@1100528600 : Code[20];
      FromDateTime@1100528603 : DateTime;
      UntilTime@1100528606 : Time;
      UntilDateTime@1100528604 : DateTime;
    BEGIN
      //**4PS
      CALCFIELDS(Plannable);
      IF Plannable THEN
        EXIT;
      IF NOT Employee.GET("Employee No.") THEN
        EXIT;
      ResourceNo := Employee.GetResourceNo;
      IF ResourceNo = '' THEN
        EXIT;
      WorkOrder.SETCURRENTKEY("Resource No.");
      WorkOrder.SETRANGE("Resource No.", ResourceNo);
      FromDateTime := CREATEDATETIME("From Date", "From Time");
      UntilTime := "Until Time";
      IF UntilTime = 0T THEN
        UntilTime := 235959.999T;
      UntilDateTime := CREATEDATETIME("To Date", UntilTime);
      WorkOrder.SETFILTER("Starting Date/Time", '<>%1&<%2', 0DT, UntilDateTime);
      WorkOrder.SETFILTER("Ending Date/Time", '>=%1', FromDateTime);
      IF WorkOrder.FINDFIRST THEN
        ERROR(Text11012009, "Employee No.", WorkOrder."No.", DT2DATE(WorkOrder."Starting Date/Time"), DT2TIME(WorkOrder."Starting Date/Time"), DT2DATE(WorkOrder."Ending Date/Time"), DT2TIME(WorkOrder."Ending Date/Time"));
    END;

    BEGIN
    END.
  }
}

