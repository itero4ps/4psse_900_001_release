OBJECT Table 6085573 Document Capture Setup
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW17.00.00.4.04,4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Document Capture Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 2   ;   ;Document Nos.       ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Document Nos. }
    { 3   ;   ;Template Nos.       ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Template Nos. }
    { 4   ;   ;Scanned File Path for OCR;Text250  ;CaptionML=ENU=Scanned File Path for OCR }
    { 6   ;   ;File Path for OCR-proc. files;Text250;
                                                   CaptionML=ENU=File Path for OCR-processed files }
    { 7   ;   ;PDF File Path for OCR;Text250      ;CaptionML=ENU=PDF File Path for OCR }
    { 9   ;   ;Fill-out LCY        ;Boolean       ;CaptionML=ENU=Fill-out LCY }
    { 11  ;   ;PDF File Path       ;Text250       ;CaptionML=ENU=PDF File Path }
    { 13  ;   ;TIFF File Path      ;Text250       ;CaptionML=ENU=TIFF File Path }
    { 14  ;   ;Disk File Directory Structure;Option;
                                                   OnValidate=BEGIN
                                                                IF "Disk File Directory Structure" <> xRec."Disk File Directory Structure" THEN
                                                                  MoveFiles(FIELDCAPTION("Disk File Directory Structure"));
                                                              END;

                                                   CaptionML=ENU=Disk File Directory Structure;
                                                   OptionCaptionML=ENU=One Directory,Year\Month,Year\Month\Day;
                                                   OptionString=One Directory,Year\Month,Year\Month\Day }
    { 15  ;   ;Miscellaneous File Path;Text250    ;CaptionML=ENU=Miscellaneous File Path }
    { 16  ;   ;E-mail File Path    ;Text250       ;CaptionML=ENU=E-mail File Path }
    { 17  ;   ;Export Local OCR Config.;Boolean   ;InitValue=Yes;
                                                   CaptionML=ENU=Export Local OCR Configuration }
    { 18  ;   ;Export Remote OCR Config.;Boolean  ;CaptionML=ENU=Export Remote OCR Configuration }
    { 19  ;   ;Remote OCR Config. Path;Text250    ;CaptionML=ENU=Remote OCR Config. Path }
    { 20  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 21  ;   ;Document Storage    ;Option        ;CaptionML=ENU=Document Storage;
                                                   OptionCaptionML=ENU=Local Servers,Cloud Servers;
                                                   OptionString=Local Servers,Cloud Servers }
    { 30  ;   ;SMTP Require SSL/TLS;Boolean       ;CaptionML=ENU=SMTP require SSL/TLS }
    { 31  ;   ;Sender E-mail       ;Text80        ;CaptionML=ENU=Sender E-mail }
    { 32  ;   ;Sender Name         ;Text50        ;CaptionML=ENU=Sender Name }
    { 33  ;   ;Company Code        ;Code10        ;CaptionML=ENU=Company Code;
                                                   CharAllowed=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ+- }
    { 64  ;   ;Delimiters          ;Text250       ;CaptionML=ENU=Delimiters }
    { 65  ;   ;Approval Administrator Role ID;Code20;
                                                   TableRelation="Permission Set";
                                                   CaptionML=ENU=Approval Administrator Role ID }
    { 68  ;   ;Data Version        ;Integer       ;CaptionML=ENU=Data Version }
    { 81  ;   ;Web: Dimension 1 Code (Header);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 1 Code (Header) }
    { 82  ;   ;Web: Dimension 2 Code (Header);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 2 Code (Header) }
    { 83  ;   ;Web: Dimension 3 Code (Header);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 3 Code (Header) }
    { 84  ;   ;Web: Dimension 4 Code (Header);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 4 Code (Header) }
    { 85  ;   ;Web: Dimension 5 Code (Header);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 5 Code (Header) }
    { 86  ;   ;Web: Dimension 6 Code (Header);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 6 Code (Header) }
    { 87  ;   ;Web: Dimension 7 Code (Header);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 7 Code (Header) }
    { 88  ;   ;Web: Dimension 8 Code (Header);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 8 Code (Header) }
    { 89  ;   ;Web: Dimension 1 Code (Lines);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 1 Code (Lines) }
    { 90  ;   ;Web: Dimension 2 Code (Lines);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 2 Code (Lines) }
    { 91  ;   ;Web: Dimension 3 Code (Lines);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 3 Code (Lines) }
    { 92  ;   ;Web: Dimension 4 Code (Lines);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 4 Code (Lines) }
    { 93  ;   ;Web: Dimension 5 Code (Lines);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 5 Code (Lines) }
    { 94  ;   ;Web: Dimension 6 Code (Lines);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 6 Code (Lines) }
    { 95  ;   ;Web: Dimension 7 Code (Lines);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 7 Code (Lines) }
    { 96  ;   ;Web: Dimension 8 Code (Lines);Code20;
                                                   TableRelation=Dimension;
                                                   CaptionML=ENU=Web Dimension 8 Code (Lines) }
    { 97  ;   ;Web: Show Job No.   ;Boolean       ;CaptionML=ENU=Show Job No. }
    { 98  ;   ;Web: Show Job Task No.;Boolean     ;CaptionML=ENU=Show Job Task No. }
    { 99  ;   ;Web: Show VAT Prod. Group;Boolean  ;CaptionML=ENU=Show VAT Prod. Group }
    { 100 ;   ;Purch: Use TIFF-Form for Appr.;Boolean;
                                                   CaptionML=ENU=Use TIFF-Form for Approval }
    { 101 ;   ;Purch: No. of Open PIs;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Invoice),
                                                                                              Status=CONST(Open)));
                                                   CaptionML=ENU=No. of Open Invoices;
                                                   Editable=No }
    { 102 ;   ;Purch: No. of Released PIs;Integer ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Invoice),
                                                                                              Status=CONST(Released)));
                                                   CaptionML=ENU=No. of Released Invoices;
                                                   Editable=No }
    { 103 ;   ;Purch: No. of PIs for Approval;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Invoice),
                                                                                              Status=CONST(Pending Approval)));
                                                   CaptionML=ENU=No. of Invoices for Approval;
                                                   Editable=No }
    { 104 ;   ;Purch: No. of Overdue PIs;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Invoice),
                                                                                              Due Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=No. of Overdue Invoices;
                                                   Editable=No }
    { 110 ;   ;Purch: No. of Open PCs;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Credit Memo),
                                                                                              Status=CONST(Open)));
                                                   CaptionML=ENU=No. of Open Credit Memoes;
                                                   Editable=No }
    { 111 ;   ;Purch: No. of Released PCs;Integer ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Credit Memo),
                                                                                              Status=CONST(Released)));
                                                   CaptionML=ENU=No. of Released PCM;
                                                   Editable=No }
    { 112 ;   ;Purch: No. of PCs for Approval;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Credit Memo),
                                                                                              Status=CONST(Pending Approval)));
                                                   CaptionML=ENU=No. of Credit Memoes for Approval;
                                                   Editable=No }
    { 119 ;   ;Purch: No. of Overdue Ap. Ent.;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Approval Entry" WHERE (Table ID=CONST(38),
                                                                                             Document Type=FILTER(Invoice|Credit Memo),
                                                                                             Status=FILTER(Created|Open),
                                                                                             Due Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=No. of Overdue Approval Entries;
                                                   Editable=No }
    { 120 ;   ;Purch: Last Status E-mail Sent;Date;FieldClass=FlowField;
                                                   CalcFormula=Max("Event Register"."Creation Date" WHERE (Area=CONST(Purch. Approval Status E-mail)));
                                                   CaptionML=ENU=Last Status E-mail Sent;
                                                   Editable=No }
    { 122 ;   ;Purch: Approval Template;BLOB      ;CaptionML=ENU=Approval Template;
                                                   SubType=User-Defined }
    { 123 ;   ;Purch: Approval E-mail Subject;Text80;
                                                   CaptionML=ENU=Approval E-mail Subject }
    { 124 ;   ;Purch: Req. Full Amt. Approval;Boolean;
                                                   CaptionML=ENU=Always Req. Full Amt. Approval }
    { 125 ;   ;Purch: Archive Doc. on Approv.;Boolean;
                                                   CaptionML=ENU=Archive Document on Approval }
    { 130 ;   ;Purch. Allocation Nos.;Code10      ;TableRelation="No. Series";
                                                   CaptionML=ENU=Purch. Allocation Nos. }
    { 131 ;   ;Purch. Alloc. G/L Account No.;Code20;
                                                   TableRelation="G/L Account";
                                                   CaptionML=ENU=Purch. Alloc. G/L Account No. }
    { 132 ;   ;Auto. Post Purch. Allocation;Boolean;
                                                   CaptionML=ENU=Auto. Post Purch. Allocation }
    { 133 ;   ;Purch. Alloc. G/L Account Type;Option;
                                                   CaptionML=ENU=Purch. Alloc. G/L Account Type;
                                                   OptionCaptionML=ENU=Use Posting Setup,Use Source Account;
                                                   OptionString=Use Posting Setup,Use Source Account }
    { 134 ;   ;Purch. Alloc. Source Code;Code10   ;TableRelation="Source Code";
                                                   CaptionML=ENU=Purch. Alloc. Source Code }
    { 135 ;   ;Purch. Alloc. Amounts to Use;Option;CaptionML=ENU=Purch. Alloc. Amounts to Use;
                                                   OptionCaptionML=ENU=Use Lines or Imported Amounts,Always use Imported Amounts;
                                                   OptionString=Use Lines or Imported Amounts,Always use Imported Amounts }
    { 136 ;   ;Purch.: Recreate Appvl. Hiera.;Boolean;
                                                   CaptionML=ENU=Recreate Approval Hierarchy on Forward }
    { 137 ;   ;Check Dimensions on Approval;Boolean;
                                                   CaptionML=ENU=Check Dimensions on Approval }
    { 140 ;   ;Web: Show Description 2;Boolean    ;CaptionML=ENU=Show Description 2 }
    { 141 ;   ;Web: Show Line Discount Pct.;Boolean;
                                                   CaptionML=ENU=Show Line Discount Pct. }
    { 142 ;   ;Web: Show Prod. Posting Group;Boolean;
                                                   CaptionML=ENU=Show Prod. Posting Group }
    { 143 ;   ;Maintain User Document Search;Boolean;
                                                   OnValidate=VAR
                                                                PurchInvHeader@161024012 : Record 122;
                                                                PurchCrMemoHeader@161024014 : Record 124;
                                                                WebSearchMgnt@161024013 : Codeunit 6085748;
                                                              BEGIN
                                                                IF "Maintain User Document Search" THEN BEGIN
                                                                  IF PurchInvHeader.FINDSET THEN
                                                                    REPEAT
                                                                      WebSearchMgnt.UpdateWebSearchFromInvoice(PurchInvHeader);
                                                                    UNTIL PurchInvHeader.NEXT = 0;

                                                                  IF PurchCrMemoHeader.FINDSET THEN
                                                                    REPEAT
                                                                      WebSearchMgnt.UpdateWebSearchFromCrMemo(PurchCrMemoHeader);
                                                                    UNTIL PurchCrMemoHeader.NEXT = 0;
                                                                END ELSE
                                                                  TESTFIELD("Web: Historical Documents","Web: Historical Documents"::"Only Posted Documents");
                                                              END;

                                                   CaptionML=ENU=Maintain User Specific Doc. Search }
    { 144 ;   ;Web: Show Posting Account Name;Boolean;
                                                   CaptionML=ENU=Show Posting Account Name }
    { 145 ;   ;Web: Dim. & Job Field Place.;Option;CaptionML=ENU=Dimension && Job Fields Placement;
                                                   OptionCaptionML=ENU=Before Quantity,After Amount;
                                                   OptionString=Before Quantity,After Amount }
    { 146 ;   ;Web: Show Unit of Measure;Boolean  ;CaptionML=ENU=Show Unit of Measure }
    { 147 ;   ;Web: Show Type      ;Boolean       ;CaptionML=ENU=Show Type }
    { 148 ;   ;Web: Show Amounts in LCY;Option    ;CaptionML=ENU=Show Amounts in LCY;
                                                   OptionCaptionML=ENU=Never,Always,If different from purchase currency;
                                                   OptionString=Never,Always,If different from purchase currency }
    { 149 ;   ;Web: Historical Documents;Option   ;OnValidate=VAR
                                                                PurchHeader@161024013 : Record 38;
                                                                WebDocSearch@161024014 : Record 6086005;
                                                                WebSearchMgnt@161024012 : Codeunit 6085748;
                                                              BEGIN
                                                                TESTFIELD("Maintain User Document Search");
                                                                MODIFY;

                                                                IF "Web: Historical Documents" = "Web: Historical Documents"::"Only Posted Documents" THEN BEGIN
                                                                  WebDocSearch.SETFILTER(Type,'%1|%2',WebDocSearch.Type::"Purchase Invoice",WebDocSearch.Type::"Purchase Credit Memo");
                                                                  WebDocSearch.DELETEALL(TRUE);
                                                                END ELSE BEGIN
                                                                  PurchHeader.SETFILTER("Document Type",'%1|%2',PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo");
                                                                  IF PurchHeader.FINDSET THEN
                                                                    REPEAT
                                                                      WebSearchMgnt.UpdateWebSearchFromPurchHeader(PurchHeader,FALSE);
                                                                    UNTIL PurchHeader.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Show in Historical Documents;
                                                   OptionCaptionML=ENU=Only Posted Documents,Posted and Un-posted Documents;
                                                   OptionString=Only Posted Documents,Posted and Un-posted Documents }
    { 150 ;   ;Error E-mail        ;Text80        ;CaptionML=ENU=Error E-mail }
    { 154 ;   ;Dynamics NAV Server Name;Text50    ;OnValidate=VAR
                                                                Company@161024012 : Record 2000000006;
                                                                DCSetup@161024013 : Record 6085573;
                                                              BEGIN
                                                                IF Company.FINDSET THEN
                                                                  REPEAT
                                                                    IF Company.Name <> COMPANYNAME THEN BEGIN
                                                                      DCSetup.CHANGECOMPANY(Company.Name);
                                                                      IF DCSetup.GET THEN BEGIN
                                                                        DCSetup."Dynamics NAV Server Name" := "Dynamics NAV Server Name";
                                                                        DCSetup.MODIFY;
                                                                      END;
                                                                    END;
                                                                  UNTIL Company.NEXT = 0;
                                                              END;

                                                   CaptionML=ENU=Dynamics NAV Server Name }
    { 155 ;   ;Dynamics NAV Server Instance;Text50;OnValidate=VAR
                                                                Company@161024013 : Record 2000000006;
                                                                DCSetup@161024012 : Record 6085573;
                                                              BEGIN
                                                                IF Company.FINDSET THEN
                                                                  REPEAT
                                                                    IF Company.Name <> COMPANYNAME THEN BEGIN
                                                                      DCSetup.CHANGECOMPANY(Company.Name);
                                                                      IF DCSetup.GET THEN BEGIN
                                                                        DCSetup."Dynamics NAV Server Instance" := "Dynamics NAV Server Instance";
                                                                        DCSetup.MODIFY;
                                                                      END;
                                                                    END;
                                                                  UNTIL Company.NEXT = 0;
                                                              END;

                                                   CaptionML=ENU=Dynamics NAV Server Instance }
    { 156 ;   ;Dynamics NAV Server Port;Integer   ;OnValidate=VAR
                                                                Company@161024013 : Record 2000000006;
                                                                DCSetup@161024012 : Record 6085573;
                                                              BEGIN
                                                                IF Company.FINDSET THEN
                                                                  REPEAT
                                                                    IF Company.Name <> COMPANYNAME THEN BEGIN
                                                                      DCSetup.CHANGECOMPANY(Company.Name);
                                                                      IF DCSetup.GET THEN BEGIN
                                                                        DCSetup."Dynamics NAV Server Port" := "Dynamics NAV Server Port";
                                                                        DCSetup.MODIFY;
                                                                      END;
                                                                    END;
                                                                  UNTIL Company.NEXT = 0;
                                                              END;

                                                   CaptionML=ENU=Dynamics NAV Server Port }
    { 157 ;   ;Purch: Approval NAV Client;Option  ;OnValidate=BEGIN
                                                                IF "Purch: Approval NAV Client" = "Purch: Approval NAV Client"::RoleTailored THEN BEGIN
                                                                  TESTFIELD("Dynamics NAV Server Name");
                                                                  TESTFIELD("Dynamics NAV Server Port");
                                                                  TESTFIELD("Dynamics NAV Server Instance");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Approval NAV Client;
                                                   OptionCaptionML=ENU=Classic,RoleTailored;
                                                   OptionString=Classic,RoleTailored }
    { 158 ;   ;Barcode Nos.        ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Barcode Nos. }
    { 159 ;   ;Web: Show FA Posting Type;Boolean  ;CaptionML=ENU=Show FA Posting Type }
    { 160 ;   ;Security Certificate;BLOB          ;CaptionML=ENU=Security Certificate }
    { 170 ;   ;Codeunit ID: Record ID Lookup;Integer;
                                                   TableRelation=Object.ID WHERE (Type=CONST(Codeunit));
                                                   CaptionML=ENU=Codeunit ID: Record ID Lookup;
                                                   BlankZero=Yes }
    { 171 ;   ;Company Code in Archive;Boolean    ;CaptionML=ENU=Include Company Code in Archive paths }
    { 172 ;   ;Use Cloud OCR       ;Boolean       ;OnValidate=VAR
                                                                COMgt@1160040000 : Codeunit 6086500;
                                                                CODC@1160040001 : Codeunit 6085617;
                                                              BEGIN
                                                                IF "Use Cloud OCR" THEN BEGIN
                                                                  COMgt.IsActive(TRUE);
                                                                  CODC.IsCompanyActive(TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Use Cloud OCR }
    { 173 ;   ;Cloud OCR Cache Timeout;Integer    ;CaptionML=ENU=Cloud OCR Cache Timeout }
    { 11012001;;Purch: Automatic Post;Boolean      }
    { 11012002;;Skip Purchaser at Registering;Boolean;
                                                   CaptionML=ENU=Skip purchaser at registering document }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text002@161024013 : TextConst 'ENU=%1 must be unique.\\%1 ''%2'' has also been entered in company ''%3''.';
      Text003@161024014 : TextConst 'ENU=Documents have already been imported. When you change %1 the system will automatically move files to %2.\\It is important that you take a backup of the existing directory structure and files before the system moves the files.\\Did you do this and do you want to continue changing %1 from ''%3'' to ''%4''?';
      Text004@161024015 : TextConst 'ENU=Moving files\#1######################';
      Text005@161024016 : TextConst 'ENU=The value in %1 must be the same in all companies that are using Document Capture Web Approval.\\Do you want to update the value of this field in all other companies?';
      Text006@161024017 : TextConst 'ENU=Unable to connect to the Document Capture Web Site. Please make sure that you are running the latest version of the Document Capture Web Site.';
      Text008@1160040001 : TextConst 'ENU=Do you want to create and assign %1 for all Document Categories?';
      Text009@1160040002 : TextConst 'ENU=Do you want to export all document categories to Cloud OCR?';
      HideValidation@1160040003 : Boolean;

    PROCEDURE DrillDownPurchHeader@161024012(Type@161024012 : Integer;Status@161024013 : Integer);
    VAR
      PurchHeader@161024014 : Record 38;
    BEGIN
      PurchHeader.RESET;
      PurchHeader.SETRANGE("Document Type",Type);
      PurchHeader.SETRANGE(Status,Status);
      PAGE.RUN(0,PurchHeader);
    END;

    PROCEDURE DrillDownOverdueApprEntries@161024013();
    VAR
      PurchHeader@161024013 : Record 38;
      ApprovalEntry@161024012 : Record 454;
    BEGIN
      ApprovalEntry.FILTERGROUP(2);
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETFILTER("Document Type",'%1|%2',ApprovalEntry."Document Type"::Invoice,
        ApprovalEntry."Document Type"::"Credit Memo");
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
      ApprovalEntry.SETFILTER("Due Date",GETFILTER("Date Filter"));
      ApprovalEntry.FILTERGROUP(0);
      PAGE.RUN(PAGE::"Purch. Approval Req. Entries",ApprovalEntry);
    END;

    PROCEDURE DrillDownOverduePI@161024015();
    VAR
      PurchHeader@161024012 : Record 38;
    BEGIN
      PurchHeader.RESET;
      PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::Invoice);
      PurchHeader.SETFILTER("Due Date",GETFILTER("Date Filter"));
      PAGE.RUN(0,PurchHeader);
    END;

    LOCAL PROCEDURE MoveFiles@161024016(CaptionFieldChanged@1160040000 : Text[100]);
    VAR
      Document@161024012 : Record 6085590;
      FileSystem@161024015 : Codeunit 6085584;
      Window@161024013 : Dialog;
      NewSubDir@1160040001 : Text[1024];
      FromSubDir@161024014 : Text[1024];
      ToSubDir@161024018 : Text[1024];
      SourcePath@161024016 : Text[1024];
      DestPath@161024017 : Text[1024];
    BEGIN
      IF NOT Document.FINDSET THEN
        EXIT;

      IF "Company Code in Archive" AND ("Company Code" <> '') THEN
        NewSubDir := "Company Code" + '\';

      NewSubDir := NewSubDir + FORMAT("Disk File Directory Structure");
      FromSubDir := GetSubDir(xRec."Disk File Directory Structure",Document,xRec."Company Code in Archive",xRec."Company Code");
      ToSubDir := GetSubDir("Disk File Directory Structure",Document,"Company Code in Archive","Company Code");

      IF NOT CONFIRM(Text003,FALSE,CaptionFieldChanged,NewSubDir,xRec."Disk File Directory Structure",Rec."Disk File Directory Structure") THEN
        ERROR('');

      Window.OPEN(Text004);

      REPEAT
        Window.UPDATE(1,Document."No.");

        FromSubDir := GetSubDir(xRec."Disk File Directory Structure",Document,xRec."Company Code in Archive",xRec."Company Code");
        ToSubDir := GetSubDir("Disk File Directory Structure",Document,"Company Code in Archive","Company Code");

        SourcePath := "TIFF File Path" + '\' + FromSubDir;
        DestPath := "TIFF File Path" + '\' + ToSubDir;

        IF NOT FileSystem.DirectoryExists(DestPath) THEN
          FileSystem.CreateDirectory(DestPath);

        IF FILE.EXISTS(SourcePath + '\' + Document."No." + '.TIFF') THEN
          FILE.RENAME(SourcePath + '\' + Document."No." + '.TIFF',DestPath + '\' + Document."No." + '.TIFF');

        SourcePath := "PDF File Path" + '\' + FromSubDir;
        DestPath := "PDF File Path" + '\' + ToSubDir;

        IF NOT FileSystem.DirectoryExists(DestPath) THEN
          FileSystem.CreateDirectory(DestPath);

        IF FILE.EXISTS(SourcePath + '\' + Document."No." + '.PDF') THEN
          FILE.RENAME(SourcePath + '\' + Document."No." + '.PDF',DestPath + '\' + Document."No." + '.PDF');

        SourcePath := "Miscellaneous File Path" + '\' + FromSubDir;
        DestPath := "Miscellaneous File Path" + '\' + ToSubDir;

        IF NOT FileSystem.DirectoryExists(DestPath) THEN
          FileSystem.CreateDirectory(DestPath);

        IF FILE.EXISTS(SourcePath + '\' + Document."No." + '.' + Document."File Extension") THEN
          FILE.RENAME(SourcePath + '\' + Document."No." + '.' + Document."File Extension",
            DestPath + '\' + Document."No." + '.' + Document."File Extension");

      UNTIL Document.NEXT = 0;

      CLEAR(FileSystem);
      Window.CLOSE;
    END;

    PROCEDURE GetDocSubDir@161024017(Document@161024012 : Record 6085590) : Text[1024];
    BEGIN
      EXIT(GetSubDir("Disk File Directory Structure",Document,"Company Code in Archive","Company Code"));
    END;

    LOCAL PROCEDURE GetSubDir@161024018(Structure@161024012 : Integer;Document@161024013 : Record 6085590;CompCodeInArchive@1160040000 : Boolean;CompanyCode@1160040002 : Code[10]) : Text[1024];
    VAR
      Month@161024014 : Code[2];
      Day@161024015 : Code[2];
      Path@1160040001 : Text[1024];
    BEGIN
      IF Document."Import Month" < 10 THEN
        Month := '0' + FORMAT(Document."Import Month")
      ELSE
        Month := FORMAT(Document."Import Month");

      IF Document."Import Day" < 10 THEN
        Day := '0' + FORMAT(Document."Import Day")
      ELSE
        Day := FORMAT(Document."Import Day");

      IF CompCodeInArchive AND (CompanyCode <> '') THEN
        Path := '\' + CompanyCode + '\'
      ELSE
        Path := '\';

      CASE Structure OF
        "Disk File Directory Structure"::"One Directory":
          EXIT(Path);
        "Disk File Directory Structure"::"Year\Month":
          EXIT(Path + STRSUBSTNO('%1\%2\',Document."Import Year",Month));
        "Disk File Directory Structure"::"Year\Month\Day":
          EXIT(Path + STRSUBSTNO('%1\%2\%3\',Document."Import Year",Month,Day));
      END;
    END;

    PROCEDURE CreateAndAssignConnEndpoints@1160040002();
    VAR
      ConnEndpoint@1160040000 : Record 6085620;
      DocCat@1160040001 : Record 6085575;
      EndpointCode@1160040002 : Code[10];
    BEGIN
      IF NOT ConnEndpoint.ISEMPTY THEN
        EXIT;

      IF NOT HideValidation THEN
        IF NOT CONFIRM(Text008,TRUE,ConnEndpoint.TABLECAPTION) THEN
          EXIT;

      DocCat.SETRANGE("Scanning Allowed",TRUE);
      IF DocCat.FINDSET THEN
        REPEAT
          IF (DocCat."Source Table No." = DATABASE::Vendor) AND
            (DocCat."Destination Header Table No." = DATABASE::"Purchase Header")
          THEN
            EndpointCode := 'INVOICE'
          ELSE
            EndpointCode := FormatText(DocCat.Code);

          ConnEndpoint.INIT;
          ConnEndpoint.Code := EndpointCode;
          ConnEndpoint.Protocol := ConnEndpoint.Protocol::"Continia Email";
          ConnEndpoint.INSERT(TRUE);

          DocCat."E-mail Connection Endpoint" := ConnEndpoint.Code;
          DocCat.MODIFY(TRUE);
        UNTIL DocCat.NEXT = 0;

      IF NOT HideValidation THEN
        IF CONFIRM(Text009,TRUE) THEN
          CODEUNIT.RUN(CODEUNIT::"Export Doc. Cat. Config. - DC");
    END;

    PROCEDURE FormatText@1160040000(TheText@1160040001 : Text[250]) NewText : Text[250];
    VAR
      i@1160040000 : Integer;
    BEGIN
      FOR i := 1 TO STRLEN(TheText) DO
        IF STRPOS('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',COPYSTR(TheText,i,1)) > 0 THEN
          NewText := NewText + COPYSTR(TheText,i,1);
    END;

    PROCEDURE SetHideValidate@1160040001(NewHideValidation@1160040000 : Boolean);
    BEGIN
      HideValidation := NewHideValidation;
    END;

    BEGIN
    END.
  }
}

