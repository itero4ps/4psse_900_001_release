OBJECT Table 6085730 Purch. Allocation Header
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW17.00.00.4.00.03,4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               DCSetup.GET;

               IF "No." = '' THEN BEGIN
                 TestNoSeries;
                 NoSeriesMgt.InitSeries(DCSetup."Purch. Allocation Nos.",xRec."No. Series","Posting Date","No.","No. Series");
               END;
             END;

    OnModify=BEGIN
               TESTFIELD(Status,Status::Open);
             END;

    OnDelete=VAR
               PurchAllocLine@161024012 : Record 6085731;
             BEGIN
               IF Status <> Status::Open THEN
                 ERROR(Text002);

               PurchAllocLine.SETRANGE("Document No.","No.");
               PurchAllocLine.DELETEALL(TRUE);
             END;

    CaptionML=ENU=Purch. Allocation Header;
    LookupPageID=Page6085732;
    DrillDownPageID=Page6085732;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  DCSetup.GET;
                                                                  NoSeriesMgt.TestManual(DCSetup."Purch. Allocation Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=FIELD(Document Type));
                                                   OnValidate=BEGIN
                                                                UpdateFieldFromPurchHeader;
                                                              END;

                                                   CaptionML=ENU=Document No.;
                                                   Editable=No }
    { 4   ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  UpdateCurrencyFactor;
                                                                  IF "Currency Factor" <> xRec."Currency Factor" THEN BEGIN
                                                                    IF CONFIRM(Text003,FALSE) THEN
                                                                      VALIDATE("Currency Factor")
                                                                    ELSE
                                                                      "Currency Factor" := xRec."Currency Factor";
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Posting Date }
    { 7   ;   ;Pay-to Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=VAR
                                                                Vend@161024012 : Record 23;
                                                              BEGIN
                                                                IF "Pay-to Vendor No." = '' THEN
                                                                  EXIT;

                                                                Vend.GET("Pay-to Vendor No.");
                                                                "Pay-to Name" := Vend.Name;

                                                                Vend.TESTFIELD("Gen. Bus. Posting Group");
                                                                "Gen. Bus. Posting Group" := Vend."Gen. Bus. Posting Group";

                                                                IF (xRec."Pay-to Vendor No." <> "Pay-to Vendor No.") OR
                                                                   (xRec."Currency Code" <> "Currency Code") OR
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group") OR
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreatePurchAllocLines;
                                                              END;

                                                   CaptionML=ENU=Pay-to Vendor No. }
    { 8   ;   ;Pay-to Name         ;Text50        ;CaptionML=ENU=Pay-to Name }
    { 9   ;   ;Vendor Invoice No.  ;Code20        ;CaptionML=ENU=Vendor Invoice No. }
    { 10  ;   ;Vendor Cr. Memo No. ;Code20        ;CaptionML=ENU=Vendor Cr. Memo No. }
    { 11  ;   ;Vendor Posting Group;Code10        ;TableRelation="Vendor Posting Group";
                                                   CaptionML=ENU=Vendor Posting Group }
    { 12  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF "Currency Code" <> xRec."Currency Code" THEN BEGIN
                                                                  UpdateCurrencyFactor;
                                                                  RecreatePurchAllocLines;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 13  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                UpdateCurrencyFactor;
                                                                RecreatePurchAllocLines;
                                                              END;

                                                   CaptionML=ENU=Currency Factor }
    { 14  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
    { 15  ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Open,Posted,Reversed;
                                                   OptionString=Open,Posted,Reversed;
                                                   Editable=No }
    { 16  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 17  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF (xRec."Pay-to Vendor No." = "Pay-to Vendor No.") AND
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreatePurchAllocLines;
                                                              END;

                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 18  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   Editable=No;
                                                   CaptionClass='1,2,1' }
    { 19  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   Editable=No;
                                                   CaptionClass='1,2,2' }
    { 20  ;   ;Applies-to Doc. No. ;Code20        ;TableRelation="Purch. Allocation Header";
                                                   CaptionML=ENU=Applies-to Doc. No.;
                                                   Editable=No }
    { 21  ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   CaptionML=ENU=Dimension Set ID }
    { 11012001;;Job No.            ;Code20        ;TableRelation=Job;
                                                   CaptionML=ENU=Job No. }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Document Type,Document No.               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      DCSetup@161024012 : Record 6085573;
      CurrExchRate@161024014 : Record 330;
      NoSeriesMgt@161024013 : Codeunit 396;
      Text001@161024018 : TextConst 'ENU=Amount Incl. VAT on purchase allocation %1 does not match Amount Incl. VAT on the imported document.';
      Text002@161024016 : TextConst 'ENU=A posted purchase allocation can not be deleted, but must be reversed.';
      Text003@161024015 : TextConst 'ENU=Do you want to update the exchange rate?';
      Text004@6085573 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?';

    PROCEDURE AssistEdit@1070002(OldInwRegHeader@1070000 : Record 6085730) : Boolean;
    BEGIN
      DCSetup.GET;
      TestNoSeries;
      IF NoSeriesMgt.SelectSeries(DCSetup."Purch. Allocation Nos.",OldInwRegHeader."No. Series","No. Series") THEN BEGIN
        DCSetup.GET;
        TestNoSeries;
        NoSeriesMgt.SetSeries("No.");
        EXIT(TRUE);
      END;
    END;

    PROCEDURE TestNoSeries@1070003();
    BEGIN
      DCSetup.TESTFIELD("Purch. Allocation Nos.");
    END;

    PROCEDURE UpdateCurrencyFactor@1070000();
    BEGIN
      IF "Currency Code" <> '' THEN BEGIN
        //**4PS.so
        //"Currency Factor" := CurrExchRate.ExchangeRate("Posting Date","Currency Code");
        //**4PS.eo
        //**4PS.sn
        "Currency Factor" := CurrExchRate.ExchangeRate(0,'',"Posting Date","Currency Code",FALSE);
        //**4PS.en
      END ELSE
        "Currency Factor" := 0;
    END;

    PROCEDURE UpdateFieldFromPurchHeader@161024012();
    VAR
      PurchHeader@161024012 : Record 38;
    BEGIN
      PurchHeader.GET("Document Type","Document No.");
      PurchHeader.TESTFIELD("Pay-to Vendor No.");
      "Pay-to Vendor No." := PurchHeader."Pay-to Vendor No.";
      "Pay-to Name" := PurchHeader."Pay-to Name";
      "Posting Date" := PurchHeader."Posting Date";
      "Vendor Invoice No." := PurchHeader."Vendor Invoice No.";
      "Vendor Cr. Memo No." := PurchHeader."Vendor Cr. Memo No.";
      "Vendor Posting Group" := PurchHeader."Vendor Posting Group";
      "Gen. Bus. Posting Group" := PurchHeader."Gen. Bus. Posting Group";
      "VAT Bus. Posting Group" := PurchHeader."VAT Bus. Posting Group";
      "Currency Code" := PurchHeader."Currency Code";
      "Currency Factor" := PurchHeader."Currency Factor";
      "Dimension Set ID" := PurchHeader."Dimension Set ID";
      "Job No." := PurchHeader."Job No."; //**4PS
    END;

    PROCEDURE RecreatePurchAllocLines@4();
    VAR
      PurchAllocLineTmp@1001 : TEMPORARY Record 6085731;
      PurchAllocLine@6085573 : Record 6085731;
      TempInteger@1003 : TEMPORARY Record 2000000026;
      ChangeLogMgt@1011 : Codeunit 423;
      RecRef@1010 : RecordRef;
      xRecRef@1009 : RecordRef;
    BEGIN
      PurchAllocLine.LOCKTABLE;
      xRecRef.GETTABLE(xRec);
      MODIFY;
      RecRef.GETTABLE(Rec);

      PurchAllocLine.RESET;
      PurchAllocLine.SETRANGE("Document No.","No.");
      IF PurchAllocLine.FINDSET THEN BEGIN
        REPEAT
          PurchAllocLineTmp := PurchAllocLine;
          PurchAllocLineTmp.INSERT;
        UNTIL PurchAllocLine.NEXT = 0;

        PurchAllocLine.DELETEALL(TRUE);

        PurchAllocLineTmp.FINDSET;
        REPEAT
          PurchAllocLine.INIT;
          PurchAllocLine."Line No." := PurchAllocLineTmp."Line No.";
          PurchAllocLine.INSERT;
          PurchAllocLine."G/L Account No." := PurchAllocLineTmp."G/L Account No.";
          PurchAllocLine."Gen. Bus. Posting Group" := PurchAllocLineTmp."Gen. Bus. Posting Group";
          PurchAllocLine."Gen. Prod. Posting Group" := PurchAllocLineTmp."Gen. Prod. Posting Group";
          PurchAllocLine."VAT Bus. Posting Group" := PurchAllocLineTmp."VAT Bus. Posting Group";
          PurchAllocLine."VAT Prod. Posting Group" := PurchAllocLineTmp."VAT Prod. Posting Group";
          PurchAllocLine."VAT Calculation Type" := PurchAllocLineTmp."VAT Calculation Type";
          PurchAllocLine."VAT %" := PurchAllocLineTmp."VAT %";
          PurchAllocLine.Description := PurchAllocLineTmp.Description;
          PurchAllocLine."Currency Code" := PurchAllocLineTmp."Currency Code";
          PurchAllocLine."Shortcut Dimension 1 Code" := PurchAllocLineTmp."Shortcut Dimension 1 Code";
          PurchAllocLine."Shortcut Dimension 2 Code" := PurchAllocLineTmp."Shortcut Dimension 2 Code";
          PurchAllocLine."Dimension Set ID" := PurchAllocLineTmp."Dimension Set ID";
          PurchAllocLine."Job No." := PurchAllocLineTmp."Job No."; //**4PS
          PurchAllocLine.MODIFY(TRUE);
        UNTIL PurchAllocLine.NEXT = 0;
      END;

      ChangeLogMgt.LogModification(RecRef);
    END;

    PROCEDURE AutoCreateLines@161024013();
    VAR
      PurchHeader@161024014 : Record 38;
      PurchLine@161024013 : Record 39;
      GLSetup@161024031 : Record 98;
      GLPostSetupDCInfo@161024016 : Record 6085771;
      Document@161024022 : Record 6085590;
      Template@161024024 : Record 6085579;
      Field@161024023 : Record 6085580;
      TemplField@161024025 : Record 6085580;
      PurchSetup@161024030 : Record 312;
      PurchAllocLine@161024032 : Record 6085731;
      CaptureMgnt@161024026 : Codeunit 6085576;
      PurchDocMgnt@161024018 : Codeunit 6085709;
      DimMgt@1160040001 : Codeunit 408;
      GLAccountNo@161024017 : Code[20];
      LineAmount@161024015 : Decimal;
      AmountExclVAT@161024019 : Decimal;
      AmountInclVAT@161024020 : Decimal;
      LinesAmountExclVAT@161024028 : Decimal;
      LinesAmountInclVAT@161024027 : Decimal;
      TempAmount@161024021 : Decimal;
      FAPostingGroup@1000000000 : Record 5606;
    BEGIN
      TESTFIELD(Status,Status::Open);

      PurchAllocLine.SETRANGE("Document No.","No.");
      PurchAllocLine.DELETEALL(TRUE);

      DCSetup.GET;
      GLSetup.GET;

      PurchHeader.GET("Document Type","Document No.");

      "Currency Code" := PurchHeader."Currency Code";
      "Currency Factor" := PurchHeader."Currency Factor";
      MODIFY;

      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","Document No.");
      PurchLine.SETFILTER("Line Amount",'<>%1',0);
      IF PurchLine.FINDSET AND
        (DCSetup."Purch. Alloc. Amounts to Use" = DCSetup."Purch. Alloc. Amounts to Use"::"Use Lines or Imported Amounts")
      THEN BEGIN
        REPEAT
          IF PurchLine.Type = PurchLine.Type::"G/L Account" THEN BEGIN
            DCSetup.GET;
            IF DCSetup."Purch. Alloc. G/L Account Type" = DCSetup."Purch. Alloc. G/L Account Type"::"Use Posting Setup" THEN BEGIN
              GLPostSetupDCInfo.GET(PurchLine."Gen. Bus. Posting Group",PurchLine."Gen. Prod. Posting Group");
              GLPostSetupDCInfo.TESTFIELD("Purch. Allocation Account");
              GLAccountNo := GLPostSetupDCInfo."Purch. Allocation Account";
            END ELSE
              GLAccountNo := PurchLine."No.";
          END ELSE BEGIN
            //**4PS.sn
            CASE PurchLine.Type OF
              PurchLine.Type::"Fixed Asset" :
                BEGIN
                  FAPostingGroup.GET(PurchLine."Posting Group");
                  FAPostingGroup.TESTFIELD("Acquisition Cost Account");
                  GLAccountNo := FAPostingGroup."Acquisition Cost Account";
                END;
              ELSE BEGIN
              //**4PS.en
                GLPostSetupDCInfo.GET(PurchLine."Gen. Bus. Posting Group",PurchLine."Gen. Prod. Posting Group");
                GLPostSetupDCInfo.TESTFIELD("Purch. Allocation Account");
                GLAccountNo := GLPostSetupDCInfo."Purch. Allocation Account";
            //**4PS.sn
              END;
            END;
            //**4PS.en
          END;

          IF PurchHeader."Prices Including VAT" THEN
            LineAmount := PurchLine."Line Amount" / (1 + PurchLine."VAT %" / 100)
          ELSE
            LineAmount := PurchLine."Line Amount";

          PurchAllocLine.INIT;
          PurchAllocLine."Document No." := "No.";
          PurchAllocLine."Line No." := PurchLine."Line No.";
          PurchAllocLine.INSERT;
          PurchAllocLine."G/L Account No." := GLAccountNo;
          PurchAllocLine."Gen. Bus. Posting Group" := PurchLine."Gen. Bus. Posting Group";
          PurchAllocLine."Gen. Prod. Posting Group" := PurchLine."Gen. Prod. Posting Group";
          PurchAllocLine."VAT Bus. Posting Group" := PurchLine."VAT Bus. Posting Group";
          PurchAllocLine."VAT Prod. Posting Group" := PurchLine."VAT Prod. Posting Group";
          PurchAllocLine."VAT Calculation Type" := PurchLine."VAT Calculation Type";
          PurchAllocLine."VAT %" := PurchLine."VAT %";
          PurchAllocLine."Currency Code" := "Currency Code";
          PurchAllocLine.VALIDATE(Amount,LineAmount);
          PurchAllocLine.VALIDATE("VAT Difference",PurchLine."VAT Difference");
          PurchAllocLine.Description := PurchLine.Description;
          PurchAllocLine."Shortcut Dimension 1 Code" := PurchLine."Shortcut Dimension 1 Code";
          PurchAllocLine."Shortcut Dimension 2 Code" := PurchLine."Shortcut Dimension 2 Code";
          PurchAllocLine."Dimension Set ID" := PurchLine."Dimension Set ID";
          //**4PS.sn
          PurchAllocLine."Job No." := PurchLine."Job No.";
          PurchAllocLine.Quantity := PurchLine.Quantity;
          PurchAllocLine."Unit of Measure Code" := PurchLine."Unit of Measure Code";
          PurchAllocLine."Purchase Action" := PurchLine."Purchase Action";
          //**4PS.en
          PurchAllocLine.MODIFY(TRUE);
        UNTIL PurchLine.NEXT = 0;
      END ELSE BEGIN
        Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
        Document.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");
        Document.SETRANGE("Created Doc. Subtype","Document Type");
        Document.SETRANGE("Created Doc. ID","Document No.");
        IF NOT Document.FINDFIRST THEN
          EXIT;

        Field.SETRANGE("Template No.",Document."Template No.");
        Field.SETRANGE(Type,Field.Type::Header);
        Field.SETRANGE("Data Type",Field."Data Type"::Number);
        Field.SETFILTER("Transfer Amount to Document",'<>%1',Field."Transfer Amount to Document"::" ");

        TemplField.COPY(Field);

        Template.GET(Document."Template No.");

        IF Field.FINDSET THEN
          REPEAT
            AmountExclVAT := CaptureMgnt.GetDecimal(Document,Field.Type,Field.Code,0);

            // ***************************************************************************************************************************
            // FIND POTENTIAL AMOUNTS (FROM OTHER TEMPLATE FIELDS) TO BE SUBTRACTED
            // ***************************************************************************************************************************
            TemplField.SETRANGE("Subtract from Amount Field",Field.Code);
            IF TemplField.FINDFIRST THEN
              REPEAT
                AmountExclVAT := AmountExclVAT - CaptureMgnt.GetDecimal(Document,TemplField.Type,TemplField.Code,0);
              UNTIL TemplField.NEXT = 0;

            IF AmountExclVAT <> 0 THEN BEGIN
              IF Field."Purch. Alloc. G/L Account No." <> '' THEN BEGIN
                GLAccountNo := Field."Purch. Alloc. G/L Account No."
              END ELSE BEGIN
                DCSetup.TESTFIELD("Purch. Alloc. G/L Account No.");
                GLAccountNo := DCSetup."Purch. Alloc. G/L Account No.";
              END;

              PurchAllocLine.INIT;
              PurchAllocLine."Document No." := "No.";
              PurchAllocLine."Line No." := PurchAllocLine."Line No." + 10000;
              PurchAllocLine.INSERT;
              PurchAllocLine.SetupNewLine;
              PurchAllocLine.VALIDATE("G/L Account No.",GLAccountNo);
              PurchAllocLine.VALIDATE("Gen. Bus. Posting Group",PurchHeader."Gen. Bus. Posting Group");
              PurchAllocLine.VALIDATE("VAT Bus. Posting Group",PurchHeader."VAT Bus. Posting Group");
              PurchAllocLine.VALIDATE(Amount,AmountExclVAT);
              PurchAllocLine.MODIFY(TRUE);

              LinesAmountExclVAT := LinesAmountExclVAT + AmountExclVAT;
              LinesAmountInclVAT := LinesAmountInclVAT + PurchAllocLine."Amount Including VAT";
            END;
          UNTIL Field.NEXT = 0;


        IF PurchDocMgnt.GetAmountInclVAT(Document) <> LinesAmountInclVAT THEN BEGIN
          PurchSetup.GET;
          IF PurchSetup."Allow VAT Difference" THEN BEGIN
            GLSetup.GET;
            IF GLSetup."Max. VAT Difference Allowed" >= ABS(PurchDocMgnt.GetAmountInclVAT(Document) - LinesAmountInclVAT) THEN BEGIN
              PurchAllocLine.RESET;
              PurchAllocLine.SETRANGE("Document No.","No.");
              PurchAllocLine.FINDFIRST;
              PurchAllocLine.VALIDATE("VAT Difference",PurchDocMgnt.GetAmountInclVAT(Document) - LinesAmountInclVAT);
              PurchAllocLine.MODIFY(TRUE);
            END;
          END;
        END;

        IF DCSetup."Purch. Alloc. Amounts to Use" = DCSetup."Purch. Alloc. Amounts to Use"::"Use Lines or Imported Amounts" THEN BEGIN
          PurchDocMgnt.GetDocumentHeaderAmounts(PurchHeader,AmountExclVAT,AmountInclVAT,TempAmount,TempAmount);
          IF AmountInclVAT <> LinesAmountInclVAT THEN
            MESSAGE(Text001,"No.");
        END;
      END;
    END;

    PROCEDURE ReverseAll@161024015(PurchHeader@161024012 : Record 38);
    VAR
      PurchAllocHeader@161024013 : Record 6085730;
    BEGIN
      PurchAllocHeader.SETCURRENTKEY("Document Type","Document No.");
      PurchAllocHeader.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchAllocHeader.SETRANGE("Document No.",PurchHeader."No.");
      PurchAllocHeader.SETRANGE(Status,PurchAllocHeader.Status::Posted);
      IF PurchAllocHeader.FINDSET THEN
        REPEAT
          CODEUNIT.RUN(CODEUNIT::"Purch. Alloc.-Reverse",PurchAllocHeader);
        UNTIL PurchAllocHeader.NEXT = 0;

      PurchAllocHeader.SETRANGE(Status,PurchAllocHeader.Status::Open);
      PurchAllocHeader.DELETEALL(TRUE);
    END;

    PROCEDURE ShowDocDim@32();
    VAR
      DimMgt@6085573 : Codeunit 408;
      OldDimSetID@1000 : Integer;
    BEGIN
      IF Status <> Status::Open THEN BEGIN
        DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1',"No."));
        EXIT;
      END;

      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1',"No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF AllocLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE UpdateAllLineDim@34(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      PurchAllocLine@6085573 : Record 6085731;
      DimMgt@6085574 : Codeunit 408;
      NewDimSetID@1002 : Integer;
    BEGIN
      // Update all lines with changed dimensions.

      IF NewParentDimSetID = OldParentDimSetID THEN
        EXIT;
      IF NOT CONFIRM(Text004) THEN
        EXIT;

      PurchAllocLine.SETRANGE("Document No.","No.");
      PurchAllocLine.LOCKTABLE;
      IF PurchAllocLine.FINDSET THEN
        REPEAT
          NewDimSetID := DimMgt.GetDeltaDimSetID(PurchAllocLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          IF PurchAllocLine."Dimension Set ID" <> NewDimSetID THEN BEGIN
            PurchAllocLine."Dimension Set ID" := NewDimSetID;
            PurchAllocLine.MODIFY;
          END;
        UNTIL PurchAllocLine.NEXT = 0;
    END;

    PROCEDURE AllocLinesExist@3() : Boolean;
    VAR
      PurchAllocLine@6085573 : Record 6085731;
    BEGIN
      PurchAllocLine.RESET;
      PurchAllocLine.SETRANGE("Document No.","No.");
      EXIT(PurchAllocLine.FINDFIRST);
    END;

    BEGIN
    {
      4PS New Field 'Job No.'
      4PS Changed Handling of Fixed Assets
      4PS Create Purchase Alloctation per Purchase Line aan not based on Allocation Buffer.
    }
    END.
  }
}

