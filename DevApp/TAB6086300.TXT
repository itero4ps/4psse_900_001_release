OBJECT Table 6086300 Expense Management Setup
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW16.00.10.1.02.00,4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 6086352=r;
    CaptionML=ENU=Expense Management Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 2   ;   ;Company Code        ;Code20        ;OnValidate=BEGIN
                                                                IF "Company Code in Archive" THEN
                                                                  IF "Company Code" <> xRec."Company Code" THEN
                                                                    MoveFiles(FIELDCAPTION("Company Code"));
                                                              END;

                                                   CaptionML=ENU=Company Code }
    { 20  ;   ;Archive Directory Structure;Option ;OnValidate=BEGIN
                                                                IF "Archive Directory Structure" <> xRec."Archive Directory Structure" THEN
                                                                  MoveFiles(FIELDCAPTION("Archive Directory Structure"));
                                                              END;

                                                   CaptionML=ENU=Archive Directory Structure;
                                                   OptionCaptionML=ENU=One Directory,Year\Month,Year\Month\Day;
                                                   OptionString=One Directory,Year\Month,Year\Month\Day }
    { 21  ;   ;Archive Path        ;Text250       ;OnValidate=VAR
                                                                FileSysMgt@1160040000 : Codeunit 6085584;
                                                              BEGIN
                                                                IF NOT FileSystemMgt.DirectoryExists("Archive Path") THEN
                                                                  FileSysMgt.CreateDirectory("Archive Path");
                                                              END;

                                                   CaptionML=ENU=Archive Path }
    { 22  ;   ;Company Code in Archive;Boolean    ;OnValidate=BEGIN
                                                                IF xRec."Company Code in Archive" <> "Company Code in Archive" THEN
                                                                  MoveFiles(FIELDCAPTION("Company Code in Archive"));
                                                              END;

                                                   CaptionML=ENU=Company Code in Archive }
    { 60  ;   ;Create Expense w. Transaction;Boolean;
                                                   CaptionML=ENU=Create Expense from Transaction }
    { 61  ;   ;Send Status E-mail at Creation;Boolean;
                                                   CaptionML=ENU=Send Status E-mail when Expense is created }
    { 65  ;   ;Approval Administrator Role ID;Code20;
                                                   TableRelation="Permission Set";
                                                   CaptionML=ENU=Approval Administrator Role ID }
    { 70  ;   ;Send Approval/Reject to App;Option ;CaptionML=ENU=Send Approval/Reject to App;
                                                   OptionCaptionML=ENU=No,Only Rejected,Both;
                                                   OptionString=No,Only Rejected,Both }
    { 80  ;   ;Posting Description ;Text30        ;CaptionML=ENU=Posting Description }
    { 90  ;   ;Maximum Matching Diff. Pct.;Decimal;CaptionML=ENU=Maximum Matching Difference in % }
    { 100 ;   ;Default Web/App Language;Code10    ;TableRelation=Language;
                                                   OnValidate=BEGIN
                                                                IF "Default Web/App Language" <> xRec."Default Web/App Language" THEN
                                                                  "Force Field Update in CO" := TRUE;
                                                              END;

                                                   CaptionML=ENU=Default Web/App Language }
    { 110 ;   ;Card Transaction Bal. Type;Option  ;CaptionML=ENU=Card Transaction Balancing Type;
                                                   OptionCaptionML=ENU=G/L Account,,,Bank Account;
                                                   OptionString=G/L Account,,,Bank Account }
    { 115 ;   ;Card Transaction Bal. No.;Code20   ;TableRelation=IF (Card Transaction Bal. Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Card Transaction Bal. Type=CONST(Bank Account)) "Bank Account";
                                                   CaptionML=ENU=Card Transaction Balancing No. }
    { 116 ;   ;Expense Posting (Credit Card);Option;
                                                   CaptionML=ENU=Expense Posting (Credit Card);
                                                   OptionCaptionML=ENU=Use General Journal,Use Purchase Invoice;
                                                   OptionString=Use General Journal,Use Purchase Invoice }
    { 117 ;   ;Expense Posting     ;Option        ;CaptionML=ENU=Expense Posting;
                                                   OptionCaptionML=ENU=Use General Journal,Use Purchase Invoice;
                                                   OptionString=Use General Journal,Use Purchase Invoice }
    { 120 ;   ;Invoice Nos.        ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Invoice No. Series }
    { 122 ;   ;Approval Template   ;BLOB          ;CaptionML=ENU=Approval Template;
                                                   SubType=User-Defined }
    { 123 ;   ;Approval E-Mail Subject;Text80     ;CaptionML=ENU=Approval E-mail Subject }
    { 124 ;   ;Last Status E-Mail Sent;Date       ;FieldClass=FlowField;
                                                   CalcFormula=Max("Event Register"."Creation Date" WHERE (Area=CONST(Purch. Approval Status E-mail)));
                                                   CaptionML=ENU=Last Status E-mail Sent;
                                                   Editable=No }
    { 125 ;   ;Reminder Template   ;BLOB          ;CaptionML=ENU=Reminder Template }
    { 126 ;   ;Reminder E-Mail Subject;Text80     ;CaptionML=ENU=Reminder E-Mail Subject }
    { 140 ;   ;Sender E-mail       ;Text80        ;CaptionML=ENU=Sender E-mail }
    { 141 ;   ;Sender Name         ;Text50        ;CaptionML=ENU=Sender Name }
    { 142 ;   ;SMTP Require SSL/TLS;Boolean       ;OnValidate=VAR
                                                                SmtpMailSetup@1160040000 : Record 409;
                                                              BEGIN
                                                                IF SmtpMailSetup.GET THEN
                                                                  IF ("SMTP Require SSL/TLS" <> SmtpMailSetup."Secure Connection") THEN
                                                                    ERROR(MailSetupTxt,SmtpMailSetup.TABLECAPTION);
                                                              END;

                                                   CaptionML=ENU=SMTP Require SSL/TLS }
    { 143 ;   ;Force Field Update in CO;Boolean   ;CaptionML=ENU=Force Field Update in Continia Online;
                                                   Editable=No }
    { 150 ;   ;Error E-Mail        ;Text80        ;CaptionML=ENU=Error E-mail }
    { 154 ;   ;Dynamics NAV Server Name;Text50    ;OnValidate=VAR
                                                                EMSetup@161024013 : Record 6086300;
                                                                Company@161024012 : Record 2000000006;
                                                              BEGIN
                                                                Company.FINDFIRST;
                                                                REPEAT
                                                                  IF Company.Name <> COMPANYNAME THEN BEGIN
                                                                    EMSetup.CHANGECOMPANY(Company.Name);
                                                                    IF EMSetup.GET THEN BEGIN
                                                                      EMSetup."Dynamics NAV Server Name" := "Dynamics NAV Server Name";
                                                                      EMSetup.MODIFY;
                                                                    END;
                                                                  END;
                                                                UNTIL Company.NEXT = 0;
                                                              END;

                                                   CaptionML=ENU=Dynamics NAV Server Name }
    { 155 ;   ;Dynamics NAV Server Instance;Text50;OnValidate=VAR
                                                                EMSetup@161024012 : Record 6086300;
                                                                Company@161024013 : Record 2000000006;
                                                              BEGIN
                                                                Company.FINDFIRST;
                                                                REPEAT
                                                                  IF Company.Name <> COMPANYNAME THEN BEGIN
                                                                    EMSetup.CHANGECOMPANY(Company.Name);
                                                                    IF EMSetup.GET THEN BEGIN
                                                                      EMSetup."Dynamics NAV Server Instance" := "Dynamics NAV Server Instance";
                                                                      EMSetup.MODIFY;
                                                                    END;
                                                                  END;
                                                                UNTIL Company.NEXT = 0;
                                                              END;

                                                   CaptionML=ENU=Dynamics NAV Server Instance }
    { 156 ;   ;Dynamics NAV Server Port;Integer   ;OnValidate=VAR
                                                                EMSetup@161024012 : Record 6086300;
                                                                Company@161024013 : Record 2000000006;
                                                              BEGIN
                                                                Company.FINDFIRST;
                                                                REPEAT
                                                                  IF Company.Name <> COMPANYNAME THEN BEGIN
                                                                    EMSetup.CHANGECOMPANY(Company.Name);
                                                                    IF EMSetup.GET THEN BEGIN
                                                                      EMSetup."Dynamics NAV Server Port" := "Dynamics NAV Server Port";
                                                                      EMSetup.MODIFY;
                                                                    END;
                                                                  END;
                                                                UNTIL Company.NEXT = 0;
                                                              END;

                                                   CaptionML=ENU=Dynamics NAV Server Port }
    { 201 ;   ;Expense Template Name;Code10       ;TableRelation="Gen. Journal Template" WHERE (Type=CONST(General));
                                                   CaptionML=ENU=Expense Template Name }
    { 251 ;   ;Expense Batch Name  ;Code10        ;TableRelation="Gen. Journal Batch".Name WHERE (Journal Template Name=FIELD(Expense Template Name));
                                                   CaptionML=ENU=Expense Batch Name }
    { 252 ;   ;Job Template Name   ;Code10        ;TableRelation="Job Journal Template";
                                                   CaptionML=ENU=Job Template Name }
    { 253 ;   ;Job Batch Name      ;Code10        ;TableRelation="Job Journal Batch".Name WHERE (Journal Template Name=FIELD(Job Template Name));
                                                   OnValidate=VAR
                                                                JobJnlBatch@1160040000 : Record 11072011;
                                                              BEGIN
                                                                IF "Job Batch Name" <> '' THEN BEGIN
                                                                  JobJnlBatch.GET("Job Template Name","Job Batch Name");
                                                                  JobJnlBatch.TESTFIELD("No. Series",'');
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Job Batch Name }
    { 300 ;   ;Shortcut Field 1 Code;Code20       ;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 1 Code }
    { 301 ;   ;Shortcut Field 2 Code;Code20       ;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 2 Code }
    { 302 ;   ;Shortcut Field 3 Code;Code20       ;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 3 Code }
    { 303 ;   ;Shortcut Field 4 Code;Code20       ;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 4 Code }
    { 304 ;   ;Shortcut Field 5 Code;Code20       ;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 5 Code }
    { 305 ;   ;Shortcut Field 6 Code;Code20       ;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 6 Code }
    { 306 ;   ;Shortcut Field 7 Code;Code20       ;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 7 Code }
    { 307 ;   ;Shortcut Field 8 Code;Code20       ;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 8 Code }
    { 308 ;   ;Shortcut Field 9 Code;Code20       ;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 9 Code }
    { 309 ;   ;Shortcut Field 10 Code;Code20      ;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 10 Code }
    { 310 ;   ;Data Version        ;Integer       ;CaptionML=ENU=Data Version }
    { 320 ;   ;Shortcut Field 1 Approval;Code20   ;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 1 Code Approval }
    { 321 ;   ;Shortcut Field 2 Approval;Code20   ;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 2 Code Approval }
    { 322 ;   ;Shortcut Field 3 Approval;Code20   ;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 3 Code Approval }
    { 323 ;   ;Shortcut Field 4 Approval;Code20   ;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 4 Code Approval }
    { 324 ;   ;Shortcut Field 5 Approval;Code20   ;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 5 Code Approval }
    { 325 ;   ;Shortcut Field 6 Approval;Code20   ;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 6 Code Approval }
    { 326 ;   ;Shortcut Field 7 Approval;Code20   ;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 7 Code Approval }
    { 327 ;   ;Shortcut Field 8 Approval;Code20   ;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 8 Code Approval }
    { 328 ;   ;Shortcut Field 9 Approval;Code20   ;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 9 Code Approval }
    { 329 ;   ;Shortcut Field 10 Approval;Code20  ;TableRelation="Field Type" WHERE (Standard Field=CONST(No));
                                                   CaptionML=ENU=Shortcut Field 10 Code Approval }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      FileSystemMgt@1160040000 : Codeunit 6085584;
      Text003@1001 : TextConst 'ENU=Documents have already been imported. When you change %1 the system will automatically move files to %2.\\It is important that you take a backup of the existing directory structure and files before the system moves the files.\\Did you do this and do you want to continue changing %1 from ''%3'' to ''%4''?';
      Text004@1000 : TextConst 'ENU=Moving Files\#1######################';
      TextNotmoved@1160040001 : TextConst 'ENU=%1 files have not been moved. Please unlock these files and make sure there is permission to move the files and then try again';
      MailSetupTxt@1160040002 : TextConst 'ENU=This setup must be the same as in %1. Please change that one first.';

    LOCAL PROCEDURE MoveFiles@1160040004(CaptionFieldChanged@1160040000 : Text[100]);
    VAR
      ExpenseAttachment@1160040001 : Record 6086326;
      ExpenseInboxAttachment@1160040014 : Record 6086328;
      ExpenseInbox@1160040015 : Record 6086323;
      FileSysMgt@1160040002 : Codeunit 6085584;
      Window@1160040003 : Dialog;
      DestFile@1160040011 : Text[1024];
      DestPath@1160040008 : Text[1024];
      Filename@1160040012 : Text[1024];
      FromSubDir@1160040005 : Text[1024];
      NewSubDir@1160040004 : Text[1024];
      SourceFile@1160040009 : Text[1024];
      SourcePath@1160040007 : Text[1024];
      ToSubDir@1160040006 : Text[1024];
      Counter@1160040013 : Integer;
      NotMoved@1160040010 : Integer;
    BEGIN
      IF NOT ExpenseAttachment.FINDSET AND NOT ExpenseInboxAttachment.FINDSET THEN
        EXIT;

      IF "Company Code in Archive" THEN
        NewSubDir := "Company Code" + '\';

      NewSubDir := NewSubDir + FORMAT("Archive Directory Structure");

      IF NOT CONFIRM(Text003,FALSE,CaptionFieldChanged,NewSubDir,xRec."Archive Directory Structure",Rec."Archive Directory Structure")
      THEN
        ERROR('');

      Window.OPEN(Text004);
      IF ExpenseAttachment.FINDSET THEN
        REPEAT
          Window.UPDATE(1,Counter);
          Counter := Counter + 1;
          FromSubDir :=
            GetSubDir(xRec."Archive Directory Structure",ExpenseAttachment.GetCreatedDate,
              xRec."Company Code in Archive",xRec."Company Code");
          ToSubDir := GetSubDir("Archive Directory Structure",ExpenseAttachment.GetCreatedDate,"Company Code in Archive","Company Code")
      ;

          SourcePath := "Archive Path" + FromSubDir;
          DestPath := "Archive Path" + ToSubDir;

          IF NOT FileSysMgt.DirectoryExists(DestPath) THEN
            FileSysMgt.CreateDirectory(DestPath);

          Filename := FileSysMgt.GetFilename(ExpenseAttachment.GetServerFilenameAndPath);
          SourceFile := SourcePath + Filename;
          DestFile := DestPath + Filename;

          IF FILE.EXISTS(SourceFile) THEN
            IF NOT FILE.RENAME(SourceFile,DestFile) THEN
              NotMoved := NotMoved + 1;
        UNTIL ExpenseAttachment.NEXT = 0;

      Counter := 0;
      IF ExpenseInboxAttachment.FINDFIRST THEN
        REPEAT
          Window.UPDATE(1,Counter);
          Counter := Counter + 1;
          IF ExpenseInbox.GET(ExpenseInboxAttachment."Expense Inbox Entry No.") THEN
            IF ExpenseInbox.Status IN [ExpenseInbox.Status::Pending,ExpenseInbox.Status::Error] THEN BEGIN
              FromSubDir :=
                GetSubDir(xRec."Archive Directory Structure",ExpenseInboxAttachment.GetCreatedDate,
                  xRec."Company Code in Archive",xRec."Company Code");
              ToSubDir :=
                GetSubDir("Archive Directory Structure",ExpenseInboxAttachment.GetCreatedDate,"Company Code in Archive","Company Code");

              SourcePath := "Archive Path" + FromSubDir;
              DestPath := "Archive Path" + ToSubDir;

              IF NOT FileSysMgt.DirectoryExists(DestPath) THEN
                FileSysMgt.CreateDirectory(DestPath);

              Filename := FileSysMgt.GetFilename(ExpenseInboxAttachment.GetServerFilenameAndPath);
              SourceFile := SourcePath + Filename;
              DestFile := DestPath + Filename;

              IF FILE.EXISTS(SourceFile) THEN
                IF NOT FILE.RENAME(SourceFile,DestFile) THEN
                  NotMoved := NotMoved + 1;
            END;
        UNTIL ExpenseInboxAttachment.NEXT = 0;

      IF NotMoved > 0 THEN
        ERROR(TextNotmoved,NotMoved);

      CLEAR(FileSysMgt);
      Window.CLOSE;
    END;

    PROCEDURE GetArchiveDirFromDate@1160040005(Date@1160040000 : Date;CreateDir@1160040002 : Boolean) Path : Text[1024];
    BEGIN
      GET;
      Path := "Archive Path" + GetSubDir("Archive Directory Structure",Date,"Company Code in Archive","Company Code");

      IF CreateDir THEN
        IF NOT FileSystemMgt.DirectoryExists(Path) THEN
          FileSystemMgt.CreateDirectory(Path);
    END;

    PROCEDURE GetSubDir@1160040006(Structure@1160040000 : Integer;Date@1160040001 : Date;CompCodeInArchive@1160040002 : Boolean;CompanyCode@1160040003 : Code[20]) : Text[1024];
    VAR
      Path@1160040006 : Text[1024];
      Day@1160040005 : Code[2];
      Month@1160040004 : Code[2];
      DayInteger@1160040008 : Integer;
      MonthInteger@1160040007 : Integer;
    BEGIN
      MonthInteger := DATE2DMY(Date,2);
      DayInteger := DATE2DMY(Date,1);

      IF MonthInteger < 10 THEN
        Month := '0' + FORMAT(MonthInteger)
      ELSE
        Month := FORMAT(MonthInteger);

      IF DayInteger < 10 THEN
        Day := '0' + FORMAT(DayInteger)
      ELSE
        Day := FORMAT(DayInteger);

      IF CompCodeInArchive AND (CompanyCode <> '') THEN
        Path := '\' + CompanyCode + '\'
      ELSE
        Path := '\';

      CASE Structure OF
        "Archive Directory Structure"::"One Directory":
          EXIT(Path);
        "Archive Directory Structure"::"Year\Month":
          EXIT(Path + STRSUBSTNO('%1\%2\',DATE2DMY(Date,3),Month));
        "Archive Directory Structure"::"Year\Month\Day":
          EXIT(Path + STRSUBSTNO('%1\%2\%3\',DATE2DMY(Date,3),Month,Day));
      END;
    END;

    PROCEDURE GetShortcutFieldName@161024012(WebDimNo@161024012 : Integer) : Text[50];
    VAR
      EMSetup@161024013 : Record 6086300;
      DimCode@161024014 : Code[20];
      FieldType@1160040000 : Record 6086345;
    BEGIN
      IF NOT EMSetup.GET THEN
        EXIT;

      CASE WebDimNo OF
        1:
          DimCode := EMSetup."Shortcut Field 1 Approval";
        2:
          DimCode := EMSetup."Shortcut Field 2 Approval";
        3:
          DimCode := EMSetup."Shortcut Field 3 Approval";
        4:
          DimCode := EMSetup."Shortcut Field 4 Approval";
        5:
          DimCode := EMSetup."Shortcut Field 5 Approval";
        6:
          DimCode := EMSetup."Shortcut Field 6 Approval";
        7:
          DimCode := EMSetup."Shortcut Field 7 Approval";
        8:
          DimCode := EMSetup."Shortcut Field 8 Approval";
        9:
          DimCode := EMSetup."Shortcut Field 9 Approval";
        10:
          DimCode := EMSetup."Shortcut Field 10 Approval";
      END;

      IF FieldType.GET(DimCode) THEN
        EXIT(FieldType.GetFieldCaptionForApp);
    END;

    PROCEDURE GetShortcutFieldCode@1160040000(WebDimNo@161024012 : Integer) : Text[50];
    VAR
      EMSetup@161024013 : Record 6086300;
      DimCode@1160040000 : Code[20];
    BEGIN
      IF NOT EMSetup.GET THEN
        EXIT;

      CASE WebDimNo OF
        1:
          DimCode := EMSetup."Shortcut Field 1 Approval";
        2:
          DimCode := EMSetup."Shortcut Field 2 Approval";
        3:
          DimCode := EMSetup."Shortcut Field 3 Approval";
        4:
          DimCode := EMSetup."Shortcut Field 4 Approval";
        5:
          DimCode := EMSetup."Shortcut Field 5 Approval";
        6:
          DimCode := EMSetup."Shortcut Field 6 Approval";
        7:
          DimCode := EMSetup."Shortcut Field 7 Approval";
        8:
          DimCode := EMSetup."Shortcut Field 8 Approval";
        9:
          DimCode := EMSetup."Shortcut Field 9 Approval";
        10:
          DimCode := EMSetup."Shortcut Field 10 Approval";
      END;

      EXIT(DimCode);
    END;

    BEGIN
    {
      4PS, Objects renumbered
    }
    END.
  }
}

