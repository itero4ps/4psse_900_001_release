OBJECT Table 6086320 Expense
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW16.00.10.1.03.00,4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 439=rimd,
                TableData 6086002=r,
                TableData 6086300=r;
    OnInsert=BEGIN
               TESTFIELD(Posted,FALSE);
               "Date Created" := TODAY;
               "Created By" := USERID;
             END;

    OnModify=VAR
               SendToExpUser@1160040000 : Codeunit 6086324;
             BEGIN
               TESTFIELD(Posted,FALSE);
               IF NOT SuspendInboxCheck THEN
                 IF ExistsInInbox THEN
                   ERROR(ExpenseInboxFoundErr);

               IF (Status = Status::"Pending Expense User") AND (NOT SkipSendToExpUser) THEN
                 SendToExpUser.UpdateWithoutFiles(Rec);
             END;

    OnDelete=VAR
               ApprovalEntry@1160040009 : Record 454;
               ApprovalCmtLineLine@1160040001 : Record 455;
               ExpenseReminder@1160040006 : Record 6086319;
               ExpenseAllocation@1160040004 : Record 6086321;
               ExpenseAttachment@1160040003 : Record 6086326;
               ExpenseCommLog@1160040005 : Record 6086329;
               ExpenseDimension@1160040002 : Record 6086353;
               ExpenseComment@1160040007 : Record 6086355;
               ExpenseMatchMgt@1160040000 : Codeunit 6086311;
             BEGIN
               TESTFIELD(Posted,FALSE);
               TESTFIELD(Status,Status::Open);

               IF "Matched to Bank Transaction" THEN
                 IF NOT CONFIRM(DeleteAndExclude,FALSE) THEN
                   ERROR(DeleteAborted);

               ExpenseAllocation.LOCKTABLE;
               ExpenseAllocation.SETCURRENTKEY("Expense Entry No.");
               ExpenseAllocation.SETRANGE("Expense Entry No.","Entry No.");
               ExpenseAllocation.DELETEALL(TRUE);

               ExpenseMatchMgt.DeleteExpenseMatch(Rec);

               ExpenseDimension.LOCKTABLE;
               ExpenseDimension.SETRANGE("Expense Entry No.","Entry No.");
               ExpenseDimension.DELETEALL;

               ExpenseAttachment.LOCKTABLE;
               ExpenseAttachment.SETCURRENTKEY("Expense Entry No.");
               ExpenseAttachment.SETRANGE("Expense Entry No.","Entry No.");
               ExpenseAttachment.DELETEALL(TRUE);

               ExpenseReminder.SETRANGE("Expense Entry No.","Entry No.");
               ExpenseReminder.DELETEALL(TRUE);

               IF Status = Status::"Pending Expense User" THEN
                 EMOnlineMgt.DeleteExpense("Expense GUID");

               ExpenseComment.SETCURRENTKEY("Expense Entry No.");
               ExpenseComment.SETRANGE("Expense Entry No.","Entry No.");
               ExpenseComment.DELETEALL(TRUE);

               ApprovalEntry.SETRANGE("Table ID",DATABASE::"Expense Management Setup");
               ApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type"::Invoice);
               ApprovalEntry.SETRANGE("Document No.",FORMAT("Entry No."));
               ApprovalEntry.DELETEALL(TRUE);

               ApprovalCmtLineLine.SETCURRENTKEY("Table ID","Document Type","Document No.");
               ApprovalCmtLineLine.SETRANGE("Table ID",DATABASE::Expense);
               ApprovalCmtLineLine.SETRANGE("Document Type",ApprovalCmtLineLine."Document Type"::Invoice);
               ApprovalCmtLineLine.SETRANGE("Document No.",FORMAT("Entry No."));
               ApprovalCmtLineLine.DELETEALL(TRUE);

               ExpenseCommLog.SETRANGE("Expense Entry No.","Entry No.");
               ExpenseCommLog.DELETEALL(TRUE);
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=ENU=Expense;
    LookupPageID=Page6086317;
    DrillDownPageID=Page6086317;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=ENU=Entry No. }
    { 2   ;   ;Employee No.        ;Code50        ;TableRelation="Continia User Setup";
                                                   OnValidate=VAR
                                                                ContiniaUserSetup@1160040000 : Record 6086002;
                                                                EmptyGuid@1160040001 : GUID;
                                                              BEGIN
                                                                IF "Employee No." = xRec."Employee No." THEN
                                                                  EXIT;

                                                                TESTFIELD(Status,Status::Open);

                                                                IF NOT SupressAllocationsExist THEN
                                                                  IF AllocationsExists THEN
                                                                    ERROR(ExpenseAllocatedErr,FIELDCAPTION("Employee No."));

                                                                IF xRec."Employee No." <> "Employee No." THEN BEGIN
                                                                  TESTFIELD("Matched to Bank Transaction",FALSE);
                                                                  IF NOT SuspendInboxCheck THEN
                                                                    IF ExistsInInbox THEN
                                                                      ERROR(ExpenseInboxFoundErr);

                                                                  IF "Expense GUID" <> EmptyGuid THEN
                                                                    "Expense GUID" := EmptyGuid;
                                                                END;

                                                                VALIDATE("Expense Type");

                                                                ExpValidate.RUN(Rec);
                                                                CALCFIELDS("Employee Name");

                                                                DeleteOldDefaultDim;
                                                                AddDefaultDim;
                                                              END;

                                                   CaptionML=ENU=Employee No. }
    { 3   ;   ;Employee Name       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Continia User".Name WHERE (User ID=FIELD(Employee No.)));
                                                   CaptionML=ENU=Employee Name;
                                                   Editable=No }
    { 4   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 5   ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 6   ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                ExpValidate.RUN(Rec);
                                                              END;

                                                   CaptionML=ENU=Document Date;
                                                   NotBlank=Yes }
    { 7   ;   ;Date Created        ;Date          ;CaptionML=ENU=Date Created }
    { 8   ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                VALIDATE("Expense Type");
                                                              END;

                                                   CaptionML=ENU=Country/Region Code;
                                                   NotBlank=Yes }
    { 9   ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                UpdateAmount(FIELDNO("Currency Code"));
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 10  ;   ;No Refund           ;Boolean       ;CaptionML=ENU=No Refund }
    { 11  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT SupressAllocationsExist THEN
                                                                  IF AllocationsExists THEN
                                                                    ERROR(ExpenseAllocatedErr,FIELDCAPTION(Amount));

                                                                UpdateAmount(FIELDNO(Amount));
                                                              END;

                                                   CaptionML=ENU=Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 12  ;   ;Amount (LCY)        ;Decimal       ;OnValidate=BEGIN
                                                                IF AllocationsExists THEN
                                                                  ERROR(ExpenseAllocatedErr,FIELDCAPTION("Amount (LCY)"));

                                                                UpdateAmount(FIELDNO("Amount (LCY)"));
                                                              END;

                                                   CaptionML=ENU=Amount (LCY);
                                                   AutoFormatType=1 }
    { 13  ;   ;Created Doc. Type   ;Integer       ;CaptionML=ENU=Created Doc. Type }
    { 14  ;   ;Created Doc. Subtype;Integer       ;CaptionML=ENU=Created Doc. Subtype }
    { 15  ;   ;Created Doc. ID     ;Code20        ;CaptionML=ENU=Created Doc. ID }
    { 16  ;   ;Created Doc. Ref. No.;Integer      ;CaptionML=ENU=Created Doc. Ref. No. }
    { 17  ;   ;Created By          ;Code50        ;CaptionML=ENU=Created By }
    { 23  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                UpdateGlobalDim(1,"Global Dimension 1 Code");
                                                                ExpValidate.RUN(Rec);
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 24  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                UpdateGlobalDim(2,"Global Dimension 2 Code");
                                                                ExpValidate.RUN(Rec);
                                                              END;

                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 25  ;   ;Transfer Attachments to CO;Boolean ;CaptionML=ENU=Transfer Attachments to CO }
    { 26  ;   ;Allocated Amount (LCY);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Expense Allocation"."Amount (LCY)" WHERE (Expense Entry No.=FIELD(Entry No.)));
                                                   CaptionML=ENU=Allocated Amount (LCY);
                                                   Editable=No }
    { 50  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   OnValidate=BEGIN
                                                                IF ("Gen. Prod. Posting Group" <> '') AND ("Job No." <> '') THEN
                                                                  ERROR(JobProductPostingGroup,FIELDCAPTION("Gen. Prod. Posting Group"),FIELDCAPTION("Job No."));
                                                              END;

                                                   CaptionML=ENU=Job No. }
    { 51  ;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   CaptionML=ENU=Job Task No. }
    { 60  ;   ;Cash/Private Card   ;Boolean       ;OnValidate=VAR
                                                                CEMField@1160040001 : Record 6086345;
                                                                ExpenseDim@1160040000 : Record 6086353;
                                                              BEGIN
                                                                IF "Cash/Private Card" THEN
                                                                  TESTFIELD("Matched to Bank Transaction",FALSE);

                                                                ExpenseDim.SETRANGE("Expense Entry No.","Entry No.");
                                                                IF CEMField.GET(FIELDNAME("Cash/Private Card")) THEN BEGIN
                                                                  ExpenseDim.SETRANGE("Field Code",CEMField.Code);
                                                                  ExpenseDim."Field Value" := FORMAT("Cash/Private Card");
                                                                  IF NOT ExpenseDim.INSERT THEN
                                                                    ExpenseDim.MODIFY;
                                                                END;

                                                                ExpValidate.RUN(Rec);
                                                              END;

                                                   CaptionML=ENU=Cash/Private Card }
    { 71  ;   ;On Hold             ;Code3         ;CaptionML=ENU=On Hold }
    { 72  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Expense Comment" WHERE (Expense Entry No.=FIELD(Entry No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 73  ;   ;Original Expense Entry No.;Integer ;CaptionML=ENU=Original Expense Entry No. }
    { 80  ;   ;Post                ;Boolean       ;CaptionML=ENU=Post }
    { 100 ;   ;Expense GUID        ;GUID          ;CaptionML=ENU=Expense GUID }
    { 110 ;   ;Expense Account     ;Code20        ;TableRelation="G/L Account";
                                                   OnValidate=VAR
                                                                ExpCmtMgt@1160040000 : Codeunit 6086323;
                                                              BEGIN
                                                                "Exp. Account Manually Changed" := CurrFieldNo = FIELDNO("Expense Account");

                                                                IF CurrFieldNo = FIELDNO("Expense Account") THEN
                                                                  ExpCmtMgt.AddExpFieldValueChanged("Entry No.",FIELDNO("Expense Account"),FIELDCAPTION("Expense Account"),
                                                                    xRec."Expense Account","Expense Account")
                                                                ELSE
                                                                  ExpCmtMgt.DelExpFieldValueChangedCmt("Entry No.",FIELDNO("Expense Account"));
                                                              END;

                                                   CaptionML=ENU=Expense Account }
    { 111 ;   ;Exp. Account Manually Changed;Boolean;
                                                   CaptionML=ENU=Expense Account Manually Changed }
    { 112 ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF ("Gen. Prod. Posting Group" <> '') AND ("Job No." <> '') THEN
                                                                  ERROR(JobProductPostingGroup,FIELDCAPTION("Gen. Prod. Posting Group"),FIELDCAPTION("Job No."));
                                                              END;

                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 113 ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 120 ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Open,Pending Expense User,Pending Approval,Rejected,Approved;
                                                   OptionString=Open,Pending Expense User,Pending Approval,Rejected,Approved;
                                                   Editable=No }
    { 130 ;   ;Current Reminder Level;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Max("Expense Reminder".No. WHERE (Expense Entry No.=FIELD(Entry No.)));
                                                   CaptionML=ENU=Current Reminder Level;
                                                   Editable=No }
    { 180 ;   ;Expense Type        ;Code20        ;TableRelation="Expense Type";
                                                   OnValidate=VAR
                                                                ContiniaUserSetup@1160040002 : Record 6086002;
                                                                ExpenseType@1160040000 : Record 6086307;
                                                                ExpPostingSetup@1160040001 : Record 6086309;
                                                              BEGIN
                                                                IF NOT ExpenseType.GET("Expense Type") THEN
                                                                  CLEAR(ExpenseType);

                                                                VALIDATE("No Refund",ExpenseType."No Refund");
                                                                VALIDATE(Fee,ExpenseType.Fee);

                                                                IF NOT ContiniaUserSetup.GET("Employee No.") THEN
                                                                  CLEAR(ContiniaUserSetup);

                                                                IF (ExpenseType.Code <> '') AND
                                                                   ExpPostingSetup.FindPostingSetup("Expense Type","Country/Region Code","Employee No.",ContiniaUserSetup."Expense User Group")
                                                                THEN BEGIN
                                                                  VALIDATE("Expense Account",ExpPostingSetup."G/L Account No.");
                                                                  "Gen. Prod. Posting Group" := ExpPostingSetup."Gen. Prod. Posting Group";
                                                                  "VAT Prod. Posting Group" := ExpPostingSetup."VAT Prod. Posting Group";
                                                                END ELSE BEGIN
                                                                  VALIDATE("Expense Account",'');
                                                                  "Gen. Prod. Posting Group" := '';
                                                                  "VAT Prod. Posting Group" := '';
                                                                END;

                                                                "Exp. Account Manually Changed" := FALSE;

                                                                ExpValidate.RUN(Rec);
                                                              END;

                                                   CaptionML=ENU=Expense Type }
    { 190 ;   ;Fee                 ;Boolean       ;CaptionML=ENU=Fee }
    { 200 ;   ;Matched to Bank Transaction;Boolean;CaptionML=ENU=Matched to Bank Transaction;
                                                   Editable=No }
    { 220 ;   ;Posted              ;Boolean       ;OnValidate=BEGIN
                                                                "Posted Date Time" := CURRENTDATETIME;
                                                                "Posted by" := USERID;
                                                              END;

                                                   CaptionML=ENU=Posted;
                                                   Editable=No }
    { 221 ;   ;Posted Date Time    ;DateTime      ;CaptionML=ENU=Posted Date Time }
    { 222 ;   ;Posted by           ;Code50        ;CaptionML=ENU=Posted by }
    { 260 ;   ;No. of Attachments  ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Expense Attachment" WHERE (Expense Entry No.=FIELD(Entry No.)));
                                                   CaptionML=ENU=No. of Attachments;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Expense GUID                             }
    {    ;Employee No.,Currency Code,Document Date;SumIndexFields=Amount,Amount (LCY) }
    {    ;Employee No.,Document Date               }
    {    ;Employee No.,Status,Posted              ;SumIndexFields=Amount (LCY) }
    {    ;Created Doc. Type,Created Doc. Subtype,Created Doc. ID,Created Doc. Ref. No. }
    {    ;Status                                  ;SumIndexFields=Amount (LCY) }
    {    ;Posted,Employee No.,Status,Document Date }
    {    ;Posted,Posted Date Time,Entry No.        }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EMSetup@1160040011 : Record 6086300;
      EMOnlineMgt@1160040006 : Codeunit 6086305;
      ExpValidate@1160040003 : Codeunit 6086321;
      ExpSetupShortcutFieldCode@1160040013 : ARRAY [10] OF Code[20];
      ExpSetupShortcutApprovalCode@1160040021 : ARRAY [10] OF Code[20];
      SkipSendToExpUser@1160040015 : Boolean;
      SupressAllocationsExist@1160040018 : Boolean;
      BothExpMatchedErr@1160040002 : TextConst 'ENU=Both expenses are matched to bank transactions and can therefore not be merged.';
      ExpenseAllocatedErr@1160040017 : TextConst 'ENU=This expense has been allocated and therefore you cannot change %1.';
      FileAlreadyExistErr@1160040014 : TextConst 'ENU=The file name ''%1'' already exist for this expense and cannot be imported.\Please rename it before importing.';
      OneOrMoreExpenseError@1160040016 : TextConst 'ENU=There are one or more unprocessed entries in the Expense Inbox.';
      OneOrMoreBankTransError@1160040022 : TextConst 'ENU=There are one or more unprocessed entries in the Bank Transaction Inbox.';
      ProcessInboxAsapTxt@1160040023 : TextConst 'ENU=\\You should process these as soon as possible.';
      SpecifyParentFieldErr@1160040001 : TextConst 'ENU=You must first specify a value for %1.';
      UnableToMergeWithAllocErr@1160040004 : TextConst 'ENU=Expense %1 cannot be merged when it has been allocated to one or more lines.';
      ExpenseInboxFoundErr@1160040008 : TextConst 'ENU=This expense cannot be changed as there is an unprocessed line in the Expense Inbox.\\The line in the Expense Inbox must be processed before the Expense can be updated.';
      MergeAmtDiffQuestion@1160040005 : TextConst 'ENU=The amount one the two expenses selected are not the same.\The Amount (%1 %2) from the expense matched to the bank transaction will be used.\\Do you want to continue?';
      MergeAmtDiffErr@1160040007 : TextConst 'ENU=The amount one the two expenses must be the same.';
      Text001@1160040000 : TextConst 'ENU=You cannot rename a %1.';
      SuspendInboxCheck@1160040009 : Boolean;
      ConfirmMergeTxt@1160040010 : TextConst 'ENU=Do you want to merge the two selected expenses?';
      JobProductPostingGroup@1160040012 : TextConst 'ENU=You cannot specify %1 and %2 at the same time.';
      DeleteAndExclude@1160040019 : TextConst 'ENU=The Expense is matched to a bank transaction. Would you like to delete the matching and exclude the transaction?';
      DeleteAborted@1160040020 : TextConst 'ENU=The expense was not deleted as it was matched with a bank transaction';

    LOCAL PROCEDURE UpdateAmount@1160040007(CalledByFieldNo@1160040002 : Integer);
    VAR
      Currency@1160040000 : Record 4;
      GLSetup@1160040005 : Record 98;
      CurrExchRate@1160040001 : Record 330;
      CurrencyDate@1160040004 : Date;
      CurrencyFactor@1160040003 : Decimal;
    BEGIN
      TESTFIELD("Matched to Bank Transaction",FALSE);

      GLSetup.GET;
      IF "Currency Code" <> '' THEN BEGIN
        IF "Document Date" = 0D THEN
          CurrencyDate := WORKDATE
        ELSE
          CurrencyDate := "Document Date";
      //CurrencyFactor := CurrExchRate.ExchangeRate(CurrencyDate,"Currency Code"); //**4PS.o
        CurrencyFactor := CurrExchRate.ExchangeRate(0,'',CurrencyDate,"Currency Code",FALSE); //**4PS.n
      END;

      CASE CalledByFieldNo OF
        // Currency code
        FIELDNO("Currency Code"):
          VALIDATE(Amount);

        // Amount
        FIELDNO(Amount):
          IF Currency.GET("Currency Code") THEN BEGIN
            Currency.TESTFIELD("Amount Rounding Precision");
            Amount := ROUND(Amount,Currency."Amount Rounding Precision");
            "Amount (LCY)" :=
      //      ROUND(CurrExchRate.ExchangeAmtFCYToLCY(CurrencyDate,"Currency Code",Amount,CurrencyFactor), //**4PS.o
              ROUND(CurrExchRate.ExchangeAmtFCYToLCY(0,'',CurrencyDate,"Currency Code",Amount,CurrencyFactor,FALSE), //**4PS.n
               GLSetup."Amount Rounding Precision");
          END ELSE BEGIN
            Amount := ROUND(Amount,GLSetup."Amount Rounding Precision");
            "Amount (LCY)" := Amount;
          END;

        // Amount (LCY)
        FIELDNO("Amount (LCY)"):
          BEGIN
            "Amount (LCY)" := ROUND("Amount (LCY)",GLSetup."Amount Rounding Precision");
            IF "Currency Code" <> '' THEN BEGIN
              Currency.GET("Currency Code");
              Currency.TESTFIELD("Amount Rounding Precision");
              Amount :=
                ROUND(
      //        CurrExchRate.ExchangeAmtLCYToFCY(CurrencyDate,"Currency Code", //**4PS.o
      //         "Amount (LCY)",CurrencyFactor),Currency."Amount Rounding Precision"); //**4PS.o
                CurrExchRate.ExchangeAmtLCYToFCY(0,'',CurrencyDate,"Currency Code",  //**4PS.n
                 "Amount (LCY)",CurrencyFactor,FALSE),Currency."Amount Rounding Precision");  //**4PS.n
            END ELSE
              Amount := "Amount (LCY)";
          END;
      END;
    END;

    PROCEDURE NextReminderDate@1160040018() : Date;
    VAR
      ContiniaUserSetup@1160040003 : Record 6086002;
      Remindercode@1160040002 : Record 6086317;
      ReminderLevel@1160040001 : Record 6086318;
      Reminder@1160040000 : Record 6086319;
    BEGIN
      IF NOT ContiniaUserSetup.GET("Employee No.") THEN
        EXIT(0D);

      IF NOT Remindercode.GET(ContiniaUserSetup."Expense Reminder Code") THEN
        EXIT(0D);

      Reminder.SETRANGE("Expense Entry No.","Entry No.");
      Reminder.SETRANGE("Reminder Terms Code",Remindercode.Code);
      IF NOT Reminder.FINDLAST THEN
        EXIT(TODAY);

      IF ReminderLevel.GET(Reminder."Reminder Terms Code",Reminder."No." + 1) THEN
        EXIT(CALCDATE(ReminderLevel."Grace Period",Reminder."Reminder Sent"))
      ELSE BEGIN
        ReminderLevel.SETRANGE("Reminder Terms Code",ContiniaUserSetup."Expense Reminder Code");
        IF ReminderLevel.FINDLAST THEN
          EXIT(CALCDATE(ReminderLevel."Grace Period",Reminder."Reminder Sent"))
        ELSE
          EXIT(CALCDATE('<+1D>',TODAY));
      END;
    END;

    PROCEDURE ShowReminders@1160040022();
    VAR
      Reminders@1160040000 : Page 6086305;
    BEGIN
      Reminders.SetExpense(Rec);
      Reminders.RUNMODAL;
    END;

    PROCEDURE CalcMatchedAmount@1160040027() : Decimal;
    VAR
      Match@1160040000 : Record 6086349;
      Sum@1160040001 : Decimal;
    BEGIN
      Sum := 0;
      Match.SETCURRENTKEY("Expense Entry No.");
      Match.SETRANGE("Expense Entry No.","Entry No.");
      IF Match.FINDFIRST THEN
        REPEAT
          Match.CALCFIELDS("Transaction Amount");
          Sum += Match."Transaction Amount";
        UNTIL Match.NEXT = 0;

      EXIT(Sum);
    END;

    PROCEDURE GetEmployeeEmail@1160040029() : Text[250];
    VAR
      ContiniaUser@1160040000 : Record 6086001;
    BEGIN
      IF ContiniaUser.GET("Employee No.") THEN
        EXIT(ContiniaUser."E-Mail");
    END;

    PROCEDURE MatchToBankTrans@1160040032();
    VAR
      BankTrans@1160040004 : Record 6086330;
      ExpenseMatch@1160040003 : Record 6086349;
      MatchBankTransForm@1160040000 : Page 6086341;
      ExpenseMatchMgt@1160040005 : Codeunit 6086311;
      Matching@1160040002 : Codeunit 6086311;
    BEGIN
      TESTFIELD("Cash/Private Card",FALSE);

      BankTrans.FILTERGROUP(2);
      BankTrans.SETCURRENTKEY("Employee No.","Matched to Expense","Currency Code","Exclude Entry");
      BankTrans.SETRANGE("Employee No.","Employee No.");
      BankTrans.SETRANGE(Posted,Posted);
      BankTrans.SETRANGE("Currency Code","Currency Code");
      BankTrans.FILTERGROUP(0);

      MatchBankTransForm.SetExpense(Rec);
      MatchBankTransForm.SETTABLEVIEW(BankTrans);

      ExpenseMatch.SETRANGE("Expense Entry No.","Entry No.");
      IF ExpenseMatch.FINDFIRST THEN BEGIN
        BankTrans.GET(ExpenseMatch."Transaction Entry No.");
        MatchBankTransForm.SETRECORD(BankTrans);
        MatchBankTransForm.SetCurrMatchedEntry(BankTrans."Entry No.");
      END;

      // THIS WILL SHOW THE MATCH SCREEN BUT WHERE IT IS NOT POSSIBLE TO CHANGE THE MATCHING IN ANY WAY
      IF Posted THEN BEGIN
        MatchBankTransForm.EDITABLE := FALSE;
        MatchBankTransForm.RUN;
        EXIT;
      END;

      MatchBankTransForm.LOOKUPMODE(TRUE);
      IF MatchBankTransForm.RUNMODAL = ACTION::LookupOK THEN BEGIN
        BankTrans.GET(MatchBankTransForm.GetMatchedTransaction);
        ExpenseMatchMgt.DeleteExpenseMatch(Rec);
        MODIFY;

        Matching.InsertMatch(BankTrans,Rec);
      END;

      GET("Entry No.");
    END;

    PROCEDURE Attach@1160040053(Filename@1160040000 : Text[1024]);
    VAR
      ExpenseAttachment@1160040002 : Record 6086326;
      FileSysMgt@1160040001 : Codeunit 6085584;
      FilenameWithoutPath@1160040004 : Text[1024];
      NextAttachNo@1160040003 : Integer;
      LastIndex@1160040005 : Integer;
    BEGIN
      IF ExistsInInbox THEN
        ERROR(ExpenseInboxFoundErr);

      LastIndex := FileSysMgt.LastIndexOf(Filename,'\',TRUE);

      IF LastIndex = 0 THEN
        EXIT;

      FilenameWithoutPath := COPYSTR(Filename,LastIndex + 1);

      ExpenseAttachment.SETCURRENTKEY("Expense Entry No.");
      ExpenseAttachment.SETRANGE("Expense Entry No.","Entry No.");
      ExpenseAttachment.SETRANGE(Filename,FilenameWithoutPath);
      IF NOT ExpenseAttachment.ISEMPTY THEN
        ERROR(FileAlreadyExistErr,FilenameWithoutPath);

      ExpenseAttachment.SETRANGE(Filename);

      Filename := FileSysMgt.GetFilename(Filename);
      ExpenseAttachment.INIT;
      ExpenseAttachment."Expense Entry No." := "Entry No.";
      ExpenseAttachment.Filename := FileSysMgt.GetFilename(Filename);
      ExpenseAttachment.INSERT(TRUE);

      ExpValidate.RUN(Rec);

      FileSysMgt.CopyFile(Filename,ExpenseAttachment.GetServerFilenameAndPath);
    END;

    PROCEDURE MergeExpenses@1160040004(VAR Expense1@1160040000 : Record 6086320;VAR Expense2@1160040001 : Record 6086320);
    VAR
      GLSetup@1160040008 : Record 98;
      MatchedExpense@1160040003 : Record 6086320;
      UnMatchedExpense@1160040002 : Record 6086320;
      ExpenseAttachment@1160040006 : Record 6086326;
      ExpenseMatch@1160040005 : Record 6086349;
      NewExpenseMatch@1160040004 : Record 6086349;
      CurrCode@1160040007 : Code[20];
    BEGIN
      IF Expense1."Matched to Bank Transaction" AND Expense2."Matched to Bank Transaction" THEN
        ERROR(BothExpMatchedErr);

      IF Expense1."Matched to Bank Transaction" THEN BEGIN
        MatchedExpense := Expense1;
        UnMatchedExpense := Expense2;
        UnMatchedExpense.TESTFIELD("Cash/Private Card",FALSE);
      END ELSE
        IF Expense2."Matched to Bank Transaction" THEN BEGIN
          MatchedExpense := Expense2;
          UnMatchedExpense := Expense1;
          UnMatchedExpense.TESTFIELD("Cash/Private Card",FALSE);
        END ELSE BEGIN
          MatchedExpense := Expense1;
          UnMatchedExpense := Expense2;
          IF MatchedExpense.Amount <> UnMatchedExpense.Amount THEN
            ERROR(MergeAmtDiffErr);
        END;

      IF NOT CONFIRM(ConfirmMergeTxt,TRUE) THEN
        EXIT;

      IF MatchedExpense.Amount <> UnMatchedExpense.Amount THEN BEGIN
        GLSetup.GET;
        IF MatchedExpense."Currency Code" <> '' THEN
          CurrCode := MatchedExpense."Currency Code"
        ELSE
          CurrCode := GLSetup."LCY Code";

        IF NOT CONFIRM(MergeAmtDiffQuestion,TRUE,CurrCode,MatchedExpense.Amount) THEN
          ERROR('');
      END;

      MatchedExpense.TESTFIELD(Posted,FALSE);
      UnMatchedExpense.TESTFIELD(Posted,FALSE);

      IF MatchedExpense.AllocationsExists THEN
        ERROR(UnableToMergeWithAllocErr);

      IF UnMatchedExpense.AllocationsExists THEN
        IF (UnMatchedExpense."Currency Code" <> MatchedExpense."Currency Code") OR
           (UnMatchedExpense.Amount <> MatchedExpense.Amount) OR
           (UnMatchedExpense."Amount (LCY)" <> MatchedExpense."Amount (LCY)")
        THEN
          ERROR(UnableToMergeWithAllocErr);

      ExpenseMatch.SETRANGE("Expense Entry No.",MatchedExpense."Entry No.");
      IF ExpenseMatch.FINDSET THEN
        REPEAT
          NewExpenseMatch := ExpenseMatch;
          NewExpenseMatch."Expense Entry No." := UnMatchedExpense."Entry No.";
          NewExpenseMatch.INSERT;
          ExpenseMatch.DELETE;
        UNTIL ExpenseMatch.NEXT = 0;

      ExpenseAttachment.SETCURRENTKEY("Expense Entry No.");
      ExpenseAttachment.SETRANGE("Expense Entry No.",MatchedExpense."Entry No.");
      IF ExpenseAttachment.FINDSET THEN
        REPEAT
          ExpenseAttachment."Expense Entry No." := UnMatchedExpense."Entry No.";
          ExpenseAttachment.MODIFY;
        UNTIL ExpenseAttachment.NEXT = 0;

      UnMatchedExpense."Employee No." := MatchedExpense."Employee No.";
      UnMatchedExpense."Document Date" := MatchedExpense."Document Date";
      UnMatchedExpense."Country/Region Code" := MatchedExpense."Country/Region Code";
      UnMatchedExpense."Currency Code" := MatchedExpense."Currency Code";
      UnMatchedExpense.Amount := MatchedExpense.Amount;
      UnMatchedExpense."Amount (LCY)" := MatchedExpense."Amount (LCY)";
      UnMatchedExpense."Matched to Bank Transaction" := MatchedExpense."Matched to Bank Transaction";
      UnMatchedExpense.MODIFY(TRUE);

      MatchedExpense."Matched to Bank Transaction" := FALSE;
      MatchedExpense.DELETE(TRUE);

      CODEUNIT.RUN(CODEUNIT::"Expense-Validate",UnMatchedExpense);
    END;

    PROCEDURE HasExpenseComment@1160040009() : Boolean;
    BEGIN
      CALCFIELDS(Comment);
      EXIT(Comment);
    END;

    PROCEDURE HasErrorComment@1160040017() : Boolean;
    VAR
      ExpCmt@1160040000 : Record 6086355;
    BEGIN
      ExpCmt.SETCURRENTKEY("Expense Entry No.");
      ExpCmt.SETRANGE("Expense Entry No.","Entry No.");
      ExpCmt.SETRANGE(Importance,ExpCmt.Importance::Error);
      EXIT(NOT ExpCmt.ISEMPTY);
    END;

    PROCEDURE HasApprovalComment@1160040013() : Boolean;
    VAR
      ApprovalCmtLine@1160040000 : Record 455;
    BEGIN
      ApprovalCmtLine.SETCURRENTKEY("Table ID","Document Type","Document No.");
      ApprovalCmtLine.SETRANGE("Table ID",DATABASE::Expense);
      ApprovalCmtLine.SETRANGE("Document Type",ApprovalCmtLine."Document Type"::Invoice);
      ApprovalCmtLine.SETRANGE("Document No.",FORMAT("Entry No."));
      EXIT(NOT ApprovalCmtLine.ISEMPTY);
    END;

    LOCAL PROCEDURE GetShortcutFieldCode@1160040008();
    BEGIN
      EMSetup.GET;
      ExpSetupShortcutFieldCode[1] := EMSetup."Shortcut Field 1 Code";
      ExpSetupShortcutFieldCode[2] := EMSetup."Shortcut Field 2 Code";
      ExpSetupShortcutFieldCode[3] := EMSetup."Shortcut Field 3 Code";
      ExpSetupShortcutFieldCode[4] := EMSetup."Shortcut Field 4 Code";
      ExpSetupShortcutFieldCode[5] := EMSetup."Shortcut Field 5 Code";
      ExpSetupShortcutFieldCode[6] := EMSetup."Shortcut Field 6 Code";
      ExpSetupShortcutFieldCode[7] := EMSetup."Shortcut Field 7 Code";
      ExpSetupShortcutFieldCode[8] := EMSetup."Shortcut Field 8 Code";
      ExpSetupShortcutFieldCode[9] := EMSetup."Shortcut Field 9 Code";
      ExpSetupShortcutFieldCode[10] := EMSetup."Shortcut Field 10 Code";
    END;

    LOCAL PROCEDURE GetShortcutApprovalCode@1160040030();
    BEGIN
      EMSetup.GET;
      ExpSetupShortcutApprovalCode[1] := EMSetup."Shortcut Field 1 Approval";
      ExpSetupShortcutApprovalCode[2] := EMSetup."Shortcut Field 2 Approval";
      ExpSetupShortcutApprovalCode[3] := EMSetup."Shortcut Field 3 Approval";
      ExpSetupShortcutApprovalCode[4] := EMSetup."Shortcut Field 4 Approval";
      ExpSetupShortcutApprovalCode[5] := EMSetup."Shortcut Field 5 Approval";
      ExpSetupShortcutApprovalCode[6] := EMSetup."Shortcut Field 6 Approval";
      ExpSetupShortcutApprovalCode[7] := EMSetup."Shortcut Field 7 Approval";
      ExpSetupShortcutApprovalCode[8] := EMSetup."Shortcut Field 8 Approval";
      ExpSetupShortcutApprovalCode[9] := EMSetup."Shortcut Field 9 Approval";
      ExpSetupShortcutApprovalCode[10] := EMSetup."Shortcut Field 10 Approval";
    END;

    PROCEDURE ShowShortcutFieldValues@1160040011(VAR ShortcutFieldValues@1160040000 : ARRAY [10] OF Text[250]);
    VAR
      ExpenseDim@1160040001 : Record 6086353;
      I@1160040002 : Integer;
      FieldType@1160040003 : Record 6086345;
      DimCode@1160040004 : Code[20];
    BEGIN
      GetShortcutFieldCode;
      FOR I := 1 TO 10 DO BEGIN
        ShortcutFieldValues[I] := '';
        IF ExpSetupShortcutFieldCode[I] <> '' THEN
          IF ExpenseDim.GET("Entry No.",'',ExpSetupShortcutFieldCode[I]) THEN
            ShortcutFieldValues[I] := ExpenseDim."Field Value"
          ELSE BEGIN
            IF FieldType.GET(ExpSetupShortcutFieldCode[I]) THEN
              DimCode := FieldType.GetDimCode;
            IF DimCode <> '' THEN
              ExpSetupShortcutFieldCode[I] := DimCode;
            IF ExpenseDim.GET("Entry No.",ExpSetupShortcutFieldCode[I],'') THEN
              ShortcutFieldValues[I] := ExpenseDim."Dimension Value Code";
           END;
      END;
    END;

    PROCEDURE ShowShortcutApprovalValues@1160040028(VAR ShortcutApprovalValues@1160040000 : ARRAY [10] OF Text[250]);
    VAR
      ExpenseDim@1160040004 : Record 6086353;
      I@1160040003 : Integer;
      FieldType@1160040002 : Record 6086345;
      DimCode@1160040001 : Code[20];
    BEGIN
      GetShortcutApprovalCode;
      FOR I := 1 TO 10 DO BEGIN
        ShortcutApprovalValues[I] := '';
        IF ExpSetupShortcutApprovalCode[I] <> '' THEN
          IF ExpenseDim.GET("Entry No.",'',ExpSetupShortcutApprovalCode[I]) THEN
            ShortcutApprovalValues[I] := ExpenseDim."Field Value"
          ELSE BEGIN
            IF FieldType.GET(ExpSetupShortcutApprovalCode[I]) THEN
              DimCode := FieldType.GetDimCode;
            IF DimCode <> '' THEN
              ExpSetupShortcutApprovalCode[I] := DimCode;
            IF ExpenseDim.GET("Entry No.",ExpSetupShortcutApprovalCode[I],'') THEN
              ShortcutApprovalValues[I] := ExpenseDim."Dimension Value Code";
           END;
      END;
    END;

    PROCEDURE GetShortcutFieldCaptions@1160040012(VAR ShortcutFieldCaptions@1160040000 : ARRAY [10] OF Text[250]);
    VAR
      FieldType@1160040001 : Record 6086345;
      I@1160040002 : Integer;
    BEGIN
      CLEAR(ShortcutFieldCaptions);

      GetShortcutFieldCode;
      FOR I := 1 TO 10 DO BEGIN
        ShortcutFieldCaptions[I] := '';
        IF ExpSetupShortcutFieldCode[I] <> '' THEN
          IF FieldType.GET(ExpSetupShortcutFieldCode[I]) THEN
            ShortcutFieldCaptions[I] := FieldType.Description;
      END;
    END;

    PROCEDURE GetShortcutApprovalCaptions@1160040031(VAR ShortcutApprovalCaptions@1160040000 : ARRAY [10] OF Text[250]);
    VAR
      FieldType@1160040001 : Record 6086345;
      I@1160040002 : Integer;
    BEGIN
      CLEAR(ShortcutApprovalCaptions);

      GetShortcutApprovalCode;
      FOR I := 1 TO 10 DO BEGIN
        ShortcutApprovalCaptions[I] := '';
        IF ExpSetupShortcutApprovalCode[I] <> '' THEN
          IF FieldType.GET(ExpSetupShortcutApprovalCode[I]) THEN
            ShortcutApprovalCaptions[I] := FieldType.Description;
      END;
    END;

    PROCEDURE ValidateShortcutFieldValue@1160040014(FieldNumber@1160040001 : Integer;VAR ShortcutFieldValue@1160040000 : Text[250]);
    VAR
      ExpenseDim@1160040002 : Record 6086353;
      SendToExpUser@1160040003 : Codeunit 6086324;
      FieldType@1160040006 : Record 6086345;
      DimCode@1160040004 : Code[20];
      FieldCode@1160040005 : Code[20];
    BEGIN
      GetShortcutFieldCode;

      FieldType.GET(ExpSetupShortcutFieldCode[FieldNumber]);
      IF FieldType.GetDimCode <> '' THEN
        DimCode := FieldType.GetDimCode
      ELSE
        FieldCode := ExpSetupShortcutFieldCode[FieldNumber];

      IF ShortcutFieldValue = '' THEN BEGIN
        IF ExpenseDim.GET("Entry No.",DimCode,FieldCode) THEN
          ExpenseDim.DELETE;
      END ELSE
        IF NOT ExpenseDim.GET("Entry No.",DimCode,FieldCode) THEN BEGIN
          ExpenseDim."Expense Entry No." := "Entry No.";
          ExpenseDim."Dimension Code" := DimCode;
          ExpenseDim."Field Code" := FieldCode;
          IF DimCode <> '' THEN
            ExpenseDim."Dimension Value Code" := ShortcutFieldValue
          ELSE
            ExpenseDim."Field Value" := ShortcutFieldValue;
          ExpenseDim.INSERT;
        END ELSE BEGIN
          IF DimCode <> '' THEN
            ExpenseDim."Dimension Value Code" := ShortcutFieldValue
          ELSE
            ExpenseDim."Field Value" := ShortcutFieldValue;
          ExpenseDim.MODIFY;
        END;

      SendToExpUser.UpdateWithoutFiles(Rec);
      ExpValidate.RUN(Rec);
    END;

    PROCEDURE LookupShortcutFieldValue@1160040006(FieldNumber@1160040001 : Integer;VAR Text@1160040000 : Text[250]) : Boolean;
    VAR
      FieldType@1160040002 : Record 6086345;
      LookupValue@1160040003 : Record 6086347;
      ExpDim@1160040004 : Record 6086353;
    BEGIN
      GetShortcutFieldCode;

      FieldType.GET(ExpSetupShortcutFieldCode[FieldNumber]);
      IF (FieldType."Source Table No." = 0) AND (NOT FieldType."Manual Lookup Values") THEN
        EXIT;

      LookupValue.SETRANGE("Field Type Code",FieldType.Code);
      IF FieldType.GetParentFieldTypeCode <> '' THEN BEGIN
        IF NOT ExpDim.GET("Entry No.",'',FieldType.GetParentFieldTypeCode) THEN
          ERROR(SpecifyParentFieldErr,FieldType.GetParentFieldTypeCode);

        ExpDim.GET("Entry No.",'',FieldType.GetParentFieldTypeCode);
        LookupValue.SETRANGE("Primary Code",ExpDim."Field Value");
      END;

      IF PAGE.RUNMODAL(0,LookupValue) = ACTION::LookupOK THEN BEGIN
        Text := LookupValue.Code;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE SetSkipSendToExpUser@1160040000(NewSkipSendToExpUser@1160040000 : Boolean);
    BEGIN
      SkipSendToExpUser := NewSkipSendToExpUser;
    END;

    LOCAL PROCEDURE UpdateGlobalDim@1160040002(DimensionNo@1160040000 : Integer;Value@1160040001 : Code[20]);
    VAR
      GLSetup@1160040004 : Record 98;
      FieldType@1160040003 : Record 6086345;
      ExpDim@1160040002 : Record 6086353;
      DimCode@1160040005 : Code[20];
    BEGIN
      GLSetup.GET;
      IF DimensionNo = 1 THEN
        DimCode := GLSetup."Global Dimension 1 Code"
      ELSE
        DimCode := GLSetup."Global Dimension 2 Code";

      IF FieldType.GET(DimCode) THEN
        IF Value = '' THEN BEGIN
          IF ExpDim.GET("Entry No.",DimCode) THEN
            ExpDim.DELETE;
        END ELSE
          IF ExpDim.GET("Entry No.",DimCode) THEN BEGIN
            ExpDim."Dimension Value Code" := Value;
            ExpDim.MODIFY;
          END ELSE BEGIN
            ExpDim.INIT;
            ExpDim."Expense Entry No." := "Entry No.";
            ExpDim."Dimension Code" := DimCode;
            ExpDim."Dimension Value Code" := Value;
            ExpDim.INSERT;
          END;
    END;

    PROCEDURE CheckUnProcessedInbox@1160040003();
    VAR
      ExpenseInbox@1160040000 : Record 6086323;
      BankTransInbox@1160040001 : Record 6086331;
      TextMessage@1160040002 : Text[1024];
    BEGIN
      ExpenseInbox.SETFILTER(Status,'<>%1',ExpenseInbox.Status::Accepted);
      IF NOT ExpenseInbox.ISEMPTY THEN
        TextMessage := OneOrMoreExpenseError;

      BankTransInbox.SETFILTER(Status,'<>%1',BankTransInbox.Status::Accepted);
      BankTransInbox.SETRANGE("Exclude Entry",FALSE);
      IF NOT BankTransInbox.ISEMPTY THEN BEGIN
        IF TextMessage <> '' THEN
          TextMessage := TextMessage + '\\';
        TextMessage := TextMessage + OneOrMoreBankTransError;
      END;

      IF TextMessage <> '' THEN
        MESSAGE(TextMessage + ProcessInboxAsapTxt);
    END;

    PROCEDURE SupressAllocationCheck@1160040015();
    BEGIN
      SupressAllocationsExist := TRUE;
    END;

    PROCEDURE AllocationsExists@1160040001() : Boolean;
    VAR
      ExpenseAllocation@1160040000 : Record 6086321;
    BEGIN
      ExpenseAllocation.SETCURRENTKEY("Expense Entry No.");
      ExpenseAllocation.SETRANGE("Expense Entry No.","Entry No.");
      IF NOT ExpenseAllocation.ISEMPTY THEN
        EXIT(TRUE);
    END;

    PROCEDURE LookupGlobalDim@1160040010(VAR Text@1160040001 : Text[1024];DimNo@1160040000 : Integer) : Boolean;
    VAR
      GLSetup@1160040003 : Record 98;
      DimValue@1160040002 : Record 349;
      DimCode@1160040004 : Code[20];
    BEGIN
      GLSetup.GET;
      IF DimNo = 1 THEN
        DimCode := GLSetup."Global Dimension 1 Code"
      ELSE
        IF DimNo = 2 THEN
          DimCode := GLSetup."Global Dimension 2 Code";

      IF DimCode = '' THEN
        EXIT;

      DimValue.SETRANGE("Dimension Code",DimCode);
      IF DimValue.GET(DimCode,Text) THEN;

      IF PAGE.RUNMODAL(0,DimValue) = ACTION::LookupOK THEN BEGIN
        Text := DimValue.Code;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetStatusCaption@1160040016(StatusAsInt@1160040000 : Integer) : Text[30];
    VAR
      Expense@1160040001 : Record 6086320;
    BEGIN
      Expense.Status := StatusAsInt;
      EXIT(FORMAT(Expense.Status));
    END;

    PROCEDURE Navigate@2();
    VAR
      NavigateExpense@1000 : Codeunit 6086322;
    BEGIN
      NavigateExpense.NavigateExpense(Rec);
    END;

    PROCEDURE SetSuspendInboxCheck@1160040005(NewSuspend@1160040000 : Boolean);
    BEGIN
      SuspendInboxCheck := NewSuspend;
    END;

    PROCEDURE PostingSetupChanged@1160040019(VAR NewCalculatedAccount@1160040002 : Code[20]) : Boolean;
    VAR
      ExpensePostingSetup@1160040000 : Record 6086309;
      ContiniaUserSetup@1160040001 : Record 6086002;
    BEGIN
      IF "Exp. Account Manually Changed" THEN
        EXIT(FALSE);

      IF NOT ContiniaUserSetup.GET("Employee No.") THEN
        EXIT(FALSE);

      ExpensePostingSetup.FindPostingSetup("Expense Type","Country/Region Code","Employee No.",ContiniaUserSetup."Expense User Group");
      NewCalculatedAccount := ExpensePostingSetup."G/L Account No.";
      EXIT("Expense Account" <> NewCalculatedAccount);
    END;

    PROCEDURE ExistsInInbox@1160040020() : Boolean;
    VAR
      ExpenseInbox@1160040000 : Record 6086323;
    BEGIN
      ExpenseInbox.SETCURRENTKEY("Expense GUID");
      ExpenseInbox.SETRANGE("Expense GUID","Expense GUID");
      ExpenseInbox.SETFILTER(Status,'%1|%2',ExpenseInbox.Status::Pending,ExpenseInbox.Status::Error);
      IF NOT ExpenseInbox.ISEMPTY THEN
        EXIT(TRUE);
    END;

    PROCEDURE BankIntegrationExists@1160040021() : Boolean;
    VAR
      BankAgreement@1160040000 : Record 6086315;
    BEGIN
      EXIT(NOT BankAgreement.ISEMPTY);
    END;

    PROCEDURE IsSyncRequired@1160040023() : Boolean;
    BEGIN
      EXIT(EMOnlineMgt.IsSyncRequired(Rec));
    END;

    PROCEDURE CheckGLDefaultDim@1160040025(VAR FailingAccount@1160040004 : Code[20]) : Boolean;
    VAR
      DefaultDim@1160040002 : Record 352;
      ExpDim@1160040001 : Record 6086353;
      ExpenseAlloc@1160040003 : Record 6086321;
      ExpenseAllocDim@1160040000 : Record 6086357;
    BEGIN
      DefaultDim.SETCURRENTKEY("Table ID");
      DefaultDim.SETRANGE("Table ID",DATABASE::"G/L Account");
      DefaultDim.SETRANGE("No.","Expense Account");
      FailingAccount := "Expense Account";
      IF DefaultDim.FINDSET THEN
        REPEAT
          CASE DefaultDim."Value Posting" OF
            DefaultDim."Value Posting"::"No Code":
              IF ExpDim.GET("Entry No.",DefaultDim."Dimension Code",'') THEN
                EXIT(FALSE);

            DefaultDim."Value Posting"::"Same Code":
              BEGIN
                IF NOT ExpDim.GET("Entry No.",DefaultDim."Dimension Code",'') THEN
                  EXIT(FALSE)
                ELSE
                  IF ExpDim."Dimension Value Code" <> DefaultDim."Dimension Value Code" THEN
                    EXIT(FALSE);
              END;

            DefaultDim."Value Posting"::"Code Mandatory":
              IF NOT ExpDim.GET("Entry No.",DefaultDim."Dimension Code",'') THEN
                EXIT(FALSE);
          END;
        UNTIL DefaultDim.NEXT = 0;

      ExpenseAlloc.SETCURRENTKEY("Expense Entry No.");
      ExpenseAlloc.SETRANGE("Expense Entry No.","Entry No.");
      IF ExpenseAlloc.FINDSET THEN
        REPEAT
          DefaultDim.SETCURRENTKEY("Table ID");
          DefaultDim.SETRANGE("Table ID",DATABASE::"G/L Account");
          DefaultDim.SETRANGE("No.",ExpenseAlloc."Expense Account");
          FailingAccount := ExpenseAlloc."Expense Account";
          IF DefaultDim.FINDSET THEN
            REPEAT
              CASE DefaultDim."Value Posting" OF
                DefaultDim."Value Posting"::"No Code":
                  IF ExpenseAllocDim.GET(ExpenseAlloc."Entry No.",DefaultDim."Dimension Code") THEN
                    EXIT(FALSE);

                DefaultDim."Value Posting"::"Same Code":
                  IF NOT ExpenseAllocDim.GET(ExpenseAlloc."Entry No.",DefaultDim."Dimension Code") THEN
                    EXIT(FALSE)
                  ELSE
                    IF ExpenseAllocDim."Dimension Value Code" <> DefaultDim."Dimension Value Code" THEN
                      EXIT(FALSE);

                DefaultDim."Value Posting"::"Code Mandatory":
                  IF NOT ExpenseAllocDim.GET(ExpenseAlloc."Entry No.",DefaultDim."Dimension Code") THEN
                    EXIT(FALSE);
              END;
            UNTIL DefaultDim.NEXT = 0;
        UNTIL ExpenseAlloc.NEXT = 0;

      EXIT(TRUE);
    END;

    PROCEDURE AddDefaultDim@1160040024();
    VAR
      ContiniaUser@1160040001 : Record 6086002;
      DimMgt@1160040000 : Codeunit 6086318;
    BEGIN
      IF ContiniaUser.GET("Employee No.") THEN
        IF ContiniaUser."Vendor No." <> '' THEN
          DimMgt.InsertDefaultDimExpense(ContiniaUser."Vendor No.",Rec);
    END;

    PROCEDURE DeleteOldDefaultDim@1160040026();
    VAR
      ContiniaUser@1160040001 : Record 6086002;
      DimMgt@1160040000 : Codeunit 6086318;
    BEGIN
      IF ContiniaUser.GET(xRec."Employee No.") THEN
        IF ContiniaUser."Vendor No." <> '' THEN
          DimMgt.DeleteDefaultDimExpense(ContiniaUser."Vendor No.",Rec);
    END;

    BEGIN
    {
      4PS, Objects renumbered
    }
    END.
  }
}

