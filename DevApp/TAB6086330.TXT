OBJECT Table 6086330 Bank Transaction
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW16.00.10.1.02.00;
  }
  PROPERTIES
  {
    OnDelete=VAR
               ExpenseMatchMgt@1160040000 : Codeunit 6086311;
             BEGIN
               TESTFIELD("Matched to Expense",FALSE);
               ExpenseMatchMgt.DeleteBankTransMatch(Rec);
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=ENU=Bank Transaction;
    LookupPageID=Page6086332;
    DrillDownPageID=Page6086332;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=ENU=Entry No.;
                                                   NotBlank=Yes }
    { 2   ;   ;Card Id             ;Code20        ;OnValidate=VAR
                                                                EmployeeCards@1160040000 : Record 6086311;
                                                              BEGIN
                                                                EmployeeCards.SETRANGE("Card No.","Card Id");
                                                                EmployeeCards.FINDFIRST;
                                                                "Employee No." := EmployeeCards."Continia User ID";
                                                              END;

                                                   CaptionML=ENU=Card ID }
    { 3   ;   ;Card Name           ;Text50        ;CaptionML=ENU=Card Name }
    { 5   ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 6   ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date }
    { 7   ;   ;Currency Code       ;Code10        ;OnValidate=BEGIN
                                                                TESTFIELD("Matched to Expense",FALSE);
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 8   ;   ;Currency Exch. Rate ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Matched to Expense",FALSE);
                                                              END;

                                                   CaptionML=ENU=Currency Exch. Rate }
    { 9   ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Matched to Expense",FALSE);
                                                              END;

                                                   CaptionML=ENU=Amount }
    { 10  ;   ;Amount (LCY)        ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Matched to Expense",FALSE);
                                                              END;

                                                   CaptionML=ENU=Amount (LCY) }
    { 11  ;   ;Entry Type          ;Integer       ;CaptionML=ENU=Entry Type }
    { 12  ;   ;Business Category Id;Code10        ;CaptionML=ENU=Business Category ID }
    { 13  ;   ;Business No.        ;Code20        ;CaptionML=ENU=Business No. }
    { 14  ;   ;Business Name       ;Text80        ;CaptionML=ENU=Business Name }
    { 15  ;   ;Business Address    ;Text80        ;CaptionML=ENU=Business Address }
    { 16  ;   ;Business Address 2  ;Text80        ;CaptionML=ENU=Business Address 2 }
    { 17  ;   ;Business Address 3  ;Text80        ;CaptionML=ENU=Business Address 3 }
    { 18  ;   ;Business Country/Region;Code10     ;CaptionML=ENU=Business Country/Region }
    { 19  ;   ;Business Post Code  ;Code10        ;CaptionML=ENU=Business Post Code }
    { 20  ;   ;Bank Entry Id       ;Code50        ;CaptionML=ENU=Bank Entry Id }
    { 40  ;   ;Bank Code           ;Code10        ;TableRelation="CEM Bank";
                                                   CaptionML=ENU=Bank Code }
    { 41  ;   ;Bank Country/Region Code;Code10    ;TableRelation="Bank Agreement"."Country/Region Code" WHERE (Bank Code=FIELD(Bank Code));
                                                   CaptionML=ENU=Bank Country/Region Code }
    { 50  ;   ;Employee No.        ;Code50        ;TableRelation="Continia User Setup";
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Matched to Expense",FALSE);
                                                                VALIDATE("Card Id");
                                                              END;

                                                   CaptionML=ENU=Employee No. }
    { 51  ;   ;Exclude Entry       ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Matched to Expense",FALSE);
                                                              END;

                                                   CaptionML=ENU=Exclude Entry }
    { 70  ;   ;Posted              ;Boolean       ;CaptionML=ENU=Posted }
    { 100 ;   ;Bank Agreement Id   ;Text30        ;TableRelation="Bank Agreement"."Agreement Id" WHERE (Bank Code=FIELD(Bank Code),
                                                                                                        Country/Region Code=FIELD(Bank Country/Region Code));
                                                   CaptionML=ENU=Bank Agreement ID }
    { 180 ;   ;Expense Type        ;Code20        ;TableRelation="Expense Type";
                                                   CaptionML=ENU=Expense Type }
    { 200 ;   ;Matched to Expense  ;Boolean       ;CaptionML=ENU=Matched to Expense;
                                                   Editable=No }
    { 250 ;   ;Suspect             ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Suspect,FALSE);
                                                              END;

                                                   CaptionML=ENU=Suspect }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Employee No.,Matched to Expense,Currency Code,Exclude Entry;
                                                   SumIndexFields=Amount,Amount (LCY) }
    {    ;Employee No.,Currency Code,Document Date;SumIndexFields=Amount,Amount (LCY) }
    {    ;Matched to Expense                       }
    {    ;Card Id,Posting Date                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      OneOrMoreError@1160040001 : TextConst 'ENU=There are one or more unprocessed Bank Transactions in the inbox.\\You should process these as soon as possible.';
      Text001@1160040000 : TextConst 'ENU=You cannot rename a %1.';
      TransNotMatchedErr@1160040002 : TextConst 'ENU=This bank transaction is not matched to any expenses.';

    PROCEDURE CheckUnProcessedBankInbox@1160040003();
    VAR
      Expense@1160040000 : Record 6086320;
    BEGIN
      Expense.CheckUnProcessedInbox;
    END;

    PROCEDURE CalcSuspect@1160040001() : Boolean;
    VAR
      CardTrans@1160040000 : Record 6086330;
    BEGIN
      CardTrans.SETFILTER("Entry No.",'<>%1',"Entry No.");
      CardTrans.SETRANGE("Card Id","Card Id");
      CardTrans.SETRANGE("Currency Code","Currency Code");
      CardTrans.SETRANGE("Posting Date","Posting Date");
      CardTrans.SETRANGE(Amount,Amount);
      EXIT(CardTrans.FINDFIRST);
    END;

    PROCEDURE ApplyMappingRule@1160040002();
    VAR
      BankMappingRule@1160040000 : Record 6086350;
    BEGIN
      IF "Expense Type" <> '' THEN
        EXIT;
      BankMappingRule.UseBankMappingRules(Rec);
      IF "Expense Type" <> '' THEN
        Rec.MODIFY;
    END;

    PROCEDURE MatchAndCreateExpense@1160040011();
    VAR
      CountryRegion@1160040003 : Record 9;
      EMSetup@1160040005 : Record 6086300;
      ExpenseType@1160040000 : Record 6086307;
      Expense@1160040002 : Record 6086320;
      Matching@1160040007 : Codeunit 6086311;
      ExpValidate@1160040004 : Codeunit 6086321;
      NextEntryNo@1160040001 : Integer;
    BEGIN
      EMSetup.GET;
      IF ExpenseType.GET("Expense Type") THEN
        IF ExpenseType.Fee THEN
          EXIT;

      IF Matching.MatchInsertExpense(Rec,Expense) THEN
        EXIT;

      Expense.RESET;

      IF Expense.FINDLAST THEN
        NextEntryNo := Expense."Entry No." + 1
      ELSE
        NextEntryNo := 1;

      Expense.INIT;
      Expense."Entry No." := NextEntryNo;
      Expense."Employee No." := "Employee No.";
      Expense.Description := COPYSTR("Business Name",1,MAXSTRLEN(Expense.Description));
      Expense."Document Date" := "Document Date";
      IF CountryRegion.GET("Business Country/Region") THEN
        Expense."Country/Region Code" := "Business Country/Region";
      Expense."Currency Code" := "Currency Code";
      Expense.Amount := Amount;
      Expense."Amount (LCY)" := "Amount (LCY)";
      Expense.VALIDATE("Expense Type","Expense Type");
      Expense."Created By" := USERID;
      Expense.INSERT(TRUE);

      Matching.InsertMatch(Rec,Expense);
      Expense.FIND('=');
      ExpValidate.RUN(Expense);

      CODEUNIT.RUN(CODEUNIT::"Expense - Send to Expense User",Expense);
    END;

    PROCEDURE ShowMatchedExpense@1160040000();
    VAR
      Expense@1160040001 : Record 6086320;
      ExpenseMatch@1160040000 : Record 6086349;
    BEGIN
      IF NOT "Matched to Expense" THEN
        ERROR(TransNotMatchedErr);

      ExpenseMatch.SETCURRENTKEY("Transaction Entry No.");
      ExpenseMatch.SETRANGE("Transaction Entry No.","Entry No.");
      ExpenseMatch.FINDFIRST;

      Expense.SETRANGE("Entry No.",ExpenseMatch."Expense Entry No.");
      Expense.FINDFIRST;
      IF NOT Expense.Posted THEN
        PAGE.RUN(PAGE::Expenses,Expense)
      ELSE
        PAGE.RUN(PAGE::"Posted Expenses",Expense);
    END;

    BEGIN
    END.
  }
}

