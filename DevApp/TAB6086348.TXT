OBJECT Table 6086348 Table Filter Field EM
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW16.00.10.1.02.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "Table Filter GUID" = EmptyGUID THEN
                 "Table Filter GUID" := CREATEGUID;
             END;

    CaptionML=ENU=Table Filter Field;
    DrillDownPageID=Page6086338;
  }
  FIELDS
  {
    { 1   ;   ;Table Filter GUID   ;GUID          ;CaptionML=ENU=Table Filter GUID }
    { 2   ;   ;Table No.           ;Integer       ;CaptionML=ENU=Table No. }
    { 3   ;   ;Field No.           ;Integer       ;CaptionML=ENU=Field No. }
    { 4   ;   ;Value (Text)        ;Text250       ;CaptionML=ENU=Value (Text) }
    { 5   ;   ;Value (Integer)     ;Integer       ;CaptionML=ENU=Value (Integer) }
    { 6   ;   ;Value (Date)        ;Date          ;CaptionML=ENU=Value (Date) }
    { 7   ;   ;Value (Decimal)     ;Decimal       ;CaptionML=ENU=Value (Decimal) }
    { 8   ;   ;Value (Boolean)     ;Boolean       ;CaptionML=ENU=Value (Boolean) }
    { 9   ;   ;Filter Type         ;Option        ;CaptionML=ENU=Filter Type;
                                                   OptionCaptionML=ENU=Fixed Filter,Field Type;
                                                   OptionString=Fixed Filter,Field Type }
    { 11  ;   ;Field Type Code     ;Code20        ;TableRelation="Field Type";
                                                   CaptionML=ENU=Field Type Code }
  }
  KEYS
  {
    {    ;Table Filter GUID,Field No.             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EmptyGUID@1160040001 : GUID;
      Text001@1160040000 : TextConst 'ENU=Field type %1 not supported for Table filtering.';

    PROCEDURE SetValues@161024012(VAR Value@1160040000 : Text[250];VAR FilterType@1160040009 : 'Fixed Filter,Field Type');
    VAR
      Field@1160040001 : Record 2000000041;
      i@1160040002 : Integer;
    BEGIN
      "Value (Text)" := '';
      "Value (Integer)" := 0;
      "Value (Date)" := 0D;
      "Value (Decimal)" := 0;
      "Value (Boolean)" := FALSE;
      "Field Type Code" := '';

      IF FilterType = FilterType::"Fixed Filter" THEN BEGIN
        Field.GET("Table No.","Field No.");

        CASE Field.Type OF
          Field.Type::Code:
            VALIDATE("Value (Text)",UPPERCASE(Value));
          Field.Type::Text:
            VALIDATE("Value (Text)",Value);
          Field.Type::Date:
            IF EVALUATE("Value (Date)",Value) THEN;
          Field.Type::Decimal:
            IF EVALUATE("Value (Decimal)",Value) THEN;
          Field.Type::Boolean:
            IF EVALUATE("Value (Boolean)",Value) THEN;
          Field.Type::Integer:
            IF EVALUATE("Value (Integer)",Value) THEN;
          Field.Type::Option:
            BEGIN
              i := OptionToInt("Table No.","Field No.",Value);
              IF i > -1 THEN
                "Value (Integer)" := i
              ELSE
                IF EVALUATE("Value (Integer)",Value) THEN;
            END;
          ELSE
            ERROR(Text001,FORMAT(Field.Type));
        END;
      END ELSE
        VALIDATE("Field Type Code",Value);

      "Filter Type" := FilterType;
      GetValues(Value,FilterType);
    END;

    PROCEDURE GetValues@161024013(VAR Value@1160040007 : Text[250];VAR FilterType@1160040006 : 'Fixed Filter,Field Type');
    VAR
      Field@1160040002 : Record 2000000041;
      RecRef@1160040001 : RecordRef;
      FieldRef@1160040000 : FieldRef;
    BEGIN
      Value := '';
      FilterType := "Filter Type";

      IF "Filter Type" = "Filter Type"::"Fixed Filter" THEN BEGIN
        IF NOT Field.GET("Table No.","Field No.") THEN
          EXIT;

        CASE Field.Type OF
          Field.Type::Text,Field.Type::Code:
            Value := "Value (Text)";
          Field.Type::Date:
            Value := FORMAT(FORMAT("Value (Date)"));
          Field.Type::Decimal:
            Value := FORMAT(FORMAT("Value (Decimal)"));
          Field.Type::Boolean:
            Value := FORMAT(FORMAT("Value (Boolean)"));
          Field.Type::Integer:
            Value := FORMAT(FORMAT("Value (Integer)"));
          Field.Type::Option:
            BEGIN
              IF "Value (Integer)" > 0 THEN BEGIN
                RecRef.OPEN("Table No.");
                FieldRef := RecRef.FIELD("Field No.");
                Value := FORMAT(SELECTSTR("Value (Integer)",FieldRef.OPTIONCAPTION));
              END;
            END;
          ELSE
            ERROR(Text001,FORMAT(FieldRef.TYPE));
        END;
      END ELSE
        Value := "Field Type Code";
    END;

    LOCAL PROCEDURE OptionToInt@1160040002(TableNumber@1160040000 : Integer;FieldNumber@1160040001 : Integer;OptionAsText@1160040002 : Text[250]) : Integer;
    VAR
      RecRef@1160040003 : RecordRef;
      FieldRef@1160040004 : FieldRef;
      CapVal@1160040005 : ARRAY [100] OF Text[1024];
      i@1160040006 : Integer;
    BEGIN
      RecRef.OPEN(TableNumber);
      FieldRef := RecRef.FIELD(FieldNumber);
      Split(FieldRef.OPTIONCAPTION,',',CapVal);
      i := 1;

      REPEAT
        IF UPPERCASE(CapVal[i]) = UPPERCASE(OptionAsText) THEN
          EXIT(i-1);
        i := i + 1;
      UNTIL i = 100;

      i := 1;
      REPEAT
        IF COPYSTR(UPPERCASE(CapVal[i]),1,STRLEN(OptionAsText)) = UPPERCASE(OptionAsText) THEN
          EXIT(i-1);
        i := i + 1;
      UNTIL i = 100;

      EXIT(-1);
    END;

    LOCAL PROCEDURE Split@1000000006(Text@1000000000 : Text[1024];Splitter@1000000001 : Text[1];VAR TextArray@1000000002 : ARRAY [100] OF Text[1024]);
    VAR
      i@1000000004 : Integer;
      Index@1000000003 : Integer;
    BEGIN
      i := STRPOS(Text,Splitter);

      WHILE (i <> 0) AND (Index < 100) DO BEGIN
        Index := Index + 1;
        IF i < MAXSTRLEN(TextArray[Index]) THEN
          TextArray[Index] := COPYSTR(Text,1,i-1)
        ELSE
          TextArray[Index] := COPYSTR(Text,1,MAXSTRLEN(TextArray[Index]));
        Text := COPYSTR(Text,i + 1);
        i := STRPOS(Text,Splitter);
      END;
      TextArray[Index + 1] := Text;
    END;

    PROCEDURE ShowTableFields@1160040008(TableNo@1160040001 : Integer;ShowFieldType@1160040007 : Boolean;FieldTypeCodeFilter@1160040003 : Code[20];VAR SourceGUID@1160040000 : GUID);
    VAR
      TableFilterField@161024012 : Record 6086348;
      Field@1160040002 : Record 2000000041;
      TableFilterFieldList@1160040005 : Page 6086338;
    BEGIN
      IF TableNo = 0 THEN
        EXIT;

      IF SourceGUID = EmptyGUID THEN
        SourceGUID := CREATEGUID;

      Field.FILTERGROUP(4);
      Field.SETRANGE(TableNo,TableNo);
      Field.SETRANGE(Enabled,TRUE);
      Field.SETRANGE(Class,Field.Class::Normal);
      Field.FILTERGROUP(0);
      IF Field.FINDFIRST THEN BEGIN
        TableFilterFieldList.SetParam(SourceGUID,FieldTypeCodeFilter,ShowFieldType);
        TableFilterFieldList.SETTABLEVIEW(Field);
        TableFilterFieldList.RUNMODAL;

        TableFilterField.SETRANGE("Table Filter GUID",SourceGUID);
        IF TableFilterField.ISEMPTY THEN
          CLEAR(SourceGUID);
      END;
    END;

    BEGIN
    END.
  }
}

