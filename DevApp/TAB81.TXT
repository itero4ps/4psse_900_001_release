OBJECT Table 81 Gen. Journal Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.45480,NAVSE9.FI9.DK9.NO9,4PS9.00,4PSSE.NO.FI,PE;
  }
  PROPERTIES
  {
    Permissions=TableData 1221=rimd,
                TableData 17=rm;
    OnInsert=BEGIN
               GenJnlAlloc.LOCKTABLE;
               LOCKTABLE;
               GenJnlTemplate.GET("Journal Template Name");
               GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
               "Posting No. Series" := GenJnlBatch."Posting No. Series";
               "Check Printed" := FALSE;

               ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
               ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
             END;

    OnModify=BEGIN
               TESTFIELD("Check Printed",FALSE);
               IF ("Applies-to ID" = '') AND (xRec."Applies-to ID" <> '') THEN
                 ClearCustVendApplnEntry;
             END;

    OnDelete=BEGIN
               ApprovalsMgmt.OnCancelGeneralJournalLineApprovalRequest(Rec);

               CheckNoCardTransactEntryExist(Rec);

               TESTFIELD("Check Printed",FALSE);

               ClearCustVendApplnEntry;
               ClearAppliedGenJnlLine;
               DeletePaymentFileErrors;
               ClearDataExchangeEntries(FALSE);

               GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
               GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
               GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
               GenJnlAlloc.DELETEALL;

               DeferralUtilities.DeferralCodeOnDelete(
                 DeferralDocType::"G/L",
                 "Journal Template Name",
                 "Journal Batch Name",0,'',"Line No.");

               VALIDATE("Incoming Document Entry No.",0);

               ResetDeleteInteresLinesICAcc(Rec);  //**4PS.n
               // PEB0065
               gBaseTables.DeleteTexLineEntrys(Rec)
               // 0065
             END;

    OnRename=BEGIN
               ApprovalsMgmt.RenameApprovalEntries(xRec.RECORDID,RECORDID);

               CheckNoCardTransactEntryExist(Rec);
               TESTFIELD("Check Printed",FALSE);
             END;

    CaptionML=ENU=Gen. Journal Line;
  }
  FIELDS
  {
    { 1   ;   ;Journal Template Name;Code10       ;TableRelation="Gen. Journal Template";
                                                   CaptionML=ENU=Journal Template Name }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 3   ;   ;Account Type        ;Option        ;OnValidate=BEGIN
                                                                IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Fixed Asset",
                                                                                       "Account Type"::"IC Partner"]) AND
                                                                   ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Fixed Asset",
                                                                                            "Bal. Account Type"::"IC Partner"])
                                                                THEN
                                                                  ERROR(
                                                                    Text000,
                                                                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
                                                                VALIDATE("Account No.",'');
                                                                VALIDATE(Description,'');
                                                                VALIDATE("IC Partner G/L Acc. No.",'');
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN BEGIN
                                                                  VALIDATE("Gen. Posting Type","Gen. Posting Type"::" ");
                                                                  VALIDATE("Gen. Bus. Posting Group",'');
                                                                  VALIDATE("Gen. Prod. Posting Group",'');
                                                                END ELSE
                                                                  IF "Bal. Account Type" IN [
                                                                                             "Bal. Account Type"::"G/L Account","Account Type"::"Bank Account","Bal. Account Type"::"Fixed Asset"]
                                                                  THEN
                                                                    VALIDATE("Payment Terms Code",'');
                                                                UpdateSource;

                                                                IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  "Depreciation Book Code" := '';
                                                                  VALIDATE("FA Posting Type","FA Posting Type"::" ");
                                                                END;
                                                                IF xRec."Account Type" IN
                                                                   [xRec."Account Type"::Customer,xRec."Account Type"::Vendor]
                                                                THEN BEGIN
                                                                  "Bill-to/Pay-to No." := '';
                                                                  "Ship-to/Order Address Code" := '';
                                                                  "Sell-to/Buy-from No." := '';
                                                                  "VAT Registration No." := '';
                                                                END;

                                                                IF "Journal Template Name" <> '' THEN
                                                                  IF "Account Type" = "Account Type"::"IC Partner" THEN BEGIN
                                                                    GetTemplate;
                                                                    IF GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany THEN
                                                                      FIELDERROR("Account Type");
                                                                  END;
                                                                IF "Account Type" <> "Account Type"::Customer THEN
                                                                  VALIDATE("Credit Card No.",'');

                                                                IF "Deferral Code" <> '' THEN
                                                                  IF "Account Type" IN ["Account Type"::"Fixed Asset","Account Type"::"IC Partner"] THEN
                                                                    ERROR(AccTypeNotSupportedErr);
                                                              END;

                                                   CaptionML=ENU=Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner }
    { 4   ;   ;Account No.         ;Code20        ;TableRelation=IF (Account Type=CONST(G/L Account),
                                                                     Receiving Company=FILTER('')) "G/L Account" WHERE (Account Type=CONST(Posting),
                                                                                                                        Blocked=CONST(No))
                                                                                                                        ELSE IF (Account Type=CONST(Customer),
                                                                                                                                 Receiving Company=FILTER('')) Customer
                                                                                                                                 ELSE IF (Account Type=CONST(Vendor),
                                                                                                                                          Receiving Company=FILTER('')) Vendor
                                                                                                                                          ELSE IF (Account Type=CONST(Bank Account),
                                                                                                                                                   Receiving Company=FILTER('')) "Bank Account"
                                                                                                                                                   ELSE IF (Account Type=CONST(Fixed Asset),
                                                                                                                                                            Receiving Company=FILTER('')) "Fixed Asset"
                                                                                                                                                            ELSE IF (Account Type=CONST(IC Partner),
                                                                                                                                                                     Receiving Company=FILTER('')) "IC Partner";
                                                   OnValidate=BEGIN
                                                                IF "Account No." <> xRec."Account No." THEN BEGIN
                                                                  ClearAppliedAutomatically;
                                                                  //VALIDATE("Job No.",''); //**4PS.o
                                                                END;

                                                                IF xRec."Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"IC Partner"] THEN
                                                                  "IC Partner Code" := '';

                                                                CheckCompanyIC;  //**4PS.n
                                                                IF "Account No." = '' THEN BEGIN
                                                                  CleanLine;
                                                                  EXIT;
                                                                END;

                                                                CASE "Account Type" OF
                                                                  "Account Type"::"G/L Account":
                                                                    BEGIN
                                                                      GLAcc.GET("Account No.");
                                                                      CheckGLAcc;
                                                                //    IF ReplaceDescription AND (NOT GLAcc."Omit Default Descr. in Jnl.") THEN //**4PS.o
                                                                      IF ReplaceDescription AND ReplaceDescriptionXtraCondition THEN //**4PS.n
                                                                        UpdateDescription(GLAcc.Name);
                                                                      IF ("Bal. Account No." = '') OR
                                                                         ("Bal. Account Type" IN
                                                                          ["Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account"])
                                                                      THEN BEGIN
                                                                        "Posting Group" := '';
                                                                        "Salespers./Purch. Code" := '';
                                                                        "Payment Terms Code" := '';
                                                                      END;
                                                                      IF "Bal. Account No." = '' THEN
                                                                        "Currency Code" := '';
                                                                      IF NOT GenJnlBatch.GET("Journal Template Name","Journal Batch Name") OR
                                                                         GenJnlBatch."Copy VAT Setup to Jnl. Lines"
                                                                      THEN BEGIN
                                                                        "Gen. Posting Type" := GLAcc."Gen. Posting Type";
                                                                        "Gen. Bus. Posting Group" := GLAcc."Gen. Bus. Posting Group";
                                                                        "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                                                                        "VAT Bus. Posting Group" := GLAcc."VAT Bus. Posting Group";
                                                                        "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
                                                                      END;
                                                                      "Auto. Acc. Group" := GLAcc."Auto. Acc. Group";  //NAVSE,NAVFI
                                                                      "Tax Area Code" := GLAcc."Tax Area Code";
                                                                      "Tax Liable" := GLAcc."Tax Liable";
                                                                      "Tax Group Code" := GLAcc."Tax Group Code";
                                                                      IF "Posting Date" <> 0D THEN
                                                                        IF "Posting Date" = CLOSINGDATE("Posting Date") THEN BEGIN
                                                                          ClearPostingGroups;
                                                                          "Auto. Acc. Group" := '';  //NAVSE,NAVFI
                                                                        END;
                                                                      VALIDATE("Deferral Code",GLAcc."Default Deferral Template Code");
                                                                    END;
                                                                  "Account Type"::Customer:
                                                                    BEGIN
                                                                      Cust.GET("Account No.");
                                                                      Cust.CheckBlockedCustOnJnls(Cust,"Document Type",FALSE);
                                                                      IF Cust."IC Partner Code" <> '' THEN BEGIN
                                                                        IF GenJnlTemplate.GET("Journal Template Name") THEN;
                                                                        IF (Cust."IC Partner Code" <> '' ) AND ICPartner.GET(Cust."IC Partner Code") THEN BEGIN
                                                                          ICPartner.CheckICPartnerIndirect(FORMAT("Account Type"),"Account No.");
                                                                          "IC Partner Code" := Cust."IC Partner Code";
                                                                        END;
                                                                      END;
                                                                      UpdateDescription(Cust.Name);
                                                                      "Payment Method Code" := Cust."Payment Method Code";
                                                                      VALIDATE("Recipient Bank Account",Cust."Preferred Bank Account");
                                                                      "Posting Group" := Cust."Customer Posting Group";
                                                                      "Salespers./Purch. Code" := Cust."Salesperson Code";
                                                                      "Payment Terms Code" := Cust."Payment Terms Code";
                                                                      IF "Receiving Company" = '' THEN BEGIN  //**4PS.n
                                                                        VALIDATE("Bill-to/Pay-to No.","Account No.");
                                                                        VALIDATE("Sell-to/Buy-from No.","Account No.");
                                                                      END; //**4PS.n
                                                                      IF NOT SetCurrencyCode("Bal. Account Type","Bal. Account No.") THEN
                                                                        "Currency Code" := Cust."Currency Code";
                                                                      ClearPostingGroups;
                                                                      IF (Cust."Bill-to Customer No." <> '') AND (Cust."Bill-to Customer No." <> "Account No.") THEN
                                                                        IF NOT CONFIRM(Text014,FALSE,Cust.TABLECAPTION,Cust."No.",Cust.FIELDCAPTION("Bill-to Customer No."),
                                                                             Cust."Bill-to Customer No.")
                                                                        THEN
                                                                          ERROR('');
                                                                      VALIDATE("Payment Terms Code");
                                                                      "Recipient Bank Account" := Cust."Preferred Bank Account";
                                                                      CheckPaymentTolerance;
                                                                    END;
                                                                  "Account Type"::Vendor:
                                                                    BEGIN
                                                                      Vend.GET("Account No.");
                                                                      Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
                                                                      IF Vend."IC Partner Code" <> '' THEN BEGIN
                                                                        IF GenJnlTemplate.GET("Journal Template Name") THEN;
                                                                        IF (Vend."IC Partner Code" <> '') AND ICPartner.GET(Vend."IC Partner Code") THEN BEGIN
                                                                          ICPartner.CheckICPartnerIndirect(FORMAT("Account Type"),"Account No.");
                                                                          "IC Partner Code" := Vend."IC Partner Code";
                                                                        END;
                                                                      END;
                                                                      UpdateDescription(Vend.Name);
                                                                      "Payment Method Code" := Vend."Payment Method Code";
                                                                      "Creditor No." := Vend."Creditor No.";
                                                                      "Giro Acc. No." := Vend."Giro Acc. No.";  //NAVDK
                                                                      VALIDATE("Recipient Bank Account",Vend."Preferred Bank Account");
                                                                      "Posting Group" := Vend."Vendor Posting Group";
                                                                      "Salespers./Purch. Code" := Vend."Purchaser Code";
                                                                      "Payment Terms Code" := Vend."Payment Terms Code";
                                                                      IF "Receiving Company" = '' THEN BEGIN  //**4PS.n
                                                                        VALIDATE("Bill-to/Pay-to No.","Account No.");
                                                                        VALIDATE("Sell-to/Buy-from No.","Account No.");
                                                                      END; //**4PS.n
                                                                      IF NOT SetCurrencyCode("Bal. Account Type","Bal. Account No.") THEN
                                                                        "Currency Code" := Vend."Currency Code";
                                                                      ClearPostingGroups;
                                                                      IF (Vend."Pay-to Vendor No." <> '') AND (Vend."Pay-to Vendor No." <> "Account No.") AND
                                                                         NOT HideValidationDialog
                                                                      THEN
                                                                        IF NOT CONFIRM(Text014,FALSE,Vend.TABLECAPTION,Vend."No.",Vend.FIELDCAPTION("Pay-to Vendor No."),
                                                                             Vend."Pay-to Vendor No.")
                                                                        THEN
                                                                          ERROR('');
                                                                      VALIDATE("Payment Terms Code");
                                                                      "Recipient Bank Account" := Vend."Preferred Bank Account";
                                                                      CheckPaymentTolerance;
                                                                                                                                                                                                                                                                                        //NAVNO
                                                                      // PEB0052
                                                                      "External Document No." := Vend."External Document No.";
                                                                      // 0052
                                                                                                                                                                                                                                                                                        ReadGLSetup;
                                                                      IF GLSetup."Norwegian Localization Active" AND ("Document Type" = "Document Type"::Invoice) THEN BEGIN
                                                                      //IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                                                                        "Payment Type Code Abroad" := Vend."Payment Type Code Abroad";
                                                                        "Specification (Norges Bank)" := Vend."Specification (Norges Bank)";
                                                                      END;
                                                                      //NAVNO
                                                                    END;
                                                                  "Account Type"::"Bank Account":
                                                                    BEGIN
                                                                      BankAcc.GET("Account No.");
                                                                      BankAcc.TESTFIELD(Blocked,FALSE);
                                                                      IF ReplaceDescription THEN
                                                                        UpdateDescription(BankAcc.Name);
                                                                      IF ("Bal. Account No." = '') OR
                                                                         ("Bal. Account Type" IN
                                                                          ["Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account"])
                                                                      THEN BEGIN
                                                                        "Posting Group" := '';
                                                                        "Salespers./Purch. Code" := '';
                                                                        "Payment Terms Code" := '';
                                                                      END;
                                                                      IF BankAcc."Currency Code" = '' THEN BEGIN
                                                                        IF "Bal. Account No." = '' THEN
                                                                          "Currency Code" := '';
                                                                      END ELSE
                                                                        IF SetCurrencyCode("Bal. Account Type","Bal. Account No.") THEN
                                                                          BankAcc.TESTFIELD("Currency Code","Currency Code")
                                                                        ELSE
                                                                          "Currency Code" := BankAcc."Currency Code";
                                                                      ClearPostingGroups;
                                                                    END;
                                                                  "Account Type"::"Fixed Asset":
                                                                    BEGIN
                                                                      FA.GET("Account No.");
                                                                      FA.TESTFIELD(Blocked,FALSE);
                                                                      FA.TESTFIELD(Inactive,FALSE);
                                                                      FA.TESTFIELD("Budgeted Asset",FALSE);
                                                                      UpdateDescription(FA.Description);
                                                                      "Depreciation Book Code" := FA.GetFA_MainDeprBook("Account No.",TRUE);  //**4PS.n
                                                                      IF "Depreciation Book Code" = '' THEN BEGIN
                                                                        FASetup.GET;
                                                                        "Depreciation Book Code" := FASetup."Default Depr. Book";
                                                                        IF NOT FADeprBook.GET("Account No.","Depreciation Book Code") THEN
                                                                          "Depreciation Book Code" := '';
                                                                      END;
                                                                      IF "Depreciation Book Code" <> '' THEN BEGIN
                                                                        FADeprBook.GET("Account No.","Depreciation Book Code");
                                                                        "Posting Group" := FADeprBook."FA Posting Group";
                                                                      END;
                                                                      GetFAVATSetup;
                                                                      GetFAAddCurrExchRate;
                                                                    END;
                                                                  "Account Type"::"IC Partner":
                                                                    BEGIN
                                                                      ICPartner.GET("Account No.");
                                                                      ICPartner.CheckICPartner;
                                                                      UpdateDescription(ICPartner.Name);
                                                                      IF ("Bal. Account No." = '') OR ("Bal. Account Type" = "Bal. Account Type"::"G/L Account") THEN
                                                                        "Currency Code" := ICPartner."Currency Code";
                                                                      IF ("Bal. Account Type" = "Bal. Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
                                                                        "Currency Code" := ICPartner."Currency Code";
                                                                      ClearPostingGroups;
                                                                      "IC Partner Code" := "Account No.";
                                                                    END;
                                                                END;

                                                                VALIDATE("Currency Code");
                                                                VALIDATE("VAT Prod. Posting Group");
                                                                UpdateLineBalance;
                                                                UpdateSource;
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n
                                                                  DATABASE::"Plant Type", "Plant Type", //**4PS.n
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Service Order","Service Order No.", //** 4PS 09-06-2010
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,"Campaign No.");

                                                                VALIDATE("IC Partner G/L Acc. No.",GetDefaultICPartnerGLAccNo);
                                                                ValidateApplyRequirements(Rec);
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS.sn
                                                              CheckCompanyIC;
                                                              CASE "Account Type" OF
                                                                "Account Type"::"G/L Account":
                                                                  BEGIN
                                                                    GLAcc."No." := "Account No.";
                                                                    IF PAGE.RUNMODAL(0, GLAcc) = ACTION::LookupOK THEN
                                                                      IF ("Job No." = '') AND ("Service Order No." = '') AND ("Plant Type" = '') THEN
                                                                        VALIDATE("Account No.", GLAcc."No.");
                                                                  END;
                                                                "Account Type"::Customer:
                                                                  BEGIN
                                                                    Cust."No." := "Account No.";
                                                                    IF PAGE.RUNMODAL(0, Cust) = ACTION::LookupOK THEN
                                                                      VALIDATE("Account No.", Cust."No.");
                                                                  END;
                                                                "Account Type"::Vendor:
                                                                  BEGIN
                                                                    Vend."No." := "Account No.";
                                                                    IF PAGE.RUNMODAL(0, Vend) = ACTION::LookupOK THEN
                                                                      VALIDATE("Account No.", Vend."No.");
                                                                  END;
                                                                "Account Type"::"Bank Account":
                                                                  BEGIN
                                                                    BankAcc."No." := "Account No.";
                                                                    IF PAGE.RUNMODAL(0, BankAcc) = ACTION::LookupOK THEN
                                                                      VALIDATE("Account No.", BankAcc."No.");
                                                                  END;
                                                                "Account Type"::"Fixed Asset":
                                                                  BEGIN
                                                                    FA."No." := "Account No.";
                                                                    IF PAGE.RUNMODAL(0, FA) = ACTION::LookupOK THEN
                                                                      VALIDATE("Account No.", FA."No.");
                                                                  END;
                                                              END;
                                                              //**4PS.en
                                                            END;

                                                   CaptionML=ENU=Account No. }
    { 5   ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Document Date","Posting Date");
                                                                VALIDATE("Currency Code");
                                                                VALIDATE("Interest Date"); //**4PS.n

                                                                IF ("Posting Date" <> xRec."Posting Date") AND (Amount <> 0) THEN
                                                                  PaymentToleranceMgt.PmtTolGenJnl(Rec);

                                                                ValidateApplyRequirements(Rec);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;

                                                                IF "Deferral Code" <> '' THEN
                                                                  VALIDATE("Deferral Code");
                                                              END;

                                                   CaptionML=ENU=Posting Date;
                                                   ClosingDates=Yes }
    { 6   ;   ;Document Type       ;Option        ;OnValidate=BEGIN
                                                                VALIDATE("Payment Terms Code");
                                                                IF "Account No." <> '' THEN
                                                                  CASE "Account Type" OF
                                                                    "Account Type"::Customer:
                                                                      BEGIN
                                                                        Cust.GET("Account No.");
                                                                        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",FALSE);
                                                                      END;
                                                                    "Account Type"::Vendor:
                                                                      BEGIN
                                                                        Vend.GET("Account No.");
                                                                        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
                                                                      END;
                                                                  END;
                                                                IF "Bal. Account No." <> '' THEN
                                                                  CASE "Bal. Account Type" OF
                                                                    "Account Type"::Customer:
                                                                      BEGIN
                                                                        Cust.GET("Bal. Account No.");
                                                                        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",FALSE);
                                                                      END;
                                                                    "Account Type"::Vendor:
                                                                      BEGIN
                                                                        Vend.GET("Bal. Account No.");
                                                                        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
                                                                      END;
                                                                  END;
                                                                UpdateSalesPurchLCY;
                                                                ValidateApplyRequirements(Rec);
                                                                IF NOT ("Document Type" IN ["Document Type"::Payment,"Document Type"::Refund]) THEN
                                                                  VALIDATE("Credit Card No.",'');
                                                              END;

                                                   CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 7   ;   ;Document No.        ;Code20        ;OnValidate=BEGIN
                                                                CheckNoCardTransactEntryExist(xRec);
                                                              END;

                                                   CaptionML=ENU=Document No. }
    { 8   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 10  ;   ;VAT %               ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                IF "VAT Posting" = "VAT Posting"::"Automatic VAT Entry" THEN   //**4PS.n
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      "VAT Amount" :=
                                                                        ROUND(Amount * "VAT %" / (100 + "VAT %"),Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount - "VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    "VAT Amount" := Amount;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    IF ("Gen. Posting Type" = "Gen. Posting Type"::Purchase) AND
                                                                       "Use Tax"
                                                                    THEN BEGIN
                                                                      "VAT Amount" := 0;
                                                                      "VAT %" := 0;
                                                                    END ELSE BEGIN
                                                                      "VAT Amount" :=
                                                                        Amount -
                                                                        SalesTaxCalculate.ReverseCalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable",
                                                                          "Posting Date",Amount,Quantity,"Currency Factor");
                                                                      IF Amount - "VAT Amount" <> 0 THEN
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / (Amount - "VAT Amount"),0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      "VAT Amount" :=
                                                                        ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                END;
                                                                "VAT Base Amount" := Amount - "VAT Amount";
                                                                "VAT Difference" := 0;

                                                                IF "Currency Code" = '' THEN
                                                                  "VAT Amount (LCY)" := "VAT Amount"
                                                                ELSE
                                                                  "VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        //**4PS.so
                                                                        //"Posting Date","Currency Code",
                                                                        //"VAT Amount","Currency Factor"));
                                                                        //**4PS.eo
                                                                        //**4PS.sn
                                                                        0,'', "Posting Date","Currency Code",
                                                                        "VAT Amount","Currency Factor","Account Type" = "Account Type"::Customer));
                                                                        //**4PS.en
                                                                "VAT Base Amount (LCY)" := "Amount (LCY)" - "VAT Amount (LCY)";

                                                                UpdateSalesPurchLCY;

                                                                IF "Deferral Code" <> '' THEN
                                                                  VALIDATE("Deferral Code");
                                                              END;

                                                   CaptionML=ENU=VAT %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 11  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account" WHERE (Account Type=CONST(Posting),
                                                                                                                                Blocked=CONST(No))
                                                                                                                                ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                                                                                ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor
                                                                                                                                ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account"
                                                                                                                                ELSE IF (Bal. Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                                                                                ELSE IF (Bal. Account Type=CONST(IC Partner)) "IC Partner";
                                                   OnValidate=BEGIN
                                                                //VALIDATE("Job No.",''); //**4PS.o

                                                                IF xRec."Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,
                                                                                                "Bal. Account Type"::"IC Partner"]
                                                                THEN
                                                                  "IC Partner Code" := '';

                                                                IF "Bal. Account No." = '' THEN BEGIN
                                                                  UpdateLineBalance;
                                                                  UpdateSource;
                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                    DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                    DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n
                                                                    DATABASE::"Plant Type", "Plant Type", //**4PS.n
                                                                    DATABASE::Job,"Job No.",
                                                                    DATABASE::"Service Order","Service Order No.", //** 4PS 09-06-2010
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::Campaign,"Campaign No.");
                                                                  IF NOT ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) THEN
                                                                    "Recipient Bank Account" := '';
                                                                  IF xRec."Bal. Account No." <> '' THEN BEGIN
                                                                    ClearBalancePostingGroups;
                                                                    "Bal. Tax Area Code" := '';
                                                                    "Bal. Tax Liable" := FALSE;
                                                                    "Bal. Tax Group Code" := '';
                                                                    //**4PS.sn
                                                                    "Bal. VAT Amount" := 0;
                                                                    "Bal. VAT Posting" := "Bal. VAT Posting"::"Automatic VAT Entry";
                                                                    //**4PS.en
                                                                  END;
                                                                  EXIT;
                                                                END;

                                                                CASE "Bal. Account Type" OF
                                                                  "Bal. Account Type"::"G/L Account":
                                                                    BEGIN
                                                                      GLAcc.GET("Bal. Account No.");
                                                                      CheckGLAcc;
                                                                      CheckBalanceAcc; //MC-026430
                                                                      IF ("Account No." = '') THEN BEGIN
                                                                        IF "Plant Type" = '' THEN //**4PS.n
                                                                          Description := GLAcc.Name;
                                                                        "Currency Code" := '';
                                                                      END;
                                                                      IF ("Account No." = '') OR
                                                                         ("Account Type" IN
                                                                          ["Account Type"::"G/L Account","Account Type"::"Bank Account"])
                                                                      THEN BEGIN
                                                                        IF "Plant Type" = '' THEN //**4PS.n
                                                                          "Posting Group" := '';
                                                                        "Salespers./Purch. Code" := '';
                                                                        "Payment Terms Code" := '';
                                                                      END;
                                                                      IF NOT GenJnlBatch.GET("Journal Template Name","Journal Batch Name") OR
                                                                         GenJnlBatch."Copy VAT Setup to Jnl. Lines"
                                                                      THEN BEGIN
                                                                        "Bal. Gen. Posting Type" := GLAcc."Gen. Posting Type";
                                                                        "Bal. Gen. Bus. Posting Group" := GLAcc."Gen. Bus. Posting Group";
                                                                        "Bal. Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                                                                        "Bal. VAT Bus. Posting Group" := GLAcc."VAT Bus. Posting Group";
                                                                        "Bal. VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
                                                                      END;
                                                                      "Bal. Tax Area Code" := GLAcc."Tax Area Code";
                                                                      "Bal. Tax Liable" := GLAcc."Tax Liable";
                                                                      "Bal. Tax Group Code" := GLAcc."Tax Group Code";
                                                                      IF "Posting Date" <> 0D THEN
                                                                        IF "Posting Date" = CLOSINGDATE("Posting Date") THEN
                                                                          ClearBalancePostingGroups;
                                                                    END;
                                                                  "Bal. Account Type"::Customer:
                                                                    BEGIN
                                                                      Cust.GET("Bal. Account No.");
                                                                      Cust.CheckBlockedCustOnJnls(Cust,"Document Type",FALSE);
                                                                      IF Cust."IC Partner Code" <> '' THEN BEGIN
                                                                        IF GenJnlTemplate.GET("Journal Template Name") THEN;
                                                                        IF (Cust."IC Partner Code" <> '') AND ICPartner.GET(Cust."IC Partner Code") THEN BEGIN
                                                                          ICPartner.CheckICPartnerIndirect(FORMAT("Bal. Account Type"),"Bal. Account No.");
                                                                          "IC Partner Code" := Cust."IC Partner Code";
                                                                        END;
                                                                      END;

                                                                      IF "Account No." = '' THEN
                                                                        Description := Cust.Name;

                                                                      "Payment Method Code" := Cust."Payment Method Code";
                                                                      VALIDATE("Recipient Bank Account",Cust."Preferred Bank Account");
                                                                      "Posting Group" := Cust."Customer Posting Group";
                                                                      "Salespers./Purch. Code" := Cust."Salesperson Code";
                                                                      "Payment Terms Code" := Cust."Payment Terms Code";
                                                                      VALIDATE("Bill-to/Pay-to No.","Bal. Account No.");
                                                                      VALIDATE("Sell-to/Buy-from No.","Bal. Account No.");
                                                                      IF ("Account No." = '') OR ("Account Type" = "Account Type"::"G/L Account") THEN
                                                                        "Currency Code" := Cust."Currency Code";
                                                                      IF ("Account Type" = "Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
                                                                        "Currency Code" := Cust."Currency Code";
                                                                      ClearBalancePostingGroups;
                                                                      IF (Cust."Bill-to Customer No." <> '') AND (Cust."Bill-to Customer No." <> "Bal. Account No.") THEN
                                                                        IF NOT CONFIRM(Text014,FALSE,Cust.TABLECAPTION,Cust."No.",Cust.FIELDCAPTION("Bill-to Customer No."),
                                                                             Cust."Bill-to Customer No.")
                                                                        THEN
                                                                          ERROR('');
                                                                      "Recipient Bank Account" := Cust."Preferred Bank Account";
                                                                      VALIDATE("Payment Terms Code");
                                                                      CheckPaymentTolerance;
                                                                    END;
                                                                  "Bal. Account Type"::Vendor:
                                                                    BEGIN
                                                                      Vend.GET("Bal. Account No.");
                                                                      Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
                                                                      IF Vend."IC Partner Code" <> '' THEN BEGIN
                                                                        IF GenJnlTemplate.GET("Journal Template Name") THEN;
                                                                        IF (Vend."IC Partner Code" <> '') AND ICPartner.GET(Vend."IC Partner Code") THEN BEGIN
                                                                          ICPartner.CheckICPartnerIndirect(FORMAT("Bal. Account Type"),"Bal. Account No.");
                                                                          "IC Partner Code" := Vend."IC Partner Code";
                                                                        END;
                                                                      END;

                                                                      IF "Account No." = '' THEN
                                                                        Description := Vend.Name;

                                                                      "Payment Method Code" := Vend."Payment Method Code";
                                                                      VALIDATE("Recipient Bank Account",Vend."Preferred Bank Account");
                                                                      "Posting Group" := Vend."Vendor Posting Group";
                                                                      "Salespers./Purch. Code" := Vend."Purchaser Code";
                                                                      "Payment Terms Code" := Vend."Payment Terms Code";
                                                                      VALIDATE("Bill-to/Pay-to No.","Bal. Account No.");
                                                                      VALIDATE("Sell-to/Buy-from No.","Bal. Account No.");
                                                                      IF ("Account No." = '') OR ("Account Type" = "Account Type"::"G/L Account") THEN
                                                                        "Currency Code" := Vend."Currency Code";
                                                                      IF ("Account Type" = "Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
                                                                        "Currency Code" := Vend."Currency Code";
                                                                      ClearBalancePostingGroups;
                                                                      IF (Vend."Pay-to Vendor No." <> '') AND (Vend."Pay-to Vendor No." <> "Bal. Account No.") THEN
                                                                        IF NOT CONFIRM(Text014,FALSE,Vend.TABLECAPTION,Vend."No.",Vend.FIELDCAPTION("Pay-to Vendor No."),
                                                                             Vend."Pay-to Vendor No.")
                                                                        THEN
                                                                          ERROR('');
                                                                      "Recipient Bank Account" := Vend."Preferred Bank Account";
                                                                      VALIDATE("Payment Terms Code");
                                                                      CheckPaymentTolerance;
                                                                    END;
                                                                  "Bal. Account Type"::"Bank Account":
                                                                    BEGIN
                                                                      BankAcc.GET("Bal. Account No.");
                                                                      BankAcc.TESTFIELD(Blocked,FALSE);
                                                                      IF "Account No." = '' THEN
                                                                        Description := BankAcc.Name;

                                                                      IF ("Account No." = '') OR
                                                                         ("Account Type" IN
                                                                          ["Account Type"::"G/L Account","Account Type"::"Bank Account"])
                                                                      THEN BEGIN
                                                                        "Posting Group" := '';
                                                                        "Salespers./Purch. Code" := '';
                                                                        "Payment Terms Code" := '';
                                                                      END;
                                                                      IF BankAcc."Currency Code" = '' THEN BEGIN
                                                                        IF "Account No." = '' THEN
                                                                          "Currency Code" := '';
                                                                      END ELSE
                                                                        IF SetCurrencyCode("Bal. Account Type","Bal. Account No.") THEN
                                                                          BankAcc.TESTFIELD("Currency Code","Currency Code")
                                                                        ELSE
                                                                          "Currency Code" := BankAcc."Currency Code";
                                                                      ClearBalancePostingGroups;
                                                                    END;
                                                                  "Bal. Account Type"::"Fixed Asset":
                                                                    BEGIN
                                                                      FA.GET("Bal. Account No.");
                                                                      FA.TESTFIELD(Blocked,FALSE);
                                                                      FA.TESTFIELD(Inactive,FALSE);
                                                                      FA.TESTFIELD("Budgeted Asset",FALSE);
                                                                      IF "Account No." = '' THEN
                                                                        Description := FA.Description;

                                                                      "Depreciation Book Code" := FA.GetFA_MainDeprBook("Bal. Account No.",TRUE);  //**4PS.n
                                                                      IF "Depreciation Book Code" = '' THEN BEGIN
                                                                        FASetup.GET;
                                                                        "Depreciation Book Code" := FASetup."Default Depr. Book";
                                                                        IF NOT FADeprBook.GET("Bal. Account No.","Depreciation Book Code") THEN
                                                                          "Depreciation Book Code" := '';
                                                                      END;
                                                                      IF "Depreciation Book Code" <> '' THEN BEGIN
                                                                        FADeprBook.GET("Bal. Account No.","Depreciation Book Code");
                                                                        "Posting Group" := FADeprBook."FA Posting Group";
                                                                        CreateDimForFAPostingGroup; //**4PS call C-026623
                                                                      END;
                                                                      GetFAVATSetup;
                                                                      GetFAAddCurrExchRate;
                                                                    END;
                                                                  "Bal. Account Type"::"IC Partner":
                                                                    BEGIN
                                                                      ICPartner.GET("Bal. Account No.");
                                                                      IF "Account No." = '' THEN
                                                                        Description := ICPartner.Name;

                                                                      IF ("Account No." = '') OR ("Account Type" = "Account Type"::"G/L Account") THEN
                                                                        "Currency Code" := ICPartner."Currency Code";
                                                                      IF ("Account Type" = "Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
                                                                        "Currency Code" := ICPartner."Currency Code";
                                                                      ClearBalancePostingGroups;
                                                                      "IC Partner Code" := "Bal. Account No.";
                                                                    END;
                                                                END;

                                                                VALIDATE("Currency Code");
                                                                VALIDATE("Bal. VAT Prod. Posting Group");
                                                                UpdateLineBalance;
                                                                UpdateSource;
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n
                                                                  DATABASE::"Plant Type", "Plant Type", //**4PS.n
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Service Order","Service Order No.", //** 4PS 09-06-2010
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,"Campaign No.");

                                                                VALIDATE("IC Partner G/L Acc. No.",GetDefaultICPartnerGLAccNo);
                                                                ValidateApplyRequirements(Rec);
                                                              END;

                                                   CaptionML=ENU=Bal. Account No. }
    { 12  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" = "Bal. Account Type"::"Bank Account" THEN BEGIN
                                                                  IF BankAcc3.GET("Bal. Account No.") AND (BankAcc3."Currency Code" <> '')THEN
                                                                    BankAcc3.TESTFIELD("Currency Code","Currency Code");
                                                                END;
                                                                IF "Account Type" = "Account Type"::"Bank Account" THEN BEGIN
                                                                  IF BankAcc3.GET("Account No.") AND (BankAcc3."Currency Code" <> '') THEN
                                                                    BankAcc3.TESTFIELD("Currency Code","Currency Code");
                                                                END;
                                                                IF ("Recurring Method" IN
                                                                    ["Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance"]) AND
                                                                   ("Currency Code" <> '')
                                                                THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Currency Code"),FIELDCAPTION("Recurring Method"),"Recurring Method");

                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  GetCurrency;
                                                                  IF ("Currency Code" <> xRec."Currency Code") OR
                                                                     ("Posting Date" <> xRec."Posting Date") OR
                                                                     (CurrFieldNo = FIELDNO("Currency Code")) OR
                                                                     ("Currency Factor" = 0)
                                                                  THEN
                                                                    "Currency Factor" :=
                                                                      //CurrExchRate.ExchangeRate("Posting Date","Currency Code"); //**4PS.o
                                                                      CurrExchRate.ExchangeRate(0,'', "Posting Date","Currency Code",FALSE); //**4PS.n
                                                                END ELSE
                                                                  "Currency Factor" := 0;
                                                                VALIDATE("Currency Factor");

                                                                IF NOT CustVendAccountNosModified THEN
                                                                  IF ("Currency Code" <> xRec."Currency Code") AND (Amount <> 0) THEN
                                                                    PaymentToleranceMgt.PmtTolGenJnl(Rec);
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 13  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;

                                                                IF "Currency Code" = '' THEN
                                                                  "Amount (LCY)" := Amount
                                                                ELSE
                                                                  "Amount (LCY)" := ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        //**4PS.so
                                                                        //"Posting Date","Currency Code",
                                                                        //Amount,"Currency Factor"));
                                                                        //**4PS.eo
                                                                        //**4PS.sn
                                                                        0, '', "Posting Date","Currency Code",
                                                                        Amount,"Currency Factor","Account Type" = "Account Type"::Customer ));
                                                                        //**4PS.en

                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                IF (CurrFieldNo <> 0) AND
                                                                   (CurrFieldNo <> FIELDNO("Applies-to Doc. No.")) AND
                                                                   ((("Account Type" = "Account Type"::Customer) AND
                                                                     ("Account No." <> '') AND (Amount > 0) AND
                                                                     (CurrFieldNo <> FIELDNO("Bal. Account No."))) OR
                                                                    (("Bal. Account Type" = "Bal. Account Type"::Customer) AND
                                                                     ("Bal. Account No." <> '') AND (Amount < 0) AND
                                                                     (CurrFieldNo <> FIELDNO("Account No."))))
                                                                THEN
                                                                  IF "Receiving Company" = '' THEN  //**4PS.n
                                                                    CustCheckCreditLimit.GenJnlLineCheck(Rec);

                                                                VALIDATE("VAT %");
                                                                VALIDATE("Bal. VAT %");
                                                                UpdateLineBalance;
                                                                IF "Deferral Code" <> '' THEN
                                                                  VALIDATE("Deferral Code");

                                                                IF Amount <> xRec.Amount THEN BEGIN
                                                                  IF ("Applies-to Doc. No." <> '') OR ("Applies-to ID" <> '') THEN
                                                                    SetApplyToAmount;
                                                                  PaymentToleranceMgt.PmtTolGenJnl(Rec);
                                                                END;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 14  ;   ;Debit Amount        ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "Debit Amount" := ROUND("Debit Amount",Currency."Amount Rounding Precision");
                                                                Correction := "Debit Amount" < 0;
                                                                Amount := "Debit Amount";
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=ENU=Debit Amount;
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 15  ;   ;Credit Amount       ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "Credit Amount" := ROUND("Credit Amount",Currency."Amount Rounding Precision");
                                                                Correction := "Credit Amount" < 0;
                                                                Amount := -"Credit Amount";
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=ENU=Credit Amount;
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16  ;   ;Amount (LCY)        ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Code" = '' THEN BEGIN
                                                                  Amount := "Amount (LCY)";
                                                                  VALIDATE(Amount);
                                                                END ELSE BEGIN
                                                                  IF CheckFixedCurrency THEN BEGIN
                                                                    GetCurrency;
                                                                    Amount := ROUND(
                                                                        CurrExchRate.ExchangeAmtLCYToFCY(
                                                                          //**4PS.so
                                                                          //"Posting Date","Currency Code",
                                                                          //"Amount (LCY)","Currency Factor"),
                                                                          //**4PS.eo
                                                                          //**4PS.sn
                                                                          0, '', "Posting Date","Currency Code",
                                                                          "Amount (LCY)","Currency Factor","Account Type" = "Account Type"::Customer ),
                                                                          //**4PS.en
                                                                        Currency."Amount Rounding Precision")
                                                                  END ELSE BEGIN
                                                                    TESTFIELD("Amount (LCY)");
                                                                    TESTFIELD(Amount);
                                                                    "Currency Factor" := Amount / "Amount (LCY)";
                                                                  END;

                                                                  VALIDATE("VAT %");
                                                                  VALIDATE("Bal. VAT %");
                                                                  UpdateLineBalance;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Amount (LCY);
                                                   AutoFormatType=1 }
    { 17  ;   ;Balance (LCY)       ;Decimal       ;CaptionML=ENU=Balance (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 18  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Currency Code" = '') AND ("Currency Factor" <> 0) THEN
                                                                  FIELDERROR("Currency Factor",STRSUBSTNO(Text002,FIELDCAPTION("Currency Code")));
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=ENU=Currency Factor;
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=No }
    { 19  ;   ;Sales/Purch. (LCY)  ;Decimal       ;CaptionML=ENU=Sales/Purch. (LCY);
                                                   AutoFormatType=1 }
    { 20  ;   ;Profit (LCY)        ;Decimal       ;CaptionML=ENU=Profit (LCY);
                                                   AutoFormatType=1 }
    { 21  ;   ;Inv. Discount (LCY) ;Decimal       ;CaptionML=ENU=Inv. Discount (LCY);
                                                   AutoFormatType=1 }
    { 22  ;   ;Bill-to/Pay-to No.  ;Code20        ;TableRelation=IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor;
                                                   OnValidate=BEGIN
                                                                IF "Bill-to/Pay-to No." <> xRec."Bill-to/Pay-to No." THEN
                                                                  "Ship-to/Order Address Code" := '';
                                                                ReadGLSetup;
                                                                IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No." THEN
                                                                  UpdateCountryCodeAndVATRegNo("Bill-to/Pay-to No.");
                                                              END;

                                                   CaptionML=ENU=Bill-to/Pay-to No.;
                                                   Editable=No }
    { 23  ;   ;Posting Group       ;Code10        ;TableRelation=IF (Account Type=CONST(Customer)) "Customer Posting Group"
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Vendor Posting Group"
                                                                 ELSE IF (Account Type=CONST(Fixed Asset)) "FA Posting Group"
                                                                 ELSE IF (Account Type=CONST(G/L Account),
                                                                          Plant Type=FILTER(<>'')) "Plant Posting Group";
                                                   CaptionML=ENU=Posting Group;
                                                   Editable=No }
    { 24  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation=IF (Receiving Company=FILTER('')) "Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                //**4PS.sn
                                                                CheckCompanyIC;
                                                                IF "Shortcut Dimension 1 Code" <> '' THEN
                                                                  DimMgt.GetDimValueRec(1, "Shortcut Dimension 1 Code", DimValRec, TRUE,'');
                                                                CheckDim1JobService;  //db, 19-05-15: C015449
                                                                //**4PS.en

                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS.sn
                                                              CheckCompanyIC;
                                                              DimValRec.RESET;
                                                              DimValRec.Code := "Shortcut Dimension 1 Code";
                                                              DimValRec.SETRANGE("Global Dimension No.", 1);
                                                              IF PAGE.RUNMODAL(0, DimValRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Shortcut Dimension 1 Code", DimValRec.Code);
                                                              //**4PS.en
                                                            END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 25  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation=IF (Receiving Company=FILTER('')) "Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=VAR
                                                                lDimValRec@1100485002 : Record 349;
                                                                xDimValRec@1100485001 : Record 349;
                                                                lvCompName@1100485000 : Text[50];
                                                                lvPostingSetup@1100525002 : Record 11020565;
                                                                lvVendorPostingGroup@1100525001 : Code[20];
                                                                ICRec@1100525000 : Record 11012057;
                                                                lvICHoursPosting@1100525003 : 'NotApplicable,ReceiverSide,Supplierside';
                                                                lvVendorCde@1100525004 : Code[20];
                                                              BEGIN
                                                                //**4PS.sn
                                                                IF "Shortcut Dimension 2 Code" <> '' THEN BEGIN
                                                                  CheckCompanyIC;
                                                                  lDimValRec.CHANGECOMPANY("Receiving Company");
                                                                  DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", lDimValRec, TRUE, "Job No.");
                                                                  lDimValRec.TESTFIELD(Blocked, FALSE);

                                                                  IF "Receiving Company" <> '' THEN
                                                                    lvCompName := "Receiving Company"
                                                                  ELSE
                                                                    lvCompName := COMPANYNAME;

                                                                  IF "Service Order No." <> '' THEN BEGIN
                                                                    "Origin Type" := "Origin Type"::Service;
                                                                    ServOrderRec.GET("Service Order No.");
                                                                    CheckAdditionalCostService(CurrFieldNo);  //db, 03-02-10
                                                                    IF "Additional Cost (Service)" = TRUE THEN BEGIN
                                                                      ServOrderRec.TESTFIELD("Service Type (Other)");
                                                                      ServTypeRec.GET(ServOrderRec."Service Type (Other)");
                                                                    END ELSE BEGIN
                                                                      ServOrderRec.TESTFIELD("Service Type");
                                                                      ServTypeRec.GET(ServOrderRec."Service Type");
                                                                    END;

                                                                    "Account No." := ServTypeRec.GetWipAcc(
                                                                      ServTypeRec.Code, lDimValRec."Cost Type", lvCompName, "Cost Type Cost Plus Line", '');

                                                                    VALIDATE("Account No.");
                                                                    IF "Additional Cost (Service)" THEN
                                                                      VALIDATE("Shortcut Dimension 1 Code", ServOrderRec."Department Code (Other)")
                                                                    ELSE
                                                                      VALIDATE("Shortcut Dimension 1 Code", ServOrderRec."Global Dimension 1 Code");
                                                                  END ELSE BEGIN
                                                                    //db.sn, 15-04-11
                                                                    IF "Service Contract No." <> '' THEN BEGIN
                                                                      "Origin Type" := "Origin Type"::Service;
                                                                      ServContrRec.GET("Service Contract No.");
                                                                      ServContrRec.TESTFIELD("Service Type");
                                                                      ServTypeRec.GET(ServContrRec."Service Type");

                                                                      "Account No." := ServTypeRec.GetWipAcc(
                                                                        ServTypeRec.Code, lDimValRec."Cost Type", lvCompName, -1, '');

                                                                      VALIDATE("Account No.");
                                                                      VALIDATE("Shortcut Dimension 1 Code", ServContrRec."Global Dimension 1 Code");
                                                                    END;
                                                                    //db.en, 15-04-11
                                                                    IF "Job No." <> '' THEN BEGIN
                                                                      "Origin Type" := "Origin Type"::Project;
                                                                      ProjRec.GET("Job No.");
                                                                      ProjTypeRec.GET(ProjRec."Project Type");

                                                                      GLSetup.GET;
                                                                      IF ("Receiving Company" <> COMPANYNAME) AND ("Receiving Company" <> '') THEN
                                                                      BEGIN
                                                                        IF lvPostingSetup.GET("Source Code", COMPANYNAME, "Receiving Company") THEN
                                                                        BEGIN
                                                                          IF (lvPostingSetup."Prod. Account Credit" <> '') AND
                                                                             (lvPostingSetup."Prod. Account Debit" <> '') THEN
                                                                          BEGIN
                                                                            ICRec.GET(COMPANYNAME, "Receiving Company");
                                                                            lvVendorPostingGroup := ICRec."Vendor Posting Group";
                                                                            // IcEntryRec."Use IC Vendor Posting Group" := TRUE;
                                                                          END;
                                                                        END;
                                                                      END;

                                                                      lvVendorCde := ExternalEmployeeVendor; //**4PS Call Call C006691

                                                                      "Account No." :=
                                                                        WipAccountProject(
                                                                          ProjRec,ProjTypeRec,lDimValRec,ICProjSetupRec."Provisions at Closure",lvCompName,lvVendorCde,lvVendorPostingGroup);
                                                                        //ProjTypeRec.GetWipAccByVendorPostingGrp(ProjRec."Project Type",
                                                                        //                                        lDimValRec."Cost Type",
                                                                        //                                        ProjRec."Project Status",
                                                                        //                                        ICProjSetupRec."Provisions at Closure",
                                                                        //                                        lvCompName,
                                                                        //                                        "Cost Type Cost Plus Line",
                                                                        //                                        lvVendorCde,  //** 4PS Call Call C006691 changed
                                                                        //                                        lvICHoursPosting::Supplierside,
                                                                        //                                        lvVendorPostingGroup);
                                                                      VALIDATE("Account No.");
                                                                    END;
                                                                  END;

                                                                  IF ("Service Order No." <> '') OR ("Job No." <> '') THEN BEGIN
                                                                    IF ("Item No." = '') AND (Manufacturer = '') AND ("Vendor (Trade Item)" = '') THEN BEGIN
                                                                      IF "Shortcut Dimension 2 Code" <> xRec."Shortcut Dimension 2 Code" THEN BEGIN
                                                                        IF Description = '' THEN
                                                                          Description := lDimValRec.Name
                                                                        ELSE BEGIN
                                                                          xDimValRec.CHANGECOMPANY(xRec."Receiving Company");
                                                                          DimMgt.GetDimValueRec(2, xRec."Shortcut Dimension 2 Code", xDimValRec, FALSE, xRec."Job No.");
                                                                          IF (lDimValRec.Name <> '') AND ((Description = xDimValRec.Name) OR (xDimValRec.Name = '')) THEN
                                                                            Description := lDimValRec.Name;
                                                                        END;
                                                                      END;
                                                                    END;
                                                                  END;

                                                                  IF ("Item No." + "Basic Item" + "Trade Item" = '') THEN
                                                                    IF "Shortcut Dimension 2 Code" <> xRec."Shortcut Dimension 2 Code" THEN
                                                                      "Cost Component" := lDimValRec."Cost Component";

                                                                END;
                                                                CheckCostCompServOrderType;                        //** 4PS01.n
                                                                //**4PS.en

                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS.sn
                                                              CheckCompanyIC;
                                                              DimValRec.RESET;
                                                              DimValRec.Code := "Shortcut Dimension 2 Code";
                                                              DimValRec.SETRANGE("Global Dimension No.", 2);
                                                              DimValRec.SETRANGE("Project Filter", "Job No.");
                                                              IF "Receiving Company" = '' THEN
                                                                DimValRec.SETRANGE("Company Filter")
                                                              ELSE
                                                                DimValRec.SETRANGE("Company Filter", "Receiving Company");
                                                              IF PAGE.RUNMODAL(PAGE::"Cost Object List", DimValRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Shortcut Dimension 2 Code", DimValRec.Code);
                                                              DimValRec.SETRANGE("Project Filter");
                                                              //**4PS.en
                                                            END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 26  ;   ;Salespers./Purch. Code;Code10      ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n
                                                                  DATABASE::"Plant Type", "Plant Type", //**4PS.n
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Service Order","Service Order No.", //** 4PS 09-06-2010
                                                                  DATABASE::Campaign,"Campaign No.");
                                                              END;

                                                   CaptionML=ENU=Salespers./Purch. Code }
    { 29  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=ENU=Source Code;
                                                   Editable=No }
    { 30  ;   ;System-Created Entry;Boolean       ;CaptionML=ENU=System-Created Entry;
                                                   Editable=No }
    { 34  ;   ;On Hold             ;Code3         ;CaptionML=ENU=On Hold }
    { 35  ;   ;Applies-to Doc. Type;Option        ;OnValidate=BEGIN
                                                                IF "Applies-to Doc. Type" <> xRec."Applies-to Doc. Type" THEN
                                                                  VALIDATE("Applies-to Doc. No.",'');
                                                              END;

                                                   CaptionML=ENU=Applies-to Doc. Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 36  ;   ;Applies-to Doc. No. ;Code20        ;OnValidate=VAR
                                                                ValidateBln@1210190000 : Boolean;
                                                                CustLedgEntry@1000 : Record 21;
                                                                VendLedgEntry@1003 : Record 25;
                                                                TempGenJnlLine@1001 : TEMPORARY Record 81;
                                                                lvCustEntryEditCU@1100485000 : Codeunit 103;
                                                                SEPaymentImport@1002 : Codeunit 11128001;
                                                              BEGIN
                                                                IF "Applies-to Doc. No." <> xRec."Applies-to Doc. No." THEN
                                                                  ClearCustVendApplnEntry;
                                                                //**4PS.sn
                                                                IF "Applies-to Doc. No." <> '' THEN
                                                                  CheckAppiesToDocNoAllowedForIC(TRUE, FIELDNO("Applies-to Doc. No."));  //* C-017223
                                                                ValidateAppliesToDocNo(FALSE);

                                                                //**4PS.en

                                                                IF ("Applies-to Doc. No." = '') AND (xRec."Applies-to Doc. No." <> '') THEN BEGIN
                                                                  PaymentToleranceMgt.DelPmtTolApllnDocNo(Rec,xRec."Applies-to Doc. No.");

                                                                  TempGenJnlLine := Rec;
                                                                  IF (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Customer) OR
                                                                     (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Vendor)
                                                                  THEN
                                                                    CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",TempGenJnlLine);

                                                                  IF TempGenJnlLine."Account Type" = TempGenJnlLine."Account Type"::Customer THEN BEGIN
                                                                    CustLedgEntry.CHANGECOMPANY("Receiving Company"); //**4PS.n
                                                                    CustLedgEntry.SETCURRENTKEY("Document No.");
                                                                    CustLedgEntry.SETRANGE("Document No.",xRec."Applies-to Doc. No.");
                                                                    IF NOT (xRec."Applies-to Doc. Type" = "Document Type"::" ") THEN
                                                                      CustLedgEntry.SETRANGE("Document Type",xRec."Applies-to Doc. Type");
                                                                    CustLedgEntry.SETRANGE("Customer No.",TempGenJnlLine."Account No.");
                                                                    CustLedgEntry.SETRANGE(Open,TRUE);
                                                                    IF CustLedgEntry.FINDFIRST THEN BEGIN
                                                                      IF CustLedgEntry."Amount to Apply" <> 0 THEN  BEGIN
                                                                        CustLedgEntry."Amount to Apply" := 0;
                                                                        //CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);  //**4PS.o
                                                                        //**4PS.sn
                                                                        IF ("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME) THEN
                                                                          lvCustEntryEditCU.SetCompany("Receiving Company");
                                                                        lvCustEntryEditCU.RUN(CustLedgEntry);
                                                                        //**4PS.en
                                                                      END;
                                                                      "Exported to Payment File" := CustLedgEntry."Exported to Payment File";
                                                                      "Applies-to Ext. Doc. No." := '';
                                                                    END;
                                                                  END ELSE
                                                                    IF TempGenJnlLine."Account Type" = TempGenJnlLine."Account Type"::Vendor THEN BEGIN
                                                                      VendLedgEntry.SETCURRENTKEY("Document No.");
                                                                      VendLedgEntry.SETRANGE("Document No.",xRec."Applies-to Doc. No.");
                                                                      IF NOT (xRec."Applies-to Doc. Type" = "Document Type"::" ") THEN
                                                                        VendLedgEntry.SETRANGE("Document Type",xRec."Applies-to Doc. Type");
                                                                      VendLedgEntry.SETRANGE("Vendor No.",TempGenJnlLine."Account No.");
                                                                      VendLedgEntry.SETRANGE(Open,TRUE);
                                                                      IF VendLedgEntry.FINDFIRST THEN BEGIN
                                                                        IF VendLedgEntry."Amount to Apply" <> 0 THEN  BEGIN
                                                                          VendLedgEntry."Amount to Apply" := 0;
                                                                          CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
                                                                        END;
                                                                        "Exported to Payment File" := VendLedgEntry."Exported to Payment File";
                                                                      END;
                                                                      "Applies-to Ext. Doc. No." := '';
                                                                    END;
                                                                END;

                                                                IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (Amount <> 0) THEN BEGIN
                                                                  IF xRec."Applies-to Doc. No." <> '' THEN
                                                                    PaymentToleranceMgt.DelPmtTolApllnDocNo(Rec,xRec."Applies-to Doc. No.");
                                                                  SetApplyToAmount;
                                                                  PaymentToleranceMgt.PmtTolGenJnl(Rec);
                                                                  xRec.ClearAppliedGenJnlLine;
                                                                END;

                                                                CASE "Account Type" OF
                                                                  "Account Type"::Customer:
                                                                    GetCustLedgerEntry;
                                                                  "Account Type"::Vendor:
                                                                    GetVendLedgerEntry;
                                                                END;

                                                                ValidateApplyRequirements(Rec);
                                                                SetJournalLineFieldsFromApplication;

                                                                GetCreditCard;

                                                                //150128, SS002177
                                                                SEPaymentImport.ValidateAppliesToDocNo(Rec,CurrFieldNo,DontWarnValidateAppliesToDocNoBool);
                                                                // PEB0026
                                                                gBaseTables.T81_GetDescription(Rec);
                                                                // 0026
                                                              END;

                                                   OnLookup=VAR
                                                              PaymentToleranceMgt@1001 : Codeunit 426;
                                                              AccType@1002 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
                                                              AccNo@1003 : Code[20];
                                                            BEGIN
                                                              CheckAppiesToDocNoAllowedForIC(TRUE, 0);  //* C-017223
                                                              xRec.Amount := Amount;
                                                              xRec."Currency Code" := "Currency Code";
                                                              xRec."Posting Date" := "Posting Date";

                                                              GetAccTypeAndNo(Rec,AccType,AccNo);
                                                              CLEAR(CustLedgEntry);
                                                              CLEAR(VendLedgEntry);

                                                              CASE AccType OF
                                                                AccType::Customer:
                                                                  LookUpAppliesToDocCust(AccNo);
                                                                AccType::Vendor:
                                                                  LookUpAppliesToDocVend(AccNo);
                                                              END;
                                                              SetJournalLineFieldsFromApplication;

                                                              ValidateAppliesToDocNo(FALSE); //**4PS.n

                                                              IF xRec.Amount <> 0 THEN
                                                                IF NOT PaymentToleranceMgt.PmtTolGenJnl(Rec) THEN
                                                                  EXIT;
                                                            END;

                                                   CaptionML=ENU=Applies-to Doc. No. }
    { 38  ;   ;Due Date            ;Date          ;OnValidate=VAR
                                                                LBManagement@1100285000 : Codeunit 11128015;
                                                              BEGIN
                                                                // LRS 040825
                                                                IF "LB Ledger Entry No." <> 0 THEN
                                                                  VALIDATE(Amount,LBManagement.CalcAmountToPayGJLrec(Rec));
                                                                // LRS
                                                                //>>NAVFI
                                                                GLSetup.GET;
                                                                IF GLSetup."Finnish localization active" AND ("Payment date" = 0D) THEN
                                                                    "Payment date" := "Due Date";
                                                                //<<NAVFI
                                                              END;

                                                   CaptionML=ENU=Due Date }
    { 39  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=ENU=Pmt. Discount Date }
    { 40  ;   ;Payment Discount %  ;Decimal       ;CaptionML=ENU=Payment Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 42  ;   ;Job No.             ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) Job;
                                                   OnValidate=VAR
                                                                lvBlockingCodeRec@1100485000 : Record 11012027;
                                                              BEGIN
                                                                IF "Job No." = xRec."Job No." THEN
                                                                  EXIT;

                                                                SourceCodeSetup.GET;
                                                                IF "Source Code" <> SourceCodeSetup."Job G/L WIP" THEN
                                                                  VALIDATE("Job Task No.",'');
                                                                //**4PS.so
                                                                //IF "Job No." = '' THEN BEGIN
                                                                //  CreateDim(
                                                                //    DATABASE::Job,"Job No.",
                                                                //    DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                //    DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                //    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                //    DATABASE::Campaign,"Campaign No.");
                                                                //  EXIT;
                                                                //END;
                                                                //**4PS.eo
                                                                //**4PS.sn
                                                                CheckCompanyIC;
                                                                IF "Job No." <> '' THEN BEGIN
                                                                  TESTFIELD("Service Order No.",''); //C016995
                                                                  Job.CHANGECOMPANY("Receiving Company");
                                                                //**4PS.en
                                                                  TESTFIELD("Account Type","Account Type"::"G/L Account");

                                                                  IF "Bal. Account No." <> '' THEN
                                                                    IF NOT ("Bal. Account Type" IN ["Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account"]) THEN
                                                                      ERROR(Text016,FIELDCAPTION("Bal. Account Type"));

                                                                  Job.GET("Job No.");
                                                                  Job.TestBlocked;
                                                                  "Job Currency Code" := Job."Currency Code";
                                                                //**4PS.sn
                                                                  "Job Description" := Job.Description;

                                                                  IF(Job."Blocking Code" <> '') AND
                                                                     ((Job."Project Status" = Job."Project Status"::"Technical Finished") OR
                                                                      (Job."Project Status" = Job."Project Status"::"Administrative Finished") OR
                                                                      ((Job."Project Status" = Job."Project Status"::Finished) AND ICProjSetupRec."Provisions at Closure")
                                                                     ) THEN
                                                                  BEGIN
                                                                    lvBlockingCodeRec.CheckBlocked(Job."Blocking Code", lvBlockingCodeRec.Switch::"General Journal", Job, TRUE);
                                                                  END ELSE BEGIN
                                                                    IF (ICProjSetupRec."Provisions at Closure") THEN BEGIN
                                                                      Job.CheckProjectStatus(-1);
                                                                    END ELSE BEGIN
                                                                      IF CurrFieldNo <> 0 THEN
                                                                        Job.CheckProjectStatus(1)
                                                                      ELSE
                                                                        Job.CheckProjectStatus(0);
                                                                    END;
                                                                  END;
                                                                  "Account Type" := "Account Type"::"G/L Account";
                                                                END ELSE BEGIN;
                                                                  "Account No." := '';
                                                                  "Rental Unit" := '';
                                                                END;
                                                                FillSystemCreatedEntry;

                                                                IF ("Shortcut Dimension 1 Code" <> '') AND ("Job No." <> '') AND
                                                                   (CurrFieldNo = FIELDNO("Job No.")) AND ("Job No." <> xRec."Job No.") THEN
                                                                  "Shortcut Dimension 1 Code" := '';
                                                                //**4PS.en


                                                                CreateDim(
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n
                                                                  DATABASE::"Plant Type", "Plant Type", //**4PS.n
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::"Service Order","Service Order No.", //** 4PS 09-06-2010
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,"Campaign No.");

                                                                //**4PS.sn
                                                                IF "Shortcut Dimension 2 Code" <> '' THEN
                                                                  VALIDATE("Shortcut Dimension 2 Code");  //Also determine WIP Account

                                                                //**4PS.sn, idea of JR, see if this will be to all satisfaction.
                                                                IF ("Receiving Company" <> '') AND
                                                                   ("Receiving Company" <> COMPANYNAME) AND
                                                                   (Job."Global Dimension 1 Code" <> '') AND
                                                                   ("Shortcut Dimension 1 Code" = '') THEN
                                                                BEGIN
                                                                  VALIDATE("Shortcut Dimension 1 Code", Job."Global Dimension 1 Code");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS.sn
                                                              OnLookupJobNo(TRUE);
                                                            END;

                                                   CaptionML=ENU=Project No. }
    { 43  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 44  ;   ;VAT Amount          ;Decimal       ;OnValidate=BEGIN
                                                                GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
                                                                //GenJnlBatch.TESTFIELD("Allow VAT Difference",TRUE); //**4PS.o
                                                                IF NOT ("VAT Calculation Type" IN
                                                                        ["VAT Calculation Type"::"Normal VAT","VAT Calculation Type"::"Reverse Charge VAT"])
                                                                THEN
                                                                  ERROR(
                                                                    Text010,FIELDCAPTION("VAT Calculation Type"),
                                                                    "VAT Calculation Type"::"Normal VAT","VAT Calculation Type"::"Reverse Charge VAT");
                                                                IF "VAT Posting" = "VAT Posting"::"Automatic VAT Entry" THEN //**4PS.n
                                                                  IF "VAT Amount" <> 0 THEN BEGIN
                                                                    TESTFIELD("VAT %");
                                                                    TESTFIELD(Amount);
                                                                  END;

                                                                GetCurrency;
                                                                "VAT Amount" := ROUND("VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);

                                                                IF "VAT Amount" * Amount < 0 THEN
                                                                  IF "VAT Amount" > 0 THEN
                                                                    ERROR(Text011,FIELDCAPTION("VAT Amount"))
                                                                  ELSE
                                                                    ERROR(Text012,FIELDCAPTION("VAT Amount"));

                                                                "VAT Base Amount" := Amount - "VAT Amount";

                                                                "VAT Difference" :=
                                                                  "VAT Amount" -
                                                                  ROUND(
                                                                    Amount * "VAT %" / (100 + "VAT %"),
                                                                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                //**4PS.sn
                                                                IF "VAT Posting" = "VAT Posting"::"Automatic VAT Entry" THEN BEGIN
                                                                  IF ABS("VAT Difference") > 0 THEN
                                                                    GenJnlBatch.TESTFIELD("Allow VAT Difference",TRUE);
                                                                //**4PS.en
                                                                  IF ABS("VAT Difference") > Currency."Max. VAT Difference Allowed" THEN
                                                                    ERROR(Text013,FIELDCAPTION("VAT Difference"),Currency."Max. VAT Difference Allowed");
                                                                END; //**4PS.n

                                                                IF "Currency Code" = '' THEN
                                                                  "VAT Amount (LCY)" := "VAT Amount"
                                                                ELSE
                                                                  "VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        //**4PS.so
                                                                        //"Posting Date","Currency Code",
                                                                        //"VAT Amount","Currency Factor"));
                                                                        //**4PS.eo
                                                                        //**4PS.sn
                                                                        0, '', "Posting Date","Currency Code",
                                                                        "VAT Amount","Currency Factor","Account Type" = "Account Type"::Customer));
                                                                        //**4PS.en
                                                                "VAT Base Amount (LCY)" := "Amount (LCY)" - "VAT Amount (LCY)";

                                                                UpdateSalesPurchLCY;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;

                                                                IF "Deferral Code" <> '' THEN
                                                                  VALIDATE("Deferral Code");
                                                              END;

                                                   CaptionML=ENU=VAT Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 45  ;   ;VAT Posting         ;Option        ;CaptionML=ENU=VAT Posting;
                                                   OptionCaptionML=ENU=Automatic VAT Entry,Manual VAT Entry;
                                                   OptionString=Automatic VAT Entry,Manual VAT Entry;
                                                   Editable=No }
    { 47  ;   ;Payment Terms Code  ;Code10        ;TableRelation=IF (Receiving Company=FILTER('')) "Payment Terms";
                                                   OnValidate=BEGIN
                                                                CheckCompanyIC; //**4PS.n

                                                                "Due Date" := 0D;
                                                                "Pmt. Discount Date" := 0D;
                                                                "Payment Discount %" := 0;
                                                                IF ("Account Type" <> "Account Type"::"G/L Account") OR
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account")
                                                                THEN
                                                                  CASE "Document Type" OF
                                                                    "Document Type"::Invoice:
                                                                      IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                        PaymentTerms.GET("Payment Terms Code");
                                                                        "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                        "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                        "Payment Discount %" := PaymentTerms."Discount %";
                                                                      END;
                                                                    "Document Type"::"Credit Memo":
                                                                      IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                        PaymentTerms.GET("Payment Terms Code");
                                                                        IF PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN BEGIN
                                                                          "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                          "Pmt. Discount Date" :=
                                                                            CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                          "Payment Discount %" := PaymentTerms."Discount %";
                                                                        END ELSE
                                                                          "Due Date" := "Document Date";
                                                                      END;
                                                                    ELSE
                                                                      "Due Date" := "Document Date";
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Payment Terms Code;
                                                   Description=4PS: TableRelation changed }
    { 48  ;   ;Applies-to ID       ;Code50        ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF "Applies-to ID" <> '' THEN
                                                                  CheckAppiesToDocNoAllowedForIC(TRUE, FIELDNO("Applies-to ID"));  //* C-017223
                                                                //**4PS.en

                                                                IF ("Applies-to ID" <> xRec."Applies-to ID") AND (xRec."Applies-to ID" <> '') THEN
                                                                  ClearCustVendApplnEntry;
                                                                SetJournalLineFieldsFromApplication;
                                                              END;

                                                   CaptionML=ENU=Applies-to ID }
    { 50  ;   ;Business Unit Code  ;Code10        ;TableRelation="Business Unit";
                                                   CaptionML=ENU=Business Unit Code }
    { 51  ;   ;Journal Batch Name  ;Code10        ;TableRelation="Gen. Journal Batch".Name WHERE (Journal Template Name=FIELD(Journal Template Name));
                                                   CaptionML=ENU=Journal Batch Name }
    { 52  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 53  ;   ;Recurring Method    ;Option        ;OnValidate=BEGIN
                                                                IF "Recurring Method" IN
                                                                   ["Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance"]
                                                                THEN
                                                                  TESTFIELD("Currency Code",'');
                                                                //**4PS.sn
                                                                IF "Recurring Method" IN ["Recurring Method"::"RF Reversing Fixed",
                                                                   "Recurring Method"::"RV Reversing Variable", "Recurring Method"::"RB Reversing Balance"]
                                                                THEN
                                                                  "Receiving Company" := '';
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Recurring Method;
                                                   OptionCaptionML=ENU=" ,F  Fixed,V  Variable,B  Balance,RF Reversing Fixed,RV Reversing Variable,RB Reversing Balance";
                                                   OptionString=[ ,F  Fixed,V  Variable,B  Balance,RF Reversing Fixed,RV Reversing Variable,RB Reversing Balance];
                                                   BlankZero=Yes }
    { 54  ;   ;Expiration Date     ;Date          ;CaptionML=ENU=Expiration Date }
    { 55  ;   ;Recurring Frequency ;DateFormula   ;CaptionML=ENU=Recurring Frequency }
    { 56  ;   ;Allocated Amt. (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Gen. Jnl. Allocation".Amount WHERE (Journal Template Name=FIELD(Journal Template Name),
                                                                                                        Journal Batch Name=FIELD(Journal Batch Name),
                                                                                                        Journal Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Allocated Amt. (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 57  ;   ;Gen. Posting Type   ;Option        ;OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Gen. Posting Type","Gen. Posting Type"::" ");
                                                                IF ("Gen. Posting Type" = "Gen. Posting Type"::Settlement) AND (CurrFieldNo <> 0) THEN
                                                                  ERROR(Text006,"Gen. Posting Type");
                                                                CheckVATInAlloc;
                                                                IF "Gen. Posting Type" > 0 THEN
                                                                  VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Posting Type;
                                                   OptionCaptionML=ENU=" ,Purchase,Sale,Settlement";
                                                   OptionString=[ ,Purchase,Sale,Settlement] }
    { 58  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Gen. Bus. Posting Group",'');
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 59  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Gen. Prod. Posting Group",'');
                                                                IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 60  ;   ;VAT Calculation Type;Option        ;CaptionML=ENU=VAT Calculation Type;
                                                   OptionCaptionML=ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 61  ;   ;EU 3-Party Trade    ;Boolean       ;CaptionML=ENU=EU 3-Party Trade;
                                                   Editable=No }
    { 62  ;   ;Allow Application   ;Boolean       ;InitValue=Yes;
                                                   CaptionML=ENU=Allow Application }
    { 63  ;   ;Bal. Account Type   ;Option        ;OnValidate=BEGIN
                                                                IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Fixed Asset",
                                                                                       "Account Type"::"IC Partner"]) AND
                                                                   ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Fixed Asset",
                                                                                            "Bal. Account Type"::"IC Partner"])
                                                                THEN
                                                                  ERROR(
                                                                    Text000,
                                                                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
                                                                VALIDATE("Bal. Account No.",'');
                                                                VALIDATE("IC Partner G/L Acc. No.",'');
                                                                IF "Bal. Account Type" IN
                                                                   ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"]
                                                                THEN BEGIN
                                                                  VALIDATE("Bal. Gen. Posting Type","Bal. Gen. Posting Type"::" ");
                                                                  VALIDATE("Bal. Gen. Bus. Posting Group",'');
                                                                  VALIDATE("Bal. Gen. Prod. Posting Group",'');
                                                                END ELSE
                                                                  IF "Account Type" IN [
                                                                                        "Bal. Account Type"::"G/L Account","Account Type"::"Bank Account","Account Type"::"Fixed Asset"]
                                                                  THEN
                                                                    VALIDATE("Payment Terms Code",'');
                                                                UpdateSource;
                                                                IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  "Depreciation Book Code" := '';
                                                                  VALIDATE("FA Posting Type","FA Posting Type"::" ");
                                                                END;
                                                                IF xRec."Bal. Account Type" IN
                                                                   [xRec."Bal. Account Type"::Customer,xRec."Bal. Account Type"::Vendor]
                                                                THEN BEGIN
                                                                  "Bill-to/Pay-to No." := '';
                                                                  "Ship-to/Order Address Code" := '';
                                                                  "Sell-to/Buy-from No." := '';
                                                                  "VAT Registration No." := '';
                                                                END;
                                                                IF ("Account Type" IN [
                                                                                       "Account Type"::"G/L Account","Account Type"::"Bank Account","Account Type"::"Fixed Asset"]) AND
                                                                   ("Bal. Account Type" IN [
                                                                                            "Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account","Bal. Account Type"::"Fixed Asset"])
                                                                THEN
                                                                  VALIDATE("Payment Terms Code",'');

                                                                IF "Bal. Account Type" = "Bal. Account Type"::"IC Partner" THEN BEGIN
                                                                  GetTemplate;
                                                                  IF GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany THEN
                                                                    FIELDERROR("Bal. Account Type");
                                                                END;
                                                                IF "Bal. Account Type" <> "Bal. Account Type"::"Bank Account" THEN
                                                                  VALIDATE("Credit Card No.",'');
                                                              END;

                                                   CaptionML=ENU=Bal. Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner }
    { 64  ;   ;Bal. Gen. Posting Type;Option      ;OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Bal. Gen. Posting Type","Bal. Gen. Posting Type"::" ");
                                                                IF ("Bal. Gen. Posting Type" = "Gen. Posting Type"::Settlement) AND (CurrFieldNo <> 0) THEN
                                                                  ERROR(Text006,"Bal. Gen. Posting Type");
                                                                IF "Bal. Gen. Posting Type" > 0 THEN
                                                                  VALIDATE("Bal. VAT Prod. Posting Group");

                                                                IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  "Depreciation Book Code" := '';
                                                                  VALIDATE("FA Posting Type","FA Posting Type"::" ");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Bal. Gen. Posting Type;
                                                   OptionCaptionML=ENU=" ,Purchase,Sale,Settlement";
                                                   OptionString=[ ,Purchase,Sale,Settlement] }
    { 65  ;   ;Bal. Gen. Bus. Posting Group;Code10;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Bal. Gen. Bus. Posting Group",'');
                                                                IF xRec."Bal. Gen. Bus. Posting Group" <> "Bal. Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Bal. Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("Bal. VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Bal. Gen. Bus. Posting Group }
    { 66  ;   ;Bal. Gen. Prod. Posting Group;Code10;
                                                   TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Bal. Gen. Prod. Posting Group",'');
                                                                IF xRec."Bal. Gen. Prod. Posting Group" <> "Bal. Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Bal. Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("Bal. VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Bal. Gen. Prod. Posting Group }
    { 67  ;   ;Bal. VAT Calculation Type;Option   ;CaptionML=ENU=Bal. VAT Calculation Type;
                                                   OptionCaptionML=ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 68  ;   ;Bal. VAT %          ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                IF "Bal. VAT Posting" = "Bal. VAT Posting"::"Automatic VAT Entry" THEN  //**4PS.n
                                                                CASE "Bal. VAT Calculation Type" OF
                                                                  "Bal. VAT Calculation Type"::"Normal VAT",
                                                                  "Bal. VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      "Bal. VAT Amount" :=
                                                                        ROUND(-Amount * "Bal. VAT %" / (100 + "Bal. VAT %"),Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                      "Bal. VAT Base Amount" :=
                                                                        ROUND(-Amount - "Bal. VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "Bal. VAT Calculation Type"::"Full VAT":
                                                                    "Bal. VAT Amount" := -Amount;
                                                                  "Bal. VAT Calculation Type"::"Sales Tax":
                                                                    IF ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Purchase) AND
                                                                       "Bal. Use Tax"
                                                                    THEN BEGIN
                                                                      "Bal. VAT Amount" := 0;
                                                                      "Bal. VAT %" := 0;
                                                                    END ELSE BEGIN
                                                                      "Bal. VAT Amount" :=
                                                                        -(Amount -
                                                                          SalesTaxCalculate.ReverseCalculateTax(
                                                                            "Bal. Tax Area Code","Bal. Tax Group Code","Bal. Tax Liable",
                                                                            "Posting Date",Amount,Quantity,"Currency Factor"));
                                                                      IF Amount + "Bal. VAT Amount" <> 0 THEN
                                                                        "Bal. VAT %" := ROUND(100 * -"Bal. VAT Amount" / (Amount + "Bal. VAT Amount"),0.00001)
                                                                      ELSE
                                                                        "Bal. VAT %" := 0;
                                                                      "Bal. VAT Amount" :=
                                                                        ROUND("Bal. VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                END;
                                                                "Bal. VAT Base Amount" := -(Amount + "Bal. VAT Amount");
                                                                "Bal. VAT Difference" := 0;

                                                                IF "Currency Code" = '' THEN
                                                                  "Bal. VAT Amount (LCY)" := "Bal. VAT Amount"
                                                                ELSE
                                                                  "Bal. VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        //**4PS.so
                                                                        //"Posting Date","Currency Code",
                                                                        //"Bal. VAT Amount","Currency Factor"));
                                                                        //**4PS.eo
                                                                        //**4PS.sn
                                                                        0, '', "Posting Date","Currency Code",
                                                                        "Bal. VAT Amount","Currency Factor","Account Type" = "Account Type"::Customer));
                                                                        //**4PS.en
                                                                "Bal. VAT Base Amount (LCY)" := -("Amount (LCY)" + "Bal. VAT Amount (LCY)");

                                                                UpdateSalesPurchLCY;
                                                              END;

                                                   CaptionML=ENU=Bal. VAT %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 69  ;   ;Bal. VAT Amount     ;Decimal       ;OnValidate=BEGIN
                                                                GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
                                                                GenJnlBatch.TESTFIELD("Allow VAT Difference",TRUE);
                                                                IF NOT ("Bal. VAT Calculation Type" IN
                                                                        ["Bal. VAT Calculation Type"::"Normal VAT","Bal. VAT Calculation Type"::"Reverse Charge VAT"])
                                                                THEN
                                                                  ERROR(
                                                                    Text010,FIELDCAPTION("Bal. VAT Calculation Type"),
                                                                    "Bal. VAT Calculation Type"::"Normal VAT","Bal. VAT Calculation Type"::"Reverse Charge VAT");
                                                                IF "Bal. VAT Posting" = "Bal. VAT Posting"::"Automatic VAT Entry" THEN //**4PS.n
                                                                IF "Bal. VAT Amount" <> 0 THEN BEGIN
                                                                  TESTFIELD("Bal. VAT %");
                                                                  TESTFIELD(Amount);
                                                                END;

                                                                GetCurrency;
                                                                "Bal. VAT Amount" :=
                                                                  ROUND("Bal. VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);

                                                                IF "Bal. VAT Amount" * Amount > 0 THEN
                                                                  IF "Bal. VAT Amount" > 0 THEN
                                                                    ERROR(Text011,FIELDCAPTION("Bal. VAT Amount"))
                                                                  ELSE
                                                                    ERROR(Text012,FIELDCAPTION("Bal. VAT Amount"));

                                                                "Bal. VAT Base Amount" := -(Amount + "Bal. VAT Amount");

                                                                "Bal. VAT Difference" :=
                                                                  "Bal. VAT Amount" -
                                                                  ROUND(
                                                                    -Amount * "Bal. VAT %" / (100 + "Bal. VAT %"),
                                                                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                IF "Bal. VAT Posting" = "Bal. VAT Posting"::"Automatic VAT Entry" THEN //**4PS.n
                                                                IF ABS("Bal. VAT Difference") > Currency."Max. VAT Difference Allowed" THEN
                                                                  ERROR(
                                                                    Text013,FIELDCAPTION("Bal. VAT Difference"),Currency."Max. VAT Difference Allowed");

                                                                IF "Currency Code" = '' THEN
                                                                  "Bal. VAT Amount (LCY)" := "Bal. VAT Amount"
                                                                ELSE
                                                                  "Bal. VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        //**4PS.so
                                                                        //"Posting Date","Currency Code",
                                                                        //"Bal. VAT Amount","Currency Factor"));
                                                                        //**4PS.eo
                                                                        //**4PS.sn
                                                                        0, '', "Posting Date","Currency Code",
                                                                        "Bal. VAT Amount","Currency Factor","Account Type" = "Account Type"::Customer));
                                                                        //**4PS.en
                                                                "Bal. VAT Base Amount (LCY)" := -("Amount (LCY)" + "Bal. VAT Amount (LCY)");

                                                                UpdateSalesPurchLCY;
                                                              END;

                                                   CaptionML=ENU=Bal. VAT Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 70  ;   ;Bank Payment Type   ;Option        ;OnValidate=BEGIN
                                                                IF ("Bank Payment Type" <> "Bank Payment Type"::" ") AND
                                                                   ("Account Type" <> "Account Type"::"Bank Account") AND
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Bank Account")
                                                                THEN
                                                                  ERROR(
                                                                    Text007,
                                                                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
                                                                IF ("Account Type" = "Account Type"::"Fixed Asset") AND
                                                                   ("Bank Payment Type" <> "Bank Payment Type"::" ")
                                                                THEN
                                                                  FIELDERROR("Account Type");
                                                              END;

                                                   AccessByPermission=TableData 270=R;
                                                   CaptionML=ENU=Bank Payment Type;
                                                   OptionCaptionML=ENU=" ,Computer Check,Manual Check";
                                                   OptionString=[ ,Computer Check,Manual Check] }
    { 71  ;   ;VAT Base Amount     ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "VAT Base Amount" := ROUND("VAT Base Amount",Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    Amount :=
                                                                      ROUND(
                                                                        "VAT Base Amount" * (1 + "VAT %" / 100),
                                                                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    IF "VAT Base Amount" <> 0 THEN
                                                                      FIELDERROR(
                                                                        "VAT Base Amount",
                                                                        STRSUBSTNO(
                                                                          Text008,FIELDCAPTION("VAT Calculation Type"),
                                                                          "VAT Calculation Type"));
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    IF ("Gen. Posting Type" = "Gen. Posting Type"::Purchase) AND
                                                                       "Use Tax"
                                                                    THEN BEGIN
                                                                      "VAT Amount" := 0;
                                                                      "VAT %" := 0;
                                                                      Amount := "VAT Base Amount" + "VAT Amount";
                                                                    END ELSE BEGIN
                                                                      "VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable","Posting Date",
                                                                          "VAT Base Amount",Quantity,"Currency Factor");
                                                                      IF "VAT Base Amount" <> 0 THEN
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base Amount",0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      "VAT Amount" :=
                                                                        ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                                      Amount := "VAT Base Amount" + "VAT Amount";
                                                                    END;
                                                                END;
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=ENU=VAT Base Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 72  ;   ;Bal. VAT Base Amount;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "Bal. VAT Base Amount" := ROUND("Bal. VAT Base Amount",Currency."Amount Rounding Precision");
                                                                CASE "Bal. VAT Calculation Type" OF
                                                                  "Bal. VAT Calculation Type"::"Normal VAT",
                                                                  "Bal. VAT Calculation Type"::"Reverse Charge VAT":
                                                                    Amount :=
                                                                      ROUND(
                                                                        -"Bal. VAT Base Amount" * (1 + "Bal. VAT %" / 100),
                                                                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                  "Bal. VAT Calculation Type"::"Full VAT":
                                                                    IF "Bal. VAT Base Amount" <> 0 THEN
                                                                      FIELDERROR(
                                                                        "Bal. VAT Base Amount",
                                                                        STRSUBSTNO(
                                                                          Text008,FIELDCAPTION("Bal. VAT Calculation Type"),
                                                                          "Bal. VAT Calculation Type"));
                                                                  "Bal. VAT Calculation Type"::"Sales Tax":
                                                                    IF ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Purchase) AND
                                                                       "Bal. Use Tax"
                                                                    THEN BEGIN
                                                                      "Bal. VAT Amount" := 0;
                                                                      "Bal. VAT %" := 0;
                                                                      Amount := -"Bal. VAT Base Amount" - "Bal. VAT Amount";
                                                                    END ELSE BEGIN
                                                                      "Bal. VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          "Bal. Tax Area Code","Bal. Tax Group Code","Bal. Tax Liable",
                                                                          "Posting Date","Bal. VAT Base Amount",Quantity,"Currency Factor");
                                                                      IF "Bal. VAT Base Amount" <> 0 THEN
                                                                        "Bal. VAT %" := ROUND(100 * "Bal. VAT Amount" / "Bal. VAT Base Amount",0.00001)
                                                                      ELSE
                                                                        "Bal. VAT %" := 0;
                                                                      "Bal. VAT Amount" :=
                                                                        ROUND("Bal. VAT Amount",Currency."Amount Rounding Precision");
                                                                      Amount := -"Bal. VAT Base Amount" - "Bal. VAT Amount";
                                                                    END;
                                                                END;
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=ENU=Bal. VAT Base Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 73  ;   ;Correction          ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=ENU=Correction }
    { 75  ;   ;Check Printed       ;Boolean       ;AccessByPermission=TableData 272=R;
                                                   CaptionML=ENU=Check Printed;
                                                   Editable=No }
    { 76  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Payment Terms Code");
                                                              END;

                                                   CaptionML=ENU=Document Date;
                                                   ClosingDates=Yes }
    { 77  ;   ;External Document No.;Code35       ;OnValidate=BEGIN
                                                                SetStructuredPayment;  //NAVNO
                                                                // PEB0026
                                                                gBaseTables.ValidateExternalDocumentNo(Rec);
                                                                // 0026
                                                              END;

                                                   CaptionML=ENU=External Document No. }
    { 78  ;   ;Source Type         ;Option        ;OnValidate=BEGIN
                                                                IF ("Account Type" <> "Account Type"::"G/L Account") AND ("Account No." <> '') OR
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account") AND ("Bal. Account No." <> '')
                                                                THEN
                                                                  UpdateSource
                                                                ELSE
                                                                  "Source No." := '';
                                                              END;

                                                   CaptionML=ENU=Source Type;
                                                   OptionCaptionML=ENU=" ,Customer,Vendor,Bank Account,Fixed Asset";
                                                   OptionString=[ ,Customer,Vendor,Bank Account,Fixed Asset] }
    { 79  ;   ;Source No.          ;Code20        ;TableRelation=IF (Source Type=CONST(Customer)) Customer
                                                                 ELSE IF (Source Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Source Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Source Type=CONST(Fixed Asset)) "Fixed Asset";
                                                   OnValidate=BEGIN
                                                                IF ("Account Type" <> "Account Type"::"G/L Account") AND ("Account No." <> '') OR
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account") AND ("Bal. Account No." <> '')
                                                                THEN
                                                                  UpdateSource;
                                                              END;

                                                   CaptionML=ENU=Source No. }
    { 80  ;   ;Posting No. Series  ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Posting No. Series }
    { 82  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=ENU=Tax Area Code }
    { 83  ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=ENU=Tax Liable }
    { 84  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=ENU=Tax Group Code }
    { 85  ;   ;Use Tax             ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Gen. Posting Type","Gen. Posting Type"::Purchase);
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=ENU=Use Tax }
    { 86  ;   ;Bal. Tax Area Code  ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=ENU=Bal. Tax Area Code }
    { 87  ;   ;Bal. Tax Liable     ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=ENU=Bal. Tax Liable }
    { 88  ;   ;Bal. Tax Group Code ;Code10        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=ENU=Bal. Tax Group Code }
    { 89  ;   ;Bal. Use Tax        ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Bal. Gen. Posting Type","Bal. Gen. Posting Type"::Purchase);
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=ENU=Bal. Use Tax }
    { 90  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("VAT Bus. Posting Group",'');

                                                                VALIDATE("VAT Prod. Posting Group");

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;

                                                                ReadGLSetup;
                                                                IF GLSetup."Norwegian Localization Active" THEN
                                                                  NorwegianVATTools.InitVATCode_GenJnlLine(Rec,FALSE);  //NAVNO
                                                              END;

                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 91  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("VAT Prod. Posting Group",'');

                                                                CheckVATInAlloc;

                                                                "VAT %" := 0;
                                                                "VAT Calculation Type" := "VAT Calculation Type"::"Normal VAT";
                                                                IF "Gen. Posting Type" <> 0 THEN BEGIN
                                                                  IF NOT VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
                                                                    VATPostingSetup.INIT;
                                                                  "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                  //**4PS.sn
                                                                  IF VATPostingSetup.Manually THEN
                                                                    "VAT Posting" := "VAT Posting"::"Manual VAT Entry"
                                                                  ELSE
                                                                    "VAT Posting" := "VAT Posting"::"Automatic VAT Entry";
                                                                  IF "VAT Posting" = "VAT Posting"::"Automatic VAT Entry" THEN
                                                                  //**4PS.en
                                                                  CASE "VAT Calculation Type" OF
                                                                    "VAT Calculation Type"::"Normal VAT":
                                                                      "VAT %" := VATPostingSetup."VAT %";
                                                                    "VAT Calculation Type"::"Full VAT":
                                                                      CASE "Gen. Posting Type" OF
                                                                        "Gen. Posting Type"::Sale:
                                                                          BEGIN
                                                                            VATPostingSetup.TESTFIELD("Sales VAT Account");
                                                                            TESTFIELD("Account No.",VATPostingSetup."Sales VAT Account");
                                                                          END;
                                                                        "Gen. Posting Type"::Purchase:
                                                                          BEGIN
                                                                            VATPostingSetup.TESTFIELD("Purchase VAT Account");
                                                                            TESTFIELD("Account No.",VATPostingSetup."Purchase VAT Account");
                                                                          END;
                                                                      END;
                                                                  END;
                                                                END;
                                                                VALIDATE("VAT %");

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;

                                                                ReadGLSetup;
                                                                IF GLSetup."Norwegian Localization Active" THEN
                                                                  NorwegianVATTools.InitVATCode_GenJnlLine(Rec,FALSE);  //NAVNO
                                                              END;

                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 92  ;   ;Bal. VAT Bus. Posting Group;Code10 ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN
                                                                   ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"]
                                                                THEN
                                                                  TESTFIELD("Bal. VAT Bus. Posting Group",'');

                                                                VALIDATE("Bal. VAT Prod. Posting Group");

                                                                ReadGLSetup;
                                                                IF GLSetup."Norwegian Localization Active" THEN
                                                                  NorwegianVATTools.InitVATCode_GenJnlLine(Rec,TRUE);  //NAVNO
                                                              END;

                                                   CaptionML=ENU=Bal. VAT Bus. Posting Group }
    { 93  ;   ;Bal. VAT Prod. Posting Group;Code10;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN
                                                                   ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"]
                                                                THEN
                                                                  TESTFIELD("Bal. VAT Prod. Posting Group",'');

                                                                "Bal. VAT %" := 0;
                                                                "Bal. VAT Calculation Type" := "Bal. VAT Calculation Type"::"Normal VAT";
                                                                IF "Bal. Gen. Posting Type" <> 0 THEN BEGIN
                                                                  IF NOT VATPostingSetup.GET("Bal. VAT Bus. Posting Group","Bal. VAT Prod. Posting Group") THEN
                                                                    VATPostingSetup.INIT;
                                                                  "Bal. VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                  //**4PS.sn
                                                                  IF VATPostingSetup.Manually THEN
                                                                    "Bal. VAT Posting" := "Bal. VAT Posting"::"Manual VAT Entry"
                                                                  ELSE
                                                                    "Bal. VAT Posting" := "Bal. VAT Posting"::"Automatic VAT Entry";
                                                                  IF "Bal. VAT Posting" = "Bal. VAT Posting"::"Automatic VAT Entry" THEN
                                                                  //**4PS.en
                                                                  CASE "Bal. VAT Calculation Type" OF
                                                                    "Bal. VAT Calculation Type"::"Normal VAT":
                                                                      "Bal. VAT %" := VATPostingSetup."VAT %";
                                                                    "Bal. VAT Calculation Type"::"Full VAT":
                                                                      CASE "Bal. Gen. Posting Type" OF
                                                                        "Bal. Gen. Posting Type"::Sale:
                                                                          BEGIN
                                                                            VATPostingSetup.TESTFIELD("Sales VAT Account");
                                                                            TESTFIELD("Bal. Account No.",VATPostingSetup."Sales VAT Account");
                                                                          END;
                                                                        "Bal. Gen. Posting Type"::Purchase:
                                                                          BEGIN
                                                                            VATPostingSetup.TESTFIELD("Purchase VAT Account");
                                                                            TESTFIELD("Bal. Account No.",VATPostingSetup."Purchase VAT Account");
                                                                          END;
                                                                      END;
                                                                  END;
                                                                END;
                                                                VALIDATE("Bal. VAT %");

                                                                ReadGLSetup;
                                                                IF GLSetup."Norwegian Localization Active" THEN
                                                                  NorwegianVATTools.InitVATCode_GenJnlLine(Rec,TRUE);  //NAVNO
                                                              END;

                                                   CaptionML=ENU=Bal. VAT Prod. Posting Group }
    { 95  ;   ;Additional-Currency Posting;Option ;CaptionML=ENU=Additional-Currency Posting;
                                                   OptionCaptionML=ENU=None,Amount Only,Additional-Currency Amount Only;
                                                   OptionString=None,Amount Only,Additional-Currency Amount Only;
                                                   Editable=No }
    { 98  ;   ;FA Add.-Currency Factor;Decimal    ;CaptionML=ENU=FA Add.-Currency Factor;
                                                   DecimalPlaces=0:15;
                                                   MinValue=0 }
    { 99  ;   ;Source Currency Code;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Source Currency Code;
                                                   Editable=No }
    { 100 ;   ;Source Currency Amount;Decimal     ;AccessByPermission=TableData 4=R;
                                                   CaptionML=ENU=Source Currency Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 101 ;   ;Source Curr. VAT Base Amount;Decimal;
                                                   AccessByPermission=TableData 4=R;
                                                   CaptionML=ENU=Source Curr. VAT Base Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 102 ;   ;Source Curr. VAT Amount;Decimal    ;AccessByPermission=TableData 4=R;
                                                   CaptionML=ENU=Source Curr. VAT Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 103 ;   ;VAT Base Discount % ;Decimal       ;CaptionML=ENU=VAT Base Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 104 ;   ;VAT Amount (LCY)    ;Decimal       ;CaptionML=ENU=VAT Amount (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 105 ;   ;VAT Base Amount (LCY);Decimal      ;CaptionML=ENU=VAT Base Amount (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 106 ;   ;Bal. VAT Amount (LCY);Decimal      ;CaptionML=ENU=Bal. VAT Amount (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 107 ;   ;Bal. VAT Base Amount (LCY);Decimal ;CaptionML=ENU=Bal. VAT Base Amount (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 108 ;   ;Reversing Entry     ;Boolean       ;CaptionML=ENU=Reversing Entry;
                                                   Editable=No }
    { 109 ;   ;Allow Zero-Amount Posting;Boolean  ;CaptionML=ENU=Allow Zero-Amount Posting;
                                                   Editable=No }
    { 110 ;   ;Ship-to/Order Address Code;Code10  ;TableRelation=IF (Account Type=CONST(Customer)) "Ship-to Address".Code WHERE (Customer No.=FIELD(Bill-to/Pay-to No.))
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Order Address".Code WHERE (Vendor No.=FIELD(Bill-to/Pay-to No.))
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) "Ship-to Address".Code WHERE (Customer No.=FIELD(Bill-to/Pay-to No.))
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) "Order Address".Code WHERE (Vendor No.=FIELD(Bill-to/Pay-to No.));
                                                   CaptionML=ENU=Ship-to/Order Address Code }
    { 111 ;   ;VAT Difference      ;Decimal       ;CaptionML=ENU=VAT Difference;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 112 ;   ;Bal. VAT Difference ;Decimal       ;CaptionML=ENU=Bal. VAT Difference;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 113 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   CaptionML=ENU=IC Partner Code;
                                                   Editable=No }
    { 114 ;   ;IC Direction        ;Option        ;CaptionML=ENU=IC Direction;
                                                   OptionCaptionML=ENU=Outgoing,Incoming;
                                                   OptionString=Outgoing,Incoming }
    { 116 ;   ;IC Partner G/L Acc. No.;Code20     ;TableRelation="IC G/L Account";
                                                   OnValidate=VAR
                                                                ICGLAccount@1000 : Record 410;
                                                              BEGIN
                                                                IF "Journal Template Name" <> '' THEN
                                                                  IF "IC Partner G/L Acc. No." <> '' THEN BEGIN
                                                                    GetTemplate;
                                                                    GenJnlTemplate.TESTFIELD(Type,GenJnlTemplate.Type::Intercompany);
                                                                    IF ICGLAccount.GET("IC Partner G/L Acc. No.") THEN
                                                                      ICGLAccount.TESTFIELD(Blocked,FALSE);
                                                                  END
                                                              END;

                                                   CaptionML=ENU=IC Partner G/L Acc. No. }
    { 117 ;   ;IC Partner Transaction No.;Integer ;CaptionML=ENU=IC Partner Transaction No.;
                                                   Editable=No }
    { 118 ;   ;Sell-to/Buy-from No.;Code20        ;TableRelation=IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor;
                                                   OnValidate=BEGIN
                                                                ReadGLSetup;
                                                                IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Sell-to/Buy-from No." THEN
                                                                  UpdateCountryCodeAndVATRegNo("Sell-to/Buy-from No.");
                                                              END;

                                                   CaptionML=ENU=Sell-to/Buy-from No. }
    { 119 ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                VATRegNoFormat@1000 : Record 381;
                                                              BEGIN
                                                                VATRegNoFormat.Test("VAT Registration No.","Country/Region Code",'',0);
                                                              END;

                                                   CaptionML=ENU=VAT Registration No. }
    { 120 ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Registration No.");
                                                              END;

                                                   CaptionML=ENU=Country/Region Code }
    { 121 ;   ;Prepayment          ;Boolean       ;CaptionML=ENU=Prepayment }
    { 122 ;   ;Financial Void      ;Boolean       ;CaptionML=ENU=Financial Void;
                                                   Editable=No }
    { 165 ;   ;Incoming Document Entry No.;Integer;TableRelation="Incoming Document";
                                                   OnValidate=VAR
                                                                IncomingDocument@1000 : Record 130;
                                                              BEGIN
                                                                IF Description = '' THEN
                                                                  Description := COPYSTR(IncomingDocument.Description,1,MAXSTRLEN(Description));
                                                                IF "Incoming Document Entry No." = xRec."Incoming Document Entry No." THEN
                                                                  EXIT;

                                                                IF "Incoming Document Entry No." = 0 THEN
                                                                  IncomingDocument.RemoveReferenceToWorkingDocument(xRec."Incoming Document Entry No.")
                                                                ELSE
                                                                  IncomingDocument.SetGenJournalLine(Rec);
                                                              END;

                                                   CaptionML=ENU=Incoming Document Entry No. }
    { 170 ;   ;Creditor No.        ;Code20        ;OnValidate=BEGIN
                                                                //>>NAVDK
                                                                ReadGLSetup;
                                                                IF GLSetup."Danish localization active" THEN BEGIN
                                                                        IF NOT IsForExportToPaymentFile THEN
                                                                          EXIT;

                                                                        IF "Creditor No." <> '' THEN BEGIN
                                                                          IF "Recipient Bank Account" <> '' THEN
                                                                            FIELDERROR("Recipient Bank Account",
                                                                                STRSUBSTNO(FieldIsNotEmptyErr,FIELDCAPTION("Creditor No."),FIELDCAPTION("Recipient Bank Account")));

                                                                          "Creditor No." := PADSTR('',MAXSTRLEN("Creditor No.") - STRLEN("Creditor No."),'0') + "Creditor No.";
                                                                        END;
                                                                END;
                                                                //<<NAVDK
                                                              END;

                                                   CaptionML=ENU=Creditor No.;
                                                   Numeric=Yes }
    { 171 ;   ;Payment Reference   ;Code50        ;OnValidate=VAR
                                                                PaymentMethod@1060001 : Record 289;
                                                                FIKManagement@1060000 : Codeunit 11128589;
                                                              BEGIN
                                                                IF "Payment Reference" <> '' THEN
                                                                  TESTFIELD("Creditor No.");

                                                                //>>NAVDK
                                                                ReadGLSetup;
                                                                IF GLSetup."Danish localization active" THEN
                                                                BEGIN
                                                                  IF "Payment Reference" <> '' THEN BEGIN
                                                                    TESTFIELD("Payment Method Code");
                                                                    PaymentMethod.GET("Payment Method Code");
                                                                    BEGIN
                                                                      PaymentMethod.TESTFIELD("Payment Type Validation");
                                                                      CASE PaymentMethod."Payment Type Validation" OF
                                                                        PaymentMethod."Payment Type Validation"::"FIK 01",
                                                                        PaymentMethod."Payment Type Validation"::"FIK 73":
                                                                          ERROR(PmtReferenceErr,FIELDCAPTION("Payment Reference"),PaymentMethod.TABLECAPTION,"Payment Method Code");
                                                                      END;
                                                                      "Payment Reference" := FIKManagement.EvaluateFIK("Payment Reference","Payment Method Code");
                                                                    END;
                                                                  END;
                                                                END;
                                                                //<<NAVDK
                                                              END;

                                                   CaptionML=ENU=Payment Reference;
                                                   Numeric=Yes }
    { 172 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=VAR
                                                                PaymentMethod@1060000 : Record 289;
                                                                BankAccount@1060002 : Record 270;
                                                                VendBankAcc@1060001 : Record 288;
                                                                FIKManagement@1060003 : Codeunit 11128589;
                                                                CustBankAcc@1060004 : Record 287;
                                                                PmtExportMgt@1060005 : Codeunit 1210;
                                                              BEGIN
                                                                //>>NAVDK
                                                                ReadGLSetup;
                                                                IF GLSetup."Danish localization active" AND ("Bal. Account Type" = "Bal. Account Type"::"Bank Account") THEN
                                                                //IF "Bal. Account Type" = "Bal. Account Type"::"Bank Account" THEN
                                                                  IF PaymentMethod.GET("Payment Method Code") THEN BEGIN
                                                                    IF PaymentMethod."Payment Type Validation" = PaymentMethod."Payment Type Validation"::" " THEN
                                                                      EXIT;
                                                                    BankAccount.GET("Bal. Account No.");
                                                                    CASE "Account Type" OF
                                                                      "Account Type"::Customer:
                                                                        BEGIN
                                                                          PmtExportMgt.CheckCustRefundPaymentTypeValidation(PaymentMethod);
                                                                          IF CustBankAcc.GET("Account No.","Recipient Bank Account") THEN
                                                                            PmtExportMgt.CheckBankTransferCountryRegion(BankAccount."Country/Region Code",CustBankAcc."Country/Region Code",PaymentMethod);
                                                                        END;
                                                                      "Account Type"::Vendor:
                                                                        BEGIN
                                                                          IF VendBankAcc.GET("Account No.","Recipient Bank Account") THEN
                                                                            PmtExportMgt.CheckBankTransferCountryRegion(BankAccount."Country/Region Code",VendBankAcc."Country/Region Code",PaymentMethod);
                                                                          CASE PaymentMethod."Payment Type Validation" OF
                                                                            PaymentMethod."Payment Type Validation"::"FIK 01",PaymentMethod."Payment Type Validation"::"FIK 73":
                                                                              "Payment Reference" := '';
                                                                            PaymentMethod."Payment Type Validation"::"FIK 04",PaymentMethod."Payment Type Validation"::"FIK 71":
                                                                              "Payment Reference" := FIKManagement.EvaluateFIK("Payment Reference","Payment Method Code");
                                                                          END;
                                                                          UpdateVendorPaymentDetails;
                                                                        END
                                                                    END
                                                                  END
                                                                //<<NAVDK
                                                              END;

                                                   CaptionML=ENU=Payment Method Code }
    { 173 ;   ;Applies-to Ext. Doc. No.;Code35    ;CaptionML=ENU=Applies-to Ext. Doc. No. }
    { 288 ;   ;Recipient Bank Account;Code10      ;TableRelation=IF (Account Type=CONST(Customer)) "Customer Bank Account".Code WHERE (Customer No.=FIELD(Account No.))
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Vendor Bank Account".Code WHERE (Vendor No.=FIELD(Account No.))
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) "Customer Bank Account".Code WHERE (Customer No.=FIELD(Bal. Account No.))
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) "Vendor Bank Account".Code WHERE (Vendor No.=FIELD(Bal. Account No.));
                                                   OnValidate=BEGIN
                                                                //>>NAVDK
                                                                ReadGLSetup;
                                                                IF GLSetup."Danish localization active" THEN BEGIN
                                                                  IF NOT IsForExportToPaymentFile THEN
                                                                    EXIT;
                                                                  UpdateVendorPaymentDetails;
                                                                  IF ("Recipient Bank Account" <> '') AND ("Creditor No." <> '') THEN
                                                                    FIELDERROR("Creditor No.",
                                                                      STRSUBSTNO(FieldIsNotEmptyErr,FIELDCAPTION("Recipient Bank Account"),FIELDCAPTION("Creditor No.")));
                                                                END;
                                                                //<<NAVDK
                                                              END;

                                                   CaptionML=ENU=Recipient Bank Account }
    { 289 ;   ;Message to Recipient;Text70        ;CaptionML=ENU=Message to Recipient;
                                                   Description=140->70 }
    { 290 ;   ;Exported to Payment File;Boolean   ;CaptionML=ENU=Exported to Payment File;
                                                   Editable=No }
    { 291 ;   ;Has Payment Export Error;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Payment Jnl. Export Error Text" WHERE (Journal Template Name=FIELD(Journal Template Name),
                                                                                                             Journal Batch Name=FIELD(Journal Batch Name),
                                                                                                             Journal Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Has Payment Export Error;
                                                   Editable=No }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation=IF (Receiving Company=FILTER('')) "Dimension Set Entry";
                                                   OnValidate=BEGIN
                                                                //**4PS.n Tablerelation changed, only for current company
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=No }
    { 827 ;   ;Credit Card No.     ;Code20        ;TableRelation=IF (Account Type=CONST(Customer),
                                                                     Document Type=FILTER(Payment|Refund),
                                                                     Bal. Account Type=CONST(Bank Account)) "DO Payment Credit Card" WHERE (Customer No.=FIELD(Account No.));
                                                   OnValidate=VAR
                                                                DOPaymentMgt@1000 : Codeunit 825;
                                                              BEGIN
                                                                CheckNoCardTransactEntryExist(xRec);
                                                                IF "Credit Card No." = '' THEN
                                                                  EXIT;

                                                                DOPaymentMgt.CheckCreditCardData("Credit Card No.");
                                                              END;

                                                   CaptionML=ENU=Credit Card No. }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                IF "Job Task No." <> xRec."Job Task No." THEN
                                                                  VALIDATE("Job Planning Line No.",0);
                                                                IF "Job Task No." = '' THEN BEGIN
                                                                  "Job Quantity" := 0;
                                                                  "Job Currency Factor" := 0;
                                                                  "Job Currency Code" := '';
                                                                  "Job Unit Price" := 0;
                                                                  "Job Total Price" := 0;
                                                                  "Job Line Amount" := 0;
                                                                  "Job Line Discount Amount" := 0;
                                                                  "Job Unit Cost" := 0;
                                                                  "Job Total Cost" := 0;
                                                                  "Job Line Discount %" := 0;

                                                                  "Job Unit Price (LCY)" := 0;
                                                                  "Job Total Price (LCY)" := 0;
                                                                  "Job Line Amount (LCY)" := 0;
                                                                  "Job Line Disc. Amount (LCY)" := 0;
                                                                  "Job Unit Cost (LCY)" := 0;
                                                                  "Job Total Cost (LCY)" := 0;
                                                                  EXIT;
                                                                END;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  CopyDimensionsFromJobTaskLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Job Task No. }
    { 1002;   ;Job Unit Price (LCY);Decimal       ;AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Unit Price (LCY);
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 1003;   ;Job Total Price (LCY);Decimal      ;AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Total Price (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1004;   ;Job Quantity        ;Decimal       ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  IF "Job Planning Line No." <> 0 THEN
                                                                    VALIDATE("Job Planning Line No.");
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Quantity;
                                                   DecimalPlaces=0:5 }
    { 1005;   ;Job Unit Cost (LCY) ;Decimal       ;AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Unit Cost (LCY);
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 1006;   ;Job Line Discount % ;Decimal       ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Line Discount %","Job Line Discount %");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Line Discount %;
                                                   AutoFormatType=1 }
    { 1007;   ;Job Line Disc. Amount (LCY);Decimal;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Line Discount Amount (LCY)","Job Line Disc. Amount (LCY)");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Job Line Disc. Amount (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1008;   ;Job Unit Of Measure Code;Code10    ;TableRelation="Unit of Measure";
                                                   CaptionML=ENU=Job Unit Of Measure Code }
    { 1009;   ;Job Line Type       ;Option        ;OnValidate=BEGIN
                                                                IF "Job Planning Line No." <> 0 THEN
                                                                  ERROR(Text019,FIELDCAPTION("Job Line Type"),FIELDCAPTION("Job Planning Line No."));
                                                              END;

                                                   AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Line Type;
                                                   OptionCaptionML=ENU=" ,Schedule,Contract,Both Schedule and Contract";
                                                   OptionString=[ ,Schedule,Contract,Both Schedule and Contract] }
    { 1010;   ;Job Unit Price      ;Decimal       ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Unit Price","Job Unit Price");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Unit Price;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1011;   ;Job Total Price     ;Decimal       ;AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Total Price;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1012;   ;Job Unit Cost       ;Decimal       ;AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Unit Cost;
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1013;   ;Job Total Cost      ;Decimal       ;AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Total Cost;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1014;   ;Job Line Discount Amount;Decimal   ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Line Discount Amount","Job Line Discount Amount");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Line Discount Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1015;   ;Job Line Amount     ;Decimal       ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Line Amount","Job Line Amount");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Line Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1016;   ;Job Total Cost (LCY);Decimal       ;AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Total Cost (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1017;   ;Job Line Amount (LCY);Decimal      ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Line Amount (LCY)","Job Line Amount (LCY)");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Line Amount (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1018;   ;Job Currency Factor ;Decimal       ;CaptionML=ENU=Job Currency Factor }
    { 1019;   ;Job Currency Code   ;Code10        ;OnValidate=BEGIN
                                                                IF ("Job Currency Code" <> xRec."Job Currency Code") OR ("Job Currency Code" <> '') THEN
                                                                  IF JobTaskIsSet THEN BEGIN
                                                                    CreateTempJobJnlLine;
                                                                    UpdatePricesFromJobJnlLine;
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Job Currency Code }
    { 1020;   ;Job Planning Line No.;Integer      ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 11020401;
                                                              BEGIN
                                                                IF "Job Planning Line No." <> 0 THEN BEGIN
                                                                  JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
                                                                  JobPlanningLine.TESTFIELD("Job No.","Job No.");
                                                                  JobPlanningLine.TESTFIELD("Job Task No.","Job Task No.");
                                                                  JobPlanningLine.TESTFIELD(Type,JobPlanningLine.Type::"G/L Account");
                                                                  JobPlanningLine.TESTFIELD("No.","Account No.");
                                                                  JobPlanningLine.TESTFIELD("Usage Link",TRUE);
                                                                  JobPlanningLine.TESTFIELD("System-Created Entry",FALSE);
                                                                  "Job Line Type" := JobPlanningLine."Line Type" + 1;
                                                                  VALIDATE("Job Remaining Qty.",JobPlanningLine."Remaining Qty." - "Job Quantity");
                                                                END ELSE
                                                                  VALIDATE("Job Remaining Qty.",0);
                                                              END;

                                                   OnLookup=VAR
                                                              JobPlanningLine@1000 : Record 11020401;
                                                            BEGIN
                                                              JobPlanningLine.SETRANGE("Job No.","Job No.");
                                                              JobPlanningLine.SETRANGE("Job Task No.","Job Task No.");
                                                              JobPlanningLine.SETRANGE(Type,JobPlanningLine.Type::"G/L Account");
                                                              JobPlanningLine.SETRANGE("No.","Account No.");
                                                              JobPlanningLine.SETRANGE("Usage Link",TRUE);
                                                              JobPlanningLine.SETRANGE("System-Created Entry",FALSE);

                                                              IF PAGE.RUNMODAL(0,JobPlanningLine) = ACTION::LookupOK THEN
                                                                VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
                                                            END;

                                                   AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Planning Line No.;
                                                   BlankZero=Yes }
    { 1030;   ;Job Remaining Qty.  ;Decimal       ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 11020401;
                                                              BEGIN
                                                                IF ("Job Remaining Qty." <> 0) AND ("Job Planning Line No." = 0) THEN
                                                                  ERROR(Text018,FIELDCAPTION("Job Remaining Qty."),FIELDCAPTION("Job Planning Line No."));

                                                                IF "Job Planning Line No." <> 0 THEN BEGIN
                                                                  JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
                                                                  IF JobPlanningLine.Quantity >= 0 THEN BEGIN
                                                                    IF "Job Remaining Qty." < 0 THEN
                                                                      "Job Remaining Qty." := 0;
                                                                  END ELSE BEGIN
                                                                    IF "Job Remaining Qty." > 0 THEN
                                                                      "Job Remaining Qty." := 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 11072003=R;
                                                   CaptionML=ENU=Job Remaining Qty.;
                                                   DecimalPlaces=0:5 }
    { 1200;   ;Direct Debit Mandate ID;Code35     ;TableRelation=IF (Account Type=CONST(Customer)) "SEPA Direct Debit Mandate" WHERE (Customer No.=FIELD(Account No.));
                                                   OnValidate=VAR
                                                                SEPADirectDebitMandate@1000 : Record 1230;
                                                              BEGIN
                                                                IF "Direct Debit Mandate ID" = '' THEN
                                                                  EXIT;
                                                                TESTFIELD("Account Type","Account Type"::Customer);
                                                                SEPADirectDebitMandate.GET("Direct Debit Mandate ID");
                                                                SEPADirectDebitMandate.TESTFIELD("Customer No.","Account No.");
                                                                "Recipient Bank Account" := SEPADirectDebitMandate."Customer Bank Account Code";
                                                              END;

                                                   CaptionML=ENU=Direct Debit Mandate ID }
    { 1220;   ;Data Exch. Entry No.;Integer       ;TableRelation="Data Exch.";
                                                   CaptionML=ENU=Data Exch. Entry No.;
                                                   Editable=No }
    { 1221;   ;Payer Information   ;Text50        ;CaptionML=ENU=Payer Information }
    { 1222;   ;Transaction Information;Text100    ;CaptionML=ENU=Transaction Information }
    { 1223;   ;Data Exch. Line No. ;Integer       ;CaptionML=ENU=Data Exch. Line No.;
                                                   Editable=No }
    { 1224;   ;Applied Automatically;Boolean      ;CaptionML=ENU=Applied Automatically }
    { 1700;   ;Deferral Code       ;Code10        ;TableRelation="Deferral Template"."Deferral Code";
                                                   OnValidate=VAR
                                                                DeferralUtilities@1002 : Codeunit 1720;
                                                              BEGIN
                                                                IF "Deferral Code" <> '' THEN
                                                                  IF "Account Type" IN ["Account Type"::"Fixed Asset","Account Type"::"IC Partner"] THEN
                                                                    ERROR(AccTypeNotSupportedErr);

                                                                DeferralUtilities.DeferralCodeOnValidate("Deferral Code",DeferralDocType::"G/L","Journal Template Name","Journal Batch Name",
                                                                  0,'',"Line No.",GetDeferralAmount,"Posting Date",Description,"Currency Code");
                                                              END;

                                                   CaptionML=ENU=Deferral Code }
    { 1701;   ;Deferral Line No.   ;Integer       ;CaptionML=ENU=Deferral Line No. }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Service Order","Service Order No.", //** 4PS 09-06-2010
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n
                                                                  DATABASE::"Plant Type", "Plant Type", //**4PS.n
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code");
                                                              END;

                                                   CaptionML=ENU=Campaign No. }
    { 5400;   ;Prod. Order No.     ;Code20        ;CaptionML=ENU=Prod. Order No.;
                                                   Editable=No }
    { 5600;   ;FA Posting Date     ;Date          ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=ENU=FA Posting Date }
    { 5601;   ;FA Posting Type     ;Option        ;OnValidate=BEGIN
                                                                IF  NOT (("Account Type" = "Account Type"::"Fixed Asset") OR
                                                                         ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset")) AND
                                                                   ("FA Posting Type" = "FA Posting Type"::" ")
                                                                THEN BEGIN
                                                                  "FA Posting Date" := 0D;
                                                                  "Salvage Value" := 0;
                                                                  "No. of Depreciation Days" := 0;
                                                                  "Depr. until FA Posting Date" := FALSE;
                                                                  "Depr. Acquisition Cost" := FALSE;
                                                                  "Maintenance Code" := '';
                                                                  "Insurance No." := '';
                                                                  "Budgeted FA No." := '';
                                                                  "Duplicate in Depreciation Book" := '';
                                                                  "Use Duplication List" := FALSE;
                                                                  "FA Reclassification Entry" := FALSE;
                                                                  "FA Error Entry No." := 0;
                                                                END;

                                                                IF "FA Posting Type" <> "FA Posting Type"::"Acquisition Cost" THEN
                                                                  TESTFIELD("Insurance No.",'');
                                                                IF "FA Posting Type" <> "FA Posting Type"::Maintenance THEN
                                                                  TESTFIELD("Maintenance Code",'');
                                                                GetFAVATSetup;
                                                                GetFAAddCurrExchRate;
                                                              END;

                                                   AccessByPermission=TableData 5600=R;
                                                   CaptionML=ENU=FA Posting Type;
                                                   OptionCaptionML=ENU=" ,Acquisition Cost,Depreciation,Write-Down,Appreciation,Custom 1,Custom 2,Disposal,Maintenance";
                                                   OptionString=[ ,Acquisition Cost,Depreciation,Write-Down,Appreciation,Custom 1,Custom 2,Disposal,Maintenance] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                IF "Depreciation Book Code" = '' THEN
                                                                  EXIT;

                                                                IF ("Account No." <> '') AND
                                                                   ("Account Type" = "Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  FADeprBook.GET("Account No.","Depreciation Book Code");
                                                                  "Posting Group" := FADeprBook."FA Posting Group";
                                                                  CreateDimForFAPostingGroup; //**4PS call C-026623
                                                                END;

                                                                IF ("Bal. Account No." <> '') AND
                                                                   ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  FADeprBook.GET("Bal. Account No.","Depreciation Book Code");
                                                                  "Posting Group" := FADeprBook."FA Posting Group";
                                                                  CreateDimForFAPostingGroup; //**4PS call C-026623
                                                                END;
                                                                GetFAVATSetup;
                                                                GetFAAddCurrExchRate;
                                                              END;

                                                   CaptionML=ENU=Depreciation Book Code }
    { 5603;   ;Salvage Value       ;Decimal       ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=ENU=Salvage Value;
                                                   AutoFormatType=1 }
    { 5604;   ;No. of Depreciation Days;Integer   ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=ENU=No. of Depreciation Days;
                                                   BlankZero=Yes }
    { 5605;   ;Depr. until FA Posting Date;Boolean;AccessByPermission=TableData 5600=R;
                                                   CaptionML=ENU=Depr. until FA Posting Date }
    { 5606;   ;Depr. Acquisition Cost;Boolean     ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=ENU=Depr. Acquisition Cost }
    { 5609;   ;Maintenance Code    ;Code10        ;TableRelation=Maintenance;
                                                   OnValidate=BEGIN
                                                                IF "Maintenance Code" <> '' THEN
                                                                  TESTFIELD("FA Posting Type","FA Posting Type"::Maintenance);
                                                              END;

                                                   CaptionML=ENU=Maintenance Code }
    { 5610;   ;Insurance No.       ;Code20        ;TableRelation=Insurance;
                                                   OnValidate=BEGIN
                                                                IF "Insurance No." <> '' THEN
                                                                  TESTFIELD("FA Posting Type","FA Posting Type"::"Acquisition Cost");
                                                              END;

                                                   CaptionML=ENU=Insurance No. }
    { 5611;   ;Budgeted FA No.     ;Code20        ;TableRelation="Fixed Asset";
                                                   OnValidate=BEGIN
                                                                IF "Budgeted FA No." <> '' THEN BEGIN
                                                                  FA.GET("Budgeted FA No.");
                                                                  FA.TESTFIELD("Budgeted Asset",TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Budgeted FA No. }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                "Use Duplication List" := FALSE;
                                                              END;

                                                   CaptionML=ENU=Duplicate in Depreciation Book }
    { 5613;   ;Use Duplication List;Boolean       ;OnValidate=BEGIN
                                                                "Duplicate in Depreciation Book" := '';
                                                              END;

                                                   AccessByPermission=TableData 5600=R;
                                                   CaptionML=ENU=Use Duplication List }
    { 5614;   ;FA Reclassification Entry;Boolean  ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=ENU=FA Reclassification Entry }
    { 5615;   ;FA Error Entry No.  ;Integer       ;TableRelation="FA Ledger Entry";
                                                   CaptionML=ENU=FA Error Entry No.;
                                                   BlankZero=Yes }
    { 5616;   ;Index Entry         ;Boolean       ;CaptionML=ENU=Index Entry }
    { 5617;   ;Source Line No.     ;Integer       ;CaptionML=ENU=Source Line No. }
    { 5618;   ;Comment             ;Text250       ;CaptionML=ENU=Comment }
    { 11012000;;Subcontracting Invoice;Boolean    ;CaptionML=ENU=Subcontracting Invoice }
    { 11012010;;Payment Agreement  ;Code20        ;CaptionML=ENU=Payment Agreement }
    { 11012020;;Expected Effective Date;Date      ;CaptionML=ENU=Expected Effective Date }
    { 11012030;;Expected Enddate   ;Date          ;CaptionML=ENU=Expected Enddate }
    { 11012040;;Number of Hours    ;Decimal       ;CaptionML=ENU=Number of Hours;
                                                   MinValue=0 }
    { 11012045;;Bal. VAT Posting   ;Option        ;CaptionML=ENU=Bal. VAT Posting;
                                                   OptionCaptionML=ENU=Automatic VAT Entry,Manual VAT Entry;
                                                   OptionString=Automatic VAT Entry,Manual VAT Entry;
                                                   Editable=No }
    { 11012050;;Avg. Wage Rate     ;Decimal       ;CaptionML=ENU=Avg. Wage Rate;
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 11012060;;Labor Amount       ;Decimal       ;CaptionML=ENU=Labor Amount;
                                                   MinValue=0;
                                                   AutoFormatType=1 }
    { 11012070;;Contribution Percentage Labor;Decimal;
                                                   CaptionML=ENU=Contribution Percentage Labor;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 11012071;;Contribution Percentage Total;Decimal;
                                                   CaptionML=ENU=Contribution Percentage Invoice Total;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 11012075;;Pay To Tax Authority;Boolean      ;CaptionML=ENU=Pay To Tax Authority }
    { 11012080;;Wage Charge (to B Account);Decimal;CaptionML=ENU=Wage Charge (to B Account);
                                                   MinValue=0;
                                                   AutoFormatType=1 }
    { 11012090;;Wage Charge (to Tax Authority);Decimal;
                                                   CaptionML=ENU=Wage Charge (to Tax Authority);
                                                   MinValue=0;
                                                   AutoFormatType=1 }
    { 11012100;;Nat.Ins.Contr.     ;Decimal       ;CaptionML=ENU=Nat.Ins.Contr.;
                                                   MinValue=0;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012110;;Memo               ;Text128       ;CaptionML=ENU=Memo;
                                                   Description=250->128 }
    { 11012120;;Transaction Mode B Payments;Code20;CaptionML=ENU=Transaction Mode Code B Payments }
    { 11012130;;Bank Account Code B Payments;Code10;
                                                   TableRelation=IF (Account Type=CONST(Vendor)) "Vendor Bank Account".Code WHERE (Vendor No.=FIELD(Account No.),
                                                                                                                                   B-Account=CONST(Yes));
                                                   CaptionML=ENU=Bank Account Code B Payments }
    { 11012140;;Approved           ;Boolean       ;CaptionML=ENU=Approved }
    { 11012150;;Unit of Measure Code;Code10       ;TableRelation="Unit of Measure".Code;
                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;  //**4PS.n
                                                            END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 11012160;;Approvement Initials;Code10       ;CaptionML=ENU=Approvement Initials }
    { 11012170;;Employee No.       ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No. }
    { 11012180;;Wage Component     ;Code10        ;TableRelation="Wage Component";
                                                   CaptionML=ENU=Wage Component }
    { 11012190;;Element            ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Project Element".Element WHERE (Project No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                CheckCompanyIC;
                                                                ElementFormat.FormatElem(Element,2,"Receiving Company");
                                                                IF Element <> '' THEN BEGIN
                                                                  ProjElemRec.GET("Job No.",Element);
                                                                  ProjElemRec.CheckProjectElementBlocked;  //call: 6564
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              CheckCompanyIC;
                                                              ProjElemRec."Project No." := "Job No.";
                                                              ProjElemRec.Element := Element;
                                                              ProjElemRec.SETRANGE("Project No.", "Job No.");
                                                              IF PAGE.RUNMODAL(0, ProjElemRec) = ACTION::LookupOK THEN
                                                                VALIDATE(Element, ProjElemRec.Element);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 11012195;;Extension Contract ;Code10        ;TableRelation=IF (Receiving Company=FILTER('')) "Extension Contract"."Contract No." WHERE (Project No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                CheckCompanyIC;
                                                                ExtRec.GET("Job No.", "Extension Contract");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              CheckCompanyIC;
                                                              ExtRec."Project No." := "Job No.";
                                                              ExtRec."Contract No." := "Extension Contract";
                                                              ExtRec.SETRANGE("Project No.", "Job No.");
                                                              IF PAGE.RUNMODAL(0, ExtRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Extension Contract", ExtRec."Contract No.");
                                                            END;

                                                   CaptionML=ENU=Extension Contract }
    { 11012200;;Item No.           ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." <> '') THEN BEGIN
                                                                  ValidateItem(ItemTypeOpt::Item);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 11012201;;Basic Item         ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN BEGIN
                                                                  ValidateItem(ItemTypeOpt::"Basic Item");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Basic Item }
    { 11012202;;Trade Item         ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN BEGIN
                                                                  ValidateItem(ItemTypeOpt::"Trade Item");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Trade Item }
    { 11012204;;Vendor (Trade Item);Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=VAR
                                                                TradeItemRec@1100525000 : Record 11012317;
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                //**4PS
                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") AND ("Vendor (Trade Item)" <> '') THEN BEGIN
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  //db.sn, 17-12-10: M18021
                                                                  IF lvExecValidate THEN BEGIN
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item")
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor");
                                                                  END;
                                                                  //db.en, 17-12-10: M18021
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 11012205;;Manufacturer       ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Manufacturer }
    { 11012210;;Memo Posting       ;Boolean       ;CaptionML=ENU=Memo Posting }
    { 11012220;;Receiving Company  ;Text30        ;TableRelation=Company;
                                                   OnValidate=VAR
                                                                ICLicenceCu@1210190000 : Codeunit 11012780;
                                                              BEGIN
                                                                //**4PS
                                                                ICLicenceCu.CheckICEntry("Receiving Company");   //db, 01-07-04

                                                                IF ("Receiving Company" <> '') AND ("Account Type" <> "Account Type"::Customer) THEN  //* C-017223
                                                                  TESTFIELD("Applies-to Doc. No.", '');

                                                                IF "Receiving Company" <> '' THEN BEGIN
                                                                  "Rental Unit" := '';
                                                                  "Plant Location" := '';
                                                                END;

                                                                "Intercompany Transaction" := ("Receiving Company" <> '');

                                                                VALIDATE("Dimension Set ID", DimMgt.GetDimSetInCompany("Dimension Set ID",xRec."Receiving Company", "Receiving Company"));
                                                              END;

                                                   CaptionML=ENU=Receiving Company }
    { 11012225;;Supplying Company  ;Text30        ;TableRelation=Company;
                                                   OnValidate=VAR
                                                                ICLicenceCu@1210190000 : Codeunit 11012780;
                                                              BEGIN
                                                                //**4PS
                                                                ICLicenceCu.CheckICEntry("Receiving Company");   //db, 01-07-04

                                                                IF ("Receiving Company" <> '') AND ("Account Type" <> "Account Type"::Customer) THEN  //* C-017223
                                                                  TESTFIELD("Applies-to Doc. No.", '');

                                                                IF "Receiving Company" <> '' THEN
                                                                  "Rental Unit" := '';

                                                                "Intercompany Transaction" := ("Receiving Company" <> '');
                                                              END;

                                                   CaptionML=ENU=Supplying Company }
    { 11012230;;Purchase Action    ;Code10        ;TableRelation="Project Purchase Action".Code WHERE (Project No.=FIELD(Job No.),
                                                                                                       Status=FILTER(>=Approved));
                                                   CaptionML=ENU=Purchase Action }
    { 11012240;;Payment Our Bank   ;Code20        ;CaptionML=ENU=Payment Run No.;
                                                   Editable=No }
    { 11012250;;Payment Runno.     ;Code20        ;CaptionML=ENU=Runno.;
                                                   Editable=No }
    { 11012260;;Payment Line No.   ;Integer       ;CaptionML=ENU=Payment Line No.;
                                                   Editable=No }
    { 11012270;;Skip WIP Check     ;Boolean       ;CaptionML=ENU=Skip WIP Check }
    { 11012280;;Interest Date      ;Date          ;OnValidate=BEGIN
                                                                //**4PS.n
                                                                IF ("Interest Date" > "Posting Date") THEN
                                                                  FIELDERROR("Interest Date",STRSUBSTNO(Text11012007, "Interest Date", FIELDCAPTION("Posting Date"),"Posting Date"));
                                                              END;

                                                   CaptionML=ENU=Interest Date;
                                                   ClosingDates=Yes }
    { 11012290;;Labor Amount (Subcontracting);Decimal;
                                                   CaptionML=ENU=Labor Amount (Subcontracting);
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012291;;Plot No.           ;Code10        ;TableRelation=Plot."Plot No." WHERE (Project No.=FIELD(Job No.));
                                                   CaptionML=ENU=Plot No. }
    { 11012300;;Blocked Amount (Subcontracting;Decimal;
                                                   CaptionML=ENU=Blocked Amount (Subcontracting);
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 11012310;;Project Interest   ;Boolean       ;CaptionML=ENU=Project Interest;
                                                   Editable=No }
    { 11012320;;Closed Project No. ;Code20        ;CaptionML=ENU=Closed Project No. }
    { 11012321;;Closed Service Contract No.;Code20;CaptionML=ENU=Closed Service Contract No. }
    { 11012322;;Closed Service Order No.;Code20   ;CaptionML=ENU=Closed Service Order No. }
    { 11012330;;Origin Salary Application;Boolean ;CaptionML=ENU=Origin Salary Application;
                                                   Editable=No }
    { 11012340;;Retention Amount   ;Decimal       ;CaptionML=ENU=Retention Amount;
                                                   Description=Retention;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012345;;Source Curr. Retention Amount;Decimal;
                                                   CaptionML=ENU=Source Curr. Retention Amount;
                                                   Description=Retention;
                                                   Editable=No }
    { 11012350;;Retention Entry Type;Option       ;CaptionML=ENU=Retention Entry Type;
                                                   OptionCaptionML=ENU=" ,Purchase,Sales";
                                                   OptionString=[ ,Purchase,Sales];
                                                   Description=Retention;
                                                   Editable=No }
    { 11012360;;Retention Entry Document Type;Option;
                                                   CaptionML=ENU=Retention Entry Document Type;
                                                   OptionCaptionML=ENU=" ,Closure,Invoice,Credit Memo";
                                                   OptionString=[ ,Closure,Invoice,Credit Memo];
                                                   Description=Retention;
                                                   Editable=No }
    { 11012370;;Subcontract No.    ;Code20        ;TableRelation=IF (Account Type=CONST(Vendor)) "Subcontracter Contract".No. WHERE (Vendor No.=FIELD(Account No.),
                                                                                                                                     Project No.=FIELD(Job No.));
                                                   CaptionML=ENU=Subcontract No.;
                                                   Description=Retention }
    { 11012380;;Applies-to Retention ID;Integer   ;CaptionML=ENU=Applies-to Retention ID;
                                                   Description=Retention;
                                                   Editable=No }
    { 11012390;;Purchase Order     ;Code20        ;TableRelation="Purchase Header";
                                                   CaptionML=ENU=Purchase Order }
    { 11012391;;Purchase Order Line No.;Integer   ;TableRelation="Purchase Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                   Document No.=FIELD(Purchase Order));
                                                   CaptionML=ENU=Purchase Order Line No. }
    { 11012395;;Warranty Object    ;Code10        ;CaptionML=ENU=Warranty Object }
    { 11012400;;FSC Type Code      ;Code10        ;TableRelation="FSC Type";
                                                   CaptionML=ENU=FSC Type Code }
    { 11012550;;Plant Invoice      ;Boolean       ;CaptionML=ENU=Plant Invoice;
                                                   Editable=No }
    { 11012551;;Plant Type         ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Plant Type";
                                                   OnValidate=BEGIN
                                                                FillSystemCreatedEntry;
                                                                FillFixedAssetPlantRelation();
                                                                IF "Plant Type" = '' THEN BEGIN
                                                                  "Plant No." := '';
                                                                  "Cost Component Plant" := '';
                                                                  EXIT;
                                                                END;

                                                                CheckCompanyIC;
                                                                PlantTypeRec.GET("Plant Type");

                                                                VALIDATE("Plant No.");
                                                                IF "Plant No." = '' THEN
                                                                  Description := PlantTypeRec.Description;

                                                                CreateDim(
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."),
                                                                  DATABASE::"Plant Type", "Plant Type",
                                                                  DATABASE::Job,"Job No.",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::"Service Order","Service Order No.", //** 4PS 09-06-2010
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,"Campaign No.");

                                                                //**4PS.sn, idea of JR, see if this will be to all satisfaction.
                                                                IF ("Receiving Company" <> '') AND
                                                                   ("Receiving Company" <> COMPANYNAME) AND
                                                                   (PlantTypeRec."Department Code" <> '') AND
                                                                   ("Shortcut Dimension 1 Code" = '') THEN
                                                                BEGIN
                                                                  VALIDATE("Shortcut Dimension 1 Code", PlantTypeRec."Department Code");
                                                                END;

                                                                IF ("Receiving Company" <> '') AND
                                                                   ("Receiving Company" <> COMPANYNAME) AND
                                                                   (PlantTypeRec."Cost Object" <> '') AND
                                                                   ("Shortcut Dimension 2 Code" = '') THEN
                                                                BEGIN
                                                                  VALIDATE("Shortcut Dimension 2 Code", PlantTypeRec."Cost Object");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              OnLookupPlantType(TRUE);
                                                            END;

                                                   CaptionML=ENU=Plant Type }
    { 11012552;;Plant No.          ;Code10        ;TableRelation=IF (Receiving Company=FILTER('')) "Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   OnValidate=BEGIN
                                                                FillFixedAssetPlantRelation();

                                                                IF "Plant No." = '' THEN BEGIN
                                                                  VALIDATE("Cost Component Plant");
                                                                  EXIT;
                                                                END;

                                                                TESTFIELD("Plant Type");
                                                                CheckCompanyIC;
                                                                PlantNoRec.GET("Plant Type", "Plant No.");
                                                                Description := PlantNoRec.Description;

                                                                VALIDATE("Cost Component Plant");

                                                                CreateDim(
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."),
                                                                  DATABASE::"Plant Type", "Plant Type",
                                                                  DATABASE::Job,"Job No.",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::"Service Order","Service Order No.", //** 4PS 09-06-2010
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,"Campaign No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS.sn
                                                              CheckCompanyIC;
                                                              PlantNoRec.SETRANGE("Plant Type", "Plant Type");
                                                              PlantNoRec."Plant Type" := "Plant Type";
                                                              PlantNoRec."No." := "Plant No.";
                                                              IF PAGE.RUNMODAL(0,PlantNoRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Plant No.", PlantNoRec."No.");
                                                              //**4PS.en
                                                            END;

                                                   CaptionML=ENU=Plant No. }
    { 11012553;;Bulk               ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Type".Bulk WHERE (Code=FIELD(Plant Type)));
                                                   CaptionML=ENU=Bulk;
                                                   Editable=No }
    { 11012554;;Cost Component Plant;Code10       ;TableRelation=IF (Receiving Company=FILTER('')) "Cost Component Plant";
                                                   OnValidate=VAR
                                                                lvPlantSetupRec@1100485000 : Record 11012550;
                                                                ICRec@1100525001 : Record 11012057;
                                                                lvTypeNo@1100485001 : Integer;
                                                                lvModeInEx@1100485002 : Code[1];
                                                                lvVendorPostingGroup@1100525000 : Code[20];
                                                                lvPostingSetup@1100525002 : Record 11020565;
                                                              BEGIN
                                                                IF "Cost Component Plant" = '' THEN BEGIN
                                                                  "Plant Location" := '';
                                                                  EXIT;
                                                                END;

                                                                TESTFIELD("Plant Type");
                                                                CheckCompanyIC;
                                                                CostCompPlantRec.GET("Cost Component Plant");

                                                                PlantTypeRec.GET("Plant Type");

                                                                lvTypeNo := CheckPlantAcqOrRent();
                                                                IF (lvTypeNo = 1) THEN
                                                                  TESTFIELD("Plant No.");
                                                                IF (lvTypeNo <> 0) THEN BEGIN
                                                                  IF ("Plant No." = '') THEN BEGIN
                                                                    IF PlantTypeRec.Bulk THEN BEGIN
                                                                      IF ("Receiving Company" <> '') THEN
                                                                        lvPlantSetupRec.CHANGECOMPANY("Receiving Company");
                                                                      lvPlantSetupRec.GET;
                                                                      IF (lvTypeNo = 1) THEN
                                                                        PlantTypeRec.TESTFIELD(External, FALSE);
                                                                      IF (lvTypeNo = 2) AND (NOT lvPlantSetupRec."Ext Bulk Plant with No. in Inv") THEN
                                                                        PlantTypeRec.TESTFIELD(External, TRUE);
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    PlantNoRec.GET("Plant Type", "Plant No.");
                                                                    IF (lvTypeNo = 1) THEN
                                                                      PlantNoRec.TESTFIELD(External, FALSE);
                                                                    IF (lvTypeNo = 2) THEN
                                                                      PlantNoRec.TESTFIELD(External, TRUE);
                                                                  END;
                                                                END;

                                                                IF NOT FillFixedAssetPlantRelation() THEN BEGIN
                                                                  IF ("Plant No." = '') AND (lvTypeNo <> 0) THEN
                                                                    lvModeInEx := COPYSTR('IE', lvTypeNo, 1);  //* Internal/External
                                                                  //**4PS-JTH 30-03-2010 sn
                                                                  lvVendorPostingGroup := '';
                                                                  IF ("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME) THEN BEGIN
                                                                    IF lvPostingSetup.GET("Source Code", COMPANYNAME, "Receiving Company") THEN
                                                                      BEGIN
                                                                        IF (lvPostingSetup."Prod. Account Credit" <> '') AND
                                                                           (lvPostingSetup."Prod. Account Debit" <> '') THEN
                                                                        BEGIN
                                                                          ICRec.GET(COMPANYNAME, "Receiving Company");
                                                                          lvVendorPostingGroup := ICRec."Vendor Posting Group";
                                                                        END;
                                                                    END;
                                                                  END;
                                                                 //**4PS-JTH 30-03-2010 en
                                                                  PlantPostingSetup.GET(PlantTypeRec.PlantPostingGrp("Plant No.","Receiving Company",lvModeInEx),
                                                                                        lvVendorPostingGroup, //field for Vendor Posting Group  //**4PS-JTH 30-03-2010
                                                                                        "Cost Component Plant");
                                                                  "Account Type" := "Account Type"::"G/L Account";
                                                                  "Account No." := PlantPostingSetup."Plant Cost Account";
                                                                //  Description := CostCompPlantRec.Description;
                                                                END;

                                                                VALIDATE("Account No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS.sn
                                                              CheckCompanyIC;
                                                              CostCompPlantRec.Code := "Cost Component Plant";
                                                              IF PAGE.RUNMODAL(0,CostCompPlantRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Cost Component Plant", CostCompPlantRec.Code);
                                                              //**4PS.en
                                                            END;

                                                   CaptionML=ENU=Cost Component Plant }
    { 11012555;;Plant Location     ;Code20        ;TableRelation="Plant Location" WHERE (Depot=CONST(No));
                                                   OnValidate=VAR
                                                                PlantCostComp@1100409000 : Record 11012575;
                                                              BEGIN
                                                                //**4PS (C001519)
                                                                IF "Plant Location" <> '' THEN BEGIN
                                                                  TESTFIELD("Receiving Company", '');
                                                                  TESTFIELD("Cost Component Plant");
                                                                  PlantCostComp.GET("Cost Component Plant");
                                                                  PlantCostComp.TESTFIELD("Charge Purchase");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Plant Location }
    { 11012800;;Service Order No.  ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Service Order".No.;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Service Order No." = '' THEN BEGIN
                                                                  "Service Location No." := '';
                                                                  "Service Contract No." := '';
                                                                  VALIDATE("Job No.");
                                                                END ELSE BEGIN
                                                                  TESTFIELD("Job No.",''); //C016995
                                                                  CheckCompanyIC;
                                                                  ServOrderRec.GET("Service Order No.");
                                                                  IF CurrFieldNo <> 0 THEN
                                                                    ServOrderRec.CheckStatus(1)
                                                                  ELSE
                                                                    ServOrderRec.CheckStatus(0);
                                                                  "Service Location No." := ServOrderRec."Service Location No.";
                                                                  "Service Contract No." := ServOrderRec."Service Contract No.";
                                                                  "Account Type" := "Account Type"::"G/L Account";

                                                                  CheckAdditionalCostService(CurrFieldNo);  //db, 03-02-10
                                                                  IF "Additional Cost (Service)" = TRUE THEN
                                                                    VALIDATE("Shortcut Dimension 1 Code", ServOrderRec."Department Code (Other)")
                                                                  ELSE
                                                                    VALIDATE("Shortcut Dimension 1 Code", ServOrderRec."Global Dimension 1 Code");

                                                                  VALIDATE("Shortcut Dimension 2 Code");

                                                                END;
                                                                FillSystemCreatedEntry;
                                                                CheckCostCompServOrderType;                        //** 4PS041n

                                                                //** 4PS 09-06-2010 sn
                                                                CreateDim(
                                                                  DATABASE::"Service Order","Service Order No.",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n
                                                                  DATABASE::"Plant Type", "Plant Type", //**4PS.n
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,"Campaign No.");
                                                                //** 4PS 09-06-2010 en
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              OnLookupServiceOrderNo(TRUE);
                                                            END;

                                                   CaptionML=ENU=Service Order No. }
    { 11012801;;Service Location No.;Code20       ;TableRelation="Service Location".No.;
                                                   CaptionML=ENU=Service Location No.;
                                                   Editable=No }
    { 11012804;;Service Contract No.;Code20       ;TableRelation=Service-Contract.No.;
                                                   CaptionML=ENU=Service Contract No.;
                                                   Editable=No }
    { 11012805;;Additional Cost (Service);Boolean ;OnValidate=BEGIN
                                                                //**4PS
                                                                ValidateAdditionalCost;
                                                              END;

                                                   CaptionML=ENU=Additional Cost (Service) }
    { 11012810;;Origin Type        ;Option        ;CaptionML=ENU=Origin Type;
                                                   OptionCaptionML=ENU=" ,Project,Service,Plant";
                                                   OptionString=[ ,Project,Service,Plant] }
    { 11012820;;Rental Unit        ;Code20        ;TableRelation="Rental Unit"."Rental Unit" WHERE (Project No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                IF "Rental Unit" = '' THEN
                                                                  "Rental Unit Line Type" := 0;
                                                                IF "Shortcut Dimension 2 Code" <> '' THEN
                                                                  VALIDATE("Shortcut Dimension 2 Code");  //Determine Account (see also field JobNo)
                                                              END;

                                                   CaptionML=ENU=Rental Unit }
    { 11012821;;Rental Unit Line Type;Option      ;OnValidate=BEGIN
                                                                IF "Rental Unit Line Type" <> 0 THEN
                                                                  TESTFIELD("Rental Unit");
                                                                IF "Shortcut Dimension 2 Code" <> '' THEN
                                                                  VALIDATE("Shortcut Dimension 2 Code");  //Determine Account (see also field JobNo)
                                                              END;

                                                   CaptionML=ENU=Rental Unit Line Type;
                                                   OptionCaptionML=ENU=" ,Rent,Service Cost,Utilities";
                                                   OptionString=[ ,Rent,ServiceCost,Utilities];
                                                   Editable=No }
    { 11012830;;Alternative Bill-to Address;Code10;CaptionML=ENU=Alternative Bill-to Address }
    { 11012840;;Cost Component     ;Code20        ;TableRelation="Cost Component".Code;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                ValidateCostComponent;
                                                              END;

                                                   CaptionML=ENU=Cost Component }
    { 11012845;;Cost Type          ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Dimension Value"."Cost Type" WHERE (Code=FIELD(Shortcut Dimension 2 Code),
                                                                                                           Global Dimension No.=CONST(2)));
                                                   CaptionML=ENU=Cost Type;
                                                   OptionCaptionML=ENU=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                   Editable=No }
    { 11012850;;Cost Type Cost Plus Line;Option   ;OnValidate=VAR
                                                                ProjRec@1100485000 : Record 11072003;
                                                                ProjTypeRec@1100485001 : Record 11012009;
                                                                DimValRec@1100485002 : Record 349;
                                                                lvCompName@1100485003 : Text[30];
                                                                lvPostingSetup@1100525003 : Record 11020565;
                                                                lvVendorPostingGroup@1100525002 : Code[20];
                                                                ICRec@1100525001 : Record 11012057;
                                                                lvICHoursPosting@1100525000 : 'NotApplicable,ReceiverSide,Supplierside';
                                                                lvVendorCde@1100525004 : Code[20];
                                                              BEGIN
                                                                //**4PS
                                                                IF "Job No." <> '' THEN BEGIN
                                                                  DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimValRec, TRUE, "Job No.");

                                                                  "Origin Type" := "Origin Type"::Project;
                                                                  ProjRec.GET("Job No.");
                                                                  ProjTypeRec.GET(ProjRec."Project Type");

                                                                  IF "Receiving Company" <> '' THEN
                                                                    lvCompName := "Receiving Company"
                                                                  ELSE
                                                                    lvCompName := COMPANYNAME;

                                                                  GLSetup.GET;
                                                                  IF ("Receiving Company" <> COMPANYNAME) AND ("Receiving Company" <> '') THEN
                                                                  BEGIN
                                                                    IF lvPostingSetup.GET("Source Code", COMPANYNAME, "Receiving Company") THEN
                                                                    BEGIN
                                                                      IF (lvPostingSetup."Prod. Account Credit" <> '') AND
                                                                         (lvPostingSetup."Prod. Account Debit" <> '') THEN
                                                                      BEGIN
                                                                        ICRec.GET(COMPANYNAME, "Receiving Company");
                                                                        lvVendorPostingGroup := ICRec."Vendor Posting Group";
                                                                        // IcEntryRec."Use IC Vendor Posting Group" := TRUE;
                                                                      END;
                                                                    END;
                                                                  END;

                                                                  lvVendorCde := ExternalEmployeeVendor; //**4PS Call Call C006691

                                                                  "Account No." :=
                                                                    WipAccountProject(
                                                                      ProjRec,ProjTypeRec,DimValRec,ICProjSetupRec."Provisions at Closure",lvCompName,lvVendorCde,lvVendorPostingGroup);
                                                                    //ProjTypeRec.GetWipAccByVendorPostingGrp(ProjRec."Project Type",
                                                                    //                                        DimValRec."Cost Type",
                                                                    //                                        ProjRec."Project Status",
                                                                    //                                        ICProjSetupRec."Provisions at Closure",
                                                                    //                                        lvCompName,
                                                                    //                                        "Cost Type Cost Plus Line",
                                                                    //                                        lvVendorCde,  //** 4PS Call Call C006691 changed
                                                                    //                                        lvICHoursPosting::Supplierside,
                                                                    //                                        lvVendorPostingGroup);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Type Cost Plus Line;
                                                   OptionCaptionML=ENU=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                   Editable=No }
    { 11012860;;Your Reference     ;Text35        ;CaptionML=ENU=Your Reference }
    { 11012870;;Intercompany Transaction;Boolean  ;CaptionML=ENU=Intercompany Transaction }
    { 11012880;;Description 2      ;Text50        ;CaptionML=ENU=Description 2 }
    { 11012890;;Block VAT Posting  ;Boolean       ;CaptionML=ENU=Block VAT Posting;
                                                   Description=**4PS** }
    { 11012891;;VAT-Indication     ;Boolean       ;CaptionML=ENU=VAT-Indication;
                                                   Description=**4PS** }
    { 11012900;;SEPA Return Code   ;Code10        ;CaptionML=ENU=SEPA Return Code;
                                                   Description=DP00674 }
    { 11012997;;Line Type          ;Code10        ;TableRelation="Line Type"."Line Type" WHERE (Document Type=CONST(General Journal));
                                                   CaptionML=ENU=Line Type }
    { 11020254;;Credit Restriction ;Code20        ;TableRelation="Credit Restriction";
                                                   CaptionML=ENU=Credit Restriction;
                                                   Description=**4PS** }
    { 11020255;;Credit Restriction %;Decimal      ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF "Credit Restriction %" <> 0 THEN BEGIN
                                                                  "Credit Restriction Amount" := ROUND(Amount * ("Credit Restriction %" / 100));
                                                                  "Credit Restriction VAT Amount" := ROUND("VAT Amount" * ("Credit Restriction %" / 100));
                                                                  "Cr. Restriction Amt (LCY)" := ROUND("Amount (LCY)" * ("Credit Restriction %" / 100));
                                                                  "Cr. Restriction VAT Amt (LCY)" := ROUND("VAT Amount (LCY)" * ("Credit Restriction %" / 100));
                                                                END;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Credit Restriction %;
                                                   DecimalPlaces=0:2;
                                                   Description=**4PS** }
    { 11020256;;Credit Restriction Date;Date      ;CaptionML=ENU=Credit Restriction Date;
                                                   Description=**4PS** }
    { 11020257;;Credit Restriction Amount;Decimal ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF Amount = 0 THEN
                                                                  "Cr. Restriction Amt (LCY)" := "Credit Restriction Amount"
                                                                ELSE
                                                                  "Cr. Restriction Amt (LCY)" := ROUND(("Amount (LCY)"/Amount) * "Credit Restriction Amount");
                                                              END;

                                                   CaptionML=ENU=Credit Restriction Amount;
                                                   DecimalPlaces=2:2;
                                                   Description=**4PS** }
    { 11020258;;Credit Restriction VAT Amount;Decimal;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF Amount = 0 THEN
                                                                  "Cr. Restriction VAT Amt (LCY)" := "Credit Restriction VAT Amount"
                                                                ELSE
                                                                  "Cr. Restriction VAT Amt (LCY)" := ROUND(("Amount (LCY)"/Amount) * "Credit Restriction VAT Amount");
                                                              END;

                                                   CaptionML=ENU=Credit Restriction VAT Amount;
                                                   DecimalPlaces=2:2;
                                                   Description=**4PS** }
    { 11020259;;Cr. Restriction Amt (LCY);Decimal ;CaptionML=ENU=Cr. Restriction Amt (LCY);
                                                   DecimalPlaces=2:2;
                                                   Description=**4PS** }
    { 11020260;;Cr. Restriction VAT Amt (LCY);Decimal;
                                                   CaptionML=ENU=Cr. Restriction VAT Amt (LCY);
                                                   DecimalPlaces=2:2;
                                                   Description=**4PS** }
    { 11020261;;Apply Credit Restriction;Boolean  ;CaptionML=ENU=Apply Credit Restriction;
                                                   Description=**4PS** }
    { 11020262;;Job Description    ;Text50        ;CaptionML=ENU=Job Description }
    { 11020263;;Pmt. Discount Date 2;Date         ;CaptionML=ENU=Pmt. Discount Date 2;
                                                   Description=4PS }
    { 11020264;;Payment Discount % 2;Decimal      ;CaptionML=ENU=Payment Discount % 2;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Description=4PS }
    { 11020265;;Pmt. Discount Date 3;Date         ;CaptionML=ENU=Pmt. Discount Date 3;
                                                   Description=4PS }
    { 11020266;;Payment Discount % 3;Decimal      ;CaptionML=ENU=Payment Discount % 3;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Description=4PS }
    { 11020270;;Batch Seq. No.     ;Code20        ;TableRelation="Invoice Proposal Batch Seq.";
                                                   CaptionML=ENU=Batch Seq. No.;
                                                   Editable=No }
    { 11126180;;Reference No.      ;Code20        ;CaptionML=ENU=Reference No.;
                                                   Description=NAVFI }
    { 11126181;;Message Type       ;Option        ;InitValue=Reference No;
                                                   CaptionML=ENU=Message Type;
                                                   OptionCaptionML=ENU=Reference No,Invoice Information,Message,Long Message,Tax Message;
                                                   OptionString=Reference No,Invoice Information,Message,Long Message,Tax Message;
                                                   Description=NAVFI }
    { 11126182;;Invoice Message    ;Text128       ;OnValidate=BEGIN
                                                                IF ("Invoice Message" <> '' ) AND ("Message Type" = "Message Type"::"Reference No") THEN BEGIN
                                                                  IF STRLEN("Invoice Message")  > 20 THEN
                                                                    ERROR(Text1090006, FIELDCAPTION("Invoice Message"), 20);
                                                                  RefNoCheck.InvReferenceCheck("Invoice Message");
                                                                END;
                                                                IF "Message Type" = "Message Type"::Message THEN
                                                                  IF STRLEN("Invoice Message") > 70 THEN
                                                                    ERROR(Text1090006, FIELDCAPTION("Invoice Message"), 70);
                                                              END;

                                                   CaptionML=ENU=Invoice Message;
                                                   Description=NAVFI 250->128 }
    { 11126183;No;Invoice Message 2;Text250       ;OnValidate=BEGIN
                                                                IF "Message Type" = "Message Type"::"Long Message" THEN
                                                                  IF STRLEN("Invoice Message" + "Invoice Message 2") > 420 THEN
                                                                    ERROR(Text1090008, FIELDCAPTION("Invoice Message"), FIELDCAPTION("Invoice Message 2"), 420);
                                                              END;

                                                   CaptionML=ENU=Invoice Message 2;
                                                   Description=NAVFI }
    { 11126184;;Payment date       ;Date          ;CaptionML=ENU=Payment date;
                                                   Description=NAVFI }
    { 11128010;;Source Posting Date;Date          ;CaptionML=ENU=Source Posting Date;
                                                   Description=NAVSE (11200) }
    { 11128011;;Auto. Acc. Group   ;Code10        ;TableRelation="Automatic Acc. Header";
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Account Type","Account Type"::"G/L Account")
                                                              END;

                                                   CaptionML=ENU=Auto. Acc. Group;
                                                   Description=NAVSE (11201) }
    { 11128012;;Periodic Template Code;Code10     ;TableRelation="Periodic Template".Code;
                                                   CaptionML=ENU=Periodic Template Code;
                                                   Description=NAVSE11202 }
    { 11128013;;Periodic Starting Date;Date       ;CaptionML=ENU=Periodic Starting Date;
                                                   Description=NAVSE11203 }
    { 11128014;;Code for Bank of Sweden;Code3     ;CaptionML=ENU=Code for Bank of Sweden;
                                                   Numeric=Yes }
    { 11128015;;LB Giro Type       ;Option        ;CaptionML=ENU=LB Giro Type;
                                                   OptionCaptionML=ENU=" ,BG Sweden,PG Sweden,BG Foreign,PG Foreign,SEPA (Old),SEPA pain.001";
                                                   OptionString=[ ,BG Sweden,PG Sweden,BG Foreign,PG Foreign,SEPA,SEPA pain.001];
                                                   Editable=No }
    { 11128017;;LB Giro Journal No.;Integer       ;TableRelation=LB-Pack;
                                                   CaptionML=ENU=LB Giro Journal No.;
                                                   Editable=No }
    { 11128018;;Due Date Next Payment;Date        ;CaptionML=ENU=Due Date Next Payment }
    { 11128019;;LB Ledger Entry No.;Integer       ;CaptionML=ENU=LB Ledger Entry No.;
                                                   Editable=No }
    { 11128020;;Amount ROT         ;Decimal       ;CaptionML=ENU=Amount ROT;
                                                   Description=I.012 }
    { 11128021;;Not Matched        ;Boolean       ;CaptionML=ENU=Not Matched;
                                                   Description=ENH-005 }
    { 11128022;;Received amount    ;Decimal       ;CaptionML=ENU=Received amount;
                                                   Description=IME201;
                                                   Editable=No }
    { 11128061;;Information Type   ;Option        ;CaptionML=ENU=Information Type;
                                                   OptionCaptionML=ENU=" ,Error";
                                                   OptionString=[ ,Error];
                                                   Description=PEB0065 (12047959) }
    { 11128062;;Last GL Entry No.  ;Integer       ;CaptionML=ENU=Last GL Entry No.;
                                                   Description=PEB0076 (12047960) }
    { 11128063;;Last GL Reg. Entry No.;Integer    ;CaptionML=ENU=Last GL Reg. Entry No.;
                                                   Description=PEB0076 (12047961) }
    { 11128064;No;Information      ;Text50        ;CaptionML=ENU="Information ";
                                                   Description=PEB0065 (12047962) }
    { 11128110;;VP Pack No.        ;Integer       ;TableRelation="VP Pack";
                                                   CaptionML=ENU=VP Pack No.;
                                                   Description=PEB0091 (12048858);
                                                   Editable=No }
    { 11128111;No;OCR No.          ;Code30        ;CaptionML=ENU=OCR No.;
                                                   Description=PEB0091 (12048859), 1->0 }
    { 11128112;;Ext. Doc. No. not Mandatory;Boolean;
                                                   CaptionML=ENU=Ext. Doc. No. not Mandatory;
                                                   Description=PEB0091 (12048860);
                                                   Editable=No }
    { 11128158;;Warning            ;Boolean       ;CaptionML=ENU=Warning;
                                                   Description=NAVNO }
    { 11128159;;Warning text       ;Text69        ;CaptionML=ENU=Warning text;
                                                   Description=NAVNO 100->69 }
    { 11128500;;Remittance Account Code;Code10    ;TableRelation="Remittance Account".Code;
                                                   OnValidate=VAR
                                                                RemAccount@1000000000 : Record 11128506;
                                                              BEGIN
                                                                IF RemAccount.GET("Remittance Account Code") THEN BEGIN
                                                                  VALIDATE("Remittance Type",RemAccount.Type);
                                                                  VALIDATE("Remittance Agreement Code",RemAccount."Remittance Agreement Code");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Remittance Account Code;
                                                   Description=NAVNO }
    { 11128501;;BOLS Text Code     ;Option        ;CaptionML=ENU=BOLS Text Code;
                                                   OptionCaptionML=ENU=Transfer without advice,KID transfer,Transfer with advice,Money order,Salary,Seaman's pay,Agricultural settlement,Pension/ Social security,Advice sent from institution other than BBS,Tax,Free text mass payment,Free text,Self-produced money order;
                                                   OptionString=Transfer without advice,KID transfer,Transfer with advice,Money order,Salary,Seaman's pay,Agricultural settlement,Pension/ Social security,Advice sent from institution other than BBS,Tax,Free text mass payment,Free text,Self-produced money order;
                                                   Description=NAVNO }
    { 11128502;;Payment Type Code Domestic;Code2  ;CaptionML=ENU=Payment Type Code Domestic;
                                                   Description=NAVNO }
    { 11128503;;KID                ;Code30        ;OnValidate=VAR
                                                                Tools@1000000001 : Codeunit 11128515;
                                                                ErrorMess@1000000000 : Text[250];
                                                              BEGIN
                                                                IF KID <> '' THEN BEGIN
                                                                  "Recipient Ref. 1" := '';
                                                                  "Recipient Ref. 2" := '';
                                                                  "Recipient Ref. 3" := '';
                                                                  ErrorMess := Tools.CheckKID(KID);
                                                                  IF ErrorMess <> '' THEN
                                                                    ERROR(ErrorMess);
                                                                END;
                                                                SetStructuredPayment;
                                                              END;

                                                   CaptionML=ENU=KID;
                                                   Description=NAVNO }
    { 11128504;;Recipient Ref. 1   ;Code80        ;OnValidate=VAR
                                                                RemTools@1000000000 : Codeunit 11128515;
                                                              BEGIN
                                                                VALIDATE(KID);
                                                                RemTools.CheckMessage("Remittance Agreement Code","Recipient Ref. 1");
                                                              END;

                                                   CaptionML=ENU=Recipient Ref. 1;
                                                   Description=NAVNO }
    { 11128505;No;Recipient Ref. 2 ;Code74        ;OnValidate=VAR
                                                                RemTools@1000000000 : Codeunit 11128515;
                                                              BEGIN
                                                                VALIDATE(KID);
                                                                RemTools.CheckMessage("Remittance Agreement Code","Recipient Ref. 2");
                                                              END;

                                                   CaptionML=ENU=Recipient Ref. 2;
                                                   Description=NAVNO 80->74 }
    { 11128506;No;Recipient Ref. 3 ;Code80        ;OnValidate=VAR
                                                                RemTools@1000000000 : Codeunit 11128515;
                                                              BEGIN
                                                                VALIDATE(KID);
                                                                RemTools.CheckMessage("Remittance Agreement Code","Recipient Ref. 3");
                                                              END;

                                                   CaptionML=ENU=Recipient Ref. 3;
                                                   Description=NAVNO }
    { 11128507;;Urgent             ;Boolean       ;CaptionML=ENU=Urgent;
                                                   Description=NAVNO }
    { 11128508;;Agreed Exch. Rate  ;Decimal       ;CaptionML=ENU=Agreed Exch. Rate;
                                                   DecimalPlaces=5:5;
                                                   BlankZero=Yes;
                                                   Description=NAVNO }
    { 11128509;;Agreed With        ;Code6         ;CaptionML=ENU=Agreed With;
                                                   Description=NAVNO }
    { 11128510;;Futures Contract No.;Code6        ;CaptionML=ENU=Futures Contract No.;
                                                   Description=NAVNO }
    { 11128511;;Futures Contract Exch. Rate;Decimal;
                                                   CaptionML=ENU=Futures Contract Exch. Rate;
                                                   DecimalPlaces=5:5;
                                                   BlankZero=Yes;
                                                   Description=NAVNO }
    { 11128512;;Check              ;Option        ;CaptionML=ENU=Check;
                                                   OptionCaptionML=ENU=No,Send to employer,Send to beneficiary;
                                                   OptionString=No,Send to employer,Send to beneficiary;
                                                   Description=NAVNO }
    { 11128513;;Recipient Ref. Abroad;Code35      ;CaptionML=ENU=Recipient Ref. Abroad;
                                                   Description=NAVNO }
    { 11128514;;Payment Type Code Abroad;Code2    ;TableRelation="Payment Type Code Abroad";
                                                   CaptionML=ENU=Payment Type Code Abroad;
                                                   Description=NAVNO }
    { 11128515;;Specification (Norges Bank);Code60;CaptionML=ENU=Specification (Norges Bank);
                                                   Description=NAVNO }
    { 11128516;;Remittance Type    ;Option        ;CaptionML=ENU=Remittance Type;
                                                   OptionCaptionML=ENU=Domestic,Foreign;
                                                   OptionString=Domestic,Foreign;
                                                   Description=NAVNO;
                                                   Editable=No }
    { 11128517;;Payment Due Date   ;Date          ;CaptionML=ENU=Payment Due Date;
                                                   Description=NAVNO;
                                                   Editable=No }
    { 11128518;;Remittance Agreement Code;Code10  ;TableRelation="Remittance Agreement".Code;
                                                   CaptionML=ENU=Remittance Agreement Code;
                                                   Description=NAVNO }
    { 11128519;;Remittance Warning ;Boolean       ;CaptionML=ENU=Remittance Warning;
                                                   Description=NAVNO }
    { 11128520;;Remittance Warning Text;Text61    ;CaptionML=ENU=Remittance Warning Text;
                                                   Description=NAVNO, 100->61 }
    { 11128521;;Waiting Journal Reference;Integer ;OnValidate=BEGIN
                                                                IF NOT CONFIRM(RemittanceUpdateWarningQst,FALSE,FIELDCAPTION("Waiting Journal Reference")) THEN
                                                                  ERROR('');
                                                              END;

                                                   OnLookup=VAR
                                                              WaitingJournalLine@1000000000 : Record 11128507;
                                                              WaitingJournal@1000000001 : Page 11128509;
                                                            BEGIN
                                                              TESTFIELD("Account Type","Account Type"::Vendor);
                                                              WaitingJournal.LOOKUPMODE(TRUE);
                                                              IF WaitingJournal.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                WaitingJournal.GETRECORD(WaitingJournalLine);
                                                                VALIDATE("Waiting Journal Reference",WaitingJournalLine.Reference);
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Waiting Journal Reference;
                                                   BlankZero=Yes;
                                                   Description=NAVNO }
    { 11128522;;Remittance Handling Ref.;Text6    ;CaptionML=ENU=Remittance Handling Ref.;
                                                   Description=NAVNO;
                                                   Editable=No }
    { 11128523;;Execution Ref. 2   ;Text12        ;CaptionML=ENU=Execution Ref. 2;
                                                   Description=NAVNO }
    { 11128524;;Structured Payment ;Boolean       ;CaptionML=ENU=Structured Payment;
                                                   Description=NAVNO;
                                                   Editable=No }
    { 11128525;;Our Account No.    ;Text20        ;OnValidate=BEGIN
                                                                SetStructuredPayment;
                                                              END;

                                                   CaptionML=ENU=Our Account No.;
                                                   Description=NAVNO }
    { 11128526;;VAT Code           ;Code10        ;TableRelation="VAT Code".Code;
                                                   OnValidate=BEGIN
                                                                NorwegianVATTools.InitPostingGrps_GenJnlLine(Rec,FALSE);
                                                              END;

                                                   CaptionML=ENU=VAT Code;
                                                   Description=NAVNO }
    { 11128527;;Bal. VAT Code      ;Code10        ;TableRelation="Automatic Acc. Header".No.;
                                                   OnValidate=BEGIN
                                                                NorwegianVATTools.InitPostingGrps_GenJnlLine(Rec,TRUE);
                                                              END;

                                                   CaptionML=ENU=Bal. VAT Code;
                                                   Description=NAVNO }
    { 11128528;;Source Curr. Inv.tax Amount;Decimal;
                                                   CaptionML=ENU=Source Curr. Inv.tax Amount;
                                                   Description=NAVNO;
                                                   Editable=No }
    { 11128529;;Source Curr. Inv.tax Base;Decimal ;CaptionML=ENU=Source Curr. Inv.tax Base;
                                                   Description=NAVNO;
                                                   Editable=No }
    { 11128530;;VAT Base Amount Type;Option       ;CaptionML=ENU=VAT Base Amount Type;
                                                   OptionCaptionML=ENU=Automatic,With VAT,Without VAT;
                                                   OptionString=Automatic,With VAT,Without VAT;
                                                   Description=NAVNO }
    { 11128620;;Giro Acc. No.      ;Code8         ;OnValidate=BEGIN
                                                                IF NOT IsForExportToPaymentFile THEN
                                                                  EXIT;

                                                                IF "Giro Acc. No." <> '' THEN BEGIN
                                                                  IF "Recipient Bank Account" <> '' THEN
                                                                    FIELDERROR("Recipient Bank Account",
                                                                      STRSUBSTNO(FieldIsNotEmptyErr,FIELDCAPTION("Giro Acc. No."),FIELDCAPTION("Recipient Bank Account")));

                                                                  "Giro Acc. No." := PADSTR('',MAXSTRLEN("Giro Acc. No.") - STRLEN("Giro Acc. No."),'0') + "Giro Acc. No.";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Giro Acc. No.;
                                                   Description=NAVDK }
  }
  KEYS
  {
    {    ;Journal Template Name,Journal Batch Name,Line No.;
                                                   SumIndexFields=Balance (LCY);
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Journal Template Name,Journal Batch Name,Posting Date,Document No.;
                                                   MaintainSQLIndex=No }
    {    ;Account Type,Account No.,Applies-to Doc. Type,Applies-to Doc. No. }
    {    ;Document No.                            ;MaintainSQLIndex=No }
    {    ;Journal Template Name,Journal Batch Name,Account Type,Account No. }
    {    ;Journal Template Name,Journal Batch Name,Account Type,Due Date }
    {    ;Incoming Document Entry No.              }
    {    ;Journal Template Name,Journal Batch Name,Remittance Agreement Code,Remittance Type,Remittance Account Code,Posting Date,Account No.,Urgent,Futures Contract No.,Futures Contract Exch. Rate,Currency Code,Currency Factor,Agreed Exch. Rate,Agreed With,KID }
    {    ;Journal Template Name,Journal Batch Name,Applies-to Doc. No.,Reference No. }
    {    ;Journal Template Name,Journal Batch Name,Account Type,Account No.,Business Unit Code,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Posting Date;
                                                   SumIndexFields=Amount (LCY),Debit Amount,Credit Amount }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst '@@@="%1=Account Type,%2=Balance Account Type";ENU=%1 or %2 must be a G/L account or bank account.';
      Text001@1001 : TextConst 'ENU=You must not specify %1 when %2 is %3.';
      Text002@1002 : TextConst 'ENU=cannot be specified without %1';
      Text003@1003 : TextConst 'ENU=The %1 in the %2 will be changed from %3 to %4.\Do you want to continue?';
      Text005@1005 : TextConst 'ENU=The update has been interrupted to respect the warning.';
      Text006@1006 : TextConst 'ENU=The %1 option can only be used internally in the system.';
      Text007@1007 : TextConst '@@@="%1=Account Type,%2=Balance Account Type";ENU=%1 or %2 must be a bank account.';
      Text008@1008 : TextConst 'ENU=" must be 0 when %1 is %2."';
      Text009@1009 : TextConst 'ENU=LCY';
      Text010@1010 : TextConst 'ENU=%1 must be %2 or %3.';
      Text011@1011 : TextConst 'ENU=%1 must be negative.';
      Text012@1012 : TextConst 'ENU=%1 must be positive.';
      Text013@1013 : TextConst 'ENU=The %1 must not be more than %2.';
      Text017@1065 : TextConst 'ENU=Credit card %1 has already been performed for this %2, but posting failed. You must complete posting of the document of type %2 with the number %3.';
      GenJnlTemplate@1014 : Record 80;
      GenJnlBatch@1015 : Record 232;
      GenJnlLine@1016 : Record 81;
      GLAcc@1017 : Record 15;
      Cust@1018 : Record 18;
      Vend@1020 : Record 23;
      ICPartner@1057 : Record 413;
      Currency@1022 : Record 4;
      CurrExchRate@1023 : Record 330;
      PaymentTerms@1024 : Record 3;
      CustLedgEntry@1025 : Record 21;
      VendLedgEntry@1026 : Record 25;
      GenJnlAlloc@1027 : Record 221;
      VATPostingSetup@1028 : Record 325;
      BankAcc@1029 : Record 270;
      BankAcc2@1030 : Record 270;
      BankAcc3@1031 : Record 270;
      FA@1032 : Record 5600;
      FASetup@1033 : Record 5603;
      FADeprBook@1034 : Record 5612;
      GenBusPostingGrp@1035 : Record 250;
      GenProdPostingGrp@1036 : Record 251;
      GLSetup@1037 : Record 98;
      Job@1060 : Record 11072003;
      JobJnlLine@1059 : TEMPORARY Record 11072008;
      ICProjSetupRec@1210190013 : Record 315;
      ProjRec@11012004 : Record 11072003;
      ProjTypeRec@11012026 : Record 11012009;
      ProjElemRec@11012027 : Record 11012010;
      ExtRec@1210190022 : Record 11012004;
      DimValRec@11012005 : Record 349;
      PlantTypeRec@1210190002 : Record 11012551;
      PlantNoRec@1210190003 : Record 11012552;
      CostCompPlantRec@1210190001 : Record 11012575;
      PlantPostingSetup@1210190000 : Record 11012570;
      ServTypeRec@1210190021 : Record 11012814;
      ServContrRec@1210190010 : Record 11012812;
      ServOrderRec@1210190005 : Record 11012823;
      CostCompRec@1100409000 : Record 11012012;
      NoSeriesMgt@1040 : Codeunit 396;
      CustCheckCreditLimit@1041 : Codeunit 312;
      SalesTaxCalculate@1042 : Codeunit 398;
      GenJnlApply@1043 : Codeunit 225;
      GenJnlShowCTEntries@1039 : Codeunit 16;
      CustEntrySetApplID@1044 : Codeunit 101;
      VendEntrySetApplID@1045 : Codeunit 111;
      DimMgt@1046 : Codeunit 408;
      PaymentToleranceMgt@1053 : Codeunit 426;
      NorwegianVATTools@1080001 : Codeunit 11128500;
      DeferralUtilities@1051 : Codeunit 1720;
      ApprovalsMgmt@1069 : Codeunit 1535;
      Window@1004 : Dialog;
      DeferralDocType@1050 : 'Purchase,Sales,G/L';
      FromCurrencyCode@1048 : Code[10];
      ToCurrencyCode@1049 : Code[10];
      CurrencyCode@1052 : Code[10];
      Text014@1054 : TextConst 'ENU=The %1 %2 has a %3 %4.\Do you still want to use %1 %2 in this journal line?';
      TemplateFound@1056 : Boolean;
      Text015@1058 : TextConst 'ENU=You are not allowed to apply and post an entry to an entry with an earlier posting date.\\Instead, post %1 %2 and then apply it to %3 %4.';
      DoSkipModify@1100525001 : Boolean;
      CurrencyDate@1061 : Date;
      SourceCodeSetup@1063 : Record 242;
      Text016@1062 : TextConst 'ENU=%1 must be G/L Account or Bank Account.';
      HideValidationDialog@1064 : Boolean;
      Text018@1066 : TextConst 'ENU=%1 can only be set when %2 is set.';
      Text019@1067 : TextConst 'ENU=%1 cannot be changed when %2 is set.';
      GLSetupRead@1019 : Boolean;
      FieldIsNotEmptyErr@1060001 : TextConst '@@@="%1=Field;%2=Field";ENU=%1 cannot be used while %2 has a value.';
      ExportAgainQst@1038 : TextConst 'ENU=One or more of the selected lines have already been exported. Do you want to export them again?';
      NothingToExportErr@1021 : TextConst 'ENU=There is nothing to export.';
      NotExistErr@1068 : TextConst 'ENU=Document No. %1 does not exist or is already closed.';
      PmtReferenceErr@1060000 : TextConst '@@@="%1=Field;%2=Table;%3=Field";ENU=%1 should be blank for %2 %3.';
      RemittanceUpdateWarningQst@1080000 : TextConst 'ENU=%1 is usually updated automatically by remittance system.\Are you sure you want to change this?';
      Vend3@1090046 : Record 23;
      RefNoCheck@1090045 : Codeunit 11126182;
      Text1090000@1090047 : TextConst 'ENU=Select Vendor';
      Text1090001@1090048 : TextConst 'ENU=Insert Vendors Invoicenumber';
      Text1090002@1090049 : TextConst 'ENU=Our Account No is missing from vendor card';
      Text1090003@1090050 : TextConst 'ENU=Minimum lenght of Reference No.  is 2 character';
      Text1090004@1090051 : TextConst 'ENU=Error in Referencenumber';
      Text1090005@1090052 : TextConst 'ENU=Selec other message type or type new Reference No.';
      Text1090006@1090053 : TextConst 'ENU=%1 too long, maximum length is %2 characters.';
      Text1090008@1090055 : TextConst 'ENU=%1 and %2 are too long, maximum length is %3 characters.';
      DocNoFilterErr@1047 : TextConst 'ENU=The document numbers cannot be renumbered while there is an active filter on the Document No. field.';
      DueDateMsg@1150 : TextConst 'ENU=This posting date will cause an overdue payment.';
      CalcPostDateMsg@1169 : TextConst 'ENU=Processing payment journal lines #1##########';
      AccTypeNotSupportedErr@1055 : TextConst 'ENU=You cannot specify a deferral code for this type of account.';
      ElementFormat@1210190007 : Codeunit 11012022;
      ValidateCu@1210190006 : Codeunit 11012033;
      Dim1@1210190009 : Code[20];
      Dim2@1210190008 : Code[20];
      ItemTypeOpt@1000000000 : 'Item,Basic Item,Trade Item,Trade Vendor';
      Text11012000@1100528400 : TextConst 'ENU=Surcharge %1';
      Text11012004@1210190020 : TextConst 'ENU=%1 %2 is fully applied';
      Text11012005@1210190019 : TextConst 'ENU=%1 %2 does not exist';
      Text11012006@1210190018 : TextConst 'ENU=%1 %2 is already existing as a Proposal Entry';
      Text11012007@1210190011 : TextConst 'ENU=(%1) may not be greater than the de %2 (%3)';
      Text11012008@1100485000 : TextConst 'ENU=Watch out, %1 %2 has an earlier posting date than %3 %4.';
      DPA_Management@1100000999 : Codeunit 11012783;
      WhileHoursPostNoDPACheck@1100525000 : Boolean;
      Text11012009@1100528500 : TextConst 'ENU=If you want to do a refund, fill the Debit Amount first.';
      DontWarnValidateAppliesToDocNoBool@1100285500 : Boolean;
      "*** PEB ***"@12047959 : Integer;
      gBaseTables@12047958 : Codeunit 11128080;

    PROCEDURE EmptyLine@5() : Boolean;
    BEGIN
      EXIT(
        ("Account No." = '') AND (Amount = 0) AND
        (("Bal. Account No." = '') OR NOT "System-Created Entry"));
    END;

    PROCEDURE UpdateLineBalance@2();
    BEGIN
      IF ((Amount > 0) AND (NOT Correction)) OR
         ((Amount < 0) AND Correction)
      THEN BEGIN
        "Debit Amount" := Amount;
        "Credit Amount" := 0
      END ELSE BEGIN
        "Debit Amount" := 0;
        "Credit Amount" := -Amount;
      END;
      IF "Currency Code" = '' THEN
        "Amount (LCY)" := Amount;
      CASE TRUE OF
        ("Account No." <> '') AND ("Bal. Account No." <> ''):
          "Balance (LCY)" := 0;
        "Bal. Account No." <> '':
          "Balance (LCY)" := -"Amount (LCY)";
        ELSE
          "Balance (LCY)" := "Amount (LCY)";
      END;

      CLEAR(GenJnlAlloc);
      GenJnlAlloc.UpdateAllocations(Rec);

      UpdateSalesPurchLCY;

      IF ("Deferral Code" <> '') AND (Amount <> xRec.Amount) AND ((Amount <> 0) AND (xRec.Amount <> 0)) THEN
        VALIDATE("Deferral Code");
    END;

    PROCEDURE SetUpNewLine@9(LastGenJnlLine@1000 : Record 81;Balance@1001 : Decimal;BottomLine@1002 : Boolean);
    BEGIN
      GenJnlTemplate.GET("Journal Template Name");
      GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
      GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      IF GenJnlLine.FINDFIRST THEN BEGIN
        "Posting Date" := LastGenJnlLine."Posting Date";
        "Document Date" := LastGenJnlLine."Posting Date";
        "Document No." := LastGenJnlLine."Document No.";
        IF BottomLine AND
           (Balance - LastGenJnlLine."Balance (LCY)" = 0) AND
           NOT LastGenJnlLine.EmptyLine
        THEN
          IncrementDocumentNo;
      END ELSE BEGIN
        "Posting Date" := WORKDATE;
        "Document Date" := WORKDATE;
        IF GenJnlBatch."No. Series" <> '' THEN BEGIN
          CLEAR(NoSeriesMgt);
          "Document No." := NoSeriesMgt.TryGetNextNo(GenJnlBatch."No. Series","Posting Date");
        END;
      END;
      IF GenJnlTemplate.Recurring THEN
        "Recurring Method" := LastGenJnlLine."Recurring Method";
      "Account Type" := LastGenJnlLine."Account Type";
      "Document Type" := LastGenJnlLine."Document Type";
      "Source Code" := GenJnlTemplate."Source Code";
      "Reason Code" := GenJnlBatch."Reason Code";
      "Posting No. Series" := GenJnlBatch."Posting No. Series";
      "Bal. Account Type" := GenJnlBatch."Bal. Account Type";
      IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Fixed Asset"]) AND
         ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Fixed Asset"])
      THEN
        "Account Type" := "Account Type"::"G/L Account";
      VALIDATE("Bal. Account No.",GenJnlBatch."Bal. Account No.");
      Description := '';
    END;

    PROCEDURE CheckDocNoOnLines@78();
    VAR
      GenJnlBatch@1002 : Record 232;
      GenJnlLine@1001 : Record 81;
      LastDocNo@1003 : Code[20];
    BEGIN
      GenJnlLine.COPYFILTERS(Rec);

      IF NOT GenJnlLine.FINDSET THEN
        EXIT;
      GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
      IF GenJnlBatch."No. Series" = '' THEN
        EXIT;

      CLEAR(NoSeriesMgt);
      REPEAT
        GenJnlLine.CheckDocNoBasedOnNoSeries(LastDocNo,GenJnlBatch."No. Series",NoSeriesMgt);
        LastDocNo := GenJnlLine."Document No.";
      UNTIL GenJnlLine.NEXT = 0;
    END;

    PROCEDURE CheckDocNoBasedOnNoSeries@74(LastDocNo@1002 : Code[20];NoSeriesCode@1000 : Code[10];VAR NoSeriesMgtInstance@1001 : Codeunit 396);
    VAR
      NoSeries@1100528500 : Record 308;
    BEGIN
      IF NoSeriesCode = '' THEN
        EXIT;

      IF (LastDocNo = '') OR ("Document No." <> LastDocNo) THEN
      //**4PS.sn
      BEGIN
        NoSeries.GET(NoSeriesCode);
        IF (NOT NoSeries."Manual Nos.") OR
           (CheckDocNoInDefaultNoSeries(NoSeriesCode,"Document No.","Posting Date")) THEN
      //**4PS.en
          TESTFIELD("Document No.",NoSeriesMgtInstance.GetNextNo(NoSeriesCode,"Posting Date",FALSE));
      END; //**4PS.n
    END;

    PROCEDURE RenumberDocumentNo@68();
    VAR
      GenJnlLine2@1006 : Record 81;
      DocNo@1003 : Code[20];
      FirstDocNo@1008 : Code[20];
      FirstTempDocNo@1009 : Code[20];
      LastTempDocNo@1010 : Code[20];
    BEGIN
      GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
      IF GenJnlBatch."No. Series" = '' THEN
        EXIT;
      IF GETFILTER("Document No.") <> '' THEN
        ERROR(DocNoFilterErr);
      CLEAR(NoSeriesMgt);
      FirstDocNo := NoSeriesMgt.TryGetNextNo(GenJnlBatch."No. Series","Posting Date");
      FirstTempDocNo := 'RENUMBERED-000000001';
      // step1 - renumber to non-existing document number
      DocNo := FirstTempDocNo;
      GenJnlLine2 := Rec;
      GenJnlLine2.RESET;
      RenumberDocNoOnLines(DocNo,GenJnlLine2);
      LastTempDocNo := DocNo;

      // step2 - renumber to real document number (within Filter)
      DocNo := FirstDocNo;
      GenJnlLine2.COPYFILTERS(Rec);
      GenJnlLine2 := Rec;
      RenumberDocNoOnLines(DocNo,GenJnlLine2);

      // step3 - renumber to real document number (outside filter)
      DocNo := INCSTR(DocNo);
      GenJnlLine2.RESET;
      GenJnlLine2.SETRANGE("Document No.",FirstTempDocNo,LastTempDocNo);
      RenumberDocNoOnLines(DocNo,GenJnlLine2);

      GET("Journal Template Name","Journal Batch Name","Line No.");
    END;

    LOCAL PROCEDURE RenumberDocNoOnLines@69(VAR DocNo@1000 : Code[20];VAR GenJnlLine2@1001 : Record 81);
    VAR
      LastGenJnlLine@1002 : Record 81;
      GenJnlLine3@1005 : Record 81;
      PrevDocNo@1004 : Code[20];
      FirstDocNo@1006 : Code[20];
      First@1003 : Boolean;
    BEGIN
      FirstDocNo := DocNo;
      WITH GenJnlLine2 DO BEGIN
        SETCURRENTKEY("Journal Template Name","Journal Batch Name","Document No.");
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        LastGenJnlLine.INIT;
        First := TRUE;
        IF FINDSET THEN BEGIN
          REPEAT
            IF "Document No." = FirstDocNo THEN
              EXIT;
            IF NOT First AND ("Document No." <> PrevDocNo) AND NOT LastGenJnlLine.EmptyLine THEN
              DocNo := INCSTR(DocNo);
            PrevDocNo := "Document No.";
            IF ("Applies-to ID" <> '') AND ("Applies-to ID" = "Document No.") THEN
              RenumberAppliesToID(GenJnlLine2,"Document No.",DocNo);
            RenumberAppliesToDocNo(GenJnlLine2,"Document No.",DocNo);
            GenJnlLine3.GET("Journal Template Name","Journal Batch Name","Line No.");
            GenJnlLine3."Document No." := DocNo;
            GenJnlLine3.MODIFY;
            First := FALSE;
            LastGenJnlLine := GenJnlLine2
          UNTIL NEXT = 0
        END
      END
    END;

    LOCAL PROCEDURE RenumberAppliesToID@70(GenJnlLine2@1002 : Record 81;OriginalAppliesToID@1000 : Code[50];NewAppliesToID@1001 : Code[50]);
    VAR
      CustLedgEntry@1003 : Record 21;
      CustLedgEntry2@1009 : Record 21;
      VendLedgEntry@1004 : Record 25;
      VendLedgEntry2@1010 : Record 25;
      AccType@1005 : Option;
      AccNo@1006 : Code[20];
    BEGIN
      GetAccTypeAndNo(GenJnlLine2,AccType,AccNo);
      CASE AccType OF
        "Account Type"::Customer:
          BEGIN
            CustLedgEntry.SETRANGE("Customer No.",AccNo);
            CustLedgEntry.SETRANGE("Applies-to ID",OriginalAppliesToID);
            IF CustLedgEntry.FINDSET THEN
              REPEAT
                CustLedgEntry2.GET(CustLedgEntry."Entry No.");
                CustLedgEntry2."Applies-to ID" := NewAppliesToID;
                CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry2);
              UNTIL CustLedgEntry.NEXT = 0;
          END;
        "Account Type"::Vendor:
          BEGIN
            VendLedgEntry.SETRANGE("Vendor No.",AccNo);
            VendLedgEntry.SETRANGE("Applies-to ID",OriginalAppliesToID);
            IF VendLedgEntry.FINDSET THEN
              REPEAT
                VendLedgEntry2.GET(VendLedgEntry."Entry No.");
                VendLedgEntry2."Applies-to ID" := NewAppliesToID;
                CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry2);
              UNTIL VendLedgEntry.NEXT = 0;
          END;
        ELSE
          EXIT
      END;
      GenJnlLine2."Applies-to ID" := NewAppliesToID;
      GenJnlLine2.MODIFY;
    END;

    LOCAL PROCEDURE RenumberAppliesToDocNo@71(GenJnlLine2@1002 : Record 81;OriginalAppliesToDocNo@1001 : Code[20];NewAppliesToDocNo@1000 : Code[20]);
    BEGIN
      GenJnlLine2.RESET;
      GenJnlLine2.SETRANGE("Journal Template Name",GenJnlLine2."Journal Template Name");
      GenJnlLine2.SETRANGE("Journal Batch Name",GenJnlLine2."Journal Batch Name");
      GenJnlLine2.SETRANGE("Applies-to Doc. Type",GenJnlLine2."Document Type");
      GenJnlLine2.SETRANGE("Applies-to Doc. No.",OriginalAppliesToDocNo);
      GenJnlLine2.MODIFYALL("Applies-to Doc. No.",NewAppliesToDocNo);
    END;

    LOCAL PROCEDURE CheckVATInAlloc@1();
    BEGIN
      IF "Gen. Posting Type" <> 0 THEN BEGIN
        GenJnlAlloc.RESET;
        GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
        GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
        GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
        IF GenJnlAlloc.FIND('-') THEN
          REPEAT
            GenJnlAlloc.CheckVAT(Rec);
          UNTIL GenJnlAlloc.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE SetCurrencyCode@4(AccType2@1000 : 'G/L Account,Customer,Vendor,Bank Account';AccNo2@1001 : Code[20]) : Boolean;
    BEGIN
      "Currency Code" := '';
      IF AccNo2 <> '' THEN
        IF AccType2 = AccType2::"Bank Account" THEN
          IF BankAcc2.GET(AccNo2) THEN
            "Currency Code" := BankAcc2."Currency Code";
      EXIT("Currency Code" <> '');
    END;

    LOCAL PROCEDURE GetCurrency@3();
    BEGIN
      IF "Additional-Currency Posting" =
         "Additional-Currency Posting"::"Additional-Currency Amount Only"
      THEN BEGIN
        IF GLSetup."Additional Reporting Currency" = '' THEN
          ReadGLSetup;
        CurrencyCode := GLSetup."Additional Reporting Currency";
      END ELSE
        CurrencyCode := "Currency Code";

      IF CurrencyCode = '' THEN BEGIN
        CLEAR(Currency);
        Currency.InitRoundingPrecision
      END ELSE
        IF CurrencyCode <> Currency.Code THEN BEGIN
          Currency.GET(CurrencyCode);
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
    END;

    PROCEDURE UpdateSource@6();
    VAR
      SourceExists1@1000 : Boolean;
      SourceExists2@1001 : Boolean;
    BEGIN
      SourceExists1 := ("Account Type" <> "Account Type"::"G/L Account") AND ("Account No." <> '');
      SourceExists2 := ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account") AND ("Bal. Account No." <> '');
      CASE TRUE OF
        SourceExists1 AND NOT SourceExists2:
          BEGIN
            "Source Type" := "Account Type";
            "Source No." := "Account No.";
          END;
        SourceExists2 AND NOT SourceExists1:
          BEGIN
            "Source Type" := "Bal. Account Type";
            "Source No." := "Bal. Account No.";
          END;
        ELSE BEGIN
          "Source Type" := "Source Type"::" ";
          "Source No." := '';
        END;
      END;
    END;

    LOCAL PROCEDURE CheckGLAcc@7();
    BEGIN
      GLAcc.CheckGLAcc;
      //**4PS.s  //call 32872
      //IF GLAcc."Direct Posting" OR ("Journal Template Name" = '') OR "System-Created Entry" THEN
      IF GLAcc."Direct Posting" OR ("Journal Template Name" = '') THEN
        EXIT;
      IF "System-Created Entry" AND NOT (CurrFieldNo = FIELDNO("Bal. Account No.")) THEN
      //**4PS.e
        EXIT;

      IF "Posting Date" <> 0D THEN
        IF "Posting Date" = CLOSINGDATE("Posting Date") THEN
          EXIT;
      //**4PS.sn
      IF (("Job No." = '') AND ("Service Order No." = '') AND ("Plant Type" = '')) OR
         (CurrFieldNo = FIELDNO("Bal. Account No.")) THEN //call 32872
      //**4PS.en
        GLAcc.TESTFIELD("Direct Posting",TRUE);
    END;

    LOCAL PROCEDURE CheckBalanceAcc@1100525004();
    BEGIN
      //**4PS
      IF ("Closed Project No." = '') AND ("Closed Service Order No." = '') AND ("Closed Service Contract No." = '') THEN //C019579
        GLAcc.TESTFIELD("WIP Account",FALSE);  //C016580
      //MC-026430
      IF GLAcc."Direct Posting" OR ("Journal Template Name" = '') OR "System-Created Entry" THEN  //db, 16-12-10: M24619
        EXIT;
      IF "Posting Date" <> 0D THEN
        IF "Posting Date" = CLOSINGDATE("Posting Date") THEN
          EXIT;

      GLAcc.TESTFIELD("Direct Posting",TRUE);
    END;

    PROCEDURE GetFAAddCurrExchRate@8();
    VAR
      DeprBook@1000 : Record 5611;
      FANo@1001 : Code[20];
      UseFAAddCurrExchRate@1002 : Boolean;
    BEGIN
      "FA Add.-Currency Factor" := 0;
      IF ("FA Posting Type" <> "FA Posting Type"::" ") AND
         ("Depreciation Book Code" <> '')
      THEN BEGIN
        IF "Account Type" = "Account Type"::"Fixed Asset" THEN
          FANo := "Account No.";
        IF "Bal. Account Type" = "Bal. Account Type"::"Fixed Asset" THEN
          FANo := "Bal. Account No.";
        IF FANo <> '' THEN BEGIN
          DeprBook.GET("Depreciation Book Code");
          CASE "FA Posting Type" OF
            "FA Posting Type"::"Acquisition Cost":
              UseFAAddCurrExchRate := DeprBook."Add-Curr Exch Rate - Acq. Cost";
            "FA Posting Type"::Depreciation:
              UseFAAddCurrExchRate := DeprBook."Add.-Curr. Exch. Rate - Depr.";
            "FA Posting Type"::"Write-Down":
              UseFAAddCurrExchRate := DeprBook."Add-Curr Exch Rate -Write-Down";
            "FA Posting Type"::Appreciation:
              UseFAAddCurrExchRate := DeprBook."Add-Curr. Exch. Rate - Apprec.";
            "FA Posting Type"::"Custom 1":
              UseFAAddCurrExchRate := DeprBook."Add-Curr. Exch Rate - Custom 1";
            "FA Posting Type"::"Custom 2":
              UseFAAddCurrExchRate := DeprBook."Add-Curr. Exch Rate - Custom 2";
            "FA Posting Type"::Disposal:
              UseFAAddCurrExchRate := DeprBook."Add.-Curr. Exch. Rate - Disp.";
            "FA Posting Type"::Maintenance:
              UseFAAddCurrExchRate := DeprBook."Add.-Curr. Exch. Rate - Maint.";
          END;
          IF UseFAAddCurrExchRate THEN BEGIN
            FADeprBook.GET(FANo,"Depreciation Book Code");
            FADeprBook.TESTFIELD("FA Add.-Currency Factor");
            "FA Add.-Currency Factor" := FADeprBook."FA Add.-Currency Factor";
          END;
        END;
      END;
    END;

    PROCEDURE GetShowCurrencyCode@10(CurrencyCode@1000 : Code[10]) : Code[10];
    BEGIN
      IF CurrencyCode <> '' THEN
        EXIT(CurrencyCode);

      EXIT(Text009);
    END;

    PROCEDURE ClearCustVendApplnEntry@11();
    VAR
      TempCustLedgEntry@1000 : Record 21;
      TempVendLedgEntry@1001 : Record 25;
      CustEntryEdit@1002 : Codeunit 103;
      VendEntryEdit@1003 : Codeunit 113;
      AccType@1004 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
      AccNo@1005 : Code[20];
    BEGIN
      GetAccTypeAndNo(Rec,AccType,AccNo);
      CASE AccType OF
        AccType::Customer:
          IF xRec."Applies-to ID" <> '' THEN BEGIN
            IF FindFirstCustLedgEntryWithAppliesToID(AccNo,xRec."Applies-to ID") THEN BEGIN
              ClearCustApplnEntryFields;
              CustEntrySetApplID.SetApplId(CustLedgEntry,TempCustLedgEntry,'');
            END
          END ELSE
            IF xRec."Applies-to Doc. No." <> '' THEN
              IF FindFirstCustLedgEntryWithAppliesToDocNo(AccNo,xRec."Applies-to Doc. No.") THEN BEGIN
                ClearCustApplnEntryFields;
                //**4PS.sn
                IF ("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME) THEN
                  CustEntryEdit.SetCompany("Receiving Company");
                //**4PS.en
                CustEntryEdit.RUN(CustLedgEntry);
              END;
        AccType::Vendor:
          IF xRec."Applies-to ID" <> '' THEN BEGIN
            IF FindFirstVendLedgEntryWithAppliesToID(AccNo,xRec."Applies-to ID") THEN BEGIN
              ClearVendApplnEntryFields;
              VendEntrySetApplID.SetApplId(VendLedgEntry,TempVendLedgEntry,'');
            END
          END ELSE
            IF xRec."Applies-to Doc. No." <> '' THEN
              IF FindFirstVendLedgEntryWithAppliesToDocNo(AccNo,xRec."Applies-to Doc. No.") THEN BEGIN
                ClearVendApplnEntryFields;
                VendEntryEdit.RUN(VendLedgEntry);
              END;
      END;
    END;

    LOCAL PROCEDURE ClearCustApplnEntryFields@56();
    BEGIN
      CustLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
      CustLedgEntry."Accepted Payment Tolerance" := 0;
      CustLedgEntry."Amount to Apply" := 0;
    END;

    LOCAL PROCEDURE ClearVendApplnEntryFields@57();
    BEGIN
      VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
      VendLedgEntry."Accepted Payment Tolerance" := 0;
      VendLedgEntry."Amount to Apply" := 0;
    END;

    PROCEDURE CheckFixedCurrency@12() : Boolean;
    VAR
      CurrExchRate@1000 : Record 330;
    BEGIN
      CurrExchRate.SETRANGE("Currency Code","Currency Code");
      CurrExchRate.SETRANGE("Starting Date",0D,"Posting Date");

      IF NOT CurrExchRate.FINDLAST THEN
        EXIT(FALSE);

      IF CurrExchRate."Relational Currency Code" = '' THEN
        EXIT(
          CurrExchRate."Fix Exchange Rate Amount" =
          CurrExchRate."Fix Exchange Rate Amount"::Both);

      IF CurrExchRate."Fix Exchange Rate Amount" <>
         CurrExchRate."Fix Exchange Rate Amount"::Both
      THEN
        EXIT(FALSE);

      CurrExchRate.SETRANGE("Currency Code",CurrExchRate."Relational Currency Code");
      IF CurrExchRate.FINDLAST THEN
        EXIT(
          CurrExchRate."Fix Exchange Rate Amount" =
          CurrExchRate."Fix Exchange Rate Amount"::Both);

      EXIT(FALSE);
    END;

    PROCEDURE CreateDim@13(Type1@1000 : Integer;No1@1001 : Code[40];Type2@1002 : Integer;No2@1003 : Code[40];Type3@1004 : Integer;No3@1005 : Code[40];Type4@1006 : Integer;No4@1007 : Code[40];Type5@1008 : Integer;No5@1009 : Code[40];Type6@1100485001 : Integer;No6@1100485000 : Code[40];Type7@1100525002 : Integer;No7@1100525001 : Code[40];Type8@1100525004 : Integer;No8@1100525003 : Code[40]);
    VAR
      lDimValRec@1100525000 : Record 349;
      TableID@1010 : ARRAY [10] OF Integer;
      No@1011 : ARRAY [10] OF Code[20];
      FAPostingGr@1100525005 : Record 5606;
    BEGIN
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      TableID[5] := Type5;
      No[5] := No5;

      //**4PS.sn
      TableID[6] := Type6;
      No[6] := No6;
      TableID[7] := Type7;
      No[7] := No7;
      TableID[8] := Type8; //** 4PS 09-06-2010
      No[8] := No8;        //** 4PS 09-06-2010

      //**4PS.sn call C-026623
      IF ("Account Type" = "Account Type"::"Fixed Asset") AND
         ("FA Posting Type" = "FA Posting Type"::Depreciation) THEN
        IF FAPostingGr.GET("Posting Group") THEN BEGIN
          TableID[9] := DATABASE::"G/L Account";
          No[9] := FAPostingGr."Accum. Depreciation Account";
        END;
      //**4PS.en call C-026623

      Dim1 := "Shortcut Dimension 1 Code";
      Dim2 := "Shortcut Dimension 2 Code";
      DimMgt.SetCompany("Receiving Company"); //**4PS.n
      //**4PS.en

      //"Shortcut Dimension 1 Code" := ''; //**4PS.o Must be kept for Department Authorization
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,"Source Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      //**4PS.sn
      IF (Dim1 <> '') AND ("Shortcut Dimension 1 Code" = '') THEN BEGIN
        "Shortcut Dimension 1 Code" := Dim1;
      END;
      ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");

      IF (Dim2 <> '') AND
         (("Shortcut Dimension 2 Code" = '') OR
          (CurrFieldNo = FIELDNO("Shortcut Dimension 2 Code")))
      THEN BEGIN
        "Shortcut Dimension 2 Code" := Dim2;
        ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
      END;

      // 20-11-2008
      IF (Dim2 <> "Shortcut Dimension 2 Code") AND
         ("Shortcut Dimension 2 Code" <> '') AND
         (CurrFieldNo <> FIELDNO("Shortcut Dimension 2 Code"))
      THEN BEGIN
        IF ("Item No." + "Basic Item" + "Trade Item" = '') THEN BEGIN
          DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", lDimValRec, TRUE, "Job No.");
          "Cost Component" := lDimValRec."Cost Component";
        END;
      END;
      //**4PS.en
    END;

    PROCEDURE ValidateShortcutDimCode@14(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      TESTFIELD("Check Printed",FALSE);
      //**4PS.sn
      IF (FieldNumber = 1) AND (NOT WhileHoursPostNoDPACheck) THEN  //** CALL C006343 changed
        DimMgt.CheckDepartmentAuthorization(DATABASE::"Gen. Journal Line", ShortcutDimCode);
      DimMgt.SetCompany("Receiving Company"); //**4PS.n
      //**4PS.en
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE LookupShortcutDimCode@18(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      TESTFIELD("Check Printed",FALSE);
      DimMgt.SetCompany("Receiving Company"); //**4PS.n
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE ShowShortcutDimCode@15(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.SetCompany("Receiving Company"); //**4PS.n T005462
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    PROCEDURE ShowDimensions@26();
    BEGIN
      DimMgt.SetTableID(DATABASE::"Gen. Journal Line"); //**4PS.n
      DimMgt.SetCompany("Receiving Company"); //**4PS.n
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Journal Template Name","Journal Batch Name","Line No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE GetFAVATSetup@17();
    VAR
      LocalGlAcc@1000 : Record 15;
      FAPostingGr@1001 : Record 5606;
      FABalAcc@1002 : Boolean;
    BEGIN
      IF CurrFieldNo = 0 THEN
        EXIT;
      IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
         ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
      THEN
        EXIT;
      FABalAcc := ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset");
      IF NOT FABalAcc THEN BEGIN
        ClearPostingGroups;
        "Tax Group Code" := '';
        VALIDATE("VAT Prod. Posting Group");
      END;
      IF FABalAcc THEN BEGIN
        ClearBalancePostingGroups;
        "Bal. Tax Group Code" := '';
        VALIDATE("Bal. VAT Prod. Posting Group");
      END;
      IF NOT GenJnlBatch.GET("Journal Template Name","Journal Batch Name") OR
         GenJnlBatch."Copy VAT Setup to Jnl. Lines"
      THEN
        IF (("FA Posting Type" = "FA Posting Type"::"Acquisition Cost") OR
            ("FA Posting Type" = "FA Posting Type"::Disposal) OR
            ("FA Posting Type" = "FA Posting Type"::Maintenance)) AND
           ("Posting Group" <> '')
        THEN
          IF FAPostingGr.GET("Posting Group") THEN BEGIN
            IF "FA Posting Type" = "FA Posting Type"::"Acquisition Cost" THEN BEGIN
              FAPostingGr.TESTFIELD("Acquisition Cost Account");
              LocalGlAcc.GET(FAPostingGr."Acquisition Cost Account");
            END;
            IF "FA Posting Type" = "FA Posting Type"::Disposal THEN BEGIN
              FAPostingGr.TESTFIELD("Acq. Cost Acc. on Disposal");
              LocalGlAcc.GET(FAPostingGr."Acq. Cost Acc. on Disposal");
            END;
            IF "FA Posting Type" = "FA Posting Type"::Maintenance THEN BEGIN
              FAPostingGr.TESTFIELD("Maintenance Expense Account");
              LocalGlAcc.GET(FAPostingGr."Maintenance Expense Account");
            END;
            LocalGlAcc.CheckGLAcc;
            IF NOT FABalAcc THEN BEGIN
              "Gen. Posting Type" := LocalGlAcc."Gen. Posting Type";
              "Gen. Bus. Posting Group" := LocalGlAcc."Gen. Bus. Posting Group";
              "Gen. Prod. Posting Group" := LocalGlAcc."Gen. Prod. Posting Group";
              "VAT Bus. Posting Group" := LocalGlAcc."VAT Bus. Posting Group";
              "VAT Prod. Posting Group" := LocalGlAcc."VAT Prod. Posting Group";
              "Tax Group Code" := LocalGlAcc."Tax Group Code";
              VALIDATE("VAT Prod. Posting Group");
            END ELSE BEGIN;
              "Bal. Gen. Posting Type" := LocalGlAcc."Gen. Posting Type";
              "Bal. Gen. Bus. Posting Group" := LocalGlAcc."Gen. Bus. Posting Group";
              "Bal. Gen. Prod. Posting Group" := LocalGlAcc."Gen. Prod. Posting Group";
              "Bal. VAT Bus. Posting Group" := LocalGlAcc."VAT Bus. Posting Group";
              "Bal. VAT Prod. Posting Group" := LocalGlAcc."VAT Prod. Posting Group";
              "Bal. Tax Group Code" := LocalGlAcc."Tax Group Code";
              VALIDATE("Bal. VAT Prod. Posting Group");
            END;
          END;
    END;

    PROCEDURE GetTemplate@16();
    BEGIN
      IF NOT TemplateFound THEN
        GenJnlTemplate.GET("Journal Template Name");
      TemplateFound := TRUE;
    END;

    LOCAL PROCEDURE UpdateSalesPurchLCY@19();
    BEGIN
      "Sales/Purch. (LCY)" := 0;
      IF (NOT "System-Created Entry") AND ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN BEGIN
        IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) AND ("Bal. Account No." <> '') THEN
          "Sales/Purch. (LCY)" := "Amount (LCY)" + "Bal. VAT Amount (LCY)";
        IF ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]) AND ("Account No." <> '') THEN
          "Sales/Purch. (LCY)" := -("Amount (LCY)" - "VAT Amount (LCY)");
      END;
    END;

    PROCEDURE LookUpAppliesToDocCust@35(AccNo@1000 : Code[20]);
    VAR
      ApplyCustEntries@1002 : Page 232;
    BEGIN
      CLEAR(CustLedgEntry);
      CustLedgEntry.CHANGECOMPANY("Receiving Company"); //**4PS.n
      CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive,"Due Date");
      IF AccNo <> '' THEN
        CustLedgEntry.SETRANGE("Customer No.",AccNo);
      // PEB0026
      IF AccNo = '' THEN
        CustLedgEntry.SETCURRENTKEY(Open);
      // 0026
      CustLedgEntry.SETRANGE(Open,TRUE);
      IF "Applies-to Doc. No." <> '' THEN BEGIN
        CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        IF CustLedgEntry.ISEMPTY THEN BEGIN
          CustLedgEntry.SETRANGE("Document Type");
          CustLedgEntry.SETRANGE("Document No.");
        END;
      END;
      IF "Applies-to ID" <> '' THEN BEGIN
        CustLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
        IF CustLedgEntry.ISEMPTY THEN
          CustLedgEntry.SETRANGE("Applies-to ID");
      END;
      IF "Applies-to Doc. Type" <> "Applies-to Doc. Type"::" " THEN BEGIN
        CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        IF CustLedgEntry.ISEMPTY THEN
          CustLedgEntry.SETRANGE("Document Type");
      END;
      IF Amount <> 0 THEN BEGIN
        CustLedgEntry.SETRANGE(Positive,Amount < 0);
        IF CustLedgEntry.ISEMPTY THEN
          CustLedgEntry.SETRANGE(Positive);
      END;
      ApplyCustEntries.SetGenJnlLine(Rec,GenJnlLine.FIELDNO("Applies-to Doc. No."));
      ApplyCustEntries.SETTABLEVIEW(CustLedgEntry);
      ApplyCustEntries.SETRECORD(CustLedgEntry);
      ApplyCustEntries.LOOKUPMODE(TRUE);
      IF ApplyCustEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ApplyCustEntries.GETRECORD(CustLedgEntry);
        IF AccNo = '' THEN BEGIN
          AccNo := CustLedgEntry."Customer No.";
          IF "Bal. Account Type" = "Bal. Account Type"::Customer THEN
            VALIDATE("Bal. Account No.",AccNo)
          ELSE
            VALIDATE("Account No.",AccNo);
        END;
        SetAmountWithCustLedgEntry;
        "Applies-to Doc. Type" := CustLedgEntry."Document Type";
        "Applies-to Doc. No." := CustLedgEntry."Document No.";
        "Reference No." := CustLedgEntry."Reference No.";       //NAVFI
        "Applies-to ID" := '';
        VALIDATE("Shortcut Dimension 1 Code", CustLedgEntry."Global Dimension 1 Code"); //**4PS.n
        // PEB0026
        VALIDATE("Applies-to Doc. No.");
        // 0026
      END;
      GetCreditCard;
    END;

    PROCEDURE LookUpAppliesToDocVend@36(AccNo@1000 : Code[20]);
    VAR
      ApplyVendEntries@1001 : Page 233;
    BEGIN
      CLEAR(VendLedgEntry);
      VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
      IF AccNo <> '' THEN
        VendLedgEntry.SETRANGE("Vendor No.",AccNo);
      // PEB0026
      IF AccNo = '' THEN
        VendLedgEntry.SETCURRENTKEY(Open);
      // 0026
      VendLedgEntry.SETRANGE(Open,TRUE);
      IF "Applies-to Doc. No." <> '' THEN BEGIN
        VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        IF VendLedgEntry.ISEMPTY THEN BEGIN
          VendLedgEntry.SETRANGE("Document Type");
          VendLedgEntry.SETRANGE("Document No.");
        END;
      END;
      IF "Applies-to ID" <> '' THEN BEGIN
        VendLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
        IF VendLedgEntry.ISEMPTY THEN
          VendLedgEntry.SETRANGE("Applies-to ID");
      END;
      IF "Applies-to Doc. Type" <> "Applies-to Doc. Type"::" " THEN BEGIN
        VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        IF VendLedgEntry.ISEMPTY THEN
          VendLedgEntry.SETRANGE("Document Type");
      END;
      IF  "Applies-to Doc. No." <> ''THEN BEGIN
        VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        IF VendLedgEntry.ISEMPTY THEN
          VendLedgEntry.SETRANGE("Document No.");
      END;
      IF Amount <> 0 THEN BEGIN
        VendLedgEntry.SETRANGE(Positive,Amount < 0);
        IF VendLedgEntry.ISEMPTY THEN;
        VendLedgEntry.SETRANGE(Positive);
      END;
      ApplyVendEntries.SetGenJnlLine(Rec,GenJnlLine.FIELDNO("Applies-to Doc. No."));
      ApplyVendEntries.SETTABLEVIEW(VendLedgEntry);
      ApplyVendEntries.SETRECORD(VendLedgEntry);
      ApplyVendEntries.LOOKUPMODE(TRUE);
      IF ApplyVendEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ApplyVendEntries.GETRECORD(VendLedgEntry);
        IF AccNo = '' THEN BEGIN
          AccNo := VendLedgEntry."Vendor No.";
          IF "Bal. Account Type" = "Bal. Account Type"::Vendor THEN
            VALIDATE("Bal. Account No.",AccNo)
          ELSE
            VALIDATE("Account No.",AccNo);
        END;
        SetAmountWithVendLedgEntry;
        "Applies-to Doc. Type" := VendLedgEntry."Document Type";
        "Applies-to Doc. No." := VendLedgEntry."Document No.";
        "Applies-to ID" := '';
        VALIDATE("Shortcut Dimension 1 Code", VendLedgEntry."Global Dimension 1 Code"); //**4PS.n
        // ***4PSSE.sn Call SYM912
        VALIDATE("External Document No.", VendLedgEntry."External Document No."); //
        // ***4PSSE.en Call SYM912

        //>>NAVNO
        "Payment Type Code Abroad" := VendLedgEntry."Payment Type Code Abroad";
        "Specification (Norges Bank)" := VendLedgEntry."Specification (Norges Bank)";
        //<<NAVNO
        //>>NAVFI
        "Message Type" := VendLedgEntry."Message Type";
        "Invoice Message" := VendLedgEntry."Invoice Message";
        //<<NAVFI
        // PEB0026
        VALIDATE("Applies-to Doc. No.");
        // 0026

      END;
    END;

    PROCEDURE SetApplyToAmount@20();
    VAR
      lvCustEntryEditCU@1100485000 : Codeunit 103;
    BEGIN
      IF "Account Type" = "Account Type"::Customer THEN BEGIN
        CustLedgEntry.CHANGECOMPANY("Receiving Company"); //**4PS.n
        CustLedgEntry.SETCURRENTKEY("Document No.");
        CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        CustLedgEntry.SETRANGE("Customer No.","Account No.");
        CustLedgEntry.SETRANGE(Open,TRUE);
        IF CustLedgEntry.FIND('-') THEN
          IF CustLedgEntry."Amount to Apply" = 0 THEN BEGIN
            CustLedgEntry.CALCFIELDS("Remaining Amount");
            CustLedgEntry."Amount to Apply" := CustLedgEntry."Remaining Amount";
            //CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);  //**4PS.o
            //**4PS.sn
            IF ("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME) THEN
              lvCustEntryEditCU.SetCompany("Receiving Company");
            lvCustEntryEditCU.RUN(CustLedgEntry);
            //**4PS.en
          END;
      END ELSE
        IF "Account Type" = "Account Type"::Vendor THEN BEGIN
          VendLedgEntry.SETCURRENTKEY("Document No.");
          VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
          VendLedgEntry.SETRANGE("Vendor No.","Account No.");
          VendLedgEntry.SETRANGE(Open,TRUE);
          IF VendLedgEntry.FIND('-') THEN
            IF VendLedgEntry."Amount to Apply" = 0 THEN  BEGIN
              VendLedgEntry.CALCFIELDS("Remaining Amount");
              VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
              CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
            END;
        END;
    END;

    PROCEDURE ValidateApplyRequirements@21(TempGenJnlLine@1000 : TEMPORARY Record 81);
    VAR
      ExchAccGLJnlLine@1001 : Codeunit 366;
    BEGIN
      IF (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Customer) OR
         (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Vendor)
      THEN
        ExchAccGLJnlLine.RUN(TempGenJnlLine);

      IF TempGenJnlLine."Account Type" = TempGenJnlLine."Account Type"::Customer THEN BEGIN
        IF TempGenJnlLine."Applies-to ID" <> '' THEN BEGIN
          CustLedgEntry.CHANGECOMPANY("Receiving Company"); //**4PS.n
          CustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open);
          CustLedgEntry.SETRANGE("Customer No.",TempGenJnlLine."Account No.");
          CustLedgEntry.SETRANGE("Applies-to ID",TempGenJnlLine."Applies-to ID");
          CustLedgEntry.SETRANGE(Open,TRUE);
          IF CustLedgEntry.FIND('-') THEN
            REPEAT
              IF TempGenJnlLine."Posting Date" < CustLedgEntry."Posting Date" THEN
                //**4PS.so
                //ERROR(
                //  Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                //**4PS.eo
                //**4PS.sn
                MESSAGE(
                  Text11012008, TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                //**4PS.en
                  CustLedgEntry."Document Type",CustLedgEntry."Document No.");
            UNTIL CustLedgEntry.NEXT = 0;
        END ELSE
          IF TempGenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
            CustLedgEntry.SETCURRENTKEY("Document No.");
            CustLedgEntry.SETRANGE("Document No.",TempGenJnlLine."Applies-to Doc. No.");
            IF TempGenJnlLine."Applies-to Doc. Type" <> TempGenJnlLine."Applies-to Doc. Type"::" " THEN
              CustLedgEntry.SETRANGE("Document Type",TempGenJnlLine."Applies-to Doc. Type");
            CustLedgEntry.SETRANGE("Customer No.",TempGenJnlLine."Account No.");
            CustLedgEntry.SETRANGE(Open,TRUE);
            IF CustLedgEntry.FIND('-') THEN
              IF TempGenJnlLine."Posting Date" < CustLedgEntry."Posting Date" THEN
                //**4PS.so
                //ERROR(
                //  Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                //**4PS.eo
                //**4PS.sn
                MESSAGE(
                  Text11012008, TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                //**4PS.en
                  CustLedgEntry."Document Type",CustLedgEntry."Document No.");
          END;
      END ELSE
        IF TempGenJnlLine."Account Type" = TempGenJnlLine."Account Type"::Vendor THEN
          IF TempGenJnlLine."Applies-to ID" <> '' THEN BEGIN
            VendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open);
            VendLedgEntry.SETRANGE("Vendor No.",TempGenJnlLine."Account No.");
            VendLedgEntry.SETRANGE("Applies-to ID",TempGenJnlLine."Applies-to ID");
            VendLedgEntry.SETRANGE(Open,TRUE);
            REPEAT
              IF TempGenJnlLine."Posting Date" < VendLedgEntry."Posting Date" THEN
                //**4PS.so
                //ERROR(
                //  Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                //**4PS.eo
                //**4PS.sn
                MESSAGE(
                  Text11012008, TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                //**4PS.en
                VendLedgEntry."Document Type",VendLedgEntry."Document No.");
            UNTIL VendLedgEntry.NEXT = 0;
            IF VendLedgEntry.FIND('-') THEN
              ;
          END ELSE
            IF TempGenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
              VendLedgEntry.SETCURRENTKEY("Document No.");
              VendLedgEntry.SETRANGE("Document No.",TempGenJnlLine."Applies-to Doc. No.");
              IF TempGenJnlLine."Applies-to Doc. Type" <> TempGenJnlLine."Applies-to Doc. Type"::" " THEN
                VendLedgEntry.SETRANGE("Document Type",TempGenJnlLine."Applies-to Doc. Type");
              VendLedgEntry.SETRANGE("Vendor No.",TempGenJnlLine."Account No.");
              VendLedgEntry.SETRANGE(Open,TRUE);
              IF VendLedgEntry.FIND('-') THEN
                IF TempGenJnlLine."Posting Date" < VendLedgEntry."Posting Date" THEN
                  //**4PS.so
                  //ERROR(
                  //  Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                  //**4PS.eo
                  //**4PS.sn
                  MESSAGE(
                    Text11012008,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                  //**4PS.en
                    VendLedgEntry."Document Type",VendLedgEntry."Document No.");
            END;
    END;

    LOCAL PROCEDURE UpdateCountryCodeAndVATRegNo@25(No@1000 : Code[20]);
    BEGIN
      IF No = '' THEN BEGIN
        "Country/Region Code" := '';
        "VAT Registration No." := '';
        EXIT;
      END;

      ReadGLSetup;
      CASE TRUE OF
        ("Account Type" = "Account Type"::Customer) OR ("Bal. Account Type" = "Bal. Account Type"::Customer):
          BEGIN
            Cust.GET(No);
            "Country/Region Code" := Cust."Country/Region Code";
            "VAT Registration No." := Cust."VAT Registration No.";
          END;
        ("Account Type" = "Account Type"::Vendor) OR ("Bal. Account Type" = "Bal. Account Type"::Vendor):
          BEGIN
            Vend.GET(No);
            "Country/Region Code" := Vend."Country/Region Code";
            "VAT Registration No." := Vend."VAT Registration No.";
          END;
      END;
    END;

    PROCEDURE JobTaskIsSet@28() : Boolean;
    BEGIN
      EXIT(("Job No." <> '') AND ("Job Task No." <> '') AND ("Account Type" = "Account Type"::"G/L Account"));
    END;

    PROCEDURE CreateTempJobJnlLine@27();
    VAR
      TmpJobJnlOverallCurrencyFactor@1001 : Decimal;
    BEGIN
      TESTFIELD("Posting Date");
      CLEAR(JobJnlLine);
      JobJnlLine.DontCheckStdCost;
      JobJnlLine.VALIDATE("Job No.","Job No.");
      JobJnlLine.VALIDATE("Job Task No.","Job Task No.");
      IF CurrFieldNo <> FIELDNO("Posting Date") THEN
        JobJnlLine.VALIDATE("Posting Date","Posting Date")
      ELSE
        JobJnlLine.VALIDATE("Posting Date",xRec."Posting Date");
      JobJnlLine.VALIDATE(Type,JobJnlLine.Type::"G/L Account");
      IF "Job Currency Code" <> '' THEN BEGIN
        IF "Posting Date" = 0D THEN
          CurrencyDate := WORKDATE
        ELSE
          CurrencyDate := "Posting Date";

        IF "Currency Code" = "Job Currency Code" THEN
          "Job Currency Factor" := "Currency Factor"
        ELSE
        //"Job Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Job Currency Code"); //**4PS.o
          "Job Currency Factor" := CurrExchRate.ExchangeRate(0, '', CurrencyDate,"Job Currency Code",FALSE); //**4PS.n
        JobJnlLine.SetCurrencyFactor("Job Currency Factor");
      END;
      JobJnlLine.VALIDATE("No.","Account No.");
      JobJnlLine.VALIDATE(Quantity,"Job Quantity");

      IF "Currency Factor" = 0 THEN BEGIN
        IF "Job Currency Factor" = 0 THEN
          TmpJobJnlOverallCurrencyFactor := 1
        ELSE
          TmpJobJnlOverallCurrencyFactor := "Job Currency Factor";
      END ELSE BEGIN
        IF "Job Currency Factor" = 0 THEN
          TmpJobJnlOverallCurrencyFactor := 1 / "Currency Factor"
        ELSE
          TmpJobJnlOverallCurrencyFactor := "Job Currency Factor" / "Currency Factor"
      END;

      IF "Job Quantity" <> 0 THEN
        JobJnlLine.VALIDATE("Unit Cost",((Amount - "VAT Amount") * TmpJobJnlOverallCurrencyFactor) / "Job Quantity");

      IF (xRec."Account No." = "Account No.") AND (xRec."Job Task No." = "Job Task No.") AND ("Job Unit Price" <> 0) THEN BEGIN
        IF JobJnlLine."Cost Factor" = 0 THEN
          JobJnlLine."Unit Price" := xRec."Job Unit Price";
        JobJnlLine."Line Amount" := xRec."Job Line Amount";
        JobJnlLine."Line Discount %" := xRec."Job Line Discount %";
        JobJnlLine."Line Discount Amount" := xRec."Job Line Discount Amount";
        JobJnlLine.VALIDATE("Unit Price");
      END;
    END;

    PROCEDURE UpdatePricesFromJobJnlLine@22();
    BEGIN
      "Job Unit Price" := JobJnlLine."Unit Price";
      "Job Total Price" := JobJnlLine."Total Price";
      "Job Line Amount" := JobJnlLine."Line Amount";
      "Job Line Discount Amount" := JobJnlLine."Line Discount Amount";
      "Job Unit Cost" := JobJnlLine."Unit Cost";
      "Job Total Cost" := JobJnlLine."Total Cost";
      "Job Line Discount %" := JobJnlLine."Line Discount %";

      "Job Unit Price (LCY)" := JobJnlLine."Unit Price (LCY)";
      "Job Total Price (LCY)" := JobJnlLine."Total Price (LCY)";
      "Job Line Amount (LCY)" := JobJnlLine."Line Amount (LCY)";
      "Job Line Disc. Amount (LCY)" := JobJnlLine."Line Discount Amount (LCY)";
      "Job Unit Cost (LCY)" := JobJnlLine."Unit Cost (LCY)";
      "Job Total Cost (LCY)" := JobJnlLine."Total Cost (LCY)";
    END;

    LOCAL PROCEDURE CheckNoCardTransactEntryExist@46(GenJnlLine@1002 : Record 81);
    VAR
      DOPaymentTransLogEntry@1000 : Record 829;
      DOPaymentTransLogMgt@1003 : Codeunit 829;
      DocumentType@1001 : Integer;
    BEGIN
      CASE GenJnlLine."Document Type" OF
        GenJnlLine."Document Type"::Payment:
          DocumentType := DOPaymentTransLogEntry."Document Type"::Payment;
        GenJnlLine."Document Type"::Refund:
          DocumentType := DOPaymentTransLogEntry."Document Type"::Refund;
      END;
      IF DOPaymentTransLogEntry.FINDFIRST THEN
        IF DOPaymentTransLogMgt.FindPostingNotFinishedEntry(DocumentType,GenJnlLine."Document No.",DOPaymentTransLogEntry) THEN
          ERROR(Text017,DOPaymentTransLogEntry."Transaction Type",GenJnlLine."Document Type",GenJnlLine."Document No.");
    END;

    LOCAL PROCEDURE GetCreditCard@47();
    VAR
      DOPaymentTransLogEntry@1000 : Record 829;
    BEGIN
      IF "Applies-to Doc. No." = xRec."Applies-to Doc. No." THEN
        EXIT;
      IF NOT (("Account Type" = "Account Type"::Customer) AND
              ("Bal. Account Type" = "Bal. Account Type"::"Bank Account"))
      THEN
        EXIT;

      IF "Applies-to Doc. No." = '' THEN
        EXIT;

      IF "Document Type" <> "Document Type"::Refund THEN
        EXIT;

      DOPaymentTransLogEntry.SETRANGE("Customer No.","Account No.");
      DOPaymentTransLogEntry.SETRANGE("Transaction Type",DOPaymentTransLogEntry."Transaction Type"::Capture);
      DOPaymentTransLogEntry.SETRANGE("Document Type",DOPaymentTransLogEntry."Document Type"::Payment);
      DOPaymentTransLogEntry.SETRANGE("Document No.","Applies-to Doc. No.");

      IF DOPaymentTransLogEntry.FINDFIRST THEN
        "Credit Card No." := DOPaymentTransLogEntry."Credit Card No."
      ELSE
        "Credit Card No." := '';
    END;

    PROCEDURE SetHideValidation@23(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE GetDefaultICPartnerGLAccNo@1058() : Code[20];
    VAR
      GLAcc@1001 : Record 15;
      GLAccNo@1002 : Code[20];
    BEGIN
      IF "IC Partner Code" <> '' THEN BEGIN
        IF "Account Type" = "Account Type"::"G/L Account" THEN
          GLAccNo := "Account No."
        ELSE
          GLAccNo := "Bal. Account No.";
        IF GLAcc.GET(GLAccNo) THEN
          EXIT(GLAcc."Default IC Partner G/L Acc. No")
      END;
    END;

    PROCEDURE IsApplied@30() : Boolean;
    BEGIN
      IF "Applies-to Doc. No." <> '' THEN
        EXIT(TRUE);
      IF "Applies-to ID" <> '' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE DataCaption@29() : Text[250];
    VAR
      GenJnlBatch@1000 : Record 232;
    BEGIN
      IF GenJnlBatch.GET("Journal Template Name","Journal Batch Name") THEN
        EXIT(GenJnlBatch.Name + '-' + GenJnlBatch.Description);
    END;

    LOCAL PROCEDURE ReadGLSetup@31();
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        GLSetupRead := TRUE;
      END;
    END;

    PROCEDURE GetCustLedgerEntry@33();
    BEGIN
      IF ("Account Type" = "Account Type"::Customer) AND ("Account No." = '') AND
         ("Applies-to Doc. No." <> '') AND (Amount = 0)
      THEN BEGIN
        CustLedgEntry.RESET;
        CustLedgEntry.SETRANGE("Document Type","Document Type"::Invoice);
        // PEB0026
        gBaseTables.T81_AppliesCustomerCredit(Rec,CustLedgEntry);
        // 0026
        CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        CustLedgEntry.SETRANGE(Open,TRUE);
        IF NOT CustLedgEntry.FINDFIRST THEN
          ERROR(NotExistErr,"Applies-to Doc. No.");

        VALIDATE("Account No.",CustLedgEntry."Customer No.");
        CustLedgEntry.CALCFIELDS("Remaining Amount");

        IF "Posting Date" <= CustLedgEntry."Pmt. Discount Date" THEN
          Amount := -(CustLedgEntry."Remaining Amount" - CustLedgEntry."Remaining Pmt. Disc. Possible")
        ELSE
          Amount := -CustLedgEntry."Remaining Amount";

        IF "Currency Code" <> CustLedgEntry."Currency Code" THEN BEGIN
          FromCurrencyCode := GetShowCurrencyCode("Currency Code");
          ToCurrencyCode := GetShowCurrencyCode(CustLedgEntry."Currency Code");
          IF NOT
             CONFIRM(
               Text003,TRUE,
               FIELDCAPTION("Currency Code"),TABLECAPTION,FromCurrencyCode,
               ToCurrencyCode)
          THEN
            ERROR(Text005);
          VALIDATE("Currency Code",CustLedgEntry."Currency Code");
        END;

        "Document Type" := "Document Type"::Payment;
        "Applies-to Doc. Type" := CustLedgEntry."Document Type";
        "Applies-to Doc. No." := CustLedgEntry."Document No.";
        "Applies-to ID" := '';
        IF ("Applies-to Doc. Type" = "Applies-to Doc. Type"::Invoice) AND
           ("Document Type" = "Document Type"::Payment)
        THEN
          "External Document No." := CustLedgEntry."External Document No.";
        "Bal. Account Type" := "Bal. Account Type"::"G/L Account";

        GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
        IF GenJnlBatch."Bal. Account No." <> '' THEN BEGIN
          "Bal. Account Type" := GenJnlBatch."Bal. Account Type";
          VALIDATE("Bal. Account No.",GenJnlBatch."Bal. Account No.");
        END ELSE
          VALIDATE(Amount);
      END;
    END;

    PROCEDURE GetVendLedgerEntry@37();
    BEGIN
      IF ("Account Type" = "Account Type"::Vendor) AND ("Account No." = '') AND
         ("Applies-to Doc. No." <> '') AND (Amount = 0)
      THEN BEGIN
        VendLedgEntry.RESET;
        VendLedgEntry.SETRANGE("Document Type","Document Type"::Invoice);
        // PEB0026
        gBaseTables.T81_AppliesVendorCredit(Rec,VendLedgEntry);
        // 0026
        VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        VendLedgEntry.SETRANGE(Open,TRUE);
        IF NOT VendLedgEntry.FINDFIRST THEN
          ERROR(NotExistErr,"Applies-to Doc. No.");

        VALIDATE("Account No.",VendLedgEntry."Vendor No.");
        VendLedgEntry.CALCFIELDS("Remaining Amount");

        IF "Posting Date" <= VendLedgEntry."Pmt. Discount Date" THEN
          Amount := -(CustLedgEntry."Remaining Amount" - VendLedgEntry."Remaining Pmt. Disc. Possible")
        ELSE
          Amount := -VendLedgEntry."Remaining Amount";

        IF "Currency Code" <> VendLedgEntry."Currency Code" THEN BEGIN
          FromCurrencyCode := GetShowCurrencyCode("Currency Code");
          ToCurrencyCode := GetShowCurrencyCode(CustLedgEntry."Currency Code");
          IF NOT
             CONFIRM(
               Text003,
               TRUE,FIELDCAPTION("Currency Code"),TABLECAPTION,FromCurrencyCode,ToCurrencyCode)
          THEN
            ERROR(Text005);
          VALIDATE("Currency Code",VendLedgEntry."Currency Code");
        END;

        "Document Type" := "Document Type"::Payment;
        "Applies-to Doc. Type" := VendLedgEntry."Document Type";
        "Applies-to Doc. No." := VendLedgEntry."Document No.";
        "Applies-to ID" := '';
        IF ("Applies-to Doc. Type" = "Applies-to Doc. Type"::Invoice) AND
           ("Document Type" = "Document Type"::Payment)
        THEN
          "External Document No." := VendLedgEntry."External Document No.";
        "Bal. Account Type" := "Bal. Account Type"::"G/L Account";

        GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
        IF GenJnlBatch."Bal. Account No." <> '' THEN BEGIN
          "Bal. Account Type" := GenJnlBatch."Bal. Account Type";
          VALIDATE("Bal. Account No.",GenJnlBatch."Bal. Account No.");
        END ELSE
          VALIDATE(Amount);
      END;
    END;

    LOCAL PROCEDURE CustVendAccountNosModified@32() : Boolean;
    BEGIN
      EXIT(
        (("Bal. Account No." <> xRec."Bal. Account No.") AND
         ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor])) OR
        (("Account No." <> xRec."Account No.") AND
         ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor])))
    END;

    LOCAL PROCEDURE CheckPaymentTolerance@34();
    BEGIN
      IF Amount <> 0 THEN
        IF ("Bal. Account No." <> xRec."Bal. Account No.") OR ("Account No." <> xRec."Account No.") THEN
          PaymentToleranceMgt.PmtTolGenJnl(Rec);
    END;

    PROCEDURE IncludeVATAmount@38() : Boolean;
    BEGIN
      EXIT(
        ("VAT Posting" = "VAT Posting"::"Manual VAT Entry") AND
        ("VAT Calculation Type" <> "VAT Calculation Type"::"Reverse Charge VAT"));
    END;

    PROCEDURE ConvertAmtFCYToLCYForSourceCurrency@39(Amount@1000 : Decimal) : Decimal;
    VAR
      Currency@1001 : Record 4;
      CurrExchRate@1003 : Record 330;
      CurrencyFactor@1002 : Decimal;
    BEGIN
      IF (Amount = 0) OR ("Source Currency Code" = '') THEN
        EXIT(Amount);

      Currency.GET("Source Currency Code");
      //CurrencyFactor := CurrExchRate.ExchangeRate("Posting Date","Source Currency Code"); //**4PS.o
      CurrencyFactor := CurrExchRate.ExchangeRate(0,'',"Posting Date","Source Currency Code",FALSE); //**4PS.n
      EXIT(
        ROUND(
          CurrExchRate.ExchangeAmtFCYToLCY(
          //"Posting Date","Source Currency Code",Amount,CurrencyFactor), //**4PS.o
            0,'',"Posting Date","Source Currency Code",Amount,CurrencyFactor,FALSE), //**4PS.n
          Currency."Amount Rounding Precision"));
    END;

    PROCEDURE MatchSingleLedgerEntry@40();
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",Rec);
    END;

    PROCEDURE GetStyle@41() : Text;
    BEGIN
      IF "Applied Automatically" THEN
        EXIT('Favorable')
    END;

    PROCEDURE GetOverdueDateInteractions@75(VAR OverdueWarningText@1001 : Text) : Text;
    VAR
      DueDate@1000 : Date;
    BEGIN
      DueDate := GetAppliesToDocDueDate;
      OverdueWarningText := '';
      IF (DueDate <> 0D) AND (DueDate < "Posting Date") THEN BEGIN
        OverdueWarningText := DueDateMsg;
        EXIT('Unfavorable');
      END;
      EXIT('');
    END;

    PROCEDURE ClearDataExchangeEntries@42(DeleteHeaderEntries@1002 : Boolean);
    VAR
      DataExchField@1001 : Record 1221;
      GenJournalLine@1000 : Record 81;
    BEGIN
      DataExchField.DeleteRelatedRecords("Data Exch. Entry No.","Data Exch. Line No.");

      GenJournalLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      GenJournalLine.SETRANGE("Data Exch. Entry No.","Data Exch. Entry No.");
      GenJournalLine.SETFILTER("Line No.",'<>%1',"Line No.");
      IF GenJournalLine.ISEMPTY OR DeleteHeaderEntries THEN
        DataExchField.DeleteRelatedRecords("Data Exch. Entry No.",0);
    END;

    PROCEDURE ClearAppliedGenJnlLine@49();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      IF "Applies-to Doc. No." = '' THEN
        EXIT;
      GenJournalLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      GenJournalLine.SETFILTER("Line No.",'<>%1',"Line No.");
      GenJournalLine.SETRANGE("Document Type","Applies-to Doc. Type");
      GenJournalLine.SETRANGE("Document No.","Applies-to Doc. No.");
      GenJournalLine.MODIFYALL("Applied Automatically",FALSE);
      GenJournalLine.MODIFYALL("Account Type",GenJournalLine."Account Type"::"G/L Account");
      GenJournalLine.MODIFYALL("Account No.",'');
    END;

    PROCEDURE GetIncomingDocumentURL@50() : Text[1000];
    VAR
      IncomingDocument@1000 : Record 130;
    BEGIN
      IF "Incoming Document Entry No." = 0 THEN
        EXIT('');

      IncomingDocument.GET("Incoming Document Entry No.");
      EXIT(IncomingDocument.GetURL);
    END;

    PROCEDURE InsertPaymentFileError@64(Text@1001 : Text);
    VAR
      PaymentJnlExportErrorText@1000 : Record 1228;
    BEGIN
      PaymentJnlExportErrorText.CreateNew(Rec,Text,'','');
    END;

    PROCEDURE InsertPaymentFileErrorWithDetails@83(ErrorText@1001 : Text;AddnlInfo@1002 : Text;ExtSupportInfo@1003 : Text);
    VAR
      PaymentJnlExportErrorText@1000 : Record 1228;
    BEGIN
      PaymentJnlExportErrorText.CreateNew(Rec,ErrorText,AddnlInfo,ExtSupportInfo);
    END;

    PROCEDURE DeletePaymentFileBatchErrors@67();
    VAR
      PaymentJnlExportErrorText@1000 : Record 1228;
    BEGIN
      PaymentJnlExportErrorText.DeleteJnlBatchErrors(Rec);
    END;

    PROCEDURE DeletePaymentFileErrors@61();
    VAR
      PaymentJnlExportErrorText@1000 : Record 1228;
    BEGIN
      PaymentJnlExportErrorText.DeleteJnlLineErrors(Rec);
    END;

    PROCEDURE HasPaymentFileErrors@24() : Boolean;
    VAR
      PaymentJnlExportErrorText@1000 : Record 1228;
    BEGIN
      EXIT(PaymentJnlExportErrorText.JnlLineHasErrors(Rec));
    END;

    PROCEDURE HasPaymentFileErrorsInBatch@65() : Boolean;
    VAR
      PaymentJnlExportErrorText@1000 : Record 1228;
    BEGIN
      EXIT(PaymentJnlExportErrorText.JnlBatchHasErrors(Rec));
    END;

    LOCAL PROCEDURE UpdateDescription@43(Name@1000 : Text[50]);
    BEGIN
      IF NOT IsAdHocDescription THEN
        Description := Name;
    END;

    LOCAL PROCEDURE IsAdHocDescription@44() : Boolean;
    VAR
      GLAccount@1000 : Record 15;
      Customer@1001 : Record 18;
      Vendor@1002 : Record 23;
      BankAccount@1003 : Record 270;
      FixedAsset@1004 : Record 5600;
      ICPartner@1005 : Record 413;
    BEGIN
      IF Description = '' THEN
        EXIT(FALSE);
      IF xRec."Account No." = '' THEN
        EXIT(TRUE);

      CASE xRec."Account Type" OF
        xRec."Account Type"::"G/L Account":
          EXIT(GLAccount.GET(xRec."Account No.") AND (GLAccount.Name <> Description));
        xRec."Account Type"::Customer:
          EXIT(Customer.GET(xRec."Account No.") AND (Customer.Name <> Description));
        xRec."Account Type"::Vendor:
          EXIT(Vendor.GET(xRec."Account No.") AND (Vendor.Name <> Description));
        xRec."Account Type"::"Bank Account":
          EXIT(BankAccount.GET(xRec."Account No.") AND (BankAccount.Name <> Description));
        xRec."Account Type"::"Fixed Asset":
          EXIT(FixedAsset.GET(xRec."Account No.") AND (FixedAsset.Description <> Description));
        xRec."Account Type"::"IC Partner":
          EXIT(ICPartner.GET(xRec."Account No.") AND (ICPartner.Name <> Description));
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetAppliesToDocEntryNo@63() : Integer;
    VAR
      CustLedgEntry@1000 : Record 21;
      VendLedgEntry@1001 : Record 25;
      AccType@1003 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
      AccNo@1002 : Code[20];
    BEGIN
      GetAccTypeAndNo(Rec,AccType,AccNo);
      CASE AccType OF
        AccType::Customer:
          BEGIN
            GetAppliesToDocCustLedgEntry(CustLedgEntry,AccNo);
            EXIT(CustLedgEntry."Entry No.");
          END;
        AccType::Vendor:
          BEGIN
            GetAppliesToDocVendLedgEntry(VendLedgEntry,AccNo);
            EXIT(VendLedgEntry."Entry No.");
          END;
      END;
    END;

    PROCEDURE GetAppliesToDocDueDate@62() : Date;
    VAR
      CustLedgEntry@1000 : Record 21;
      VendLedgEntry@1001 : Record 25;
      AccType@1003 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
      AccNo@1002 : Code[20];
    BEGIN
      GetAccTypeAndNo(Rec,AccType,AccNo);
      CASE AccType OF
        AccType::Customer:
          BEGIN
            GetAppliesToDocCustLedgEntry(CustLedgEntry,AccNo);
            EXIT(CustLedgEntry."Due Date");
          END;
        AccType::Vendor:
          BEGIN
            GetAppliesToDocVendLedgEntry(VendLedgEntry,AccNo);
            EXIT(VendLedgEntry."Due Date");
          END;
      END;
    END;

    LOCAL PROCEDURE GetAppliesToDocCustLedgEntry@60(VAR CustLedgEntry@1000 : Record 21;AccNo@1001 : Code[20]);
    BEGIN
      CustLedgEntry.SETRANGE("Customer No.",AccNo);
      CustLedgEntry.SETRANGE(Open,TRUE);
      IF "Applies-to Doc. No." <> '' THEN BEGIN
        CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        IF CustLedgEntry.FINDFIRST THEN;
      END ELSE
        IF "Applies-to ID" <> '' THEN BEGIN
          CustLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
          IF CustLedgEntry.FINDFIRST THEN;
        END;
    END;

    LOCAL PROCEDURE GetAppliesToDocVendLedgEntry@53(VAR VendLedgEntry@1000 : Record 25;AccNo@1001 : Code[20]);
    BEGIN
      //>>4PSSE 130926
      VendLedgEntry.SETRANGE("Vendor No.");
      VendLedgEntry.SETRANGE("Document Type");
      VendLedgEntry.SETRANGE("Document No.");
      VendLedgEntry.SETRANGE("Applies-to ID");
      VendLedgEntry.SETRANGE(Positive);
      //<<4PSSE

      VendLedgEntry.SETRANGE("Vendor No.",AccNo);
      VendLedgEntry.SETRANGE(Open,TRUE);
      IF "Applies-to Doc. No." <> '' THEN BEGIN
        VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        IF VendLedgEntry.FINDFIRST THEN;
      END ELSE
        IF "Applies-to ID" <> '' THEN BEGIN
          VendLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
          IF VendLedgEntry.FINDFIRST THEN;
        END;
    END;

    LOCAL PROCEDURE SetJournalLineFieldsFromApplication@51();
    VAR
      AccType@1005 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
      AccNo@1004 : Code[20];
    BEGIN
      "Exported to Payment File" := FALSE;
      GetAccTypeAndNo(Rec,AccType,AccNo);
      CASE AccType OF
        AccType::Customer:
          IF "Applies-to ID" <> '' THEN BEGIN
            IF FindFirstCustLedgEntryWithAppliesToID(AccNo,"Applies-to ID") THEN BEGIN
              CustLedgEntry.SETRANGE("Exported to Payment File",TRUE);
              "Exported to Payment File" := CustLedgEntry.FINDFIRST;
            END
          END ELSE
            IF "Applies-to Doc. No." <> '' THEN
              IF FindFirstCustLedgEntryWithAppliesToDocNo(AccNo,"Applies-to Doc. No.") THEN BEGIN
                "Exported to Payment File" := CustLedgEntry."Exported to Payment File";
                "Applies-to Ext. Doc. No." := CustLedgEntry."External Document No.";
              END;
        AccType::Vendor:
          IF "Applies-to ID" <> '' THEN BEGIN
            IF FindFirstVendLedgEntryWithAppliesToID(AccNo,"Applies-to ID") THEN BEGIN
              VendLedgEntry.SETRANGE("Exported to Payment File",TRUE);
              "Exported to Payment File" := VendLedgEntry.FINDFIRST;
            END
          END ELSE
            IF "Applies-to Doc. No." <> '' THEN
              IF FindFirstVendLedgEntryWithAppliesToDocNo(AccNo,"Applies-to Doc. No.") THEN BEGIN
                "Exported to Payment File" := VendLedgEntry."Exported to Payment File";
                "Applies-to Ext. Doc. No." := VendLedgEntry."External Document No.";
              END;
      END;
    END;

    LOCAL PROCEDURE GetAccTypeAndNo@52(GenJnlLine2@1002 : Record 81;VAR AccType@1000 : Option;VAR AccNo@1001 : Code[20]);
    BEGIN
      IF GenJnlLine2."Bal. Account Type" IN
         [GenJnlLine2."Bal. Account Type"::Customer,GenJnlLine2."Bal. Account Type"::Vendor]
      THEN BEGIN
        AccType := GenJnlLine2."Bal. Account Type";
        AccNo := GenJnlLine2."Bal. Account No.";
      END ELSE BEGIN
        AccType := GenJnlLine2."Account Type";
        AccNo := GenJnlLine2."Account No.";
      END;
    END;

    LOCAL PROCEDURE FindFirstCustLedgEntryWithAppliesToID@54(AccNo@1000 : Code[20];AppliesToID@1001 : Code[50]) : Boolean;
    BEGIN
      CustLedgEntry.RESET;
      CustLedgEntry.CHANGECOMPANY("Receiving Company"); //**4PS.n
      CustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open);
      CustLedgEntry.SETRANGE("Customer No.",AccNo);
      CustLedgEntry.SETRANGE("Applies-to ID",AppliesToID);
      CustLedgEntry.SETRANGE(Open,TRUE);
      EXIT(CustLedgEntry.FINDFIRST)
    END;

    LOCAL PROCEDURE FindFirstCustLedgEntryWithAppliesToDocNo@55(AccNo@1000 : Code[20];AppliestoDocNo@1001 : Code[20]) : Boolean;
    BEGIN
      CustLedgEntry.RESET;
      CustLedgEntry.CHANGECOMPANY("Receiving Company"); //**4PS.n
      CustLedgEntry.SETCURRENTKEY("Document No.");
      CustLedgEntry.SETRANGE("Document No.",AppliestoDocNo);
      CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
      CustLedgEntry.SETRANGE("Customer No.",AccNo);
      CustLedgEntry.SETRANGE(Open,TRUE);
      EXIT(CustLedgEntry.FINDFIRST)
    END;

    LOCAL PROCEDURE FindFirstVendLedgEntryWithAppliesToID@58(AccNo@1000 : Code[20];AppliesToID@1001 : Code[50]) : Boolean;
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open);
      VendLedgEntry.SETRANGE("Vendor No.",AccNo);
      VendLedgEntry.SETRANGE("Applies-to ID",AppliesToID);
      VendLedgEntry.SETRANGE(Open,TRUE);
      EXIT(VendLedgEntry.FINDFIRST)
    END;

    LOCAL PROCEDURE FindFirstVendLedgEntryWithAppliesToDocNo@59(AccNo@1000 : Code[20];AppliestoDocNo@1001 : Code[20]) : Boolean;
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Document No.");
      VendLedgEntry.SETRANGE("Document No.",AppliestoDocNo);
      VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
      VendLedgEntry.SETRANGE("Vendor No.",AccNo);
      VendLedgEntry.SETRANGE(Open,TRUE);
      EXIT(VendLedgEntry.FINDFIRST)
    END;

    PROCEDURE UpdateVendorPaymentDetails@1060000();
    VAR
      PaymentMethod@1060000 : Record 289;
    BEGIN
      //NAVDK
      IF PaymentMethod.GET("Payment Method Code") THEN
        CASE PaymentMethod."Payment Type Validation" OF
          PaymentMethod."Payment Type Validation"::"FIK 01",PaymentMethod."Payment Type Validation"::"FIK 04": BEGIN
            "Creditor No." := '';
            "Recipient Bank Account" := '';
          END;
          PaymentMethod."Payment Type Validation"::"FIK 71",PaymentMethod."Payment Type Validation"::"FIK 73": BEGIN
            "Giro Acc. No." := '';
            "Recipient Bank Account" := '';
          END;
          PaymentMethod."Payment Type Validation"::Domestic,PaymentMethod."Payment Type Validation"::International: BEGIN
            "Creditor No." := '';
            "Giro Acc. No." := '';
          END;
        END;
    END;

    LOCAL PROCEDURE IsForExportToPaymentFile@1060001() : Boolean;
    VAR
      PaymentMethod@1060000 : Record 289;
    BEGIN
      //NAVDK
      IF PaymentMethod.GET("Payment Method Code") THEN
        EXIT(PaymentMethod."Payment Type Validation" <> PaymentMethod."Payment Type Validation"::" ");

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ClearPostingGroups@45();
    BEGIN
      "Gen. Posting Type" := "Gen. Posting Type"::" ";
      "Gen. Bus. Posting Group" := '';
      "Gen. Prod. Posting Group" := '';
      "VAT Bus. Posting Group" := '';
      "VAT Prod. Posting Group" := '';
      "Auto. Acc. Group" := '';  //NAVSE
      "VAT Code" := ''; //NAVNO
    END;

    LOCAL PROCEDURE ClearBalancePostingGroups@48();
    BEGIN
      "Bal. Gen. Posting Type" := "Bal. Gen. Posting Type"::" ";
      "Bal. Gen. Bus. Posting Group" := '';
      "Bal. Gen. Prod. Posting Group" := '';
      "Bal. VAT Bus. Posting Group" := '';
      "Bal. VAT Prod. Posting Group" := '';
      "Bal. VAT Code" := '';  //NAVNO
    END;

    LOCAL PROCEDURE CleanLine@66();
    BEGIN
      UpdateLineBalance;
      UpdateSource;
      CreateDim(
        DimMgt.TypeToTableID1("Account Type"),"Account No.",
        DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
        DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n
        DATABASE::"Plant Type", "Plant Type", //**4PS.n
        DATABASE::Job,"Job No.",
        DATABASE::"Service Order","Service Order No.", //** 4PS 09-06-2010
        DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
        DATABASE::Campaign,"Campaign No.");
      IF NOT ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]) THEN
        "Recipient Bank Account" := '';
      IF xRec."Account No." <> '' THEN BEGIN
        ClearPostingGroups;
        "Tax Area Code" := '';
        "Tax Liable" := FALSE;
        "Tax Group Code" := '';
        "Bill-to/Pay-to No." := '';
        "Ship-to/Order Address Code" := '';
        "Sell-to/Buy-from No." := '';
        UpdateCountryCodeAndVATRegNo('');
      END;
    END;

    LOCAL PROCEDURE ReplaceDescription@84() : Boolean;
    BEGIN
      IF "Bal. Account No." = '' THEN
        EXIT(TRUE);
      GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
      EXIT(GenJnlBatch."Bal. Account No." <> '');
    END;

    PROCEDURE IsExportedToPaymentFile@1020() : Boolean;
    BEGIN
      EXIT(IsPaymentJournallLineExported OR IsAppliedToVendorLedgerEntryExported);
    END;

    PROCEDURE IsPaymentJournallLineExported@80() : Boolean;
    VAR
      GenJnlLine@1001 : Record 81;
      OldFilterGroup@1000 : Integer;
      HasExportedLines@1002 : Boolean;
    BEGIN
      WITH GenJnlLine DO BEGIN
        COPYFILTERS(Rec);
        OldFilterGroup := FILTERGROUP;
        FILTERGROUP := 10;
        SETRANGE("Exported to Payment File",TRUE);
        HasExportedLines := NOT ISEMPTY;
        SETRANGE("Exported to Payment File");
        FILTERGROUP := OldFilterGroup;
      END;
      EXIT(HasExportedLines);
    END;

    PROCEDURE IsAppliedToVendorLedgerEntryExported@79() : Boolean;
    VAR
      GenJnlLine@1001 : Record 81;
      VendLedgerEntry@1002 : Record 25;
    BEGIN
      GenJnlLine.COPYFILTERS(Rec);

      IF GenJnlLine.FINDSET THEN
        REPEAT
          IF GenJnlLine.IsApplied THEN BEGIN
            VendLedgerEntry.SETRANGE("Vendor No.",GenJnlLine."Account No.");
            IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
              VendLedgerEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
              VendLedgerEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
            END;
            IF GenJnlLine."Applies-to ID" <> '' THEN
              VendLedgerEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
            VendLedgerEntry.SETRANGE("Exported to Payment File",TRUE);
            IF NOT VendLedgerEntry.ISEMPTY THEN
              EXIT(TRUE);
          END;

          VendLedgerEntry.RESET;
          VendLedgerEntry.SETRANGE("Vendor No.",GenJnlLine."Account No.");
          VendLedgerEntry.SETRANGE("Applies-to Doc. Type",GenJnlLine."Document Type");
          VendLedgerEntry.SETRANGE("Applies-to Doc. No.",GenJnlLine."Document No.");
          VendLedgerEntry.SETRANGE("Exported to Payment File",TRUE);
          IF NOT VendLedgerEntry.ISEMPTY THEN
            EXIT(TRUE);
        UNTIL GenJnlLine.NEXT = 0;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ClearAppliedAutomatically@72();
    BEGIN
      IF CurrFieldNo <> 0 THEN
        "Applied Automatically" := FALSE;
    END;

    PROCEDURE SetPostingDateAsDueDate@77(DueDate@1002 : Date;DateOffset@1000 : DateFormula) : Boolean;
    VAR
      NewPostingDate@1001 : Date;
    BEGIN
      IF DueDate = 0D THEN
        EXIT(FALSE);

      NewPostingDate := CALCDATE(DateOffset,DueDate);
      IF NewPostingDate < WORKDATE THEN BEGIN
        VALIDATE("Posting Date",WORKDATE);
        EXIT(TRUE);
      END;

      VALIDATE("Posting Date",NewPostingDate);
      EXIT(FALSE);
    END;

    PROCEDURE CalculatePostingDate@76();
    VAR
      GenJnlLine@1000 : Record 81;
      EmptyDateFormula@1001 : DateFormula;
    BEGIN
      GenJnlLine.COPY(Rec);
      GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");

      IF GenJnlLine.FINDSET THEN BEGIN
        Window.OPEN(CalcPostDateMsg);
        REPEAT
          EVALUATE(EmptyDateFormula,'<0D>');
          GenJnlLine.SetPostingDateAsDueDate(GenJnlLine.GetAppliesToDocDueDate,EmptyDateFormula);
          GenJnlLine.MODIFY(TRUE);
          Window.UPDATE(1,GenJnlLine."Document No.");
        UNTIL GenJnlLine.NEXT = 0;
        Window.CLOSE;
      END;
    END;

    PROCEDURE ImportBankStatement@73();
    VAR
      ProcessGenJnlLines@1000 : Codeunit 1247;
    BEGIN
      ProcessGenJnlLines.ImportBankStatement(Rec);
    END;

    PROCEDURE ImportFIK@1060002();
    VAR
      ProcessGenJnlLines@1060000 : Codeunit 1247;
    BEGIN
      ProcessGenJnlLines.ImportFIK(Rec);
    END;

    PROCEDURE ExportPaymentFile@81();
    BEGIN
      IF NOT FINDSET THEN
        ERROR(NothingToExportErr);
      SETRANGE("Journal Template Name","Journal Template Name");
      SETRANGE("Journal Batch Name","Journal Batch Name");
      TESTFIELD("Check Printed",FALSE);

      GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
      GenJnlBatch.TESTFIELD("Bal. Account Type",GenJnlBatch."Bal. Account Type"::"Bank Account");
      GenJnlBatch.TESTFIELD("Bal. Account No.");

      CheckDocNoOnLines;
      IF IsExportedToPaymentFile THEN
        IF NOT CONFIRM(ExportAgainQst) THEN
          EXIT;
      BankAcc.GET(GenJnlBatch."Bal. Account No.");
      IF BankAcc.GetPaymentExportCodeunitID > 0 THEN
        CODEUNIT.RUN(BankAcc.GetPaymentExportCodeunitID,Rec)
      ELSE
        CODEUNIT.RUN(CODEUNIT::"Exp. Launcher Gen. Jnl.",Rec);
    END;

    PROCEDURE TotalExportedAmount@85() : Decimal;
    VAR
      CreditTransferEntry@1000 : Record 1206;
    BEGIN
      IF NOT ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) THEN
        EXIT(0);
      GenJnlShowCTEntries.SetFiltersOnCreditTransferEntry(Rec,CreditTransferEntry);
      CreditTransferEntry.CALCSUMS("Transfer Amount");
      EXIT(CreditTransferEntry."Transfer Amount");
    END;

    PROCEDURE DrillDownExportedAmount@95();
    VAR
      CreditTransferEntry@1000 : Record 1206;
    BEGIN
      IF NOT ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) THEN
        EXIT;
      GenJnlShowCTEntries.SetFiltersOnCreditTransferEntry(Rec,CreditTransferEntry);
      PAGE.RUN(PAGE::"Credit Transfer Reg. Entries",CreditTransferEntry);
    END;

    LOCAL PROCEDURE CopyDimensionsFromJobTaskLine@82();
    BEGIN
      "Dimension Set ID" := JobJnlLine."Dimension Set ID";
      "Shortcut Dimension 1 Code" := JobJnlLine."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := JobJnlLine."Shortcut Dimension 2 Code";
    END;

    LOCAL PROCEDURE SetAmountWithCustLedgEntry@102();
    BEGIN
      IF "Currency Code" <> CustLedgEntry."Currency Code" THEN
        CheckModifyCurrencyCode(GenJnlLine."Account Type"::Customer,CustLedgEntry."Currency Code");

      IF Amount = 0 THEN BEGIN
        CustLedgEntry.CALCFIELDS("Remaining Amount");
        SetAmountWithRemaining(
      //  PaymentToleranceMgt.CheckCalcPmtDiscGenJnlCust(Rec,CustLedgEntry,0,FALSE), //**4PS.o
          PaymentToleranceMgt.CheckCalcPmtDiscGenJnlCust(Rec,CustLedgEntry,0,FALSE,0), //**4PS.n
          CustLedgEntry."Amount to Apply",CustLedgEntry."Remaining Amount",CustLedgEntry."Remaining Pmt. Disc. Possible");
      END;

      //**4PS.sn
      IF Amount = 0 THEN BEGIN
        SetAmountWithRemaining(
          PaymentToleranceMgt.CheckCalcPmtDiscGenJnlCust(Rec,CustLedgEntry,0,FALSE,1),
          CustLedgEntry."Amount to Apply",CustLedgEntry."Remaining Amount",CustLedgEntry."Remain. Pmt. Disc. Possible 2");
      END;
      IF Amount = 0 THEN BEGIN
        SetAmountWithRemaining(
          PaymentToleranceMgt.CheckCalcPmtDiscGenJnlCust(Rec,CustLedgEntry,0,FALSE,2),
          CustLedgEntry."Amount to Apply",CustLedgEntry."Remaining Amount",CustLedgEntry."Remain. Pmt. Disc. Possible 3");
      END;
      //**4PS.en
    END;

    LOCAL PROCEDURE SetAmountWithVendLedgEntry@91();
    BEGIN
      IF "Currency Code" <> VendLedgEntry."Currency Code" THEN
        CheckModifyCurrencyCode(GenJnlLine."Account Type"::Vendor,VendLedgEntry."Currency Code");
      IF Amount = 0 THEN BEGIN
        VendLedgEntry.CALCFIELDS("Remaining Amount");
        SetAmountWithRemaining(
      //  PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(Rec,VendLedgEntry,0,FALSE), //**4PS.o
          PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(Rec,VendLedgEntry,0,FALSE,0), //**4PS.n
          VendLedgEntry."Amount to Apply",VendLedgEntry."Remaining Amount",VendLedgEntry."Remaining Pmt. Disc. Possible");
      END;

      //**4PS.sn
      IF Amount = 0 THEN BEGIN
        SetAmountWithRemaining(
          PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(Rec,VendLedgEntry,0,FALSE,1),
          VendLedgEntry."Amount to Apply",VendLedgEntry."Remaining Amount",VendLedgEntry."Remain. Pmt. Disc. Possible 2");
      END;
      IF Amount = 0 THEN BEGIN
        SetAmountWithRemaining(
          PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(Rec,VendLedgEntry,0,FALSE,21),
          VendLedgEntry."Amount to Apply",VendLedgEntry."Remaining Amount",VendLedgEntry."Remain. Pmt. Disc. Possible 3");
      END;
      //**4PS.en
    END;

    PROCEDURE CheckModifyCurrencyCode@105(AccountType@1000 : Option;CustVendLedgEntryCurrencyCode@1001 : Code[10]);
    BEGIN
      IF Amount = 0 THEN BEGIN
        FromCurrencyCode := GetShowCurrencyCode("Currency Code");
        ToCurrencyCode := GetShowCurrencyCode(CustVendLedgEntryCurrencyCode);
        IF NOT
           CONFIRM(
             Text003,TRUE,FIELDCAPTION("Currency Code"),TABLECAPTION,FromCurrencyCode,ToCurrencyCode)
        THEN
          ERROR(Text005);
        VALIDATE("Currency Code",CustVendLedgEntryCurrencyCode);
      END ELSE
        GenJnlApply.CheckAgainstApplnCurrency(
          "Currency Code",CustVendLedgEntryCurrencyCode,AccountType,TRUE);
    END;

    LOCAL PROCEDURE SetAmountWithRemaining@101(CalcPmtDisc@1000 : Boolean;AmountToApply@1001 : Decimal;RemainingAmount@1002 : Decimal;RemainingPmtDiscPossible@1003 : Decimal);
    BEGIN
      IF AmountToApply <> 0 THEN
        IF CalcPmtDisc AND (ABS(AmountToApply) >= ABS(RemainingAmount - RemainingPmtDiscPossible)) THEN
          Amount := -(RemainingAmount - RemainingPmtDiscPossible)
        ELSE
          Amount := -AmountToApply
      ELSE
        IF CalcPmtDisc THEN
          Amount := -(RemainingAmount - RemainingPmtDiscPossible)
        ELSE
          Amount := -RemainingAmount;
      IF "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor] THEN
        Amount := -Amount;
      VALIDATE(Amount);
    END;

    PROCEDURE IsOpenedFromBatch@87() : Boolean;
    VAR
      GenJournalBatch@1002 : Record 232;
      TemplateFilter@1001 : Text;
      BatchFilter@1000 : Text;
    BEGIN
      BatchFilter := GETFILTER("Journal Batch Name");
      IF BatchFilter <> '' THEN BEGIN
        TemplateFilter := GETFILTER("Journal Template Name");
        IF TemplateFilter <> '' THEN
          GenJournalBatch.SETFILTER("Journal Template Name",TemplateFilter);
        GenJournalBatch.SETFILTER(Name,BatchFilter);
        GenJournalBatch.FINDFIRST;
      END;

      EXIT((("Journal Batch Name" <> '') AND ("Journal Template Name" = '')) OR (BatchFilter <> ''));
    END;

    PROCEDURE GetDeferralAmount@88() DeferralAmount : Decimal;
    BEGIN
      IF "VAT Base Amount" <> 0 THEN
        DeferralAmount := "VAT Base Amount"
      ELSE
        DeferralAmount := Amount;
    END;

    PROCEDURE ShowDeferrals@108(PostingDate@1000 : Date;CurrencyCode@1001 : Code[10]) : Boolean;
    VAR
      DeferralUtilities@1002 : Codeunit 1720;
    BEGIN
      EXIT(
        DeferralUtilities.OpenLineScheduleEdit(
          "Deferral Code",GetDeferralDocType,"Journal Template Name","Journal Batch Name",0,'',"Line No.",
          GetDeferralAmount,PostingDate,Description,CurrencyCode));
    END;

    PROCEDURE GetDeferralDocType@106() : Integer;
    BEGIN
      EXIT(DeferralDocType::"G/L");
    END;

    PROCEDURE IsForPurchase@86() : Boolean;
    BEGIN
      IF ("Account Type" = "Account Type"::Vendor) OR ("Bal. Account Type" = "Bal. Account Type"::Vendor) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE IsForSales@89() : Boolean;
    BEGIN
      IF ("Account Type" = "Account Type"::Customer) OR ("Bal. Account Type" = "Bal. Account Type"::Customer) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    [Integration(TRUE)]
    PROCEDURE OnCheckGenJournalLinePostRestrictions@90();
    BEGIN
    END;

    [Integration(TRUE)]
    PROCEDURE OnCheckGenJournalLinePrintCheckRestrictions@92();
    BEGIN
    END;

    [Integration(TRUE)]
    PROCEDURE OnMoveGenJournalLine@93(ToRecordID@1000 : RecordID);
    BEGIN
    END;

    LOCAL PROCEDURE IncrementDocumentNo@94();
    VAR
      NoSeriesLine@1001 : Record 309;
    BEGIN
      IF GenJnlBatch."No. Series" <> '' THEN BEGIN
        NoSeriesMgt.SetNoSeriesLineFilter(NoSeriesLine,GenJnlBatch."No. Series","Posting Date");
        IF NoSeriesLine."Increment-by No." > 1 THEN
          NoSeriesMgt.IncrementNoText("Document No.",NoSeriesLine."Increment-by No.")
        ELSE
          "Document No." := INCSTR("Document No.");
      END ELSE
        "Document No." := INCSTR("Document No.");
    END;

    PROCEDURE CheckCompanyIC@1210190001();
    VAR
      lvCompName@1210190027 : Text[50];
    BEGIN
      //**4PS
      IF "Receiving Company" <> '' THEN
        lvCompName := "Receiving Company"
      ELSE
        lvCompName := COMPANYNAME;

      Cust.CHANGECOMPANY(lvCompName);
      Vend.CHANGECOMPANY(lvCompName);
      BankAcc.CHANGECOMPANY(lvCompName);
      GLAcc.CHANGECOMPANY(lvCompName);
      DimValRec.CHANGECOMPANY(lvCompName);
      ICProjSetupRec.CHANGECOMPANY(lvCompName);
      ProjRec.CHANGECOMPANY(lvCompName);
      ProjTypeRec.CHANGECOMPANY(lvCompName);
      ProjElemRec.CHANGECOMPANY(lvCompName);
      ExtRec.CHANGECOMPANY(lvCompName);
      PlantTypeRec.CHANGECOMPANY(lvCompName);
      PlantNoRec.CHANGECOMPANY(lvCompName);
      CostCompPlantRec.CHANGECOMPANY(lvCompName);
      PlantPostingSetup.CHANGECOMPANY(lvCompName);
      ServTypeRec.CHANGECOMPANY(lvCompName);
      ServOrderRec.CHANGECOMPANY(lvCompName);
      ServContrRec.CHANGECOMPANY(lvCompName);  //db, 19-05-15: C015449
      CostCompRec.CHANGECOMPANY(lvCompName);  //db, 23-10-12
      PaymentTerms.CHANGECOMPANY(lvCompName);

      ICProjSetupRec.GET;
    END;

    PROCEDURE RefersToOtherCompany@1100525008() : Boolean;
    BEGIN
      //**4PS
      EXIT(("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME));
    END;

    PROCEDURE ValidateItem@1210190002(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item');
    VAR
      DummyDat@11012001 : Date;
      DummyTxt@11012002 : Text[50];
      DummyDec@1210190023 : Decimal;
      lvRefDate@1100485000 : Date;
      lvDiscRef1@1100485001 : Code[20];
      lvDiscRef2@1100485002 : Code[20];
      ServOrderRec@1100485004 : Record 11012823;
      ProjRec@1100485003 : Record 11072003;
    BEGIN
      //**4PS
      IF "Service Order No." <>'' THEN BEGIN
        ServOrderRec.CHANGECOMPANY("Receiving Company");
        ServOrderRec.GET("Service Order No.");
        lvRefDate := ValidateCu.GetRefDateServOrder(ServOrderRec);
      //  lvDiscRef1 := ServOrderRec."Purch Discount Term Group 1";
      //  lvDiscRef2 := ServOrderRec."Purch Discount Term Group 2";
      END ELSE BEGIN
        IF "Job No." <>'' THEN BEGIN
          ProjRec.CHANGECOMPANY("Receiving Company");
          ProjRec.GET("Job No.");
          lvRefDate := ValidateCu.GetRefDateProject(ProjRec);
          lvDiscRef1 := ProjRec."Purch Discount Term Group 1";
          lvDiscRef2 := ProjRec."Purch Discount Term Group 2";
        END;
      END;

      ValidateCu.ValidateItem(LTypeArtOpt,"Trade Item","Item No.",Manufacturer,"Vendor (Trade Item)",
                              "Basic Item","Shortcut Dimension 2 Code",Description,"Unit of Measure Code",Amount,
                              DummyDec,DummyDat,DummyDec,DummyTxt,"Cost Component",
                              lvDiscRef1,lvDiscRef2,lvRefDate,'');

      IF CurrFieldNo <> 0 THEN
        CurrFieldNo := FIELDNO("Shortcut Dimension 2 Code");  //db, 19-03-10: force update Additional Cost
      VALIDATE("Shortcut Dimension 2 Code");
    END;

    PROCEDURE CheckPlantAcqOrRent@1100485000() : Integer;
    VAR
      lvPlantSetupRec@1100485000 : Record 11012550;
    BEGIN
      //**4PS
      IF ("Cost Component Plant" = '') THEN
        EXIT(0);

      IF ("Receiving Company" <> '') THEN
        lvPlantSetupRec.CHANGECOMPANY("Receiving Company");
      lvPlantSetupRec.GET;

      IF ("Cost Component Plant" = lvPlantSetupRec."Cost Component Acquisition") THEN
        EXIT(1);
      IF ("Cost Component Plant" = lvPlantSetupRec."Cost Component Rent") THEN
        EXIT(2);

      EXIT(0);
    END;

    PROCEDURE CheckFixedAssetPlantRelation@1210190010() : Boolean;
    VAR
      lvPlantSetupRec@1210190000 : Record 11012550;
      lvPlantTypeRec@1100525000 : Record 11012551;
    BEGIN
      //**4PS
      // Function: CheckFixedAssetPlantRelation

      IF ("Plant Type" = '') OR ("Plant No." = '') OR ("Cost Component Plant" = '') OR ("Receiving Company" <> '') THEN
        EXIT(FALSE);

      lvPlantSetupRec.GET;
      IF (NOT lvPlantSetupRec."Integration Fixed Assets") OR
         (lvPlantSetupRec."Cost Component Acquisition" <> "Cost Component Plant")
      THEN
        EXIT(FALSE);
      lvPlantTypeRec.GET("Plant Type");
      IF NOT lvPlantTypeRec."Integration Fixed Assets" THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE FillFixedAssetPlantRelation@1210190004() : Boolean;
    VAR
      lvPlantNumberRec@1210190001 : Record 11012552;
    BEGIN
      // Function: FillFixedAssetPlantRelation

      IF NOT CheckFixedAssetPlantRelation() THEN
        EXIT(FALSE);

      lvPlantNumberRec.GET("Plant Type", "Plant No.");
      lvPlantNumberRec.TESTFIELD("Fixed Asset");
      "Account Type" := "Account Type"::"Fixed Asset";
      VALIDATE("Account No.", lvPlantNumberRec."Fixed Asset");
      Description := lvPlantNumberRec.Description;
      "FA Posting Type" := "FA Posting Type"::"Acquisition Cost";

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FillSystemCreatedEntry@1210190007();
    BEGIN
      "System-Created Entry" :=
        ("Service Order No." <> '') OR
        ("Job No." <> '') OR
        ("Plant Type" <> '');

      CASE CurrFieldNo OF
        FIELDNO("Service Order No."):
          TESTFIELD("Plant Type",'');
        FIELDNO("Job No."):
          TESTFIELD("Plant Type",'');
        FIELDNO("Plant Type"):
          BEGIN
            TESTFIELD("Job No.",'');
            TESTFIELD("Service Order No.",'');
          END;
      END;
    END;

    PROCEDURE ValidateAppliesToDocNo@1210190000(SkipMessage@1100525000 : Boolean);
    VAR
      lvCustLedgEntryRec@1210190025 : Record 21;
      lvVendLedgEntryRec@1210190024 : Record 25;
    BEGIN
      //**4PS
      IF ("Account Type" = "Account Type"::Customer) AND ("Applies-to Doc. No." <> '') THEN BEGIN
        lvCustLedgEntryRec.CHANGECOMPANY("Receiving Company");
        lvCustLedgEntryRec.SETCURRENTKEY("Document No.");
        IF "Applies-to Doc. Type" <> "Applies-to Doc. Type"::" " THEN
          lvCustLedgEntryRec.SETRANGE("Document Type","Applies-to Doc. Type");
        lvCustLedgEntryRec.SETRANGE("Document No.","Applies-to Doc. No.");
        IF "Account No." <> '' THEN
          lvCustLedgEntryRec.SETRANGE("Customer No.","Account No.");
        IF lvCustLedgEntryRec.FIND('-') THEN BEGIN
          IF "Account No." = '' THEN
            VALIDATE("Account No.", lvCustLedgEntryRec."Customer No.");
          IF NOT lvCustLedgEntryRec.Open THEN BEGIN
            IF "Document Type" <> "Document Type"::Refund THEN BEGIN
              IF (NOT SkipMessage) AND (NOT DontWarnValidateAppliesToDocNoBool) THEN  //<--ENH035
              //IF NOT SkipMessage THEN
                MESSAGE(Text11012004 + '\' + Text11012009, FIELDCAPTION("Applies-to Doc. No."),"Applies-to Doc. No.");
              "Applies-to Doc. No." := '';
              "Not Matched" := TRUE;  //<-ENH035
            END; //**4PS.n DP00613
          END ELSE BEGIN
          END;
        END ELSE BEGIN
          IF NOT DontWarnValidateAppliesToDocNoBool THEN   //<--ENH035
            ERROR(Text11012005, FIELDCAPTION("Applies-to Doc. No."),"Applies-to Doc. No.");
          "Not Matched" := TRUE;  //<-ENH035
        END;
      END;

      IF ("Account Type" = "Account Type"::Vendor) AND ("Applies-to Doc. No." <> '') THEN BEGIN
        lvVendLedgEntryRec.SETCURRENTKEY("Document No.");
        IF "Applies-to Doc. Type" <> "Applies-to Doc. Type"::" " THEN
          lvVendLedgEntryRec.SETRANGE("Document Type","Applies-to Doc. Type");
        lvVendLedgEntryRec.SETRANGE("Document No.","Applies-to Doc. No.");
        IF "Account No." <> '' THEN
          lvVendLedgEntryRec.SETRANGE("Vendor No.","Account No.");
        IF lvVendLedgEntryRec.FIND('-') THEN BEGIN
          IF "Account No." = '' THEN
            VALIDATE("Account No.", lvVendLedgEntryRec."Vendor No.");
          IF NOT lvVendLedgEntryRec.Open THEN BEGIN
            //IF NOT SkipMessage THEN
            IF (NOT SkipMessage) AND (NOT DontWarnValidateAppliesToDocNoBool) THEN   //<--ENH035
              MESSAGE(Text11012004, FIELDCAPTION("Applies-to Doc. No."),"Applies-to Doc. No.");
            "Applies-to Doc. No." := '';
          END ELSE BEGIN
          END;
        END ELSE
          ERROR(Text11012005, FIELDCAPTION("Applies-to Doc. No."),"Applies-to Doc. No.");
      END;
    END;

    PROCEDURE HandleLookupUnit@1210190008();
    VAR
      ItemUnitRec@1210190000 : Record 5404;
      lvUnit@1210190001 : Code[10];
    BEGIN
      lvUnit := ItemUnitRec.HandleLookupUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)");
      IF (lvUnit <> '') AND (lvUnit <> "Unit of Measure Code") THEN
        VALIDATE("Unit of Measure Code", lvUnit);
    END;

    PROCEDURE GetPlantPostingGroup@1210190019();
    VAR
      lvTypeNo@1100485001 : Integer;
      lvModeInEx@1100485000 : Code[1];
    BEGIN
      //**4PS
      IF "Plant Type" = '' THEN
        EXIT;

      CheckCompanyIC;
      PlantTypeRec.GET("Plant Type");

      IF "Plant No." = '' THEN BEGIN
        lvTypeNo := CheckPlantAcqOrRent();
        IF (lvTypeNo <> 0) THEN
          lvModeInEx := COPYSTR('IE', lvTypeNo, 1);  //* Internal/External
      END;
      "Posting Group" := PlantTypeRec.PlantPostingGrp("Plant No.", "Receiving Company", lvModeInEx);
    END;

    LOCAL PROCEDURE GetGLSetup@245();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    PROCEDURE SetStructuredPayment@15000000();
    VAR
      PurchInvHeader@1000000001 : Record 122;
      SymbrioSetup@1000000000 : Record 11127975;
    BEGIN
      ReadGLSetup;
      IF NOT GLSetup."Norwegian Localization Active" THEN
        EXIT;

      "Structured Payment" := NOT ((KID = '') AND ("External Document No." = ''));

      //>>RFC034
      IF SymbrioSetup.GET AND ("Applies-to Doc. Type" = "Applies-to Doc. Type"::Invoice) AND (PurchInvHeader.GET("Applies-to Doc. No.")) THEN BEGIN
          "Structured Payment" := NOT ((KID = '') AND ("External Document No." = '') AND (PurchInvHeader."Payment Reference" = ''));
      END;
      //<<RFC034

      //>>RFC155
      IF NOT "Structured Payment" THEN
        "Structured Payment" := NOT ((KID = '') AND ("External Document No." = '') AND ("Payment Reference" = ''));
      //<<RFC155
    END;

    PROCEDURE ResetDeleteInteresLinesICAcc@1100485001(IGenJnlLineRec@1100485004 : Record 81);
    VAR
      lvICAccRec@1100485001 : Record 11012118;
      lvInterestLineICAccRec@1100485000 : Record 11020307;
      lvGenJnlLineRec@1100485002 : Record 81;
      lvGLEntryRec@1100485003 : Record 17;
    BEGIN
      //**4PS
      //* Mutation at interest calculation (R11012114/CU11012160) for IC accounts, always come first in the General Journal
      //* to be able to first perform a check (and eventual make some changes or to delete).
      //* When deleting an 'IC-interest line' all accompanying lines of the IC-account should also be deleted.
      //* Field 'Interest Calculated To' of the IC-account should also be set back and field 'Interest Calculated'
      //* of the linked General Ledger Entries should be set back to False.
      //* ATTENTION:
      //* Not set back these fields when posting 'IC-interest lines', because then it is final.
      //* So before deleting a general journal line at posting, first delete all accompanying lines from table 'InterestLineICAcc',
      //* when calling this function from the 'delete trigger' nothing will happen. See next function.

      WITH lvInterestLineICAccRec DO BEGIN
        RESET;
        SETCURRENTKEY(Type,"Gen. Journal Template Name","Gen. Journal Batch Name","Gen. Journal Line No.");
        SETRANGE(Type, Type::GenJnlLine);
        SETRANGE("Gen. Journal Template Name", IGenJnlLineRec."Journal Template Name");
        SETRANGE("Gen. Journal Batch Name", IGenJnlLineRec."Journal Batch Name");
        SETRANGE("Gen. Journal Line No.", IGenJnlLineRec."Line No.");
        IF NOT FINDFIRST THEN
          EXIT;

        lvICAccRec.GET("IC Account No.");
        lvICAccRec."Interest Calculated to" := lvInterestLineICAccRec."Prev. Interest Calculated to";
        lvICAccRec.MODIFY;
        DELETE;

        RESET;
        SETRANGE(Type, Type::GLEntry);
        SETRANGE("IC Account No.", lvICAccRec."Account No.");
        SETRANGE("Gen. Journal Template Name", IGenJnlLineRec."Journal Template Name");
        SETRANGE("Gen. Journal Batch Name", IGenJnlLineRec."Journal Batch Name");
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF lvGLEntryRec.GET("G/L Entry No.") THEN BEGIN
              lvGLEntryRec."Interest Calculated" := FALSE;
              lvGLEntryRec.MODIFY;
            END;
            DELETE;
          UNTIL NEXT = 0;
        END;

        RESET;
        SETRANGE(Type, Type::GenJnlLine);
        SETRANGE("IC Account No.", lvICAccRec."Account No.");
        SETRANGE("Gen. Journal Template Name", IGenJnlLineRec."Journal Template Name");
        SETRANGE("Gen. Journal Batch Name", IGenJnlLineRec."Journal Batch Name");
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            //* First delete these then 'GenJnlLine.Delete(TRUE)' so when calling this function from the 'Delete trigger'
            //* nothing will happen.
            DELETE;
            IF ("Gen. Journal Line No." <> IGenJnlLineRec."Line No.") THEN BEGIN
              IF lvGenJnlLineRec.GET("Gen. Journal Template Name","Gen. Journal Batch Name","Gen. Journal Line No.") THEN
                lvGenJnlLineRec.DELETE(TRUE);
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE DeleteLinkedInteresLinesICAcc@1100485002(IGenJnlLineRec@1100485004 : Record 81);
    VAR
      lvInterestLineICAccRec@1100485000 : Record 11020307;
      lvAccNo@1100485005 : Code[20];
    BEGIN
      //**4PS
      //* See comment in previous function 'ResetDeleteInteresLinesICAcc'.
      //* This function is to delete during posting (CU13). Directly delete all accompanying of IC account.

      WITH lvInterestLineICAccRec DO BEGIN
        RESET;
        SETCURRENTKEY(Type,"Gen. Journal Template Name","Gen. Journal Batch Name","Gen. Journal Line No.");
        SETRANGE(Type, Type::GenJnlLine);
        SETRANGE("Gen. Journal Template Name", IGenJnlLineRec."Journal Template Name");
        SETRANGE("Gen. Journal Batch Name", IGenJnlLineRec."Journal Batch Name");
        SETRANGE("Gen. Journal Line No.", IGenJnlLineRec."Line No.");
        IF NOT FINDFIRST THEN
          EXIT;

        lvAccNo := "IC Account No.";

        RESET;
        SETRANGE(Type, Type::GenJnlLine);
        SETRANGE("IC Account No.", lvAccNo);
        SETRANGE("Gen. Journal Template Name", IGenJnlLineRec."Journal Template Name");
        SETRANGE("Gen. Journal Batch Name", IGenJnlLineRec."Journal Batch Name");
        DELETEALL;

        SETRANGE(Type, Type::GLEntry);
        DELETEALL;
      END;
    END;

    PROCEDURE CheckCostCompServOrderType@1100485019();
    BEGIN
      //**4PS
      CheckCompanyIC;
      DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimValRec, FALSE, "Job No.");  //db, 02-02-10
      CostCompRec.CheckDefaultCostComponent("Service Order No.", "Cost Component", "Receiving Company", DimValRec."Cost Type",
        "Additional Cost (Service)");  //db, 24-02-10 + 23-10-12
    END;

    PROCEDURE CheckAppiesToDocNoAllowedForIC@1100525002(ErrorMode@1100525000 : Boolean;FieldNumber@1100525003 : Integer) : Boolean;
    VAR
      lvText11012001@1100525002 : TextConst 'ENU=not allowed.';
      lvText11012002@1100525001 : TextConst 'ENU=Receiving company is filled, apply then only allowed for account type ''Customer''.';
    BEGIN
      //**4PS  C-017223
      IF ("Receiving Company" <> '') AND ("Account Type" <> "Account Type"::Customer) THEN BEGIN
        IF ErrorMode THEN BEGIN
          IF FieldNumber <> 0 THEN BEGIN
            CASE FieldNumber OF
              FIELDNO("Applies-to Doc. No."):
                FIELDERROR("Applies-to Doc. No.", lvText11012001 + ' ' + lvText11012002);
              FIELDNO("Applies-to ID"):
                FIELDERROR("Applies-to ID", lvText11012001 + ' ' + lvText11012002);
            END;
          END;
          ERROR(lvText11012002);
        END;
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CheckAdditionalCostService@1100525006(CalledBy@1100525000 : Integer);
    BEGIN
      //**4PS
      //db, 24-02-10
      IF "Service Order No." = '' THEN EXIT;
      CheckCompanyIC;
      IF NOT ServOrderRec.GET("Service Order No.") THEN EXIT;

      IF (CalledBy = FIELDNO("Service Order No.")) OR (CalledBy = FIELDNO("Shortcut Dimension 2 Code")) THEN BEGIN
        IF xRec."Shortcut Dimension 2 Code" = '' THEN
          xRec."Cost Type":= -1  //db, 16-03-10: disable default option
        ELSE
          xRec.CALCFIELDS("Cost Type");
        CALCFIELDS("Cost Type");
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Cost Type" <> xRec."Cost Type") THEN BEGIN
          "Additional Cost (Service)" :=
            ServOrderRec.GetAdditionalCostService("Service Order No.","Shortcut Dimension 2 Code","Cost Type"+1,"Receiving Company");
        END;
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Additional Cost (Service)" <> xRec."Additional Cost (Service)") THEN BEGIN
          IF "Additional Cost (Service)" = TRUE THEN
            VALIDATE("Shortcut Dimension 1 Code", ServOrderRec."Department Code (Other)")
          ELSE
            VALIDATE("Shortcut Dimension 1 Code", ServOrderRec."Global Dimension 1 Code");
        END;
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Cost Type" <> xRec."Cost Type") THEN BEGIN
          VALIDATE("Cost Component");
        END;
      END;
    END;

    PROCEDURE ValidateAdditionalCost@1100525000();
    VAR
      CostCompRec@1100525001 : Record 11012012;
      SaveCostComp@1100525000 : Text[30];
    BEGIN
      //**4PS
      SaveCostComp := "Cost Component";
      TESTFIELD("Service Order No.");
      VALIDATE("Service Order No.");
      IF CurrFieldNo <> FIELDNO("Additional Cost (Service)") THEN EXIT;  //db, 18-03-10: T4641

      IF CostCompRec.GET(SaveCostComp) THEN BEGIN
         "Cost Component" := SaveCostComp;
         IF ("Additional Cost (Service)" = TRUE) THEN BEGIN
           IF (CostCompRec."Cost Component (Add.Cost)" <> '') THEN
             "Cost Component" := CostCompRec."Cost Component (Add.Cost)";
         END ELSE BEGIN
           CostCompRec.SETRANGE("Cost Component (Add.Cost)", SaveCostComp);
           IF CostCompRec.FINDSET THEN BEGIN
             REPEAT
               IF (CostCompRec."Cost Component (Add.Cost)" = SaveCostComp) THEN
                 "Cost Component" := CostCompRec.Code;
             UNTIL CostCompRec.NEXT = 0;
           END;
         END;
      END;
    END;

    PROCEDURE SetSkipModify@1100525003(SkipModify@1100525000 : Boolean);
    BEGIN
      //**4PS
      DoSkipModify := SkipModify;
    END;

    PROCEDURE ValidateCostComponent@1100525001();
    VAR
      CostCompRec@1100525000 : Record 11012012;
      CostCompRec2@1100525001 : Record 11012012;
    BEGIN
      //**4PS
      IF CurrFieldNo <> FIELDNO("Cost Component") THEN EXIT;  //db, 18-03-10: T4642

      IF CostCompRec.GET("Cost Component") THEN BEGIN
        //db.sn, 06-12-10: M24263
        IF CostCompRec."Additional Cost (Service)" THEN BEGIN
          CostCompRec2.SETRANGE("Cost Component (Add.Cost)", "Cost Component");
          IF NOT CostCompRec2.FINDFIRST THEN EXIT;
        END ELSE BEGIN
          IF CostCompRec."Cost Component (Add.Cost)" = '' THEN EXIT;
        END;
        //db.en, 06-12-10: M24263
        "Additional Cost (Service)" := CostCompRec."Additional Cost (Service)";
      END;
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(81) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 81');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Gen. Journal Line", "Shortcut Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Shortcut Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Shortcut Dimension 1 Code");
    END;

    PROCEDURE CreateDimForFAPostingGroup@1210190005();
    BEGIN
      //**4PS call C-026623
      CreateDim(
        DimMgt.TypeToTableID1("Account Type"),"Account No.",
        DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
        DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."),
        DATABASE::"Plant Type", "Plant Type",
        DATABASE::Job,"Job No.",
        DATABASE::"Service Order","Service Order No.",
        DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
        DATABASE::Campaign,"Campaign No.");
    END;

    PROCEDURE CreateDimForHourAccLine@1100525005(Type1@1100525015 : Integer;No1@1100525014 : Code[40];Type2@1100525013 : Integer;No2@1100525012 : Code[40];Type3@1100525011 : Integer;No3@1100525010 : Code[40];Type4@1100525009 : Integer;No4@1100525008 : Code[40];Type5@1100525007 : Integer;No5@1100525006 : Code[40];Type6@1100525005 : Integer;No6@1100525004 : Code[40];Type7@1100525003 : Integer;No7@1100525002 : Code[40];Type8@1100525001 : Integer;No8@1100525000 : Code[40]);
    BEGIN
      //**4PS Call C006343
      WhileHoursPostNoDPACheck := TRUE;

      VALIDATE("Account No.");

      CreateDim(
        Type1,No1,
        Type2,No2,
        Type3,No3,
        Type4,No4,
        Type5,No5,
        Type6,No6,
        Type7,No7,
        Type8,No8);

      WhileHoursPostNoDPACheck := FALSE;
    END;

    PROCEDURE ExternalEmployeeVendor@1100525007() LvVendorCde : Code[20];
    VAR
      EmployeeRec@1100525000 : Record 5200;
      VendorRec@1100525002 : Record 23;
    BEGIN
      //**4PS Call C006691  this is according with the check made in CU 11.
      LvVendorCde := '';

      IF "Document Type" <> 0 THEN
        EXIT;

      IF ("Receiving Company" <> COMPANYNAME) AND ("Receiving Company" <> '') THEN
        EXIT;

      IF "Job No." = '' THEN
        EXIT;

      IF "Employee No." = '' THEN
        EXIT;

      IF "Plant Invoice" THEN
        EXIT;

      IF (ProjRec."Small Project" AND ProjRec."Plant Job Order") THEN
        EXIT;

      IF NOT EmployeeRec.GET("Employee No.") THEN
        EXIT;

      IF (NOT EmployeeRec.External) OR (EmployeeRec.Employer = '' ) THEN
        EXIT;

      IF VendorRec.GET(EmployeeRec.Employer) THEN
        LvVendorCde := VendorRec."No.";
    END;

    PROCEDURE OnLookupJobNo@1100525012(EditableMode@1100525000 : Boolean);
    VAR
      PageNo@1100525001 : Integer;
    BEGIN
      //**4PS
      CheckCompanyIC;
      ProjRec."No." := "Job No.";
      IF RefersToOtherCompany THEN
        PageNo := PAGE::"Job List IC";
      IF NOT EditableMode THEN
        PAGE.RUNMODAL(PageNo, ProjRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(PageNo, ProjRec) = ACTION::LookupOK THEN
          VALIDATE("Job No.", ProjRec."No.");
      END;
    END;

    PROCEDURE OnLookupServiceOrderNo@1100525011(EditableMode@1100525000 : Boolean);
    BEGIN
      //**4PS
      CheckCompanyIC;
      ServOrderRec."No." := "Service Order No.";
      IF NOT EditableMode THEN
        PAGE.RUNMODAL(0, ServOrderRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, ServOrderRec) = ACTION::LookupOK THEN BEGIN
          xRec."Service Order No." := '';  //db, 07-06-10: M19676
          VALIDATE("Service Order No.", ServOrderRec."No.");
        END;
      END;
    END;

    PROCEDURE OnLookupPlantType@1100525034(EditableMode@1100525000 : Boolean);
    BEGIN
      //**4PS
      CheckCompanyIC;
      PlantTypeRec.Code := "Plant Type";
      IF NOT EditableMode THEN
        PAGE.RUNMODAL(0,PlantTypeRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0,PlantTypeRec) = ACTION::LookupOK THEN
          VALIDATE("Plant Type", PlantTypeRec.Code);
      END;
    END;

    PROCEDURE ValidatePlantNo@1100525031();
    VAR
      PlantType@1100525000 : Record 11012551;
      PurchaseLine@1100525001 : Record 39;
      PlantSetup@1100525002 : Record 11012550;
    BEGIN
      //**4PS
      IF ("Plant Type" <> '') AND ("Plant No." = '') THEN BEGIN
        PlantSetup.GET;
        IF PlantSetup."Posting on Unique Plant No." THEN
          IF PlantType.GET("Plant Type") THEN
            IF NOT PlantType.Bulk THEN
              IF PlantSetup."Cost Component Acquisition" <> "Cost Component Plant" THEN
                TESTFIELD("Plant No.");
      END;
    END;

    LOCAL PROCEDURE CheckDocNoInDefaultNoSeries@1100528501(SeriesCode@1210190002 : Code[10];DocNo@1000 : Code[20];Date@1210190003 : Date) : Boolean;
    VAR
      NoSeriesLine@1210190001 : Record 309;
      IsDigit@1003 : Boolean;
      i@1004 : Integer;
      SerieLen@1210190000 : Integer;
    BEGIN
      //**4PS
      IF (SeriesCode = '') OR (DocNo = '') THEN
        EXIT(FALSE);

      CLEAR(NoSeriesMgt);
      NoSeriesMgt.SetNoSeriesLineFilter(NoSeriesLine,SeriesCode,Date);
      IF NOT NoSeriesLine.FINDFIRST THEN BEGIN
        NoSeriesLine.SETRANGE("Starting Date");
        IF NOT NoSeriesLine.FINDFIRST THEN
          EXIT(FALSE);
      END;

      SerieLen := 0;
      i := STRLEN(DocNo);
      REPEAT
        IsDigit := DocNo[i] IN ['0'..'9'];
        IF IsDigit THEN
          SerieLen := i - 1;
        i := i - 1;
      UNTIL (i = 0) OR (NOT IsDigit);

      IF SerieLen > 0 THEN BEGIN
        IF COPYSTR(DocNo,1,SerieLen) = COPYSTR(NoSeriesLine."Starting No.",1,SerieLen) THEN
          EXIT(TRUE);
      END ELSE
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE WipAccountProject@1100409000(Proj@1100409009 : Record 11072003;ProjType@1100409008 : Record 11012009;DimVal@1100409007 : Record 349;ProvisionsAtClosure@1100409002 : Boolean;CompName@1100409005 : Text[50];VendorNo@1100409000 : Code[20];VendorPostingGroup@1100409003 : Code[20]) AccountNo : Code[20];
    VAR
      ICHoursPosting@1100409001 : 'NotApplicable,ReceiverSide,Supplierside';
    BEGIN
      //**4PS
      IF ("Rental Unit" = '') OR
         ("Rental Unit Line Type" = 0) OR
         (DimVal."Cost Type" <> DimVal."Cost Type"::Revenue)
      THEN BEGIN
        AccountNo := ProjType.GetWipAccByVendorPostingGrp(
          Proj."Project Type",
          DimVal."Cost Type",
          Proj."Project Status",
          ProvisionsAtClosure,
          CompName,
          "Cost Type Cost Plus Line",
          VendorNo,  //** 4PS Call Call C006691 changed
          ICHoursPosting::Supplierside,
          VendorPostingGroup);
      END ELSE BEGIN
        IF (Proj."Project Status" >= Proj."Project Status"::Finished) AND ProvisionsAtClosure THEN BEGIN
          ProjType.TESTFIELD("Provision Account Rental UR");
          AccountNo := ProjType."Provision Account Rental UR";
        END ELSE BEGIN
          CASE "Rental Unit Line Type" OF
            "Rental Unit Line Type"::ServiceCost:
              BEGIN
                ProjTypeRec.TESTFIELD("Rental Unit Service Cost Rev.");
                AccountNo := ProjTypeRec."Rental Unit Service Cost Rev.";
              END;
            "Rental Unit Line Type"::Utilities:
              BEGIN
                ProjTypeRec.TESTFIELD("Rental Unit Acc Utilities Rev.");
                AccountNo := ProjTypeRec."Rental Unit Acc Utilities Rev.";
              END;
          ELSE
            BEGIN
              ProjTypeRec.TESTFIELD("Rental Unit Account Revenue");
              AccountNo := ProjTypeRec."Rental Unit Account Revenue";
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE ReplaceDescriptionXtraCondition@1100525009() : Boolean;
    VAR
      xGLAcc@1100525000 : Record 15;
    BEGIN
      //**4PS
      IF ("Plant Type" <> '') OR ("Shortcut Dimension 2 Code" <> '') THEN
        EXIT(FALSE);

      IF (Description <> '') THEN
        IF ("Account No." <> xRec."Account No.") OR ("Account Type" <> xRec."Account Type") THEN BEGIN
          IF xGLAcc.GET(xRec."Account No.") THEN
            EXIT(xRec.Description = xGLAcc.Name);
        END ELSE
          EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE "**ITERO"@1100285500();
    BEGIN
    END;

    PROCEDURE DontWarnValidateAppliesToDocNo@1100285501();
    BEGIN
      DontWarnValidateAppliesToDocNoBool := TRUE;
    END;

    PROCEDURE CopyDimensionFromAutoAccLine@1070000(AutoAccLine@1070002 : Record 11128014);
    VAR
      DimMgt@1070000 : Codeunit 408;
      DimensionSetIDArr@1070001 : ARRAY [10] OF Integer;
    BEGIN
      //NAVSE,NAVFI
      IF AutoAccLine."Dimension Set ID" <> 0 THEN
        IF "Dimension Set ID" = 0 THEN BEGIN
          "Dimension Set ID" := AutoAccLine."Dimension Set ID";
          DimMgt.UpdateGlobalDimFromDimSetID(
            "Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
        END ELSE BEGIN
          DimensionSetIDArr[1] := "Dimension Set ID";
          DimensionSetIDArr[2] := AutoAccLine."Dimension Set ID";
          "Dimension Set ID" :=
            DimMgt.GetCombinedDimensionSetID(
              DimensionSetIDArr,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
        END;
    END;

    PROCEDURE CheckDim1JobService@1100525010();
    BEGIN
       //**4PS
      //db, 19-05-15: C015449
      //-check manual change proposal for adjustment entries
      //-assumed company switch done
      IF CurrFieldNo = FIELDNO("Shortcut Dimension 1 Code") THEN BEGIN
        IF "Job No." <> '' THEN BEGIN
          ProjRec.GET("Job No.");
          TESTFIELD("Shortcut Dimension 1 Code", ProjRec."Global Dimension 1 Code");
        END ELSE BEGIN
          IF "Service Order No." <> '' THEN BEGIN
            ServOrderRec.GET("Service Order No.");
            TESTFIELD("Shortcut Dimension 1 Code", ServOrderRec."Global Dimension 1 Code");
          END ELSE BEGIN
            IF "Service Contract No." <> '' THEN BEGIN
              ServContrRec.GET("Service Contract No.");
              TESTFIELD("Shortcut Dimension 1 Code", ServContrRec."Global Dimension 1 Code");
            END;
          END;
        END;
      END;
    END;

    PROCEDURE InitSurchargeForExternalIndirectHours@1100528400(VAR GenJnlLine@1210190002 : Record 81;OrigDimensionValue@1210190001 : Record 349;SurchDimensionValue@1210190009 : Record 349;OverheadSurcharge@1210190004 : Record 11020208;PostedHourLine@1100528400 : Record 11012085;Dimension1Code@1210190005 : Code[20];VAR TotalSurchAmount@1100485002 : Decimal);
    VAR
      JobsSetup@1210190007 : Record 315;
      Employee@1100485000 : Record 5200;
      DimMgt@1100525002 : Codeunit 408;
    BEGIN
      //**4PS
      WITH GenJnlLine DO BEGIN
        IF (OrigDimensionValue."Cost Type" = OrigDimensionValue."Cost Type"::Labor) AND
           ("Employee No." <> '') THEN
        BEGIN
          IF Employee.GET("Employee No.") THEN BEGIN
            IF (Employee.External) AND
               (Employee."External Post No Surcharge") THEN
              EXIT;
          END;
        END;

        IF OverheadSurcharge.Percentage <> 0 THEN BEGIN
          IF JobsSetup.GET THEN;
          IF JobsSetup."Surcharge Overtime excl." THEN BEGIN
            IF OverheadSurcharge."Surcharge over Surcharge" THEN BEGIN
              Amount := ROUND(
                (Amount + TotalSurchAmount - (PostedHourLine."Surcharge Overtime" * PostedHourLine."Total Line") ) *
                OverheadSurcharge.Percentage/100)
            END ELSE BEGIN
              Amount := ROUND(
                (Amount - (PostedHourLine."Surcharge Overtime" * PostedHourLine."Total Line") ) *
                OverheadSurcharge.Percentage/100);
            END;
          END ELSE BEGIN
            IF OverheadSurcharge."Surcharge over Surcharge" THEN
              Amount := ROUND((Amount + TotalSurchAmount) * OverheadSurcharge.Percentage/100)
            ELSE
              Amount := ROUND(Amount * OverheadSurcharge.Percentage/100)
          END;
        END ELSE
          Amount := ROUND(OverheadSurcharge.Amount * Quantity);

        "Unit of Measure Code" := SurchDimensionValue."Unit of Measure";
        "Shortcut Dimension 1 Code" := Dimension1Code;
        "Shortcut Dimension 2 Code" := SurchDimensionValue.Code;
        DimMgt.ValidateShortcutDimValues(1,"Shortcut Dimension 1 Code","Dimension Set ID");
        DimMgt.ValidateShortcutDimValues(2,"Shortcut Dimension 2 Code","Dimension Set ID");

        IF SurchDimensionValue."Cost Component" <> '' THEN
          "Cost Component" := SurchDimensionValue."Cost Component";
        Description := STRSUBSTNO(Text11012000, OverheadSurcharge.Description);
        TotalSurchAmount := TotalSurchAmount + Amount;
      END;
    END;

    PROCEDURE AccountIsSupplyingCurrentCompanyICAccount@1100528401() : Boolean;
    VAR
      IntercompanyRelation@1100528400 : Record 11012057;
    BEGIN
      //**4PS
      IF NOT IntercompanyRelation.GET(COMPANYNAME, "Receiving Company") THEN
        EXIT;

      EXIT("Account No." = IntercompanyRelation."Supplying Company IC Account");
    END;

    BEGIN
    {
      4PS
      10-10-2000 A. Overeem Fields WKA added.
      19-10-2000 A. Overeem Field Job No. set to Editable.
      12-01-2001 A. Overeem Field Unit of Measure Code added.
      17-02-2005 Peter Schoenmaker - Amount will always be made equal to open amount of Applies-to Doc. No.
                 call 5488 marked with 4PS01.
      //20060706-JE : Added field [Your Reference]
      4PS01 JD 14-02-08 Fill Cost component from SOType of Cost Object

      I012 130711 Added field "Amount ROT"
      4PSSE.MK Call SYM912 2013-10-11 Get external document no. from vendor ledger entry when appliyng .

      *** I016 ***
      131022 Added new option field 11128015 LB Giro Type: SEPA

      140114  GHE   ENH-005 : Field Not Matched added
      140617 ITERO.DL ENH035 DontWarnValidateAppliesToDocNo, field + function + code in ValidateAppliesToDocNo

      Version List=NAVW17.10.00.36897,NAVDK7.10.00.36897;
      Version List=NAVW19.00.00.45834,NAVSE9.00.00.45834
      Version List=NAVW19.00.00.45834,NAVFI9.00.00.45834;
      Version List=NAVW19.00.00.45834,NAVDK9.00.00.45834;
      Version List=NAVW19.00.00.45834,NAVNO9.00.00.45834;
      NAVFI: removed field "Invoice Message 2", reduced size of "Invoice Message" and "Memo" from 250 -> 128, due to full table-definition
      160520 ITERO.DL RFC114 SEPA payments from SweBase 6.03
      160726 ITERO.DL RFC114 added "SEPA pain.001"  to  "LB Giro Type"
      PEB *** Begin ***
      PEB0026 Get the Invoice/Credit Memo when using Applies-to Doc. No.
      PEB0052 Fixed "External Document No." from Vendor
      PEB0065 BG-Max
      PEB0076 "Last GL Entry No." and "Last GL Reg Entry No." as parameter in Table 81
      PEB0091 Banking
      PEB
        New Ke:
         Journal Template Name,Journal Batch Name,Account Type,Account No.,Business Unit Code,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Posting Date
      PEB *** End ***
      160929 ITERO.DL RFC155 handle Payment Reference to SetStructuredPayment
    }
    END.
  }
}

