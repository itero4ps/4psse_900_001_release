OBJECT Table 83 Item Journal Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.45243,4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               LOCKTABLE;
               ItemJnlTemplate.GET("Journal Template Name");
               ItemJnlBatch.GET("Journal Template Name","Journal Batch Name");

               ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
               ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
               ValidateNewShortcutDimCode(1,"New Shortcut Dimension 1 Code");
               ValidateNewShortcutDimCode(2,"New Shortcut Dimension 2 Code");

               CheckPlanningAssignment;
               //**4PS.sn
               "Quantity (Produced)" := 0;
               "Quantity (Released)" := 0;
               "Quantity to Post" := CalcDefaultQuantityToPost;
               VALIDATE("Quantity (Reserved)");
               "Related Document (Parent)" := '';
               "Related Document (Child)" := '';
               UpdateCostControlStatus(UpdateAction::Insert);
               CalcOverheadSurcharge;  //** 4PS 15-06-2010
               //M25827
               IF ("Location Code" <> ItemJnlTemplate."Location Code") AND
                  ("Location Code" <> '') AND //kzwerver, 120404, n, #34242
                  (ItemJnlTemplate."Location Code" <> '')
               THEN
                 ERROR(Text11012003,
                          FIELDCAPTION("Location Code"),
                          "Location Code",
                          ItemJnlTemplate."Location Code",
                          ItemJnlTemplate.TABLECAPTION,
                          "Journal Template Name");
               CheckEntityNo;
               "Input by" := USERID;
               //**4PS.en
             END;

    OnModify=BEGIN
               ReserveItemJnlLine.VerifyChange(Rec,xRec);
               CheckPlanningAssignment;
               //**4PS.sn
               VALIDATE("Quantity (Reserved)");
               UpdateCostControlStatus(UpdateAction::Modify);
               //IF ("Unit Cost" <> xRec."Unit Cost") OR (Quantity <> xRec.Quantity) THEN BEGIN   // 25-06-2007
                 //lItemJnlLine := Rec;  //** 4PS 15-06-2010 so
                 //CalcOverheadSurchargeOLD(lItemJnlLine);
                 //"Ovh.Surch.Expected Costs (LCY)" := lItemJnlLine."Ovh.Surch.Expected Costs (LCY)";//** 4PS 15-06-2010 eo
                 CalcOverheadSurcharge;  //** 4PS 15-06-2010
               //END;

               //M25827
               ItemJnlTemplate.GET("Journal Template Name");
               IF ("Location Code" <> ItemJnlTemplate."Location Code") AND (ItemJnlTemplate."Location Code" <> '') THEN
                 ERROR(Text11012003,
                          FIELDCAPTION("Location Code"),
                          "Location Code",
                          ItemJnlTemplate."Location Code",
                          ItemJnlTemplate.TABLECAPTION,
                          "Journal Template Name");
               CheckEntityNo;
               //**4PS.en
             END;

    OnDelete=BEGIN
               ReserveItemJnlLine.DeleteLine(Rec);

               CALCFIELDS("Reserved Qty. (Base)");
               TESTFIELD("Reserved Qty. (Base)",0);

               //**4PS.sn
               UpdateCostControlStatus(UpdateAction::Delete);
               UpdateRelatedQuantity(0, Quantity, TRUE);
               DeleteSurcharge;
               //**4PS.en
             END;

    OnRename=BEGIN
               ReserveItemJnlLine.RenameLine(Rec,xRec);
             END;

    CaptionML=ENU=Item Journal Line;
    LookupPageID=Page519;
    DrillDownPageID=Page519;
  }
  FIELDS
  {
    { 1   ;   ;Journal Template Name;Code10       ;TableRelation="Item Journal Template";
                                                   CaptionML=ENU=Journal Template Name }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 3   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=VAR
                                                                ProdOrderLine@1001 : Record 5406;
                                                                ProdOrderComp@1000 : Record 5407;
                                                                lvKeepCurrFieldNo@1100525000 : Integer;
                                                              BEGIN
                                                                lvKeepCurrFieldNo := CurrFieldNo;      //**4PS05.n
                                                                IF CurrFieldNo = FIELDNO("Item No.") THEN
                                                                  TESTFIELD("Production Order", '');  //**4PS.n

                                                                IF "Item No." <> xRec."Item No." THEN BEGIN
                                                                  "Variant Code" := '';
                                                                  "Bin Code" := '';
                                                                  "Bin Code (Project Inventory)" := '';  //**4PS.n
                                                                  IF CurrFieldNo <> 0 THEN
                                                                    WMSManagement.CheckItemJnlLineFieldChange(Rec,xRec,FIELDCAPTION("Item No."));
                                                                  IF ("Location Code" <> '') AND ("Item No." <> '') THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
                                                                      WMSManagement.GetDefaultBin("Item No.","Variant Code","Location Code","Bin Code");
                                                                    CheckDefaultBin;  //**4PS.n (db, 02-11-10)
                                                                  END;
                                                                  IF ("Entry Type" = "Entry Type"::Transfer) AND ("Location Code" = "New Location Code") THEN
                                                                    "New Bin Code" := "Bin Code";
                                                                END;

                                                                IF "Entry Type" IN ["Entry Type"::Consumption,"Entry Type"::Output] THEN
                                                                  WhseValidateSourceLine.ItemLineVerifyChange(Rec,xRec);

                                                                IF "Item No." = '' THEN BEGIN
                                                                  CreateDim(
                                                                    DATABASE::Job,"Job No.", //**4PS.n
                                                                    DATABASE::"Service Order","Service Order No.",   //** 4PS 09-06-2010
                                                                    DATABASE::Item,"Item No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::"Work Center","Work Center No.",
                                                                    DATABASE::Location,"Location Code"); //**4PS.n
                                                                  EXIT;
                                                                END;

                                                                GetItem;
                                                                //Item.TESTFIELD(Blocked,FALSE); //**4PS.o 22793
                                                                Item.TESTFIELD(Type,Item.Type::Inventory);
                                                                IF "Value Entry Type" = "Value Entry Type"::Revaluation THEN
                                                                  Item.TESTFIELD("Inventory Value Zero",FALSE);

                                                                //**4PS.sn
                                                                "Shortcut Dimension 2 Code" := Item."Global Dimension 2 Code";
                                                                IF "Shortcut Dimension 2 Code" <> '' THEN BEGIN
                                                                  CheckCompanyIC;
                                                                  DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimValRec, TRUE,'');
                                                                  IF DimValRec."Cost Type" < DimValRec."Cost Type"::Revenue THEN
                                                                    "Cost Type" := DimValRec."Cost Type" + 1
                                                                  ELSE
                                                                    "Cost Type" := "Cost Type"::" ";
                                                                  CheckAdditionalCostService;  //db, 11-03-10
                                                                  "Cost Component" := DimValRec."Cost Component";
                                                                  CheckCostCompServOrderType;
                                                                END;
                                                                Item.TESTFIELD("Logistics on Component Level",FALSE); //**4PS.n
                                                                VALIDATE(Text, Item.Text);
                                                                ValidateShelf;
                                                                GetUnitPrice;
                                                                //**4PS.en
                                                                Description := Item.Description;
                                                                //**4PS.sn
                                                                "Description 2" := Item."Description 2";  //db, 26-08-09: M16327
                                                                ItemMgt.GetItemTranslation("Item No.", Description, "Description 2");
                                                                //**4PS.en
                                                                "Inventory Posting Group" := Item."Inventory Posting Group";
                                                                "Item Category Code" := Item."Item Category Code";
                                                                "Product Group Code" := Item."Product Group Code";

                                                                IF ("Value Entry Type" <> "Value Entry Type"::"Direct Cost") OR
                                                                   ("Item Charge No." <> '')
                                                                THEN BEGIN
                                                                  IF "Item No." <> xRec."Item No." THEN BEGIN
                                                                    TESTFIELD("Partial Revaluation",FALSE);
                                                                    RetrieveCosts;
                                                                    "Indirect Cost %" := 0;
                                                                    "Overhead Rate" := 0;
                                                                    "Inventory Value Per" := "Inventory Value Per"::" ";
                                                                    VALIDATE("Applies-to Entry",0);
                                                                    "Partial Revaluation" := FALSE;
                                                                  END;
                                                                END ELSE BEGIN
                                                                  "Indirect Cost %" := Item."Indirect Cost %";
                                                                  "Overhead Rate" := Item."Overhead Rate";
                                                                  IF NOT "Phys. Inventory" OR (Item."Costing Method" = Item."Costing Method"::Standard) THEN BEGIN
                                                                    RetrieveCosts;
                                                                    "Unit Cost" := UnitCost;
                                                                  END ELSE
                                                                    UnitCost := "Unit Cost";
                                                                END;

                                                                IF (("Entry Type" = "Entry Type"::Output) AND (WorkCenter."No." = '') AND (MachineCenter."No." = '')) OR
                                                                   ("Entry Type" <> "Entry Type"::Output) OR
                                                                   ("Value Entry Type" = "Value Entry Type"::Revaluation)
                                                                THEN
                                                                  "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";

                                                                //**4PS.sn
                                                                InventorySetup.GET;
                                                                IF InventorySetup."Product Posting Group (Invent)" <> '' THEN
                                                                  IF ItemJnlTemplate.GET("Journal Template Name") THEN
                                                                    IF ItemJnlTemplate.Type = ItemJnlTemplate.Type::"Phys. Inventory" THEN
                                                                      "Gen. Prod. Posting Group" := InventorySetup."Product Posting Group (Invent)";

                                                                IF "Value Entry Type" = "Value Entry Type"::Revaluation THEN
                                                                  IF InventorySetup."Product Posting Group (Reval.)" <> '' THEN
                                                                    "Gen. Prod. Posting Group" := InventorySetup."Product Posting Group (Reval.)";
                                                                //**4PS.en

                                                                CASE "Entry Type" OF
                                                                  "Entry Type"::Purchase,
                                                                  "Entry Type"::Output,
                                                                  "Entry Type"::"Assembly Output":
                                                                    PurchPriceCalcMgt.FindItemJnlLinePrice(Rec,FIELDNO("Item No."));
                                                                  "Entry Type"::"Positive Adjmt.",
                                                                  "Entry Type"::"Negative Adjmt.",
                                                                  "Entry Type"::Consumption,
                                                                  "Entry Type"::"Assembly Consumption":
                                                                    "Unit Amount" := UnitCost;
                                                                  "Entry Type"::Sale:
                                                                    SalesPriceCalcMgt.FindItemJnlLinePrice(Rec,FIELDNO("Item No."));
                                                                  "Entry Type"::Transfer:
                                                                    BEGIN
                                                                      "Unit Amount" := 0;
                                                                      "Unit Cost" := 0;
                                                                      Amount := 0;
                                                                    END;
                                                                END;
                                                                CurrFieldNo := lvKeepCurrFieldNo;  //**4PS05.n//needed because of NAV bug see KB926410 on PartnerSource

                                                                CASE "Entry Type" OF
                                                                  "Entry Type"::Purchase:
                                                                    //"Unit of Measure Code" := Item."Purch. Unit of Measure";  //**4PS.o
                                                                    "Unit of Measure Code" := Item."Base Unit of Measure";      //**4PS.n (call C-005201)
                                                                  "Entry Type"::Sale:
                                                                    //"Unit of Measure Code" := Item."Sales Unit of Measure";   //**4PS.o
                                                                    "Unit of Measure Code" := Item."Base Unit of Measure";      //**4PS.n (call C-005201)
                                                                  "Entry Type"::Output:
                                                                    BEGIN
                                                                      Item.TESTFIELD("Inventory Value Zero",FALSE);
                                                                      ProdOrderLine.SetFilterByReleasedOrderNo("Order No.");
                                                                      ProdOrderLine.SETRANGE("Item No.","Item No.");
                                                                      IF ProdOrderLine.FINDFIRST THEN BEGIN
                                                                        "Routing No." := ProdOrderLine."Routing No.";
                                                                        "Source Type" := "Source Type"::Item;
                                                                        "Source No." := ProdOrderLine."Item No.";
                                                                      END ELSE
                                                                        IF ("Value Entry Type" <> "Value Entry Type"::Revaluation) AND
                                                                           (CurrFieldNo <> 0)
                                                                        THEN
                                                                          ERROR(Text031,"Item No.","Order No.");
                                                                      IF ProdOrderLine.COUNT = 1 THEN BEGIN
                                                                        VALIDATE("Order Line No.",ProdOrderLine."Line No.");
                                                                        "Unit of Measure Code" := ProdOrderLine."Unit of Measure Code";
                                                                        "Location Code" := ProdOrderLine."Location Code";
                                                                        VALIDATE("Variant Code",ProdOrderLine."Variant Code");
                                                                        VALIDATE("Bin Code",ProdOrderLine."Bin Code");
                                                                      END ELSE
                                                                        "Unit of Measure Code" := Item."Base Unit of Measure";
                                                                    END;
                                                                  "Entry Type"::Consumption:
                                                                    BEGIN
                                                                      ProdOrderComp.SetFilterByReleasedOrderNo("Order No.");
                                                                      ProdOrderComp.SETRANGE("Item No.","Item No.");
                                                                      IF ProdOrderComp.COUNT = 1 THEN BEGIN
                                                                        ProdOrderComp.FINDFIRST;
                                                                        VALIDATE("Order Line No.",ProdOrderComp."Prod. Order Line No.");
                                                                        VALIDATE("Prod. Order Comp. Line No.",ProdOrderComp."Line No.");
                                                                        "Unit of Measure Code" := ProdOrderComp."Unit of Measure Code";
                                                                        "Location Code" := ProdOrderComp."Location Code";
                                                                        VALIDATE("Variant Code",ProdOrderComp."Variant Code");
                                                                        VALIDATE("Bin Code",ProdOrderComp."Bin Code");
                                                                      END ELSE BEGIN
                                                                        "Unit of Measure Code" := Item."Base Unit of Measure";
                                                                        VALIDATE("Prod. Order Comp. Line No.",0);
                                                                      END;
                                                                    END;
                                                                  ELSE
                                                                    "Unit of Measure Code" := Item."Base Unit of Measure";
                                                                END;

                                                                IF "Value Entry Type" = "Value Entry Type"::Revaluation THEN
                                                                  "Unit of Measure Code" := Item."Base Unit of Measure";
                                                                VALIDATE("Unit of Measure Code");
                                                                IF "Variant Code" <> '' THEN
                                                                  VALIDATE("Variant Code");

                                                                CheckItemAvailable(FIELDNO("Item No."));

                                                                IF ((NOT ("Order Type" IN ["Order Type"::Production,"Order Type"::Assembly])) OR ("Order No." = '')) AND NOT "Phys. Inventory"
                                                                THEN
                                                                  CreateDim(
                                                                    DATABASE::Job,"Job No.", //**4PS.n
                                                                    DATABASE::"Service Order","Service Order No.",   //** 4PS 09-06-2010
                                                                    DATABASE::Item,"Item No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::"Work Center","Work Center No.",
                                                                    DATABASE::Location,"Location Code"); //**4PS.n

                                                                VALIDATE("To Plant Inventory"); //**4PS.n
                                                                ReserveItemJnlLine.VerifyChange(Rec,xRec);

                                                                //**4PS.sn
                                                                CurrFieldNo := lvKeepCurrFieldNo;
                                                                CheckItemEntrySales;
                                                                //**4PS.en
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupItemNo;  //**4PS.n
                                                            END;

                                                   CaptionML=ENU=Item No. }
    { 4   ;   ;Posting Date        ;Date          ;OnValidate=VAR
                                                                CheckDateConflict@1000 : Codeunit 99000815;
                                                              BEGIN
                                                                VALIDATE("Document Date","Posting Date");
                                                                CheckDateConflict.ItemJnlLineCheck(Rec,CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Posting Date }
    { 5   ;   ;Entry Type          ;Option        ;OnValidate=VAR
                                                                lvKeepCurrFieldNo@1100525000 : Integer;
                                                              BEGIN
                                                                lvKeepCurrFieldNo := CurrFieldNo;         //**4PS05.n
                                                                IF NOT ("Entry Type" IN ["Entry Type"::"Positive Adjmt.","Entry Type"::"Negative Adjmt."]) THEN
                                                                  TESTFIELD("Phys. Inventory",FALSE);

                                                                IF CurrFieldNo <> 0 THEN
                                                                  WMSManagement.CheckItemJnlLineFieldChange(Rec,xRec,FIELDCAPTION("Entry Type"));
                                                                //**4PS.sn
                                                                IF ("Entry Type" IN ["Entry Type"::"Positive Adjmt.", "Entry Type"::"Negative Adjmt."]) THEN BEGIN
                                                                  TESTFIELD("Production Order", '');
                                                                  TESTFIELD("Job No.",'');
                                                                  TESTFIELD("Service Order No.",'');
                                                                END;
                                                                IF NOT ("Entry Type" IN ["Entry Type"::Purchase, "Entry Type"::Sale]) THEN
                                                                  VALIDATE("Plant Type", '');
                                                                IF NOT ("Entry Type" IN ["Entry Type"::Purchase, "Entry Type"::Sale]) THEN
                                                                  VALIDATE("Delivery Account No.", '');
                                                                IF "Project Stock" AND (NOT ("Entry Type" IN ["Entry Type"::Purchase, "Entry Type"::Sale])) THEN
                                                                  "Project Stock" := FALSE;
                                                                //**4PS.en

                                                                CASE "Entry Type" OF
                                                                  "Entry Type"::Purchase:
                                                                    IF UserMgt.GetRespCenter(1,'') <> '' THEN
                                                                      //"Location Code" := UserMgt.GetLocation(1,'',UserMgt.GetPurchasesFilter); //**4PS.o
                                                                      "Location Code" := UserMgt.GetLocation(1,'',UserMgt.GetPurchasesDefault); //**4PS.n
                                                                  "Entry Type"::Sale:
                                                                    IF UserMgt.GetRespCenter(0,'') <> '' THEN
                                                                      "Location Code" := UserMgt.GetLocation(0,'',UserMgt.GetSalesFilter);
                                                                  "Entry Type"::Consumption,"Entry Type"::Output:
                                                                    VALIDATE("Order Type","Order Type"::Production);
                                                                  "Entry Type"::"Assembly Consumption","Entry Type"::"Assembly Output":
                                                                    VALIDATE("Order Type","Order Type"::Assembly);
                                                                END;

                                                                IF xRec."Location Code" = '' THEN
                                                                  IF Location.GET("Location Code") THEN
                                                                    IF  Location."Directed Put-away and Pick" THEN
                                                                      "Location Code" := '';

                                                                IF "Item No." <> '' THEN
                                                                  VALIDATE("Location Code");

                                                                VALIDATE("Item No.");
                                                                IF "Entry Type" <> "Entry Type"::Transfer THEN BEGIN
                                                                  "New Location Code" := '';
                                                                  "New Bin Code" := '';
                                                                END;

                                                                IF "Entry Type" <> "Entry Type"::Output THEN
                                                                  Type := Type::" ";

                                                                ReserveItemJnlLine.VerifyChange(Rec,xRec);

                                                                //**4PS.sn
                                                                CurrFieldNo := lvKeepCurrFieldNo;
                                                                CheckItemEntrySales;
                                                                SetProjectStock;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Entry Type;
                                                   OptionCaptionML=ENU=Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Transfer,Consumption,Output, ,Assembly Consumption,Assembly Output;
                                                   OptionString=Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Transfer,Consumption,Output, ,Assembly Consumption,Assembly Output }
    { 6   ;   ;Source No.          ;Code20        ;TableRelation=IF (Source Type=CONST(Customer)) Customer
                                                                 ELSE IF (Source Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Source Type=CONST(Item)) Item;
                                                   CaptionML=ENU=Source No.;
                                                   Editable=No }
    { 7   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 8   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 9   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Project Filter=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                IF "Entry Type" <= "Entry Type"::Transfer THEN
                                                                  TESTFIELD("Item No.");

                                                                //**4PS.sn M25827
                                                                IF "Journal Template Name" <> '' THEN BEGIN // 30036.n
                                                                  ItemJnlTemplate.GET("Journal Template Name");
                                                                  IF ("Location Code" <> ItemJnlTemplate."Location Code") AND (ItemJnlTemplate."Location Code" <> '') THEN
                                                                    ERROR(
                                                                      Text11012003,
                                                                      FIELDCAPTION("Location Code"),
                                                                      "Location Code",
                                                                      ItemJnlTemplate."Location Code",
                                                                      ItemJnlTemplate.TABLECAPTION,
                                                                      "Journal Template Name");
                                                                END; // 30036.n
                                                                //**4PS.en M25827

                                                                IF ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND
                                                                   ("Item Charge No." = '') AND
                                                                   ("No." = '')
                                                                THEN BEGIN
                                                                  GetUnitAmount(FIELDNO("Location Code"));
                                                                  "Unit Cost" := UnitCost;
                                                                  VALIDATE("Unit Amount");
                                                                  CheckItemAvailable(FIELDNO("Location Code"));
                                                                END;

                                                                IF "Entry Type" IN ["Entry Type"::Consumption,"Entry Type"::Output] THEN
                                                                  WhseValidateSourceLine.ItemLineVerifyChange(Rec,xRec);

                                                                IF "Location Code" <> xRec."Location Code" THEN BEGIN
                                                                  "Bin Code" := '';
                                                                  "Bin Code (Project Inventory)" := '';  //**4PS.n
                                                                  IF CurrFieldNo <> 0 THEN
                                                                    WMSManagement.CheckItemJnlLineFieldChange(Rec,xRec,FIELDCAPTION("Location Code"));
                                                                  IF ("Location Code" <> '') AND ("Item No." <> '') THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
                                                                      WMSManagement.GetDefaultBin("Item No.","Variant Code","Location Code","Bin Code");
                                                                    CheckDefaultBin;  //**4PS.n (db, 02-11-10)
                                                                  END;
                                                                  IF "Entry Type" = "Entry Type"::Transfer THEN BEGIN
                                                                    IF ("New Location Code" = '') THEN BEGIN //130619, kzwerver, n, #C005426
                                                                      "New Location Code" := "Location Code";
                                                                      "New Bin Code" := "Bin Code";
                                                                    END;
                                                                  END;
                                                                END;

                                                                VALIDATE("Unit of Measure Code");

                                                                ReserveItemJnlLine.VerifyChange(Rec,xRec);

                                                                //**4PS.sn
                                                                IF "Location Code" <> Location.Code THEN
                                                                  Location.GET("Location Code");
                                                                IF Location."Global Dimension 1 Code" <> '' THEN  //db, 04-11-13: C009243
                                                                  CreateDim(
                                                                    DATABASE::Job,"Job No.",
                                                                    DATABASE::"Service Order","Service Order No.",
                                                                    DATABASE::Item,"Item No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::"Work Center","Work Center No.",
                                                                    DATABASE::Location,"Location Code");

                                                                GetItem;
                                                                GetUnitPrice;
                                                                ValidateShelf;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 10  ;   ;Inventory Posting Group;Code10     ;TableRelation="Inventory Posting Group";
                                                   CaptionML=ENU=Inventory Posting Group;
                                                   Editable=No }
    { 11  ;   ;Source Posting Group;Code10        ;TableRelation=IF (Source Type=CONST(Customer)) "Customer Posting Group"
                                                                 ELSE IF (Source Type=CONST(Vendor)) "Vendor Posting Group"
                                                                 ELSE IF (Source Type=CONST(Item)) "Inventory Posting Group";
                                                   CaptionML=ENU=Source Posting Group;
                                                   Editable=No }
    { 13  ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                ItemJournalLine@1100528800 : Record 83;
                                                                CallWhseCheck@1000 : Boolean;
                                                                lvKeepCurrFieldNo@1100525000 : Integer;
                                                              BEGIN
                                                                IF ("Entry Type" <= "Entry Type"::Transfer) AND (Quantity <> 0) THEN
                                                                  TESTFIELD("Item No.");

                                                                //**4PS.sn
                                                                lvKeepCurrFieldNo := CurrFieldNo;
                                                                IF CurrFieldNo = FIELDNO(Quantity) THEN BEGIN
                                                                  TESTFIELD("Production Order", '');
                                                                  IF IsExistingJobOrServiceItemJlnLineQtyChanged THEN
                                                                    OldSrvOrJobItemJlnLineQuantity := xRec.Quantity;
                                                                END;
                                                                //**4PS.sn

                                                                IF NOT PhysInvtEntered THEN
                                                                  TESTFIELD("Phys. Inventory",FALSE);
                                                                CallWhseCheck :=
                                                                  ("Entry Type" = "Entry Type"::"Assembly Consumption") OR
                                                                  ("Entry Type" = "Entry Type"::Consumption) OR
                                                                  ("Entry Type" = "Entry Type"::Output) AND
                                                                  LastOutputOperation(Rec);
                                                                IF CallWhseCheck THEN
                                                                  WhseValidateSourceLine.ItemLineVerifyChange(Rec,xRec);

                                                                IF CurrFieldNo <> 0 THEN
                                                                  WMSManagement.CheckItemJnlLineFieldChange(Rec,xRec,FIELDCAPTION(Quantity));

                                                                "Quantity (Base)" := CalcBaseQty(Quantity);
                                                                IF ("Entry Type" = "Entry Type"::Output) AND
                                                                   ("Value Entry Type" <> "Value Entry Type"::Revaluation)
                                                                THEN
                                                                  "Invoiced Quantity" := 0
                                                                ELSE
                                                                  "Invoiced Quantity" := Quantity;
                                                                "Invoiced Qty. (Base)" := CalcBaseQty("Invoiced Quantity");

                                                                GetUnitAmount(FIELDNO(Quantity));
                                                                UpdateAmount;

                                                                CheckItemAvailable(FIELDNO(Quantity));

                                                                IF "Entry Type" = "Entry Type"::Transfer THEN BEGIN
                                                                  "Qty. (Calculated)" := 0;
                                                                  "Qty. (Phys. Inventory)" := 0;
                                                                  "Last Item Ledger Entry No." := 0;
                                                                END;

                                                                CALCFIELDS("Reserved Qty. (Base)");
                                                                IF ABS("Quantity (Base)") < ABS("Reserved Qty. (Base)") THEN
                                                                  ERROR(Text001,FIELDCAPTION("Reserved Qty. (Base)"));

                                                                IF Item."Item Tracking Code" <> '' THEN
                                                                  ReserveItemJnlLine.VerifyQuantity(Rec,xRec);

                                                                //**4PS.sn
                                                                "Quantity to Post" := CalcDefaultQuantityToPost;
                                                                UpdateRelatedQuantity(Quantity, xRec.Quantity, FALSE);

                                                                CalcOverheadSurcharge;

                                                                CurrFieldNo := lvKeepCurrFieldNo;
                                                                CheckItemEntrySales;
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 15  ;   ;Invoiced Quantity   ;Decimal       ;CaptionML=ENU=Invoiced Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 16  ;   ;Unit Amount         ;Decimal       ;OnValidate=BEGIN
                                                                UpdateAmount;
                                                                IF "Item No." <> '' THEN BEGIN
                                                                  IF "Value Entry Type" = "Value Entry Type"::Revaluation THEN
                                                                    "Unit Cost" := "Unit Amount"
                                                                  ELSE
                                                                    CASE "Entry Type" OF
                                                                      "Entry Type"::Purchase,
                                                                      "Entry Type"::"Positive Adjmt.",
                                                                      "Entry Type"::"Assembly Output":
                                                                        BEGIN
                                                                          IF "Entry Type" = "Entry Type"::"Positive Adjmt." THEN BEGIN
                                                                            GetItem;
                                                                            IF (CurrFieldNo = FIELDNO("Unit Amount")) AND
                                                                               (Item."Costing Method" = Item."Costing Method"::Standard)
                                                                            THEN
                                                                              ERROR(
                                                                                Text002,
                                                                                FIELDCAPTION("Unit Amount"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                          END;

                                                                          ReadGLSetup;
                                                                          IF "Entry Type" = "Entry Type"::Purchase THEN
                                                                            "Unit Cost" := "Unit Amount";
                                                                          IF "Entry Type" = "Entry Type"::"Positive Adjmt." THEN
                                                                            "Unit Cost" :=
                                                                              ROUND(
                                                                                "Unit Amount" * (1 + "Indirect Cost %" / 100),GLSetup."Unit-Amount Rounding Precision") +
                                                                              "Overhead Rate" * "Qty. per Unit of Measure";
                                                                          IF ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND
                                                                             ("Item Charge No." = '')
                                                                          THEN
                                                                            VALIDATE("Unit Cost");
                                                                        END;
                                                                      "Entry Type"::"Negative Adjmt.",
                                                                      "Entry Type"::Consumption,
                                                                      "Entry Type"::"Assembly Consumption":
                                                                        BEGIN
                                                                          GetItem;
                                                                          IF (CurrFieldNo = FIELDNO("Unit Amount")) AND
                                                                             (Item."Costing Method" = Item."Costing Method"::Standard)
                                                                          THEN
                                                                            ERROR(
                                                                              Text002,
                                                                              FIELDCAPTION("Unit Amount"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                          "Unit Cost" := "Unit Amount";
                                                                          IF ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND
                                                                             ("Item Charge No." = '')
                                                                          THEN
                                                                            VALIDATE("Unit Cost");
                                                                        END;
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Unit Amount;
                                                   AutoFormatType=2 }
    { 17  ;   ;Unit Cost           ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Item No.");
                                                                RetrieveCosts;
                                                                IF "Entry Type" IN ["Entry Type"::Purchase,"Entry Type"::"Positive Adjmt.","Entry Type"::Consumption] THEN BEGIN
                                                                  IF Item."Costing Method" = Item."Costing Method"::Standard THEN BEGIN
                                                                    IF CurrFieldNo = FIELDNO("Unit Cost") THEN
                                                                      ERROR(
                                                                        Text002,
                                                                        FIELDCAPTION("Unit Cost"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                    "Unit Cost" := ROUND(UnitCost * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");
                                                                  END;
                                                                END;

                                                                IF ("Item Charge No." = '') AND
                                                                   ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND
                                                                   (CurrFieldNo = FIELDNO("Unit Cost"))
                                                                THEN BEGIN
                                                                  CASE "Entry Type" OF
                                                                    "Entry Type"::Purchase:
                                                                      "Unit Amount" := "Unit Cost";
                                                                    "Entry Type"::"Positive Adjmt.",
                                                                    "Entry Type"::"Assembly Output":
                                                                      BEGIN
                                                                        ReadGLSetup;
                                                                        "Unit Amount" :=
                                                                          ROUND(
                                                                            ("Unit Cost" - "Overhead Rate" * "Qty. per Unit of Measure") / (1 + "Indirect Cost %" / 100),
                                                                            GLSetup."Unit-Amount Rounding Precision")
                                                                      END;
                                                                    "Entry Type"::"Negative Adjmt.",
                                                                    "Entry Type"::Consumption,
                                                                    "Entry Type"::"Assembly Consumption":
                                                                      BEGIN
                                                                        IF Item."Costing Method" = Item."Costing Method"::Standard THEN
                                                                          ERROR(
                                                                            Text002,
                                                                            FIELDCAPTION("Unit Cost"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                        "Unit Amount" := "Unit Cost";
                                                                      END;
                                                                  END;
                                                                  UpdateAmount;
                                                                END;

                                                                //**4PS.sn
                                                                //lItemJnlLine := Rec;   //** 4PS 15-06-2010 so
                                                                //CalcOverheadSurchargeOLD(lItemJnlLine);
                                                                //"Ovh.Surch.Expected Costs (LCY)" := lItemJnlLine."Ovh.Surch.Expected Costs (LCY)";   //** 4PS 15-06-2010 eo
                                                                CalcOverheadSurcharge; //** 4PS 15-06-2010
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=Unit Cost;
                                                   AutoFormatType=2 }
    { 18  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Quantity);
                                                                "Unit Amount" := Amount / Quantity;
                                                                VALIDATE("Unit Amount");
                                                                ReadGLSetup;
                                                                "Unit Amount" := ROUND("Unit Amount",GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Amount;
                                                   AutoFormatType=1 }
    { 22  ;   ;Discount Amount     ;Decimal       ;CaptionML=ENU=Discount Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 23  ;   ;Salespers./Purch. Code;Code10      ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=BEGIN
                                                                IF ("Order Type" <> "Order Type"::Production) OR ("Order No." = '') THEN
                                                                  CreateDim(
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::Job,"Job No.", //**4PS.n
                                                                    DATABASE::"Service Order","Service Order No.",   //** 4PS 09-06-2010
                                                                    DATABASE::Item,"Item No.",
                                                                    DATABASE::"Work Center","Work Center No.",
                                                                    DATABASE::Location,"Location Code"); //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Salespers./Purch. Code }
    { 26  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=ENU=Source Code;
                                                   Editable=No }
    { 29  ;   ;Applies-to Entry    ;Integer       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                                ItemTrackingLines@1001 : Page 6510;
                                                              BEGIN
                                                                IF "Applies-to Entry" <> 0 THEN BEGIN
                                                                  ItemLedgEntry.GET("Applies-to Entry");

                                                                  IF "Value Entry Type" = "Value Entry Type"::Revaluation THEN BEGIN
                                                                    IF "Inventory Value Per" <> "Inventory Value Per"::" " THEN
                                                                      ERROR(Text006,FIELDCAPTION("Applies-to Entry"));

                                                                    IF "Inventory Value Per" = "Inventory Value Per"::" " THEN
                                                                      IF NOT RevaluationPerEntryAllowed(Item."No.") THEN
                                                                        ERROR(Text034);

                                                                    InitRevalJnlLine(ItemLedgEntry);
                                                                    ItemLedgEntry.TESTFIELD(Positive,TRUE);
                                                                  END ELSE BEGIN
                                                                    TESTFIELD(Quantity);
                                                                    IF Signed(Quantity) * ItemLedgEntry.Quantity > 0 THEN BEGIN
                                                                      IF Quantity > 0 THEN
                                                                        FIELDERROR(Quantity,Text030);
                                                                      IF Quantity < 0 THEN
                                                                        FIELDERROR(Quantity,Text029);
                                                                    END;
                                                                    IF ItemLedgEntry.TrackingExists THEN
                                                                      ERROR(Text033,FIELDCAPTION("Applies-to Entry"),ItemTrackingLines.CAPTION);

                                                                    IF NOT ItemLedgEntry.Open THEN
                                                                      MESSAGE(Text032,"Applies-to Entry");

                                                                    IF "Entry Type" = "Entry Type"::Output THEN BEGIN
                                                                      ItemLedgEntry.TESTFIELD("Order Type","Order Type"::Production);
                                                                      ItemLedgEntry.TESTFIELD("Order No.","Order No.");
                                                                      ItemLedgEntry.TESTFIELD("Order Line No.","Order Line No.");
                                                                      ItemLedgEntry.TESTFIELD("Entry Type","Entry Type");
                                                                    END;
                                                                  END;

                                                                  "Location Code" := ItemLedgEntry."Location Code";
                                                                  "Variant Code" := ItemLedgEntry."Variant Code";
                                                                END ELSE BEGIN
                                                                  IF "Value Entry Type" = "Value Entry Type"::Revaluation THEN BEGIN
                                                                    VALIDATE("Unit Amount",0);
                                                                    VALIDATE(Quantity,0);
                                                                    "Inventory Value (Calculated)" := 0;
                                                                    "Inventory Value (Revalued)" := 0;
                                                                    "Location Code" := '';
                                                                    "Variant Code" := '';
                                                                    "Bin Code" := '';
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Applies-to Entry"));
                                                            END;

                                                   CaptionML=ENU=Applies-to Entry }
    { 32  ;   ;Item Shpt. Entry No.;Integer       ;CaptionML=ENU=Item Shpt. Entry No.;
                                                   Editable=No }
    { 34  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                //**4PS.sn
                                                                //CheckCompanyIC;  **4Ps.o cal 16467
                                                                DimValRec.CHANGECOMPANY(COMPANYNAME);  //**4PS.n cal 16467
                                                                IF "Shortcut Dimension 1 Code" <> '' THEN
                                                                  DimMgt.GetDimValueRec(1, "Shortcut Dimension 1 Code", DimValRec, TRUE,'');
                                                                //**4PS.en

                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS.sn
                                                              //CheckCompanyIC;  **4Ps.o cal 16467
                                                              DimValRec.CHANGECOMPANY(COMPANYNAME);  //**4PS.n cal 16467
                                                              DimValRec.RESET;
                                                              DimValRec.Code := "Shortcut Dimension 1 Code";
                                                              DimValRec.SETRANGE("Global Dimension No.", 1);
                                                              IF PAGE.RUNMODAL(0, DimValRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Shortcut Dimension 1 Code", DimValRec.Code);
                                                              //**4PS.en
                                                            END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 35  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation=IF (Receiving Company=FILTER('')) "Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                //**4PS.sn
                                                                CheckCompanyIC;
                                                                IF "Shortcut Dimension 2 Code" <> '' THEN BEGIN
                                                                  DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimValRec, TRUE,'');
                                                                  IF DimValRec."Cost Type" < DimValRec."Cost Type"::Revenue THEN
                                                                    "Cost Type" := DimValRec."Cost Type"+1
                                                                  ELSE
                                                                    "Cost Type" := "Cost Type"::" ";
                                                                  CheckAdditionalCostService;  //db, 24-02-10
                                                                  "Cost Component" := DimValRec."Cost Component";
                                                                  CheckCostCompServOrderType;
                                                                END ELSE BEGIN
                                                                  "Cost Type" := "Cost Type"::" ";
                                                                END;
                                                                //**4PS.en
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");

                                                                //**4PS.sn
                                                                IF "Shortcut Dimension 2 Code" <> '' THEN BEGIN
                                                                  IF (DimValRec.Element <> '') AND ("Job No." <> '') THEN
                                                                    VALIDATE(Element, DimValRec.Element);
                                                                END;
                                                                //**4PS.en

                                                                //**4PS.sn C007769
                                                                IF ("Shortcut Dimension 2 Code" <> xRec."Shortcut Dimension 2 Code") AND
                                                                   ("FSC Type Code" = '')
                                                                THEN
                                                                  FillDefaultFscType;
                                                                //**4PS.en
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS.sn
                                                              CheckCompanyIC;
                                                              DimValRec.RESET;
                                                              DimValRec.Code := "Shortcut Dimension 2 Code";
                                                              DimValRec.SETRANGE("Global Dimension No.", 2);
                                                              DimValRec.SETRANGE("Project Filter", "Job No.");
                                                              IF "Receiving Company" = '' THEN
                                                                DimValRec.SETRANGE("Company Filter")
                                                              ELSE
                                                                DimValRec.SETRANGE("Company Filter", "Receiving Company");
                                                              IF PAGE.RUNMODAL(PAGE::"Cost Object List", DimValRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Shortcut Dimension 2 Code", DimValRec.Code);
                                                              //**4PS.en
                                                            END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 37  ;   ;Indirect Cost %     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Item No.");
                                                                TESTFIELD("Value Entry Type","Value Entry Type"::"Direct Cost");
                                                                TESTFIELD("Item Charge No.",'');
                                                                IF "Entry Type" IN ["Entry Type"::Sale,"Entry Type"::"Negative Adjmt."] THEN
                                                                  ERROR(
                                                                    Text002,
                                                                    FIELDCAPTION("Indirect Cost %"),FIELDCAPTION("Entry Type"),"Entry Type");

                                                                GetItem;
                                                                IF Item."Costing Method" = Item."Costing Method"::Standard THEN
                                                                  ERROR(
                                                                    Text002,
                                                                    FIELDCAPTION("Indirect Cost %"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");

                                                                IF "Entry Type" <> "Entry Type"::Purchase THEN
                                                                  "Unit Cost" :=
                                                                    ROUND(
                                                                      "Unit Amount" * (1 + "Indirect Cost %" / 100) +
                                                                      "Overhead Rate" * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Indirect Cost %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 39  ;   ;Source Type         ;Option        ;CaptionML=ENU=Source Type;
                                                   OptionCaptionML=ENU=" ,Customer,Vendor,Item";
                                                   OptionString=[ ,Customer,Vendor,Item];
                                                   Editable=No }
    { 41  ;   ;Journal Batch Name  ;Code10        ;TableRelation="Item Journal Batch".Name WHERE (Journal Template Name=FIELD(Journal Template Name));
                                                   CaptionML=ENU=Journal Batch Name }
    { 42  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 43  ;   ;Recurring Method    ;Option        ;CaptionML=ENU=Recurring Method;
                                                   OptionCaptionML=ENU=,Fixed,Variable;
                                                   OptionString=,Fixed,Variable;
                                                   BlankZero=Yes }
    { 44  ;   ;Expiration Date     ;Date          ;CaptionML=ENU=Expiration Date }
    { 45  ;   ;Recurring Frequency ;DateFormula   ;CaptionML=ENU=Recurring Frequency }
    { 46  ;   ;Drop Shipment       ;Boolean       ;AccessByPermission=TableData 223=R;
                                                   CaptionML=ENU=Drop Shipment;
                                                   Editable=No }
    { 47  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=ENU=Transaction Type }
    { 48  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=ENU=Transport Method }
    { 49  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region Code }
    { 50  ;   ;New Location Code   ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Entry Type","Entry Type"::Transfer);
                                                                IF "New Location Code" <> xRec."New Location Code" THEN BEGIN
                                                                  "New Bin Code" := '';
                                                                  IF ("New Location Code" <> '') AND ("Item No." <> '') THEN BEGIN
                                                                    GetLocation("New Location Code");
                                                                    IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
                                                                      WMSManagement.GetDefaultBin("Item No.","Variant Code","New Location Code","New Bin Code");
                                                                  END;
                                                                END;

                                                                ReserveItemJnlLine.VerifyChange(Rec,xRec);

                                                                //**4PS.sn
                                                                IF "New Location Code" <> Location.Code THEN
                                                                  Location.GET("New Location Code");
                                                                IF Location."Global Dimension 1 Code" <> '' THEN  //db, 04-11-13: C009243
                                                                  IF "Job No." + "Service Order No." = '' THEN
                                                                    VALIDATE("New Shortcut Dimension 1 Code", Location."Global Dimension 1 Code");
                                                                //**4PS.en
                                                              END;

                                                   CaptionML=ENU=New Location Code }
    { 51  ;   ;New Shortcut Dimension 1 Code;Code20;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Entry Type","Entry Type"::Transfer);
                                                                ValidateNewShortcutDimCode(1,"New Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=New Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1,' + Text007 }
    { 52  ;   ;New Shortcut Dimension 2 Code;Code20;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Project Filter=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Entry Type","Entry Type"::Transfer);
                                                                ValidateNewShortcutDimCode(2,"New Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=New Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2,' + Text007 }
    { 53  ;   ;Qty. (Calculated)   ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Qty. (Phys. Inventory)");
                                                              END;

                                                   CaptionML=ENU=Qty. (Calculated);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 54  ;   ;Qty. (Phys. Inventory);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Phys. Inventory",TRUE);

                                                                IF CurrFieldNo <> 0 THEN
                                                                  WMSManagement.CheckItemJnlLineFieldChange(Rec,xRec,FIELDCAPTION("Qty. (Phys. Inventory)"));

                                                                //**4PS.sn
                                                                IF CurrFieldNo = FIELDNO("Qty. (Phys. Inventory)") THEN
                                                                  IF "Qty. (Phys. Inventory)" < 0 THEN
                                                                    FIELDERROR("Qty. (Phys. Inventory)");  //db, 21-08-12: W013509
                                                                //**4PS.en

                                                                PhysInvtEntered := TRUE;
                                                                Quantity := 0;
                                                                IF "Qty. (Phys. Inventory)" >= "Qty. (Calculated)" THEN BEGIN
                                                                  VALIDATE("Entry Type","Entry Type"::"Positive Adjmt.");
                                                                  VALIDATE(Quantity,"Qty. (Phys. Inventory)" - "Qty. (Calculated)");
                                                                END ELSE BEGIN
                                                                  VALIDATE("Entry Type","Entry Type"::"Negative Adjmt.");
                                                                  VALIDATE(Quantity,"Qty. (Calculated)" - "Qty. (Phys. Inventory)");
                                                                END;
                                                                PhysInvtEntered := FALSE;
                                                              END;

                                                   CaptionML=ENU=Qty. (Phys. Inventory);
                                                   DecimalPlaces=0:5 }
    { 55  ;   ;Last Item Ledger Entry No.;Integer ;TableRelation="Item Ledger Entry";
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Last Item Ledger Entry No.;
                                                   Editable=No }
    { 56  ;   ;Phys. Inventory     ;Boolean       ;CaptionML=ENU=Phys. Inventory;
                                                   Editable=No }
    { 57  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 58  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 59  ;   ;Entry/Exit Point    ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=ENU=Entry/Exit Point }
    { 60  ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date }
    { 62  ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No. }
    { 63  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=ENU=Area }
    { 64  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=ENU=Transaction Specification }
    { 65  ;   ;Posting No. Series  ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Posting No. Series }
    { 68  ;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Journal Template Name),
                                                                                                       Source Ref. No.=FIELD(Line No.),
                                                                                                       Source Type=CONST(83),
                                                                                                       Source Subtype=FIELD(Entry Type),
                                                                                                       Source Batch Name=FIELD(Journal Batch Name),
                                                                                                       Source Prod. Order Line=CONST(0),
                                                                                                       Reservation Status=CONST(Reservation)));
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Reserved Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 72  ;   ;Unit Cost (ACY)     ;Decimal       ;CaptionML=ENU=Unit Cost (ACY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 73  ;   ;Source Currency Code;Code10        ;TableRelation=Currency;
                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=ENU=Source Currency Code;
                                                   Editable=No }
    { 79  ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=" ,Sales Shipment,Sales Invoice,Sales Return Receipt,Sales Credit Memo,Purchase Receipt,Purchase Invoice,Purchase Return Shipment,Purchase Credit Memo,Transfer Shipment,Transfer Receipt,Service Shipment,Service Invoice,Service Credit Memo,Posted Assembly";
                                                   OptionString=[ ,Sales Shipment,Sales Invoice,Sales Return Receipt,Sales Credit Memo,Purchase Receipt,Purchase Invoice,Purchase Return Shipment,Purchase Credit Memo,Transfer Shipment,Transfer Receipt,Service Shipment,Service Invoice,Service Credit Memo,Posted Assembly] }
    { 80  ;   ;Document Line No.   ;Integer       ;CaptionML=ENU=Document Line No. }
    { 90  ;   ;Order Type          ;Option        ;OnValidate=BEGIN
                                                                IF "Order Type" = xRec."Order Type" THEN
                                                                  EXIT;
                                                                VALIDATE("Order No.",'');
                                                                "Order Line No." := 0;
                                                              END;

                                                   CaptionML=ENU=Order Type;
                                                   OptionCaptionML=ENU=" ,Production,Transfer,Service,Assembly";
                                                   OptionString=[ ,Production,Transfer,Service,Assembly];
                                                   Editable=No }
    { 91  ;   ;Order No.           ;Code20        ;TableRelation=IF (Order Type=CONST(Production)) "Production Order".No. WHERE (Status=CONST(Released));
                                                   OnValidate=VAR
                                                                AssemblyHeader@1000 : Record 900;
                                                                ProdOrder@1001 : Record 5405;
                                                                ProdOrderLine@1002 : Record 5406;
                                                              BEGIN
                                                                CASE "Order Type" OF
                                                                  "Order Type"::Production,"Order Type"::Assembly:
                                                                    BEGIN
                                                                      IF "Order No." = '' THEN BEGIN
                                                                        CASE "Order Type" OF
                                                                          "Order Type"::Production:
                                                                            CreateProdDim;
                                                                          "Order Type"::Assembly:
                                                                            CreateAssemblyDim;
                                                                        END;
                                                                        EXIT;
                                                                      END;

                                                                      CASE "Order Type" OF
                                                                        "Order Type"::Production:
                                                                          BEGIN
                                                                            GetMfgSetup;
                                                                            IF MfgSetup."Doc. No. Is Prod. Order No." THEN
                                                                              "Document No." := "Order No.";
                                                                            ProdOrder.GET(ProdOrder.Status::Released,"Order No.");
                                                                            ProdOrder.TESTFIELD(Blocked,FALSE);
                                                                            Description := ProdOrder.Description;
                                                                          END;
                                                                        "Order Type"::Assembly:
                                                                          BEGIN
                                                                            AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,"Order No.");
                                                                            Description := AssemblyHeader.Description;
                                                                          END;
                                                                      END;

                                                                      "Gen. Bus. Posting Group" := '';
                                                                      CASE TRUE OF
                                                                        "Entry Type" = "Entry Type"::Output:
                                                                          BEGIN
                                                                            "Inventory Posting Group" := ProdOrder."Inventory Posting Group";
                                                                            "Gen. Prod. Posting Group" := ProdOrder."Gen. Prod. Posting Group";
                                                                          END;
                                                                        "Entry Type" = "Entry Type"::"Assembly Output":
                                                                          BEGIN
                                                                            "Inventory Posting Group" := AssemblyHeader."Inventory Posting Group";
                                                                            "Gen. Prod. Posting Group" := AssemblyHeader."Gen. Prod. Posting Group";
                                                                          END;
                                                                        "Entry Type" = "Entry Type"::Consumption:
                                                                          BEGIN
                                                                            ProdOrderLine.SetFilterByReleasedOrderNo("Order No.");
                                                                            IF ProdOrderLine.COUNT = 1 THEN BEGIN
                                                                              ProdOrderLine.FINDFIRST;
                                                                              VALIDATE("Order Line No.",ProdOrderLine."Line No.");
                                                                            END;
                                                                          END;
                                                                      END;

                                                                      IF ("Order No." <> xRec."Order No.") OR ("Order Type" <> xRec."Order Type") THEN
                                                                        CASE "Order Type" OF
                                                                          "Order Type"::Production:
                                                                            CreateProdDim;
                                                                          "Order Type"::Assembly:
                                                                            CreateAssemblyDim;
                                                                        END;
                                                                    END;
                                                                  "Order Type"::Transfer,"Order Type"::Service,"Order Type"::" ":
                                                                    ERROR(Text002,FIELDCAPTION("Order No."),FIELDCAPTION("Order Type"),"Order Type");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Order No. }
    { 92  ;   ;Order Line No.      ;Integer       ;TableRelation=IF (Order Type=CONST(Production)) "Prod. Order Line"."Line No." WHERE (Status=CONST(Released),
                                                                                                                                        Prod. Order No.=FIELD(Order No.));
                                                   OnValidate=VAR
                                                                ProdOrderLine@1000 : Record 5406;
                                                              BEGIN
                                                                TESTFIELD("Order No.");
                                                                CASE "Order Type" OF
                                                                  "Order Type"::Production,"Order Type"::Assembly:
                                                                    BEGIN
                                                                      IF "Order Type" = "Order Type"::Production THEN BEGIN
                                                                        ProdOrderLine.SetFilterByReleasedOrderNo("Order No.");
                                                                        ProdOrderLine.SETRANGE("Line No.","Order Line No.");
                                                                        IF ProdOrderLine.FINDFIRST THEN BEGIN
                                                                          "Source Type" := "Source Type"::Item;
                                                                          "Source No." := ProdOrderLine."Item No.";
                                                                          "Order Line No." := ProdOrderLine."Line No.";
                                                                          "Routing No." := ProdOrderLine."Routing No.";
                                                                          "Routing Reference No." := ProdOrderLine."Routing Reference No.";
                                                                        END;
                                                                      END;

                                                                      IF "Order Line No." <> xRec."Order Line No." THEN
                                                                        CASE "Order Type" OF
                                                                          "Order Type"::Production:
                                                                            CreateProdDim;
                                                                          "Order Type"::Assembly:
                                                                            CreateAssemblyDim;
                                                                        END;
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Order Line No. }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=No }
    { 481 ;   ;New Dimension Set ID;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=New Dimension Set ID;
                                                   Editable=No }
    { 904 ;   ;Assemble to Order   ;Boolean       ;CaptionML=ENU=Assemble to Order;
                                                   Editable=No }
    { 1000;   ;Job No.             ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) Job.No.;
                                                   OnValidate=VAR
                                                                lvBlockingCodeRec@1100485000 : Record 11012027;
                                                              BEGIN
                                                                //**4PS
                                                                CheckItemEntrySales;

                                                                CheckCompanyIC;
                                                                IF "Job No." <> '' THEN BEGIN
                                                                  IF ("Entry Type" IN ["Entry Type"::"Positive Adjmt.", "Entry Type"::"Negative Adjmt."]) THEN
                                                                    TESTFIELD("Job No.",'');
                                                                  TESTFIELD("Plant Type",'');
                                                                  TESTFIELD("Delivery Account No.", '');
                                                                  TESTFIELD("To Plant Inventory", FALSE);
                                                                  ProjRec.GET("Job No.");
                                                                  "Main Project No." := ProjRec."Main Project";
                                                                  IF "Project Stock" THEN BEGIN
                                                                    InventorySetup.GET;
                                                                    IF NOT InventorySetup.JobInventoryByStockRelease("Job No.") THEN
                                                                      "Project Stock" := FALSE;
                                                                  END;
                                                                  IF(ProjRec."Blocking Code" <> '') AND
                                                                     ((ProjRec."Project Status" = ProjRec."Project Status"::"Technical Finished") OR
                                                                      (ProjRec."Project Status" = ProjRec."Project Status"::"Administrative Finished") OR
                                                                      ((ProjRec."Project Status" = ProjRec."Project Status"::Finished) AND ICProjSetupRec."Provisions at Closure")
                                                                     ) THEN
                                                                  BEGIN
                                                                    lvBlockingCodeRec.CheckBlocked(ProjRec."Blocking Code", lvBlockingCodeRec.Switch::"Stock Order", ProjRec, TRUE);
                                                                  END ELSE BEGIN
                                                                    IF (ICProjSetupRec."Provisions at Closure") THEN
                                                                      ProjRec.CheckProjectStatus(-1)
                                                                    ELSE
                                                                      ProjRec.CheckProjectStatus(1);
                                                                  END;
                                                                END ELSE BEGIN
                                                                  "Main Project No." := '';
                                                                  "Rental Unit" := '';
                                                                  IF "Project Stock" THEN
                                                                    "Project Stock" := FALSE;
                                                                END;

                                                                VALIDATE("Ship To Location");
                                                                VALIDATE(Element);

                                                                IF "Item No." <> '' THEN
                                                                  GetUnitPrice;

                                                                IF ("Shortcut Dimension 1 Code" <> '') AND ("Job No." <> '') AND
                                                                   (CurrFieldNo = FIELDNO("Job No.")) AND ("Job No." <> xRec."Job No.") THEN
                                                                  "Shortcut Dimension 1 Code" := '';

                                                                CreateDim(
                                                                  DATABASE::Job,"Job No.", //**4PS.n
                                                                  DATABASE::"Service Order","Service Order No.",   //** 4PS 09-06-2010
                                                                  DATABASE::Item,"Item No.",
                                                                  DATABASE::"Work Center","Work Center No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Location,"Location Code"); //**4PS.n

                                                                SetProjectStock; //**4PS.n

                                                                ClearEditableAssemYardNoFields; //**4PS.n

                                                                ReserveItemJnlLine.VerifyChange(Rec,xRec); //**4PS.n DP00121

                                                                //**4PS.sn C007769
                                                                IF ("Job No." <> xRec."Job No.") AND
                                                                   ("FSC Type Code" = '')
                                                                THEN
                                                                  FillDefaultFscType;
                                                                //**4PS.en
                                                              END;

                                                   OnLookup=VAR
                                                              PageNo@1100525000 : Integer;
                                                            BEGIN
                                                              //**4PS
                                                              CheckCompanyIC;
                                                              ProjRec."No." := "Job No.";
                                                              IF RefersToOtherCompany THEN
                                                                PageNo := PAGE::"Job List IC";
                                                              IF PAGE.RUNMODAL(PageNo, ProjRec) = ACTION::LookupOK THEN
                                                                IF ("Service Order No." = '') THEN
                                                                  VALIDATE("Job No.", ProjRec."No.");
                                                            END;

                                                   CaptionML=ENU=Job No.;
                                                   Description=4PS: Table Relation changed }
    { 1001;   ;Job Task No.        ;Code20        ;CaptionML=ENU=Job Task No. }
    { 1002;   ;Job Purchase        ;Boolean       ;CaptionML=ENU=Job Purchase }
    { 1030;   ;Job Contract Entry No.;Integer     ;CaptionML=ENU=Job Contract Entry No.;
                                                   Editable=No }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                IF "Entry Type" IN ["Entry Type"::Consumption,"Entry Type"::Output] THEN
                                                                  WhseValidateSourceLine.ItemLineVerifyChange(Rec,xRec);

                                                                IF "Variant Code" <> xRec."Variant Code" THEN BEGIN
                                                                  "Bin Code" := '';
                                                                  "Bin Code (Project Inventory)" := '';  //**4PS.n
                                                                  IF CurrFieldNo <> 0 THEN
                                                                    WMSManagement.CheckItemJnlLineFieldChange(Rec,xRec,FIELDCAPTION("Variant Code"));
                                                                  IF ("Location Code" <> '') AND ("Item No." <> '') THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
                                                                      WMSManagement.GetDefaultBin("Item No.","Variant Code","Location Code","Bin Code");
                                                                    CheckDefaultBin;  //**4PS.n (db, 02-11-10)
                                                                  END;
                                                                  IF ("Entry Type" = "Entry Type"::Transfer) AND ("Location Code" = "New Location Code") THEN
                                                                    "New Bin Code" := "Bin Code";
                                                                END;
                                                                IF ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND
                                                                   ("Item Charge No." = '')
                                                                THEN BEGIN
                                                                  GetUnitAmount(FIELDNO("Variant Code"));
                                                                  "Unit Cost" := UnitCost;
                                                                  VALIDATE("Unit Amount");
                                                                  VALIDATE("Unit of Measure Code");
                                                                  ReserveItemJnlLine.VerifyChange(Rec,xRec);
                                                                END;

                                                                IF "Variant Code" <> '' THEN BEGIN
                                                                  ItemVariant.GET("Item No.","Variant Code");
                                                                  Description := ItemVariant.Description;
                                                                END ELSE BEGIN
                                                                  GetItem;
                                                                  Description := Item.Description;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=IF (Entry Type=FILTER(Purchase|Positive Adjmt.|Output),
                                                                     Quantity=FILTER(>=0)) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                           Item Filter=FIELD(Item No.),
                                                                                                           Variant Filter=FIELD(Variant Code))
                                                                                                           ELSE IF (Entry Type=FILTER(Purchase|Positive Adjmt.|Output),
                                                                                                                    Quantity=FILTER(<0)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                         Item No.=FIELD(Item No.),
                                                                                                                                                                         Variant Code=FIELD(Variant Code))
                                                                                                                                                                         ELSE IF (Entry Type=FILTER(Sale|Negative Adjmt.|Transfer|Consumption),
                                                                                                                                                                                  Quantity=FILTER(>0)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                                                                                       Item No.=FIELD(Item No.),
                                                                                                                                                                                                                                       Variant Code=FIELD(Variant Code))
                                                                                                                                                                                                                                       ELSE IF (Entry Type=FILTER(Sale|Negative Adjmt.|Transfer|Consumption),
                                                                                                                                                                                                                                                Quantity=FILTER(<=0)) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                                                                                                                                      Item Filter=FIELD(Item No.),
                                                                                                                                                                                                                                                                                      Variant Filter=FIELD(Variant Code));
                                                   OnValidate=VAR
                                                                ProdOrderComp@1001 : Record 5407;
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                IF "Bin Code" <> xRec."Bin Code" THEN BEGIN
                                                                  TESTFIELD("Location Code");
                                                                  IF "Bin Code" <> '' THEN BEGIN
                                                                    GetBin("Location Code","Bin Code");
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    IF CurrFieldNo <> 0 THEN
                                                                      WMSManagement.CheckItemJnlLineFieldChange(Rec,xRec,FIELDCAPTION("Bin Code"));
                                                                    TESTFIELD("Location Code",Bin."Location Code");
                                                                    WhseIntegrationMgt.CheckBinTypeCode(DATABASE::"Item Journal Line",
                                                                      FIELDCAPTION("Bin Code"),
                                                                      "Location Code",
                                                                      "Bin Code",
                                                                      "Entry Type");
                                                                  END;
                                                                  IF ("Entry Type" = "Entry Type"::Transfer) AND ("Location Code" = "New Location Code") THEN
                                                                    "New Bin Code" := "Bin Code";

                                                                  IF ("Entry Type" = "Entry Type"::Consumption) AND
                                                                     ("Bin Code" <> '') AND ("Prod. Order Comp. Line No." <> 0)
                                                                  THEN BEGIN
                                                                    TESTFIELD("Order Type","Order Type"::Production);
                                                                    TESTFIELD("Order No.");
                                                                    ProdOrderComp.GET(ProdOrderComp.Status::Released,"Order No.","Order Line No.","Prod. Order Comp. Line No.");
                                                                    IF (ProdOrderComp."Bin Code" <> '') AND (ProdOrderComp."Bin Code" <> "Bin Code") THEN
                                                                      IF NOT CONFIRM(
                                                                           Text021,
                                                                           FALSE,
                                                                           "Bin Code",
                                                                           ProdOrderComp."Bin Code",
                                                                           "Order No.")
                                                                      THEN
                                                                        ERROR(Text012);
                                                                  END;
                                                                END;

                                                                ReserveItemJnlLine.VerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=ENU=Bin Code }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5406;   ;New Bin Code        ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(New Location Code),
                                                                                 Item Filter=FIELD(Item No.),
                                                                                 Variant Filter=FIELD(Variant Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                TESTFIELD("Entry Type","Entry Type"::Transfer);
                                                                IF "New Bin Code" <> xRec."New Bin Code" THEN BEGIN
                                                                  TESTFIELD("New Location Code");
                                                                  IF "New Bin Code" <> '' THEN BEGIN
                                                                    GetBin("New Location Code","New Bin Code");
                                                                    GetLocation("New Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    IF CurrFieldNo <> 0 THEN
                                                                      WMSManagement.CheckItemJnlLineFieldChange(Rec,xRec,FIELDCAPTION("New Bin Code"));
                                                                    TESTFIELD("New Location Code",Bin."Location Code");
                                                                    WhseIntegrationMgt.CheckBinTypeCode(DATABASE::"Item Journal Line",
                                                                      FIELDCAPTION("New Bin Code"),
                                                                      "New Location Code",
                                                                      "New Bin Code",
                                                                      "Entry Type");
                                                                  END;
                                                                END;

                                                                ReserveItemJnlLine.VerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=ENU=New Bin Code }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF CurrFieldNo = FIELDNO("Unit of Measure Code") THEN
                                                                  TESTFIELD("Production Order", '');
                                                                //**4PS.en

                                                                GetItem;
                                                                "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");

                                                                IF "Entry Type" IN ["Entry Type"::Consumption,"Entry Type"::Output] THEN
                                                                  WhseValidateSourceLine.ItemLineVerifyChange(Rec,xRec);
                                                                IF CurrFieldNo <> 0 THEN
                                                                  WMSManagement.CheckItemJnlLineFieldChange(Rec,xRec,FIELDCAPTION("Unit of Measure Code"));

                                                                GetUnitAmount(FIELDNO("Unit of Measure Code"));
                                                                IF "Value Entry Type" = "Value Entry Type"::Revaluation THEN
                                                                  TESTFIELD("Qty. per Unit of Measure",1);

                                                                ReadGLSetup;
                                                                "Unit Cost" := ROUND(UnitCost * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");

                                                                IF "Entry Type" = "Entry Type"::Consumption THEN BEGIN
                                                                  "Indirect Cost %" := ROUND(Item."Indirect Cost %" * "Qty. per Unit of Measure",1);
                                                                  "Overhead Rate" :=
                                                                    ROUND(Item."Overhead Rate" * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");
                                                                  "Unit Amount" := ROUND(UnitCost * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");
                                                                END;

                                                                IF "No." <> '' THEN
                                                                  VALIDATE("Cap. Unit of Measure Code");

                                                                VALIDATE("Unit Amount");

                                                                IF "Entry Type" = "Entry Type"::Output THEN BEGIN
                                                                  VALIDATE("Output Quantity");
                                                                  VALIDATE("Scrap Quantity");
                                                                END ELSE
                                                                  VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 5408;   ;Derived from Blanket Order;Boolean ;CaptionML=ENU=Derived from Blanket Order;
                                                   Description=[4PS: Raam  -> Afroep  ];
                                                   Editable=No }
    { 5413;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                              END;

                                                   CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 5415;   ;Invoiced Qty. (Base);Decimal       ;CaptionML=ENU=Invoiced Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5468;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Journal Template Name),
                                                                                                                Source Ref. No.=FIELD(Line No.),
                                                                                                                Source Type=CONST(83),
                                                                                                                Source Subtype=FIELD(Entry Type),
                                                                                                                Source Batch Name=FIELD(Journal Batch Name),
                                                                                                                Source Prod. Order Line=CONST(0),
                                                                                                                Reservation Status=CONST(Reservation)));
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Reserved Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5560;   ;Level               ;Integer       ;CaptionML=ENU=Level;
                                                   Editable=No }
    { 5561;   ;Flushing Method     ;Option        ;CaptionML=ENU=Flushing Method;
                                                   OptionCaptionML=ENU=Manual,Forward,Backward,Pick + Forward,Pick + Backward;
                                                   OptionString=Manual,Forward,Backward,Pick + Forward,Pick + Backward;
                                                   Editable=No }
    { 5562;   ;Changed by User     ;Boolean       ;CaptionML=ENU=Changed by User;
                                                   Editable=No }
    { 5700;   ;Cross-Reference No. ;Code20        ;CaptionML=ENU=Cross-Reference No. }
    { 5701;   ;Originally Ordered No.;Code20      ;TableRelation=Item;
                                                   AccessByPermission=TableData 5715=R;
                                                   CaptionML=ENU=Originally Ordered No. }
    { 5702;   ;Originally Ordered Var. Code;Code10;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Originally Ordered No.));
                                                   AccessByPermission=TableData 5715=R;
                                                   CaptionML=ENU=Originally Ordered Var. Code }
    { 5703;   ;Out-of-Stock Substitution;Boolean  ;CaptionML=ENU=Out-of-Stock Substitution }
    { 5704;   ;Item Category Code  ;Code10        ;TableRelation="Item Category";
                                                   CaptionML=ENU=Item Category Code }
    { 5705;   ;Nonstock            ;Boolean       ;CaptionML=ENU=Nonstock }
    { 5706;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=ENU=Purchasing Code }
    { 5707;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=ENU=Product Group Code }
    { 5791;   ;Planned Delivery Date;Date         ;CaptionML=ENU=Planned Delivery Date }
    { 5793;   ;Order Date          ;Date          ;CaptionML=ENU=Order Date }
    { 5800;   ;Value Entry Type    ;Option        ;CaptionML=ENU=Value Entry Type;
                                                   OptionCaptionML=ENU=Direct Cost,Revaluation,Rounding,Indirect Cost,Variance;
                                                   OptionString=Direct Cost,Revaluation,Rounding,Indirect Cost,Variance }
    { 5801;   ;Item Charge No.     ;Code20        ;TableRelation="Item Charge";
                                                   CaptionML=ENU=Item Charge No. }
    { 5802;   ;Inventory Value (Calculated);Decimal;
                                                   OnValidate=BEGIN
                                                                ReadGLSetup;
                                                                "Unit Cost (Calculated)" :=
                                                                  ROUND("Inventory Value (Calculated)" / Quantity,GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Inventory Value (Calculated);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5803;   ;Inventory Value (Revalued);Decimal ;OnValidate=BEGIN
                                                                TESTFIELD("Value Entry Type","Value Entry Type"::Revaluation);
                                                                VALIDATE(Amount,"Inventory Value (Revalued)" - "Inventory Value (Calculated)");
                                                                ReadGLSetup;
                                                                IF ("Unit Cost (Revalued)" <> xRec."Unit Cost (Revalued)") OR
                                                                   ("Inventory Value (Revalued)" <> xRec."Inventory Value (Revalued)")
                                                                THEN BEGIN
                                                                  IF CurrFieldNo <> FIELDNO("Unit Cost (Revalued)") THEN
                                                                    "Unit Cost (Revalued)" :=
                                                                      ROUND("Inventory Value (Revalued)" / Quantity,GLSetup."Unit-Amount Rounding Precision");

                                                                  IF CurrFieldNo <> 0 THEN
                                                                    ClearSingleAndRolledUpCosts;
                                                                END
                                                              END;

                                                   CaptionML=ENU=Inventory Value (Revalued);
                                                   MinValue=0;
                                                   AutoFormatType=1 }
    { 5804;   ;Variance Type       ;Option        ;CaptionML=ENU=Variance Type;
                                                   OptionCaptionML=ENU=" ,Purchase,Material,Capacity,Capacity Overhead,Manufacturing Overhead";
                                                   OptionString=[ ,Purchase,Material,Capacity,Capacity Overhead,Manufacturing Overhead] }
    { 5805;   ;Inventory Value Per ;Option        ;CaptionML=ENU=Inventory Value Per;
                                                   OptionCaptionML=ENU=" ,Item,Location,Variant,Location and Variant";
                                                   OptionString=[ ,Item,Location,Variant,Location and Variant];
                                                   Editable=No }
    { 5806;   ;Partial Revaluation ;Boolean       ;CaptionML=ENU=Partial Revaluation;
                                                   Editable=No }
    { 5807;   ;Applies-from Entry  ;Integer       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                                ItemTrackingLines@1001 : Page 6510;
                                                              BEGIN
                                                                IF "Applies-from Entry" <> 0 THEN BEGIN
                                                                  TESTFIELD(Quantity);
                                                                  IF Signed(Quantity) < 0 THEN BEGIN
                                                                    IF Quantity > 0 THEN
                                                                      FIELDERROR(Quantity,Text030);
                                                                    IF Quantity < 0 THEN
                                                                      FIELDERROR(Quantity,Text029);
                                                                  END;
                                                                  ItemLedgEntry.GET("Applies-from Entry");
                                                                  ItemLedgEntry.TESTFIELD(Positive,FALSE);
                                                                  IF ItemLedgEntry.TrackingExists THEN
                                                                    ERROR(Text033,FIELDCAPTION("Applies-from Entry"),ItemTrackingLines.CAPTION);
                                                                  "Unit Cost" := CalcUnitCost(ItemLedgEntry);
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Applies-from Entry"));
                                                            END;

                                                   CaptionML=ENU=Applies-from Entry;
                                                   MinValue=0 }
    { 5808;   ;Invoice No.         ;Code20        ;CaptionML=ENU=Invoice No. }
    { 5809;   ;Unit Cost (Calculated);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Value Entry Type","Value Entry Type"::Revaluation);
                                                              END;

                                                   CaptionML=ENU=Unit Cost (Calculated);
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 5810;   ;Unit Cost (Revalued);Decimal       ;OnValidate=BEGIN
                                                                ReadGLSetup;
                                                                TESTFIELD("Value Entry Type","Value Entry Type"::Revaluation);
                                                                //IF "Unit Cost (Revalued)" <> xRec."Unit Cost (Revalued)" THEN //**4PS.o call 20008
                                                                  VALIDATE(
                                                                    "Inventory Value (Revalued)",
                                                                    ROUND(
                                                                      "Unit Cost (Revalued)" * Quantity,GLSetup."Amount Rounding Precision"));
                                                              END;

                                                   CaptionML=ENU=Unit Cost (Revalued);
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 5811;   ;Applied Amount      ;Decimal       ;CaptionML=ENU=Applied Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5812;   ;Update Standard Cost;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Inventory Value Per");
                                                                GetItem;
                                                                Item.TESTFIELD("Costing Method",Item."Costing Method"::Standard);
                                                              END;

                                                   CaptionML=ENU=Update Standard Cost }
    { 5813;   ;Amount (ACY)        ;Decimal       ;CaptionML=ENU=Amount (ACY);
                                                   AutoFormatType=1 }
    { 5817;   ;Correction          ;Boolean       ;CaptionML=ENU=Correction }
    { 5818;   ;Adjustment          ;Boolean       ;CaptionML=ENU=Adjustment }
    { 5819;   ;Applies-to Value Entry;Integer     ;CaptionML=ENU=Applies-to Value Entry }
    { 5820;   ;Invoice-to Source No.;Code20       ;TableRelation=IF (Source Type=CONST(Customer)) Customer
                                                                 ELSE IF (Source Type=CONST(Vendor)) Vendor;
                                                   CaptionML=ENU=Invoice-to Source No. }
    { 5830;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF Type = Type::Resource THEN
                                                                  TESTFIELD("Entry Type","Entry Type"::"Assembly Output")
                                                                ELSE
                                                                  TESTFIELD("Entry Type","Entry Type"::Output);
                                                                VALIDATE("No.",'');
                                                              END;

                                                   AccessByPermission=TableData 99000758=R;
                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Work Center,Machine Center, ,Resource;
                                                   OptionString=Work Center,Machine Center, ,Resource }
    { 5831;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(Machine Center)) "Machine Center"
                                                                 ELSE IF (Type=CONST(Work Center)) "Work Center"
                                                                 ELSE IF (Type=CONST(Resource)) Resource;
                                                   OnValidate=VAR
                                                                Resource@1000 : Record 156;
                                                              BEGIN
                                                                IF Type = Type::Resource THEN
                                                                  TESTFIELD("Entry Type","Entry Type"::"Assembly Output")
                                                                ELSE
                                                                  TESTFIELD("Entry Type","Entry Type"::Output);
                                                                IF "No." = '' THEN BEGIN
                                                                  "Work Center No." := '';
                                                                  VALIDATE("Item No.");
                                                                  CreateDim(
                                                                    DATABASE::"Work Center","Work Center No.",
                                                                    DATABASE::Job,"Job No.", //**4PS.n
                                                                    DATABASE::"Service Order","Service Order No.",   //** 4PS 09-06-2010
                                                                    DATABASE::Item,"Item No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::Location,"Location Code"); //**4PS.n
                                                                  IF Type IN [Type::"Work Center",Type::"Machine Center"] THEN
                                                                    UpdateDimForProdJnlLine;
                                                                  EXIT;
                                                                END;

                                                                CASE Type OF
                                                                  Type::"Work Center":
                                                                    BEGIN
                                                                      WorkCenter.GET("No.");
                                                                      WorkCenter.TESTFIELD(Blocked,FALSE);
                                                                      "Work Center No." := WorkCenter."No.";
                                                                      Description := WorkCenter.Name;
                                                                      "Gen. Prod. Posting Group" := WorkCenter."Gen. Prod. Posting Group";
                                                                      "Unit Cost Calculation" := WorkCenter."Unit Cost Calculation";
                                                                    END;
                                                                  Type::"Machine Center":
                                                                    BEGIN
                                                                      MachineCenter.GET("No.");
                                                                      MachineCenter.TESTFIELD(Blocked,FALSE);
                                                                      "Work Center No." := MachineCenter."Work Center No.";
                                                                      Description := MachineCenter.Name;
                                                                      WorkCenter.GET("Work Center No.");
                                                                      WorkCenter.TESTFIELD(Blocked,FALSE);
                                                                      "Gen. Prod. Posting Group" := MachineCenter."Gen. Prod. Posting Group";
                                                                      "Unit Cost Calculation" := "Unit Cost Calculation"::Time;
                                                                    END;
                                                                  Type::Resource:
                                                                    BEGIN
                                                                      Resource.GET("No.");
                                                                      Resource.TESTFIELD(Blocked,FALSE);
                                                                    END;
                                                                END;

                                                                IF Type IN [Type::"Work Center",Type::"Machine Center"] THEN BEGIN
                                                                  "Work Center No." := WorkCenter."No.";
                                                                  VALIDATE("Cap. Unit of Measure Code",WorkCenter."Unit of Measure Code");
                                                                END;

                                                                IF "Work Center No." <> '' THEN BEGIN
                                                                  CreateDim(
                                                                    DATABASE::"Work Center","Work Center No.",
                                                                    DATABASE::Job,"Job No.", //**4PS.n
                                                                    DATABASE::"Service Order","Service Order No.",   //** 4PS 09-06-2010
                                                                    DATABASE::Item,"Item No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::Location,"Location Code"); //**4PS.n
                                                                  UpdateDimForProdJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 5838;   ;Operation No.       ;Code10        ;TableRelation=IF (Order Type=CONST(Production)) "Prod. Order Routing Line"."Operation No." WHERE (Status=CONST(Released),
                                                                                                                                                     Prod. Order No.=FIELD(Order No.),
                                                                                                                                                     Routing No.=FIELD(Routing No.),
                                                                                                                                                     Routing Reference No.=FIELD(Routing Reference No.));
                                                   OnValidate=VAR
                                                                ProdOrderRtngLine@1000 : Record 5409;
                                                              BEGIN
                                                                TESTFIELD("Entry Type","Entry Type"::Output);
                                                                IF "Operation No." = '' THEN
                                                                  EXIT;

                                                                TESTFIELD("Order Type","Order Type"::Production);
                                                                TESTFIELD("Order No.");
                                                                TESTFIELD("Item No.");

                                                                GetProdOrderRtngLine(ProdOrderRtngLine);

                                                                CASE ProdOrderRtngLine.Type OF
                                                                  ProdOrderRtngLine.Type::"Work Center":
                                                                    Type := Type::"Work Center";
                                                                  ProdOrderRtngLine.Type::"Machine Center":
                                                                    Type := Type::"Machine Center";
                                                                END;
                                                                VALIDATE("No.",ProdOrderRtngLine."No.");
                                                                Description := ProdOrderRtngLine.Description;
                                                              END;

                                                   CaptionML=ENU=Operation No. }
    { 5839;   ;Work Center No.     ;Code20        ;TableRelation="Work Center";
                                                   CaptionML=ENU=Work Center No.;
                                                   Editable=No }
    { 5841;   ;Setup Time          ;Decimal       ;OnValidate=BEGIN
                                                                IF SubcontractingWorkCenterUsed AND ("Setup Time" <> 0) THEN
                                                                  SubcontractedErr;
                                                                "Setup Time (Base)" := CalcBaseTime("Setup Time");
                                                              END;

                                                   AccessByPermission=TableData 99000758=R;
                                                   CaptionML=ENU=Setup Time;
                                                   DecimalPlaces=0:5 }
    { 5842;   ;Run Time            ;Decimal       ;OnValidate=BEGIN
                                                                IF SubcontractingWorkCenterUsed AND ("Run Time" <> 0) THEN
                                                                  SubcontractedErr;

                                                                "Run Time (Base)" := CalcBaseTime("Run Time");
                                                              END;

                                                   AccessByPermission=TableData 99000758=R;
                                                   CaptionML=ENU=Run Time;
                                                   DecimalPlaces=0:5 }
    { 5843;   ;Stop Time           ;Decimal       ;OnValidate=BEGIN
                                                                "Stop Time (Base)" := CalcBaseTime("Stop Time");
                                                              END;

                                                   AccessByPermission=TableData 99000758=R;
                                                   CaptionML=ENU=Stop Time;
                                                   DecimalPlaces=0:5 }
    { 5846;   ;Output Quantity     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Entry Type","Entry Type"::Output);
                                                                IF SubcontractingWorkCenterUsed AND ("Output Quantity" <> 0) THEN
                                                                  SubcontractedErr;

                                                                IF LastOutputOperation(Rec) THEN
                                                                  WhseValidateSourceLine.ItemLineVerifyChange(Rec,xRec);

                                                                "Output Quantity (Base)" := CalcBaseQty("Output Quantity");

                                                                VALIDATE(Quantity,"Output Quantity");
                                                              END;

                                                   AccessByPermission=TableData 99000758=R;
                                                   CaptionML=ENU=Output Quantity;
                                                   DecimalPlaces=0:5 }
    { 5847;   ;Scrap Quantity      ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Entry Type","Entry Type"::Output);
                                                                "Scrap Quantity (Base)" := CalcBaseQty("Scrap Quantity");
                                                              END;

                                                   AccessByPermission=TableData 99000758=R;
                                                   CaptionML=ENU=Scrap Quantity;
                                                   DecimalPlaces=0:5 }
    { 5849;   ;Concurrent Capacity ;Decimal       ;OnValidate=VAR
                                                                TotalTime@1000 : Integer;
                                                              BEGIN
                                                                TESTFIELD("Entry Type","Entry Type"::Output);
                                                                IF "Concurrent Capacity" = 0 THEN
                                                                  EXIT;

                                                                TESTFIELD("Starting Time");
                                                                TESTFIELD("Ending Time");
                                                                TotalTime := CalendarMgt.CalcTimeDelta("Ending Time","Starting Time");
                                                                IF "Ending Time" < "Starting Time" THEN
                                                                  TotalTime := TotalTime + 86400000;
                                                                TESTFIELD("Work Center No.");
                                                                WorkCenter.GET("Work Center No.");
                                                                VALIDATE("Setup Time",0);
                                                                VALIDATE(
                                                                  "Run Time",
                                                                  ROUND(
                                                                    TotalTime / CalendarMgt.TimeFactor("Cap. Unit of Measure Code") *
                                                                    "Concurrent Capacity",WorkCenter."Calendar Rounding Precision"));
                                                              END;

                                                   AccessByPermission=TableData 99000758=R;
                                                   CaptionML=ENU=Concurrent Capacity;
                                                   DecimalPlaces=0:5 }
    { 5851;   ;Setup Time (Base)   ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Cap. Unit of Measure",1);
                                                                VALIDATE("Setup Time","Setup Time (Base)");
                                                              END;

                                                   CaptionML=ENU=Setup Time (Base);
                                                   DecimalPlaces=0:5 }
    { 5852;   ;Run Time (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Cap. Unit of Measure",1);
                                                                VALIDATE("Run Time","Run Time (Base)");
                                                              END;

                                                   CaptionML=ENU=Run Time (Base);
                                                   DecimalPlaces=0:5 }
    { 5853;   ;Stop Time (Base)    ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Cap. Unit of Measure",1);
                                                                VALIDATE("Stop Time","Stop Time (Base)");
                                                              END;

                                                   CaptionML=ENU=Stop Time (Base);
                                                   DecimalPlaces=0:5 }
    { 5856;   ;Output Quantity (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Output Quantity","Output Quantity (Base)");
                                                              END;

                                                   CaptionML=ENU=Output Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 5857;   ;Scrap Quantity (Base);Decimal      ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Scrap Quantity","Scrap Quantity (Base)");
                                                              END;

                                                   CaptionML=ENU=Scrap Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 5858;   ;Cap. Unit of Measure Code;Code10   ;TableRelation=IF (Type=CONST(Resource)) "Resource Unit of Measure".Code WHERE (Resource No.=FIELD(No.))
                                                                 ELSE "Capacity Unit of Measure";
                                                   OnValidate=VAR
                                                                ProdOrderRtngLine@1000 : Record 5409;
                                                              BEGIN
                                                                IF Type <> Type::Resource THEN BEGIN
                                                                  "Qty. per Cap. Unit of Measure" :=
                                                                    ROUND(
                                                                      CalendarMgt.QtyperTimeUnitofMeasure(
                                                                        "Work Center No.","Cap. Unit of Measure Code"),
                                                                      0.00001);

                                                                  VALIDATE("Setup Time");
                                                                  VALIDATE("Run Time");
                                                                  VALIDATE("Stop Time");
                                                                END;

                                                                IF "Order No." <> '' THEN
                                                                  CASE "Order Type" OF
                                                                    "Order Type"::Production:
                                                                      BEGIN
                                                                        GetProdOrderRtngLine(ProdOrderRtngLine);
                                                                        "Unit Cost" := ProdOrderRtngLine."Unit Cost per";

                                                                        CostCalcMgt.RoutingCostPerUnit(
                                                                          Type,"No.","Unit Amount","Indirect Cost %","Overhead Rate","Unit Cost","Unit Cost Calculation");
                                                                      END;
                                                                    "Order Type"::Assembly:
                                                                      CostCalcMgt.ResourceCostPerUnit("No.","Unit Amount","Indirect Cost %","Overhead Rate","Unit Cost");
                                                                  END;

                                                                ReadGLSetup;
                                                                "Unit Cost" :=
                                                                  ROUND("Unit Cost" * "Qty. per Cap. Unit of Measure",GLSetup."Unit-Amount Rounding Precision");
                                                                "Unit Amount" :=
                                                                  ROUND("Unit Amount" * "Qty. per Cap. Unit of Measure",GLSetup."Unit-Amount Rounding Precision");
                                                                VALIDATE("Unit Amount");
                                                              END;

                                                   CaptionML=ENU=Cap. Unit of Measure Code }
    { 5859;   ;Qty. per Cap. Unit of Measure;Decimal;
                                                   CaptionML=ENU=Qty. per Cap. Unit of Measure;
                                                   DecimalPlaces=0:5 }
    { 5873;   ;Starting Time       ;Time          ;OnValidate=BEGIN
                                                                IF "Ending Time" < "Starting Time" THEN
                                                                  "Ending Time" := "Starting Time";

                                                                VALIDATE("Concurrent Capacity");
                                                              END;

                                                   AccessByPermission=TableData 99000758=R;
                                                   CaptionML=ENU=Starting Time }
    { 5874;   ;Ending Time         ;Time          ;OnValidate=BEGIN
                                                                VALIDATE("Concurrent Capacity");
                                                              END;

                                                   AccessByPermission=TableData 99000758=R;
                                                   CaptionML=ENU=Ending Time }
    { 5882;   ;Routing No.         ;Code20        ;TableRelation="Routing Header";
                                                   CaptionML=ENU=Routing No.;
                                                   Editable=No }
    { 5883;   ;Routing Reference No.;Integer      ;CaptionML=ENU=Routing Reference No. }
    { 5884;   ;Prod. Order Comp. Line No.;Integer ;TableRelation=IF (Order Type=CONST(Production)) "Prod. Order Component"."Line No." WHERE (Status=CONST(Released),
                                                                                                                                             Prod. Order No.=FIELD(Order No.),
                                                                                                                                             Prod. Order Line No.=FIELD(Order Line No.));
                                                   OnValidate=BEGIN
                                                                IF "Prod. Order Comp. Line No." <> xRec."Prod. Order Comp. Line No." THEN
                                                                  CreateProdDim;
                                                              END;

                                                   CaptionML=ENU=Prod. Order Comp. Line No. }
    { 5885;   ;Finished            ;Boolean       ;AccessByPermission=TableData 99000758=R;
                                                   CaptionML=ENU=Finished }
    { 5887;   ;Unit Cost Calculation;Option       ;CaptionML=ENU=Unit Cost Calculation;
                                                   OptionCaptionML=ENU=Time,Units;
                                                   OptionString=Time,Units }
    { 5888;   ;Subcontracting      ;Boolean       ;CaptionML=ENU=Subcontracting }
    { 5895;   ;Stop Code           ;Code10        ;TableRelation=Stop;
                                                   CaptionML=ENU=Stop Code }
    { 5896;   ;Scrap Code          ;Code10        ;TableRelation=Scrap;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Machine Center");
                                                              END;

                                                   CaptionML=ENU=Scrap Code }
    { 5898;   ;Work Center Group Code;Code10      ;TableRelation="Work Center Group";
                                                   CaptionML=ENU=Work Center Group Code;
                                                   Editable=No }
    { 5899;   ;Work Shift Code     ;Code10        ;TableRelation="Work Shift";
                                                   CaptionML=ENU=Work Shift Code }
    { 6500;   ;Serial No.          ;Code40        ;CaptionML=ENU=Serial No.;
                                                   Editable=No }
    { 6501;   ;Lot No.             ;Code20        ;CaptionML=ENU=Lot No.;
                                                   Editable=No }
    { 6502;   ;Warranty Date       ;Date          ;CaptionML=ENU=Warranty Date;
                                                   Editable=No }
    { 6503;   ;New Serial No.      ;Code40        ;CaptionML=ENU=New Serial No.;
                                                   Editable=No }
    { 6504;   ;New Lot No.         ;Code20        ;CaptionML=ENU=New Lot No.;
                                                   Editable=No }
    { 6505;   ;New Item Expiration Date;Date      ;CaptionML=ENU=New Item Expiration Date }
    { 6506;   ;Item Expiration Date;Date          ;CaptionML=ENU=Item Expiration Date;
                                                   Editable=No }
    { 6600;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   CaptionML=ENU=Return Reason Code }
    { 7315;   ;Warehouse Adjustment;Boolean       ;CaptionML=ENU=Warehouse Adjustment }
    { 7380;   ;Phys Invt Counting Period Code;Code10;
                                                   TableRelation="Phys. Invt. Counting Period";
                                                   CaptionML=ENU=Phys Invt Counting Period Code;
                                                   Editable=No }
    { 7381;   ;Phys Invt Counting Period Type;Option;
                                                   CaptionML=ENU=Phys Invt Counting Period Type;
                                                   OptionCaptionML=ENU=" ,Item,SKU";
                                                   OptionString=[ ,Item,SKU];
                                                   Editable=No }
    { 11012000;;Service Order No.  ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Service Order".No.;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Service Order No." = '' THEN BEGIN
                                                                  "Service Location No." := '';
                                                                  "Service Contract No." := '';
                                                                  "Service Control Year" := 0;
                                                                  "Base Service Order No." := '';
                                                                END ELSE BEGIN
                                                                  CheckCompanyIC;
                                                                  IF ("Entry Type" IN ["Entry Type"::"Positive Adjmt.", "Entry Type"::"Negative Adjmt."]) THEN
                                                                    TESTFIELD("Service Order No.",'');
                                                                  TESTFIELD("Plant Type",'');
                                                                  TESTFIELD("Delivery Account No.", '');
                                                                  TESTFIELD("To Plant Inventory", FALSE);
                                                                  ServOrderRec.GET("Service Order No.");
                                                                  ServOrderRec.CheckStatus(1);
                                                                  "Service Location No." := ServOrderRec."Service Location No.";
                                                                  "Service Contract No." := ServOrderRec."Service Contract No.";
                                                                  "Service Source Type" := ServOrderRec."Source Type";
                                                                  IF "Service Order No." <> xRec."Service Order No." THEN
                                                                    CurrFieldNo := FIELDNO("Service Order No.");  //db, 04-01-11: M24212

                                                                  CheckAdditionalCostService;  //db, 24-02-10
                                                                  "Base Service Order No." := ServOrderRec."Base Service Order No.";
                                                                END;

                                                                IF "Item No." <> '' THEN
                                                                  GetUnitPrice;

                                                                CheckCostCompServOrderType;

                                                                CheckItemEntrySales;

                                                                ReserveItemJnlLine.VerifyChange(Rec,xRec); //**4PS.n DP00121
                                                                //**4PS 09-06-2010 sn
                                                                  CreateDim(
                                                                    DATABASE::"Service Order","Service Order No.",
                                                                    DATABASE::Job,"Job No.",
                                                                    DATABASE::Item,"Item No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::"Work Center","Work Center No.",
                                                                    DATABASE::Location,"Location Code"); //**4PS.n
                                                                //**4PS 09-06-2010 en
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              CheckCompanyIC;
                                                              ServOrderRec."No." := "Service Order No.";
                                                              IF PAGE.RUNMODAL(0, ServOrderRec) = ACTION::LookupOK THEN BEGIN
                                                                xRec."Service Order No." := '';  //db, 07-06-10: M19676
                                                                VALIDATE("Service Order No.", ServOrderRec."No.");
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Service Order No.;
                                                   Description= }
    { 11012010;;Element            ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Project Element".Element WHERE (Project No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                CheckCompanyIC;
                                                                ElementFormat.FormatElem(Element,2,"Receiving Company");
                                                                IF Element <> '' THEN BEGIN
                                                                  ProjElemRec.GET("Job No.",Element);
                                                                  ProjElemRec.CheckProjectElementBlocked;
                                                                  "Element Level" := ProjElemRec.Level;
                                                                  Chapter := ProjElemRec.Chapter;
                                                                  Paragraph := ProjElemRec.Paragraph;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              CheckCompanyIC;
                                                              ProjElemRec."Project No." := "Job No.";
                                                              ProjElemRec.Element := Element;
                                                              ProjElemRec.SETRANGE("Project No.", "Job No.");
                                                              IF PAGE.RUNMODAL(0, ProjElemRec) = ACTION::LookupOK THEN
                                                                VALIDATE(Element, ProjElemRec.Element);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 11012011;;Element Level      ;Integer       ;CaptionML=ENU=Element Level;
                                                   Editable=No }
    { 11012012;;Chapter            ;Code20        ;CaptionML=ENU=Chapter;
                                                   Editable=No }
    { 11012013;;Paragraph          ;Code20        ;CaptionML=ENU=Paragraph;
                                                   Editable=No }
    { 11012014;;Cost Type          ;Option        ;CaptionML=ENU=Cost Type;
                                                   OptionCaptionML=ENU=" ,Labor,Material,Subcontracting,Plant,Sundry";
                                                   OptionString=[ ,Labor,Material,Subcontracting,Plant,Sundry];
                                                   Editable=No }
    { 11012015;;Extension Contract ;Code10        ;TableRelation=IF (Receiving Company=FILTER('')) "Extension Contract"."Contract No." WHERE (Project No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                CheckCompanyIC;
                                                                ExtRec.GET("Job No.", "Extension Contract");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              CheckCompanyIC;
                                                              ExtRec."Project No." := "Job No.";
                                                              ExtRec."Contract No." := "Extension Contract";
                                                              ExtRec.SETRANGE("Project No.", "Job No.");
                                                              IF PAGE.RUNMODAL(0, ExtRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Extension Contract", ExtRec."Contract No.");
                                                            END;

                                                   CaptionML=ENU=Extension Contract }
    { 11012020;;Delivery Date      ;Date          ;CaptionML=ENU=Delivery Date }
    { 11012030;;Description 2      ;Text50        ;CaptionML=ENU=Description 2 }
    { 11012040;;Ship To Location   ;Code10        ;TableRelation=IF (Receiving Company=FILTER(''),
                                                                     Deliver=CONST(Project Location)) "Project Location".Code WHERE (Project No.=FIELD(Job No.))
                                                                     ELSE IF (Receiving Company=FILTER(''),
                                                                              Deliver=CONST(Location)) Location.Code;
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                CheckCompanyIC;
                                                                IF "Ship To Location" <> '' THEN BEGIN
                                                                  IF Deliver = Deliver::Location THEN
                                                                    LocRec.GET("Ship To Location");
                                                                  IF Deliver = Deliver::"Project Location" THEN
                                                                    ProjLocRec.GET("Job No.","Ship To Location");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              IF Deliver = Deliver::"Service Location" THEN EXIT;

                                                              CheckCompanyIC;

                                                              IF Deliver = Deliver::Location THEN BEGIN
                                                                LocRec.Code := "Ship To Location";
                                                                IF PAGE.RUNMODAL(0, LocRec) = ACTION::LookupOK THEN
                                                                  VALIDATE("Ship To Location", LocRec.Code);
                                                              END;

                                                              IF Deliver = Deliver::"Project Location" THEN BEGIN
                                                                ProjLocRec."Project No." := "Job No.";
                                                                ProjLocRec.Code := "Ship To Location";
                                                                ProjLocRec.SETRANGE("Project No.", "Job No.");
                                                                IF PAGE.RUNMODAL(0, ProjLocRec) = ACTION::LookupOK THEN
                                                                  VALIDATE("Ship To Location", ProjLocRec.Code);
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Ship To Location }
    { 11012050;;Run No.            ;Code10        ;CaptionML=ENU=Run No.;
                                                   Description=expired in update 4.00-008 }
    { 11012060;;Advised            ;Boolean       ;CaptionML=ENU=Advised;
                                                   Description=expired in update 4.00-008 }
    { 11012061;;Blocked            ;Boolean       ;CaptionML=ENU=Blocked }
    { 11012070;;Inventory Status   ;Option        ;CaptionML=ENU=Inventory Status;
                                                   OptionCaptionML=ENU=free,in production,produced,on stock,processed;
                                                   OptionString=free,in production,produced,on stock,processed }
    { 11012080;;Production Order   ;Code20        ;OnLookup=VAR
                                                              ProdFrm1@1210190000 : Page 99000815;
                                                              ProdRec1@1210190002 : Record 5405;
                                                            BEGIN
                                                              //**4PS
                                                              IF ("Inventory Status" = "Inventory Status"::"in production") OR
                                                                 ("Inventory Status" = "Inventory Status"::produced) THEN BEGIN
                                                                CLEAR(ProdFrm1);
                                                                CLEAR(ProdRec1);
                                                                ProdFrm1.LOOKUPMODE(TRUE);
                                                                ProdRec1.SETRANGE(Status, "Production Status");
                                                                IF "Production Status" = "Production Status"::"Firm Planned" THEN BEGIN
                                                                  ProdRec1.GET("Production Status", "Production Order");
                                                                END ELSE BEGIN
                                                                  ProdRec1.SETRANGE("Firm Planned Order No.", "Production Order");
                                                                  IF NOT ProdRec1.FIND('-') THEN
                                                                    ProdRec1.SETRANGE("Planned Order No.");
                                                                END;
                                                                ProdFrm1.SETRECORD(ProdRec1);
                                                                ProdFrm1.RUNMODAL;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Production Order;
                                                   Editable=No }
    { 11012081;;Production Status  ;Option        ;CaptionML=ENU=Production Status;
                                                   OptionCaptionML=ENU=Quote,Planned,Firm Planned,Released,Finished;
                                                   OptionString=Quote,Planned,Firm Planned,Released,Finished;
                                                   Editable=No }
    { 11012085;;Quantity (Produced);Decimal       ;CaptionML=ENU=Quantity (Produced);
                                                   DecimalPlaces=0:5 }
    { 11012086;;Quantity (Released);Decimal       ;OnValidate=BEGIN
                                                                "Quantity to Post" := CalcDefaultQuantityToPost;//**4PS.n
                                                              END;

                                                   CaptionML=ENU=Quantity (Released);
                                                   DecimalPlaces=0:5 }
    { 11012087;;Quantity (Reserved);Decimal       ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Production Order" = '' THEN
                                                                  "Quantity (Reserved)" := Quantity
                                                                ELSE
                                                                  "Quantity (Reserved)" := Quantity - "Quantity (Released)";
                                                              END;

                                                   CaptionML=ENU=Quantity (Reserved);
                                                   DecimalPlaces=0:5 }
    { 11012088;;Quantity to Post   ;Decimal       ;OnValidate=BEGIN
                                                                //**4PS
                                                                ValidateQuantityToPost;
                                                              END;

                                                   CaptionML=ENU=Quantity to Post;
                                                   DecimalPlaces=0:5 }
    { 11012090;;Text               ;Text250       ;OnValidate=BEGIN
                                                                //**4PS
                                                                "Text Block" := Text <> '';
                                                              END;

                                                   CaptionML=ENU=Text }
    { 11012091;;Text Block         ;Boolean       ;CaptionML=ENU=Text Block;
                                                   Editable=No }
    { 11012100;;Receiving Company  ;Text30        ;TableRelation=Company;
                                                   OnValidate=VAR
                                                                IntercompanyRelation@1100528300 : Record 11012057;
                                                                ICLicenceCu@1210190000 : Codeunit 11012780;
                                                              BEGIN
                                                                //**4PS
                                                                ICLicenceCu.CheckICEntry("Receiving Company");

                                                                IF "Receiving Company" <> '' THEN BEGIN
                                                                  "Rental Unit" := '';
                                                                  IF (IntercompanyRelation.GET(COMPANYNAME, "Receiving Company")) THEN
                                                                    "Gen. Bus. Posting Group" := IntercompanyRelation."Gen. Bus. Posting Group";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Receiving Company }
    { 11012110;;Supplying Company  ;Text30        ;TableRelation=Company;
                                                   CaptionML=ENU=Supplying Company;
                                                   Editable=No }
    { 11012120;;Related Document (Parent);Code20  ;CaptionML=ENU=Related Document (Parent) }
    { 11012121;;Related Document (Child);Code20   ;CaptionML=ENU=Related Document (Child) }
    { 11012130;;Delivery Account No.;Code20       ;TableRelation=IF (Receiving Company=FILTER('')) "G/L Account";
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Delivery Account No." = '' THEN BEGIN
                                                                  "Delivery Dimension 1 Code" := '';
                                                                  EXIT;
                                                                END;

                                                                IF NOT ("Entry Type" IN ["Entry Type"::Purchase, "Entry Type"::Sale]) THEN
                                                                  TESTFIELD("Delivery Account No.",'')
                                                                ELSE BEGIN
                                                                  TESTFIELD("Job No.", '');
                                                                  TESTFIELD("Service Order No.", '');
                                                                  TESTFIELD("Plant Type", '');
                                                                  TESTFIELD("To Plant Inventory", FALSE);
                                                                END;

                                                                CheckCompanyIC;
                                                                GLAcc.GET("Delivery Account No.");
                                                                CheckGLAcc;
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              GLAcc.RESET;
                                                              CheckCompanyIC;
                                                              GLAcc."No." := "Delivery Account No.";
                                                              IF PAGE.RUNMODAL(0, GLAcc) = ACTION::LookupOK THEN
                                                                VALIDATE("Delivery Account No.", GLAcc."No.");
                                                            END;

                                                   CaptionML=ENU=Delivery Account No. }
    { 11012131;;Delivery Dimension 1 Code;Code20  ;TableRelation=IF (Receiving Company=FILTER('')) "Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Delivery Dimension 1 Code" = '' THEN
                                                                  EXIT;

                                                                TESTFIELD("Delivery Account No.");

                                                                CheckCompanyIC;
                                                                DimMgt.GetDimValueRec(1, "Delivery Dimension 1 Code", DimValRec, TRUE,'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              DimValRec.RESET;
                                                              CheckCompanyIC;
                                                              DimValRec.Code := "Delivery Dimension 1 Code";
                                                              DimValRec.SETRANGE("Global Dimension No.", 1);
                                                              IF PAGE.RUNMODAL(0, DimValRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Delivery Dimension 1 Code", DimValRec.Code);
                                                            END;

                                                   CaptionML=ENU=Delivery Cost Centre }
    { 11012142;;Ovh.Surch.Expected Costs (LCY);Decimal;
                                                   CaptionML=ENU=Ovh.Surch.Expected Costs (LCY);
                                                   Editable=No }
    { 11012143;;Overhead Surcharge Project;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Journal Surcharge"."Overhead Surcharge Project" WHERE (Journal Template Name=FIELD(Journal Template Name),
                                                                                                                                Journal Batch Name=FIELD(Journal Batch Name),
                                                                                                                                Journal Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Overhead Surcharge Project;
                                                   Editable=No }
    { 11012144;;Overhead Surcharge Service;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Journal Surcharge"."Overhead Surcharge Service" WHERE (Journal Template Name=FIELD(Journal Template Name),
                                                                                                                                Journal Batch Name=FIELD(Journal Batch Name),
                                                                                                                                Journal Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Overhead Surcharge Service;
                                                   Description=Dont use 11012145;
                                                   Editable=No }
    { 11012150;;Shelf No.          ;Code20        ;TableRelation="Shelf per Location".Code;
                                                   OnValidate=VAR
                                                                InvSetup@1100485002 : Record 313;
                                                                CompInfo@1100485001 : Record 79;
                                                                ShelfRec@1100485000 : Record 11020241;
                                                              BEGIN
                                                                //**4PS
                                                                InvSetup.GET;
                                                                CompInfo.GET;
                                                                IF "Shelf No." <> '' THEN BEGIN
                                                                  IF InvSetup."Shelfs by Location" = FALSE THEN
                                                                    ShelfRec.GET(CompInfo."Location Code", "Shelf No.")
                                                                  ELSE
                                                                    ShelfRec.GET("Location Code", "Shelf No.");
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Shelf No. }
    { 11012155;;Bin Code (Project Inventory);Code20;
                                                   OnValidate=VAR
                                                                WMSManagement@1001 : Codeunit 7302;
                                                                Location@1100526200 : Record 14;
                                                                PrefBin@1100525000 : Record 11020629;
                                                              BEGIN
                                                                //db, 02-11-10
                                                                WMSManagement.FindBin("Location Code","Bin Code (Project Inventory)",'');
                                                                TESTFIELD("Location Code");
                                                                IF "Bin Code (Project Inventory)" <> '' THEN BEGIN
                                                                  Location.GET("Location Code");
                                                                  Location.TESTFIELD("Bin Mandatory");
                                                                END;

                                                                PrefBin.CheckBinLocationBinding("Job No.",'',"Location Code","Bin Code (Project Inventory)");  //db, 24-12-10
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1002 : Codeunit 7302;
                                                              BinCode@1000 : Code[20];
                                                            BEGIN
                                                              //db, 02-11-10
                                                              BinCode := WMSManagement.BinLookUpSpecific("Location Code","Item No.",'','',"Job No.","Service Order No.","Bin Code (Project Inventory)");
                                                              IF BinCode <> '' THEN
                                                                VALIDATE("Bin Code (Project Inventory)",BinCode);
                                                            END;

                                                   CaptionML=ENU=Bin Code (Project Inventory) }
    { 11012160;;Main Project No.   ;Code20        ;TableRelation=Job;
                                                   CaptionML=ENU=Main Project No. }
    { 11012170;;Origin Type Line   ;Option        ;CaptionML=ENU=Origin Type Line;
                                                   OptionCaptionML=ENU=" ,Item Journal - Manual,Advice Order Line";
                                                   OptionString=[ ,ItemJnlManual,AdviceOrderLine];
                                                   Editable=No }
    { 11012210;;Warranty Code Vendor;Code10       ;TableRelation="Service Warranty";
                                                   CaptionML=ENU=Warranty Code Vendor }
    { 11012220;;Warranty Start Date Vendor;Date   ;CaptionML=ENU=Warranty Start Date Vendor }
    { 11012230;;Warranty Period Vendor;DateFormula;CaptionML=ENU=Warranty Period Vendor }
    { 11012240;;Warranty Code Customer;Code10     ;TableRelation="Service Warranty";
                                                   CaptionML=ENU=Warranty Code Customer }
    { 11012250;;Warranty Start Date Customer;Date ;CaptionML=ENU=Warranty Start Date Customer }
    { 11012260;;Warranty Period Customer;DateFormula;
                                                   CaptionML=ENU=Warranty Period Customer }
    { 11012270;;Warranty Date Customer;Date       ;CaptionML=ENU=Warranty Date Customer;
                                                   Editable=No }
    { 11012280;;Good Customs       ;Boolean       ;CaptionML=ENU=Good Customs }
    { 11012285;;Shipment with T1   ;Boolean       ;CaptionML=ENU=Shipment with T1 }
    { 11012286;;Customs Destination Code;Code20   ;CaptionML=ENU=Customs Destination Code }
    { 11012290;;Reserved NS Qty. (Base);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("NS Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Journal Template Name),
                                                                                                                   Source Ref. No.=FIELD(Line No.),
                                                                                                                   Source Type=CONST(83),
                                                                                                                   Source Subtype=FIELD(Entry Type),
                                                                                                                   Source Batch Name=FIELD(Journal Batch Name),
                                                                                                                   Source Prod. Order Line=CONST(0),
                                                                                                                   Reservation Status=CONST(Reservation)));
                                                   CaptionML=ENU=Reserved Non-stock Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 11012315;;Input by           ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Input by;
                                                   Editable=No }
    { 11012400;;Journal Template Type;Option      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Item Journal Template".Type WHERE (Name=FIELD(Journal Template Name)));
                                                   CaptionML=ENU=Journal Templage Type;
                                                   OptionCaptionML=ENU=Item,Transfer,Phys. Inventory,Revaluation,Consumption,Output,Capacity,Prod. Order;
                                                   OptionString=Item,Transfer,Phys. Inventory,Revaluation,Consumption,Output,Capacity,Prod. Order;
                                                   Editable=No }
    { 11012401;;Recurring          ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Item Journal Template".Recurring WHERE (Name=FIELD(Journal Template Name)));
                                                   CaptionML=ENU=Recurring;
                                                   Editable=No }
    { 11012550;;To Plant Inventory ;Boolean       ;OnValidate=VAR
                                                                lvPlantTypeRec@1100485000 : Record 11012551;
                                                                lvPlantSetupRec@1100485001 : Record 11012550;
                                                              BEGIN
                                                                //**4PS
                                                                IF "To Plant Inventory" THEN BEGIN
                                                                  IF "Item No." <> '' THEN
                                                                    IF lvPlantTypeRec.GET("Item No.") THEN
                                                                      "To Plant Type" := "Item No.";
                                                                  lvPlantSetupRec.GET;
                                                                  //"To Plant Location" := lvPlantSetupRec."Ship To Location";  //*DPA.o
                                                                  "To Plant Location" := lvPlantSetupRec.GetShipToLocation();   //*DPA.n
                                                                  TESTFIELD("Job No.", '');
                                                                  TESTFIELD("Service Order No.", '');
                                                                  TESTFIELD("Plant Type", '');
                                                                  TESTFIELD("Delivery Account No.", '');
                                                                END ELSE BEGIN
                                                                  "To Plant Type" := '';
                                                                  "To Plant Location" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=To Plant Inventory }
    { 11012560;;To Plant Type      ;Code20        ;TableRelation="Plant Type" WHERE (Bulk=CONST(Yes),
                                                                                     External=CONST(No));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "To Plant Type" <> '' THEN
                                                                  TESTFIELD("To Plant Inventory", TRUE);
                                                              END;

                                                   CaptionML=ENU=To Plant Type }
    { 11012570;;To Plant Location  ;Code20        ;TableRelation="Plant Location";
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "To Plant Location" <> '' THEN
                                                                  TESTFIELD("To Plant Inventory", TRUE);
                                                              END;

                                                   CaptionML=ENU=To Plant Location }
    { 11012581;;Plant Type         ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Plant Type";
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Plant Type" = '' THEN BEGIN
                                                                  "Plant No." := '';
                                                                  "Cost Component Plant" := '';
                                                                  EXIT;
                                                                END;

                                                                IF NOT ("Entry Type" IN ["Entry Type"::Purchase, "Entry Type"::Sale]) THEN
                                                                  TESTFIELD("Plant Type",'')
                                                                ELSE BEGIN
                                                                  TESTFIELD("Job No.", '');
                                                                  TESTFIELD("Service Order No.", '');
                                                                  TESTFIELD("Delivery Account No.", '');
                                                                  TESTFIELD("To Plant Inventory", FALSE);
                                                                END;

                                                                CheckCompanyIC;
                                                                PlantTypeRec.GET("Plant Type");

                                                                VALIDATE("Plant No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              CheckCompanyIC;
                                                              PlantTypeRec.Code := "Plant Type";
                                                              IF PAGE.RUNMODAL(0,PlantTypeRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Plant Type", PlantTypeRec.Code);
                                                            END;

                                                   CaptionML=ENU=Plant Type }
    { 11012582;;Plant No.          ;Code10        ;TableRelation=IF (Receiving Company=FILTER('')) "Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Plant No." = '' THEN
                                                                  EXIT;

                                                                TESTFIELD("Plant Type");
                                                                CheckCompanyIC;
                                                                PlantNoRec.GET("Plant Type", "Plant No.");

                                                                VALIDATE("Cost Component Plant");
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              CheckCompanyIC;
                                                              PlantNoRec."Plant Type" := "Plant Type";
                                                              PlantNoRec."No." := "Plant No.";
                                                              IF PAGE.RUNMODAL(0,PlantNoRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Plant No.", PlantNoRec."No.");
                                                            END;

                                                   CaptionML=ENU=Plant No. }
    { 11012583;;Cost Component Plant;Code10       ;TableRelation=IF (Receiving Company=FILTER('')) "Cost Component Plant";
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Cost Component Plant" = '' THEN
                                                                  EXIT;

                                                                TESTFIELD("Plant Type");
                                                                CheckCompanyIC;
                                                                CostCompPlantRec.GET("Cost Component Plant");
                                                                CheckPlantCostComponentType();
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              CheckCompanyIC;
                                                              CostCompPlantRec.Code := "Cost Component Plant";
                                                              IF PAGE.RUNMODAL(0,CostCompPlantRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Cost Component Plant", CostCompPlantRec.Code);
                                                            END;

                                                   CaptionML=ENU=Cost Component Plant }
    { 11012590;;Country/Region of Origin/Dest.;Code10;
                                                   TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region of Origin/Destination }
    { 11012600;;Entity Type        ;Option        ;OnValidate=BEGIN
                                                                //**4PS
                                                                ValidateEntityType;
                                                              END;

                                                   CaptionML=ENU=Entity Type;
                                                   OptionCaptionML=ENU=None,Cable,Device,Extra Need,Cable Transit,,,,,Position;
                                                   OptionString=None,Cable,Device,ExtraNeed,CableTransit,,,,,Position;
                                                   Description=Engineering }
    { 11012610;;System No.         ;Code20        ;CaptionML=ENU=System No.;
                                                   Description=Engineering;
                                                   Editable=No }
    { 11012620;;Entity No.         ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Assembly Yard Number Object"."Entity No." WHERE (Project No.=FIELD(Job No.),
                                                                                                                                                     Yard No.=FIELD(Yard No.),
                                                                                                                                                     Entity Type=FIELD(Entity Type),
                                                                                                                                                     System No.=FIELD(System No.));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                ValidateEntityNo;
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              LookupEntityNo;
                                                            END;

                                                   CaptionML=ENU=Entity No.;
                                                   Description=Engineering }
    { 11012630;;Cable Transit Pos. ;Option        ;CaptionML=ENU=Cable Transit Postion;
                                                   OptionCaptionML=ENU=" ,From Side,To Side";
                                                   OptionString=[ ,From,To];
                                                   Description=Engineering;
                                                   Editable=No }
    { 11012640;;Yard No.           ;Code20        ;CaptionML=ENU=Yard No.;
                                                   Description=Engineering;
                                                   Editable=No }
    { 11012650;;Purchase Route Reference;Code20   ;CaptionML=ENU=Purchase Route Reference;
                                                   Editable=No }
    { 11012660;;Employee No.       ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No. }
    { 11012700;;Cost Component     ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Cost Component";
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                ValidateCostComponent;
                                                              END;

                                                   OnLookup=BEGIN
                                                              //**4PS
                                                              CheckCompanyIC;  //db, 11-05-11: M23927
                                                              CostCompRec.Code := "Cost Component";
                                                              IF PAGE.RUNMODAL(0,CostCompRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Cost Component", CostCompRec.Code);
                                                            END;

                                                   CaptionML=ENU=Cost Component }
    { 11012801;;Service Location No.;Code20       ;TableRelation="Service Location".No.;
                                                   CaptionML=ENU=Service Location No.;
                                                   Editable=No }
    { 11012804;;Service Contract No.;Code20       ;TableRelation=Service-Contract.No.;
                                                   CaptionML=ENU=Service Contract No.;
                                                   Editable=No }
    { 11012805;;Additional Cost (Service);Boolean ;OnValidate=BEGIN
                                                                //**4PS
                                                                ValidateAdditionalCost;
                                                              END;

                                                   CaptionML=ENU=Additional Cost (Service) }
    { 11012806;;Service Source Type;Option        ;InitValue=Other;
                                                   CaptionML=ENU=Service Source Type;
                                                   OptionCaptionML=ENU=Call,Contract,Other,Estimate;
                                                   OptionString=Call,Contract,Other,Estimate;
                                                   Editable=No }
    { 11012808;;Base Service Order No.;Code20     ;TableRelation="Service Order".No.;
                                                   CaptionML=ENU=Base Service Order No.;
                                                   Editable=No }
    { 11012810;;Deliver            ;Option        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF Deliver = Deliver::Location THEN
                                                                  "Ship To Location" := '';
                                                                IF Deliver = Deliver::"Service Location" THEN
                                                                  ServOrderRec.GET("Service Order No.");
                                                                IF Deliver = Deliver::"Project Location" THEN
                                                                  ProjRec.GET("Job No.");
                                                              END;

                                                   CaptionML=ENU=Deliver;
                                                   OptionCaptionML=ENU=Location,Service Location,Project Location;
                                                   OptionString=Location,Service Location,Project Location }
    { 11012820;;Rental Unit        ;Code20        ;TableRelation="Rental Unit"."Rental Unit" WHERE (Project No.=FIELD(Job No.));
                                                   CaptionML=ENU=Rental Unit }
    { 11012840;;Service Control Year;Integer      ;CaptionML=ENU=Service Control Year;
                                                   Editable=No }
    { 11012900;;SKU Surcharge Revaluation;Boolean ;CaptionML=ENU=SKU Surcharge Revaluation }
    { 11012910;;SKU Surcharge (Calculated);Decimal;CaptionML=ENU=SKU Surcharge (Calculated) }
    { 11012920;;SKU Surcharge (Revalued);Decimal  ;CaptionML=ENU=SKU Surcharge (Revalued) }
    { 11012930;;Project Stock      ;Boolean       ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Project Stock" THEN BEGIN
                                                                  IF ("Job No." = '') OR (NOT ("Entry Type" IN ["Entry Type"::Purchase, "Entry Type"::Sale])) THEN
                                                                    "Project Stock" := FALSE
                                                                  ELSE BEGIN
                                                                    InventorySetup.GET;
                                                                    IF NOT InventorySetup.JobInventoryByStockRelease("Job No.") THEN
                                                                      "Project Stock" := FALSE;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Project Stock }
    { 11012940;;Comments for Logistics;Text80     ;CaptionML=ENU=Comments for Logistics }
    { 11012950;;Cost Plus Entry Created;Boolean   ;CaptionML=ENU=Cost Plus Entry Created;
                                                   Editable=No }
    { 11012960;;IC Inventory Line Type;Option     ;CaptionML=ENU=IC Inventory Order Line;
                                                   OptionCaptionML=ENU=" ,Order,Delivery,Transfer";
                                                   OptionString=,Order,Delivery,Transfer;
                                                   Editable=No }
    { 11012970;;Delivery Time      ;Time          ;CaptionML=ENU=Delivery Time }
    { 11012980;;FSC Type Code      ;Code10        ;TableRelation="FSC Type";
                                                   CaptionML=ENU=FSC Type Code }
    { 11012990;;Service Object No. ;Code20        ;TableRelation="Service Order Object"."Object No." WHERE (Service Order No.=FIELD(Service Order No.));
                                                   CaptionML=ENU=Service Object No. }
    { 99000755;;Overhead Rate      ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Value Entry Type" <> "Value Entry Type"::"Direct Cost") OR
                                                                   ("Item Charge No." <> '')
                                                                THEN BEGIN
                                                                  "Overhead Rate" := 0;
                                                                  VALIDATE("Indirect Cost %",0);
                                                                END ELSE
                                                                  VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=ENU=Overhead Rate;
                                                   DecimalPlaces=0:5 }
    { 99000756;;Single-Level Material Cost;Decimal;CaptionML=ENU=Single-Level Material Cost;
                                                   AutoFormatType=1 }
    { 99000757;;Single-Level Capacity Cost;Decimal;CaptionML=ENU=Single-Level Capacity Cost;
                                                   AutoFormatType=1 }
    { 99000758;;Single-Level Subcontrd. Cost;Decimal;
                                                   CaptionML=ENU=Single-Level Subcontrd. Cost;
                                                   AutoFormatType=1 }
    { 99000759;;Single-Level Cap. Ovhd Cost;Decimal;
                                                   CaptionML=ENU=Single-Level Cap. Ovhd Cost;
                                                   AutoFormatType=1 }
    { 99000760;;Single-Level Mfg. Ovhd Cost;Decimal;
                                                   CaptionML=ENU=Single-Level Mfg. Ovhd Cost;
                                                   AutoFormatType=1 }
    { 99000761;;Rolled-up Material Cost;Decimal   ;CaptionML=ENU=Rolled-up Material Cost;
                                                   AutoFormatType=1 }
    { 99000762;;Rolled-up Capacity Cost;Decimal   ;CaptionML=ENU=Rolled-up Capacity Cost;
                                                   AutoFormatType=1 }
    { 99000763;;Rolled-up Subcontracted Cost;Decimal;
                                                   CaptionML=ENU=Rolled-up Subcontracted Cost;
                                                   AutoFormatType=1 }
    { 99000764;;Rolled-up Mfg. Ovhd Cost;Decimal  ;CaptionML=ENU=Rolled-up Mfg. Ovhd Cost;
                                                   AutoFormatType=1 }
    { 99000765;;Rolled-up Cap. Overhead Cost;Decimal;
                                                   CaptionML=ENU=Rolled-up Cap. Overhead Cost;
                                                   AutoFormatType=1 }
  }
  KEYS
  {
    {    ;Journal Template Name,Journal Batch Name,Line No.;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Entry Type,Item No.,Variant Code,Location Code,Bin Code,Posting Date;
                                                   SumIndexFields=Quantity (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Entry Type,Item No.,Variant Code,New Location Code,New Bin Code,Posting Date;
                                                   SumIndexFields=Quantity (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Item No.,Posting Date                   ;MaintainSIFTIndex=No }
    {    ;Entry Type,Item No.,Blocked,Job No.,Service Order No.,Variant Code,Location Code,Bin Code,Delivery Date;
                                                   SumIndexFields=Quantity (Base),Quantity (Reserved);
                                                   MaintainSIFTIndex=No }
    {    ;Job No.,Ship To Location,Line No.       ;MaintainSIFTIndex=No }
    {    ;Delivery Date,Journal Template Name,Journal Batch Name;
                                                   MaintainSIFTIndex=No }
    {    ;Production Order,Production Status,Job No.,Element,Posting Date;
                                                   SumIndexFields=Amount,Ovh.Surch.Expected Costs (LCY);
                                                   MaintainSIFTIndex=No }
    {    ;Production Order,Job No.,Main Project No.,Chapter,Paragraph,Posting Date,Cost Type,Shortcut Dimension 2 Code,Element,Extension Contract;
                                                   SumIndexFields=Amount,Ovh.Surch.Expected Costs (LCY);
                                                   MaintainSIFTIndex=No }
    {    ;Location Code,Shelf No.,Item No.        ;MaintainSIFTIndex=No }
    {    ;Production Order,Main Project No.,Job No.,Posting Date;
                                                   SumIndexFields=Amount,Ovh.Surch.Expected Costs (LCY);
                                                   MaintainSIFTIndex=No }
    {    ;Service Contract No.,Service Source Type,Cost Component,Cost Type,Shortcut Dimension 2 Code,Service Control Year,Posting Date;
                                                   SumIndexFields=Amount,Ovh.Surch.Expected Costs (LCY);
                                                   MaintainSIFTIndex=No }
    {    ;Main Project No.,Job No.,Cost Component,Cost Type,Shortcut Dimension 2 Code,Production Order,Posting Date;
                                                   SumIndexFields=Amount,Ovh.Surch.Expected Costs (LCY);
                                                   MaintainSIFTIndex=No }
    {    ;Main Project No.,Cost Component         ;MaintainSIFTIndex=No }
    {    ;Service Order No.,Cost Type,Shortcut Dimension 2 Code,Cost Component,Service Control Year,Posting Date,Additional Cost (Service);
                                                   SumIndexFields=Amount,Ovh.Surch.Expected Costs (LCY);
                                                   MaintainSIFTIndex=No }
    {    ;Service Location No.,Service Source Type,Cost Type,Shortcut Dimension 2 Code,Cost Component,Service Control Year,Posting Date;
                                                   SumIndexFields=Amount,Ovh.Surch.Expected Costs (LCY);
                                                   MaintainSIFTIndex=No }
    {    ;Base Service Order No.,Service Order No.,Cost Component,Posting Date;
                                                   SumIndexFields=Amount,Ovh.Surch.Expected Costs (LCY);
                                                   MaintainSIFTIndex=No }
    {    ;Job No.,Deliver,Ship To Location,Location Code,Bin Code (Project Inventory),Shelf No.,Item No.;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=%1 must be reduced.';
      Text002@1002 : TextConst 'ENU=You cannot change %1 when %2 is %3.';
      Text006@1005 : TextConst 'ENU=You must not enter %1 in a revaluation sum line.';
      ItemJnlTemplate@1007 : Record 82;
      ItemJnlBatch@1008 : Record 233;
      ItemJnlLine@1009 : Record 83;
      Item@1010 : Record 27;
      ItemVariant@1012 : Record 5401;
      GLSetup@1014 : Record 98;
      MfgSetup@1034 : Record 99000765;
      WorkCenter@1040 : Record 99000754;
      MachineCenter@1039 : Record 99000758;
      Location@1048 : Record 14;
      Bin@1030 : Record 7354;
      ICProjSetupRec@1210190010 : Record 315;
      LocRec@1100485003 : Record 14;
      ProjRec@1100485002 : Record 11072003;
      ProjElemRec@1100485001 : Record 11012010;
      ProjLocRec@1100485000 : Record 11012011;
      ExtRec@1100485009 : Record 11012004;
      DimValRec@1100485008 : Record 349;
      ServOrderRec@1100485006 : Record 11012823;
      PlantSetupRec@1100485023 : Record 11012550;
      PlantTypeRec@1100485024 : Record 11012551;
      PlantNoRec@1100485025 : Record 11012552;
      CostCompPlantRec@1100485026 : Record 11012575;
      CostCompRec@1210190004 : Record 11012012;
      GLAcc@1100485027 : Record 15;
      PrevCheckedItemJnlLineRec@1100525001 : Record 83;
      AssemblyYardNumberObject@1100528401 : Record 11020596;
      Reservation@1016 : Page 498;
      ItemCheckAvail@1021 : Codeunit 311;
      ReserveItemJnlLine@1022 : Codeunit 99000835;
      NoSeriesMgt@1023 : Codeunit 396;
      UOMMgt@1024 : Codeunit 5402;
      DimMgt@1027 : Codeunit 408;
      ElementFormat@11012020 : Codeunit 11012022;
      ItemMgt@1100485010 : Codeunit 11012033;
      InventorySetup@11012022 : Record 313;
      UserMgt@1033 : Codeunit 5700;
      CalendarMgt@1041 : Codeunit 99000755;
      CostCalcMgt@1042 : Codeunit 5836;
      PurchPriceCalcMgt@1020 : Codeunit 7010;
      SalesPriceCalcMgt@1025 : Codeunit 7000;
      WMSManagement@1026 : Codeunit 7302;
      WhseValidateSourceLine@1032 : Codeunit 5777;
      PhysInvtEntered@1028 : Boolean;
      GLSetupRead@1029 : Boolean;
      MfgSetupRead@1035 : Boolean;
      UnitCost@1031 : Decimal;
      Text007@1006 : TextConst 'ENU="New "';
      Text012@1045 : TextConst 'ENU=The update has been interrupted to respect the warning.';
      Text021@1051 : TextConst 'ENU=The entered bin code %1 is different from the bin code %2 in production order component %3.\\Are you sure that you want to post the consumption from bin code %1?';
      Text029@1047 : TextConst 'ENU=must be positive';
      Text030@1046 : TextConst 'ENU=must be negative';
      Text031@1043 : TextConst 'ENU=You can not insert item number %1 because it is not produced on released production order %2.';
      Text032@1000 : TextConst 'ENU=When posting, the entry %1 will be opened first.';
      Text033@1049 : TextConst 'ENU=If the item carries serial or lot numbers, then you must use the %1 field in the %2 window.';
      Text034@1050 : TextConst 'ENU=You cannot revalue individual item ledger entries for items that use the average costing method.';
      Dim1@1210190001 : Code[20];
      Dim2@1210190000 : Code[20];
      Text11012001@1210190012 : TextConst 'ENU=Quantity Released exceeds Quantity for Line %1';
      UpdateAction@1100485011 : 'Insert,Modify,Delete';
      Text11012002@1100525000 : TextConst 'ENU=Item %1 is not dispatched to %2 %3.';
      DPA_Management@1100000999 : Codeunit 11012783;
      Text11012003@1210190003 : TextConst 'ENU=The entered %1 %2 is different from the %1 %3 in %4 %5.';
      Text11012004@1100528400 : TextConst 'ENU=You cannot post more than %1 units.';
      ExistingJobOrServiceItemJlnLineQtyChanged@1100528800 : Boolean;
      OldSrvOrJobItemJlnLineQuantity@1100528801 : Decimal;

    PROCEDURE EmptyLine@5() : Boolean;
    BEGIN
      EXIT(
        (Quantity = 0) AND
        ((TimeIsEmpty AND ("Item No." = '')) OR
         ("Value Entry Type" = "Value Entry Type"::Revaluation)));
    END;

    PROCEDURE IsValueEntryForDeletedItem@22() : Boolean;
    BEGIN
      EXIT(
        (("Entry Type" = "Entry Type"::Output) OR ("Value Entry Type" = "Value Entry Type"::Rounding)) AND
        ("Item No." = '') AND ("Item Charge No." = '') AND ("Invoiced Qty. (Base)" <> 0));
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE CalcBaseTime@28(Qty@1000 : Decimal) : Decimal;
    BEGIN
      IF "Run Time" <> 0 THEN
        TESTFIELD("Qty. per Cap. Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Cap. Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE UpdateAmount@23();
    BEGIN
      Amount := ROUND(Quantity * "Unit Amount");
    END;

    LOCAL PROCEDURE SelectItemEntry@3(CurrentFieldNo@1000 : Integer);
    VAR
      ItemLedgEntry@1001 : Record 32;
      ItemJnlLine2@1002 : Record 83;
    BEGIN
      IF ("Entry Type" = "Entry Type"::Output) AND
         ("Value Entry Type" <> "Value Entry Type"::Revaluation) AND
         (CurrentFieldNo = FIELDNO("Applies-to Entry"))
      THEN BEGIN
        ItemLedgEntry.SETCURRENTKEY(
          "Order Type","Order No.","Order Line No.","Entry Type","Prod. Order Comp. Line No.");
        ItemLedgEntry.SETRANGE("Order Type","Order Type"::Production);
        ItemLedgEntry.SETRANGE("Order No.","Order No.");
        ItemLedgEntry.SETRANGE("Order Line No.","Order Line No.");
        ItemLedgEntry.SETRANGE("Entry Type","Entry Type");
        ItemLedgEntry.SETRANGE("Prod. Order Comp. Line No.",0);
      END ELSE BEGIN
        ItemLedgEntry.SETCURRENTKEY("Item No.",Positive);
        ItemLedgEntry.SETRANGE("Item No.","Item No.");
      END;

      IF "Location Code" <> '' THEN
        ItemLedgEntry.SETRANGE("Location Code","Location Code");

      IF CurrentFieldNo = FIELDNO("Applies-to Entry") THEN BEGIN
        ItemLedgEntry.SETRANGE(Positive,(Signed(Quantity) < 0) OR ("Value Entry Type" = "Value Entry Type"::Revaluation));
        IF "Value Entry Type" <> "Value Entry Type"::Revaluation THEN BEGIN
          ItemLedgEntry.SETCURRENTKEY("Item No.",Open);
          ItemLedgEntry.SETRANGE(Open,TRUE);
        END;
      END ELSE
        ItemLedgEntry.SETRANGE(Positive,FALSE);

      IF PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK THEN BEGIN
        ItemJnlLine2 := Rec;
        IF CurrentFieldNo = FIELDNO("Applies-to Entry") THEN
          ItemJnlLine2.VALIDATE("Applies-to Entry",ItemLedgEntry."Entry No.")
        ELSE
          ItemJnlLine2.VALIDATE("Applies-from Entry",ItemLedgEntry."Entry No.");
        CheckItemAvailable(CurrentFieldNo);
        Rec := ItemJnlLine2;
      END;
    END;

    LOCAL PROCEDURE CheckItemAvailable@1(CalledByFieldNo@1000 : Integer);
    BEGIN
      IF (CurrFieldNo = 0) OR (CurrFieldNo <> CalledByFieldNo) THEN // Prevent two checks on quantity
        EXIT;

      IF (CurrFieldNo <> 0) AND ("Item No." <> '') AND (Quantity <> 0) AND
         ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND ("Item Charge No." = '')
      THEN
        //IF ItemCheckAvail.ItemJnlCheckLine(Rec) THEN //**4PS.o
        IF ItemCheckAvail.ItemJnlCheckLine(Rec, ExistingJobOrServiceItemJlnLineQtyChanged, OldSrvOrJobItemJlnLineQuantity) THEN //**4PS.n
          ItemCheckAvail.RaiseUpdateInterruptedError;
    END;

    LOCAL PROCEDURE GetItem@2();
    BEGIN
      IF Item."No." <> "Item No." THEN
        Item.GET("Item No.");
    END;

    PROCEDURE SetUpNewLine@8(LastItemJnlLine@1000 : Record 83);
    BEGIN
      MfgSetup.GET;
      ItemJnlTemplate.GET("Journal Template Name");
      ItemJnlBatch.GET("Journal Template Name","Journal Batch Name");
      ItemJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
      ItemJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      IF ItemJnlLine.FINDFIRST THEN BEGIN
        "Posting Date" := LastItemJnlLine."Posting Date";
        "Document Date" := LastItemJnlLine."Posting Date";
        IF (ItemJnlTemplate.Type IN
            [ItemJnlTemplate.Type::Consumption,ItemJnlTemplate.Type::Output])
        THEN BEGIN
          IF NOT MfgSetup."Doc. No. Is Prod. Order No." THEN
            "Document No." := LastItemJnlLine."Document No."
        END ELSE
          "Document No." := LastItemJnlLine."Document No.";
      END ELSE BEGIN
        "Posting Date" := WORKDATE;
        "Document Date" := WORKDATE;
        IF ItemJnlBatch."No. Series" <> '' THEN BEGIN
          CLEAR(NoSeriesMgt);
          "Document No." := NoSeriesMgt.TryGetNextNo(ItemJnlBatch."No. Series","Posting Date");
        END;
        IF (ItemJnlTemplate.Type IN
            [ItemJnlTemplate.Type::Consumption,ItemJnlTemplate.Type::Output]) AND
           NOT MfgSetup."Doc. No. Is Prod. Order No."
        THEN
          IF ItemJnlBatch."No. Series" <> '' THEN BEGIN
            CLEAR(NoSeriesMgt);
            "Document No." := NoSeriesMgt.GetNextNo(ItemJnlBatch."No. Series","Posting Date",FALSE);
          END;
      END;
      "Recurring Method" := LastItemJnlLine."Recurring Method";
      "Entry Type" := LastItemJnlLine."Entry Type";
      "Source Code" := ItemJnlTemplate."Source Code";
      "Reason Code" := ItemJnlBatch."Reason Code";
      "Posting No. Series" := ItemJnlBatch."Posting No. Series";
      IF ItemJnlTemplate.Type = ItemJnlTemplate.Type::Revaluation THEN BEGIN
        "Value Entry Type" := "Value Entry Type"::Revaluation;
        "Entry Type" := "Entry Type"::"Positive Adjmt.";
      END;

      CASE "Entry Type" OF
        "Entry Type"::Purchase:
          //"Location Code" := UserMgt.GetLocation(1,'',UserMgt.GetPurchasesFilter); //**4PS.o
          "Location Code" := UserMgt.GetLocation(1,'',UserMgt.GetPurchasesDefault); //**4PS.n
        "Entry Type"::Sale:
          "Location Code" := UserMgt.GetLocation(0,'',UserMgt.GetSalesFilter);
        "Entry Type"::Output:
          CLEAR(DimMgt);
      END;

      IF Location.GET("Location Code") THEN
        IF  Location."Directed Put-away and Pick" THEN
          "Location Code" := '';

      //**4PS.sn
      //M25827
      ItemJnlTemplate.GET("Journal Template Name");
      IF (ItemJnlTemplate."Location Code" <> '') THEN
        "Location Code" := ItemJnlTemplate."Location Code"; //Can't validate yet
      //**4PS.en

      //**4PS.sn
      InventorySetup.GET;
      Blocked := InventorySetup."Default Blocked";
      //**4PS.en
    END;

    LOCAL PROCEDURE GetUnitAmount@6(CalledByFieldNo@1000 : Integer);
    BEGIN
      RetrieveCosts;
      IF ("Value Entry Type" <> "Value Entry Type"::"Direct Cost") OR
         ("Item Charge No." <> '')
      THEN
        EXIT;

      CASE "Entry Type" OF
        "Entry Type"::Purchase:
          PurchPriceCalcMgt.FindItemJnlLinePrice(Rec,CalledByFieldNo);
        "Entry Type"::Sale:
          SalesPriceCalcMgt.FindItemJnlLinePrice(Rec,CalledByFieldNo);
        "Entry Type"::"Positive Adjmt.":
          "Unit Amount" :=
            ROUND(
              ((UnitCost - "Overhead Rate") * "Qty. per Unit of Measure") / (1 + "Indirect Cost %" / 100),
              GLSetup."Unit-Amount Rounding Precision");
        "Entry Type"::"Negative Adjmt.":
          "Unit Amount" := UnitCost * "Qty. per Unit of Measure";
        "Entry Type"::Transfer:
          "Unit Amount" := 0;
      END;

      //**4PS.sn
      InventorySetup.GET;
      IF (("Job No." <> '') OR ("Service Order No." <> '')) AND (NOT InventorySetup."Item Sales Price for Proj/Serv") THEN
        IF ("Entry Type" = "Entry Type"::Purchase) OR ("Entry Type" = "Entry Type"::Sale) THEN
          "Unit Amount" := UnitCost * "Qty. per Unit of Measure";
      //**4PS.en
    END;

    PROCEDURE ShowReservation@12();
    BEGIN
      //**4PS changed to global
      CLEAR(Reservation);
      Reservation.SetItemJnlLine(Rec);
      Reservation.RUNMODAL;
    END;

    PROCEDURE Signed@20(Value@1000 : Decimal) : Decimal;
    BEGIN
      //**4PS.sn DP00121 (C005545)
      IF ("Entry Type" = "Entry Type"::Sale) AND (Quantity < 0) AND (("Job No." + "Service Order No.") <> '') THEN
        EXIT(Value);
      //**4PS.en DP00121 (C005545)

      CASE "Entry Type" OF
        "Entry Type"::Purchase,
        "Entry Type"::"Positive Adjmt.",
        "Entry Type"::Output,
        "Entry Type"::"Assembly Output":
          EXIT(Value);
        "Entry Type"::Sale,
        "Entry Type"::"Negative Adjmt.",
        "Entry Type"::Consumption,
        "Entry Type"::Transfer,
        "Entry Type"::"Assembly Consumption":
          EXIT(-Value);
      END;
    END;

    PROCEDURE IsInbound@31() : Boolean;
    BEGIN
      EXIT((Signed(Quantity) > 0) OR (Signed("Invoiced Quantity") > 0));
    END;

    LOCAL PROCEDURE BlockDynamicTracking@17(SetBlock@1000 : Boolean);
    BEGIN
      ReserveItemJnlLine.Block(SetBlock);
    END;

    PROCEDURE OpenItemTrackingLines@6500(IsReclass@1000 : Boolean);
    BEGIN
      TESTFIELD("Quantity (Base)"); //**4PS DP00121
      ReserveItemJnlLine.CallItemTracking(Rec,IsReclass);
    END;

    LOCAL PROCEDURE CreateDim@13(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1007 : Integer;No3@1006 : Code[20];Type4@1100485001 : Integer;No4@1100485000 : Code[20];Type5@1100525001 : Integer;No5@1100525000 : Code[20];Type6@1100528251 : Integer;No6@1100528250 : Code[20]);
    VAR
      TableID@1004 : ARRAY [10] OF Integer;
      No@1005 : ARRAY [10] OF Code[20];
      LoopCount@1210190000 : Integer;
    BEGIN
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;

      //**4PS.sn
      TableID[4] := Type4;
      No[4] := No4;
      TableID[5] := Type5;  //** 4PS 09-06-2010
      No[5] := No5;         //** 4PS 09-06-2010
      TableID[6] := Type6;  //** 4PS
      No[6] := No6;         //** 4PS
      //**4PS.en

      //No dimension for project or serviceorder in case of IC; M27664 and M27668 sn
      IF ("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME)  THEN BEGIN
        FOR LoopCount := 1 TO 5 DO BEGIN
          IF (TableID[LoopCount] = DATABASE::"Service Order") OR
             (TableID[LoopCount] = DATABASE::Job)  THEN
          BEGIN
            No[LoopCount] := '';
          END;
        END;
      END;
      //M27664 and M27668 en

      //**4PS.sn
      Dim1 := "Shortcut Dimension 1 Code";
      Dim2 := "Shortcut Dimension 2 Code";
      DimMgt.SetCompany("Receiving Company"); //**4PS.n
      //**4PS.en

      //"Shortcut Dimension 1 Code" := ''; //**4PS.o Must be kept for Department Authorization
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,"Source Code",
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      //**4PS.sn
      IF (Dim1 <> '') AND ("Shortcut Dimension 1 Code" = '') THEN
        "Shortcut Dimension 1 Code" := Dim1;
      ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");

      IF (Dim2 <> '') AND
         (("Shortcut Dimension 2 Code" = '') OR
          (CurrFieldNo = FIELDNO("Shortcut Dimension 2 Code")))
      THEN BEGIN
        "Shortcut Dimension 2 Code" := Dim2;
        ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
      END;
      //**4PS.en

      IF "Entry Type" = "Entry Type"::Transfer THEN BEGIN
        "New Dimension Set ID" := "Dimension Set ID";
        "New Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        "New Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
      END;
    END;

    PROCEDURE CopyDim@46(DimesionSetID@1000 : Integer);
    VAR
      DimSetEntry@1002 : Record 480;
    BEGIN
      ReadGLSetup;
      "Dimension Set ID" := DimesionSetID;
      DimSetEntry.SETRANGE("Dimension Set ID",DimesionSetID);
      DimSetEntry.SETRANGE("Dimension Code",GLSetup."Global Dimension 1 Code");
      IF DimSetEntry.FINDFIRST THEN
        "Shortcut Dimension 1 Code" := DimSetEntry."Dimension Value Code"
      ELSE
        "Shortcut Dimension 1 Code" := '';
      DimSetEntry.SETRANGE("Dimension Code",GLSetup."Global Dimension 2 Code");
      IF DimSetEntry.FINDFIRST THEN
        "Shortcut Dimension 2 Code" := DimSetEntry."Dimension Value Code"
      ELSE
        "Shortcut Dimension 2 Code" := '';
    END;

    LOCAL PROCEDURE CreateProdDim@25();
    VAR
      ProdOrder@1008 : Record 5405;
      ProdOrderLine@1009 : Record 5406;
      ProdOrderComp@1010 : Record 5407;
      DimSetIDArr@1001 : ARRAY [10] OF Integer;
      i@1000 : Integer;
    BEGIN
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" := 0;
      IF ("Order Type" <> "Order Type"::Production) OR ("Order No." = '') THEN
        EXIT;
      ProdOrder.GET(ProdOrder.Status::Released,"Order No.");
      i := 1;
      DimSetIDArr[i] := ProdOrder."Dimension Set ID";
      IF "Order Line No." <> 0 THEN BEGIN
        i := i + 1;
        ProdOrderLine.GET(ProdOrderLine.Status::Released,"Order No.","Order Line No.");
        DimSetIDArr[i] := ProdOrderLine."Dimension Set ID";
      END;
      IF "Prod. Order Comp. Line No." <> 0 THEN BEGIN
        i := i + 1;
        ProdOrderComp.GET(ProdOrderLine.Status::Released,"Order No.","Order Line No.","Prod. Order Comp. Line No.");
        DimSetIDArr[i] := ProdOrderComp."Dimension Set ID";
      END;
      "Dimension Set ID" := DimMgt.GetCombinedDimensionSetID(DimSetIDArr,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    LOCAL PROCEDURE CreateAssemblyDim@42();
    VAR
      AssemblyHeader@1008 : Record 900;
      AssemblyLine@1009 : Record 901;
      DimSetIDArr@1001 : ARRAY [10] OF Integer;
      i@1000 : Integer;
    BEGIN
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" := 0;
      IF ("Order Type" <> "Order Type"::Assembly) OR ("Order No." = '') THEN
        EXIT;
      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,"Order No.");
      i := 1;
      DimSetIDArr[i] := AssemblyHeader."Dimension Set ID";
      IF "Order Line No." <> 0 THEN BEGIN
        i := i + 1;
        AssemblyLine.GET(AssemblyLine."Document Type"::Order,"Order No.","Order Line No.");
        DimSetIDArr[i] := AssemblyLine."Dimension Set ID";
      END;
      "Dimension Set ID" := DimMgt.GetCombinedDimensionSetID(DimSetIDArr,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE ValidateShortcutDimCode@9(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      //**4PS.sn
      IF FieldNumber = 1 THEN
        DimMgt.CheckDepartmentAuthorization(DATABASE::"Item Journal Line", ShortcutDimCode);
      DimMgt.SetCompany("Receiving Company");
      //**4PS.en
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE LookupShortcutDimCode@18(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.SetCompany("Receiving Company"); //**4PS.n
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE ShowShortcutDimCode@15(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.SetCompany("Receiving Company"); //**4PS.n
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    PROCEDURE ValidateNewShortcutDimCode@19(FieldNumber@1000 : Integer;VAR NewShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.SetCompany("Receiving Company"); //**4PS.n
      DimMgt.ValidateShortcutDimValues(FieldNumber,NewShortcutDimCode,"New Dimension Set ID");
    END;

    PROCEDURE LookupNewShortcutDimCode@21(FieldNumber@1000 : Integer;VAR NewShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.SetCompany("Receiving Company"); //**4PS.n
      DimMgt.LookupDimValueCode(FieldNumber,NewShortcutDimCode);
      DimMgt.ValidateShortcutDimValues(FieldNumber,NewShortcutDimCode,"New Dimension Set ID");
    END;

    PROCEDURE ShowNewShortcutDimCode@16(VAR NewShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.SetCompany("Receiving Company"); //**4PS.n
      DimMgt.GetShortcutDimensions("New Dimension Set ID",NewShortcutDimCode);
    END;

    LOCAL PROCEDURE InitRevalJnlLine@5800(ItemLedgEntry2@1000 : Record 32);
    VAR
      ItemApplnEntry@1002 : Record 339;
      ValueEntry@1001 : Record 5802;
      CostAmtActual@1003 : Decimal;
    BEGIN
      IF "Value Entry Type" <> "Value Entry Type"::Revaluation THEN
        EXIT;

      ItemLedgEntry2.TESTFIELD("Item No.","Item No.");
      ItemLedgEntry2.TESTFIELD("Completely Invoiced",TRUE);
      ItemLedgEntry2.TESTFIELD(Positive,TRUE);
      ItemApplnEntry.CheckAppliedFromEntryToAdjust(ItemLedgEntry2."Entry No.");

      VALIDATE("Entry Type",ItemLedgEntry2."Entry Type");
      "Posting Date" := ItemLedgEntry2."Posting Date";
      VALIDATE("Unit Amount",0);
      VALIDATE(Quantity,ItemLedgEntry2."Invoiced Quantity");

      ValueEntry.RESET;
      ValueEntry.SETCURRENTKEY("Item Ledger Entry No.","Entry Type");
      ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgEntry2."Entry No.");
      ValueEntry.SETFILTER("Entry Type",'<>%1',ValueEntry."Entry Type"::Rounding);
      ValueEntry.FIND('-');
      REPEAT
        IF NOT (ValueEntry."Expected Cost" OR ValueEntry."Partial Revaluation") THEN
          CostAmtActual := CostAmtActual + ValueEntry."Cost Amount (Actual)";
      UNTIL ValueEntry.NEXT = 0;

      VALIDATE("Inventory Value (Calculated)",CostAmtActual);
      VALIDATE("Inventory Value (Revalued)",CostAmtActual);

      "Location Code" := ItemLedgEntry2."Location Code";
      "Variant Code" := ItemLedgEntry2."Variant Code";
      "Applies-to Entry" := ItemLedgEntry2."Entry No.";
      CopyDim(ItemLedgEntry2."Dimension Set ID");
    END;

    LOCAL PROCEDURE ReadGLSetup@5801();
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        GLSetupRead := TRUE;
      END;
    END;

    LOCAL PROCEDURE RetrieveCosts@5803();
    VAR
      StockkeepingUnit@1000 : Record 5700;
    BEGIN
      IF ("Value Entry Type" <> "Value Entry Type"::"Direct Cost") OR
         ("Item Charge No." <> '')
      THEN
        EXIT;

      ReadGLSetup;
      GetItem;
      IF StockkeepingUnit.GET("Location Code","Item No.","Variant Code") THEN
      BEGIN //**4PS.n
        UnitCost := StockkeepingUnit."Unit Cost";
        IF StockkeepingUnit.Consignment THEN  //**4PS.n M23305
          UnitCost := 0; //**4PS.n M23305
      END //**4PS.n
      ELSE
        UnitCost := Item."Unit Cost";

      IF "Entry Type" = "Entry Type"::Transfer THEN
        UnitCost := 0
      ELSE
        IF Item."Costing Method" <> Item."Costing Method"::Standard THEN
          UnitCost := ROUND(UnitCost,GLSetup."Unit-Amount Rounding Precision");
    END;

    LOCAL PROCEDURE CalcUnitCost@5804(ItemLedgEntry@1000 : Record 32) : Decimal;
    VAR
      ValueEntry@1001 : Record 5802;
      UnitCost@1002 : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        RESET;
        SETCURRENTKEY("Item Ledger Entry No.");
        SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
        CALCSUMS("Cost Amount (Expected)","Cost Amount (Actual)");
        UnitCost :=
          ("Cost Amount (Expected)" + "Cost Amount (Actual)") / ItemLedgEntry.Quantity;
      END;
      EXIT(ABS(UnitCost * "Qty. per Unit of Measure"));
    END;

    LOCAL PROCEDURE ClearSingleAndRolledUpCosts@4();
    BEGIN
      "Single-Level Material Cost" := "Unit Cost (Revalued)";
      "Single-Level Capacity Cost" := 0;
      "Single-Level Subcontrd. Cost" := 0;
      "Single-Level Cap. Ovhd Cost" := 0;
      "Single-Level Mfg. Ovhd Cost" := 0;
      "Rolled-up Material Cost" := "Unit Cost (Revalued)";
      "Rolled-up Capacity Cost" := 0;
      "Rolled-up Subcontracted Cost" := 0;
      "Rolled-up Mfg. Ovhd Cost" := 0;
      "Rolled-up Cap. Overhead Cost" := 0;
    END;

    LOCAL PROCEDURE GetMfgSetup@7();
    BEGIN
      IF NOT MfgSetupRead THEN
        MfgSetup.GET;
      MfgSetupRead := TRUE;
    END;

    LOCAL PROCEDURE GetProdOrderRtngLine@27(VAR ProdOrderRtngLine@1000 : Record 5409);
    BEGIN
      TESTFIELD("Order Type","Order Type"::Production);
      TESTFIELD("Order No.");
      TESTFIELD("Operation No.");

      ProdOrderRtngLine.GET(
        ProdOrderRtngLine.Status::Released,
        "Order No.","Routing Reference No.","Routing No.","Operation No.");
    END;

    PROCEDURE OnlyStopTime@24() : Boolean;
    BEGIN
      EXIT(("Setup Time" = 0) AND ("Run Time" = 0) AND ("Stop Time" <> 0));
    END;

    PROCEDURE OutputValuePosting@29() : Boolean;
    BEGIN
      EXIT(TimeIsEmpty AND ("Invoiced Quantity" <> 0) AND NOT Subcontracting);
    END;

    PROCEDURE TimeIsEmpty@26() : Boolean;
    BEGIN
      EXIT(("Setup Time" = 0) AND ("Run Time" = 0) AND ("Stop Time" = 0));
    END;

    PROCEDURE RowID1@44() : Text[250];
    VAR
      ItemTrackingMgt@1000 : Codeunit 6500;
    BEGIN
      EXIT(
        ItemTrackingMgt.ComposeRowID(DATABASE::"Item Journal Line","Entry Type",
          "Journal Template Name","Journal Batch Name",0,"Line No."));
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetBin@36(LocationCode@1000 : Code[10];BinCode@1001 : Code[20]);
    BEGIN
      IF BinCode = '' THEN
        CLEAR(Bin)
      ELSE
        IF (Bin.Code <> BinCode) OR (Bin."Location Code" <> LocationCode) THEN
          Bin.GET(LocationCode,BinCode);
    END;

    PROCEDURE ItemPosting@33() : Boolean;
    VAR
      ProdOrderRtngLine@1000 : Record 5409;
    BEGIN
      IF ("Entry Type" = "Entry Type"::Output) AND
         ("Output Quantity" <> 0) AND
         ("Operation No." <> '')
      THEN BEGIN
        ProdOrderRtngLine.GET(
          ProdOrderRtngLine.Status::Released,
          "Order No.",
          "Routing Reference No.",
          "Routing No.",
          "Operation No.");
        EXIT(ProdOrderRtngLine."Next Operation No." = '');
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckPlanningAssignment@34();
    BEGIN
      IF ("Quantity (Base)" <> 0) AND ("Item No." <> '') AND ("Posting Date" <> 0D) AND
         ("Entry Type" IN ["Entry Type"::"Negative Adjmt.","Entry Type"::"Positive Adjmt.","Entry Type"::Transfer])
      THEN BEGIN
        IF ("Entry Type" = "Entry Type"::Transfer) AND ("Location Code" = "New Location Code") THEN
          EXIT;

        ReserveItemJnlLine.AssignForPlanning(Rec);
      END;
    END;

    PROCEDURE LastOutputOperation@35(ItemJnlLine@1000 : Record 83) : Boolean;
    VAR
      ProdOrderRtngLine@1002 : Record 5409;
      ItemJnlPostLine@1001 : Codeunit 22;
      Operation@1003 : Boolean;
    BEGIN
      WITH ItemJnlLine DO BEGIN
        IF "Operation No." <> '' THEN BEGIN
          TESTFIELD("Routing No.");
          IF NOT ProdOrderRtngLine.GET(
               ProdOrderRtngLine.Status::Released,"Order No.",
               "Routing Reference No.","Routing No.","Operation No.")
          THEN
            ProdOrderRtngLine.GET(
              ProdOrderRtngLine.Status::Finished,"Order No.",
              "Routing Reference No.","Routing No.","Operation No.");
          IF Finished THEN
            ProdOrderRtngLine."Routing Status" := ProdOrderRtngLine."Routing Status"::Finished
          ELSE
            ProdOrderRtngLine."Routing Status" := ProdOrderRtngLine."Routing Status"::"In Progress";
          Operation := NOT ItemJnlPostLine.NextOperationExist(ProdOrderRtngLine);
        END ELSE
          Operation := TRUE;
      END;
      EXIT(Operation);
    END;

    PROCEDURE LookupItemNo@37();
    VAR
      ItemList@1000 : Page 31;
    BEGIN
      CASE "Entry Type" OF
        "Entry Type"::Consumption:
          LookupProdOrderComp;
        "Entry Type"::Output:
          LookupProdOrderLine;
        ELSE BEGIN
          //**4PS.sn
          ItemList.DetermineInterface(DATABASE::"Item Journal Line","Journal Template Name","Journal Batch Name",
            "Job No.","Service Order No.","Entry Type","Document No.",'',"Line No.",Element,"Extension Contract");
          IF Item.GET("Item No.") THEN
            ItemList.SETRECORD(Item);
          //**4PS.en
          ItemList.LOOKUPMODE := TRUE;
          IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
            ItemList.GETRECORD(Item);
            VALIDATE("Item No.",Item."No.");
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE LookupProdOrderLine@32();
    VAR
      ProdOrderLine@1004 : Record 5406;
      ProdOrderLineList@1001 : Page 5406;
    BEGIN
      ProdOrderLine.SetFilterByReleasedOrderNo("Order No.");
      ProdOrderLine.Status := ProdOrderLine.Status::Released;
      ProdOrderLine."Prod. Order No." := "Order No.";
      ProdOrderLine."Line No." := "Order Line No.";
      ProdOrderLine."Item No." := "Item No.";

      ProdOrderLineList.LOOKUPMODE(TRUE);
      ProdOrderLineList.SETTABLEVIEW(ProdOrderLine);
      ProdOrderLineList.SETRECORD(ProdOrderLine);

      IF ProdOrderLineList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ProdOrderLineList.GETRECORD(ProdOrderLine);
        VALIDATE("Item No.",ProdOrderLine."Item No.");
        IF "Order Line No." <> ProdOrderLine."Line No." THEN
          VALIDATE("Order Line No.",ProdOrderLine."Line No.");
      END;
    END;

    LOCAL PROCEDURE LookupProdOrderComp@11();
    VAR
      ProdOrderComp@1004 : Record 5407;
      ProdOrderCompLineList@1001 : Page 5407;
    BEGIN
      ProdOrderComp.SetFilterByReleasedOrderNo("Order No.");
      ProdOrderComp.Status := ProdOrderComp.Status::Released;
      ProdOrderComp."Prod. Order No." := "Order No.";
      ProdOrderComp."Prod. Order Line No." := "Order Line No.";
      ProdOrderComp."Line No." := "Prod. Order Comp. Line No.";
      ProdOrderComp."Item No." := "Item No.";

      ProdOrderCompLineList.LOOKUPMODE(TRUE);
      ProdOrderCompLineList.SETTABLEVIEW(ProdOrderComp);
      ProdOrderCompLineList.SETRECORD(ProdOrderComp);

      IF ProdOrderCompLineList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ProdOrderCompLineList.GETRECORD(ProdOrderComp);
        IF "Prod. Order Comp. Line No." <> ProdOrderComp."Line No." THEN BEGIN
          VALIDATE("Item No.",ProdOrderComp."Item No.");
          VALIDATE("Prod. Order Comp. Line No.",ProdOrderComp."Line No.");
        END;
      END;
    END;

    PROCEDURE RecalculateUnitAmount@38();
    VAR
      ItemJnlLine1@1000 : Record 83;
    BEGIN
      GetItem;

      IF ("Value Entry Type" <> "Value Entry Type"::"Direct Cost") OR
         ("Item Charge No." <> '')
      THEN BEGIN
        "Indirect Cost %" := 0;
        "Overhead Rate" := 0;
      END ELSE BEGIN
        "Indirect Cost %" := Item."Indirect Cost %";
        "Overhead Rate" := Item."Overhead Rate";
      END;

      "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
      GetUnitAmount(FIELDNO("Unit of Measure Code"));

      ReadGLSetup;

      UpdateAmount;

      CASE "Entry Type" OF
        "Entry Type"::Purchase:
          BEGIN
            ItemJnlLine1.COPY(Rec);
            PurchPriceCalcMgt.FindItemJnlLinePrice(ItemJnlLine1,FIELDNO("Unit of Measure Code"));
            "Unit Cost" := ROUND(ItemJnlLine1."Unit Amount" * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");
          END;
        "Entry Type"::Sale:
          "Unit Cost" := ROUND(UnitCost * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");
        "Entry Type"::"Positive Adjmt.":
          "Unit Cost" :=
            ROUND(
              "Unit Amount" * (1 + "Indirect Cost %" / 100),GLSetup."Unit-Amount Rounding Precision") +
            "Overhead Rate" * "Qty. per Unit of Measure";
        "Entry Type"::"Negative Adjmt.":
          IF NOT "Phys. Inventory" THEN
            "Unit Cost" := UnitCost * "Qty. per Unit of Measure";
      END;

      IF "Entry Type" IN ["Entry Type"::Purchase,"Entry Type"::"Positive Adjmt."] THEN BEGIN
        IF Item."Costing Method" = Item."Costing Method"::Standard THEN
          "Unit Cost" := ROUND(UnitCost * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");
      END;
    END;

    PROCEDURE IsReclass@40(ItemJnlLine@1000 : Record 83) : Boolean;
    BEGIN
      IF (ItemJnlLine."Entry Type" = ItemJnlLine."Entry Type"::Transfer) AND
         ((ItemJnlLine."Order Type" <> ItemJnlLine."Order Type"::Transfer) OR (ItemJnlLine."Order No." = ''))
      THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE CheckWhse@39(LocationCode@1000 : Code[20];VAR QtyToPost@1002 : Decimal);
    VAR
      Location@1001 : Record 14;
    BEGIN
      Location.GET(LocationCode);
      IF Location."Require Put-away" AND
         (NOT Location."Directed Put-away and Pick") AND
         (NOT Location."Require Receive")
      THEN
        QtyToPost := 0;
    END;

    PROCEDURE ShowDimensions@41();
    BEGIN
      DimMgt.SetCompany("Receiving Company"); //**4PS.n
      DimMgt.SetTableID(DATABASE::"Item Journal Line"); //**4PS.n
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Journal Template Name","Journal Batch Name","Line No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE ShowReclasDimensions@30();
    BEGIN
      DimMgt.SetCompany("Receiving Company"); //**4PS.n
      DimMgt.EditReclasDimensionSet2(
        "Dimension Set ID","New Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Journal Template Name","Journal Batch Name","Line No."),
        "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code","New Shortcut Dimension 1 Code","New Shortcut Dimension 2 Code");
    END;

    PROCEDURE PostingItemJnlFromProduction@43(Print@1000 : Boolean);
    VAR
      ProductionOrder@1001 : Record 5405;
    BEGIN
      IF ("Order Type" = "Order Type"::Production) AND ("Order No." <> '') THEN
        ProductionOrder.GET(ProductionOrder.Status::Released,"Order No.");
      IF Print THEN
        CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post+Print",Rec)
      ELSE
        CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post",Rec);
    END;

    PROCEDURE IsAssemblyResourceConsumpLine@87() : Boolean;
    BEGIN
      EXIT(("Entry Type" = "Entry Type"::"Assembly Output") AND (Type = Type::Resource));
    END;

    PROCEDURE IsAssemblyOutputLine@89() : Boolean;
    BEGIN
      EXIT(("Entry Type" = "Entry Type"::"Assembly Output") AND (Type = Type::" "));
    END;

    PROCEDURE IsATOCorrection@10() : Boolean;
    VAR
      ItemLedgEntry@1000 : Record 32;
      PostedATOLink@1001 : Record 914;
    BEGIN
      IF NOT Correction THEN
        EXIT(FALSE);
      IF "Entry Type" <> "Entry Type"::Sale THEN
        EXIT(FALSE);
      IF NOT ItemLedgEntry.GET("Applies-to Entry") THEN
        EXIT(FALSE);
      IF ItemLedgEntry."Entry Type" <> ItemLedgEntry."Entry Type"::Sale THEN
        EXIT(FALSE);
      PostedATOLink.SETCURRENTKEY("Document Type","Document No.","Document Line No.");
      PostedATOLink.SETRANGE("Document Type",PostedATOLink."Document Type"::"Sales Shipment");
      PostedATOLink.SETRANGE("Document No.",ItemLedgEntry."Document No.");
      PostedATOLink.SETRANGE("Document Line No.",ItemLedgEntry."Document Line No.");
      EXIT(NOT PostedATOLink.ISEMPTY);
    END;

    LOCAL PROCEDURE RevaluationPerEntryAllowed@45(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      ValueEntry@1001 : Record 5802;
    BEGIN
      GetItem;
      IF Item."Costing Method" <> Item."Costing Method"::Average THEN
        EXIT(TRUE);

      ValueEntry.SETRANGE("Item No.",ItemNo);
      ValueEntry.SETRANGE("Entry Type",ValueEntry."Entry Type"::Revaluation);
      ValueEntry.SETRANGE("Partial Revaluation",TRUE);
      EXIT(ValueEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE UpdateDimForProdJnlLine@48();
    VAR
      DimensionSetIDArr@1000 : ARRAY [10] OF Integer;
    BEGIN
      DimensionSetIDArr[1] := "Dimension Set ID";
      CreateProdDim;
      DimensionSetIDArr[2] := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.GetCombinedDimensionSetID(DimensionSetIDArr,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE TrackingExists@47() : Boolean;
    BEGIN
      EXIT(("Serial No." <> '') OR ("Lot No." <> ''));
    END;

    PROCEDURE IsPurchaseReturn@49() : Boolean;
    BEGIN
      EXIT(
        ("Document Type" IN ["Document Type"::"Purchase Credit Memo",
                             "Document Type"::"Purchase Return Shipment"]) AND
        (Quantity < 0));
    END;

    PROCEDURE IsOpenedFromBatch@50() : Boolean;
    VAR
      ItemJournalBatch@1002 : Record 233;
      TemplateFilter@1001 : Text;
      BatchFilter@1000 : Text;
    BEGIN
      BatchFilter := GETFILTER("Journal Batch Name");
      IF BatchFilter <> '' THEN BEGIN
        TemplateFilter := GETFILTER("Journal Template Name");
        IF TemplateFilter <> '' THEN
          ItemJournalBatch.SETFILTER("Journal Template Name",TemplateFilter);
        ItemJournalBatch.SETFILTER(Name,BatchFilter);
        ItemJournalBatch.FINDFIRST;
      END;

      EXIT((("Journal Batch Name" <> '') AND ("Journal Template Name" = '')) OR (BatchFilter <> ''));
    END;

    PROCEDURE SubcontractingWorkCenterUsed@52() : Boolean;
    VAR
      WorkCenter@1000 : Record 99000754;
    BEGIN
      IF Type = Type::"Work Center" THEN
        IF WorkCenter.GET("Work Center No.") THEN
          EXIT(WorkCenter."Subcontractor No." <> '');

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE SubcontractedErr@51();
    BEGIN
      WorkCenter.GET("Work Center No.");
      WorkCenter.FIELDERROR("Subcontractor No.");
    END;

    PROCEDURE GetUnitPrice@6506();
    BEGIN
      //**4PS
      IF "Entry Type" <> "Entry Type"::Sale THEN
        EXIT;

      InventorySetup.GET;

      //Bundle Price
      IF "Location Code" <> '' THEN BEGIN
        IF InventorySetup."Use Bundle Price" THEN BEGIN
          LocRec.GET("Location Code");
          IF LocRec.Bundle THEN BEGIN
            "Unit Cost" := LocRec."Purchase Price";
            EXIT;
          END;
        END;
      END;

      //Item/SKU Price
      RetrieveCosts;

      //db.sn, 24-03-10: M18512
      ReadGLSetup;
      "Unit Cost" := ROUND(UnitCost * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");

      IF (NOT InventorySetup."Item Sales Price for Proj/Serv") THEN BEGIN
        VALIDATE("Unit Amount","Unit Cost");
        Amount := ROUND(Quantity * "Unit Amount");
      END ELSE BEGIN
        GetUnitAmount(0);
        UpdateAmount;
      END;
      //db.en, 24-03-10: M18512
    END;

    PROCEDURE CheckCompanyIC@1210190032();
    VAR
      lvCompName@1210190000 : Text[50];
    BEGIN
      //**4PS
      IF "Receiving Company" <> '' THEN
        lvCompName := "Receiving Company"
      ELSE
        lvCompName := COMPANYNAME;

      ICProjSetupRec.CHANGECOMPANY(lvCompName);
      ProjRec.CHANGECOMPANY(lvCompName);
      ProjElemRec.CHANGECOMPANY(lvCompName);
      ProjLocRec.CHANGECOMPANY(lvCompName);
      LocRec.CHANGECOMPANY(lvCompName); //call C005016
      ExtRec.CHANGECOMPANY(lvCompName);
      ServOrderRec.CHANGECOMPANY(lvCompName);
      PlantSetupRec.CHANGECOMPANY(lvCompName);
      PlantTypeRec.CHANGECOMPANY(lvCompName);
      PlantNoRec.CHANGECOMPANY(lvCompName);
      CostCompPlantRec.CHANGECOMPANY(lvCompName);
      CostCompRec.CHANGECOMPANY(lvCompName);  //db, 11-05-11: M23927
      GLAcc.CHANGECOMPANY(lvCompName);
      DimValRec.CHANGECOMPANY(lvCompName);
      AssemblyYardNumberObject.CHANGECOMPANY(lvCompName);

      ICProjSetupRec.GET;
    END;

    PROCEDURE RefersToOtherCompany@1100525032() : Boolean;
    BEGIN
      //**4PS
      EXIT(("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME));
    END;

    PROCEDURE UpdateRelatedQuantity@1210190000(QuanNew@1210190002 : Decimal;QuanOld@1210190001 : Decimal;CheckDelete@1210190003 : Boolean);
    VAR
      lvItemJnlLine@1210190000 : Record 83;
    BEGIN
      //**4PS
      IF "Related Document (Child)" <> '' THEN BEGIN
        lvItemJnlLine.RESET;
        lvItemJnlLine.SETRANGE("Journal Template Name", "Journal Template Name");
        lvItemJnlLine.SETRANGE("Journal Batch Name", "Journal Batch Name");
        lvItemJnlLine.SETRANGE("Related Document (Parent)", "Related Document (Child)");
        IF lvItemJnlLine.FIND('-') THEN BEGIN
          lvItemJnlLine."Quantity (Released)" :=
            lvItemJnlLine."Quantity (Released)" + QuanNew - QuanOld;
          lvItemJnlLine."Quantity to Post" := lvItemJnlLine.CalcDefaultQuantityToPost;
          IF lvItemJnlLine."Quantity (Released)" > lvItemJnlLine.Quantity THEN
            ERROR(Text11012001, lvItemJnlLine."Line No.");
          IF lvItemJnlLine."Production Order" <> '' THEN
            IF lvItemJnlLine."Quantity (Released)" > lvItemJnlLine."Quantity (Produced)" THEN
              ERROR(Text11012001, lvItemJnlLine."Line No.");
          lvItemJnlLine.MODIFY(TRUE);
        END;
      END;

      IF CheckDelete = TRUE THEN BEGIN
        IF "Related Document (Parent)" <> '' THEN BEGIN
          lvItemJnlLine.RESET;
          lvItemJnlLine.SETRANGE("Journal Template Name", "Journal Template Name");
          lvItemJnlLine.SETRANGE("Journal Batch Name", "Journal Batch Name");
          lvItemJnlLine.SETRANGE("Related Document (Child)", "Related Document (Parent)");
          IF lvItemJnlLine.FIND('-') THEN BEGIN
            REPEAT
              lvItemJnlLine."Related Document (Child)" := '';
              lvItemJnlLine.MODIFY(TRUE);
            UNTIL lvItemJnlLine.NEXT = 0;
          END;
        END;

        IF "Related Document (Child)" <> '' THEN BEGIN
          lvItemJnlLine.RESET;
          lvItemJnlLine.SETRANGE("Journal Template Name", "Journal Template Name");
          lvItemJnlLine.SETRANGE("Journal Batch Name", "Journal Batch Name");
          lvItemJnlLine.SETRANGE("Related Document (Child)", "Related Document (Child)");
          IF lvItemJnlLine.COUNT = 1 THEN BEGIN
            lvItemJnlLine.RESET;
            lvItemJnlLine.SETRANGE("Journal Template Name", "Journal Template Name");
            lvItemJnlLine.SETRANGE("Journal Batch Name", "Journal Batch Name");
            lvItemJnlLine.SETRANGE("Related Document (Parent)", "Related Document (Child)");
            IF lvItemJnlLine.FIND('-') THEN BEGIN
              lvItemJnlLine."Related Document (Parent)" := '';
              lvItemJnlLine.MODIFY(TRUE);
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CalcOverheadSurcharge@1100525005();
    VAR
      lSurchargeRec@1210190000 : Record 11020208;
      ItemLineSurcharge@1100485003 : Record 11020585;
      SurchDimValRec@1100485004 : Record 349;
      lvJobSetup@1100525001 : Record 315;
      lBaseAmount@1100485001 : Decimal;
      lTotSurchAmount@1100485008 : Decimal;
      lvServType@1100485002 : Code[20];
      DepartmentCode@1100525000 : Code[20];
    BEGIN
      //** 4PS 15-06-2010 new version with table: Item Journal Surcharge
      "Ovh.Surch.Expected Costs (LCY)" := 0;

      IF "Line No." = 0 THEN EXIT;

      ItemLineSurcharge.RESET;
      ItemLineSurcharge.SETRANGE("Journal Template Name", "Journal Template Name");
      ItemLineSurcharge.SETRANGE("Journal Batch Name", "Journal Batch Name");
      ItemLineSurcharge.SETRANGE("Journal Line No.", "Line No.");
      IF NOT ItemLineSurcharge.ISEMPTY THEN
        ItemLineSurcharge.DELETEALL;

      lvJobSetup.GET;

      IF ("Shortcut Dimension 2 Code" = '') OR
         ("Entry Type" <> "Entry Type"::Sale) OR
         (("Job No." = '') AND ("Service Order No." = '')) OR
         (lvJobSetup."Ovh.Surch.CostControl" = FALSE) OR
         (Amount = 0) THEN
        EXIT;

      IF ("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME) THEN
        EXIT;  //db, 14-11-08: M13321

      ItemLineSurcharge.INIT;
      ItemLineSurcharge.TRANSFERFIELDS(Rec);
      ItemLineSurcharge."Line no." := 0;

      ItemLineSurcharge."Overhead Surcharge" := 0;
      ItemLineSurcharge."Overhead Surcharge Project" := 0;
      ItemLineSurcharge."Overhead Surcharge Service" := 0;

      CheckCompanyIC;
      DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimValRec, TRUE, '');

      GLSetup.GET;

      lBaseAmount := Amount;

      IF "Service Order No." <> '' THEN BEGIN

        ServOrderRec.GET("Service Order No.");
        IF "Additional Cost (Service)" = TRUE THEN
          lvServType := ServOrderRec."Service Type (Other)"
        ELSE
          lvServType := ServOrderRec."Service Type";

        DepartmentCode := "Shortcut Dimension 1 Code";

        IF lSurchargeRec.GetSurcharges(1, lvServType, '', TRUE, DimValRec."Cost Type", "Shortcut Dimension 2 Code", '',
          DepartmentCode,  '', "Cost Component", "Posting Date",
          lSurchargeRec) THEN
          REPEAT

            IF lSurchargeRec.Percentage <> 0 THEN
              ItemLineSurcharge."Overhead Surcharge Service" := ROUND(lBaseAmount * lSurchargeRec.Percentage/100)
            ELSE
              ItemLineSurcharge."Overhead Surcharge Service" := ROUND(lSurchargeRec.Amount * Quantity);

            IF ItemLineSurcharge."Overhead Surcharge Service" <> 0 THEN BEGIN
              IF lSurchargeRec."Source Type Cost Object" = lSurchargeRec."Source Type Cost Object"::Fixed THEN BEGIN
                lSurchargeRec.GetSurchargeDimVal(DimValRec, SurchDimValRec);
                ItemLineSurcharge."Shortcut Dimension 2 Code" := SurchDimValRec.Code;
                ItemLineSurcharge."Cost Type" := SurchDimValRec."Cost Type" + 1;
              END;

              IF SurchDimValRec."Cost Component" <> '' THEN
                ItemLineSurcharge."Cost Component" := SurchDimValRec."Cost Component";

              IF lSurchargeRec."Source Type Department" = lSurchargeRec."Source Type Department"::Fixed THEN BEGIN
                 ItemLineSurcharge."Shortcut Dimension 1 Code" := lSurchargeRec."Coverage Department";
              END;

              ItemLineSurcharge."Overhead Surcharge" := ItemLineSurcharge."Overhead Surcharge Service";
              ItemLineSurcharge.INSERT(TRUE);
              ItemLineSurcharge."Line no." += 1;
              lTotSurchAmount := lTotSurchAmount + ItemLineSurcharge."Overhead Surcharge Project";
            END;
          UNTIL lSurchargeRec.NEXT = 0;
      END ELSE BEGIN
        IF "Job No." <> '' THEN BEGIN

          ProjRec.GET("Job No.");

          DepartmentCode := "Shortcut Dimension 1 Code";

          IF lSurchargeRec.GetSurcharges(0, ProjRec."Project Type", "Job No.", TRUE, DimValRec."Cost Type",
            "Shortcut Dimension 2 Code", '', DepartmentCode, '', "Cost Component", "Posting Date",
             lSurchargeRec) THEN
            REPEAT
              IF lSurchargeRec.Percentage <> 0 THEN
                IF lSurchargeRec."Surcharge over Surcharge" THEN
                  ItemLineSurcharge."Overhead Surcharge Project" := ROUND(
                    (lBaseAmount + lTotSurchAmount) * lSurchargeRec.Percentage/100)
                ELSE
                  ItemLineSurcharge."Overhead Surcharge Project" := ROUND(lBaseAmount * lSurchargeRec.Percentage/100)
              ELSE
                ItemLineSurcharge."Overhead Surcharge Project" := ROUND(lSurchargeRec.Amount * Quantity);

              IF ItemLineSurcharge."Overhead Surcharge Project" <> 0 THEN BEGIN
                IF lSurchargeRec."Source Type Cost Object" = lSurchargeRec."Source Type Cost Object"::Fixed THEN BEGIN
                  lSurchargeRec.GetSurchargeDimVal(DimValRec, SurchDimValRec);
                  ItemLineSurcharge."Shortcut Dimension 2 Code" := SurchDimValRec.Code;
                  ItemLineSurcharge."Cost Type" := SurchDimValRec."Cost Type" + 1;
                END;

                IF SurchDimValRec."Cost Component" <> '' THEN
                  ItemLineSurcharge."Cost Component" := SurchDimValRec."Cost Component";

                IF lSurchargeRec."Source Type Department" = lSurchargeRec."Source Type Department"::Fixed THEN BEGIN
                  ItemLineSurcharge."Shortcut Dimension 1 Code" := lSurchargeRec."Coverage Department";
                END;

                IF lSurchargeRec."Element Surcharge" <> '' THEN
                  ItemLineSurcharge.Element := lSurchargeRec."Element Surcharge";

                ItemLineSurcharge."Overhead Surcharge" := ItemLineSurcharge."Overhead Surcharge Project" ;
                ItemLineSurcharge.INSERT(TRUE);
                ItemLineSurcharge."Line no." += 1;
                lTotSurchAmount := lTotSurchAmount + ItemLineSurcharge."Overhead Surcharge Project";
              END;
            UNTIL lSurchargeRec.NEXT = 0;
        END;
      END;

      "Ovh.Surch.Expected Costs (LCY)" := lTotSurchAmount;
    END;

    PROCEDURE DeleteSurcharge@1100525007();
    VAR
      ItemLineSurcharge@1100525000 : Record 11020585;
    BEGIN
      //**4PS
      ItemLineSurcharge.RESET;
      ItemLineSurcharge.SETRANGE("Journal Template Name", "Journal Template Name");
      ItemLineSurcharge.SETRANGE("Journal Batch Name", "Journal Batch Name");
      ItemLineSurcharge.SETRANGE("Journal Line No.", "Line No.");
      IF NOT ItemLineSurcharge.ISEMPTY THEN
        ItemLineSurcharge.DELETEALL;
    END;

    PROCEDURE UpdateCostControlStatus@1100485013(lUpdateAction@1100485002 : 'Insert,Modify,Delete');
    VAR
      ActionType@1100528400 : 'Insert,Modify,Delete';
    BEGIN
      //**4PS
      CASE lUpdateAction OF
        lUpdateAction::Insert, lUpdateAction::Delete:
          BEGIN
            IF ("Receiving Company" = '') AND ("Job No." <> '') THEN BEGIN
              ProjRec.CHANGECOMPANY("Receiving Company");
              IF ProjRec.GET("Job No.") THEN
                ProjRec.UpdateCostControlStatus(lUpdateAction, xRec."Shortcut Dimension 2 Code", "Shortcut Dimension 2 Code");
            END;
          END;
        lUpdateAction::Modify:
          BEGIN
            //Update xRec, handle as delete
            IF ((xRec."Receiving Company" <> "Receiving Company") OR (xRec."Job No." <> "Job No.")) AND
               ((xRec."Receiving Company" = '') AND (xRec."Job No." <> '')) THEN BEGIN
              ProjRec.CHANGECOMPANY(xRec."Receiving Company");
              IF ProjRec.GET(xRec."Job No.") THEN
                ProjRec.UpdateCostControlStatus(lUpdateAction::Delete, xRec."Shortcut Dimension 2 Code", "Shortcut Dimension 2 Code");
            END;
            //Update Rec
            IF ("Receiving Company" = '') AND ("Job No." <> '') THEN BEGIN
              ProjRec.CHANGECOMPANY("Receiving Company");
              IF "Job No." = xRec."Job No." THEN
                ActionType := ActionType::Modify
              ELSE
                ActionType := ActionType::Insert;
              IF ProjRec.GET("Job No.") THEN
                ProjRec.UpdateCostControlStatus(ActionType, xRec."Shortcut Dimension 2 Code", "Shortcut Dimension 2 Code");
            END;
          END;
      END;
    END;

    PROCEDURE CheckPlantCostComponentType@1100485000();
    VAR
      lvText11012000@1100485001 : TextConst 'ENU=may not be %1 (%2)';
    BEGIN
      //**4PS
      IF ("Cost Component Plant" = '') THEN
        EXIT;

      PlantSetupRec.GET;

      IF ("Cost Component Plant" = PlantSetupRec."Cost Component Acquisition") THEN
        FIELDERROR("Cost Component Plant",
          STRSUBSTNO(lvText11012000, PlantSetupRec.FIELDCAPTION("Cost Component Acquisition"), "Cost Component Plant"));
      IF ("Cost Component Plant" = PlantSetupRec."Cost Component Rent") THEN
        FIELDERROR("Cost Component Plant",
          STRSUBSTNO(lvText11012000, PlantSetupRec.FIELDCAPTION("Cost Component Rent"), "Cost Component Plant"));
    END;

    PROCEDURE ValidateShelf@1100485016();
    VAR
      StockkeepingUnit@1100409000 : Record 5700;
    BEGIN
      //**4PS
      "Shelf No." := '';
      IF "Location Code" <> '' THEN BEGIN
        IF NOT StockkeepingUnit.GET("Location Code","Item No.","Variant Code") THEN
          StockkeepingUnit.INIT;
        "Shelf No." := StockkeepingUnit."Shelf No.";
      END;
      IF "Shelf No." = '' THEN
        IF Item.GET("Item No.") THEN
          "Shelf No." := Item."Shelf No.";
    END;

    PROCEDURE CheckCostCompServOrderType@1100485018();
    BEGIN
      //**4PS
      CheckCompanyIC;  //db, 11-05-11: M23927
      CostCompRec.CheckDefaultCostComponent("Service Order No.", "Cost Component", "Receiving Company", "Cost Type"-1,
        "Additional Cost (Service)");  //db, 24-02-10
    END;

    LOCAL PROCEDURE CheckItemEntrySales@1100525000();
    VAR
      lvJobLedgerEntry@1100525000 : Record 11072005;
      lvServiceLedgerEntry@1100525001 : Record 11012819;
      lvCompName@1100525002 : Text[250];
    BEGIN
      //**4PS
      IF ((PrevCheckedItemJnlLineRec."Item No." = "Item No.") AND
         (PrevCheckedItemJnlLineRec."Entry Type" = "Entry Type") AND
         (PrevCheckedItemJnlLineRec.Quantity = Quantity) AND
         (PrevCheckedItemJnlLineRec."Job No." = "Job No.") AND
         (PrevCheckedItemJnlLineRec."Service Order No." = "Service Order No.")) OR
         (CurrFieldNo = 0) THEN BEGIN
        //due to validations calling each other it is possible that this function is called more than once when a user changes a single
        //value. This code prevents the same message popping up serveral times
        EXIT;
      END ELSE BEGIN
        PrevCheckedItemJnlLineRec := Rec;
      END;
      IF ((("Entry Type" = "Entry Type"::Sale) AND (Quantity < 0))
          OR
          (("Entry Type" = "Entry Type"::Purchase) AND (Quantity > 0)))
          AND
         ("Item No." <> '') AND
         (("Job No." <> '') OR ("Service Order No." <> ''))
      THEN BEGIN
      //Callg: 16108, 29-04-2010
      //Replaced by search actions in job entries or service entries, can also be purchase next to inventory transaction

      //  ItemLedgEntry.SETCURRENTKEY("Item No.", "Entry Type", "Variant Code" , "Drop Shipment" ,"Location Code","Posting Date");
      //  ItemLedgEntry.SETRANGE("Entry Type","Entry Type"::Sale);
      //  ItemLedgEntry.SETRANGE("Item No.", "Item No.");
      //  ItemLedgEntry.SETRANGE("Job No.", "Job No.");
      //  ItemLedgEntry.SETRANGE("Service Order No.", "Service Order No.");
      //  IF NOT ItemLedgEntry.FINDFIRST THEN BEGIN
      //    IF "Job No." <> '' THEN
      //      MESSAGE(Text11012002, "Item No.", ProjRec.TABLECAPTION, "Job No.")
      //    ELSE
      //      MESSAGE(Text11012002, "Item No.", ServOrderRec.TABLECAPTION, "Service Order No.");
      //  END;

        IF "Receiving Company" <> '' THEN  //db, 28-01-11: M24812
          lvCompName := "Receiving Company"
        ELSE
          lvCompName := COMPANYNAME;

        IF "Job No." <> '' THEN BEGIN
          lvJobLedgerEntry.RESET;
          lvJobLedgerEntry.CHANGECOMPANY(lvCompName);  //db, 28-01-11: M24812
          lvJobLedgerEntry.SETCURRENTKEY("Job No.");
          lvJobLedgerEntry.SETRANGE("Job No.", "Job No.");
          lvJobLedgerEntry.SETRANGE("Entry Type", lvJobLedgerEntry."Entry Type"::Usage);
          lvJobLedgerEntry.SETRANGE("Item No.", "Item No.");
          IF NOT lvJobLedgerEntry.FINDFIRST THEN
            MESSAGE(Text11012002, "Item No.", ProjRec.TABLECAPTION, "Job No.")
        END;

        IF "Service Order No." <> '' THEN BEGIN
          lvServiceLedgerEntry.RESET;
          lvServiceLedgerEntry.CHANGECOMPANY(lvCompName);  //db, 28-01-11: M24812
          lvServiceLedgerEntry.SETCURRENTKEY("Service Order No.");
          lvServiceLedgerEntry.SETRANGE("Service Order No.", "Service Order No.");
          lvServiceLedgerEntry.SETFILTER("Total Cost (LCY)", '<>%1', 0);
          lvServiceLedgerEntry.SETRANGE("Item No.", "Item No.");
          IF NOT lvServiceLedgerEntry.FINDFIRST THEN
            MESSAGE(Text11012002, "Item No.", ServOrderRec.TABLECAPTION, "Service Order No.");
        END;
      END;
    END;

    LOCAL PROCEDURE CheckGLAcc@1100525002();
    BEGIN
      //**4PS
      GLAcc.CheckGLAcc;
      IF GLAcc."Direct Posting" OR ("Journal Template Name" = '') THEN
        EXIT;
      IF "Posting Date" <> 0D THEN
        IF "Posting Date" = CLOSINGDATE("Posting Date") THEN
          EXIT;
      IF ("Job No." = '') AND ("Service Order No." = '') AND ("Plant Type" = '') THEN
        GLAcc.TESTFIELD("Direct Posting",TRUE);
    END;

    PROCEDURE CheckAdditionalCostService@1100525006();
    BEGIN
      //**4PS
      //db, 24-02-10
      IF "Service Order No." = '' THEN EXIT;
      CheckCompanyIC;
      IF NOT ServOrderRec.GET("Service Order No.") THEN EXIT;

      IF (CurrFieldNo = FIELDNO("Service Order No.")) OR (CurrFieldNo = FIELDNO("Shortcut Dimension 2 Code")) OR
         (CurrFieldNo = FIELDNO("Item No.")) THEN BEGIN
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Cost Type" <> xRec."Cost Type") THEN BEGIN
          "Additional Cost (Service)" :=
            ServOrderRec.GetAdditionalCostService("Service Order No.","Shortcut Dimension 2 Code","Cost Type","Receiving Company");
        END;

        //No dimension for project or serviceorder in case of IC; M27664 and M27668
        IF ("Receiving Company" = '') OR ("Receiving Company" = COMPANYNAME) THEN BEGIN //M27664 and M27668
          IF ("Service Order No." <> xRec."Service Order No.") OR
             ("Additional Cost (Service)" <> xRec."Additional Cost (Service)") THEN BEGIN
            IF "Additional Cost (Service)" = TRUE THEN
              VALIDATE("Shortcut Dimension 1 Code", ServOrderRec."Department Code (Other)")
            ELSE
              VALIDATE("Shortcut Dimension 1 Code", ServOrderRec."Global Dimension 1 Code");
          END;
        END;
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Cost Type" <> xRec."Cost Type") THEN BEGIN
          VALIDATE("Cost Component");
        END;
      END;
    END;

    PROCEDURE ValidateAdditionalCost@1100525003();
    VAR
      CostCompRec@1100525001 : Record 11012012;
      SaveCostComp@1100525000 : Text[30];
    BEGIN
      //**4PS
      SaveCostComp := "Cost Component";
      TESTFIELD("Service Order No.");
      VALIDATE("Service Order No.");
      IF CurrFieldNo <> FIELDNO("Additional Cost (Service)") THEN EXIT;  //db, 18-03-10: T4641

      CostCompRec.CHANGECOMPANY("Receiving Company");
      IF CostCompRec.GET(SaveCostComp) THEN BEGIN
         "Cost Component" := SaveCostComp;
         IF ("Additional Cost (Service)" = TRUE) THEN BEGIN
           IF (CostCompRec."Cost Component (Add.Cost)" <> '') THEN
             "Cost Component" := CostCompRec."Cost Component (Add.Cost)";
         END ELSE BEGIN
           CostCompRec.SETRANGE("Cost Component (Add.Cost)", SaveCostComp);
           IF CostCompRec.FINDSET THEN BEGIN
             REPEAT
               IF (CostCompRec."Cost Component (Add.Cost)" = SaveCostComp) THEN
                 "Cost Component" := CostCompRec.Code;
             UNTIL CostCompRec.NEXT = 0;
           END;
         END;
      END;
    END;

    PROCEDURE ValidateCostComponent@1100525001();
    VAR
      CostCompRec@1100525000 : Record 11012012;
      CostCompRec2@1100525001 : Record 11012012;
    BEGIN
      //**4PS
      IF CurrFieldNo <> FIELDNO("Cost Component") THEN EXIT;  //db, 18-03-10: T4642

      IF "Cost Component" = '' THEN
        EXIT;

      CostCompRec.CHANGECOMPANY("Receiving Company");
      CostCompRec2.CHANGECOMPANY("Receiving Company");
      CostCompRec.GET("Cost Component");
      //db.sn, 06-12-10: M24263
      IF CostCompRec."Additional Cost (Service)" THEN BEGIN
        CostCompRec2.SETRANGE("Cost Component (Add.Cost)", "Cost Component");
        IF NOT CostCompRec2.FINDFIRST THEN
          EXIT;
      END ELSE
        IF CostCompRec."Cost Component (Add.Cost)" = '' THEN
          EXIT;
      //db.en, 06-12-10: M24263
      "Additional Cost (Service)" := CostCompRec."Additional Cost (Service)";
    END;

    PROCEDURE SetProjectStock@1100525004();
    BEGIN
      //**4PS
      InventorySetup.GET;
      IF (NOT InventorySetup."Default Do Not Use Proj. Stock") AND
        ("Job No." <> '') AND
        ("Entry Type" IN ["Entry Type"::Purchase,"Entry Type"::Sale]) AND
        (InventorySetup.JobInventoryByStockRelease("Job No.") OR
        InventorySetup.JobInventoryByLocationShelf("Job No."))
      THEN
        "Project Stock" := TRUE;

      IF CurrFieldNo <> 0 THEN
        CheckDefaultBin;  //**4PS.n (db, 02-11-10)
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(83) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 83');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Item Journal Line", "Shortcut Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Shortcut Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Shortcut Dimension 1 Code");
    END;

    PROCEDURE CheckDefaultBin@1100526201();
    BEGIN
      //**4PS
      //db, 02-11-10
      IF "Project Stock" = FALSE THEN EXIT;
      "Bin Code (Project Inventory)" := WMSManagement.GetDefaultBinLocation(
        "Job No.","Service Order No.","Location Code","Item No.","Variant Code",TRUE);  //db, 30-03-11
    END;

    PROCEDURE CalcDefaultQuantityToPost@1100528401() : Decimal;
    BEGIN
      //**4PS
      EXIT(Quantity - "Quantity (Released)");
    END;

    PROCEDURE CalcQuantityToPostBase@1100528400() : Decimal;
    BEGIN
      //**4PS
      EXIT(CalcBaseQty("Quantity to Post"));
    END;

    LOCAL PROCEDURE ValidateQuantityToPost@1100528402();
    BEGIN
      //**4PS
      IF Quantity >= 0 THEN BEGIN
        IF "Quantity to Post" > Quantity THEN
          ERROR(Text11012004, Quantity)
      END ELSE
        IF "Quantity to Post" < Quantity THEN
          ERROR(Text11012004, Quantity);
    END;

    LOCAL PROCEDURE LookupEntityNo@1100528403();
    BEGIN
      //**4PS
      CheckCompanyIC;

      AssemblyYardNumberObject."Project No." := "Job No.";
      AssemblyYardNumberObject."Yard No." := "Yard No.";
      AssemblyYardNumberObject."Entity Type" := "Entity Type";
      AssemblyYardNumberObject."System No." := "System No.";
      AssemblyYardNumberObject."Entity No." := "Entity No.";

      AssemblyYardNumberObject.SETRANGE("Project No.", "Job No.");
      AssemblyYardNumberObject.SETRANGE("Yard No.", "Yard No.");
      AssemblyYardNumberObject.SETRANGE("Entity Type", "Entity Type");
      AssemblyYardNumberObject.SETRANGE("System No.", "System No.");

      IF PAGE.RUNMODAL(0, AssemblyYardNumberObject) = ACTION::LookupOK THEN
        VALIDATE("Entity No.", AssemblyYardNumberObject."Entity No.");
    END;

    LOCAL PROCEDURE ClearEditableAssemYardNoFields@1100528405();
    BEGIN
      //**4PS
      IF "Job No." <> xRec."Job No." THEN BEGIN
        "Entity Type" := "Entity Type"::None;
        "Entity No." := '';
      END;
    END;

    LOCAL PROCEDURE ValidateEntityType@1100528408();
    BEGIN
      //**4PS
      IF "Entity Type" <> "Entity Type" ::None THEN BEGIN
        CheckCompanyIC;
        ProjRec.GET("Job No.");
        ProjRec.TESTFIELD("Assembly Project", TRUE);
      END;

      IF "Entity Type" <> xRec."Entity Type" THEN
        "Entity No." := '';
    END;

    LOCAL PROCEDURE ValidateEntityNo@1100528409();
    BEGIN
      //**4PS
      IF "Entity No." <> '' THEN BEGIN
        CheckCompanyIC;
        AssemblyYardNumberObject.GET("Job No.", "Yard No.", "Entity Type", "System No.", "Entity No.");
      END;
    END;

    PROCEDURE IsInventoryICLine@1100528500() : Boolean;
    BEGIN
      //**4PS call C005014
      EXIT(
        ("IC Inventory Line Type" = 0) AND ("Receiving Company" <> '') AND
        ("Job No." = '') AND ("Service Order No." = '') AND
        ("Item No." <> '') AND (Quantity <> 0) AND
        ("Entry Type" IN ["Entry Type"::Purchase,"Entry Type"::Sale]));
    END;

    PROCEDURE FilterLinesWithItemToPlan@69(VAR Item@1000 : Record 27;What@1100525000 : 'Inventory,Project,ServiceOrder');
    BEGIN
      //**4PS
      RESET;
      SETRANGE("Item No.", Item."No.");
      CASE What OF
        What::Project:
          SETFILTER("Job No.", '<>%1', '');
        What::ServiceOrder:
          SETFILTER("Service Order No.", '<>%1', '');
      END;
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SETFILTER("Bin Code",Item.GETFILTER("Bin Filter"));
      SETFILTER("Delivery Date",Item.GETFILTER("Date Filter"));
    END;

    PROCEDURE FindLinesWithItemToPlan@1100525008(VAR Item@1000 : Record 27;What@1100525000 : 'Inventory,Project,ServiceOrder') : Boolean;
    BEGIN
      //**4PS
      FilterLinesWithItemToPlan(Item,What);
      EXIT(FIND('-'));
    END;

    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record 27;What@1100525000 : 'Inventory,Project,ServiceOrder') : Boolean;
    BEGIN
      //**4PS
      FilterLinesWithItemToPlan(Item,What);
      EXIT(NOT ISEMPTY);
    END;

    PROCEDURE FillDefaultFscType@1100529000();
    VAR
      DimensionValue@1100528400 : Record 349;
      Job@1100528401 : Record 11072003;
    BEGIN
      //**4PS C007769
      IF ("Shortcut Dimension 2 Code" = '') THEN
        EXIT;

      DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimensionValue, FALSE, '');
      IF NOT DimensionValue."FSC Applicable" THEN
        EXIT;
      IF "Job No."= '' THEN
        EXIT;
      IF NOT Job.GET("Job No.") THEN
        EXIT;
      IF Job."FSC Type Code" <> '' THEN
        "FSC Type Code" :=  Job."FSC Type Code";
    END;

    PROCEDURE DrillDownInventory@1100528404();
    VAR
      ItemLedgerEntry@1100528400 : Record 32;
    BEGIN
      //**4PS
      ItemLedgerEntry.SETRANGE("Item No.", "Item No.");
      ItemLedgerEntry.SETRANGE("Location Code", "Location Code");
      PAGE.RUN(0, ItemLedgerEntry);
    END;

    LOCAL PROCEDURE CheckEntityNo@1100528406();
    VAR
      JobsSetup@1100528400 : Record 315;
    BEGIN
      IF "Entity Type" = "Entity Type"::None THEN
        EXIT;

      IF JobsSetup.GET AND
         JobsSetup."Entity No. Mandatory"
      THEN
        TESTFIELD("Entity No.");
    END;

    LOCAL PROCEDURE IsExistingJobOrServiceItemJlnLineQtyChanged@1100528800() : Boolean;
    BEGIN
      IF (xRec.Quantity <> 0) AND (("Job No." <> '') OR ("Service Order No." <> '')) THEN BEGIN
        ExistingJobOrServiceItemJlnLineQtyChanged := TRUE;
        EXIT(TRUE);
      END;
    END;

    BEGIN
    {
      21-06-2005, Henk Sebens, Purchase Resp. Center Filter and default separated.
      4PS01 Calculate surcharge AK on commitments project.
      4PS02 JD Related to call 9927, 01-08-07,
            Do not check anymore at IC postings if Cost Center exist in receiving company.
            This will become the Cost Center of project/serviceorder in receiving company (see codeunit 23).
      4PS03 JD 09-10-07 Call 5091, fill Element from Cost Object
      4PS04 JD 14-02-08 Fill Cost component from SOType of Cost Object
      4PS05 JD 17-02-09 Call 14395 Workaround for CurrFieldNo being emptied
      4PS06 HBK 03-08-2009 Added Field Supply No.
      4PS07 HBK 14-04-2010 Added function SetProjectStock
      4PS, 06-07-2012, DP00121, Serial No. expanded to 40
    }
    END.
  }
}

