OBJECT Table 99000754 Work Center
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00,4PS9.00;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Name;
    OnInsert=BEGIN
               MfgSetup.GET;
               IF "No." = '' THEN BEGIN
                 MfgSetup.TESTFIELD("Work Center Nos.");
                 NoSeriesMgt.InitSeries(MfgSetup."Work Center Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;
               DimMgt.UpdateDefaultDim(
                 DATABASE::"Work Center","No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");
               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;
             END;

    OnDelete=VAR
               ProdOrderRtngLine@1000 : Record 5409;
               StdCostWksh@1001 : Record 5841;
             BEGIN
               CapLedgEntry.SETCURRENTKEY("Work Center No.");
               CapLedgEntry.SETRANGE("Work Center No.","No.");
               IF CapLedgEntry.FINDFIRST THEN
                 ERROR(Text010,TABLECAPTION,"No.",CapLedgEntry.TABLECAPTION);

               StdCostWksh.RESET;
               StdCostWksh.SETRANGE(Type,StdCostWksh.Type::"Work Center");
               StdCostWksh.SETRANGE("No.","No.");
               IF NOT StdCostWksh.ISEMPTY THEN
                 ERROR(Text010,TABLECAPTION,"No.",StdCostWksh.TABLECAPTION);

               CalendarEntry.SETCURRENTKEY("Capacity Type","No.");
               CalendarEntry.SETRANGE("Capacity Type",CalendarEntry."Capacity Type"::"Work Center");
               CalendarEntry.SETRANGE("No.","No.");
               CalendarEntry.DELETEALL;

               CalAbsentEntry.SETCURRENTKEY("Capacity Type","No.");
               CalAbsentEntry.SETRANGE("Capacity Type",CalendarEntry."Capacity Type"::"Work Center");
               CalAbsentEntry.SETRANGE("No.","No.");
               CalAbsentEntry.DELETEALL;

               MfgCommentLine.SETRANGE("Table Name",MfgCommentLine."Table Name"::"Work Center");
               MfgCommentLine.SETRANGE("No.","No.");
               MfgCommentLine.DELETEALL;

               ProdOrderRtngLine.SETCURRENTKEY("Work Center No.");
               ProdOrderRtngLine.SETRANGE("Work Center No.","No.");
               IF ProdOrderRtngLine.FINDFIRST THEN
                 ERROR(Text000);

               DimMgt.DeleteDefaultDim(DATABASE::"Work Center","No.");

               VALIDATE("Location Code",''); // to clean up the default bins
             END;

    OnRename=BEGIN
               "Last Date Modified" := TODAY;
             END;

    CaptionML=ENU=Work Center;
    LookupPageID=Page99000755;
    DrillDownPageID=Page99000755;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   CaptionML=ENU=No. }
    { 3   ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                "Search Name" := Name;
                                                              END;

                                                   CaptionML=ENU=Name }
    { 4   ;   ;Search Name         ;Code50        ;CaptionML=ENU=Search Name }
    { 5   ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 6   ;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 7   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 8   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City }
    { 9   ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code }
    { 12  ;   ;Alternate Work Center;Code20       ;TableRelation="Work Center";
                                                   CaptionML=ENU=Alternate Work Center }
    { 14  ;   ;Work Center Group Code;Code10      ;TableRelation="Work Center Group";
                                                   OnValidate=VAR
                                                                ProdOrderRtngLine@1000 : Record 5409;
                                                                ProdOrderCapNeedEntry@1001 : Record 5410;
                                                                PlanningRtngLine@1002 : Record 99000830;
                                                              BEGIN
                                                                IF "Work Center Group Code" = xRec."Work Center Group Code" THEN
                                                                  EXIT;

                                                                CalendarEntry.SETCURRENTKEY("Work Center No.");
                                                                CalendarEntry.SETRANGE("Work Center No.","No.");
                                                                IF NOT CalendarEntry.FIND('-') THEN
                                                                  EXIT;

                                                                IF CurrFieldNo <> 0 THEN
                                                                  IF NOT CONFIRM(Text001,FALSE,FIELDCAPTION("Work Center Group Code"))
                                                                  THEN BEGIN
                                                                    "Work Center Group Code" := xRec."Work Center Group Code";
                                                                    EXIT;
                                                                  END;

                                                                Window.OPEN(
                                                                  Text002 +
                                                                  Text003 +
                                                                  Text004 +
                                                                  Text006);

                                                                // Capacity Calendar
                                                                EntryCounter := 0;
                                                                NoOfRecords := CalendarEntry.COUNT;
                                                                IF CalendarEntry.FIND('-') THEN
                                                                  REPEAT
                                                                    EntryCounter := EntryCounter + 1;
                                                                    Window.UPDATE(1,EntryCounter);
                                                                    Window.UPDATE(2,ROUND(EntryCounter / NoOfRecords * 10000,1));
                                                                    CalendarEntry."Work Center Group Code" := "Work Center Group Code";
                                                                    CalendarEntry.MODIFY;
                                                                  UNTIL CalendarEntry.NEXT = 0;

                                                                // Capacity Absence
                                                                EntryCounter := 0;
                                                                CalAbsentEntry.SETCURRENTKEY("Work Center No.");
                                                                CalAbsentEntry.SETRANGE("Work Center No.","No.");
                                                                NoOfRecords := CalAbsentEntry.COUNT;
                                                                IF CalAbsentEntry.FIND('-') THEN
                                                                  REPEAT
                                                                    EntryCounter := EntryCounter + 1;
                                                                    Window.UPDATE(3,EntryCounter);
                                                                    Window.UPDATE(4,ROUND(EntryCounter / NoOfRecords * 10000,1));
                                                                    CalAbsentEntry."Work Center Group Code" := "Work Center Group Code";
                                                                    CalAbsentEntry.MODIFY;
                                                                  UNTIL CalAbsentEntry.NEXT = 0;

                                                                EntryCounter := 0;

                                                                ProdOrderCapNeedEntry.SETCURRENTKEY("Work Center No.");
                                                                ProdOrderCapNeedEntry.SETRANGE("Work Center No.","No.");
                                                                NoOfRecords := ProdOrderCapNeedEntry.COUNT;
                                                                IF ProdOrderCapNeedEntry.FIND('-') THEN
                                                                  REPEAT
                                                                    EntryCounter := EntryCounter + 1;
                                                                    Window.UPDATE(7,EntryCounter);
                                                                    Window.UPDATE(8,ROUND(EntryCounter / NoOfRecords * 10000,1));
                                                                    ProdOrderCapNeedEntry."Work Center Group Code" := "Work Center Group Code";
                                                                    ProdOrderCapNeedEntry.MODIFY;
                                                                  UNTIL ProdOrderCapNeedEntry.NEXT = 0;

                                                                MODIFY;

                                                                RtngLine.SETCURRENTKEY("Work Center No.");
                                                                RtngLine.SETRANGE("Work Center No.","No.");
                                                                RtngLine.MODIFYALL("Work Center Group Code","Work Center Group Code");

                                                                PlanningRtngLine.SETCURRENTKEY("Work Center No.");
                                                                PlanningRtngLine.SETRANGE("Work Center No.","No.");
                                                                PlanningRtngLine.MODIFYALL("Work Center Group Code","Work Center Group Code");

                                                                ProdOrderRtngLine.SETCURRENTKEY("Work Center No.");
                                                                ProdOrderRtngLine.SETRANGE("Work Center No.","No.");
                                                                ProdOrderRtngLine.MODIFYALL("Work Center Group Code","Work Center Group Code");

                                                                Window.CLOSE;
                                                              END;

                                                   CaptionML=ENU=Work Center Group Code }
    { 16  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 17  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 18  ;   ;Subcontractor No.   ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Subcontractor No. }
    { 19  ;   ;Direct Unit Cost    ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=ENU=Direct Unit Cost;
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 20  ;   ;Indirect Cost %     ;Decimal       ;OnValidate=BEGIN
                                                                GetGLSetup;
                                                                "Unit Cost" :=
                                                                  ROUND(
                                                                    "Direct Unit Cost" * (1 + "Indirect Cost %" / 100) + "Overhead Rate",
                                                                    GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Indirect Cost %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 21  ;   ;Unit Cost           ;Decimal       ;OnValidate=BEGIN
                                                                GetGLSetup;
                                                                "Direct Unit Cost" :=
                                                                  ROUND(("Unit Cost" - "Overhead Rate") / (1 + "Indirect Cost %" / 100),
                                                                    GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Unit Cost;
                                                   DecimalPlaces=2:5;
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 22  ;   ;Queue Time          ;Decimal       ;CaptionML=ENU=Queue Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 23  ;   ;Queue Time Unit of Meas. Code;Code10;
                                                   TableRelation="Capacity Unit of Measure";
                                                   CaptionML=ENU=Queue Time Unit of Meas. Code }
    { 26  ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=No }
    { 27  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Manufacturing Comment Line" WHERE (Table Name=CONST(Work Center),
                                                                                                         No.=FIELD(No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 30  ;   ;Unit of Measure Code;Code10        ;TableRelation="Capacity Unit of Measure";
                                                   OnValidate=BEGIN
                                                                IF "Unit of Measure Code" = xRec."Unit of Measure Code" THEN
                                                                  EXIT;

                                                                CALCFIELDS("Prod. Order Need (Qty.)");
                                                                IF "Prod. Order Need (Qty.)" <> 0 THEN
                                                                  ERROR(Text007,FIELDCAPTION("Unit of Measure Code"));

                                                                IF xRec."Unit of Measure Code" <> '' THEN
                                                                  IF CurrFieldNo <> 0 THEN
                                                                    IF NOT CONFIRM(Text001,FALSE,FIELDCAPTION("Unit of Measure Code"))
                                                                    THEN BEGIN
                                                                      "Unit of Measure Code" := xRec."Unit of Measure Code";
                                                                      EXIT;
                                                                    END;

                                                                Window.OPEN(
                                                                  Text008 +
                                                                  Text009);

                                                                MODIFY;

                                                                // Capacity Calendar
                                                                EntryCounter := 0;
                                                                CalendarEntry.SETCURRENTKEY("Work Center No.");
                                                                CalendarEntry.SETRANGE("Work Center No.","No.");
                                                                NoOfRecords := CalendarEntry.COUNT;
                                                                IF CalendarEntry.FIND('-') THEN
                                                                  REPEAT
                                                                    EntryCounter := EntryCounter + 1;
                                                                    Window.UPDATE(1,EntryCounter);
                                                                    Window.UPDATE(2,ROUND(EntryCounter / NoOfRecords * 10000,1));
                                                                    CalendarEntry.VALIDATE("Ending Time");
                                                                    CalendarEntry.MODIFY;
                                                                  UNTIL CalendarEntry.NEXT = 0;

                                                                Window.CLOSE;
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 31  ;   ;Capacity            ;Decimal       ;InitValue=1;
                                                   CaptionML=ENU=Capacity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 32  ;   ;Efficiency          ;Decimal       ;InitValue=100;
                                                   CaptionML=ENU=Efficiency;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 33  ;   ;Maximum Efficiency  ;Decimal       ;CaptionML=ENU=Maximum Efficiency;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 34  ;   ;Minimum Efficiency  ;Decimal       ;CaptionML=ENU=Minimum Efficiency;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 35  ;   ;Calendar Rounding Precision;Decimal;InitValue=0,0001;
                                                   CaptionML=ENU=Calendar Rounding Precision;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0,0001;
                                                   NotBlank=Yes }
    { 36  ;   ;Simulation Type     ;Option        ;CaptionML=ENU=Simulation Type;
                                                   OptionCaptionML=ENU=Moves,Moves When Necessary,Critical;
                                                   OptionString=Moves,Moves When Necessary,Critical }
    { 37  ;   ;Shop Calendar Code  ;Code10        ;TableRelation="Shop Calendar";
                                                   CaptionML=ENU=Shop Calendar Code }
    { 38  ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
    { 39  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 40  ;   ;Work Shift Filter   ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Work Shift";
                                                   CaptionML=ENU=Work Shift Filter }
    { 41  ;   ;Capacity (Total)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Calendar Entry"."Capacity (Total)" WHERE (Capacity Type=CONST(Work Center),
                                                                                                              No.=FIELD(No.),
                                                                                                              Work Shift Code=FIELD(Work Shift Filter),
                                                                                                              Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=Capacity (Total);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 42  ;   ;Capacity (Effective);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Calendar Entry"."Capacity (Effective)" WHERE (Capacity Type=CONST(Work Center),
                                                                                                                  No.=FIELD(No.),
                                                                                                                  Work Shift Code=FIELD(Work Shift Filter),
                                                                                                                  Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=Capacity (Effective);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 44  ;   ;Prod. Order Need (Qty.);Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Capacity Need"."Allocated Time" WHERE (Work Center No.=FIELD(No.),
                                                                                                                       Status=FIELD(Prod. Order Status Filter),
                                                                                                                       Date=FIELD(Date Filter),
                                                                                                                       Requested Only=CONST(No)));
                                                   CaptionML=ENU=Prod. Order Need (Qty.);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 45  ;   ;Prod. Order Need Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Routing Line"."Expected Operation Cost Amt." WHERE (Work Center No.=FIELD(No.),
                                                                                                                                    Status=FIELD(Prod. Order Status Filter)));
                                                   CaptionML=ENU=Prod. Order Need Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 47  ;   ;Prod. Order Status Filter;Option   ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Prod. Order Status Filter;
                                                   OptionCaptionML=ENU=Simulated,Planned,Firm Planned,Released,Finished;
                                                   OptionString=Simulated,Planned,Firm Planned,Released,Finished }
    { 50  ;   ;Unit Cost Calculation;Option       ;CaptionML=ENU=Unit Cost Calculation;
                                                   OptionCaptionML=ENU=Time,Units;
                                                   OptionString=Time,Units }
    { 51  ;   ;Specific Unit Cost  ;Boolean       ;CaptionML=ENU=Specific Unit Cost }
    { 52  ;   ;Consolidated Calendar;Boolean      ;CaptionML=ENU=Consolidated Calendar }
    { 53  ;   ;Flushing Method     ;Option        ;InitValue=Manual;
                                                   CaptionML=ENU=Flushing Method;
                                                   OptionCaptionML=ENU=Manual,Forward,Backward;
                                                   OptionString=Manual,Forward,Backward }
    { 80  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 81  ;   ;Overhead Rate       ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=ENU=Overhead Rate;
                                                   AutoFormatType=2 }
    { 82  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 83  ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 84  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region Code }
    { 7300;   ;Location Code       ;Code10        ;TableRelation=Location.Code WHERE (Use As In-Transit=CONST(No),
                                                                                      Bin Mandatory=CONST(Yes));
                                                   OnValidate=VAR
                                                                Location@1000 : Record 14;
                                                                MachineCenter@1001 : Record 99000758;
                                                                WhseIntegrationMgt@1002 : Codeunit 7317;
                                                                AutoUpdate@1003 : Boolean;
                                                              BEGIN
                                                                IF "Location Code" <> xRec."Location Code" THEN BEGIN
                                                                  IF "Location Code" <> '' THEN BEGIN
                                                                    Location.GET("Location Code");
                                                                    WhseIntegrationMgt.CheckLocationCode(Location,DATABASE::"Work Center","No.");
                                                                  END;

                                                                  IF "Open Shop Floor Bin Code" <> '' THEN BEGIN
                                                                    IF ConfirmAutoRemovalOfBinCode(AutoUpdate) THEN
                                                                      VALIDATE("Open Shop Floor Bin Code",'')
                                                                    ELSE
                                                                      TESTFIELD("Open Shop Floor Bin Code",'');
                                                                  END;
                                                                  IF "To-Production Bin Code" <> '' THEN BEGIN
                                                                    IF ConfirmAutoRemovalOfBinCode(AutoUpdate) THEN
                                                                      VALIDATE("To-Production Bin Code",'')
                                                                    ELSE
                                                                      TESTFIELD("To-Production Bin Code",'');
                                                                  END;
                                                                  IF "From-Production Bin Code" <> '' THEN BEGIN
                                                                    IF ConfirmAutoRemovalOfBinCode(AutoUpdate) THEN
                                                                      VALIDATE("From-Production Bin Code",'')
                                                                    ELSE
                                                                      TESTFIELD("From-Production Bin Code",'');
                                                                  END;
                                                                  MachineCenter.SETCURRENTKEY("Work Center No.");
                                                                  MachineCenter.SETRANGE("Work Center No.","No.");
                                                                  IF MachineCenter.FINDSET(TRUE) THEN
                                                                    REPEAT
                                                                      MachineCenter."Location Code" := "Location Code";
                                                                      IF MachineCenter."Open Shop Floor Bin Code" <> '' THEN BEGIN
                                                                        IF ConfirmAutoRemovalOfBinCode(AutoUpdate) THEN
                                                                          MachineCenter.VALIDATE("Open Shop Floor Bin Code",'')
                                                                        ELSE
                                                                          MachineCenter.TESTFIELD("Open Shop Floor Bin Code",'');
                                                                      END;
                                                                      IF MachineCenter."To-Production Bin Code" <> '' THEN BEGIN
                                                                        IF ConfirmAutoRemovalOfBinCode(AutoUpdate) THEN
                                                                          MachineCenter.VALIDATE("To-Production Bin Code",'')
                                                                        ELSE
                                                                          MachineCenter.TESTFIELD("To-Production Bin Code",'');
                                                                      END;
                                                                      IF MachineCenter."From-Production Bin Code" <> '' THEN BEGIN
                                                                        IF ConfirmAutoRemovalOfBinCode(AutoUpdate) THEN
                                                                          MachineCenter.VALIDATE("From-Production Bin Code",'')
                                                                        ELSE
                                                                          MachineCenter.TESTFIELD("From-Production Bin Code",'');
                                                                      END;
                                                                      MachineCenter.MODIFY(TRUE);
                                                                    UNTIL MachineCenter.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 7301;   ;Open Shop Floor Bin Code;Code20    ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode("Location Code",
                                                                  "Open Shop Floor Bin Code",
                                                                  FIELDCAPTION("Open Shop Floor Bin Code"),
                                                                  DATABASE::"Work Center","No.");
                                                              END;

                                                   CaptionML=ENU=Open Shop Floor Bin Code }
    { 7302;   ;To-Production Bin Code;Code20      ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode("Location Code",
                                                                  "To-Production Bin Code",
                                                                  FIELDCAPTION("To-Production Bin Code"),
                                                                  DATABASE::"Work Center","No.");
                                                              END;

                                                   CaptionML=ENU=To-Production Bin Code }
    { 7303;   ;From-Production Bin Code;Code20    ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode("Location Code",
                                                                  "From-Production Bin Code",
                                                                  FIELDCAPTION("From-Production Bin Code"),
                                                                  DATABASE::"Work Center","No.");
                                                              END;

                                                   CaptionML=ENU=From-Production Bin Code }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Name                              }
    {    ;Work Center Group Code                   }
    {    ;Subcontractor No.                        }
    {    ;Name                                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The Work Center is being used on production orders.';
      Text001@1001 : TextConst 'ENU=Do you want to change %1?';
      Text002@1002 : TextConst 'ENU=Work Center Group Code is changed...\\';
      Text003@1003 : TextConst 'ENU=Calendar Entry    #1###### @2@@@@@@@@@@@@@\';
      Text004@1004 : TextConst 'ENU=Calendar Absent.  #3###### @4@@@@@@@@@@@@@\';
      Text006@1005 : TextConst 'ENU=Prod. Order Need  #7###### @8@@@@@@@@@@@@@';
      Text007@1006 : TextConst 'ENU=%1 cannot be changed for scheduled work centers.';
      Text008@1007 : TextConst 'ENU=Capacity Unit of Time is corrected on\\';
      Text009@1008 : TextConst 'ENU=Calendar Entry    #1###### @2@@@@@@@@@@@@@';
      PostCode@1024 : Record 225;
      MfgSetup@1009 : Record 99000765;
      WorkCenter@1010 : Record 99000754;
      CapLedgEntry@1016 : Record 5832;
      CalendarEntry@1011 : Record 99000757;
      CalAbsentEntry@1012 : Record 99000760;
      MfgCommentLine@1013 : Record 99000770;
      RtngLine@1014 : Record 99000764;
      GLSetup@1022 : Record 98;
      NoSeriesMgt@1015 : Codeunit 396;
      DimMgt@1020 : Codeunit 408;
      Window@1017 : Dialog;
      EntryCounter@1018 : Integer;
      NoOfRecords@1019 : Integer;
      GLSetupRead@1021 : Boolean;
      Text010@1023 : TextConst '@@@="%1 = Table caption; %2 = Field Value; %3 = Table Caption";ENU=You cannot delete %1 %2 because there is at least one %3 associated with it.';
      Text011@1025 : TextConst 'ENU=If you change the %1, then all bin codes on the %2 and related %3 will be removed. Are you sure that you want to continue?';
      DPA_Management@1100000999 : Codeunit 11012783;
      SkipModify@1100528400 : Boolean;

    PROCEDURE AssistEdit@2(OldWorkCenter@1000 : Record 99000754) : Boolean;
    BEGIN
      WITH WorkCenter DO BEGIN
        WorkCenter := Rec;
        MfgSetup.GET;
        MfgSetup.TESTFIELD("Work Center Nos.");
        IF NoSeriesMgt.SelectSeries(MfgSetup."Work Center Nos.",OldWorkCenter."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := WorkCenter;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.SaveDefaultDim(DATABASE::"Work Center","No.",FieldNumber,ShortcutDimCode);
      IF NOT SkipModify THEN //**4PS.n
        MODIFY;
    END;

    LOCAL PROCEDURE GetGLSetup@14();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE ConfirmAutoRemovalOfBinCode@1(VAR AutoUpdate@1000 : Boolean) : Boolean;
    VAR
      MachineCenter@1001 : Record 99000758;
    BEGIN
      IF AutoUpdate THEN
        EXIT(TRUE);

      IF CONFIRM(Text011,FALSE,FIELDCAPTION("Location Code"),TABLECAPTION,MachineCenter.TABLECAPTION) THEN
        AutoUpdate := TRUE;

      EXIT(AutoUpdate);
    END;

    PROCEDURE GetBinCode@9(UseFlushingMethod@1000 : Boolean;FlushingMethod@1001 : 'Manual,Forward,Backward,Pick + Forward,Pick + Backward') : Code[20];
    BEGIN
      IF NOT UseFlushingMethod THEN
        EXIT("From-Production Bin Code");

      CASE FlushingMethod OF
        FlushingMethod::Manual,
        FlushingMethod::"Pick + Forward",
        FlushingMethod::"Pick + Backward":
          EXIT("To-Production Bin Code");
        FlushingMethod::Forward,
        FlushingMethod::Backward:
          EXIT("Open Shop Floor Bin Code");
      END;
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Global Dimension 1 Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::"Work Center");
      IF Dimension1Code <> '' THEN
        "Global Dimension 1 Code" := Dimension1Code;

      IF "Global Dimension 1 Code" <> '' THEN BEGIN
        SkipModify := TRUE;
        VALIDATE("Global Dimension 1 Code");
        SkipModify := FALSE;
      END;
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(99000754) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 99000754');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Work Center", "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    BEGIN
    END.
  }
}

