OBJECT XMLport 11012105 Imp. Job
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00Toolsv1;
  }
  PROPERTIES
  {
    CaptionML=ENU=Imp. Job;
    DefaultFieldsValidation=No;
    OnInitXMLport=BEGIN
                    XMLNo := 11012105;
                    MainTableID := 11072003;
                  END;

    OnPreXMLport=BEGIN
                   IF NOT currXMLport.IMPORTFILE THEN BEGIN
                     AddConversionFileFormatLine;
                     FillConversionXMLPortFields;
                     COMMIT;
                     ERROR('');
                   END;

                   ConvMgt.CheckComCde(CreateNewNosBln,MainTableID,CommentCde);
                   ConvMgt.CheckComCde(LookupCustNoBln,18,CustCommentCde);
                   ConvMgt.CheckComCde(LookupMainProjNoBln,11072003,MainProjCommentCde);

                   ConvMgt.DeleteConComment(XMLNo);
                   ConvMgt.CreateConComment(XMLNo,STRSUBSTNO('Import File: %1.',currXMLport.FILENAME));
                   ConvMgt.CreateConComment(XMLNo,'Start');
                 END;

    OnPostXMLport=BEGIN
                    IF NOT RunIsImportRunBln THEN
                      currXMLport.BREAK;

                    ConvMgt.CreateConComment(XMLNo,'Stop');
                    ConvMgt.CreateConComment(XMLNo,ConvMgt.CreateNoOfLinesCommentTxt(MainTableID,ImpLineCounter));
                    ConvMgt.CreateConComment(XMLNo,STRSUBSTNO(ConvMgt.CreateNoOfLinesCommentTxt(11012005,PrincipalCounter)));
                  END;

    Format=Variable Text;
    FieldSeparator=[;];
  }
  ELEMENTS
  {
    { [{755F5B7F-F062-4834-8364-DC4CD51C5A62}];  ;Root                ;Element ;Text     }

    { [{A7DBD164-8D3E-4F8D-B3A0-89F91BC12205}];1 ;Job                 ;Element ;Table   ;
                                                  SourceTable=Table11072003;
                                                  SourceTableView=SORTING(Field1);
                                                  Import::OnAfterInitRecord=BEGIN
                                                                              ClearFields;
                                                                            END;

                                                  Import::OnBeforeInsertRecord=VAR
                                                                                 ContactPerson@1100409000 : Record 5050;
                                                                               BEGIN
                                                                                 StripData;
                                                                                 ImpLineCounter := ImpLineCounter + 1;
                                                                                 CLEAR(Job);
                                                                                 CustCde := ConvMgt.DetermineNewCode(LookupCustNoBln,CommentRec."Table Name"::Customer,CustCommentCde,B);

                                                                                 WITH Job DO BEGIN
                                                                                   IF W <> '' THEN BEGIN
                                                                                     "Small Project" := TRUE;
                                                                                     "Bill-to Customer No." := CustCde;
                                                                                   END;

                                                                                   IF CreateNewNosBln THEN
                                                                                     "No." := ''
                                                                                   ELSE
                                                                                     "No." := A;

                                                                                   INSERT(TRUE);
                                                                                   IF CreateNewNosBln THEN
                                                                                     ConvMgt.FillComment(CommentRec."Table Name"::Job,"No.",CommentCde,A);

                                                                                   // Determine Main Project Only succeeds if Main projects itself are already present (converted) !!

                                                                                   IF R <> '' THEN BEGIN
                                                                                     IF R = A THEN
                                                                                       VALIDATE("Single/Main/Sub Project","Single/Main/Sub Project"::"Main Project")
                                                                                     ELSE BEGIN
                                                                                       VALIDATE("Single/Main/Sub Project","Single/Main/Sub Project"::"Sub Project");
                                                                                       VALIDATE("Main Project",ConvMgt.DetermineNewCode(LookupMainProjNoBln,CommentRec."Table Name"::Job,MainProjCommentCde,R));
                                                                                     END;
                                                                                   END;

                                                                                   IF ADInt = 1 THEN
                                                                                     "Settlement Method" := "Settlement Method"::"Cost Plus";

                                                                                   IF ConvMgt.IsCustomerPresent(CustCde) THEN
                                                                                     AddPrincipal
                                                                                   ELSE
                                                                                     ConvMgt.CreateConComment(XMLNo,ConvMgt.CreateNoSubRecAddedCommentTxt(
                                                                                       18,
                                                                                       B,
                                                                                       11012005,
                                                                                       11072003,
                                                                                       "No."));

                                                                                   IF W <> '' THEN BEGIN
                                                                                     AddressRec.SETRANGE("Customer No.","Bill-to Customer No.");
                                                                                     AddressRec.SETRANGE(Code,W);
                                                                                     AddressRec.SETRANGE("Project Address",TRUE);
                                                                                     IF AddressRec.FIND('-') THEN BEGIN
                                                                                       "Project Address Code" := W;
                                                                                       Name := AddressRec.Name;
                                                                                     END;
                                                                                   END;

                                                                                   VALIDATE(Description,C);
                                                                                   Address := D;
                                                                                   "Address 2" := E;
                                                                                   "Post Code" := F;
                                                                                   City := ConvMgt.PostCodePresent(F);
                                                                                   IF City = '' THEN
                                                                                     City := G;
                                                                                   "Phone No." := H;
                                                                                   "Fax No." := I;

                                                                                   VALIDATE("Project Type",J);
                                                                                   IF Q <> '' THEN
                                                                                     VALIDATE("Global Dimension 1 Code",Q);
                                                                                   VALIDATE(Type,S);

                                                                                   IF AEInt = 1 THEN BEGIN
                                                                                     VALIDATE("Contract Type","Contract Type"::Subcontracting);
                                                                                     IF L <> '' THEN
                                                                                       VALIDATE("% Labor",LDec);
                                                                                     IF M <> '' THEN
                                                                                       VALIDATE("% to B Account",MDec);
                                                                                   END;

                                                                                   IF ConvMgt.IsEmployeePresent(P) THEN
                                                                                     VALIDATE("Project Manager",P)
                                                                                   ELSE
                                                                                     IF P <> '' THEN
                                                                                       CommentEmplNotPresent(FIELDCAPTION("Project Manager"),P);

                                                                                   IF ConvMgt.IsEmployeePresent(AA) THEN
                                                                                     VALIDATE("Project Engineer",AA)
                                                                                   ELSE
                                                                                     IF AA <> '' THEN
                                                                                       CommentEmplNotPresent(FIELDCAPTION("Project Engineer"),AA);

                                                                                   IF ConvMgt.IsEmployeePresent(AB) THEN
                                                                                     VALIDATE("Site Manager",AB)
                                                                                   ELSE
                                                                                     IF AB <> '' THEN
                                                                                       CommentEmplNotPresent(FIELDCAPTION("Site Manager"),AB);

                                                                                   IF ConvMgt.IsEmployeePresent(AC) THEN
                                                                                     VALIDATE(Estimator,AC)
                                                                                   ELSE
                                                                                     IF AC <> '' THEN
                                                                                       CommentEmplNotPresent(FIELDCAPTION(Estimator),AC);

                                                                                   VALIDATE("Starting Date",XDate);
                                                                                   VALIDATE("Ending Date",YDate);
                                                                                   VALIDATE("Territory Code",Z);

                                                                                   "Project Status" := "Project Status"::Production;
                                                                                   MODIFY(TRUE);
                                                                                 END;

                                                                                 ClearFields;
                                                                                 currXMLport.SKIP;
                                                                               END;
                                                                                }

    { [{5C900A9C-2240-4551-8D3B-A67A2D629F53}];2 ;A                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{5E5EE9AF-296C-4B48-B3A4-71FD1D3BDBB8}];2 ;B                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{81EF86E1-A401-49BA-998E-C96326459340}];2 ;C                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{A4D141C2-7800-4941-8428-EBDFE695445E}];2 ;D                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{7009774A-5D5B-4893-B574-E0BA7086A95E}];2 ;E                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{61A54020-5A22-4777-8499-A876D2E08C7F}];2 ;F                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{C3892DEF-6174-4845-A9BD-FA81350F4D61}];2 ;G                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{3B150350-762E-4D06-90AD-0B0A47DC3FEC}];2 ;H                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{9843402E-AD67-43E3-83FF-EC975E55B3F2}];2 ;I                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{E7CE1720-702B-4D9A-AEFC-4D3968919ABC}];2 ;J                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{5AE9AE13-7450-478C-8D9E-AC817D7F71FF}];2 ;K                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{90053266-B5BA-4C55-8A52-DB7447E9D99D}];2 ;L                   ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF L <> '' THEN
                                                                                    EVALUATE(LDec,L);
                                                                                END;
                                                                                 }

    { [{9AB2AB4C-715D-43E4-A2A5-6658CE4140BD}];2 ;M                   ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF M <> '' THEN
                                                                                    EVALUATE(MDec,M);
                                                                                END;
                                                                                 }

    { [{06BCF328-E298-4C4B-AA49-4C7C37E0CFDB}];2 ;N                   ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF N <> '' THEN
                                                                                    EVALUATE(NDec,N);
                                                                                END;
                                                                                 }

    { [{417B5AE0-F7F0-4C62-BF94-8F190859D7E1}];2 ;O                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{49450BA3-DF78-45C7-B141-CF97138EBB79}];2 ;P                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{63E88C6F-614C-4576-84AC-E6ED90488EA3}];2 ;Q                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{4DE894A5-3D25-4067-B986-25835834C5D6}];2 ;R                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{64CC39BC-E41F-4BBE-992C-0F61A1F625B0}];2 ;S                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{A345EA35-9079-4219-A4A9-19ECE6D4D472}];2 ;T                   ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF T <> '' THEN
                                                                                    EVALUATE(TDate,T);
                                                                                END;
                                                                                 }

    { [{80227F89-07D2-4832-82F1-66D5E2AE22F9}];2 ;U                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{A4F20BFC-579F-4D4B-9EF4-0BCEA57D7BB9}];2 ;V                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{CBF4615E-8F0E-43D6-B477-490FB7ECB247}];2 ;W                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{2557FF88-D523-45F8-BFF1-AC27FBFC903D}];2 ;X                   ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF X <> '' THEN
                                                                                    EVALUATE(XDate,X);
                                                                                END;
                                                                                 }

    { [{ADECDC30-6B6E-4FB2-AEEB-2A777AE89E0D}];2 ;Y                   ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF Y <> '' THEN
                                                                                    EVALUATE(YDate,Y);
                                                                                END;
                                                                                 }

    { [{FA7F3FF7-E489-4283-96D3-5D4BE41F5611}];2 ;Z                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{24AD7631-F38E-4251-91F6-692757C3E9C6}];2 ;AA                  ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{15DD93AA-11BC-434F-872F-306C5FD2538C}];2 ;AB                  ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{B3FA7431-C4C8-4C64-870D-5D1E5E2705F9}];2 ;AC                  ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{E842176D-8259-4B03-B99B-F720DA532A81}];2 ;AD                  ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF AD <> '' THEN
                                                                                    EVALUATE(ADInt,AD);
                                                                                END;
                                                                                 }

    { [{3CD82279-CA3D-419F-833F-11E617A7C01F}];2 ;AE                  ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF AE <> '' THEN
                                                                                    EVALUATE(AEInt,AE);
                                                                                END;
                                                                                 }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      CaptionML=ENU=Lookup Main Project No. based on old Main Project No.;
      OnOpenPage=BEGIN
                   RunIsImportRunBln := TRUE;
                   CreateNewNosBln := TRUE;
                   LookupCustNoBln := TRUE;
                   LookupMainProjNoBln := TRUE;
                 END;

    }
    CONTROLS
    {
      { 1100409010;;Container;
                  Name=Imp. Job;
                  ContainerType=ContentArea }

      { 1100409009;1;Group  ;
                  CaptionML=ENU=Options;
                  GroupType=Group }

      { 1100525002;2;Field  ;
                  CaptionML=ENU=Create new Project Nos.;
                  SourceExpr=CreateNewNosBln }

      { 1100525003;2;Field  ;
                  Name=ComCde;
                  CaptionML=ENU=Comment Code for storing old Project No.;
                  SourceExpr=CommentCde;
                  TableRelation="Comment Code" }

      { 1100525004;2;Field  ;
                  CaptionML=ENU=Lookup Customer No. based on old Customer No.;
                  SourceExpr=LookupCustNoBln }

      { 1100525000;2;Field  ;
                  Name=CustComCde;
                  CaptionML=ENU=Comment Code for searching Customer No.;
                  SourceExpr=CustCommentCde;
                  TableRelation="Comment Code" }

      { 1100525005;2;Field  ;
                  CaptionML=ENU=Lookup Main Project No. based on old Main Project No.;
                  SourceExpr=LookupMainProjNoBln }

      { 1100525006;2;Field  ;
                  Name=MainProjComCde;
                  OptionCaptionML=ENU=Comment Code for searching Main Project No.;
                  SourceExpr=MainProjCommentCde;
                  TableRelation="Comment Code" }

    }
  }
  CODE
  {
    VAR
      "// GENERAL"@1100525054 : Integer;
      CommentRec@1100525053 : Record 97;
      ConvMgt@1100525016 : Codeunit 11020212;
      NoSerieMgt@1100525051 : Codeunit 396;
      XMLNo@1100525049 : Integer;
      MainTableID@1100525048 : Integer;
      CreateNewNosBln@1100525047 : Boolean;
      ImpLineCounter@1100525046 : Integer;
      CommentCde@1100525045 : Code[10];
      ConversionFileFormat@1100525044 : Record 11020691;
      RunIsImportRunBln@1100525043 : Boolean;
      "//"@1100525042 : Integer;
      "// THIS DATAPORT"@1100525041 : Integer;
      ProjectPrincipalRec@1100525040 : Record 11012005;
      AddressRec@1100525039 : Record 222;
      UseOlpMainProjectNoBln@1100525038 : Boolean;
      CustCde@1100525036 : Code[20];
      LookupCustNoBln@1100525035 : Boolean;
      CustCommentCde@1100525034 : Code[10];
      LookupMainProjNoBln@1100525033 : Boolean;
      MainProjCommentCde@1100525032 : Code[10];
      PrincipalCounter@1100525031 : Integer;
      Text001@1100525010 : TextConst 'ENU="<empty>=Fixed Price, [1]=Cost Plus"';
      Text002@1100525009 : TextConst 'ENU="<empty>=Maincontracting, [1]=Subcontracting"';
      LDec@1100525019 : Decimal;
      MDec@1100525018 : Decimal;
      NDec@1100525017 : Decimal;
      ADInt@1100525001 : Integer;
      AEInt@1100525000 : Integer;
      TDate@1100525002 : Date;
      XDate@1100525003 : Date;
      YDate@1100525004 : Date;

    PROCEDURE AddPrincipal@1100485003();
    VAR
      lvRelatieRec@1100485005 : Record 5050;
      lvKlantRec@1100485004 : Record 18;
      lvZakenrelatieRec@1100485003 : Record 5054;
      lvProjectPrincipal@1000000000 : Record 11012005;
      lvMMKaartRec@1000000001 : Record 11012004;
    BEGIN
      lvProjectPrincipal.INIT;
      lvProjectPrincipal.VALIDATE("Project No.",Job."No.");
      lvProjectPrincipal.VALIDATE(Principal,CustCde);
      lvProjectPrincipal.INSERT(TRUE);

      PrincipalCounter := PrincipalCounter + 1;
      lvProjectPrincipal.VALIDATE("Main Project No.",Job."Main Project");
      IF Job."Settlement Method" = Job."Settlement Method"::"Fixed Price" THEN
        lvProjectPrincipal.VALIDATE("Contract Amount (LCY)",NDec)
      ELSE
        lvProjectPrincipal."Cost Plus Customer" := TRUE;
      lvProjectPrincipal.VALIDATE("Principal Reference",O);
      lvProjectPrincipal.VALIDATE("VAT Prod. Posting Group",K);
      lvProjectPrincipal.VALIDATE("Order Date",TDate);
      lvProjectPrincipal.VALIDATE("Invoice Text Installments",U);
      lvProjectPrincipal.VALIDATE("Invoice Text Cost Plus",V);
      lvProjectPrincipal.MODIFY(TRUE);

      Job."Bill-to Customer No." := lvProjectPrincipal.Principal;
    END;

    PROCEDURE StripData@1100485000();
    BEGIN
      A := DELCHR(A,'<>',' ');
      B := DELCHR(B,'<>',' ');
      C := DELCHR(C,'<>',' ');
      D := DELCHR(D,'<>',' ');
      E := DELCHR(E,'<>',' ');
      F := DELCHR(F,'<>',' ');
      G := DELCHR(G,'<>',' ');
      H := DELCHR(H,'<>',' ');
      I := DELCHR(I,'<>',' ');
      J := DELCHR(J,'<>',' ');
      K := DELCHR(K,'<>',' ');
      O := DELCHR(O,'<>',' ');
      P := DELCHR(P,'<>',' ');
      Q := DELCHR(Q,'<>',' ');
      R := DELCHR(R,'<>',' ');
      S := DELCHR(S,'<>',' ');
      V := DELCHR(V,'<>',' ');
      W := DELCHR(W,'<>',' ');
      Z := DELCHR(Z,'<>',' ');
      AA := DELCHR(AA,'<>',' ');
      AB := DELCHR(AB,'<>',' ');
      AC := DELCHR(AC,'<>',' ');
    END;

    PROCEDURE CommentEmplNotPresent@1100525001(FieldCaption@1100525000 : Text[50];EmplNo@1100525001 : Code[20]);
    BEGIN
      ConvMgt.CreateConComment(XMLNo,ConvMgt.CreateFieldNotFilledCommentTxt(
        5200,
        EmplNo,
        FieldCaption,
        MainTableID,
        Job."No."));
    END;

    PROCEDURE AddConversionFileFormatLine@1100529901();
    VAR
      ProjectPrincipal@1100529900 : Record 11012005;
    BEGIN
      // This function stores the file format into table [Conversion File Format].
      // There is no other standard documentation; so please maintain this function in case of customization.
      //
      // Parameters: 1: [Dataport No.],
      //             2: [csv-Column],
      //             3: [NAV Table ID],
      //             4: [NAV Field Name],
      //             5: [Data Type of dataport field],
      //             6: [extra Comment].
      //
      WITH ConversionFileFormat DO BEGIN
        ConversionFileFormat.DeleteColumnLines(XMLNo);
        InsertColumnLine(XMLNo,'A',MainTableID,Job.FIELDNAME("No."),'Code20','OldOrNewTxt');
        InsertColumnLine(XMLNo,'B',MainTableID,Job.FIELDNAME("Bill-to Customer No."),'Code20','OldTxt');
        InsertColumnLine(XMLNo,'C',MainTableID,Job.FIELDNAME(Description),'Text50','');
        InsertColumnLine(XMLNo,'D',MainTableID,Job.FIELDNAME(Address),'Text50','');
        InsertColumnLine(XMLNo,'E',MainTableID,Job.FIELDNAME("Address 2"),'Text50','');
        InsertColumnLine(XMLNo,'F',MainTableID,Job.FIELDNAME("Post Code"),'Code20','');
        InsertColumnLine(XMLNo,'G',MainTableID,Job.FIELDNAME(City),'Text30','');
        InsertColumnLine(XMLNo,'H',MainTableID,Job.FIELDNAME("Phone No."),'Text30','');
        InsertColumnLine(XMLNo,'I',MainTableID,Job.FIELDNAME("Fax No."),'Text30','');
        InsertColumnLine(XMLNo,'J',MainTableID,Job.FIELDNAME("Project Type"),'Code20','');
        InsertColumnLine(XMLNo,'K',11012005,ProjectPrincipal.FIELDNAME("VAT Prod. Posting Group"),'Code10','');
        InsertColumnLine(XMLNo,'L',11012005,ProjectPrincipal.FIELDNAME("% Labor"),'Decimal','');
        InsertColumnLine(XMLNo,'M',11012005,ProjectPrincipal.FIELDNAME("% to B Account"),'Decimal','');
        InsertColumnLine(XMLNo,'N',11012005,ProjectPrincipal.FIELDNAME("Contract Amount"),'Decimal','');
        InsertColumnLine(XMLNo,'O',11012005,ProjectPrincipal.FIELDNAME("Principal Reference"),'Text50','');
        InsertColumnLine(XMLNo,'P',MainTableID,Job.FIELDNAME("Project Manager"),'Code20','');
        InsertColumnLine(XMLNo,'Q',MainTableID,Job.FIELDNAME("Global Dimension 1 Code"),'Code20','');
        InsertColumnLine(XMLNo,'R',MainTableID,Job.FIELDNAME("Main Project"),'Code20','');
        InsertColumnLine(XMLNo,'S',MainTableID,Job.FIELDNAME(Type),'Code10','');
        InsertColumnLine(XMLNo,'T',11012005,ProjectPrincipal.FIELDNAME("Order Date"),'Date','');
        InsertColumnLine(XMLNo,'U',11012005,ProjectPrincipal.FIELDNAME("Invoice Text Installments"),'Text250','');
        InsertColumnLine(XMLNo,'V',11012005,ProjectPrincipal.FIELDNAME("Invoice Text Cost Plus"),'Text250','');
        InsertColumnLine(XMLNo,'W',MainTableID,Job.FIELDNAME("Project Address Code"),'Code10','');
        InsertColumnLine(XMLNo,'X',MainTableID,Job.FIELDNAME("Starting Date"),'Date','');
        InsertColumnLine(XMLNo,'Y',MainTableID,Job.FIELDNAME("Ending Date"),'Date','');
        InsertColumnLine(XMLNo,'Z',MainTableID,Job.FIELDNAME("Territory Code"),'Code10','');
        InsertColumnLine(XMLNo,'AA',MainTableID,Job.FIELDNAME("Project Engineer"),'Code20','');
        InsertColumnLine(XMLNo,'AB',MainTableID,Job.FIELDNAME("Site Manager"),'Code20','');
        InsertColumnLine(XMLNo,'AC',MainTableID,Job.FIELDNAME(Estimator),'Code20','');
        InsertColumnLine(XMLNo,'AD',MainTableID,Job.FIELDNAME("Settlement Method"),'Integer',Text001);
        InsertColumnLine(XMLNo,'AE',MainTableID,Job.FIELDNAME("Contract Type"),'Integer',Text002);
      END;
    END;

    PROCEDURE ClearFields@1210190000();
    BEGIN
      CLEAR(Job);
      CLEAR(CustCde);
      A := '';
      B := '';
      C := '';
      D := '';
      E := '';
      F := '';
      G := '';
      H := '';
      I := '';
      J := '';
      K := '';
      L := '';
      M := '';
      N := '';
      O := '';
      P := '';
      Q := '';
      R := '';
      S := '';
      T := '';
      U := '';
      V := '';
      W := '';
      X := '';
      Y := '';
      Z := '';
      AA := '';
      AB := '';
      AC := '';
      AD := '';
      AE := '';
      LDec := 0;
      MDec := 0;
      NDec := 0;
      ADInt := 0;
      AEInt := 0;
      TDate := 0D;
      XDate := 0D;
      YDate := 0D;
    END;

    PROCEDURE FillConversionXMLPortFields@1100409004();
    VAR
      ConversionXMLPort@1100409000 : Record 11020640;
    BEGIN
      ConversionXMLPort.GET(XMLNo);
      ConversionXMLPort."Main Table ID" := MainTableID;
      ConversionXMLPort."Page ID" := 11072004;
      ConversionXMLPort.MODIFY;
    END;

    BEGIN
    {
      // Old No.'s are stored in Comment Table (97), marked with [CommentCde].
      // Object No is stored in [XMLNo]. In case of customisation (copy of dataport) change in OnInitDataport;
      //
      // Please use [AddConversionFileFormatLine] in case Import file format is changed.
    }
    END.
  }
}

