OBJECT XMLport 11012110 Imp. Employee
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00Toolsv1;
  }
  PROPERTIES
  {
    CaptionML=ENU=Imp. Employee;
    DefaultFieldsValidation=No;
    OnInitXMLport=BEGIN
                    XMLNo := 11012110;
                    MainTableID := 5200;
                    GenSetupRec.GET();
                  END;

    OnPreXMLport=BEGIN
                   IF NOT currXMLport.IMPORTFILE THEN BEGIN
                     AddConversionFileFormatLine;
                     FillConversionXMLPortFields;
                     COMMIT;
                     ERROR('');
                   END;

                   ContactSetupRec.GET();

                   ConvMgt.DeleteConComment(XMLNo);
                   ConvMgt.CreateConComment(XMLNo,STRSUBSTNO('Import File: %1.',currXMLport.FILENAME));
                   ConvMgt.CreateConComment(XMLNo,'Start');
                 END;

    OnPostXMLport=BEGIN
                    IF NOT RunIsImportRunBln THEN
                      currXMLport.BREAK;

                    ConvMgt.CreateConComment(XMLNo,'Stop');
                    ConvMgt.CreateConComment(XMLNo,ConvMgt.CreateNoOfLinesCommentTxt(MainTableID,ImpLineCounter));
                  END;

    Format=Variable Text;
    FieldSeparator=[;];
  }
  ELEMENTS
  {
    { [{755F5B7F-F062-4834-8364-DC4CD51C5A62}];  ;Root                ;Element ;Text     }

    { [{A7DBD164-8D3E-4F8D-B3A0-89F91BC12205}];1 ;Employee            ;Element ;Table   ;
                                                  SourceTable=Table5200;
                                                  SourceTableView=SORTING(Field1);
                                                  Import::OnAfterInitRecord=BEGIN
                                                                              ClearFields;
                                                                            END;

                                                  Import::OnBeforeInsertRecord=VAR
                                                                                 ContactPerson@1100409000 : Record 5050;
                                                                               BEGIN
                                                                                 StripData;
                                                                                 ImpLineCounter := ImpLineCounter + 1;
                                                                                 CLEAR(Employee);

                                                                                 WITH Employee DO BEGIN

                                                                                   VALIDATE("No.",A);        // keep old no.
                                                                                   INSERT(TRUE);

                                                                                   IF XInt = 0 THEN             // Only validate Employer in case internal employee
                                                                                     VALIDATE(Employer,B);

                                                                                   VALIDATE("First Name",C);
                                                                                   VALIDATE("Last Name",D);
                                                                                   VALIDATE("Middle Name",E);
                                                                                   VALIDATE(Initials,F);
                                                                                   VALIDATE("Job Title",G);
                                                                                   VALIDATE(Title,H);
                                                                                   IF IInt = 1 THEN
                                                                                     VALIDATE(Gender,Gender::Female)
                                                                                   ELSE
                                                                                     VALIDATE(Gender,Gender::Male);
                                                                                   "E-Mail" := J;
                                                                                   IF (K <> '') AND (K <> "Phone No.") THEN
                                                                                     "Phone No." := K;
                                                                                   "Mobile Phone No." := L;
                                                                                   VALIDATE(Status,Status::Active);
                                                                                   IF MDate <> 0D THEN
                                                                                    VALIDATE("Employment Date",MDate);
                                                                                   VALIDATE("Trade Association",N);
                                                                                   VALIDATE("Norm Hours",ODec);
                                                                                   VALIDATE("Norm Days",PDec);
                                                                                   VALIDATE("Social Security No.",Q);
                                                                                   IF RDate <> 0D THEN
                                                                                     VALIDATE("Birth Date",RDate);
                                                                                   "Manager No." := S;

                                                                                   VALIDATE("Global Dimension 1 Code",T);
                                                                                   VALIDATE("Global Dimension 2 Code",U);
                                                                                   IF V <> '' THEN BEGIN
                                                                                     IF Dim3Cde = '' THEN
                                                                                       ERROR(Text001);
                                                                                     ConvMgt.AddDefaultDim(5200,"No.",Dim3Cde,V);
                                                                                   END;
                                                                                   IF W <> '' THEN BEGIN
                                                                                     IF Dim4Cde = '' THEN
                                                                                       ERROR(Text002);
                                                                                     ConvMgt.AddDefaultDim(5200,"No.",Dim4Cde,W);
                                                                                   END;

                                                                                   IF XInt = 1 THEN
                                                                                     VALIDATE(External,TRUE);
                                                                                   IF YInt = 1 THEN
                                                                                     VALIDATE("Pre-Registration Hours",TRUE);

                                                                                   Address := Z;
                                                                                   "Address 2" := AA;
                                                                                   "Post Code" := AB;
                                                                                   City := ConvMgt.PostCodePresent(AB);
                                                                                   IF City = '' THEN
                                                                                     City := AC;

                                                                                   DetermineAccountHours;

                                                                                   MODIFY(TRUE);

                                                                                   IF (ContactSetupRec."Bus. Rel. Code for Employees" <> '') AND (XInt=0) THEN
                                                                                     OnModifyRelation(Employee,xRec);

                                                                                 END;

                                                                                 ClearFields;
                                                                                 currXMLport.SKIP;
                                                                               END;
                                                                                }

    { [{5C900A9C-2240-4551-8D3B-A67A2D629F53}];2 ;A                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{5E5EE9AF-296C-4B48-B3A4-71FD1D3BDBB8}];2 ;B                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{81EF86E1-A401-49BA-998E-C96326459340}];2 ;C                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{A4D141C2-7800-4941-8428-EBDFE695445E}];2 ;D                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{7009774A-5D5B-4893-B574-E0BA7086A95E}];2 ;E                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{61A54020-5A22-4777-8499-A876D2E08C7F}];2 ;F                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{C3892DEF-6174-4845-A9BD-FA81350F4D61}];2 ;G                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{3B150350-762E-4D06-90AD-0B0A47DC3FEC}];2 ;H                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{9843402E-AD67-43E3-83FF-EC975E55B3F2}];2 ;I                   ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF I <> '' THEN
                                                                                    EVALUATE(IInt,I);
                                                                                END;
                                                                                 }

    { [{E7CE1720-702B-4D9A-AEFC-4D3968919ABC}];2 ;J                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{5AE9AE13-7450-478C-8D9E-AC817D7F71FF}];2 ;K                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{90053266-B5BA-4C55-8A52-DB7447E9D99D}];2 ;L                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{9AB2AB4C-715D-43E4-A2A5-6658CE4140BD}];2 ;M                   ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF M <> '' THEN
                                                                                    EVALUATE(MDate,M);
                                                                                END;
                                                                                 }

    { [{06BCF328-E298-4C4B-AA49-4C7C37E0CFDB}];2 ;N                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{417B5AE0-F7F0-4C62-BF94-8F190859D7E1}];2 ;O                   ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF O <> '' THEN
                                                                                    EVALUATE(ODec,O);
                                                                                END;
                                                                                 }

    { [{49450BA3-DF78-45C7-B141-CF97138EBB79}];2 ;P                   ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF P <> '' THEN
                                                                                    EVALUATE(PDec,P);
                                                                                END;
                                                                                 }

    { [{63E88C6F-614C-4576-84AC-E6ED90488EA3}];2 ;Q                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{4DE894A5-3D25-4067-B986-25835834C5D6}];2 ;R                   ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF R <> '' THEN
                                                                                    EVALUATE(RDate,R);
                                                                                END;
                                                                                 }

    { [{64CC39BC-E41F-4BBE-992C-0F61A1F625B0}];2 ;S                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{A345EA35-9079-4219-A4A9-19ECE6D4D472}];2 ;T                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{80227F89-07D2-4832-82F1-66D5E2AE22F9}];2 ;U                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{A4F20BFC-579F-4D4B-9EF4-0BCEA57D7BB9}];2 ;V                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{CBF4615E-8F0E-43D6-B477-490FB7ECB247}];2 ;W                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{2557FF88-D523-45F8-BFF1-AC27FBFC903D}];2 ;X                   ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF X <> '' THEN
                                                                                    EVALUATE(XInt,X);
                                                                                END;
                                                                                 }

    { [{ADECDC30-6B6E-4FB2-AEEB-2A777AE89E0D}];2 ;Y                   ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF Y <> '' THEN
                                                                                    EVALUATE(YInt,Y);
                                                                                END;
                                                                                 }

    { [{32160ED7-7508-477F-8370-FED52344440B}];2 ;Z                   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{F3A4BCD7-10D8-4A4E-A921-F5A805EF9DE6}];2 ;AA                  ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{21DF80E5-ADD6-48E4-A709-BCF4AA860769}];2 ;AB                  ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{6B0DE53A-ACE6-444F-A4EC-E464265B785B}];2 ;AC                  ;Element ;Text    ;
                                                  MinOccurs=Zero }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      CaptionML=ENU=Lookup Main Project No. based on old Main Project No.;
      OnOpenPage=BEGIN
                   RunIsImportRunBln := TRUE;
                 END;

    }
    CONTROLS
    {
      { 1100409010;;Container;
                  Name=Imp. Employee;
                  ContainerType=ContentArea }

      { 1100409009;1;Group  ;
                  CaptionML=ENU=Options;
                  GroupType=Group }

      { 1100525001;2;Field  ;
                  CaptionML=ENU=Third dimension;
                  SourceExpr=Dim3Cde;
                  TableRelation=Dimension }

      { 1100525002;2;Field  ;
                  CaptionML=ENU=Fourth dimension;
                  SourceExpr=Dim4Cde;
                  TableRelation=Dimension }

    }
  }
  CODE
  {
    VAR
      "// GENERAL"@1100525045 : Integer;
      CommentRec@1100525044 : Record 97;
      ConvMgt@1100525043 : Codeunit 11020212;
      NoSerieMgt@1100525042 : Codeunit 396;
      XMLNo@1100525040 : Integer;
      MainTableID@1100525039 : Integer;
      CreateNewNosBln@1100525038 : Boolean;
      ImpLineCounter@1100525037 : Integer;
      CommentCde@1100525036 : Code[10];
      ContactSetupRec@1100525035 : Record 5079;
      ConversionFileFormat@1100525033 : Record 11020691;
      RunIsImportRunBln@1100525032 : Boolean;
      xRec@1100525031 : Record 5200;
      GenSetupRec@1100525030 : Record 98;
      Dim3Cde@1100525028 : Code[20];
      Dim4Cde@1100525027 : Code[20];
      IInt@1100525018 : Integer;
      MDate@1100525014 : Date;
      ODec@1100525012 : Decimal;
      PDec@1100525011 : Decimal;
      RDate@1100525007 : Date;
      XInt@1100525001 : Integer;
      YInt@1100525000 : Integer;
      Text001@1100525016 : TextConst 'ENU=Third Dimension must be filled';
      Text002@1100525015 : TextConst 'ENU=Fourth Dimension must be filled';
      Text003@1100525010 : TextConst 'ENU="<empty>=Male, [1]=Female"';
      Text004@1100525009 : TextConst 'ENU=Third Dimension';
      Text005@1100525008 : TextConst 'ENU=Fourth Dimension';

    PROCEDURE StripData@1100485001();
    BEGIN
      A := DELCHR(A,'<>',' ');
      B := DELCHR(B,'<>',' ');
      C := DELCHR(C,'<>',' ');
      D := DELCHR(D,'<>',' ');
      E := DELCHR(E,'<>',' ');
      F := DELCHR(F,'<>',' ');
      G := DELCHR(G,'<>',' ');
      H := DELCHR(H,'<>',' ');
      J := DELCHR(J,'<>',' ');
      K := DELCHR(K,'=',' ');
      K := DELCHR(K,'=','.');
      L := DELCHR(L,'=',' ');
      L := DELCHR(L,'=','.');
      N := DELCHR(N,'<>',' ');
    END;

    PROCEDURE AddConversionFileFormatLine@1100529901();
    VAR
      DefaultDimension@1100529900 : Record 352;
    BEGIN
      // This function stores the file format into table [Conversion File Format].
      // There is no other standard documentation; so please maintain this function in case of customization.
      //
      // Parameters: 1: [Dataport No.],
      //             2: [csv-Column],
      //             3: [NAV Table ID],
      //             4: [NAV Field Name],
      //             5: [Data Type of dataport field],
      //             6: [extra Comment].
      //
      WITH ConversionFileFormat DO BEGIN
        ConversionFileFormat.DeleteColumnLines(XMLNo);
        InsertColumnLine(XMLNo,'A',MainTableID,Employee.FIELDNAME("No."),'Code20','');
        InsertColumnLine(XMLNo,'B',MainTableID,Employee.FIELDNAME(Employer),'Code20','');
        InsertColumnLine(XMLNo,'C',MainTableID,Employee.FIELDNAME("First Name"),'Text50','');
        InsertColumnLine(XMLNo,'D',MainTableID,Employee.FIELDNAME("Last Name"),'Text50','');
        InsertColumnLine(XMLNo,'E',MainTableID,Employee.FIELDNAME("Middle Name"),'Text50','');
        InsertColumnLine(XMLNo,'F',MainTableID,Employee.FIELDNAME(Initials),'Text30','');
        InsertColumnLine(XMLNo,'G',MainTableID,Employee.FIELDNAME("Job Title"),'Text30','');
        InsertColumnLine(XMLNo,'H',MainTableID,Employee.FIELDNAME(Title),'Text30','');
        InsertColumnLine(XMLNo,'I',MainTableID,Employee.FIELDNAME(Gender),'Integer',Text003);
        InsertColumnLine(XMLNo,'J',MainTableID,Employee.FIELDNAME("E-Mail"),'Text80','');
        InsertColumnLine(XMLNo,'K',MainTableID,Employee.FIELDNAME("Phone No."),'Text30','');
        InsertColumnLine(XMLNo,'L',MainTableID,Employee.FIELDNAME("Mobile Phone No."),'Text30','');
        InsertColumnLine(XMLNo,'M',MainTableID,Employee.FIELDNAME("Employment Date"),'Date','');
        InsertColumnLine(XMLNo,'N',MainTableID,Employee.FIELDNAME("Trade Association"),'Code10','');
        InsertColumnLine(XMLNo,'O',MainTableID,Employee.FIELDNAME("Norm Hours"),'Decimal','');
        InsertColumnLine(XMLNo,'P',MainTableID,Employee.FIELDNAME("Norm Days"),'Decimal','');
        InsertColumnLine(XMLNo,'Q',MainTableID,Employee.FIELDNAME("Social Security No."),'Text30','');
        InsertColumnLine(XMLNo,'R',MainTableID,Employee.FIELDNAME("Birth Date"),'Date','');
        InsertColumnLine(XMLNo,'S',MainTableID,Employee.FIELDNAME("Manager No."),'Code20','');
        InsertColumnLine(XMLNo,'T',MainTableID,Employee.FIELDNAME("Global Dimension 1 Code"),'Code20','');
        InsertColumnLine(XMLNo,'U',MainTableID,Employee.FIELDNAME("Global Dimension 2 Code"),'Code20','');
        InsertColumnLine(XMLNo,'V',352,DefaultDimension.FIELDNAME("Dimension Value Code"),'Code20',Text004);
        InsertColumnLine(XMLNo,'W',352,DefaultDimension.FIELDNAME("Dimension Value Code"),'Code20',Text005);
        InsertColumnLine(XMLNo,'X',MainTableID,Employee.FIELDNAME(External),'Integer','OneTrueTxt');
        InsertColumnLine(XMLNo,'Y',MainTableID,Employee.FIELDNAME("Pre-Registration Hours"),'Integer','OneTrueTxt');
        InsertColumnLine(XMLNo,'Z',MainTableID,Employee.FIELDNAME(Address),'Text50','');
        InsertColumnLine(XMLNo,'AA',MainTableID,Employee.FIELDNAME("Address 2"),'Text50','');
        InsertColumnLine(XMLNo,'AB',MainTableID,Employee.FIELDNAME("Post Code"),'Code20','');
        InsertColumnLine(XMLNo,'AC',MainTableID,Employee.FIELDNAME(City),'Text30','');
      END;
    END;

    PROCEDURE ClearFields@1100529903();
    BEGIN
      CLEAR(Employee);
      A := '';
      B := '';
      C := '';
      D := '';
      E := '';
      F := '';
      G := '';
      H := '';
      I := '';
      J := '';
      K := '';
      L := '';
      M := '';
      N := '';
      O := '';
      P := '';
      Q := '';
      R := '';
      S := '';
      T := '';
      U := '';
      V := '';
      W := '';
      X := '';
      Y := '';
      Z := '';
      AA := '';
      AB := '';
      AC := '';
      IInt := 0;
      MDate := 0D;
      ODec := 0;
      PDec := 0;
      RDate := 0D;
      XInt := 0;
      YInt := 0;
    END;

    PROCEDURE FillConversionXMLPortFields@1100409004();
    VAR
      ConversionXMLPort@1100409000 : Record 11020640;
    BEGIN
      ConversionXMLPort.GET(XMLNo);
      ConversionXMLPort."Main Table ID" := MainTableID;
      ConversionXMLPort."Page ID" := 5201;
      ConversionXMLPort.MODIFY;
    END;

    BEGIN
    {
      // Old No.'s are stored in Comment Table (97), marked with [CommentCde].
      // Object No is stored in [XMLNo]. In case of customisation (copy of dataport) change in OnInitDataport;
      //
      // Please use [AddConversionFileFormatLine] in case Import file format is changed.
    }
    END.
  }
}

