OBJECT XMLport 11012355 FEG Items (CSV) v10
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=FEG-Items (CSV);
    DefaultFieldsValidation=No;
    PreserveWhiteSpace=Yes;
    OnPreXMLport=BEGIN
                   GabiSetup.GET;
                   WITH ImportSetup DO BEGIN
                     GET;
                     "Import Date-Time" := Datetime(TODAY, TIME);
                     MODIFY;
                     IF "Delete Existing Import Data" THEN BEGIN  //db, 24-01-11
                       ImportTradeItemRec.DELETEALL;
                       TradeErrorRec.DELETEALL;
                     END;
                   END;
                   IF ImportTradeItemRec.FINDLAST THEN
                     LastLine := ImportTradeItemRec."Line No.";

                   StartDateLog := CURRENTDATETIME;  //db, 08-03-13: C006329

                   //CALL 28784 sn
                   IF gvVendor <> '' THEN BEGIN
                     CheckVendor(gvVendor);
                     VendorName := VendorRec.Name;
                   END;
                   //CALL 28784 en
                   //LogMess := STRSUBSTNO(Text019, VendorRec.Name); //CALL 28784 old
                   LinesRead := 0;
                 END;

    OnPostXMLport=BEGIN
                    //CALL 28784 sn
                    LogMess := STRSUBSTNO(Text019, VendorName);
                    //CALL 28784 en

                    LogRec.UpdateLogbook(LogMess, LinesRead, 0, 0, StartDateLog);  //db, 08-03-13: C006329
                  END;

    Format=Variable Text;
    FieldDelimiter=<None>;
    FieldSeparator=[;];
    UseRequestPage=No;
  }
  ELEMENTS
  {
    { [{AE5B5AAC-6273-41CA-BDFF-3CF86A133295}];  ;Root                ;Element ;Text     }

    { [{27E5DA87-A510-4D25-A18D-6519B7B31221}];1 ;ImportTradeItem     ;Element ;Table   ;
                                                  SourceTable=Table11012333;
                                                  Import::OnAfterInitRecord=BEGIN
                                                                              "Import Trade Item".INIT;
                                                                            END;

                                                  Import::OnBeforeInsertRecord=BEGIN
                                                                                 IF iItem = '' THEN
                                                                                   currXMLport.SKIP;  //db, 12-06-14: C015877

                                                                                 LinesRead := LinesRead + 1;

                                                                                 iDesc := CharSetConversion.Ansi2Ascii(iDesc);  //db, 28-04-10: M18935
                                                                                 iDesc2 := CharSetConversion.Ansi2Ascii(iDesc2);  //db, 28-04-10: M18935

                                                                                 WITH ImportTradeItemRec DO BEGIN
                                                                                   INIT;
                                                                                   "Line No." := LastLine + 1;
                                                                                   IF iVendor <> '' THEN
                                                                                     Vendor := iVendor  //db, 23-10-08
                                                                                   ELSE
                                                                                     Vendor := gvVendor;
                                                                                   CheckVendor(Vendor);  //db, 23-10-08

                                                                                   //CALL 28784 sn
                                                                                   IF VendorName = '' THEN
                                                                                     VendorName := VendorRec.Name;
                                                                                   //CALL 28784 en

                                                                                   "Item Code" := iItem;
                                                                                   FillTradeItem;
                                                                                   INSERT(TRUE);
                                                                                   LastLine := "Line No.";
                                                                                 END;

                                                                                 RecRef.GETTABLE(ImportTradeItemRec);
                                                                                 XMLportStatusDialogMgt.ShowImportStatus(RecRef);

                                                                                 CheckBasicItem;
                                                                                 CheckDiscountTerm;

                                                                                 //Key fields should be filled to be able to show the progress of the process: if only these will be filled,
                                                                                 //then the other fields of the first record stay empty.
                                                                                 "Import Trade Item" := ImportTradeItemRec;

                                                                                 ClearInputVariables;

                                                                                 currXMLport.SKIP;
                                                                               END;
                                                                                }

    { [{D1934EC5-452E-4DD9-9FDB-1BACA7BDE795}];2 ;iItem               ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{997E86D6-9722-4F94-9ACE-D13950FC2AAD}];2 ;iGrossPriceTxt      ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  iGrossPriceTxt := CONVERTSTR(iGrossPriceTxt,'.',',');
                                                                                  FillEmptyTextWithZero(iGrossPriceTxt);
                                                                                  EVALUATE(iGrossPrice, iGrossPriceTxt);
                                                                                END;
                                                                                 }

    { [{E250BDBD-24EF-4EA5-B364-E5B0E52C2B8F}];2 ;filler1             ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{71E0851E-25D6-48C2-A8B9-445736D5B321}];2 ;iEffDateTxt         ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF (iEffDateTxt <> '') AND
                                                                                     (STRLEN(iEffDateTxt) >= 8)
                                                                                  THEN BEGIN
                                                                                    iEffDateTxt :=
                                                                                      COPYSTR(iEffDateTxt,7,2) + COPYSTR(iEffDateTxt,5,2) + COPYSTR(iEffDateTxt,1,4);
                                                                                    EVALUATE(iEffDate, iEffDateTxt);
                                                                                  END ELSE
                                                                                    iEffDate := 0D;
                                                                                END;
                                                                                 }

    { [{31F59119-1FB6-4ED7-AA53-02E5F256C5C3}];2 ;iEanCode            ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{B9379E4E-68FC-40D9-85D4-E641FCF59615}];2 ;iEanQuanTxt         ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(iEanQuanTxt);
                                                                                  EVALUATE(iEanQuan, iEanQuanTxt);
                                                                                END;
                                                                                 }

    { [{C1849DE0-7A04-499D-A4AF-91396C7D8C26}];2 ;filler2             ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{C410E8B7-C0A5-415B-8594-8D6D9AAAD289}];2 ;filler3             ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{3006AD01-2787-4DA1-99CA-BDA3C43C5AC3}];2 ;iAltItem            ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{D33B9F9D-CD90-4368-950F-FE0E77F0C5A9}];2 ;iDesc               ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{291C6BF7-67E9-43B5-8813-C25B82FCC04D}];2 ;filler4             ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{A9682316-C95F-4058-8B2D-29B46BA140B5}];2 ;filler5             ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{9AC1CB2C-D03A-417F-B424-62150BE708A5}];2 ;filler6             ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{D42EE295-8F17-4400-A860-B7BB436660FF}];2 ;filler7             ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{15DD97DE-CCC7-40EF-8B46-5C28E16BCAF7}];2 ;iDiscPercTxt        ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  iDiscPercTxt := CONVERTSTR(iDiscPercTxt,'.',',');
                                                                                  FillEmptyTextWithZero(iDiscPercTxt);
                                                                                  EVALUATE(iDiscPerc, iDiscPercTxt);
                                                                                END;
                                                                                 }

    { [{97DE92C3-D089-41A6-BDFF-0B7CC856F90F}];2 ;iDiscGroup          ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{E2D42237-93FD-4D90-B0AE-4216FBA9423B}];2 ;iNettPriceTxt       ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  iNettPriceTxt := CONVERTSTR(iNettPriceTxt,'.',',');
                                                                                  FillEmptyTextWithZero(iNettPriceTxt);
                                                                                  EVALUATE(iNettPrice, iNettPriceTxt);
                                                                                END;
                                                                                 }

    { [{3DBDED02-57F6-4A01-9CA4-B5A91123D8B9}];2 ;iPriceUnit          ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{2F014F6B-0652-4AF6-BD8A-E67014152D27}];2 ;iDelPeriodTxt       ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  iDelPeriodTxt := CONVERTSTR(iDelPeriodTxt,'.',',');
                                                                                  FillEmptyTextWithZero(iDelPeriodTxt);
                                                                                  EVALUATE(iDelPeriod, iDelPeriodTxt);
                                                                                END;
                                                                                 }

    { [{A52082A6-0405-4592-8871-D954499EB8FF}];2 ;iDesc2              ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{4B6CE1C8-B5D7-448D-ADD0-D7EEB60DF82B}];2 ;iAltRelation        ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{E84BC9DC-1939-4EE1-8904-C6D0D7122DE4}];2 ;iPackUnit           ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{BB44F394-52F8-462C-9A08-26FACE45AC1E}];2 ;iUnitFactorTxt      ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(iUnitFactorTxt);
                                                                                  EVALUATE(iUnitFactor, iUnitFactorTxt);
                                                                                END;
                                                                                 }

    { [{B8581128-557E-457A-9B09-9492034B10B8}];2 ;iSubOper            ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{C6CAF1C7-70DE-492B-9137-7AAB1963BA5C}];2 ;iExpired            ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{A23962B1-2660-4EDF-95D7-1829EABBE19D}];2 ;iChrgAmntTxt        ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  iChrgAmntTxt := CONVERTSTR(iChrgAmntTxt,'.',',');
                                                                                  FillEmptyTextWithZero(iChrgAmntTxt);
                                                                                  EVALUATE(iChrgAmnt, iChrgAmntTxt);
                                                                                END;
                                                                                 }

    { [{4B9160F6-F913-4C3B-A0C2-41727ACC1A98}];2 ;iVendor             ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{BEDAC81D-6D25-4D5A-B618-3AB2DF2688E9}];2 ;iApplUnit           ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{491404B9-023A-434F-ABE7-DCCB91CF4592}];2 ;iPriceQuanTxt       ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(iPriceQuanTxt);
                                                                                  EVALUATE(iPriceQuan, iPriceQuanTxt);
                                                                                END;
                                                                                 }

    { [{0CE6F9B1-2338-41DB-B295-7CC436D4F16C}];2 ;iFactorPricePurchUnitTxt;Element;Text ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  FillEmptyTextWithZero(iFactorPricePurchUnitTxt);
                                                                                  EVALUATE(iFactorPricePurchUnit, iFactorPricePurchUnitTxt);
                                                                                END;
                                                                                 }

    { [{DF61EC83-BE7F-4EBD-A187-87DC9E800CA0}];2 ;iMinOrderQuanTxt    ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  //CALL 24081 n
                                                                                  FillEmptyTextWithZero(iMinOrderQuanTxt);
                                                                                  EVALUATE(iMinOrderQuan, iMinOrderQuanTxt);
                                                                                END;
                                                                                 }

    { [{61A95B38-573C-4B98-B83C-02E4DF2D3A05}];2 ;iLotSizeQuanTxt     ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  //CALL 24081 n
                                                                                  FillEmptyTextWithZero(iLotSizeQuanTxt);
                                                                                  EVALUATE(iLotSizeQuan, iLotSizeQuanTxt);
                                                                                END;
                                                                                 }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      GabiSetup@1100525037 : Record 11012300;
      ImportSetup@1100525036 : Record 11012301;
      VendorRec@1100525035 : Record 11012304;
      BasicItemRec@1100525034 : Record 11012316;
      ImportTradeItemRec@1100525033 : Record 11012333;
      TradeErrorRec@1210190000 : Record 11012337;
      DiscHistRec@1100525032 : Record 11012312;
      PackRec@1100525031 : Record 11012309;
      RecRef@1100525018 : RecordRef;
      XMLportStatusDialogMgt@1100525019 : Codeunit 11130006;
      iUnitFactor@1100525017 : Decimal;
      iEanQuan@1100525016 : Decimal;
      iGrossPrice@1100525015 : Decimal;
      iNettPrice@1100525014 : Decimal;
      iDiscPerc@1100525013 : Decimal;
      iDelPeriod@1100525012 : Decimal;
      iChrgAmnt@1100525011 : Decimal;
      iPriceQuan@1100525010 : Decimal;
      iFactorPricePurchUnit@1210190001 : Decimal;
      iMinOrderQuan@1100525022 : Decimal;
      iLotSizeQuan@1100525021 : Decimal;
      iEffDate@1100525009 : Date;
      gvVendor@1100525007 : Code[20];
      gvCurrency@1100525006 : Code[10];
      LogRec@1100525005 : Record 11012335;
      StartDateLog@1100525020 : DateTime;
      LinesRead@1100525003 : Integer;
      LastLine@1100525002 : Integer;
      LogMess@1100525001 : Text[100];
      VendorName@1100525004 : Text[50];
      CharSetConversion@1100525000 : Codeunit 11012057;
      Text019@1100525008 : TextConst 'ENU="Import Trade Items (FEG-csv); Vendor %1"';

    LOCAL PROCEDURE FillEmptyTextWithZero@1100525013(VAR Text@1100525000 : Text[1024]);
    BEGIN
      IF DELCHR(Text,'<>=',' ') = '' THEN
        Text := '0';
    END;

    PROCEDURE DetermineSelection@1(lvVendor@11012000 : Code[20];lvCurrency@11012001 : Code[10]);
    BEGIN
      gvVendor := lvVendor;
      gvCurrency := lvCurrency;
    END;

    PROCEDURE FillTradeItem@1100485000();
    BEGIN
      WITH ImportTradeItemRec DO BEGIN
        "Feg-Item" := TRUE;
        "Gross Price" := iGrossPrice;
        "Nett Price" := iNettPrice;
        //"Discount Percentage" := iDiscPerc;
        IF iDiscGroup <> '' THEN  //db, 26-02-15
          "Discount Group Code" := iDiscGroup;

        "Item Description" := COPYSTR(iDesc, 1, MAXSTRLEN("Item Description"));
        "Item Description 2" := COPYSTR(iDesc2, 1, MAXSTRLEN("Item Description 2"));
        CASE GabiSetup."Adjust Item Description" OF
          GabiSetup."Adjust Item Description"::ToUpper:
            BEGIN
              "Item Description" := UPPERCASE("Item Description");
              "Item Description 2" := UPPERCASE("Item Description 2");
            END;
          GabiSetup."Adjust Item Description"::ToLower:
            BEGIN
              "Item Description" := LOWERCASE("Item Description");
              "Item Description 2" := LOWERCASE("Item Description 2");
            END;
        END;

        IF iEanCode <> '' THEN  //db, 26-02-15
          "GTIN Code (Item)" := iEanCode;
        IF iApplUnit <> '' THEN  //db, 10-06-10: M15051
          "Application ID" := iApplUnit
        ELSE
          "Application ID" := iPriceUnit;
        "Application Unit Quantity" := iUnitFactor;
        IF "Application Unit Quantity" = 0 THEN
          "Application Unit Quantity" := iEanQuan;
        IF "Application Unit Quantity" = 0 THEN
          "Application Unit Quantity" := 1;

        //db.sn, 21-10-11: M28103
        IF iFactorPricePurchUnit <> 0 THEN
          "Factor Price-Purchase Unit" := iFactorPricePurchUnit;
        IF "Factor Price-Purchase Unit" = 0 THEN
          "Factor Price-Purchase Unit" := 1;
        IF iMinOrderQuan <> 0 THEN                    //CALL 24081 n
          "Minimum Order Quantity" := iMinOrderQuan;  //CALL 24081 n
        IF "Minimum Order Quantity" = 0 THEN
          "Minimum Order Quantity" := 1;
        IF iLotSizeQuan <> 0 THEN                     //CALL 24081 n
          "Lot Size Quantity" := iLotSizeQuan;        //CALL 24081 n
        IF "Lot Size Quantity" = 0 THEN
          "Lot Size Quantity" := 1;
        //db.en, 21-10-11: M28103

        "Order ID" := iPackUnit;
        IF iPackUnit <> '' THEN BEGIN
          PackRec.SETRANGE("Unit (Navision)", iPackUnit);
          IF PackRec.FIND('-') THEN
            "Packaging Code" := PackRec.Code;
        END;

        "Delivery Period" := iDelPeriod;
        "Delivery Time ID" := 'DAYS';
        "Starting Date Item" := iEffDate;
        Expired := (iExpired = '1');

        IF iAltRelation <> '' THEN
          Manufacturer := iAltRelation;
        IF iAltItem <> '' THEN
          "Product Code" := iAltItem;
        IF iSubOper <> '' THEN
          "Sub Operation Code" := iSubOper;

        "Removal Contribution" := iChrgAmnt;
        "Import Date-Time" := ImportSetup."Import Date-Time";

        //Price history:
        "Starting Date Price" := iEffDate;
        IF iPriceQuan <> 0 THEN  //db, 10-06-10: M15051
          "Quantity Per Price" := iPriceQuan
        ELSE
          "Quantity Per Price" := iEanQuan;
        IF "Quantity Per Price"  = 0 THEN
          "Quantity Per Price" := 1;
        "Price ID" := iPriceUnit;
      END;
    END;

    PROCEDURE CheckBasicItem@1100485003();
    BEGIN
      IF (iAltRelation = '') OR (iAltItem = '') THEN EXIT;

      WITH BasicItemRec DO BEGIN
        INIT;
        Manufacturer := iAltRelation;
        "Product Code" := iAltItem;
        IF (ImportTradeItemRec.Vendor = ImportTradeItemRec.Manufacturer) AND
           (ImportTradeItemRec."Item Code" = ImportTradeItemRec."Product Code") THEN BEGIN
          "Product Description" := COPYSTR(iDesc, 1, MAXSTRLEN("Product Description"));
          "Product Description 2" := COPYSTR(iDesc2, 1, MAXSTRLEN("Product Description 2"));
        END;
        IF NOT INSERT(TRUE) THEN MODIFY(TRUE);
      END;
    END;

    PROCEDURE CheckDiscountTerm@1100485002();
    BEGIN
      IF iDiscGroup <> '' THEN EXIT;

      IF iDiscPerc = 0 THEN BEGIN
        IF iNettPrice = 0 THEN EXIT;
        IF iGrossPrice = iNettPrice THEN EXIT;
      END;

      WITH DiscHistRec DO BEGIN
        INIT;
        Vendor := ImportTradeItemRec.Vendor;  //db, 23-10-08
        "Discount Group" := '';
        "Item Code" := iItem;
        "Starting Date" := iEffDate;
        Description := iDesc;
        IF iDiscPerc <> 0 THEN
          "Discount Percentage 1" := iDiscPerc
        ELSE
          "Purchase Price" := iNettPrice;
        IF NOT INSERT(TRUE) THEN MODIFY(TRUE);
      END;
    END;

    PROCEDURE CheckVendor@1100525000(VAR ioVendor@1100525000 : Code[20]);
    BEGIN
      //db, 23-10-08
      VendorRec.GET(ioVendor);
      IF VendorRec."Alternative Vendor Code" <> '' THEN BEGIN
        ioVendor := VendorRec."Alternative Vendor Code";
        VendorRec.GET(ioVendor);
      END;
    END;

    PROCEDURE ClearInputVariables@1100525001();
    BEGIN
      iItem := '';
      iGrossPriceTxt := '';
      iEffDateTxt := '';
      iEanCode := '';
      iEanQuanTxt := '';
      iAltItem := '';
      iDesc := '';
      iDiscPercTxt := '';
      iDiscGroup := '';
      iNettPriceTxt := '';
      iPriceUnit := '';
      iDelPeriodTxt := '';
      iDesc2 := '';
      iAltRelation := '';
      iPackUnit := '';
      iUnitFactorTxt := '';
      iSubOper := '';
      iExpired := '';
      iChrgAmntTxt := '';
      iVendor := '';
      iApplUnit := '';
      iPriceQuanTxt := '';
      iLotSizeQuan := 0;   //CALL 24081 n
      iMinOrderQuan := 0;  //CALL 24081 n
    END;

    BEGIN
    {
      CC: Dataport 11012355

      D. Borkent, 23-05-2005:
      - import Feg-format as trade item as a result of expired table Feg-items

      Original format (version 3.60):
        Field                        Start  Width
      - Item No.                         1  20
      - Gross Purch. Price (excl.VAT)   21  12
      - Currency                        33   3
      - Effective Date                  36   8
      - EAN Code                        44  14
      - EAN-Quantity                    58   7
      - Small-Package                   65   7
      - Large-Package                   72   7
      - Alternative Item Code           79  20
      - Item Description                99  35
      - Statistics Code Vendor         134   2
      - Gross Sales Price (incl.VAT)   136  12
      - Advice Sales Price (incl.VAT)  148  12
      - Advice Sales Price (excl.VAT)  160  12
      - Discount Percentage            172   4
      - Discount Code                  176   4
      - Nett Purch. Price (excl.VAT)   180  12
      - Price Unit                     192   4
      - Delivery Time (days)           196   3
      - Comment                        199  50
    }
    END.
  }
}

