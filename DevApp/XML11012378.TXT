OBJECT XMLport 11012378 Export Cost Objects Payroll
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Export Cost Objects;
    Direction=Export;
    DefaultFieldsValidation=No;
    OnInitXMLport=BEGIN
                    ProjectSetup.GET;

                    IF ProjectSetup."Salary Application" <> ProjectSetup."Salary Application"::Payroll THEN
                      ERROR(Text001, ProjectSetup.TABLECAPTION);

                    PathText := ProjectSetup."Pathname Files to Salary";
                    currXMLport.FILENAME(PathText + Text002);
                  END;

    OnPreXMLport=BEGIN
                   IF FileMgt.ClientFileExists(currXMLport.FILENAME) THEN
                     IF NOT FileMgt.ExistingFileMustBeReplaced(currXMLport.FILENAME, TRUE) THEN
                       ERROR('');
                 END;

    Format=Fixed Text;
    UseRequestPage=No;
  }
  ELEMENTS
  {
    { [{7296F9FB-B83D-4C4E-918F-B4E3099E47EE}];  ;Root                ;Element ;Text     }

    { [{CDFD3A50-16C8-4134-871A-5DBB8ECF7824}];1 ;DimensionValue      ;Element ;Table   ;
                                                  SourceTable=Table349;
                                                  SourceTableView=SORTING(Field2);
                                                  Export::OnPreXMLItem=BEGIN
                                                                         "Dimension Value".SETRANGE("Global Dimension No.", 2);
                                                                       END;

                                                  Export::OnAfterGetRecord=VAR
                                                                             RecRef@1100528400 : RecordRef;
                                                                           BEGIN
                                                                             RecRef.GETTABLE("Dimension Value");
                                                                             XMLportStatusDialogMgt.ShowExportStatus(RecRef);

                                                                             CodeTxt := fill("Dimension Value".Code, 6, ' ', '<');
                                                                           END;
                                                                            }

    { [{EFE752BC-1347-4CC0-8335-D211C4E842AE}];2 ;CodeTxt             ;Element ;Text    ;
                                                  Width=8 }

    { [{65A414D5-A4EB-491F-8E43-2AA23B749938}];2 ;Name                ;Element ;Field   ;
                                                  DataType=Text;
                                                  SourceField=Dimension Value::Name;
                                                  Width=30 }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      PathText@1100528401 : Text[50];
      ProjectSetup@1100528400 : Record 315;
      Text001@1100528404 : TextConst 'ENU=Check %1 to activate Payroll as payroll application.';
      Text002@1100528403 : TextConst 'ENU=task.txt';
      Text003@1100528402 : TextConst 'ENU=Only < and > are allowed as parameter in function outline';
      XMLportStatusDialogMgt@1100528405 : Codeunit 11130006;
      FileMgt@1100528406 : Codeunit 419;

    PROCEDURE fill@4(String@11012001 : Text[80];TotLength@11012002 : Integer;WithCharacter@11012003 : Text[1];TrueBool@11012004 : Char) Text@11012000 : Text[80];
    VAR
      Length@11012005 : Integer;
    BEGIN
      Length:=STRLEN(String);
      IF TotLength>Length THEN BEGIN
        CASE TrueBool OF
          '<': String:=PADSTR('',TotLength-Length,WithCharacter)+String;
          '>': String:=String+PADSTR('',TotLength-Length,WithCharacter);
          ELSE ERROR(Text003);
        END;
      END;

      EXIT(String);
    END;

    BEGIN
    END.
  }
}

