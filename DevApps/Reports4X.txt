OBJECT Report 491 Delete Invd Blnkt Purch Orders
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00,4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Delete Invd Blnkt Purch Orders;
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 4458;    ;DataItem;                    ;
               DataItemTable=Table38;
               DataItemTableView=SORTING(Document Type,No.)
                                 WHERE(Document Type=CONST(Blanket Order));
               ReqFilterHeadingML=ENU=Blanket Purchase Order;
               OnPreDataItem=BEGIN
                               Window.OPEN(Text000);
                             END;

               OnAfterGetRecord=VAR
                                  ApprovalsMgmt@1000 : Codeunit 1535;
                                BEGIN
                                  Window.UPDATE(1,"No.");

                                  PurchLine.RESET;
                                  PurchLine.SETRANGE("Document Type","Document Type");
                                  PurchLine.SETRANGE("Document No.","No.");
                                  PurchLine.SETFILTER("Quantity Invoiced",'<>0');
                                  IF PurchLine.FINDFIRST THEN BEGIN
                                    PurchLine.SETRANGE("Quantity Invoiced");
                                    PurchLine.SETFILTER("Outstanding Quantity",'<>0');
                                    IF NOT PurchLine.FINDFIRST THEN BEGIN
                                      PurchLine.SETRANGE("Outstanding Quantity");
                                      PurchLine.SETFILTER("Qty. Rcd. Not Invoiced",'<>0');
                                      IF NOT PurchLine.FINDFIRST THEN BEGIN
                                        PurchLine.LOCKTABLE;
                                        IF NOT PurchLine.FINDFIRST THEN BEGIN
                                          PurchLine.SETRANGE("Qty. Rcd. Not Invoiced");
                                          PurchLine2.SETRANGE("Blanket Order No.","No.");
                                          IF NOT PurchLine2.FINDFIRST THEN BEGIN
                                            PurchLine.DELETEALL;

                                            PurchCommentLine.SETRANGE("Document Type","Document Type");
                                            PurchCommentLine.SETRANGE("No.","No.");
                                            PurchCommentLine.DELETEALL;

                                            ApprovalsMgmt.DeleteApprovalEntry(DATABASE::"Purchase Header","Document Type","No.");

                                            Delete4PSAdditions; //**4PS.n

                                            DELETE;

                                            COMMIT;
                                          END;
                                        END;
                                      END;
                                    END;
                                  END;
                                END;

               ReqFilterFields=No.,Buy-from Vendor No.,Pay-to Vendor No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Processing purch. orders #1##########';
      PurchLine@1001 : Record 39;
      PurchLine2@1002 : Record 39;
      PurchCommentLine@1003 : Record 43;
      Window@1005 : Dialog;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

OBJECT Report 492 Copy Purchase Document
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.45243,4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Copy Purchase Document;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  PurchSetup.GET;
                  CopyDocMgt.SetProperties(
                    IncludeHeader,RecalculateLines,FALSE,FALSE,FALSE,PurchSetup."Exact Cost Reversing Mandatory",FALSE,FALSE);
                  CopyDocMgt.CopyPurchDoc(DocType,DocNo,PurchHeader)
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF DocNo <> '' THEN BEGIN
                     CASE DocType OF
                       DocType::Quote:
                         IF FromPurchHeader.GET(FromPurchHeader."Document Type"::Quote,DocNo) THEN;
                       DocType::"Blanket Order":
                         IF FromPurchHeader.GET(FromPurchHeader."Document Type"::"Blanket Order",DocNo) THEN;
                       DocType::Order:
                         IF FromPurchHeader.GET(FromPurchHeader."Document Type"::Order,DocNo) THEN;
                       DocType::Invoice:
                         IF FromPurchHeader.GET(FromPurchHeader."Document Type"::Invoice,DocNo) THEN;
                       DocType::"Return Order":
                         IF FromPurchHeader.GET(FromPurchHeader."Document Type"::"Return Order",DocNo) THEN;
                       DocType::"Credit Memo":
                         IF FromPurchHeader.GET(FromPurchHeader."Document Type"::"Credit Memo",DocNo) THEN;
                       DocType::"Posted Receipt":
                         IF FromPurchRcptHeader.GET(DocNo) THEN
                           FromPurchHeader.TRANSFERFIELDS(FromPurchRcptHeader);
                       DocType::"Posted Invoice":
                         IF FromPurchInvHeader.GET(DocNo) THEN
                           FromPurchHeader.TRANSFERFIELDS(FromPurchInvHeader);
                       DocType::"Posted Return Shipment":
                         IF FromReturnShptHeader.GET(DocNo) THEN
                           FromPurchHeader.TRANSFERFIELDS(FromReturnShptHeader);
                       DocType::"Posted Credit Memo":
                         IF FromPurchCrMemoHeader.GET(DocNo) THEN
                           FromPurchHeader.TRANSFERFIELDS(FromPurchCrMemoHeader);
                     END;
                     IF FromPurchHeader."No." = '' THEN
                       DocNo := '';
                   END;
                   ValidateDocNo;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 3   ;2   ;Field     ;
                  Name=DocumentType;
                  CaptionML=ENU=Document Type;
                  OptionCaptionML=ENU=Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo;
                  SourceExpr=DocType;
                  OnValidate=BEGIN
                               DocNo := '';
                               ValidateDocNo;
                             END;
                              }

      { 8   ;2   ;Field     ;
                  Name=DocumentNo;
                  CaptionML=ENU=Document No.;
                  SourceExpr=DocNo;
                  OnValidate=BEGIN
                               ValidateDocNo;
                             END;

                  OnLookup=BEGIN
                             LookupDocNo;
                           END;
                            }

      { 5   ;2   ;Field     ;
                  Name=BuyfromVendorNo;
                  CaptionML=ENU=Buy-from Vendor No.;
                  SourceExpr=FromPurchHeader."Buy-from Vendor No.";
                  Editable=FALSE }

      { 7   ;2   ;Field     ;
                  Name=BuyfromVendorName;
                  CaptionML=ENU=Buy-from Vendor Name;
                  SourceExpr=FromPurchHeader."Buy-from Vendor Name";
                  Editable=FALSE }

      { 1   ;2   ;Field     ;
                  Name=IncludeHeader_Options;
                  CaptionML=ENU=Include Header;
                  SourceExpr=IncludeHeader;
                  OnValidate=BEGIN
                               ValidateIncludeHeader;
                             END;
                              }

      { 4   ;2   ;Field     ;
                  Name=RecalculateLines;
                  CaptionML=ENU=Recalculate Lines;
                  SourceExpr=RecalculateLines;
                  OnValidate=BEGIN
                               IF (DocType = DocType::"Posted Receipt") OR (DocType = DocType::"Posted Return Shipment") THEN
                                 RecalculateLines := TRUE;
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      PurchHeader@1007 : Record 38;
      FromPurchHeader@1010 : Record 38;
      FromPurchRcptHeader@1012 : Record 120;
      FromPurchInvHeader@1014 : Record 122;
      FromReturnShptHeader@1008 : Record 6650;
      FromPurchCrMemoHeader@1016 : Record 124;
      PurchSetup@1003 : Record 312;
      CopyDocMgt@1033 : Codeunit 6620;
      DocType@1024 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
      DocNo@1025 : Code[20];
      IncludeHeader@1026 : Boolean;
      RecalculateLines@1027 : Boolean;
      Text000@1002 : TextConst 'ENU=The price information may not be reversed correctly, if you copy a %1. If possible, copy a %2 instead or use %3 functionality.';
      Text001@1001 : TextConst 'ENU=Undo Receipt';
      Text002@1000 : TextConst 'ENU=Undo Return Shipment';
      Text003@1004 : TextConst 'ENU=Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';

    PROCEDURE SetPurchHeader@2(VAR NewPurchHeader@1000 : Record 38);
    BEGIN
      NewPurchHeader.TESTFIELD("No.");
      PurchHeader := NewPurchHeader;
    END;

    LOCAL PROCEDURE ValidateDocNo@1();
    VAR
      DocType2@1000 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
    BEGIN
      IF DocNo = '' THEN
        FromPurchHeader.INIT
      ELSE
        IF DocNo <> FromPurchHeader."No." THEN BEGIN
          FromPurchHeader.INIT;
          CASE DocType OF
            DocType::Quote,
            DocType::"Blanket Order",
            DocType::Order,
            DocType::Invoice,
            DocType::"Return Order",
            DocType::"Credit Memo":
              FromPurchHeader.GET(CopyDocMgt.PurchHeaderDocType(DocType),DocNo);
            DocType::"Posted Receipt":
              BEGIN
                FromPurchRcptHeader.GET(DocNo);
                FromPurchHeader.TRANSFERFIELDS(FromPurchRcptHeader);
                IF PurchHeader."Document Type" IN
                   [PurchHeader."Document Type"::"Return Order",PurchHeader."Document Type"::"Credit Memo"]
                THEN BEGIN
                  DocType2 := DocType2::"Posted Invoice";
                  MESSAGE(Text000,SELECTSTR(1 + DocType,Text003),SELECTSTR(1 + DocType2,Text003),Text001);
                END;
              END;
            DocType::"Posted Invoice":
              BEGIN
                FromPurchInvHeader.GET(DocNo);
                CheckVendLegdEntryInProposal(FromPurchInvHeader); //**4PS.n Call C001905
                FromPurchHeader.TRANSFERFIELDS(FromPurchInvHeader);
              END;
            DocType::"Posted Return Shipment":
              BEGIN
                FromReturnShptHeader.GET(DocNo);
                FromPurchHeader.TRANSFERFIELDS(FromReturnShptHeader);
                IF PurchHeader."Document Type" IN
                   [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::Invoice]
                THEN BEGIN
                  DocType2 := DocType2::"Posted Credit Memo";
                  MESSAGE(Text000,SELECTSTR(1 + DocType,Text003),SELECTSTR(1 + DocType2,Text003),Text002);
                END;
              END;
            DocType::"Posted Credit Memo":
              BEGIN
                FromPurchCrMemoHeader.GET(DocNo);
                FromPurchHeader.TRANSFERFIELDS(FromPurchCrMemoHeader);
              END;
          END;
        END;
      FromPurchHeader."No." := '';

      IncludeHeader :=
        (DocType IN [DocType::"Posted Invoice",DocType::"Posted Credit Memo"]) AND
        ((DocType = DocType::"Posted Credit Memo") <>
         (PurchHeader."Document Type" = PurchHeader."Document Type"::"Credit Memo")) AND
        (PurchHeader."Buy-from Vendor No." IN [FromPurchHeader."Buy-from Vendor No.",'']);
      ValidateIncludeHeader;
    END;

    LOCAL PROCEDURE LookupDocNo@3();
    BEGIN
      CASE DocType OF
        DocType::Quote,
        DocType::"Blanket Order",
        DocType::Order,
        DocType::Invoice,
        DocType::"Return Order",
        DocType::"Credit Memo":
          BEGIN
            FromPurchHeader.FILTERGROUP := 0;
            FromPurchHeader.SETRANGE("Document Type",CopyDocMgt.PurchHeaderDocType(DocType));
            IF PurchHeader."Document Type" = CopyDocMgt.PurchHeaderDocType(DocType) THEN
              FromPurchHeader.SETFILTER("No.",'<>%1',PurchHeader."No.");
            FromPurchHeader.FILTERGROUP := 2;
            FromPurchHeader."Document Type" := CopyDocMgt.PurchHeaderDocType(DocType);
            FromPurchHeader."No." := DocNo;
            IF (DocNo = '') AND (PurchHeader."Buy-from Vendor No." <> '') THEN
              IF FromPurchHeader.SETCURRENTKEY("Document Type","Buy-from Vendor No.") THEN BEGIN
                FromPurchHeader."Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
                IF FromPurchHeader.FIND('=><') THEN;
              END;
            IF PAGE.RUNMODAL(0,FromPurchHeader) = ACTION::LookupOK THEN
              DocNo := FromPurchHeader."No.";
          END;
        DocType::"Posted Receipt":
          BEGIN
            FromPurchRcptHeader."No." := DocNo;
            IF (DocNo = '') AND (PurchHeader."Buy-from Vendor No." <> '') THEN
              IF FromPurchRcptHeader.SETCURRENTKEY("Buy-from Vendor No.") THEN BEGIN
                FromPurchRcptHeader."Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
                IF FromPurchRcptHeader.FIND('=><') THEN;
              END;
            IF PAGE.RUNMODAL(0,FromPurchRcptHeader) = ACTION::LookupOK THEN
              DocNo := FromPurchRcptHeader."No.";
          END;
        DocType::"Posted Invoice":
          BEGIN
            FromPurchInvHeader."No." := DocNo;
            IF (DocNo = '') AND (PurchHeader."Buy-from Vendor No." <> '') THEN
              IF FromPurchInvHeader.SETCURRENTKEY("Buy-from Vendor No.") THEN BEGIN
                FromPurchInvHeader."Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
                IF FromPurchInvHeader.FIND('=><') THEN;
              END;
            FromPurchInvHeader.FILTERGROUP(2);
            FromPurchInvHeader.SETRANGE("Prepayment Invoice",FALSE);
            FromPurchInvHeader.FILTERGROUP(0);
            IF PAGE.RUNMODAL(0,FromPurchInvHeader) = ACTION::LookupOK THEN
              DocNo := FromPurchInvHeader."No.";
          END;
        DocType::"Posted Return Shipment":
          BEGIN
            FromReturnShptHeader."No." := DocNo;
            IF (DocNo = '') AND (PurchHeader."Buy-from Vendor No." <> '') THEN
              IF FromReturnShptHeader.SETCURRENTKEY("Buy-from Vendor No.") THEN BEGIN
                FromReturnShptHeader."Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
                IF FromReturnShptHeader.FIND('=><') THEN;
              END;
            IF PAGE.RUNMODAL(0,FromReturnShptHeader) = ACTION::LookupOK THEN
              DocNo := FromReturnShptHeader."No.";
          END;
        DocType::"Posted Credit Memo":
          BEGIN
            FromPurchCrMemoHeader."No." := DocNo;
            IF (DocNo = '') AND (PurchHeader."Buy-from Vendor No." <> '') THEN
              IF FromPurchCrMemoHeader.SETCURRENTKEY("Buy-from Vendor No.") THEN BEGIN
                FromPurchCrMemoHeader."Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
                IF FromPurchCrMemoHeader.FIND('=><') THEN;
              END;
            FromPurchCrMemoHeader.FILTERGROUP(2);
            FromPurchCrMemoHeader.SETRANGE("Prepayment Credit Memo",FALSE);
            FromPurchCrMemoHeader.FILTERGROUP(0);
            IF PAGE.RUNMODAL(0,FromPurchCrMemoHeader) = ACTION::LookupOK THEN
              DocNo := FromPurchCrMemoHeader."No.";
          END;
      END;
      ValidateDocNo;
    END;

    LOCAL PROCEDURE ValidateIncludeHeader@4();
    BEGIN
      RecalculateLines :=
        (DocType IN [DocType::"Posted Receipt",DocType::"Posted Return Shipment"]) OR NOT IncludeHeader;
    END;

    PROCEDURE InitializeRequest@5(NewDocType@1001 : Option;NewDocNo@1000 : Code[20];NewIncludeHeader@1002 : Boolean;NewRecalcLines@1003 : Boolean);
    BEGIN
      DocType := NewDocType;
      DocNo := NewDocNo;
      IncludeHeader := NewIncludeHeader;
      RecalculateLines := NewRecalcLines;
    END;

    PROCEDURE CheckVendLegdEntryInProposal@1100525000(FromPurchInvHeader@1100525001 : Record 122);
    VAR
      VendLedgEntry@1100525000 : Record 25;
    BEGIN
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

OBJECT Report 493 Carry Out Action Msg. - Req.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW17.00,4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Transfer Requisition Lines to Purchase Orders;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   //**4PS.sn
                   StartProcess := FALSE;
                   PurchSetup.GET;
                   IF NOT PurchSetup."Allow Link Item Docs to Purch." THEN
                     LinkItemDocsToOrder := FALSE;
                   LinkItemDocsToOrderEnabled := PurchSetup."Allow Link Item Docs to Purch.";
                   //**4PS.en
                 END;

    OnPreReport=BEGIN
                  IF NOT gvActivateFromAdviceOrder THEN  //**4PS.n DP00137
                    UseOneJnl(ReqLine);
                  StartProcess := TRUE;  //**4PS.n
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   PurchOrderHeader."Order Date" := WORKDATE;
                   PurchOrderHeader."Posting Date" := WORKDATE;
                   PurchOrderHeader."Expected Receipt Date" := WORKDATE;
                   IF ReqWkshTmpl.Recurring THEN
                     EndOrderDate := WORKDATE
                   ELSE
                     EndOrderDate := 0D;

                   //**4PS.sn
                   SelMethod := SelMethod::"Ship-to Location";
                   SelMethod2 := SelMethod2::"Ship-to Location";

                   IF UserRec.GET(USERID) THEN
                     PurchOrderHeader."Purchaser Code" := UserRec.Purchaser;
                   //**4PS.en

                   TransferCommentLines := TRUE; // **4PS MVOS M28906

                   //CALL 28843 sn
                   Selmethod1VISIBLE := NOT gvActivateFromAdviceOrder;
                   Selmethod2VISIBLE := gvActivateFromAdviceOrder;
                   //CALL 28843 en
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 6   ;2   ;Field     ;
                  CaptionML=ENU=Print Orders/Create ICM files;
                  SourceExpr=PrintOrders }

      { 1210190004;2;Field  ;
                  CaptionML=ENU=Process Based On Electronic Order Type;
                  SourceExpr=ProcBasedOnElectronicOrderType }

      { 1210190001;2;Field  ;
                  Name=SelMethod1;
                  CaptionML=ENU=Collect per;
                  OptionCaptionML=ENU=Vendor,Project,Ship-to Location,Work Order;
                  SourceExpr=SelMethod;
                  Visible=Selmethod1VISIBLE;
                  Enabled=Selmethod1VISIBLE;
                  OnValidate=BEGIN
                               IF NOT gvActivateFromSOAdviceOrder THEN
                                 IF SelMethod = SelMethod::"Work Order" THEN
                                   ERROR(Text11012003);
                             END;
                              }

      { 1100409002;2;Field  ;
                  Name=SelMethod2;
                  CaptionML=ENU=Collect per;
                  OptionCaptionML=ENU=Vendor,Project/Service,Project/Service-Ship-to Location,Ship-to Location,Work Order;
                  SourceExpr=SelMethod2;
                  Visible=Selmethod2VISIBLE;
                  Enabled=Selmethod2VISIBLE;
                  OnValidate=BEGIN
                               IF NOT gvActivateFromSOAdviceOrder THEN
                                 IF SelMethod2 = SelMethod2::"Work Order" THEN
                                   ERROR(Text11012003);
                             END;
                              }

      { 1210190002;2;Field  ;
                  CaptionML=ENU=Split by Blanket Orders or not;
                  SourceExpr=SortPurchaseByBlanketOrders }

      { 1100528400;2;Field  ;
                  CaptionML=ENU=Continue After Unprocessed Line;
                  SourceExpr=ContinueAfterUnprocessedLine }

      { 11012000;2;Group    ;
                  CaptionML=ENU=Copy to Purchase Order }

      { 8   ;3   ;Field     ;
                  CaptionML=ENU=Your Reference;
                  SourceExpr=PurchOrderHeader."Your Reference" }

      { 11012002;3;Field    ;
                  CaptionML=ENU=Purchaser Code;
                  SourceExpr=PurchOrderHeader."Purchaser Code";
                  TableRelation=Salesperson/Purchaser }

      { 1100529802;3;Field  ;
                  CaptionML=ENU=Transfer Comment Lines;
                  SourceExpr=TransferCommentLines }

      { 1100528000;3;Field  ;
                  CaptionML=ENU=Link Item Documents to Order;
                  SourceExpr=LinkItemDocsToOrder;
                  Visible=LinkItemDocsToOrderEnabled;
                  Enabled=LinkItemDocsToOrderEnabled }

      { 1100409001;2;Group  ;
                  CaptionML=ENU=Filter receipt date;
                  Visible=gvActivateFromAdviceOrder }

      { 1100409000;3;Field  ;
                  CaptionML=ENU=Period;
                  SourceExpr=PeriodFilter;
                  OnLookup=BEGIN
                             DateSelectionManagement.GetPeriod(PeriodFilter);
                             Text := PeriodFilter;
                           END;
                            }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=cannot be filtered when you create orders';
      Text001@1001 : TextConst 'ENU=There is nothing to create.';
      Text003@1003 : TextConst 'ENU=You are now in worksheet %1.';
      ReqWkshTmpl@1007 : Record 244;
      ReqWkshName@1008 : Record 245;
      ReqLine@1009 : Record 246;
      PurchOrderHeader@1010 : Record 38;
      PurchSetup@1100528000 : Record 312;
      ReqWkshMakeOrders@1011 : Codeunit 333;
      EndOrderDate@1012 : Date;
      PrintOrders@1013 : Boolean;
      ProcBasedOnElectronicOrderType@1210190005 : Boolean;
      TempJnlBatchName@1014 : Code[10];
      HideDialog@1017 : Boolean;
      SelMethod@1210190000 : 'Vendor,Project,Ship-to Location,Work Order';
      SelMethod2@1100409008 : 'Vendor,Project,Project-Ship-to Location,Ship-to Location,Work Order';
      UserRec@1210190002 : Record 91;
      gAskForNoSerie@1210190003 : Boolean;
      gNoSeries@1210190004 : Code[10];
      Text11012000@1100485000 : TextConst 'ENU=The orders (%1) have been created.';
      SkipBatchFilter@1100525000 : Boolean;
      SortPurchaseByBlanketOrders@1210190001 : Boolean;
      TransferCommentLines@1100529800 : Boolean;
      gvActivateFromAdviceOrder@1100528900 : Boolean INDATASET;
      Text11012001@1100409000 : TextConst 'ENU=%1 order lines have been cancelled.';
      Text11012002@1100409001 : TextConst 'ENU=%1 order lines have been changed.';
      gvActivateFromSOAdviceOrder@1100528601 : Boolean;
      StartProcess@1100528800 : Boolean;
      Text11012003@1100528600 : TextConst 'ENU=Collect Per not allowed for Work Order';
      LinkItemDocsToOrder@1100528001 : Boolean;
      PeriodFilter@1100409005 : Text[250];
      DateSelectionManagement@1100409004 : Codeunit 11130005;
      DateFilterStart@1100409003 : Date;
      DateFilterEnd@1100409002 : Date;
      Selmethod1VISIBLE@1100409006 : Boolean INDATASET;
      Selmethod2VISIBLE@1100409007 : Boolean INDATASET;
      LinkItemDocsToOrderEnabled@1100528002 : Boolean INDATASET;
      ContinueAfterUnprocessedLine@1100528400 : Boolean;

    PROCEDURE SetReqWkshLine@1(VAR NewReqLine@1000 : Record 246);
    BEGIN
      //**4PS.sn
      NewReqLine.MARKEDONLY(TRUE);  //db, 17-08-07 (melding 6999)
      IF NOT NewReqLine.FINDFIRST THEN
        NewReqLine.MARKEDONLY(FALSE);
      //**4PS.en
      ReqLine.COPY(NewReqLine);
      ReqWkshTmpl.GET(NewReqLine."Worksheet Template Name");
    END;

    PROCEDURE GetReqWkshLine@6(VAR NewReqLine@1000 : Record 246);
    BEGIN
      NewReqLine.COPY(ReqLine);
    END;

    PROCEDURE SetReqWkshName@2(VAR NewReqWkshName@1000 : Record 245);
    BEGIN
      ReqWkshName.COPY(NewReqWkshName);
      ReqWkshTmpl.GET(NewReqWkshName."Worksheet Template Name");
    END;

    LOCAL PROCEDURE UseOneJnl@3(VAR ReqLine@1000 : Record 246);
    VAR
      StrategicPurchMgt@1100525000 : Codeunit 11020211;
      TrCancelCounter@1100409006 : Integer;
      OrdCancelCounter@1100409005 : Integer;
      TrChangeCounter@1100409004 : Integer;
      OrdChangeCounter@1100409003 : Integer;
      TrNewCounter@1100409002 : Integer;
      OrdNewCounter@1100409001 : Integer;
      FirstOrderNo@1100528400 : Code[20];
      LastOrderNo@1100528401 : Code[20];
      NewPurchaseOrdersTxt@1100409000 : Text[50];
    BEGIN
      WITH ReqLine DO BEGIN
        StrategicPurchMgt.CheckStratPurchForReqLine(ReqLine); //**4PS.n
        ReqWkshTmpl.GET("Worksheet Template Name");
        IF ReqWkshTmpl.Recurring AND (GETFILTER("Order Date") <> '') THEN
          FIELDERROR("Order Date",Text000);
        TempJnlBatchName := "Journal Batch Name";

        //**4PS.sn
        IF gAskForNoSerie THEN
          ReqWkshMakeOrders.SetAskForNoSerie(gNoSeries);
        ReqWkshMakeOrders.SetMethod(SelMethod);
        //**4PS.en
        ReqWkshMakeOrders.Set(PurchOrderHeader,EndOrderDate,PrintOrders);
        ReqWkshMakeOrders.SetBasedOnElectronicOrderType(ProcBasedOnElectronicOrderType);
        //**4PS.sn
        IF SkipBatchFilter THEN
          ReqWkshMakeOrders.SetReqWrkshtPerTemplate;
        IF LinkItemDocsToOrder AND LinkItemDocsToOrderEnabled THEN
          ReqWkshMakeOrders.SetLinkItemDocsToOrder();
        //**4PS.en
        //**4PSmg.sn, 21-06-11: M27713
        IF NOT SortPurchaseByBlanketOrders THEN
          ReqWkshMakeOrders.SetSkipSortPurchase;
        //**4PSmg.en

        ReqWkshMakeOrders.SetTransferCommentLines(TransferCommentLines); // **4PS MVOS
        //**4PS.sn
        IF ContinueAfterUnprocessedLine THEN
          ReqWkshMakeOrders.SetPlanningResiliency;
        //**4PS.en
        ReqWkshMakeOrders.CarryOutBatchAction(ReqLine);

        IF "Line No." = 0 THEN
          MESSAGE(Text001)
        ELSE
          IF NOT HideDialog THEN BEGIN  //**4PS.n
            ReqWkshMakeOrders.GetNumbers(
              TrCancelCounter,OrdCancelCounter,TrChangeCounter,
              OrdChangeCounter,TrNewCounter,OrdNewCounter,
              FirstOrderNo,LastOrderNo,NewPurchaseOrdersTxt);     //**4PS melding C002134
            IF NewPurchaseOrdersTxt <> '' THEN BEGIN
              MESSAGE(Text11012000, Description);  //**4PS.n
            END ELSE BEGIN
              IF (TrCancelCounter + OrdCancelCounter) <> 0 THEN
                MESSAGE(Text11012001, (TrCancelCounter + OrdCancelCounter));
              IF (TrChangeCounter + OrdChangeCounter) <> 0 THEN
                MESSAGE(Text11012002, (TrChangeCounter + OrdChangeCounter));
            END;
            IF TempJnlBatchName <> "Journal Batch Name" THEN
              MESSAGE(
                Text003,
                "Journal Batch Name");
          END;  //**4PS.n

        IF NOT FIND('=><') OR (TempJnlBatchName <> "Journal Batch Name") THEN BEGIN
          RESET;
          FILTERGROUP := 2;
          SETRANGE("Worksheet Template Name","Worksheet Template Name");
          SETRANGE("Journal Batch Name","Journal Batch Name");
          FILTERGROUP := 0;
          "Line No." := 1;
        END;
      END;
    END;

    PROCEDURE InitializeRequest@5(ExpirationDate@1000 : Date;OrderDate@1001 : Date;PostingDate@1002 : Date;ExpectedReceiptDate@1003 : Date;YourRef@1004 : Text[50]);
    BEGIN
      EndOrderDate := ExpirationDate;
      PurchOrderHeader."Order Date" := OrderDate;
      PurchOrderHeader."Posting Date" := PostingDate;
      PurchOrderHeader."Expected Receipt Date" := ExpectedReceiptDate;
      PurchOrderHeader."Your Reference" := YourRef;
    END;

    PROCEDURE SetHideDialog@7(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    PROCEDURE SetAskForNoSerie@1210190001(INoSeries@1210190005 : Code[10]);
    BEGIN
      //**4PS.n
      gAskForNoSerie := TRUE;
      gNoSeries := INoSeries;
    END;

    PROCEDURE SetReqWrkshtPerTemplate@1100525003();
    BEGIN
      //**4PS
      SkipBatchFilter := TRUE;
    END;

    PROCEDURE SetActivateFromAdviceOrder@1100528900();
    BEGIN
      //**4PS
      gvActivateFromAdviceOrder := TRUE;  //DP00137
    END;

    PROCEDURE SetActivateFromSOAdviceOrder@1100528600();
    BEGIN
      SetActivateFromAdviceOrder;
      gvActivateFromSOAdviceOrder := TRUE;
    END;

    PROCEDURE GetOptionsForAdviceOrder@1100528902(VAR oStartProcess@1100528800 : Boolean;VAR varSelMethod2@1100528900 : 'Vendor,Project,Project-Ship-to Location,Ship-to Location';VAR varPurchOrderHeader@1100528901 : Record 38;VAR varPrintOrders@1100525000 : Boolean;VAR varProcBasedOnElectronicOrderType@1100525001 : Boolean;VAR varTransferCommentLines@1100525002 : Boolean;VAR varPeriodFilterTxt@1100409000 : Text[30];VAR oLinkItemDocsToOrder@1100528000 : Boolean);
    BEGIN
      //**4PS
      oStartProcess := StartProcess;  // C003664.n
      varSelMethod2 := SelMethod2;    //DP00137
      varPrintOrders:= PrintOrders;
      varProcBasedOnElectronicOrderType := ProcBasedOnElectronicOrderType;
      varTransferCommentLines := TransferCommentLines;
      varPurchOrderHeader := PurchOrderHeader;
      varPeriodFilterTxt := PeriodFilter;
      oLinkItemDocsToOrder := (LinkItemDocsToOrder AND LinkItemDocsToOrderEnabled);
    END;

    BEGIN
    {
      DP00137: this report is used for old procedure (ReqLine, codeunit 333) and new procedure (AdviceOrder, codeunit 11012041)
    }
    END.
  }
  RDLDATA
  {
  }
}

OBJECT Report 496 Batch Post Purchase Orders
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00,4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Batch Post Purchase Orders;
    ProcessingOnly=Yes;
    OnInitReport=VAR
                   PurchSetup@1100485000 : Record 312;
                 BEGIN
                   //**4PS.sn
                   PurchSetup.GET;
                   ReplacePostingDate := PurchSetup."Replace Posting Date";
                   ReplaceDocumentDate := PurchSetup."Replace Document Date";
                   IF PurchSetup."Replace Posting Date" OR PurchSetup."Replace Document Date" THEN
                     PostingDateReq := WORKDATE;
                   //**4PS.en
                 END;

  }
  DATASET
  {
    { 4458;    ;DataItem;                    ;
               DataItemTable=Table38;
               DataItemTableView=SORTING(Document Type,No.)
                                 WHERE(Document Type=CONST(Order));
               ReqFilterHeadingML=ENU=Purchase Order;
               OnPreDataItem=BEGIN
                               IF ReplacePostingDate AND (PostingDateReq = 0D) THEN
                                 ERROR(Text000);

                               //**4PS.sn
                               FILTERGROUP(10);
                               SETFILTER(Status, '..%1', Status::Released); //Skip Closed Orders
                               FILTERGROUP(0);
                               // dp00556.sn
                               PurchSetup.GET;
                               IF PurchSetup."Release Purch Orders Required" THEN BEGIN
                                 FILTERGROUP(9);
                                 SETRANGE(Status, Status::Released);
                                 FILTERGROUP(0);
                               END;
                               // dp00556.en
                               //**4PS.en

                               CounterTotal := COUNT;
                               Window.OPEN(Text001);
                             END;

               OnAfterGetRecord=VAR
                                  ApprovalsMgmt@1000 : Codeunit 1535;
                                BEGIN
                                  IF ApprovalsMgmt.IsPurchaseApprovalsWorkflowEnabled("Purchase Header") OR (Status = Status::"Pending Approval") THEN
                                    CurrReport.SKIP;

                                  IF CalcInvDisc THEN
                                    CalculateInvoiceDiscount;

                                  Counter := Counter + 1;
                                  Window.UPDATE(1,"No.");
                                  Window.UPDATE(2,ROUND(Counter / CounterTotal * 10000,1));
                                  Receive := ReceiveReq;
                                  Invoice := InvReq;
                                  CLEAR(PurchPost);
                                  //**4PS.sn
                                  IF ("Purchase Order Type" = "Purchase Order Type"::"Return Order") THEN
                                    "Purchase Header".Invoice := FALSE;
                                  PurchPost.SetNoErrorNothingToPost(TRUE);
                                  PurchPost.SetUptoPromisedReceiveDate(UptoPromisedReceiveDate);
                                  //**4PS.en
                                  PurchPost.SetPostingDate(ReplacePostingDate,ReplaceDocumentDate,PostingDateReq);
                                  IF IsApprovedForPostingBatch THEN
                                    IF PurchPost.RUN("Purchase Header") THEN BEGIN
                                      CounterOK := CounterOK + 1;
                                      IF MARKEDONLY THEN
                                        MARK(FALSE);
                                    END;
                                END;

               OnPostDataItem=BEGIN
                                Window.CLOSE;
                                MESSAGE(Text002,CounterOK,CounterTotal);
                              END;

               ReqFilterFields=No.,Status }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   InitValue;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=Receive;
                  CaptionML=ENU=Receive;
                  SourceExpr=ReceiveReq }

      { 2   ;2   ;Field     ;
                  Name=Invoice;
                  CaptionML=ENU=Invoice;
                  SourceExpr=InvReq;
                  Enabled=InvReqEnabled }

      { 1100525000;2;Field  ;
                  CaptionML=ENU=Up to Receive Date Order Line;
                  SourceExpr=[UptoPromisedReceiveDate ] }

      { 3   ;2   ;Field     ;
                  Name=PostingDate;
                  CaptionML=ENU=Posting Date;
                  SourceExpr=PostingDateReq }

      { 4   ;2   ;Field     ;
                  Name=ReplacePostingDate;
                  CaptionML=ENU=Replace Posting Date;
                  SourceExpr=ReplacePostingDate;
                  OnValidate=BEGIN
                               IF ReplacePostingDate THEN
                                 MESSAGE(Text003);
                             END;
                              }

      { 5   ;2   ;Field     ;
                  Name=ReplaceDocumentDate;
                  CaptionML=ENU=Replace Document Date;
                  SourceExpr=ReplaceDocumentDate }

      { 7   ;2   ;Field     ;
                  Name=CalcInvDiscount;
                  CaptionML=ENU=Calc. Inv. Discount;
                  SourceExpr=CalcInvDisc;
                  OnValidate=BEGIN
                               PurchSetup.GET;
                               PurchSetup.TESTFIELD("Calc. Inv. Discount",FALSE);
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Enter the posting date.';
      Text001@1001 : TextConst 'ENU=Posting orders  #1########## @2@@@@@@@@@@@@@';
      Text002@1002 : TextConst 'ENU=%1 orders out of a total of %2 have now been posted.';
      PurchLine@1003 : Record 39;
      PurchSetup@1004 : Record 312;
      PurchCalcDisc@1005 : Codeunit 70;
      PurchPost@1006 : Codeunit 90;
      Window@1007 : Dialog;
      ReceiveReq@1008 : Boolean;
      InvReq@1009 : Boolean;
      PostingDateReq@1010 : Date;
      CounterTotal@1011 : Integer;
      Counter@1012 : Integer;
      CounterOK@1013 : Integer;
      ReplacePostingDate@1014 : Boolean;
      ReplaceDocumentDate@1015 : Boolean;
      CalcInvDisc@1016 : Boolean;
      Text003@1017 : TextConst 'ENU=The exchange rate associated with the new posting date on the purchase header will not apply to the purchase lines.';
      UptoPromisedReceiveDate@1100525000 : Date;
      InvReqEnabled@1100525001 : Boolean INDATASET;

    LOCAL PROCEDURE CalculateInvoiceDiscount@1();
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Purchase Header"."Document Type");
      PurchLine.SETRANGE("Document No.","Purchase Header"."No.");
      IF PurchLine.FINDFIRST THEN
        IF PurchCalcDisc.RUN(PurchLine) THEN BEGIN
          "Purchase Header".GET("Purchase Header"."Document Type","Purchase Header"."No.");
          COMMIT;
        END;
    END;

    PROCEDURE InitializeRequest@2(NewReceiveReq@1006 : Boolean;NewInvReq@1003 : Boolean;NewPostingDateReq@1001 : Date;NewReplacePostingDate@1002 : Boolean;NewReplaceDocumentDate@1004 : Boolean;NewCalcInvDisc@1005 : Boolean);
    BEGIN
      InitValue;
      ReceiveReq := NewReceiveReq;
      InvReq := NewInvReq;
      PostingDateReq := NewPostingDateReq;
      ReplacePostingDate := NewReplacePostingDate;
      ReplaceDocumentDate := NewReplaceDocumentDate;
      IF NewCalcInvDisc THEN
        PurchSetup.TESTFIELD("Calc. Inv. Discount",FALSE);
      CalcInvDisc := NewCalcInvDisc;
    END;

    LOCAL PROCEDURE InitValue@3();
    BEGIN
      PurchSetup.GET;
      CalcInvDisc := PurchSetup."Calc. Inv. Discount";
      //**4PS.sn
      IF NOT PurchSetup."Invoice Purchase Orders" THEN BEGIN
        InvReq := FALSE;
        InvReqEnabled := FALSE;
      END ELSE
        InvReqEnabled := TRUE;
      //**4PS.en
    END;

    BEGIN
    {
      4PS
      Invoice of a purchase order depends on the setup of a project.
      14-06-2005, Henk Sebens, Defaults for replacing data from purchases setup.
    }
    END.
  }
  RDLDATA
  {
  }
}

OBJECT Report 497 Batch Post Purchase Invoices
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00,4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Batch Post Purchase Invoices;
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 4458;    ;DataItem;                    ;
               DataItemTable=Table38;
               DataItemTableView=SORTING(Document Type,No.)
                                 WHERE(Document Type=CONST(Invoice));
               ReqFilterHeadingML=ENU=Purchase Invoice;
               OnPreDataItem=BEGIN
                               IF ReplacePostingDate AND (PostingDateReq = 0D) THEN
                                 ERROR(Text000);

                               CounterTotal := COUNT;
                               IF GUIALLOWED THEN //**4PS.n
                                 Window.OPEN(Text001);
                             END;

               OnAfterGetRecord=VAR
                                  ApprovalsMgmt@1000 : Codeunit 1535;
                                BEGIN
                                  IF ApprovalsMgmt.IsPurchaseApprovalsWorkflowEnabled("Purchase Header") OR (Status = Status::"Pending Approval") THEN
                                    CurrReport.SKIP;

                                  IF CalcInvDisc THEN
                                    CalculateInvoiceDiscount;

                                  Counter := Counter + 1;
                                  IF GUIALLOWED THEN BEGIN //**4PS.n
                                    Window.UPDATE(1,"No.");
                                    Window.UPDATE(2,ROUND(Counter / CounterTotal * 10000,1));
                                  END; //**4PS.n
                                  CLEAR(PurchPost);
                                  PurchPost.SetPostingDate(ReplacePostingDate,ReplaceDocumentDate,PostingDateReq);
                                  IF PurchPost.RUN("Purchase Header") THEN BEGIN
                                    CounterOK := CounterOK + 1;
                                    IF MARKEDONLY THEN
                                      MARK(FALSE);
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                IF GUIALLOWED THEN BEGIN //**4PS.n
                                  Window.CLOSE;
                                  MESSAGE(Text002,CounterOK,CounterTotal);
                                END; //**4PS.n
                              END;

               ReqFilterFields=No.,Status }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   PurchSetup.GET;
                   CalcInvDisc := PurchSetup."Calc. Inv. Discount";
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=PostingDate;
                  CaptionML=ENU=Posting Date;
                  SourceExpr=PostingDateReq }

      { 2   ;2   ;Field     ;
                  Name=ReplacePostingDate;
                  CaptionML=ENU=Replace Posting Date;
                  SourceExpr=ReplacePostingDate;
                  OnValidate=BEGIN
                               IF ReplacePostingDate THEN
                                 MESSAGE(Text003);
                             END;
                              }

      { 3   ;2   ;Field     ;
                  CaptionML=ENU=Replace Document Date;
                  SourceExpr=ReplaceDocumentDate }

      { 5   ;2   ;Field     ;
                  CaptionML=ENU=Calc. Inv. Discount;
                  SourceExpr=CalcInvDisc;
                  OnValidate=BEGIN
                               PurchSetup.GET;
                               PurchSetup.TESTFIELD("Calc. Inv. Discount",FALSE);
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Enter the posting date.';
      Text001@1001 : TextConst 'ENU=Posting invoices   #1########## @2@@@@@@@@@@@@@';
      Text002@1002 : TextConst 'ENU=%1 invoices out of a total of %2 have now been posted.';
      PurchLine@1003 : Record 39;
      PurchSetup@1004 : Record 312;
      PurchCalcDisc@1005 : Codeunit 70;
      PurchPost@1006 : Codeunit 90;
      Window@1007 : Dialog;
      PostingDateReq@1008 : Date;
      CounterTotal@1009 : Integer;
      Counter@1010 : Integer;
      CounterOK@1011 : Integer;
      ReplacePostingDate@1012 : Boolean;
      ReplaceDocumentDate@1013 : Boolean;
      CalcInvDisc@1014 : Boolean;
      Text003@1015 : TextConst 'ENU=The exchange rate associated with the new posting date on the purchase header will not apply to the purchase lines.';

    LOCAL PROCEDURE CalculateInvoiceDiscount@1();
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Purchase Header"."Document Type");
      PurchLine.SETRANGE("Document No.","Purchase Header"."No.");
      IF PurchLine.FINDFIRST THEN
        IF PurchCalcDisc.RUN(PurchLine) THEN BEGIN
          "Purchase Header".GET("Purchase Header"."Document Type","Purchase Header"."No.");
          COMMIT;
        END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

OBJECT Report 498 Batch Post Purch. Credit Memos
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00,4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Batch Post Purch. Credit Memos;
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 4458;    ;DataItem;                    ;
               DataItemTable=Table38;
               DataItemTableView=SORTING(Document Type,No.)
                                 WHERE(Document Type=CONST(Credit Memo));
               ReqFilterHeadingML=ENU=Purchase Credit Memo;
               OnPreDataItem=BEGIN
                               IF ReplacePostingDate AND (PostingDateReq = 0D) THEN
                                 ERROR(Text000);

                               CounterTotal := COUNT;
                               IF GUIALLOWED THEN //**4PS.n
                                 Window.OPEN(Text001);
                             END;

               OnAfterGetRecord=VAR
                                  ApprovalsMgmt@1000 : Codeunit 1535;
                                BEGIN
                                  IF ApprovalsMgmt.IsPurchaseApprovalsWorkflowEnabled("Purchase Header") OR (Status = Status::"Pending Approval") THEN
                                    CurrReport.SKIP;

                                  IF CalcInvDisc THEN
                                    CalculateInvoiceDiscount;

                                  Counter := Counter + 1;
                                  IF GUIALLOWED THEN BEGIN //**4PS.n
                                    Window.UPDATE(1,"No.");
                                    Window.UPDATE(2,ROUND(Counter / CounterTotal * 10000,1));
                                  END; //**4PS.n
                                  CLEAR(PurchPost);
                                  PurchPost.SetPostingDate(ReplacePostingDate,ReplaceDocumentDate,PostingDateReq);
                                  IF PurchPost.RUN("Purchase Header") THEN BEGIN
                                    CounterOK := CounterOK + 1;
                                    IF MARKEDONLY THEN
                                      MARK(FALSE);
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                IF GUIALLOWED THEN BEGIN //**4PS.n
                                  Window.CLOSE;
                                  MESSAGE(Text002,CounterOK,CounterTotal);
                                END; //**4PS.n
                              END;

               ReqFilterFields=No.,Status }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   PurchSetup.GET;
                   CalcInvDisc := PurchSetup."Calc. Inv. Discount";
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=PostingDate;
                  CaptionML=ENU=Posting Date;
                  SourceExpr=PostingDateReq }

      { 2   ;2   ;Field     ;
                  Name=ReplacePostingDate;
                  CaptionML=ENU=Replace Posting Date;
                  SourceExpr=ReplacePostingDate;
                  OnValidate=BEGIN
                               IF ReplacePostingDate THEN
                                 MESSAGE(Text003);
                             END;
                              }

      { 3   ;2   ;Field     ;
                  Name=ReplaceDocumentDate;
                  CaptionML=ENU=Replace Document Date;
                  SourceExpr=ReplaceDocumentDate }

      { 5   ;2   ;Field     ;
                  Name=CalcInvDiscount;
                  CaptionML=ENU=Calc. Inv. Discount;
                  SourceExpr=CalcInvDisc;
                  OnValidate=BEGIN
                               PurchSetup.GET;
                               PurchSetup.TESTFIELD("Calc. Inv. Discount",FALSE);
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Enter the posting date.';
      Text001@1001 : TextConst 'ENU=Posting credit memos  #1########## @2@@@@@@@@@@@@@';
      Text002@1002 : TextConst 'ENU=%1 credit memos out of a total of %2 have now been posted.';
      PurchLine@1003 : Record 39;
      PurchSetup@1004 : Record 312;
      PurchCalcDisc@1005 : Codeunit 70;
      PurchPost@1006 : Codeunit 90;
      Window@1007 : Dialog;
      PostingDateReq@1008 : Date;
      CounterTotal@1009 : Integer;
      Counter@1010 : Integer;
      CounterOK@1011 : Integer;
      ReplacePostingDate@1014 : Boolean;
      ReplaceDocumentDate@1015 : Boolean;
      CalcInvDisc@1016 : Boolean;
      Text003@1012 : TextConst 'ENU=The exchange rate associated with the new posting date on the purchase header will not apply to the purchase lines.';

    LOCAL PROCEDURE CalculateInvoiceDiscount@1();
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Purchase Header"."Document Type");
      PurchLine.SETRANGE("Document No.","Purchase Header"."No.");
      IF PurchLine.FINDFIRST THEN
        IF PurchCalcDisc.RUN(PurchLine) THEN BEGIN
          "Purchase Header".GET("Purchase Header"."Document Type","Purchase Header"."No.");
          COMMIT;
        END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

OBJECT Report 499 Delete Invoiced Purch. Orders
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00,NAVSE9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Delete Invoiced Purch. Orders;
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 4458;    ;DataItem;                    ;
               DataItemTable=Table38;
               DataItemTableView=SORTING(Document Type,No.)
                                 WHERE(Document Type=CONST(Order));
               ReqFilterHeadingML=ENU=Purchase Order;
               OnPreDataItem=BEGIN
                               Window.OPEN(Text000);
                             END;

               OnAfterGetRecord=VAR
                                  ReservePurchLine@1000 : Codeunit 99000834;
                                  ApprovalsMgmt@1001 : Codeunit 1535;
                                BEGIN
                                  Window.UPDATE(1,"No.");

                                  AllLinesDeleted := TRUE;
                                  ItemChargeAssgntPurch.RESET;
                                  ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
                                  ItemChargeAssgntPurch.SETRANGE("Document No.","No.");
                                  PurchLine.RESET;
                                  PurchLine.SETRANGE("Document Type","Document Type");
                                  PurchLine.SETRANGE("Document No.","No.");
                                  PurchLine.SETFILTER("Quantity Invoiced",'<>0');
                                  IF PurchLine.FIND('-') THEN BEGIN
                                    PurchLine.SETRANGE("Quantity Invoiced");
                                    PurchLine.SETFILTER("Outstanding Quantity",'<>0');
                                    IF NOT PurchLine.FIND('-') THEN BEGIN
                                      PurchLine.SETRANGE("Outstanding Quantity");
                                      PurchLine.SETFILTER("Qty. Rcd. Not Invoiced",'<>0');
                                      IF NOT PurchLine.FIND('-') THEN BEGIN
                                        PurchLine.LOCKTABLE;
                                        IF NOT PurchLine.FIND('-') THEN BEGIN
                                          PurchLine.SETRANGE("Qty. Rcd. Not Invoiced");
                                          IF PurchLine.FIND('-') THEN
                                            REPEAT
                                              PurchLine.CALCFIELDS("Qty. Assigned");
                                              IF ((PurchLine."Qty. Assigned" = PurchLine."Quantity Invoiced") AND
                                                  (PurchLine."Qty. Assigned" <> 0)) OR
                                                 (PurchLine.Type <> PurchLine.Type::"Charge (Item)")
                                              THEN BEGIN
                                                IF PurchLine.Type = PurchLine.Type::"Charge (Item)" THEN BEGIN
                                                  ItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLine."Line No.");
                                                  ItemChargeAssgntPurch.DELETEALL;
                                                END;
                                                IF PurchLine.HASLINKS THEN
                                                  PurchLine.DELETELINKS;

                                                PurchLine.DELETE;
                                              END ELSE
                                                AllLinesDeleted := FALSE;
                                              UpdateAssSalesOrder;
                                            UNTIL PurchLine.NEXT = 0;

                                          IF AllLinesDeleted THEN BEGIN
                                            PurchPost.DeleteHeader(
                                              "Purchase Header",PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,
                                              ReturnShptHeader,PrepmtPurchInvHeader,PrepmtPurchCrMemoHeader);

                                            ReservePurchLine.DeleteInvoiceSpecFromHeader("Purchase Header");

                                            PurchCommentLine.SETRANGE("Document Type","Document Type");
                                            PurchCommentLine.SETRANGE("No.","No.");
                                            PurchCommentLine.DELETEALL;

                                            WhseRequest.SETRANGE("Source Type",DATABASE::"Purchase Line");
                                            WhseRequest.SETRANGE("Source Subtype","Document Type");
                                            WhseRequest.SETRANGE("Source No.","No.");
                                            WhseRequest.DELETEALL(TRUE);
                                            DeleteInwardHeader;

                                            ApprovalsMgmt.DeleteApprovalEntry(DATABASE::"Purchase Header","Document Type","No.");

                                            IF HASLINKS THEN
                                              DELETELINKS;

                                            DELETE;
                                          END;
                                          COMMIT;
                                        END;
                                      END;
                                    END;
                                  END;
                                END;

               ReqFilterFields=No.,Buy-from Vendor No.,Pay-to Vendor No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Processing purch. orders #1##########';
      PurchLine@1001 : Record 39;
      PurchRcptHeader@1011 : Record 120;
      PurchInvHeader@1010 : Record 122;
      PurchCrMemoHeader@1009 : Record 124;
      ReturnShptHeader@1008 : Record 6650;
      PrepmtPurchInvHeader@1014 : Record 122;
      PrepmtPurchCrMemoHeader@1013 : Record 124;
      PurchCommentLine@1002 : Record 43;
      ItemChargeAssgntPurch@1005 : Record 5805;
      WhseRequest@1007 : Record 5765;
      PurchPost@1012 : Codeunit 90;
      Window@1004 : Dialog;
      AllLinesDeleted@1006 : Boolean;

    LOCAL PROCEDURE UpdateAssSalesOrder@1001();
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      IF NOT PurchLine."Special Order" THEN
        EXIT;
      WITH SalesLine DO BEGIN
        RESET;
        SETRANGE("Special Order Purchase No.",PurchLine."Document No.");
        SETRANGE("Special Order Purch. Line No.",PurchLine."Line No.");
        SETRANGE("Purchasing Code",PurchLine."Purchasing Code");
        IF FINDFIRST THEN BEGIN
          "Special Order Purchase No." := '';
          "Special Order Purch. Line No." := 0;
          MODIFY;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

